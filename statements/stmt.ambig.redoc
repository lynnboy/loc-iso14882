[section#stmt.ambig
    [:en] Ambiguity resolution
    [:zh_CN] 歧义消解

[%  [:en] ambiguity[!declaration versus expression]
    [:zh_CN] 歧义[!声明式和表达式之间的～] ]
]

[para]
[:en]
There is an ambiguity in the grammar involving [~expression-statement]s and
[~declaration]s:
[:zh_CN]
涉及[~表达式语句]和[~声明式]的文法中存在歧义：

[:en]
An [~expression-statement] with a function-style explicit type conversion
([#expr.type.conv]) as its leftmost subexpression can be indistinguishable from
a [~declaration] where the first [~declarator] starts with a [`(].
[:zh_CN]
以函数风格的显式类型转换（[#expr.type.conv]）作为其最左边的子表达式的
[~表达式语句]，可能与由 [`(] 开始其第一个[~声明符]的[~声明式]之间无法区分。

[:en] In those cases the [~statement] is considered a [~declaration], except as
specified above.
[:zh_CN] 除了以上给出之外，这些情况中的语句都被当做声明式。

[para]
[begin:note]
[:en]
If the [~statement] cannot syntactically be a [~declaration], there is no
ambiguity, so this rule does not apply.
[:zh_CN]
如果该[~语句]在语法上不能为[~声明式]，则不存在歧义，且不适用这条规则。

[:en]
In some cases, the whole [~statement] needs to be examined to determine whether
this is the case.
[:zh_CN]
某些情况下，需要检查整个[~语句]以确定它是否属于这种情况。

[:en]
This resolves the meaning of many examples.
[:zh_CN]
这样可以消除许多例子中的歧义。

[begin:example]
[:en]
Assuming [`T] is a [~simple-type-specifier] ([#dcl.type]),
[:zh_CN]
假设 [`T] 是[~简单类型说明符]（[#dcl.type]），

[codeblock]
T(a)->m = 7;        // [:en] expression-statement \
                    [:zh_CN] 表达式语句
T(a)++;             // [:en] expression-statement \
                    [:zh_CN] 表达式语句
T(a,5)<<c;          // [:en] expression-statement \
                    [:zh_CN] 表达式语句

T(*d)(int);         //  [:en] declaration \
                        [:zh_CN] 声明式
T(e)[5];            //  [:en] declaration \
                        [:zh_CN] 声明式
T(f) = { 1, 2 };    //  [:en] declaration \
                        [:zh_CN] 声明式
T(*g)(double(3));   //  [:en] declaration \
                        [:zh_CN] 声明式
[codeblock:end]

[:en]
In the last example above, [`g], which is a pointer to [`T], is initialized to
[`double(3)].
[:zh_CN]
在上面最后一个例子中，指向 [`T] 的指针 [`g] 被初始化为 [`double(3)]。

[:en]
This is of course ill-formed for semantic reasons, but that does not affect the
syntactic analysis.
[:zh_CN]
这在语义上讲当然是非良构的，但这并不影响语法分析。
[end:example]

[para:~]
[:en]
The remaining cases are [~declaration]s.
[:zh_CN]
其余的情况都是声明式。

[begin:example]
[codeblock]
class T {
  // ...
public:
  T();
  T(int);
  T(int, int);
};
T(a);               //  [:en] declaration \
                        [:zh_CN] 声明式
T(*b)();            //  [:en] declaration \
                        [:zh_CN] 声明式
T(c)=7;             //  [:en] declaration \
                        [:zh_CN] 声明式
T(d),e,f=3;         //  [:en] declaration \
                        [:zh_CN] 声明式
extern int h;
T(g)(h,2);          //  [:en] declaration \
                        [:zh_CN] 声明式
[codeblock:end]
[end:example]
[end:note]

[para]
[:en]
The disambiguation is purely syntactic; that is, the meaning of the names
occurring in such a statement, beyond whether they are [~type-name]s or not, is
not generally used in or changed by the disambiguation.
[:zh_CN]
歧义消解纯粹是语法上的；就是说，出现于这种语句中的名字的含义，除了它们是否是
[~类型名]之外，通常并不会在歧义消解过程中被使用或被改变。

[:en]
Class templates are instantiated as necessary to determine if a qualified name
is a [~type-name].
[:zh_CN]
为确定一个限定名是否是[~类型名]，当需要时将会对类模板进行实例化。

[:en]
Disambiguation precedes parsing, and a statement disambiguated as a declaration
may be an ill-formed declaration.
[:zh_CN]
歧义消解在语法解析之前进行，被歧义消解为声明式的语句可能是个非良构的声明式。

[:en]
If, during parsing, lookup finds that a name in a template argument is bound to
(part of) the declaration being parsed, the program is ill-formed.
[:zh_CN]
在进行语法解析时，如果名字查找找到某个模板形参中的名字绑定到正在解析的声明式
（的一部分），则程序非良构。

[:en]
No diagnostic is required.
[:zh_CN]
无须诊断。

[begin:note]
[:en]
This can occur only when the name is declared earlier in the declaration.
[:zh_CN]
这种情况只有当名字在声明式中已于之前声明过才会发生。
[end:note]

[begin:example]
[codeblock]
struct T1 {
  T1 operator()(int x) { return T1(x); }
  int operator=(int x) { return x; }
  T1(int) { }
};
struct T2 { T2(int) { } };
int a, (*(*b)(T2))(int), c, d;

void f() {
  // [:en] disambiguation requires this to be parsed as a declaration: \
  [:zh_CN] 歧义消解要求它被解析为声明式
  T1(a) = 3,
  T2(4),                        // [:en] [`T2] will be declared as a variable of type [`T1], but this will not \
                                [:zh_CN] [`T2] 将被声明为类型 [`T1] 的变量，但这样就
  (*(*b)(T2(c)))(int(d));       // [:en@~] allow the last part of the declaration to parse properly, \
                                [:zh_CN@~] 导致了此声明式的最后部分无法正确地进行解析，
                                // [:en@~] since it depends on [`T2] being a type-name \
                                [:zh_CN@~] 因为它依赖于 [`T2] 是个类型名
}
[codeblock:end]
[end:example]

[para]
[:en] A syntactically ambiguous statement that can syntactically be
a [~declaration] with an outermost [~declarator] with a [~trailing-return-type]
is considered a [~declaration] only if it starts with [`:key auto].
[:zh_CN] 一种有语法歧义的语句，语法上可当做最外围[~声明符]带有[~尾部返回类型]
的[~声明式]，当且仅当它以 [`:key auto] 开头时，被当作是[~声明式]。

[begin:example]
[codeblock]
struct M;
struct S {
  S* operator()();
  int N;
  int M;

  void mem(S s) {
    auto(s)()->M;               // [:en] expression, [`S::M] hides [`::M] \
                                [:zh_CN] 表达式，[`S::M] 隐藏了 [`::M]
  }
};

void f(S s) {
  {
    auto(s)()->N;               // [:en] expression [:zh_CN] 表达式
    auto(s)()->M;               // [:en] function declaration [:zh_CN] 函数声明式
  }
  {
    S(s)()->N;                  // [:en] expression [:zh_CN] 表达式
    S(s)()->M;                  // [:en] expression [:zh_CN] 表达式
  }
}
[codeblock:end]
[end:example]
