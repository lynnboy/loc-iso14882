[section#stmt.ranged
    [:en] The range-based [`for] statement
    [:zh_CN] 基于范围的 [`for] 语句

[%  [:en] statement[!range based [`for]]
    [:zh_CN] 语句[!基于范围的 [`for]～] ]
]

[para]
[:en]
The range-based [`for] statement
[:zh_CN]
基于范围的 [`for] 语句

[syntax:explanation]
[`for] [`(] [~:opt init-statement] [~for-range-declaration] [`:] [~for-range-initializer] [`)]
[~statement]
[syntax:end]

[:en@~]
is equivalent to
[:zh_CN@~]
等价于

[codeblock:notation
    [!:var begin-expr end-expr]
    [!:gram init-statement for-range-initializer for-range-declaration statement]
]
{
    [~:opt init-statement]
    auto && __range = [~for-range-initializer];
    auto __begin = [*begin-expr];
    auto __end = [*end-expr];
    for ( ; __begin != __end; ++__begin ) {
        [~for-range-declaration] = *__begin;
        [~statement]
    }
}
[codeblock:end]

[:en@~]
where
[:zh_CN@~]
其中

[list]
[item]
[:en]
if the [~for-range-initializer] is an [~expression], it is regarded as if it
were surrounded by parentheses (so that a comma operator cannot be reinterpreted
as delimiting two [~init-declarator]s);
[:zh_CN]
如果 [~for-范围初始化式]是个[~表达式]，则将之当做是由括号所包围的（这样可以让
逗号运算符不会被解释成分隔两个[~带初始化声明符]）；

[item]
[:en]
[`__range], [`__begin], and [`__end] are variables defined for exposition
only; and
[:zh_CN]
[`__range]、[`__begin] 和 [`__end] 是仅为便于说明而定义的变量；并且

[item]
[:en]
[*begin-expr] and [*end-expr] are determined as follows:
[:zh_CN]
根据下述规则确定 [*begin-expr] 和 [*end-expr]：

[list]
[item]
[:en]
if the [~for-range-initializer] is an expression of array type [`R],
[*begin-expr] and [*end-expr] are [`__range] and [`__range + __bound],
respectively, where [`__bound] is the array bound.
[:zh_CN]
如果[~for-范围初始化式]是数组类型 [`R] 的表达式，则 [*begin-expr] 和 [*end-expr]
分别为 [`__range] 和 [`__range + __bound]，其中 [`__bound] 为数组的边界。

[:en]
If [`R] is an array of unknown bound or an array of incomplete type, the
program is ill-formed;
[:zh_CN]
若 [`R] 是未知边界的数组，或者是不完整类型的数组，则程序非良构；

[item]
[:en]
if the [~for-range-initializer] is an expression of class type [`C], the
[~unqualified-id]s [`begin] and [`end] are looked up in the scope of [`C] as if
by class member access lookup ([#basic.lookup.classref]), and if both find at
least one declaration, [*begin-expr] and [*end-expr] are [`__range.begin()] and
[`__range.end()], respectively;
[:zh_CN]
如果[~for-范围初始化式]是类类型 [`C] 的表达式，则在类 [`_RangeT] 的作用域中，
如同进行类成员访问查找（[#basic.lookup.classref]）一样，对[~未限定标识] [`begin]
和 [`end] 进行查找，而且如果二者都找到至少一个声明式，那么 [*begin-expr] 和
[*end-expr] 则分别为 [`__range.begin()] 和 [`__range.end()]；

[item]
[:en]
otherwise, [*begin-expr] and [*end-expr] are [`begin(__range)] and
[`end(__range)], respectively, where [`begin] and [`end] are looked up in the
associated namespaces ([#basic.lookup.argdep]).
[:zh_CN]
否则，[*begin-expr] 和 [*end-expr] 分别为 [`begin(__range)] 和 [`end(__range)]，
其中 [`begin] 和 [`end] 在关联的命名空间（[#basic.lookup.argdep]）中查找。

[enter:note]
[:en]
Ordinary unqualified lookup ([#basic.lookup.unqual]) is not performed.
[:zh_CN]
不进行常规的未限定查找（[#basic.lookup.unqual]）。
[exit:note]
[list:end]
[list:end]

[enter:example]
[codeblock]
int array[5] = { 1, 2, 3, 4, 5 };
for (int& x : array)
  x *= 2;
[codeblock:end]
[exit:example]

[para]
[:en]
In the [~decl-specifier-seq] of a [~for-range-declaration], each
[~decl-specifier] shall be either a [~type-specifier] or [`constexpr].
[:zh_CN]
在 [~for-范围声明式]的[~声明说明符序列]中，每个[~声明说明符]应当要么是一个[~类型
说明符]，要么是 [`constexpr]。

[:en]
The [~decl-specifier-seq] shall not define a class or enumeration.
[:zh_CN]
其[~声明说明符序列]不能定义类或枚举。
