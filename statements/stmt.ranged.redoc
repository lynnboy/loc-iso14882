[section#stmt.ranged
    [:en] The range-based [`:key for] statement
    [:zh_CN] 基于范围的 [`:key for] 语句

[%  [:en] statement[!range based [`for]]
    [:zh_CN] 语句[!基于范围的 [`for]～] ]
]

[para]
[:en] The range-based [`:key for] statement
[:zh_CN] 基于范围的 [`:key for] 语句

[syntax:explanation]
[`:key for] [`(] [~:opt init-statement] [~for-range-declaration] [`:] [~for-range-initializer] [`)]
[~statement]
[syntax:end]

[:en@~] is equivalent to
[:zh_CN@~] 等价于

[syntax:explanation@indented]
[`{]
    [~:opt init-statement]
    [`:key auto] [`&&][*range] [`=] [~for-range-initializer][`;]
    [`:key auto] [*begin] [`=] [*begin-expr][`;]
    [`:key auto] [*end] [`=] [*end-expr][`;]
    [`:key for] [`(] [`;] [*begin] [`!=] [*end][`;] [`++][*begin] [`)] [`{]
        [~for-range-declaration] [`=] [`*] [*begin][`;]
        [~statement]
    [`}]
[`}]
[syntax:end]

[:en@~] where
[:zh_CN@~] 其中

[list]
[item]
[:en] if the [~for-range-initializer] is an [~expression], it is regarded as if
it were surrounded by parentheses (so that a comma operator cannot be
reinterpreted as delimiting two [~init-declarator]s);
[:zh_CN] 如果 [~for-范围初始化式]是个[~表达式]，则将之当做是由括号所包围的（这样
可以让逗号运算符不会被解释成分隔两个[~带初始化声明符]）；

[item]
[:en] [*range], [*begin], and [*end] are variables defined for exposition only; and
[:zh_CN] [*range]、[*begin] 和 [*end] 是仅为便于说明而定义的变量；并且

[item]
[:en] [*begin-expr] and [*end-expr] are determined as follows:
[:zh_CN] 根据下述规则确定 [*begin-expr] 和 [*end-expr]：

[list]
[item]
[:en] if the type of [*range] is a reference to an array type [`R], [*begin-expr]
and [*end-expr] are [*range] and [*range] [`+] [`N], respectively, where [`N] is
the array bound.
[:zh_CN] 如果 [*range] 的类型是到数组类型 [`R] 的引用，则 [*begin-expr] 和
[*end-expr] 分别为 [*range] 和 [*range] [`+] [`N]，其中 [`N] 为数组的边界。

[:en] If [`R] is an array of unknown bound or an array of incomplete type, the
program is ill-formed;
[:zh_CN] 若 [`R] 是未知边界的数组，或者是不完整类型的数组，则程序非良构；

[item]
[:en] if the type of [*range] is a reference to a class type [`C], and searches
in the scope of [`C] ([#class.member.lookup]) for the names [`begin] and [`end]
each find at least one declaration, [*begin-expr] and [*end-expr] are
[`[*range].begin()] and [`[*range].end()], respectively;
[:zh_CN] 如果 [*range] 的类型是到类类型 [`C] 的引用，且在 [`C] 的作用域中对名字
[`begin] 和 [`end] 进行搜索（[#class.member.lookup]）各自都找到至少一个声明式，
则 [*begin-expr] 和 [*end-expr] 分别为 [`[*range].begin()] 和 [`[*range].end()]；

[item]
[:en] otherwise, [*begin-expr] and [*end-expr] are [`begin([*range])] and
[`end([*range])], respectively, where [`begin] and [`end] undergo
argument-dependent lookup ([#basic.lookup.argdep]).
[:zh_CN] 否则，[*begin-expr] 和 [*end-expr] 分别为 [`begin([*range])] 和
[`end([*range])]，其中 [`begin] 和 [`end] 经受依赖于实参的查找（[#basic.lookup.argdep]）。

[begin:note]
[:en] Ordinary unqualified lookup ([#basic.lookup.unqual]) is not performed.
[:zh_CN] 不进行常规的无限定查找（[#basic.lookup.unqual]）。
[end:note]
[list:end]
[list:end]

[begin:example]
[codeblock]
int array[5] = { 1, 2, 3, 4, 5 };
for (int& x : array)
  x *= 2;
[codeblock:end]
[end:example]

[begin:note]
[:en] The lifetime of some temporaries in the [~for-range-initializer] is
extended to cover the entire loop ([#class.temporary]).
[:zh_CN] [~for-范围初始化式]中的一些临时对象的生存期被扩展到覆盖整个循环（[#class.temporary]）。
[end:note]

[begin:example]
[codeblock]
using T = std::list<int>;
const T& f1(const T& t) { return t; }
const T& f2(T t)        { return t; }
T g();

void foo() {
  for (auto e : f1(g())) {}     // [:en] OK, lifetime of return value of [`g()] extended \
                                [:zh_CN] OK, 扩展了 [`g()] 的返回值的生存期
  for (auto e : f2(g())) {}     // [:en] undefined behavior [:zh_CN] 未定义行为
}
[codeblock:end]
[end:example]
