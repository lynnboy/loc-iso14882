[section#stmt.for
    [:en] The [`for] statement
    [:zh_CN] [`for] 语句

[%  [:en] statement[![`for]]
    [:zh_CN] 语句[![`for]] ]
]

[para]
[:en] The [`:key for] statement
[:zh_CN] [`:key for] 语句

[syntax:explanation]
[`:key for] [`(] [~init-statement] [~:opt condition] [`;] [~:opt expression] [`)] [~statement]
[syntax:end]

[:en@~] is equivalent to
[:zh_CN@~] 等价于

[syntax:explanation@indented]
[`{]
    [~init-statement]
    [`:key while] [`(] [~condition] [`)] [`{]
        [~statement]
        [~expression] [`;]
    [`}]
[`}]
[syntax:end]

[:en@~] except that the [~init-statement] is in the same scope as the [~condition],
and except that a [%statement[![`continue] in [`for]]] [`:key continue] in
[~statement] (not enclosed in another iteration statement) will execute
[~expression] before re-evaluating [~condition].
[:zh_CN@~] 其区别是，[~初始化语句]与[~条件]处于相同的作用域中，另外，[~语句]中
（未被其他重复语句围绕）的 [%语句[![`for]～中的[`continue]]][`:key continue]，
将于再次求值[~条件]之前执行[~表达式]。

[begin:note]
[:en] Thus the first statement specifies initialization for the loop; the condition
([#stmt.pre]) specifies a test, sequenced before each iteration, such that
the loop is exited when the condition becomes [`false]; the expression often
specifies incrementing that is sequenced after each iteration.
[:zh_CN] 故第一个语句指定了循环的初始化；条件（[#stmt.pre]）指定的测试，
按顺序早于每次的重复，并使得当条件变为 [`false] 时退出循环；表达式则通常指定了
按顺序晚于每次重复所进行的增量操作。
[end:note]

[para]
[:en] Either or both of the [~condition] and the [~expression] can be omitted.
[:zh_CN] [~条件]和[~表达式]中的任意一个或二者都可省略。

[:en] A missing [~condition] makes the implied [`:key while] clause equivalent to [`while (true)].
[:zh_CN] 当缺少[~条件]时，其隐含的 [`:key while] 子句就等价于 [`while (true)]。
