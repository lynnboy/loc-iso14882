[section#stmt.return
    [:en] The [`return] statement
    [:zh_CN] [`return] 语句
[:]
[%[`return]]
[%  [:en] function return[%[`return]]
    [:zh_CN] 函数返回[%[`return]] ]
]

[para]
[:en]
A function returns to its caller by the [`return] statement.
[:zh_CN]
函数用 [`return] 语句返回其调用方。

[para]
[:en]
The [~expr-or-braced-init-list] of a [`return] statement is called its operand.
[:zh_CN]
[`return] 语句的[~表达式或花括号初始化列表]称为其操作数。

[:en]
A [`return] statement with no operand shall be used only in a function whose
return type is [=cv] [`void], a constructor ([#class.ctor]), or a destructor
([#class.dtor]).
[:zh_CN]
没有操作数的 [`return] 语句仅能用在返回类型为 [=cv] [`void] 的函数，构造函数
（[#class.ctor]），或析构函数（[#class.dtor]）中。

[:en]
[%[`return][!constructor and]]
A [`return] statement with an operand of type [`void] shall be used only in a
function whose return type is [=cv] [`void].
[:zh_CN]
[%[`return][!构造函数与～]]
具有 [`void] 类型的操作数的 [`return] 语句仅能用在返回类型为 [=cv] [`void] 的
函数中。

[:en]
A [`return] statement with any other operand shall be used only in a function
whose return type is not [=cv] [`void];
[:zh_CN]
具有其他任何操作数的 [`return] 语句仅能用在返回类型不是 [=cv] [`void] 的函数中；

[:en]
[%conversion[!return type]]
the [`return] statement initializes the glvalue result or prvalue result object
of the (explicit or implicit) function call by copy-initialization ([#dcl.init])
from the operand.
[:zh_CN]
[%转换[!返回类型]]
[`return] 语句以其操作数对（隐式或显式）调用的函数的泛左值结果或纯右值结果对象
进行复制初始化（[#dcl.init]）。

[begin:note]
[:en]
A [`return] statement can involve an invocation of a constructor to perform a
copy or move of the operand if it is not a prvalue or if its type differs from
the return type of the function.
[:zh_CN]
[`return] 语句可能涉及对构造函数的调用以实施对其操作数的复制或移动（当其并非
纯右值，或其类型同函数的返回类型不同时）。

[:en]
A copy operation associated with a [`return] statement may be elided or
converted to a move operation if an automatic storage duration variable is
returned ([#class.copy.elision]).
[:zh_CN]
当返回自动存储期变量时，与 [`return] 语句相关联的复制操作可能会被消除掉，或者
转换为移动操作（[#class.copy.elision]）。
[end:note]

[begin:example]
[codeblock]
std::pair<std::string,int> f(const char* p, int x) {
  return {p,x};
}
[codeblock:end]
[end:example]

[:en]
Flowing off the end of a constructor, a destructor, or a non-coroutine function
with a [=cv] [`void] return type is equivalent to a [`return] with no operand.
[:zh_CN]
控制流出构造函数，析构函数或具有 [=cv] [`void] 返回类型的非协程函数的末尾，
等价于不带操作数的 [`return]。

[:en]
Otherwise, flowing off the end of a function other than [`main]
([#basic.start.main]) or a coroutine ([#dcl.fct.def.coroutine]) results in
undefined behavior.
[:zh_CN]
否则，控制流越过除 [`main]（[#basic.start.main]）或协程
（[#dcl.fct.def.coroutine]）之外的函数的末尾将造成未定义的行为。

[para]
[:en]
The copy-initialization of the result of the call is sequenced before the
destruction of temporaries at the end of the full-expression established by the
operand of the [`return] statement, which, in turn, is sequenced before the
destruction of local variables ([#stmt.jump]) of the block enclosing the
[`return] statement.
[:zh_CN]
对调用的结果所进行的复制初始化，按顺序早于全表达式末尾时对由 [`return] 语句的
操作数所建立的临时变量的销毁，而这又按顺序早于包含 [`return] 语句的语句块中的
局部变量的销毁（[#stmt.jump]）。
