[section#stmt.return
    [:en] The [`:key return] statement
    [:zh_CN] [`:key return] 语句
[:]
[%[`return]]
[%  [:en] function return[%[`return]]
    [:zh_CN] 函数返回[%[`return]] ]
]

[para]
[:en] A function returns control to its caller by the [`return] statement.
[:zh_CN] 函数用 [`return] 语句返回控制到其调用方。

[para]
[:en] The [~expr-or-braced-init-list] of a [`return] statement is called its operand.
[:zh_CN] [`return] 语句的[~表达式或花括号初始化列表]称为其操作数。

[:en] A [`return] statement with no operand shall be used only in a function
whose return type is [=cv] [`:key void], a constructor ([#class.ctor]), or a
destructor ([#class.dtor]).
[:zh_CN] 没有操作数的 [`return] 语句仅能用在返回类型为 [=cv] [`:key void] 的函数，
构造函数（[#class.ctor]），或析构函数（[#class.dtor]）中。

[:en] [%[`return][!constructor and]]
A [`return] statement with an operand of type [`:key void] shall be used only in
a function that has a [=cv] [`:key void] return type.
[:zh_CN] [%[`return][!构造函数与～]]
具有 [`:key void] 类型的操作数的 [`return] 语句仅能用在返回类型为 [=cv] [`:key void] 的函数中。

[:en] A [`return] statement with any other operand shall be used only in a
function that has a return type other than [=cv] [`:key void];
[:zh_CN] 具有其他任何操作数的 [`return] 语句仅能用在返回类型不是 [=cv] [`:key void] 的函数中；

[:en] [%conversion[!return type]]
the [`return] statement initializes the returned reference or prvalue result
object of the (explicit or implicit) function call by copy-initialization
([#dcl.init]) from the operand.
[:zh_CN] [%转换[!返回类型]]
[`return] 语句以其操作数对（隐式或显式）调用的函数所返回的引用或纯右值结果对象进行复制初始化（[#dcl.init]）。

[begin:note]
[:en] A constructor or destructor does not have a return type.
[:zh_CN] 构造函数或析构函数没有返回类型。
[end:note]

[begin:note]
[:en] A [`return] statement can involve an invocation of a constructor to
perform a copy or move of the operand if it is not a prvalue or if its type
differs from the return type of the function.
[:zh_CN] [`return] 语句可能涉及对构造函数的调用以实施对其操作数的复制或移动
（当其并非纯右值，或其类型同函数的返回类型不同时）。

[:en] A copy operation associated with a [`return] statement can be elided or
converted to a move operation if an automatic storage duration variable is
returned ([#class.copy.elision]).
[:zh_CN] 当返回自动存储期变量时，与 [`return] 语句相关联的复制操作可以被消除掉，
或者转换为移动操作（[#class.copy.elision]）。
[end:note]

[para]
[:en] The destructor for the result object is potentially invoked ([#class.dtor], [#except.ctor]).
[:zh_CN] 其结果对象的析构函数被潜在调用（[#class.dtor]，[#except.ctor]）。

[begin:example]
[codeblock]
class A {
  ~A() {}
};
A f() { return A(); }   // [:en] error: destructor of [`A] is private (even though it is never invoked) \
                        [:zh_CN] 错误：[`A] 的析构函数是私有的（虽然从未调用它）
[codeblock:end]
[end:example]

[para]
[:en] Flowing off the end of a constructor, a destructor, or a non-coroutine function
with a [=cv] [`:key void] return type is equivalent to a [`return] with no operand.
[:zh_CN] 控制流出构造函数，析构函数或具有 [=cv] [`:key void] 返回类型的非协程
函数的末尾，等价于不带操作数的 [`return]。

[:en] Otherwise, flowing off the end of a function that is neither [`main] ([#basic.start.main])
nor a coroutine ([#dcl.fct.def.coroutine]) results in undefined behavior.
[:zh_CN] 否则，控制流越过既非 [`main]（[#basic.start.main]）也非协程
（[#dcl.fct.def.coroutine]）的函数的末尾时将造成未定义的行为。

[para]
[:en] The copy-initialization of the result of the call is sequenced before the
destruction of temporaries at the end of the full-expression established by the
operand of the [`return] statement, which, in turn, is sequenced before the destruction
of local variables ([#stmt.jump]) of the block enclosing the [`return] statement.
[:zh_CN] 对调用的结果所进行的复制初始化，按顺序早于全表达式末尾时对由 [`return] 语句的操作数
所建立的临时变量的销毁，而这又按顺序早于包含 [`return] 语句的语句块中的局部变量的销毁（[#stmt.jump]）。

[begin:note]
[:en] These operations are sequenced before the destruction of local variables
in each remaining enclosing block of the function ([#stmt.dcl]), which, in turn,
is sequenced before the evaluation of postcondition assertions of the function ([#dcl.contract.func]),
which, in turn, is sequenced before the destruction of function parameters ([#expr.call]).
[:zh_CN] 这些操作按顺序早于函数的每个余下的外围代码块的局部变量的析构（[#stmt.dcl]），后者进而
按顺序早于该函数的后条件断言的评估（[#dcl.contract.func]），后者进而按顺序早于各函数形参的析构（[#expr.call]）。
[end:note]

[para]
[:en] In a function whose return type is a reference, other than an invented function
for [`std::is_convertible] ([#meta.rel]), a [`return] statement that binds the
returned reference to a temporary expression ([#class.temporary]) is ill-formed.
[:zh_CN] 在返回类型为引用的函数中（除了为 [`std::is_convertible] 虚构的函数（[#meta.rel]）），
将返回的引用绑定到临时表达式（[#class.temporary]）的 [`return] 语句非良构。

[begin:example]
[codeblock]
auto&& f1() {
  return 42;            // [:en] ill-formed [:zh_CN] 非良构
}
const double& f2() {
  static int x = 42;
  return x;             // [:en] ill-formed [:zh_CN] 非良构
}
auto&& id(auto&& r) {
  return static_cast<decltype(r)&&>(r);
}
auto&& f3() {
  return id(42);        // [:en] OK, but probably a bug [:zh_CN] OK，但可能是 BUG
}
[codeblock:end]
[end:example]
