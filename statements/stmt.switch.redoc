[section#stmt.switch
    [:en] The [`:key switch] statement
    [:zh_CN] [`:key switch] 语句

[%  [:en] statement[![`switch]]
    [:zh_CN] 语句[![`switch]] ]
]

[para]
[:en]
The [`:key switch] statement causes control to be transferred to one of several
statements depending on the value of a condition.
[:zh_CN]
[`:key switch] 语句导致控制依据条件的值被转移到几个语句之一。

[para]
[:en]
The condition shall be of integral type, enumeration type, or class type.
[:zh_CN]
其条件应当为整型类型，枚举类型，或者类类型。

[:en]
If of class type, the condition is contextually implicitly converted ([#conv])
to an integral or enumeration type.
[:zh_CN]
若为类类型，则条件被按语境隐式转换（[#conv]）为整型或枚举类型。

[:en]
If the (possibly converted) type is subject to integral promotions ([#conv.prom]),
the condition is converted to the promoted type.
[:zh_CN]
若（可能经转换的）类型符合整型提升（[#conv.prom]），则条件被转换为提升后的类型。

[:en]
Any statement within the [`:key switch] statement can be labeled with one or
more case labels as follows:
[:zh_CN]
[`:key switch] 语句中的任何语句都可以带有如下的一个或多个 case 标号：

[%  [:en] label[![`case]]
    [:zh_CN] 标号[![`case]] ]
[syntax:explanation]
[`:key case] [~constant-expression] [`:]
[syntax:end]

[:en@~]
where the [~constant-expression] shall be a converted constant expression
([#expr.const]) of the adjusted type of the switch condition.
[:zh_CN@~]
其中的[~常量表达式]应当是 switch 条件的调整后类型的经转换的常量表达式
（[#expr.const]）。

[:en]
No two of the case constants in the same switch shall have the same value after
conversion.
[:zh_CN]
转换后，同一个 switch 中的任何两个 case 常量都不能具有相同的值。

[para]
[:en]
[%label[![`default]]]
There shall be at most one label of the form
[:zh_CN]
[%标号[![`default]]]
[`:key switch] 语句中，形式为

[codeblock:notation]
default :
[codeblock:end]

[:en@~]
within a [`:key switch] statement.
[:zh_CN@~]
的标号至多可以有一个。

[para]
[:en]
Switch statements can be nested; a [`:key case] or [`:key default] label is
associated with the smallest switch enclosing it.
[:zh_CN]
switch 语句可以嵌套；[`:key case] 或 [`:key default] 标号与围绕它的最小的 switch
相关联。

[para]
[:en]
When the [`:key switch] statement is executed, its condition is evaluated.
[:zh_CN]
当执行 [`:key switch] 语句时，对其条件求值。

[:en]
[%label[![`case]]]
If one of the case constants has the same value as the condition, control is
passed to the statement following the matched case label.
[:zh_CN]
[%标号[![`case]]]
若其 case 常量之一具有与条件相同的值，则控制被传递到紧跟这个匹配 case 标号之后的
语句。

[:en]
If no case constant matches the condition, and if there is a
[%label[![`default]]] [`:key default] label, control passes to the statement
labeled by the default label.
[:zh_CN]
若没有与条件相匹配的 case 常量，且若存在 [%标号[![`default]]] [`:key default]
标号，则控制被传递到标记了 default 标号的语句。

[:en]
If no case matches and if there is no [`:key default] then none of the
statements in the switch is executed.
[:zh_CN]
若没有匹配的 case 且没有 [`:key default]，则 switch 中的语句都不执行。

[para]
[:en]
[`:key case] and [`:key default] labels in themselves do not alter the flow of
control, which continues unimpeded across such labels.
[:zh_CN]
[`:key case] 和 [`:key default] 标号本身并不改变控制流，控制流不受阻碍地穿过这些
标号继续进行。

[:en]
To exit from a switch, see [`:key break], [#stmt.break].
[:zh_CN]
要退出 switch，参见 [`:key break]，[#stmt.break]。

[begin:note]
[:en]
Usually, the substatement that is the subject of a switch is compound and
[`:key case] and [`:key default] labels appear on the top-level statements
contained within the (compound) substatement, but this is not required.
[:zh_CN]
通常情况下，属于某个 switch 的子语句是复合语句，而 [`:key case] 和
[`:key default] 标号出现在该（复合）子语句中所包含的顶层语句上，但这并不是必须的。

[:en]
[%statement[!declaration in [`switch]]]
Declarations can appear in the substatement of a [`:key switch] statement.
[:zh_CN]
[%语句[![`switch]～中的声明式]]
[`:key switch] 语句的子语句中可以出现声明式。
[end:note]

[para]
[:en]
A [`:key switch] statement of the form
[:zh_CN]
如下形式的 [`:key switch] 语句

[syntax:explanation]
[`:key switch] [`(] [~init-statement] [~condition] [`)] [~statement]
[syntax:end]

[:en@~]
is equivalent to
[:zh_CN@~]
等价于

[syntax:explanation@indented]
[`{]
    [~init-statement]
    [`:key switch] [`(] [~condition] [`)] [~statement]
[`}]
[syntax:end]

[:en@~]
except that the [~init-statement] is in the same scope as the [~condition].
[:zh_CN@~]
其区别是，[~初始化语句]与[~条件]处于相同的作用域中。
