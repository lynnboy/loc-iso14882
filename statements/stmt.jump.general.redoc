[section#stmt.jump.general
    [:en] General
    [:zh_CN] 概述
]

[%  [:en] statement[!jump]
    [:zh_CN] 语句[!跳转～] ]

[para]
[:en]
[%statement[!jump]]
Jump statements unconditionally transfer control.
[:zh_CN]
[%语句[!跳转～]]
跳转语句无条件地转移控制。

[:en]
[%statement[![`break]]]
[%statement[![`continue]]]
[%[`return] statement[%[`return]]]
[%[`return]]
[%statement[![`goto]]]
[:zh_CN]
[%语句[![`break]]]
[%语句[![`continue]]]
[%[`return] 语句[%[`return]]]
[%[`return]]
[%语句[![`goto]]]

[syntax]
[rule jump-statement [:zh_CN] 跳转语句 ]
    [| [`:key break] [`;] ]
    [| [`:key continue] [`;] ]
    [| [`:key return] [~:opt expr-or-braced-init-list] [`;] ]
    [| coroutine-return-statement ]
    [| [`:key goto] identifier [`;] ]
[rule:end]
[syntax:end]

[para]
[:en]
[%local variable[!destruction of]]
[%scope[!destructor and exit from]]
On exit from a scope (however accomplished), objects with automatic storage
duration ([#basic.stc.auto]) that have been constructed in that scope are
destroyed in the reverse order of their construction.
[:zh_CN]
[%局部变量[!～的销毁]]
[%作用域[!析构函数与～的退出]]
在（以无论何种方式）退出作用域时，该作用域中构造的每个带有自动存储期
（[#basic.stc.auto]）的对象，按它们构造的相反顺序进行销毁。

[begin:note]
[:en]
For temporaries, see [#class.temporary].
[:zh_CN]
对于临时对象，参见 [#class.temporary]。
[end:note]

[:en]
Transfer out of a loop, out of a block, or back past an initialized variable
with automatic storage duration involves the destruction of objects with
automatic storage duration that are in scope at the point transferred from but
not at the point transferred to.
[:zh_CN]
转移出循环，转移出语句块，或向后转移并越过具有自动存储期的已初始化的变量时，都涉
及到对在转移源点处于作用域中，而在转移目的点不处于作用域中的具有自动存储期的对象
进行销毁。

[:en]
(See [#stmt.dcl] for transfers into blocks).
[:zh_CN]
（关于向语句块中转移，参见 [#stmt.dcl]）。

[begin:note]
[:en]
However, the program can be terminated (by calling
[%[`exit]] [%@lib exit] [`std::exit()] or
[%[`abort]] [%@lib abort] [`std::abort()] ([#support.start.term]), for example)
without destroying objects with automatic storage duration.
[:zh_CN]
然而，程序在终止（如通过调用 [%[`exit]] [%@lib exit] [`std::exit()] 或
[%[`abort]] [%@lib abort] [`std::abort()]（[#support.start.term]））时，可以
不销毁具有自动存储期的对象。
[end:note]

[begin:note]
[:en]
A suspension of a coroutine ([#expr.await]) is not considered to be an exit from
a scope.
[:zh_CN]
协程暂停（[#expr.await]）不被当成是从作用域中退出。
[end:note]
