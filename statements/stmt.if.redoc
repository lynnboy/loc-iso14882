[section#stmt.if
    [:en] The [`if] statement
    [:zh_CN] [`if] 语句

[%  [:en] statement[![`if]]
    [:zh_CN] 语句[![`if]] ]
]

[para]
[:en]
If the condition ([#stmt.select]) yields [`true] the first substatement is
executed.
[:zh_CN]
如果其条件（[#stmt.select]）产生 [`true] 则执行第一个子语句。

[:en]
If the [`:key else] part of the selection statement is present and the condition
yields [`false], the second substatement is executed.
[:zh_CN]
如果选择语句的 [`:key else] 部分存在且其条件产生 [`false]，则执行第二个子语句。

[:en]
If the first substatement is reached via a label, the condition is not evaluated
and the second substatement is not executed.
[:zh_CN]
当通过标号到达第一个子语句时，其条件不进行求值，且不执行第二个子语句。

[:en]
In the second form of [`:key if] statement (the one including [`:key else]), if
the first substatement is also an [`:key if] statement then that inner [`if]
statement shall contain an [`:key else] part.[#:fn#]
[:zh_CN]
在 [`:key if] 语句的第二种形式（包含 [`:key else] 的那种）中，如果其第一个子语句
也是 [`:key if] 语句，则这个内部的 [`if] 语句应当包含 [`:key else] 部分。[#:fn#]

[note:foot]
[:en]
In other words, the [`:key else] is associated with the nearest un-elsed
[`:key if].
[:zh_CN]
换句话说，[`:key else] 与最接近的不带 else 的 [`:key if] 相关联。
[note:end]

[para]
[:en]
If the [`:key if] statement is of the form [`if constexpr], the value of the
condition is contextually converted to [`:key bool] and the converted expression
shall be a constant expression ([#expr.const]); this form is called a
[+constexpr if] statement.
[:zh_CN]
如果 [`:key if] 语句的形式为 [`if constexpr]，则条件的值按语境转换为 [`:key bool]
且经转换的表达式应当为常量表达式（[#expr.const]）；这种形式被称为 [+constexpr if]
语句。

[:en]
If the value of the converted condition is [`false], the first substatement is a
[+discarded statement], otherwise the second substatement, if present, is a
discarded statement.
[:zh_CN]
如果转换后的条件的值为 [`false]，则其第一个子语句为[+弃用语句]，否则，其第二个
子语句（如果有）为弃用语句。

[:en]
During the instantiation of an enclosing templated entity ([#temp.pre]), if the
condition is not value-dependent after its instantiation, the discarded
substatement (if any) is not instantiated.
[:zh_CN]
在外围模板化实体（[#temp.pre]）的实例化过程中，如果条件在实例化之后并非是值待决
的，则弃用语句（如果有）并不会实例化。

[begin:example]
[codeblock]
if constexpr (sizeof(int[2])) {}        // [:en] OK, narrowing allowed \
                                        [:zh_CN] OK，允许窄化
[codeblock:end]
[end:example]

[begin:note]
[:en]
Odr-uses ([#basic.def.odr]) in a discarded statement do not require an entity to
be defined.
[:zh_CN]
在弃用语句中进行的 ODR 式使用（[#basic.def.odr]）并不要求实体被定义。
[end:note]

[:en]
A [`:key case] or [`:key default] label appearing within such an [`:key if]
statement shall be associated with a [`:key switch] statement ([#stmt.switch])
within the same [`:key if] statement.
[:zh_CN]
出现于这种 [`:key if] 语句中的 [`:key case] 或 [`:key default] 标号，应当和处于
相同 [`:key if] 语句中的 [`:key switch] 语句（[#stmt.switch]）向关联。

[:en]
A label ([#stmt.label]) declared in a substatement of a constexpr if statement
shall only be referred to by a statement ([#stmt.goto]) in the same substatement.
[:zh_CN]
声明于 constexpr if 语句的某个子语句之内的标号（[#stmt.label]），只能由处于相同
子语句中的语句所涉指（[#stmt.goto]）。

[begin:example]
[codeblock]
template<typename T, typename ... Rest> void g(T&& p, Rest&& ...rs) {
  // [:en] ... handle [`p] \
     [:zh_CN] …… 处理 [`p]

  if constexpr (sizeof...(rs) > 0)
    g(rs...);       // [:en] never instantiated with an empty argument list. \
                       [:zh_CN] 肯定不会以空的实参列表来实例化
}

extern int x;       // [:en] no definition of [`x] required \
                       [:zh_CN] 不需要 [`x] 的定义式

int f() {
  if constexpr (true)
    return 0;
  else if (x)
    return x;
  else
    return -x;
}
[codeblock:end]
[end:example]

[para]
[:en]
An [`:key if] statement of the form
[:zh_CN]
以下形式的 [`:key if] 语句

[syntax:explanation]
[`:key if] [`:opt:key constexpr] [`(] [~init-statement] [~condition] [`)] [~statement]
[syntax:end]

[:en@~]
is equivalent to
[:zh_CN@~]
等价于

[syntax:explanation@indented]
[`{]
    [~init-statement]
    [`:key if] [`:opt:key constexpr] [`(] [~condition] [`)] [~statement]
[`}]
[syntax:end]

[:en@~]
and an [`:key if] statement of the form
[:zh_CN@~]
而以下形式的 [`:key if] 语句

[syntax:explanation]
[`:key if] [`:opt:key constexpr] [`(] [~init-statement] [~condition] [`)] [~statement]
    [`:key else] [~statement]
[syntax:end]

[:en@~]
is equivalent to
[:zh_CN@~]
等价于

[syntax:explanation@indented]
[`{]
    [~init-statement]
    [`:key if] [`:opt:key constexpr] [`(] [~condition] [`)] [~statement] [`:key else] [~statement]
[`}]
[syntax:end]

[:en@~]
except that the [~init-statement] is in the same scope as the [~condition].
[:zh_CN@~]
其区别是，[~初始化语句]与[~条件]处于相同的作用域中。

[para]
[:en]
An [`:key if] statement of the form [`[`:key if] [`:key consteval]] is called a
[+:adj consteval if statement[%consteval if[!statement]]].
[:zh_CN]
形式为 “[`[`:key if] [`:key consteval]]”的 [`:key if] 语句称为
[+:adj consteval if 语句[%consteval if[!语句]]]。

[:en]
The [~statement], if any, in a consteval if statement shall be a
[~compound-statement].
[:zh_CN]
consteval 语句的[~语句]（如果有），应当为[~复合语句]。

[begin:example]
[codeblock]
constexpr void f(bool b) {
  if (true)
    if consteval { }
    else ;              // [:en] error: not a [~compound-statement]; [`:key else] not associated with outer [`:key if] \
                        [:zh_CN] 错误：不是[~复合语句]；[`:key else] 并不与外部 [`:key if] 关联
}
[codeblock:end]
[end:example]

[para]
[:en]
If a consteval if statement is evaluated in a context that is manifestly
constant-evaluated ([#expr.const]), the first substatement is executed.
[:zh_CN]
如果 consteval if 语句是在某个显然常量求值的语境（[#expr.const]）中求值的，则
执行其第一个子语句。

[begin:note]
[:en]
The first substatement is an immediate function context.
[:zh_CN]
第一个子语句是直接函数语境。
[end:note]

[:en]
Otherwise, if the [`:key else] part of the selection statement is present,
then the second substatement is executed.
[:zh_CN]
否则，如果出现了选择语句的 [`:key else] 部分，则执行第二个子语句。

[:en]
A [`:key case] or [`:key default] label appearing within such an [`:key if]
statement shall be associated with a [`:key switch] statement within the same
[`:key if] statement.
[:zh_CN]
这种 [`:key if] 语句中出现的 [`:key case] 或 [`:key default] 标号，应当与相同
[`:key if] 语句中的 [`:key switch] 语句相关联。

[:en]
A label declared in a substatement of a consteval if statement
shall only be referred to by a statement in the same substatement.
[:zh_CN]
在 consteval if 语句的子语句中声明的标号，只能由相同子语句中的语句所指代。

[para]
[:en]
An [`:key if] statement of the form
[:zh_CN]
以下形式的 [`:key if] 语句

[syntax:explanation]
[`:key if] [`!] [`:key consteval] [~compound-statement]
[syntax:end]

[:en@~]
is not itself a consteval if statement, but is equivalent to the consteval if
statement
[:zh_CN@~]
自身并非 consteval if 语句，但等价于如下 consteval if 语句

[syntax:explanation]
[`:key if] [`:key consteval] [`{] [`}] [`:key else] [~compound-statement]
[syntax:end]

[:en]
An [`:key if] statement of the form
[:zh_CN]
以下形式的 [`:key if] 语句

[syntax:explanation]
[`:key if] [`!] [`:key consteval] [~compound-statement][$_1] [`:key else] [~statement][$_2]
[syntax:end]

[:en@~]
is not itself a consteval if statement, but is equivalent to the consteval if
statement
[:zh_CN@~]
自身并非 consteval if 语句，但等价于如下 consteval if 语句

[syntax:explanation]
[`:key if] [`:key consteval] [~statement][$_2] [`:key else] [~compount-statement][$_1]
[syntax:end]
