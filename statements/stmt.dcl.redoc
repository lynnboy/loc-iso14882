[section#stmt.dcl
    [:en] Declaration statement
    [:zh_CN] 声明语句

[%  [:en] statement[!declaration]
    [:zh_CN] 语句[!声明～] ]
]

[para]
[:en]
A declaration statement introduces one or more new names into a block; it has
the form
[:zh_CN]
声明语句向语句块中引入一个或多个新名字；它的形式为

[syntax]
[rule declaration-statement [:zh_CN] 声明语句 ]
    [| block-declaration ]
[rule:end]
[syntax:end]

[begin:note]
[:en]
If an identifier introduced by a declaration was previously declared in an outer
block,
[%declaration hiding[%name hiding]] [%name hiding]
[%block (statement)[!structure]]
the outer declaration is hidden for the remainder of the block
([#basic.lookup.unqual]), after which it resumes its force.
[:zh_CN]
若由声明式所引入的标识符在外层块中已经被声明过，
[%声明式的隐藏[%名字隐藏]] [%名字隐藏]
[%块（语句）[!结构]]
则外面的声明式在该块的余下部分中被隐藏（[#basic.lookup.unqual]），其后又恢复其
效力。
[end:note]

[para]
[:en]
[%block (statement)[!initialization in]]
[%initialization[!automatic]]
[%active[%variable[!active]]]
A variable with automatic storage duration ([#basic.stc.auto]) is
[+active[%variable[!active]]] everywhere in the scope to which it belongs after
its [~init-declarator].
[:zh_CN]
[%块（语句）[!～中的初始化]]
[%初始化[!自动～]]
[%活跃[%变量[!活跃]]]
具有自动存储期（[#basic.stc.auto]）的变量，在其所属的作用域中其[~带初始化声明符]
之后的任何位置均是[+活跃[%变量[!活跃]]]的。

[para]
[:en]
[%initialization[!jump past]]
[%[`goto][!initialization and]]
Upon each transfer of control (including sequential execution of statements)
within a function from point [$P] to point [$Q], all variables that are active
at [$P] and not at [$Q] are destroyed in the reverse order of their construction.
[:zh_CN]
[%初始化[!跳转越过～]]
[%[`goto][!初始化与～]]
每次进行某个函数中从点 [$P] 到点 [$Q] 的控制转移（包括语句的顺序执行），所有在
[$P] 活跃而在 [$Q] 不活跃的变量均以它们构造的相反顺序销毁。

[:en]
Then, all variables that are active at [$Q] but not at [$P] are initialized in
declaration order; unless all such variables have vacuous initialization
([#basic.life]), the transfer of control shall not be a jump.[#:fn]
[:zh_CN]
然后，所有在 [$Q] 活跃而在 [$P] 不活跃的所有变量均以声明顺序进行初始化；除非所有
这种变量均具有无为初始化（[#basic.life]），否则这次控制转移不能是跳转[#:fn]。

[note:foot]
[:en]
The transfer from the condition of a [`:key switch] statement to a [`:key case]
label is considered a jump in this respect.
[:zh_CN]
从 [`:key switch] 语句的条件到 [`:key case] 标号的转移被看作是这方面跳转的一种。
[note:end]

[:en]
When a [~declaration-statement] is executed, [$P] and [$Q] are the points
immediately before and after it; when a function returns, [$Q] is after its body.
[:zh_CN]
当执行[~声明式语句]时，[$P] 和 [$Q] 为紧挨它之前和之后的位置点；当函数返回时，
[$Q] 在函数体之后。

[begin:example]
[codeblock]
void f() {
  // ...
  goto lx;          // [:en] error: jump into scope of [`a] \
                       [:zh_CN] 错误：向 [`a] 的作用域之中跳转
  // ...
ly:
  X a = 1;
  // ...
lx:
  goto ly;          // [:en] OK, jump implies destructor call for [`a] followed by \
                       [:zh_CN] OK，跳转隐含了对 [`a] 的析构函数的调用，再跟着
                    // [:en@~] construction again immediately following label [`ly] \
                       [:zh_CN@~] 它的紧跟标号 [`ly] 之后的又一次构造
}
[codeblock:end]
[end:example]

[para]
[:en]
[%initialization[!automatic]]
[%initialization[!dynamic block scope]]
[%initialization[!local [`static]]]
[%initialization[!local [`thread_local]]]
Dynamic initialization of a block variable with static storage duration
([#basic.stc.static]) or thread storage duration ([#basic.stc.thread]) is
performed the first time control passes through its declaration; such a variable
is considered initialized upon the completion of its initialization.
[:zh_CN]
[%初始化[!自动～]]
[%初始化[!块作用域的动态～]]
[%初始化[!局部 [`static] 的～]]
[%初始化[!局部 [`thread_local] 的～]]
对于带有静态存储期（[#basic.stc.static]）或线程存储期（[#basic.stc.thread]）的
块变量，当控制第一次通过其声明式时进行动态初始化；这种变量在其初始化完成时即被
当做是已经初始化的。

[:en]
If the initialization exits by throwing an exception, the initialization is not
complete, so it will be tried again the next time control enters the declaration.
[:zh_CN]
若其初始化通过抛出异常而退出，则初始化并未完成，因此当控制下次进入该声明式时将
再次尝试进行初始化。

[:en]
If control enters the declaration concurrently while the variable is being
initialized, the concurrent execution shall wait for completion of the
initialization.
[:zh_CN]
若控制在该变量正初始化时并发地进入其声明式，则并发执行应当等待初始化完成。

[begin:note]
[:en]
A conforming implementation cannot introduce any deadlock around execution of
the initializer.
[:zh_CN]
遵从标准的实现不能在初始化式的执行周围引入任何死锁。

[:en]
Deadlocks might still be caused by the program logic; the implementation need
only avoid deadlocks due to its own synchronization operations.
[:zh_CN]
死锁仍可能由程序逻辑所造成；实现仅需避免由其自身的同步操作所造成的死锁。
[end:note]

[:en]
If control re-enters the declaration recursively while the variable is being
initialized, the behavior is undefined.
[:zh_CN]
若控制在该变量正初始化时递归地再次进入其声明式，则其行为是未定义的。

[begin:example]
[codeblock]
int foo(int i) {
  static int s = foo(2*i);      // [:en] undefined behavior: recursive call \
                                   [:zh_CN] 未定义行为：递归调用
  return i+1;
}
[codeblock:end]
[end:example]

[para]
[:en]
[%[`static][!destruction of local]]
An object associated with a block variable with static or thread storage
duration will be destroyed if and only if it was constructed.
[:zh_CN]
[%[`static][!局部～的销毁]]
当且仅当与带有静态或线程存储期的块变量关联的对象已被构造时，它被销毁。

[begin:note]
[:en]
[#basic.start.term] describes the order in which such objects are destroyed.
[:zh_CN]
[#basic.start.term] 说明这种对象的销毁顺序。
[end:note]
