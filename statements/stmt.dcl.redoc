[section#stmt.dcl
    [:en] Declaration statement
    [:zh_CN] 声明语句

[%  [:en] statement[!declaration]
    [:zh_CN] 语句[!声明～] ]
]

[para]
[:en]
A declaration statement introduces one or more new identifiers into a block; it
has the form
[:zh_CN]
声明语句向语句块中引入一个或多个新标识符；它的形式为

[syntax]
[rule declaration-statement [:zh_CN] 声明语句 ]
    [| block-declaration ]
[rule:end]
[syntax:end]

[:en]
If an identifier introduced by a declaration was previously declared in an outer
block,
[%declaration hiding[%name hiding]] [%name hiding]
[%block (statement)[!structure]]
the outer declaration is hidden for the remainder of the block, after which it
resumes its force.
[:zh_CN]
若由声明式所引入的标识符在外层块中已经被声明过，
[%声明式的隐藏[%名字隐藏]] [%名字隐藏]
[%块（语句）[!结构]]
则外面的声明式在该块的余下部分中被隐藏，其后又恢复其效力。

[para]
[:en]
[%block (statement)[!initialization in]]
[%initialization[!automatic]]
Variables with automatic storage duration ([#basic.stc.auto]) are initialized
each time their [~declaration-statement] is executed.
[:zh_CN]
[%块（语句）[!～中的初始化]]
[%初始化[!自动～]]
具有自动存储期（[#basic.stc.auto]）的变量，在每次执行它们的[~声明语句]时进行
初始化。

[:en]
[%local variable[!destruction of]]
Variables with automatic storage duration declared in the block are destroyed on
exit from the block ([#stmt.jump]).
[:zh_CN]
[%局部变量[!～的销毁]]
在语句块中声明的具有自动存储期的变量，在从该语句块中退出（[#stmt.jump]）时进行
销毁。

[para]
[:en]
[%initialization[!jump past]]
[%[`goto][!initialization and]]
It is possible to transfer into a block, but not in a way that bypasses
declarations with initialization (including ones in [~condition]s and
[~init-statement]s).
[:zh_CN]
[%初始化[!跳转越过～]]
[%[`goto][!初始化与～]]
向语句块中转移控制是可能的，但其路径不能经过带有初始化的声明式（包括[~条件]和
[~初始化语句]中的声明式）。

[:en]
A program that jumps[#:note#fn:$1] from a point where a variable with automatic
storage duration is not in scope to a point where it is in scope is ill-formed
unless the variable has vacuous initialization ([#basic.life]).
[:zh_CN]
从某个具有自动存储期的变量不在作用域之中的一点，跳转[#:note#fn:$1]到它在作用域
之中的一点，则程序非良构，除非该变量具有无为初始化（[#basic.life]）。

[note:foot#fn:$1]
[:en]
The transfer from the condition of a [`switch] statement to a [`case] label is
considered a jump in this respect.
[:zh_CN]
从 [`switch] 语句的条件到 [`case] 标号的转移被看作是这方面跳转的一种。
[note:end]

[:en]
In such a case, the variables with vacuous initialization are constructed in the
order of their declaration.
[:zh_CN]
这种情况下，具有无为初始化的各个变量按照声明式的顺序进行构造。

[begin:example]
[codeblock]
void f() {
  // ...
  goto lx;          // [:en] ill-formed: jump into scope of [`a] \
                       [:zh_CN] 非良构：向 [`a] 的作用域之中跳转
  // ...
ly:
  X a = 1;
  // ...
lx:
  goto ly;          // [:en] OK, jump implies destructor call for [`a] followed by \
                       [:zh_CN] OK，跳转隐含了对 [`a] 的析构函数的调用，再跟着
                    // [:en@~] construction again immediately following label [`ly] \
                       [:zh_CN@~] 它的紧跟标号 [`ly] 之后的又一次构造
}
[codeblock:end]
[end:example]

[para]
[:en]
[%initialization[!automatic]]
[%initialization[!dynamic block scope]]
[%initialization[!local [`static]]]
[%initialization[!local [`thread_local]]]
Dynamic initialization of a block-scope variable with static storage duration
([#basic.stc.static]) or thread storage duration ([#basic.stc.thread]) is
performed the first time control passes through its declaration; such a variable
is considered initialized upon the completion of its initialization.
[:zh_CN]
[%初始化[!自动～]]
[%初始化[!块作用域的动态～]]
[%初始化[!局部 [`static] 的～]]
[%初始化[!局部 [`thread_local] 的～]]
对于带有静态存储期（[#basic.stc.static]）或线程存储期（[#basic.stc.thread]）的
块作用域变量，当控制第一次通过其声明式时进行动态初始化；这种变量在其初始化完成时
即被当做是已经初始化的。

[:en]
If the initialization exits by throwing an exception, the initialization is not
complete, so it will be tried again the next time control enters the declaration.
[:zh_CN]
若其初始化通过抛出异常而退出，则初始化并未完成，因此当控制下次进入该声明式时将
再次尝试进行初始化。

[:en]
If control enters the declaration concurrently while the variable is being
initialized, the concurrent execution shall wait for completion of the
initialization.[#:note#fn:$2]
[:zh_CN]
若控制在该变量正初始化时并发地进入其声明式，则并发执行应当等待初始化完成。
[#:note#fn:$2]

[note:foot#fn:$2]
[:en]
The implementation must not introduce any deadlock around execution of the
initializer.
[:zh_CN]
实现不能在初始化式的执行周围引入任何死锁。

[:en]
Deadlocks might still be caused by the program logic; the implementation need
only avoid deadlocks due to its own synchronization operations.
[:zh_CN]
死锁仍可能由程序逻辑所造成；实现仅需避免由其自身的同步操作所造成的死锁。
[note:end]

[:en]
If control re-enters the declaration recursively while the variable is being
initialized, the behavior is undefined.
[:zh_CN]
若控制在该变量正初始化时递归地再次进入其声明式，则其行为是未定义的。

[begin:example]
[codeblock]
int foo(int i) {
  static int s = foo(2*i);      // [:en] recursive call - undefined \
                                   [:zh_CN] 递归调用：未定义行为
  return i+1;
}
[codeblock:end]
[end:example]

[para]
[:en]
[%[`static][!destruction of local]]
A block-scope object with static or thread storage duration will be destroyed if
and only if it was constructed.
[:zh_CN]
[%[`static][!局部～的销毁]]
当且仅当带有静态或线程存储期的块作用域对象已被构造时，它被销毁。

[begin:note]
[:en]
[#basic.start.term] describes the order in which block-scope objects with static
and thread storage duration are destroyed.
[:zh_CN]
[#basic.start.term] 说明带有静态和线程存储期的块作用域对象的销毁顺序。
[end:note]
