[section#stmt.select
    [:en] Selection statements
    [:zh_CN] 选择语句

[%:begin#statement.selection
    [:en] statement [!selection]
    [:zh_CN] 语句 [!选择～] ]
]

[para]
[:en]
Selection statements choose one of several flows of control.
[:zh_CN]
选择语句在几个控制流中选取一个。

[:en]
[%statement[![`if]]]
[%statement[![`switch]]]
[:zh_CN]
[%语句[![`if]]]
[%语句[![`switch]]]

[syntax]
[rule selection-statement [:zh_CN] 选择语句 ]
    [| [`:key if] [`:opt:key constexpr] [`(] [~:opt init-statement] condition [`)]
        statement ]
    [| [`:key if] [`:opt:key constexpr] [`(] [~:opt init-statement] condition [`)]
        statement [`:key else] statement ]
    [| [`:key switch] [`(] [~:opt init-statement] condition [`)] statement ]
[rule:end]
[syntax:end]

[:en]
See [#dcl.meaning] for the optional [~attribute-specifier-seq] in a condition.
[:zh_CN]
关于条件中的[~特性说明符序列]，参见 [#dcl.meaning]。

[begin:note]
[:en]
An [~init-statement] ends with a semicolon.
[:zh_CN]
[~初始化语句]以分号结尾。
[end:note]

[para]
[:en]
[%scope[![~selection-statement]]]
The substatement in a [~selection-statement] (each substatement, in the [`else]
form of the [`if] statement) implicitly defines a block scope ([#basic.scope]).
[:zh_CN]
[%作用域[![~选择语句]的～]]
[~选择语句]中的子语句（[`else] 形式的 [`if] 语句中的每个子语句），隐式定义了一个
块作用域（[#basic.scope]）。

[:en]
If the substatement in a [~selection-statement] is a single statement and not a
[~compound-statement], it is as if it was rewritten to be a compound-statement
containing the original substatement.
[:zh_CN]
若[~选择语句]中的子语句是单个语句而不是[~复合语句]，则如同把它重写为包含原子语句
的复合语句一样。

[begin:example]
[codeblock]
if (x)
  int i;
[codeblock:end]

[:en]
can be equivalently rewritten as
[:zh_CN]
可被等价地重写为

[codeblock]
if (x) {
  int i;
}
[codeblock:end]

[:en]
Thus after the [`if] statement, [`i] is no longer in scope.
[:zh_CN]
故在 [`if] 语句之后，[`i] 不再处于作用域中。
[end:example]

[include stmt.if]

[include stmt.switch]

[%:end#statement.selection]
