[section#stmt.pre
    [:en] Preamble
    [:zh_CN] 导言
]

[para]
[:en] Except as indicated, statements are executed in sequence ([#intro.execution]).
[:zh_CN] 除了明确指出的情形外，语句都是按顺序执行的（[#intro.execution]）。

[syntax]
[rule statement [:zh_CN] 语句 ]
    [| labeled-statement ]
    [| [~:opt attribute-specifier-seq] expression-statement ]
    [| [~:opt attribute-specifier-seq] compound-statement ]
    [| [~:opt attribute-specifier-seq] selection-statement ]
    [| [~:opt attribute-specifier-seq] iteration-statement ]
    [| [~:opt attribute-specifier-seq] jump-statement ]
    [| [~:opt attribute-specifier-seq] assertion-statement ]
    [| declaration-statement ]
    [| [~:opt attribute-specifier-seq] try-block ]
[rule:end]

[rule init-statement [:zh_CN] 初始化语句 ]
    [| expression-statement ]
    [| simple-declaration ]
    [| alias-declaration ]
[rule:end]

[rule condition [:zh_CN] 条件 ]
    [| expression ]
    [| [~:opt attribute-specifier-seq] decl-specifier-seq declarator
        brace-or-equal-initializer ]
    [| structured-binding-declaration initializer ]
[rule:end]
[syntax:end]

[:en] The optional [~attribute-specifier-seq] appertains to the respective statement.
[:zh_CN] 可选的[~属性说明符序列]属于相应的语句。

[para]
[:en] A [+substatement] of a [~statement] is one of the following:
[:zh_CN] [~语句]的[+子语句]为：
[list]
[item]
[:en@~] for a [~labeled-statement], its [~statement],
[:zh_CN@~] 对于[~带标号语句]，包括其[~语句]，
[item]
[:en@~] for a [~compound-statement], any [~statement] of its [~statement-seq],
[:zh_CN@~] 对于[~复合语句]，包括其[~语句序列]中的任何[~语句]，
[item]
[:en@~] for a [~selection-statement], any of its [~statement]s or
[~compound-statement]s (but not its [~init-statement]), or
[:zh_CN@~] 对于[~选择语句]，包括其中的任何[~语句]或[~复合语句]，但不包括其[~初始化语句]，或者
[item]
[:en@~] for an [~iteration-statement], its [~statement] (but not an [~init-statement]).
[:zh_CN@~] 对于[~循环语句]，包括其[~语句]，但不包括其[~初始化语句]。
[list:end]

[begin:note]
[:en] The [~compound-statement] of a [~lambda-expression] is not a substatement
of the [~statement] (if any) in which the [~lambda-expression] lexically appears.
[:zh_CN] [~lambda-表达式]的[~复合语句]并非词法上包含该 [~lambda-表达式]的[~语句]（如果有）的子语句。
[end:note]

[para]
[:en] [%statement[!enclosing]]
A [~statement] [`S1] [+encloses[%enclosing statement]] a [~statement] [`S2] if
[:zh_CN] [%语句[!外围]]
以下情况下，[~语句] [`S1] [+包围[%外围语句]][~语句] [`S2]：
[list]
[item]
[:en@~] [`S2] is a substatement of [`S1],
[:zh_CN@~] [`S2] 是 [`S1] 的子语句，
[item]
[:en@~] [`S1] is a [~selection-statement] or [~iteration-statement] and [`S2] is
the [~init-statement] of [`S1],
[:zh_CN@~] [`S1] 是[~选择语句]或[~循环语句]，而 [`S2] 为 [`S1] 的[~初始化语句]，
[item]
[:en@~] [`S1] is a [~try-block] and [`S2] is its [~compound-statement] or any of
the [~compound-statement]s of its [~handler]s, or
[:zh_CN@~] [`S1] 是 [~try-块]，而 [`S2] 为其[~复合语句]或其任何[~处理器]的[~复合语句]，或者
[item]
[:en@~] [`S1] encloses a statement [`S3] and [`S3] encloses [`S2].
[:zh_CN@~] [`S1] 包围语句 [`S3]，且 [`S3] 包围 [`S2]。
[list:end]

[:en] [%statement[!enclosed by]]
A statement [`S1] is [+enclosed by[%enclosed by statement]] a statement [`S2] if
[`S2] encloses [`S1].
[:zh_CN] [%语句[!被包围]]
当语句 [`S2] 包围语句 [`S1] 时，语句 [`S1] [+被[%被语句包围]] [`S2] [+:% 包围]。

[para]
[:en] [%[~condition]s[!rules for]]
The rules for [~condition]s apply both to [~selection-statement]s ([#stmt.select])
and to the [`:key for] and [`:key while] statements ([#stmt.iter]).
[:zh_CN] [%[~条件][!～的规则]]
针对[~条件]的规则同时适用于[~选择语句]（[#stmt.select]）以及 [`:key for] 和
[`:key while] 语句（[#stmt.iter]）。

[:en] If a [~structured-binding-declaration] appears in a [~condition], the
[~condition] is a structured binding declaration ([#dcl.pre]).
[:zh_CN] 如果[~条件]中出现[~结构化绑定声明式]，则该[~条件]是结构化绑定声明式（[#dcl.pre]）。

[:en] A [~condition] that is neither an [~expression] nor a structured binding
declaration is a declaration ([#dcl]).
[:zh_CN] 既不是[~表达式]也不是结构化绑定声明式的[~条件]是声明式（[#dcl]）。

[:en] The [~declarator] shall not specify a function or an array.
[:zh_CN] 其[~声明符]不能指定函数或数组。

[:en] The [~decl-specifier-seq] shall not define a class or enumeration.
[:zh_CN] 其[~声明说明符序列]不能定义类或枚举。

[:en] If the [`:key auto] [~type-specifier] appears in the [~decl-specifier-seq],
the type of the identifier being declared is deduced from the initializer as
described in [#dcl.spec.auto].
[:zh_CN] 如果在[~声明说明符序列]中出现了[~类型说明符] [`:key auto]，则所声明的
标识符的类型就根据 [#dcl.spec.auto] 所述从其初始化式中推断出来。

[para]
[:en] The [+:adj decision[!variable]] of a [~condition] that is neither an
[~expression] nor a structured binding declaration is the declared variable.
[:zh_CN] 既不是[~表达式]也不是结构化绑定声明式的[~条件]的[+:adj 判断[!变量]]就是所声明的变量。

[:en] The decision variable of a [~condition] that is a structured binding
declaration is specified in [#dcl.struct.bind].
[:zh_CN] [#dcl.struct.bind] 中指定作为结构化绑定声明式的[~条件]的判断变量。

[para]
[:en] The value of a [~condition] that is an initialized declaration in a
statement other than a [`:key switch] statement is the value of the decision
variable contextually converted to [`bool] ([#conv]).
[:zh_CN] 若[~条件]是除 [`:key switch] 语句之外的语句中的经过初始化的声明式，则
其值为判断变量按语境转换为 [`bool]（[#conv]）的值。

[:en] If that conversion is ill-formed, the program is ill-formed.
[:zh_CN] 如果这种转换非良构，则程序非良构。

[:en] The value of a [~condition] that is an expression is the value of the
expression, contextually converted to [`bool] for statements other than
[`:key switch]; if that conversion is ill-formed, the program is ill-formed.
[:zh_CN] 若[~条件]是表达式，则其值为表达式的值，对于除 [`:key switch] 之外的语句
来说它被按语境转换为 [`bool]；如果这种转换非良构，则程序非良构。

[:en] The value of the condition will be referred to as simply [=lq]the condition[=rq]
where the usage is unambiguous.
[:zh_CN] 当没有歧义时，我们简单地用“条件”来代表条件的值。

[para]
[:en] If a [~condition] can be syntactically resolved as either an expression or
a declaration, it is interpreted as the latter.
[:zh_CN] 当[~条件]在语法上同时可以被解析为表达式或声明式时，它被解释为后者。

[para]
[:en] In the [~decl-specifier-seq] of a [~condition], including that of any
[~structured-binding-declaration] of the [~condition], each [~decl-specifier]
shall be either a [~type-specifier] or [`:key constexpr].
[:zh_CN] [~条件]（包括[~条件]的任何[~结构化绑定声明式]）的[~声明说明符序列]
中的每个[~声明说明符]，应当要么为[~类型说明符]，要么为 [`:key constexpr]。
