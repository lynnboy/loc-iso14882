[section#stmt.pre
    [:en] Preamble
    [:zh_CN] 导言
]

[para]
[:en]
Except as indicated, statements are executed in sequence.
[:zh_CN]
除非明确指出，否则语句都是按顺序执行的。

[syntax]
[rule statement [:zh_CN] 语句 ]
    [| labeled-statement ]
    [| [~:opt attribute-specifier-seq] expression-statement ]
    [| [~:opt attribute-specifier-seq] compound-statement ]
    [| [~:opt attribute-specifier-seq] selection-statement ]
    [| [~:opt attribute-specifier-seq] iteration-statement ]
    [| [~:opt attribute-specifier-seq] jump-statement ]
    [| declaration-statement ]
    [| [~:opt attribute-specifier-seq] try-block ]
[rule:end]

[rule init-statement [:zh_CN] 初始化语句 ]
    [| expression-statement ]
    [| simple-declaration ]
[rule:end]

[rule condition [:zh_CN] 条件 ]
    [| expression ]
    [| [~:opt attribute-specifier-seq] decl-specifier-seq declarator
        brace-or-equal-initializer ]
[rule:end]
[syntax:end]

[:en]
The optional [~attribute-specifier-seq] appertains to the respective statement.
[:zh_CN]
可选的[~特性说明符序列]属于相应的语句。

[para]
[:en]
A [+substatement] of a [~statement] is one of the following:
[:zh_CN]
[~语句]的[+子语句]为：
[list]
[item]
[:en@~]
for a [~labeled-statement], its contained [~statement],
[:zh_CN@~]
对于[~带标号语句]，包括其所包含的[~语句]，
[item]
[:en@~]
for a [~compound-statement], any [~statement] of its [~statement-seq],
[:zh_CN@~]
对于[~复合语句]，包括其[~语句序列]中的任何[~语句]，
[item]
[:en@~]
for a [~selection-statement], any of its [~statement]s (but not its [~init-statement]), or
[:zh_CN@~]
对于[~选择语句]，包括其中的任何[~语句]，但不包括其[~初始化语句]，或者
[item]
[:en@~]
for an [~iteration-statement], its contained [~statement] (but not an [~init-statement]).
[:zh_CN@~]
对于[~循环语句]，包括其所包含的任何[~语句]，但不包括其[~初始化语句]。
[list:end]

[begin:note]
[:en]
The [~compound-statement] of a [~lambda-expression] is not a substatement of the
[~statement] (if any) in which the [~lambda-expression] lexically appears.
[:zh_CN]
[~lambda-表达式]的[~复合语句]并非词法上包含该 [~lambda-表达式]的[~语句]（如果有）
的子语句。
[end:note]

[para]
[:en]
A [~statement] [`S1] [+encloses[%enclosing statement]] a [~statement] [`S2] if
[:zh_CN]
以下情况下，[~语句] [`S1] [+包围[%外围语句]][~语句] [`S2]：
[list]
[item]
[:en@~]
[`S2] is a substatement of [`S1] ([#dcl.dcl]),
[:zh_CN@~]
[`S2] 是 [`S1] 的子语句（[#dcl.dcl]），
[item]
[:en@~]
[`S1] is a [~selection-statement] or [~iteration-statement] and [`S2] is the
[~init-statement] of [`S1],
[:zh_CN@~]
[`S1] 是[~选择语句]或[~循环语句]，且 [`S2] 是 [`S1] 的[~初始化语句]，
[item]
[:en@~]
[`S1] is a [~try-block] and [`S2] is its [~compound-statement] or any of the
[~compound-statement]s of its [~handler]s, or
[:zh_CN@~]
[`S1] 是 [~try-块]，且 [`S2] 是其[~合成语句]或其任何[~处理器]的[~合成语句]，或者
[item]
[:en@~]
[`S1] encloses a statement [`S3] and [`S3] encloses [`S2].
[:zh_CN@~]
[`S1] 包围语句 [`S3]，且 [`S3] 包围 [`S2]。
[list:end]

[para]
[:en]
[%[~condition]s[!rules for]]
The rules for [~condition]s apply both to [~selection-statement]s and to the
[`for] and [`while] statements ([#stmt.iter]).
[:zh_CN]
[%[~条件][!～的规则]]
针对[~条件]的规则同时适用于[~选择语句]以及 [`for] 和 [`while] 语句
（[#stmt.iter]）。

[:en]
A [~condition] that is not an [~expression] is a declaration ([#dcl.dcl]).
[:zh_CN]
不是[~表达式]的[~条件]是声明式（[#dcl.dcl]）。

[:en]
The [~declarator] shall not specify a function or an array.
[:zh_CN]
其[~声明符]不能指定函数或数组。

[:en]
The [~decl-specifier-seq] shall not define a class or enumeration.
[:zh_CN]
其[~声明说明符序列]不能定义类或枚举。

[:en]
If the [`auto] [~type-specifier] appears in the [~decl-specifier-seq], the type
of the identifier being declared is deduced from the initializer as described in
[#dcl.spec.auto].
[:zh_CN]
如果在[~声明说明符序列]中出现了[~类型说明符] [`auto]，则所声明的标识符的类型就
根据 [#dcl.spec.auto] 所述从其初始化式中推断出来。

[para]
[begin:note]
[:en]
[%statement[!declaration in [`if]]]
[%statement[!declaration in [`switch]]]
A name introduced in a [~selection-statement] or [~iteration-statement] outside
of any substatement is in scope from its point of declaration until the end of
the statement[=']s substatements.
[:zh_CN]
[%语句[![`if]～中的声明式]]
[%语句[![`switch]～中的声明式]]
由[~条件]中的声明式所引入的名字（无论是由条件的[~声明说明符序列]还是[~声明符]所
引入的），从其声明点开始到由该条件所控制的各个子语句的末尾，处于作用域中。

[:en]
If the name is redeclared in the outermost block of a substatement controlled
by the condition, the declaration that redeclares the name is ill-formed.
[:zh_CN]
如果在该条件所控制的子语句的最外层块中重新声明这个名字，则重新声明这个名字的
声明式非良构。
[end:note]

[para]
[:en]
The value of a [~condition] that is an initialized declaration in a statement
other than a [`switch] statement is the value of the declared variable
contextually converted to [`bool] ([#conv]).
[:zh_CN]
若[~条件]是除 [`switch] 语句之外的语句中的经过初始化的声明式，则其值为所声明的
变量按语境转换为 [`bool]（[#conv]）的值。

[:en]
If that conversion is ill-formed, the program is ill-formed.
[:zh_CN]
如果这种转换非良构，则程序非良构。

[:en]
The value of a [~condition] that is an initialized declaration in a [`switch]
statement is the value of the declared variable if it has integral or
enumeration type, or of that variable implicitly converted to integral or
enumeration type otherwise.
[:zh_CN]
若[~条件]是 [`switch] 语句中的经过初始化的声明式，则当所声明的变量具有整型或枚举
类型时，其值为变量的值，否则为该变量经过隐式转换为整型或枚举类型的值。

[:en]
The value of a [~condition] that is an expression is the value of the
expression, contextually converted to [`bool] for statements other than
[`switch]; if that conversion is ill-formed, the program is ill-formed.
[:zh_CN]
若[~条件]是表达式，则其值为表达式的值，对于除 [`switch] 之外的语句来说它被按语境
转换为 [`bool]；如果这种转换非良构，则程序非良构。

[:en]
The value of the condition will be referred to as simply [=lq]the condition[=rq]
where the usage is unambiguous.
[:zh_CN]
当没有歧义时，我们简单地用“条件”来代表条件的值。

[para]
[:en]
If a [~condition] can be syntactically resolved as either an expression or the
declaration of a block-scope name, it is interpreted as a declaration.
[:zh_CN]
当[~条件]在语法上同时可以被解析为表达式或者块作用域的名字的声明式时，它将被解释
为声明式。

[para]
[:en]
In the [~decl-specifier-seq] of a [~condition], each [~decl-specifier] shall be
either a [~type-specifier] or [`constexpr].
[:zh_CN]
[~条件]的[~声明说明符序列]中的每个[~声明说明符]，应当要么为[~类型说明符]，要么为
[`constexpr]。
