[section#debugging.utility
    [:en] Utility
    [:zh_CN] 工具
]

[%@lib breakpoint]
[codeblock:declaration]
void breakpoint() noexcept;
[codeblock:end]

[div:description]
[para]
[:en] The semantics of this function are [?impldef semantics of [`breakpoint]].
[:zh_CN] 此函数的语义是[?impldef [`breakpoint] 的语义]。

[begin:note]
[:en] It is intended that, when invoked with a debugger present, the execution
of the program temporarily halts and execution is handed to the debugger until
the program is either terminated by the debugger or the debugger resumes
execution of the program as if the function was not invoked.
[:zh_CN] 其意图是，当在调试器下调用时，临时停止程序的执行并将执行交给调试器，直到
程序被调试器终止，或者调试器如同该函数未被调用过一样恢复程序的执行。

[:en] In particular, there is no intent for a call to this function to accomodate
resumption of the program in a different manner.
[:zh_CN] 特别地，没有意图让对此函数的调用适应以不同方式恢复程序的执行。

[:en] If there is no debugger present, execution of the program can end abnormally.
[:zh_CN] 如果没有调试器存在，程序的执行可能会不正常终止。
[end:note]
[div:end]

[%@lib breakpoint_if_debugging]
[codeblock:declaration]
void breakpoint_if_debugging() noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
if (is_debugger_present()) breakpoint();
[codeblock:end]
[div:end]

[%@lib is_debugger_present]
[codeblock:declaration]
bool is_debugger_present() noexcept;
[codeblock:end]

[div:description]
[para:required]
[:en] This function has no preconditions.
[:zh_CN] 此函数没有前条件。

[para:default]
[:en] [?impldef default semantics of [`is_debugger_present]].
[:zh_CN] [?impldef [`is_debugger_present] 的缺省语义]。

[begin:note]
[:en] It is intended that, using an immediate (uncached) query to determine if
the program is being traced by a debugger, an implementation returns [`true]
only when tracing the execution of the program with a debugger.
[:zh_CN] 其意图是，使用立即（非缓存）查询来确定程序是否被调试器跟踪，实现仅在
以调试器跟踪程序的执行时返回 [`true]。

[:en] On Windows or equivalent systems, this can be achieved by calling the
[`::IsDebuggerPresent()] Win32 function.
[:zh_CN] 在 Windows 或等价系统上，可以通过调用 [`::IsDebuggerPresent()] Win32 函数来达成。

[:en] For systems compatible with ISO/IEC 23360:2021, this can be achieved by
checking for a tracing process, with a best-effort determination that such a
tracing process is a debugger.
[:zh_CN] 对于与 ISO/IEC 23360:2021 兼容的系统，可以通过检查跟踪进程来达成，
并尽最大努力确定这个跟踪进程是一个调试器。
[end:note]

[para:remarks]
[:en] This function is replaceable ([#dcl.fct.def.replace]).
[:zh_CN] 此函数是可替换函数（[#dcl.fct.def.replace]）。
[div:end]
