[section#debugging.utility
    [:en] Utility
    [:zh_CN] 工具
]

[%@lib breakpoint]
[codeblock:declaration]
void breakpoint() noexcept;
[codeblock:end]

[div:description]
[para]
[:en] The semantics of this function are [?impldef semantics of [`breakpoint]].
[:zh_CN] 此函数的语义是[?impldef [`breakpoint] 的语义]。

[begin:note]
[:en] When invoked, the execution of the program temporarily halts and execution
is handed to the debugger until such a time as: The program is terminated by the
debugger, or the debugger resumes execution of the program as if the function
was not invoked.
[:zh_CN] 当调用时，临时停止程序的执行，由调试器处理其执行，直到发生以下情况：
程序被调试器终止，或者调试器恢复程序的执行，如同该函数未被调用过一样。
[end:note]
[div:end]

[%@lib breakpoint_if_debugging]
[codeblock:declaration]
void breakpoint_if_debugging() noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
if (is_debugger_present()) breakpoint();
[codeblock:end]
[div:end]

[%@lib is_debugger_present]
[codeblock:declaration]
bool is_debugger_present() noexcept;
[codeblock:end]

[div:description]
[para:replaceable]
[:en] A [=Cpp] program may define a function with this function signature, and
thereby displace the default version defined by the [=Cpp] standard library.
[:zh_CN] [=Cpp] 程序可以定义具有这个函数签名的函数，并由此取代 [=Cpp] 标准库定义的缺省
版本。

[para:required]
[:en] This function has no preconditions.
[:zh_CN] 此函数没有前条件。

[para:default]
[:en] [?impldef default semantics of [`is_debugger_present]].
[:zh_CN] [?impldef [`is_debugger_present] 的缺省语义]。

[begin:note]
[:en] When tracing the execution of a program with a debugger, an implementation
returns [`true].
[:zh_CN] 当以调试器跟踪程序的执行时，实现返回 [`true]。

[:en] An implementation performs an immediate query, as needed, to determine if
the program is traced by a debugger.
[:zh_CN] 实现按需实施一次立即查询，以确定程序是否被调试器跟踪。

[:en] On Windows or equivalent systems, this can be achieved by calling the
[`::IsDebuggerPresent()] Win32 function.
[:zh_CN] 在 Windows 或等价系统上，可以通过调用 [`::IsDebuggerPresent()] Win32
函数来达成。

[:en] On POSIX, this can be achieved by checking for a tracer parent process,
with best effort determination that such a tracer parent process is a debugger.
[:zh_CN] 在 POSIX 上，可以通过检查跟踪器父进程来达成，并尽最大努力确定这个跟踪器
进程是一个调试器。
[end:note]
[div:end]
