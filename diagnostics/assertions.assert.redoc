[section#assertions.assert
    [:en] The [`assert] macro
    [:zh_CN] [`assert] 宏
]

[para]
[:en] If [`NDEBUG] is defined as a macro name at the point in the source file
where [`<cassert>] is included, the [`assert] macro is defined as
[:zh_CN] 如果在源文件中包含 [`<cassert>] 的位置 [`NDEBUG] 已经被定义为宏名，则
[`assert] 宏被定义为
[codeblock]
#define _[[redoc("_<", "`:m>")]]assert(...) ((void)0)
[codeblock:end]

[para]
[:en] Otherwise, the [`:m assert] macro puts a diagnostic test into programs;
it expands to an expression of type [`:key void] which has the following effects:
[:zh_CN] 否则，[`:m assert] 宏向程序中放入一条诊断测试；它被展开为一条 [`:key void]
类型的表达式，其效果如下：

[list]
[item]
[:en] [`__VA_ARGS__] is evaluated and contextually converted to [`bool].
[:zh_CN] 求值 [`__VA_ARGS__] 并将其按语境转换为 [`bool]。
[item]
[:en] If the evaluation yields [`true] there are no further effects.
[:zh_CN] 若求值产生 [`true] 则没有进一步效果。
[item]
[:en] Otherwise, the [`assert] macro[=']s expression creates a diagnostic on the
standard error stream in an [?impldef format of diagnostic created by [`assert]
macro[=']s expression] format and calls [`abort()].
[:zh_CN] 否则，[`assert] 宏的表达式在标准错误流上创建一条具有[?impldef [`assert]
宏的表达式所创建的诊断格式]格式的诊断消息，并调用 [`abort()]。

[:en] The diagnostic contains [`#__VA_ARGS__] and information on the name of the
source file, the source line number, and the name of the enclosing function
(such as provided by [`source_location::current()]).
[:zh_CN] 诊断消息中包含 [`#__VA_ARGS__] 和源文件名字、源代码行号和外围函数名等
信息（如 [`source_location::current()] 所提供的那些）。
[list:end]

[para]
[:en] If [`__VA_ARGS__] does not expand to an [~assignment-expression],
the program is ill-formed.
[:zh_CN] 如果 [`__VA_ARGS__] 未能扩展成[~赋值表达式]，则程序非良构。

[para]
[:en] The macro [`assert] is redefined according to the current state of
[`NDEBUG] each time that [`<cassert>] is included.
[:zh_CN] 每次包含 [`<cassert>] 时，均会根据 [`NDEBUG] 的当前状态重新定义 [`assert] 宏。

[para]
[:en] An expression [`assert(E)] is a constant subexpression ([#defns.const.subexpr]), if
[:zh_CN] 如下情况下表达式 [`assert(E)] 是常量子表达式（[#defns.const.subexpr]）：

[list]
[item]
[:en] [`NDEBUG] is defined at the point where [`assert] is last defined or redefined, or
[:zh_CN] 在 [`assert] 最后一次定义或重新定义的位置，[`NDEBUG] 是已经定义的，或者
[item]
[:en] [`E] contextually converted to [`bool] ([#conv]) is a constant
subexpression that evaluates to the value [`true].
[:zh_CN] [`E] 按语境转换为 [`bool]（[#conv]）是求值为 [`true] 值的常量子表达式。
[list:end]
