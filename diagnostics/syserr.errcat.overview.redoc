[section#syserr.errcat.overview
    [:en] Overview
    [:zh_CN] 概要
]

[para]
[:en]
The class [`error_category] serves as a base class for types used to identify
the source and encoding of a particular category of error code.
[:zh_CN]
[`error_category] 类用作用于标识某个特定类别的错误号码的来源和编码的类型的基类。

[:en]
Classes may be derived from [`error_category] to support categories of errors in
addition to those defined in this document.
[:zh_CN]
可以用派生自 [`error_category] 的类来支持本文档所定义之外的错误类别。

[:en]
Such classes shall behave as specified in this subclause ([#syserr.errcat]).
[:zh_CN]
这些类的行为应当如本子条款所指定的（[#syserr.errcat]）。

[enter:note]
[:en]
[`error_category] objects are passed by reference, and two such objects are
equal if they have the same address.
[:zh_CN]
[`error_category] 对象是按引用传递的，且当两个这种对象具有相同的地址时它们即相等
。

[:en]
This means that applications using custom [`error_category] types should create
a single object of each such type.
[:zh_CN]
这意味着使用了定制的 [`error_category] 类型的应用程序应当为每个这种类型创建单个
对象。
[exit:note]

[%@library error_category]
[%@library error_category[![:en]constructor[:zh_CN]构造函数]]
[%@library error_category[![:en]destructor[:zh_CN]析构函数]]
[%@library generic_category]
[%@library system_category]
[codeblock:synopsis]
namespace std {
  class error_category {
  public:
    constexpr error_category() noexcept;
    virtual ~error_category();
    error_category(const error_category&) = delete;
    error_category& operator=(const error_category&) = delete;
    virtual const char* name() const noexcept = 0;
    virtual error_condition default_error_condition(int ev) const noexcept;
    virtual bool equivalent(int code, const error_condition& condition) const noexcept;
    virtual bool equivalent(const error_code& code, int condition) const noexcept;
    virtual string message(int ev) const = 0;
    
    bool operator==(const error_category& rhs) const noexcept;
    bool operator!=(const error_category& rhs) const noexcept;
    bool operator< (const error_category& rhs) const noexcept;
  };

  const error_category& generic_category() noexcept;
  const error_category& system_category() noexcept;
}
[codeblock:end]
