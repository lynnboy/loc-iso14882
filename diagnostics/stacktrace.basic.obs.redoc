[section#stacktrace.basic.obs
    [:en] Observers
    [:zh_CN] 探察函数
]

[%@lib@member const_iterator[!basic_stacktrace]]
[codeblock:declaration]
using const_iterator = [[redoc("[=impdef]")]];
[codeblock:end]

[div:description]
[para]
[:en] The type models [`:c random_access_iterator]
([#iterator.concept.random.access]) and meets the [^:oc RandomAccessIterator]
requirements ([#random.access.iterators]).
[:zh_CN] 该类型构成 [`:c random_access_iterator]
（[#iterator.concept.random.access]）并满足 [^:oc RandomAccessIterator] 规定
（[#random.access.iterators]）。
[div:end]

[%@lib@member get_allocator[!basic_stacktrace]]
[codeblock:declaration]
allocator_type get_allocator() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`[*frames_].get_allocator()].
[:zh_CN] [`[*frames_].get_allocator()]。
[div:end]

[%@lib@member begin[!basic_stacktrace]]
[%@lib@member cbegin[!basic_stacktrace]]
[codeblock:declaration]
const_iterator begin() const noexcept;
const_iterator cbegin() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] An iterator referring to the first element in [*frames_].
[:zh_CN] 指代 [*frames_] 的第一个元素的迭代器。

[:en] If [`empty()] is [`true], then it returns the same value as [`end()].
[:zh_CN] 若 [`empty()] 为 [`true]，则它返回与 [`end()] 相同的值。
[div:end]

[%@lib@member end[!basic_stacktrace]]
[%@lib@member cend[!basic_stacktrace]]
[codeblock:declaration]
const_iterator end() const noexcept;
const_iterator cend() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] The end iterator.
[:zh_CN] 末尾迭代器。
[div:end]

[%@lib@member rbegin[!basic_stacktrace]]
[%@lib@member crbegin[!basic_stacktrace]]
[codeblock:declaration]
const_reverse_iterator rbegin() const noexcept;
const_reverse_iterator crbegin() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`reverse_iterator(cend())].
[:zh_CN] [`reverse_iterator(cend())]。
[div:end]

[%@lib@member rend[!basic_stacktrace]]
[%@lib@member crend[!basic_stacktrace]]
[codeblock:declaration]
const_reverse_iterator rend() const noexcept;
const_reverse_iterator crend() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`reverse_iterator(cbegin())].
[:zh_CN] [`reverse_iterator(cbegin())]。
[div:end]

[%@lib@member empty[!basic_stacktrace]]
[codeblock:declaration]
[[nodiscard]] bool empty() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`[*frames_].empty()].
[:zh_CN] [`[*frames_].empty()]。
[div:end]

[%@lib@member size[!basic_stacktrace]]
[codeblock:declaration]
size_type size() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`[*frames_].size()].
[:zh_CN] [`[*frames_].size()]。
[div:end]

[%@lib@member max_size[!basic_stacktrace]]
[codeblock:declaration]
size_type max_size() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`[*frames_].max_size()].
[:zh_CN] [`[*frames_].max_size()]。
[div:end]

[%@lib@member operator`[`][!basic_stacktrace]]
[codeblock:declaration]
const_reference operator[](size_type frame_no) const;
[codeblock:end]

[div:description]
[para:expects]
[:en] [`frame_no < size()] is [`true].
[:zh_CN] [`frame_no < size()] 为 [`true]。

[para:returns]
[:en] [`[*frames_]`[frame_no`]].
[:zh_CN] [`[*frames_]`[frame_no`]]。

[para:throws]
[:en] Nothing.
[:zh_CN] 无。
[div:end]

[%@lib@member at[!basic_stacktrace]]
[codeblock:declaration]
const_reference at(size_type frame_no) const;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`[*frames_]`[frame_no`]].
[:zh_CN] [`[*frames_]`[frame_no`]]。

[para:throws]
[:en] [`out_of_range] if [`frame_no >= size()].
[:zh_CN] 当 [`frame_no >= size()] 时抛出 [`out_of_range]。
[div:end]
