[section#flat.multimap.cons
    [:en] Constructors
    [:zh_CN] 构造函数
]

[%@lib@ctor flat_multimap]
[codeblock:declaration]
flat_multimap(key_container_type key_cont, mapped_container_type mapped_cont,
              const key_compare& comp = key_compare());
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [`c.keys] with [`std::move(key_cont)], [`c.values] with
[`std::move(mapped_cont)], and [`compare] with [`comp]; and sorts the range
[=range(begin(),end())] with respect to [`value_comp()].
[:zh_CN] 以 [`std::move(key_cont)] 初始化 [`c.keys]，以 [`std::move(mapped_cont)]
初始化 [`c.values]，并以 [`comp] 初始化 [`compare]；并根据 [`value_comp()] 对
范围 [=range(begin(),end())] 进行排序。

[para:complexity]
[:en] Linear in [$N] if the container arguments are already sorted with respect
to [`value_comp()] and otherwise [$N \log N], where [$N] is the value of
[`key_cont.size()] before this call.
[:zh_CN] 如果各容器实参已经根据 [`value_comp()] 有序，则对于 [$N] 为线性，否则为
[$N \log N]，其中 [$N] 为本次调用之前 [`key_cont.size()] 的值。
[div:end]

[%@lib@ctor flat_multimap]
[codeblock:declaration]
template<class Allocator>
  flat_multimap(const key_container_type& key_cont, const mapped_container_type& mapped_cont,
                const Allocator& a);
template<class Allocator>
  flat_multimap(const key_container_type& key_cont, const mapped_container_type& mapped_cont,
                const key_compare& comp, const Allocator& a);
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`uses_allocator_v<key_container_type, Allocator>] is [`true] and
[`uses_allocator_v<mapped_container_type, Allocator>] is [`true].
[:zh_CN] [`uses_allocator_v<key_container_type, Allocator>] 为 [`true] 并且
[`uses_allocator_v<mapped_container_type, Allocator>] 为 [`true]。

[para:effects]
[:en] Equivalent to [`flat_multimap(key_cont, mapped_cont)] and
[`flat_multimap(key_cont, mapped_cont, comp)], respectively, except that
[`c.keys] and [`c.values] are constructed with uses-allocator construction
([#allocator.uses.construction]).
[:zh_CN] 分别等价于 [`flat_multimap(key_cont, mapped_cont)] 和
[`flat_multimap(key_cont, mapped_cont, comp)]，但 [`c.keys] 和
[`c.values] 进行使用分配器的构造（[#allocator.uses.construction]）。

[para:complexity]
[:en] Same as [`flat_multimap(key_cont, mapped_cont)] and
[`flat_multimap(key_cont, mapped_cont, comp)], respectively.
[:zh_CN] 分别与 [`flat_multimap(key_cont, mapped_cont)] 和
[`flat_multimap(key_cont, mapped_cont, comp)] 相同。
[div:end]

[%@lib@ctor flat_multimap]
[codeblock:declaration]
flat_multimap(sorted_equivalent_t, key_container_type key_cont, mapped_container_type mapped_cont,
              const key_compare& comp = key_compare());
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [`c.keys] with [`std::move(key_cont)], [`c.values] with
[`std::move(mapped_cont)], and [`compare] with [`comp].
[:zh_CN] 以 [`std::move(key_cont)] 初始化 [`c.keys]，以 [`std::move(mapped_cont)]
初始化 [`c.values]，并以 [`comp] 初始化 [`compare]。

[para:complexity]
[:en] Constant.
[:zh_CN] 常量。
[div:end]

[%@lib@ctor flat_multimap]
[codeblock:declaration]
template<class Allocator>
  flat_multimap(sorted_equivalent_t s, const key_container_type& key_cont,
                const mapped_container_type& mapped_cont, const Allocator& a);
template<class Allocator>
  flat_multimap(sorted_equivalent_t s, const key_container_type& key_cont,
                const mapped_container_type& mapped_cont, const key_compare& comp,
                const Allocator& a);
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`uses_allocator_v<key_container_type, Allocator>] is [`true] and
[`uses_allocator_v<mapped_container_type, Allocator>] is [`true].
[:zh_CN] [`uses_allocator_v<key_container_type, Allocator>] 为 [`true] 并且
[`uses_allocator_v<mapped_container_type, Allocator>] 为 [`true]。

[para:effects]
[:en] Equivalent to [`flat_multimap(s, key_cont, mapped_cont)] and
[`flat_multimap(s, key_cont, mapped_cont, comp)], respectively, except that
[`c.keys] and [`c.values] are constructed with uses-allocator construction
([#allocator.uses.construction]).
[:zh_CN] 分别等价于 [`flat_multimap(s, key_cont, mapped_cont)] 和
[`flat_multimap(s, key_cont, mapped_cont, comp)]，但 [`c.keys] 和
[`c.values] 进行使用分配器的构造（[#allocator.uses.construction]）。

[para:complexity]
[:en] Linear.
[:zh_CN] 线性。
[div:end]

[%@lib@ctor flat_multimap]
[codeblock:declaration]
template<class Allocator>
  flat_multimap(const flat_multimap&, const Allocator& a);
template<class Allocator>
  flat_multimap(flat_multimap&&, const Allocator& a);
template<class Allocator>
  flat_multimap(const key_compare& comp, const Allocator& a);
template<class Allocator>
  explicit flat_multimap(const Allocator& a);
template<class InputIterator, class Allocator>
  flat_multimap(InputIterator first, InputIterator last, const key_compare& comp,
                const Allocator& a);
template<class InputIterator, class Allocator>
  flat_multimap(InputIterator first, InputIterator last, const Allocator& a);
template<[[redoc("*:c>")]]container-compatible-range<value_type> R, class Allocator>
  flat_multimap(from_range_t, R&& rg, const Allocator& a);
template<[[redoc("*:c>")]]container-compatible-range<value_type> R, class Allocator>
  flat_multimap(from_range_t, R&& rg, const key_compare& comp, const Allocator& a);
template<class InputIterator, class Allocator>
  flat_multimap(sorted_equivalent_t, InputIterator first, InputIterator last,
                const key_compare& comp, const Allocator& a);
template<class InputIterator, class Allocator>
  flat_multimap(sorted_equivalent_t, InputIterator first, InputIterator last,
                const Allocator& a);
template<class Allocator>
  flat_multimap(initializer_list<value_type> il, const key_compare& comp, const Allocator& a);
template<class Allocator>
  flat_multimap(initializer_list<value_type> il, const Allocator& a);
template<class Allocator>
  flat_multimap(sorted_equivalent_t, initializer_list<value_type> il,
                const key_compare& comp, const Allocator& a);
template<class Allocator>
  flat_multimap(sorted_equivalent_t, initializer_list<value_type> il, const Allocator& a);
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`uses_allocator_v<key_container_type, Allocator>] is [`true] and
[`uses_allocator_v<mapped_container_type, Allocator>] is [`true].
[:zh_CN] [`uses_allocator_v<key_container_type, Allocator>] 为 [`true] 并且
[`uses_allocator_v<mapped_container_type, Allocator>] 为 [`true]。

[para:effects]
[:en] Equivalent to the corresponding non-allocator constructors, except that
[`c.keys] and [`c.values] are constructed with uses-allocator construction
([#allocator.uses.construction]).
[:zh_CN] 等价于对应的无分配器构造函数，但 [`c.keys] 和 [`c.values] 进行
使用分配器的构造（[#allocator.uses.construction]）。
[div:end]
