[section#flat.map.syn
    [:en] Header [`<flat_map>] synopsis
    [:zh_CN] 头文件 [`<flat_map>] 纲要
]

[%@hdr@def flat_map]
[codeblock:synopsis]
#include <compare>              // [:en] see [#compare.syn] \
                                [:zh_CN] 参见 [#compare.syn]
#include <initializer_list>     // [:en] see [#initializer.list.syn] \
                                [:zh_CN] 参见 [#initializer.list.syn]

namespace std {
  // [:en] [#flat.map], class template [`flat_map] \
  [:zh_CN] [#flat.map]，类模板 [`flat_map]
  template<class Key, class T, class Compare = less<Key>,
           class KeyContainer = vector<Key>, class MappedContainer = vector<T>>
    class flat_map;

  struct sorted_unique_t { explicit sorted_unique_t() = default; };
  inline constexpr sorted_unique_t sorted_unique{};

  template<class Key, class T, class Compare, class KeyContainer, class MappedContainer,
           class Allocator>
    struct uses_allocator<flat_map<Key, T, Compare, KeyContainer, MappedContainer>,
                          Allocator>;

  // [:en] [#flat.map.erasure], erasure for [`flat_map] \
  [:zh_CN] [#flat.map.erasure]，[`flat_map] 的擦除
  template<class Key, class T, class Compare, class KeyContainer, class MappedContainer,
           class Predicate>
    typename flat_map<Key, T, Compare, KeyContainer, MappedContainer>::size_type
      erase_if(flat_map<Key, T, Compare, KeyContainer, MappedContainer>& c, Predicate pred);

  // [:en] [#flat.multimap], class template [`flat_multimap] \
  [:zh_CN] [#flat.multimap]，类模板 [`flat_multimap]
  template<class Key, class T, class Compare = less<Key>,
           class KeyContainer = vector<Key>, class MappedContainer = vector<T>>
    class flat_multimap;

  struct sorted_equivalent_t { explicit sorted_equivalent_t() = default; };
  inline constexpr sorted_equivalent_t sorted_equivalent{};

  template<class Key, class T, class Compare, class KeyContainer, class MappedContainer,
           class Allocator>
    struct uses_allocator<flat_multimap<Key, T, Compare, KeyContainer, MappedContainer>,
                          Allocator>;

  // [:en] [#flat.multimap.erasure], erasure for [`flat_multimap] \
  [:zh_CN] [#flat.multimap.erasure]，[`flat_multimap] 的擦除
  template<class Key, class T, class Compare, class KeyContainer, class MappedContainer,
           class Predicate>
    typename flat_multimap<Key, T, Compare, KeyContainer, MappedContainer>::size_type
      erase_if(flat_multimap<Key, T, Compare, KeyContainer, MappedContainer>& c, Predicate pred);
}
[codeblock:end]
