[section#flat.multimap.erasure
    [:en] Erasure
    [:zh_CN] 擦除
]

[%@lib@member erase_if[!flat_multimap]]
[codeblock:declaration]
template<class Key, class T, class Compare, class KeyContainer, class MappedContainer,
         class Predicate>
  constexpr typename flat_multimap<Key, T, Compare, KeyContainer, MappedContainer>::size_type
    erase_if(flat_multimap<Key, T, Compare, KeyContainer, MappedContainer>& c, Predicate pred);
[codeblock:end]

[div:description]
[para:expects]
[:en] [`Key] and [`T] meet the [^:oc MoveAssignable] requirements.
[:zh_CN] [`Key] 和 [`T] 满足 [^:oc MoveAssignable] 的规定。

[para:effects]
[:en] Let [$E] be [`bool(pred(pair<const Key&, const T&>(e)))].
[:zh_CN] 令 [$E] 为 [`bool(pred(pair<const Key&, const T&>(e)))]。

[:en] Erases all elements [`e] in [`c] for which [$E] holds.
[:zh_CN] 擦除 [`c] 中所有使得 [$E] 成立的元素。

[para:returns]
[:en] The number of elements erased.
[:zh_CN] 所擦除元素的数量。

[para:complexity]
[:en] Exactly [`c.size()] applications of the predicate.
[:zh_CN] 恰好进行 [`c.size()] 次谓词的运用。

[para:remarks]
[:en] Stable ([#algorithm.stable]).
[:zh_CN] 稳定的（[#algorithm.stable]）。

[:en] If an invocation of [`erase_if] exits via an exception, [`c] is in a valid
but unspecified state ([#defns.valid]).
[:zh_CN] 如果调用 [`erase_if] 以异常退出，则 [`c] 处于有效但未指明的状态（[#defns.valid]）。

[begin:note]
[:en] [`c] still meets its invariants, but can be empty.
[:zh_CN] [`c] 仍然满足其不变式，但可能为空。
[end:note]
[div:end]
