[section#unord.set.modifiers
    [:en] Modifiers
    [:zh_CN] 改动函数
]

[%@lib@member insert[!unordered_set]]
[codeblock:declaration]
template<class K> constexpr pair<iterator, bool> insert(K&& obj);
template<class K> constexpr iterator insert(const_iterator hint, K&& obj);
[codeblock:end]

[div:description]
[para:constraints]
[:en] The [~qualified-id]s [`Hash::is_transparent] and [`Pred::is_transparent]
are valid and denotes types.
[:zh_CN] [~限定标识] [`Hash::is_transparent] 和 [`Pred::is_transparent] 均有效
且代表的是类型。

[:en] For the second overload, [`is_convertible_v<K&&, const_iterator>] and
[`is_convertible_v<K&&, iterator>] are both [`false].
[:zh_CN] 对于第一种重载，[`is_convertible_v<K&&, const_iterator>] 和
[`is_convertible_v<K&&, iterator>] 均为 [`false]。

[para:expects]
[:en] [`value_type] is [^:oc EmplaceConstructible] into [`unordered_set] from
[`std::forward<K>(obj)].
[:zh_CN] [`value_type] 以 [`std::forward<K>(obj)] 向 [`unordered_set] 中
[^:oc EmplaceConstructible]。

[para:effects]
[:en] If the set already contains an element that is equivalent to [`obj],
there is no effect.
[:zh_CN] 如果该集合中已经存在与 [`obj] 等价的元素，则没有效果。

[:en] Otherwise, let [`h] be [`hash_function()(obj)].
[:zh_CN] 否则，令 [`h] 为 [`hash_function()(obj)]。

[:en] Constructs an object [`u] of type [`value_type] with [`std::forward<K>(obj)].
[:zh_CN] 以 [`std::forward<K>(obj)] 构造一个 [`value_type] 类型的对象 [`u]。

[:en] If [`hash_function()(u) != h || contains(u)] is [`true], the behavior is
undefined.
[:zh_CN] 如果 [`hash_function()(u) != h || contains(u)] 为 [`true]，则其行为未定义。

[:en] Inserts [`u] into [`*this].
[:zh_CN] 将 [`u] 插入 [`*this] 中。

[para:returns]
[:en] For the first overload, the [`bool] component of the returned pair is
[`true] if and only if the insertion took place.
[:zh_CN] 对于第一种重载，当且仅当发生了插入时，所返回的对偶的 [`bool] 成分为 [`true]。

[:en] The returned iterator points to the set element that is equivalent to [`obj].
[:zh_CN] 所返回的迭代器指向等价于 [`obj] 的集合元素。

[para:complexity]
[:en] Average case constant, worst case linear.
[:zh_CN] 平均情况为常量，最差情况为线性。
[div:end]
