[section#flat.multimap.defn
    [:en] Definition
    [:zh_CN] 定义式
]

[codeblock:synopsis]
namespace std {
  template<class Key, class T, class Compare = less<Key>,
           class KeyContainer = vector<Key>, class MappedContainer = vector<T>>
  class flat_multimap {
  public:
    // [:en] types \
    [:zh_CN] 类型
    using key_type               = Key;
    using mapped_type            = T;
    using value_type             = pair<key_type, mapped_type>;
    using key_compare            = Compare;
    using reference              = pair<const key_type&, mapped_type&>;
    using const_reference        = pair<const key_type&, const mapped_type&>;
    using size_type              = size_t;
    using difference_type        = ptrdiff_t;
    using iterator               = [[redoc("[?impdefx [:en] type of [`flat_multimap::iterator]"
        "[:zh_CN] [`flat_multimap::iterator] 的类型]")]];     // [:en] See [#container.requirements] [:zh_CN] 参见 [#container.requirements]
    using const_iterator         = [[redoc("[?impdefx [:en] type of [`flat_multimap::const_iterator]"
        "[:zh_CN] [`flat_multimap::const_iterator] 的类型]")]];     // [:en] See [#container.requirements] [:zh_CN] 参见 [#container.requirements]
    using reverse_iterator       = std::reverse_iterator<iterator>;
    using const_reverse_iterator = std::reverse_iterator<const_iterator>;
    using key_container_type     = KeyContainer;
    using mapped_container_type  = MappedContainer;

    class value_compare {
    private:
      key_compare [[redoc("*>")]]comp;                                           // [=expos]
      constexpr value_compare(key_compare c) : [[redoc("*>")]]comp(c) { }        // [=expos]

    public:
      constexpr bool operator()(const_reference x, const_reference y) const {
        return [[redoc("*>")]]comp(x.first, y.first);
      }
    };

    struct containers {
      key_container_type keys;
      mapped_container_type values;
    };

    // [:en] [#flat.multimap.cons], constructors \
    [:zh_CN] [#flat.multimap.cons]，构造函数
    constexpr flat_multimap() : flat_multimap(key_compare()) { }

    constexpr explicit flat_multimap(const key_compare& comp)
      : [[redoc("*>")]]c(), [[redoc("*>")]]compare(comp) { }

    constexpr flat_multimap(key_container_type key_cont, mapped_container_type mapped_cont,
                            const key_compare& comp = key_compare());

    constexpr flat_multimap(sorted_equivalent_t,
                            key_container_type key_cont, mapped_container_type mapped_cont,
                            const key_compare& comp = key_compare());

    template<class InputIterator>
      constexpr flat_multimap(InputIterator first, InputIterator last,
                              const key_compare& comp = key_compare())
        : [[redoc("*>")]]c(), [[redoc("*>")]]compare(comp)
        { insert(first, last); }

    template<class InputIterator>
      constexpr flat_multimap(sorted_equivalent_t, InputIterator first, InputIterator last,
                              const key_compare& comp = key_compare())
        : [[redoc("*>")]]c(), [[redoc("*>")]]compare(comp) { insert(sorted_equivalent, first, last); }

    template<[[redoc("*:c>")]]container-compatible-range<value_type> R>
      constexpr flat_multimap(from_range_t, R&& rg)
        : flat_multimap(from_range, std::forward<R>(rg), key_compare()) { }
    template<[[redoc("*:c>")]]container-compatible-range<value_type> R>
      constexpr flat_multimap(from_range_t, R&& rg, const key_compare& comp)
        : flat_multimap(comp) { insert_range(std::forward<R>(rg)); }

    constexpr flat_multimap(initializer_list<value_type> il,
                            const key_compare& comp = key_compare())
        : flat_multimap(il.begin(), il.end(), comp) { }

    constexpr flat_multimap(sorted_equivalent_t, initializer_list<value_type> il,
                            const key_compare& comp = key_compare())
        : flat_multimap(sorted_equivalent, il.begin(), il.end(), comp) { }

    // [:en] [#flat.multimap.cons.alloc], constructors with allocators \
    [:zh_CN] [#flat.multimap.cons.alloc]，带分配器的构造函数

    template<class Alloc>
      constexpr explicit flat_multimap(const Alloc& a);
    template<class Alloc>
      constexpr flat_multimap(const key_compare& comp, const Alloc& a);
    template<class Alloc>
      constexpr flat_multimap(const key_container_type& key_cont,
                    const mapped_container_type& mapped_cont, const Alloc& a);
    template<class Alloc>
      constexpr flat_multimap(const key_container_type& key_cont,
                    const mapped_container_type& mapped_cont,
                    const key_compare& comp, const Alloc& a);
    template<class Alloc>
      constexpr flat_multimap(sorted_equivalent_t, const key_container_type& key_cont,
                              const mapped_container_type& mapped_cont, const Alloc& a);
    template<class Alloc>
      constexpr flat_multimap(sorted_equivalent_t, const key_container_type& key_cont,
                              const mapped_container_type& mapped_cont,
                              const key_compare& comp, const Alloc& a);
    template<class Alloc>
      constexpr flat_multimap(const flat_multimap&, const Alloc& a);
    template<class Alloc>
      constexpr flat_multimap(flat_multimap&&, const Alloc& a);
    template<class InputIterator, class Alloc>
      constexpr flat_multimap(InputIterator first, InputIterator last, const Alloc& a);
    template<class InputIterator, class Alloc>
      constexpr flat_multimap(InputIterator first, InputIterator last,
                              const key_compare& comp, const Alloc& a);
    template<class InputIterator, class Alloc>
      constexpr flat_multimap(sorted_equivalent_t, InputIterator first, InputIterator last,
                              const Alloc& a);
    template<class InputIterator, class Alloc>
      constexpr flat_multimap(sorted_equivalent_t, InputIterator first, InputIterator last,
                              const key_compare& comp, const Alloc& a);
    template<[[redoc("*:c>")]]container-compatible-range<value_type> R, class Alloc>
      constexpr flat_multimap(from_range_t, R&& rg, const Alloc& a);
    template<[[redoc("*:c>")]]container-compatible-range<value_type> R, class Alloc>
      constexpr flat_multimap(from_range_t, R&& rg, const key_compare& comp, const Alloc& a);
    template<class Alloc>
      constexpr flat_multimap(initializer_list<value_type> il, const Alloc& a);
    template<class Alloc>
      constexpr flat_multimap(initializer_list<value_type> il, const key_compare& comp,
                              const Alloc& a);
    template<class Alloc>
      constexpr flat_multimap(sorted_equivalent_t, initializer_list<value_type> il,
                              const Alloc& a);
    template<class Alloc>
      constexpr flat_multimap(sorted_equivalent_t, initializer_list<value_type> il,
                              const key_compare& comp, const Alloc& a);

    flat_multimap& operator=(initializer_list<value_type>);

    // [:en] iterators \
    [:zh_CN] 迭代器
    constexpr iterator               begin() noexcept;
    constexpr const_iterator         begin() const noexcept;
    constexpr iterator               end() noexcept;
    constexpr const_iterator         end() const noexcept;

    constexpr reverse_iterator       rbegin() noexcept;
    constexpr const_reverse_iterator rbegin() const noexcept;
    constexpr reverse_iterator       rend() noexcept;
    constexpr const_reverse_iterator rend() const noexcept;

    constexpr const_iterator         cbegin() const noexcept;
    constexpr const_iterator         cend() const noexcept;
    constexpr const_reverse_iterator crbegin() const noexcept;
    constexpr const_reverse_iterator crend() const noexcept;

    // [:en] capacity \
    [:zh_CN] 容量
    constexpr bool empty() const noexcept;
    constexpr size_type size() const noexcept;
    constexpr size_type max_size() const noexcept;

    // [:en] modifiers \
    [:zh_CN] 改动函数
    template<class... Args> constexpr iterator emplace(Args&&... args);
    template<class... Args>
      constexpr iterator emplace_hint(const_iterator position, Args&&... args);

    constexpr iterator insert(const value_type& x)
      { return emplace(x); }
    constexpr iterator insert(value_type&& x)
      { return emplace(std::move(x)); }
    constexpr iterator insert(const_iterator position, const value_type& x)
      { return emplace_hint(position, x); }
    constexpr iterator insert(const_iterator position, value_type&& x)
      { return emplace_hint(position, std::move(x)); }

    template<class P> constexpr iterator insert(P&& x);
    template<class P>
      constexpr iterator insert(const_iterator position, P&&);
    template<class InputIterator>
      constexpr void insert(InputIterator first, InputIterator last);
    template<class InputIterator>
      constexpr void insert(sorted_equivalent_t, InputIterator first, InputIterator last);
    template<[[redoc("*:c>")]]container-compatible-range<value_type> R>
      constexpr void insert_range(R&& rg);

    constexpr void insert(initializer_list<value_type> il)
      { insert(il.begin(), il.end()); }
    constexpr void insert(sorted_equivalent_t, initializer_list<value_type> il)
      { insert(sorted_equivalent, il.begin(), il.end()); }

    constexpr containers extract() &&;
    constexpr void replace(key_container_type&& key_cont, mapped_container_type&& mapped_cont);

    constexpr iterator erase(iterator position);
    constexpr iterator erase(const_iterator position);
    constexpr size_type erase(const key_type& x);
    template<class K> constexpr size_type erase(K&& x);
    constexpr iterator erase(const_iterator first, const_iterator last);

    constexpr void swap(flat_multimap&) noexcept;
    constexpr void clear() noexcept;

    // [:en] observers \
    [:zh_CN] 探察函数
    constexpr key_compare key_comp() const;
    constexpr value_compare value_comp() const;

    constexpr const key_container_type& keys() const noexcept { return [[redoc("*>")]]c.keys; }
    constexpr const mapped_container_type& values() const noexcept { return [[redoc("*>")]]c.values; }

    // [:en] map operations \
    [:zh_CN] map 的操作
    constexpr iterator find(const key_type& x);
    constexpr const_iterator find(const key_type& x) const;
    template<class K> constexpr iterator find(const K& x);
    template<class K> constexpr const_iterator find(const K& x) const;

    constexpr size_type count(const key_type& x) const;
    template<class K> constexpr size_type count(const K& x) const;

    constexpr bool contains(const key_type& x) const;
    template<class K> constexpr bool contains(const K& x) const;

    constexpr iterator lower_bound(const key_type& x);
    constexpr const_iterator lower_bound(const key_type& x) const;
    template<class K> constexpr iterator lower_bound(const K& x);
    template<class K> constexpr const_iterator lower_bound(const K& x) const;

    constexpr iterator upper_bound(const key_type& x);
    constexpr const_iterator upper_bound(const key_type& x) const;
    template<class K> constexpr iterator upper_bound(const K& x);
    template<class K> constexpr const_iterator upper_bound(const K& x) const;

    constexpr pair<iterator, iterator> equal_range(const key_type& x);
    constexpr pair<const_iterator, const_iterator> equal_range(const key_type& x) const;
    template<class K>
      constexpr pair<iterator, iterator> equal_range(const K& x);
    template<class K>
      constexpr pair<const_iterator, const_iterator> equal_range(const K& x) const;

    friend constexpr bool operator==(const flat_multimap& x, const flat_multimap& y);

    friend constexpr [[redoc("*>")]]synth-three-way-result<value_type>
      operator<=>(const flat_multimap& x, const flat_multimap& y);

    friend constexpr void swap(flat_multimap& x, flat_multimap& y) noexcept
      { x.swap(y); }

  private:
    containers [[redoc("*>")]]c;               // [=expos]
    key_compare [[redoc("*>")]]compare;        // [=expos]
  };

  template<class KeyContainer, class MappedContainer,
           class Compare = less<typename KeyContainer::value_type>>
    flat_multimap(KeyContainer, MappedContainer, Compare = Compare())
      -> flat_multimap<typename KeyContainer::value_type, typename MappedContainer::value_type,
                       Compare, KeyContainer, MappedContainer>;

  template<class KeyContainer, class MappedContainer, class Allocator>
    flat_multimap(KeyContainer, MappedContainer, Allocator)
      -> flat_multimap<typename KeyContainer::value_type, typename MappedContainer::value_type,
                       less<typename KeyContainer::value_type>, KeyContainer, MappedContainer>;
  template<class KeyContainer, class MappedContainer, class Compare, class Allocator>
    flat_multimap(KeyContainer, MappedContainer, Compare, Allocator)
      -> flat_multimap<typename KeyContainer::value_type, typename MappedContainer::value_type,
                       Compare, KeyContainer, MappedContainer>;

  template<class KeyContainer, class MappedContainer,
           class Compare = less<typename KeyContainer::value_type>>
    flat_multimap(sorted_equivalent_t, KeyContainer, MappedContainer, Compare = Compare())
      -> flat_multimap<typename KeyContainer::value_type, typename MappedContainer::value_type,
                       Compare, KeyContainer, MappedContainer>;

  template<class KeyContainer, class MappedContainer, class Allocator>
    flat_multimap(sorted_equivalent_t, KeyContainer, MappedContainer, Allocator)
      -> flat_multimap<typename KeyContainer::value_type, typename MappedContainer::value_type,
                       less<typename KeyContainer::value_type>, KeyContainer, MappedContainer>;
  template<class KeyContainer, class MappedContainer, class Compare, class Allocator>
    flat_multimap(sorted_equivalent_t, KeyContainer, MappedContainer, Compare, Allocator)
      -> flat_multimap<typename KeyContainer::value_type, typename MappedContainer::value_type,
                       Compare, KeyContainer, MappedContainer>;

  template<class InputIterator, class Compare = less<[[redoc("*>")]]iter-key-type<InputIterator>>>
    flat_multimap(InputIterator, InputIterator, Compare = Compare())
      -> flat_multimap<[[redoc("*>")]]iter-key-type<InputIterator>, [[redoc("*>")]]iter-mapped-type<InputIterator>, Compare>;

  template<class InputIterator, class Compare = less<[[redoc("*>")]]iter-key-type<InputIterator>>>
    flat_multimap(sorted_equivalent_t, InputIterator, InputIterator, Compare = Compare())
      -> flat_multimap<[[redoc("*>")]]iter-key-type<InputIterator>, [[redoc("*>")]]iter-mapped-type<InputIterator>, Compare>;

  template<ranges::[[redoc("`:c>")]]input_range R, class Compare = less<[[redoc("*>")]]range-key-type<R>>,
           class Allocator = allocator<byte>>
    flat_multimap(from_range_t, R&&, Compare = Compare(), Allocator = Allocator())
      -> flat_multimap<[[redoc("*>")]]range-key-type<R>, [[redoc("*>")]]range-mapped-type<R>, Compare,
                       vector<[[redoc("*>")]]range-key-type<R>,
                              [[redoc("*>")]]alloc-rebind<Allocator, [[redoc("*>")]]range-key-type<R>>>,
                       vector<[[redoc("*>")]]range-mapped-type<R>,
                              [[redoc("*>")]]alloc-rebind<Allocator, [[redoc("*>")]]range-mapped-type<R>>>>;

  template<ranges::[[redoc("`:c>")]]input_range R, class Allocator>
    flat_multimap(from_range_t, R&&, Allocator)
      -> flat_multimap<[[redoc("*>")]]range-key-type<R>, [[redoc("*>")]]range-mapped-type<R>, less<[[redoc("*>")]]range-key-type<R>>,
                       vector<[[redoc("*>")]]range-key-type<R>,
                              [[redoc("*>")]]alloc-rebind<Allocator, [[redoc("*>")]]range-key-type<R>>>,
                       vector<[[redoc("*>")]]range-mapped-type<R>,
                              [[redoc("*>")]]alloc-rebind<Allocator, [[redoc("*>")]]range-mapped-type<R>>>>;

  template<class Key, class T, class Compare = less<Key>>
    flat_multimap(initializer_list<pair<Key, T>>, Compare = Compare())
      -> flat_multimap<Key, T, Compare>;

  template<class Key, class T, class Compare = less<Key>>
    flat_multimap(sorted_equivalent_t, initializer_list<pair<Key, T>>, Compare = Compare())
        -> flat_multimap<Key, T, Compare>;

  template<class Key, class T, class Compare, class KeyContainer, class MappedContainer,
            class Allocator>
    struct uses_allocator<flat_multimap<Key, T, Compare, KeyContainer, MappedContainer>,
                          Allocator>
      : bool_constant<uses_allocator_v<KeyContainer, Allocator> &&
                      uses_allocator_v<MappedContainer, Allocator>> { };
}
[codeblock:end]

[para]
[:en] The member type [`containers] has the data members and special members
specified above.
[:zh_CN] 成员类型 [`containers] 具有上面规定的数据成员和特殊成员。

[:en] It has no base classes or members other than those specified.
[:zh_CN] 它没有规定外的基类或其他成员。
