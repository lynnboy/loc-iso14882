[section#span.overview
    [:en] Overview
    [:zh_CN] 概述
]

[para]
[%@lib span]
[:en] A [`span] is a view over a contiguous sequence of objects, the storage of
which is owned by some other object.
[:zh_CN] [`span] 是在对象的连续序列上的一种视图，由其他对象拥有其存储。

[para]
[:en] All member functions of [`span] have constant time complexity.
[:zh_CN] [`span] 的所有成员函数都具有常量时间复杂度。

[%@lib span]
[codeblock:synopsis]
namespace std {
  template<class ElementType, size_t Extent = dynamic_extent>
  class span {
  public:
    // [:en] constants and types \
    [:zh_CN] 常量和类型
    using element_type = ElementType;
    using value_type = remove_cv_t<ElementType>;
    using size_type = size_t;
    using difference_type = ptrdiff_t;
    using pointer = element_type*;
    using const_pointer = const element_type*;
    using reference = element_type&;
    using const_reference = const element_type&;
    using iterator = [[redoc("[?impdefx"
          " [:en] type of [`span::iterator]"
        "[:zh_CN] [`span::iterator] 的类型]")]];        // [:en] see [#span.iterators] \
                                                        [:zh_CN] 见 [#span.iterators]
    using reverse_iterator = std::reverse_iterator<iterator>;
    static constexpr size_type extent = Extent;

    // [:en] [#span.cons], constructors, copy, and assignment \
    [:zh_CN] [#span.cons]，构造函数，复制和赋值
    constexpr span() noexcept;
    template<class It>
      constexpr explicit(extent != dynamic_extent) span(It first, size_type count);
    template<class It, class End>
      constexpr explicit(extent != dynamic_extent) span(It first, End last);
    template<size_t N>
      constexpr span(type_identity_t<element_type> (&arr)[N]) noexcept;
    template<class T, size_t N>
      constexpr span(array<T, N>& arr) noexcept;
    template<class T, size_t N>
      constexpr span(const array<T, N>& arr) noexcept;
    template<class R>
      constexpr explicit(extent != dynamic_extent) span(R&& r);
    constexpr span(const span& other) noexcept = default;
    template<class OtherElementType, size_t OtherExtent>
      constexpr explicit([[redoc("[=seebelow]")]]) span(const span<OtherElementType, OtherExtent>& s) noexcept;

    ~span() noexcept = default;

    constexpr span& operator=(const span& other) noexcept = default;

    // [:en] [#span.sub], subviews \
    [:zh_CN] [#span.sub]，子视图
    template<size_t Count>
      constexpr span<element_type, Count> first() const;
    template<size_t Count>
      constexpr span<element_type, Count> last() const;
    template<size_t Offset, size_t Count = dynamic_extent>
      constexpr span<element_type, [[redoc("[=seebelow]")]]> subspan() const;

    constexpr span<element_type, dynamic_extent> first(size_type count) const;
    constexpr span<element_type, dynamic_extent> last(size_type count) const;
    constexpr span<element_type, dynamic_extent> subspan(
      size_type offset, size_type count = dynamic_extent) const;

    // [:en] [#span.obs], observers \
    [:zh_CN] [#span.obs]，探查函数
    constexpr size_type size() const noexcept;
    constexpr size_type size_bytes() const noexcept;
    [[nodiscard]] constexpr bool empty() const noexcept;

    // [:en] [#span.elem], element access \
    [:zh_CN] [#span.elem]，元素访问
    constexpr reference operator[](size_type idx) const;
    constexpr reference front() const;
    constexpr reference back() const;
    constexpr pointer data() const noexcept;

    // [:en] [#span.iterators], iterator support \
    [:zh_CN] [#span.iterators]，迭代器支持
    constexpr iterator begin() const noexcept;
    constexpr iterator end() const noexcept;
    constexpr reverse_iterator rbegin() const noexcept;
    constexpr reverse_iterator rend() const noexcept;

  private:
    pointer data_;              // [=expos]
    size_type size_;            // [=expos]
  };

  template<class It, class EndOrSize>
    span(It, EndOrSize) -> span<remove_reference_t<iter_reference_t<It>>>;
  template<class T, size_t N>
    span(T (&)[N]) -> span<T, N>;
  template<class T, size_t N>
    span(array<T, N>&) -> span<T, N>;
  template<class T, size_t N>
    span(const array<T, N>&) -> span<const T, N>;
  template<class R>
    span(R&&) -> span<remove_reference_t<ranges::range_reference_t<R>>>;
}
[codeblock:end]

[para]
[:en] [`ElementType] is required to be a complete object type that is not an
abstract class type.
[:zh_CN] 要求 [`ElementType] 为并非抽象类类型的完整对象类型。
