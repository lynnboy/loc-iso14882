[section#array.tuple
    [:en] Tuple interface
    [:zh_CN] 元组接口
]

[%@library array]
[%@library tuple]
[%[:en] [`array][!tuple interface to]
  [:zh_CN] [`array][!～的元组接口] ]
[%@library tuple_size]
[codeblock:declaration]
template<class T, size_t N>
  struct tuple_size<array<T, N>> : integral_constant<size_t, N> { };
[codeblock:end]

[%@library tuple_element]
[codeblock:declaration]
tuple_element<I, array<T, N>>::type
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`I < N].
[:zh_CN] [`I < N]。

[:en] The program is ill-formed if [`I] is out of bounds.
[:zh_CN] 如果 [`I] 越界则程序非良构。

[para:value]
[:en] The type [`T].
[:zh_CN] 类型 [`T]。
[exit:description]

[%@library array[!get]]
[%@library get[!array]]
[codeblock:declaration]
template<size_t I, class T, size_t N>
  constexpr T& get(array<T, N>& a) noexcept;
template<size_t I, class T, size_t N>
  constexpr T&& get(array<T, N>&& a) noexcept;
template<size_t I, class T, size_t N>
  constexpr const T& get(const array<T, N>& a) noexcept;
template<size_t I, class T, size_t N>
  constexpr const T&& get(const array<T, N>&& a) noexcept;
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`I < N].
[:zh_CN] [`I < N]。

[:en] The program is ill-formed if [`I] is out of bounds.
[:zh_CN] 如果 [`I] 越界则程序非良构。

[para:returns]
[:en] A reference to the [`I][^th] element of [`a], where indexing is
zero-based.
[:zh_CN] 指代 [`a] 的第 [`I] 个元素的引用，其中的索引基于零。
[exit:description]
