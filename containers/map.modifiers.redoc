[section#map.modifiers
    [:en] Modifiers
    [:zh_CN] 改动函数
]

[%@library insert[!map]]
[%@library map[!insert]]
[codeblock:declaration]
template<class P>
  pair<iterator, bool> insert(P&& x);
template<class P>
  iterator insert(const_iterator position, P&& x);
[codeblock:end]

[enter:description]
[para:effects]
[:en] The first form is equivalent to [`return emplace(std::forward<P>(x))].
[:zh_CN] 第一种形式等价于 [`return emplace(std::forward<P>(x))]。

[:en] The second form is equivalent to
[`return emplace_hint(position, std::forward<P>(x))].
[:zh_CN] 第二种形式等价于
[`return emplace_hint(position, std::forward<P>(x))]。

[para:remarks]
[:en] These signatures shall not participate in overload resolution unless
[`is_constructible_v<value_type, P&&>] is [`true].
[:zh_CN] 除非 [`is_constructible_v<value_type, P&&>] 为 [`true]，否则这些签名
不能参与重载决议。
[exit:description]

[%@library try_emplace[!map]]
[%@library map[!try_emplace]]
[codeblock:declaration]
template<class... Args>
  pair<iterator, bool> try_emplace(const key_type& k, Args&&... args);
template<class... Args>
  iterator try_emplace(const_iterator hint, const key_type& k, Args&&... args);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`value_type] shall be [`EmplaceConstructible] into [`map] from
[`piecewise_construct, forward_as_tuple(k),
forward_as_tuple(std::forward<Args>(args)...)].
[:zh_CN] [`value_type] 应当为以 [`piecewise_construct, forward_as_tuple(k),
forward_as_tuple(std::forward<Args>(args)...)] 向 [`map] 中
[`EmplaceConstructible]。

[para:effects]
[:en] If the map already contains an element whose key is equivalent to [`k],
there is no effect.
[:zh_CN] 如果该映射中已经存在具有等价于 [`k] 的键的元素，则没有效果。

[:en] Otherwise, inserts an object of type [`value_type] constructed with
[`piecewise_construct, forward_as_tuple(k),
forward_as_tuple(std::forward<Args>(args)...)].
[:zh_CN] 否则，插入一个以 [`piecewise_construct, forward_as_tuple(k),
forward_as_tuple(std::forward<Args>(args)...)] 构造的 [`value_type] 类型的对象。

[para:returns]
[:en] In the first overload, the [`bool] component of the returned pair is
[`true] if and only if the insertion took place.
[:zh_CN] 在第一种重载中，当且仅当发生了插入时，所返回的对偶的 [`bool] 成分为
[`true]。

[:en] The returned iterator points to the map element whose key is equivalent to
[`k].
[:zh_CN] 所返回的迭代器指向具有等价于 [`k] 的键的映射元素。

[para:complexity]
[:en] The same as [`emplace] and [`emplace_hint], respectively.
[:zh_CN] 分别与 [`emplace] 和 [`emplace_hint] 相同。
[exit:description]

[%@library try_emplace[!map]]
[%@library map[!try_emplace]]
[codeblock:declaration]
template<class... Args>
  pair<iterator, bool> try_emplace(key_type&& k, Args&&... args);
template<class... Args>
  iterator try_emplace(const_iterator hint, key_type&& k, Args&&... args);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`value_type] shall be [`EmplaceConstructible] into [`map] from
[`piecewise_construct, forward_as_tuple(std::move(k)),
forward_as_tuple(std::forward<Args>(args)...)].
[:zh_CN] [`value_type] 应当为以 [`piecewise_construct,
forward_as_tuple(std::move(k)), forward_as_tuple(std::forward<Args>(args)...)]
向 [`map] 中 [`EmplaceConstructible]。

[para:effects]
[:en] If the map already contains an element whose key is equivalent to [`k],
there is no effect.
[:zh_CN] 如果该映射中已经存在具有等价于 [`k] 的键的元素，则没有效果。

[:en] Otherwise, inserts an object of type [`value_type] constructed with
[`piecewise_construct, forward_as_tuple(std::move(k)),
forward_as_tuple(std::forward<Args>(args)...)].
[:zh_CN] 否则，插入一个以 [`piecewise_construct, forward_as_tuple(std::move(k)),
forward_as_tuple(std::forward<Args>(args)...)] 构造的 [`value_type] 类型的对象。

[para:returns]
[:en] In the first overload, the [`bool] component of the returned pair is
[`true] if and only if the insertion took place.
[:zh_CN] 在第一种重载中，当且仅当发生了插入时，所返回的对偶的 [`bool] 成分为
[`true]。

[:en] The returned iterator points to the map element whose key is equivalent to
[`k].
[:zh_CN] 所返回的迭代器指向具有等价于 [`k] 的键的映射元素。

[para:complexity]
[:en] The same as [`emplace] and [`emplace_hint], respectively.
[:zh_CN] 分别与 [`emplace] 和 [`emplace_hint] 相同。
[exit:description]

[%@library insert_or_assign[!map]]
[%@library map[!insert_or_assign]]
[codeblock:declaration]
template<class M>
  pair<iterator, bool> insert_or_assign(const key_type& k, M&& obj);
template<class M>
  iterator insert_or_assign(const_iterator hint, const key_type& k, M&& obj);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`is_assignable_v<mapped_type&, M&&>] shall be [`true].
[:zh_CN] [`is_assignable_v<mapped_type&, M&&>] 应当为 [`true]。

[:en] [`value_type] shall be [`EmplaceConstructible] into [`map] from
[`k, forward<M>(obj)].
[:zh_CN] [`value_type] 应当为以 [`k, forward<M>(obj)] 向 [`map] 中
[`EmplaceConstructible]。

[para:effects]
[:en] If the map already contains an element [`e] whose key is equivalent to
[`k], assigns [`std::forward<M>(obj)] to [`e.second].
[:zh_CN] 如果该映射中已经存在具有等价于 [`k] 的键的元素 [`e]，则将
[`std::forward<M>(obj)] 赋值给 [`e.second]。

[:en] Otherwise, inserts an object of type [`value_type] constructed with
[`k, forward<M>(obj)].
[:zh_CN] 否则，插入一个以 [`k, forward<M>(obj)] 构造的 [`value_type] 类型的对象。

[para:returns]
[:en] In the first overload, the [`bool] component of the returned pair is
[`true] if and only if the insertion took place.
[:zh_CN] 在第一种重载中，当且仅当发生了插入时，所返回的对偶的 [`bool] 成分为
[`true]。

[:en] The returned iterator points to the map element whose key is equivalent to
[`k].
[:zh_CN] 所返回的迭代器指向具有等价于 [`k] 的键的映射元素。

[para:complexity]
[:en] The same as [`emplace] and [`emplace_hint], respectively.
[:zh_CN] 分别与 [`emplace] 和 [`emplace_hint] 相同。
[exit:description]

[%@library insert_or_assign[!map]]
[%@library map[!insert_or_assign]]
[codeblock:declaration]
template<class M>
  pair<iterator, bool> insert_or_assign(key_type&& k, M&& obj);
template<class M>
  iterator insert_or_assign(const_iterator hint, key_type&& k, M&& obj);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`is_assignable_v<mapped_type&, M&&>] shall be [`true].
[:zh_CN] [`is_assignable_v<mapped_type&, M&&>] 应当为 [`true]。

[:en] [`value_type] shall be [`EmplaceConstructible] into [`map] from
[`move(k), forward<M>(obj)].
[:zh_CN] [`value_type] 应当为以 [`move(k), forward<M>(obj)] 向 [`map] 中
[`EmplaceConstructible]。

[para:effects]
[:en] If the map already contains an element [`e] whose key is equivalent to
[`k], assigns [`std::forward<M>(obj)] to [`e.second].
[:zh_CN] 如果该 [`map] 中已经存在具有等价于 [`k] 的键的元素 [`e]，则将
[`std::forward<M>(obj)] 赋值给 [`e.second]。

[:en] Otherwise, inserts an object of type [`value_type] constructed with
[`std::move(k), std::forward<M>(obj)].
[:zh_CN] 否则，插入一个以 [`std::move(k), std::forward<M>(obj)] 构造的
[`value_type] 类型的对象。

[para:returns]
[:en] In the first overload, the [`bool] component of the returned pair is
[`true] if and only if the insertion took place.
[:zh_CN] 在第一种重载中，当且仅当发生了插入时，所返回的对偶的 [`bool] 成分为
[`true]。

[:en] The returned iterator points to the map element whose key is equivalent to
[`k].
[:zh_CN] 所返回的迭代器指向具有等价于 [`k] 的键的映射元素。

[para:complexity]
[:en] The same as [`emplace] and [`emplace_hint], respectively.
[:zh_CN] 分别与 [`emplace] 和 [`emplace_hint] 相同。
[exit:description]
