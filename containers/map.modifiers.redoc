[section#map.modifiers
    [:en] Modifiers
    [:zh_CN] 改动函数
]

[%@lib@member insert[!map]]
[codeblock:declaration]
template<class P>
  constexpr pair<iterator, bool> insert(P&& x);
template<class P>
  constexpr iterator insert(const_iterator position, P&& x);
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`is_constructible_v<value_type, P&&>] is [`true].
[:zh_CN] [`is_constructible_v<value_type, P&&>] 为 [`true]。

[para:effects]
[:en] The first form is equivalent to [`return emplace(std::forward<P>(x))].
[:zh_CN] 第一种形式等价于 [`return emplace(std::forward<P>(x))]。

[:en] The second form is equivalent to
[`return emplace_hint(position, std::forward<P>(x))].
[:zh_CN] 第二种形式等价于
[`return emplace_hint(position, std::forward<P>(x))]。
[div:end]

[%@lib@member try_emplace[!map]]
[codeblock:declaration]
template<class... Args>
  constexpr pair<iterator, bool> try_emplace(const key_type& k, Args&&... args);
template<class... Args>
  constexpr iterator try_emplace(const_iterator hint, const key_type& k, Args&&... args);
[codeblock:end]

[div:description]
[para:expects]
[:en] [`value_type] is [^:oc EmplaceConstructible] into [`map] from
[`piecewise_construct, forward_as_tuple(k), forward_as_tuple(std::forward<Args>(args)...)].
[:zh_CN] [`value_type] 以
[`piecewise_construct, forward_as_tuple(k), forward_as_tuple(std::forward<Args>(args)...)]
向 [`map] 中 [^:oc EmplaceConstructible]。

[para:effects]
[:en] If the map already contains an element whose key is equivalent to [`k],
there is no effect.
[:zh_CN] 如果该映射中已经存在其键与 [`k] 等价的元素，则没有效果。

[:en] Otherwise, inserts an object of type [`value_type] constructed with
[`piecewise_construct, forward_as_tuple(k), forward_as_tuple(std::forward<Args>(args)...)].
[:zh_CN] 否则，插入一个以
[`piecewise_construct, forward_as_tuple(k), forward_as_tuple(std::forward<Args>(args)...)]
构造的 [`value_type] 类型的对象。

[para:returns]
[:en] In the first overload, the [`bool] component of the returned pair is
[`true] if and only if the insertion took place.
[:zh_CN] 在第一种重载中，当且仅当发生了插入时，所返回的对偶的 [`bool] 成分为 [`true]。

[:en] The returned iterator points to the map element whose key is equivalent to [`k].
[:zh_CN] 所返回的迭代器指向其键与 [`k] 等价的映射元素。

[para:complexity]
[:en] The same as [`emplace] and [`emplace_hint], respectively.
[:zh_CN] 分别与 [`emplace] 和 [`emplace_hint] 相同。
[div:end]

[%@lib@member try_emplace[!map]]
[codeblock:declaration]
template<class... Args>
  constexpr pair<iterator, bool> try_emplace(key_type&& k, Args&&... args);
template<class... Args>
  constexpr iterator try_emplace(const_iterator hint, key_type&& k, Args&&... args);
[codeblock:end]

[div:description]
[para:expects]
[:en] [`value_type] is [^:oc EmplaceConstructible] into [`map] from
[`piecewise_construct, forward_as_tuple(std::move(k)), forward_as_tuple(std::forward<Args>(args)...)].
[:zh_CN] [`value_type] 以
[`piecewise_construct, forward_as_tuple(std::move(k)), forward_as_tuple(std::forward<Args>(args)...)]
向 [`map] 中 [^:oc EmplaceConstructible]。

[para:effects]
[:en] If the map already contains an element whose key is equivalent to [`k],
there is no effect.
[:zh_CN] 如果该映射中已经存在其键与 [`k] 等价的元素，则没有效果。

[:en] Otherwise, inserts an object of type [`value_type] constructed with
[`piecewise_construct, forward_as_tuple(std::move(k)), forward_as_tuple(std::forward<Args>(args)...)].
[:zh_CN] 否则，插入一个以
[`piecewise_construct, forward_as_tuple(std::move(k)), forward_as_tuple(std::forward<Args>(args)...)]
构造的 [`value_type] 类型的对象。

[para:returns]
[:en] In the first overload, the [`bool] component of the returned pair is
[`true] if and only if the insertion took place.
[:zh_CN] 在第一种重载中，当且仅当发生了插入时，所返回的对偶的 [`bool] 成分为 [`true]。

[:en] The returned iterator points to the map element whose key is equivalent to [`k].
[:zh_CN] 所返回的迭代器指向具有等价于 [`k] 的键的映射元素。

[para:complexity]
[:en] The same as [`emplace] and [`emplace_hint], respectively.
[:zh_CN] 分别与 [`emplace] 和 [`emplace_hint] 相同。
[div:end]

[%@lib@member try_emplace[!map]]
[codeblock:declaration]
template<class K, class... Args>
  constexpr pair<iterator, bool> try_emplace(K&& k, Args&&... args);
template<class K, class... Args>
  constexpr iterator try_emplace(const_iterator hint, K&& k, Args&&... args);
[codeblock:end]

[div:description]
[para:constraints]
[:en] The [~qualified-id] [`Compare::is_transparent] is valid and denotes a type.
[:zh_CN] [~限定标识] [`Compare::is_transparent] 有效并代表一个类型。

[:en] For the first overload, [`is_convertible_v<K&&, const_iterator>] and
[`is_convertible_v<K&&, iterator>] are both [`false].
[:zh_CN] 对于第一种重载，[`is_convertible_v<K&&, const_iterator>] 和
[`is_convertible_v<K&&, iterator>] 均为 [`false]。

[para:expects]
[:en] [`value_type] is [^:oc EmplaceConstructible] into [`map] from
[`piecewise_construct, forward_as_tuple(std::forward<K>(k)), forward_as_tuple(std::forward<Args>(args)...)].
[:zh_CN] [`value_type] 以
[`piecewise_construct, forward_as_tuple(std::forward<K>(k)), forward_as_tuple(std::forward<Args>(args)...)]
向 [`map] 中 [^:oc EmplaceConstructible]。

[para:effects]
[:en] If the map already contains an element whose key is equivalent to [`k],
there is no effect.
[:zh_CN] 如果该映射中已经存在其键与 [`k] 等价的元素，则没有效果。

[:en] Otherwise, let [`r] be [`equal_range(k)].
[:zh_CN] 否则，令 [`r] 为 [`equal_range(k)]。

[:en] Constructs an object [`u] of type [`value_type] with
[`piecewise_construct, forward_as_tuple(std::forward<K>(k)), forward_as_tuple(std::forward<Args>(args)...)].
[:zh_CN] 以
[`piecewise_construct, forward_as_tuple(std::forward<K>(k)), forward_as_tuple(std::forward<Args>(args)...)]
构造一个 [`value_type] 类型的对象 [`u]。

[:en] If [`equal_range(u.first) == r] is [`false], the behavior is undefined.
[:zh_CN] 如果 [`equal_range(u.first) == r] 为 [`false]，则其行为未定义。

[:en] Inserts [`u] into [`*this].
[:zh_CN] 将 [`u] 插入 [`*this] 中。

[para:returns]
[:en] For the first overload, the [`bool] component of the returned pair is
[`true] if and only if the insertion took place.
[:zh_CN] 对于第一种重载，当且仅当发生了插入时，所返回的对偶的 [`bool] 成分为 [`true]。

[:en] The returned iterator points to the map element whose key is equivalent to
[`k].
[:zh_CN] 所返回的迭代器指向具有等价于 [`k] 的键的映射元素。

[para:complexity]
[:en] The same as [`emplace] and [`emplace_hint], respectively.
[:zh_CN] 分别与 [`emplace] 和 [`emplace_hint] 相同。
[div:end]

[%@lib@member insert_or_assign[!map]]
[codeblock:declaration]
template<class M>
  constexpr pair<iterator, bool> insert_or_assign(const key_type& k, M&& obj);
template<class M>
  constexpr iterator insert_or_assign(const_iterator hint, const key_type& k, M&& obj);
[codeblock:end]

[div:description]
[para:mandates]
[:en] [`is_assignable_v<mapped_type&, M&&>] is [`true].
[:zh_CN] [`is_assignable_v<mapped_type&, M&&>] 为 [`true]。

[para:expects]
[:en] [`value_type] is [^:oc EmplaceConstructible] into [`map] from
[`k, std::forward<M>(obj)].
[:zh_CN] [`value_type] 以 [`k, std::forward<M>(obj)] 向 [`map] 中
[^:oc EmplaceConstructible]。

[para:effects]
[:en] If the map already contains an element [`e] whose key is equivalent to [`k],
assigns [`std::forward<M>(obj)] to [`e.second].
[:zh_CN] 如果该映射中已经存在其键与 [`k] 等价的元素 [`e]，则将
[`std::forward<M>(obj)] 赋值给 [`e.second]。

[:en] Otherwise, inserts an object of type [`value_type] constructed with
[`k, std::forward<M>(obj)].
[:zh_CN] 否则，插入一个以 [`k, std::forward<M>(obj)] 构造的 [`value_type] 类型的对象。

[para:returns]
[:en] In the first overload, the [`bool] component of the returned pair is
[`true] if and only if the insertion took place.
[:zh_CN] 在第一种重载中，当且仅当发生了插入时，所返回的对偶的 [`bool] 成分为 [`true]。

[:en] The returned iterator points to the map element whose key is equivalent to [`k].
[:zh_CN] 所返回的迭代器指向其键与 [`k] 等价的映射元素。

[para:complexity]
[:en] The same as [`emplace] and [`emplace_hint], respectively.
[:zh_CN] 分别与 [`emplace] 和 [`emplace_hint] 相同。
[div:end]

[%@lib@member insert_or_assign[!map]]
[codeblock:declaration]
template<class M>
  constexpr pair<iterator, bool> insert_or_assign(key_type&& k, M&& obj);
template<class M>
  constexpr iterator insert_or_assign(const_iterator hint, key_type&& k, M&& obj);
[codeblock:end]

[div:description]
[para:mandates]
[:en] [`is_assignable_v<mapped_type&, M&&>] is [`true].
[:zh_CN] [`is_assignable_v<mapped_type&, M&&>] 为 [`true]。

[para:expects]
[:en] [`value_type] is [^:oc EmplaceConstructible] into [`map] from
[`std::move(k), std::forward<M>(obj)].
[:zh_CN] [`value_type] 以 [`std::move(k), std::forward<M>(obj)] 向 [`map] 中
[^:oc EmplaceConstructible]。

[para:effects]
[:en] If the map already contains an element [`e] whose key is equivalent to [`k],
assigns [`std::forward<M>(obj)] to [`e.second].
[:zh_CN] 如果该 [`map] 中已经存在其键与 [`k] 等价的元素 [`e]，则将
[`std::forward<M>(obj)] 赋值给 [`e.second]。

[:en] Otherwise, inserts an object of type [`value_type] constructed with
[`std::move(k), std::forward<M>(obj)].
[:zh_CN] 否则，插入一个以 [`std::move(k), std::forward<M>(obj)] 构造的
[`value_type] 类型的对象。

[para:returns]
[:en] In the first overload, the [`bool] component of the returned pair is
[`true] if and only if the insertion took place.
[:zh_CN] 在第一种重载中，当且仅当发生了插入时，所返回的对偶的 [`bool] 成分为 [`true]。

[:en] The returned iterator points to the map element whose key is equivalent to [`k].
[:zh_CN] 所返回的迭代器指向其键与 [`k] 等价的映射元素。

[para:complexity]
[:en] The same as [`emplace] and [`emplace_hint], respectively.
[:zh_CN] 分别与 [`emplace] 和 [`emplace_hint] 相同。
[div:end]

[%@lib@member insert_or_assign[!map]]
[codeblock:declaration]
template<class K, class M>
  constexpr pair<iterator, bool> insert_or_assign(K&& k, M&& obj);
template<class K, class M>
  constexpr iterator insert_or_assign(const_iterator hint, K&& k, M&& obj);
[codeblock:end]

[div:description]
[para:constraints]
[:en] The [~qualified-id] [`Compare::is_transparent] is valid and denotes a type.
[:zh_CN] [~限定标识] [`Compare::is_transparent] 有效并代表一个类型。

[para:mandates]
[:en] [`is_assignable_v<mapped_type&, M&&>] is [`true].
[:zh_CN] [`is_assignable_v<mapped_type&, M&&>] 为 [`true]。

[para:expects]
[:en] [`value_type] is [^:oc EmplaceConstructible] into [`map] from
[`std::forward<K>(k), std::forward<M>(obj)].
[:zh_CN] [`value_type] 以 [`std::forward<K>(k), std::forward<M>(obj)] 向 [`map]
中 [^:oc EmplaceConstructible]。

[para:effects]
[:en] If the map already contains an element [`e] whose key is equivalent to [`k],
assigns [`std::forward<M>(obj)] to [`e.second].
[:zh_CN] 如果该 [`map] 中已经存在其键与 [`k] 等价的元素 [`e]，则将
[`std::forward<M>(obj)] 赋值给 [`e.second]。

[:en] Otherwise, let [`r] be [`equal_range(k)].
[:zh_CN] 否则，令 [`r] 为 [`equal_range(k)]。

[:en] Constructs an object [`u] of type [`value_type] with
[`std::forward<K>(k), std::forward<M>(obj)].
[:zh_CN] 以 [`std::forward<K>(k), std::forward<M>(obj)] 构造一个 [`value_type]
类型的对象 [`u]。

[:en] If [`equal_range(u.first) == r] is [`false], the behavior is undefined.
[:zh_CN] 如果 [`equal_range(u.first) == r] 为 [`false]，则其行为未定义。

[:en] Inserts [`u] into [`*this].
[:zh_CN] 将 [`u] 插入 [`*this] 中。

[para:returns]
[:en] For the first overload, the [`bool] component of the returned pair is
[`true] if and only if the insertion took place.
[:zh_CN] 对于第一种重载，当且仅当发生了插入时，所返回的对偶的 [`bool] 成分为 [`true]。

[:en] The returned iterator points to the map element whose key is equivalent to [`k].
[:zh_CN] 所返回的迭代器指向其键与 [`k] 等价的映射元素。

[para:complexity]
[:en] The same as [`emplace] and [`emplace_hint], respectively.
[:zh_CN] 分别与 [`emplace] 和 [`emplace_hint] 相同。
[div:end]
