[section#vector.cons
    [:en] Constructors
    [:zh_CN] 构造函数
]

[%@lib@ctor vector]
[codeblock:declaration]
constexpr explicit vector(const Allocator&) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Constructs an empty [`vector], using the specified allocator.
[:zh_CN] 构造一个空的 [`vector]，并使用指定的分配器。

[para:complexity]
[:en] Constant.
[:zh_CN] 常量。
[div:end]

[%@lib@ctor vector]
[codeblock:declaration]
constexpr explicit vector(size_type n, const Allocator& = Allocator());
[codeblock:end]

[div:description]
[para:expects]
[:en] [`T] is [^:oc DefaultInsertable] into [`vector].
[:zh_CN] [`T] 向 [`vector] 中 [^:oc DefaultInsertable]。

[para:effects]
[:en] Constructs a [`vector] with [`n] default-inserted elements using the
specified allocator.
[:zh_CN] 构造一个具有 [`n] 个默认插入的元素的 [`vector]，并使用指定的分配器。

[para:complexity]
[:en] Linear in [`n].
[:zh_CN] 对于 [`n] 为线性。
[div:end]

[%@lib@ctor vector]
[codeblock:declaration]
constexpr vector(size_type n, const T& value,
                 const Allocator& = Allocator());
[codeblock:end]

[div:description]
[para:expects]
[:en] [`T] is [^:oc CopyInsertable] into [`vector].
[:zh_CN] [`T] 向 [`vector] 中 [^:oc CopyInsertable]。

[para:effects]
[:en] Constructs a [`vector] with [`n] copies of [`value], using the specified
allocator.
[:zh_CN] 构造一个具有 [`n] 个 [`value] 的副本的 [`vector]，并使用指定的分配器。

[para:complexity]
[:en] Linear in [`n].
[:zh_CN] 对于 [`n] 为线性。
[div:end]

[%@lib@ctor vector]
[codeblock:declaration]
template<class InputIterator>
  constexpr vector(InputIterator first, InputIterator last,
                   const Allocator& = Allocator());
[codeblock:end]

[div:description]
[para:effects]
[:en] Constructs a [`vector] equal to the range [=range(first,last)], using the
specified allocator.
[:zh_CN] 构造一个等于范围 [=range(first,last)] 的 [`vector]，并使用指定的分配器。

[para:complexity]
[:en] Makes only [$N] calls to the copy constructor of [`T] (where [$N] is the
distance between [`first] and [`last]) and no reallocations if iterators
[`first] and [`last] are of forward, bidirectional, or random access categories.
[:zh_CN] 如果迭代器 [`first] 和 [`last] 属于前向、双向或随机访问类别，则仅进行
[$N] 次对 [`T] 的复制构造函数的调用（其中 [$N] 为 [`first] 和 [`last] 之间的距离），
且不发生重新分配。

[:en] It makes order [$N] calls to the copy constructor of [`T] and order
[$\log N] reallocations if they are just input iterators.
[:zh_CN] 如果它们只是输入迭代器，则对 [`T] 的复制构造函数进行 [$N] 阶次的调用，
并发生 [$\log N] 次的重新分配。
[div:end]

[%@lib@ctor vector]
[codeblock:declaration]
template<[[redoc("*:c>")]]container-compatible-range<T> R>
  constexpr vector(from_range_t, R&& rg, const Allocator& = Allocator());
[codeblock:end]

[div:description]
[para:effects]
[:en] Constructs a [`vector] object with the elements of the range [`rg], using
the specified allocator.
[:zh_CN] 构造一个具有范围 [`rg] 的各元素的 [`vector] 对象，并使用指定的分配器。

[para:complexity]
[:en] Initializes exactly [$N] elements from the results of dereferencing
successive iterators of [`rg], where [$N] is [`ranges::distance(rg)].
[:zh_CN] 从解引用 [`rg] 中的连续迭代器来初始化恰好 [$N] 个元素，其中 [$N] 为
[`ranges::distance(rg)]。

[para]
[:en] Performs no reallocations if:
[:zh_CN] 如果：
[list]
[item]
[:en@~] [`R] models [`ranges::[`:c approximately_sized_range]], and
[`ranges::distance(rg) <= ranges::reserve_hint(rg)] is [`true], or
[:zh_CN] [`R] 构成 [`ranges::[`:c approximately_sized_range]]，且
[`ranges::distance(rg) <= ranges::reserve_hint(rg)] 为 [`true]，或者
[item]
[:en@~] [`R] models [`ranges::[`:c forward_range]] and [`R] does not model
[`ranges::[`:c approximately_sized_range]].
[:zh_CN] [`R] 构成 [`ranges::[`:c forward_range]]，但 [`R] 不构成
[`ranges::[`:c approximately_sized_range]]，
[list:end]
[:zh_CN@~] 则不实施重新分配。

[:en] Otherwise, performs order [$\log N] reallocations and order [$N] calls
to the copy or move constructor of [`T].
[:zh_CN] 否则，实施 [$\log N] 阶次重新分配和 [$N] 阶次的对 [`T] 的复制或移动构造函数的调用。
[div:end]
