[section#array.syn
    [:en] Header [`<array>] synopsis
    [:zh_CN] 头文件 [`<array>] 纲要
]

[%@header array]
[codeblock:synopsis]
#include <initializer_list>

namespace std {
  // [:en] [#array], class template [`array]
  // [|:zh_CN] [#array]，类模板 [`array]
  template<class T, size_t N> struct array;

  template<class T, size_t N>
    constexpr bool operator==(const array<T, N>& x, const array<T, N>& y);
  template<class T, size_t N>
    constexpr bool operator!=(const array<T, N>& x, const array<T, N>& y);
  template<class T, size_t N>
    constexpr bool operator< (const array<T, N>& x, const array<T, N>& y);
  template<class T, size_t N>
    constexpr bool operator> (const array<T, N>& x, const array<T, N>& y);
  template<class T, size_t N>
    constexpr bool operator<=(const array<T, N>& x, const array<T, N>& y);
  template<class T, size_t N>
    constexpr bool operator>=(const array<T, N>& x, const array<T, N>& y);
  template<class T, size_t N>
    constexpr void swap(array<T, N>& x, array<T, N>& y) noexcept(noexcept(x.swap(y)));

  // [:en] [#array.tuple], tuple interface to class template [`array]
  // [|:zh_CN] [#array.tuple]，类模板 [`array] 的元组接口
  template<class T> struct tuple_size;
  template<size_t I, class T> struct tuple_element;
  template<class T, size_t N>
    struct tuple_size<array<T, N>>;
  template<size_t I, class T, size_t N>
    struct tuple_element<I, array<T, N>>;
  template<size_t I, class T, size_t N>
    constexpr T& get(array<T, N>&) noexcept;
  template<size_t I, class T, size_t N>
    constexpr T&& get(array<T, N>&&) noexcept;
  template<size_t I, class T, size_t N>
    constexpr const T& get(const array<T, N>&) noexcept;
  template<size_t I, class T, size_t N>
    constexpr const T&& get(const array<T, N>&&) noexcept;
}
[codeblock:end]
