[section#mdspan.mdspan.overview
    [:en] Overview
    [:zh_CN] 概述
]

[para]
[:en] [`mdspan] is a view of a multidimensional array of elements.
[:zh_CN] [`mdspan] 是一种对元素的多维数组的视图。

[codeblock:synopsis]
namespace std {
  template<class ElementType, class Extents, class LayoutPolicy = layout_right,
           class AccessorPolicy = default_accessor<ElementType>>
  class mdspan {
  public:
    using extents_type = Extents;
    using layout_type = LayoutPolicy;
    using accessor_type = AccessorPolicy;
    using mapping_type = typename layout_type::template mapping<extents_type>;
    using element_type = ElementType;
    using value_type = remove_cv_t<element_type>;
    using index_type = typename extents_type::index_type;
    using size_type = typename extents_type::size_type;
    using rank_type = typename extents_type::rank_type;
    using data_handle_type = typename accessor_type::data_handle_type;
    using reference = typename accessor_type::reference;

    static constexpr rank_type rank() noexcept { return extents_type::rank(); }
    static constexpr rank_type rank_dynamic() noexcept { return extents_type::rank_dynamic(); }
    static constexpr size_t static_extent(rank_type r) noexcept
      { return extents_type::static_extent(r); }
    constexpr index_type extent(rank_type r) const noexcept { return extents().extent(r); }

    // [:en] [#mdspan.mdspan.cons], constructors \
    [:zh_CN] [#mdspan.mdspan.cons]，构造函数
    constexpr mdspan();
    constexpr mdspan(const mdspan& rhs) = default;
    constexpr mdspan(mdspan&& rhs) = default;

    template<class... OtherIndexTypes>
      constexpr explicit mdspan(data_handle_type ptr, OtherIndexTypes... exts);
    template<class OtherIndexType, size_t N>
      constexpr explicit(N != rank_dynamic())
        mdspan(data_handle_type p, span<OtherIndexType, N> exts);
    template<class OtherIndexType, size_t N>
      constexpr explicit(N != rank_dynamic())
        mdspan(data_handle_type p, const array<OtherIndexType, N>& exts);
    constexpr mdspan(data_handle_type p, const extents_type& ext);
    constexpr mdspan(data_handle_type p, const mapping_type& m);
    constexpr mdspan(data_handle_type p, const mapping_type& m, const accessor_type& a);

    template<class OtherElementType, class OtherExtents,
             class OtherLayoutPolicy, class OtherAccessorPolicy>
      constexpr explicit(@\seebelow@)
        mdspan(const mdspan<OtherElementType, OtherExtents,
                            OtherLayoutPolicy, OtherAccessorPolicy>& other);

    constexpr mdspan& operator=(const mdspan& rhs) = default;
    constexpr mdspan& operator=(mdspan&& rhs) = default;

    // [:en] [#mdspan.mdspan.members], members \
    [:zh_CN] [#mdspan.mdspan.members]，成员
    template<class... OtherIndexTypes>
      constexpr reference operator[](OtherIndexTypes... indices) const;
    template<class OtherIndexType>
      constexpr reference operator[](span<OtherIndexType, rank()> indices) const;
    template<class OtherIndexType>
      constexpr reference operator[](const array<OtherIndexType, rank()>& indices) const;

    constexpr size_type size() const noexcept;
    constexpr bool empty() const noexcept;

    friend constexpr void swap(mdspan& x, mdspan& y) noexcept;

    constexpr const extents_type& extents() const noexcept { return [[redoc("*>")]]map_.extents(); }
    constexpr const data_handle_type& data_handle() const noexcept { return [[redoc("*>")]]ptr_; }
    constexpr const mapping_type& mapping() const noexcept { return [[redoc("*>")]]map_; }
    constexpr const accessor_type& accessor() const noexcept { return [[redoc("*>")]]acc_; }

    static constexpr bool is_always_unique()
      { return mapping_type::is_always_unique(); }
    static constexpr bool is_always_exhaustive()
      { return mapping_type::is_always_exhaustive(); }
    static constexpr bool is_always_strided()
      { return mapping_type::is_always_strided(); }

    constexpr bool is_unique() const
      { return [[redoc("*>")]]map_.is_unique(); }
    constexpr bool is_exhaustive() const
      { return [[redoc("*>")]]map_.is_exhaustive(); }
    constexpr bool is_strided() const
      { return [[redoc("*>")]]map_.is_strided(); }
    constexpr index_type stride(rank_type r) const
      { return [[redoc("*>")]]map_.stride(r); }

  private:
    accessor_type [[redoc("*>")]]acc_;         // [=expos]
    mapping_type [[redoc("*>")]]map_;          // [=expos]
    data_handle_type [[redoc("*>")]]ptr_;      // [=expos]
  };

  template<class CArray>
    requires (is_array_v<CArray> && rank_v<CArray> == 1)
    mdspan(CArray&)
      -> mdspan<remove_all_extents_t<CArray>, extents<size_t, extent_v<CArray, 0>>>;

  template<class Pointer>
    requires (is_pointer_v<remove_reference_t<Pointer>>)
    mdspan(Pointer&&)
      -> mdspan<remove_pointer_t<remove_reference_t<Pointer>>, extents<size_t>>;

  template<class ElementType, class... Integrals>
    requires ((is_convertible_v<Integrals, size_t> && ...) && sizeof...(Integrals) > 0)
    explicit mdspan(ElementType*, Integrals...)
      -> mdspan<ElementType, extents<size_t, [[redoc("*:c>")]]maybe-static-ext<Integrals>...>>;

  template<class ElementType, class OtherIndexType, size_t N>
    mdspan(ElementType*, span<OtherIndexType, N>)
      -> mdspan<ElementType, dextents<size_t, N>>;

  template<class ElementType, class OtherIndexType, size_t N>
    mdspan(ElementType*, const array<OtherIndexType, N>&)
      -> mdspan<ElementType, dextents<size_t, N>>;

  template<class ElementType, class IndexType, size_t... ExtentsPack>
    mdspan(ElementType*, const extents<IndexType, ExtentsPack...>&)
      -> mdspan<ElementType, extents<IndexType, ExtentsPack...>>;

  template<class ElementType, class MappingType>
    mdspan(ElementType*, const MappingType&)
      -> mdspan<ElementType, typename MappingType::extents_type,
                typename MappingType::layout_type>;

  template<class MappingType, class AccessorType>
    mdspan(const typename AccessorType::data_handle_type&, const MappingType&,
           const AccessorType&)
      -> mdspan<typename AccessorType::element_type, typename MappingType::extents_type,
                typename MappingType::layout_type, AccessorType>;
}
[codeblock:end]

[para:mandates]
[list]
[item]
[:en] [`ElementType] is a complete object type that is neither an abstract class
type nor an array type,
[:zh_CN] [`ElementType] 是既非抽象类类型也非数组类型的完整对象类型，
[item]
[:en] [`Extents] is a specialization of [`extents], and
[:zh_CN] [`Extents] 为 [`extents] 的特例，并且
[item]
[:en] [`is_same_v<ElementType, typename AccessorPolicy::element_type>] is [`true].
[:zh_CN] [`is_same_v<ElementType, typename AccessorPolicy::element_type>] 为
[`true].
[list:end]

[para]
[:en] [`LayoutPolicy] shall meet the layout mapping policy requirements
([#mdspan.layout.policy.reqmts]), and [`AccessorPolicy] shall meet the accessor
policy requirements ([#mdspan.accessor.reqmts]).
[:zh_CN] [`LayoutPolicy] 应当满足布局映射策略的规定
（[#mdspan.layout.policy.reqmts]），并且 [`AccessorPolicy] 应当满足访问器策略的
规定（[#mdspan.accessor.reqmts]）。

[para]
[:en] Each specialization [`MDS] of [`mdspan] models [`:c copyable] and
[:zh_CN] [`mdspan] 的每个特例 [`MDS] 均构成 [`:c copyable]，并且
[list]
[item]
[:en@~] [`is_nothrow_move_constructible_v<MDS>] is [`true],
[:zh_CN@~] [`is_nothrow_move_constructible_v<MDS>] 为 [`true]，
[item]
[:en@~] [`is_nothrow_move_assignable_v<MDS>] is [`true], and
[:zh_CN@~] [`is_nothrow_move_assignable_v<MDS>] 为 [`true]，并且
[item]
[:en] [`is_nothrow_swappable_v<MDS>] is [`true].
[:zh_CN] [`is_nothrow_swappable_v<MDS>] 为 [`true]。
[list:end]

[para]
[:en] A specialization of [`mdspan] is a trivially copyable type if its
[`accessor_type], [`mapping_type], and [`data_handle_type] are trivially
copyable types.
[:zh_CN] 如果 [`mdspan] 的特例的 [`accessor_type]，[`mapping_type]，和
[`data_handle_type] 均为可平凡复制类型，则它是可平凡复制类型。
