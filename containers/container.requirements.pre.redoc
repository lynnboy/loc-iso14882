[section#container.requirements.pre
    [:en] Preamble
    [:zh_CN] 前言
]

[para]
[:en]
Containers are objects that store other objects.
[:zh_CN]
容器是存储其他对象的对象。

[:en]
They control allocation and deallocation of these objects through constructors,
destructors, insert and erase operations.
[:zh_CN]
它们通过构造函数，析构函数，插入和清除操作来控制这些对象的分配和回收。

[para]
[:en]
All of the complexity requirements in this Clause are stated solely in terms of
the number of operations on the contained objects.
[:zh_CN]
本章中的所有复杂度规定，都是单纯以对所包含对象操作的次数计量的。

[begin:example]
[:en]
The copy constructor of type [`vector<vector<int>>] has linear complexity, even
though the complexity of copying each contained [`vector<int>] is itself linear.
[:zh_CN]
类型 [`vector<vector<int>>] 的复制构造函数具有线性复杂度，虽然其所包含的每个
[`vector<int>] 的复制本身的复杂度也是线性的。
[end:example]

[para]
[:en]
Allocator-aware containers ([#container.alloc.reqmts]) other than [`basic_string]
construct elements using the function
[`allocator_traits<allocator_type>::rebind_traits<U>::construct] and destroy
elements using the function
[`allocator_traits<allocator_type>::rebind_traits<U>::destroy]
([#allocator.traits.members]), where [`U] is either
[`allocator_type::value_type] or an internal type used by the container.
[:zh_CN]
除了 [`basic_string] 之外的分配器感知容器（[#container.alloc.reqmts]）使用函数
[`allocator_traits<allocator_type>::rebind_traits<U>::construct] 来构造各元素，
并使用函数 [`allocator_traits<allocator_type>::rebind_traits<U>::destroy] 来销毁
各元素（[#allocator.traits.members]），其中的 [`U] 为
[`allocator_type::value_type] 或者该容器所使用的某个内部类型。

[:en]
These functions are called only for the container[=']s element type, not for
internal types used by the container.
[:zh_CN]
仅为该容器的元素类型调用这些函数，而不会为容器中使用的内部类型而调用。

[begin:note]
[:en]
This means, for example, that a node-based container would need to construct
nodes containing aligned buffers and call [`construct] to place the element into
the buffer.
[:zh_CN]
这意味着，例如基于节点的容器可能需要构造包含对齐缓冲区的节点，然后调用
[`construct] 来将元素放置到缓冲区中。
[end:note]
