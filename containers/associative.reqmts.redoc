[section#associative.reqmts
    [:en] Associative containers
    [:zh_CN] 关联容器
]

[para]
[:en] Associative containers provide fast retrieval of data based on keys.
[:zh_CN] 关联容器提供基于键快速检索数据的能力。

[:en] The library provides four basic kinds of associative containers: [`set],
[`multiset], [`map] and [`multimap].
[:zh_CN] 程序库提供了四种基本关联容器：[`set]，[`multiset]，[`map]，和
[`multimap]。

[para]
[:en] Each associative container is parameterized on [`Key] and an ordering
relation [`Compare] that induces a strict weak ordering ([#alg.sorting]) on
elements of [`Key].
[:zh_CN] 每种关联容器均以 [`Key] 和归纳了 [`Key] 上的一种严格弱序
（[#alg.sorting]）的排序关系 [`Compare] 所参数化。

[:en] In addition, [`map] and [`multimap] associate an arbitrary [+:% mapped
type] [`T] with the [`Key].
[:zh_CN] 此外 [`map] 和 [`multimap] 还为 [`Key] 关联任意一种[+:% 映射类型] [`T]。

[:en] The object of type [`Compare] is called the [+:% comparison object] of a
container.
[:zh_CN] [`Compare] 类型的对象被称为容器的[+:% 比较对象]。

[para]
[:en] The phrase [=lq]equivalence of keys[=rq] means the equivalence relation
imposed by the comparison object.
[:zh_CN] 术语“键的等价”的含义是由比较对象所提供的等价关系。

[:en]
That is, two keys [`k1] and [`k2] are considered to be equivalent if for the
comparison object [`comp], [`comp(k1, k2) == false && comp(k2, k1) == false].
[:zh_CN]
就是说，两个键 [`k1] 和 [`k2]，当对于比较对象 [`comp] 有
[`comp(k1, k2) == false && comp(k2, k1) == false] 时认为它们等价。

[begin:note]
[:en] This is not necessarily the same as the result of [`k1 == k2].
[:zh_CN] 这不一定与 [`k1 == k2] 的结果相同。
[end:note]

[:en] For any two keys [`k1] and [`k2] in the same container, calling
[`comp(k1, k2)] shall always return the same value.
[:zh_CN] 对于同一个容器中的任意两个键 [`k1] 和 [`k2]，调用 [`comp(k1, k2)] 应当
总是返回相同的值。

[para]
[:en] An associative container supports [+:% unique keys] if it may contain at
most one element for each key.
[:zh_CN] 如果关联容器为每个键最多可以包含一个元素，则它支持[+:% 唯一键]。

[:en] Otherwise, it supports [+:% equivalent keys].
[:zh_CN] 否则，它支持[+:% 等价键]。

[:en] The [`set] and [`map] classes support unique keys; the [`multiset] and
[`multimap] classes support equivalent keys.
[:zh_CN] [`set] 和 [`map] 类支持唯一键；[`multiset] 和 [`multimap] 类支持等价键。

[:en] For [`multiset] and [`multimap], [`insert], [`emplace], and [`erase]
preserve the relative ordering of equivalent elements.
[:zh_CN] 对于 [`multiset] 和 [`multimap]，其 [`insert]、[`emplace] 和 [`erase]
将保持等价元素之间的相对顺序。

[para]
[:en] For [`set] and [`multiset] the value type is the same as the key type.
[:zh_CN] 对于 [`set] 和 [`multiset]，其值类型与键类型相同。

[:en] For [`map] and [`multimap] it is equal to [`pair<const Key, T>].
[:zh_CN] 对于 [`map] 和 [`multimap]，值类型等于 [`pair<const Key, T>]。

[para]
[:en] [`iterator] of an associative container is of the bidirectional iterator
category.
[:zh_CN] 关联容器的 [`iterator] 属于双向迭代器类别。

[:en] For associative containers where the value type is the same as the key
type, both [`iterator] and [`const_iterator] are constant iterators.
[:zh_CN] 对于值类型与键类型相同的关联容器，[`iterator] 和 [`const_iterator] 都是
常量迭代器。

[:en] It is unspecified whether or not [`iterator] and [`const_iterator] are the
same type.
[:zh_CN] [`iterator] 和 [`const_iterator] 是否是相同类型是未指明的。

[begin:note]
[:en] [`iterator] and [`const_iterator] have identical semantics in this case,
and [`iterator] is convertible to [`const_iterator].
[:zh_CN] 这种情况下 [`iterator] 和 [`const_iterator] 具有相同的语义，而且
[`iterator] 可以转换为 [`const_iterator]。

[:en] Users can avoid violating the one definition rule by always using
[`const_iterator] in their function parameter lists.
[:zh_CN] 用户可以通过在其函数形参列表中总是使用 [`const_iterator] 来避免对唯一
定义原则的违反。
[end:note]

[para]
[:en] The associative containers meet all the requirements of Allocator-aware
containers ([#container.requirements.general]), except that for [`map] and
[`multimap], the requirements placed on [`value_type] in
[#:tab container.alloc.req] apply instead to [`key_type] and [`mapped_type].
[:zh_CN] 关联容器满足对分配器感知容器的所有规定
（[#container.requirements.general]），但对于 [`map] 和 [`multimap]，
[#:tab container.alloc.req] 中对 [`value_type] 的规定被代之以针对 [`key_type] 和
[`mapped_type]。

[begin:note]
[:en] For example, in some cases [`key_type] and [`mapped_type] are required to
be [*Cpp17CopyAssignable] even though the associated [`value_type],
[`pair<const key_type, mapped_type>], is not [*Cpp17CopyAssignable].
[:zh_CN] 例如，某些情况下 [`key_type] 和 [`mapped_type] 被要求为
[*Cpp17CopyAssignable]，虽然其所关联的 [`value_type]
（[`pair<const key_type, mapped_type>]）可能不为 [*Cpp17CopyAssignable]。
[end:note]

[para]
[:en] In [#:tab container.assoc.req], [`X] denotes an associative container
class, [`a] denotes a value of type [`X], [`a2] denotes a value of a type with
nodes compatible with type [`X] ([#:tab container.node.compat]), [`b] denotes a
possibly [`const] value of type [`X], [`u] denotes the name of a variable being
declared, [`a_uniq] denotes a value of type [`X] when [`X] supports unique keys,
[`a_eq] denotes a value of type [`X] when [`X] supports multiple keys, [`a_tran]
denotes a possibly [`const] value of type [`X] when the [~qualified-id]
[`X::key_compare::is_transparent] is valid and denotes a type ([#temp.deduct]),
[`i] and [`j] neet the [`Cpp17InputIterator] requirements and refer to elements
implicitly convertible to [`value_type], [=range(i,j)] denotes a valid range,
[`p] denotes a valid constant iterator to [`a], [`q] denotes a valid
dereferenceable constant iterator to [`a], [`r] denotes a valid
dereferenceable iterator to [`a], [``[q1, q2)] denotes a valid range of const
iterators in [`a], [`il] designates an object of type
[`initializer_list<value_type>], [`t] denotes a value of type [`X::value_type],
[`k] denotes a value of type [`X::key_type] and [`c] denotes a possibly [`const]
value of type [`X::key_compare]; [`kl] is a value such that [`a] is partitioned
([#alg.sorting]) with respect to [`c(r, kl)], with [`r] the key value of [`e]
and [`e] in [`a]; [`ku] is a value such that [`a] is partitioned with respect to
[`!c(ku, r)]; [`ke] is a value such that [`a] is partitioned with respect to
[`c(r, ke)] and [`!c(ke, r)], with [`c(r, ke)] implying [`!c(ke, r)].
[:zh_CN] [#:tab container.assoc.req] 中，[`X] 代表一种关联容器类，[`a] 代表 [`X]
类型的值，[`a2] 代表与类型 [`X] 具有兼容节点的类型（[#:tab container.node.compat]）
的值，[`b] 代表 [`X] 类型的可能为 [`const] 的值，[`u] 代表所声明的变量的名字，
[`a_uniq] 代表当 [`X] 支持唯一键时 [`X] 类型的值，[`a_eq] 代表当 [`X] 支持多重键
时 [`X] 类型的值，[`a_tran] 代表当[~限定标识] [`X::key_compare::is_transparent]
有效且代表某个类型（[#temp.deduct]）时 [`X] 类型的可能为 [`const] 的值，[`i] 和
[`j] 符合 [`Cpp17InputIterator] 的规定并且指代可以隐式转换为 [`value_type] 的
元素，[=range(i,j)] 代表有效的范围，[`p] 代表 [`a] 的有效常量迭代器，[`q] 代表
[`a] 的有效可解引用常量迭代器，[`r] 代表 [`a] 的有效可解引用迭代器，[``[q1, q2)]
代表 [`a] 中 const 迭代器的有效范围，[`il] 代表 [`initializer_list<value_type>]
类型的对象，[`t] 代表 [`X::value_type] 类型的对象，[`k] 代表 [`X::key_type] 类型
的对象，而 [`c] 代表 [`X::key_compare] 类型的可能为 [`const] 的对象；[`kl] 是
使得 [`a] 根据 [`c(r, kl)] 进行分区（[#alg.sorting]）的值，其中 [`r] 为 [`e] 的
键值而 [`e] 处于 [`a] 中；[`ku] 是使得 [`a] 根据 [`!c(ku, r)] 进行分区的值；
[`ke] 是使得 [`a] 根据 [`c(r, ke)] 和 [`!c(ke, r)] 进行分区的值，其中
[`c(r, ke)] 蕴含 [`!c(ke, r)]。

[:en] [`A] denotes the storage allocator used by [`X], if any, or
[`allocator<X::value_type>] otherwise, [`m] denotes an allocator of a type
convertible to [`A], and [`nh] denotes a non-const rvalue of type
[`X::node_type].
[:zh_CN] [`A] 代表由 [`X] 所使用的存储分配器（如果有），否则为
[`allocator<X::value_type>]，[`m] 代表其类型可以转换为 [`A] 的分配器，而 [`nh]
代表 [`X::node_type] 类型的非 const 右值。

[<
@applyTo(['?indexordmem'])
def indexordmem(_1):
    return f'''[%@lib@raw [`{_1}][![:en]ordered associative containers[:zh_CN]有序关联容器]]
    [%@lib@raw [`set][![`{_1}]]]
    [%@lib@raw [`map][![`{_1}]]]
    [%@lib@raw [`multiset][![`{_1}]]]
    [%@lib@raw [`multimap][![`{_1}]]]'''
>]

[table:grid#container.assoc.req
    [:en] Associative container requirements (in addition to container)
    [:zh_CN] 关联容器（除容器以外）的规定

    [|
        [:en] Expression
        [:zh_CN] 表达式
    ]
    [|
        [:en] Return type
        [:zh_CN] 返回类型
    ]
    [|
        [:en] Assertion/note [br] pre-/post-condition
        [:zh_CN] 断言/注解 [br] 前/后条件
    ]
    [|
        [:en] Complexity
        [:zh_CN] 复杂度
    ]
]

[%@library key_type[![:en]ordered associative containers[:zh_CN]有序关联容器]]
[%@library set[!key_type]]
[%@library map[!key_type]]
[%@library multiset[!key_type]]
[%@library multimap[!key_type]]
[|] [`X::key_type]
[|] [`Key]
[|]
[|] [:en] compile time
    [:zh_CN] 编译期
[-]
[%@library mapped_type[![:en]ordered associative containers[:zh_CN]有序关联容器]]
[%@library set[!mapped_type]]
[%@library map[!mapped_type]]
[%@library multiset[!mapped_type]]
[%@library multimap[!mapped_type]]
[|] [:en] [`X::mapped_type] ([`map] and [`multimap] only)
    [:zh_CN] [`X::mapped_type]（仅对于 [`map] 和 [`multimap]）
[|] [`T]
[|]
[|] [:en] compile time
    [:zh_CN] 编译期
[-]
[%@library value_type[![:en]ordered associative containers[:zh_CN]有序关联容器]]
[%@library set[!value_type]]
[%@library map[!value_type]]
[%@library multiset[!value_type]]
[%@library multimap[!value_type]]
[|] [:en] [`X::value_type] ([`set] and [`multiset] only)
    [:zh_CN] [`X::value_type]（仅对于 [`set] 和 [`multiset]）
[|] [`Key]
[|] [para:expects]
    [:en] [`value_type] is [*Cpp17Erasable] from [`X]
    [:zh_CN] [`value_type] 为从 [`X] 中 [*Cpp17Erasable]
[|] [:en] compile time
    [:zh_CN] 编译期
[-]
[|] [:en] [`X::value_type] ([`map] and [`multimap] only)
    [:zh_CN] [`X::value_type]（仅对于 [`map] 和 [`multimap]）
[|] [`pair<const Key, T>]
[|] [para:expects]
    [:en] [`value_type] is [*Cpp17Erasable] from [`X]
    [:zh_CN] [`value_type] 为从 [`X] 中 [*Cpp17Erasable]
[|] [:en] compile time
    [:zh_CN] 编译期
[-]
[%@library key_compare[![:en]ordered associative containers[:zh_CN]有序关联容器]]
[%@library set[!key_compare]]
[%@library map[!key_compare]]
[%@library multiset[!key_compare]]
[%@library multimap[!key_compare]]
[|] [`X::key_compare]
[|] [`Compare]
[|] [para:expects]
    [:en] [`key_compare] is [*Cpp17CopyConstructible].
    [:zh_CN] [`key_compare] 为 [*Cpp17CopyConstructible]。
[|] [:en] compile time
    [:zh_CN] 编译期
[-]
[%@library value_compare[![:en]ordered associative containers[:zh_CN]有序关联容器]]
[%@library set[!value_compare]]
[%@library map[!value_compare]]
[%@library multiset[!value_compare]]
[%@library multimap[!value_compare]]
[|] [`X::value_compare]
[|] [:en] a binary predicate type
    [:zh_CN] 二元谓词类型
[|] [:en] is the same as [`key_compare] for [`set] and [`multiset]; is an
    ordering relation on pairs induced by the first component (i.e., [`Key]) for
    [`map] and [`multimap].
    [:zh_CN] 对于 [`set] 和 [`multiset]，与 [`key_compare] 相同；对于 [`map] 和
    [`multimap]，是以对偶的第一部分（亦即 [`Key]）归纳的对偶之间的排序关系。
[|] [:en] compile time
    [:zh_CN] 编译期
[-]
[%@library node_type[![:en]ordered associative containers[:zh_CN]有序关联容器]]
[%@library set[!node_type]]
[%@library map[!node_type]]
[%@library multiset[!node_type]]
[%@library multimap[!node_type]]
[|] [`X::node_type]
[|] [:en] a specialization of a [`[*node-handle]] class template, such that the
    public nested types are the same types as the corresponding types in [`X].
    [:zh_CN] 类模板 [`[*node-handle]] 的特例，其各个公开嵌套类型与 [`X] 中的对应
    类型为相同的类型。
[|] [:en] see [#container.node].
    [:zh_CN] 参见 [#container.node]。
[|] [:en] compile time
    [:zh_CN] 编译期
[-]
[%@library set[![:en]constructor[:zh_CN]构造函数]]
[%@library map[![:en]constructor[:zh_CN]构造函数]]
[%@library multiset[![:en]constructor[:zh_CN]构造函数]]
[%@library multimap[![:en]constructor[:zh_CN]构造函数]]
[|] [`X(c)] [br] [`X u(c);]
[|]
[|] [para:effects]
    [:en] Constructs an empty container.
    [:zh_CN] 构造一个空容器。

    [:en] Uses a copy of [`c] as a comparison object.
    [:zh_CN] 使用 [`c] 的副本作为比较对象。
[|] [:en] constant
    [:zh_CN] 常量
[-]
[|] [`X()] [br] [`X u;]
[|]
[|] [para:expects]
    [:en] [`key_compare] meets the [*Cpp17DefaultConstructible] requirements.
    [:zh_CN] [`key_compare] 满足 [*Cpp17DefaultConstructible] 的规定。

    [para:effects]
    [:en] Constructs an empty container.
    [:zh_CN] 构造一个空容器。

    [:en] Uses [`Compare()] as a comparison object
    [:zh_CN] 使用 [`Compare()] 作为比较对象。
[|] [:en] constant
    [:zh_CN] 常量
[-]
[|] [`X(i,j,c)] [br] [`X u(i,j,c);]
[|]
[|] [para:expects]
    [:en] [`value_type] is [*Cpp17EmplaceConstructible] into [`X] from [`*i].
    [:zh_CN] [`value_type] 为以 [`*i] 向 [`X] 中 [*Cpp17EmplaceConstructible]。

    [para:effects]
    [:en] Constructs an empty container and inserts elements from the range
    [``[i, j)] into it; uses [`c] as a comparison object.
    [:zh_CN] 构造一个空容器，并将范围 [``[i, j)] 中的元素插入其中；使用 [`c]
    作为比较对象。
[|] [:en] [$N \log N] in general, where [$N] has the value [`distance(i, j)];
    linear if [``[i, j)] is sorted with [`value_comp()]
    [:zh_CN] 一般为 [$N \log N]，其中 [$N] 的值为 [`distance(i, j)]；
    当 [``[i, j)] 以 [`value_comp()] 进行了排序时为线性。
[-]
[|] [`X(i,j)] [br] [`X u(i,j);]
[|]
[|] [para:expects]
    [:en] [`key_compare] meets the [*Cpp17DefaultConstructible] requirements.
    [:zh_CN] [`key_compare] 满足 [*Cpp17DefaultConstructible] 的规定。

    [:en] [`value_type] is [*Cpp17EmplaceConstructible] into [`X] from [`*i].
    [:zh_CN] [`value_type] 为以 [`*i] 向 [`X] 中 [*Cpp17EmplaceConstructible]。

    [para:effects]
    [:en] Same as above, but uses [`Compare()] as a comparison object.
    [:zh_CN] 同上，但使用 [`Compare()] 作为比较对象。
[|] [:en] same as above
    [:zh_CN] 同上
[-]
[|] [`X(il)]
[|]
[|] [:en] same as [`X(il.begin(), il.end())]
    [:zh_CN] 与 [`X(il.begin(), il.end())] 相同
[|] [:en] same as [`X(il.begin(), il.end())]
    [:zh_CN] 与 [`X(il.begin(), il.end())] 相同
[-]
[|] [`X(il,c)]
[|]
[|] [:en] same as [`X(il.begin(), il.end(), c)]
    [:zh_CN] 与 [`X(il.begin(), il.end(), c)] 相同
[|] [:en] same as [`X(il.begin(), il.end(), c)]
    [:zh_CN] 与 [`X(il.begin(), il.end(), c)] 相同
[-]
[|] [`a = il]
[|] [`X&]
[|] [para:expects]
    [:en] [`value_type] is [*Cpp17CopyInsertable] into [`X] and
	[*Cpp17CopyAssignable].
    [:zh_CN] [`value_type] 为向 [`X] 中 [*Cpp17CopyInsertable]，并且为
    [*Cpp17CopyAssignable]。

    [para:effects]
    [:en] Assigns the range [=range(il.begin(),il.end())] into [`a].
    [:zh_CN] 将范围 [=range(il.begin(),il.end())] 赋值到[`a] 中。

    [:en] All existing elements of [`a] are either assigned to or destroyed.
    [:zh_CN] [`a] 的所有现存元素要么被赋值要么被销毁。
[|] [:en] [$N \log N] in general, where [$N] has the value
    [`il.size() + a.size()]; linear if [=range(il.begin(),il.end())] is sorted
    with [`value_comp()]
    [:zh_CN] 一般为 [$N \log N]，其中 [$N] 的值为 [`il.size() + a.size()]；
    当 [=range(il.begin(),il.end())] 以 [`value_comp()] 进行了排序时为线性
[-]
[%@library key_comp[![:en]ordered associative containers[:zh_CN]有序关联容器]]
[%@library set[!key_comp]]
[%@library map[!key_comp]]
[%@library multiset[!key_comp]]
[%@library multimap[!key_comp]]
[|] [`b.key_comp()]
[|] [`X::key_compare]
[|] [para:returns]
    [:en] the comparison object out of which [`b] was constructed.
    [:zh_CN] 用于构造 [`b] 的比较对象。
[|] [:en] constant
    [:zh_CN] 常量
[-]
[%@library value_comp[![:en]ordered associative containers[:zh_CN]有序关联容器]]
[%@library set[!value_comp]]
[%@library map[!value_comp]]
[%@library multiset[!value_comp]]
[%@library multimap[!value_comp]]
[|] [`b.value_comp()]
[|] [`X::value_compare]
[|] [para:returns]
    [:en] an object of [`value_compare] constructed out of the comparison object
    [:zh_CN] 从比较对象构造的 [`value_compare] 对象
[|] [:en] constant
    [:zh_CN] 常量
[-]
[%@library emplace[![:en]ordered associative containers[:zh_CN]有序关联容器]]
[%@library set[!emplace]]
[%@library map[!emplace]]
[%@library multiset[!emplace]]
[%@library multimap[!emplace]]
[|] [`a_uniq.emplace(args)]
[|] [`pair<iterator, bool>]
[|] [para:expects]
    [:en] [`value_type] is [*Cpp17EmplaceConstructible] into [`X] from [`args].
    [:zh_CN] [`value_type] 以 [`args] 向 [`X] 中 [*Cpp17EmplaceConstructible]。

    [para:effects]
    [:en] Inserts a [`value_type] object [`t] constructed with
    [`std::forward<Args>(args)...] if and only if there is no element in the
    container with key equivalent to the key of [`t].
    [:zh_CN] 当且仅当容器中不存在其键等价于 [`t] 的键的元素时，插入以
    [`std::forward<Args>(args)...] 构造的 [`value_type] 对象 [`t]。

    [:en] The [`bool] component of the returned pair is [`true] if and only if
    the insertion takes place, and the [`iterator] component of the pair points
    to the element with key equivalent to the key of [`t].
    [:zh_CN] 当且仅当发生了插入时，所返回的对偶的 [`bool] 成分为 [`true]；对偶的
    [`iterator] 成分指向其键等价于 [`t] 的键的元素。
[|] [:en] logarithmic
    [:zh_CN] 对数
[-]
[|] [`a_eq.emplace(args)]
[|] [`iterator]
[|] [para:expects]
    [:en] [`value_type] is [*Cpp17EmplaceConstructible] into [`X] from [`args].
    [:zh_CN] [`value_type] 以 [`args] 向 [`X] 中 [*Cpp17EmplaceConstructible]。

    [para:effects]
    [:en] Inserts a [`value_type] object [`t] constructed with
    [`std::forward<Args>(args)...] and returns the iterator pointing to the
    newly inserted element.
    [:zh_CN] 插入以 [`std::forward<Args>(args)...] 构造的 [`value_type] 对象
    [`t]，并返回指向新插入元素的迭代器。

    [:en] If a range containing elements equivalent to [`t] exists in [`a_eq],
    [`t] is inserted at the end of that range.
    [:zh_CN] 如果 [`a_eq] 中存在包含等价于 [`t] 的元素的范围，则 [`t] 被插入到
    该范围的末尾。
[|] [:en] logarithmic
    [:zh_CN] 对数
[-]
[%@library emplace_hint[![:en]ordered associative containers[:zh_CN]有序关联容器]]
[%@library set[!emplace_hint]]
[%@library map[!emplace_hint]]
[%@library multiset[!emplace_hint]]
[%@library multimap[!emplace_hint]]
[|] [`a.emplace_hint(p, args)]
[|] [`iterator]
[|] [:en] equivalent to [`a.emplace(std::forward<Args>(args)...)].
    [:zh_CN] 等价于 [`a.emplace(std::forward<Args>(args)...)]。

    [:en] Return value is an iterator pointing to the element with the key
    equivalent to the newly inserted element.
    [:zh_CN] 返回值是指向其键等价于新插入的元素的元素的迭代器。

    [:en] The element is inserted as close as possible to the position just
    prior to [`p].
    [:zh_CN] 元素被插入到与紧接 [`p] 之前的位置尽可能靠近。
[|] [:en] logarithmic in general, but amortized constant if the element is
    inserted right before [`p]
    [:zh_CN] 通常为对数，但当元素被插入到紧接 [`p] 之前时为摊销常量
[-]
[%@library insert[![:en]ordered associative containers[:zh_CN]有序关联容器]]
[%@library set[!insert]]
[%@library map[!insert]]
[%@library multiset[!insert]]
[%@library multimap[!insert]]
[|] [`a_uniq.insert(t)]
[|] [`pair<iterator, bool>]
[|] [para:expects]
    [:en] If [`t] is a non-const rvalue, [`value_type] is [*Cpp17MoveInsertable]
    into [`X]; otherwise, [`value_type] is [*Cpp17CopyInsertable] into [`X].
    [:zh_CN] 如果 [`t] 是非 const 右值，则 [`value_type] 向 [`X] 中
    [*Cpp17MoveInsertable]；否则 [`value_type] 向 [`X] 中 [*Cpp17CopyInsertable]。

    [para:effects]
    [:en] Inserts [`t] if and only if there is no element in the container with
    key equivalent to the key of [`t].
    [:zh_CN] 当且仅当容器中不存在其键等价于 [`t] 的键的元素时，插入 [`t]。

    [:en] The [`bool] component of the returned pair is [`true] if and only if
    the insertion takes place, and the [`iterator] component of the pair points
    to the element with key equivalent to the key of [`t].
    [:zh_CN] 当且仅当发生了插入时，所返回的对偶的 [`bool] 成分为 [`true]；对偶的
    [`iterator] 成分指向其键等价于 [`t] 的键的元素。
[|] [:en] logarithmic
    [:zh_CN] 对数
[-]
[|] [`a_eq.insert(t)]
[|] [`iterator]
[|] [para:expects]
    [:en] If [`t] is a non-const rvalue, [`value_type] is [*Cpp17MoveInsertable]
    into [`X]; otherwise, [`value_type] is [*Cpp17CopyInsertable] into [`X].
    [:zh_CN] 如果 [`t] 是非 const 右值，则 [`value_type] 向 [`X] 中
    [*Cpp17MoveInsertable]；否则 [`value_type] 向 [`X] 中 [*Cpp17CopyInsertable]。

    [para:effects]
    [:en] Inserts [`t] and returns the iterator pointing to the newly inserted
    element.
    [:zh_CN] 插入 [`t]，并返回指向新插入元素的迭代器。

    [:en] If a range containing elements equivalent to [`t] exists in [`a_eq],
    [`t] is inserted at the end of that range.
    [:zh_CN] 如果 [`a_eq] 中存在包含等价于 [`t] 的元素的范围，则 [`t] 被插入到
    该范围的末尾。
[|] [:en] logarithmic
    [:zh_CN] 对数
[-]
[|] [`a.insert(p, t)]
[|] [`iterator]
[|] [para:expects]
    [:en] If [`t] is a non-const rvalue, [`value_type] is [*Cpp17MoveInsertable]
    into [`X]; otherwise, [`value_type] is [*Cpp17CopyInsertable] into [`X].
    [:zh_CN] 如果 [`t] 是非 const 右值，则 [`value_type] 向 [`X] 中
    [*Cpp17MoveInsertable]；否则 [`value_type] 向 [`X] 中 [*Cpp17CopyInsertable]。

    [para:effects]
    [:en] Inserts [`t] if and only if there is no element with key equivalent to
    the key of [`t] in containers with unique keys; always inserts [`t] in
    containers with equivalent keys.
    [:zh_CN] 当且仅当具有唯一键的容器中不存在其键等价于 [`t] 的键的元素时，插入
    [`t]；总是向具有等价键的容器中插入 [`t]。

    [:en] Always returns the iterator pointing to the element with key
    equivalent to the key of [`t].
    [:zh_CN] 总是返回指向其键等价于 [`t] 的键的元素的迭代器。

    [:en] [`t] is inserted as close as possible to the position just prior to
    [`p].
    [:zh_CN] [`t] 被插入到与紧接 [`p] 之前的位置尽可能靠近。
[|] [:en] logarithmic in general, but amortized constant if [`t] is inserted
    right before [`p].
    [:zh_CN] 通常为对数，但当 [`t] 被插入到紧接 [`p] 之前时为摊销常量。
[-]
[|] [`a.insert(i, j)]
[|] [`void]
[|] [para:expects]
    [:en] [`value_type] is [*Cpp17EmplaceConstructible] into [`X] from [`*i].
    [:zh_CN] [`value_type] 以 [`*i] 向 [`X] 中 [*Cpp17EmplaceConstructible]。

    [:en] Neither [`i] nor [`j] are iterators into [`a].
    [:zh_CN] [`i] 和 [`j] 都不是 [`a] 中的迭代器。

    [para:effects]
    [:en] Inserts each element from the range [=range(i,j)] if and only if there
    is no element with key equivalent to the key of that element in containers
    with unique keys; always inserts that element in containers with equivalent
    keys.
    [:zh_CN] 对于范围 [=range(i,j)] 中的每个元素，当且仅当具有唯一键的容器中不
    存在其键等价于该元素的键的元素时，插入该元素；总是向具有等价键的容器中插入
    该元素。
[|] [:en] [$N \log ([`a.size()] + N)], where [$N] has the value
    [`distance(i, j)]
    [:zh_CN] [$N \log ([`a.size()] + N)]，其中 [$N] 的值为 [`distance(i, j)]
[-]
[|] [`a.insert(il)]
[|] [`void]
[|] [:en] equivalent to [`a.insert(il.begin(), il.end())].
    [:zh_CN] 等价于 [`a.insert(il.begin(), il.end())]。
[|]
[-]
[|] [`a_uniq.insert(nh)]
[|] [`insert_return_type]
[|] [para:expects]
    [:en] [`nh] is empty or [`a_uniq.get_allocator() == nh.get_allocator()].
    [:zh_CN] [`nh] 为空，或者 [`a_uniq.get_allocator() == nh.get_allocator()]。

    [para:effects]
    [:en] If [`nh] is empty, has no effect.
    [:zh_CN] 若 [`nh] 为空则没有效果。

    [:en] Otherwise, inserts the element owned by [`nh] if and only if there is
    no element in the container with a key equivalent to [`nh.key()].
    [:zh_CN] 否则，当且仅当该容器中不存在带有等价于 [`nh.key()] 的键的元素时，
    插入由 [`nh] 所拥有的元素。

    [para:ensures]
    [:en] If [`nh] is empty, [`inserted] is [`false], [`position] is [`end()],
    and [`node] is empty.
    [:zh_CN] 若 [`nh] 为空，则 [`inserted] 为 [`false]，[`position] 为 [`end()]，
    且 [`node] 为空。

    [:en] Otherwise if the insertion took place, [`inserted] is [`true],
    [`position] points to the inserted element, and [`node] is empty; if the
    insertion failed, [`inserted] is [`false], [`node] has the previous value of
    [`nh], and [`position] points to an element with a key equivalent to
    [`nh.key()].
    [:zh_CN] 否则如果发生了插入，则 [`inserted] 为 [`true]，[`position] 指向所
    插入的元素，而 [`node] 为空；如果插入失败，则 [`inserted] 为 [`false]，
    [`node] 具有 [`nh] 之前的值，而 [`position] 指向带有等价于 [`nh.key()] 的键
    的元素。
[|] [:en] logarithmic
    [:zh_CN] 对数
[-]
[|] [`a_eq.insert(nh)]
[|] [`iterator]
[|] [para:expects]
    [:en] [`nh] is empty or [`a_eq.get_allocator() == nh.get_allocator()].
    [:zh_CN] [`nh] 为空，或者 [`a_eq.get_allocator() == nh.get_allocator()]。

    [para:effects]
    [:en] If [`nh] is empty, has no effect and returns [`a_eq.end()].
    [:zh_CN] 若 [`nh] 为空，则没有效果并返回 [`a_eq.end()]。

    [:en] Otherwise, inserts the element owned by [`nh] and returns an iterator
    pointing to the newly inserted element.
    [:zh_CN] 否则，插入由 [`nh] 所拥有的元素，并返回指向新插入的元素的迭代器。

    [:en] If a range containing elements with keys equivalent to [`nh.key()]
    exists in [`a_eq], the element is inserted at the end of that range.
    [:zh_CN] 如果 [`a_eq] 中存在包含带有与 [`nh.key()] 等价的键的元素的一个范围，
    则元素被插入到这个范围的末尾。

    [para:ensures]
    [:en] [`nh] is empty.
    [:zh_CN] [`nh] 为空。
[|] [:en] logarithmic
    [:zh_CN] 对数
[-]
[|] [`a.insert(p, nh)]
[|] [`iterator]
[|] [para:expects]
    [:en] [`nh] is empty or [`a.get_allocator() == nh.get_allocator()].
    [:zh_CN] [`nh] 为空，或者 [`a.get_allocator() == nh.get_allocator()]。

    [para:effects]
    [:en] If [`nh] is empty, has no effect and returns [`a.end()].
    [:zh_CN] 若 [`nh] 为空，则没有效果并返回 [`a.end()]。

    [:en] Otherwise, inserts the element owned by [`nh] if and only if there is
    no element with key equivalent to [`nh.key()] in containers with unique
    keys; always inserts the element owned by [`nh] in containers with
    equivalent keys.
    [:zh_CN] 否则，在带有唯一键的容器中当且仅当不存在带有等价于 [`nh.key()] 的键
    的元素时，插入由 [`nh] 所拥有的元素；在带有等价键的容器中总是插入由 [`nh] 所
    拥有的元素。

    [:en] Always returns the iterator pointing to the element with key
    equivalent to [`nh.key()].
    [:zh_CN] 总是返回指向带有等价于 [`nh.key()] 的键的元素的迭代器。

    [:en] The element is inserted as close as possible to the position just
    prior to [`p].
    [:zh_CN] 元素被插入到与紧接 [`p] 之前的位置尽可能靠近。

    [para:ensures]
    [:en] [`nh] is empty if insertion succeeds, unchanged if insertion fails.
    [:zh_CN] 若插入成功则 [`nh] 为空，若插入失败则其无变化。
[|] [:en] logarithmic in general, but amortized constant if the element is
    inserted right before [`p].
    [:zh_CN] 通常为对数，但当元素被插入到紧接 [`p] 之前时为摊销常量
[-]
[%@library extract[![:en]ordered associative containers[:zh_CN]有序关联容器]]
[%@library set[!extract]]
[%@library map[!extract]]
[%@library multiset[!extract]]
[%@library multimap[!extract]]
[|] [`a.extract(k)]
[|] [`node_type]
[|] [para:effects]
    [:en] Removes the first element in the container with key equivalent to [`k].
    [:zh_CN] 移除容器中第一个具有等价于 [`k] 的键的元素。

    [para:returns]
    [:en] A [`node_type] owning the element if found, otherwise an empty
    [`node_type].
    [:zh_CN] 如果找到则为一个拥有该元素的 [`node_type]，否则为空 [`node_type]。
[|] [$\log ([`a.size()])]
[-]
[|] [`a.extract(q)]
[|] [`node_type]
[|] [para:effects]
    [:en] Removes the element pointed to by [`q].
    [:zh_CN] 移除 [`q] 所指向的元素。

    [para:returns]
    [:en] A [`node_type] owning that element.
    [:zh_CN] 一个拥有该元素的 [`node_type]。
[|] [:en] amortized constant
    [:zh_CN] 摊销常量
[-]
[%@library merge[![:en]ordered associative containers[:zh_CN]有序关联容器]]
[%@library set[!merge]]
[%@library map[!merge]]
[%@library multiset[!merge]]
[%@library multimap[!merge]]
[|] [`a.merge(a2)]
[|] [`void]
[|] [para:expects]
    [:en] [`a.get_allocator() == a2.get_allocator()].
    [:zh_CN] [`a.get_allocator() == a2.get_allocator()]。

    [para:effects]
    [:en] Attempts to extract each element in [`a2] and insert it into [`a]
    using the comparison object of [`a].
    [:zh_CN] 尝试提取 [`a2] 中的每个元素，并使用 [`a] 的比较对象来将之插入到
    [`a] 之中。

    [:en] In containers with unique keys, if there is an element in [`a] with
    key equivalent to the key of an element from [`a2], then that element is not
    extracted from [`a2].
    [:zh_CN] 在带有唯一键的容器中，如果 [`a] 之中存在某个元素的键等价于 [`a2] 中
    的元素的键，则该元素不会从 [`a2] 中提取出来。

    [para:ensures]
    [:en] Pointers and references to the transferred elements of [`a2] refer to
    those same elements but as members of [`a].
    [:zh_CN] 曾指代被迁移的 [`a2] 的元素的指针和引用，仍指代相同的元素，但它们
    已经是 [`a] 的成员。

    [:en] Iterators referring to the transferred elements will continue to refer
    to their elements, but they now behave as iterators into [`a], not into
    [`a2].
    [:zh_CN] 曾指代被迁移的元素的迭代器将会继续指代它们的元素，但它们变为 [`a]
    的迭代器而不是 [`a2] 的迭代器。

    [para:throws]
    [:en] Nothing unless the comparison object throws.
    [:zh_CN] 无，除非比较对象抛出异常。
[|] [:en] [$N \log([`a.size()] + N)] where [$N] has the value [`a2.size()].
    [:zh_CN] [$N \log([`a.size()] + N)]，其中 [$N] 的值为 [`a2.size()]。
[-]
[%@library erase[![:en]ordered associative containers[:zh_CN]有序关联容器]]
[%@library set[!erase]]
[%@library map[!erase]]
[%@library multiset[!erase]]
[%@library multimap[!erase]]
[|] [`a.erase(k)]
[|] [`size_type]
[|] [para:effects]
    [:en] Erases all elements in the container with key equivalent to [`k].
    [:zh_CN] 清除容器中具有等价于 [`k] 的键的所有元素。

    [para:returns]
    [:en] The number of erased elements.
    [:zh_CN] 所清除的元素数量。
[|] [$\log ([`a.size()]) + [`a.count(k)]]
[-]
[|] [`a.erase(q)]
[|] [`iterator]
[|] [para:effects]
    [:en] Erases the element pointed to by [`q].
    [:zh_CN] 清除由 [`q] 所指向的元素。

    [para:returns]
    [:en] An iterator pointing to the element immediately following [`q] prior
    to the element being erased.
    [:zh_CN] 指向元素被清除前紧跟 [`q] 之后的元素的迭代器。

    [:en] If no such element exists, returns [`a.end()].
    [:zh_CN] 如果不存在这种元素，则返回 [`a.end()]。
[|] [:en] amortized constant
    [:zh_CN] 摊销常量
[-]
[|] [`a.erase(r)]
[|] [`iterator]
[|] [para:effects]
    [:en] Erases the element pointed to by [`r].
    [:zh_CN] 清除由 [`r] 所指向的元素。

    [para:returns]
    [:en] An iterator pointing to the element immediately following [`r] prior
    to the element being erased.
    [:zh_CN] 指向元素被清除前紧跟 [`r] 之后的元素的迭代器。

    [:en] If no such element exists, returns [`a.end()].
    [:zh_CN] 如果不存在这种元素，则返回 [`a.end()]。
[|] [:en] amortized constant
    [:zh_CN] 摊销常量
[-]
[|] [`a.erase(q1, q2)]
[|] [`iterator]
[|] [para:effects]
    [:en] Erases all the elements in the range [=range(q1,q2)].
    [:zh_CN] 清除范围 [=range(q1,q2)] 中的所有元素。

    [para:returns]
    [:en] An iterator pointing to the element pointed to by [`q2] prior to any
    elements being erased.
    [:zh_CN] 指向任何元素被清除前紧跟 [`q2] 之后的元素的迭代器。

    [:en] If no such element exists, [`a.end()] is returned.
    [:zh_CN] 如果不存在这种元素，则返回 [`a.end()]。
[|] [:en] [$\log([`a.size()]) + N] where [$N] has the value [`distance(q1, q2)].
    [:zh_CN] [$\log([`a.size()]) + N]，其中 [$N] 的值为 [`distance(q1, q2)]。
[-]
[%@library clear[![:en]ordered associative containers[:zh_CN]有序关联容器]]
[%@library set[!clear]]
[%@library map[!clear]]
[%@library multiset[!clear]]
[%@library multimap[!clear]]
[|] [`a.clear()]
[|] [`void]
[|] [para:effects]
    [:en] Equivalent to [`a.erase(a.begin(), a.end())].
    [:zh_CN] 等价于 [`a.erase(a.begin(), a.end())]。

    [para:ensures]
    [:en] [`a.empty()] is [`true].
    [:zh_CN] [`a.empty()] 为 [`true]。
[|] [:en] linear in [`a.size()].
    [:zh_CN] 对于 [`a.size()] 为线性。
[-]
[%@library find[![:en]ordered associative containers[:zh_CN]有序关联容器]]
[%@library set[!find]]
[%@library map[!find]]
[%@library multiset[!find]]
[%@library multimap[!find]]
[|] [`b.find(k)]
[|] [:en] [`iterator]; [`const_iterator] for constant [`b].
    [:zh_CN] [`iterator]；对于常量 [`b] 为 [`const_iterator]。
[|] [para:returns]
    [:en] An iterator pointing to an element with the key equivalent to
    [`k], or [`b.end()] if such an element is not found.
    [:zh_CN] 指向其键等价于 [`k] 的元素的迭代器，如果无法找到这种元素则返回
    [`b.end()]。
[|] [:en] logarithmic
    [:zh_CN] 对数
[-]
[|] [`a_tran.find(ke)]
[|] [:en] [`iterator]; [`const_iterator] for constant [`a_tran].
    [:zh_CN] [`iterator]；对于常量 [`a_tran] 为 [`const_iterator]。
[|] [para:returns]
    [:en] An iterator pointing to an element with key [`r] such that
    [`!c(r, ke) && !c(ke, r)], or [`a_tran.end()] if such an element is not
    found.
    [:zh_CN] 指向具有键 [`r] 并使得 [`!c(r, ke) && !c(ke, r)] 的元素的迭代器
    ，如果无法找到这种元素则返回 [`a.end()]。
[|] [:en] logarithmic
    [:zh_CN] 对数
[-]
[%@library count[![:en]ordered associative containers[:zh_CN]有序关联容器]]
[%@library set[!count]]
[%@library map[!count]]
[%@library multiset[!count]]
[%@library multimap[!count]]
[|] [`b.count(k)]
[|] [`size_type]
[|] [para:returns]
    [:en] The number of elements with key equivalent to [`k].
    [:zh_CN] 具有等价于 [`k] 的键的元素数量。
[|] [$\log ([`b.size()]) + [`b.count(k)]]
[-]
[|] [`a_tran.count(ke)]
[|] [`size_type]
[|] [para:returns]
    [:en] The number of elements with key [`r] such that
    [`!c(r, ke) && !c(ke, r)]
    [:zh_CN] 具有键 [`r] 并使得 [`!c(r, ke) && !c(ke, r)] 的元素数量
[|] [$\log ([`a_tran.size()]) + [`a_tran.count(ke)]]
[-]
[%@library contains[![:en]ordered associative containers[:zh_CN]有序关联容器]]
[%@library set[!contains]]
[%@library map[!contains]]
[%@library multiset[!contains]]
[%@library multimap[!contains]]
[|] [`b.contains(k)]
[|] [`bool]
[|] [para:effects]
    [:en] Equivalent to: [`return b.find(k) != b.end();]
	[:zh_CN] 等价于：[`return b.find(k) != b.end();]
[|] [:en] logarithmic
    [:zh_CN] 对数
[-]
[|] [`a_tran.contains(ke)]
[|] [`bool]
[|] [para:effects]
    [:en] Equivalent to: [`return a_tran.find(ke) != a_tran.end();]
	[:zh_CN] 等价于：[`return a_tran.find(ke) != a_tran.end();]
[|] [:en] logarithmic
    [:zh_CN] 对数
[-]
[%@library lower_bound[![:en]ordered associative containers[:zh_CN]有序关联容器]]
[%@library set[!lower_bound]]
[%@library map[!lower_bound]]
[%@library multiset[!lower_bound]]
[%@library multimap[!lower_bound]]
[|] [`b.lower_bound(k)]
[|] [:en] [`iterator]; [`const_iterator] for constant [`b].
    [:zh_CN] [`iterator]；对于常量 [`b] 为 [`const_iterator]。
[|] [para:returns]
    [:en] An iterator pointing to the first element with key not less than [`k],
    or [`b.end()] if such an element is not found.
    [:zh_CN] 指向其键不小于 [`k] 的第一个元素的迭代器，如果无法找到这种元素则
    返回 [`b.end()]
[|] [:en] logarithmic
    [:zh_CN] 对数
[-]
[|] [`a_tran.lower_bound(kl)]
[|] [:en] [`iterator]; [`const_iterator] for constant [`a_tran].
    [:zh_CN] [`iterator]；对于常量 [`a_tran] 为 [`const_iterator]。
[|] [para:returns] [:en] An iterator pointing to the first element with key [`r]
    such that [`!c(r, kl)], or [`a_tran.end()] if such an element is not found.
    [:zh_CN] 指向具有键 [`r] 并使得 [`!c(r, kl)] 的第一个元素的迭代器，如果无法
    找到这种元素则返回 [`a_tran.end()]。
[|] [:en] logarithmic
    [:zh_CN] 对数
[-]
[%@library upper_bound[![:en]ordered associative containers[:zh_CN]有序关联容器]]
[%@library set[!upper_bound]]
[%@library map[!upper_bound]]
[%@library multiset[!upper_bound]]
[%@library multimap[!upper_bound]]
[|] [`b.upper_bound(k)]
[|] [:en] [`iterator]; [`const_iterator] for constant [`b].
    [:zh_CN] [`iterator]；对于常量 [`b] 为 [`const_iterator]。
[|] [para:returns]
    [:en] An iterator pointing to the first element with key greater than [`k],
    or [`b.end()] if such an element is not found.
    [:zh_CN] 指向其键大于 [`k] 的第一个元素的迭代器，如果无法找到这种元素则返回
    [`b.end()]。
[|] [:en] logarithmic
    [:zh_CN] 对数
[-]
[|] [`a_tran.upper_bound(ku)]
[|] [:en] [`iterator]; [`const_iterator] for constant [`a_tran].
    [:zh_CN] [`iterator]；对于常量 [`a_tran] 为 [`const_iterator]。
[|] [para:returns]
    [:en] An iterator pointing to the first element with key [`r] such that
    [`c(ku, r)], or [`a_tran.end()] if such an element is not found.
    [:zh_CN] 指向具有键 [`r] 并使得 [`c(ku, r)] 的第一个元素的迭代器，如果无法
    找到这种元素则返回 [`a_tran.end()]。
[|] [:en] logarithmic
    [:zh_CN] 对数
[-]
[%@library equal_range[![:en]ordered associative containers[:zh_CN]有序关联容器]]
[%@library set[!equal_range]]
[%@library map[!equal_range]]
[%@library multiset[!equal_range]]
[%@library multimap[!equal_range]]
[|] [`b.equal_range(k)]
[|] [:en] [`pair<iterator, iterator>]; [`pair<const_iterator, const_iterator>]
    for constant [`b].
    [:zh_CN] [`pair<iterator, iterator>]；对于常量 [`b] 为
    [`pair<const_iterator, const_iterator>]。
[|] [para:effects]
    [:en] Equivalent to:
    [`return make_pair(b.lower_bound(k), b.upper_bound(k));]
    [:zh_CN] 等价于：[`return make_pair(b.lower_bound(k), b.upper_bound(k));]
[|] [:en] logarithmic
    [:zh_CN] 对数
[-]
[|] [`a_tran.equal_range(ke)]
[|] [:en] [`pair<iterator, iterator>]; [`pair<const_iterator, const_iterator>]
    for constant [`a_tran].
    [:zh_CN] [`pair<iterator, iterator>]；对于常量 [`a_tran] 为
    [`pair<const_iterator, const_iterator>]。
[|] [para:effects]
    [:en] Equivalent to:
    [`return make_pair(a_tran.lower_bound(ke), a_tran.upper_bound(ke));]
    [:zh_CN] 等价于：
    [`return make_pair(a_tran.lower_bound(ke), a_tran.upper_bound(ke));]
[|] [:en] logarithmic
    [:zh_CN] 对数
[-]
[table:end]

[para]
[:en] The [`insert] and [`emplace] members shall not affect the validity of
iterators and references to the container, and the [`erase] members shall
invalidate only iterators and references to the erased elements.
[:zh_CN] [`insert] 和 [`emplace] 成员不能影响容器的迭代器和引用的有效性，而
[`erase] 成员只能无效化指代被清除的元素的迭代器和引用。

[para]
[:en] The [`extract] members invalidate only iterators to the removed element;
pointers and references to the removed element remain valid.
[:zh_CN] 各 [`extract] 成员仅会使被移除的元素的迭代器失效；而指代被移除的元素的
指针和引用则保持有效。

[:en] However, accessing the element through such pointers and references while
the element is owned by a [`node_type] is undefined behavior.
[:zh_CN] 不过，当元素由 [`node_type] 拥有时，通过这样的指针和引用来访问元素是
未定义的行为。

[:en] References and pointers to an element obtained while it is owned by a
[`node_type] are invalidated if the element is successfully inserted.
[:zh_CN] 当元素被 [`node_type] 所拥有时所获得的引用和指针，在元素被成功插入之后
就失效。

[para]
[:en] The fundamental property of iterators of associative containers is that
they iterate through the containers in the non-descending order of keys where
non-descending is defined by the comparison that was used to construct them.
[:zh_CN] 关联容器的迭代器的基本性质是，它们以键的非降序方式对容器进行迭代，其中
的非降序是以用于构造它们的比较对象所定义的。

[:en] For any two dereferenceable iterators [`i] and [`j] such that distance
from [`i] to [`j] is positive, the following condition hold:
[:zh_CN] 对于任意两个可解引用的迭代器 [`i] 和 [`j]，且有从 [`i] 到 [`j] 的距离
为正，则以下条件能够满足：

[codeblock:notation]
value_comp(*j, *i) == false
[codeblock:end]

[para]
[:en] For associative containers with unique keys the stronger condition holds:
[:zh_CN] 对于具有唯一键的关联容器，能够满足更强的条件：

[codeblock:notation]
value_comp(*i, *j) != false.
[codeblock:end]

[para]
[:en] When an associative container is constructed by passing a comparison
object the container shall not store a pointer or reference to the passed
object, even if that object is passed by reference.
[:zh_CN] 当传递一个比较对象来构造关联容器时，容器不能存储所传递的对象的指针或
引用，即使这个对象是以引用方式传递也是如此。

[:en] When an associative container is copied, through either a copy constructor
or an assignment operator, the target container shall then use the comparison
object from the container being copied, as if that comparison object had been
passed to the target container in its constructor.
[:zh_CN] 当关联容器被复制时，无论是通过复制构造函数还是赋值运算符进行，目标容器
应当随即使用被复制容器的比较对象，如同这个比较对象是在目标容器的构造函数中被传递
一样。

[para]
[:en] The member function templates [`find], [`count], [`contains],
[`lower_bound], [`upper_bound], and [`equal_range] shall not participate in
overload resolution unless the [~qualified-id] [`Compare::is_transparent] is
valid and denotes a type ([#temp.deduct]).
[:zh_CN] 成员函数模板 [`find]，[`count]，[`contains]，[`lower_bound]，
[`upper_bound]，和 [`equal_range]，除非[~限定标识] [`Compare::is_transparent]
有效且代表某个类型（[#temp.deduct]），否则它们不能参与重载决议。

[para]
[:en] A deduction guide for an associative container shall not participate in
overload resolution if any of the following are true:
[:zh_CN] 关联容器的推断导引，当以下有任意一项为真时不能参与重载决议：

[list]
[item]
[:en] It has an [`InputIterator] template parameter and a type that does not
qualify as an input iterator is deduced for that parameter.
[:zh_CN] 它具有一个 [`InputIterator] 模板形参，而为该形参所推断的类型无法作为
输入迭代器。

[item]
[:en] It has an [`Allocator] template parameter and a type that does not qualify
as an allocator is deduced for that parameter.
[:zh_CN] 它具有一个 [`Allocator] 模板形参，而为该形参所推断的类型无法作为分配器。

[item]
[:en] It has a [`Compare] template parameter and a type that qualifies as an
allocator is deduced for that parameter.
[:zh_CN] 它具有一个 [`Compare] 模板形参，而为该形参所推断的类型可以作为分配器。
[list:end]

[include associative.reqmts.except]
