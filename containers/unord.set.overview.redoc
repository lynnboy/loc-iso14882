[section#unord.set.overview
    [:en] Overview
    [:zh_CN] 概要
]

[para]
[:en]
[%[`unordered_set][!unique keys]]
[%unordered associative containers[!unique keys]]
An [`unordered_set] is an unordered associative container that supports unique
keys (an [`unordered_set] contains at most one of each key value) and in which
the elements[='] keys are the elements themselves.
[:zh_CN]
[%[`unordered_set][!唯一键]]
[%无序关联容器[!唯一键]]
[`unordered_set] 是一种无序关联容器，支持唯一键（[`unordered_set] 中包含每个键值
的最多一个元素），且其中元素的键就是元素自身。

[:en] The [`unordered_set] class supports forward iterators.
[:zh_CN] [`unordered_set] 类支持前向迭代器。

[para]
[:en] An [`unordered_set] satisfies all of the requirements of a container, of
an unordered associative container, and of an allocator-aware container
([#containers.allocatoraware]).
[:zh_CN] [`unordered_set] 符合容器的所有规定，无序关联容器的所有规定，以及
分配器感知容器的所有规定（[#containers.allocatoraware]）。

[:en] It provides the operations described in the preceding requirements table
for unique keys; that is, an [`unordered_set] supports the [`a_uniq] operations
in that table, not the [`a_eq] operations.
[:zh_CN] 它提供以上规定表格中对于唯一键的操作；就是说，[`unordered_set] 支持
表格中的 [`a_uniq] 的操作，但不支持 [`a_eq] 的操作。

[:en] For an [`unordered_set<Key>] the [`key type] and the value type are both
[`Key].
[:zh_CN] [`unordered_set<Key>] 的 [`key_type] 和其值类型均为 [`Key]。

[:en] The [`iterator] and [`const_iterator] types are both constant iterator
types.
[:zh_CN] 其 [`iterator] 和 [`const_iterator] 类型均为常量迭代器类型。

[:en] It is unspecified whether they are the same type.
[:zh_CN] 它们是否是相同类型是未指明的。

[para]
[:en] This subclause only describes operations on [`unordered_set] that are not
described in one of the requirement tables, or for which there is additional
semantic information.
[:zh_CN] 本子条款中仅说明未被这些表格之一所描述的 [`unordered_set] 的操作，以及
具有额外的语义信息的操作。

[%@library unordered_set]
[codeblock:synopsis [!:mark ImpDef UnSpec SeeBelow] [!:var INSERT_RETURN_TYPE] ]
namespace std {
  template<class Key,
           class Hash = hash<Key>,
           class Pred = equal_to<Key>,
           class Allocator = allocator<Key>>
  class unordered_set {
  public:
    // [:en] types
    // [|:zh_CN] 类型
    using key_type             = Key;
    using value_type           = Key;
    using hasher               = Hash;
    using key_equal            = Pred;
    using allocator_type       = Allocator;
    using pointer              = typename allocator_traits<Allocator>::pointer;
    using const_pointer        = typename allocator_traits<Allocator>::const_pointer;
    using reference            = value_type&;
    using const_reference      = const value_type&;
    using size_type            = [=ImpDef]; // [:en] see [#container.requirements]
                                            // [|:zh_CN] 参见 [#container.requirements]
    using difference_type      = [=ImpDef]; // [:en] see [#container.requirements]
                                            // [|:zh_CN] 参见 [#container.requirements]

    using iterator             = [%@impldef [:en] type of [`unordered_set::iterator] [:zh_CN] [`unordered_set::iterator] 的类型][=ImpDef]; // [:en] see [#container.requirements]
                                              // [|:zh_CN] 参见 [#container.requirements]
    using const_iterator       = [%@impldef [:en] type of [`unordered_set::const_iterator] [:zh_CN] [`unordered_set::const_iterator] 的类型][=ImpDef]; // [:en] see [#container.requirements]
                                              // [|:zh_CN] 参见 [#container.requirements]
    using local_iterator       = [%@impldef [:en] type of [`unordered_set::local_iterator] [:zh_CN] [`unordered_set::local_iterator] 的类型][=ImpDef]; // [:en] see [#container.requirements]
                                              // [|:zh_CN] 参见 [#container.requirements]
    using const_local_iterator = [%@impldef [:en] type of [`unordered_set::const_local_iterator] [:zh_CN] [`unordered_set::const_local_iterator] 的类型][=ImpDef]; // [:en] see [#container.requirements]
                                              // [|:zh_CN] 参见 [#container.requirements]
    using node_type            = [=UnSpec];
    using insert_return_type   = [*INSERT_RETURN_TYPE]<iterator, node_type>;

    // [:en] [#unord.set.cnstr], construct/copy/destroy
    // [|:zh_CN] [#unord.set.cnstr]，构造/复制/销毁
    unordered_set();
    explicit unordered_set(size_type n,
                           const hasher& hf = hasher(),
                           const key_equal& eql = key_equal(),
                           const allocator_type& a = allocator_type());
    template<class InputIterator>
      unordered_set(InputIterator f, InputIterator l,
                    size_type n = [=SeeBelow],
                    const hasher& hf = hasher(),
                    const key_equal& eql = key_equal(),
                    const allocator_type& a = allocator_type());
    unordered_set(const unordered_set&);
    unordered_set(unordered_set&&);
    explicit unordered_set(const Allocator&);
    unordered_set(const unordered_set&, const Allocator&);
    unordered_set(unordered_set&&, const Allocator&);
    unordered_set(initializer_list<value_type> il,
                  size_type n = [=SeeBelow],
                  const hasher& hf = hasher(),
                  const key_equal& eql = key_equal(),
                  const allocator_type& a = allocator_type());
    unordered_set(size_type n, const allocator_type& a)
      : unordered_set(n, hasher(), key_equal(), a) { }
    unordered_set(size_type n, const hasher& hf, const allocator_type& a)
      : unordered_set(n, hf, key_equal(), a) { }
    template<class InputIterator>
      unordered_set(InputIterator f, InputIterator l, size_type n, const allocator_type& a)
        : unordered_set(f, l, n, hasher(), key_equal(), a) { }
    template<class InputIterator>
      unordered_set(InputIterator f, InputIterator l, size_type n, const hasher& hf,
                    const allocator_type& a)
      : unordered_set(f, l, n, hf, key_equal(), a) { }
    unordered_set(initializer_list<value_type> il, size_type n, const allocator_type& a)
      : unordered_set(il, n, hasher(), key_equal(), a) { }
    unordered_set(initializer_list<value_type> il, size_type n, const hasher& hf,
                  const allocator_type& a)
      : unordered_set(il, n, hf, key_equal(), a) { }
    ~unordered_set();
    unordered_set& operator=(const unordered_set&);
    unordered_set& operator=(unordered_set&&)
      noexcept(allocator_traits<Allocator>::is_always_equal::value &&
               is_nothrow_move_assignable_v<Hash> &&
               is_nothrow_move_assignable_v<Pred>);
    unordered_set& operator=(initializer_list<value_type>);
    allocator_type get_allocator() const noexcept;

    // [:en] iterators
    // [|:zh_CN] 迭代器
    iterator       begin() noexcept;
    const_iterator begin() const noexcept;
    iterator       end() noexcept;
    const_iterator end() const noexcept;
    const_iterator cbegin() const noexcept;
    const_iterator cend() const noexcept;

    // [:en] capacity
    // [|:zh_CN] 容量
    [[nodiscard]] bool empty() const noexcept;
    size_type size() const noexcept;
    size_type max_size() const noexcept;

    // [:en] modifiers
    // [|:zh_CN] 改动函数
    template<class... Args> pair<iterator, bool> emplace(Args&&... args);
    template<class... Args> iterator emplace_hint(const_iterator position, Args&&... args);
    pair<iterator, bool> insert(const value_type& obj);
    pair<iterator, bool> insert(value_type&& obj);
    iterator insert(const_iterator hint, const value_type& obj);
    iterator insert(const_iterator hint, value_type&& obj);
    template<class InputIterator> void insert(InputIterator first, InputIterator last);
    void insert(initializer_list<value_type>);

    node_type extract(const_iterator position);
    node_type extract(const key_type& x);
    insert_return_type insert(node_type&& nh);
    iterator           insert(const_iterator hint, node_type&& nh);

    iterator  erase(iterator position);
    iterator  erase(const_iterator position);
    size_type erase(const key_type& k);
    iterator  erase(const_iterator first, const_iterator last);
    void      swap(unordered_set&)
      noexcept(allocator_traits<Allocator>::is_always_equal::value &&
               is_nothrow_swappable_v<Hash> &&
               is_nothrow_swappable_v<Pred>);
    void      clear() noexcept;

    template<class H2, class P2>
      void merge(unordered_set<Key, H2, P2, Allocator>& source);
    template<class H2, class P2>
      void merge(unordered_set<Key, H2, P2, Allocator>&& source);
    template<class H2, class P2>
      void merge(unordered_multiset<Key, H2, P2, Allocator>& source);
    template<class H2, class P2>
      void merge(unordered_multiset<Key, H2, P2, Allocator>&& source);

    // [:en] observers
    // [|:zh_CN] 探察函数
    hasher hash_function() const;
    key_equal key_eq() const;

    // [:en] set operations
    // [|:zh_CN] set 的操作
    iterator       find(const key_type& k);
    const_iterator find(const key_type& k) const;
    size_type      count(const key_type& k) const;
    pair<iterator, iterator>             equal_range(const key_type& k);
    pair<const_iterator, const_iterator> equal_range(const key_type& k) const;

    // [:en] bucket interface
    // [|:zh_CN] 桶的接口
    size_type bucket_count() const noexcept;
    size_type max_bucket_count() const noexcept;
    size_type bucket_size(size_type n) const;
    size_type bucket(const key_type& k) const;
    local_iterator begin(size_type n);
    const_local_iterator begin(size_type n) const;
    local_iterator end(size_type n);
    const_local_iterator end(size_type n) const;
    const_local_iterator cbegin(size_type n) const;
    const_local_iterator cend(size_type n) const;

    // [:en] hash policy
    // [|:zh_CN] 散列策略
    float load_factor() const noexcept;
    float max_load_factor() const noexcept;
    void max_load_factor(float z);
    void rehash(size_type n);
    void reserve(size_type n);
  };

  template<class InputIterator,
           class Hash = hash<[*iter-value-type]<InputIterator>>,
           class Pred = equal_to<[*iter-value-type]<InputIterator>>,
           class Allocator = allocator<[*iter-value-type]<InputIterator>>>
    unordered_set(InputIterator, InputIterator, typename [=SeeBelow]::size_type = [=SeeBelow],
                  Hash = Hash(), Pred = Pred(), Allocator = Allocator())
      -> unordered_set<[*iter-value-type]<InputIterator>,
                       Hash, Pred, Allocator>;

  template<class T, class Hash = hash<T>,
           class Pred = equal_to<T>, class Allocator = allocator<T>>
    unordered_set(initializer_list<T>, typename [=SeeBelow]::size_type = [=SeeBelow],
                  Hash = Hash(), Pred = Pred(), Allocator = Allocator())
      -> unordered_set<T, Hash, Pred, Allocator>;

  template<class InputIterator, class Allocator>
    unordered_set(InputIterator, InputIterator, typename [=SeeBelow]::size_type, Allocator)
      -> unordered_set<[*iter-value-type]<InputIterator>,
                       hash<[*iter-value-type]<InputIterator>>,
                       equal_to<[*iter-value-type]<InputIterator>>,
                       Allocator>;

  template<class InputIterator, class Hash, class Allocator>
    unordered_set(InputIterator, InputIterator, typename [=SeeBelow]::size_type,
                  Hash, Allocator)
      -> unordered_set<[*iter-value-type]<InputIterator>, Hash,
                       equal_to<[*iter-value-type]<InputIterator>>,
                       Allocator>;

  template<class T, class Allocator>
    unordered_set(initializer_list<T>, typename [=SeeBelow]::size_type, Allocator)
      -> unordered_set<T, hash<T>, equal_to<T>, Allocator>;

  template<class T, class Hash, class Allocator>
    unordered_set(initializer_list<T>, typename [=SeeBelow]::size_type, Hash, Allocator)
      -> unordered_set<T, Hash, equal_to<T>, Allocator>;

  // [:en] swap
  // [|:zh_CN] 交换
  template<class Key, class Hash, class Pred, class Alloc>
    void swap(unordered_set<Key, Hash, Pred, Alloc>& x,
              unordered_set<Key, Hash, Pred, Alloc>& y)
      noexcept(noexcept(x.swap(y)));
}
[codeblock:end]

[para]
[:en] A [`size_type] parameter type in an [`unordered_set] deduction guide
refers to the [`size_type] member type of the type deduced by the deduction
guide.
[:zh_CN] [`unordered_set] 的推断指导中的 [`size_type] 形参类型，代表由该推断指导
所推断出的类型的 [`size_type] 成员类型。
