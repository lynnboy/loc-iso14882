[section#map.overview
    [:en] Overview
    [:zh_CN] 概要
]

[%@lib map]
[para]
[:en] A [`map] is an associative container that supports unique keys (i.e.,
contains at most one of each key value) and provides for fast retrieval of
values of another type [`T] based on the keys.
[:zh_CN] [`map] 是一种关联容器，支持唯一键（即包含每个键值的最多一个元素），
并提供基于键的对另一个类型 [`T] 的值的快速检索。

[:en] The [`map] class supports bidirectional iterators.
[:zh_CN] [`map] 类支持双向迭代器。

[para]
[:en] A [`map] meets all of the requirements of a container ([#container.reqmts]),
of a reversible container ([#container.rev.reqmts]), of an allocator-aware
container ([#container.alloc.reqmts]), and of an associative container ([#associative.reqmts]).
[:zh_CN] [`map] 满足容器（[#container.reqmts]），可反向容器（[#container.rev.reqmts]），
分配器感知容器（[#container.alloc.reqmts]），以及关联容器（[#associative.reqmts]）
的所有规定。

[:en] A [`map] also provides most operations described in [#associative.reqmts]
for unique keys.
[:zh_CN] [`map] 还提供 [#associative.reqmts] 所描述的大多数唯一键的操作。

[:en] This means that a [`map] supports the [`a_uniq] operations in [#associative.reqmts]
but not the [`a_eq] operations.
[:zh_CN] 这意味着 [`map] 支持 [#associative.reqmts] 中的 [`a_uniq] 的操作，但不
支持 [`a_eq] 的操作。

[:en] For a [`map<Key,T>] the [`key_type] is [`Key] and the [`value_type] is
[`pair<const Key,T>].
[:zh_CN] [`map<Key,T>] 的 [`key_type] 为 [`Key]，而其 [`value_type] 为
[`pair<const Key,T>]。

[:en] Descriptions are provided here only for operations on [`map] that are not
described in one of those tables or for operations where there is additional
semantic information.
[:zh_CN] 此处给出的说明仅包括未被这些表格之一所描述的 [`map] 的操作，以及具有
额外的语义信息的操作。

[%@lib@member comp[!map::value_compare]]
[%@lib@member operator()[!map::value_compare]]
[codeblock:synopsis]
namespace std {
  template<class Key, class T, class Compare = less<Key>,
           class Allocator = allocator<pair<const Key, T>>>
  class map {
  public:
    // [:en] types \
    [:zh_CN] 类型
    using key_type               = Key;
    using mapped_type            = T;
    using value_type             = pair<const Key, T>;
    using key_compare            = Compare;
    using allocator_type         = Allocator;
    using pointer                = typename allocator_traits<Allocator>::pointer;
    using const_pointer          = typename allocator_traits<Allocator>::const_pointer;
    using reference              = value_type&;
    using const_reference        = const value_type&;
    using size_type              = [[redoc("[?impdefx"
          " [:en] type of [`map::size_type]"
        "[:zh_CN] [`map::size_type] 的类型]")]]; // [:en] see [#container.requirements] \
                                                 [:zh_CN] 参见 [#container.requirements]
    using difference_type        = [[redoc("[?impdefx"
          " [:en] type of [`map::difference_type]"
        "[:zh_CN] [`map::difference_type] 的类型]")]]; // [:en] see [#container.requirements] \
                                                       [:zh_CN] 参见 [#container.requirements]
    using iterator               = [[redoc("[?impdefx"
          " [:en] type of [`map::iterator]"
        "[:zh_CN] [`map::iterator] 的类型]")]]; // [:en] see [#container.requirements] \
                                                [:zh_CN] 参见 [#container.requirements]
    using const_iterator         = [[redoc("[?impdefx"
          " [:en] type of [`map::const_iterator]"
        "[:zh_CN] [`map::const_iterator] 的类型]")]]; // [:en] see [#container.requirements] \
                                                      [:zh_CN] 参见 [#container.requirements]
    using reverse_iterator       = std::reverse_iterator<iterator>;
    using const_reverse_iterator = std::reverse_iterator<const_iterator>;
    using node_type              = [[redoc("[=unspec]")]];
    using insert_return_type     = [[redoc("^>")]]insert-return-type<iterator, node_type>;

    class value_compare {
      friend class map;
    protected:
      Compare comp;
      value_compare(Compare c) : comp(c) {}

    public:
      bool operator()(const value_type& x, const value_type& y) const {
        return comp(x.first, y.first);
      }
    };

    // [:en] [#map.cons], construct/copy/destroy \
    [:zh_CN] [#map.cons]，构造/复制/销毁
    map() : map(Compare()) { }
    explicit map(const Compare& comp, const Allocator& = Allocator());
    template<class InputIterator>
      map(InputIterator first, InputIterator last,
          const Compare& comp = Compare(), const Allocator& = Allocator());
    template<[[redoc("*:c>")]]container-compatible-range<value_type> R>
      map(from_range_t, R&& rg, const Compare& comp = Compare(), const Allocator& = Allocator());
    map(const map& x);
    map(map&& x);
    explicit map(const Allocator&);
    map(const map&, const type_identity_t<Allocator>&);
    map(map&&, const type_identity_t<Allocator>&);
    map(initializer_list<value_type>,
      const Compare& = Compare(),
      const Allocator& = Allocator());
    template<class InputIterator>
      map(InputIterator first, InputIterator last, const Allocator& a)
        : map(first, last, Compare(), a) { }
    template<[[redoc("*:c>")]]container-compatible-range<value_type> R>
      map(from_range_t, R&& rg, const Allocator& a)
        : map(from_range, std::forward<R>(rg), Compare(), a) { }
    map(initializer_list<value_type> il, const Allocator& a)
      : map(il, Compare(), a) { }
    ~map();
    map& operator=(const map& x);
    map& operator=(map&& x)
      noexcept(allocator_traits<Allocator>::is_always_equal::value &&
               is_nothrow_move_assignable_v<Compare>);
    map& operator=(initializer_list<value_type>);
    allocator_type get_allocator() const noexcept;

    // [:en] iterators \
    [:zh_CN] 迭代器
    iterator               begin() noexcept;
    const_iterator         begin() const noexcept;
    iterator               end() noexcept;
    const_iterator         end() const noexcept;

    reverse_iterator       rbegin() noexcept;
    const_reverse_iterator rbegin() const noexcept;
    reverse_iterator       rend() noexcept;
    const_reverse_iterator rend() const noexcept;

    const_iterator         cbegin() const noexcept;
    const_iterator         cend() const noexcept;
    const_reverse_iterator crbegin() const noexcept;
    const_reverse_iterator crend() const noexcept;

    // [:en] capacity \
    [:zh_CN] 容量
    bool empty() const noexcept;
    size_type size() const noexcept;
    size_type max_size() const noexcept;

    // [:en] [#map.access], element access \
    [:zh_CN] [#map.access]，元素访问
    mapped_type& operator[](const key_type& x);
    mapped_type& operator[](key_type&& x);
    template<class K> mapped_type& operator[](K&& x);
    mapped_type&       at(const key_type& x);
    const mapped_type& at(const key_type& x) const;
    template<class K> mapped_type&       at(const K& x);
    template<class K> const mapped_type& at(const K& x) const;

    // [:en] [#map.modifiers], modifiers \
    [:zh_CN] [#map.modifiers]，改动函数
    template<class... Args> pair<iterator, bool> emplace(Args&&... args);
    template<class... Args> iterator emplace_hint(const_iterator position, Args&&... args);
    pair<iterator, bool> insert(const value_type& x);
    pair<iterator, bool> insert(value_type&& x);
    template<class P> pair<iterator, bool> insert(P&& x);
    iterator insert(const_iterator position, const value_type& x);
    iterator insert(const_iterator position, value_type&& x);
    template<class P>
      iterator insert(const_iterator position, P&&);
    template<class InputIterator>
      void insert(InputIterator first, InputIterator last);
    template<[[redoc("*:c>")]]container-compatible-range<value_type> R>
      void insert_range(R&& rg);
    void insert(initializer_list<value_type>);

    node_type extract(const_iterator position);
    node_type extract(const key_type& x);
    template<class K> node_type extract(K&& x);
    insert_return_type insert(node_type&& nh);
    iterator           insert(const_iterator hint, node_type&& nh);

    template<class... Args>
      pair<iterator, bool> try_emplace(const key_type& k, Args&&... args);
    template<class... Args>
      pair<iterator, bool> try_emplace(key_type&& k, Args&&... args);
    template<class K, class... Args>
      pair<iterator, bool> try_emplace(K&& k, Args&&... args);
    template<class... Args>
      iterator try_emplace(const_iterator hint, const key_type& k, Args&&... args);
    template<class... Args>
      iterator try_emplace(const_iterator hint, key_type&& k, Args&&... args);
    template<class K, class... Args>
      iterator try_emplace(const_iterator hint, K&& k, Args&&... args);
    template<class M>
      pair<iterator, bool> insert_or_assign(const key_type& k, M&& obj);
    template<class M>
      pair<iterator, bool> insert_or_assign(key_type&& k, M&& obj);
    template<class K, class M>
      pair<iterator, bool> insert_or_assign(K&& k, M&& obj);
    template<class M>
      iterator insert_or_assign(const_iterator hint, const key_type& k, M&& obj);
    template<class M>
      iterator insert_or_assign(const_iterator hint, key_type&& k, M&& obj);
    template<class K, class M>
      iterator insert_or_assign(const_iterator hint, K&& k, M&& obj);

    iterator  erase(iterator position);
    iterator  erase(const_iterator position);
    size_type erase(const key_type& x);
    template<class K> size_type erase(K&& x);
    iterator  erase(const_iterator first, const_iterator last);
    void      swap(map&)
      noexcept(allocator_traits<Allocator>::is_always_equal::value &&
               is_nothrow_swappable_v<Compare>);
    void      clear() noexcept;

    template<class C2>
      void merge(map<Key, T, C2, Allocator>& source);
    template<class C2>
      void merge(map<Key, T, C2, Allocator>&& source);
    template<class C2>
      void merge(multimap<Key, T, C2, Allocator>& source);
    template<class C2>
      void merge(multimap<Key, T, C2, Allocator>&& source);

    // [:en] observers \
    [:zh_CN] 探察函数
    key_compare key_comp() const;
    value_compare value_comp() const;

    // [:en] map operations \
    [:zh_CN] map 的操作
    iterator       find(const key_type& x);
    const_iterator find(const key_type& x) const;
    template<class K> iterator       find(const K& x);
    template<class K> const_iterator find(const K& x) const;

    size_type      count(const key_type& x) const;
    template<class K> size_type count(const K& x) const;

    bool           contains(const key_type& x) const;
    template<class K> bool contains(const K& x) const;

    iterator       lower_bound(const key_type& x);
    const_iterator lower_bound(const key_type& x) const;
    template<class K> iterator       lower_bound(const K& x);
    template<class K> const_iterator lower_bound(const K& x) const;

    iterator       upper_bound(const key_type& x);
    const_iterator upper_bound(const key_type& x) const;
    template<class K> iterator       upper_bound(const K& x);
    template<class K> const_iterator upper_bound(const K& x) const;

    pair<iterator, iterator>               equal_range(const key_type& x);
    pair<const_iterator, const_iterator>   equal_range(const key_type& x) const;
    template<class K>
      pair<iterator, iterator>             equal_range(const K& x);
    template<class K>
      pair<const_iterator, const_iterator> equal_range(const K& x) const;
  };

  template<class InputIterator, class Compare = less<[[redoc("^>")]]iter-key-type<InputIterator>>,
           class Allocator = allocator<[[redoc("^>")]]iter-to-alloc-type<InputIterator>>>
    map(InputIterator, InputIterator, Compare = Compare(), Allocator = Allocator())
      -> map<[[redoc("^>")]]iter-key-type<InputIterator>, [[redoc("^>")]]iter-mapped-type<InputIterator>, Compare, Allocator>;

  template<ranges::[[redoc("^:c>")]]input_range R, class Compare = less<[[redoc("*>")]]range-key-type<R>,
           class Allocator = allocator<[[redoc("*>")]]range-to-alloc-type<R>>>
    map(from_range_t, R&&, Compare = Compare(), Allocator = Allocator())
      -> map<[[redoc("*>")]]range-key-type<R>, [[redoc("*>")]]range-mapped-type<R>, Compare, Allocator>;

  template<class Key, class T, class Compare = less<Key>,
           class Allocator = allocator<pair<const Key, T>>>
    map(initializer_list<pair<Key, T>>, Compare = Compare(), Allocator = Allocator())
      -> map<Key, T, Compare, Allocator>;

  template<class InputIterator, class Allocator>
    map(InputIterator, InputIterator, Allocator)
      -> map<[[redoc("^>")]]iter-key-type<InputIterator>, [[redoc("^>")]]iter-mapped-type<InputIterator>,
             less<[[redoc("^>")]]iter-key-type<InputIterator>>, Allocator>;

  template<ranges::[[redoc("^:c>")]]input_range R, class Allocator>
    map(from_range_t, R&&, Allocator)
      -> map<[[redoc("*>")]]range-key-type<R>, [[redoc("*>")]]range-mapped-type<R>, less<[[redoc("*>")]]range-key-type<R>>, Allocator>;

  template<class Key, class T, class Allocator>
    map(initializer_list<pair<Key, T>>, Allocator) -> map<Key, T, less<Key>, Allocator>;
}
[codeblock:end]
[%@lib@member map[!operator==]]
[%@lib@member map[!operator<]]
