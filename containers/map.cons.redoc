[section#map.cons
    [:en] Constructors, copy, and assignment
    [:zh_CN] 构造函数、复制和赋值
]

[%@lib@ctor map]
[codeblock:declaration]
constexpr explicit map(const Compare& comp, const Allocator& = Allocator());
[codeblock:end]

[div:description]
[para:effects]
[:en] Constructs an empty [`map] using the specified comparison object and
allocator.
[:zh_CN] 构造一个空的 [`map]，并使用指定的比较对象和分配器。

[para:complexity]
[:en] Constant.
[:zh_CN] 常量。
[div:end]

[%@lib@ctor map]
[codeblock:declaration]
template<class InputIterator>
  constexpr map(InputIterator first, InputIterator last,
                const Compare& comp = Compare(), const Allocator& = Allocator());
[codeblock:end]

[div:description]
[para:effects]
[:en] Constructs an empty [`map] using the specified comparison object and
allocator, and inserts elements from the range [=range(first,last)].
[:zh_CN] 构造一个空的 [`map]，并使用指定的比较对象和分配器，并将范围
[=range(first,last)] 中的元素插入其中。

[para:complexity]
[:en] Linear in [$N] if the range [=range(first,last)] is already sorted with
respect to [`comp] and otherwise [$N \log N], where [$N] is [`last - first].
[:zh_CN] 如果范围 [=range(first,last)] 已经根据 [`comp] 有序，则对于 [$N] 为线性，
否则为 [$N \log N]，其中 [$N] 为 [`last - first]。
[div:end]

[%@lib@ctor map]
[codeblock:declaration]
template<[[redoc("*:c>")]]container-compatible-range<value_type> R>
  constexpr map(from_range_t, R&& rg, const Compare& comp = Compare(),
                const Allocator& = Allocator());
[codeblock:end]

[div:description]
[para:effects]
[:en] Constructs an empty [`map] using the specified comparison object and
allocator, and inserts elements from the range [`rg].
[:zh_CN] 构造一个空的 [`map]，并使用指定的比较对象和分配器，并将范围 [`rg] 中的
元素插入其中。

[para:complexity]
[:en] Linear in [$N] if [`rg] is already sorted with respect to [`comp] and
otherwise [$N \log N], where [$N] is [`ranges::distance(rg)].
[:zh_CN] 如果 [`rg] 已经根据 [`comp] 有序，则对于 [$N] 为线性，否则为 [$N \log N]，
其中 [$N] 为 [`ranges::distance(rg)]。
[div:end]
