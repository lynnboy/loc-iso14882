[section#container.requirements.general
    [:en] General container requirements
    [:zh_CN] 一般容器规定
]

[para]
[:en]
Containers are objects that store other objects.
[:zh_CN]
容器是存储其他对象的对象。

[:en]
They control allocation and deallocation of these objects through constructors,
destructors, insert and erase operations.
[:zh_CN]
它们通过构造函数，析构函数，插入和清除操作来控制这些对象的分配和回收。

[para]
[:en]
All of the complexity requirements in this Clause are stated solely in terms of
the number of operations on the contained objects.
[:zh_CN]
本章中的所有复杂度规定，都是单纯以对所包含对象操作的次数计量的。

[begin:example]
[:en]
The copy constructor of type [`vector<vector<int>>] has linear complexity, even
though the complexity of copying each contained [`vector<int>] is itself linear.
[:zh_CN]
类型 [`vector<vector<int>>] 的复制构造函数具有线性复杂度，虽然其所包含的每个
[`vector<int>] 的复制本身的复杂度也是线性的。
[end:example]

[para]
[:en]
For the components affected by this subclause that declare an [`allocator_type],
objects stored in these components shall be constructed using the function
[`allocator_traits<allocator_type>::rebind_traits<U>::construct] and destroyed
using the function
[`allocator_traits<allocator_type>::rebind_traits<U>::destroy]
([#allocator.traits.members]), where [`U] is either
[`allocator_type::value_type] or an internal type used by the container.
[:zh_CN]
对于受本子条款所影响的，声明了一个 [`allocator_type] 的组件，应当使用函数 
[`allocator_traits<allocator_type>::rebind_traits<U>::construct]
来构造这些组件中所存储的对象，并使用函数
[`allocator_traits<allocator_type>::rebind_traits<U>::destroy] 来进行销毁
（[#allocator.traits.members]），其中的 [`U] 为 [`allocator_type::value_type]，
或者该容器所使用的某个内部类型。

[:en]
These functions are called only for the container[=']s element type, not for
internal types used by the container.
[:zh_CN]
仅为该容器的元素类型调用这些函数，而不会为容器中使用的内部类型而调用。

[begin:note]
[:en]
This means, for example, that a node-based container would need to construct
nodes containing aligned buffers and call [`construct] to place the element into
the buffer.
[:zh_CN]
这意味着，例如基于节点的容器可能需要构造包含对齐缓冲区的节点，然后调用
[`construct] 来将元素放置到缓冲区中。
[end:note]

[para]
[:en]
In Tables [#tab:container.req], [#tab:container.rev.req], and
[#tab:container.opt],
[:zh_CN]
在表 [#tab:container.req]，[#tab:container.rev.req]，和 [#tab:container.opt] 中，
[list]
[item]
[:en] [`X] denotes a container class containing objects of type [`T],
[:zh_CN] [`X] 代表包含 [`T] 类型的对象的容器类，
[item]
[:en] [`a] and [`b] denote values of type [`X],
[:zh_CN] [`a] 和 [`b] 代表 [`X] 类型的值，
[item]
[:en] [`i] and [`j] denote values of type (possibly const) [`X::iterator],
[:zh_CN] [`i] 和[`j] 代表（可能为 const 的）[`X::iterator] 类型的值，
[item]
[:en] [`u] denotes an identifier,
[:zh_CN] [`u] 代表一个标识符，
[item]
[:en] [`r] denotes a non-const value of type [`X], and
[:zh_CN] [`r] 代表类型 [`X] 的非 const 值，而
[item]
[:en] [`rv] denotes a non-const rvalue of type [`X].
[:zh_CN] [`rv] 代表类型 [`X] 的非 const 的右值。
[list:end]

[table:grid#container.req
    [:en] Container requirements
    [:zh_CN] 容器规定

    [|  [:en] Expression
        [:zh_CN] 表达式 ]
    [|  [:en] Return type
        [:zh_CN] 返回类型 ]
    [|  [:en] Operational semantics
        [:zh_CN] 操作性语义 ]
    [|  [:en] Assertion/note [br] pre-/post-condition
        [:zh_CN] 断言/注解 [br] 前/后条件 ]
    [|  [:en] Complexity
        [:zh_CN] 复杂度 ]
]

[|] [`X::value_type]
[|] [`T]
[|]
[|] [para:expects]
    [:en] [`T] is [^:oc Erasable] from [`X] (see
    [#container.requirements.general], below)
    [:zh_CN] [`T] 为从 [`X] 中 [^:oc Erasable]（参见
    [#container.requirements.general]，下文）
[|] [:en] compile time
    [:zh_CN] 编译期
[-]
[|] [`X::reference]
[|] [`T&]
[|]
[|]
[|] [:en] compile time
    [:zh_CN] 编译期
[-]
[|] [`X::const_reference]
[|] [`const T&]
[|]
[|]
[|] [:en] compile time
    [:zh_CN] 编译期
[-]
[|] [`X::iterator]
[|] [:en] iterator type whose value type is [`T]
    [:zh_CN] 值类型为 [`T] 的迭代器类型
[|]
[|] [:en] any iterator category that meets the forward iterator requirements.
    [:zh_CN] 满足前向迭代器规定的任何迭代器类别。

    [:en] convertible to [`X::const_iterator].
    [:zh_CN] 可以转换为 [`X::const_iterator]。
[|] [:en] compile time
    [:zh_CN] 编译期
[-]
[|] [`X::const_iterator]
[|] [:en] constant iterator type whose value type is [`T]
    [:zh_CN] 值类型为 [`T] 的常量迭代器类型
[|]
[|] [:en] any iterator category that meets the forward iterator requirements.
    [:zh_CN] 满足前向迭代器规定的任何迭代器类别。
[|] [:en] compile time
    [:zh_CN] 编译期
[-]
[|] [`X::difference_type]
[|] [:en] signed integer type
    [:zh_CN] 有符号整数类型
[|]
[|] [:en] is identical to the difference type of [`X::iterator] and
    [`X::const_iterator]
    [:zh_CN] 与 [`X::iterator] 和 [`X::const_iterator] 的差异类型相同
[|] [:en] compile time
    [:zh_CN] 编译期
[-]
[|] [`X::size_type]
[|] [:en] unsigned integer type
    [:zh_CN] 无符号整数类型
[|]
[|] [:en] [`size_type] can represent any non-negative value of [`difference_type]
    [:zh_CN] [`size_type] 可以代表 [`difference_type] 的非负值
[|] [:en] compile time
    [:zh_CN] 编译期
[-]
[|] [`X u;]
[|]
[|]
[|] [para:ensures] [`u.empty()]
[|] [:en] constant
    [:zh_CN] 常量
[-]
[|] [`X()]
[|]
[|]
[|] [para:ensures] [`X().empty()]
[|] [:en] constant
    [:zh_CN] 常量
[-]
[|] [`X(a)]
[|]
[|]
[|] [para:expects]
    [:en] [`T] is [^:oc CopyInsertable] into [`X] (see below).
    [:zh_CN] [`T] 为向 [`X] 中 [^:oc CopyInsertable]（见下文）。

    [para:ensures]
    [:en] [`a == X(a)].
    [:zh_CN] [`a == X(a)]。
[|] [:en] linear
    [:zh_CN] 线性
[-]
[|] [`X u(a);] [br] [`X u = a;]
[|]
[|]
[|] [para:expects]
    [:en] [`T] is [^:oc CopyInsertable] into [`X] (see below).
    [:zh_CN] [`T] 为向 [`X] 中 [^:oc CopyInsertable]（见下文）。

    [para:ensures] [`u == a]
[|] [:en] linear
    [:zh_CN] 线性
[-]
[|] [`X u(rv);] [br] [`X u = rv;]
[|]
[|]
[|] [para:ensures]
    [:en] [`u] is equal to the value that [`rv] had before this construction
    [:zh_CN] [`u] 等于 [`rv] 在这个构造之前的值
[|] [:en] (Note B)
    [:zh_CN] （注 B）
[-]
[|] [`a = rv]
[|] [`X&]
[|] [:en] All existing elements of [`a] are either move assigned to or destroyed
    [:zh_CN] [`a] 的所有已存在元素要么被移动赋值要么被销毁
[|] [para:ensures]
    [:en] If [`a] and [`rv] do not refer to the same object, [`a] is equal to
    the value that [`rv] had before this assignment.
    [:zh_CN] 若 [`a] 和 [`rv] 并不指代相同对象，则 [`a] 等于 [`rv] 在这个赋值
    之前所具有的值。
[|] [:en] linear
    [:zh_CN] 线性
[-]
[|] [`a.~X()]
[|] [`:key void]
[|]
[|] [para:effects]
    [:en] destroys every element of [`a]; any memory obtained is deallocated.
    [:zh_CN] 销毁 [`a] 的每个元素；回收曾获得的所有内存。
[|] [:en] linear
    [:zh_CN] 线性
[-]
[|] [`a.begin()]
[|] [:en] [`iterator]; [`const_iterator] for constant [`a]
    [:zh_CN] [`iterator]；对于常量 [`a] 为 [`const_iterator]
[|]
[|]
[|] [:en] constant
    [:zh_CN] 常量
[-]
[|] [`a.end()]
[|] [:en] [`iterator]; [`const_iterator] for constant [`a]
    [:zh_CN] [`iterator]；对于常量 [`a] 为 [`const_iterator]
[|]
[|]
[|] [:en] constant
    [:zh_CN] 常量
[-]
[|] [`a.cbegin()]
[|] [`const_iterator]
[|] [`const_cast<X const&>(a).begin();]
[|]
[|] [:en] constant
    [:zh_CN] 常量
[-]
[|] [`a.cend()]
[|] [`const_iterator]
[|] [`const_cast<X const&>(a).end();]
[|]
[|] [:en] constant
    [:zh_CN] 常量
[-]
[|] [`i <=> j]
[|] [`strong_ordering]
[|]
[|] [para:constraints]
    [:en] [`X::iterator] meets the random access iterator requirements.
    [:zh_CN] [`X::iterator] 满足随机访问迭代器的规定。
[|] [:en] constant
    [:zh_CN] 常量
[-]
[|] [`a == b]
[|] [:en] convertible to [`bool]
    [:zh_CN] 可以转换为 [`bool]
[|] [:en] [`==] is an equivalence relation.
    [:zh_CN] [`==] 是等价关系。

    [:] [`equal(a.begin(), a.end(), b.begin(), b.end())]
[|] [para:expects]
    [:en] [`T] meets the [^:oc EqualityComparable] requirements
    [:zh_CN] [`T] 满足 [^:oc EqualityComparable] 的规定
[|] [:en] Constant if [`a.size() != b.size()], linear otherwise
    [:zh_CN] 如果 [`a.size() != b.size()] 则为常量，否则为线性
[-]
[|] [`a != b]
[|] [:en] convertible to [`bool]
    [:zh_CN] 可以转换为 [`bool]
[|] [:en] Equivalent to [`!(a == b)]
    [:zh_CN] 等价于 [`!(a == b)]
[|]
[|] [:en] linear
    [:zh_CN] 线性
[-]
[|] [`a.swap(b)]
[|] [`:key void]
[|]
[|] [para:effects]
    [:en] exchanges the contents of [`a] and [`b]
    [:zh_CN] 互换 [`a] 和 [`b] 的内容
[|] [:en] (Note A)
    [:zh_CN] （注 A）
[-]
[|] [`swap(a, b)]
[|] [`:key void]
[|] [:en] Equivalent to [`a.swap(b)]
    [:zh_CN] 等价于 [`a.swap(b)]
[|]
[|] [:en] (Note A)
    [:zh_CN] （注 A）
[-]
[|] [`r = a]
[|] [`X&]
[|]
[|] [para:ensures]
    [:en] [`r == a].
    [:zh_CN] [`r == a]。
[|] [:en] linear
    [:zh_CN] 线性
[-]
[|] [`a.size()]
[|] [`size_type]
[|] [`distance(a.begin(), a.end())]
[|]
[|] [:en] constant
    [:zh_CN] 常量
[-]
[|] [`a.max_size()]
[|] [`size_type]
[|] [:en] [`distance(begin(), end())] for the largest possible container
    [:zh_CN] 对于最大可能的容器的 [`distance(begin(), end())]
[|]
[|] [:en] constant
    [:zh_CN] 常量
[-]
[|] [`a.empty()]
[|] [:en] convertible to [`bool]
    [:zh_CN] 可以转换为 [`bool]
[|] [`a.begin() == a.end()]
[|]
[|] [:en] constant
    [:zh_CN] 常量
[-]
[table:end]

[:en]
Those entries marked [=lq](Note A)[=rq] or [=lq](Note B)[=rq] have linear
complexity for [`array] and have constant complexity for all other standard
containers.
[:zh_CN]
被标以“（注 A）”或“（注 B）”的条目，对于 [`array] 具有线性复杂度，而对于所有其他
标准容器具有常量复杂度。

[begin:note]
[:en]
The algorithm [`equal] is defined in [#algorithms].
[:zh_CN]
算法 [`equal] 在 [#algorithms] 中定义。
[end:note]

[para]
[:en]
The member function [`size()] returns the number of elements in the container.
[:zh_CN]
成员函数 [`size()] 返回容器中元素的数量。

[:en]
The number of elements is defined by the rules of constructors, inserts, and
erases.
[:zh_CN]
元素的数量是由构造函数、插入和清除的规则来定义的。

[para]
[:en]
[`begin()] returns an iterator referring to the first element in the container.
[:zh_CN]
[`begin()] 返回指代容器的第一个元素的迭代器。

[:en]
[`end()] returns an iterator which is the past-the-end value for the container.
[:zh_CN]
[`end()] 返回具有容器的越过末尾值的迭代器。

[:en]
If the container is empty, then [`begin() == end()].
[:zh_CN]
如果容器为空，则 [`begin() == end()]。

[para]
[:en]
In the expressions
[:zh_CN]
下列表达式

[codeblock]
i == j
i != j
i < j
i <= j
i >= j
i > j
i <=> j
i - j
[codeblock:end]

[:en@~]
where [`i] and [`j] denote objects of a container[=']s [`iterator] type, either
or both may be replaced by an object of the container[=']s [`const_iterator]
type referring to the same element with no change in semantics.
[:zh_CN@~]
其中 [`i] 和 [`j] 代表某容器的 [`iterator] 类型的对象，其中之一或二者可以替换为
该容器的指代相同元素的 [`const_iterator] 类型的对象而不会改变其语义。

[para]
[:en]
Unless otherwise specified, all containers defined in this Clause obtain memory
using an allocator (see [#allocator.requirements]).
[:zh_CN]
除非另有规定，本章中定义的所有容器均使用一个分配器来回的内存（参见
[#allocator.requirements]）。

[begin:note]
[:en]
In particular, containers and iterators do not store references to allocated
elements other than through the allocator[=']s pointer type, i.e., as objects of
type [`P] or [`pointer_traits<P>::template rebind<[=unspec]>], where [`P] is
[`allocator_traits<allocator_type>::pointer].
[:zh_CN]
尤其是，容器和迭代器中存储指代所分配的元素的引用，仅会以分配器的指针类型的形式
达成，亦即存储为 [`P] 或 [`pointer_traits<P>::template rebind<[=unspec]>] 类型的
对象，其中 [`P] 为 [`allocator_traits<allocator_type>::pointer]。
[end:note]

[:en]
Copy constructors for these container types obtain an allocator by calling
[`allocator_traits<allocator_type>::select_on_container_copy_construction] on
the allocator belonging to the container being copied.
[:zh_CN]
这些容器类型的复制构造函数，都通过对属于所要复制的容器的分配器调用
[`allocator_traits<allocator_type>::select_on_container_copy_construction] 来
获得分配器。

[:en]
Move constructors obtain an allocator by move construction from the allocator
belonging to the container being moved.
[:zh_CN]
移动构造函数通过从属于所要移动的容器的分配器进行移动构造而获得。

[:en]
Such move construction of the allocator shall not exit via an exception.
[:zh_CN]
这种对分配器进行的移动构造不能以异常而退出。

[:en]
All other constructors for these container types take a [`const allocator_type&]
argument.
[:zh_CN]
这些容器类型的所有其他构造函数均接受一个 [`const allocator_type&] 实参。

[begin:note]
[:en]
If an invocation of a constructor uses the default value of an optional
allocator argument, then the allocator type must support value initialization.
[:zh_CN]
如果某个构造函数的调用，使用了可选分配器实参的默认值，则其分配器类型必须支持
值初始化。
[end:note]

[:en]
A copy of this allocator is used for any memory allocation and element
construction performed, by these constructors and by all member functions,
during the lifetime of each container object or until the allocator is replaced.
[:zh_CN]
这个分配器的一个副本，被用于这些构造函数和所有其他成员函数，在各个容器对象的
生存期之内或其分配器被替换之前，进行任何内存分配和元素的构造。

[:en]
The allocator may be replaced only via assignment or [`swap()].
[:zh_CN]
分配器只能通过赋值或 [`swap()] 被替换。

[:en]
Allocator replacement is performed by copy assignment, move assignment, or
swapping of the allocator only if
[:zh_CN]
仅当
[list]
[item]
[:en@~]
[`allocator_traits<allocator_type>::propagate_on_container_copy_assignment::value],
[:zh_CN@~]
[`allocator_traits<allocator_type>::propagate_on_container_copy_assignment::value]，
[item]
[:en@~]
[`allocator_traits<allocator_type>::propagate_on_container_move_assignment::value],
or
[:zh_CN@~]
[`allocator_traits<allocator_type>::propagate_on_container_move_assignment::value]，
或
[item]
[:@~] [`allocator_traits<allocator_type>::propagate_on_container_swap::value]
[list:end]
[:en@~]
is [`true] within the implementation of the corresponding container operation.
[:zh_CN@~]
为 [`true] 时，才在对应的容器操作之内，通过分配器的复制赋值、移动赋值或者交换
操作对分配器进行替换。

[:en]
In all container types defined in this Clause, the member [`get_allocator()]
returns a copy of the allocator used to construct the container or, if that
allocator has been replaced, a copy of the most recent replacement.
[:zh_CN]
本章中所定义的所有容器类型中，成员 [`get_allocator()] 返回该容器构造时所用的分配
器的副本，或者若其分配器已经被替换，则为其最近所替换的副本。

[para]
[:en]
The expression [`a.swap(b)], for containers [`a] and [`b] of a standard
container type other than [`array], shall exchange the values of [`a] and [`b]
without invoking any move, copy, or swap operations on the individual container
elements.
[:zh_CN]
对于除 [`array] 之外的标准容器类型的容器 [`a] 和 [`b]，表达式 [`a.swap(b)] 应当
交换 [`a] 和 [`b] 的值，而不会对各个容器元素调用任何移动、复制或交换操作。

[:en]
Lvalues of any [`Compare], [`Pred], or [`Hash] types belonging to [`a] and [`b]
shall be swappable and shall be exchanged by calling [`swap] as described in
[#swappable.requirements].
[:zh_CN]
属于 [`a] 和 [`b] 的任何 [`Compare]、[`Pred] 或 [`Hash] 类型的左值也应当被交换，
且应当如 [#swappable.requirements] 所述通过调用 [`swap] 来交换。

[:en]
If [`allocator_traits<allocator_type>::propagate_on_container_swap::value] is
[`true], then lvalues of type [`allocator_type] shall be swappable and the
allocators of [`a] and [`b] shall also be exchanged by calling [`swap] as
described in [#swappable.requirements].
[:zh_CN]
如果 [`allocator_traits<allocator_type>::propagate_on_container_swap::value] 为
[`true]，则类型 [`allocator_type] 的左值应当可交换，且 [`a] 和 [`b] 的分配器也
应当如 [#swappable.requirements] 所述通过调用 [`swap] 来交换。

[:en]
Otherwise, the allocators shall not be swapped, and the behavior is undefined
unless [`a.get_allocator() == b.get_allocator()].
[:zh_CN]
否则，不能交换分配器，且除非 [`a.get_allocator() == b.get_allocator()]，否则
其行为是未定义的。

[:en]
Every iterator referring to an element in one container before the swap shall
refer to the same element in the other container after the swap.
[:zh_CN]
交换之前指向一个容器的元素的所有迭代器，在交换之后应当指向另一个容器中的相同元素。

[:en]
It is unspecified whether an iterator with value [`a.end()] before the swap will
have value [`b.end()] after the swap.
[:zh_CN]
交换之前具有值 [`a.end()] 的迭代器，在交换之后是否具有值 [`b.end()] 是未指明的。

[para]
[:en]
If the iterator type of a container belongs to the bidirectional or random
access iterator categories ([#iterator.requirements]), the container is called
[+reversible[%container[!reversible]]] and meets the additional requirements in
[#:tab#container.rev.req].
[:zh_CN]
如果某个容器的迭代器类型属于双向或随机访问迭代器类别（[#iterator.requirements]），
则该容器被称为[+可反向[%容器[!可反向]]]的，并符合 [#:tab#container.rev.req] 中的
附加规定。

[table:grid#container.rev.req
    [:en] Reversible container requirements
    [:zh_CN] 可反向容器的规定

    [|  [:en] Expression
        [:zh_CN] 表达式 ]
    [|  [:en] Return type
        [:zh_CN] 返回类型 ]
    [|  [:en] Assertion/note [br] pre-/post-condition
        [:zh_CN] 断言/注解 [br] 前/后条件 ]
    [|  [:en] Complexity
        [:zh_CN] 复杂度 ]
]

[|] [`X::reverse_iterator]
[|] [:en] iterator type whose value type is [`T]
    [:zh_CN] 值类型为 [`T] 的迭代器类型
[|] [`reverse_iterator<iterator>]
[|] [:en] compile time
    [:zh_CN] 编译期
[-]
[|] [`X::const_reverse_iterator]
[|] [:en] constant iterator type whose value type is [`T]
    [:zh_CN] 值类型为 [`T] 的常量迭代器类型
[|] [`reverse_iterator<const_iterator>]
[|] [:en] compile time
    [:zh_CN] 编译期
[-]
[|] [`a.rbegin()]
[|] [:en] [`reverse_iterator]; [`const_reverse_iterator] for constant [`a]
    [:zh_CN] [`reverse_iterator]；对于常量 [`a] 为 [`const_reverse_iterator]
[|] [`reverse_iterator(end())]
[|] [:en] constant
    [:zh_CN] 常量
[-]
[|] [`a.rend()]
[|] [:en] [`reverse_iterator]; [`const_reverse_iterator] for constant [`a]
    [:zh_CN] [`reverse_iterator]；对于常量 [`a] 为 [`const_reverse_iterator]
[|] [`reverse_iterator(begin())]
[|] [:en] constant
    [:zh_CN] 常量
[-]
[|] [`a.crbegin()]
[|] [`const_reverse_iterator]
[|] [`const_cast<X const&>(a).rbegin()]
[|] [:en] constant
    [:zh_CN] 常量
[-]
[|] [`a.crend()]
[|] [`const_reverse_iterator]
[|] [`const_cast<X const&>(a).rend()]
[|] [:en] constant
    [:zh_CN] 常量
[-]
[table:end]

[para]
[:en]
Unless otherwise specified (see [#associative.reqmts.except], [#unord.req.except],
[#deque.modifiers], and [#vector.modifiers]) all container types defined in this
Clause meet the following additional requirements:
[:zh_CN]
除非另有规定（参见 [#associative.reqmts.except]，[#unord.req.except]，
[#deque.modifiers]，和 [#vector.modifiers]），本章中所定义的所有容器类型都满足
以下的额外规定：

[list]
[item]
[:en] if an exception is thrown by an [`insert()] or [`emplace()] function while
inserting a single element, that function has no effects.
[:zh_CN] 如果在插入单个元素时 [`insert()] 或 [`emplace()] 函数抛出了异常，则这个
函数没有效果。

[item]
[:en] if an exception is thrown by a [`push_back()], [`push_front()],
[`emplace_back()], or [`emplace_front()] function, that function has no effects.
[:zh_CN] 如果 [`push_back()]，[`push_front()]，[`emplace_back()]，或
[`emplace_front()] 函数抛出了异常，则这个函数没有效果。

[item]
[:en] no [`erase()], [`clear()], [`pop_back()] or [`pop_front()] function throws
an exception.
[:zh_CN] [`erase()]，[`clear()]，[`pop_back()] 或 [`pop_front()] 函数都不抛出
任何异常。

[item]
[:en] no copy constructor or assignment operator of a returned iterator throws
an exception.
[:zh_CN] 所返回的迭代器的复制构造函数或赋值运算符都不抛出任何异常。

[item]
[:en] no [`swap()] function throws an exception.
[:zh_CN] [`swap()] 函数都不抛出任何异常。

[item]
[:en] no [`swap()] function invalidates any references, pointers, or iterators
referring to the elements of the containers being swapped.
[:zh_CN] [`swap()] 函数都不会使指向所交换的容器的元素的任何引用、指针或迭代器
失效。

[begin:note]
[:en] The [`end()] iterator does not refer to any element, so it can be
invalidated.
[:zh_CN] [`end()] 迭代器不指代任何元素，因此它可能失效。
[end:note]
[list:end]

[para]
[:en]
Unless otherwise specified (either explicitly or by defining a function in terms
of other functions), invoking a container member function or passing a container
as an argument to a library function shall not invalidate iterators to, or
change the values of, objects within that container.
[:zh_CN]
除非另有规定（明确的，或者依据其他函数定义某函数而暗含），调用容器的成员函数或者
将容器作为实参传递给程序库函数，不能使其迭代器无效，或者改变该容器中的对象的值。

[para]
[:en]
A [+:adj contiguous[!container]] is a container whose member types [`iterator]
and [`const_iterator] meet the [^:oc RandomAccessIterator] requirements
([#random.access.iterators]) and model [`:c contiguous_iterator]
([#iterator.concept.contiguous]).
[:zh_CN]
[+:adj 连续[!容器]]是容器，其成员类型 [`iterator] 和 [`const_iterator] 满足
[^:oc RandomAccessIterator] 的规定（[#random.access.iterators]），并构成
[`:c contiguous_iterator]（[#iterator.concept.contiguous]）。

[para]
[:en]
[#:tab#container.opt] lists operations that are provided for some types of
containers but not others.
[:zh_CN]
[#:tab#container.opt] 列出了某些类型的容器提供而其他类型的容器未提供的操作。

[:en]
Those containers for which the listed operations are provided shall implement
the semantics described in [#:tab#container.opt] unless otherwise stated.
[:zh_CN]
提供了所列出操作的容器，除非另行说明，应当实现 [#:tab#container.opt] 中所描述的
语义。

[:en]
If the iterators passed to [`lexicographical_compare_three_way] meet the
constexpr iterator requirements ([#iterator.requirements.general]) then the
operations described in [#:tab#container.opt] are implemented by constexpr
functions.
[:zh_CN]
如果传递给 [`lexicographical_compare_three_way] 的迭代器符合 constexpr 迭代器的
规定（[#iterator.requirements.general]），则 [#:tab#container.opt] 中所描述的各
操作都实现为 constexpr 函数。

[table:grid#container.opt
    [:en] Optional container operations
    [:zh_CN] 可选的容器操作

    [|  [:en] Expression
        [:zh_CN] 表达式 ]
    [|  [:en] Return type
        [:zh_CN] 返回类型 ]
    [|  [:en] Operational semantics
        [:zh_CN] 操作性语义 ]
    [|  [:en] Assertion/note [br] pre-/post-condition
        [:zh_CN] 断言/注解 [br] 前/后条件 ]
    [|  [:en] Complexity
        [:zh_CN] 复杂度 ]
]

[|] [`a <=> b]
[|] [`[^synth-three-way-result]<value_type>]
[|] [`lexicographical_compare_three_way(a.begin(), a.end(), b.begin(), b.end(), [^synth-three-way])]
[|] [para:expects]
    [:en] Either [`<=>] is defined for values of type (possibly const) [`T], or
    [`<] is defined for values of type (possibly const) [`T] and [`<] is a total
    ordering relationship.
    [:zh_CN] 要么 [`<=>] 对（可能为 [`const] 的）[`T] 类型的值有定义，要么 [`<]
    对（可能为 [`const] 的）[`T] 类型的值有定义且 [`<] 为全序关系。
[|] [:en] linear
    [:zh_CN] 线性
[-]
[table:end]

[:en]
[begin:note]
The algorithm [`lexicographical_compare_three_way] is defined in [#algorithms].
[:zh_CN]
算法 [`lexicographical_compare_three_way] 在 [#algorithms] 中定义。
[end:note]

[para]
[:en]
All of the containers defined in this Clause and in [#basic.string] except
[`array] meet the additional requirements of an allocator-aware container, as
described in [#:tab#container.alloc.req].
[:zh_CN]
除了 [`array] 之外，本章中和 [#basic.string] 中所定义的所有容器都满足如
[#:tab#container.alloc.req] 所述的分配器感知容器的额外规定。

[para]
[:en]
Given an allocator type [`A] and given a container type [`X] having a
[`value_type] identical to [`T] and an [`allocator_type] identical to
[`allocator_traits<A>::rebind_alloc<T>] and given an lvalue [`m] of type [`A],
a pointer [`p] of type [`T*], an expression [`v] of type (possibly [`:key const])
[`T], and an rvalue [`rv] of type [`T], the following terms are defined.
[:zh_CN]
跟定分配器类型 [`A]，给定容器类型 [`X]，其 [`value_type] 等同于 [`T] 且其
[`allocator_type] 等同于 [`allocator_traits<A>::rebind_alloc<T>]，并给定类型 [`A]
的左值 [`m]，类型为 [`T*] 的指针 [`p]，类型为（可能为 [`:key const] 的）[`T] 的
表达式 [`v]，以及类型 [`T] 的右值 [`rv]，定义下列术语。

[:en]
If [`X] is not allocator-aware, the terms below are defined as if [`A] were
[`allocator<T>] [=--] no allocator object needs to be created and user
specializations of [`allocator<T>] are not instantiated:
[:zh_CN]
如果 [`X] 不是分配器感知的，则下列术语进行如同当 [`A] 为 [`allocator<T>] 时的
定义——无须创建任何分配器对象，且用户对 [`allocator<T>] 的特化式不会被实例化：

[list]
[item]
[:en] [`T] is [+[^:oc DefaultInsertable] into [`X]] means that the following
expression is well-formed:
[:zh_CN] [`T] 为[+向 [`X] 中 [^:oc DefaultInsertable]] 的含义为以下表达式良构：

[codeblock]
allocator_traits<A>::construct(m, p)
[codeblock:end]

[item]
[:en] An element of [`X] is [+default-inserted] if it is initialized
by evaluation of the expression
[:zh_CN] [`X] 的元素被[+默认插入]的含义是它通过以下表达式进行初始化

[codeblock]
allocator_traits<A>::construct(m, p)
[codeblock:end]

[:en@~] where [`p] is the address of the uninitialized storage for the element
allocated within [`X].
[:zh_CN@~] 其中 [`p] 为 [`X] 中为该元素所分配的未初始化存储的地址。
	
[item]
[:en] [`T] is [+[^:oc MoveInsertable] into [`X]] means that the following
expression is well-formed:
[:zh_CN] [`T] 为[+向 [`X] 中 [^:oc MoveInsertable]] 的含义为以下表达式良构：

[codeblock]
allocator_traits<A>::construct(m, p, rv)
[codeblock:end]

[:en@~] and its evaluation causes the following postcondition to hold:
[:zh_CN@~] 并且其求值导致以下后条件成立：

[:en] The value of [`*p] is equivalent to the value of [`rv] before the
evaluation.
[:zh_CN] [`*p] 的值等价于 [`rv] 求值之前的值。

[begin:note]
[:en] [`rv] remains a valid object.
[:zh_CN] [`rv] 仍为有效的对象。

[:en] Its state is unspecified
[:zh_CN] 它的状态是未指明的。
[end:note]

[item]
[:en] [`T] is [+[^:oc CopyInsertable] into [`X]] means that, in addition to
[`T] being [^:oc MoveInsertable] into [`X], the following expression is
well-formed:
[:zh_CN] [`T] 为[+向 [`X] 中 [^:oc CopyInsertable]] 的含义为，除了 [`T] 为向
[`X] 中 [^:oc MoveInsertable] 之外，以下表达式也是良构的：

[codeblock]
allocator_traits<A>::construct(m, p, v)
[codeblock:end]

[:en@~] and its evaluation causes the following postcondition to hold:
[:zh_CN@~] 并且其求值导致以下后条件成立：

[:en] The value of [`v] is unchanged and is equivalent to [`*p].
[:zh_CN] [`v] 的值未改变且等价于 [`*p]。

[item]
[:en] [`T] is [+[^:oc EmplaceConstructible] into [`X] from [`args]], for zero
or more arguments [`args], means that the following expression is well-formed:
[:zh_CN] 对于零或更多实参 [`args]，[`T] 为[+以 [`args] 向 [`X] 中
[^:oc EmplaceConstructible]] 的含义为以下表达式良构：

[codeblock]
allocator_traits<A>::construct(m, p, args)
[codeblock:end]

[item]
[:en] [`T] is [+[^:oc Erasable] from [`X]] means that the following expression
is well-formed:
[:zh_CN] [`T] 为[+从 [`X] 中 [^:oc Erasable]] 的含义为以下表达式良构：

[codeblock]
allocator_traits<A>::destroy(m, p)
[codeblock:end]
[list:end]

[begin:note]
[:en] A container calls [`allocator_traits<A>::construct(m, p, args)] to
construct an element at [`p] using [`args], with [`m == get_allocator()].
[:zh_CN] 容器调用 [`allocator_traits<A>::construct(m, p, args)] 以使用 [`args]
在 [`p] 构造一个元素，其中 [`m == get_allocator()]。

[:en] The default [`construct] in [`allocator] will call
[`::new((void*)p) T(args)], but specialized allocators can choose a different
definition.
[:zh_CN] [`allocator] 中的默认 [`construct] 将会调用 [`::new((void*)p) T(args)]，
但专用的分配器可以选择不同的定义。
[end:note]

[para]
[:en] In [#:tab#container.alloc.req],
[:zh_CN] 在 [#:tab#container.alloc.req] 中，
[list]
[item]
[:en] [`X] denotes an allocator-aware container class with a [`value_type] of
[`T] using allocator of type [`A],
[:zh_CN] [`X] 代表分配器感知容器类型，其 [`value_type] 为 [`T]，并使用类型 [`A]
的分配器，
[item]
[:en] [`u] denotes a variable,
[:zh_CN] [`u] 代表一个变量，
[item]
[:en] [`a] and [`b] denote non-const lvalues of type [`X],
[:zh_CN] [`a] 和 [`b] 代表类型 [`X] 的非 const 左值，
[item]
[:en] [`t] denotes an lvalue or a const rvalue of type [`X],
[:zh_CN] [`t] 代表类型 [`X] 的左值或 const 右值，
[item]
[:en] [`rv] denotes a non-const rvalue of type [`X], and
[:zh_CN] [`rv] 代表类型 [`X] 的非 const 右值，而
[item]
[:en] [`m] is a value of type [`A].
[:zh_CN] [`m] 代表类型 [`A] 的值。
[list:end]

[table:grid#container.alloc.req
    [:en] Allocator-aware container requirements
    [:zh_CN] 分配器感知容器规定

    [|  [:en] Expression
        [:zh_CN] 表达式 ]
    [|  [:en] Return type
        [:zh_CN] 返回类型 ]
    [|  [:en] Assertion/note [br] pre-/post-condition
        [:zh_CN] 断言/注解 [br] 前/后条件 ]
    [|  [:en] Complexity
        [:zh_CN] 复杂度 ]
]

[|] [`allocator_type]
[|] [`A]
[|] [para:mandates]
    [:en] [`allocator_type::value_type] is the same as [`X::value_type].
    [:zh_CN] [`allocator_type::value_type] 与 [`X::value_type] 相同
[|] [:en] compile time
    [:zh_CN] 编译期
[-]
[|] [`get_allocator()]
[|] [`A]
[|]
[|] [:en] constant
    [:zh_CN] 常量
[-]
[|] [`X()] [br] [`X u;]
[|]
[|] [para:expects]
    [:en] [`A] meets the [^:oc DefaultConstructible] requirements.
    [:zh_CN] [`A] 满足 [^:oc DefaultConstructible] 的规定。

    [para:ensures]
    [:en] [`u.empty()] returns [`true], [`u.get_allocator() == A()]
    [:zh_CN] [`u.empty()] 返回 [`true]，[`u.get_allocator() == A()]
[|] [:en] constant
    [:zh_CN] 常量
[-]
[|] [`X(m)] [br] [`X u(m);]
[|]
[|] [para:ensures]
    [:en] [`u.empty()] returns [`true], [`u.get_allocator() == m]
    [:zh_CN] [`u.empty()] 返回 [`true]，[`u.get_allocator() == m]
[|] [:en] constant
    [:zh_CN] 常量
[-]
[|] [`X(t, m)] [br] [`X u(t, m);]
[|]
[|] [para:expects]
    [:en] [`T] is [^:oc CopyInsertable] into [`X].
    [:zh_CN] [`T] 为向 [`X] 中 [^:oc CopyInsertable]。

    [para:ensures]
    [:en] [`u == t], [`u.get_allocator() == m]
    [:zh_CN] [`u == t]，[`u.get_allocator() == m]
[|] [:en] linear
     [:zh_CN] 线性
[-]
[|] [`X(rv)] [br] [`X u(rv);]
[|]
[|] [para:ensures]
    [:en] [`u] has the same elements as [`rv] had before this construction; the
    value of [`u.get_allocator()] is the same as the value of
    [`rv.get_allocator()] before this construction.
    [:zh_CN] [`u] 具有 [`rv] 在这次构造前相同的元素；[`u.get_allocator()] 与
    [`rv.get_allocator()] 在这次构造之前的值相同。
[|] [:en] constant
    [:zh_CN] 常量
[-]
[|] [`X(rv, m)] [br] [`X u(rv, m);]
[|]
[|] [para:expects]
    [:en] [`T] is [^:oc MoveInsertable] into [`X].
    [:zh_CN] [`T] 为向 [`X] 中 [^:oc MoveInsertable]。

    [para:ensures]
    [:en] [`u] has the same elements, or copies of the elements, that [`rv] had
    before this construction, [`u.get_allocator() == m]
    [:zh_CN] [`u] 具有 [`rv] 在这次构造之前相同的元素，或其元素的副本，
    [`u.get_allocator() == m]
[|] [:en] constant if [`m == rv.get_allocator()], otherwise linear
    [:zh_CN] 当 [`m == rv.get_allocator()] 时为常量，否则为线性
[-]
[|] [`a = t]
[|] [`X&]
[|] [para:expects]
    [:en] [`T] is [^:oc CopyInsertable] into [`X] and [^:oc CopyAssignable].
    [:zh_CN] [`T] 为向 [`X] 中 [^:oc CopyInsertable]，且为
	[^:oc CopyAssignable]。

    [para:ensures] [`a == t]
[|] [:en] linear
    [:zh_CN] 线性
[-]
[|] [`a = rv]
[|] [`X&]
[|] [para:expects]
    [:en] If [`allocator_traits<allocator_type>
    ::propagate_on_container_move_assignment::value] is [`false], [`T] is
    [^:oc MoveInsertable] into [`X] and [^:oc MoveAssignable].
    [:zh_CN] 如果 [`allocator_traits<allocator_type>
    ::propagate_on_container_move_assignment::value] 为 [`false]，则有 [`T] 为向
    [`X] 中 [^:oc MoveInsertable]，且为 [^:oc MoveAssignable]。

    [para:effects]
    [:en] All existing elements of [`a] are either move assigned to or destroyed.
    [:zh_CN] [`a] 的所有现存元素要么被移动赋值要么被销毁。

    [para:ensures]
    [:en] If [`a] and [`rv] do not refer to the same object, [`a] is equal to
    the value that [`rv] had before this assignment.
    [:zh_CN] 若 [`a] 和 [`rv] 并不指代相同对象，则 [`a] 等于 [`rv] 在这个赋值
    之前所具有的值。
[|] [:en] linear
    [:zh_CN] 线性
[-]
[|] [`a.swap(b)]
[|] [`:key void]
[|] [para:effects]
    [:en] exchanges the contents of [`a] and [`b]
    [:zh_CN] 交换 [`a] 和 [`b] 的内容
[|] [:en] constant
    [:zh_CN] 常量
[-]
[table:end]

[para]
[:en] The behavior of certain container member functions and deduction guides
depends on whether types qualify as input iterators or allocators.
[:zh_CN] 某些容器成员函数和推断导引的行为，取决于类型是否被当做输入迭代器或
分配器。

[:en] The extent to which an implementation determines that a type cannot be an
input iterator is unspecified, except that as a minimum integral types shall not
qualify as input iterators.
[:zh_CN] 实现在何种程度上确定某个类型不能作为输入迭代器是未指明的，但至少整型
类型不能被当作输入迭代器。

[:en] Likewise, the extent to which an implementation determines that a type
cannot be an allocator is unspecified, except that as a minimum a type [`A]
shall not qualify as an allocator unless it meets both of the following
conditions:
[:zh_CN] 类似地，实现在何种程度上确定某个类型不能作为分配器也是未指明的，但至少
对于类型 [`A]，除非它同时符合以下条件，否则不能被当做分配器：

[list]
[item]
[:en] The [~qualified-id] [`A::value_type] is valid and denotes a type
([#temp.deduct]).
[:zh_CN] [~限定标识] [`A::value_type] 有效并代表一个类型（[#temp.deduct]）。

[item]
[:en] The expression [`declval<A&>().allocate(size_t{})] is well-formed when
treated as an unevaluated operand.
[:zh_CN] 表达式 [`declval<A&>().allocate(size_t{})] 作为免求值操作数时是良构的。
[list:end]
