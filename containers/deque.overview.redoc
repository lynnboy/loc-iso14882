[section#deque.overview
    [:en] Overview
    [:zh_CN] 概要
]

[para]
[:en] A [%@lib deque] [`deque] is a sequence container that supports random
access iterators ([#random.access.iterators]).
[:zh_CN] [%@lib deque] [`deque] 是一种支持随机访问迭代器
（[#random.access.iterators]）的序列容器。

[:en] In addition, it supports constant time insert and erase operations at the
beginning or the end; insert and erase in the middle take linear time.
[:zh_CN] 此外，它还支持在开头或末尾进行常量时间的插入和清除操作；而在中间进行的
插入和清除耗费线性时间。

[:en] That is, a deque is especially optimized for pushing and popping elements
at the beginning and end.
[:zh_CN] 就是说，[`deque] 是专门为在开头和末尾推入和弹出元素而优化的。

[:en] Storage management is handled automatically.
[:zh_CN] 存储管理是自动处理的。

[para]
[:en] A [`deque] meets all of the requirements of a container ([#container.reqmts]),
of a reversible container ([#container.rev.reqmts]), of an allocator-aware
container ([#container.alloc.reqmts]), and of a sequence container, including
the optional sequence container requirements ([#sequence.reqmts]).
[:zh_CN] [`deque] 满足容器（[#container.reqmts]），可反向容器（[#container.rev.reqmts]），
分配器感知容器（[#container.alloc.reqmts]），以及序列容器的所有规定，包括
可选的序列容器的规定（[#sequence.reqmts]）

[:en] Descriptions are provided here only for operations on [`deque] that are
not described in one of these tables or for operations where there is additional
semantic information.
[:zh_CN] 此处给出的说明仅包括未被这些表格之一所描述的 [`deque] 的操作，以及具有
额外的语义信息的操作。

[para]
[:en] The types [`iterator] and [`const_iterator] meet the constexpr iterator
requirements ([#iterator.requirements.general]).
[:zh_CN] 类型 [`iterator] 和 [`const_iterator] 满足 constexpr 迭代器的要求
（[#iterator.requirements.general]）。

[codeblock:synopsis]
namespace std {
  template<class T, class Allocator = allocator<T>>
  class deque {
  public:
    // [:en] types \
    [:zh_CN] 类型
    using value_type             = T;
    using allocator_type         = Allocator;
    using pointer                = typename allocator_traits<Allocator>::pointer;
    using const_pointer          = typename allocator_traits<Allocator>::const_pointer;
    using reference              = value_type&;
    using const_reference        = const value_type&;
    using size_type              = [[redoc("[?impdefx [:en] type of [`deque::size_type]"
        "[:zh_CN] [`deque::size_type] 的类型]")]]; // [:en] see [#container.requirements] [:zh_CN] 参见 [#container.requirements]
    using difference_type        = [[redoc("[?impdefx [:en] type of [`deque::difference_type]"
        "[:zh_CN] [`deque::difference_type] 的类型]")]]; // [:en] see [#container.requirements] [:zh_CN] 参见 [#container.requirements]
    using iterator               = [[redoc("[?impdefx [:en] type of [`deque::iterator]"
        "[:zh_CN] [`deque::iterator] 的类型]")]]; // [:en] see [#container.requirements] [:zh_CN] 参见 [#container.requirements]
    using const_iterator         = [[redoc("[?impdefx [:en] type of [`deque::const_iterator]"
        "[:zh_CN] [`deque::const_iterator] 的类型]")]]; // [:en] see [#container.requirements] [:zh_CN] 参见 [#container.requirements]
    using reverse_iterator       = std::reverse_iterator<iterator>;
    using const_reverse_iterator = std::reverse_iterator<const_iterator>;

    // [:en] [#deque.cons], construct/copy/destroy \
    [:zh_CN] [#deque.cons]，构造/复制/销毁
    constexpr deque() : deque(Allocator()) { }
    constexpr explicit deque(const Allocator&);
    constexpr explicit deque(size_type n, const Allocator& = Allocator());
    constexpr deque(size_type n, const T& value, const Allocator& = Allocator());
    template<class InputIterator>
      constexpr deque(InputIterator first, InputIterator last, const Allocator& = Allocator());
    template<[[redoc("*:c>")]]container-compatible-range<T> R>
      constexpr deque(from_range_t, R&& rg, const Allocator& = Allocator());
    constexpr deque(const deque& x);
    constexpr deque(deque&&);
    constexpr deque(const deque&, const type_identity_t<Allocator>&);
    constexpr deque(deque&&, const type_identity_t<Allocator>&);
    constexpr deque(initializer_list<T>, const Allocator& = Allocator());

    constexpr ~deque();
    constexpr deque& operator=(const deque& x);
    constexpr deque& operator=(deque&& x)
      noexcept(allocator_traits<Allocator>::is_always_equal::value);
    constexpr deque& operator=(initializer_list<T>);
    template<class InputIterator>
      constexpr void assign(InputIterator first, InputIterator last);
    template<[[redoc("*:c>")]]container-compatible-range<T> R>
      constexpr void assign_range(R&& rg);
    constexpr void assign(size_type n, const T& t);
    constexpr void assign(initializer_list<T>);
    constexpr allocator_type get_allocator() const noexcept;

    // [:en] iterators \
    [:zh_CN] 迭代器
    constexpr iterator               begin() noexcept;
    constexpr const_iterator         begin() const noexcept;
    constexpr iterator               end() noexcept;
    constexpr const_iterator         end() const noexcept;
    constexpr reverse_iterator       rbegin() noexcept;
    constexpr const_reverse_iterator rbegin() const noexcept;
    constexpr reverse_iterator       rend() noexcept;
    constexpr const_reverse_iterator rend() const noexcept;

    constexpr const_iterator         cbegin() const noexcept;
    constexpr const_iterator         cend() const noexcept;
    constexpr const_reverse_iterator crbegin() const noexcept;
    constexpr const_reverse_iterator crend() const noexcept;

    // [:en] [#deque.capacity], capacity \
    [:zh_CN] [#deque.capacity]，容量
    constexpr bool empty() const noexcept;
    constexpr size_type size() const noexcept;
    constexpr size_type max_size() const noexcept;
    constexpr void      resize(size_type sz);
    constexpr void      resize(size_type sz, const T& c);
    constexpr void      shrink_to_fit();

    // [:en] element access \
    [:zh_CN] 元素访问
    constexpr reference       operator[](size_type n);
    constexpr const_reference operator[](size_type n) const;
    constexpr reference       at(size_type n);
    constexpr const_reference at(size_type n) const;
    constexpr reference       front();
    constexpr const_reference front() const;
    constexpr reference       back();
    constexpr const_reference back() const;

    // [:en] [#deque.modifiers], modifiers \
    [:zh_CN] [#deque.modifiers]，改动函数
    template<class... Args> constexpr reference emplace_front(Args&&... args);
    template<class... Args> constexpr reference emplace_back(Args&&... args);
    template<class... Args> constexpr iterator emplace(const_iterator position, Args&&... args);

    constexpr void push_front(const T& x);
    constexpr void push_front(T&& x);
    template<[[redoc("*:c>")]]container-compatible-range<T> R>
      constexpr void prepend_range(R&& rg);
    constexpr void push_back(const T& x);
    constexpr void push_back(T&& x);
    template<[[redoc("*:c>")]]container-compatible-range<T> R>
      constexpr void append_range(R&& rg);

    constexpr iterator insert(const_iterator position, const T& x);
    constexpr iterator insert(const_iterator position, T&& x);
    constexpr iterator insert(const_iterator position, size_type n, const T& x);
    template<class InputIterator>
      constexpr iterator insert(const_iterator position,
                                InputIterator first, InputIterator last);
    template<[[redoc("*:c>")]]container-compatible-range<T> R>
      constexpr iterator insert_range(const_iterator position, R&& rg);
    constexpr iterator insert(const_iterator position, initializer_list<T>);

    constexpr void pop_front();
    constexpr void pop_back();

    constexpr iterator erase(const_iterator position);
    constexpr iterator erase(const_iterator first, const_iterator last);
    constexpr void     swap(deque&)
      noexcept(allocator_traits<Allocator>::is_always_equal::value);
    constexpr void     clear() noexcept;
  };

  template<class InputIterator, class Allocator = allocator<[[redoc("^>")]]iter-value-type<InputIterator>>>
    deque(InputIterator, InputIterator, Allocator = Allocator())
      -> deque<[[redoc("^>")]]iter-value-type<InputIterator>, Allocator>;

  template<ranges::[[redoc("`:c>")]]input_range R, class Allocator = allocator<ranges::range_value_t<R>>>
    deque(from_range_t, R&&, Allocator = Allocator())
      -> deque<ranges::range_value_t<R>, Allocator>;
}
[codeblock:end]
