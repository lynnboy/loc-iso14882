[section#deque.overview
    [:en] Overview
    [:zh_CN] 概要
]

[para]
[:en] A [%@library deque] [`deque] is a sequence container that supports random
access iterators ([#random.access.iterators]).
[:zh_CN] [%@library deque] [`deque] 是一种支持随机访问迭代器
（[#random.access.iterators]）的序列容器。

[:en] In addition, it supports constant time insert and erase operations at the
beginning or the end; insert and erase in the middle take linear time.
[:zh_CN] 此外，它还支持在开头或末尾进行常量时间的插入和清除操作；而在中间进行
插入和清除耗费常量时间。

[:en] That is, a deque is especially optimized for pushing and popping elements
at the beginning and end.
[:zh_CN] 就是说，[`deque] 是专门为在开头和末尾推入和弹出元素而优化的。

[:en] Storage management is handled automatically.
[:zh_CN] 存储管理是被自动处理的。

[para]
[:en] A [`deque] satisfies all of the requirements of a container, of a
reversible container (given in tables in [#container.requirements]), of a
sequence container, including the optional sequence container requirements
([#sequence.reqmts]), and of an allocator-aware container
([#containers.allocatoraware]).
[:zh_CN] [`deque] 符合容器的所有规定，可反向容器的所有规定（于
[#container.requirements] 中的表格给出），序列容器的所有规定，以及可选的序列容器
规定（[#sequence.reqmts]），以及分配器感知容器的所有规定
（[#containers.allocatoraware]）。

[:en] Descriptions are provided here only for operations on [`deque] that are
not described in one of these tables or for operations where there is additional
semantic information.
[:zh_CN] 此处给出的说明仅包括未被这些表格之一所描述的 [`deque] 的操作，以及具有
额外的语义信息的操作。

[codeblock:synopsis [!:mark ImpDef] ]
namespace std {
  template<class T, class Allocator = allocator<T>>
  class deque {
  public:
    // [:en] types
    // [|:zh_CN] 类型
    using value_type             = T;
    using allocator_type         = Allocator;
    using pointer                = typename allocator_traits<Allocator>::pointer;
    using const_pointer          = typename allocator_traits<Allocator>::const_pointer;
    using reference              = value_type&;
    using const_reference        = const value_type&;
    using size_type              = [=ImpDef]; // [:en] see [#container.requirements]
                                              // [|:zh_CN] 参见 [#container.requirements]
    using difference_type        = [=ImpDef]; // [:en] see [#container.requirements]
                                              // [|:zh_CN] 参见 [#container.requirements]
    using iterator               = [%@impldef [:en] type of [`deque::iterator] [:zh_CN] [`deque::iterator] 的类型][=ImpDef]; // [:en] see [#container.requirements]
                                              // [|:zh_CN] 参见 [#container.requirements]
    using const_iterator         = [%@impldef [:en] type of [`deque::const_iterator] [:zh_CN] [`deque::const_iterator] 的类型]@[=ImpDef]; // [:en] see [#container.requirements]
                                              // [|:zh_CN] 参见 [#container.requirements]
    using reverse_iterator       = std::reverse_iterator<iterator>;
    using const_reverse_iterator = std::reverse_iterator<const_iterator>;

    // [:en] [#deque.cons], construct/copy/destroy
    // [|:zh_CN] [#deque.cons]，构造/复制/销毁
    deque() : deque(Allocator()) { }
    explicit deque(const Allocator&);
    explicit deque(size_type n, const Allocator& = Allocator());
    deque(size_type n, const T& value, const Allocator& = Allocator());
    template<class InputIterator>
      deque(InputIterator first, InputIterator last, const Allocator& = Allocator());
    deque(const deque& x);
    deque(deque&&);
    deque(const deque&, const Allocator&);
    deque(deque&&, const Allocator&);
    deque(initializer_list<T>, const Allocator& = Allocator());

    ~deque();
    deque& operator=(const deque& x);
    deque& operator=(deque&& x)
      noexcept(allocator_traits<Allocator>::is_always_equal::value);
    deque& operator=(initializer_list<T>);
    template<class InputIterator>
      void assign(InputIterator first, InputIterator last);
    void assign(size_type n, const T& t);
    void assign(initializer_list<T>);
    allocator_type get_allocator() const noexcept;

    // [:en] iterators
    // [|:zh_CN] 迭代器
    iterator               begin() noexcept;
    const_iterator         begin() const noexcept;
    iterator               end() noexcept;
    const_iterator         end() const noexcept;
    reverse_iterator       rbegin() noexcept;
    const_reverse_iterator rbegin() const noexcept;
    reverse_iterator       rend() noexcept;
    const_reverse_iterator rend() const noexcept;

    const_iterator         cbegin() const noexcept;
    const_iterator         cend() const noexcept;
    const_reverse_iterator crbegin() const noexcept;
    const_reverse_iterator crend() const noexcept;

    // [:en] [#deque.capacity], capacity
    // [|:zh_CN] [#deque.capacity]，容量
    [[nodiscard]] bool empty() const noexcept;
    size_type size() const noexcept;
    size_type max_size() const noexcept;
    void      resize(size_type sz);
    void      resize(size_type sz, const T& c);
    void      shrink_to_fit();

    // [:en] element access
    // [|:zh_CN] 元素访问
    reference       operator[](size_type n);
    const_reference operator[](size_type n) const;
    reference       at(size_type n);
    const_reference at(size_type n) const;
    reference       front();
    const_reference front() const;
    reference       back();
    const_reference back() const;

    // [:en] [#deque.modifiers], modifiers
    // [|:zh_CN] [#deque.modifiers]，改动函数
    template<class... Args> reference emplace_front(Args&&... args);
    template<class... Args> reference emplace_back(Args&&... args);
    template<class... Args> iterator emplace(const_iterator position, Args&&... args);

    void push_front(const T& x);
    void push_front(T&& x);
    void push_back(const T& x);
    void push_back(T&& x);

    iterator insert(const_iterator position, const T& x);
    iterator insert(const_iterator position, T&& x);
    iterator insert(const_iterator position, size_type n, const T& x);
    template<class InputIterator>
      iterator insert(const_iterator position, InputIterator first, InputIterator last);
    iterator insert(const_iterator position, initializer_list<T>);

    void pop_front();
    void pop_back();

    iterator erase(const_iterator position);
    iterator erase(const_iterator first, const_iterator last);
    void     swap(deque&)
      noexcept(allocator_traits<Allocator>::is_always_equal::value);
    void     clear() noexcept;
  };

  template<class InputIterator, class Allocator = allocator<[*iter-value-type]<InputIterator>>>
    deque(InputIterator, InputIterator, Allocator = Allocator())
      -> deque<[*iter-value-type]<InputIterator>, Allocator>;

  // [:en] swap
  // [|:zh_CN] 交换
  template<class T, class Allocator>
    void swap(deque<T, Allocator>& x, deque<T, Allocator>& y)
      noexcept(noexcept(x.swap(y)));
}
[codeblock:end]
