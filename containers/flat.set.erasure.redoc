[section#flat.set.erasure
    [:en] Erasure
    [:zh_CN] 擦除
]

[%@lib@member erase_if[!flat_set]]
[codeblock:declaration]
template<class Key, class Compare, class KeyContainer, class Predicate>
  constexpr typename flat_set<Key, Compare, KeyContainer>::size_type
    erase_if(flat_set<Key, Compare, KeyContainer>& c, Predicate pred);
[codeblock:end]

[div:description]
[para:expects]
[:en] [`Key] meets the [^:oc MoveAssignable] requirements.
[:zh_CN] [`Key] 满足 [^:oc MoveAssignable] 的规定。

[para:effects]
[:en] Let [$E] be [`bool(pred(as_const(e)))].
[:zh_CN] 令 [$E] 为 [`bool(pred(as_const(e)))]。

[:en] Erases all elements [`e] in [`c] for which [$E] holds.
[:zh_CN] 擦除 [`c] 中所有使得 [$E] 成立的元素 [`e]。

[para:returns]
[:en] The number of elements erased.
[:zh_CN] 所擦除的元素数量。

[para:complexity]
[:en] Exactly [`c.size()] applications of the predicate.
[:zh_CN] 恰好 [`c.size()] 次谓词的运用。

[para:remarks]
[:en] Stable [#algorithm.stable].
[:zh_CN] 稳定算法 [#algorithm.stable]。

[:en] If an invocation of [`erase_if] exits via an exception, [`c] is in a valid
but unspecified state ([#defns.valid]).
[:zh_CN] 如果 [`erase_if] 的调用以异常退出，则 [`c] 处于有效但未指明的状态（[#defns.valid]）。

[begin:note]
[:en] [`c] still meets its invariants, but can be empty.
[:zh_CN] [`c] 仍然满足其不变式，但可能为空。
[end:note]
[div:end]
