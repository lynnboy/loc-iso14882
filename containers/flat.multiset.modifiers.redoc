[section#flat.multiset.modifiers
    [:en] Modifiers
    [:zh_CN] 改动函数
]

[%@lib@member emplace[!flat_multiset]]
[codeblock:declaration]
template<class... Args> iterator emplace(Args&&... args);
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`is_constructible_v<value_type, Args...>] is [`true].
[:zh_CN] [`is_constructible_v<value_type, Args...>] 为 [`true]。

[para:effects]
[:en] First, initializes an object [`t] of type [`value_type] with
[`std::forward<Args>(args)...], then inserts [`t] as if by:
[:zh_CN] 首先，以 [`std::forward<Args>(args)...] 初始化一个 [`value_type] 类型的
对象 [`t]，然后如同以如下代码来插入 [`t]：
[codeblock]
auto it = ranges::upper_bound(c, t, compare);
c.insert(it, std::move(t));
[codeblock:end]

[para:returns]
[:en] An iterator that points to the inserted element.
[:zh_CN] 指向所插入元素的迭代器。
[div:end]

[%@lib@member insert[!flat_multiset]]
[codeblock:declaration]
template<class InputIterator>
  void insert(InputIterator first, InputIterator last);
[codeblock:end]

[div:description]
[para:effects]
[:en] Adds elements to [*c] as if by:
[:zh_CN] 如同以如下代码向 [*c] 添加元素：
[codeblock]
c.insert(c.end(), first, last);
[codeblock:end]

[:en] Then, sorts the range of newly inserted elements with respect to [*compare],
and merges the resulting sorted range and the sorted range of pre-existing
elements into a single sorted range.
[:zh_CN] 然后，对新插入元素的范围根据 [*compare] 进行排序，并将产生的有序范围
和已存在元素的有序范围归并为单个有序范围。

[para:complexity]
[:en] [$N] + [$M \log M], where [$N] is [`size()] before the operation and [$M]
is [`distance(first, last)].
[:zh_CN] [$N] + [$M \log M]，其中 [$N] 为操作前的 [`size()] 而 [$M] 为
[`distance(first, last)]。

[para:remarks]
[:en] Since this operation performs an in-place merge, it may allocate memory.
[:zh_CN] 由于本操作实施就地归并，因而其可能进行内存分配。
[div:end]

[%@lib@member insert[!flat_multiset]]
[codeblock:declaration]
template<class InputIterator>
  void insert(sorted_equivalent_t, InputIterator first, InputIterator last);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to [`insert(first, last)].
[:zh_CN] 等价于 [`insert(first, last)]。

[para:complexity]
[:en] Linear.
[:zh_CN] 线性。
[div:end]

[%@lib@member swap[!flat_multiset]]
[codeblock:declaration]
void swap(flat_multiset& y) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
ranges::swap(compare, y.compare);
ranges::swap(c, y.c);
[codeblock:end]
[div:end]

[%@lib@member extract[!flat_multiset]]
[codeblock:declaration]
container_type extract() &&;
[codeblock:end]

[div:description]
[para:ensures]
[:en] [`*this] is emptied, even if the function exits via an exception.
[:zh_CN] [`*this] 被清空，即便函数以异常退出也是如此。

[para:returns]
[:en] [`std::move(c)].
[:zh_CN] [`std::move(c)]。
[div:end]

[%@lib@member replace[!flat_multiset]]
[codeblock:declaration]
void replace(container_type&& cont);
[codeblock:end]

[div:description]
[para:expects]
[:en] the elements of [`cont] are sorted with respect to [*compare].
[:zh_CN] [`cont] 的元素根据 [*compare] 有序。

[para:effects]
[:en] Equivalent to: [`c = std::move(cont);]
[:zh_CN] 等价于：[`c = std::move(cont);]
[div:end]
