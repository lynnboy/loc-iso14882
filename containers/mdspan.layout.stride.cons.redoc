[section#mdspan.layout.stride.cons
    [:en] Constructors
    [:zh_CN] 构造函数
]

[%@lib@ctor layout_stride::mapping]
[codeblock:declaration]
constexpr mapping() noexcept;
[codeblock:end]

[div:description]
[para:expects]
[:en] [`layout_right::mapping<extents_type>().required_span_size()]
is representable as a value of type [`index_type] ([#basic.fundamental]).
[:zh_CN] [`layout_right::mapping<extents_type>().required_span_size()] 可以表示为
[`index_type] 类型的值（[#basic.fundamental]）。

[para:effects]
[:en] Direct-non-list-initializes [*extents_] with [`extents_type()], and for
all [$d] in the range [=range(0,[*rank_])], direct-non-list-initializes
[`[*strides_]`[[$d]`]] with [`layout_right::mapping<extents_type>().stride([$d])].
[:zh_CN] 以 [`extents_type()] 直接非列表初始化 [*extents_]，并对范围
[=range(0,[*rank_])] 中的每个 [$d]，以
[`layout_right::mapping<extents_type>().stride([$d])] 直接非列表初始化
[`[*strides_]`[[$d]`]]。
[div:end]

[%@lib@ctor layout_stride::mapping]
[codeblock:declaration]
template<class OtherIndexType>
  constexpr mapping(const extents_type& e, span<OtherIndexType, [[redoc("*>")]]rank_> s) noexcept;
template<class OtherIndexType>
  constexpr mapping(const extents_type& e, const array<OtherIndexType, [[redoc("*>")]]rank_>& s) noexcept;
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en] [`is_convertible_v<const OtherIndexType&, index_type>] is [`true], and
[:zh_CN] [`is_convertible_v<const OtherIndexType&, index_type>] 为 [`true]，且
[item]
[:en] [`is_nothrow_constructible_v<index_type, const OtherIndexType&>] is [`true].
[:zh_CN] [`is_nothrow_constructible_v<index_type, const OtherIndexType&>] 为
[`true]。
[list:end]

[para:expects]
[list]
[item]
[:en] [`s`[[$i]`] > 0] is [`true] for all [$i] in the range [$`[0, [*rank_])].
[:zh_CN] 对于范围 [$`[0, [*rank_])] 中的所有 [$i]，[`s`[[$i]`] > 0] 均为 [`true]。
[item]
[:en] [`[*REQUIRED-SPAN-SIZE](e, s)] is representable as a value of type
[`index_type] ([#basic.fundamental]).
[:zh_CN] [`[*REQUIRED-SPAN-SIZE](e, s)] 可以表示为 [`index_type] 类型的值
（[#basic.fundamental]）。
[item]
[:en] If [*rank_] is greater than 0, then there exists a permutation [$P] of the
integers in the range [$`[0, [*rank_])], such that
[`s`[[$p_i]`] >= s`[[$p_{i-1}]`] * e.extent(p[$_{i-1}])] is [`true] for all [$i]
in the range [$`[1, [*rank_])], where [$p_i] is the [$i^\text{th}] element of [$P].
[:zh_CN] 如果 [*rank_] 大于 0，则存在范围 [$`[0, [*rank_])] 中的整数的一个排列
[$P]，使得对于范围 [$`[1, [*rank_])] 中的所有 [$i]，
[`s`[[$p_i]`] >= s`[[$p_{i-1}]`] * e.extent(p[$_{i-1}])] 均为 [`true]，其中
[$p_i] 为 [$P] 的第 [$i] 个元素。

[begin:note]
[:en] For [`layout_stride], this condition is necessary and sufficient
for [`is_unique()] to be [`true].
[:zh_CN] 对于 [`layout_stride]，这项条件对于 [`is_unique()] 为 [`true] 是必要且
充分的。
[end:note]
[list:end]

[para:effects]
[:en] Direct-non-list-initializes [*extents_] with [`e], and for all [$d] in the
range [$`[0, [*rank_])], direct-no-list-initializes [`strides_`[[$d]`]] with
[`as_const(s`[[$d]`])].
[:zh_CN] 以 [`e] 直接非列表初始化 [*extents_]，并对于范围 [$`[0, [*rank_])] 中的
所有 [$d]，以 [`as_const(s`[[$d]`])] 直接非列表初始化 [`strides_`[[$d]`]]。
[div:end]

[%@lib@ctor layout_stride::mapping]
[codeblock:declaration]
template<class StridedLayoutMapping>
  constexpr explicit([[redoc("[=seebelow]")]])
    mapping(const StridedLayoutMapping& other) noexcept;
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en] [`[*:c layout-mapping-alike]<StridedLayoutMapping>] is satisfied.
[:zh_CN] [`[*:c layout-mapping-alike]<StridedLayoutMapping>] 得以满足。
[item]
[:en]
[`is_constructible_v<extents_type, typename StridedLayoutMapping::extents_type>]
is [`true].
[:zh_CN]
[`is_constructible_v<extents_type, typename StridedLayoutMapping::extents_type>]
为 [`true]。
[item]
[:en] [`StridedLayoutMapping::is_always_unique()] is [`true].
[:zh_CN] [`StridedLayoutMapping::is_always_unique()] 为 [`true]。
[item]
[:en] [`StridedLayoutMapping::is_always_strided()] is [`true].
[:zh_CN] [`StridedLayoutMapping::is_always_strided()] 为 [`true]。
[list:end]

[para:expects]
[list]
[item]
[:en] [`StridedLayoutMapping] meets the layout mapping requirements
([#mdspan.layout.policy.reqmts]),
[:en] [`StridedLayoutMapping] 满足布局映射的规定（[#mdspan.layout.policy.reqmts]），
[item]
[:en] [`other.stride([$r]) > 0] is [`true] for every rank index [$r] of [`extents()],
[:zh_CN] 对于 [`extents()] 的每个秩索引 [$r]，[`other.stride([$r]) > 0] 为 [`true]，
[item]
[:en] [`other.required_span_size()] is representable as a value of type
[`index_type] ([#basic.fundamental]), and
[:zh_CN] [`other.required_span_size()] 可以表示为 [`index_type] 类型的值
（[#basic.fundamental]），并且
[item]
[:en] [`[*OFFSET](other) == 0] is [`true].
[:zh_CN] [`[*OFFSET](other) == 0] 为 [`true]，
[list:end]

[para:effects]
[:en] Direct-non-list-initializes [*extents_] with [`e], and for all [$d] in the
range [$`[0, [*rank_])], direct-no-list-initializes [`strides_`[[$d]`]] with
[`other.stride([$d])].
[:zh_CN] 以 [`e] 直接非列表初始化 [*extents_]，并对于范围 [$`[0, [*rank_])] 中的
所有 [$d]，以 [`other.stride([$d])] 直接非列表初始化 [`strides_`[[$d]`]]。

[para]
[:en] Remarks: The expression inside [`explicit] is equivalent to:
[:zh_CN] 注解：[`explicit] 中的表达式等价于：
[codeblock]
[codeblock:end!(is_convertible_v<typename StridedLayoutMapping::extents_type, extents_type> &&
  ([[redoc("*>")]]is-mapping-of<layout_left, LayoutStrideMapping> ||
   [[redoc("*>")]]is-mapping-of<layout_right, LayoutStrideMapping> ||
   [[redoc("*>")]]is-mapping-of<layout_stride, LayoutStrideMapping>))
]
[codeblock:end]
[div:end]
