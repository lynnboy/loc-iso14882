[section#hive.cons
    [:en] Constructors, copy, and assignment
    [:zh_CN] 构造函数、复制与赋值
]

[%@lib@ctor hive]
[codeblock:declaration]
constexpr explicit hive(const Allocator&) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Constructs an empty [`hive], using the specified allocator.
[:zh_CN] 构造一个空的 [`hive]，并使用所指定的分配器。

[para:complexity]
[:en] Constant.
[:zh_CN] 常量。
[div:end]

[%@lib@ctor hive]
[codeblock:declaration]
constexpr hive(hive_limits block_limits, const Allocator&);
[codeblock:end]

[div:description]
[para:effects]
[:en] Constructs an empty [`hive], using the specified allocator.
[:zh_CN] 构造一个空的 [`hive]，并使用所指定的分配器。

[:en] Initializes [*current-limits] with [`block_limits].
[:zh_CN] 以 [`block_limits] 初始化 [*current-limits]。

[para:complexity]
[:en] Constant.
[:zh_CN] 常量。
[div:end]

[%@lib@ctor hive]
[codeblock:declaration]
explicit hive(size_type n, const Allocator& = Allocator());
hive(size_type n, hive_limits block_limits, const Allocator& = Allocator());
[codeblock:end]

[div:description]
[para:expects]
[:en] [`T] is [^:oc DefaultInsertable] into [`hive].
[:zh_CN] [`T] 向 [`hive] 中 [^:oc DefaultInsertable]。

[para:effects]
[:en] Constructs a [`hive] with [`n] default-inserted elements, using the
specified allocator.
[:zh_CN] 构造一个具有 [`n] 个默认插入的元素的 [`hive]，并使用所指定的分配器。

[:en] If the second overload is called,
also initializes [*current-limits] with [`block_limits].
[:zh_CN] 如果调用第二个重载，则还以 [`block_limits] 初始化 [*current-limits]。

[para:complexity]
[:en] Linear in [`n].
[:zh_CN] 对于 [`n] 为线性。
[div:end]

[%@lib@ctor hive]
[codeblock:declaration]
hive(size_type n, const T& value, const Allocator& = Allocator());
hive(size_type n, const T& value, hive_limits block_limits, const Allocator& = Allocator());
[codeblock:end]

[div:description]
[para:expects]
[:en] [`T] is [^:oc CopyInsertable] into [`hive].
[:zh_CN] [`T] 向 [`hive] 中 [^:oc CopyInsertable]。

[para:effects]
[:en] Constructs a [`hive] with [`n] copies of [`value], using the specified allocator.
[:zh_CN] 构造一个具有 [`n] 个 [`value] 的副本的 [`hive]，并使用所指定的分配器。

[:en] If the second overload is called,
also initializes [*current-limits] with [`block_limits].
[:zh_CN] 如果调用第二个重载，则还以 [`block_limits] 初始化 [*current-limits]。

[para:complexity]
[:en] Linear in [`n].
[:zh_CN] 对于 [`n] 为线性。
[div:end]

[%@lib@ctor hive]
[codeblock:declaration]
template<class InputIterator>
  hive(InputIterator first, InputIterator last, const Allocator& = Allocator());
template<class InputIterator>
  hive(InputIterator first, InputIterator last, hive_limits block_limits,
       const Allocator& = Allocator());
[codeblock:end]

[div:description]
[para:effects]
[:en] Constructs a [`hive] equal to the range [=range(first,last)], using the
specified allocator.
[:zh_CN] 构造一个等于范围 [=range(first,last)] 的 [`hive]，并使用所指定的分配器。

[:en] If the second overload is called,
also initializes [*current-limits] with [`block_limits].
[:zh_CN] 如果调用第二个重载，则还以 [`block_limits] 初始化 [*current-limits]。

[para:complexity]
[:en] Linear in [`distance(first, last)].
[:zh_CN] 对于 [`distance(first, last)] 为线性。
[div:end]

[%@lib@ctor hive]
[codeblock:declaration]
template<[[redoc("*:c>")]]container-compatible-range<T> R>
  hive(from_range_t, R&& rg, const Allocator& = Allocator());
template<[[redoc("*:c>")]]container-compatible-range<T> R>
  hive(from_range_t, R&& rg, hive_limits block_limits, const Allocator& = Allocator());
[codeblock:end]

[div:description]
[para:effects]
[:en] Constructs a [`hive] object with the elements of the range [`rg].
[:zh_CN] 构造一个具有范围 [`rg] 的各元素的 [`hive] 对象。

[:en] If the second overload is called,
also initializes [*current-limits] with [`block_limits].
[:zh_CN] 如果调用第二个重载，则还以 [`block_limits] 初始化 [*current-limits]。

[para:complexity]
[:en] Linear in [`ranges::distance(rg)].
[:zh_CN] 对于 [`ranges::distance(rg)] 为线性。
[div:end]

[%@lib@ctor hive]
[codeblock:declaration]
hive(const hive& x);
hive(const hive& x, const type_identity_t<Allocator>& alloc);
[codeblock:end]

[div:description]
[para:expects]
[:en] [`T] is [^:oc CopyInsertable] into [`hive].
[:zh_CN] [`T] 向 [`hive] 中 [^:oc CopyInsertable]。

[para:effects]
[:en] Constructs a [`hive] object with the elements of [`x].
[:zh_CN] 构造一个具有 [`x] 的各元素的 [`hive] 对象。

[:en] If the second overload is called, uses [`alloc].
[:zh_CN] 如果调用第二个重载，则使用 [`alloc]。

[:en] Initializes [*current-limits] with [`x.[*current-limits]].
[:zh_CN] 以 [`x.[*current-limits]] 初始化 [*current-limits]。

[para:complexity]
[:en] Linear in [`x.size()].
[:zh_CN] 对于 [`x.size()] 为线性。
[div:end]

[%@lib@ctor hive]
[codeblock:declaration]
hive(hive&& x);
hive(hive&& x, const type_identity_t<Allocator>& alloc);
[codeblock:end]

[div:description]
[para:expects]
[:en] For the second overload, when [`allocator_traits<alloc>::is_always_equal::value]
is [`false], [`T] meets the [^:oc MoveInsertable] requirements.
[:zh_CN] 对于第二个重载，若 [`allocator_traits<alloc>::is_always_equal::value]
为 [`false]，则 [`T] 满足 [^:oc MoveInsertable] 的规定。

[para:effects]
[:en] When the first overload is called, or the second overload is called and
[`alloc == x.get_allocator()] is [`true], [*current-limits] is set to
[`x.[*current-limits]] and each element block is moved from [`x] into [`*this].
[:zh_CN] 当调用第一个重载，或调用第二个重载且 [`alloc == x.get_allocator()] 为 [`true] 时，
[*current-limits] 被设置为 [`x.[*current-limits]]，并且从 [`x] 将每个元素块均移动到 [`*this]。

[:en] Pointers and references to the elements of [`x] now refer to
those same elements but as members of [`*this].
[:zh_CN] 指代 [`x] 的元素的指针和引用现在仍指向相同的元素，但已作为 [`*this] 的成员。

[:en] Iterators referring to the elements of [`x] will continue to refer to
their elements, but they now behave as iterators into [`*this].
[:zh_CN] 指代 [`x] 的元素的迭代器将继续指代其元素，但现在它们将表现为指向 [`*this] 的迭代器。

[:en] If the second overload is called and [`alloc == x.get_allocator()] is [`false],
each element in [`x] is moved into [`*this].
[:zh_CN] 如果调用第二个重载且 [`alloc == x.get_allocator()] 为 [`false]，
则 [`x] 中的每个元素均被移动到 [`*this]。

[para:ensures]
[:en] [`x.empty()] is [`true].
[:zh_CN] [`x.empty()] 为 [`true]。

[para:complexity]
[:en] If the second overload is called and
[`alloc == x.get_allocator()] is [`false], linear in [`x.size()].
[:zh_CN] 如果调用第二个重载且 [`alloc == x.get_allocator()] 为 [`false]，
则对于 [`x.size()] 为线性。

[:en] Otherwise constant.
[:zh_CN] 否则为常量。
[div:end]

[%@lib@ctor hive]
[codeblock:declaration]
hive(initializer_list<T> il, const Allocator& = Allocator());
hive(initializer_list<T> il, hive_limits block_limits, const Allocator& = Allocator());
[codeblock:end]

[div:description]
[para:expects]
[:en] [`T] is [^:oc CopyInsertable] into [`hive].
[:zh_CN] [`T] 向 [`hive] 中 [^:oc CopyInsertable]。

[para:effects]
[:en] Constructs a [`hive] object with the elements of [`il], using the specified
allocator.
[:zh_CN] 构造一个具 [`il] 的各元素的 [`hive] 对象, 并使用所指定的分配器。

[:en] If the second overload is called,
also initializes [*current-limits] with [`block_limits].
[:zh_CN] 如果调用第二个重载，则还以 [`block_limits] 初始化 [*current-limits]。

[para:complexity]
[:en] Linear in [`il.size()].
[:zh_CN] 对于 [`il.size()] 为线性。
[div:end]

[%@lib@member operator=[!hive]]
[codeblock:declaration]
hive& operator=(const hive& x);
[codeblock:end]

[div:description]
[para:expects]
[:en] [`T] is [^:oc CopyInsertable] into [`hive] and [^:oc CopyAssignable].
[:zh_CN] [`T] 向 [`hive] 中 [^:oc CopyInsertable] 且为 [^:oc CopyAssignable]。

[para:effects]
[:en] All elements in [`*this] are either copy-assigned to, or destroyed.
[:zh_CN] [`*this] 中的所有元素均要么被复制赋值要么被销毁。

[:en] All elements in [`x] are copied into [`*this].
[:zh_CN] [`x] 中的所有元素均被复制到 [`*this]。

[begin:note]
[:en] [*current-limits] is unchanged.
[:zh_CN] [*current-limits] 保持不变。
[end:note]

[para:complexity]
[:en] Linear in [`size() + x.size()].
[:zh_CN] 对于 [`size() + x.size()] 为线性。
[div:end]

[%@lib@member operator=[!hive]]
[codeblock:declaration]
hive& operator=(hive&& x)
  noexcept(allocator_traits<Allocator>::propagate_on_container_move_assignment::value ||
           allocator_traits<Allocator>::is_always_equal::value);
[codeblock:end]

[div:description]
[para:expects]
[:en] When
[:zh_CN] 若
[codeblock]
(allocator_traits<Allocator>::propagate_on_container_move_assignment::value ||
 allocator_traits<Allocator>::is_always_equal::value)
[codeblock:end]
[:en@~] is [`false], [`T] is [^:oc MoveInsertable] into [`hive] and [^:oc MoveAssignable].
[:zh_CN@~] 为 [`false]，则 [`T] 向 [`hive] 中 [^:oc MoveInsertable] 且为 [^:oc MoveAssignable]。

[para:effects]
[:en] Each element in [`*this] is either move-assigned to, or destroyed.
[:zh_CN] [`*this] 中的每个元素要么被移动赋值要么被销毁。

[:en] When
[:zh_CN] 若
[codeblock]
(allocator_traits<Allocator>::propagate_on_container_move_assignment::value ||
 get_allocator() == x.get_allocator())
[codeblock:end]
[:en@~] is [`true], [*current-limits] is set to [`x.[*current-limits]] and
each element block is moved from [`x] into [`*this].
[:zh_CN@~] 为 [`true]，则 [*current-limits] 被设置为 [`x.[*current-limits]]，
并从 [`x] 将每个元素块移动到 [`*this]。

[:en] Pointers and references to the elements of [`x]
now refer to those same elements but as members of [`*this].
[:zh_CN] 指代 [`x] 的元素的指针和引用现在仍指向相同的元素，但已作为 [`*this] 的成员。

[:en] Iterators referring to the elements of [`x] will continue to refer to
their elements, but they now behave as iterators into [`*this].
[:zh_CN] 指代 [`x] 的元素的迭代器将继续指代其元素，但现在它们将表现为指向 [`*this] 的迭代器。

[:en] When
[:zh_CN] 若
[codeblock]
(allocator_traits<Allocator>::propagate_on_container_move_assignment::value ||
 get_allocator() == x.get_allocator())
[codeblock:end]
[:en@~] is [`false], each element in [`x] is moved into [`*this].
[:zh_CN@~] 为 [`false]，则 [`x] 中的每个元素均被移动到 [`*this]。

[:en] References, pointers and iterators referring to the elements of [`x],
as well as the past-the-end iterator of [`x], are invalidated.
[:zh_CN] 指代 [`x] 的元素的引用、指针和迭代器，以及 [`x] 的尾后迭代器，均失效。

[para:ensures]
[:en] [`x.empty()] is [`true].
[:zh_CN] [`x.empty()] 为 [`true]。

[para:complexity]
[:en] Linear in [`size() + x.size()].
[:zh_CN] 对于 [`size() + x.size()] 为线性。

[:en] If
[:zh_CN] 若
[codeblock]
(allocator_traits<Allocator>::propagate_on_container_move_assignment::value ||
 get_allocator() == x.get_allocator())
[codeblock:end]
[:en@~] is [`false], also linear in [`x.size()].
[:zh_CN@~] 为 [`false]，则也对于 [`x.size()] 为线性。
[div:end]
