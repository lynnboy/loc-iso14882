[section#hive.erasure
    [:en] Erasure
    [:zh_CN] 擦除
]

[%@lib@member erase[!hive]]
[codeblock:declaration]
template<class T, class Allocator, class U>
  typename hive<T, Allocator>::size_type
    erase(hive<T, Allocator>& c, const U& value);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return erase_if(c, [&](auto& elem) { return elem == value; });
[codeblock:end]
[div:end]

[%@lib@member erase_if[!hive]]
[codeblock:declaration]
template<class T, class Allocator, class Predicate>
  typename hive<T, Allocator>::size_type
    erase_if(hive<T, Allocator>& c, Predicate pred);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
auto original_size = c.size();
for (auto i = c.begin(), last = c.end(); i != last; ) {
  if (pred(*i)) {
    i = c.erase(i);
  } else {
    ++i;
  }
}
return original_size - c.size();
[codeblock:end]
[div:end]
