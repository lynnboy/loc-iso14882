[section#multimap.overview
    [:en] Overview
    [:zh_CN] 概要
]

[para]
[%@lib multimap]
[:en] A [`multimap] is an associative container that supports equivalent keys
(i.e., possibly containing multiple copies of the same key value) and provides
for fast retrieval of values of another type [`T] based on the keys.
[:zh_CN] [`multimap] 是一种关联容器，支持等价键（即可能包含同一个键值的多个副本），
并提供基于键的对另一个类型 [`T] 的值的快速检索。

[:en] The [`multimap] class supports bidirectional iterators.
[:zh_CN] [`multimap] 类支持双向迭代器。

[para]
[:en] A [`multimap] meets all of the requirements of a container ([#container.reqmts]),
of a reversible container ([#container.rev.reqmts]), of an allocator-aware
container ([#container.alloc.reqmts]), and of an associative container ([#associative.reqmts]).
[:zh_CN] [`multimap] 满足容器（[#container.reqmts]），可反向容器（[#container.rev.reqmts]），
分配器感知容器（[#container.alloc.reqmts]），以及关联容器（[#associative.reqmts]）
的所有规定。

[:en] A [`multimap] also provides most operations described in [#associative.reqmts]
for equal keys.
[:zh_CN] [`multimap] 还提供 [#associative.reqmts] 所描述的大多数等价键的操作。

[:en] This means that a [`multimap] supports the [`a_eq] operations in
[#associative.reqmts] but not the [`a_uniq] operations.
[:zh_CN] 这意味着 [`multimap] 支持 [#associative.reqmts] 中的 [`a_eq] 的操作，但
不支持 [`a_uniq] 的操作。

[:en] For a [`multimap<Key,T>] the [`key_type] is [`Key] and the [`value_type]
is [`pair<const Key,T>].
[:zh_CN] [`multimap<Key,T>] 的 [`key_type] 为 [`Key]，而其 [`value_type] 为
[`pair<const Key,T>]。

[:en] Descriptions are provided here only for operations on [`multimap] that are
not described in one of those tables or for operations where there is additional
semantic information.
[:zh_CN] 此处给出的说明仅包括未被这些表格之一所描述的 [`multimap] 的操作，以及
具有额外的语义信息的操作。

[%@lib@member comp[!multimap::value_compare]]
[%@lib@member operator()[!multimap::value_compare]]
[codeblock:synopsis]
namespace std {
  template<class Key, class T, class Compare = less<Key>,
           class Allocator = allocator<pair<const Key, T>>>
  class multimap {
  public:
    // [:en] types \
    [:zh_CN] 类型
    using key_type               = Key;
    using mapped_type            = T;
    using value_type             = pair<const Key, T>;
    using key_compare            = Compare;
    using allocator_type         = Allocator;
    using pointer                = typename allocator_traits<Allocator>::pointer;
    using const_pointer          = typename allocator_traits<Allocator>::const_pointer;
    using reference              = value_type&;
    using const_reference        = const value_type&;
    using size_type              = [[redoc("[?impdefx"
          " [:en] type of [`multimap::size_type]"
        "[:zh_CN] [`multimap::size_type] 的类型]")]]; // [:en] see [#container.requirements] \
                                                      [:zh_CN] 参见 [#container.requirements]
    using difference_type        = [[redoc("[?impdefx"
          " [:en] type of [`multimap::difference_type]"
        "[:zh_CN] [`multimap::difference_type] 的类型]")]]; // [:en] see [#container.requirements] \
                                                            [:zh_CN] 参见 [#container.requirements]
    using iterator               = [[redoc("[?impdefx"
          " [:en] type of [`multimap::iterator]"
        "[:zh_CN] [`multimap::iterator] 的类型]")]]; // [:en] see [#container.requirements] \
                                                     [:zh_CN] 参见 [#container.requirements]
    using const_iterator         = [[redoc("[?impdefx"
          " [:en] type of [`multimap::const_iterator]"
        "[:zh_CN] [`multimap::const_iterator] 的类型]")]]; // [:en] see [#container.requirements] \
                                                           [:zh_CN] 参见 [#container.requirements]
    using reverse_iterator       = std::reverse_iterator<iterator>;
    using const_reverse_iterator = std::reverse_iterator<const_iterator>;
    using node_type              = [[redoc("[=unspec]")]];

    class value_compare {
    protected:
      Compare comp;
      value_compare(Compare c) : comp(c) { }

    public:
      bool operator()(const value_type& x, const value_type& y) const {
        return comp(x.first, y.first);
      }
    };

    // [:en] [#multimap.cons], construct/copy/destroy \
    [:zh_CN] [#multimap.cons]，构造/复制/销毁
    multimap() : multimap(Compare()) { }
    explicit multimap(const Compare& comp, const Allocator& = Allocator());
    template<class InputIterator>
      multimap(InputIterator first, InputIterator last,
               const Compare& comp = Compare(),
               const Allocator& = Allocator());
    template<[[redoc("*:c>")]]container-compatible-range<value_type> R>
      multimap(from_range_t, R&& rg,
               const Compare& comp = Compare(), const Allocator& = Allocator());
    multimap(const multimap& x);
    multimap(multimap&& x);
    explicit multimap(const Allocator&);
    multimap(const multimap&, const type_identity_t<Allocator>&);
    multimap(multimap&&, const type_identity_t<Allocator>&);
    multimap(initializer_list<value_type>,
      const Compare& = Compare(),
      const Allocator& = Allocator());
    template<class InputIterator>
      multimap(InputIterator first, InputIterator last, const Allocator& a)
        : multimap(first, last, Compare(), a) { }
    template<[[redoc("*:c>")]]container-compatible-range<value_type> R>
      multimap(from_range_t, R&& rg, const Allocator& a)
        : multimap(from_range, std::forward<R>(rg), Compare(), a) { }
    multimap(initializer_list<value_type> il, const Allocator& a)
      : multimap(il, Compare(), a) { }
    ~multimap();
    multimap& operator=(const multimap& x);
    multimap& operator=(multimap&& x)
      noexcept(allocator_traits<Allocator>::is_always_equal::value &&
               is_nothrow_move_assignable_v<Compare>);
    multimap& operator=(initializer_list<value_type>);
    allocator_type get_allocator() const noexcept;

    // [:en] iterators \
    [:zh_CN] 迭代器
    iterator               begin() noexcept;
    const_iterator         begin() const noexcept;
    iterator               end() noexcept;
    const_iterator         end() const noexcept;

    reverse_iterator       rbegin() noexcept;
    const_reverse_iterator rbegin() const noexcept;
    reverse_iterator       rend() noexcept;
    const_reverse_iterator rend() const noexcept;

    const_iterator         cbegin() const noexcept;
    const_iterator         cend() const noexcept;
    const_reverse_iterator crbegin() const noexcept;
    const_reverse_iterator crend() const noexcept;

    // [:en] capacity: \
    [:zh_CN] 容量
    bool empty() const noexcept;
    size_type size() const noexcept;
    size_type max_size() const noexcept;

    // [:en] [#multimap.modifiers], modifiers \
    [:zh_CN] [#multimap.modifiers]，改动函数
    template<class... Args> iterator emplace(Args&&... args);
    template<class... Args> iterator emplace_hint(const_iterator position, Args&&... args);
    iterator insert(const value_type& x);
    iterator insert(value_type&& x);
    template<class P> iterator insert(P&& x);
    iterator insert(const_iterator position, const value_type& x);
    iterator insert(const_iterator position, value_type&& x);
    template<class P> iterator insert(const_iterator position, P&& x);
    template<class InputIterator>
      void insert(InputIterator first, InputIterator last);
    template<[[redoc("*:c>")]]container-compatible-range<value_type> R>
      void insert_range(R&& rg);
    void insert(initializer_list<value_type>);

    node_type extract(const_iterator position);
    node_type extract(const key_type& x);
    template<class K> node_type extract(K&& x);
    iterator insert(node_type&& nh);
    iterator insert(const_iterator hint, node_type&& nh);

    iterator  erase(iterator position);
    iterator  erase(const_iterator position);
    size_type erase(const key_type& x);
    template<class K> size_type erase(K&& x);
    iterator  erase(const_iterator first, const_iterator last);
    void      swap(multimap&)
      noexcept(allocator_traits<Allocator>::is_always_equal::value &&
               is_nothrow_swappable_v<Compare>);
    void      clear() noexcept;

    template<class C2>
      void merge(multimap<Key, T, C2, Allocator>& source);
    template<class C2>
      void merge(multimap<Key, T, C2, Allocator>&& source);
    template<class C2>
      void merge(map<Key, T, C2, Allocator>& source);
    template<class C2>
      void merge(map<Key, T, C2, Allocator>&& source);

    // [:en] observers \
    [:zh_CN] 探察函数
    key_compare key_comp() const;
    value_compare value_comp() const;

    // [:en] map operations \
    [:zh_CN] map 的操作
    iterator       find(const key_type& x);
    const_iterator find(const key_type& x) const;
    template<class K> iterator       find(const K& x);
    template<class K> const_iterator find(const K& x) const;

    size_type      count(const key_type& x) const;
    template<class K> size_type count(const K& x) const;

    bool           contains(const key_type& x) const;
    template<class K> bool contains(const K& x) const;

    iterator       lower_bound(const key_type& x);
    const_iterator lower_bound(const key_type& x) const;
    template<class K> iterator       lower_bound(const K& x);
    template<class K> const_iterator lower_bound(const K& x) const;

    iterator       upper_bound(const key_type& x);
    const_iterator upper_bound(const key_type& x) const;
    template<class K> iterator       upper_bound(const K& x);
    template<class K> const_iterator upper_bound(const K& x) const;

    pair<iterator, iterator>               equal_range(const key_type& x);
    pair<const_iterator, const_iterator>   equal_range(const key_type& x) const;
    template<class K>
      pair<iterator, iterator>             equal_range(const K& x);
    template<class K>
      pair<const_iterator, const_iterator> equal_range(const K& x) const;
  };

  template<class InputIterator, class Compare = less<[[redoc("^>")]]iter-key-type<InputIterator>>,
           class Allocator = allocator<[[redoc("^>")]]iter-to-alloc-type<InputIterator>>>
    multimap(InputIterator, InputIterator, Compare = Compare(), Allocator = Allocator())
      -> multimap<[[redoc("^>")]]iter-key-type<InputIterator>, [[redoc("^>")]]iter-mapped-type<InputIterator>,
                  Compare, Allocator>;

  template<ranges::[[redoc("^:c>")]]input_range R, class Compare = less<[[redoc("*>")]]range-key-type<R>>,
           class Allocator = allocator<[[redoc("*>")]]range-to-alloc-type<R>>>
    multimap(from_range_t, R&&, Compare = Compare(), Allocator = Allocator())
      -> multimap<[[redoc("*>")]]range-key-type<R>, [[redoc("*>")]]range-mapped-type<R>, Compare, Allocator>;

  template<class Key, class T, class Compare = less<Key>,
           class Allocator = allocator<pair<const Key, T>>>
    multimap(initializer_list<pair<Key, T>>, Compare = Compare(), Allocator = Allocator())
      -> multimap<Key, T, Compare, Allocator>;

  template<class InputIterator, class Allocator>
    multimap(InputIterator, InputIterator, Allocator)
      -> multimap<[[redoc("^>")]]iter-key-type<InputIterator>, [[redoc("^>")]]iter-mapped-type<InputIterator>,
                  less<[[redoc("^>")]]iter-key-type<InputIterator>>, Allocator>;

  template<ranges::[[redoc("^:c>")]]input_range R, class Allocator>
    multimap(from_range_t, R&&, Allocator)
      -> multimap<[[redoc("*>")]]range-key-type<R>, [[redoc("*>")]]range-mapped-type<R>, less<[[redoc("*>")]]range-key-type<R>>, Allocator>;

  template<class Key, class T, class Allocator>
    multimap(initializer_list<pair<Key, T>>, Allocator)
      -> multimap<Key, T, less<Key>, Allocator>;
}
[codeblock:end]
[%@lib@member multimap[!operator==]]
[%@lib@member multimap[!operator<]]
