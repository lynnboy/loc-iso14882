[section#deque.syn
    [:en] Header [`<deque>] synopsis
    [:zh_CN] 头文件 [`<deque>] 纲要
]

[%@hdr@def deque]

[codeblock:synopsis]
#include <compare>              // [:en] see [#compare.syn] [:zh_CN] 参见 [#compare.syn]
#include <initializer_list>     // [:en] see [#initializer.list.syn] [:zh_CN] 参见 [#initializer.list.syn]

namespace std {
  // [:en] [#deque], class template [`deque] \
  [:zh_CN] [#deque]，类模板 [`deque]
  template<class T, class Allocator = allocator<T>> class deque;

  template<class T, class Allocator>
    constexpr bool operator==(const deque<T, Allocator>& x, const deque<T, Allocator>& y);
  template<class T, class Allocator>
    constexpr [[redoc("^>")]]synth-three-way-result<T> operator<=>(const deque<T, Allocator>& x,
                                          const deque<T, Allocator>& y);

  template<class T, class Allocator>
    constexpr void swap(deque<T, Allocator>& x, deque<T, Allocator>& y)
      noexcept(noexcept(x.swap(y)));

  // [:en] [#deque.erasure], erasure \
  [:zh_CN] [#deque.erasure]，擦除
  template<class T, class Allocator, class U = T>
    constexpr typename deque<T, Allocator>::size_type
      erase(deque<T, Allocator>& c, const U& value);
  template<class T, class Allocator, class Predicate>
    constexpr typename deque<T, Allocator>::size_type
      erase_if(deque<T, Allocator>& c, Predicate pred);

  namespace pmr {
    template<class T>
      using deque = std::deque<T, polymorphic_allocator<T>>;
  }
}
[codeblock:end]
