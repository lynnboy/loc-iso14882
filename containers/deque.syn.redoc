[section#deque.syn
    [:en] Header [`<deque>] synopsis
    [:zh_CN] 头文件 [`<deque>] 纲要
]

[% [`<deque>] [@deque]]
[%@library <deque> [@deque]]

[codeblock:synopsis]
#include <initializer_list>

namespace std {
  // [:en] [#deque], class template [`deque]
  // [|:zh_CN] [#deque]，类模板 [`deque]
  template <class T, class Allocator = allocator<T>> class deque;

  template <class T, class Allocator>
    bool operator==(const deque<T, Allocator>& x, const deque<T, Allocator>& y);
  template <class T, class Allocator>
    bool operator< (const deque<T, Allocator>& x, const deque<T, Allocator>& y);
  template <class T, class Allocator>
    bool operator!=(const deque<T, Allocator>& x, const deque<T, Allocator>& y);
  template <class T, class Allocator>
    bool operator> (const deque<T, Allocator>& x, const deque<T, Allocator>& y);
  template <class T, class Allocator>
    bool operator>=(const deque<T, Allocator>& x, const deque<T, Allocator>& y);
  template <class T, class Allocator>
    bool operator<=(const deque<T, Allocator>& x, const deque<T, Allocator>& y);

  template <class T, class Allocator>
    void swap(deque<T, Allocator>& x, deque<T, Allocator>& y)
      noexcept(noexcept(x.swap(y)));

  namespace pmr {
    template <class T>
      using deque = std::deque<T, polymorphic_allocator<T>>;
  }
}
[codeblock:end]
