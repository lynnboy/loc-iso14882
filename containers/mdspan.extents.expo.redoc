[section#mdspan.extents.expo
    [:en] Exposition-only helpers
    [:zh_CN] 仅用于阐释的辅助函数
]

[codeblock:declaration]
static constexpr rank_type [[redoc("*>")]]dynamic-index(rank_type i) noexcept;         // [=expos]
[codeblock:end]

[div:description]
[para:expects]
[:en] [`i <= rank()] is [`true].
[:zh_CN] [`i <= rank()] 为 [`true]。

[para:returns]
[:en] The number of [$E_r] with [$r < [`i]] for which [$E_r] is a dynamic extent.
[:zh_CN] 在 [$r < [`i]] 中使得 [$E_r] 为动态尺寸的 [$E_r] 的数量。
[div:end]

[codeblock:declaration]
static constexpr rank_type [[redoc("*>")]]dynamic-index-inv(rank_type i) noexcept;     // [=expos]
[codeblock:end]

[div:description]
[para:expects]
[:en] [`i <= rank_dynamic()] is [`true].
[:zh_CN] [`i <= rank_dynamic()] 为 [`true]。

[para:returns]
[:en] The minimum value of [$r] such that [`[*dynamic-index]([$r] + 1) == i + 1]
is [`true].
[:zh_CN] 使得 [`[*dynamic-index]([$r] + 1) == i + 1] 为 [`true] 的最小的 [$r] 值。
[div:end]

[codeblock:declaration]
constexpr size_t [[redoc("*>")]]fwd-prod-of-extents(rank_type i) const noexcept;       // [=expos]
[codeblock:end]

[div:description]
[para:expects]
[:en] [`i <= rank()] is [`true].
[:zh_CN] [`i <= rank()] 为 [`true]。

[para:returns]
[:en] If [`i > 0] is [`true], the product of [`extent([$k])] for all [$k] in the
range [$`[0, [`i])], otherwise [`1].
[:zh_CN] 当 [`i > 0] 为 [`true] 时，返回 [`extent([$k])] 对于范围 [$`[0, [`i])]
中的所有 [$k] 的乘积，否则返回 [`1]。
[div:end]

[codeblock:declaration]
constexpr size_t [[redoc("*>")]]rev-prod-of-extents(rank_type i) const noexcept;       // [=expos]
[codeblock:end]

[div:description]
[para:expects]
[:en] [`i < rank()] is [`true].
[:zh_CN] [`i < rank()] 为 [`true]。

[para:returns]
[:en] If [`i + 1 < rank()] is [`true], the product of [`extent([$k])] for all
[$k] in the range [$`[[`i + 1], [`rank()])], otherwise [`1].
[:zh_CN] 当 [`i + 1 < rank()] 为 [`true] 时，返回 [`extent([$k])] 对于范围
[$`[[`i + 1], [`rank()])] 中的所有 [$k] 的乘积，否则返回 [`1]。
[div:end]

[codeblock:declaration]
template<class OtherIndexType>
  static constexpr auto [[redoc("*>")]]index-cast(OtherIndexType&& i) noexcept;        // [=expos]
[codeblock:end]

[div:description]
[para:effects]
[list]
[item]
[:en] If [`OtherIndexType] is an integral type other than [`bool], then
equivalent to [`return i;],
[:zh_CN] 如果 [`OtherIndexType] 是除 [`bool] 之外的整型类型，等价于 [`return i;]，
[item]
[:en@~] otherwise, equivalent to [`return static_cast<index_type>(i);].
[:zh_CN@~] 否则，等价于 [`return static_cast<index_type>(i);]。
[list:end]

[begin:note]
[:en] This function will always return an integral type other than [`bool].
[:zh_CN] 此函数总是返回除 [`bool] 之外的整型类型。

[:en] Since this function[=']s call sites are constrained on convertibility of
[`OtherIndexType] to [`index_type], integer-class types can use the
[`static_cast] branch without loss of precision.
[:zh_CN] 由于本函数的调用点均带有从 [`OtherIndexType] 向 [`index_type] 可转换性
的约束，可以在 [`static_cast] 分支使用整数类类型而不损失精度。
[end:note]
[div:end]
