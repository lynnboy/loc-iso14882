[section#flat.multimap.cons.alloc
    [:en] Constructors with allocators
    [:zh_CN] 带分配器的构造函数
]

[para]
[:en] The constructors in this subclause shall not participate in overload
resolution unless [`uses_allocator_v<key_container_type, Alloc>] is [`true]
and [`uses_allocator_v<mapped_container_type, Alloc>] is [`true].
[:zh_CN] 除非 [`uses_allocator_v<key_container_type, Alloc>] 为 [`true] 并且
[`uses_allocator_v<mapped_container_type, Alloc>] 为 [`true]，否则本子条款中的
构造函数都不应当参与重载决议。

[%@lib@ctor flat_multimap]
[codeblock:declaration]
template<class Alloc>
  flat_multimap(const key_container_type& key_cont, const mapped_container_type& mapped_cont,
                const Alloc& a);
template<class Alloc>
  flat_multimap(const key_container_type& key_cont, const mapped_container_type& mapped_cont,
                const key_compare& comp, const Alloc& a);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to [`flat_multimap(key_cont, mapped_cont)] and
[`flat_multimap(key_cont, mapped_cont, comp)], respectively, except that
[`[*c].keys] and [`[*c].values] are constructed with uses-allocator construction
([#allocator.uses.construction]).
[:zh_CN] 分别等价于 [`flat_multimap(key_cont, mapped_cont)] 和
[`flat_multimap(key_cont, mapped_cont, comp)]，但 [`[*c].keys] 和
[`[*c].values] 进行使用分配器的构造（[#allocator.uses.construction]）。

[para:complexity]
[:en] Same as [`flat_multimap(key_cont, mapped_cont)] and
[`flat_multimap(key_cont, mapped_cont, comp)], respectively.
[:zh_CN] 分别与 [`flat_multimap(key_cont, mapped_cont)] 和
[`flat_multimap(key_cont, mapped_cont, comp)] 相同。
[div:end]

[%@lib@ctor flat_multimap]
[codeblock:declaration]
template<class Alloc>
  flat_multimap(sorted_equivalent_t s, const key_container_type& key_cont,
                const mapped_container_type& mapped_cont, const Alloc& a);
template<class Alloc>
  flat_multimap(sorted_equivalent_t s, const key_container_type& key_cont,
                const mapped_container_type& mapped_cont, const key_compare& comp,
                const Alloc& a);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to [`flat_multimap(s, key_cont, mapped_cont)] and
[`flat_multimap(s, key_cont, mapped_cont, comp)], respectively, except that
[`[*c].keys] and [`[*c].values] are constructed with uses-allocator construction
([#allocator.uses.construction]).
[:zh_CN] 分别等价于 [`flat_multimap(s, key_cont, mapped_cont)] 和
[`flat_multimap(s, key_cont, mapped_cont, comp)]，但 [`[*c].keys] 和
[`[*c].values] 进行使用分配器的构造（[#allocator.uses.construction]）。

[para:complexity]
[:en] Linear.
[:zh_CN] 线性。
[div:end]

[%@lib@ctor flat_multimap]
[codeblock:declaration]
template<class Alloc>
  explicit flat_multimap(const Alloc& a);
template<class Alloc>
  flat_multimap(const key_compare& comp, const Alloc& a);
template<class Alloc>
  flat_multimap(const flat_multimap&, const Alloc& a);
template<class Alloc>
  flat_multimap(flat_multimap&&, const Alloc& a);
template<class InputIterator, class Alloc>
  flat_multimap(InputIterator first, InputIterator last, const Alloc& a);
template<class InputIterator, class Alloc>
  flat_multimap(InputIterator first, InputIterator last, const key_compare& comp,
                const Alloc& a);
template<class InputIterator, class Alloc>
  flat_multimap(sorted_equivalent_t, InputIterator first, InputIterator last,
                const Alloc& a);
template<class InputIterator, class Alloc>
  flat_multimap(sorted_equivalent_t, InputIterator first, InputIterator last,
                const key_compare& comp, const Alloc& a);
template<[[redoc("*:c>")]]container-compatible-range<value_type> R, class Alloc>
  flat_multimap(from_range_t, R&& rg, const Alloc& a);
template<[[redoc("*:c>")]]container-compatible-range<value_type> R, class Alloc>
  flat_multimap(from_range_t, R&& rg, const key_compare& comp, const Alloc& a);
template<class Alloc>
  flat_multimap(initializer_list<value_type> il, const Alloc& a);
template<class Alloc>
  flat_multimap(initializer_list<value_type> il, const key_compare& comp, const Alloc& a);
template<class Alloc>
  flat_multimap(sorted_equivalent_t, initializer_list<value_type> il, const Alloc& a);
template<class Alloc>
  flat_multimap(sorted_equivalent_t, initializer_list<value_type> il,
                const key_compare& comp, const Alloc& a);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to the corresponding non-allocator constructors, except that
[`[*c].keys] and [`[*c].values] are constructed with uses-allocator construction
([#allocator.uses.construction]).
[:zh_CN] 等价于对应的无分配器构造函数，但 [`[*c].keys] 和 [`[*c].values] 进行
使用分配器的构造（[#allocator.uses.construction]）。
[div:end]
