[section#container.rev.reqmts
    [:en] Reversible containers requirements
    [:zh_CN] 可反向容器的规定
]

[<
@applyTo(['?indexcont'])
def indexcont(_1):
    return f'''[%@lib@raw [`{_1}][![:en]reversible containers[:zh_CN]可反向容器]]
    [%@lib@raw [`array][![`{_1}]]]
    [%@lib@raw [`deque][![`{_1}]]]
    [%@lib@raw [`list][![`{_1}]]]
    [%@lib@raw [`vector][![`{_1}]]]
    [%@lib@raw [`map][![`{_1}]]]
    [%@lib@raw [`set][![`{_1}]]]
    [%@lib@raw [`multiset][![`{_1}]]]
    [%@lib@raw [`multimap][![`{_1}]]]
    [%@lib@raw [`unordered_map][![`{_1}]]]
    [%@lib@raw [`unordered_set][![`{_1}]]]
    [%@lib@raw [`unordered_multiset][![`{_1}]]]
    [%@lib@raw [`unordered_multimap][![`{_1}]]]
    [%@lib@raw [`flat_map][![`{_1}]]]
    [%@lib@raw [`flat_set][![`{_1}]]]
    [%@lib@raw [`flat_multiset][![`{_1}]]]
    [%@lib@raw [`flat_multimap][![`{_1}]]]'''
>]

[para]
[:en] A type [`X] meets the [+reversible[!container]] requirements if [`X] meets
the container requirements, the iterator type of [`X] belongs to the
bidirectional or random access iterator categories ([#iterator.requirements]),
and the following types and expressions are well-formed and have the specified
semantics.
[:zh_CN] 如果类型 [`X] 满足容器的规定，[`X] 的迭代器类型属于双向或随机访问迭代器
类别（[#iterator.requirements]），并且下列各类型和表达式均良构且具有规定的语义，
则 [`X] 满足[+:adj 可反向[!容器]]的规定。

[?indexcont reverse_iterator]
[codeblock:declaration]
typename X::reverse_iterator
[codeblock:end]

[div:description]
[para:result]
[:en] The type [`reverse_iterator<X::iterator>], an iterator type whose value
type is [`T].
[:zh_CN] 类型 [`reverse_iterator<X::iterator>]，一种值类型为 [`T] 的迭代器类型。
[div:end]

[?indexcont const_reverse_iterator]
[codeblock:declaration]
typename X::const_reverse_iterator
[codeblock:end]

[div:description]
[para:result]
[:en] The type [`reverse_iterator<X::const_iterator>], a constant iterator type
whose value type is [`T].
[:zh_CN] 类型 [`reverse_iterator<X::const_iterator>]，一种值类型为 [`T] 的
常量迭代器类型。
[div:end]

[?indexcont rbegin]
[codeblock:declaration]
a.rbegin()
[codeblock:end]

[div:description]
[para:result]
[:en] [`reverse_iterator]; [`const_reverse_iterator] for constant [`a].
[:zh_CN] [`reverse_iterator]；对于常量 [`a] 为 [`const_reverse_iterator]。

[para:returns]
[`reverse_iterator(end())]

[para:complexity]
[:en] Constant.
[:zh_CN] 常量。
[div:end]

[?indexcont rend]
[codeblock:declaration]
a.rend()
[codeblock:end]

[div:description]
[para:result]
[:en] [`reverse_iterator]; [`const_reverse_iterator] for constant [`a].
[:zh_CN] [`reverse_iterator]；对于常量 [`a] 为 [`const_reverse_iterator]。

[para:returns]
[`reverse_iterator(begin())]

[para:complexity]
[:en] Constant.
[:zh_CN] 常量。
[div:end]

[?indexcont crbegin]
[codeblock:declaration]
a.crbegin()
[codeblock:end]

[div:description]
[para:result]
[:en] [`const_reverse_iterator].
[:zh_CN] [`const_reverse_iterator]。

[para:returns]
[`[`:key const_cast]<X [`:key const]&>(a).rbegin();]

[para:complexity]
[:en] Constant.
[:zh_CN] 常量。
[div:end]

[?indexcont crend]
[codeblock:declaration]
a.crend()
[codeblock:end]

[div:description]
[para:result]
[:en] [`const_reverse_iterator].
[:zh_CN] [`const_reverse_iterator]。

[para:returns]
[`[`:key const_cast]<X [`:key const]&>(a).rend();]

[para:complexity]
[:en] Constant.
[:zh_CN] 常量。
[div:end]
