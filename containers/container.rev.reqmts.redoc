[section#container.rev.reqmts
    [:en] Reversible containers requirements
    [:zh_CN] 可反向容器的规定
]

[<
@applyTo(['?indexcont'])
def indexcont(_1):
    return f'''[%@lib@raw [`{_1}][![:en]containers[:zh_CN]容器]]
    [%@lib@raw [`array][![`{_1}]]]
    [%@lib@raw [`deque][![`{_1}]]]
    [%@lib@raw [`list][![`{_1}]]]
    [%@lib@raw [`vector][![`{_1}]]]
    [%@lib@raw [`map][![`{_1}]]]
    [%@lib@raw [`set][![`{_1}]]]
    [%@lib@raw [`multiset][![`{_1}]]]
    [%@lib@raw [`multimap][![`{_1}]]]
    [%@lib@raw [`unordered_map][![`{_1}]]]
    [%@lib@raw [`unordered_set][![`{_1}]]]
    [%@lib@raw [`unordered_multiset][![`{_1}]]]
    [%@lib@raw [`unordered_multimap][![`{_1}]]]'''
>]

[para]
[:en] A type [`X] meets the [+reversible[!container]] requirements if [`X] meets
the container requirements, the iterator type of [`X] belongs to the
bidirectional or random access iterator categories ([#iterator.requirements]),
and the following types and expressions are well-formed and have the specified
semantics.
[:zh_CN] 如果类型 [`X] 满足容器的规定，[`X] 的迭代器类型属于双向或随机访问迭代器
类别（[#iterator.requirements]），并且下列各类型和表达式均良构且具有规定的语义，
则 [`X] 满足[+:adj 可反向[!容器]]的规定。

[?indexcont reverse_iterator]
[codeblock:declaration]
typename X::reverse_iterator
[codeblock:end]

[div:description]
[para:result]
[:en] The type [`reverse_iterator<X::iterator>], an iterator type whose value
type is [`T].
[:zh_CN] 类型 [`reverse_iterator<X::iterator>]，一种值类型为 [`T] 的迭代器类型。
[div:end]

[?indexcont const_reverse_iterator]
[codeblock:declaration]
typename X::const_reverse_iterator
[codeblock:end]

[div:description]
[para:result]
[:en] The type [`reverse_iterator<X::const_iterator>], a constant iterator type
whose value type is [`T].
[:zh_CN] 类型 [`reverse_iterator<X::const_iterator>]，一种值类型为 [`T] 的
常量迭代器类型。
[div:end]

[?indexcont rbegin]
[codeblock:declaration]
a.rbegin()
[codeblock:end]

[div:description]
[para:result]
[:en] [`reverse_iterator]; [`const_reverse_iterator] for constant [`a].
[:zh_CN] [`reverse_iterator]；对于常量 [`a] 为 [`const_reverse_iterator]。

[para:returns]
[`reverse_iterator(end())]

[para:complexity]
[:en] Constant.
[:zh_CN] 常量。
[div:end]

[?indexcont rend]
[codeblock:declaration]
a.rend()
[codeblock:end]

[div:description]
[para:result]
[:en] [`reverse_iterator]; [`const_reverse_iterator] for constant [`a].
[:zh_CN] [`reverse_iterator]；对于常量 [`a] 为 [`const_reverse_iterator]。

[para:returns]
[`reverse_iterator(begin())]

[para:complexity]
[:en] Constant.
[:zh_CN] 常量。
[div:end]

[?indexcont crbegin]
[codeblock:declaration]
a.crbegin()
[codeblock:end]

[div:description]
[para:result]
[:en] [`const_reverse_iterator].
[:zh_CN] [`const_reverse_iterator]。

[para:returns]
[`[`:key const_cast]<X [`:key const]&>(a).rbegin();]

[para:complexity]
[:en] Constant.
[:zh_CN] 常量。
[div:end]

[?indexcont crend]
[codeblock:declaration]
a.crend()
[codeblock:end]

[div:description]
[para:result]
[:en] [`const_reverse_iterator].
[:zh_CN] [`const_reverse_iterator]。

[para:returns]
[`[`:key const_cast]<X [`:key const]&>(a).rend();]

[para:complexity]
[:en] Constant.
[:zh_CN] 常量。
[div:end]

[para]
[:en]
Unless otherwise specified (see [#associative.reqmts.except], [#unord.req.except],
[#deque.modifiers], and [#vector.modifiers]) all container types defined in this
Clause meet the following additional requirements:
[:zh_CN]
除非另有规定（参见 [#associative.reqmts.except]，[#unord.req.except]，
[#deque.modifiers]，和 [#vector.modifiers]），本章中所定义的所有容器类型都满足
以下的额外规定：

[list]
[item]
[:en] if an exception is thrown by an [`insert()] or [`emplace()] function while
inserting a single element, that function has no effects.
[:zh_CN] 如果在插入单个元素时 [`insert()] 或 [`emplace()] 函数抛出了异常，则这个
函数没有效果。

[item]
[:en] if an exception is thrown by a [`push_back()], [`push_front()],
[`emplace_back()], or [`emplace_front()] function, that function has no effects.
[:zh_CN] 如果 [`push_back()]，[`push_front()]，[`emplace_back()]，或
[`emplace_front()] 函数抛出了异常，则这个函数没有效果。

[item]
[:en] no [`erase()], [`clear()], [`pop_back()] or [`pop_front()] function throws
an exception.
[:zh_CN] [`erase()]，[`clear()]，[`pop_back()] 或 [`pop_front()] 函数都不抛出
任何异常。

[item]
[:en] no copy constructor or assignment operator of a returned iterator throws
an exception.
[:zh_CN] 所返回的迭代器的复制构造函数或赋值运算符都不抛出任何异常。

[item]
[:en] no [`swap()] function throws an exception.
[:zh_CN] [`swap()] 函数都不抛出任何异常。

[item]
[:en] no [`swap()] function invalidates any references, pointers, or iterators
referring to the elements of the containers being swapped.
[:zh_CN] [`swap()] 函数都不会使指向所交换的容器的元素的任何引用、指针或迭代器
失效。

[begin:note]
[:en] The [`end()] iterator does not refer to any element, so it can be
invalidated.
[:zh_CN] [`end()] 迭代器不指代任何元素，因此它可能失效。
[end:note]
[list:end]

[para]
[:en]
Unless otherwise specified (either explicitly or by defining a function in terms
of other functions), invoking a container member function or passing a container
as an argument to a library function shall not invalidate iterators to, or
change the values of, objects within that container.
[:zh_CN]
除非另有规定（明确的，或者依据其他函数定义某函数而暗含），调用容器的成员函数或者
将容器作为实参传递给程序库函数，不能使其迭代器无效，或者改变该容器中的对象的值。

[para]
[:en]
A [+:adj contiguous[!container]] is a container whose member types [`iterator]
and [`const_iterator] meet the [^:oc RandomAccessIterator] requirements
([#random.access.iterators]) and model [`:c contiguous_iterator]
([#iterator.concept.contiguous]).
[:zh_CN]
[+:adj 连续[!容器]]是容器，其成员类型 [`iterator] 和 [`const_iterator] 满足
[^:oc RandomAccessIterator] 的规定（[#random.access.iterators]），并构成
[`:c contiguous_iterator]（[#iterator.concept.contiguous]）。
