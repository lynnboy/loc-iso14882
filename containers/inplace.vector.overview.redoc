[section#inplace.vector.overview
    [:en] Overview
    [:zh_CN] 概要
]

[%@lib inplace_vector]

[para]
[:en] An [`inplace_vector] is a contiguous container.
[:zh_CN] [`inplace_vector] 是一种连续容器。

[:en] Its capacity is fixed and its elements are stored within the
[`inplace_vector] object itself.
[:zh_CN] 其容量固定，且其元素都存储于 [`inplace_vector] 对象自身之内。

[para]
[:en] An [`inplace_vector] meets all of the requirements of a container
([#container.reqmts]), of a reversible container ([#container.rev.reqmts]), of
a contiguous container, and of a sequence container, including most of the
optional sequence container requirements ([#sequence.reqmts]).
[:zh_CN] [`inplace_vector] 满足容器（[#container.reqmts]），可反向容器
（[#container.rev.reqmts]），连续容器和序列容器的所有规定，包括大多数可选的序列容器规定
（[#sequence.reqmts]）。

[:en] The exceptions are the [`push_front], [`prepend_range], [`pop_front], and
[`emplace_front] member functions, which are not provided.
[:zh_CN] 其例外是并未提供成员函数 [`push_front]，[`prepend_range]，[`pop_front]，
和 [`emplace_front]。

[:en] Descriptions are provided here only for operations on [`inplace_vector]
that are not described in one of these tables or for operations where there is
additional semantic information.
[:zh_CN] 此处给出的说明仅包括未被这些表格之一所描述的 [`inplace_vector] 的操作，以及
具有额外的语义信息的操作。

[para]
[:en] For any [`N], [`inplace_vector<T, N>::iterator] and
[`inplace_vector<T, N>::const_iterator] meet the constexpr iterator requirements.
[:zh_CN] 对于任意 [`N]，[`inplace_vector<T, N>::iterator] 和
[`inplace_vector<T, N>::const_iterator] 满足 constexpr 迭代器的规定。

[para]
[:en] For any [$[`N] > 0], if [`T] is not trivially copyable or
[`is_trivially_default_constructible_v<T>] is [`false], then no
[`inplace_vector<T, N>] member functions are usable in constant expressions.
[:zh_CN] 对于任意 [$[`N] > 0]，如果 [`T] 并非可平凡复制的或
[`is_trivially_default_constructible_v<T>] 为 [`false]，则
[`inplace_vector<T, N>] 的成员函数都不能在常量表达式中使用。

[para]
[:en] Any member function of [`inplace_vector<T, N>] that would cause the size
to exceed [`N] throws an exception of type [`bad_alloc].
[:zh_CN] [`inplace_vector<T, N>] 的任何将会造成大小超过 [`N] 的成员函数都将抛出
[`bad_alloc] 类型的异常。

[para]
[:en] Let [`IV] denote a specialization of [`inplace_vector<T, N>].
[:zh_CN] 令 [`IV] 代表 [`inplace_vector<T, N>] 的特例。

[:en] If [`N] is zero, then [`IV] is both trivial and empty.
[:zh_CN] 若 [`N] 为零，则 [`IV] 既为平凡的也是空的。

[:en] Otherwise:
[:zh_CN] 否则：

[list]
[item]
[:en] If [`is_trivially_copy_constructible_v<T>] is [`true], then
[`IV] has a trivial copy constructor.
[:zh_CN] 如果 [`is_trivially_copy_constructible_v<T>] 为 [`true]，则
[`IV] 具有平凡的复制构造函数。

[item]
[:en] If [`is_trivially_move_constructible_v<T>] is [`true], then
[`IV] has a trivial move constructor.
[:zh_CN] 如果 [`is_trivially_move_constructible_v<T>] 为 [`true]，则
[`IV] 具有平凡的移动构造函数。

[item]
[:en] If [`is_trivially_destructible_v<T>] is [`true], then:
[:zh_CN] 如果 [`is_trivially_destructible_v<T>] 为 [`true]，则：

[list]
[item]
[:en] [`IV] has a trivial destructor.
[:zh_CN] [`IV] 具有平凡的析构函数。

[item]
[:en] If
[:zh_CN] 如果
[codeblock]
  is_trivially_copy_constructible_v<T> && is_trivially_copy_assignable_v<T>
[codeblock:end]
[:en@~] is [`true], then [`IV] has a trivial copy assignment operator.
[:zh_CN@~] 为 [`true]，则 [`IV] 具有平凡的复制赋值运算符。

[item]
[:en] If
[:zh_CN] 如果
[codeblock]
  is_trivially_move_constructible_v<T> && is_trivially_move_assignable_v<T>
[codeblock:end]
[:en@~] is [`true], then [`IV] has a trivial move assignment operator.
[:zh_CN@~] 为 [`true]，则 [`IV] 具有平凡的移动赋值运算符。
[list:end]
[list:end]

[codeblock:synopsis]
namespace std {
  template<class T, size_t N>
  class inplace_vector {
  public:
    // [:en] types: \
    [:zh_CN] 类型：
    using value_type             = T;
    using pointer                = T*;
    using const_pointer          = const T*;
    using reference              = value_type&;
    using const_reference        = const value_type&;
    using size_type              = size_t;
    using difference_type        = ptrdiff_t;
    using iterator               = [[redoc("[?impdefx"
          " [:en] type of [`inplace_vector::iterator]"
        "[:zh_CN] [`inplace_vector::iterator] 的类型]")]]; // [:en] see [#container.requirements] [:zh_CN] 参见 [#container.requirements]
    using const_iterator         = [[redoc("[?impdefx"
          " [:en] type of [`inplace_vector::const_iterator]"
        "[:zh_CN] [`inplace_vector::const_iterator] 的类型]")]]; // [:en] see [#container.requirements] [:zh_CN] 参见 [#container.requirements]
    using reverse_iterator       = std::reverse_iterator<iterator>;
    using const_reverse_iterator = std::reverse_iterator<const_iterator>;

    // [:en] [#inplace.vector.cons], construct/copy/destroy \
    [:zh_CN] [#inplace.vector.cons]，构造/复制/销毁
    constexpr inplace_vector() noexcept;
    constexpr explicit inplace_vector(size_type n);                         // [=freestanding-deleted]
    constexpr inplace_vector(size_type n, const T& value);                  // [=freestanding-deleted]
    template<class InputIterator>
      constexpr inplace_vector(InputIterator first, InputIterator last);    // [=freestanding-deleted]
    template<[[redoc("*:c>")]]container-compatible-range<T> R>
      constexpr inplace_vector(from_range_t, R&& rg);                       // [=freestanding-deleted]
    constexpr inplace_vector(const inplace_vector&);
    constexpr inplace_vector(inplace_vector&&)
      noexcept(N == 0 || is_nothrow_move_constructible_v<T>);
    constexpr inplace_vector(initializer_list<T> il);                       // [=freestanding-deleted]
    constexpr ~inplace_vector();
    constexpr inplace_vector& operator=(const inplace_vector& other);
    constexpr inplace_vector& operator=(inplace_vector&& other)
      noexcept(N == 0 || (is_nothrow_move_assignable_v<T> &&
                          is_nothrow_move_constructible_v<T>));
    constexpr inplace_vector& operator=(initializer_list<T>);               // [=freestanding-deleted]
    template<class InputIterator>
      constexpr void assign(InputIterator first, InputIterator last);       // [=freestanding-deleted]
    template<[[redoc("*:c>")]]container-compatible-range<T> R>
      constexpr void assign_range(R&& rg);                                  // [=freestanding-deleted]
    constexpr void assign(size_type n, const T& u);                         // [=freestanding-deleted]
    constexpr void assign(initializer_list<T> il);                          // [=freestanding-deleted]

    // [:en] iterators \
    [:zh_CN] 迭代器
    constexpr iterator               begin()         noexcept;
    constexpr const_iterator         begin()   const noexcept;
    constexpr iterator               end()           noexcept;
    constexpr const_iterator         end()     const noexcept;
    constexpr reverse_iterator       rbegin()        noexcept;
    constexpr const_reverse_iterator rbegin()  const noexcept;
    constexpr reverse_iterator       rend()          noexcept;
    constexpr const_reverse_iterator rend()    const noexcept;

    constexpr const_iterator         cbegin()  const noexcept;
    constexpr const_iterator         cend()    const noexcept;
    constexpr const_reverse_iterator crbegin() const noexcept;
    constexpr const_reverse_iterator crend()   const noexcept;

    // [:en] [#inplace.vector.capacity], size/capacity \
    [:zh_CN] [#inplace.vector.capacity]，大小/容量
    constexpr bool empty() const noexcept;
    constexpr size_type size() const noexcept;
    static constexpr size_type max_size() noexcept;
    static constexpr size_type capacity() noexcept;
    constexpr void resize(size_type sz);                                    // [=freestanding-deleted]
    constexpr void resize(size_type sz, const T& c);                        // [=freestanding-deleted]
    static constexpr void reserve(size_type n);                             // [=freestanding-deleted]
    static constexpr void shrink_to_fit() noexcept;

    // [:en] element access \
    [:zh_CN] 元素访问
    constexpr reference       operator[](size_type n);
    constexpr const_reference operator[](size_type n) const;
    constexpr reference       at(size_type n);                              // [=freestanding-deleted]
    constexpr const_reference at(size_type n) const;                        // [=freestanding-deleted]
    constexpr reference       front();
    constexpr const_reference front() const;
    constexpr reference       back();
    constexpr const_reference back() const;

    // [:en] [#inplace.vector.data], data access \
    [:zh_CN] [#inplace.vector.data]，数据访问
    constexpr       T* data()       noexcept;
    constexpr const T* data() const noexcept;

    // [:en] [#inplace.vector.modifiers], modifiers \
    [:zh_CN] [#inplace.vector.modifiers]，改动函数
    template<class... Args>
      constexpr reference emplace_back(Args&&... args);                     // [=freestanding-deleted]
    constexpr reference push_back(const T& x);                              // [=freestanding-deleted]
    constexpr reference push_back(T&& x);                                   // [=freestanding-deleted]
    template<[[redoc("*:c>")]]container-compatible-range<T> R>
      constexpr void append_range(R&& rg);                                  // [=freestanding-deleted]
    constexpr void pop_back();

    template<class... Args>
      constexpr pointer try_emplace_back(Args&&... args);
    constexpr pointer try_push_back(const T& x);
    constexpr pointer try_push_back(T&& x);
    template<[[redoc("*:c>")]]container-compatible-range<T> R>
      constexpr ranges::borrowed_iterator_t<R> try_append_range(R&& rg);

    template<class... Args>
      constexpr reference unchecked_emplace_back(Args&&... args);
    constexpr reference unchecked_push_back(const T& x);
    constexpr reference unchecked_push_back(T&& x);

    template<class... Args>
      constexpr iterator emplace(const_iterator position, Args&&... args);  // [=freestanding-deleted]
    constexpr iterator insert(const_iterator position, const T& x);         // [=freestanding-deleted]
    constexpr iterator insert(const_iterator position, T&& x);              // [=freestanding-deleted]
    constexpr iterator insert(const_iterator position, size_type n,         // [=freestanding-deleted]
                              const T& x);
    template<class InputIterator>
      constexpr iterator insert(const_iterator position,                    // [=freestanding-deleted]
                                InputIterator first, InputIterator last);
    template<[[redoc("*:c>")]]container-compatible-range<T> R>
      constexpr iterator insert_range(const_iterator position, R&& rg);     // [=freestanding-deleted]
    constexpr iterator insert(const_iterator position,                      // [=freestanding-deleted]
                              initializer_list<T> il);
    constexpr iterator erase(const_iterator position);
    constexpr iterator erase(const_iterator first, const_iterator last);
    constexpr void swap(inplace_vector& x)
      noexcept(N == 0 || (is_nothrow_swappable_v<T> &&
                          is_nothrow_move_constructible_v<T>));
    constexpr void clear() noexcept;

    constexpr friend bool operator==(const inplace_vector& x,
                                     const inplace_vector& y);
    constexpr friend [[redoc("*>")]]synth-three-way-result<T>
      operator<=>(const inplace_vector& x, const inplace_vector& y);
    constexpr friend void swap(inplace_vector& x, inplace_vector& y)
      noexcept(N == 0 || (is_nothrow_swappable_v<T> &&
                          is_nothrow_move_constructible_v<T>))
      { x.swap(y); }
  };
}
[codeblock:end]
