[section#sequence.reqmts
    [:en] Sequence containers
    [:zh_CN] 序列容器
]

[para]
[:en] A sequence container organizes a finite set of objects, all of the same
type, into a strictly linear arrangement.
[:zh_CN] 序列容器组织有限的一组对象，它们全部具有相同类型，并按严格的线性排布。

[:en] The library provides the following basic kinds of sequence containers:
[`vector], [`inplace_vector], [`forward_list], [`list], and [`deque].
[:zh_CN] 程序库提供了以下基本序列容器：[`vector]，[`inplace_vector]，[`forward_list]，
[`list]，和 [`deque]。

[:en] In addition, [`array] is provided as a sequence container which provides
limited sequence operations because it has a fixed number of elements.
[:zh_CN] 此外，[`array] 也作为序列容器提供，但具有有限的序列操作，因为它具有固定
数量的元素。

[:en] The library also provides container adaptors that make it easy to
construct abstract data types, such as [`stack]s, [`queue]s, [`flat_map]s,
[`flat_multimap]s, [`flat_set]s, or [`flat_multiset]s, out of the basic
sequence container kinds (or out of other program-defined sequence containers).
[:zh_CN] 程序库还提供了容器适配器，以便从基本序列容器的种类（或者从程序定义的
其他序列容器）构造如 [`stack]，[`queue]，[`flat_map]，[`flat_multimap]，
[`flat_set]，或者 [`flat_multiset] 这样的抽象数据类型。

[para]
[:en] In this subclause,
[:zh_CN] 本子条款中，
[list]
[item]
[:en] [`X] denotes a sequence container class,
[:zh_CN] [`X] 代表一种序列容器类，
[item]
[:en] [`a] denotes a value of type [`X] containing elements of type [`T],
[:zh_CN] [`a] 代表 [`X] 类型的值，并包含 [`T] 类型的元素，
[item]
[:en] [`u] denotes the name of a variable being declared,
[:zh_CN] [`u] 代表所声明的变量的名字，
[item]
[:en] [`A] denotes [`X::allocator_type] if the [~qualified-id]
[`X::allocator_type] is valid and denotes a type ([#temp.deduct]) and
[`allocator<T>] if it doesn[=']t,
[:zh_CN] 当[~限定标识] [`X::allocator_type] 有效并代表某个类型（[#temp.deduct]）
时 [`A] 代表 [`X::allocator_type]，否则 [`A] 代表 [`std::allocator<T>]，
[item]
[:en] [`i] and [`j] denote iterators that meet the [^:oc InputIterator]
requirements and refer to elements implicitly convertible to [`value_type],
[:zh_CN] [`i] 和 [`j] 代表符合 [^:oc InputIterator] 规定的迭代器，并指代可以隐式
转换为 [`value_type] 的元素，
[item]
[:en] [``[i, j)] denotes a valid range,
[:zh_CN] [``[i, j)] 代表有效的范围，
[item]
[:en] [`rg] denotes a value of type [`R] that models
[`[*:c container-compatible-range]<T>],
[:zh_CN] [`rg] 代表构成了 [`[*:c container-compatible-range]<T>] 的类型 [`R]
的值，
[item]
[:en] [`il] designates an object of type [`initializer_list<value_type>],
[:zh_CN] [`il] 代表 [`initializer_list<value_type>] 类型的对象，
[item]
[:en] [`n] denotes a value of type [`X::size_type],
[:zh_CN] [`n] 代表 [`X::size_type] 类型的值，
[item]
[:en] [`p] denotes a valid constant iterator to [`a],
[:zh_CN] [`p] 代表 [`a] 中的有效常量迭代器，
[item]
[:en] [`q] denotes a valid dereferenceable constant iterator to [`a],
[:zh_CN] [`q] 代表 [`a] 中的有效可解引用的常量迭代器，
[item]
[:en] [``[q1, q2)] denotes a valid range of constant iterators in [`a],
[:zh_CN] [``[q1, q2)] 代表 [`a] 中的常量迭代器的有效范围，
[item]
[:en] [`t] denotes an lvalue or a const rvalue of [`X::value_type], and
[:zh_CN] [`t] 代表 [`X::value_type] 的左值或 const 右值，而
[item]
[:en] [`rv] denotes a non-const rvalue of [`X::value_type].
[:zh_CN] [`rv] 代表 [`X::value_type] 的非 const 右值。
[item]
[:en] [`Args] denotes a template parameter pack;
[:zh_CN] [`Args] 代表模板形参包组；
[item]
[:en] [`args] denotes a function parameter pack with the pattern [`Args&&].
[:zh_CN] [`args] 代表模式为 [`Args&&] 的函数形参包组。
[list:end]

[para]
[:en] The complexities of the expressions are sequence dependent.
[:zh_CN] 各表达式的复杂度依赖于其序列。

[<
@applyTo(['?indexcont'])
def indexcont(_1):
    return f'''[%@lib@raw [`{_1}][![:en]sequence containers[:zh_CN]序列容器]]
    [%@lib@raw [`deque][![`{_1}]]]
    [%@lib@raw [`forward_list][![`{_1}]]]
    [%@lib@raw [`list][![`{_1}]]]
    [%@lib@raw [`vector][![`{_1}]]]'''
>]

[para]
[:en] A type [`X] meets the [+:adj sequence[!container]] requirements if [`X]
meets the container requirements and the following statements and expressions
are well-formed and have the specified semantics.
[:zh_CN] 如果类型 [`X] 满足容器的规定，并且下列各语句和表达式均良构且具有规定的
语义，则 [`X] 满足[+:adj 序列[!容器]]的规定。

[codeblock:declaration]
X u(n, t);
[codeblock:end]

[div:description]
[para:expects]
[:en] [`T] is [^:oc CopyInsertable] into [`X].
[:zh_CN] [`T] 为向 [`X] 中 [^:oc CopyInsertable]。

[para:effects]
[:en] Constructs a sequence container with [`n] copies of [`t].
[:zh_CN] 构造具有 [`n] 个 [`t] 的副本的序列容器。

[para:ensures]
[:en] [`distance(begin(), end()) == n] is [`true].
[:zh_CN] [`distance(begin(), end()) == n] 为 [`true]。
[div:end]

[codeblock:declaration]
X u(i, j);
[codeblock:end]

[div:description]
[para:expects]
[:en] [`T] is [^:oc EmplaceConstructible] into [`X] from [`*i].
[:zh_CN] [`T] 为以 [`*i] 向 [`X] 中 [^:oc EmplaceConstructible]。

[:en] For [`vector], if the iterator does not meet the [^:oc ForwardIterator]
requirements ([#forward.iterators]), [`T] is also [^:oc MoveInsertable] into [`X].
[:zh_CN] 对于 [`vector]，如果迭代器不满足 [^:oc ForwardIterator] 的规定
（[#forward.iterators]），则 [`T] 也向 [`X] 中 [^:oc MoveInsertable]。

[para:effects]
[:en] Constructs a sequence container equal to the range [``[i, j)].
[:zh_CN] 构造等于范围 [``[i, j)] 的一个序列容器。

[:en] Each iterator in the range [=range(i,j)] is dereferenced exactly once.
[:zh_CN] 范围 [=range(i,j)] 中的每个迭代器都恰好进行一次解引用。

[para:ensures]
[:en] [`distance(begin(), end()) == distance(i, j)] is [`true].
[:zh_CN] [`distance(begin(), end()) == distance(i, j)] 为 [`true]。
[div:end]

[codeblock:declaration]
X(from_range, rg)
[codeblock:end]

[div:description]
[para:expects]
[:en] [`T] is [^:oc EmplaceConstructible] into [`X] from [`*ranges::begin(rg)].
[:zh_CN] [`T] 为以 [`*ranges::begin(rg)] 向 [`X] 中 [^:oc EmplaceConstructible]。

[:en] For [`vector], if [`R] models neither [`ranges::[`:c sized_range]] nor
[`ranges::[`:c forward_range]], [`T] is also [^:oc MoveInsertable] into [`X].
[:zh_CN] 对于 [`vector]，如果 [`R] 不构成 [`ranges::[`:c sized_range]] 或
[`ranges::[`:c forward_range]]，则 [`T] 也向 [`X] 中 [^:oc MoveInsertable]。

[para:effects]
[:en] Constructs a sequence container equal to the range [`rg].
[:zh_CN] 构造等于范围 [`rg] 的一个序列容器。

[:en] Each iterator in the range [`rg] is dereferenced exactly once.
[:zh_CN] 范围 [`rg] 中的每个迭代器都恰好进行一次解引用。

[para:ensures]
[:en] [`distance(begin(), end()) == ranges::distance(rg)] is [`true].
[:zh_CN] [`distance(begin(), end()) == ranges::distance(rg)] 为 [`true]。
[div:end]

[codeblock:declaration]
X(il)
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to [`X(il.begin(), il.end())].
[:zh_CN] 等价于 [`X(il.begin(), il.end())]。
[div:end]

[codeblock:declaration]
a = il
[codeblock:end]

[div:description]
[para:result]
[:en] [`X&].
[:zh_CN] [`X&]。

[para:expects]
[:en] [`T] is [^:oc CopyInsertable] into [`X] and [^:oc CopyAssignable].
[:zh_CN] [`T] 为向 [`X] 中 [^:oc CopyInsertable]，且为 [^:oc CopyAssignable]。

[para:effects]
[:en] Assigns the range [=range(il.begin(),il.end())] into [`a].
[:zh_CN] 将范围 [=range(il.begin(),il.end())] 赋值到 [`a] 中。

[:en] All existing elements of [`a] are either assigned to or destroyed.
[:zh_CN] [`a] 的所有现存元素要么被赋值要么被销毁。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[?indexcond emplace]
[codeblock:declaration]
a.emplace(p, args)
[codeblock:end]

[div:description]
[para:result]
[:en] [`iterator].
[:zh_CN] [`iterator]。

[para:expects]
[:en] [`T] is [^:oc EmplaceConstructible] into [`X] from [`args].
[:zh_CN] [`T] 为以 [`args] 向 [`X] 中 [^:oc EmplaceConstructible]。

[:en] For [`vector], [`inplace_vector], and [`deque], [`T] is also
[^:oc MoveInsertable] into [`X] and [^:oc MoveAssignable].
[:zh_CN] 对于 [`vector]、[`inplace_vector] 和 [`deque]，[`T] 也为向 [`X] 中
[^:oc MoveInsertable] 且为 [^:oc MoveAssignable]。

[para:effects]
[:en] Inserts an object of type [`T] constructed with
[`std::forward<Args>(args)...] before [`p].
[:zh_CN] 在 [`p] 之前插入一个以 [`std::forward<Args>(args)...] 构造的 [`T]
类型的对象。

[begin:note]
[:en] [`args] can directly or indirectly refer to a value in [`a].
[:zh_CN] [`args] 可能直接或间接指代 [`a] 中的某个值。
[end:note]

[para:returns]
[:en] An iterator that points to the new element.
[:zh_CN] 一个指向新元素的迭代器。
[div:end]

[?indexcond insert]
[codeblock:declaration]
a.insert(p, t)
[codeblock:end]

[div:description]
[para:result]
[:en] [`iterator].
[:zh_CN] [`iterator]。

[para:expects]
[:en] [`T] is [^:oc CopyInsertable] into [`X].
[:zh_CN] [`T] 为向 [`X] 中 [^:oc CopyInsertable]。

[:en] For [`vector], [`inplace_vector], and [`deque], [`T] is also
[^:oc CopyAssignable].
[:zh_CN] 对于 [`vector]、[`inplace_vector] 和 [`deque]，[`T] 也为
[^:oc CopyAssignable]。

[para:effects]
[:en] Inserts a copy of [`t] before [`p].
[:zh_CN] 在 [`p] 之前插入 [`t] 的一个副本。

[para:returns]
[:en] An iterator that points to the copy of [`t] inserted into [`a].
[:zh_CN] 一个迭代器，指向插入到 [`a] 中的 [`t] 的副本。
[div:end]

[codeblock:declaration]
a.insert(p, rv)
[codeblock:end]

[div:description]
[para:result]
[:en] [`iterator].
[:zh_CN] [`iterator]。

[para:expects]
[:en] [`T] is [^:oc MoveInsertable] into [`X].
[:zh_CN] [`T] 为向 [`X] 中 [^:oc MoveInsertable]。

[:en] For [`vector], [`inplace_vector], and [`deque], [`T] is also
[^:oc MoveAssignable].
[:zh_CN] 对于 [`vector]、[`inplace_vector] 和 [`deque]，[`T] 也为
[^:oc MoveAssignable]。

[para:effects]
[:en] Inserts a copy of [`rv] before [`p].
[:zh_CN] 在 [`p] 之前插入 [`rv] 的一个副本。

[para:returns]
[:en] An iterator that points to the copy of [`rv] inserted into [`a].
[:zh_CN] 一个迭代器，指向插入到 [`a] 中的 [`rv] 的副本。
[div:end]

[codeblock:declaration]
a.insert(p, n, t)
[codeblock:end]

[div:description]
[para:result]
[:en] [`iterator].
[:zh_CN] [`iterator]。

[para:expects]
[:en] [`T] is [^:oc CopyInsertable] into [`X] and [^:oc CopyAssignable].
[:zh_CN] [`T] 为向 [`X] 中 [^:oc CopyInsertable] 且为 [^:oc CopyAssignable]。

[para:effects]
[:en] Inserts [`n] copies of [`t] before [`p].
[:zh_CN] 在 [`p] 之前插入 [`n] 个 [`t] 的副本。

[para:returns]
[:en] An iterator that points to the copy of the first element inserted into [`a],
or [`p] if [`n == 0].
[:zh_CN] 一个迭代器，指向插入到 [`a] 中的第一个元素副本，或当 [`n == 0] 时为 [`p]。
[div:end]

[codeblock:declaration]
a.insert(p, i, j)
[codeblock:end]

[div:description]
[para:result]
[:en] [`iterator].
[:zh_CN] [`iterator]。

[para:expects]
[:en] [`T] is [^:oc EmplaceConstructible] into [`X] from [`*i].
[:zh_CN] [`T] 为以 [`*i] 向 [`X] 中 [^:oc EmplaceConstructible]。

[:en] For [`vector], [`inplace_vector], and [`deque], [`T] is also
[^:oc MoveInsertable] into [`X], and [`T] meets the [^:oc MoveConstructible],
[^:oc MoveAssignable], and [^:oc Swappable] ([#swappable.requirements])
requirements.
[:zh_CN] 对于 [`vector]、[`inplace_vector] 和 [`deque]，[`T] 也为向 [`X] 中
[^:oc MoveInsertable]，且 [`T] 满足 [^:oc MoveConstructible]，[^:oc MoveAssignable]，
和 [^:oc Swappable]（[#swappable.requirements]）的规定。

[:en] Neither [`i] nor [`j] are iterators into [`a].
[:zh_CN] [`i] 和 [`j] 都不是 [`a] 中的迭代器。

[para:effects]
[:en] Inserts copies of elements in [``[i, j)] before [`p].
[:zh_CN] 在 [`p] 之前插入 [``[i, j)] 中的元素的副本。

[:en] Each iterator in the range [=range(i,j)] shall be dereferenced exactly once.
[:zh_CN] 范围 [=range(i,j)] 中的每个迭代器都应当恰好进行一次解引用。

[para:returns]
[:en] An iterator that points to the copy of the first element inserted into [`a],
or [`p] if [`i == j].
[:zh_CN] 一个迭代器，指向插入到 [`a] 中的第一个元素副本，或当 [`i == j] 时为 [`p]。
[div:end]

[?indexcond insert_range]
[codeblock:declaration]
a.insert_range(p, rg)
[codeblock:end]

[div:description]
[para:result]
[:en] [`iterator].
[:zh_CN] [`iterator]。

[para:expects]
[:en] [`T] is [^:oc EmplaceConstructible] into [`X] from [`*ranges::begin(rg)].
[:zh_CN] [`T] 为以 [`*ranges::begin(rg)] 向 [`X] 中 [^:oc EmplaceConstructible]。

[:en] For [`vector], [`inplace_vector], and [`deque], [`T] is also
[^:oc MoveInsertable] into [`X], and [`T] meets the [^:oc MoveConstructible],
[^:oc MoveAssignable], and [^:oc Swappable] ([#swappable.requirements])
requirements.
[:zh_CN] 对于 [`vector]、[`inplace_vector] 和 [`deque]，[`T] 也为向 [`X] 中
[^:oc MoveInsertable]，且 [`T] 满足 [^:oc MoveConstructible]，[^:oc MoveAssignable]，
和 [^:oc Swappable]（[#swappable.requirements]）的规定。

[:en] [`rg] and [`a] do not overlap.
[:zh_CN] [`rg] 和 [`a] 没有重叠。

[para:effects]
[:en] Inserts copies of elements in [`rg] before [`p].
[:zh_CN] 在 [`p] 之前插入 [`rg] 中的元素的副本。

[:en] Each iterator in the range [`rg] is dereferenced exactly once.
[:zh_CN] 范围 [`rg] 中的每个迭代器都恰好进行一次解引用。

[para:returns]
[:en] An iterator that points to the copy of the first element inserted into [`a],
or [`p] if [`rg] is empty.
[:zh_CN] 一个迭代器，指向插入到 [`a] 中的第一个元素副本，或当 [`rg] 为空时为 [`p]。
[div:end]

[codeblock:declaration]
a.insert(p, il)
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to [`a.insert(p, il.begin(), il.end())].
[:zh_CN] 等价于 [`a.insert(p, il.begin(), il.end())]。
[div:end]

[?indexcond erase]
[codeblock:declaration]
a.erase(q)
[codeblock:end]

[div:description]
[para:result]
[:en] [`iterator].
[:zh_CN] [`iterator]。

[para:expects]
[:en] For [`vector], [`inplace_vector], and [`deque], [`T] is [^:oc MoveAssignable].
[:zh_CN] 对于 [`vector]、[`inplace_vector] 和 [`deque]，[`T] 为 [^:oc MoveAssignable]。

[para:effects]
[:en] Erases the element pointed to by [`q].
[:zh_CN] 清除由 [`q] 所指向的元素。

[para:returns]
[:en] An iterator that points to the element immediately following [`q]
prior to the element being erased.
[:zh_CN] 一个迭代器，指向在元素被删除之前紧跟在 [`q] 后面的元素。

[:en] If no such element exists, [`a.end()] is returned.
[:zh_CN] 如果不存在这中元素，则返回 [`a.end()]。
[div:end]

[codeblock:declaration]
a.erase(q1, q2)
[codeblock:end]

[div:description]
[para:result]
[:en] [`iterator].
[:zh_CN] [`iterator]。

[para:expects]
[:en] For [`vector], [`inplace_vector], and [`deque], [`T] is [^:oc MoveAssignable].
[:zh_CN] 对于 [`vector]、[`inplace_vector] 和 [`deque]，[`T] 为 [^:oc MoveAssignable]。

[para:effects]
[:en] Erases the elements in the range [``[q1, q2)].
[:zh_CN] 清除范围 [``[q1, q2)] 中的元素。

[para:returns]
[:en] An iterator that points to the element pointed to by [`q2]
prior to any element being erased.
[:zh_CN] 一个迭代器，指向在任何元素被删除之前由 [`q2] 所指向的元素。

[:en] If no such element exists, [`a.end()] is returned.
[:zh_CN] 如果不存在这中元素，则返回 [`a.end()]。
[div:end]

[?indexcond clear]
[codeblock:declaration]
a.clear()
[codeblock:end]

[div:description]
[para:result]
[`:key void]

[para:effects]
[:en] Destroys all elements in [`a].
[:zh_CN] 销毁 [`a] 中的所有元素。

[:en] Invalidates all references, pointers, and iterators referring to the
elements of [`a] and may invalidate the past-the-end iterator.
[:zh_CN] 无效化指代 [`a] 中的元素的所有引用、指针和迭代器，并可能无效化越过
末尾迭代器。

[para:ensures]
[:en] [`a.empty()] is [`true].
[:zh_CN] [`a.empty()] 为 [`true]。

[para:complexity]
[:en] Linear.
[:zh_CN] 线性。
[div:end]

[?indexcond assign]
[codeblock:declaration]
a.assign(i, j)
[codeblock:end]

[div:description]
[para:result]
[`:key void]

[para:expects]
[:en] [`T] is [^:oc EmplaceConstructible] into [`X] from [`*i] and assignable
from [`*i].
[:zh_CN] [`T] 为以 [`*i] 向 [`X] 中 [^:oc EmplaceConstructible]，并且可以以 [`*i]
进行赋值。

[:en] For [`vector], if the iterator does not meet the forward iterator
requirements ([#forward.iterators]), [`T] is also [^:oc MoveInsertable] into [`X].
[:zh_CN] 对于 [`vector]，如果迭代器不满足前向迭代器的规定（[#forward.iterators]），
则 [`T] 还为向 [`X] 中 [^:oc MoveInsertable]。

[:en] Neither [`i] nor [`j] are iterators into [`a].
[:zh_CN] [`i] 和 [`j] 都不是 [`a] 中的迭代器。

[para:effects]
[:en] Replaces elements in [`a] with a copy of [``[i, j)].
[:zh_CN] 将 [`a] 中的元素替换为 [``[i, j)] 的副本。

[:en] Invalidates all references, pointers and iterators referring to the
elements of [`a].
[:zh_CN] 无效化指代 [`a] 中的元素的所有引用、指针和迭代器。

[:en] For [`vector] and [`deque], also invalidates the past-the-end iterator.
[:zh_CN] 对于 [`vector] 和 [`deque]，同样会无效化其越过末尾迭代器。

[:en] Each iterator in the range [=range(i,j)] is dereferenced exactly once.
[:zh_CN] 范围 [=range(i,j)] 中的每个迭代器都恰好进行一次解引用。
[div:end]

[?indexcond assign_range]
[codeblock:declaration]
a.assign_range(rg)
[codeblock:end]

[div:description]
[para:result]
[`:key void]

[para:mandates]
[:en] [`[`:c assignable_from]<T&, ranges::range_reference_t<R>>] is modeled.
[:zh_CN] 已构成 [`[`:c assignable_from]<T&, ranges::range_reference_t<R>>]。

[para:expects]
[:en] [`T] is [^:oc EmplaceConstructible] into [`X] from [`*ranges::begin(rg)].
[:zh_CN] [`T] 为以 [`*ranges::begin(rg)] 向 [`X] 中 [^:oc EmplaceConstructible]。

[:en] For [`vector], if [`R] models neither [`ranges::[`:c sized_range]] nor
[`ranges::[`:c forward_range]], [`T] is also [^:oc MoveInsertable] into [`X].
[:zh_CN] 对于 [`vector]，如果 [`R] 不构成 [`ranges::[`:c sized_range]] 或
[`ranges::[`:c forward_range]]，则 [`T] 还为向 [`X] 中 [^:oc MoveInsertable]。

[:en] [`rg] and [`a] do not overlap.
[:zh_CN] [`rg] 和 [`a] 不重叠。

[para:effects]
[:en] Replaces elements in [`a] with a copy of each element in [`rg].
[:zh_CN] 将 [`a] 中的元素替换为 [`rg] 中的各元素的副本。

[:en] Invalidates all references, pointers, and iterators referring to the
elements of [`a].
[:zh_CN] 无效化指代 [`a] 中的元素的所有引用、指针和迭代器。

[:en] For [`vector] and [`deque], also invalidates the past-the-end iterator.
[:zh_CN] 对于 [`vector] 和 [`deque]，同样会无效化其越过末尾迭代器。

[:en] Each iterator in the range [`rg] is dereferenced exactly once.
[:zh_CN] 范围 [`rg] 中的每个迭代器都恰好进行一次解引用。
[div:end]

[codeblock:declaration]
a.assign(il)
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to [`a.assign(il.begin(), il.end())].
[:zh_CN] 等价于 [`a.assign(il.begin(), il.end())]。
[div:end]

[codeblock:declaration]
a.assign(n, t)
[codeblock:end]

[div:description]
[para:result]
[`:key void]

[para:expects]
[:en] [`T] is [^:oc CopyInsertable] into [`X] and [^:oc CopyAssignable].
[:zh_CN] [`T] 为向 [`X] 中 [^:oc CopyInsertable]，并且为 [^:oc CopyAssignable]。

[:en] [`t] is not a reference into [`a].
[:zh_CN] [`t] 不是 [`a] 中的引用。

[para:effects]
[:en] Replaces elements in [`a] with [`n] copies of [`t].
[:zh_CN] 将 [`a] 中的元素替换为 [`n] 个 [`t] 的副本。

[:en] Invalidates all references, pointers and iterators referring to the
elements of [`a].
[:zh_CN] 无效化指代 [`a] 中的元素的所有引用、指针和迭代器。

[:en] For [`vector] and [`deque], also invalidates the past-the-end iterator.
[:zh_CN] 对于 [`vector] 和 [`deque]，同样会无效化其越过末尾迭代器。
[div:end]

[para]
[:en] For every sequence container defined in this Clause and in [#strings]:
[:zh_CN] 对于本章和 [#strings] 中所定义的每种序列容器：

[list]
[item]
[:en] If the constructor
[:zh_CN] 如果构造函数

[codeblock]
template<class InputIterator>
  X(InputIterator first, InputIterator last,
    const allocator_type& alloc = allocator_type())
[codeblock:end]

[:en@~] is called with a type [`InputIterator] that does not qualify as an input
iterator, then the constructor shall not participate in overload resolution.
[:zh_CN@~] 调用时的 [`InputIterator] 类型无法作为输入迭代器，则这个构造函数不能
参与重载决议。

[item]
[:en] If the member functions of the forms:
[:zh_CN] 如果以下形式的成员函数：

[codeblock]
template<class InputIterator>
  [[redoc("^>")]]return-type [[redoc(">")]]F(const_iterator p,
                InputIterator first, InputIterator last);       // [:en] such as [`insert()] \
                                                                [:zh_CN] 比如 [`insert()]

template<class InputIterator>
  [[redoc("^>")]]return-type [[redoc("^>")]]F(InputIterator first, InputIterator last);       // [:en] such as [`append()], [`assign()] \
                                                                                              [:zh_CN] 比如 [`append()]，[`assign()]

template<class InputIterator>
  [[redoc("^>")]]return-type [[redoc("^>")]]F(const_iterator i1, const_iterator i2,
                InputIterator first, InputIterator last);       // [:en] such as [`replace()] \
                                                                [:zh_CN] 比如 [`replace()]
[codeblock:end]

[:en@~] are called with a type [`InputIterator] that does not qualify as an
input iterator, then these functions shall not participate in overload
resolution.
[:zh_CN@~] 调用时的 [`InputIterator] 类型无法作为输入迭代器，则这些函数不能参与
重载决议。

[item]
[:en] A deduction guide for a sequence container shall not participate in
overload resolution if it has an [`InputIterator] template parameter and a type
that does not qualify as an input iterator is deduced for that parameter, or if
it has an [`Allocator] template parameter and a type that does not qualify as an
allocator is deduced for that parameter.
[:zh_CN] 对于序列容器的推断导引，如果它具有一个 [`InputIterator] 模板形参，而
为该形参所推断的类型无法作为输入迭代器，或者它具有一个 [`Allocator] 模板形参，而
为该形参所推断的类型无法作为分配器，则它不能参与重载决议。
[list:end]

[para]
[:en] The following operations are provided for some types of sequence
containers but not others.
[:zh_CN] 以下列出的操作，为一些类型的序列容器提供，但未对其他容器提供。

[:en] Operations other than [`prepend_range] and [`append_range] are implemented
so as to take amortized constant time.
[:zh_CN] 除了 [`prepend_range] 和 [`append_range] 之外的操作被实现为具有摊销常量时间。

[codeblock:declaration]
a.front()
[codeblock:end]

[div:description]
[para:result]
[:en] [`reference]; [`const_reference] for constant [`a].
[:zh_CN] [`reference]；对于常量 [`a] 为 [`const_reference]。

[para:returns]
[`*a.begin()]

[para:remarks]
[:en] Required for [`basic_string], [`array], [`deque], [`forward_list],
[`inplace_vector], [`list], and [`vector].
[:zh_CN] [`basic_string]，[`array]，[`deque]，[`forward_list]，[`inplace_vector]，
[`list]，和 [`vector] 要求提供。
[div:end]

[codeblock:declaration]
a.back()
[codeblock:end]

[div:description]
[para:result]
[:en] [`reference]; [`const_reference] for constant [`a].
[:zh_CN] [`reference]；对于常量 [`a] 为 [`const_reference]。

[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
auto tmp = a.end();
--tmp;
return *tmp;
[codeblock:end]

[para:remarks]
[:en] Required for [`basic_string], [`array], [`deque], [`inplace_vector],
[`list], and [`vector].
[:zh_CN] [`basic_string]，[`array]，[`deque]，[`inplace_vector]，[`list]，和
[`vector] 要求提供。
[div:end]

[codeblock:declaration]
a.emplace_front(args)
[codeblock:end]

[div:description]
[para:result]
[`reference]

[para:expects]
[:en] [`T] is [^:oc EmplaceConstructible] into [`X] from [`args].
[:zh_CN] [`T] 为以 [`args] 向 [`X] 中 [^:oc EmplaceConstructible]。

[para:effects]
[:en] Prepends an object of type [`T] constructed with [`std::forward<Args>(args)...].
[:zh_CN] 在前面添加一个以 [`std::forward<Args>(args)...] 构造的 [`T] 类型的对象。

[para:returns]
[:en] [`a.front()].
[:zh_CN] [`a.front()]。

[para:remarks]
[:en] Required for [`deque], [`forward_list], and [`list].
[:zh_CN] [`deque]，[`forward_list]，和 [`list] 要求提供。
[div:end]

[codeblock:declaration]
a.emplace_back(args)
[codeblock:end]

[div:description]
[para:result]
[`reference]

[para:expects]
[:en] [`T] is [^:oc EmplaceConstructible] into [`X] from [`args].
[:zh_CN] [`T] 为以 [`args] 向 [`X] 中 [^:oc EmplaceConstructible]。

[:en] For [`vector], [`T] is also [^:oc MoveInsertable] into [`X].
[:zh_CN] 对于 [`vector]，[`T] 也为向 [`X] 中 [^:oc MoveInsertable]。

[para:effects]
[:en] Appends an object of type [`T] constructed with [`std::forward<Args>(args)...].
[:zh_CN] 追加一个以 [`std::forward<Args>(args)...] 构造的 [`T] 类型的对象。

[para:returns]
[:en] [`a.back()].
[:zh_CN] [`a.back()]。

[para:remarks]
[:en] Required for [`deque], [`inplace_vector], [`list], and [`vector].
[:zh_CN] [`deque]，[`inplace_vector]，[`list]，和 [`vector] 要求提供。
[div:end]

[codeblock:declaration]
a.push_front(t)
[codeblock:end]

[div:description]
[para:result]
[`:key void]

[para:expects]
[:en] [`T] is [^:oc CopyInsertable] into [`X].
[:zh_CN] [`T] 为向 [`X] 中 [^:oc CopyInsertable]。

[para:effects]
[:en] Prepends a copy of [`t].
[:zh_CN] 在前面添加一个 [`t] 的副本。

[para:remarks]
[:en] Required for [`deque], [`forward_list], and [`list].
[:zh_CN] [`deque]，[`forward_list]，和 [`list] 要求提供。
[div:end]

[codeblock:declaration]
a.push_front(rv)
[codeblock:end]

[div:description]
[para:result]
[`:key void]

[para:expects]
[:en] [`T] is [^:oc MoveInsertable] into [`X].
[:zh_CN] [`T] 为向 [`X] 中 [^:oc MoveInsertable]。

[para:effects]
[:en] Prepends a copy of [`rv].
[:zh_CN] 在前面添加一个 [`rv] 的副本。

[para:remarks]
[:en] Required for [`deque], [`forward_list], and [`list].
[:zh_CN] [`deque]，[`forward_list]，和 [`list] 要求提供。
[div:end]

[codeblock:declaration]
a.prepend_range(rg)
[codeblock:end]

[div:description]
[para:result]
[`:key void]

[para:expects]
[:en] [`T] is [^:oc EmplaceConstructible] into [`X] from [`*ranges::begin(rg)].
[:zh_CN] [`T] 为以 [`*ranges::begin(rg)] 向 [`X] 中 [^:oc EmplaceConstructible]。

[:en] For [`deque], [`T] is also [^:oc MoveInsertable] into [`X], and [`T] meets
the [^:oc MoveConstructible], [^:oc MoveAssignable], and [^:oc Swappable]
([#swappable.requirements]) requirements.
[:zh_CN] 对于 [`deque]，[`T] 还向 [`X] 中 [^:oc MoveInsertable]，且 [`T] 满足
[^:oc MoveConstructible]，[^:oc MoveAssignable]，和 [^:oc Swappable]
（[#swappable.requirements]）的规定。

[para:effects]
[:en] Inserts copies of elements in [`rg] before [`begin()].
[:zh_CN] 在 [`begin()] 之前插入 [`rg] 中的各元素的副本。

[:en] Each iterator in the range [`rg] is dereferenced exactly once.
[:zh_CN] 范围 [`rg] 中的每个迭代器都恰好进行一次解引用。

[begin:note]
[:en] The order of elements in [`rg] is not reversed.
[:zh_CN] 不保留 [`rg] 中各元素的顺序。
[end:note]

[para:remarks]
[:en] Required for [`deque], [`forward_list], and [`list].
[:zh_CN] [`deque]，[`forward_list]，和 [`list] 要求提供。
[div:end]

[codeblock:declaration]
a.push_back(t)
[codeblock:end]

[div:description]
[para:result]
[`:key void]

[para:expects]
[:en] [`T] is [^:oc CopyInsertable] into [`X].
[:zh_CN] [`T] 为向 [`X] 中 [^:oc CopyInsertable]。

[para:effects]
[:en] Appends a copy of [`t].
[:zh_CN] 追加一个 [`t] 的副本。

[para:remarks]
[:en] Required for [`basic_string], [`deque], [`inplace_vector], [`list], and
[`vector].
[:zh_CN] [`basic_string]，[`deque]，[`inplace_vector]，[`list]，和 [`vector] 要求提供。
[div:end]

[codeblock:declaration]
a.push_back(rv)
[codeblock:end]

[div:description]
[para:result]
[`:key void]

[para:expects]
[:en] [`T] is [^:oc MoveInsertable] into [`X].
[:zh_CN] [`T] 为向 [`X] 中 [^:oc MoveInsertable]。

[para:effects]
[:en] Appends a copy of [`rv].
[:zh_CN] 追加一个 [`rv] 的副本。

[para:remarks]
[:en] Required for [`basic_string], [`deque], [`inplace_vector], [`list], and
[`vector].
[:zh_CN] [`basic_string]，[`deque]，[`inplace_vector]，[`list]，和 [`vector] 要求提供。
[div:end]

[codeblock:declaration]
a.append_range(rg)
[codeblock:end]

[div:description]
[para:result]
[`:key void]

[para:expects]
[:en] [`T] is [^:oc EmplaceConstructible] into [`X] from [`*ranges::begin(rg)].
[:zh_CN] [`T] 为以 [`*ranges::begin(rg)] 向 [`X] 中 [^:oc EmplaceConstructible]。

[:en] For [`vector], [`T] is also [^:oc MoveInsertable] into [`X].
[:zh_CN] 对于 [`vector]，[`T] 也为向 [`X] 中 [^:oc MoveInsertable]。

[para:effects]
[:en] Inserts copies of elements in [`rg] before [`end()].
[:zh_CN] 在 [`end()] 之前插入 [`rg] 中的各元素的副本。

[:en] Each iterator in the range [`rg] is dereferenced exactly once.
[:zh_CN] 范围 [`rg] 中的每个迭代器都恰好进行一次解引用。

[para:remarks]
[:en] Required for [`deque], [`inplace_vector], [`list], and [`vector].
[:zh_CN] [`deque]，[`inplace_vector]，[`list]，和 [`vector] 要求提供。
[div:end]

[codeblock:declaration]
a.pop_front()
[codeblock:end]

[div:description]
[para:result]
[`:key void]

[para:expects]
[:en] [`a.empty()] is [`false].
[:zh_CN] [`a.empty()] 为从 [`false]。

[para:effects]
[:en] Destroys the first element.
[:zh_CN] 销毁第一个元素。

[para:remarks]
[:en] Required for [`deque], [`forward_list], and [`list].
[:zh_CN] [`deque]，[`forward_list]，和 [`list] 要求提供。
[div:end]

[codeblock:declaration]
a.pop_back()
[codeblock:end]

[div:description]
[para:result]
[`:key void]

[para:expects]
[:en] [`a.empty()] is [`false].
[:zh_CN] [`a.empty()] 为从 [`false]。

[para:effects]
[:en] Destroys the last element.
[:zh_CN] 销毁最后一个元素。

[para:remarks]
[:en] Required for [`basic_string], [`deque], [`inplace_vector], [`list], and
[`vector].
[:zh_CN] [`basic_string]，[`deque]，[`inplace_vector]，[`list]，和 [`vector] 要求提供。
[div:end]

[codeblock:declaration]
a[n]
[codeblock:end]

[div:description]
[para:result]
[:en] [`reference]; [`const_reference] for constant [`a].
[:zh_CN] [`reference]；对于常量 [`a] 为 [`const_reference]。

[para:effects]
[:en] Equivalent to: [`return *(a.begin() + n);]
[:zh_CN] 等价于：[`return *(a.begin() + n);]

[para:remarks]
[:en] Required for [`basic_string], [`array], [`deque], [`inplace_vector], and
[`vector].
[:zh_CN] [`basic_string]，[`array]，[`deque]，[`inplace_vector] 和 [`vector] 要求提供。
[div:end]

[codeblock:declaration]
a.at(n)
[codeblock:end]

[div:description]
[para:result]
[:en] [`reference]; [`const_reference] for constant [`a].
[:zh_CN] [`reference]；对于常量 [`a] 为 [`const_reference]。

[para:returns]
[`*(a.begin() + n)]

[para:throws]
[:en] [`out_of_range] if [`n >= a.size()].
[:zh_CN] 当 [`n >= a.size()] 时抛出 [`out_of_range]。

[para:remarks]
[:en] Required for [`basic_string], [`array], [`deque], [`inplace_vector], and
[`vector].
[:zh_CN] [`basic_string]，[`array]，[`deque]，[`inplace_vector] 和 [`vector] 要求提供。
[div:end]
