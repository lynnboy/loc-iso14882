[section#flat.map.access
    [:en] Access
    [:zh_CN] 访问
]

[%@lib@member operator`[`][!flat_map]]
[codeblock:declaration]
constexpr mapped_type& operator[](const key_type& x);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return try_emplace(x).first->second;]
[:zh_CN] 等价于：[`return try_emplace(x).first->second;]
[div:end]

[%@lib@member operator`[`][!flat_map]]
[codeblock:declaration]
constexpr mapped_type& operator[](key_type&& x);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return try_emplace(std::move(x)).first->second;]
[:zh_CN] 等价于：[`return try_emplace(std::move(x)).first->second;]
[div:end]

[%@lib@member operator`[`][!flat_map]]
[codeblock:declaration]
template<class K> constexpr mapped_type& operator[](K&& x);
[codeblock:end]

[div:description]
[para:constraints]
[:en] The [~qualified-id] [`Compare::is_transparent] is valid and denotes a type.
[:zh_CN] [~限定标识] [`Compare::is_transparent] 有效且代表一个类型。

[para:effects]
[:en] Equivalent to: [`return try_emplace(std::forward<K>(x)).first->second;]
[:zh_CN] 等价于：[`return try_emplace(std::forward<K>(x)).first->second;]
[div:end]

[%@lib@member at[!map]]
[codeblock:declaration]
constexpr mapped_type&       at(const key_type& x);
constexpr const mapped_type& at(const key_type& x) const;
[codeblock:end]

[div:description]
[para:returns]
[:en] A reference to the [`mapped_type] corresponding to [`x] in [`*this].
[:zh_CN] 指代 [`*this] 中对应于 [`x] 的 [`mapped_type] 的引用。

[para:throws]
[:en] An exception object of type [`out_of_range] if no such element is present.
[:zh_CN] 如果不存在这种元素则抛出 [`out_of_range] 类型的异常对象。

[para:complexity]
[:en] Logarithmic.
[:zh_CN] 对数。
[div:end]

[%@lib@member at[!map]]
[codeblock:declaration]
template<class K> constexpr mapped_type&       at(const K& x);
template<class K> constexpr const mapped_type& at(const K& x) const;
[codeblock:end]

[div:description]
[para:constraints]
[:en] The [~qualified-id] [`Compare::is_transparent] is valid and denotes a type.
[:zh_CN] [~限定标识] [`Compare::is_transparent] 有效且代表一个类型。

[para:expects]
[:en] The expression [`find(x)] is well-formed and has well-defined behavior.
[:zh_CN] 表达式 [`find(x)] 良构并具有恰当定义的行为。

[para:returns]
[:en] A reference to the [`mapped_type] corresponding to [`x] in [`*this].
[:zh_CN] 指代 [`*this] 中对应于 [`x] 的 [`mapped_type] 的引用。

[para:throws]
[:en] An exception object of type [`out_of_range] if no such element is present.
[:zh_CN] 如果不存在这种元素则抛出 [`out_of_range] 类型的异常对象。

[para:complexity]
[:en] Logarithmic.
[:zh_CN] 对数。
[div:end]
