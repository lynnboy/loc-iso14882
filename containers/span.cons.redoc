[section#span.cons
    [:en] Constructors, copy, and assignment
    [:zh_CN] 构造函数，复制和赋值
]

[%@lib@ctor span]
[codeblock:declaration]
constexpr span() noexcept;
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`Extent == dynamic_extent || Extent == 0] is [`true].
[:zh_CN] [`Extent == dynamic_extent || Extent == 0] 为 [`true]。

[para:ensures]
[:en] [`size() == 0 && data() == nullptr].
[:zh_CN] [`size() == 0 && data() == nullptr]。
[div:end]

[%@lib@ctor span]
[codeblock:declaration]
template<class It>
  constexpr explicit(extent != dynamic_extent) span(It first, size_type count);
[codeblock:end]

[div:description]
[para:constraints]
[:en] Let [`U] be [`remove_reference_t<iter_reference_t<It>>].
[:zh_CN] 令 [`U] 为 [`remove_reference_t<iter_reference_t<It>>]。

[list]
[item]
[:en] [`It] satisfies [`:c contiguous_iterator].
[:zh_CN] [`It] 符合 [`:c contiguous_iterator]。
[item]
[:en] [`is_convertible_v<U(*)`[`], element_type(*)`[`]>] is [`true].
[:zh_CN] [`is_convertible_v<U(*)`[`], element_type(*)`[`]>] 为 [`true]。

[begin:note]
[:en] The intent is to allow only qualification conversions of the iterator
reference type to [`element_type].
[:zh_CN] 其意图是仅允许迭代器引用类型向 [`element_type] 的限定转换.
[end:note]
[list:end]

[para:expects]
[list]
[item]
[:en] [=range(first,first + count)] is a valid range.
[:zh_CN] [=range(first,first + count)] 为有效范围。
[item]
[:en] [`It] models [`:c contiguous_iterator].
[:zh_CN] [`It] 构成 [`:c contiguous_iterator]。
[list:end]

[para:hardexpects]
[:en] If [`extent] is not equal to [`dynamic_extent], then [`count == extent] is [`true].
[:zh_CN] 若 [`extent] 不等于 [`dynamic_extent]，则 [`count == extent] 为 [`true]。

[para:effects]
[:en] Initializes [*data_] with [`to_address(first)] and [*size_] with [`count].
[:zh_CN] 以 [`to_address(first)] 初始化 [*data_] 并以 [`count] 初始化 [*size_]。

[para:throws]
[:en] Nothing.
[:zh_CN] 无。
[div:end]

[%@lib@ctor span]
[codeblock:declaration]
template<class It, class End>
  constexpr explicit(extent != dynamic_extent) span(It first, End last);
[codeblock:end]

[div:description]
[para:constraints]
[:en] Let [`U] be [`remove_reference_t<iter_reference_t<It>>].
[:zh_CN] 令 [`U] 为 [`remove_reference_t<iter_reference_t<It>>]。

[list]
[item]
[:en] [`is_convertible_v<U(*)`[`], element_type(*)`[`]>] is [`true].
[:zh_CN] [`is_convertible_v<U(*)`[`], element_type(*)`[`]>] 为 [`true]。

[begin:note]
[:en] The intent is to allow only qualification conversions of the iterator
reference type to [`element_type].
[:zh_CN] 其意图是仅允许迭代器引用类型向 [`element_type] 的限定转换.
[end:note]

[item]
[:en] [`It] satisfies [`:c contiguous_iterator].
[:zh_CN] [`It] 符合 [`:c contiguous_iterator]。
[item]
[:en] [`End] satisfies [`[`:c sized_sentinel_for]<It>].
[:zh_CN] [`End] 符合 [`[`:c sized_sentinel_for]<It>]。
[item]
[:en] [`is_convertible_v<End, size_t>] is [`false].
[:zh_CN] [`is_convertible_v<End, size_t>] 为 [`false]。
[list:end]

[para:expects]
[list]
[item]
[:en] [=range(first,last)] is a valid range.
[:zh_CN] [=range(first,last)] 为有效范围。
[item]
[:en] [`It] models [`:c contiguous_iterator].
[:zh_CN] [`It] 构成 [`:c contiguous_iterator]。
[item]
[:en] [`End] models [`[`:c sized_sentinel_for]<It>].
[:zh_CN] [`End] 构成 [`[`:c sized_sentinel_for]<It>]。
[list:end]

[para:hardexpects]
[:en] If [`extent] is not equal to [`dynamic_extent], then
[`(last - first) == extent] is [`true].
[:zh_CN] 若 [`extent] 不等于 [`dynamic_extent]，则 [`(last - first) == extent] 为 [`true]。

[para:effects]
[:en] Initializes [*data_] with [`to_address(first)] and [*size_] with [`last - first].
[:zh_CN] 以 [`to_address(first)] 初始化 [*data_] 并以 [`last - first] 初始化 [*size_]。

[para:throws]
[:en] When and what [`last - first] throws.
[:zh_CN] 当 [`last - first] 抛出时为其所抛出的异常。
[div:end]

[%@lib@ctor span]
[codeblock:declaration]
template<size_t N> constexpr span(type_identity_t<element_type> (&arr)[N]) noexcept;
template<class T, size_t N> constexpr span(array<T, N>& arr) noexcept;
template<class T, size_t N> constexpr span(const array<T, N>& arr) noexcept;
[codeblock:end]

[div:description]
[para:constraints]
[:en] Let [`U] be [`remove_pointer_t<decltype(std::data(arr))>].
[:zh_CN] 令 [`U] 为 [`remove_pointer_t<decltype(std::data(arr))>]。
[list]
[item]
[:en] [`extent == dynamic_extent || N == extent] is [`true], and
[:zh_CN] [`extent == dynamic_extent || N == extent] 为 [`true]，并且
[item]
[:en] [`is_convertible_v<U(*)`[`], element_type(*)`[`]>] is [`true].
[:zh_CN] [`is_convertible_v<U(*)`[`], element_type(*)`[`]>] 为 [`true]。
[list:end]

[begin:note]
[:en] The intent is to allow only qualification conversions of the array element
type to [`element_type].
[:zh_CN] 其意图是仅允许数组元素类型向 [`element_type] 的限定转换。
[end:note]

[para:effects]
[:en] Constructs a [`span] that is a view over the supplied array.
[:zh_CN] 构造一个 [`span]，作为所提供的数组的视图。

[begin:note]
[:en] [`type_identity_t] affects class template argument deduction.
[:zh_CN] [`type_identity_t] 影响类模板实参推断。
[end:note]

[para:ensures]
[:en] [`size() == N && data() == std::data(arr)] is [`true].
[:zh_CN] [`size() == N && data() == std::data(arr)] 为 [`true]。
[div:end]

[%@lib@ctor span]
[codeblock:declaration]
template<class R> constexpr explicit(extent != dynamic_extent) span(R&& r);
[codeblock:end]

[div:description]
[para:constraints]
[:en] Let [`U] be [`remove_reference_t<ranges::range_reference_t<R>>].
[:zh_CN] 令 [`U] 为 [`remove_reference_t<ranges::range_reference_t<R>>]。

[list]
[item]
[:en] [`R] satisfies [`ranges::[`:c contiguous_range]] and
[`ranges::[`:c sized_range]].
[:zh_CN] [`R] 符合 [`ranges::[`:c contiguous_range]] 和
[`ranges::[`:c sized_range]].

[item]
[:en] Either [`R] satisfies [`ranges::[`:c borrowed_range]] or
[`is_const_v<element_type>] is [`true].
[:zh_CN] 或者 [`R] 符合 [`ranges::[`:c borrowed_range]]，或者
[`is_const_v<element_type>] 为 [`true]。

[item]
[:en] [`remove_cvref_t<R>] is not a specialization of [`span],
[:zh_CN] [`remove_cvref_t<R>] 不是 [`span] 的特例，

[item]
[:en] [`remove_cvref_t<R>] is not a specialization of [`array],
[:zh_CN] [`remove_cvref_t<R>] 不是 [`array] 的特例，

[item]
[:en] [`is_array_v<remove_cvref_t<R>>] is [`false],
[:zh_CN] [`is_array_v<remove_cvref_t<R>>] 为 [`false]，

[item]
[:en] [`is_convertible_v<U(*)`[`], element_type(*)`[`]>] is [`true].
[:zh_CN] [`is_convertible_v<U(*)`[`], element_type(*)`[`]>] 为 [`true]。

[begin:note]
[:en] The intent is to allow only qualification conversions of the range
reference type to [`element_type].
[:zh_CN] 其意图是仅允许范围引用类型向 [`element_type] 的限定转换.
[end:note]
[list:end]

[para:expects]
[list]
[item]
[:en] [`R] models [`ranges::[`:c contiguous_range]] and
[`ranges::[`:c sized_range]].
[:zh_CN] [`R] 构成 [`ranges::[`:c contiguous_range]] 和
[`ranges::[`:c sized_range]]。
[item]
[:en] If [`is_const_v<element_type>] is [`false], [`R] models
[`ranges::[`:c borrowed_range]].
[:zh_CN] 当 [`is_const_v<element_type>] 为 [`false] 时，[`R] 构成
[`ranges::[`:c borrowed_range]]。
[list:end]

[para:hardexpects]
[:en] If [`extent] is not equal to [`dynamic_extent], then
[`ranges::size(r) == extent] is [`true].
[:zh_CN] 若 [`extent] 不等于 [`dynamic_extent]，则 [`ranges::size(r) == extent] 为 [`true]。

[para:effects]
[:en] Initializes [*data_] with [`ranges::data(r)] and [*size_] with [`ranges::size(r)].
[:zh_CN] 以 [`ranges::data(r)] 初始化 [*data_] 并以 [`ranges::size(r)] 初始化 [*size_]。

[para:throws]
[:en] When and what [`ranges::data(r)] and [`ranges::size(r)] throws.
[:zh_CN] 当 [`ranges::data(r)] 或 [`ranges::size(r)] 抛出时为其所抛出的异常。
[div:end]

[%@lib@ctor span]
[codeblock:declaration]
constexpr explicit(extent != dynamic_extent) span(std::initializer_list<value_type> il);
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`is_const_v<element_type>] is [`true].
[:zh_CN] [`is_const_v<element_type>] 为 [`true]。

[para:hardexpects]
[:en] If [`extent] is not equal to [`dynamic_extent], then [`il.size() == extent] is [`true].
[:zh_CN] 若 [`extent] 不等于 [`dynamic_extent]，则 [`il.size() == extent] 为 [`true]。

[para:effects]
[:en] Initializes [`data_] with [`il.begin()] and [*size_] with [`il.size()].
[:zh_CN] 以 [`il.begin()] 初始化 [`data_] 并以 [`il.size()] 初始化 [*size_]。
[div:end]

[%@lib@ctor span]
[codeblock:declaration]
constexpr span(const span& other) noexcept = default;
[codeblock:end]

[div:description]
[para:ensures]
[:en] [`other.size() == size() && other.data() == data()].
[:zh_CN] [`other.size() == size() && other.data() == data()]。
[div:end]

[%@lib@ctor span]
[codeblock:declaration]
template<class OtherElementType, size_t OtherExtent>
  constexpr explicit([[redoc("[=seebelow]")]]) span(const span<OtherElementType, OtherExtent>& s) noexcept;
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en] [`extent == dynamic_extent || OtherExtent == dynamic_extent || extent == OtherExtent]
is [`true], and
[:zh_CN] [`extent == dynamic_extent || OtherExtent == dynamic_extent || extent == OtherExtent]
为 [`true]，并且
[item]
[:en] [`is_convertible_v<OtherElementType(*)`[`], element_type(*)`[`]>] is [`true].
[:zh_CN] [`is_convertible_v<OtherElementType(*)`[`], element_type(*)`[`]>] 为 [`true]。

[begin:note]
[:en] The intent is to allow only qualification conversions of the
[`OtherElementType] to [`element_type].
[:zh_CN] 其意图是仅允许 [`OtherElementType] 向 [`element_type] 的限定转换。
[end:note]
[list:end]

[para:hardexpects]
[:en] If [`extent] is not equal to [`dynamic_extent], then [`s.size() == extent] is [`true].
[:zh_CN] 若 [`extent] 不等于 [`dynamic_extent]，则 [`s.size() == extent] 为 [`true]。

[para:effects]
[:en] Constructs a [`span] that is a view over the range
[=range(s.data(),s.data() + s.size())].
[:zh_CN] 构造一个 [`span]，作为范围 [=range(s.data(),s.data() + s.size())] 的视图。

[para:ensures]
[:en] [`size() == s.size() && data() == s.data()].
[:zh_CN] [`size() == s.size() && data() == s.data()]。

[para:remarks]
[:en] The expression inside [`:key explicit] is equivalent to:
[:zh_CN] [`:key explicit] 中的表达式等价于：
[codeblock]
extent != dynamic_extent && OtherExtent == dynamic_extent
[codeblock:end]
[div:end]

[%@lib@member operator=[!span]]
[codeblock:declaration]
constexpr span& operator=(const span& other) noexcept = default;
[codeblock:end]

[div:description]
[para:ensures]
[:en] [`size() == other.size() && data() == other.data()].
[:zh_CN] [`size() == other.size() && data() == other.data()]。
[div:end]
