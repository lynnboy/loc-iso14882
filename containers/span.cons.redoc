[section#span.cons
    [:en] Constructors, copy, and assignment
    [:zh_CN] 构造函数，复制和赋值
]

[%@library span[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
constexpr span() noexcept;
[codeblock:end]

[begin:description]
[para:constraints]
[:en] [`Extent == dynamic_extent || Extent == 0] is [`true].
[:zh_CN] [`Extent == dynamic_extent || Extent == 0] 为 [`true]。

[para:ensures]
[:en] [`size() == 0 && data() == nullptr].
[:zh_CN] [`size() == 0 && data() == nullptr]。
[end:description]

[%@library span[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
constexpr span(pointer ptr, index_type count);
[codeblock:end]

[begin:description]
[para:expects]
[:en] [=range(ptr,ptr + count)] is a valid range.
[:zh_CN] [=range(ptr,ptr + count)] 为有效范围。

[:en] If [`extent] is not equal to [`dynamic_extent], then [`count] is equal to
[`extent].
[:zh_CN] 当 [`extent] 不等于 [`dynamic_extent] 时 [`count] 等于 [`extent]。

[para:effects]
[:en] Constructs a [`span] that is a view over the range
[=range(ptr,ptr + count)].
[:zh_CN] 构造一个作为范围 [=range(ptr,ptr + count)] 的视图的 [`span]。

[para:ensures]
[:en] [`size() == count && data() == ptr].
[:zh_CN] [`size() == count && data() == ptr]。

[para:throws]
[:en] Nothing.
[:zh_CN] 无。
[end:description]

[%@library span[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
constexpr span(pointer first, pointer last);
[codeblock:end]

[begin:description]
[para:expects]
[:en] [=range(first,last)] is a valid range.
[:zh_CN] [=range(first,last)] 为有效范围。

[:en] If [`extent] is not equal to [`dynamic_extent], then [`last - first] is
equal to [`extent].
[:zh_CN] 当 [`extent] 不等于 [`dynamic_extent] 时 [`last - first] 等于 [`extent]。

[para:effects]
[:en] Constructs a span that is a view over the range [=range(first,last)].
[:zh_CN] 构造一个作为范围 [=range(first,last)] 的视图的 [`span]。

[para:ensures]
[:en] [`size() == last - first && data() == first].
[:zh_CN] [`size() == last - first && data() == first]。

[para:throws]
[:en] Nothing.
[:zh_CN] 无。
[end:description]

[%@library span[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
template<size_t N> constexpr span(element_type (&arr)[N]) noexcept;
template<size_t N> constexpr span(array<value_type, N>& arr) noexcept;
template<size_t N> constexpr span(const array<value_type, N>& arr) noexcept;
[codeblock:end]

[begin:description]
[para:constraints]
[list]
[item]
[:en] [`extent == dynamic_extent || N == extent] is [`true], and
[:zh_CN] [`extent == dynamic_extent || N == extent] 为 [`true]，并且
[item]
[:en] [`remove_pointer_t<decltype(data(arr))>(*)`[`]] is convertible to
[`ElementType(*)`[`]].
[:zh_CN] [`remove_pointer_t<decltype(data(arr))>(*)`[`]] 可以转换为
[`ElementType(*)`[`]]。
[list:end]

[para:effects]
[:en] Constructs a [`span] that is a view over the supplied array.
[:zh_CN] 构造一个作为所提供的数组的视图的 [`span]。

[para:ensures]
[:en] [`size() == N && data() == data(arr)].
[:zh_CN] [`size() == N && data() == data(arr)]。
[end:description]

[%@library span[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
template<class Container> constexpr span(Container& cont);
template<class Container> constexpr span(const Container& cont);
[codeblock:end]

[begin:description]
[para:constraints]
[list]
[item]
[:en] [`extent == dynamic_extent] is [`true],
[:zh_CN] [`extent == dynamic_extent] 为 [`true]，
[item]
[:en] [`Container] is not a specialization of [`span],
[:zh_CN] [`Container] 不是 [`span] 的特例，
[item]
[:en] [`Container] is not a specialization of [`array],
[:zh_CN] [`Container] 不是 [`array] 的特例，
[item]
[:en] [`is_array_v<Container>] is [`false],
[:zh_CN] [`is_array_v<Container>] 为 [`false]，
[item]
[:en] [`data(cont)] and [`size(cont)] are both well-formed, and
[:zh_CN] [`data(cont)] 和 [`size(cont)] 都良构，并且
[item]
[:en] [`remove_pointer_t<decltype(data(cont))>(*)`[`]] is convertible to
[`ElementType(*)`[`]].
[:zh_CN] [`remove_pointer_t<decltype(data(cont))>(*)`[`]] 可以转换为
[`ElementType(*)`[`]]。
[list:end]

[para:expects]
[:en] [=range(data(cont),data(cont) + size(cont))] is a valid range.
[:zh_CN] [=range(data(cont),data(cont) + size(cont))] 为有效范围。

[para:effects]
[:en] Constructs a [`span] that is a view over the range
[=range(data(cont),data(cont) + size(cont))].
[:zh_CN] 构造一个作为范围 [=range(data(cont),data(cont) + size(cont))] 的视图的
[`span]。

[para:ensures]
[:en] [`size() == size(cont) && data() == data(cont)].
[:zh_CN] [`size() == size(cont) && data() == data(cont)]。

[para:throws]
[:en] What and when [`data(cont)] and [`size(cont)] throw.
[:zh_CN] 当 [`data(cont)] 或 [`size(cont)] 抛出异常时抛出其所抛出的异常。
[end:description]

[%@library span[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
constexpr span(const span& other) noexcept = default;
[codeblock:end]

[begin:description]
[para:ensures]
[:en] [`other.size() == size() && other.data() == data()].
[:zh_CN] [`other.size() == size() && other.data() == data()]。
[end:description]

[%@library span[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
template<class OtherElementType, size_t OtherExtent>
  constexpr span(const span<OtherElementType, OtherExtent>& s) noexcept;
[codeblock:end]

[begin:description]
[para:constraints]
[list]
[item]
[:en] [`Extent == dynamic_extent || Extent == OtherExtent] is [`true], and
[:zh_CN] [`Extent == dynamic_extent || Extent == OtherExtent] 为 [`true]，并且
[item]
[:en] [`OtherElementType(*)`[`]] is convertible to [`ElementType(*)`[`]].
[:zh_CN] [`OtherElementType(*)`[`]] 可以转换为 [`ElementType(*)`[`]]。
[list:end]

[para:effects]
[:en] Constructs a [`span] that is a view over the range
[=range(s.data(),s.data() + s.size())].
[:zh_CN] 构造一个作为范围 [=range(s.data(),s.data() + s.size())] 的视图的
[`span]。

[para:ensures]
[:en] [`size() == s.size() && data() == s.data()].
[:zh_CN] [`size() == s.size() && data() == s.data()]。
[end:description]

[%@library operator=[!span]]
[codeblock:declaration]
constexpr span& operator=(const span& other) noexcept = default;
[codeblock:end]

[begin:description]
[para:ensures]
[:en] [`size() == other.size() && data() == other.data()].
[:zh_CN] [`size() == other.size() && data() == other.data()]。
[end:description]
