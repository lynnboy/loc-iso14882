[section#hive.syn
    [:en] Header [`<hive>] synopsis
    [:zh_CN] 头文件 [`<hive>] 纲要
]

[%@hdr@def hive]
[codeblock:synopsis]
#include <initializer_list>     // [:en] see [#initializer.list.syn] [:zh_CN] 参见 [#initializer.list.syn]
#include <compare>              // [:en] see [#compare.syn] [:zh_CN] 参见 [#compare.syn]

namespace std {
  struct [[redoc("`:lib>")]]hive_limits {
    size_t [[redoc("[%@lib@member min[!hive_limits]]")]]min;
    size_t [[redoc("[%@lib@member max[!hive_limits]]")]]max;
    constexpr hive_limits(size_t minimum, size_t maximum) noexcept
      : min(minimum), max(maximum) {}
  };

  // [:en] [#hive], class template [`hive] \
  [:zh_CN] [#hive]，类模板 [`hive]
  template<class T, class Allocator = allocator<T>> class hive;

  template<class T, class Allocator>
    void swap(hive<T, Allocator>& x, hive<T, Allocator>& y)
      noexcept(noexcept(x.swap(y)));

  template<class T, class Allocator, class U = T>
    typename hive<T, Allocator>::size_type
      erase(hive<T, Allocator>& c, const U& value);

  template<class T, class Allocator, class Predicate>
    typename hive<T, Allocator>::size_type
      erase_if(hive<T, Allocator>& c, Predicate pred);

  namespace pmr {
    template<class T>
      using hive = std::hive<T, polymorphic_allocator<T>>;
  }
}
[codeblock:end]
