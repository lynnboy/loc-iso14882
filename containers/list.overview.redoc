[section#list.overview
    [:en] Overview
    [:zh_CN] 概要
]

[%@lib list]

[para]
[:en]
A [`list] is a sequence container that supports bidirectional iterators and
allows constant time insert and erase operations anywhere within the sequence,
with storage management handled automatically.
[:zh_CN]
[`list] 是一种序列容器，支持双向迭代器，并允许在序列中的任意位置进行常量时间的
插入和清除操作，并且具有被自动处理的存储管理。

[:en] Unlike vectors ([#vector]) and deques ([#deque]), fast random access
to list elements is not supported, but many algorithms only need sequential
access anyway.
[:zh_CN] 与 [`vector]（[#vector]）和 [`deque]（[#deque]）不同，不支持对 [`list]
元素进行快速的随机访问，但许多算法实际上只需要顺序性的访问即可。

[para]
[:en] A [`list] meets all of the requirements of a container, of a reversible
container (given in two tables in [#container.requirements]), of a sequence
container, including most of the optional sequence container requirements
([#sequence.reqmts]), and of an allocator-aware container
([#:tab#container.alloc.req]).
[:zh_CN] [`list] 满足容器的所有规定，可反向容器的所有规定（于
[#container.requirements] 中的两个表格给出），序列容器的所有规定，以及可选的序列
容器规定（[#sequence.reqmts]），以及分配器感知容器的所有规定
（[#:tab#container.alloc.req]）。

[:en] The exceptions are the [`operator`[`]] and [`at] member functions, which
are not provided.[#:note#fn:$1]
[:zh_CN] 其例外是 [`operator`[`]] 和 [`at] 成员函数并未提供。[#:note#fn:$1]

[note:foot#fn:$1]
[:en] These member functions are only provided by containers whose iterators are
random access iterators.
[:zh_CN] 这些成员函数仅由具有随机访问迭代器的容器所提供。
[note:end]

[:en] Descriptions are provided here only for operations on [`list] that are not
described in one of these tables or for operations where there is additional
semantic information.
[:zh_CN] 此处给出的说明仅包括未被这些表格之一所描述的 [`list] 的操作，以及具有
额外的语义信息的操作。

[codeblock:synopsis [!:mark ImpDef] ]
namespace std {
  template<class T, class Allocator = allocator<T> >
  class list {
  public:
    // [:en] types \
       [:zh_CN] 类型
    using value_type             = T;
    using allocator_type         = Allocator;
    using pointer                = typename allocator_traits<Allocator>::pointer;
    using const_pointer          = typename allocator_traits<Allocator>::const_pointer;
    using reference              = value_type&;
    using const_reference        = const value_type&;
    using size_type              = [[redoc("=impdef")]]_; // [:en] see [`container.requirements] \
                                                             [:zh_CN] 参见 [#container.requirements]
    using difference_type        = [[redoc("=impdef")]]_; // [:en] see [`container.requirements] \
                                                             [:zh_CN] 参见 [#container.requirements]
    using iterator               = [[redoc("?impdefx [:en] type of [`list::iterator]"
                                                    "[:zh_CN] [`list::iterator] 的类型")]]; // [:en] see [`container.requirements] \
                                                                                               [:zh_CN] 参见 [#container.requirements]
    using const_iterator         = [[redoc("?impdefx [:en] type of [`list::const_iterator]"
                                                    "[:zh_CN] [`list::const_iterator] 的类型")]]; // [:en] see [`container.requirements] \
                                                                                                     [:zh_CN] 参见 [#container.requirements]
    using reverse_iterator       = std::reverse_iterator<iterator>;
    using const_reverse_iterator = std::reverse_iterator<const_iterator>;

    // [:en] [#list.cons], construct/copy/destroy \
       [:zh_CN] [#list.cons]，构造/复制/销毁
    list() : list(Allocator()) { }
    explicit list(const Allocator&);
    explicit list(size_type n, const Allocator& = Allocator());
    list(size_type n, const T& value, const Allocator& = Allocator());
    template<class InputIterator>
      list(InputIterator first, InputIterator last, const Allocator& = Allocator());
    list(const list& x);
    list(list&& x);
    list(const list&, const Allocator&);
    list(list&&, const Allocator&);
    list(initializer_list<T>, const Allocator& = Allocator());
    ~list();
    list& operator=(const list& x);
    list& operator=(list&& x)
      noexcept(allocator_traits<Allocator>::is_always_equal::value);
    list& operator=(initializer_list<T>);
    template<class InputIterator>
      void assign(InputIterator first, InputIterator last);
    void assign(size_type n, const T& t);
    void assign(initializer_list<T>);
    allocator_type get_allocator() const noexcept;

    // [:en] iterators \
       [:zh_CN] 迭代器
    iterator               begin() noexcept;
    const_iterator         begin() const noexcept;
    iterator               end() noexcept;
    const_iterator         end() const noexcept;
    reverse_iterator       rbegin() noexcept;
    const_reverse_iterator rbegin() const noexcept;
    reverse_iterator       rend() noexcept;
    const_reverse_iterator rend() const noexcept;

    const_iterator         cbegin() const noexcept;
    const_iterator         cend() const noexcept;
    const_reverse_iterator crbegin() const noexcept;
    const_reverse_iterator crend() const noexcept;

    // [:en] [#list.capacity], capacity \
       [:zh_CN] [#list.capacity]，容量
    [[nodiscard]] bool empty() const noexcept;
    size_type size() const noexcept;
    size_type max_size() const noexcept;
    void      resize(size_type sz);
    void      resize(size_type sz, const T& c);

    // [:en] element access \
       [:zh_CN] 元素访问
    reference       front();
    const_reference front() const;
    reference       back();
    const_reference back() const;

    // [:en] [#list.modifiers], modifiers \
       [:zh_CN] [#list.modifiers]，改动函数
    template<class... Args> reference emplace_front(Args&&... args);
    template<class... Args> reference emplace_back(Args&&... args);
    void push_front(const T& x);
    void push_front(T&& x);
    void pop_front();
    void push_back(const T& x);
    void push_back(T&& x);
    void pop_back();

    template<class... Args> iterator emplace(const_iterator position, Args&&... args);
    iterator insert(const_iterator position, const T& x);
    iterator insert(const_iterator position, T&& x);
    iterator insert(const_iterator position, size_type n, const T& x);
    template<class InputIterator>
      iterator insert(const_iterator position, InputIterator first, InputIterator last);
    iterator insert(const_iterator position, initializer_list<T> il);

    iterator erase(const_iterator position);
    iterator erase(const_iterator position, const_iterator last);
    void     swap(list&) noexcept(allocator_traits<Allocator>::is_always_equal::value);
    void     clear() noexcept;

    // [:en] [#list.ops], list operations \
       [:zh_CN] [#list.ops]，list 的操作
    void splice(const_iterator position, list& x);
    void splice(const_iterator position, list&& x);
    void splice(const_iterator position, list& x, const_iterator i);
    void splice(const_iterator position, list&& x, const_iterator i);
    void splice(const_iterator position, list& x, const_iterator first, const_iterator last);
    void splice(const_iterator position, list&& x, const_iterator first, const_iterator last);

    size_type remove(const T& value);
    template<class Predicate> size_type remove_if(Predicate pred);

    size_type unique();
    template<class BinaryPredicate>
      size_type unique(BinaryPredicate binary_pred);

    void merge(list& x);
    void merge(list&& x);
    template<class Compare> void merge(list& x, Compare comp);
    template<class Compare> void merge(list&& x, Compare comp);

    void sort();
    template<class Compare> void sort(Compare comp);

    void reverse() noexcept;
  };

  template<class InputIterator, class Allocator = allocator<[[redoc("^", "n>")]]iter-value-type<InputIterator>>>
    list(InputIterator, InputIterator, Allocator = Allocator())
      -> list<[[redoc("^", "n>")]]iter-value-type<InputIterator>, Allocator>;

  // [:en] swap \
     [:zh_CN] 交换
  template<class T, class Allocator>
    void swap(list<T, Allocator>& x, list<T, Allocator>& y)
      noexcept(noexcept(x.swap(y)));
}
[codeblock:end]

[para]
[:en] An incomplete type [`T] may be used when instantiating [`list] if the
allocator meets the allocator completeness requirements
[#allocator.requirements.completeness].
[:zh_CN] 如果分配器能够满足分配器的完整性规定
（[#allocator.requirements.completeness]），则可以用不完整类型 [`T] 来实例化
[`list]。

[:en] [`T] shall be complete before any member of the resulting specialization
of [`list] is referenced.
[:zh_CN] 而在涉指所产生的 [`list] 特例的任何成员之前，[`T] 应当完整。
