[section#flat.multiset.cons
    [:en] Constructors
    [:zh_CN] 构造函数
]

[%@lib@ctor flat_multiset]
[codeblock:declaration]
explicit flat_multiset(container_type cont);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*c] with [`std::move(cont)], value-initializes [*compare],
and sorts the range [=range(begin(),end())] with respect to [*compare].
[:zh_CN] 以 [`std::move(cont)] 初始化 [*c]，值初始化 [*compare]，并根据
[*compare] 对范围 [=range(begin(),end())] 进行排序。

[para:complexity]
[:en] Linear in [$N] if [`cont] is sorted with respect to [*compare] and
otherwise [$N \log N], where [$N] is the value of [`cont.size()] before this call.
[:zh_CN] 如果 [`cont] 已经根据 [*compare] 有序，则对于 [$N] 为线性，否则为
[$N \log N]，其中 [$N] 为本次调用之前 [`cont.size()] 的值。
[div:end]

[%@lib@ctor flat_multiset]
[codeblock:declaration]
template<class Allocator>
  flat_multiset(const container_type& cont, const Allocator& a);
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`uses_allocator_v<container_type, Allocator>] is [`true].
[:zh_CN] [`uses_allocator_v<container_type, Allocator>] 为 [`true]。

[para:effects]
[:en] Equivalent to [`flat_multiset(cont)], except that [*c] is constructed with
uses-allocator construction ([#allocator.uses.construction]).
[:zh_CN] 等价于 [`flat_multiset(cont)]，但 [*c] 进行使用分配器的构造
（[#allocator.uses.construction]）。

[para:complexity]
[:en] Same as [`flat_multiset(cont)].
[:zh_CN] 与 [`flat_multiset(cont)] 相同。
[div:end]

[%@lib@ctor flat_multiset]
[codeblock:declaration]
template<class Allocator>
  flat_multiset(sorted_equivalent_t s, const container_type& cont, const Allocator& a);
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`uses_allocator_v<container_type, Allocator>] is [`true].
[:zh_CN] [`uses_allocator_v<container_type, Allocator>] 为 [`true]。

[para:effects]
[:en] Equivalent to [`flat_multiset(s, cont)], except that [*c] is constructed
with uses-allocator construction ([#allocator.uses.construction]).
[:zh_CN] 等价于 [`flat_multiset(s, cont)]，但 [*c] 进行使用分配器的构造
（[#allocator.uses.construction]）。

[para:complexity]
[:en] Linear.
[:zh_CN] 线性。
[div:end]

[%@lib@ctor flat_multiset]
[codeblock:declaration]
template<class Allocator>
  flat_multiset(const key_compare& comp, const Allocator& a);
template<class Allocator>
  explicit flat_multiset(const Allocator& a);
template<class InputIterator, class Allocator>
  flat_multiset(InputIterator first, InputIterator last,
                const key_compare& comp, const Allocator& a);
template<class InputIterator, class Allocator>
  flat_multiset(InputIterator first, InputIterator last, const Allocator& a);
template<[[redoc("*:c>")]]container-compatible-range<value_type> R, class Allocator>
  flat_multiset(from_range_t, R&& rg, const Allocator& a);
template<[[redoc("*:c>")]]container-compatible-range<value_type> R, class Allocator>
  flat_multiset(from_range_t, R&& rg, const key_compare& comp, const Allocator& a);
template<class InputIterator, class Allocator>
  flat_multiset(sorted_equivalent_t, InputIterator first, InputIterator last,
                const key_compare& comp, const Allocator& a);
template<class InputIterator, class Allocator>
  flat_multiset(sorted_equivalent_t, InputIterator first, InputIterator last, const Allocator& a);
template<class Allocator>
  flat_multiset(initializer_list<value_type> il, const key_compare& comp, const Allocator& a);
template<class Allocator>
  flat_multiset(initializer_list<value_type> il, const Allocator& a);
template<class Allocator>
  flat_multiset(sorted_equivalent_t, initializer_list<value_type> il,
                const key_compare& comp, const Allocator& a);
template<class Allocator>
  flat_multiset(sorted_equivalent_t, initializer_list<value_type> il, const Allocator& a);
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`uses_allocator_v<container_type, Allocator>] is [`true].
[:zh_CN] [`uses_allocator_v<container_type, Allocator>] 为 [`true]。

[para:effects]
[:en] Equivalent to the corresponding non-allocator constructors, except that
[*c] is constructed with uses-allocator construction
([#allocator.uses.construction]).
[:zh_CN] 等价于对应的无分配器构造函数，但 [*c] 进行使用分配器的构造
（[#allocator.uses.construction]）。
[div:end]
