[section#vector.overview
    [:en] Overview
    [:zh_CN] 概要
]

[%@lib vector]

[para]
[:en] A [`vector] is a sequence container that supports (amortized) constant
time insert and erase operations at the end; insert and erase in the middle take
linear time.
[:zh_CN] [`vector] 是一种序列容器，并支持在末尾进行（摊销）常量时间的插入和清除
操作；在中间进行的插入和清除耗费线性时间。

[:en] Storage management is handled automatically, though hints can be given
to improve efficiency.
[:zh_CN] 存储管理是被自动处理的，可以通过提供提示来提升性能。

[para]
[:en] A [`vector] meets all of the requirements of a container
([#container.reqmts]), of a reversible container ([#container.rev.reqmts]), of
an allocator-aware container ([#container.alloc.reqmts]), of a sequence
container, including most of the optional sequence container requirements
([#sequence.reqmts]), and, for an element type other than [`bool],
of a contiguous container ([#container.requirements.general]).
[:zh_CN] [`vector] 满足容器（[#container.reqmts]），可反向容器
（[#container.rev.reqmts]），分配器感知容器（[#container.alloc.reqmts]），
序列容器的所有规定，包括大多数可选的序列容器规定（[#sequence.reqmts]），以及
（对于除了 [`bool] 之外的元素类型）连续容器
（[#container.requirements.general]）的所有规定。

[:en] The exceptions are the [`push_front], [`prepend_range], [`pop_front], and
[`emplace_front] member functions, which are not provided.
[:zh_CN] 其例外是并未提供成员函数 [`push_front]，[`prepend_range]，[`pop_front]，
和 [`emplace_front]。

[:en] Descriptions are provided here only for operations on [`vector] that are
not described in one of these tables or for operations where there is additional
semantic information.
[:zh_CN] 此处给出的说明仅包括未被这些表格之一所描述的 [`vector] 的操作，以及具有
额外的语义信息的操作。

[para]
[:en] The types [`iterator] and [`const_iterator] meet the constexpr iterator
requirements ([#iterator.requirements.general]).
[:zh_CN] 类型 [`iterator] 和 [`const_iterator] 满足 constexpr 迭代器的规定
（[#iterator.requirements.general]）。

[codeblock:synopsis]
namespace std {
  template<class T, class Allocator = allocator<T>>
  class vector {
  public:
    // [:en] types \
    [:zh_CN] 类型
    using value_type             = T;
    using allocator_type         = Allocator;
    using pointer                = typename allocator_traits<Allocator>::pointer;
    using const_pointer          = typename allocator_traits<Allocator>::const_pointer;
    using reference              = value_type&;
    using const_reference        = const value_type&;
    using size_type              = [[redoc("[?impdefx"
          " [:en] type of [`vector::size_type]"
        "[:zh_CN] [`vector::size_type] 的类型]")]]; // [:en] see [#container.requirements] \
                                                    [:zh_CN] 参见 [#container.requirements]
    using difference_type        = [[redoc("[?impdefx"
          " [:en] type of [`vector::difference_type]"
        "[:zh_CN] [`vector::difference_type] 的类型]")]]; // [:en] see [#container.requirements] \
                                                          [:zh_CN] 参见 [#container.requirements]
    using iterator               = [[redoc("[?impdefx"
          " [:en] type of [`vector::iterator]"
        "[:zh_CN] [`vector::iterator] 的类型]")]]; // [:en] see [#container.requirements] \
                                                   [:zh_CN] 参见 [#container.requirements]
    using const_iterator         = [[redoc("[?impdefx"
          " [:en] type of [`vector::const_iterator]"
        "[:zh_CN] [`vector::const_iterator] 的类型]")]]; // [:en] see [#container.requirements] \
                                                         [:zh_CN] 参见 [#container.requirements]
    using reverse_iterator       = std::reverse_iterator<iterator>;
    using const_reverse_iterator = std::reverse_iterator<const_iterator>;

    // [:en] [#vector.cons], construct/copy/destroy \
    [:zh_CN] [#vector.cons]，构造/复制/销毁
    constexpr vector() noexcept(noexcept(Allocator())) : vector(Allocator()) { }
    constexpr explicit vector(const Allocator&) noexcept;
    constexpr explicit vector(size_type n, const Allocator& = Allocator());
    constexpr vector(size_type n, const T& value, const Allocator& = Allocator());
    template<class InputIterator>
      constexpr vector(InputIterator first, InputIterator last, const Allocator& = Allocator());
    template<[[redoc("*:c>")]]container-compatible-range<T> R>
      constexpr vector(from_range_t, R&& rg, const Allocator& = Allocator());
    constexpr vector(const vector& x);
    constexpr vector(vector&&) noexcept;
    constexpr vector(const vector&, const type_identity_t<Allocator>&);
    constexpr vector(vector&&, const type_identity_t<Allocator>&);
    constexpr vector(initializer_list<T>, const Allocator& = Allocator());
    constexpr ~vector();
    constexpr vector& operator=(const vector& x);
    constexpr vector& operator=(vector&& x)
      noexcept(allocator_traits<Allocator>::propagate_on_container_move_assignment::value ||
               allocator_traits<Allocator>::is_always_equal::value);
    constexpr vector& operator=(initializer_list<T>);
    template<class InputIterator>
      constexpr void assign(InputIterator first, InputIterator last);
    template<[[redoc("*:c>")]]container-compatible-range<T> R>
      constexpr void assign_range(R&& rg);
    constexpr void assign(size_type n, const T& u);
    constexpr void assign(initializer_list<T>);
    constexpr allocator_type get_allocator() const noexcept;

    // [:en] iterators \
    [:zh_CN] 迭代器
    constexpr iterator               begin() noexcept;
    constexpr const_iterator         begin() const noexcept;
    constexpr iterator               end() noexcept;
    constexpr const_iterator         end() const noexcept;
    constexpr reverse_iterator       rbegin() noexcept;
    constexpr const_reverse_iterator rbegin() const noexcept;
    constexpr reverse_iterator       rend() noexcept;
    constexpr const_reverse_iterator rend() const noexcept;

    constexpr const_iterator         cbegin() const noexcept;
    constexpr const_iterator         cend() const noexcept;
    constexpr const_reverse_iterator crbegin() const noexcept;
    constexpr const_reverse_iterator crend() const noexcept;

    // [:en] [#vector.capacity], capacity \
    [:zh_CN] [#vector.capacity]，容量
    [[nodiscard]] constexpr bool empty() const noexcept;
    constexpr size_type size() const noexcept;
    constexpr size_type max_size() const noexcept;
    constexpr size_type capacity() const noexcept;
    constexpr void      resize(size_type sz);
    constexpr void      resize(size_type sz, const T& c);
    constexpr void      reserve(size_type n);
    constexpr void      shrink_to_fit();

    // [:en] element access \
    [:zh_CN] 元素访问
    constexpr reference       operator[](size_type n);
    constexpr const_reference operator[](size_type n) const;
    constexpr const_reference at(size_type n) const;
    constexpr reference       at(size_type n);
    constexpr reference       front();
    constexpr const_reference front() const;
    constexpr reference       back();
    constexpr const_reference back() const;

    // [:en] [#vector.data], data access \
    [:zh_CN] [#vector.data]，数据访问
    constexpr T*       data() noexcept;
    constexpr const T* data() const noexcept;

    // [:en] [#vector.modifiers], modifiers \
    [:zh_CN] [#vector.modifiers]，改动函数
    template<class... Args> constexpr reference emplace_back(Args&&... args);
    constexpr void push_back(const T& x);
    constexpr void push_back(T&& x);
    template<[[redoc("*:c>")]]container-compatible-range<T> R>
      constexpr void append_range(R&& rg);
    constexpr void pop_back();

    template<class... Args> constexpr iterator emplace(const_iterator position, Args&&... args);
    constexpr iterator insert(const_iterator position, const T& x);
    constexpr iterator insert(const_iterator position, T&& x);
    constexpr iterator insert(const_iterator position, size_type n, const T& x);
    template<class InputIterator>
      constexpr iterator insert(const_iterator position,
                                InputIterator first, InputIterator last);
    template<[[redoc("*:c>")]]container-compatible-range<T> R>
      constexpr iterator insert_range(const_iterator position, R&& rg);
    constexpr iterator insert(const_iterator position, initializer_list<T> il);
    constexpr iterator erase(const_iterator position);
    constexpr iterator erase(const_iterator first, const_iterator last);
    constexpr void     swap(vector&)
      noexcept(allocator_traits<Allocator>::propagate_on_container_swap::value ||
               allocator_traits<Allocator>::is_always_equal::value);
    constexpr void     clear() noexcept;
  };

  template<class InputIterator, class Allocator = allocator<[[redoc("^>")]]iter-value-type<InputIterator>>>
    vector(InputIterator, InputIterator, Allocator = Allocator())
      -> vector<[[redoc("^>")]]iter-value-type<InputIterator>, Allocator>;

  template<ranges::[[redoc("^:c>")]]input_range R, class Allocator = allocator<ranges::range_value_t<R>>>
    vector(from_range_t, R&&, Allocator = Allocator())
      -> vector<ranges::range_value_t<R>, Allocator>;
}
[codeblock:end]
[%@lib@member vector[!operator==]]
[%@lib@member vector[!operator<]]


[para]
[:en] An incomplete type [`T] may be used when instantiating [`vector] if the
allocator meets the allocator completeness requirements
([#allocator.requirements.completeness]).
[:zh_CN] 如果分配器能够满足分配器的完整性规定
（[#allocator.requirements.completeness]），则可以用不完整类型 [`T] 来实例化
[`vector]。

[:en] [`T] shall be complete before any member of the resulting specialization
of [`vector] is referenced.
[:zh_CN] 而在涉指所产生的 [`vector] 特例的任何成员之前，[`T] 应当完整。
