[section#vector.capacity
    [:en] Capacity
    [:zh_CN] 容量
]

[%@library capacity[!vector]]
[codeblock:declaration]
constexpr size_type capacity() const noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] The total number of elements that the vector can hold without requiring
reallocation.
[:zh_CN] 在不需要重新分配的情况下该 [`vector] 可以容纳的元素总数。

[para:complexity]
[:en] Constant time.
[:zh_CN] 常量时间。
[exit:description]

[%@library reserve[!vector]]
[codeblock:declaration]
constexpr void reserve(size_type n);
[codeblock:end]

[enter:description]
[para:expects]
[:en] [`T] is [*Cpp17MoveInsertable] into [`*this].
[:zh_CN] [`T] 向 [`*this] 中 [*Cpp17MoveInsertable]。

[para:effects]
[:en] A directive that informs a [`vector] of a planned change in size, so that
it can manage the storage allocation accordingly.
[:zh_CN] 用以告知 [`basic_string] 对象进行按计划的大小调整的指令，使其能够据此
管理存储分配。

[:en] After [`reserve()], [`capacity()] is greater or equal to the argument of
[`reserve] if reallocation happens; and equal to the previous value of
[`capacity()] otherwise.
[:zh_CN] [`reserve()] 之后，如果发生了重新分配，则 [`capacity()] 大于或等于
[`reserve] 的实参；否则等于 [`capacity()] 之前的值。

[:en] Reallocation happens at this point if and only if the current capacity is
less than the argument of [`reserve()].
[:zh_CN] 当且仅当当前的容量小于 [`reserve()] 的实参时发生重新分配。

[:en] If an exception is thrown other than by the move constructor of a
non-[*Cpp17CopyInsertable] type, there are no effects.
[:zh_CN] 如果抛出了除了被非 [*Cpp17CopyInsertable] 类型的移动构造函数所抛出的
之外的异常，则没有效果。

[para:complexity]
[:en] It does not change the size of the sequence and takes at most linear
time in the size of the sequence.
[:zh_CN] 这并不会改变序列的大小，并最多耗费对于序列的大小为线性的时间。

[para:throws]
[:en] [`length_error] if [`n > max_size()].[#:note#fn:$1]
[:zh_CN] 当 [`n > max_size()] 时抛出 [`length_error]。[#:note#fn:$1]

[note:foot#fn:$1]
[:en] [`reserve()] uses [`Allocator::allocate()] which may throw an appropriate
exception.
[:zh_CN] [`reserve()] 使用 [`Allocator::allocate()]，并可能抛出适当的异常。
[note:end]

[para:remarks]
[:en] Reallocation invalidates all the references, pointers, and iterators
referring to the elements in the sequence, as well as the past-the-end iterator.
[:zh_CN] 重新分配将使指代序列中的元素的所有引用、指针和迭代器，以及越过末尾
迭代器失效。

[enter:note]
[:en] If no reallocation happens, they remain valid.
[:zh_CN] 如果未发生重新分配，则它们保持有效。
[exit:note]

[:en] No reallocation shall take place during insertions that happen after a
call to [`reserve()] until an insertion would make the size of the vector
greater than the value of [`capacity()].
[:zh_CN] 在调用 [`reserve()] 之后直到某次插入可能会使 [`vector] 的大小大于
[`capacity()] 的值之前，插入过程中不能发生重新分配。
[exit:description]

[%@library shrink_to_fit[!vector]]
[codeblock:declaration]
constexpr void shrink_to_fit();
[codeblock:end]

[enter:description]
[para:expects]
[:en] [`T] is [*Cpp17MoveInsertable] into [`*this].
[:zh_CN] [`T] 向 [`*this] 中 [*Cpp17MoveInsertable]。

[para:effects]
[:en] [`shrink_to_fit] is a non-binding request to reduce [`capacity()] to
[`size()].
[:zh_CN] [`shrink_to_fit] 是一种不具有约束力的将 [`capacity()] 缩减至 [`size()]
的请求。

[enter:note]
[:en] The request is non-binding to allow latitude for implementation-specific
optimizations.
[:zh_CN] 该请求不具约束力，以允许进行实现特有的优化。
[exit:note]

[:en] It does not increase [`capacity()], but may reduce [`capacity()] by
causing reallocation.
[:zh_CN] 它不会增加 [`capacity()]，但可以通过引发重新分配而减小 [`capacity()]。

[:en] If an exception is thrown other than by the move constructor of a
non-[*Cpp17CopyInsertable] [`T] there are no effects.
[:zh_CN] 如果抛出了除了被非 [*Cpp17CopyInsertable] 的 [`T] 的移动构造函数所抛出
的之外的异常，则没有效果。

[para:complexity]
[:en] If reallocation happens, linear in the size of the sequence.
[:zh_CN] 如果发生了重新分配，则对于序列的大小为线性的。

[para:remarks]
[:en] Reallocation invalidates all the references, pointers, and iterators
referring to the elements in the sequence as well as the past-the-end iterator.
[:zh_CN] 重新分配将使指代序列中的元素的所有引用、指针和迭代器，以及‘越过末尾’
迭代器失效。

[enter:note]
[:en] If no reallocation happens, they remain valid.
[:zh_CN] 若未发生重新分配，则它们保持有效。
[exit:note]
[exit:description]

[%@library swap[!vector]]
[codeblock:declaration]
constexpr void swap(vector& x)
  noexcept(allocator_traits<Allocator>::propagate_on_container_swap::value ||
           allocator_traits<Allocator>::is_always_equal::value);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Exchanges the contents and [`capacity()] of [`*this] with that of [`x].
[:zh_CN] 交换 [`*this] 和 [`x] 的内容和 [`capacity()]。

[para:complexity]
[:en] Constant time.
[:zh_CN] 常量时间。
[exit:description]

[%@library resize[!vector]]
[codeblock:declaration]
void resize(size_type sz);
[codeblock:end]

[enter:description]
[para:expects]
[:en] [`T] is [*Cpp17MoveInsertable] and [*Cpp17DefaultInsertable] into [`*this].
[:zh_CN] [`T] 向 [`*this] 中 [*Cpp17MoveInsertable] 并且
[*Cpp17DefaultInsertable]。

[para:effects]
[:en] If [`sz < size()], erases the last [`size() - sz] elements from the
sequence.
[:zh_CN] 如果 [`sz < size()]，则从序列中清除最后 [`size() - sz] 个元素。

[:en] Otherwise, appends [`sz - size()] default-inserted elements to the
sequence.
[:zh_CN] 否则，向序列追加 [`sz - size()] 个默认插入的元素。

[para:remarks]
[:en] If an exception is thrown other than by the move constructor of a
non-[*Cpp17CopyInsertable] [`T] there are no effects.
[:zh_CN] 如果抛出了除了被非 [*Cpp17CopyInsertable] 的 [`T] 的移动构造函数所抛出
的之外的异常，则没有效果。
[exit:description]

[%@library resize[!vector]]
[codeblock:declaration]
constexpr void resize(size_type sz, const T& c);
[codeblock:end]

[enter:description]
[para:expects]
[:en] [`T] is [*Cpp17CopyInsertable] into [`*this].
[:zh_CN] [`T] 向 [`*this] 中 [*Cpp17CopyInsertable]。

[para:effects]
[:en] If [`sz < size()], erases the last [`size() - sz] elements from the
sequence.
[:zh_CN] 如果 [`sz < size()]，则从序列中清除最后 [`size() - sz] 个元素。

[:en] Otherwise, appends [`sz - size()] copies of [`c] to the sequence.
[:zh_CN] 否则，向序列追加 [`sz - size()] 个 [`c] 的副本。

[para:remarks]
[:en] If an exception is thrown there are no effects.
[:zh_CN] 如果抛出异常则没有效果
[exit:description]
