[section#forward.list.modifiers
    [:en] Modifiers
    [:zh_CN] 改动函数
]

[para]
[:en] The member functions in this subclause do not affect the validity of
iterators and references when inserting elements, and when erasing elements
invalidate iterators and references to the erased elements only.
[:zh_CN] 本子条款中的成员函数，在插入元素时都不会影响迭代器和引用的有效性，而在
擦除元素时只会使指代所擦除元素的迭代器和引用失效。

[:en] If an exception is thrown by any of these member functions there is
no effect on the container.
[:zh_CN] 如果这些成员函数中任何函数抛出了异常，则它应当对容器没有效果。

[:en] Inserting [`n] elements into a [`forward_list] is linear in [`n], and the
number of calls to the copy or move constructor of [`T] is exactly equal to [`n].
[:zh_CN] 向 [`forward_list] 中插入 [`n] 个元素对于 [`n] 为线性，且对 [`T] 的复制
或移动构造函数的调用次数应当恰好等于 [`n]。

[:en] Erasing [`n] elements from a [`forward_list] is linear in [`n] and the
number of calls to the destructor of type [`T] is exactly equal to [`n].
[:zh_CN] 从 [`forward_list] 中清除 [`n] 个元素对于 [`n] 为线性，且对 [`T] 的析构
函数的调用次数应当恰好等于 [`n]。

[%@lib@member emplace_front[!forward_list]]
[codeblock:declaration]
template<class... Args> reference emplace_front(Args&&... args);
[codeblock:end]

[div:description]
[para:effects]
[:en] Inserts an object of type [`value_type] constructed with
[`value_type(std::forward<Args>(args)...)] at the beginning of the list.
[:zh_CN] 在列表的开头插入以 [`value_type(std::forward<Args>(args)...)] 构造的
[`value_type] 类型的对象。
[div:end]

[%@lib@member push_front[!forward_list]]
[codeblock:declaration]
void push_front(const T& x);
void push_front(T&& x);
[codeblock:end]

[div:description]
[para:effects]
[:en] Inserts a copy of [`x] at the beginning of the list.
[:zh_CN] 在列表的开头插入 [`x] 的一个副本。
[div:end]

[%@lib@member prepend_range[!forward_list]]
[codeblock:declaration]
template<[[redoc("*:c>")]]container-compatible-range<T> R>
  void prepend_range(R&& rg);
[codeblock:end]

[div:description]
[para:effects]
[:en] Inserts a copy of each element of [`rg] at the beginning of the list.
[:zh_CN] 在列表的开头插入 [`rg] 的各个元素的一个副本。

[begin:note]
[:en] The order of elements is not reversed.
[:zh_CN] 不翻转各元素的顺序。
[end:note]
[div:end]

[%@lib@member pop[!forward_list]]
[codeblock:declaration]
void pop_front();
[codeblock:end]

[div:description]
[para:effects]
[:en] As if by [`erase_after(before_begin())].
[:zh_CN] 如同执行 [`erase_after(before_begin())]。
[div:end]

[%@lib@member insert_after[!forward_list]]
[codeblock:declaration]
iterator insert_after(const_iterator position, const T& x);
iterator insert_after(const_iterator position, T&& x);
[codeblock:end]

[div:description]
[para:expects]
[:en] [`T] is [^:oc CopyInsertable] into [`forward_list].
[:zh_CN] [`T] 为向 [`forward_list] 中 [^:oc CopyInsertable]。

[:en] [`position] is [`before_begin()] or is a dereferenceable iterator in the
range [=range(begin(),end())].
[:zh_CN] [`position] 为 [`before_begin()]，或者是范围 [=range(begin(),end())] 中
的可解引用迭代器。

[para:effects]
[:en] Inserts a copy of [`x] after [`position].
[:zh_CN] 在 [`position] 之后插入 [`x] 的一个副本。

[para:returns]
[:en] An iterator pointing to the copy of [`x].
[:zh_CN] 指向 [`x] 的副本的迭代器。
[div:end]

[%@lib@member insert_after[!forward_list]]
[codeblock:declaration]
iterator insert_after(const_iterator position, T&& x);
[codeblock:end]

[div:description]
[para:expects]
[:en] [`T] is [^:oc MoveInsertable] into [`forward_list].
[:zh_CN] [`T] 为向 [`forward_list] 中 [^:oc MoveInsertable]。

[:en] [`position] is [`before_begin()] or is a dereferenceable iterator in the
range [=range(begin(),end())].
[:zh_CN] [`position] 为 [`before_begin()]，或者是范围 [=range(begin(),end())] 中
的可解引用迭代器。

[para:effects]
[:en] Inserts a copy of [`x] after [`position].
[:zh_CN] 在 [`position] 之后插入 [`x] 的一个副本。

[para:returns]
[:en] An iterator pointing to the copy of [`x].
[:zh_CN] 指向 [`x] 的副本的迭代器。
[div:end]

[%@lib@member insert_after[!forward_list]]
[codeblock:declaration]
iterator insert_after(const_iterator position, size_type n, const T& x);
[codeblock:end]

[div:description]
[para:expects]
[:en] [`T] is [^:oc CopyInsertable] into [`forward_list].
[:zh_CN] [`T] 为向 [`forward_list] 中 [^:oc CopyInsertable]。

[:en] [`position] is [`before_begin()] or is a dereferenceable iterator in the
range [=range(begin(),end())].
[:zh_CN] [`position] 为 [`before_begin()]，或者是范围 [=range(begin(),end())] 中
的可解引用迭代器。

[para:effects]
[:en] Inserts [`n] copies of [`x] after [`position].
[:zh_CN] 在 [`position] 之后插入 [`n] 个 [`x] 的副本。

[para:returns]
[:en] An iterator pointing to the last inserted copy of [`x], or [`position] if
[`n == 0] is [`true].
[:zh_CN] 指向最后插入的 [`x] 的副本的迭代器，或者当 [`n == 0] 为 [`true] 时为 [`position]。
[div:end]

[%@lib@member insert_after[!forward_list]]
[codeblock:declaration]
template<class InputIterator>
  iterator insert_after(const_iterator position, InputIterator first, InputIterator last);
[codeblock:end]

[div:description]
[para:expects]
[:en] [`T] is [^:oc EmplaceConstructible] into [`forward_list] from [`*first].
[:zh_CN] [`T] 为以 [`*first] 向 [`forward_list] 中 [^:oc EmplaceConstructible]。

[:en] [`position] is [`before_begin()] or is a dereferenceable iterator in the
range [=range(begin(),end())].
[:zh_CN] [`position] 为 [`before_begin()]，或者是范围 [=range(begin(),end())] 中
的可解引用迭代器。

[:en] Neither [`first] nor [`last] are iterators in [`*this].
[:zh_CN] [`first] 和 [`last] 都不是 [`*this] 中的迭代器。

[para:effects]
[:en] Inserts copies of elements in [=range(first,last)] after [`position].
[:zh_CN] 在 [`position] 之后插入 [=range(first,last)] 中的元素的副本。

[para:returns]
[:en] An iterator pointing to the last inserted element, or [`position] if
[`first == last] is [`true].
[:zh_CN] 指向最后插入的元素的迭代器，或者当 [`first == last] 为 [`true] 时为 [`position]。
[div:end]

[%@lib@member insert_range_after[!forward_list]]
[codeblock:declaration]
template<[[redoc("*:c>")]]container-compatible-range<T> R>
  iterator insert_range_after(const_iterator position, R&& rg);
[codeblock:end]

[div:description]
[para:expects]
[:en] [`T] is [^:oc EmplaceConstructible] into [`forward_list] from
[*ranges::begin(rg)].
[:zh_CN] [`T] 为以 [*ranges::begin(rg)] 向 [`forward_list] 中
[^:oc EmplaceConstructible]。

[:en] [`position] is [`before_begin()] or is a dereferenceable iterator in the
range [=range(begin(),end())].
[:zh_CN] [`position] 为 [`before_begin()]，或者是范围 [=range(begin(),end())] 中
的可解引用迭代器。

[:en] [`rg] and [`*this] do not overlap.
[:zh_CN] [`rg] 和 [`*this] 没有交叠。

[para:effects]
[:en] Inserts copies of elements in the range [`rg] after [`position].
[:zh_CN] 在 [`position] 之后插入 [`rg] 中的各元素的副本。

[para:returns]
[:en] An iterator pointing to the last inserted element, or [`position] if
[`rg] is empty.
[:zh_CN] 指向最后插入的元素的迭代器，或者当 [`rg] 为空时为 [`position]。
[div:end]

[%@lib@member insert_after[!forward_list]]
[codeblock:declaration]
iterator insert_after(const_iterator position, initializer_list<T> il);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return insert_after(position, il.begin(), il.end());]
[:zh_CN] 等价于：[`return insert_after(position, il.begin(), il.end());]
[div:end]

[%@lib@member emplace_after[!forward_list]]
[codeblock:declaration]
template<class... Args>
  iterator emplace_after(const_iterator position, Args&&... args);
[codeblock:end]

[div:description]
[para:expects]
[:en] [`T] is [^:oc EmplaceConstructible] into [`forward_list] from
[`std::forward<Args>(args)...].
[:zh_CN] [`T] 为以 [`std::forward<Args>(args)...] 向 [`forward_list] 中
[^:oc EmplaceConstructible]。

[:en] [`position] is [`before_begin()] or is a dereferenceable iterator in the
range [=range(begin(),end())].
[:zh_CN] [`position] 为 [`before_begin()]，或者是范围 [=range(begin(),end())] 中
的可解引用迭代器。

[para:effects]
[:en] Inserts an object of type [`value_type] direct-non-list-initialized with
[`std::forward<Args>(args)...] after [`position].
[:zh_CN] 在 [`position] 之后插入以 [`std::forward<Args>(args)...] 直接非列表
初始化的 [`value_type] 类型的对象。
[:zh_CN]

[para:returns]
[:en] An iterator pointing to the new object.
[:zh_CN] 指向新对象的迭代器。
[div:end]

[%@lib@member erase_after[!forward_list]]
[codeblock:declaration]
iterator erase_after(const_iterator position);
[codeblock:end]

[div:description]
[para:expects]
[:en] The iterator following [`position] is dereferenceable.
[:zh_CN] [`position] 之后的迭代器是可解引用的。

[para:effects]
[:en] Erases the element pointed to by the iterator following [`position].
[:zh_CN] 清除由跟在 [`position] 之后的迭代器所指向的元素。

[para:returns]
[:en] An iterator pointing to the element following the one that was erased, or
[`end()] if no such element exists.
[:zh_CN] 指向跟在所清除的元素后面的元素的迭代器，或者当不存在这种元素时返回 [`end()]。

[para:throws]
[:en] Nothing.
[:zh_CN] 无。
[div:end]

[codeblock:declaration]
iterator erase_after(const_iterator position, const_iterator last);
[codeblock:end]

[div:description]
[para:expects]
[:en] All iterators in the range [=orange(position,last)] are dereferenceable.
[:zh_CN] 范围 [=orange(position,last)] 中的迭代器都是可解引用的。

[para:effects]
[:en] Erases the elements in the range [=orange(position,last)].
[:zh_CN] 清除范围 [=orange(position,last)] 中的元素。

[para:returns]
[:en] [`last].
[:zh_CN] [`last]。

[para:throws]
[:en] Nothing.
[:zh_CN] 无。
[div:end]

[%@lib@member resize[!forward_list]]
[codeblock:declaration]
void resize(size_type sz);
[codeblock:end]

[div:description]
[para:expects]
[:en] [`T] is [^:oc DefaultInsertable] into [`forward_list].
[:zh_CN] [`T] 向 [`forward_list] 中 [^:oc DefaultInsertable]。

[para:effects]
[:en] If [`sz < distance(begin(), end())], erases the last
[`distance(begin(), end()) - sz] elements from the list.
[:zh_CN] 如果 [`sz < distance(begin(), end()]，则清除列表中的最后
[`distance(begin(), end()) - sz] 个元素。

[:en] Otherwise, inserts [`sz - distance(begin(), end())] default-inserted
elements at the end of the list.
[:zh_CN] 否则，在列表的末尾插入 [`sz - distance(begin(), end())] 个默认插入的元素。
[div:end]

[codeblock:declaration]
void resize(size_type sz, const value_type& c);
[codeblock:end]

[div:description]
[para:expects]
[:en] [`T] is [^:oc CopyInsertable] into [`forward_list].
[:zh_CN] [`T] 向 [`forward_list] 中 [^:oc CopyInsertable]。

[para:effects]
[:en] If [`sz < distance(begin(), end())], erases the last
[`distance(begin(), end()) - sz] elements from the list.
[:zh_CN] 如果 [`sz < distance(begin(), end()]，则清除列表中的最后
[`distance(begin(), end()) - sz] 个元素。

[:en] Otherwise, inserts [`sz - distance(begin(), end())] copies of [`c] at the
end of the list.
[:zh_CN] 否则，在列表的末尾插入 [`sz - distance(begin(), end())] 个 [`c] 的副本。
[div:end]

[%@lib@member clear[!forward_list]]
[codeblock:declaration]
void clear() noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Erases all elements in the range [=range(begin(),end())].
[:zh_CN] 清除范围 [=range(begin(),end())] 中的所有元素。

[para:remarks]
[:en] Does not invalidate past-the-end iterators.
[:zh_CN] 并不使越过末尾迭代器失效。
[div:end]
