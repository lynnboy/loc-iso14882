[section#container.adaptors.format
    [:en] Container adaptors formatting
    [:zh_CN] 容器适配器的格式化
]

[para]
[:en] For each of [`queue], [`priority_queue], and [`stack], the library
provides the following formatter specialization where [`[^adaptor-type]] is the
name of the template:
[:zh_CN] 对于 [`queue]，[`priority_queue]，和 [`stack] 中的每一个，程序库均提供
如下的格式化器特化式，其中 [`[^adaptor-type]] 为模板的名字：

[%@lib formatter]
[codeblock:synopsis]
namespace std {
  template<class charT, class T, [[redoc("`:c>")]]formattable<charT> Container, class... U>
  struct formatter<[[redoc("^>")]]adaptor-type<T, Container, U...>, charT> {
  private:
    using [[redoc("*>")]]maybe-const-adaptor =                                   // [=expos]
      [[redoc("*>")]]fmt-maybe-const<[[redoc("^>")]]adaptor-type<T, Container, U...>, charT>;
    formatter<Container, charT> [[redoc("*>")]]underlying_;                      // [=expos]

  public:
    template<class ParseContext>
      constexpr typename ParseContext::iterator
        parse(ParseContext& ctx);

    template<class FormatContext>
      typename FormatContext::iterator
        format([[redoc("*>")]]maybe-const-adaptor& r, FormatContext& ctx) const;
  };
}
[codeblock:end]

[%@lib@member parse[!formatter]]
[codeblock:declaration]
template<class ParseContext>
  constexpr typename ParseContext::iterator
    parse(ParseContext& ctx);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return [*underlying_].parse(ctx);]
[:zh_CN] 等价于：[`return [*underlying_].parse(ctx);]
[div:end]

[%@lib@member format[!formatter]]
[codeblock:declaration]
template<class FormatContext>
  typename FormatContext::iterator
    format([[redoc("*>")]]maybe-const-adaptor& r, FormatContext& ctx) const;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return [*underlying_].format(r.c, ctx);]
[:zh_CN] 等价于：[`return [*underlying_].format(r.c, ctx);]
[div:end]
