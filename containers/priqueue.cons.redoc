[section#priqueue.cons
    [:en] Constructors
    [:zh_CN] 构造函数
]

[%@lib@ctor priority_queue]
[codeblock:declaration]
priority_queue(const Compare& x, const Container& y);
priority_queue(const Compare& x, Container&& y);
[codeblock:end]

[div:description]
[para:expects]
[:en] [`x] defines a strict weak ordering ([#alg.sorting]).
[:zh_CN] [`x] 定义一种严格弱序（[#alg.sorting]）。

[para:effects]
[:en] Initializes [`comp] with [`x] and [`c] with [`y] (copy constructing or
move constructing as appropriate); calls [`make_heap(c.begin(), c.end(), comp)].
[:zh_CN] 以 [`x] 初始化 [`comp]，并以 [`y] 初始化 [`c]（适当地进行复制构造或者
移动构造）；调用 [`make_heap(c.begin(), c.end(), comp)]。
[div:end]

[%@lib@ctor priority_queue]
[codeblock:declaration]
template<class InputIterator>
  priority_queue(InputIterator first, InputIterator last, const Compare& x = Compare());
[codeblock:end]

[div:description]
[para:expects]
[:en] [`x] defines a strict weak ordering ([#alg.sorting]).
[:zh_CN] [`x] 定义一种严格弱序（[#alg.sorting]）。

[para:effects]
[:en] Initializes [`c] with [`first] as the first argument and [`last] as the
second argument, and initializes [`comp] with [`x]; then calls
[`make_heap(c.begin(), c.end(), comp)].
[:zh_CN] 以 [`first] 为第一个实参并以 [`last] 为第二个实参初始化 [`c]，并以 [`x]
初始化 [`comp]；然后调用 [`make_heap(c.begin(), c.end(), comp)]。
[div:end]

[%@lib@ctor priority_queue]
[codeblock:declaration]
template<class InputIterator>
  priority_queue(InputIterator first, InputIterator last, const Compare& x, const Container& y);
template<class InputIterator>
  priority_queue(InputIterator first, InputIterator last, const Compare& x, Container&& y);
[codeblock:end]

[div:description]
[para:expects]
[:en] [`x] defines a strict weak ordering ([#alg.sorting]).
[:zh_CN] [`x] 定义一种严格弱序（[#alg.sorting]）。

[para:effects]
[:en] Initializes [`comp] with [`x] and [`c] with [`y] (copy constructing or
move constructing as appropriate); calls [`c.insert(c.end(), first, last)];
and finally calls [`make_heap(c.begin(), c.end(), comp)].
[:zh_CN] 以 [`x] 初始化 [`comp]，并以 [`y] 初始化 [`c]（适当地进行复制构造或者
移动构造）；调用 [`c.insert(c.end(), first, last)]；最后调用
[`make_heap(c.begin(), c.end(), comp)]。
[div:end]

[%@lib@ctor priority_queue]
[codeblock:declaration]
template<[[redoc("*:c>")]]container-compatible-range<T> R>
  priority_queue(from_range_t, R&& rg, const Compare& x = Compare());
[codeblock:end]

[div:description]
[para:expects]
[:en] [`x] defines a strict weak ordering ([#alg.sorting]).
[:zh_CN] [`x] 定义一种严格弱序（[#alg.sorting]）。

[para:effects]
[:en] Initializes [`comp] with [`x] and [`c] with
[`ranges::to<Container>(std::forward<R>(rg))] and finally calls
[`make_heap(c.begin(), c.end(), comp)].
[:zh_CN] 以 [`x] 初始化 [`comp]，并以 [`ranges::to<Container>(std::forward<R>(rg))]
初始化 [`c]，最后调用 [`make_heap(c.begin(), c.end(), comp)]。
[div:end]
