[section#queue.syn
    [:en] Header [`<queue>] synopsis
    [:zh_CN] 头文件 [`<queue>] 纲要
]

[%@hdr@def queue]

[codeblock:synopsis]
#include <compare>              // [:en] see [#compare.syn] [:zh_CN] 参见 [#compare.syn]
#include <initializer_list>     // [:en] see [#initializer.list.syn] [:zh_CN] 参见 [#initializer.list.syn]

namespace std {
  // [:en] [#queue], class template [`queue] \
  [:zh_CN] [#queue]，类模板 [`queue]
  template<class T, class Container = deque<T>> class queue;

  template<class T, class Container>
    constexpr bool operator==(const queue<T, Container>& x, const queue<T, Container>& y);
  template<class T, class Container>
    constexpr bool operator!=(const queue<T, Container>& x, const queue<T, Container>& y);
  template<class T, class Container>
    constexpr bool operator< (const queue<T, Container>& x, const queue<T, Container>& y);
  template<class T, class Container>
    constexpr bool operator> (const queue<T, Container>& x, const queue<T, Container>& y);
  template<class T, class Container>
    constexpr bool operator<=(const queue<T, Container>& x, const queue<T, Container>& y);
  template<class T, class Container>
    constexpr bool operator>=(const queue<T, Container>& x, const queue<T, Container>& y);
  template<class T, [[redoc("`:c>")]]three_way_comparable Container>
    constexpr compare_three_way_result_t<Container>
      operator<=>(const queue<T, Container>& x, const queue<T, Container>& y);

  template<class T, class Container>
    constexpr void swap(queue<T, Container>& x, queue<T, Container>& y)
      noexcept(noexcept(x.swap(y)));
  template<class T, class Container, class Alloc>
    struct uses_allocator<queue<T, Container>, Alloc>;

  // [:en] [#container.adaptors.format], formatter specialization for [`queue] \
  [:zh_CN] [#container.adaptors.format]，针对 [`queue] 的格式化器特化式
  template<class charT, class T, [[redoc("`:c>")]]formattable<charT> Container>
    struct formatter<queue<T, Container>, charT>;

  // [:en] [#priority.queue], class template [`priority_queue] \
  [:zh_CN] [#priority.queue]，类模板 [`priority_queue]
  template<class T, class Container = vector<T>,
           class Compare = less<typename Container::value_type>>
    class priority_queue;

  template<class T, class Container, class Compare>
    constexpr void swap(priority_queue<T, Container, Compare>& x,
                        priority_queue<T, Container, Compare>& y) noexcept(noexcept(x.swap(y)));
  template<class T, class Container, class Compare, class Alloc>
    struct uses_allocator<priority_queue<T, Container, Compare>, Alloc>;

  // [:en] [#container.adaptors.format], formatter specialization for [`priority_queue] \
  [:zh_CN] [#container.adaptors.format]，针对 [`priority_queue] 的格式化器特化式
  template<class charT, class T, [[redoc("`:c>")]]formattable<charT> Container, class Compare>
    struct formatter<priority_queue<T, Container, Compare>, charT>;
}
[codeblock:end]
