[section#array.overview
    [:en] Overview
    [:zh_CN] 概要
]

[para]
[:en]
[%[`array][!contiguous storage]]
The header [?libheader array] defines a class template for storing fixed-size
sequences of objects.
[:zh_CN]
[%[`array][!连续存储]]
头文件 [?libheader array] 定义一种用于存储固定大小的对象序列的类模板。

[:en] An [`array] is a contiguous container ([#container.requirements.general]).
[:zh_CN] [`array] 是一种连续容器（[#container.requirements.general]）。

[:en] An instance of [`array<T, N>] stores [`N] elements of type [`T], so that
[`size() == N] is an invariant.
[:zh_CN] [`array<T, N>] 的一个实例存储 [`N] 个 [`T] 类型的元素，由此
[`size() == N] 是一个不变式。

[para]
[:en]
[%[`array][!initialization]]
[%[`array][!as aggregate]]
An [`array] is an aggregate ([#dcl.init.aggr]) that can be initialized with up
to [`N] elements whose type are convertible to [`T].
[:zh_CN]
[%[`array][!初始化]]
[%[`array][!作为聚合]]
[`array] 是一种聚合（[#dcl.init.aggr]），可以由至多 [`N] 个具有可以转换为 [`T]
的类型的元素进行初始化。

[para]
[:en]
[%requirements[!container]]
An [`array] meets all of the requirements of a container and of a reversible
container ([#container.requirements]), except that a default constructed
[`array] object is not empty and that [`swap] does not have constant complexity.
[:zh_CN]
[%规定[!容器]]
[`array] 满足容器和可反向容器的所有规定（[#container.requirements]），但默认构造
的 [`array] 对象不为空，且 [`swap] 不具有常量复杂度。

[:en] An [`array] meets some of the requirements of a sequence container
([#sequence.reqmts]).
[:zh_CN] [`array] 满足序列容器的某些规定（[#sequence.reqmts]）。

[:en] Descriptions are provided here only for operations on [`array] that are
not described in one of these tables and for operations where there is
additional semantic information.
[:zh_CN] 此处给出的说明仅包括未被这些表格之一所描述的操作，以及具有额外的语义
信息的操作。

[para]
[:en] The types [`iterator] and [`const_iterator] meet the constexpr iterator
requirements ([#iterator.requirements.general]).
[:zh_CN] 类型 [`iterator] 和 [`const_iterator] 满足 constexpr 迭代器规定
（[#iterator.requirements.general]）。

[%@library array]
[%@library array[!begin]]
[%@library begin[!array]]
[%@library array[!end]]
[%@library end[!array]]
[%@library array[!size]]
[%@library size[!array]]
[%@library array[!max_size]]
[%@library max_size[!array]]
[codeblock:synopsis [!:mark ImpDef] ]
namespace std {
  template<class T, size_t N>
  struct array {
    // [:en] types \
       [:zh_CN] 类型
    using value_type             = T;
    using pointer                = T*;
    using const_pointer          = const T*;
    using reference              = T&;
    using const_reference        = const T&;
    using size_type              = size_t;
    using difference_type        = ptrdiff_t;
    using iterator               = [[redoc("?impdefx [:en] type of [`array::iterator]"
                                                    "[:zh_CN] [`array::iterator] 的类型")]]; // [:en] see [#container.requirements] \
                                                                                                [:zh_CN] 参见 [#container.requirements]
    using const_iterator         = [[redoc("?impdefx [:en] type of [`array::const_iterator]"
                                                    "[:zh_CN] [`array::const_iterator] 的类型")]]; // [:en] see [#container.requirements] \
                                                                                                      [:zh_CN] 参见 [#container.requirements]
    using reverse_iterator       = std::reverse_iterator<iterator>;
    using const_reverse_iterator = std::reverse_iterator<const_iterator>;

    // [:en] no explicit construct/copy/destroy for aggregate type \
       [:zh_CN] 聚合类型没有显式的构造/复制/销毁

    constexpr void fill(const T& u);
    constexpr void swap(array&) noexcept(is_nothrow_swappable_v<T>);

    // [:en] iterators \
       [:zh_CN] 迭代器
    constexpr iterator               begin() noexcept;
    constexpr const_iterator         begin() const noexcept;
    constexpr iterator               end() noexcept;
    constexpr const_iterator         end() const noexcept;

    constexpr reverse_iterator       rbegin() noexcept;
    constexpr const_reverse_iterator rbegin() const noexcept;
    constexpr reverse_iterator       rend() noexcept;
    constexpr const_reverse_iterator rend() const noexcept;

    constexpr const_iterator         cbegin() const noexcept;
    constexpr const_iterator         cend() const noexcept;
    constexpr const_reverse_iterator crbegin() const noexcept;
    constexpr const_reverse_iterator crend() const noexcept;

    // [:en] capacity \
       [:zh_CN] 容量
    [[nodiscard]] constexpr bool empty() const noexcept;
    constexpr size_type size() const noexcept;
    constexpr size_type max_size() const noexcept;

    // [:en] element access \
       [:zh_CN] 元素访问
    constexpr reference       operator[](size_type n);
    constexpr const_reference operator[](size_type n) const;
    constexpr reference       at(size_type n);
    constexpr const_reference at(size_type n) const;
    constexpr reference       front();
    constexpr const_reference front() const;
    constexpr reference       back();
    constexpr const_reference back() const;

    constexpr T *       data() noexcept;
    constexpr const T * data() const noexcept;

    friend constexpr bool operator==(const array&, const array&) = default;
    friend constexpr [[redoc("^", "n>")]]synth-three-way-result<value_type>
      operator<=>(const array&, const array&);
  };

  template<class T, class... U>
    array(T, U...) -> array<T, 1 + sizeof...(U)>;
}
[codeblock:end]
