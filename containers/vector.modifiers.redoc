[section#vector.modifiers
    [:en] Modifiers
    [:zh_CN] 改动函数
]

[%@library insert[!vector]]
[codeblock:declaration]
constexpr iterator insert(const_iterator position, const T& x);
constexpr iterator insert(const_iterator position, T&& x);
constexpr iterator insert(const_iterator position, size_type n, const T& x);
template<class InputIterator>
  constexpr iterator insert(const_iterator position, InputIterator first, InputIterator last);
constexpr iterator insert(const_iterator position, initializer_list<T>);

template<class... Args> constexpr reference emplace_back(Args&&... args);
template<class... Args> constexpr iterator emplace(const_iterator position, Args&&... args);
constexpr void push_back(const T& x);
constexpr void push_back(T&& x);
[codeblock:end]

[begin:description]
[para:remarks]
[:en] Causes reallocation if the new size is greater than the old capacity.
[:zh_CN] 如果新的大小大于原来的容量则引发重新分配。

[:en] Reallocation invalidates all the references, pointers, and iterators
referring to the elements in the sequence, as well as the past-the-end iterator.
[:zh_CN] 重新分配将使指代序列中的元素的所有引用、指针和迭代器，以及越过末尾
迭代器失效。

[:en] If no reallocation happens, then references, pointers, and iterators
before the insertion point remain valid but those at or after the insertion
point, including the past-the-end iterator, are invalidated.
[:zh_CN] 如果未发生重新分配，则处于插入点之前的引用、指针和迭代器仍然有效，而在
插入点或其后（包括越过末尾迭代器）的则失效。

[:en] If an exception is thrown other than by the copy constructor, move
constructor, assignment operator, or move assignment operator of [`T] or by any
[`InputIterator] operation there are no effects.
[:zh_CN] 如果抛出了并非由 [`T] 的复制构造函数、移动构造函数、赋值运算符或复制
赋值运算符所抛出，或者由 [`InputIterator] 的任何操作所抛出的异常，则没有效果。

[:en] If an exception is thrown while inserting a single element at the end and
[`T] is [^:oc CopyInsertable] or [`is_nothrow_move_constructible_v<T>] is
[`true], there are no effects.
[:zh_CN] 如果在末尾插入单个元素时抛出了异常，而 [`T] 为 [^:oc CopyInsertable]
或有 [`is_nothrow_move_constructible_v<T>] 为 [`true]，则没有效果。

[:en] Otherwise, if an exception is thrown by the move constructor of a
non-[^:oc CopyInsertable] [`T], the effects are unspecified.
[:zh_CN] 否则，如果由非 [^:oc CopyInsertable] 的 [`T] 的移动构造函数抛出了异常，
则其效果是未指明的。

[para:complexity]
[:en] If reallocation happens, linear in the number of elements of the resulting
vector; otherwise, linear in the number of elements inserted plus the distance
to the end of the vector.
[:zh_CN] 如果发生了重新分配，则对于结果向量的元素数量为线性的；否则，对于所插入
的元素数量加上到 [`vector] 的结尾的距离是线性的。
[end:description]

[%@library erase[!vector]]
[codeblock:declaration]
constexpr iterator erase(const_iterator position);
constexpr iterator erase(const_iterator first, const_iterator last);
constexpr void pop_back();
[codeblock:end]

[begin:description]
[para:effects]
[:en] Invalidates iterators and references at or after the point of the erase.
[:zh_CN] 使处于清除点或处于其后的迭代器或引用失效。

[para:complexity]
[:en] The destructor of [`T] is called the number of times equal to the number
of the elements erased, but the move assignment operator of [`T] is called the
number of times equal to the number of elements in the vector after the erased
elements.
[:zh_CN] 对 [`T] 的析构函数的调用次数等于所清除的元素的数量，但对 [`T] 的移动
赋值运算符的调用次数等于 [`vector] 中所清除的元素后面的元素数量。

[para:throws]
[:en] Nothing unless an exception is thrown by the assignment operator or move
assignment operator of [`T].
[:zh_CN] 除非 [`T] 的赋值运算符或移动赋值运算符抛出了异常，否则不抛出异常。
[end:description]
