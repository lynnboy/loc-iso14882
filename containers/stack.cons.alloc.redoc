[section#stack.cons.alloc
    [:en] Constructors with allocators
    [:zh_CN] 接受分配器的构造函数
]

[para]
[:en] If [`uses_allocator_v<container_type, Alloc>] is [`false] the constructors
in this subclause shall not participate in overload resolution.
[:zh_CN] 当 [`uses_allocator_v<container_type, Alloc>] 为 [`false] 时，本子条款
中的构造函数不能参与重载决议。

[%@library stack[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
template<class Alloc> explicit stack(const Alloc& a);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Initializes [`c] with [`a].
[:zh_CN] 以 [`a] 初始化 [`c]。
[exit:description]

[%@library stack[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
template<class Alloc> stack(const container_type& cont, const Alloc& a);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Initializes [`c] with [`cont] as the first argument and [`a] as the
second argument.
[:zh_CN] 以 [`cont] 为第一个实参而 [`a] 为第二个实参初始化 [`c]。
[exit:description]

[%@library stack[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
template<class Alloc> stack(container_type&& cont, const Alloc& a);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Initializes [`c] with [`std::move(cont)] as the first argument and [`a]
as the second argument.
[:zh_CN] 以 [`std::move(cont)] 为第一个实参而 [`a] 为第二个实参初始化 [`c]。
[exit:description]

[%@library stack[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
template<class Alloc> stack(const stack& s, const Alloc& a);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Initializes [`c] with [`s.c] as the first argument and [`a] as the second
argument.
[:zh_CN] 以 [`s.c] 为第一个实参而 [`a] 为第二个实参初始化 [`c]。
[exit:description]

[%@library stack[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
template<class Alloc> stack(stack&& s, const Alloc& a);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Initializes [`c] with [`std::move(s.c)] as the first argument and [`a]
as the second argument.
[:zh_CN] 以 [`std::move(s.c)] 为第一个实参而 [`a] 为第二个实参初始化 [`c]。
[exit:description]
