[section#vector.bool.fmt
    [:en] Formatter specialization for [`vector<bool>]
    [:zh_CN] 针对 [`vector<bool>] 的格式化器特化式
]

[%@lib formatter]
[codeblock:synopsis]
namespace std {
  template<class T, class charT>
    requires [[redoc("*>")]]is-vector-bool-reference<T>
  struct formatter<T, charT> {
  private:
    formatter<bool, charT> [[redoc("*>")]]underlying_;       // [=expos]

  public:
    template<class ParseContext>
      constexpr typename ParseContext::iterator
        parse(ParseContext& ctx);

    template<class FormatContext>
      typename FormatContext::iterator
        format(const T& ref, FormatContext& ctx) const;
  };
}
[codeblock:end]

[%@lib@member parse[!formatter]]
[codeblock:declaration]
template<class ParseContext>
  constexpr typename ParseContext::iterator
    parse(ParseContext& ctx);
[codeblock:end]

[div:description]
[para]
[:en] Equivalent to: [`return [*underlying_].parse(ctx);]
[:zh_CN] 等价于：[`return [*underlying_].parse(ctx);]
[div:end]

[%@lib@member format[!formatter]]
[codeblock:declaration]
template<class FormatContext>
  typename FormatContext::iterator
    format(const T& ref, FormatContext& ctx) const;
[codeblock:end]

[div:description]
[para]
[:en] Equivalent to: [`return [*underlying_].format(ref, ctx);]
[:zh_CN] 等价于：[`return [*underlying_].format(ref, ctx);]
[div:end]
