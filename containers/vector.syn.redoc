[section#sequences.general
    [:en] Header [`<vector>] synopsis
    [:zh_CN] 头文件 [`<vector>] 纲要
]

[%@hdr@def vector]

[codeblock:synopsis]
#include <compare>              // [:en] see [#compare.syn] \
                                   [:zh_CN] 参见 [#compare.syn]
#include <initializer_list>     // [:en] see [#initializer.list.syn] \
                                   [:zh_CN] 参见 [#initializer.list.syn]

namespace std {
  // [:en] [#vector], class template [`vector] \
     [:zh_CN] [#vector]，类模板 [`vector]
  template<class T, class Allocator = allocator<T>> class vector;

  template<class T, class Allocator>
    constexpr bool operator==(const vector<T, Allocator>& x, const vector<T, Allocator>& y);
  template<class T, class Allocator>
    constexpr [[redoc("^>")]]synth-three-way-result<T> operator<=>(const vector<T, Allocator>& x,
                                                    const vector<T, Allocator>& y);

  template<class T, class Allocator>
    constexpr void swap(vector<T, Allocator>& x, vector<T, Allocator>& y)
      noexcept(noexcept(x.swap(y)));

  template<class T, class Allocator, class U>
    constexpr typename vector<T, Allocator>::size_type
      erase(vector<T, Allocator>& c, const U& value);
  template<class T, class Allocator, class Predicate>
    constexpr typename vector<T, Allocator>::size_type
      erase_if(vector<T, Allocator>& c, Predicate pred);

  // [:en] [#vector.bool], class [`vector<bool>] \
     [:zh_CN] [#vector.bool]，类 [`vector<bool>]
  template<class Allocator> class vector<bool, Allocator>;

  // [:en] hash support \
     [:zh_CN] 散列支持
  template<class T> struct hash;
  template<class Allocator> struct hash<vector<bool, Allocator>>;

  namespace pmr {
    template<class T>
      using vector = std::vector<T, polymorphic_allocator<T>>;
  }
}
[codeblock:end]
