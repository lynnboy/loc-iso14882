[section#stack.syn
    [:en] Header [`<stack>] synopsis
    [:zh_CN] 头文件 [`<stack>] 纲要
]

[%@hdr@def stack]

[codeblock:synopsis]
#include <compare>              // [:en] see [#compare.syn] \
                                [:zh_CN] 参见 [#compare.syn]
#include <initializer_list>     // [:en] see [#initializer.list.syn] \
                                [:zh_CN] 参见 [#initializer.list.syn]

namespace std {
  // [:en] [#stack], class template [`stack] \
  [:zh_CN] [#stack]，类模板 [`stack]
  template<class T, class Container = deque<T>> class stack;

  template<class T, class Container>
    bool operator==(const stack<T, Container>& x, const stack<T, Container>& y);
  template<class T, class Container>
    bool operator!=(const stack<T, Container>& x, const stack<T, Container>& y);
  template<class T, class Container>
    bool operator< (const stack<T, Container>& x, const stack<T, Container>& y);
  template<class T, class Container>
    bool operator> (const stack<T, Container>& x, const stack<T, Container>& y);
  template<class T, class Container>
    bool operator<=(const stack<T, Container>& x, const stack<T, Container>& y);
  template<class T, class Container>
    bool operator>=(const stack<T, Container>& x, const stack<T, Container>& y);
  template<class T, [[redoc("`:c>")]]three_way_comparable Container>
    compare_three_way_result_t<Container>
      operator<=>(const stack<T, Container>& x, const stack<T, Container>& y);

  template<class T, class Container>
    void swap(stack<T, Container>& x, stack<T, Container>& y) noexcept(noexcept(x.swap(y)));
  template<class T, class Container, class Alloc>
    struct uses_allocator<stack<T, Container>, Alloc>;

  // [:en] [#container.adaptors.format], formatter specialization for [`stack] \
  [:zh_CN] [#container.adaptors.format]，针对 [`stack] 的格式化器特化式
  template<class charT, class T, [[redoc("`:c>")]]formattable<charT> Container>
    struct formatter<stack<T, Container>, charT>;
}
[codeblock:end]
