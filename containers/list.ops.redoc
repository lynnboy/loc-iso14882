[section#list.ops
    [:en] Operations
    [:zh_CN] 操作
]

[para]
[:en] Since lists allow fast insertion and erasing from the middle of a list,
certain operations are provided specifically for them.[#:note#fn:$section.1]
[:zh_CN] 因为 [`list] 允许在 [`list] 中间进行快速的插入和删除操作，所以专门为
它们提供了一些操作。[#:note#fn:$section.1]

[note:foot#fn:$section.1]
[:en] As specified in [#allocator.requirements], the requirements in this Clause
apply only to [`list]s whose allocators compare equal.
[:zh_CN] 如 [#allocator.requirements] 中所指出，本条款中的规定仅适用于具有比较为
相等的分配器的 [`list]。
[note:end]

[:en] In this subclause, arguments for a template parameter named [`Predicate]
or [`BinaryPredicate] shall satisfy the corresponding requirements in
[#algorithms.requirements].
[:zh_CN] 本子条款中，对名为 [`Predicate] 或 [`BinaryPredicate] 的模板实参所提供
的形参应当满足 [#algorithms.requirements] 中相应的规定。

[:en] For [`merge] and [`sort], the definitions and requirements in
[#alg.sorting] apply.
[:zh_CN] [#alg.sorting] 中的定义和规定适用于 [`merge] 和 [`sort]。

[para]
[:en] [`list] provides three splice operations that destructively move elements
from one list to another.
[:zh_CN] [`list] 提供三种将元素破坏性地从一个 [`list] 移动到另一个的剪接操作。

[:en] The behavior of splice operations is undefined if
[`get_allocator() != x.get_allocator()].
[:zh_CN] 如果 [`get_allocator() != x.get_allocator()]，剪接操作的行为是未定义的。

[%@library splice[!list]]
[codeblock:declaration]
void splice(const_iterator position, list& x);
void splice(const_iterator position, list&& x);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`addressof(x) != this].
[:zh_CN] [`addressof(x) != this]。

[para:effects]
[:en] Inserts the contents of [`x] before [`position] and [`x] becomes empty.
[:zh_CN] 将 [`x] 的内容插入到 [`position] 之前，而 [`x] 变为空。

[:en] Pointers and references to the moved elements of [`x] now refer to those
same elements but as members of [`*this].
[:zh_CN] 指代 [`x] 的被移动元素的指针和引用随后仍指代相同元素，但变为 [`*this]
的成员。

[:en] Iterators referring to the moved elements will continue to refer to their
elements, but they now behave as iterators into [`*this], not into [`x].
[:zh_CN] 指代被移动元素的迭代器将仍然指代这些元素，但随后将表现为 [`*this] 而
不是 [`x] 中的迭代器。

[para:throws]
[:en] Nothing.
[:zh_CN] 无。

[para:complexity]
[:en] Constant time.
[:zh_CN] 常量时间。
[exit:description]

[%@library splice[!list]]
[%@library list[!splice]]
[codeblock:declaration]
void splice(const_iterator position, list& x, const_iterator i);
void splice(const_iterator position, list&& x, const_iterator i);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`i] is a valid dereferenceable iterator of [`x].
[:zh_CN] [`i] 是 [`x] 的有效可解引用的迭代器。

[para:effects]
[:en] Inserts an element pointed to by [`i] from list [`x] before [`position]
and removes the element from [`x].
[:zh_CN] 将 [`x] 中由 [`i] 所指向的元素插入到 [`position] 之前，并将其从 [`x] 中
移除。

[:en] The result is unchanged if [`position == i] or [`position == ++i].
[:zh_CN] 如果 [`position == i] 或 [`position == ++i] 则其结果未改变

[:en] Pointers and references to [`*i] continue to refer to this same element
but as a member of [`*this].
[:zh_CN] 指代 [`*i] 的指针和引用随后仍指代相同的元素，但它们变为 [`*this] 的成员
。

[:en] Iterators to [`*i] (including [`i] itself) continue to refer to the same
element, but now behave as iterators into [`*this], not into [`x].
[:zh_CN] 指代 [`*i] 的迭代器（包括 [`i] 自身）将继续指代相同元素，但它们现在表现
为 [`*this] 而不是 [`x] 中的迭代器。

[para:throws]
[:en] Nothing.
[:zh_CN] 无。

[para:complexity]
[:en] Constant time.
[:zh_CN] 常量时间。
[exit:description]

[%@library splice[!list]]
[%@library list[!splice]]
[codeblock:declaration]
void splice(const_iterator position, list& x, const_iterator first,
            const_iterator last);
void splice(const_iterator position, list&& x, const_iterator first,
            const_iterator last);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [``[first, last)] is a valid range in [`x].
[:zh_CN] [``[first, last)] 是 [`x] 中的有效范围。

[:en] The program has undefined behavior if [`position] is an iterator in the
range [=range(first,last)].
[:zh_CN] 如果 [`position] 是范围 [=range(first,last)] 中的迭代器，则程序具有
未定义的行为。

[para:effects]
[:en] Inserts elements in the range [=range(first,last)] before [`position]
and removes the elements from [`x].
[:zh_CN] 将范围 [=range(first,last)] 中的元素插入到 [`position] 之前，并将这些
元素从 [`x] 中移除。

[:en] Pointers and references to the moved elements of [`x] now refer to those
same elements but as members of [`*this].
[:zh_CN] 指代 [`x] 的被移动元素的指针和引用随后仍指代相同元素，但变为 [`*this]
的成员。

[:en] Iterators referring to the moved elements will continue to refer to their
elements, but they now behave as iterators into [`*this], not into [`x].
[:zh_CN] 指代被移动元素的迭代器将仍然指代这些元素，但随后将表现为 [`*this] 而
不是 [`x] 中的迭代器。

[para:throws]
[:en] Nothing.
[:zh_CN] 无。

[para:complexity]
[:en] Constant time if [`&x == this]; otherwise, linear time.
[:zh_CN] 当 [`&x == this] 时为常量时间；否则为线性时间。
[exit:description]

[%@library remove[!list]]
[codeblock:declaration]
void remove(const T& value);
template<class Predicate> void remove_if(Predicate pred);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Erases all the elements in the list referred to by a list iterator [`i]
for which the following conditions hold: [`*i == value, pred(*i) != false].
[:zh_CN] 清除列表中的所有由列表的迭代器 [`i] 所指代的元素，其中以下条件成立：
[`*i == value, pred(*i) != false]。

[:en] Invalidates only the iterators and references to the erased elements.
[:zh_CN] 仅使指代所清除的元素的迭代器和引用失效。

[para:throws]
[:en] Nothing unless an exception is thrown by [`*i == value] or
[`pred(*i) != false].
[:zh_CN] 除非 [`*i == value] 或者 [`pred(*i) != false] 抛出了异常，否则不抛出
异常。

[para:remarks]
[:en] Stable ([#algorithm.stable]).
[:zh_CN] 稳定的（[#algorithm.stable]）。

[para:complexity]
[:en] Exactly [`size()] applications of the corresponding predicate.
[:zh_CN] 恰好实施 [`size()] 次对应的谓词。
[exit:description]

[%@library unique[!list]]
[codeblock:declaration]
void unique();
template<class BinaryPredicate> void unique(BinaryPredicate binary_pred);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Erases all but the first element from every consecutive group of equal
elements referred to by the iterator [`i] in the range [=range(first + 1,last)]
for which [`*i == *(i-1)] (for the version of [`unique] with no arguments) or
[`pred(*i, *(i - 1))] (for the version of [`unique] with a predicate argument)
holds.
[:zh_CN] 清除每个相等元素的连续组中除第一个元素外的所有元素，其中元素为由范围
[=range(first + 1,last)] 中的迭代器 [`i] 所指代的，且（对于无实参版本的 [`unque]
）有 [`*i == *(i-1)]，或（对于带有谓词实参版本的 [`unique]）
[`pred(*i, *(i - 1))]。

[:en] Invalidates only the iterators and references to the erased elements.
[:zh_CN] 仅使指代所清除的元素的迭代器和引用失效。

[para:throws]
[:en] Nothing unless an exception is thrown by [`*i == *(i-1)] or
[`pred(*i, *(i - 1))]
[:zh_CN] 除非 [`*i == *(i-1)] 或者 [`pred(*i, *(i - 1))] 抛出了异常，否则不抛出
异常。

[para:complexity]
[:en] If the range [``[first, last)] is not empty, exactly [`(last - first) - 1]
applications of the corresponding predicate, otherwise no applications of the
predicate.
[:zh_CN] 如果范围 [``[first, last)] 非空，则恰好实施 [`(last - first) - 1] 次
对应的谓词，否则不实施谓词。
[exit:description]

[%@library merge[!list]]
[codeblock:declaration]
void merge(list& x);
void merge(list&& x);
template<class Compare> void merge(list& x, Compare comp);
template<class Compare> void merge(list&& x, Compare comp);
[codeblock:end]

[enter:description]
[para:requires]
[:en] Both the list and the argument list shall be sorted with respect to the
comparator [`operator<] (for the first two overloads) or [`comp] (for the last
two overloads).
[:zh_CN] 列表和实参列表均依据（前两个重载）比较运算符 [`operator<] 或（后两个
重载）[`comp] 为有序的。

[para:effects]
[:en] If [`addressof(x) == this], does nothing; otherwise, merges the two sorted
ranges [``[begin(), end())] and [``[x.begin(), x.end())].
[:zh_CN] 当 [`addressof(x) == this] 时无操作；否则，归并两个有序范围
[``[begin(), end())] 和 [``[x.begin(), x.end())]。

[:en] The result is a range in which the elements will be sorted in
non-decreasing order according to the ordering defined by [`comp]; that is, for
every iterator [`i], in the range other than the first, the condition
[`comp(*i, *(i - 1))] will be [`false].
[:zh_CN] 其结果为一个范围，其中的元素将根据由 [`comp] 所定义的排序按非降序排序；
就是说，对于该范围中除了第一个之外的每个迭代器 [`i]，条件 [`comp(*i, *(i - 1))]
为 [`false]。

[:en] Pointers and references to the moved elements of [`x] now refer to those
same elements but as members of [`*this].
[:zh_CN] 指代 [`x] 的被移动元素的指针和引用随后仍指代相同的元素，但它们变为
[`*this] 的成员。

[:en] Iterators referring to the moved elements will continue to refer to their
elements, but they now behave as iterators into [`*this], not into [`x].
[:zh_CN] 指代被移动元素的迭代器将继续指代其元素，但它们现在表现为 [`*this] 而
不是 [`x] 中的迭代器。

[para:remarks]
[:en] Stable ([#algorithm.stable]).
[:zh_CN] 稳定的（[#algorithm.stable]）。

[:en] If [`addressof(x) != this] the range [``[x.begin(), x.end())] is empty
after the merge.
[:zh_CN] 如果 [`addressof(x) != this] 则归并之后范围 [``[x.begin(), x.end())]
为空。

[:en] No elements are copied by this operation.
[:zh_CN] 这个操作中不对元素进行复制。

[:en] The behavior is undefined if [`get_allocator() != x.get_allocator()].
[:zh_CN] 如果 [`get_allocator() != x.get_allocator()]，则其行为未定义。

[para:complexity]
[:en]
At most [`size() + x.size() - 1] applications of [`comp] if
[`addressof(x) != this]; otherwise, no applications of [`comp] are performed.
[:zh_CN]
当 [`addressof(x) != this] 时最多 [`size() + x.size() - 1] 次 [`comp] 的应用；
否则不实施 [`comp]。

[:en] If an exception is thrown other than by a comparison there are no effects.
[:zh_CN] 如果抛出了除了由比较所抛出的之外的异常，则没有效果。
[exit:description]

[%@library reverse[!list]]
[codeblock:declaration]
void reverse() noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Reverses the order of the elements in the list.
[:zh_CN] 反转列表中元素的顺序。

[:en] Does not affect the validity of iterators and references.
[:zh_CN] 不会影响迭代器和引用的有效性。

[para:complexity]
[:en] Linear time.
[:zh_CN] 线性时间。
[exit:description]

[%@library sort[!list]]
[codeblock:declaration]
void sort();
template<class Compare> void sort(Compare comp);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Sorts the list according to the [`operator<] or a [`Compare] function
object.
[:zh_CN] 根据 [`operator<] 或 [`Compare] 函数对象对列表进行排序。

[:en] If an exception is thrown, the order of the elements in [`*this] is
unspecified.
[:zh_CN] 如果抛出了异常，则 [`*this] 的个元素的顺序是未指明的。

[:en] Does not affect the validity of iterators and references.
[:zh_CN] 不会影响迭代器和引用的有效性。

[para:remarks]
[:en] Stable ([#algorithm.stable]).
[:zh_CN] 稳定的（[#algorithm.stable]）。

[para:complexity]
[:en] Approximately [$N \log N] comparisons, where [`N == size()].
[:zh_CN] 大约 [$N \log N] 次比较，其中 [`N == size()]。
[exit:description]
