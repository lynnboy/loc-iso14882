[section#forwardlist.overview
    [:en] Overview
    [:zh_CN] 概要
]

[para]
[:en] A [`forward_list] is a container that supports forward iterators and
allows constant time insert and erase operations anywhere within the sequence,
with storage management handled automatically.
[:zh_CN] [`forward_list] 是一种容器，支持前向迭代器，并允许在序列中的任何位置
进行常量时间的插入和清除操作，并且具有被自动处理的存储管理。

[:en] Fast random access to list elements is not supported.
[:zh_CN] 不支持对列表元素进行快速的随机访问。

[enter:note]
[:en] It is intended that [`forward_list] have zero space or time overhead
relative to a hand-written C-style singly linked list.
[:zh_CN] 其意图是使 [`forward_list] 相对于手写的 C 风格的单链表的空间和时间开销
为零。

[:en] Features that would conflict with that goal have been omitted.
[:zh_CN] 可能会与这个目标向矛盾的功能特性都已被忽略。
[exit:note]

[para]
[:en] A [`forward_list] satisfies all of the requirements of a container
([#containers.container.requirements]), except that the [`size()] member
function is not provided and [`operator==] has linear complexity.
[:zh_CN] [`forward_list] 符合容器的所有规定
（[#containers.container.requirements]），但未提供 [`size()] 成员函数，且其
[`operator==] 具有线性复杂度。

[:en] A [`forward_list] also satisfies all of the requirements for an
allocator-aware container ([#containers.allocatoraware]).
[:zh_CN] [`forward_list] 也符合分配器感知容器的所有规定
（[#containers.allocatoraware]）。

[:en] In addition, a [`forward_list] provides the [`assign] member functions
([#containers.sequence.requirements]) and several of the optional container
requirements ([#containers.sequence.optional]).
[:zh_CN] 此外，[`forward_list] 提供 [`assign] 成员函数
（[#containers.sequence.requirements]），以及集中可选的容器规定
（[#containers.sequence.optional]）。

[:en] Descriptions are provided here only for operations on [`forward_list] that
are not described in that table or for operations where there is additional
semantic information.
[:zh_CN] 此处给出的说明仅包括未被这个表格所描述的 [`forward_list] 的操作，以及
具有额外的语义信息的操作。

[para]
[enter:note]
[:en] Modifying any list requires access to the element preceding the first
element of interest, but in a [`forward_list] there is no constant-time way to
access a preceding element.
[:zh_CN] 对列表的任何改动，都需要访问处于感兴趣的原始之前的元素，但在
[`forward_list] 中不存在耗费常量时间的访问前一个元素的方式。

[:en] For this reason, ranges that are modified, such as those supplied to
[`erase] and [`splice], must be open at the beginning.
[:zh_CN] 由于这个原因，被改动的范围，比如提供给 [`erase] 和 [`splice] 的那些，
必须在其开头是打开的。
[exit:note]

[codeblock:synopsis [!:mark ImpDef] ]
namespace std {
  template<class T, class Allocator = allocator<T>>
  class forward_list {
  public:
    // [:en] types
    // [|:zh_CN] 类型
    using value_type      = T;
    using allocator_type  = Allocator;
    using pointer         = typename allocator_traits<Allocator>::pointer;
    using const_pointer   = typename allocator_traits<Allocator>::const_pointer;
    using reference       = value_type&;
    using const_reference = const value_type&;
    using size_type       = [=ImpDef]; // [:en] see [#container.requirements]
                                       // [|:zh_CN] 参见 [#container.requirements]
    using difference_type = [=ImpDef]; // [:en] see [#container.requirements]
                                       // [|:zh_CN] 参见 [#container.requirements]
    using iterator        = [%@impldef [:en] type of [`forward_list::iterator] [:zh_CN] [`forward_list::iterator] 的类型][=ImpDef]; // [:en] see [#container.requirements]
                                                   // [|:zh_CN] 参见 [#container.requirements]
    using const_iterator  = [%@impldef [:en] type of [`forward_list::const_iterator] [:zh_CN] [`forward_list::const_iterator] 的类型]@[=ImpDef]; // [:en] see [#container.requirements]
                                                   // [|:zh_CN] 参见 [#container.requirements]

    // [:en] [#forwardlist.cons], construct/copy/destroy
    // [|:zh_CN] [#forwardlist.cons]，构造/复制/销毁
    forward_list() : forward_list(Allocator()) { }
    explicit forward_list(const Allocator&);
    explicit forward_list(size_type n, const Allocator& = Allocator());
    forward_list(size_type n, const T& value, const Allocator& = Allocator());
    template<class InputIterator>
      forward_list(InputIterator first, InputIterator last, const Allocator& = Allocator());
    forward_list(const forward_list& x);
    forward_list(forward_list&& x);
    forward_list(const forward_list& x, const Allocator&);
    forward_list(forward_list&& x, const Allocator&);
    forward_list(initializer_list<T>, const Allocator& = Allocator());
    ~forward_list();
    forward_list& operator=(const forward_list& x);
    forward_list& operator=(forward_list&& x)
      noexcept(allocator_traits<Allocator>::is_always_equal::value);
    forward_list& operator=(initializer_list<T>);
    template<class InputIterator>
      void assign(InputIterator first, InputIterator last);
    void assign(size_type n, const T& t);
    void assign(initializer_list<T>);
    allocator_type get_allocator() const noexcept;

    // [:en] [#forwardlist.iter], iterators
    // [|:zh_CN] [#forwardlist.iter]，迭代器
    iterator before_begin() noexcept;
    const_iterator before_begin() const noexcept;
    iterator begin() noexcept;
    const_iterator begin() const noexcept;
    iterator end() noexcept;
    const_iterator end() const noexcept;

    const_iterator cbegin() const noexcept;
    const_iterator cbefore_begin() const noexcept;
    const_iterator cend() const noexcept;

    // [:en] capacity
    // [|:zh_CN] 容量
    [[nodiscard]] bool empty() const noexcept;
    size_type max_size() const noexcept;

    // [:en] [#forwardlist.access], element access
    // [|:zh_CN] [#forwardlist.access]，元素访问
    reference front();
    const_reference front() const;

    // [:en] [#forwardlist.modifiers], modifiers
    // [|:zh_CN] [#forwardlist.modifiers]，改动函数
    template<class... Args> reference emplace_front(Args&&... args);
    void push_front(const T& x);
    void push_front(T&& x);
    void pop_front();

    template<class... Args> iterator emplace_after(const_iterator position, Args&&... args);
    iterator insert_after(const_iterator position, const T& x);
    iterator insert_after(const_iterator position, T&& x);

    iterator insert_after(const_iterator position, size_type n, const T& x);
    template<class InputIterator>
      iterator insert_after(const_iterator position, InputIterator first, InputIterator last);
    iterator insert_after(const_iterator position, initializer_list<T> il);

    iterator erase_after(const_iterator position);
    iterator erase_after(const_iterator position, const_iterator last);
    void swap(forward_list&)
      noexcept(allocator_traits<Allocator>::is_always_equal::value);

    void resize(size_type sz);
    void resize(size_type sz, const value_type& c);
    void clear() noexcept;

    // [:en] [#forwardlist.ops], [`forward_list] operations
    // [|:zh_CN] [#forwardlist.ops]，[`forward_list] 的操作
    void splice_after(const_iterator position, forward_list& x);
    void splice_after(const_iterator position, forward_list&& x);
    void splice_after(const_iterator position, forward_list& x, const_iterator i);
    void splice_after(const_iterator position, forward_list&& x, const_iterator i);
    void splice_after(const_iterator position, forward_list& x,
                      const_iterator first, const_iterator last);
    void splice_after(const_iterator position, forward_list&& x,
                      const_iterator first, const_iterator last);

    void remove(const T& value);
    template<class Predicate> void remove_if(Predicate pred);

    void unique();
    template<class BinaryPredicate> void unique(BinaryPredicate binary_pred);

    void merge(forward_list& x);
    void merge(forward_list&& x);
    template<class Compare> void merge(forward_list& x, Compare comp);
    template<class Compare> void merge(forward_list&& x, Compare comp);

    void sort();
    template<class Compare> void sort(Compare comp);

    void reverse() noexcept;
  };

  template<class InputIterator, class Allocator = allocator<[*iter-value-type]<InputIterator>>>
    forward_list(InputIterator, InputIterator, Allocator = Allocator())
      -> forward_list<[*iter-value-type]<InputIterator>, Allocator>;

  // [:en] swap
  // [|:zh_CN] 交换
  template<class T, class Allocator>
    void swap(forward_list<T, Allocator>& x, forward_list<T, Allocator>& y)
      noexcept(noexcept(x.swap(y)));
}
[codeblock:end]

[para]
[:en] An incomplete type [`T] may be used when instantiating [`forward_list] if
the allocator satisfies the allocator completeness requirements
([#allocator.requirements.completeness]).
[:zh_CN] 如果分配器能够满足分配器的完整性规定
（[#allocator.requirements.completeness]），则可以用不完整类型 [`T] 来实例化
[`forward_list]。

[:en] [`T] shall be complete before any member of the resulting specialization
of [`forward_list] is referenced.
[:zh_CN] 而在涉指所产生的 [`forward_list] 特例的任何成员之前，[`T] 应当完整。
