[section#unord.map.overview
    [:en] Class template [`unordered_map] overview
    [:zh_CN] 类模板 [`unordered_map] 概要
]

[para]
[:en]
[%[`unordered_map][!unique keys]]
[%unordered associative containers[!unique keys]]
An [`unordered_map] is an unordered associative container that supports unique
keys (an [`unordered_map] contains at most one of each key value) and that
associates values of another type [`mapped_type] with the keys.
[:zh_CN]
[%[`unordered_map][!唯一键]]
[%无序关联容器[!唯一键]]
[`unordered_map] 是一种无序关联容器，支持唯一键（[`unordered_map] 中包含每个键值
的最多一个元素），并将键与另一个类型 [`T] 的值相关联。

[:en] The [`unordered_map] class supports forward iterators.
[:zh_CN] [`unordered_map] 类支持前向迭代器。

[para]
[:en] An [`unordered_map] satisfies all of the requirements of a container, of
an unordered associative container, and of an allocator-aware container (Table
[#tab:containers.allocatoraware]).
[:zh_CN] [`unordered_map] 符合容器的所有规定，无序关联容器的所有规定，以及
分配器感知容器的所有规定（表 [#tab:containers.allocatoraware]）。

[:en] It provides the operations described in the preceding requirements table
for unique keys; that is, an [`unordered_map] supports the [`a_uniq] operations
in that table, not the [`a_eq] operations.
[:zh_CN] 它提供以上规定表格中对于唯一键的操作；就是说，[`unordered_map] 支持
表格中的 [`a_uniq] 的操作，但不支持 [`a_eq] 的操作。

[:en] For an [`unordered_map<Key, T>] the [`key type] is [`Key], the mapped type
is [`T], and the value type is [`pair<const Key, T>].
[:zh_CN] [`unordered_map<Key,T>] 的 [`key_type] 为 [`Key]，其映射类型为 [`T]，而
其值类型为 [`pair<const Key, T>]。

[para]
[:en] This section only describes operations on [`unordered_map] that are not
described in one of the requirement tables, or for which there is additional
semantic information.
[:zh_CN] 本节中仅说明未被这些表格之一所描述的 [`unordered_map] 的操作，以及具有
额外的语义信息的操作。

[%@library unordered_map]
[codeblock:synopsis [!:mark ImpDef UnSpec SeeBelow] [!:var INSERT_RETURN_TYPE] ]
namespace std {
  template <class Key,
            class T,
            class Hash = hash<Key>,
            class Pred = equal_to<Key>,
            class Allocator = allocator<pair<const Key, T>>>
  class unordered_map {
  public:
    // [:en] types:
    // [|:zh_CN] 类型：
    using key_type             = Key;
    using mapped_type          = T;
    using value_type           = pair<const Key, T>;
    using hasher               = Hash;
    using key_equal            = Pred;
    using allocator_type       = Allocator;
    using pointer              = typename allocator_traits<Allocator>::pointer;
    using const_pointer        = typename allocator_traits<Allocator>::const_pointer;
    using reference            = value_type&;
    using const_reference      = const value_type&;
    using size_type            = [=ImpDef]; // [:en] see [#container.requirements]
                                            // [|:zh_CN] 参见 [#container.requirements]
    using difference_type      = [=ImpDef]; // [:en] see [#container.requirements]
                                            // [|:zh_CN] 参见 [#container.requirements]

    using iterator             = [%@impldef [:en] type of [`unordered_map::iterator] [:zh_CN] [`unordered_map::iterator] 的类型][=ImpDef]; // [:en] see [#container.requirements]
                                              // [|:zh_CN] 参见 [#container.requirements]
    using const_iterator       = [%@impldef [:en] type of [`unordered_map::const_iterator] [:zh_CN] [`unordered_map::const_iterator] 的类型][=ImpDef]; // [:en] see [#container.requirements]
                                              // [|:zh_CN] 参见 [#container.requirements]
    using local_iterator       = [%@impldef [:en] type of [`unordered_map::local_iterator] [:zh_CN] [`unordered_map::local_iterator] 的类型][=ImpDef]; // [:en] see [#container.requirements]
                                              // [|:zh_CN] 参见 [#container.requirements]
    using const_local_iterator = [%@impldef [:en] type of [`unordered_map::const_local_iterator] [:zh_CN] [`unordered_map::const_local_iterator] 的类型][=ImpDef]; // [:en] see [#container.requirements]
                                              // [|:zh_CN] 参见 [#container.requirements]
    using node_type            = [=UnSpec];
    using insert_return_type   = [*INSERT_RETURN_TYPE]<iterator, node_type>;

    // [:en] [#unord.map.cnstr], construct/copy/destroy
    // [|:zh_CN] [#unord.map.cnstr]，构造/复制/销毁
    unordered_map();
    explicit unordered_map(size_type n,
                           const hasher& hf = hasher(),
                           const key_equal& eql = key_equal(),
                           const allocator_type& a = allocator_type());
    template <class InputIterator>
      unordered_map(InputIterator f, InputIterator l,
                    size_type n = [=SeeBelow],
                    const hasher& hf = hasher(),
                    const key_equal& eql = key_equal(),
                    const allocator_type& a = allocator_type());
    unordered_map(const unordered_map&);
    unordered_map(unordered_map&&);
    explicit unordered_map(const Allocator&);
    unordered_map(const unordered_map&, const Allocator&);
    unordered_map(unordered_map&&, const Allocator&);
    unordered_map(initializer_list<value_type> il,
                  size_type n = [=SeeBelow],
                  const hasher& hf = hasher(),
                  const key_equal& eql = key_equal(),
                  const allocator_type& a = allocator_type());
    unordered_map(size_type n, const allocator_type& a)
      : unordered_map(n, hasher(), key_equal(), a) { }
    unordered_map(size_type n, const hasher& hf, const allocator_type& a)
      : unordered_map(n, hf, key_equal(), a) { }
    template <class InputIterator>
      unordered_map(InputIterator f, InputIterator l, size_type n, const allocator_type& a)
        : unordered_map(f, l, n, hasher(), key_equal(), a) { }
    template <class InputIterator>
      unordered_map(InputIterator f, InputIterator l, size_type n, const hasher& hf,
                    const allocator_type& a)
        : unordered_map(f, l, n, hf, key_equal(), a) { }
    unordered_map(initializer_list<value_type> il, size_type n, const allocator_type& a)
      : unordered_map(il, n, hasher(), key_equal(), a) { }
    unordered_map(initializer_list<value_type> il, size_type n, const hasher& hf,
                  const allocator_type& a)
      : unordered_map(il, n, hf, key_equal(), a) { }
    ~unordered_map();
    unordered_map& operator=(const unordered_map&);
    unordered_map& operator=(unordered_map&&)
      noexcept(allocator_traits<Allocator>::is_always_equal::value &&
               is_nothrow_move_assignable_v<Hash> &&
               is_nothrow_move_assignable_v<Pred>);
    unordered_map& operator=(initializer_list<value_type>);
    allocator_type get_allocator() const noexcept;

    // [:en] iterators:
    // [|:zh_CN] 迭代器：
    iterator       begin() noexcept;
    const_iterator begin() const noexcept;
    iterator       end() noexcept;
    const_iterator end() const noexcept;
    const_iterator cbegin() const noexcept;
    const_iterator cend() const noexcept;

    // [:en] capacity:
    // [|:zh_CN] 容量：
    bool      empty() const noexcept;
    size_type size() const noexcept;
    size_type max_size() const noexcept;

    // [:en] [#unord.map.modifiers], modifiers
    // [|:zh_CN] [#unord.map.modifiers]，改动函数
    template <class... Args> pair<iterator, bool> emplace(Args&&... args);
    template <class... Args> iterator emplace_hint(const_iterator position, Args&&... args);
    pair<iterator, bool> insert(const value_type& obj);
    pair<iterator, bool> insert(value_type&& obj);
    template <class P> pair<iterator, bool> insert(P&& obj);
    iterator       insert(const_iterator hint, const value_type& obj);
    iterator       insert(const_iterator hint, value_type&& obj);
    template <class P> iterator insert(const_iterator hint, P&& obj);
    template <class InputIterator> void insert(InputIterator first, InputIterator last);
    void insert(initializer_list<value_type>);

    node_type extract(const_iterator position);
    node_type extract(const key_type& x);
    insert_return_type insert(node_type&& nh);
    iterator           insert(const_iterator hint, node_type&& nh);

    template <class... Args>
      pair<iterator, bool> try_emplace(const key_type& k, Args&&... args);
    template <class... Args>
      pair<iterator, bool> try_emplace(key_type&& k, Args&&... args);
    template <class... Args>
      iterator try_emplace(const_iterator hint, const key_type& k, Args&&... args);
    template <class... Args>
      iterator try_emplace(const_iterator hint, key_type&& k, Args&&... args);
    template <class M>
      pair<iterator, bool> insert_or_assign(const key_type& k, M&& obj);
    template <class M>
      pair<iterator, bool> insert_or_assign(key_type&& k, M&& obj);
    template <class M>
      iterator insert_or_assign(const_iterator hint, const key_type& k, M&& obj);
    template <class M>
      iterator insert_or_assign(const_iterator hint, key_type&& k, M&& obj);

    iterator  erase(iterator position);
    iterator  erase(const_iterator position);
    size_type erase(const key_type& k);
    iterator  erase(const_iterator first, const_iterator last);
    void      swap(unordered_map&)
      noexcept(allocator_traits<Allocator>::is_always_equal::value &&
               is_nothrow_swappable_v<Hash> &&
               is_nothrow_swappable_v<Pred>);
    void      clear() noexcept;

    template<class H2, class P2>
      void merge(unordered_map<Key, T, H2, P2, Allocator>& source);
    template<class H2, class P2>
      void merge(unordered_map<Key, T, H2, P2, Allocator>&& source);
    template<class H2, class P2>
      void merge(unordered_multimap<Key, T, H2, P2, Allocator>& source);
    template<class H2, class P2>
      void merge(unordered_multimap<Key, T, H2, P2, Allocator>&& source);

    // [:en] observers:
    // [|:zh_CN] 探察函数：
    hasher hash_function() const;
    key_equal key_eq() const;

    // [:en] map operations:
    // [|:zh_CN] map 的操作：
    iterator       find(const key_type& k);
    const_iterator find(const key_type& k) const;
    size_type      count(const key_type& k) const;
    pair<iterator, iterator>             equal_range(const key_type& k);
    pair<const_iterator, const_iterator> equal_range(const key_type& k) const;

    // [:en] [#unord.map.elem], element access
    // [|:zh_CN] [#unord.map.elem]，成员访问
    mapped_type& operator[](const key_type& k);
    mapped_type& operator[](key_type&& k);
    mapped_type& at(const key_type& k);
    const mapped_type& at(const key_type& k) const;

    // [:en] bucket interface:
    // [|:zh_CN] 桶的接口：
    size_type bucket_count() const noexcept;
    size_type max_bucket_count() const noexcept;
    size_type bucket_size(size_type n) const;
    size_type bucket(const key_type& k) const;
    local_iterator begin(size_type n);
    const_local_iterator begin(size_type n) const;
    local_iterator end(size_type n);
    const_local_iterator end(size_type n) const;
    const_local_iterator cbegin(size_type n) const;
    const_local_iterator cend(size_type n) const;

    // [:en] hash policy:
    // [|:zh_CN] 散列策略：
    float load_factor() const noexcept;
    float max_load_factor() const noexcept;
    void max_load_factor(float z);
    void rehash(size_type n);
    void reserve(size_type n);
  };

  template<class InputIterator,
           class Hash = hash<iter_key_t<InputIterator>>,
           class Pred = equal_to<iter_key_t<InputIterator>>,
           class Allocator = allocator<iter_to_alloc_t<InputIterator>>>
    unordered_map(InputIterator, InputIterator, typename [=SeeBelow]::size_type = [=SeeBelow],
                  Hash = Hash(), Pred = Pred(), Allocator = Allocator())
      -> unordered_map<iter_key_t<InputIterator>, iter_val_t<InputIterator>, Hash, Pred,
                       Allocator>;

  template<class Key, class T, class Hash = hash<Key>,
           class Pred = equal_to<Key>, class Allocator = allocator<pair<const Key, T>>>
    unordered_map(initializer_list<pair<const Key, T>>,
                  typename [=SeeBelow]::size_type = [=SeeBelow], Hash = Hash(),
                  Pred = Pred(), Allocator = Allocator())
      -> unordered_map<Key, T, Hash, Pred, Allocator>;

  template<class InputIterator, class Allocator>
    unordered_map(InputIterator, InputIterator, typename [=SeeBelow]::size_type, Allocator)
      -> unordered_map<iter_key_t<InputIterator>, iter_val_t<InputIterator>,
                       hash<iter_key_t<InputIterator>>, equal_to<iter_key_t<InputIterator>>,
                       Allocator>;

  template<class InputIterator, class Allocator>
    unordered_map(InputIterator, InputIterator, Allocator)
      -> unordered_map<iter_key_t<InputIterator>, iter_val_t<InputIterator>,
                       hash<iter_key_t<InputIterator>>, equal_to<iter_key_t<InputIterator>>,
                       Allocator>;

  template<class InputIterator, class Hash, class Allocator>
    unordered_map(InputIterator, InputIterator, typename [=SeeBelow]::size_type, Hash, Allocator)
      -> unordered_map<iter_key_t<InputIterator>, iter_val_t<InputIterator>, Hash,
                       equal_to<iter_key_t<InputIterator>>, Allocator>;

  template<class Key, class T, typename Allocator>
    unordered_map(initializer_list<pair<const Key, T>>, typename [=SeeBelow]::size_type,
                  Allocator)
      -> unordered_map<Key, T, hash<Key>, equal_to<Key>, Allocator>;

  template<class Key, class T, typename Allocator>
    unordered_map(initializer_list<pair<const Key, T>>, Allocator)
      -> unordered_map<Key, T, hash<Key>, equal_to<Key>, Allocator>;

  template<class Key, class T, class Hash, class Allocator>
    unordered_map(initializer_list<pair<const Key, T>>, typename [=SeeBelow]::size_type, Hash,
                  Allocator)
      -> unordered_map<Key, T, Hash, equal_to<Key>, Allocator>;

  // [:en] [#unord.map.swap], swap
  // [|:zh_CN] [#unord.map.swap]，swap
  template <class Key, class T, class Hash, class Pred, class Alloc>
    void swap(unordered_map<Key, T, Hash, Pred, Alloc>& x,
              unordered_map<Key, T, Hash, Pred, Alloc>& y)
      noexcept(noexcept(x.swap(y)));
}
[codeblock:end]

[para]
[:en] A [`size_type] parameter type in an [`unordered_map] deduction guide
refers to the [`size_type] member type of the type deduced by the deduction
guide.
[:zh_CN] [`unordered_map] 的推断指导中的 [`size_type] 形参类型，代表该推断指导所
推断的类型的 [`size_type] 成员类型。
