[section#unord.map.overview
    [:en] Overview
    [:zh_CN] 概要
]

[para]
[:en] [%[`unordered_map][!unique keys]] [%unordered associative containers[!unique keys]]
An [`unordered_map] is an unordered associative container that supports unique
keys (an [`unordered_map] contains at most one of each key value) and that
associates values of another type [`mapped_type] with the keys.
[:zh_CN] [%[`unordered_map][!唯一键]] [%无序关联容器[!唯一键]]
[`unordered_map] 是一种无序关联容器，支持唯一键（[`unordered_map] 中包含每个键值
的最多一个元素），并将键与另一个类型 [`T] 的值相关联。

[:en] The [`unordered_map] class supports forward iterators.
[:zh_CN] [`unordered_map] 类支持前向迭代器。

[para]
[:en] A [`unordered_map] meets all of the requirements of a container ([#container.reqmts]),
of an allocator-aware container ([#container.alloc.reqmts]), and of an unordered
associative container ([#unord.req]).
[:zh_CN] [`unordered_map] 满足容器（[#container.reqmts]），分配器感知容器（[#container.alloc.reqmts]），
以及无序关联容器（[#unord.req]）的所有规定。

[:en] It provides the operations described in the preceding requirements table
for unique keys; that is, an [`unordered_map] supports the [`a_uniq] operations
in that table, not the [`a_eq] operations.
[:zh_CN] 它提供以上规定表格中对于唯一键的操作；就是说，[`unordered_map] 支持
表格中的 [`a_uniq] 的操作，但不支持 [`a_eq] 的操作。

[:en] For an [`unordered_map<Key, T>] the [`key type] is [`Key], the
[`mapped_type] is [`T], and the [`value_type] is [`pair<const Key, T>].
[:zh_CN] [`unordered_map<Key,T>] 的键类型为 [`Key]，其 [`mapped_type] 为 [`T]，
而其 [`value_type] 为 [`pair<const Key, T>]。

[para]
[:en] Subclause [#unord.map] only describes operations on [`unordered_map] that
are not described in one of the requirement tables, or for which there is
additional semantic information.
[:zh_CN] 子条款 [#unord.map] 中仅说明未被这些表格之一所描述的 [`unordered_map]
的操作，以及具有额外的语义信息的操作。

[para]
[:en] The types [`iterator] and [`const_iterator] meet
the constexpr iterator requirements ([#iterator.requirements.general]).
[:zh_CN] 类型 [`iterator] 和 [`const_iterator] 满足
constexpr 迭代器的要求（[#iterator.requirements.general]）。

[%@lib unordered_map]
[codeblock:synopsis]
namespace std {
  template<class Key,
           class T,
           class Hash = hash<Key>,
           class Pred = equal_to<Key>,
           class Allocator = allocator<pair<const Key, T>>>
  class unordered_map {
  public:
    // [:en] types \
    [:zh_CN] 类型
    using key_type             = Key;
    using mapped_type          = T;
    using value_type           = pair<const Key, T>;
    using hasher               = Hash;
    using key_equal            = Pred;
    using allocator_type       = Allocator;
    using pointer              = typename allocator_traits<Allocator>::pointer;
    using const_pointer        = typename allocator_traits<Allocator>::const_pointer;
    using reference            = value_type&;
    using const_reference      = const value_type&;
    using size_type            = [[redoc("[?impdefx [:en] type of [`unordered_map::size_type]"
        "[:zh_CN] [`unordered_map::size_type] 的类型]")]]; // [:en] see [#container.requirements] [:zh_CN] 参见 [#container.requirements]
    using difference_type      = [[redoc("[?impdefx [:en] type of [`unordered_map::difference_type]"
        "[:zh_CN] [`unordered_map::difference_type] 的类型]")]]; // [:en] see [#container.requirements] [:zh_CN] 参见 [#container.requirements]

    using iterator             = [[redoc("[?impdefx [:en] type of [`unordered_map::iterator]"
        "[:zh_CN] [`unordered_map::iterator] 的类型]")]]; // [:en] see [#container.requirements] [:zh_CN] 参见 [#container.requirements]
    using const_iterator       = [[redoc("[?impdefx [:en] type of [`unordered_map::const_iterator]"
        "[:zh_CN] [`unordered_map::const_iterator] 的类型]")]]; // [:en] see [#container.requirements] [:zh_CN] 参见 [#container.requirements]
    using local_iterator       = [[redoc("[?impdefx [:en] type of [`unordered_map::local_iterator]"
        "[:zh_CN] [`unordered_map::local_iterator] 的类型]")]]; // [:en] see [#container.requirements] [:zh_CN] 参见 [#container.requirements]
    using const_local_iterator = [[redoc("[?impdefx [:en] type of [`unordered_map::const_local_iterator]"
        "[:zh_CN] [`unordered_map::const_local_iterator] 的类型]")]]; // [:en] see [#container.requirements] [:zh_CN] 参见 [#container.requirements]
    using node_type            = [[redoc("[=unspec]")]];
    using insert_return_type   = [[redoc("^>")]]insert-return-type<iterator, node_type>;

    // [:en] [#unord.map.cnstr], construct/copy/destroy \
    [:zh_CN] [#unord.map.cnstr]，构造/复制/销毁
    constexpr unordered_map();
    constexpr explicit unordered_map(size_type n, const hasher& hf = hasher(),
                                     const key_equal& eql = key_equal(),
                                     const allocator_type& a = allocator_type());
    template<class InputIterator>
      constexpr unordered_map(InputIterator f, InputIterator l,
                              size_type n = [[redoc("[=seebelow]")]], const hasher& hf = hasher(),
                              const key_equal& eql = key_equal(),
                              const allocator_type& a = allocator_type());

    template<[[redoc("*:c>")]]container-compatible-range<value_type> R>
      constexpr unordered_map(from_range_t, R&& rg, size_type n = [[redoc("[=seebelow]")]],
        const hasher& hf = hasher(), const key_equal& eql = key_equal(),
        const allocator_type& a = allocator_type());
    constexpr unordered_map(const unordered_map&);
    constexpr unordered_map(unordered_map&&);
    constexpr explicit unordered_map(const Allocator&);
    constexpr unordered_map(const unordered_map&, const type_identity_t<Allocator>&);
    constexpr unordered_map(unordered_map&&, const type_identity_t<Allocator>&);
    constexpr unordered_map(initializer_list<value_type> il, size_type n = [[redoc("[=seebelow]")]],
                            const hasher& hf = hasher(),
                            const key_equal& eql = key_equal(),
                            const allocator_type& a = allocator_type());
    constexpr unordered_map(size_type n, const allocator_type& a)
      : unordered_map(n, hasher(), key_equal(), a) { }
    constexpr unordered_map(size_type n, const hasher& hf, const allocator_type& a)
      : unordered_map(n, hf, key_equal(), a) { }
    template<class InputIterator>
      constexpr unordered_map(InputIterator f, InputIterator l, size_type n,
                              const allocator_type& a)
        : unordered_map(f, l, n, hasher(), key_equal(), a) { }
    template<class InputIterator>
      constexpr unordered_map(InputIterator f, InputIterator l, size_type n, const hasher& hf,
                    const allocator_type& a)
        : unordered_map(f, l, n, hf, key_equal(), a) { }
    template<[[redoc("*:c>")]]container-compatible-range<value_type> R>
      constexpr unordered_map(from_range_t, R&& rg, size_type n, const allocator_type& a)
        : unordered_map(from_range, std::forward<R>(rg), n, hasher(), key_equal(), a) { }
    template<[[redoc("*:c>")]]container-compatible-range<value_type> R>
      constexpr unordered_map(from_range_t, R&& rg, size_type n, const hasher& hf,
                              const allocator_type& a)
        : unordered_map(from_range, std::forward<R>(rg), n, hf, key_equal(), a) { }
    constexpr unordered_map(initializer_list<value_type> il, size_type n,
                            const allocator_type& a)
      : unordered_map(il, n, hasher(), key_equal(), a) { }
    constexpr unordered_map(initializer_list<value_type> il, size_type n, const hasher& hf,
                  const allocator_type& a)
      : unordered_map(il, n, hf, key_equal(), a) { }
    constexpr ~unordered_map();
    constexpr unordered_map& operator=(const unordered_map&);
    constexpr unordered_map& operator=(unordered_map&&)
      noexcept(allocator_traits<Allocator>::is_always_equal::value &&
               is_nothrow_move_assignable_v<Hash> &&
               is_nothrow_move_assignable_v<Pred>);
    constexpr unordered_map& operator=(initializer_list<value_type>);
    constexpr allocator_type get_allocator() const noexcept;

    // [:en] iterators \
    [:zh_CN] 迭代器
    constexpr iterator       begin() noexcept;
    constexpr const_iterator begin() const noexcept;
    constexpr iterator       end() noexcept;
    constexpr const_iterator end() const noexcept;
    constexpr const_iterator cbegin() const noexcept;
    constexpr const_iterator cend() const noexcept;

    // [:en] capacity \
    [:zh_CN] 容量
    constexpr bool empty() const noexcept;
    constexpr size_type size() const noexcept;
    constexpr size_type max_size() const noexcept;

    // [:en] [#unord.map.modifiers], modifiers \
    [:zh_CN] [#unord.map.modifiers]，改动函数
    template<class... Args> constexpr pair<iterator, bool> emplace(Args&&... args);
    template<class... Args>
      constexpr iterator emplace_hint(const_iterator position, Args&&... args);
    constexpr pair<iterator, bool> insert(const value_type& obj);
    constexpr pair<iterator, bool> insert(value_type&& obj);
    template<class P> constexpr pair<iterator, bool> insert(P&& obj);
    constexpr iterator       insert(const_iterator hint, const value_type& obj);
    constexpr iterator       insert(const_iterator hint, value_type&& obj);
    template<class P> constexpr iterator insert(const_iterator hint, P&& obj);
    template<class InputIterator> constexpr void insert(InputIterator first, InputIterator last);
    template<[[redoc("*:c>")]]container-compatible-range<value_type> R>
      constexpr void insert_range(R&& rg);
    constexpr void insert(initializer_list<value_type>);

    constexpr node_type extract(const_iterator position);
    constexpr node_type extract(const key_type& x);
    template<class K> constexpr node_type extract(K&& x);
    constexpr insert_return_type insert(node_type&& nh);
    constexpr iterator           insert(const_iterator hint, node_type&& nh);

    template<class... Args>
      constexpr pair<iterator, bool> try_emplace(const key_type& k, Args&&... args);
    template<class... Args>
      constexpr pair<iterator, bool> try_emplace(key_type&& k, Args&&... args);
    template<class K, class... Args>
      constexpr pair<iterator, bool> try_emplace(K&& k, Args&&... args);
    template<class... Args>
      constexpr iterator try_emplace(const_iterator hint, const key_type& k, Args&&... args);
    template<class... Args>
      constexpr iterator try_emplace(const_iterator hint, key_type&& k, Args&&... args);
    template<class K, class... Args>
      constexpr iterator try_emplace(const_iterator hint, K&& k, Args&&... args);
    template<class M>
      constexpr pair<iterator, bool> insert_or_assign(const key_type& k, M&& obj);
    template<class M>
      constexpr pair<iterator, bool> insert_or_assign(key_type&& k, M&& obj);
    template<class K, class M>
      constexpr pair<iterator, bool> insert_or_assign(K&& k, M&& obj);
    template<class M>
      constexpr iterator insert_or_assign(const_iterator hint, const key_type& k, M&& obj);
    template<class M>
      constexpr iterator insert_or_assign(const_iterator hint, key_type&& k, M&& obj);
    template<class K, class M>
      constexpr iterator insert_or_assign(const_iterator hint, K&& k, M&& obj);

    constexpr iterator  erase(iterator position);
    constexpr iterator  erase(const_iterator position);
    constexpr size_type erase(const key_type& k);
    template<class K> constexpr size_type erase(K&& x);
    constexpr iterator  erase(const_iterator first, const_iterator last);
    constexpr void      swap(unordered_map&)
      noexcept(allocator_traits<Allocator>::is_always_equal::value &&
               is_nothrow_swappable_v<Hash> && is_nothrow_swappable_v<Pred>);
    constexpr void      clear() noexcept;

    template<class H2, class P2>
      constexpr void merge(unordered_map<Key, T, H2, P2, Allocator>& source);
    template<class H2, class P2>
      constexpr void merge(unordered_map<Key, T, H2, P2, Allocator>&& source);
    template<class H2, class P2>
      constexpr void merge(unordered_multimap<Key, T, H2, P2, Allocator>& source);
    template<class H2, class P2>
      constexpr void merge(unordered_multimap<Key, T, H2, P2, Allocator>&& source);

    // [:en] observers \
    [:zh_CN] 探察函数
    constexpr hasher hash_function() const;
    constexpr key_equal key_eq() const;

    // [:en] map operations \
    [:zh_CN] map 的操作
    constexpr iterator         find(const key_type& k);
    constexpr const_iterator   find(const key_type& k) const;
    template<class K>
      constexpr iterator       find(const K& k);
    template<class K>
      constexpr const_iterator find(const K& k) const;
    constexpr size_type        count(const key_type& k) const;
    template<class K>
      constexpr size_type      count(const K& k) const;
    constexpr bool             contains(const key_type& k) const;
    template<class K>
      constexpr bool           contains(const K& k) const;
    constexpr pair<iterator, iterator>               equal_range(const key_type& k);
    constexpr pair<const_iterator, const_iterator>   equal_range(const key_type& k) const;
    template<class K>
      constexpr pair<iterator, iterator>             equal_range(const K& k);
    template<class K>
      constexpr pair<const_iterator, const_iterator> equal_range(const K& k) const;

    // [:en] [#unord.map.elem], element access \
    [:zh_CN] [#unord.map.elem]，成员访问
    constexpr mapped_type& operator[](const key_type& k);
    constexpr mapped_type& operator[](key_type&& k);
    template<class K> constexpr mapped_type& operator[](K&& k);
    constexpr mapped_type& at(const key_type& k);
    constexpr const mapped_type& at(const key_type& k) const;
    template<class K> constexpr mapped_type& at(const K& k);
    template<class K> constexpr const mapped_type& at(const K& k) const;

    // [:en] bucket interface \
    [:zh_CN] 桶的接口
    constexpr size_type bucket_count() const noexcept;
    constexpr size_type max_bucket_count() const noexcept;
    constexpr size_type bucket_size(size_type n) const;
    constexpr size_type bucket(const key_type& k) const;
    template<class K> constexpr size_type bucket(const K& k) const;
    constexpr local_iterator begin(size_type n);
    constexpr const_local_iterator begin(size_type n) const;
    constexpr local_iterator end(size_type n);
    constexpr const_local_iterator end(size_type n) const;
    constexpr const_local_iterator cbegin(size_type n) const;
    constexpr const_local_iterator cend(size_type n) const;

    // [:en] hash policy \
    [:zh_CN] 散列策略
    constexpr float load_factor() const noexcept;
    constexpr float max_load_factor() const noexcept;
    constexpr void max_load_factor(float z);
    constexpr void rehash(size_type n);
    constexpr void reserve(size_type n);
  };

  template<class InputIterator,
           class Hash = hash<[[redoc("^>")]]iter-key-type<InputIterator>>,
           class Pred = equal_to<[[redoc("^>")]]iter-key-type<InputIterator>>,
           class Allocator = allocator<[[redoc("^>")]]iter-to-alloc-type<InputIterator>>>
    unordered_map(InputIterator, InputIterator, typename [[redoc("[=seebelow]")]]::size_type = [[redoc("[=seebelow]")]],
                  Hash = Hash(), Pred = Pred(), Allocator = Allocator())
      -> unordered_map<[[redoc("^>")]]iter-key-type<InputIterator>, [[redoc("^>")]]iter-mapped-type<InputIterator>, Hash, Pred,
                       Allocator>;

  template<ranges::[[redoc("`:c>")]]input_range R, class Hash = hash<[[redoc("*>")]]range-key-type<R>>,
           class Pred = equal_to<[[redoc("*>")]]range-key-type<R>>,
           class Allocator = allocator<[[redoc("*>")]]range-to-alloc-type<R>>>
    unordered_map(from_range_t, R&&, typename [[redoc("[=seebelow]")]]::size_type = [[redoc("[=seebelow]")]],
                  Hash = Hash(), Pred = Pred(), Allocator = Allocator())
      -> unordered_map<[[redoc("*>")]]range-key-type<R>, [[redoc("*>")]]range-mapped-type<R>, Hash, Pred, Allocator>;

  template<class Key, class T, class Hash = hash<Key>,
           class Pred = equal_to<Key>, class Allocator = allocator<pair<const Key, T>>>
    unordered_map(initializer_list<pair<Key, T>>,
                  typename [[redoc("[=seebelow]")]]::size_type = [[redoc("[=seebelow]")]], Hash = Hash(),
                  Pred = Pred(), Allocator = Allocator())
      -> unordered_map<Key, T, Hash, Pred, Allocator>;

  template<class InputIterator, class Allocator>
    unordered_map(InputIterator, InputIterator, typename [[redoc("[=seebelow]")]]::size_type, Allocator)
      -> unordered_map<[[redoc("^>")]]iter-key-type<InputIterator>, [[redoc("^>")]]iter-mapped-type<InputIterator>,
                       hash<[[redoc("^>")]]iter-key-type<InputIterator>>,
                       equal_to<[[redoc("^>")]]iter-key-type<InputIterator>>, Allocator>;

  template<class InputIterator, class Allocator>
    unordered_map(InputIterator, InputIterator, Allocator)
      -> unordered_map<[[redoc("^>")]]iter-key-type<InputIterator>, [[redoc("^>")]]iter-mapped-type<InputIterator>,
                       hash<[[redoc("^>")]]iter-key-type<InputIterator>>,
                       equal_to<[[redoc("^>")]]iter-key-type<InputIterator>>, Allocator>;

  template<class InputIterator, class Hash, class Allocator>
    unordered_map(InputIterator, InputIterator, typename [[redoc("[=seebelow]")]]::size_type, Hash, Allocator)
      -> unordered_map<[[redoc("^>")]]iter-key-type<InputIterator>, [[redoc("^>")]]iter-mapped-type<InputIterator>, Hash,
                       equal_to<[[redoc("^>")]]iter-key-type<InputIterator>>, Allocator>;

  template<ranges::[[redoc("`:c>")]]input_range R, class Allocator>
    unordered_map(from_range_t, R&&, typename [[redoc("[=seebelow]")]]::size_type, Allocator)
      -> unordered_map<[[redoc("*>")]]range-key-type<R>, [[redoc("*>")]]range-mapped-type<R>, hash<[[redoc("*>")]]range-key-type<R>>,
                       equal_to<[[redoc("*>")]]range-key-type<R>>, Allocator>;

  template<ranges::[[redoc("`:c>")]]input_range R, class Allocator>
    unordered_map(from_range_t, R&&, Allocator)
      -> unordered_map<[[redoc("*>")]]range-key-type<R>, [[redoc("*>")]]range-mapped-type<R>, hash<[[redoc("*>")]]range-key-type<R>>,
                       equal_to<[[redoc("*>")]]range-key-type<R>>, Allocator>;

  template<ranges::[[redoc("`:c>")]]input_range R, class Hash, class Allocator>
    unordered_map(from_range_t, R&&, typename [[redoc("[=seebelow]")]]::size_type, Hash, Allocator)
      -> unordered_map<[[redoc("*>")]]range-key-type<R>, [[redoc("*>")]]range-mapped-type<R>, Hash,
                       equal_to<[[redoc("*>")]]range-key-type<R>>, Allocator>;

  template<class Key, class T, class Allocator>
    unordered_map(initializer_list<pair<Key, T>>, typename [[redoc("[=seebelow]")]]::size_type,
                  Allocator)
      -> unordered_map<Key, T, hash<Key>, equal_to<Key>, Allocator>;

  template<class Key, class T, class Allocator>
    unordered_map(initializer_list<pair<Key, T>>, Allocator)
      -> unordered_map<Key, T, hash<Key>, equal_to<Key>, Allocator>;

  template<class Key, class T, class Hash, class Allocator>
    unordered_map(initializer_list<pair<Key, T>>, typename [[redoc("[=seebelow]")]]::size_type, Hash,
                  Allocator)
      -> unordered_map<Key, T, Hash, equal_to<Key>, Allocator>;
}
[codeblock:end]

[para]
[:en] A [`size_type] parameter type in an [`unordered_map] deduction guide
refers to the [`size_type] member type of the type deduced by the deduction guide.
[:zh_CN] [`unordered_map] 的推断导引中的 [`size_type] 形参类型，代表该推断导引所
推断的类型的 [`size_type] 成员类型。
