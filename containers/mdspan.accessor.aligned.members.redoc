[section#mdspan.accessor.aligned.members
    [:en] Members
    [:zh_CN] 成员
]

[%@lib@ctor aligned_accessor]
[codeblock:declaration]
template<class OtherElementType, size_t OtherByteAlignment>
  constexpr aligned_accessor(aligned_accessor<OtherElementType, OtherByteAlignment>) noexcept;
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en] [`is_convertible_v<OtherElementType(*)`[`], element_type(*)`[`]>] is [`true].
[:zh_CN] [`is_convertible_v<OtherElementType(*)`[`], element_type(*)`[`]>] 为 [`true]。
[item]
[:en] [`OtherByteAlignment >= byte_alignment] is [`true].
[:zh_CN] [`OtherByteAlignment >= byte_alignment] 为 [`true]。
[list:end]

[para:effects]
[:en] None.
[:zh_CN] 无。
[div:end]

[%@lib@ctor aligned_accessor]
[codeblock:declaration]
template<class OtherElementType>
  constexpr explicit aligned_accessor(default_accessor<OtherElementType>) noexcept;
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`is_convertible_v<OtherElementType(*)`[`], element_type(*)`[`]>] is [`true].
[:zh_CN] [`is_convertible_v<OtherElementType(*)`[`], element_type(*)`[`]>] 为 [`true]。

[para:effects]
[:en] None.
[:zh_CN] 无。
[div:end]

[%@lib@member access[!aligned_accessor]]
[codeblock:declaration]
constexpr reference access(data_handle_type p, size_t i) const noexcept;
[codeblock:end]

[div:description]
[para:expects]
[:en] [=range(0,i + 1)] is an accessible range for [`p] and [`*this].
[:zh_CN] [=range(0,i + 1)] 对于 [`p] 和 [`*this] 都是可访问范围。

[para:effects]
[:en] Equivalent to: [`return assume_aligned<byte_alignment>(p)`[i`];]
[:zh_CN] 等价于：[`return assume_aligned<byte_alignment>(p)`[i`];]
[div:end]

[%@lib@member operator default_accessor[!aligned_accessor]]
[codeblock:declaration]
template<class OtherElementType>
  constexpr operator default_accessor<OtherElementType>() const noexcept;
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`is_convertible_v<element_type(*)`[`], OtherElementType(*)`[`]>] is [`true].
[:zh_CN] [`is_convertible_v<element_type(*)`[`], OtherElementType(*)`[`]>] 为 [`true]。

[para:effects]
[:en] Equivalent to: [`return {};]
[:zh_CN] 等价于：[`return {};]
[div:end]

[%@lib@member offset[!aligned_accessor]]
[codeblock:declaration]
constexpr typename offset_policy::data_handle_type
  offset(data_handle_type p, size_t i) const noexcept;
[codeblock:end]

[div:description]
[para:expects]
[:en] [=range(0,i + 1)] is an accessible range for [`p] and [`*this].
[:zh_CN] [=range(0,i + 1)] 对于 [`p] 和 [`*this] 都是可访问范围。

[para:effects]
[:en] Equivalent to: [`return return assume_aligned<byte_alignment>(p) + i;]
[:zh_CN] 等价于：[`return return assume_aligned<byte_alignment>(p) + i;]
[div:end]
