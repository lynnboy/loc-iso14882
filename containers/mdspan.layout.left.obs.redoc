[section#mdspan.layout.left.obs
    [:en] Observers
    [:zh_CN] 探察函数
]

[%@lib@member required_span_size[!layout_left::mapping]]
[codeblock:declaration]
constexpr index_type required_span_size() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`extents().[*fwd-prod-of-extents](extents_type::rank())].
[:zh_CN] [`extents().[*fwd-prod-of-extents](extents_type::rank())]。
[div:end]

[%@lib@member operator()[!layout_left::mapping]]
[codeblock:declaration]
template<class... Indices>
  constexpr index_type operator()(Indices... i) const noexcept;
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en] [`sizeof...(Indices) == extents_type::rank()] is [`true],
[:zh_CN] [`sizeof...(Indices) == extents_type::rank()] 为 [`true]，
[item]
[:en] [`(is_convertible_v<Indices, index_type> && ...)] is [`true], and
[:zh_CN] [`(is_convertible_v<Indices, index_type> && ...)] 为 [`true]，并且
[item]
[:en] [`(is_nothrow_constructible_v<index_type, Indices> && ...)] is [`true].
[:zh_CN] [`(is_nothrow_constructible_v<index_type, Indices> && ...)] 为 [`true]。
[list:end]

[para:expects]
[:en] [`extents_type::[*index-cast](i)] is a multidimensional index in
[*extents_] ([#mdspan.overview]).
[:zh_CN] [`extents_type::[*index-cast](i)] 是 [*extents_] 中的多维索引
（[#mdspan.overview]）。

[para:effects]
[:en] Let [`P] be a parameter pack such that
[:zh_CN] 令 [`P] 为使得
[codeblock]
is_same_v<index_sequence_for<Indices...>, index_sequence<P...>>
[codeblock:end]
[:en@~] is [`true].
[:zh_CN@~] 为 [`true] 的形参包组。

[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return ((static_cast<index_type>(i) * stride(P)) + ... + 0);
[codeblock:end]
[div:end]

[%@lib@member stride[!layout_left::mapping]]
[codeblock:declaration]
constexpr index_type stride(rank_type i) const;
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`extents_type::rank() > 0] is [`true].
[:zh_CN] [`extents_type::rank() > 0] 为 [`true]。

[para:expects]
[:en] [`i < extents_type::rank()] is [`true].
[:zh_CN] [`i < extents_type::rank()] 为 [`true]。

[para:returns]
[:en] [`extents().[*fwd-prod-of-extents](i)].
[:zh_CN] [`extents().[*fwd-prod-of-extents](i)]。
[div:end]

[%@lib@member operator==[!layout_left::mapping]]
[codeblock:declaration]
template<class OtherExtents>
  friend constexpr bool operator==(const mapping& x, const mapping<OtherExtents>& y) noexcept;
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`extents_type::rank() == OtherExtents::rank()] is [`true].
[:zh_CN] [`extents_type::rank() == OtherExtents::rank()] 为 [`true]。

[para:effects]
[:en] Equivalent to: [`return x.extents() == y.extents();]
[:zh_CN] 等价于：[`return x.extents() == y.extents();]
[div:end]
