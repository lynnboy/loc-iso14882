[section#vector.bool
    [:en] Class [`vector<bool>]
    [:zh_CN] 类 [`vector<bool>]
]

[para]
[%@library vector<bool>]
[:en] To optimize space allocation, a specialization of vector for [`bool]
elements is provided:
[:zh_CN] 为优化空间分配，提供了针对 [`bool] 元素的 [`vector] 的特化：

[codeblock:synopsis [!:mark ImpDef] ]
namespace std {
  template<class Allocator>
  class vector<bool, Allocator> {
  public:
    // [:en] types
    // [|:zh_CN] 类型
    using value_type             = bool;
    using allocator_type         = Allocator;
    using pointer                = [=ImpDef];
    using const_pointer          = [=ImpDef];
    using const_reference        = bool;
    using size_type              = [=ImpDef]; // [:en] see [#container.requirements]
                                              // [|:zh_CN] 参见 [#container.requirements]
    using difference_type        = [=ImpDef]; // [:en] see [#container.requirements]
                                              // [|:zh_CN] 参见 [#container.requirements]
    using iterator               = [%@impldef [:en] type of [`vector<bool>::iterator] [:zh_CN] [`vector<bool>::iterator] 的类型][=ImpDef]; // [:en] see [#container.requirements]
                                                                  // [|:zh_CN] 参见 [#container.requirements]
    using const_iterator         = [%@impldef [:en] type of [`vector<bool>::const_iterator] [:zh_CN] [`vector<bool>::const_iterator] 的类型][=ImpDef]; // [:en] see [#container.requirements]
                                                                  // [|:zh_CN] 参见 [#container.requirements]
    using reverse_iterator       = std::reverse_iterator<iterator>;
    using const_reverse_iterator = std::reverse_iterator<const_iterator>;

    // [:en] bit reference
    // [|:zh_CN] 位的引用
    class reference {
      friend class vector;
      reference() noexcept;
    public:
      ~reference();
      operator bool() const noexcept;
      reference& operator=(const bool x) noexcept;
      reference& operator=(const reference& x) noexcept;
      void flip() noexcept;     // [:en] flips the bit
                                // [|:zh_CN] 翻转位
    };

    // [:en] construct/copy/destroy
    // [|:zh_CN] 构造/复制/销毁
    vector() : vector(Allocator()) { }
    explicit vector(const Allocator&);
    explicit vector(size_type n, const Allocator& = Allocator());
    vector(size_type n, const bool& value, const Allocator& = Allocator());
    template<class InputIterator>
      vector(InputIterator first, InputIterator last, const Allocator& = Allocator());
    vector(const vector& x);
    vector(vector&& x);
    vector(const vector&, const Allocator&);
    vector(vector&&, const Allocator&);
    vector(initializer_list<bool>, const Allocator& = Allocator()));
    ~vector();
    vector& operator=(const vector& x);
    vector& operator=(vector&& x);
    vector& operator=(initializer_list<bool>);
    template<class InputIterator>
      void assign(InputIterator first, InputIterator last);
    void assign(size_type n, const bool& t);
    void assign(initializer_list<bool>);
    allocator_type get_allocator() const noexcept;

    // [:en] iterators
    // [|:zh_CN] 迭代器
    iterator               begin() noexcept;
    const_iterator         begin() const noexcept;
    iterator               end() noexcept;
    const_iterator         end() const noexcept;
    reverse_iterator       rbegin() noexcept;
    const_reverse_iterator rbegin() const noexcept;
    reverse_iterator       rend() noexcept;
    const_reverse_iterator rend() const noexcept;

    const_iterator         cbegin() const noexcept;
    const_iterator         cend() const noexcept;
    const_reverse_iterator crbegin() const noexcept;
    const_reverse_iterator crend() const noexcept;

    // [:en] capacity
    // [|:zh_CN] 容量
    [[nodiscard]] bool empty() const noexcept;
    size_type size() const noexcept;
    size_type max_size() const noexcept;
    size_type capacity() const noexcept;
    void      resize(size_type sz, bool c = false);
    void      reserve(size_type n);
    void      shrink_to_fit();

    // [:en] element access
    // [|:zh_CN] 元素访问
    reference       operator[](size_type n);
    const_reference operator[](size_type n) const;
    const_reference at(size_type n) const;
    reference       at(size_type n);
    reference       front();
    const_reference front() const;
    reference       back();
    const_reference back() const;

    // [:en] modifiers
    // [|:zh_CN] 改动函数
    template<class... Args> reference emplace_back(Args&&... args);
    void push_back(const bool& x);
    void pop_back();
    template<class... Args> iterator emplace(const_iterator position, Args&&... args);
    iterator insert(const_iterator position, const bool& x);
    iterator insert(const_iterator position, size_type n, const bool& x);
    template<class InputIterator>
      iterator insert(const_iterator position, InputIterator first, InputIterator last);
    iterator insert(const_iterator position, initializer_list<bool> il);

    iterator erase(const_iterator position);
    iterator erase(const_iterator first, const_iterator last);
    void swap(vector&);
    static void swap(reference x, reference y) noexcept;
    void flip() noexcept;       // [:en] flips all bits
                                // [|:zh_CN] 翻转全部的位
    void clear() noexcept;
  };
}
[codeblock:end]

[para]
[:en] Unless described below, all operations have the same requirements and
semantics as the primary [`vector] template, except that operations dealing with
the [`bool] value type map to bit values in the container storage and
[`allocator_traits::construct] ([#allocator.traits.members]) is not used to
construct these values.
[:zh_CN] 出非在下文中进行说明，其所有操作均与主 [`vector] 模板具有相同的规定和
语义，但是处理 [`bool] 值的操作被映射到容器存储中的位值，并且不使用
[`allocator_traits::construct]（[#allocator.traits.members]）来构造这些值。

[para]
[:en] There is no requirement that the data be stored as a contiguous allocation
of [`bool] values.
[:zh_CN] 对于数据被存储为连续分配的 [`bool] 值是没有规定的。

[:en] A space-optimized representation of bits is recommended instead.
[:zh_CN] 改为推荐采用一种空间优化的位表示。

[para]
[:en] [`reference] is a class that simulates the behavior of references of a
single bit in [`veictor<bool>].
[:zh_CN] [`reference] 是一种模拟指代 [`veictor<bool>] 中的单个位的行为的类。

[:en] The conversion operator returns [`true] when the bit is set, and [`false]
otherwise.
[:zh_CN] 当位被设置时其转换运算符返回 [`true]，否则返回 [`false]。

[:en] The assignment operator sets the bit when the argument is (convertible to)
[`true] and clears it otherwise.
[:zh_CN] 当赋值运算符的实参（可以转换）为 [`true] 时将对位进行置位，否则就将其
清除。

[:en] [`flip] reverses the state of the bit.
[:zh_CN] [`flip] 翻转位的状态。

[%@library flip[!vector<bool>]]
[%@library vector<bool>[!flip]]
[codeblock:declaration]
void flip() noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Replaces each element in the container with its complement.
[:zh_CN] 将容器中的每个元素替换为各自的补。
[exit:description]

[%@library swap[!vector<bool>]]
[%@library vector<bool>[!swap]]
[codeblock:declaration]
static void swap(reference x, reference y) noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Exchanges the contents of [`x] and [`y] as if by:
[:zh_CN] 交换 [`x] 和 [`y] 的内容，如同执行：

[codeblock:notation]
bool b = x;
x = y;
y = b;
[codeblock:end]
[exit:description]

[codeblock:declaration]
template<class Allocator> struct hash<vector<bool, Allocator>>;
[codeblock:end]

[enter:description]
[para]
[:en] The specialization is enabled ([#unord.hash]).
[:zh_CN] 该特例被启用（[#unord.hash]）。
[exit:description]
