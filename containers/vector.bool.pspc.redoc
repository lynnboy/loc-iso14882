[section#vector.bool.pspc
    [:en] Partial class template specialization [`vector<bool, Allocator>]
    [:zh_CN] 部分类模板特化式 [`vector<bool, Allocator>]
]

[para]
[%@lib vector<bool>]
[:en] To optimize space allocation, a partial specialization of [`vector] for
[`bool] elements is provided:
[:zh_CN] 为优化空间分配，提供了针对 [`bool] 元素的 [`vector] 的部分特化式：

[codeblock:synopsis]
namespace std {
  template<class Allocator>
  class vector<bool, Allocator> {
  public:
    // [:en] types \
    [:zh_CN] 类型
    using value_type             = bool;
    using allocator_type         = Allocator;
    using pointer                = [[redoc("[?impdefx [:en] type of [`vector<bool>::pointer]"
                                                  "[:zh_CN] [`vector<bool>::pointer] 的类型]")]];
    using const_pointer          = [[redoc("[?impdefx [:en] type of [`vector<bool>::const_pointer]"
                                                  "[:zh_CN] [`vector<bool>::const_pointer] 的类型]")]];
    using const_reference        = bool;
    using size_type              = [[redoc("[?impdefx"
          " [:en] type of [`vector<bool>::size_type]"
        "[:zh_CN] [`vector<bool>::size_type] 的类型]")]]; // [:en] see [#container.requirements] \
                                                          [:zh_CN] 参见 [#container.requirements]
    using difference_type        = [[redoc("[?impdefx"
          " [:en] type of [`vector<bool>::difference_type]"
        "[:zh_CN] [`vector<bool>::difference_type] 的类型]")]]; // [:en] see [#container.requirements] \
                                                                [:zh_CN] 参见 [#container.requirements]
    using iterator               = [[redoc("[?impdefx"
          " [:en] type of [`vector<bool>::iterator]"
        "[:zh_CN] [`vector<bool>::iterator] 的类型]")]]; // [:en] see [#container.requirements] \
                                                         [:zh_CN] 参见 [#container.requirements]
    using const_iterator         = [[redoc("[?impdefx"
          " [:en] type of [`vector<bool>::const_iterator]"
        "[:zh_CN] [`vector<bool>::const_iterator] 的类型]")]]; // [:en] see [#container.requirements] \
                                                               [:zh_CN] 参见 [#container.requirements]
    using reverse_iterator       = std::reverse_iterator<iterator>;
    using const_reverse_iterator = std::reverse_iterator<const_iterator>;

    // [:en] bit reference \
    [:zh_CN] 位的引用
    class [[redoc("[%@lib@member reference[!vector<bool>]]")]]reference {
      friend class vector;
      constexpr reference() noexcept;

    public:
      constexpr reference(const reference&) = default;
      constexpr ~reference();
      constexpr operator bool() const noexcept;
      constexpr reference& operator=(bool x) noexcept;
      constexpr reference& operator=(const reference& x) noexcept;
      constexpr const reference& operator=(bool x) const noexcept;
      constexpr void flip() noexcept;   // [:en] flips the bit \
                                        [:zh_CN] 翻转位
    };

    // [:en] construct/copy/destroy \
    [:zh_CN] 构造/复制/销毁
    constexpr vector() noexcept(noexcept(Allocator())) : vector(Allocator()) { }
    constexpr explicit vector(const Allocator&) noexcept;
    constexpr explicit vector(size_type n, const Allocator& = Allocator());
    constexpr vector(size_type n, const bool& value, const Allocator& = Allocator());
    template<class InputIterator>
      constexpr vector(InputIterator first, InputIterator last, const Allocator& = Allocator());
    template<[[redoc("*:c>")]]container-compatible-range<bool> R>
      constexpr vector(from_range_t, R&& rg, const Allocator& = Allocator());
    constexpr vector(const vector& x);
    constexpr vector(vector&& x) noexcept;
    constexpr vector(const vector&, const type_identity_t<Allocator>&);
    constexpr vector(vector&&, const type_identity_t<Allocator>&);
    constexpr vector(initializer_list<bool>, const Allocator& = Allocator());
    constexpr ~vector();
    constexpr vector& operator=(const vector& x);
    constexpr vector& operator=(vector&& x)
      noexcept(allocator_traits<Allocator>::propagate_on_container_move_assignment::value ||
               allocator_traits<Allocator>::is_always_equal::value);
    constexpr vector& operator=(initializer_list<bool>);
    template<class InputIterator>
      constexpr void assign(InputIterator first, InputIterator last);
    template<[[redoc("*:c>")]]container-compatible-range<bool> R>
      constexpr void assign_range(R&& rg);
    constexpr void assign(size_type n, const bool& t);
    constexpr void assign(initializer_list<bool>);
    constexpr allocator_type get_allocator() const noexcept;

    // [:en] iterators \
    [:zh_CN] 迭代器
    constexpr iterator               begin() noexcept;
    constexpr const_iterator         begin() const noexcept;
    constexpr iterator               end() noexcept;
    constexpr const_iterator         end() const noexcept;
    constexpr reverse_iterator       rbegin() noexcept;
    constexpr const_reverse_iterator rbegin() const noexcept;
    constexpr reverse_iterator       rend() noexcept;
    constexpr const_reverse_iterator rend() const noexcept;

    constexpr const_iterator         cbegin() const noexcept;
    constexpr const_iterator         cend() const noexcept;
    constexpr const_reverse_iterator crbegin() const noexcept;
    constexpr const_reverse_iterator crend() const noexcept;

    // [:en] capacity \
    [:zh_CN] 容量
    constexpr bool empty() const noexcept;
    constexpr size_type size() const noexcept;
    constexpr size_type max_size() const noexcept;
    constexpr size_type capacity() const noexcept;
    constexpr void      resize(size_type sz, bool c = false);
    constexpr void      reserve(size_type n);
    constexpr void      shrink_to_fit();

    // [:en] element access \
    [:zh_CN] 元素访问
    constexpr reference       operator[](size_type n);
    constexpr const_reference operator[](size_type n) const;
    constexpr const_reference at(size_type n) const;
    constexpr reference       at(size_type n);
    constexpr reference       front();
    constexpr const_reference front() const;
    constexpr reference       back();
    constexpr const_reference back() const;

    // [:en] modifiers \
    [:zh_CN] 改动函数
    template<class... Args> constexpr reference emplace_back(Args&&... args);
    constexpr void push_back(const bool& x);
    template<[[redoc("*:c>")]]container-compatible-range<bool> R>
      constexpr void append_range(R&& rg);
    constexpr void pop_back();
    template<class... Args> constexpr iterator emplace(const_iterator position, Args&&... args);
    constexpr iterator insert(const_iterator position, const bool& x);
    constexpr iterator insert(const_iterator position, size_type n, const bool& x);
    template<class InputIterator>
      constexpr iterator insert(const_iterator position,
                                InputIterator first, InputIterator last);
    template<[[redoc("*:c>")]]container-compatible-range<bool> R>
      constexpr iterator insert_range(const_iterator position, R&& rg);
    constexpr iterator insert(const_iterator position, initializer_list<bool> il);

    constexpr iterator erase(const_iterator position);
    constexpr iterator erase(const_iterator first, const_iterator last);
    constexpr void swap(vector&)
      noexcept(allocator_traits<Allocator>::propagate_on_container_swap::value ||
               allocator_traits<Allocator>::is_always_equal::value);
    static constexpr void swap(reference x, reference y) noexcept;
    constexpr void flip() noexcept;     // [:en] flips all bits \
                                        [:zh_CN] 翻转全部的位
    constexpr void clear() noexcept;
  };
}
[codeblock:end]

[para]
[:en] Unless described below, all operations have the same requirements and
semantics as the primary [`vector] template, except that operations dealing with
the [`bool] value type map to bit values in the container storage and
[`allocator_traits::construct] ([#allocator.traits.members]) is not used to
construct these values.
[:zh_CN] 出非在下文中进行说明，其所有操作均与主 [`vector] 模板具有相同的规定和
语义，但是处理 [`bool] 值的操作被映射到容器存储中的位值，并且不使用
[`allocator_traits::construct]（[#allocator.traits.members]）来构造这些值。

[para]
[:en] There is no requirement that the data be stored as a contiguous allocation
of [`bool] values.
[:zh_CN] 没有规定数据应存储为连续分配的 [`bool] 值。

[:en] A space-optimized representation of bits is recommended instead.
[:zh_CN] 改为推荐采用一种空间优化的位表示。

[para]
[:en] [`reference] is a class that simulates the behavior of references of a
single bit in [`veictor<bool>].
[:zh_CN] [`reference] 是一种模拟指代 [`veictor<bool>] 中的单个位的行为的类。

[:en] The conversion function returns [`true] when the bit is set, and [`false]
otherwise.
[:zh_CN] 当位被设置时其转函数返回 [`true]，否则返回 [`false]。

[:en] The assignment operator set the bit when the argument is (convertible to)
[`true] and clear it otherwise.
[:zh_CN] 当赋值运算符的实参（可以转换）为 [`true] 时将对位进行置位，否则就将其清除。

[:en] [`flip] reverses the state of the bit.
[:zh_CN] [`flip] 翻转位的状态。

[%@lib@member flip[!vector<bool>]]
[codeblock:declaration]
constexpr void flip() noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Replaces each element in the container with its complement.
[:zh_CN] 将容器中的每个元素替换为各自的补。
[div:end]

[%@lib@member swap[!vector<bool>]]
[codeblock:declaration]
static constexpr void swap(reference x, reference y) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Exchanges the contents of [`x] and [`y] as if by:
[:zh_CN] 交换 [`x] 和 [`y] 的内容，如同执行：

[codeblock]
bool b = x;
x = y;
y = b;
[codeblock:end]
[div:end]

[codeblock:declaration]
template<class Allocator> struct hash<vector<bool, Allocator>>;
[codeblock:end]

[div:description]
[para]
[:en] The specialization is enabled ([#unord.hash]).
[:zh_CN] 该特例被启用（[#unord.hash]）。
[div:end]

[%@lib [*is-vector-bool-reference]]
[codeblock:declaration]
template<class T>
  constexpr bool [[redoc("*>")]]is-vector-bool-reference = [[redoc("[=seebelow]")]];
[codeblock:end]

[div:description]
[para]
[:en] The expression [`[*is-vector-bool-reference]<T>] is [`true] if [`T]
denotes the type [`vector<bool, Alloc>::reference] for some type [`Alloc] and
[`vector<bool, Alloc>] is not a program-defined specialization.
[:zh_CN] 若 [`T] 对于某个类型 [`Alloc] 代表类型 [`vector<bool, Alloc>::reference]，
并且 [`vector<bool, Alloc>] 不是程序定义的特例，则表达式
[`[*is-vector-bool-reference]<T>] 为 [`true]。
[div:end]
