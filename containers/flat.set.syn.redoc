[section#flat.set.syn
    [:en] Header [`<flat_set>] synopsis
    [:zh_CN] 头文件 [`<flat_set>] 纲要
]

[%@hdr@def flat_set]
[codeblock:synopsis]
#include <initializer_list>     // [:en] see [#initializer.list.syn] \
                                [:zh_CN] 参见 [#initializer.list.syn]

namespace std {
  // [:en] [#flat.set], class template [`flat_set] \
  [:zh_CN] [#flat.set]，类模板 [`flat_set]
  template<class Key, class Compare = less<Key>, class KeyContainer = vector<Key>>
    class flat_set;

  struct sorted_unique_t { explicit sorted_unique_t() = default; };
  inline constexpr sorted_unique_t sorted_unique{};

 template<class Key, class Compare, class KeyContainer, class Allocator>
    struct uses_allocator<flat_set<Key, Compare, KeyContainer>, Allocator>;

  // [:en] [#flat.set.erasure], erasure for [`flat_set] \
  [:zh_CN] [#flat.set.erasure]，[`flat_set] 的擦除
  template<class Key, class Compare, class KeyContainer, class Predicate>
    typename flat_set<Key, Compare, KeyContainer>::size_type
      erase_if(flat_set<Key, Compare, KeyContainer>& c, Predicate pred);

  // [:en] [#flat.multiset], class template [`flat_multiset] \
  [:zh_CN] [#flat.multiset]，类模板 [`flat_multiset]
  template<class Key, class Compare = less<Key>, class KeyContainer = vector<Key>>
    class flat_multiset;

  struct sorted_equivalent_t { explicit sorted_equivalent_t() = default; };
  inline constexpr sorted_equivalent_t sorted_equivalent{};

  template<class Key, class Compare, class KeyContainer, class Allocator>
    struct uses_allocator<flat_multiset<Key, Compare, KeyContainer>, Allocator>;

  // [:en] [#flat.multiset.erasure], erasure for [`flat_multiset] \
  [:zh_CN] [#flat.multiset.erasure]，[`flat_multiset] 的擦除
  template<class Key, class Compare, class KeyContainer, class Predicate>
    typename flat_multiset<Key, Compare, KeyContainer>::size_type
      erase_if(flat_multiset<Key, Compare, KeyContainer>& c, Predicate pred);
}
[codeblock:end]
