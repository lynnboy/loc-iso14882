[section#mdspan.syn
    [:en] Header [`<mdspan>] synopsis
    [:zh_CN] 头文件 [`<mdspan>] 纲要
]

[%@hdr@def mdspan]
[codeblock:synopsis]
namespace std {
  // [:en] [#mdspan.extents], class template [`extents] \
  [:zh_CN] [#mdspan.extents]，类模板 [`extents]
  template<class IndexType, size_t... Extents>
    class extents;

  // [:en] [#mdspan.extents.dextents], alias template [`dextents] \
  [:zh_CN] [#mdspan.extents.dextents]，别名模板 [`dextents]
  template<class IndexType, size_t Rank>
    using dextents = [[redoc("[=seebelow]")]];

  // [:en] [#mdspan.layout], layout mapping \
  [:zh_CN] [#mdspan.layout]，布局映射
  struct layout_left;
  struct layout_right;
  struct layout_stride;

  // [:en] [#mdspan.accessor.default], class template [`default_accessor] \
  [:zh_CN] [#mdspan.accessor.default]，类模板 [`default_accessor]
  template<class ElementType>
    class default_accessor;

  // [:en] [#mdspan.mdspan], class template [`mdspan] \
  [:zh_CN] [#mdspan.mdspan]，类模板 [`mdspan]
  template<class ElementType, class Extents, class LayoutPolicy = layout_right,
           class AccessorPolicy = default_accessor<ElementType>>
    class mdspan;

  // [:en] [#mdspan.submdspan], [`submdspan] creation \
  [:zh_CN] [#mdspan.submdspan]，[`submdspan] 的创建
  template<class OffsetType, class LengthType, class StrideType>
    struct strided_slice;

  template<class LayoutMapping>
    struct submdspan_mapping_result;

  template<class IndexType, class... Extents, class... SliceSpecifiers>
    constexpr auto submdspan_extents(const extents<IndexType, Extents...>&, SliceSpecifiers...);

  // [:en] [#mdspan.submdspan.submdspan], [`submdspan] function template \
  [:zh_CN] [#mdspan.submdspan.submdspan]，[`submdspan] 函数模板
  template<class ElementType, class Extents, class LayoutPolicy,
           class AccessorPolicy, class... SliceSpecifiers>
    constexpr auto submdspan(
      const mdspan<ElementType, Extents, LayoutPolicy, AccessorPolicy>& src,
      SliceSpecifiers... slices) -> [[redoc("[=seebelow]")]];

  template<class T>
    concept [[redoc("*:c@def>")]]integral-constant-like =        // [=expos]
      is_integral_v<decltype(T::value)> &&
      !is_same_v<bool, remove_const_t<decltype(T::value)>> &&
      [[redoc("`:c>")]]convertible_to<T, decltype(T::value)> &&
      [[redoc("`:c>")]]equality_comparable_with<T, decltype(T::value)> &&
      bool_constant<T() == T::value>::value &&
      bool_constant<static_cast<decltype(T::value)>(T()) == T::value>::value;

  template<class T, class IndexType>
    concept [[redoc("*:c@def>")]]index-pair-like =               // [=expos]
      [[redoc("*:c>")]]pair-like<T> &&
      [[redoc("`:c>")]]convertible_to<tuple_element_t<0, T>, IndexType> &&
      [[redoc("`:c>")]]convertible_to<tuple_element_t<1, T>, IndexType>;
}
[codeblock:end]
