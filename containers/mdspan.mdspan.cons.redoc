[section#mdspan.mdspan.cons
    [:en] Constructors
    [:zh_CN] 构造函数
]

[%@lib@ctor mdspan]
[codeblock:declaration]
constexpr mdspan();
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en] [`rank_dynamic() > 0] is [`true].
[:zh_CN] [`rank_dynamic() > 0] 为 [`true]。
[item]
[:en] [`is_default_constructible_v<data_handle_type>] is [`true].
[:zh_CN] [`is_default_constructible_v<data_handle_type>] 为 [`true]。
[item]
[:en] [`is_default_constructible_v<mapping_type>] is [`true].
[:zh_CN] [`is_default_constructible_v<mapping_type>] 为 [`true]。
[item]
[:en] [`is_default_constructible_v<accessor_type>] is [`true].
[:zh_CN] [`is_default_constructible_v<accessor_type>] 为 [`true]。
[list:end]

[para:expects]
[:en] [$`[0, [`[*map_].required_span_size()])] is an accessible range of [*ptr_]
and [*acc_] for the values of [*map_] and [*acc_] after the invocation of this
constructor.
[:zh_CN] 对于本构造函数的调用之后的 [*map_] 和 [*acc_] 的值，
[$`[0, [`[*map_].required_span_size()])] 是 [*ptr_] 和 [*acc_] 的可访问范围。

[para:effects]
[:en] Value-initializes [*ptr_], [*map_], and [*acc_].
[:zh_CN] 值初始化 [*ptr_]，[*map_]，和 [*acc_]。
[div:end]

[%@lib@ctor mdspan]
[codeblock:declaration]
template<class... OtherIndexTypes>
  constexpr explicit mdspan(data_handle_type p, OtherIndexTypes... exts);
[codeblock:end]

[div:description]
[para]
[:en] Let [`N] be [`sizeof...(OtherIndexTypes)].
[:zh_CN] 令 [`N] 为 [`sizeof...(OtherIndexTypes)]。

[para:constraints]
[list]
[item]
[:en] [`(is_convertible_v<OtherIndexTypes, index_type> && ...)] is [`true],
[:zh_CN] [`(is_convertible_v<OtherIndexTypes, index_type> && ...)] 为 [`true]，
[item]
[:en] [`(is_nothrow_constructible<index_type, OtherIndexTypes> && ...)] is
[`true],
[:zh_CN] [`(is_nothrow_constructible<index_type, OtherIndexTypes> && ...)] 为
[`true]，
[item]
[:en] [`N == rank() || N == rank_dynamic()] is [`true],
[:zh_CN] [`N == rank() || N == rank_dynamic()] 为 [`true]，
[item]
[:en] [`is_constructible_v<mapping_type, extents_type>] is [`true], and
[:zh_CN] [`is_constructible_v<mapping_type, extents_type>] 为 [`true]，并且
[item]
[:en] [`is_default_constructible_v<accessor_type>] is [`true].
[:zh_CN] [`is_default_constructible_v<accessor_type>] 为 [`true]。
[list:end]

[para:expects]
[:en] [$`[0, [`[*map_].required_span_size()])] is an accessible range of [`p]
and [*acc_] for the values of [*map_] and [*acc_] after the invocation of this
constructor.
[:zh_CN] 对于本构造函数的调用之后的 [*map_] 和 [*acc_] 的值，
[$`[0, [`[*map_].required_span_size()])] 是 [`p] 和 [*acc_] 的可访问范围。

[para:effects]
[list]
[item]
[:en] Direct-non-list-initializes [*ptr_] with [`std::move(p)],
[:zh_CN] 以 [`std::move(p)] 直接非列表初始化 [*ptr_]，
[item]
[:en] direct-non-list-initializes [*map_] with
[`extents_type(static_cast<index_type>(std::move(exts))...)], and
[:zh_CN] 以 [`extents_type(static_cast<index_type>(std::move(exts))...)]
直接非列表初始化 [*map_]，并且
[item]
[:en] value-initializes [*acc_].
[:zh_CN] 值初始化 [*acc_]。
[list:end]
[div:end]

[%@lib@ctor mdspan]
[codeblock:declaration]
template<class OtherIndexType, size_t N>
  constexpr explicit(N != rank_dynamic())
    mdspan(data_handle_type p, span<OtherIndexType, N> exts);
template<class OtherIndexType, size_t N>
  constexpr explicit(N != rank_dynamic())
    mdspan(data_handle_type p, const array<OtherIndexType, N>& exts);
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en] [`is_convertible_v<const OtherIndexType&, index_type>] is [`true],
[:zh_CN] [`is_convertible_v<const OtherIndexType&, index_type>] 为 [`true]，
[item]
[:en] [`is_nothrow_constructible_v<index_type, const OtherIndexType&>] is [`true],
[:zh_CN] [`is_nothrow_constructible_v<index_type, const OtherIndexType&>] 为
[`true]，
[item]
[:en] [`N == rank() || N == rank_dynamic()] is [`true],
[:zh_CN] [`N == rank() || N == rank_dynamic()] 为 [`true]，
[item]
[:en] [`is_constructible_v<mapping_type, extents_type>] is [`true], and
[:zh_CN] [`is_constructible_v<mapping_type, extents_type>] 为 [`true]，并且
[item]
[:en] [`is_default_constructible_v<accessor_type>] is [`true].
[:zh_CN] [`is_default_constructible_v<accessor_type>] 为 [`true]。
[list:end]

[para:expects]
[:en] [$`[0, [`[*map_].required_span_size()])] is an accessible range of [`p]
and [*acc_] for the values of [*map_] and [*acc_] after the invocation of this
constructor.
[:zh_CN] 对于本构造函数的调用之后的 [*map_] 和 [*acc_] 的值，
[$`[0, [`[*map_].required_span_size()])] 是 [`p] 和 [*acc_] 的可访问范围。

[para:effects]
[list]
[item]
[:en] Direct-non-list-initializes [*ptr_] with [`std::move(p)],
[:zh_CN] 以 [`std::move(p)] 直接非列表初始化 [*ptr_]，
[item]
[:en] direct-non-list-initializes [*map_] with [`extents_type(exts)], and
[:zh_CN] 以 [`extents_type(exts)] 直接非列表初始化 [*map_]，并且
[item]
[:en] value-initializes [*acc_].
[:zh_CN] 值初始化 [*acc_]。
[list:end]
[div:end]

[%@lib@ctor mdspan]
[codeblock:declaration]
constexpr mdspan(data_handle_type p, const extents_type& ext);
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en] [`is_constructible_v<mapping_type, const extents_type&>] is [`true], and
[:zh_CN] [`is_constructible_v<mapping_type, const extents_type&>] 为 [`true]，并且
[item]
[:en] [`is_default_constructible_v<accessor_type>] is [`true].
[:zh_CN] [`is_default_constructible_v<accessor_type>] 为 [`true]。
[list:end]

[para:expects]
[:en] [$`[0, [`[*map_].required_span_size()])] is an accessible range of [`p]
and [*acc_] for the values of [*map_] and [*acc_] after the invocation of this
constructor.
[:zh_CN] 对于本构造函数的调用之后的 [*map_] 和 [*acc_] 的值，
[$`[0, [`[*map_].required_span_size()])] 是 [`p] 和 [*acc_] 的可访问范围。

[para:effects]
[list]
[item]
[:en] Direct-non-list-initializes [*ptr_] with [`std::move(p)],
[:zh_CN] 以 [`std::move(p)] 直接非列表初始化 [*ptr_]，
[item]
[:en] direct-non-list-initializes [*map_] with [`exts], and
[:zh_CN] 以 [`exts] 直接非列表初始化 [*map_]，并且
[item]
[:en] value-initializes [*acc_].
[:zh_CN] 值初始化 [*acc_]。
[list:end]
[div:end]

[%@lib@ctor mdspan]
[codeblock:declaration]
constexpr mdspan(data_handle_type p, const mapping_type& m);
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`is_default_constructible_v<accessor_type>] is [`true].
[:zh_CN] [`is_default_constructible_v<accessor_type>] 为 [`true]。

[para:expects]
[:en] [$`[0, [`m.required_span_size()])] is an accessible range of [`p] and
[*acc_] for the value of [*acc_] after the invocation of this constructor.
[:zh_CN] 对于本构造函数的调用之后的 [*acc_] 的值，
[$`[0, [`m.required_span_size()])] 是 [`p] 和 [*acc_] 的可访问范围。

[para:effects]
[list]
[item]
[:en] Direct-non-list-initializes [*ptr_] with [`std::move(p)],
[:zh_CN] 以 [`std::move(p)] 直接非列表初始化 [*ptr_]，
[item]
[:en] direct-non-list-initializes [*map_] with [`m], and
[:zh_CN] 以 [`m] 直接非列表初始化 [*map_]，并且
[item]
[:en] value-initializes [*acc_].
[:zh_CN] 值初始化 [*acc_]。
[list:end]
[div:end]

[%@lib@ctor mdspan]
[codeblock:declaration]
constexpr mdspan(data_handle_type p, const mapping_type& m, const accessor_type& a);
[codeblock:end]

[div:description]
[para:expects]
[:en] [$`[0, [`m.required_span_size()])] is an accessible range of [`p] and [`a].
[:zh_CN] [$`[0, [`m.required_span_size()])] 是 [`p] 和 [`a] 的可访问范围。

[para:effects]
[list]
[item]
[:en] Direct-non-list-initializes [*ptr_] with [`std::move(p)],
[:zh_CN] 以 [`std::move(p)] 直接非列表初始化 [*ptr_]，
[item]
[:en] direct-non-list-initializes [*map_] with [`m], and
[:zh_CN] 以 [`m] 直接非列表初始化 [*map_]，并且
[item]
[:en] direct-non-list-initializes [*acc_] with [`a].
[:zh_CN] 以 [`a] 直接非列表初始化 [*acc_]。
[list:end]
[div:end]

[%@lib@ctor mdspan]
[codeblock:declaration]
template<class OtherElementType, class OtherExtents,
         class OtherLayoutPolicy, class OtherAccessor>
  constexpr explicit([[redoc("[=seebelow]")]])
    mdspan(const mdspan<OtherElementType, OtherExtents,
                        OtherLayoutPolicy, OtherAccessor>& other);
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en]
[`is_constructible_v<mapping_type, const OtherLayoutPolicy::template mapping<OtherExtents>&>]
is [`true], and
[:zh_CN]
[`is_constructible_v<mapping_type, const OtherLayoutPolicy::template mapping<OtherExtents>&>]
为 [`true]，并且
[item]
[:en] [`is_constructible_v<accessor_type, const OtherAccessor&>] is [`true].
[:zh_CN] [`is_constructible_v<accessor_type, const OtherAccessor&>] 为 [`true]。
[list:end]

[para:mandates]
[list]
[item]
[:en]
[`is_constructible_v<data_handle_type, const OtherAccessor::data_handle_type&>]
is [`true], and
[:zh_CN]
[`is_constructible_v<data_handle_type, const OtherAccessor::data_handle_type&>]
为 [`true]，并且
[item]
[:en] [`is_constructible_v<extents_type, OtherExtents>] is [`true].
[:zh_CN] [`is_constructible_v<extents_type, OtherExtents>] 为 [`true]。
[list:end]

[para:expects]
[list]
[item]
[:en] For each rank index [`r] of [`extents_type],
[`static_extent(r) == dynamic_extent || static_extent(r) == other.extent(r)]
is [`true].
[:zh_CN] 对于 [`extents_type] 的每个秩索引 [`r]，
[`static_extent(r) == dynamic_extent || static_extent(r) == other.extent(r)]
均为 [`true]。
[item]
[:en] [$`[0, [`[*map_].required_span_size()])] is an accessible range of [*ptr]
and [*acc_] for the values of [*ptr], [*map_] and [*acc_] after the invocation
of this constructor.
[:zh_CN] 对于本构造函数的调用之后的 [*ptr]，[*map_] 和 [*acc_] 的值，
[$`[0, [`[*map_].required_span_size()])] 是 [*ptr] 和 [*acc_] 的可访问范围。
[list:end]

[para:effects]
[list]
[item]
[:en] Direct-non-list-initializes [*ptr_] with [`other.[*ptr_]],
[:zh_CN] 以 [`other.[*ptr_]] 直接非列表初始化 [*ptr_]，
[item]
[:en] direct-non-list-initializes [*map_] with [`other.[*map_]], and
[:zh_CN] 以 [`other.[*map_]] 直接非列表初始化 [*map_]，并且
[item]
[:en] direct-non-list-initializes [*acc_] with [`other.[*acc_]].
[:zh_CN] 以 [`other.[*acc_]] 直接非列表初始化 [*acc_]。
[list:end]

[para:remarks]
[:en] The expression inside [`explicit] is equivalent to:
[:zh_CN] [`explicit] 中的表达式等价于：
[codeblock]
!is_convertible_v<const OtherLayoutPolicy::template mapping<OtherExtents>&, mapping_type>
|| !is_convertible_v<const OtherAccessor&, accessor_type>
[codeblock:end]
[div:end]
