[section#hive.capacity
    [:en] Capacity
    [:zh_CN] 容量
]

[%@lib@member capacity[!hive]]
[codeblock:declaration]
size_type capacity() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] The total number of elements that [`*this] can hold
without requiring allocation of more element blocks.
[:zh_CN] 不要求分配更多的元素块时 [`*this] 可以容纳的元素总数。

[para:complexity]
[:en] Constant.
[:zh_CN] 常量。
[div:end]

[%@lib@member reserve[!hive]]
[codeblock:declaration]
void reserve(size_type n);
[codeblock:end]

[div:description]
[para:effects]
[:en] If [`n <= capacity()] is [`true], there are no effects.
[:zh_CN] 如果 [`n <= capacity()] 为 [`true]，则无效果。

[:en] Otherwise increases [`capacity()] by allocating reserved blocks.
[:zh_CN] 否则，通过分配保留块来增加 [`capacity()]。

[para:ensures]
[:en] [`capacity() >= n] is [`true].
[:zh_CN] [`capacity() >= n] 为 [`true]。

[para:throws]
[:en] [`length_error] if [`n > max_size()],
as well as any exceptions thrown by the allocator.
[:zh_CN] 当 [`n > max_size()] 时抛出 [`length_error]，以及分配器抛出的任何异常。

[para:complexity]
[:en] It does not change the size of the sequence and
takes at most linear time in the number of reserved blocks allocated.
[:zh_CN] 它不会改变序列的大小，并且最多花费对于所分配的保留块数量为线性的时间。

[para:remarks]
[:en] All references, pointers, and iterators referring to elements in [`*this],
as well as the past-the-end iterator, remain valid.
[:zh_CN] 指代 [`*this] 中的元素的所有引用、指针和迭代器，以及尾后迭代器，仍然有效。
[div:end]

[%@lib@member shrink_to_fit[!hive]]
[codeblock:declaration]
void shrink_to_fit();
[codeblock:end]

[div:description]
[para:expects]
[:en] [`T] is [^:oc MoveInsertable] into [`hive].
[:zh_CN] [`T] 向 [`hive] 中 [^:oc MoveInsertable]。

[para:effects]
[:en] [`shrink_to_fit] is a non-binding request to reduce [`capacity()] to be
closer to [`size()].
[:zh_CN] [`shrink_to_fit] 是一个非约束性请求，用于将 [`capacity()] 减少到接近 [`size()]。

[begin:note]
[:en] The request is non-binding to allow latitude for implementation-specific
optimizations.
[:zh_CN] 该请求是非约束性的，以允许实现特定的优化。
[end:note]

[:en] It does not increase [`capacity()], but may reduce [`capacity()].
[:zh_CN] 它不会增加 [`capacity()]，但可能会减少 [`capacity()]。

[:en] It may reallocate elements.
[:zh_CN] 它可能会重新分配元素。

[:en] If [`capacity()] is already equal to [`size()], there are no effects.
[:zh_CN] 如果 [`capacity()] 已经等于 [`size()]，则无效果。

[:en] If an exception is thrown during allocation of a new element block,
[`capacity()] may be reduced and reallocation may occur.
[:zh_CN] 如果在分配新元素块时抛出异常，[`capacity()] 可能会减少并且可能会重新分配。

[:en] Otherwise if an exception is thrown, the effects are unspecified.
[:zh_CN] 否则，如果抛出异常，则其效果是未指明的。

[para:complexity]
[:en] If reallocation happens, linear in the size of the sequence.
[:zh_CN] 如果重新分配发生，与序列的大小成线性关系。

[para:remarks]
[:en] If reallocation happens, the order of the elements in [`*this] may change
and all references, pointers, and iterators referring to the elements in [`*this],
as well as the past-the-end iterator, are invalidated.
[:zh_CN] 如果发生了重新分配，那么 [`*this] 中元素的顺序可能会改变，并且指代 [`*this] 中
元素的所有引用、指针和迭代器，以及尾后迭代器，都会失效。
[div:end]

[%@lib@member trim_capacity[!hive]]
[codeblock:declaration]
void trim_capacity() noexcept;
void trim_capacity(size_type n) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] For the first overload, all reserved blocks are deallocated, and
[`capacity()] is reduced accordingly.
[:zh_CN] 对于第一个重载，所有保留块都被回收，并且相应地减少 [`capacity()]。

[:en] For the second overload, [`capacity()] is reduced to no less than [`n].
[:zh_CN] 对于第二个重载，[`capacity()] 被减少到不小于 [`n]。

[para:complexity]
[:en] Linear in the number of reserved blocks deallocated.
[:zh_CN] 与回收的保留块数量上成线性。

[para:remarks]
[:en] All references, pointers, and iterators referring to elements in [`*this],
as well as the past-the-end iterator, remain valid.
[:zh_CN] 指代 [`*this] 中的元素的所有引用、指针和迭代器，以及尾后迭代器，仍然有效。
[div:end]

[%@lib@member block_capacity_limits[!hive]]
[codeblock:declaration]
constexpr hive_limits block_capacity_limits() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [*current-limits].
[:zh_CN] [*current-limits]。

[para:complexity]
[:en] Constant.
[:zh_CN] 常量。
[div:end]

[%@lib@member block_capacity_default_limits[!hive]]
[codeblock:declaration]
static constexpr hive_limits block_capacity_default_limits() noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] A [`hive_limits] struct with the [`min] and [`max] members set to
the implementation[=']s default limits.
[:zh_CN] 一个 [`hive_limits] 结构体，其中 [`min] 和 [`max] 成员设置为实现的默认限制。

[para:complexity]
[:en] Constant.
[:zh_CN] 常量。
[div:end]

[%@lib@member block_capacity_hard_limits[!hive]]
[codeblock:declaration]
static constexpr hive_limits block_capacity_hard_limits() noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] A [`hive_limits] struct with the [`min] and [`max] members set to
the implementation[=']s hard limits.
[:zh_CN] 一个 [`hive_limits] 结构体，其中 [`min] 和 [`max] 成员设置为实现的硬性限制。

[para:complexity]
[:en] Constant.
[:zh_CN] 常量。
[div:end]

[%@lib@member reshape[!hive]]
[codeblock:declaration]
void reshape(hive_limits block_limits);
[codeblock:end]

[div:description]
[para:expects]
[:en] [`T] is [^:oc MoveInsertable] into [`hive].
[:zh_CN] [`T] 向 [`hive] 中 [^:oc MoveInsertable]。

[para:effects]
[:en] For any active blocks not within the bounds of [`block_limits],
the elements within those active blocks are reallocated
to new or existing element blocks which are within the bounds.
[:zh_CN] 对于不在 [`block_limits] 界限内的任何活动块，这些活动块中的元素被重新分配到
处于界限内的新的或现存元素块中。

[:en] Any element blocks not within the bounds of [`block_limits] are deallocated.
[:zh_CN] 不在 [`block_limits] 界限内的任何元素块都被回收。

[:en] If an exception is thrown during allocation of a new element block,
[`capacity()] may be reduced, reallocation may occur, and [*current-limits]
may be assigned a value other than [`block_limits].
[:zh_CN] 如果在分配新元素块时抛出了异常，那么 [`capacity()] 可能会减少，可能会发生重新分配，
并且 [*current-limits] 可能被赋值为 [`block_limits] 之外的值。

[:en] Otherwise [`block_limits] is assigned to [*current-limits].
[:zh_CN] 否则 [`block_limits] 被赋值给 [*current-limits]。

[:en] If any other exception is thrown the effects are unspecified.
[:zh_CN] 如果抛出了任何其他异常，则其效果是未指明的。

[para:ensures]
[:en] [`size()] is unchanged.
[:zh_CN] [`size()] 不变。

[para:complexity]
[:en] Linear in the number of element blocks in [`*this].
[:zh_CN] 与 [`*this] 中元素块的数量成线性关系。

[:en] If reallocation happens, also linear in the number of elements reallocated.
[:zh_CN] 若发生了重新分配，则也与重新分配的元素数量成线性。

[para:remarks]
[:en] This operation may change [`capacity()].
[:zh_CN] 此操作可能会改变 [`capacity()]。

[:en] If reallocation happens, the order of the elements in [`*this] may change.
[:zh_CN] 如果发生了重新分配，那么 [`*this] 中元素的顺序可能会改变。

[:en] Reallocation invalidates all references, pointers, and iterators
referring to the elements in [`*this], as well as the past-the-end iterator.
[:zh_CN] 重新分配会使指代 [`*this] 中元素的所有引用、指针和迭代器，以及尾后迭代器失效。

[begin:note]
[:en] If no reallocation happens, they remain valid.
[:zh_CN] 如果没有发生重新分配，则它们仍然有效。
[end:note]
[div:end]
