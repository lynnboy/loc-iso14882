[section#forward.list.overview
    [:en] Overview
    [:zh_CN] 概要
]

[para]
[:en] A [`forward_list] is a container that supports forward iterators and
allows constant time insert and erase operations anywhere within the sequence,
with storage management handled automatically.
[:zh_CN] [`forward_list] 是一种容器，支持前向迭代器，并允许在序列中的任何位置
进行常量时间的插入和清除操作，并且具有被自动处理的存储管理。

[:en] Fast random access to list elements is not supported.
[:zh_CN] 不支持对列表元素进行快速的随机访问。

[begin:note]
[:en] It is intended that [`forward_list] have zero space or time overhead
relative to a hand-written C-style singly linked list.
[:zh_CN] 其意图是使 [`forward_list] 相对于手写的 C 风格的单链表的空间和时间开销为零。

[:en] Features that would conflict with that goal have been omitted.
[:zh_CN] 可能会与这个目标向矛盾的功能特性都已被忽略。
[end:note]

[para]
[:en] A [`forward_list] meets all of the requirements of a container
([#container.reqmts]), except that the [`size()] member function is not provided
and [`operator==] has linear complexity.
[:zh_CN] [`forward_list] 满足容器的所有规定（[#container.reqmts]），但未提供
[`size()] 成员函数，且其 [`operator==] 具有线性复杂度。

[:en] A [`forward_list] also meets all of the requirements for an
allocator-aware container ([#container.alloc.reqmts]).
[:zh_CN] [`forward_list] 也满足分配器感知容器的所有规定（[#container.alloc.reqmts]）。

[:en] In addition, a [`forward_list] provides the [`assign] member functions and
several of the optional sequence container requirements ([#sequence.reqmts]).
[:zh_CN] 此外，[`forward_list] 提供 [`assign] 成员函数，以及几种可选的容器规定（[#sequence.reqmts]）。

[:en] Descriptions are provided here only for operations on [`forward_list] that
are not described in that table or for operations where there is additional
semantic information.
[:zh_CN] 此处给出的说明仅包括未被这个表格所描述的 [`forward_list] 的操作，以及
具有额外的语义信息的操作。

[para]
[begin:note]
[:en] Modifying any list requires access to the element preceding the first
element of interest, but in a [`forward_list] there is no constant-time way to
access a preceding element.
[:zh_CN] 对列表的任何改动，都需要访问处于感兴趣的原始之前的元素，但在
[`forward_list] 中不存在耗费常量时间的访问前一个元素的方式。

[:en] For this reason, [`erase_after] and [`splice_after] take fully-open ranges,
not semi-open ranges.
[:zh_CN] 由于这个原因，[`erase_after] 和 [`splice_after] 接受全开范围而不是半开范围。
[end:note]

[para]
[:en] The types [`iterator] and [`const_iterator] meet the constexpr iterator
requirements ([#iterator.requirements.general]).
[:zh_CN] 类型 [`iterator] 和 [`const_iterator] 满足 constexpr 迭代器的规定
（[#iterator.requirements.general]）。

[codeblock:synopsis]
namespace std {
  template<class T, class Allocator = allocator<T>>
  class forward_list {
  public:
    // [:en] types \
    [:zh_CN] 类型
    using value_type      = T;
    using allocator_type  = Allocator;
    using pointer         = typename allocator_traits<Allocator>::pointer;
    using const_pointer   = typename allocator_traits<Allocator>::const_pointer;
    using reference       = value_type&;
    using const_reference = const value_type&;
    using size_type       = [[redoc("[?impdefx [:en] type of [`forward_list::size_type]"
        "[:zh_CN] [`forward_list::size_type] 的类型]")]]; // [:en] see [#container.requirements] [:zh_CN] 参见 [#container.requirements]
    using difference_type = [[redoc("[?impdefx [:en] type of [`forward_list::difference_type]"
        "[:zh_CN] [`forward_list::difference_type] 的类型]")]]; // [:en] see [#container.requirements] [:zh_CN] 参见 [#container.requirements]
    using iterator        = [[redoc("[?impdefx [:en] type of [`forward_list::iterator]"
        "[:zh_CN] [`forward_list::iterator] 的类型]")]]; // [:en] see [#container.requirements] [:zh_CN] 参见 [#container.requirements]
    using const_iterator  = [[redoc("[?impdefx [:en] type of [`forward_list::const_iterator]"
        "[:zh_CN] [`forward_list::const_iterator] 的类型]")]]; // [:en] see [#container.requirements] [:zh_CN] 参见 [#container.requirements]

    // [:en] [#forward.list.cons], construct/copy/destroy \
    [:zh_CN] [#forward.list.cons]，构造/复制/销毁
    constexpr forward_list() : forward_list(Allocator()) { }
    constexpr explicit forward_list(const Allocator&);
    constexpr explicit forward_list(size_type n, const Allocator& = Allocator());
    constexpr forward_list(size_type n, const T& value, const Allocator& = Allocator());
    template<class InputIterator>
      constexpr forward_list(InputIterator first, InputIterator last,
                             const Allocator& = Allocator());
    template<[[redoc("*:c>")]]container-compatible-range<T> R>
      constexpr forward_list(from_range_t, R&& rg, const Allocator& = Allocator());
    constexpr forward_list(const forward_list& x);
    constexpr forward_list(forward_list&& x);
    constexpr forward_list(const forward_list& x, const type_identity_t<Allocator>&);
    constexpr forward_list(forward_list&& x, const type_identity_t<Allocator>&);
    constexpr forward_list(initializer_list<T>, const Allocator& = Allocator());
    constexpr ~forward_list();
    constexpr forward_list& operator=(const forward_list& x);
    constexpr forward_list& operator=(forward_list&& x)
      noexcept(allocator_traits<Allocator>::is_always_equal::value);
    constexpr forward_list& operator=(initializer_list<T>);
    template<class InputIterator>
      constexpr void assign(InputIterator first, InputIterator last);
    template<[[redoc("*:c>")]]container-compatible-range<T> R>
      constexpr void assign_range(R&& rg);
    constexpr void assign(size_type n, const T& t);
    constexpr void assign(initializer_list<T>);
    constexpr allocator_type get_allocator() const noexcept;

    // [:en] [#forward.list.iter], iterators \
    [:zh_CN] [#forward.list.iter]，迭代器
    constexpr iterator before_begin() noexcept;
    constexpr const_iterator before_begin() const noexcept;
    constexpr iterator begin() noexcept;
    constexpr const_iterator begin() const noexcept;
    constexpr iterator end() noexcept;
    constexpr const_iterator end() const noexcept;

    constexpr const_iterator cbegin() const noexcept;
    constexpr const_iterator cbefore_begin() const noexcept;
    constexpr const_iterator cend() const noexcept;

    // [:en] capacity \
    [:zh_CN] 容量
    constexpr bool empty() const noexcept;
    constexpr size_type max_size() const noexcept;

    // [:en] [#forward.list.access], element access \
    [:zh_CN] [#forward.list.access]，元素访问
    constexpr reference front();
    constexpr const_reference front() const;

    // [:en] [#forward.list.modifiers], modifiers \
    [:zh_CN] [#forward.list.modifiers]，改动函数
    template<class... Args> constexpr reference emplace_front(Args&&... args);
    constexpr void push_front(const T& x);
    constexpr void push_front(T&& x);
    template<[[redoc("*:c>")]]container-compatible-range<T> R>
      constexpr void prepend_range(R&& rg);
    constexpr void pop_front();

    template<class... Args>
      constexpr iterator emplace_after(const_iterator position, Args&&... args);
    constexpr iterator insert_after(const_iterator position, const T& x);
    constexpr iterator insert_after(const_iterator position, T&& x);

    constexpr iterator insert_after(const_iterator position, size_type n, const T& x);
    template<class InputIterator>
      constexpr iterator insert_after(const_iterator position,
                                      InputIterator first, InputIterator last);
    constexpr iterator insert_after(const_iterator position, initializer_list<T> il);
    template<[[redoc("*:c>")]]container-compatible-range<T> R>
      constexpr iterator insert_range_after(const_iterator position, R&& rg);

    constexpr iterator erase_after(const_iterator position);
    constexpr iterator erase_after(const_iterator position, const_iterator last);
    constexpr void swap(forward_list&)
      noexcept(allocator_traits<Allocator>::is_always_equal::value);

    constexpr void resize(size_type sz);
    constexpr void resize(size_type sz, const value_type& c);
    constexpr void clear() noexcept;

    // [:en] [#forward.list.ops], [`forward_list] operations \
    [:zh_CN] [#forward.list.ops]，[`forward_list] 的操作
    constexpr void splice_after(const_iterator position, forward_list& x);
    constexpr void splice_after(const_iterator position, forward_list&& x);
    constexpr void splice_after(const_iterator position, forward_list& x, const_iterator i);
    constexpr void splice_after(const_iterator position, forward_list&& x, const_iterator i);
    constexpr void splice_after(const_iterator position, forward_list& x,
                                const_iterator first, const_iterator last);
    constexpr void splice_after(const_iterator position, forward_list&& x,
                                const_iterator first, const_iterator last);

    constexpr size_type remove(const T& value);
    template<class Predicate> constexpr size_type remove_if(Predicate pred);

    constexpr size_type unique();
    template<class BinaryPredicate> constexpr size_type unique(BinaryPredicate binary_pred);

    constexpr void merge(forward_list& x);
    constexpr void merge(forward_list&& x);
    template<class Compare> constexpr void merge(forward_list& x, Compare comp);
    template<class Compare> constexpr void merge(forward_list&& x, Compare comp);

    constexpr void sort();
    template<class Compare> constexpr void sort(Compare comp);

    constexpr void reverse() noexcept;
  };

  template<class InputIterator, class Allocator = allocator<[[redoc("^>")]]iter-value-type<InputIterator>>>
    forward_list(InputIterator, InputIterator, Allocator = Allocator())
      -> forward_list<[[redoc("^>")]]iter-value-type<InputIterator>, Allocator>;

  template<ranges::[[redoc("`:c>")]]input_range R, class Allocator = allocator<ranges::range_value_t<R>>>
    forward_list(from_range_t, R&&, Allocator = Allocator())
      -> forward_list<ranges::range_value_t<R>, Allocator>;
}
[codeblock:end]

[para]
[:en] An incomplete type [`T] may be used when instantiating [`forward_list] if
the allocator meets the allocator completeness requirements ([#allocator.requirements.completeness]).
[:zh_CN] 如果分配器能够满足分配器的完整性规定（[#allocator.requirements.completeness]），
则可以用不完整类型 [`T] 来实例化 [`forward_list]。

[:en] [`T] shall be complete before any member of the resulting specialization
of [`forward_list] is referenced.
[:zh_CN] 而在涉指所产生的 [`forward_list] 特例的任何成员之前，[`T] 应当完整。
