[section#span.syn
    [:en] Header [`<span>] synopsis
    [:zh_CN] 头文件 [`<span>] 纲要
]

[%@header span]

[codeblock:synopsis]
namespace std {
  // [:en] constants
  // [|:zh_CN] 常量
  inline constexpr ptrdiff_t dynamic_extent = -1;

  // [:en] [#views.span], class template span
  // [:zh_CN] [#views.span]，类模板 span
  template<class ElementType, ptrdiff_t Extent = dynamic_extent>
    class span;

  // [:en] [#span.comparison], comparison operators
  // [|:zh_CN] [#span.comparison]，比较运算符
  template<class T, ptrdiff_t X, class U, ptrdiff_t Y>
    constexpr bool operator==(span<T, X> l, span<U, Y> r);
  template<class T, ptrdiff_t X, class U, ptrdiff_t Y>
    constexpr bool operator!=(span<T, X> l, span<U, Y> r);
  template<class T, ptrdiff_t X, class U, ptrdiff_t Y>
    constexpr bool operator<(span<T, X> l, span<U, Y> r);
  template<class T, ptrdiff_t X, class U, ptrdiff_t Y>
    constexpr bool operator<=(span<T, X> l, span<U, Y> r);
  template<class T, ptrdiff_t X, class U, ptrdiff_t Y>
    constexpr bool operator>(span<T, X> l, span<U, Y> r);
  template<class T, ptrdiff_t X, class U, ptrdiff_t Y>
    constexpr bool operator>=(span<T, X> l, span<U, Y> r);

  // [:en] [#span.objectrep], views of object representation
  // [|:zh_CN] [#span.objectrep]，对象表示的视图
  template<class ElementType, ptrdiff_t Extent>
    span<const byte,
         Extent == dynamic_extent ? dynamic_extent
                                  : static_cast<ptrdiff_t>(sizeof(ElementType)) * Extent>
      as_bytes(span<ElementType, Extent> s) noexcept;

  template<class ElementType, ptrdiff_t Extent>
    span<byte,
         Extent == dynamic_extent ? dynamic_extent
                                  : static_cast<ptrdiff_t>(sizeof(ElementType)) * Extent>
      as_writable_bytes(span<ElementType, Extent> s) noexcept;
}
[codeblock:end]
