[section#span.syn
    [:en] Header [`<span>] synopsis
    [:zh_CN] 头文件 [`<span>] 纲要
]

[%@hdr@def span]

[codeblock:synopsis]
#include <initializer_list>     // [:en] see [#initializer.list.syn] [:zh_CN] 参见 [#initializer.list.syn]

// [=mostly freestanding]
namespace std {
  // [:en] constants [:zh_CN] 常量
  inline constexpr size_t [[redoc("`:lib>")]]dynamic_extent = numeric_limits<size_t>::max();

  template<class T>
    concept [[redoc("*:c@def>")]]integral-constant-like =                    // [=expos]
      is_integral_v<decltype(T::value)> &&
      !is_same_v<bool, remove_const_t<decltype(T::value)>> &&
      [[redoc("`:c>")]]convertible_to<T, decltype(T::value)> &&
      [[redoc("`:c>")]]equality_comparable_with<T, decltype(T::value)> &&
      bool_constant<T() == T::value>::value &&
      bool_constant<static_cast<decltype(T::value)>(T()) == T::value>::value;

  template<class T>
    constexpr size_t [[redoc("*:c@def>")]]maybe-static-ext = dynamic_extent; // [=expos]
  template<[[redoc("*:c>")]]integral-constant-like T>
    constexpr size_t [[redoc("*:c>")]]maybe-static-ext<T> = {T::value};

  // [:en] [#views.span], class template [`span] \
  [:zh_CN] [#views.span]，类模板 [`span]
  template<class ElementType, size_t Extent = dynamic_extent>
    class span;                                                             // [=partially freestanding]

  template<class ElementType, size_t Extent>
    constexpr bool ranges::[[redoc('%@lib@spec enable_view[!span]')]]enable_view<span<ElementType, Extent>> = true;
  template<class ElementType, size_t Extent>
    constexpr bool ranges::[[redoc('%@lib@spec enable_borrowed_range[!span]')]]enable_borrowed_range<span<ElementType, Extent>> = true;

  // [:en] [#span.objectrep], views of object representation \
  [:zh_CN] [#span.objectrep]，对象表示的视图
  template<class ElementType, size_t Extent>
    span<const byte, Extent == dynamic_extent ? dynamic_extent : sizeof(ElementType) * Extent>
      as_bytes(span<ElementType, Extent> s) noexcept;

  template<class ElementType, size_t Extent>
    span<byte, Extent == dynamic_extent ? dynamic_extent : sizeof(ElementType) * Extent>
      as_writable_bytes(span<ElementType, Extent> s) noexcept;
}
[codeblock:end]
