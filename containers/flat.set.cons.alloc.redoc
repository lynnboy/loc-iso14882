[section#flat.set.cons.alloc
    [:en] Constructors with allocators
    [:zh_CN] 带分配器的构造函数
]

[para]
[:en] The constructors in this subclause shall not participate in overload
resolution unless [`uses_allocator_v<container_type, Alloc>] is [`true].
[:zh_CN] 除非 [`uses_allocator_v<container_type, Alloc>] 为 [`true]，否则本子条款
中的构造函数都不应当参与重载决议。

[%@lib@ctor flat_set]
[codeblock:declaration]
template<class Alloc>
  flat_set(const container_type& cont, const Alloc& a);
template<class Alloc>
  flat_set(const container_type& cont, const key_compare& comp, const Alloc& a);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to [`flat_set(cont)] and [`flat_set(cont, comp)], respectively,
except that [*c] is constructed with uses-allocator construction
([#allocator.uses.construction]).
[:zh_CN] 分别等价于 [`flat_set(cont)] 和 [`flat_set(cont, comp)]，但 [*c] 进行
使用分配器的构造（[#allocator.uses.construction]）。

[para:complexity]
[:en] Same as [`flat_set(cont)] and [`flat_set(cont, comp)], respectively.
[:zh_CN] 分别与 [`flat_set(cont)] 和 [`flat_set(cont, comp)] 相同。
[div:end]

[%@lib@ctor flat_set]
[codeblock:declaration]
template<class Alloc>
  flat_set(sorted_unique_t s, const container_type& cont, const Alloc& a);
template<class Alloc>
  flat_set(sorted_unique_t s, const container_type& cont,
           const key_compare& comp, const Alloc& a);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to [`flat_set(s, cont)] and [`flat_set(s, cont, comp)],
respectively, except that [*c] is constructed with uses-allocator construction
([#allocator.uses.construction]).
[:zh_CN] 分别等价于 [`flat_set(s, cont)] 和 [`flat_set(s, cont, comp)]，但 [*c]
进行使用分配器的构造（[#allocator.uses.construction]）。

[para:complexity]
[:en] Linear.
[:zh_CN] 线性。
[div:end]

[%@lib@ctor flat_set]
[codeblock:declaration]
template<class Alloc>
  explicit flat_set(const Alloc& a);
template<class Alloc>
  flat_set(const key_compare& comp, const Alloc& a);
template<class Alloc>
  flat_set(const flat_set&, const Alloc& a);
template<class Alloc>
  flat_set(flat_set&&, const Alloc& a);
template<class InputIterator, class Alloc>
  flat_set(InputIterator first, InputIterator last, const Alloc& a);
template<class InputIterator, class Alloc>
  flat_set(InputIterator first, InputIterator last, const key_compare& comp, const Alloc& a);
template<class InputIterator, class Alloc>
  flat_set(sorted_unique_t, InputIterator first, InputIterator last, const Alloc& a);
template<class InputIterator, class Alloc>
  flat_set(sorted_unique_t, InputIterator first, InputIterator last,
           const key_compare& comp, const Alloc& a);
template<[[redoc("*:c>")]]container-compatible-range<value_type> R, class Alloc>
  flat_set(from_range_t, R&& rg, const Alloc& a);
template<[[redoc("*:c>")]]container-compatible-range<value_type> R, class Alloc>
  flat_set(from_range_t, R&& rg, const key_compare& comp, const Alloc& a);
template<class Alloc>
  flat_set(initializer_list<value_type> il, const Alloc& a);
template<class Alloc>
  flat_set(initializer_list<value_type> il, const key_compare& comp, const Alloc& a);
template<class Alloc>
  flat_set(sorted_unique_t, initializer_list<value_type> il, const Alloc& a);
template<class Alloc>
  flat_set(sorted_unique_t, initializer_list<value_type> il,
           const key_compare& comp, const Alloc& a);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to the corresponding non-allocator constructors, except that
[*c] is constructed with uses-allocator construction
([#allocator.uses.construction]).
[:zh_CN] 等价于对应的无分配器构造函数，但 [*c] 进行使用分配器的构造
（[#allocator.uses.construction]）。
[div:end]
