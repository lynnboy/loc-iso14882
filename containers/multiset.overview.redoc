[section#multiset.overview
    [:en] Overview
    [:zh_CN] 概要
]

[para]
[%@lib multiset]
[:en] A [`multiset] is an associative container that supports equivalent keys
(i.e., possibly contains multiple copies of the same key value) and provides for
fast retrieval of the keys themselves.
[:zh_CN] [`map] 是一种关联容器，支持等价键（即可能包含同一个键值的多个副本），并
提供对键自身的快速检索。

[:en] The [`multiset] class supports bidirectional iterators.
[:zh_CN] [`multiset] 类支持双向迭代器。

[para]
[:en] A [`multiset] meets all of the requirements of a container ([#container.reqmts]),
of a reversible container ([#container.rev.reqmts]), of an allocator-aware
container ([#container.alloc.reqmts]), and of an associative container ([#associative.reqmts]).
[:zh_CN] [`multiset] 满足容器（[#container.reqmts]），可反向容器（[#container.rev.reqmts]），
分配器感知容器（[#container.alloc.reqmts]），以及关联容器（[#associative.reqmts]）
的所有规定。

[:en] [`multiset] also provides most operations described in [#associative.reqmts]
for duplicate keys.
[:zh_CN] [`multiset] 还提供 [#associative.reqmts] 所描述的大多数等价键的操作。

[:en] This means that a [`multiset] supports the [`a_eq] operations in
[#associative.reqmts] but not the [`a_uniq] operations.
[:zh_CN] 这意味着 [`multiset] 支持 [#associative.reqmts] 中的 [`a_eq] 的操作，但
不支持 [`a_uniq] 的操作。

[:en] For a [`multiset<Key>] both the [`key_type] and [`value_type] are [`Key].
[:zh_CN] [`multiset<Key,T>] 的 [`key_type] 和 [`value_type] 均为 [`Key]。

[:en] Descriptions are provided here only for operations on [`multiset] that are
not described in one of these tables and for operations where there is
additional semantic information.
[:zh_CN] 此处给出的说明仅包括未被这些表格之一所描述的 [`multiset] 的操作，以及
具有额外的语义信息的操作。

[para]
[:en] The types [`iterator] and [`const_iterator] meet
the constexpr iterator requirements ([#iterator.requirements.general]).
[:zh_CN] 类型 [`iterator] 和 [`const_iterator] 满足
constexpr 迭代器的要求（[#iterator.requirements.general]）。

[codeblock:synopsis]
namespace std {
  template<class Key, class Compare = less<Key>,
           class Allocator = allocator<Key>>
  class multiset {
  public:
    // [:en] types \
    [:zh_CN] 类型
    using key_type               = Key;
    using key_compare            = Compare;
    using value_type             = Key;
    using value_compare          = Compare;
    using allocator_type         = Allocator;
    using pointer                = typename allocator_traits<Allocator>::pointer;
    using const_pointer          = typename allocator_traits<Allocator>::const_pointer;
    using reference              = value_type&;
    using const_reference        = const value_type&;
    using size_type              = [[redoc("[?impdefx [:en] type of [`multiset::size_type]"
        "[:zh_CN] [`multiset::size_type] 的类型]")]]; // [:en] see [#container.requirements] [:zh_CN] 参见 [#container.requirements]
    using difference_type        = [[redoc("[?impdefx [:en] type of [`multiset::difference_type]"
        "[:zh_CN] [`multiset::difference_type] 的类型]")]]; // [:en] see [#container.requirements] [:zh_CN] 参见 [#container.requirements]
    using iterator               = [[redoc("[?impdefx [:en] type of [`multiset::iterator]"
        "[:zh_CN] [`multiset::iterator] 的类型]")]]; // [:en] see [#container.requirements] [:zh_CN] 参见 [#container.requirements]
    using const_iterator         = [[redoc("[?impdefx [:en] type of [`multiset::const_iterator]"
        "[:zh_CN] [`multiset::const_iterator] 的类型]")]]; // [:en] see [#container.requirements] [:zh_CN] 参见 [#container.requirements]
    using reverse_iterator       = std::reverse_iterator<iterator>;
    using const_reverse_iterator = std::reverse_iterator<const_iterator>;
    using node_type              = [[redoc("[=unspec]")]];

    // [:en] [#multiset.cons], construct/copy/destroy \
    [:zh_CN] [#multiset.cons]，构造/复制/销毁
    constexpr multiset() : multiset(Compare()) { }
    constexpr explicit multiset(const Compare& comp, const Allocator& = Allocator());
    template<class InputIterator>
      constexpr multiset(InputIterator first, InputIterator last,
                         const Compare& comp = Compare(), const Allocator& = Allocator());
    template<[[redoc("*:c>")]]container-compatible-range<value_type> R>
      constexpr multiset(from_range_t, R&& rg,
                         const Compare& comp = Compare(), const Allocator& = Allocator());
    constexpr multiset(const multiset& x);
    constexpr multiset(multiset&& x);
    constexpr explicit multiset(const Allocator&);
    constexpr multiset(const multiset&, const type_identity_t<Allocator>&);
    constexpr multiset(multiset&&, const type_identity_t<Allocator>&);
    constexpr multiset(initializer_list<value_type>, const Compare& = Compare(),
                       const Allocator& = Allocator());
    template<class InputIterator>
      constexpr multiset(InputIterator first, InputIterator last, const Allocator& a)
        : multiset(first, last, Compare(), a) { }
    template<[[redoc("*:c>")]]container-compatible-range<value_type> R>
      constexpr multiset(from_range_t, R&& rg, const Allocator& a)
        : multiset(from_range, std::forward<R>(rg), Compare(), a) { }
    constexpr multiset(initializer_list<value_type> il, const Allocator& a)
      : multiset(il, Compare(), a) { }
    constexpr ~multiset();
    constexpr multiset& operator=(const multiset& x);
    constexpr multiset& operator=(multiset&& x)
      noexcept(allocator_traits<Allocator>::is_always_equal::value &&
               is_nothrow_move_assignable_v<Compare>);
    constexpr multiset& operator=(initializer_list<value_type>);
    constexpr allocator_type get_allocator() const noexcept;

    // [:en] iterators \
    [:zh_CN] 迭代器
    constexpr iterator               begin() noexcept;
    constexpr const_iterator         begin() const noexcept;
    constexpr iterator               end() noexcept;
    constexpr const_iterator         end() const noexcept;

    constexpr reverse_iterator       rbegin() noexcept;
    constexpr const_reverse_iterator rbegin() const noexcept;
    constexpr reverse_iterator       rend() noexcept;
    constexpr const_reverse_iterator rend() const noexcept;

    constexpr const_iterator         cbegin() const noexcept;
    constexpr const_iterator         cend() const noexcept;
    constexpr const_reverse_iterator crbegin() const noexcept;
    constexpr const_reverse_iterator crend() const noexcept;

    // [:en] capacity \
    [:zh_CN] 容量
    constexpr bool empty() const noexcept;
    constexpr size_type size() const noexcept;
    constexpr size_type max_size() const noexcept;

    // [:en] modifiers \
    [:zh_CN] 改动函数
    template<class... Args> constexpr iterator emplace(Args&&... args);
    template<class... Args>
      constexpr iterator emplace_hint(const_iterator position, Args&&... args);
    constexpr iterator insert(const value_type& x);
    constexpr iterator insert(value_type&& x);
    constexpr iterator insert(const_iterator position, const value_type& x);
    constexpr iterator insert(const_iterator position, value_type&& x);
    template<class InputIterator>
      constexpr void insert(InputIterator first, InputIterator last);
    template<[[redoc("*:c>")]]container-compatible-range<value_type> R>
      constexpr void insert_range(R&& rg);
    constexpr void insert(initializer_list<value_type>);

    constexpr node_type extract(const_iterator position);
    constexpr node_type extract(const key_type& x);
    template<class K> constexpr node_type extract(K&& x);
    constexpr iterator insert(node_type&& nh);
    constexpr iterator insert(const_iterator hint, node_type&& nh);

    constexpr iterator  erase(iterator position)
      requires (![[redoc("`:c>")]]same_as<iterator, const_iterator>);
    constexpr iterator  erase(const_iterator position);
    constexpr size_type erase(const key_type& x);
    template<class K> constexpr size_type erase(K&& x);
    constexpr iterator  erase(const_iterator first, const_iterator last);
    constexpr void      swap(multiset&)
      noexcept(allocator_traits<Allocator>::is_always_equal::value &&
               is_nothrow_swappable_v<Compare>);
    constexpr void      clear() noexcept;

    template<class C2>
      constexpr void merge(multiset<Key, C2, Allocator>& source);
    template<class C2>
      constexpr void merge(multiset<Key, C2, Allocator>&& source);
    template<class C2>
      constexpr void merge(set<Key, C2, Allocator>& source);
    template<class C2>
      constexpr void merge(set<Key, C2, Allocator>&& source);

    // [:en] observers \
    [:zh_CN] 探察函数
    constexpr key_compare key_comp() const;
    constexpr value_compare value_comp() const;

    // [:en] set operations \
    [:zh_CN] set 的操作
    constexpr iterator       find(const key_type& x);
    constexpr const_iterator find(const key_type& x) const;
    template<class K> constexpr iterator       find(const K& x);
    template<class K> constexpr const_iterator find(const K& x) const;

    constexpr size_type      count(const key_type& x) const;
    template<class K> constexpr size_type count(const K& x) const;

    constexpr bool           contains(const key_type& x) const;
    template<class K> constexpr bool contains(const K& x) const;

    constexpr iterator       lower_bound(const key_type& x);
    constexpr const_iterator lower_bound(const key_type& x) const;
    template<class K> constexpr iterator       lower_bound(const K& x);
    template<class K> constexpr const_iterator lower_bound(const K& x) const;

    constexpr iterator       upper_bound(const key_type& x);
    constexpr const_iterator upper_bound(const key_type& x) const;
    template<class K> constexpr iterator       upper_bound(const K& x);
    template<class K> constexpr const_iterator upper_bound(const K& x) const;

    constexpr pair<iterator, iterator>               equal_range(const key_type& x);
    constexpr pair<const_iterator, const_iterator>   equal_range(const key_type& x) const;
    template<class K>
      constexpr pair<iterator, iterator>             equal_range(const K& x);
    template<class K>
      constexpr pair<const_iterator, const_iterator> equal_range(const K& x) const;
  };

  template<class InputIterator,
           class Compare = less<[[redoc("^>")]]iter-value-type<InputIterator>>,
           class Allocator = allocator<[[redoc("^>")]]iter-value-type<InputIterator>>>
    multiset(InputIterator, InputIterator,
             Compare = Compare(), Allocator = Allocator())
      -> multiset<[[redoc("^>")]]iter-value-type<InputIterator>, Compare, Allocator>;

  template<ranges::[[redoc("`:c>")]]input_range R, class Compare = less<ranges::range_value_t<R>>,
           class Allocator = allocator<ranges::range_value_t<R>>>
    multiset(from_range_t, R&&, Compare = Compare(), Allocator = Allocator())
      -> multiset<ranges::range_value_t<R>, Compare, Allocator>;

  template<class Key, class Compare = less<Key>, class Allocator = allocator<Key>>
    multiset(initializer_list<Key>, Compare = Compare(), Allocator = Allocator())
      -> multiset<Key, Compare, Allocator>;

  template<class InputIterator, class Allocator>
    multiset(InputIterator, InputIterator, Allocator)
      -> multiset<[[redoc("^>")]]iter-value-type<InputIterator>,
                  less<[[redoc("^>")]]iter-value-type<InputIterator>>, Allocator>;

  template<ranges::[[redoc("`:c>")]]input_range R, class Allocator>
    multiset(from_range_t, R&&, Allocator)
      -> multiset<ranges::range_value_t<R>, less<ranges::range_value_t<R>>, Allocator>;

  template<class Key, class Allocator>
    multiset(initializer_list<Key>, Allocator) -> multiset<Key, less<Key>, Allocator>;
}
[codeblock:end]
[%@lib@member multiset[!operator==]]
[%@lib@member multiset[!operator<]]
