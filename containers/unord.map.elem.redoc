[section#unord.map.elem
    [:en] Element access
    [:zh_CN] 元素访问
]

[%@lib@member unordered_map[!operator`[`]]]
[%[:en] [`unordered_map][!element access]
  [:zh_CN] [`unordered_map][!元素访问] ]
[codeblock:declaration]
mapped_type& operator[](const key_type& k);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return try_emplace(k).first->second;]
[:zh_CN] 等价于：[`return try_emplace(k).first->second;]
[div:end]

[%@lib@member unordered_map[!operator`[`]]]
[%[:en] [`unordered_map][!element access]
  [:zh_CN] [`unordered_map][!元素访问] ]
[codeblock:declaration]
mapped_type& operator[](key_type&& k);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return try_emplace(std::move(k)).first->second;]
[:zh_CN] 等价于：[`return try_emplace(std::move(k)).first->second;]
[div:end]

[%@lib@member unordered_map[!operator`[`]]]
[%[:en] [`unordered_map][!element access]
  [:zh_CN] [`unordered_map][!元素访问] ]
[codeblock:declaration]
template<class K> mapped_type& operator[](K&& k);
[codeblock:end]

[div:description]
[para:constraints]
[:en] The [~qualified-id]s [`Hash::is_transparent] and [`Pred::is_transparent]
are valid and denotes types.
[:zh_CN] [~限定标识] [`Hash::is_transparent] 和 [`Pred::is_transparent] 均有效
且代表的是类型。

[para:effects]
[:en] Equivalent to: [`return try_emplace(std::forward<K>(k)).first->second;]
[:zh_CN] 等价于：[`return try_emplace(std::forward<K>(k)).first->second;]
[div:end]

[%@lib@member unordered_map[!at]]
[%[:en] [`unordered_map][!element access]
  [:zh_CN] [`unordered_map][!元素访问] ]
[codeblock:declaration]
mapped_type& at(const key_type& k);
const mapped_type& at(const key_type& k) const;
[codeblock:end]

[div:description]
[para:returns]
[:en] A reference to [`x.second], where [`x] is the (unique) element whose key
is equivalent to [`k].
[:zh_CN] 指代 [`x.second] 的引用，其中 [`x] 为其键与 [`k] 等价的（唯一）元素。

[para:throws]
[:en] An exception object of type [`out_of_range] if no such element is present.
[:zh_CN] 如果不存在这种元素则抛出 [`out_of_range] 类型的异常对象。
[div:end]

[%@lib@member unordered_map[!at]]
[%[:en] [`unordered_map][!element access]
  [:zh_CN] [`unordered_map][!元素访问] ]
[codeblock:declaration]
template<class K> mapped_type&       at(const K& k);
template<class K> const mapped_type& at(const K& k) const;
[codeblock:end]

[div:description]
[para:constraints]
[:en] The [~qualified-id]s [`Hash::is_transparent] and [`Pred::is_transparent]
are valid and denotes types.
[:zh_CN] [~限定标识] [`Hash::is_transparent] 和 [`Pred::is_transparent] 均有效
且代表的是类型。

[para:expects]
[:en] The expression [`find(k)] is well-formed and has well-defined behavior.
[:zh_CN] 表达式 [`find(k)] 良构并具有恰当定义的行为。

[para:returns]
[:en] A reference to [`find(k)->second].
[:zh_CN] 指代 [`find(k)->second] 的引用。

[para:throws]
[:en] An exception object of type [`out_of_range] if [`find(k) == end()] is
[`true].
[:zh_CN] 当 [`find(k) == end()] 为 [`true] 时抛出 [`out_of_range] 类型的异常对象。
[div:end]
