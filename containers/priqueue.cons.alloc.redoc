[section#priqueue.cons.alloc
    [:en] Constructors with allocators
    [:zh_CN] 接受分配器的构造函数
]

[para]
[:en] If [`uses_allocator_v<container_type, Alloc>] is [`false] the constructors
in this subclause shall not participate in overload resolution.
[:zh_CN] 当 [`uses_allocator_v<container_type, Alloc>] 为 [`false] 时，本子条款
中的构造函数不能参与重载决议。

[%@lib@ctor priority_queue]
[codeblock:declaration]
template<class Alloc> explicit priority_queue(const Alloc& a);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [`c] with [`a] and value-initializes [`comp].
[:zh_CN] 以 [`a] 初始化 [`c] 并对 [`comp] 值初始化。
[div:end]

[%@lib@ctor priority_queue]
[codeblock:declaration]
template<class Alloc> priority_queue(const Compare& compare, const Alloc& a);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [`c] with [`a] and initializes [`comp] with [`compare].
[:zh_CN] 以 [`a] 初始化 [`c] 并以 [`compare] 初始化 [`comp]。
[div:end]

[%@lib@ctor priority_queue]
[codeblock:declaration]
template<class Alloc>
  priority_queue(const Compare& compare, const Container& cont, const Alloc& a);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [`c] with [`cont] as the first argument and [`a] as the second
argument, and initializes [`comp] with [`compare]; calls
[`make_heap(c.begin(), c.end(), comp)].
[:zh_CN] 以 [`cont] 为第一个实参而 [`a] 为第二个实参初始化 [`c]，并以 [`compare]
初始化 [`comp]；调用 [`make_heap(c.begin(), c.end(), comp)]。
[div:end]

[%@lib@ctor priority_queue]
[codeblock:declaration]
template<class Alloc>
  priority_queue(const Compare& compare, Container&& cont, const Alloc& a);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [`c] with [`std::move(cont)] as the first argument and [`a]
as the second argument, and initializes [`comp] with [`compare]; calls
[`make_heap(c.begin(), c.end(), comp)].
[:zh_CN] 以 [`std::move(cont)] 为第一个实参而 [`a] 为第二个实参初始化 [`c]，并以
[`compare] 初始化 [`comp]；调用 [`make_heap(c.begin(), c.end(), comp)]。
[div:end]

[%@lib@ctor priority_queue]
[codeblock:declaration]
template<class Alloc> priority_queue(const priority_queue& q, const Alloc& a);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [`c] with [`q.c] as the first argument and [`a] as the second
argument, and initializes [`comp] with [`q.comp].
[:zh_CN] 以 [`q.c] 为第一个实参而 [`a] 为第二个实参初始化 [`c]，并以 [`q.comp]
初始化 [`comp]。
[div:end]

[%@lib@ctor priority_queue]
[codeblock:declaration]
template<class Alloc> priority_queue(priority_queue&& q, const Alloc& a);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [`c] with [`std::move(q.c)] as the first argument and [`a]
as the second argument, and initializes [`comp] with [`std::move(q.comp)].
[:zh_CN] 以 [`std::move(q.c)] 为第一个实参而 [`a] 为第二个实参初始化 [`c]，并以
[`std::move(q.comp)] 初始化 [`comp]。
[div:end]

[%@lib@ctor priority_queue]
[codeblock:declaration]
template<class InputIterator, class Alloc>
  priority_queue(InputIterator first, InputIterator last, const Alloc& a);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [`c] with [`first] as the first argument, [`last] as the
second argument, and [`a] as the third argument, and value-initializes [`comp];
calls [`make_heap(c.begin(), c.end(), comp)].
[:zh_CN] 以 [`first] 为第一个实参，[`last] 为第二个实参，[`a] 为第三个实参初始化
[`c]，并值初始化 [`comp]；调用 [`make_heap(c.begin(), c.end(), comp)]。
[div:end]

[%@lib@ctor priority_queue]
[codeblock:declaration]
template<class InputIterator, class Alloc>
  priority_queue(InputIterator first, InputIterator last, const Compare& compare, const Alloc& a);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [`c] with [`first] as the first argument, [`last] as the
second argument, and [`a] as the third argument, and initializes [`comp] with
[`compare]; calls [`make_heap(c.begin(), c.end(), comp)].
[:zh_CN] 以 [`first] 为第一个实参，[`last] 为第二个实参，[`a] 为第三个实参初始化
[`c]，并以 [`compare] 初始化 [`comp]；调用 [`make_heap(c.begin(), c.end(), comp)]。
[div:end]

[%@lib@ctor priority_queue]
[codeblock:declaration]
template<class InputIterator, class Alloc>
  priority_queue(InputIterator first, InputIterator last, const Compare& compare,
                 const Container& cont, const Alloc& a);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [`c] with [`cont] as the first argument and [`a] as the second
argument, and initializes [`comp] with [`compare]; calls
[`c.insert(c.end(), first, last)]; and finally calls
[`make_heap(c.begin(), c.end(), comp)].
[:zh_CN] 以 [`cont] 为第一个实参而 [`a] 为第二个实参初始化 [`c]，并以 [`compare]
初始化 [`comp]；调用 [`c.insert(c.end(), first, last)]；最后调用
[`make_heap(c.begin(), c.end(), comp)]。
[div:end]

[%@lib@ctor priority_queue]
[codeblock:declaration]
template<class InputIterator, class Alloc>
  priority_queue(InputIterator first, InputIterator last, const Compare& compare, Container&& cont,
                 const Alloc& a);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [`c] with [`std::move(cont)] as the first argument and [`a] as
the second argument, and initializes [`comp] with [`compare]; calls
[`c.insert(c.end(), first, last)]; and finally calls
[`make_heap(c.begin(), c.end(), comp)].
[:zh_CN] 以 [`std::move(cont)] 为第一个实参而 [`a] 为第二个实参初始化 [`c]，并以
[`compare] 初始化 [`comp]；调用 [`c.insert(c.end(), first, last)]；最后调用
[`make_heap(c.begin(), c.end(), comp)]。
[div:end]

[%@lib@ctor priority_queue]
[codeblock:declaration]
template<[[redoc("*:c>")]]container-compatible-range<T> R, class Alloc>
  priority_queue(from_range_t, R&& rg, const Compare& compare, const Alloc& a);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [`comp] with [`compare] and [`c] with
[`ranges::to<Container>(std::forward<R>(rg), a)]; calls
[`make_heap(c.begin(), c.end(), comp)].
[:zh_CN] 以 [`compare] 初始化 [`comp] 并以
[`ranges::to<Container>(std::forward<R>(rg), a)] 初始化 [`c]；调用
[`make_heap(c.begin(), c.end(), comp)]。
[div:end]

[%@lib@ctor priority_queue]
[codeblock:declaration]
template<[[redoc("*:c>")]]container-compatible-range<T> R, class Alloc>
  priority_queue(from_range_t, R&& rg, const Alloc& a);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [`c] with [`ranges::to<Container>(std::forward<R>(rg), a)];
calls [`make_heap(c.begin(), c.end(), comp)].
[:zh_CN] 以 [`ranges::to<Container>(std::forward<R>(rg), a)] 初始化 [`c]；调用
[`make_heap(c.begin(), c.end(), comp)]。
[div:end]