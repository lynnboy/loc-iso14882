[section#array.members
    [:en] Member functions
    [:zh_CN] 成员函数
]

[%@lib@member array[!size]]
[codeblock:declaration]
constexpr size_type size() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`N].
[:zh_CN] [`N]。
[div:end]

[%@lib@member array[!data]]
[codeblock:declaration]
constexpr T* data() noexcept;
constexpr const T* data() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] A pointer such that [=range(data(),data() + size())] is a valid range.
[:zh_CN] 一个指针，使得 [=range(data(),data() + size()] 为有效的范围。

[:en] For a non-empty array, [`data() == addressof(front())] is [`:key true].
[:zh_CN] 对于非空数组，有 [`data() == addressof(front())] 为 [`:key true]。
[div:end]

[%@lib@member array[!fill]]
[codeblock:declaration]
constexpr void fill(const T& u);
[codeblock:end]

[div:description]
[para:effects]
[:en] As if by [`fill_n(begin(), N, u)].
[:en] 如同执行 [`fill_n(begin(), N, u)]。
[div:end]

[%@lib@member array[!swap]]
[codeblock:declaration]
constexpr void swap(array& y) noexcept(is_nothrow_swappable_v<T>);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to [`swap_ranges(begin(), end(), y.begin())].
[:zh_CN] 等价于 [`swap_ranges(begin(), end(), y.begin())]。

[para]
[begin:note]
[:en] Unlike the [`swap] function for other containers, [`array::swap] takes
linear time, can exit via an exception, and does not cause iterators to become
associated with the other container.
[:zh_CN] 与其他容器的 [`swap] 函数不同，[`array::swap] 花费线性时间，可以以异常
退出，并且不会导致迭代器变为与另一个容器关联。
[end:note]
[div:end]
