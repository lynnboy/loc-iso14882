[section#container.reqmts
    [:en] Containers
    [:zh_CN] 容器
]

[<
@applyTo(['?indexcont'])
def indexcont(_1):
    return f'''[%@lib@raw [`{_1}][![:en]containers[:zh_CN]容器]]
    [%@lib@raw [`array][![`{_1}]]]
    [%@lib@raw [`deque][![`{_1}]]]
    [%@lib@raw [`forward_list][![`{_1}]]]
    [%@lib@raw [`list][![`{_1}]]]
    [%@lib@raw [`vector][![`{_1}]]]
    [%@lib@raw [`map][![`{_1}]]]
    [%@lib@raw [`set][![`{_1}]]]
    [%@lib@raw [`multiset][![`{_1}]]]
    [%@lib@raw [`multimap][![`{_1}]]]
    [%@lib@raw [`unordered_map][![`{_1}]]]
    [%@lib@raw [`unordered_set][![`{_1}]]]
    [%@lib@raw [`unordered_multiset][![`{_1}]]]
    [%@lib@raw [`unordered_multimap][![`{_1}]]]'''
>]

[para]
[:en] A type [`X] meets the [+container] requirements if the following types,
statements, and expressions are well-formed and have the specified semantics.
[:zh_CN] 如果下列各类型、语句和表达式均良构且具有规定的语义，则类型 [`X] 满足
[+容器]的规定。

[?indexcont value_type]
[codeblock:declaration]
typename X::value_type
[codeblock:end]

[div:description]
[para:result] [`T]

[para:expects]
[:en] [`T] is [^:oc Erasable] from [`X] (see [#container.alloc.reqmts], below).
[:zh_CN] [`T] 为从 [`X] 中 [^:oc Erasable]（参见 [#container.alloc.reqmts]，下文）。
[div:end]

[?indexcont reference]
[codeblock:declaration]
typename X::reference
[codeblock:end]

[div:description]
[para:result] [`T&]
[div:end]

[?indexcont const_reference]
[codeblock:declaration]
typename X::const_reference
[codeblock:end]

[div:description]
[para:result] [`const T&]
[div:end]

[?indexcont iterator]
[codeblock:declaration]
typename X::iterator
[codeblock:end]

[div:description]
[para:result]
[:en] A type that meets the forward iterator requirements ([#forward.iterators])
with value type [`T].
[:zh_CN] 满足前向迭代器规定（[#forward.iterators]）的类型，其值类型为 [`T]。

[:en] The type [`X::iterator] is convertible to [`X::const_iterator].
[:zh_CN] 类型 [`X::iterator] 可以转换为 [`X::const_iterator]。
[div:end]

[?indexcont const_iterator]
[codeblock:declaration]
typename X::const_iterator
[codeblock:end]

[div:description]
[para:result]
[:en] A type that meets the requirements of a constant iterator and those of a
forward iterator with value type [`T].
[:zh_CN] 满足常量迭代器和前向迭代器的规定的类型，其值类型为 [`T]。
[div:end]

[?indexcont difference_type]
[codeblock:declaration]
typename X::difference_type
[codeblock:end]

[div:description]
[para:result]
[:en] A signed integer type, identical to the difference type of [`X::iterator]
and [`X::const_iterator].
[:zh_CN] 有符号整数类型，与 [`X::iterator] 和 [`X::const_iterator] 的差异类型相同。
[div:end]

[?indexcont size_type]
[codeblock:declaration]
typename X::size_type
[codeblock:end]

[div:description]
[para:result]
[:en] An unsigned integer type that can represent any non-negative value of
[`X::difference_type].
[:zh_CN] 无符号整数类型，可以表示 [`X::difference_type] 的任何非负值。
[div:end]

[codeblock:declaration]
X u;
X u = X();
[codeblock:end]

[div:description]
[para:ensures] [`u.empty()]

[para:complexity]
[:en] Constant.
[:zh_CN] 常量。
[div:end]

[codeblock:declaration]
X u(a);
X u = a;
[codeblock:end]

[div:description]
[para:expects]
[:en] [`T] is [^:oc CopyInsertable] into [`X] (see below).
[:zh_CN] [`T] 为向 [`X] 中 [^:oc CopyInsertable]（见下文）。

[para:ensures] [`u == a]

[para:complexity]
[:en] Linear.
[:zh_CN] 线性。
[div:end]

[codeblock:declaration]
X u(rv);
X u = rv;
[codeblock:end]

[div:description]
[para:ensures]
[:en] [`u] is equal to the value that [`rv] had before this construction.
[:zh_CN] [`u] 等于 [`rv] 在这个构造之前的值。

[para:complexity]
[:en] Linear for [`array] and constant for all other standard containers.
[:zh_CN] 对于 [`array] 为线性，对于所有其他标准容器则为常量。
[div:end]

[codeblock:declaration]
a = rv
[codeblock:end]

[div:description]
[para:result]
[:en] [`X&].
[:zh_CN] [`X&]。

[para:effects]
[:en] All existing elements of [`a] are either move assigned to or destroyed.
[:zh_CN] [`a] 的所有已存在元素要么被移动赋值要么被销毁。

[para:ensures]
[:en] If [`a] and [`rv] do not refer to the same object, [`a] is equal to the
value that [`rv] had before this assignment.
[:zh_CN] 若 [`a] 和 [`rv] 并不指代相同对象，则 [`a] 等于 [`rv] 在这个赋值之前所
具有的值。

[para:complexity]
[:en] Linear.
[:zh_CN] 线性。
[div:end]

[codeblock:declaration]
a.~X()
[codeblock:end]

[div:description]
[para:result] [`:key void]

[para:effects]
[:en] Destroys every element of [`a]; any memory obtained is deallocated.
[:zh_CN] 销毁 [`a] 的每个元素；回收曾获得的所有内存。

[para:complexity]
[:en] Linear.
[:zh_CN] 线性。
[div:end]

[?indexcont begin]
[codeblock:declaration]
a.begin()
[codeblock:end]

[div:description]
[para:result]
[:en] [`iterator]; [`const_iterator] for constant [`a].
[:zh_CN] [`iterator]；对于常量 [`a] 为 [`const_iterator]。

[para:returns]
[:en] An iterator referring to the first element in the container.
[:zh_CN] 指代容器中第一个元素的迭代器。

[para:complexity]
[:en] Constant.
[:zh_CN] 常量。
[div:end]

[?indexcont end]
[codeblock:declaration]
a.end()
[codeblock:end]

[div:description]
[para:result]
[:en] [`iterator]; [`const_iterator] for constant [`a].
[:zh_CN] [`iterator]；对于常量 [`a] 为 [`const_iterator]。

[para:returns]
[:en] An iterator which is the past-the-end value for the container.
[:zh_CN] 具有容器的越过末尾值的迭代器。

[para:complexity]
[:en] Constant.
[:zh_CN] 常量。
[div:end]

[?indexcont cbegin]
[codeblock:declaration]
a.cbegin()
[codeblock:end]

[div:description]
[para:result]
[:en] [`const_iterator].
[:zh_CN] [`const_iterator]。

[para:returns]
[`const_cast<X const&>(a).begin();]

[para:complexity]
[:en] Constant.
[:zh_CN] 常量。
[div:end]

[?indexcont cend]
[codeblock:declaration]
a.cend()
[codeblock:end]

[div:description]
[para:result]
[:en] [`const_iterator].
[:zh_CN] [`const_iterator]。

[para:returns]
[`const_cast<X const&>(a).end();]

[para:complexity]
[:en] Constant.
[:zh_CN] 常量。
[div:end]

[codeblock:declaration]
i <=> j
[codeblock:end]

[div:description]
[para:result]
[:en] [`strong_ordering].
[:zh_CN] [`strong_ordering]。

[para:constraints]
[:en] [`X::iterator] meets the random access iterator requirements.
[:zh_CN] [`X::iterator] 满足随机访问迭代器的规定。

[para:complexity]
[:en] Constant.
[:zh_CN] 常量。
[div:end]

[?indexcont operator==]
[codeblock:declaration]
a == b
[codeblock:end]

[div:description]
[para:expects]
[:en] [`T] meets the [^:oc EqualityComparable] requirements.
[:zh_CN] [`T] 满足 [^:oc EqualityComparable] 的规定。

[para:result]
[:en] Convertible to [`bool].
[:zh_CN] 可以转换为 [`bool]。

[para:returns]
[`equal(a.begin(), a.end(), b.begin(), b.end())]

[begin:note]
[:en] The algorithm [`equal] is defined in [#alg.equal].
[:zh_CN] 算法 [`equal] 在 [#alg.equal] 中定义。
[end:note]

[para:complexity]
[:en] Constant if [`a.size() != b.size()], linear otherwise.
[:zh_CN] 如果 [`a.size() != b.size()] 则为常量，否则为线性。

[para:remarks]
[:en] [`==] is an equivalence relation.
[:zh_CN] [`==] 是一种等价关系。
[div:end]

[?indexcont operator!=]
[codeblock:declaration]
a != b
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to [`!(a == b)].
[:zh_CN] 等价于 [`!(a == b)]。
[div:end]

[?indexcont swap]
[codeblock:declaration]
a.swap(b)
[codeblock:end]

[div:description]
[para:result] [`:key void]

[para:effects]
[:en] Exchanges the contents of [`a] and [`b].
[:zh_CN] 互换 [`a] 和 [`b] 的内容。

[para:complexity]
[:en] Linear for [`array] and constant for all other standard containers.
[:zh_CN] 对于 [`array] 为线性，对于所有其他标准容器则为常量。
[div:end]

[codeblock:declaration]
swap(a, b)
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to [`a.swap(b)].
[:zh_CN] 等价于 [`a.swap(b)]。
[div:end]

[?indexcont operator=]
[codeblock:declaration]
r = a
[codeblock:end]

[div:description]
[para:result]
[:en] [`X&].
[:zh_CN] [`X&]。

[para:ensures]
[:en] [`r == a].
[:zh_CN] [`r == a]。

[para:complexity]
[:en] Linear.
[:zh_CN] 线性。
[div:end]

[?indexcont size]
[codeblock:declaration]
a.size()
[codeblock:end]

[div:description]
[para:result]
[:en] [`size_type].
[:zh_CN] [`size_type]。

[para:returns]
[:en] [`distance(a.begin(), a.end())], i.e. the number of elements in the
container.
[:zh_CN] [`distance(a.begin(), a.end())]，亦即容器中的元素数量。

[para:complexity]
[:en] Constant.
[:zh_CN] 常量。

[para:remarks]
[:en]
The number of elements is defined by the rules of constructors, inserts, and
erases.
[:zh_CN]
元素的数量是由构造函数、插入和清除的规则来定义的。
[div:end]

[?indexcont max_size]
[codeblock:declaration]
a.max_size()
[codeblock:end]

[div:description]
[para:result]
[:en] [`size_type].
[:zh_CN] [`size_type]。

[para:returns]
[:en] [`distance(begin(), end())] for the largest possible container.
[:zh_CN] 对于最大可能的容器的 [`distance(begin(), end())]。

[para:complexity]
[:en] Constant.
[:zh_CN] 常量。
[div:end]

[?indexcont empty]
[codeblock:declaration]
a.empty()
[codeblock:end]

[div:description]
[para:result]
[:en] Convertible to [`bool].
[:zh_CN] 可以转换为 [`bool]。

[para:returns]
[`a.begin() == a.end()]

[para:complexity]
[:en] Constant.
[:zh_CN] 常量。

[para:remarks]
[:en] If the container is empty, then [`a.empty()] is true.
[:zh_CN] 当容器为空时，[`a.empty()] 为真。
[div:end]

[para]
[:en]
In the expressions
[:zh_CN]
下列表达式

[codeblock]
i == j
i != j
i < j
i <= j
i >= j
i > j
i <=> j
i - j
[codeblock:end]

[:en@~]
where [`i] and [`j] denote objects of a container[=']s [`iterator] type, either
or both may be replaced by an object of the container[=']s [`const_iterator]
type referring to the same element with no change in semantics.
[:zh_CN@~]
其中 [`i] 和 [`j] 代表某容器的 [`iterator] 类型的对象，其中之一或二者可以替换为
该容器的指代相同元素的 [`const_iterator] 类型的对象而不会改变其语义。

[para]
[:en]
Unless otherwise specified, all containers defined in this Clause obtain memory
using an allocator (see [#allocator.requirements]).
[:zh_CN]
除非另有规定，本章中定义的所有容器均使用一个分配器来回的内存（参见
[#allocator.requirements]）。

[begin:note]
[:en]
In particular, containers and iterators do not store references to allocated
elements other than through the allocator[=']s pointer type, i.e., as objects of
type [`P] or [`pointer_traits<P>::template rebind<[=unspec]>], where [`P] is
[`allocator_traits<allocator_type>::pointer].
[:zh_CN]
尤其是，容器和迭代器中存储指代所分配的元素的引用，仅会以分配器的指针类型的形式
达成，亦即存储为 [`P] 或 [`pointer_traits<P>::template rebind<[=unspec]>] 类型的
对象，其中 [`P] 为 [`allocator_traits<allocator_type>::pointer]。
[end:note]

[:en]
Copy constructors for these container types obtain an allocator by calling
[`allocator_traits<allocator_type>::select_on_container_copy_construction] on
the allocator belonging to the container being copied.
[:zh_CN]
这些容器类型的复制构造函数，都通过对属于所要复制的容器的分配器调用
[`allocator_traits<allocator_type>::select_on_container_copy_construction] 来
获得分配器。

[:en]
Move constructors obtain an allocator by move construction from the allocator
belonging to the container being moved.
[:zh_CN]
移动构造函数通过从属于所要移动的容器的分配器进行移动构造而获得。

[:en]
Such move construction of the allocator shall not exit via an exception.
[:zh_CN]
这种对分配器进行的移动构造不能以异常而退出。

[:en]
All other constructors for these container types take a [`const allocator_type&]
argument.
[:zh_CN]
这些容器类型的所有其他构造函数均接受一个 [`const allocator_type&] 实参。

[begin:note]
[:en]
If an invocation of a constructor uses the default value of an optional
allocator argument, then the allocator type must support value initialization.
[:zh_CN]
如果某个构造函数的调用，使用了可选分配器实参的默认值，则其分配器类型必须支持
值初始化。
[end:note]

[:en]
A copy of this allocator is used for any memory allocation and element
construction performed, by these constructors and by all member functions,
during the lifetime of each container object or until the allocator is replaced.
[:zh_CN]
这个分配器的一个副本，被用于这些构造函数和所有其他成员函数，在各个容器对象的
生存期之内或其分配器被替换之前，进行任何内存分配和元素的构造。

[:en]
The allocator may be replaced only via assignment or [`swap()].
[:zh_CN]
分配器只能通过赋值或 [`swap()] 被替换。

[:en]
Allocator replacement is performed by copy assignment, move assignment, or
swapping of the allocator only if
[:zh_CN]
仅当
[list]
[item]
[:en@~]
[`allocator_traits<allocator_type>::propagate_on_container_copy_assignment::value],
[:zh_CN@~]
[`allocator_traits<allocator_type>::propagate_on_container_copy_assignment::value]，
[item]
[:en@~]
[`allocator_traits<allocator_type>::propagate_on_container_move_assignment::value],
or
[:zh_CN@~]
[`allocator_traits<allocator_type>::propagate_on_container_move_assignment::value]，
或
[item]
[:@~] [`allocator_traits<allocator_type>::propagate_on_container_swap::value]
[list:end]
[:en@~]
is [`true] within the implementation of the corresponding container operation.
[:zh_CN@~]
为 [`true] 时，才在对应的容器操作之内，通过分配器的复制赋值、移动赋值或者交换
操作对分配器进行替换。

[:en]
In all container types defined in this Clause, the member [`get_allocator()]
returns a copy of the allocator used to construct the container or, if that
allocator has been replaced, a copy of the most recent replacement.
[:zh_CN]
本章中所定义的所有容器类型中，成员 [`get_allocator()] 返回该容器构造时所用的分配
器的副本，或者若其分配器已经被替换，则为其最近所替换的副本。

[para]
[:en]
The expression [`a.swap(b)], for containers [`a] and [`b] of a standard
container type other than [`array], shall exchange the values of [`a] and [`b]
without invoking any move, copy, or swap operations on the individual container
elements.
[:zh_CN]
对于除 [`array] 之外的标准容器类型的容器 [`a] 和 [`b]，表达式 [`a.swap(b)] 应当
交换 [`a] 和 [`b] 的值，而不会对各个容器元素调用任何移动、复制或交换操作。

[:en]
Lvalues of any [`Compare], [`Pred], or [`Hash] types belonging to [`a] and [`b]
shall be swappable and shall be exchanged by calling [`swap] as described in
[#swappable.requirements].
[:zh_CN]
属于 [`a] 和 [`b] 的任何 [`Compare]、[`Pred] 或 [`Hash] 类型的左值也应当被交换，
且应当如 [#swappable.requirements] 所述通过调用 [`swap] 来交换。

[:en]
If [`allocator_traits<allocator_type>::propagate_on_container_swap::value] is
[`true], then lvalues of type [`allocator_type] shall be swappable and the
allocators of [`a] and [`b] shall also be exchanged by calling [`swap] as
described in [#swappable.requirements].
[:zh_CN]
如果 [`allocator_traits<allocator_type>::propagate_on_container_swap::value] 为
[`true]，则类型 [`allocator_type] 的左值应当可交换，且 [`a] 和 [`b] 的分配器也
应当如 [#swappable.requirements] 所述通过调用 [`swap] 来交换。

[:en]
Otherwise, the allocators shall not be swapped, and the behavior is undefined
unless [`a.get_allocator() == b.get_allocator()].
[:zh_CN]
否则，不能交换分配器，且除非 [`a.get_allocator() == b.get_allocator()]，否则
其行为是未定义的。

[:en]
Every iterator referring to an element in one container before the swap shall
refer to the same element in the other container after the swap.
[:zh_CN]
交换之前指向一个容器的元素的所有迭代器，在交换之后应当指向另一个容器中的相同元素。

[:en]
It is unspecified whether an iterator with value [`a.end()] before the swap will
have value [`b.end()] after the swap.
[:zh_CN]
交换之前具有值 [`a.end()] 的迭代器，在交换之后是否具有值 [`b.end()] 是未指明的。
