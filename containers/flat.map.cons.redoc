[section#flat.map.cons
    [:en] Constructors
    [:zh_CN] 构造函数
]

[%@lib@ctor flat_map]
[codeblock:declaration]
flat_map(key_container_type key_cont, mapped_container_type mapped_cont);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [`c.keys] with [`std::move(key_cont)] and [`c.values] with
[`std::move(mapped_cont)]; value-initializes [`compare]; sorts the range
[=range(begin(),end())] with respect to [`value_comp()]; and finally erases the
duplicate elements as if by:
[:zh_CN] 以 [`std::move(key_cont)] 初始化 [`c.keys] 并以 [`std::move(mapped_cont)]
初始化 [`c.values]；值初始化 [`compare]；根据 [`value_comp()] 对范围
[=range(begin(),end())] 进行排序；最后如同以下代码来擦除重复元素：

[codeblock]
auto zv = ranges::zip_view(c.keys, c.values);
auto it = ranges::unique(zv, key_equiv(compare)).begin();
auto dist = distance(zv.begin(), it);
c.keys.erase(c.keys.begin() + dist, c.keys.end());
c.values.erase(c.values.begin() + dist, c.values.end());
[codeblock:end]

[para:complexity]
[:en] Linear in [$N] if the container arguments are already sorted with respect
to [`value_comp()] and otherwise [$N \log N], where [$N] is the value of
[`key_cont.size()] before this call.
[:zh_CN] 如果各容器实参已经根据 [`value_comp()] 有序，则对于 [$N] 为线性，否则为
[$N \log N]，其中 [$N] 为本次调用之前 [`key_cont.size()] 的值。
[div:end]

[%@lib@ctor flat_map]
[codeblock:declaration]
template<class Allocator>
  flat_map(const key_container_type& key_cont, const mapped_container_type& mapped_cont,
           const Allocator& a);
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`uses_allocator_v<key_container_type, Allocator>] is [`true] and
[`uses_allocator_v<mapped_container_type, Allocator>] is [`true].
[:zh_CN] [`uses_allocator_v<key_container_type, Allocator>] 为 [`true] 并且
[`uses_allocator_v<mapped_container_type, Allocator>] 为 [`true]。

[para:effects]
[:en] Equivalent to [`flat_map(key_cont, mapped_cont)], except that [`c.keys]
and [`c.values] are constructed with uses-allocator construction
([#allocator.uses.construction]).
[:zh_CN] 等价于 [`flat_map(key_cont, mapped_cont)]，但 [`c.keys] 和 [`c.values]
进行使用分配器的构造（[#allocator.uses.construction]）。

[para:complexity]
[:en] Same as [`flat_map(key_cont, mapped_cont)].
[:zh_CN] 与 [`flat_map(key_cont, mapped_cont)] 相同。
[div:end]

[%@lib@ctor flat_map]
[codeblock:declaration]
flat_map(sorted_unique_t, key_container_type key_cont, mapped_container_type mapped_cont);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [`c.keys] with [`std::move(key_cont)] and [`c.values] with
[`std::move(mapped_cont)]; value-initializes [`compare].
[:zh_CN] 以 [`std::move(key_cont)] 初始化 [`c.keys] 并以 [`std::move(mapped_cont)]
初始化 [`c.values]；值初始化 [`compare]。

[para:complexity]
[:en] Constant.
[:zh_CN] 常量。
[div:end]

[%@lib@ctor flat_map]
[codeblock:declaration]
template<class Allocator>
  flat_map(sorted_unique_t s, const key_container_type& key_cont,
           const mapped_container_type& mapped_cont, const Allocator& a);
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`uses_allocator_v<key_container_type, Allocator>] is [`true] and
[`uses_allocator_v<mapped_container_type, Allocator>] is [`true].
[:zh_CN] [`uses_allocator_v<key_container_type, Allocator>] 为 [`true] 并且
[`uses_allocator_v<mapped_container_type, Allocator>] 为 [`true]。

[para:effects]
[:en] Equivalent to [`flat_map(s, key_cont, mapped_cont)], except that [`c.keys]
and [`c.values] are constructed with uses-allocator construction
([#allocator.uses.construction]).
[:zh_CN] 等价于 [`flat_map(s, key_cont, mapped_cont)]，但 [`c.keys] 和
[`c.values] 进行使用分配器的构造（[#allocator.uses.construction]）。

[para:complexity]
[:en] Linear.
[:zh_CN] 线性。
[div:end]

[%@lib@ctor flat_map]
[codeblock:declaration]
template<class Allocator>
  flat_map(const key_compare& comp, const Allocator& a);
template<class Allocator>
  explicit flat_map(const Allocator& a);
template<class InputIterator, class Allocator>
  flat_map(InputIterator first, InputIterator last, const key_compare& comp, const Allocator& a);
template<class InputIterator, class Allocator>
  flat_map(InputIterator first, InputIterator last, const Allocator& a);
template<[[redoc("*:c>")]]container-compatible-range<value_type> R, class Allocator>
  flat_map(from_range_t, R&& rg, const Allocator& a);
template<[[redoc("*:c>")]]container-compatible-range<value_type> R, class Allocator>
  flat_map(from_range_t, R&& rg, const key_compare& comp, const Allocator& a);
template<class InputIterator, class Allocator>
  flat_map(sorted_unique_t, InputIterator first, InputIterator last,
           const key_compare& comp, const Allocator& a);
template<class InputIterator, class Allocator>
  flat_map(sorted_unique_t, InputIterator first, InputIterator last, const Allocator& a);
template<class Allocator>
  flat_map(initializer_list<value_type> il, const key_compare& comp, const Allocator& a);
template<class Allocator>
  flat_map(initializer_list<value_type> il, const Allocator& a);
template<class Allocator>
  flat_map(sorted_unique_t, initializer_list<value_type> il,
           const key_compare& comp, const Allocator& a);
template<class Allocator>
  flat_map(sorted_unique_t, initializer_list<value_type> il, const Allocator& a);
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`uses_allocator_v<key_container_type, Allocator>] is [`true] and
[`uses_allocator_v<mapped_container_type, Allocator>] is [`true].
[:zh_CN] [`uses_allocator_v<key_container_type, Allocator>] 为 [`true] 并且
[`uses_allocator_v<mapped_container_type, Allocator>] 为 [`true]。

[para:effects]
[:en] Equivalent to the corresponding non-allocator constructors, except that
[`c.keys] and [`c.values] are constructed with uses-allocator construction
([#allocator.uses.construction]).
[:zh_CN] 等价于对应的无分配器构造函数，但 [`c.keys] 和 [`c.values] 进行
使用分配器的构造（[#allocator.uses.construction]）。
[div:end]
