[section#set.overview
    [:en] Overview
    [:zh_CN] 概要
]

[para]
[%@lib set]
[:en] A [`set] is an associative container that supports unique keys (contains
at most one of each key value) and provides for fast retrieval of the keys
themselves.
[:zh_CN] [`map] 是一种关联容器，支持唯一键（包含每个键值的最多一个元素），并提供
对键自身的快速检索。

[:en] The [`set] class supports bidirectional iterators.
[:zh_CN] [`set] 类支持双向迭代器。

[para]
[:en] A [`set] meets all of the requirements of a container ([#container.reqmts]),
of a reversible container ([#container.rev.reqmts]), of an allocator-aware
container ([#container.alloc.reqmts]), and of an associative container
([#associative.reqmts]).
[:zh_CN] [`set] 满足容器（[#container.reqmts]），可反向容器
（[#container.rev.reqmts]），分配器感知容器（[#container.alloc.reqmts]），以及
关联容器（[#associative.reqmts]）的所有规定。

[:en] A [`set] also provides most operations described in
[#associative.reqmts] for unique keys.
[:zh_CN] [`set] 还提供 [#associative.reqmts] 所描述的大多数唯一键的操作。

[:en] This means that a [`set] supports the [`a_uniq] operations in
[#associative.reqmts] but not the [`a_eq] operations.
[:zh_CN] 这意味着 [`set] 支持 [#associative.reqmts] 中的 [`a_uniq] 的操作，但不
支持 [`a_eq] 的操作。

[:en] For a [`set<Key>] both the [`key_type] and [`value_type] are [`Key].
[:zh_CN] [`set<Key>] 的 [`key_type] 和 [`value_type] 均为 [`Key]。

[:en] Descriptions are provided here only for operations on [`set] that are not
described in one of these tables and for operations where there is additional
semantic information.
[:zh_CN] 此处给出的说明仅包括未被这些表格之一所描述的 [`set] 的操作，以及具有
额外的语义信息的操作。

[codeblock:synopsis]
namespace std {
  template<class Key, class Compare = less<Key>,
           class Allocator = allocator<Key>>
  class set {
  public:
    // [:en] types \
    [:zh_CN] 类型
    using key_type               = Key;
    using key_compare            = Compare;
    using value_type             = Key;
    using value_compare          = Compare;
    using allocator_type         = Allocator;
    using pointer                = typename allocator_traits<Allocator>::pointer;
    using const_pointer          = typename allocator_traits<Allocator>::const_pointer;
    using reference              = value_type&;
    using const_reference        = const value_type&;
    using size_type              = [[redoc("[?impdefx"
          " [:en] type of [`set::size_type]"
        "[:zh_CN] [`set::size_type] 的类型]")]]; // [:en] See [#container.requirements] \
                                                 [:zh_CN] 参见 [#container.requirements]
    using difference_type        = [[redoc("[?impdefx"
          " [:en] type of [`set::difference_type]"
        "[:zh_CN] [`set::difference_type] 的类型]")]]; // [:en] See [#container.requirements] \
                                                       [:zh_CN] 参见 [#container.requirements]
    using iterator               = [[redoc("[?impdefx"
          " [:en] type of [`set::iterator]"
        "[:zh_CN] [`set::iterator] 的类型]")]]; // [:en] See [#container.requirements] \
                                                [:zh_CN] 参见 [#container.requirements]
    using const_iterator         = [[redoc("[?impdefx"
          " [:en] type of [`set::const_iterator]"
        "[:zh_CN] [`set::const_iterator] 的类型]")]]; // [:en] See [#container.requirements] \
                                                      [:zh_CN] 参见 [#container.requirements]
    using reverse_iterator       = std::reverse_iterator<iterator>;
    using const_reverse_iterator = std::reverse_iterator<const_iterator>;
    using node_type              = [[redoc("[=unspec]")]];
    using insert_return_type     = [[redoc("^>")]]insert-return-type<iterator, node_type>;

    // [:en] [#set.cons], construct/copy/destroy \
    [:zh_CN] [#set.cons]，构造/复制/销毁
    set() : set(Compare()) { }
    explicit set(const Compare& comp, const Allocator& = Allocator());
    template<class InputIterator>
      set(InputIterator first, InputIterator last,
          const Compare& comp = Compare(), const Allocator& = Allocator());
    template<[[redoc("*:c>")]]container-compatible-range<value_type> R>
      set(from_range_t, R&& rg, const Compare& comp = Compare(), const Allocator& = Allocator());
    set(const set& x);
    set(set&& x);
    explicit set(const Allocator&);
    set(const set&, const type_identity_t<Allocator>&);
    set(set&&, const type_identity_t<Allocator>&);
    set(initializer_list<value_type>, const Compare& = Compare(),
        const Allocator& = Allocator());
    template<class InputIterator>
      set(InputIterator first, InputIterator last, const Allocator& a)
        : set(first, last, Compare(), a) { }
    template<[[redoc("*:c>")]]container-compatible-range<value_type> R>
      set(from_range_t, R&& rg, const Allocator& a)
        : set(from_range, std::forward<R>(rg), Compare(), a) { }
    set(initializer_list<value_type> il, const Allocator& a)
      : set(il, Compare(), a) { }
    ~set();
    set& operator=(const set& x);
    set& operator=(set&& x)
      noexcept(allocator_traits<Allocator>::is_always_equal::value &&
               is_nothrow_move_assignable_v<Compare>);
    set& operator=(initializer_list<value_type>);
    allocator_type get_allocator() const noexcept;

    // [:en] iterators \
    [:zh_CN] 迭代器
    iterator               begin() noexcept;
    const_iterator         begin() const noexcept;
    iterator               end() noexcept;
    const_iterator         end() const noexcept;

    reverse_iterator       rbegin() noexcept;
    const_reverse_iterator rbegin() const noexcept;
    reverse_iterator       rend() noexcept;
    const_reverse_iterator rend() const noexcept;

    const_iterator         cbegin() const noexcept;
    const_iterator         cend() const noexcept;
    const_reverse_iterator crbegin() const noexcept;
    const_reverse_iterator crend() const noexcept;

    // [:en] capacit: \
    [:zh_CN] 容量
    [[nodiscard]] bool empty() const noexcept;
    size_type size() const noexcept;
    size_type max_size() const noexcept;

    // [:en] modifiers \
    [:zh_CN] 改动函数
    template<class... Args> pair<iterator, bool> emplace(Args&&... args);
    template<class... Args> iterator emplace_hint(const_iterator position, Args&&... args);
    pair<iterator,bool> insert(const value_type& x);
    pair<iterator,bool> insert(value_type&& x);
    iterator insert(const_iterator position, const value_type& x);
    iterator insert(const_iterator position, value_type&& x);
    template<class InputIterator>
      void insert(InputIterator first, InputIterator last);
    template<[[redoc("*:c>")]]container-compatible-range<value_type> R>
      void insert_range(R&& rg);
    void insert(initializer_list<value_type>);

    node_type extract(const_iterator position);
    node_type extract(const key_type& x);
    template<class K> node_type extract(K&& x);
    insert_return_type insert(node_type&& nh);
    iterator           insert(const_iterator hint, node_type&& nh);

    iterator  erase(iterator position);
    iterator  erase(const_iterator position);
    size_type erase(const key_type& x);
    template<class K> size_type erase(K&& x);
    iterator  erase(const_iterator first, const_iterator last);
    void      swap(set&)
      noexcept(allocator_traits<Allocator>::is_always_equal::value &&
               is_nothrow_swappable_v<Compare>);
    void      clear() noexcept;

    template<class C2>
      void merge(set<Key, C2, Allocator>& source);
    template<class C2>
      void merge(set<Key, C2, Allocator>&& source);
    template<class C2>
      void merge(multiset<Key, C2, Allocator>& source);
    template<class C2>
      void merge(multiset<Key, C2, Allocator>&& source);

    // [:en] observers \
    [:zh_CN] 探察函数
    key_compare key_comp() const;
    value_compare value_comp() const;

    // [:en] set operations \
    [:zh_CN] set 的操作
    iterator       find(const key_type& x);
    const_iterator find(const key_type& x) const;
    template<class K> iterator       find(const K& x);
    template<class K> const_iterator find(const K& x) const;

    size_type      count(const key_type& x) const;
    template<class K> size_type count(const K& x) const;

    bool           contains(const key_type& x) const;
    template<class K> bool contains(const K& x) const;

    iterator       lower_bound(const key_type& x);
    const_iterator lower_bound(const key_type& x) const;
    template<class K> iterator       lower_bound(const K& x);
    template<class K> const_iterator lower_bound(const K& x) const;

    iterator       upper_bound(const key_type& x);
    const_iterator upper_bound(const key_type& x) const;
    template<class K> iterator       upper_bound(const K& x);
    template<class K> const_iterator upper_bound(const K& x) const;

    pair<iterator, iterator>               equal_range(const key_type& x);
    pair<const_iterator, const_iterator>   equal_range(const key_type& x) const;
    template<class K>
      pair<iterator, iterator>             equal_range(const K& x);
    template<class K>
      pair<const_iterator, const_iterator> equal_range(const K& x) const;
  };

  template<class InputIterator,
           class Compare = less<[[redoc("^>")]]iter-value-type<InputIterator>>,
           class Allocator = allocator<[[redoc("^>")]]iter-value-type<InputIterator>>>
    set(InputIterator, InputIterator,
        Compare = Compare(), Allocator = Allocator())
      -> set<[[redoc("^>")]]iter-value-type<InputIterator>, Compare, Allocator>;

  template<ranges::[[redoc("^:c>")]]input_range R, class Compare = less<ranges::range_value_t<R>>,
           class Allocator = allocator<ranges::range_value_t<R>>>
    set(from_range_t, R&&, Compare = Compare(), Allocator = Allocator())
      -> set<ranges::range_value_t<R>, Compare, Allocator>;

  template<class Key, class Compare = less<Key>, class Allocator = allocator<Key>>
    set(initializer_list<Key>, Compare = Compare(), Allocator = Allocator())
      -> set<Key, Compare, Allocator>;

  template<class InputIterator, class Allocator>
    set(InputIterator, InputIterator, Allocator)
      -> set<[[redoc("^>")]]iter-value-type<InputIterator>,
             less<[[redoc("^>")]]iter-value-type<InputIterator>>, Allocator>;

  template<ranges::[[redoc("^:c>")]]input_range R, class Allocator>
    set(from_range_t, R&&, Allocator)
      -> set<ranges::range_value_t<R>, less<ranges::range_value_t<R>>, Allocator>;

  template<class Key, class Allocator>
    set(initializer_list<Key>, Allocator) -> set<Key, less<Key>, Allocator>;
}
[codeblock:end]
[%@lib@member set[!operator==]]
[%@lib@member set[!operator<]]
