[section#hive.modifiers
    [:en] Modifiers
    [:zh_CN] 改动函数
]

[%@lib@member emplace[!hive]]
[codeblock:declaration]
template<class... Args> iterator emplace(Args&&... args);
template<class... Args> iterator emplace_hint(const_iterator hint, Args&&... args);
[codeblock:end]

[div:description]
[para:expects]
[:en] [`T] is [^:oc EmplaceConstructible] into [`hive] from [`args].
[:zh_CN] [`T] 从 [`args] 向 [`hive] 中 [^:oc EmplaceConstructible]。

[para:effects]
[:en] Inserts an object of type [`T] constructed with [`std::forward<Args>(args)...].
[:zh_CN] 插入一个由 [`std::forward<Args>(args)...] 构造的 [`T] 类型的对象。

[:en] The [`hint] parameter is ignored.
[:zh_CN] [`hint] 参数被忽略。

[:en] If an exception is thrown, there are no effects.
[:zh_CN] 如果抛出了异常，则没有效果。

[begin:note]
[:en] [`args] can directly or indirectly refer to a value in [`*this].
[:zh_CN] [`args] 可以直接或间接地指代 [`*this] 中的值。
[end:note]

[para:returns]
[:en] An iterator that points to the new element.
[:zh_CN] 指向新元素的迭代器。

[para:complexity]
[:en] Constant.
[:zh_CN] 常量。

[:en] Exactly one object of type [`T] is constructed.
[:zh_CN] 恰好构造一个 [`T] 类型的对象。

[para:remarks]
[:en] Invalidates the past-the-end iterator.
[:zh_CN] 使尾后迭代器失效。
[div:end]

[%@lib@member insert[!hive]]
[codeblock:declaration]
iterator insert(const T& x);
iterator insert(const_iterator hint, const T& x);
iterator insert(T&& x);
iterator insert(const_iterator hint, T&& x);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return emplace(std::forward<decltype(x)>(x));]
[:zh_CN] 等价于：[`return emplace(std::forward<decltype(x)>(x));]

[begin:note]
[:en] The [`hint] parameter is ignored.
[:zh_CN] [`hint] 参数被忽略。
[end:note]
[div:end]

[%@lib@member insert[!hive]]
[codeblock:declaration]
void insert(initializer_list<T> rg);
template<[[redoc("*:c>")]]container-compatible-range<T> R>
  void insert_range(R&& rg);
[codeblock:end]

[div:description]
[para:expects]
[:en] [`T] is [^:oc EmplaceInsertable] into [`hive] from [`*ranges::begin(rg)].
[:zh_CN] [`T] 从 [`*ranges::begin(rg)] 向 [`hive] 中 [^:oc EmplaceInsertable]。

[:en] [`rg] and [`*this] do not overlap.
[:zh_CN] [`rg] 和 [`*this] 不重叠。

[para:effects]
[:en] Inserts copies of elements in [`rg].
[:zh_CN] 插入 [`rg] 中各元素的副本。

[:en] Each iterator in the range [`rg] is dereferenced exactly once.
[:zh_CN] [`rg] 中的每个迭代器恰好被解引用一次。

[para:complexity]
[:en] Linear in the number of elements inserted.
[:zh_CN] 对于插入的元素数量为线性。

[:en] Exactly one object of type [`T] is constructed for each element inserted.
[:zh_CN] 对于每个插入的元素，恰好构造一个 [`T] 类型的对象。

[para:remarks]
[:en] If an element is inserted, invalidates the past-the-end iterator.
[:zh_CN] 如果插入了元素，则使尾后迭代器失效。
[div:end]

[%@lib@member insert[!hive]]
[codeblock:declaration]
void insert(size_type n, const T& x);
[codeblock:end]

[div:description]
[para:expects]
[:en] [`T] is [^:oc CopyInsertable] into [`hive].
[:zh_CN] [`T] 为向 [`hive] 中 [^:oc CopyInsertable]。

[para:effects]
[:en] Inserts [`n] copies of [`x].
[:zh_CN] 插入 [`n] 个 [`x] 的副本。

[para:complexity]
[:en] Linear in [`x].
[:zh_CN] 与 [`x] 成线性。

[:en] Exactly one object of type [`T] is constructed for each element inserted.
[:zh_CN] 对于每个插入的元素，恰好构造一个 [`T] 类型的对象。

[para:remarks]
[:en] If an element is inserted, invalidates the past-the-end iterator.
[:zh_CN] 如果插入了元素，则使尾后迭代器失效。
[div:end]

[%@lib@member insert[!hive]]
[codeblock:declaration]
template<class InputIterator>
  void insert(InputIterator first, InputIterator last);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`insert_range(ranges::subrange(first, last))]
[:zh_CN] 等价于：[`insert_range(ranges::subrange(first, last))]
[div:end]

[%@lib@member erase[!hive]]
[codeblock:declaration]
iterator erase(const_iterator position);
iterator erase(const_iterator first, const_iterator last);
[codeblock:end]

[div:description]
[para:complexity]
[:en] Linear in the number of elements erased.
[:zh_CN] 与被清除的元素数量成线性。

[:en] Additionally, if any active blocks become empty of elements as a result of
the function call, at worst linear in the number of element blocks.
[:zh_CN] 此外，如果由于函数调用导致任何活动块的元素变为空，则最坏情况下与元素块的数量成线性。

[para:remarks]
[:en] Invalidates references, pointers and iterators referring to the erased elements.
[:zh_CN] 使指代被擦除元素的所有引用、指针和迭代器失效。

[:en] An erase operation that erases the last element in [`*this]
also invalidates the past-the-end iterator.
[:zh_CN] 擦除 [`*this] 中最后一个元素的擦除操作也使尾后迭代器失效。
[div:end]

[%@lib@member swap[!hive]]
[codeblock:declaration]
void swap(hive& x)
  noexcept(allocator_traits<Allocator>::propagate_on_container_swap::value ||
           allocator_traits<Allocator>::is_always_equal::value);
[codeblock:end]

[div:description]
[para:effects]
[:en] Exchanges the contents, [`capacity()], and [*current-limits]
of [`*this] with that of [`x].
[:zh_CN] 交换 [`*this] 与 [`x] 的内容、[`capacity()] 和 [*current-limits]。

[para:complexity]
[:en] Constant.
[:zh_CN] 常量。
[div:end]
