[section#diff.cpp23.depr
    [:en] [#depr]: compatibility features
    [:zh_CN] [#depr]：兼容性功能特性
]

[para:nodiff]
[?change]
[:en] Remove the type alias [`allocator<T>::is_always_equal].
[:zh_CN] 移除类型别名 [`allocator<T>::is_always_equal]。

[?rationale]
[:en] Non-empty allocator classes derived from [`allocator] needed to explicitly
define an [`is_always_equal] member type so that [`allocator_traits] would not
use the one from the allocator base class.
[:zh_CN] 派生于 [`allocator] 的非空分配器类曾需要显式定义一个 [`is_always_equal]
成员类型，以使 [`allocator_traits] 不会使用来自迭代器基类的此成员。

[?effect]
[:en] It is simpler to correctly define an allocator class with an allocator
base class.
[:zh_CN] 可以更简单地正确定义具有分配器基类的分配器。

[:en] For example:
[:zh_CN] 例如：

[codeblock]
template <class T>
struct MyAlloc : allocator<T> {
  int tag;
};

static_assert(!allocator_traits<MyAlloc<int>>::is_always_equal);        // [:en] Error in [=CppXXIII], [:zh_CN] [=CppXXIII] 中报错，
                                                                        // [:en@~] OK in [=CppXXVI] [:zh_CN@~] [=CppXXVI] 中 OK
[codeblock:end]

[para:nodiff]
[?change]
[:en] Removal of atomic access API for [`shared_ptr] objects.
[:zh_CN] 移除用于 [`shared_ptr] 对象的原子访问 API。

[?rationale]
[:en] The old behavior was brittle.
[:zh_CN] 旧的行为很脆弱。

[:en] [`shared_ptr] objects using the old API were not protected by the type
system, and certain interactions with code not using this API would, in some
cases, silently produce undefined behavior.
[:zh_CN] 使用旧式 API 的 [`shared_ptr] 对象未受到类型系统的保护，而且与不使用
此 API 的代码之间的一些交互，在某些情况下会沉默地产生未定义行为。

[:en] A complete type-safe replacement is provided in the form of
[`atomic<shared_ptr<T>>].
[:zh_CN] 已经以 [`atomic<shared_ptr<T>>] 的形式提供了完整的类型安全替代品。

[?effect]
[:en] A valid [=CppXXIII] program that relies on the presence of the removed
functions may fail to compile.
[:zh_CN] 对被移除函数有依赖的有效 [=CppXXIII] 程序可能无法编译。

[para:nodiff]
[?change]
[:en] Remove the [`basic_string::reserve()] overload with no parameters.
[:zh_CN] 移除没有形参的 [`basic_string::reserve()] 重载。

[?rationale]
[:en] The overload of [`reserve] with no parameters is redundant.
[:zh_CN] 没有形参的 [`reserve] 重载是多余的。

[:en] The [`shrink_to_fit] member function can be used instead.
[:zh_CN] 可以代之以使用 [`shrink_to_fit] 成员函数。

[?effect]
[:en] A valid [=CppXXIII] program that calls [`reserve()] on a [`basic_string]
object may fail to compile.
[:zh_CN] 在 [`basic_string] 对象上调用 [`reserve()] 的有效 [=CppXXIII] 程序可能
无法编译。

[:en] The old functionality can be achieved by calling [`shrink_to_fit()]
instead, or the function call can be safely eliminated with no side effects.
[:zh_CN] 原功能可以代之以调用 [`shrink_to_fit()] 来达成，或可以安全地消除此
函数调用而不造成副作用。

[para:nodiff]
[?change]
[:en] Remove header [?libheader@no codecvt] and all its contents.
[:zh_CN] 移除头文件 [?libheader@no codecvt] 及其全部内容。

[?rationale]
[:en] The header has been deprecated for the previous three editions of this
standard and no longer implements the current Unicode standard, supporting only
the obsolete UCS-2 encoding.
[:zh_CN] 此头文件已于本标准的三个先前版本中弃用，它不再实现当前的 Unicode 标准，
且仅支持过时的 UCS-2 编码。

[:en] Ongoing support is at implementer[=']s discretion, exercising freedoms
granted by [#zombie.names].
[:zh_CN] 基于 [#zombie.names] 所授予的自由，由各实现方自行决定是否继续予以支持。

[?effect]
[:en] A valid [=CppXXIII] program [`#include]-ing the header or importing the
header unit may fail to compile.
[:zh_CN] [`#include] 此头文件或导入其头文件单元的有效 [=CppXXIII] 程序可能
无法编译。

[:en] Code that uses any of the following names by importing the standard
library modules may fail to compile:
[:zh_CN] 通过导入标准库模块来使用下列名字的代码可能无法编译：

[list]
[item]
[:en@~] [`codecvt_mode],
[:zh_CN@~] [`codecvt_mode]，
[item]
[:en@~] [`codecvt_utf16],
[:zh_CN@~] [`codecvt_utf16]，
[item]
[:en@~] [`codecvt_utf8],
[:zh_CN@~] [`codecvt_utf8]，
[item]
[:en@~] [`codecvt_utf8_utf16],
[:zh_CN@~] [`codecvt_utf8_utf16]，
[item]
[:en@~] [`consume_header],
[:zh_CN@~] [`consume_header]，
[item]
[:en@~] [`generate_header], and
[:zh_CN@~] [`generate_header]，和
[item]
[:en@~] [`little_endian].
[:zh_CN@~] [`little_endian]。
[list:end]

[para:nodiff]
[?change]
[:en] Remove header [?libheader@no strstream] and all its contents.
[:zh_CN] 移除头文件 [?libheader@no strstream] 及其全部内容。

[?rationale]
[:en] The header has been deprecated since the original [=Cpp] standard; the
[?libheader spanstream] header provides an updated, safer facility.
[:zh_CN] 此头文件从最初 [=Cpp] 标准即已被启用；[?libheader spanstream] 头文件
提供了一种更新更安全的设施。

[:en] Ongoing support is at implementer[=']s discretion, exercising freedoms
granted by [#zombie.names].
[:zh_CN] 基于 [#zombie.names] 所授予的自由，由各实现方自行决定是否继续予以支持。

[?effect]
[:en] A valid [=CppXXIII] program [`#include]-ing the header or importing the
header unit may become ill-formed.
[:zh_CN] [`#include] 此头文件或导入其头文件单元的有效 [=CppXXIII] 程序可能变为
非良构。

[:en] Code that uses any of the following names by importing one of the standard
library modules may become ill-formed:
[:zh_CN] 通过导入标准库模块之一来使用下列名字的代码可能变为非良构：

[list]
[item] [:] [`istrstream]
[item] [:] [`ostrstream]
[item] [:] [`strstream]
[item] [:] [`strstreambuf]
[list:end]

[para:nodiff]
[?change]
[:en] Remove convenience interfaces [`wstring_convert] and [`wbuffer_convert].
[:zh_CN] 移除便利接口 [`wstring_convert] 和 [`wbuffer_convert]。

[?rationale]
[:en] These features were underspecified with no clear error reporting mechanism
and were deprecated for the last three editions of this standard.
[:zh_CN] 这些功能特性的说明不足，缺少明确的错误报告机制，并已在本标准的前三个
版本中弃用。

[:en] Ongoing support is at implementer[=']s discretion, exercising freedoms
granted by [#zombie.names].
[:zh_CN] 基于 [#zombie.names] 所授予的自由，由各实现方自行决定是否继续予以支持。

[?effect]
[:en] A valid [=CppXXIII] program using these interfaces may become ill-formed.
[:zh_CN] 使用了这些接口的有效 [=CppXXIII] 程序可能变为非良构。
