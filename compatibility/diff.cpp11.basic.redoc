[section#diff.cpp11.basic
    [:en] [#basic]: basics
    [:zh_CN] [#basic]：基本概念
]

[para:diff] [#basic.stc.dynamic.deallocation]
[=Change]
[:en] New usual (non-placement) deallocator.
[:zh_CN] 新的常规（非放置式）回收函数。

[=Rationale]
[:en] Required for sized deallocation.
[:zh_CN] 由有大小的回收所需要。

[=Effect]
[:en] Valid [=CppXI] code could declare a global placement allocation function
and deallocation function as follows:
[:zh_CN] 有效的 [=CppXI] 代码可以声明以下的全局的替代分配函数和回收函数：

[codeblock:notation]
void* operator new(std::size_t, std::size_t);
void operator delete(void*, std::size_t) noexcept;
[codeblock:end]

[:en] In this International Standard, however, the declaration of
[`operator delete] might match a predefined usual (non-placement)
[`operator delete] ([#basic.stc.dynamic]).
[:zh_CN] 不过在本国际标准中，[`operator delete] 的声明式可能与某个预定义的常规
（非放置式）[`operator delete] 匹配（[#basic.stc.dynamic]）。

[:en] If so, the program is ill-formed, as it was for class member allocation
functions and deallocation functions ([#expr.new]).
[:zh_CN] 若是如此则程序非良构，正如对类成员分配函数和回收函数的规则一样
（[#expr.new]）。
