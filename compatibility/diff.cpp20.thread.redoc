[section#diff.cpp20.thread
    [:en] [#thread]: concurrency support library
    [:zh_CN] [#thread]：并发支持库
]

[para:diff] [#thread.barrier]
[?change]
[:en] In this revision of [=Cpp], it is implementation-defined whether a
barrier[=']s phase completion step runs if no thread calls [`wait].
[:zh_CN] 此版本的 [=Cpp] 中，当没有线程调用 [`wait] 时是否允许关卡的阶段完成步骤
是由实现定义的。

[:en] Previously the phase completion step was guaranteed to run on the last
thread that calls [`arrive] or [`arrive_and_drop] during the phase.
[:zh_CN] 之前，阶段完成步骤保证会在阶段过程中调用 [`arrive] 或 [`arrive_and_drop]
的最后一个线程中运行。

[:en] In this revision of [=Cpp], it can run on any of the threads that arrived
or waited at the barrier during the phase.
[:zh_CN] 此版本的 [=Cpp] 中，它可以在阶段过程中到达或等待关卡的任何线程中运行。

[?rationale]
[:en] Correct contradictory wording and improve implementation flexibility for
performance.
[:zh_CN] 修正矛盾的措辞并改善实现有关性能的灵活性。

[?effect]
[:en] Valid [=CppXX] code using a barrier might have different semantics in this
revision of [=Cpp] if it depends on a completion function[=']s side effects
occurring exactly once, on a specific thread running the phase completion step,
or on a completion function[=']s side effects occurring without [`wait] having
been called.
[:zh_CN] 使用关卡的有效 [=CppXX] 代码，如果它依赖于完成函数的副作用刚好发生一次，
依赖于特定的线程运行阶段完成步骤，或者依赖于完成函数的副作用发生时 [`wait] 未被
调用，则可能具有不同的语义。

[:en] For example:
[:zh_CN] 例如：

[codeblock]
auto b0 = std::barrier(1);
b0.arrive();
b0.arrive();            // [:en] implementation-defined; previously well-defined \
                        [:zh_CN] 由实现定义的；之前为良构

int data = 0;
auto b1 = std::barrier(1, [&] { data++; });
b1.arrive();
assert(data == 1);      // [:en] implementation-defined; previously well-defined \
                        [:zh_CN] 由实现定义的；之前为良构
b1.arrive();            // [:en] implementation-defined; previously well-defined \
                        [:zh_CN] 由实现定义的；之前为良构
[codeblock:end]
