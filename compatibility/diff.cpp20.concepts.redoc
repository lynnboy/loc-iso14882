[section#diff.cpp20.concepts
    [:en] [#concepts]: concepts library
    [:zh_CN] [#concepts]：概念库
]

[para:diff] [#cmp.concept], [#concept.equalitycomparable], [#concept.totallyordered]
[?change]
[:en] Replace [`common_reference_with] in [`three_way_comparable_with],
[`equality_comparable_with], and [`totally_ordered_with]
with an exposition-only concept.
[:zh_CN] 将 [`three_way_comparable_with]，[`equality_comparable_with]，和
[`totally_ordered_with] 中的 [`common_reference_with] 替换为仅用于阐释的概念。

[?rationale]
[:en] Allow uncopyable, but movable, types to model these concepts.
[:zh_CN] 允许不可复制但可移动的类型构成这些概念。

[?effect]
[:en] Valid [=CppXX] code relying on subsumption with [`common_reference_with]
may fail to compile in this revision of [=Cpp].
[:zh_CN] 依赖于 [`common_reference_with] 的假设的有效 [=CppXX] 代码在 [=Cpp] 的
此版本中可能无法编译。

[begin:example]
[codeblock]
template<class T, class U>
  requires [[redoc("`:c>")]]equality_comparable_with<T, U>
bool attempted_equals(const T&, const U& u);    // [:en] previously selected overload \
                                                [:zh_CN] 之前选择的重载

template<class T, class U>
  requires [[redoc("`:c>")]]common_reference_with<const remove_reference_t<T>&, const remove_reference_t<U>&>
bool attempted_equals(const T& t, const U& u);  // [:en] ambiguous overload; previously \
                                                [:zh_CN] 有歧义的重载；之前 \
                                                // [:en@~] rejected by partial ordering \
                                                [:zh_CN@~] 则由部分排序所拒绝
bool test(shared_ptr<int> p) {
  return attempted_equals(p, nullptr);          // [:en] ill-formed; previously well-formed \
                                                [:zh_CN] 非良构；之前良构
}
[codeblock:end]
[end:example]
