[section#diff.cpp23.dcl.dcl
    [:en] [#dcl]: declarations
    [:zh_CN] [#dcl]：声明
]

[para:diff] [#dcl.decl.general]
[?change]
[:en] Introduction of [`trivially_relocatable_if_eligible] and
[`replaceable_if_eligible] as identifiers with special meaning ([#lex.name]).
[:zh_CN] 引入 [`trivially_relocatable_if_eligible] 和 [`replaceable_if_eligible]
为具有特殊含义的标识符（[#lex.name]）。

[?rationale]
[:en] Support declaration of trivially relocatable and replaceable types ([#class.prop]).
[:zh_CN] 支持声明可平凡重定位和可替换的类型（[#class.prop]）。

[?effect]
[:en] Valid [=CppXXIII] code can become ill-formed.
[:zh_CN] 合法 [=CppXXIII] 代码可能变为非良构。

[begin:example]
[codeblock]
struct C {};
struct C replaceable_if_eligible {};    // [:en] was well-formed (new variable [`replaceable_if_eligible]) \
                                        [:zh_CN] 曾为良构（新变量 [`replaceable_if_eligible]）
                                        // [:en] now ill-formed (redefines [`C]) \
                                        [:zh_CN] 现为非良构（重定义 [`C]）
[codeblock:end]
[end:example]

[para:diff] [#dcl.init.list]
[?change]
[:en] Pointer comparisons between [`initializer_list] objects[='] backing arrays
are unspecified.
[:zh_CN] [`initializer_list] 对象的后备数组之间的指针比较是未指明的。

[?rationale]
[:en] Permit the implementation to store backing arrays in static read-only
memory.
[:zh_CN] 允许实现将后备数组存储于静态只读内存中。

[?effect]
[:en] Valid [=CppXXIII] code that relies on the result of pointer comparison
between backing arrays may change behavior.
[:zh_CN] 依赖于后备数组间的指针比较结果的有效 [=CppXXIII] 代码可能改变行为。

[begin:example]
[codeblock]
bool ne(std::initializer_list<int> a, std::initializer_list<int> b) {
  return a.begin() != b.begin() + 1;
}
bool b = ne({2,3}, {1,2,3});    // [:en] unspecified result; previously [`false] \
                                [:zh_CN] 结果未指明；之前为 [`false]
[codeblock:end]
[end:example]

[para:diff] [#dcl.array]
[?change]
[:en] Previously, [`T...`[n`]] would declare a pack of function parameters.
[:zh_CN] 之前，[`T...`[n`]] 会声明函数形参的包组。

[:en] [`T...`[n`]] is now a [~pack-index-specifier].
[:zh_CN] [`T...`[n`]] 现在则是[~包组索引说明符]。

[?rationale]
[:en] Improve the handling of packs.
[:zh_CN] 改进包组处理。

[?effect]
[:en] Valid [=CppXXIII] code that declares a pack of parameters without
specifying a [~declarator-id] becomes ill-formed.
[:zh_CN] 声明形参包组但未指定[~声明说明符]的有效 [=CppXXIII] 程序变为非良构。

[begin:example]
[codeblock]
template <typename... T>
void f(T... [1]);
template <typename... T>
void g(T... ptr[1]);
int main() {
  f<int, double>(nullptr, nullptr);     // [:en] ill-formed, previously [`void f<int, double>(int `[1`], double `[1`])] \
                                        // [:zh_CN] 非良构，之前为 [`void f<int, double>(int `[1`], double `[1`])]
  g<int, double>(nullptr, nullptr);     // ok
}
[codeblock:end]
[end:example]
