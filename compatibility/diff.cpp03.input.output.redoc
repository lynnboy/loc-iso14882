[section#diff.cpp03.input.output
    [:en] [#input.output]: input/output library
    [:zh_CN] [#input.output]：输入/输出程序库
]

[para:diff] [#istream.sentry], [#ostream.sentry], [#iostate.flags]
[=Change]
[:en] Specify use of [`explicit] in existing boolean conversion functions.
[:zh_CN] 指定了在现存布尔转换函数上使用 [`explicit]。

[=Rationale]
[:en] Clarify intentions, avoid workarounds.
[:zh_CN] 厘清意图，避免使用变通方案

[=Effect]
[:en] Valid [=CppIII] code that relies on implicit boolean conversions will fail
to compile with this International Standard.
[:zh_CN] 依赖于隐式布尔转换的有效 [=CppIII] 代码，在本国际标准中将无法编译。

[:en] Such conversions occur in the following conditions:
[:zh_CN] 这种转换在以下情况下发生：

[list]
[item]
[:en] passing a value to a function that takes an argument of type [`bool];
[:zh_CN] 将值传递给接受 [`bool] 类型的实参的函数；
[item]
[:en] using [`operator==] to compare to [`false] or [`true];
[:zh_CN] 使用 [`operator==] 与 [`false] 或 [`true] 进行比较；
[item]
[:en] returning a value from a function with a return type of [`bool];
[:zh_CN] 从具有返回类型 [`bool] 的函数中返回值；
[item]
[:en] initializing members of type [`bool] via aggregate initialization;
[:zh_CN] 通过聚合初始化来初始化 [`bool] 类型的成员；
[item]
[:en] initializing a [`const bool&] which would bind to a temporary object.
[:zh_CN] 初始化可能绑定到临时对象的 [`const bool&]。
[list:end]

[para:diff] [#ios.failure]
[=Change]
[:en] Change base class of [`std::ios_base::failure].
[:zh_CN] 改变了 [`std::ios_base::failure] 的基类。

[=Rationale]
[:en] More detailed error messages.
[:zh_CN] 更详细的错误消息。

[=Effect]
[:en] [`std::ios_base::failure] is no longer derived directly from
[`std::exception], but is now derived from [`std::system_error], which in turn
is derived from [`std::runtime_error].
[:zh_CN] [`std::ios_base::failure] 不再直接派生于 [`std::exception]，它现在派生
于 [`std::system_error]，后者派生于 [`std::runtime_error]。

[:en] Valid [=CppIII] code that assumes that [`std::ios_base::failure] is
derived directly from [`std::exception] may execute differently in this
International Standard.
[:zh_CN] 假定 [`std::ios_base::failure] 直接派生于 [`std::exception] 的合法
[=CppIII] 代码，在本国际标准中可能有不同执行。

[para:diff] [#ios.base]
[=Change]
[:en] Flag types in [`std::ios_base] are now bitmasks with values defined as
constexpr static members.
[:zh_CN] [`std::ios_base] 中的标记类型现在都是带有定义为 constexpr 静态成员的值
的掩码。

[=Rationale]
[:en] Required for new features.
[:zh_CN] 新功能特性的要求。

[=Effect]
[:en] Valid [=CppIII] code that relies on [`std::ios_base] flag types being
represented as [`std::bitset] or as an integer type may fail to compile with
this International Standard.
[:zh_CN] 依赖于 [`std::ios_base] 的标记类型被表示为 [`std::bitset] 或为整数类型
的有效 [=CppIII] 代码，在本国际标准中可能无法编译。

[:en] For example:
[:zh_CN] 例如：

[codeblock]
#include <iostream>

int main() {
  int flag = std::ios_base::hex;
  std::cout.setf(flag);         // [:en] error: [`setf] does not take argument of type [`int] \
                                   [:zh_CN] 错误：[`setf] 不接受 [`int] 类型的实参
}
[codeblock:end]
