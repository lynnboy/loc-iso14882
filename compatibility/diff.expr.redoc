[section#diff.expr
    [:en] [#expr]: expressions
    [:zh_CN] [#expr]：表达式
]

[para:diff] [#conv.ptr]

[?change]
[:en] Converting [`void*] to a pointer-to-object type requires casting.
[:zh_CN] 将 [`void*] 转换为对象指针类型需要强制转换。

[codeblock]
char a[10];
void* b=a;
void foo() {
  char* c=b;
}
[codeblock:end]

[:en] ISO C will accept this usage of pointer to void being assigned to a
pointer to object type.
[:zh_CN] ISO C 可以接受这种将 [`void] 指针赋值给指向对象类型的指针的用法。

[:en] [=Cpp] will not.
[:zh_CN] [=Cpp] 则不会。

[?rationale]
[:en] [=Cpp] tries harder than C to enforce compile-time type safety.
[:zh_CN] [=Cpp] 比 C 更加努力以强制实施编译期的类型安全性。

[?effect]
[:en] Deletion of semantically well-defined feature.
[:zh_CN] 删除了有良好定义语义的功能特性。

[?difficulty]
[:en] Could be automated.
[:zh_CN] 可以自动化。

[:en] Violations will be diagnosed by the [=Cpp] translator.
[:zh_CN] 规则违反可以被 [=Cpp] 翻译器诊断出来。

[:en] The fix is to add a cast.
[:zh_CN] 修正方法是添加强制转换。

[:en] For example:
[:zh_CN] 例如：

[codeblock]
char* c = (char*) b;
[codeblock:end]

[?howwide]
[:en] This is fairly widely used but it is good programming practice to add the
cast when assigning pointer-to-void to pointer-to-object.
[:zh_CN] 这是相当广泛的用法，但在进行 [`void] 指针向对象指针进行赋值时添加强制
转换是一种良好的编程实践。

[:en] Some ISO C translators will give a warning if the cast is not used.
[:zh_CN] 一些 ISO C 翻译器在没有使用强制转换时会给出警告。

[para:diff] [#expr.call]

[?change]
[:en] Implicit declaration of functions is not allowed.
[:zh_CN] 不允许函数的隐式声明。

[?rationale]
[:en] The type-safe nature of [=Cpp].
[:zh_CN] [=Cpp] 的类型安全性。

[?effect]
[:en] Deletion of semantically well-defined feature.
[:zh_CN] 删除了有良好定义语义的功能特性。

[:en] Note: the original feature was labeled as [=lq]obsolescent[=rq] in ISO C.
[:zh_CN] 注意：原本的功能特性在 ISO C 中已被标为“过时的”。

[?difficulty]
[:en] Syntactic transformation.
[:zh_CN] 语法变换。

[:en] Facilities for producing explicit function declarations are fairly
widespread commercially.
[:zh_CN] 用以生成显式函数声明的工具在市面上相当常见。

[?howwide]
[:en] Common.
[:zh_CN] 常见。

[para:diff] [#expr.post.incr], [#expr.pre.incr]

[?change]
[:en] Decrement operator is not allowed with [`bool] operand.
[:zh_CN] 不允许对 [`bool] 操作数使用减量运算符。

[?rationale]
[:en] Feature with surprising semantics.
[:zh_CN] 带有奇怪语义的功能特性。

[?effect]
[:en] A valid ISO C expression utilizing the decrement operator on a [`bool]
lvalue (for instance, via the C typedef in [?libheader@ref@depr stdbool.h]) is
ill-formed in this International Standard.
[:zh_CN] 在 [`bool] 左值（比如，通过 C 在 [?libheader@ref@depr stdbool.h] 中的
typedef）上使用了减量运算符的有效的 ISO C 表达式，在本国际标准中是非良构的。

[para:diff] [#expr.sizeof], [#expr.cast]
[?change]
[:en] Types must be defined in declarations, not in expressions. [br]
[:zh_CN] 必须在声明式中定义类型，表达式中不可以。 [br]

[:en] In C, a sizeof expression or cast expression may define a new type.
[:zh_CN] 在 C 中，[`sizeof] 表达式或者强制转换表达式可以定义新类型。

[:en] For example,
[:zh_CN] 例如，

[codeblock]
p = (void*)(struct x {int i;} *)0;
[codeblock:end]

[:en@~] defines a new type, struct [`x].
[:zh_CN@~] 定义了一种新类型，结构体 [`x]。

[?rationale]
[:en] This prohibition helps to clarify the location of definitions in the
source code.
[:zh_CN] 这项禁止规则有助于厘清定义在源代码中的位置。

[?effect]
[:en] Deletion of semantically well-defined feature.
[:zh_CN] 删除了有良好定义语义的功能特性。

[?difficulty]
[:en] Syntactic transformation.
[:zh_CN] 语法变换。

[?howwide]
[:en] Seldom.
[:zh_CN] 少见。

[para:diff] [#expr.cond], [#expr.ass], [#expr.comma]

[:en]
[%conversion[!lvalue-to-rvalue]]
[%rvalue[!lvalue conversion to]]
[%lvalue]
[:zh_CN]
[%转换[!左值向右值]]
[%右值[!左值转换为～]]
[%左值]

[?change]
[:en] The result of a conditional expression, an assignment expression, or a
comma expression may be an lvalue.
[:zh_CN] 条件表达式、赋值表达式或逗号表达式的结果可以是左值。

[?rationale]
[:en] [=Cpp] is an object-oriented language, placing relatively more emphasis on
lvalues.
[:zh_CN] [=Cpp] 是一种面向对象的语言，相对来说更加强调左值。

[:en] For example, function calls may yield lvalues.
[:zh_CN] 例如，函数调用可以产生左值。

[?effect]
[:en] Change to semantics of well-defined feature.
[:zh_CN] 改变了有良好定义的功能特性的语义。

[:en] Some C expressions that implicitly rely on lvalue-to-rvalue conversions
will yield different results.
[:zh_CN] 一些隐含地依赖于左值向右值转换的 C 表达式可能会产生不同的结果。

[:en] For example,
[:zh_CN] 例如，

[codeblock]
char arr[100];
sizeof(0, arr)
[codeblock:end]

[:en@~] yields [`100] in [=Cpp] and [`sizeof(char*)] in C.
[:zh_CN@~] 在 [=Cpp] 中产生 [`100] 但在 C 中产生 [`sizeof(char*)]。

[?difficulty]
[:en] Programs must add explicit casts to the appropriate rvalue.
[:zh_CN] 程序必须为适当的右值添加显式强制转换。

[?howwide]
[:en] Rare.
[:zh_CN] 罕见。
