[section#diff.expr
    [:en] [#expr]: expressions
    [:zh_CN] [#expr]：表达式
]

[para:diff] [#conv.ptr]
[?change]
[:en] Converting [`[`:key void]*] to a pointer-to-object type requires casting.
[:zh_CN] 将 [`[`:key void]*] 转换为对象指针类型需要转型。

[begin:example]
[codeblock]
char a[10];
void* b=a;
void foo() {
  char* c=b;
}
[codeblock:end]

[:en] C accepts this usage of pointer to [`:key void] being assigned to a
pointer to object type.
[:zh_CN] C 可以接受这种将 [`:key void] 指针赋值给指向对象类型的指针的用法。

[:en] [=Cpp] does not.
[:zh_CN] [=Cpp] 则不会。
[end:example]

[?rationale]
[:en] [=Cpp] tries harder than C to enforce compile-time type safety.
[:zh_CN] [=Cpp] 比 C 更加努力以强制实施编译期的类型安全性。

[?effect]
[:en] Deletion of semantically well-defined feature.
[:zh_CN] 删除了语义上良定义的功能特性。

[?difficulty]
[:en] Can be automated.
[:zh_CN] 可以自动化。

[:en] Violations will be diagnosed by the [=Cpp] translator.
[:zh_CN] 规则违反可以被 [=Cpp] 翻译器诊断出来。

[:en] The fix is to add a cast.
[:zh_CN] 修正方法是添加转型。

[begin:example]
[codeblock]
char* c = (char*) b;
[codeblock:end]
[end:example]

[?howwide]
[:en] This is fairly widely used but it is good programming practice to add the
cast when assigning pointer-to-void to pointer-to-object.
[:zh_CN] 这是相当广泛的用法，但在进行 [`void] 指针向对象指针进行赋值时添加转型
是一种良好的编程实践。

[:en] Some C translators will give a warning if the cast is not used.
[:zh_CN] 一些 C 翻译器在没有使用转型时会给出警告。

[para:diff] [#expr.arith.conv]
[?change]
[:en] Operations mixing a value of an enumeration type and a value of a
different enumeration type or of a floating-point type are not valid.
[:zh_CN] 一个枚举类型的值和另一不同枚举类型或浮点类型的值的混合运算非法。

[begin:example]
[codeblock]
enum E1 { e };
enum E2 { f };
int b = e <= 3.7;       // [:en] valid in C; ill-formed in [=Cpp] [:zh_CN] C 中合法；[=Cpp] 中非良构
int k = f - e;          // [:en] valid in C; ill-formed in [=Cpp] [:zh_CN] C 中合法；[=Cpp] 中非良构
int x = 1 ? e : f;      // [:en] valid in C; ill-formed in [=Cpp] [:zh_CN] C 中合法；[=Cpp] 中非良构
[codeblock:end]
[end:example]

[?rationale]
[:en] Reinforcing type safety in [=Cpp].
[:zh_CN] 加强 [=Cpp] 的类型安全性。

[?effect]
[:en] Well-formed C code will not compile with this International Standard.
[:zh_CN] 良构的 C 代码在本国际标准中无法编译。

[?difficulty]
[:en] Violations will be diagnosed by the [=Cpp] translator.
[:zh_CN] 规则违反可以被 [=Cpp] 翻译器诊断出来。

[:en] The original behavior can be restored with a cast or integral promotion.
[:zh_CN] 可以通过转型或整型提升恢复原行为。

[begin:example]
[codeblock]
enum E1 { e };
enum E2 { f };
int b = (int)e <= 3.7;
int k = +f - e;
[codeblock:end]
[end:example]

[?howwide]
[:en] Uncommon.
[:zh_CN] 不常见。

[para:diff] [#expr.post.incr], [#expr.pre.incr]
[?change]
[:en] Decrement operator is not allowed with [`:key bool] operand.
[:zh_CN] 不允许对 [`:key bool] 操作数使用减量运算符。

[?rationale]
[:en] Feature with surprising semantics.
[:zh_CN] 带有奇怪语义的功能特性。

[?effect]
[:en] A valid C expression utilizing the decrement operator on a [`:key bool] lvalue
(for instance, via the C typedef in [?libheader@ref stdbool.h]) is ill-formed in [=Cpp].
[:zh_CN] 在 [`:key bool] 左值（比如，通过 C 在 [?libheader@ref stdbool.h] 中的
typedef）上使用了减量运算符的有效的 C 表达式，在 [=Cpp] 中是非良构的。

[para:diff] [#expr.sizeof], [#expr.cast]
[?change]
[:en] In [=Cpp], types can only be defined in declarations, not in expressions. [br]
[:zh_CN] 在 [=Cpp] 中，类型只能在声明式中定义，表达式中不可以。 [br]

[:en] In C, a [`:key sizeof] expression or cast expression may define a new type.
[:zh_CN] 在 C 中，[`:key sizeof] 表达式或者转型表达式可以定义新类型。

[begin:example]
[codeblock]
p = (void*)(struct x {int i;} *)0;
[codeblock:end]
[:en@~] defines a new type, struct [`x].
[:zh_CN@~] 定义了一种新类型，结构体 [`x]。
[end:example]

[?rationale]
[:en] This prohibition helps to clarify the location of definitions in the source code.
[:zh_CN] 这项禁止规则有助于厘清定义在源代码中的位置。

[?effect]
[:en] Deletion of semantically well-defined feature.
[:zh_CN] 删除了语义上良定义的功能特性。

[?difficulty]
[:en] Syntactic transformation.
[:zh_CN] 语法变换。

[?howwide]
[:en] Seldom.
[:zh_CN] 少见。

[para:diff] [#expr.rel], [#expr.eq]

[?change]
[:en] C allows directly comparing two objects of array type; [=Cpp] does not.
[:zh_CN] C 允许直接比较数组类型的两个对象；[=Cpp] 不可以。

[?rationale]
[:en] The behavior is confusing because it compares not the contents of the two
arrays, but their addresses.
[:zh_CN] 此行为令人迷惑，因为它比较的并非两个数组的内容而是地址。

[?effect]
[:en] Deletion of semantically well-defined feature that had unspecified behavior
in common use cases.
[:zh_CN] 删除了语义上良定义的功能特性，其在常见使用场景下具有未指明的行为。

[?difficulty]
[:en] Violations will be diagnosed by the [=Cpp] translator.
[:zh_CN] [=Cpp] 翻译器会诊断违例。

[:en] The original behavior can be replicated by explicitly casting either array
to a pointer, such as by using a unary [`+].
[:zh_CN] 原本行为可以通过显式将数组转型为指针来保留，比如使用一元 [`+]。

[begin:example]
[codeblock]
int arr1[5];
int arr2[5];
int same = arr1 == arr2;        // [:en] valid C, ill-formed C++ [:zh_CN] C 中合法，C++ 中非良构
int idem = arr1 == +arr2;       // [:en] valid in both C and C++ [:zh_CN] C 和 C++ 中均合法
[codeblock:end]
[end:example]

[?howwide]
[:en] Rare.
[:zh_CN] 罕见。

[para:diff] [#expr.cond], [#expr.assign], [#expr.comma]

[:en] [%conversion[!lvalue-to-rvalue]] [%rvalue[!lvalue conversion to]] [%lvalue]
[:zh_CN] [%转换[!左值向右值]] [%右值[!左值转换为～]] [%左值]

[?change]
[:en] The result of a conditional expression, an assignment expression, or a
comma expression may be an lvalue.
[:zh_CN] 条件表达式、赋值表达式或逗号表达式的结果可以是左值。

[?rationale]
[:en] [=Cpp] is an object-oriented language, placing relatively more emphasis on lvalues.
[:zh_CN] [=Cpp] 是一种面向对象的语言，相对来说更加强调左值。

[:en] For example, function calls may yield lvalues.
[:zh_CN] 例如，函数调用可以产生左值。

[?effect]
[:en] Change to semantics of well-defined feature.
[:zh_CN] 改变了良定义的功能特性的语义。

[:en] Some C expressions that implicitly rely on lvalue-to-rvalue conversions
will yield different results.
[:zh_CN] 一些隐含地依赖于左值向右值转换的 C 表达式可能会产生不同的结果。

[begin:example]
[codeblock]
char arr[100];
sizeof(0, arr)
[codeblock:end]
[:en@~] yields [`100] in [=Cpp] and [`sizeof(char*)] in C.
[:zh_CN@~] 在 [=Cpp] 中产生 [`100] 但在 C 中产生 [`sizeof(char*)]。
[end:example]

[?difficulty]
[:en] Programs must add explicit casts to the appropriate rvalue.
[:zh_CN] 程序必须为适当的右值添加显式转型。

[?howwide]
[:en] Rare.
[:zh_CN] 罕见。
