[section#diff.cpp23.temp
    [:en] [#temp]: templates
    [:zh_CN] [#temp]：模板
]

[para:diff] [#dcl.constr]
[?change]
[:en] Some atomic constraints become fold expanded constraints.
[:zh_CN] 一些原子约束变为折叠展开约束。

[?rationale]
[:en] Permit the subsumption of fold expressions.
[:zh_CN] 允许折叠表达式的纳入关系。

[?effect]
[:en] Valid [=CppXXIII] code may become ill-formed.
[:zh_CN] 有效 [=CppXXIII] 代码可能变为非良构。

[begin:example]
[codeblock]
template <typename ...V> struct A;
struct S {
  static constexpr int compare(const S&) { return 1; }
};

template <typename ...T, typename ...U>
void f(A<T ...> *, A<U ...> *)
requires (T::compare(U{}) && ...);      // [:en] was well-formed (atomic constraint of type [`bool]), \
                                        [:zh_CN] 之前良构（[`bool] 类型的原子约束），
                                        // [:en@~] now ill-formed (results in an atomic constraint of type [`int]) \
                                        [:zh_CN] 现在非良构（产生一个 [`int] 类型的原子约束）
void g(A<S, S> *ap) {
  f(ap, ap);
}
[codeblock:end]
[end:example]
