[section#diff.special
    [:en] Clause [#special]: special member functions
    [:zh_CN] 第 [#special] 章：特殊成员函数
]

[para:~] [#class.copy]
[=Change]
[:en] Copying volatile objects.
[:zh_CN] 复制 [`volatile] 对象。

[para:~]
[:en] The implicitly-declared copy constructor and implicitly-declared copy
assignment operator cannot make a copy of a volatile lvalue.
[:zh_CN] 隐式声明的复制构造函数和隐式声明的复制赋值运算符不能创建 [`volatile]
左值的副本。

[:en] For example, the following is valid in ISO C:
[:zh_CN] 例如，以下代码在 ISO C 中有效：

[codeblock]
struct X { int i; };
volatile struct X x1 = {0};
struct X x2 = x1;               // [:en] invalid [=Cpp]
                                // [|:zh_CN] [=Cpp] 中无效
struct X x3;
x3 = x1;                        // [:en] also invalid [=Cpp]
                                // [|:zh_CN] [=Cpp] 中也无效
[codeblock:end]

[=Rationale]
[:en] Several alternatives were debated at length.
[:zh_CN] 曾经对几种方案进行长时间的讨论。

[:en] Changing the parameter to [`volatile const X&] would greatly complicate
the generation of efficient code for class objects.
[:zh_CN] 如果把形参改为 [`volatile const X&]，将会使为类对象生成高效的代码大为
复杂化。

[:en] Discussion of providing two alternative signatures for these
implicitly-defined operations raised unanswered concerns about creating
ambiguities and complicating the rules that specify the formation of these
operators according to the bases and members.
[:zh_CN] 有关为这些隐式声明的操作提供两种候选签名的讨论，提出了一些未能解决的
问题，有关这样做会导致歧义，并复杂化了根据其基类和成员来给出这些运算符的形式
的规则。

[=Effect]
[:en] Deletion of semantically well-defined feature.
[:zh_CN] 删除了有良好定义语义的功能特性。

[=Difficulty]
[:en] Semantic transformation.
[:zh_CN] 语义转换。

[:en] If volatile semantics are required for the copy, a user-declared
constructor or assignment must be provided.
[:zh_CN] 如果 [`volatile] 语义对于复制有必要性，则必须为其提供用户声明的构造函数
或赋值。

[:en] If non-volatile semantics are required, an explicit [`const_cast] can be
used.
[:zh_CN] 如果需要的是非 [`volatile] 语义，则可以使用显式的 [`const_cast]。

[=HowWide]
[:en] Seldom.
[:zh_CN] 少见。
