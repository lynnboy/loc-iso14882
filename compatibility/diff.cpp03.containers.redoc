[section#diff.cpp03.containers
    [:en] [#containers]: containers library
    [:zh_CN] [#containers]：容器库
]

[para:diff] [#container.requirements]
[?change]
[:en] Complexity of [`size()] member functions now constant.
[:zh_CN] [`size()] 成员函数的复杂度现在是常量。

[?rationale]
[:en] Lack of specification of complexity of [`size()] resulted in divergent
implementations with inconsistent performance characteristics.
[:zh_CN] 缺乏对 [`size()] 的复杂性的说明导致具有不一致的性能特征的差异性的实现。

[?effect]
[:en] Some container implementations that conform to [=CppIII] may not conform
to the specified [`size()] requirements in this International Standard.
[:zh_CN] 一些遵从 [=CppIII] 的容器实现可能不遵从本国际标准中为 [`size()] 所指定
的规定。

[:en] Adjusting containers such as [`std::list] to the stricter requirements may
require incompatible changes.
[:zh_CN] 将诸如 [`std::list] 这样的容器调整到更严格的规定可能要求不兼容的改动。

[para:diff] [#container.requirements]
[?change]
[:en] Requirements change: relaxation.
[:zh_CN] 规定的改变：放宽。

[?rationale]
[:en] Clarification.
[:zh_CN] 使之明确。

[?effect]
[:en] Valid [=CppIII] code that attempts to meet the specified container
requirements may now be over-specified.
[:zh_CN] 试图满足所指定的容器规定的有效 [=CppIII] 代码，现在可能是过度限制的。

[:en] Code that attempted to be portable across containers may need to be
adjusted as follows:
[:zh_CN] 试图在不同容器中可移植的代码可能需要进行下列调整：

[list]
[item]
[:en] not all containers provide [`size()]; use [`empty()] instead of
[`size() == 0];
[:zh_CN] 并非所有容器都提供 [`size()]；使用 [`empty()] 来代替 [`size() == 0]；
[item]
[:en] not all containers are empty after construction ([`array]);
[:zh_CN] 并非所有容器在构造之后都为空（[`array]）；
[item]
[:en] not all containers have constant complexity for [`swap()] ([`array]).
[:zh_CN] 并非所有容器都具有常量复杂度的 [`swap()]（[`array]）。
[list:end]

[para:diff] [#container.requirements]
[?change]
[:en] Requirements change: default constructible.
[:zh_CN] 规定的改变：可默认构造。

[?rationale]
[:en] Clarification of container requirements.
[:zh_CN] 厘清容器规定。

[?effect]
[:en] Valid [=CppIII] code that attempts to explicitly instantiate a container
using a user-defined type with no default constructor may fail to compile.
[:zh_CN] 试图使用没有默认构造函数的用户定义的类型来显式实例化容器的有效
[=CppIII] 代码可能无法编译。

[para:diff] [#sequence.reqmts], [#associative.reqmts]
[?change]
[:en] Signature changes: from [`void] return types.
[:zh_CN] 签名改变：[`void] 返回类型。

[?rationale]
[:en] Old signature threw away useful information that may be expensive
to recalculate.
[:zh_CN] 旧的签名扔掉了有用信息，它们的重新计算可能是昂贵的。

[?effect]
[:en] The following member functions have changed:
[:zh_CN] 下列成员函数被改变：

[list]
[item]
[:en] [`erase(iter)] for [`set], [`multiset], [`map], [`multimap]
[:zh_CN] [`set]、[`multiset]、[`map] 和 [`multimap] 的 [`erase(iter)]
[item]
[:en] [`erase(begin, end)] for [`set], [`multiset], [`map], [`multimap]
[:zh_CN] [`set]、[`multiset]、[`map] 和 [`multimap] 的 [`erase(begin, end)]
[item]
[:en] [`insert(pos, num, val)] for [`vector], [`deque], [`list], [`forward_list]
[:zh_CN] [`vector]、[`deque]、[`list] 和 [`forward_list] 的
[`insert(pos, num, val)]
[item]
[:en] [`insert(pos, beg, end)] for [`vector], [`deque], [`list], [`forward_list]
[:zh_CN] [`vector]、[`deque]、[`list] 和 [`forward_list] 的
[`insert(pos, beg, end)]
[list:end]

[:en] Valid [=CppIII] code that relies on these functions returning [`void]
(e.g., code that creates a pointer to member function that points to one
of these functions) will fail to compile with this International Standard.
[:zh_CN] 依赖于这些函数返回 [`void]（比如，代码创建成员指针使其指向这些函数之一）
的有效 [=CppIII] 代码，在本国际标准中可能无法编译。

[para:diff] [#sequence.reqmts], [#associative.reqmts]
[?change]
[:en] Signature changes: from [`iterator] to [`const_iterator] parameters.
[:zh_CN] 签名改变：[`iterator] 形参改为 [`const_iterator] 形参。

[?rationale]
[:en] Overspecification.
[:zh_CN] 过度规定。

[?effect]
[:en] The signatures of the following member functions changed from taking an
[`iterator] to taking a [`const_iterator]:
[:zh_CN] 下列成员函数的签名，从接受 [`iterator] 被改变为接受 [`const_iterator]：

[list]
[item]
[:en] [`insert(iter, val)] for [`vector], [`deque], [`list], [`set],
[`multiset], [`map], [`multimap]
[:zh_CN] [`vector]、[`deque]、[`list]、[`multiset]、[`map] 和 [`multimap] 的
[`insert(iter, val)]
[item]
[:en] [`insert(pos, beg, end)] for [`vector], [`deque], [`list], [`forward_list]
[:zh_CN] [`vector]、[`deque]、[`list] 和 [`forward_list] 的
[`insert(pos, beg, end)]
[item]
[:en] [`erase(begin, end)] for [`set], [`multiset], [`map], [`multimap]
[:zh_CN] [`set]、[`multiset]、[`map] 和 [`multimap] 的 [`erase(begin, end)]
[item]
[:en] all forms of [`list::splice]
[:zh_CN] 所有形式的 [`list::splice]
[item]
[:en] all forms of [`list::merge]
[:zh_CN] 所有形式的 [`list::merge]
[list:end]

[:en] Valid [=CppIII] code that uses these functions may fail to compile with
this International Standard.
[:zh_CN] 使用这些函数的有效 [=CppIII] 代码，在本国际标准中可能无法编译。

[para:diff] [#sequence.reqmts], [#associative.reqmts]
[?change]
[:en] Signature changes: [`resize].
[:zh_CN] 签名改变：[`resize]。

[?rationale]
[:en] Performance, compatibility with move semantics.
[:zh_CN] 性能，与移动语义的兼容性。

[?effect]
[:en] For [`vector], [`deque], and [`list] the fill value passed to [`resize] is
now passed by reference instead of by value, and an additional overload of
[`resize] has been added.
[:zh_CN] 对于 [`vector]、[`deque] 和 [`list]，传递给 [`resize] 的值现在按引用
传递而不是按值传递，并且添加了一个额外的 [`resize] 重载。

[:en] Valid [=CppIII] code that uses this function may fail to compile with this
International Standard.
[:zh_CN] 使用这个函数的有效 [=CppIII] 代码，在本国际标准中可能无法编译。
