[section#diff.cpp11.expr
    [:en] Clause [#expr]: expressions
    [:zh_CN] 第 [#expr] 章：表达式
]

[para:~] [#expr.cond]
[=Change]
[:en] A conditional expression with a throw expression as its second or third
operand keeps the type and value category of the other operand.
[:zh_CN] 以 [`throw] 表达式作为其第二或第三个操作数的条件表达式，维持另一个
操作数的类型和值类别。

[=Rationale]
[:en] Formerly mandated conversions (lvalue-to-rvalue ([#conv.lval]),
array-to-pointer ([#conv.array]), and function-to-pointer ([#conv.func])
standard conversions), especially the creation of the temporary due to
lvalue-to-rvalue conversion, were considered gratuitous and surprising.
[:zh_CN] 之前必须进行的转换（左值向右值（[#conv.lval]）、数组向指针
（[#conv.array]）和函数向指针（[#conv.func]）标准转换），尤其是由于左值向右值
转换所创建的临时对象，被认为既无理由也出人意料。

[=Effect]
[:en] Valid [=CppXI] code that relies on the conversions may behave differently
in this International Standard:
[:zh_CN] 依赖于这种转换的有效 [=CppXI] 代码，在本国际标准中可能有不同行为：

[codeblock]
struct S {
  int x = 1;
  void mf() { x = 2; }
};
int f(bool cond) {
  S s;
  (cond ? s : throw 0).mf();
  return s.x;
}
[codeblock:end]

[:en] In [=CppXI], [`f(true)] returns [`1].
[:zh_CN] 在 [=CppXI] 中，[`f(true)] 返回 [`1]。

[:en] In this International Standard, it returns [`2].
[:zh_CN] 在本国际标准中它返回 [`2]。

[codeblock]
sizeof(true ? "" : throw 0)
[codeblock:end]

[:en] In [=CppXI], the expression yields [`sizeof(const char*)].
[:zh_CN] 在 [=CppXI] 中，表达式产生 [`sizeof(const char*)]。

[:en] In this International Standard, it yields [`sizeof(const char`[1`])].
[:zh_CN] 在本国际标准中它产生 [`sizeof(const char`[1`])]。
