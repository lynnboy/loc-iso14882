[section#diff.cpp20.expr
    [:en] [#expr]: expressions
    [:zh_CN] [#expr]：表达式
]

[para:diff] [#expr.prim.id.unqual]
[?change]
[:en] Change move-eligible [~id-expression]s from lvalues to xvalues.
[:zh_CN] 将可移动的[~标识表达式]从左值改为临限值。

[?rationale]
[:en] Simplify the rules for implicit move.
[:zh_CN] 简化隐式移动的规则。

[?effect]
[:en] Valid [=CppXX] code that relies on a returned [~id-expression][=']s being
an lvalue may change behavior or fail to compile.
[:zh_CN] 依赖于返回的[~标识表达式]是左值的有效 [=CppXX] 代码可能改变行为或无法编译。

[begin:example]
[codeblock]
decltype(auto) f(int&& x) { return (x); }       // [:en] returns [`int&&]; previously returned [`int&] \
                                                [:zh_CN] 返回 [`int&&]；之前返回 [`int&]
int& g(int&& x) { return x; }                   // [:en] ill-formed; previously well-formed \
                                                [:zh_CN] 非良构；之前良构
[codeblock:end]
[end:example]

[para:diff] [#expr.sub]
[?change]
[:en] Change the meaning of comma in subscript expressions.
[:zh_CN] 改变下标表达式中逗号的含义。

[?rationale]
[:en] Enable repurposing a deprecated syntax to support multidimensional indexing.
[:zh_CN] 使能够为一种已摒弃语法赋予新的用途，以支持多维数组的索引。

[?effect]
[:en] Valid [=CppXX] code that uses a comma expression within a subscript
expression may fail to compile.
[:zh_CN] 在下标表达式中使用逗号表达式的有效 [=CppXX] 代码可能无法编译。

[begin:example]
[codeblock]
arr[1, 2]               // [:en] was equivalent to [`arr`[(1, 2)`]], \
                        [:zh_CN] 等价于 [`arr`[(1, 2)`]]，
                        // [:en@~] now equivalent to [`arr.operator`[`](1, 2)] or ill-formed \
                        [:zh_CN@~] 现在则等价于 [`arr.operator`[`](1, 2)] 或者非良构
[codeblock:end]
[end:example]
