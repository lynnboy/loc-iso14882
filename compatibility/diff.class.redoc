[section#diff.class
    [:en] [#class]: classes
    [:zh_CN] [#class]：类
]

[para:diff]
[:en] [#class.name] [=`[]see also [#dcl.typedef][=`]]
[:zh_CN] [#class.name] [=`[]另见 [#dcl.typedef][=`]]

[?change]
[:en] In [=Cpp], a class declaration introduces the class name into the scope
where it is declared and hides any object, function or other declaration of that
name in an enclosing scope.
[:zh_CN] 在 [=Cpp] 中，类的声明式将类名引入到其所声明的作用域中并隐藏外围作用域
中这个名字的任何对象、函数或其他声明式。

[:en] In C, an inner scope declaration of a struct tag name never hides the name
of an object or function in an outer scope.
[:zh_CN] 在 C 中，内部作用域中的结构体标签名声明式从来不会隐藏外部作用域的对象或
函数的名字。

[:en] Example:
[:zh_CN] 例：

[codeblock]
int x[99];
void f() {
  struct x { int a; };
  sizeof(x);  /* [:en] size of the array in C \
                 [:zh_CN] C 中为数组的大小 */
  /* [:en] size of the struct in [=Cpp] \
     [zh_CN] [=Cpp] 中为结构体的大小 */
}
[codeblock:end]

[?rationale]
[:en] This is one of the few incompatibilities between C and [=Cpp] that can be
attributed to the new [=Cpp] name space definition where a name can be declared
as a type and as a non-type in a single scope causing the non-type name to hide
the type name and requiring that the keywords [`class], [`struct], [`union] or
[`enum] be used to refer to the type name.
[:zh_CN] 这是可以归因于新的 [=Cpp] 名字空间定义所造成的 C 和 [=Cpp] 之间的
不兼容性之一，在一个作用域中将一个名字同时声明为一个类型和一个非类型时，将导致
非类型名隐藏类型名，并需要使用关键字 [`class]、[`struct]、[`union] 或 [`enum]
来涉指类型名。

[:en] This new name space definition provides important notational conveniences
to [=Cpp] programmers and helps making the use of the user-defined types as
similar as possible to the use of fundamental types.
[:zh_CN] 这个新的名字空间定义为 [=Cpp] 程序员提供了重要的写法便利性，并有助于
使得用户定义的类型的用法尽可能与基础类型的用法相似。

[:en] The advantages of the new name space definition were judged to outweigh by
far the incompatibility with C described above.
[:zh_CN] 新名字空间定义的优势经过了权衡，认为比上述的与 C 的不兼容性更加重要。

[?effect]
[:en] Change to semantics of well-defined feature.
[:zh_CN] 改变了有良好定义的功能特性的语义。

[?difficulty]
[:en] Semantic transformation.
[:zh_CN] 语义转换。

[:en] If the hidden name that needs to be accessed is at global scope, the [`::]
[=Cpp] operator can be used.
[:zh_CN] 如果所要访问的被隐藏的名字处于全局作用域，则可以使用 [=Cpp] 的 [`::]
运算符。

[:en] If the hidden name is at block scope, either the type or the struct tag
has to be renamed.
[:zh_CN] 如果隐藏的名字处于块作用域，则类型或结构体标签必须被重命名。

[?howwide]
[:en] Seldom.
[:zh_CN] 少见。

[para:diff] [#class.copy.ctor]
[?change]
[:en] Copying volatile objects.
[:zh_CN] 复制 [`volatile] 对象。

[para:~]
[:en] The implicitly-declared copy constructor and implicitly-declared copy
assignment operator cannot make a copy of a volatile lvalue.
[:zh_CN] 隐式声明的复制构造函数和隐式声明的复制赋值运算符不能创建 [`volatile]
左值的副本。

[:en] For example, the following is valid in ISO C:
[:zh_CN] 例如，以下代码在 ISO C 中有效：

[codeblock]
struct X { int i; };
volatile struct X x1 = {0};
struct X x2 = x1;               // [:en] invalid [=Cpp] \
                                   [:zh_CN] [=Cpp] 中无效
struct X x3;
x3 = x1;                        // [:en] also invalid [=Cpp] \
                                   [:zh_CN] [=Cpp] 中也无效
[codeblock:end]

[?rationale]
[:en] Several alternatives were debated at length.
[:zh_CN] 曾经对几种方案进行长时间的讨论。

[:en] Changing the parameter to [`volatile const X&] would greatly complicate
the generation of efficient code for class objects.
[:zh_CN] 如果把形参改为 [`volatile const X&]，将会使为类对象生成高效的代码大为
复杂化。

[:en] Discussion of providing two alternative signatures for these
implicitly-defined operations raised unanswered concerns about creating
ambiguities and complicating the rules that specify the formation of these
operators according to the bases and members.
[:zh_CN] 有关为这些隐式声明的操作提供两种候选签名的讨论，提出了一些未能解决的
问题，有关这样做会导致歧义，并复杂化了根据其基类和成员来给出这些运算符的形式
的规则。

[?effect]
[:en] Deletion of semantically well-defined feature.
[:zh_CN] 删除了有良好定义语义的功能特性。

[?difficulty]
[:en] Semantic transformation.
[:zh_CN] 语义转换。

[:en] If volatile semantics are required for the copy, a user-declared
constructor or assignment must be provided.
[:zh_CN] 如果 [`volatile] 语义对于复制有必要性，则必须为其提供用户声明的构造函数
或赋值。

[:en] If non-volatile semantics are required, an explicit [`const_cast] can be
used.
[:zh_CN] 如果需要的是非 [`volatile] 语义，则可以使用显式的 [`const_cast]。

[?howwide]
[:en] Seldom.
[:zh_CN] 少见。

[para:diff] [#class.bit]

[?change]
[:en]
[%bit-field[!implementation-defined sign of]]
Bit-fields of type plain [`int] are signed.
[:zh_CN]
[%位字段[!由实现定义的～的符号]]
普通 [`int] 类型的位字段是有符号的。

[?rationale]
[:en] Leaving the choice of signedness to implementations could lead to
inconsistent definitions of template specializations.
[:zh_CN] 将符号性的选择留给实现可能导致模板特化式定义的不一致。

[:en] For consistency, the implementation freedom was eliminated for
non-dependent types, too.
[:zh_CN] 为保持一致性，同样摒除了实现对非待决类型的自由度。

[?effect]
[:en] The choice is implementation-defined in C, but not so in [=Cpp].
[:zh_CN] 这项选择在 C 中时由实现定义的，但在 [=Cpp] 中并非如此。

[?difficulty]
[:en] Syntactic transformation.
[:zh_CN] 语法转换。

[?howwide]
[:en] Seldom.
[:zh_CN] 少见。

[para:diff] [#class.nest]

[?change]
[:en] In [=Cpp], the name of a nested class is local to its enclosing class.
[:zh_CN] 在 [=Cpp] 中，嵌套类的名字局部于其外围类。

[:en] In C the name of the nested class belongs to the same scope as the name of
the outermost enclosing class.
[:zh_CN] 在 C 中，嵌套类的名字则属于其最外层外围类的名字所在的相同作用域。

[:en] Example:
[:zh_CN] 例：

[codeblock]
struct X {
  struct Y { /* ... */ } y;
};
struct Y yy;                    // [:en] valid C, invalid [=Cpp] \
                                   [:zh_CN] 在 C 中有效，在 [=Cpp] 中无效
[codeblock:end]

[?rationale]
[:en] [=Cpp] classes have member functions which require that classes establish
scopes.
[:zh_CN] [=Cpp] 的类中带有成员函数，这需要类设立作用域。

[:en] The C rule would leave classes as an incomplete scope mechanism which
would prevent [=Cpp] programmers from maintaining locality within a class.
[:zh_CN] C 的规则使得类成为一种不完整的作用域机制，这将妨碍 [=Cpp] 程序员在一个
类中维护其局部性。

[:en] A coherent set of scope rules for [=Cpp] based on the C rule would be very
complicated and [=Cpp] programmers would be unable to predict reliably the
meanings of nontrivial examples involving nested or local functions.
[:zh_CN] 基于 C 规则为 [=Cpp] 建立一组协调的作用域规则可能会非常复杂，而 [=Cpp]
程序员可能无法可靠地预测涉及嵌套或局部函数的不平凡的例子的确切含义。

[?effect]
[:en] Change to semantics of well-defined feature.
[:zh_CN] 改变了有良好定义的功能特性的语义。

[?difficulty]
[:en] Semantic transformation.
[:zh_CN] 语义转换。

[:en] To make the struct type name visible in the scope of the enclosing struct,
the struct tag could be declared in the scope of the enclosing struct, before
the enclosing struct is defined.
[:zh_CN] 为使结构体类型的名字在外围结构体所在作用域可见，可以在外围结构体所在
作用域中，在外围结构体的定义之前声明其结构体标签。

[:en] Example:

[codeblock]
struct Y;                       // [:en] [`struct Y] and [`struct X] are at the same scope \
                                   [:zh_CN] [`struct Y] 和 [`struct X] 处于相同作用域
struct X {
  struct Y { /* ... */ } y;
};
[codeblock:end]

[:en] All the definitions of C struct types enclosed in other struct definitions
and accessed outside the scope of the enclosing struct could be exported to the
scope of the enclosing struct.
[:zh_CN] 所有包含在其他结构体定义式中的 C 结构体类型的定义式，如果在其外围结构体
所在作用域之外访问，都应当被导出到外围结构体所在作用域中。

[:en] Note: this is a consequence of the difference in scope rules, which is
documented in [#basic.scope].
[:zh_CN] 注意：这是由作用域规则的差异所得出的结论，其在 [#basic.scope] 中说明。

[?howwide]
[:en] Seldom.
[:zh_CN] 少见。

[para:diff] [#class.nested.type]

[?change]
[:en] In [=Cpp], a typedef name may not be redeclared in a class definition
after being used in that definition.
[:zh_CN] 在 [=Cpp] 中，typedef 名在一个类定义式中被使用之后就不能被重新声明。

[:en] Example:
[:zh_CN] 例：

[codeblock]
typedef int I;
struct S {
  I i;
  int I;            // [:en] valid C, invalid [=Cpp] \
                       [:zh_CN] 在 C 中有效，在 [=Cpp] 中无效
};
[codeblock:end]

[?rationale]
[:en] When classes become complicated, allowing such a redefinition after the
type has been used can create confusion for [=Cpp] programmers as to what the
meaning of [`I] really is.
[:zh_CN] 如果类变得复杂，允许在其被使用之后进行这样的重新定义，将会使 [=Cpp]
程序员对于 [`I] 的真正含义到底是什么觉得混乱。

[?effect]
[:en] Deletion of semantically well-defined feature.
[:zh_CN] 删除了有良好定义语义的功能特性。

[?difficulty]
[:en] Semantic transformation.
[:zh_CN] 语义转换。

[:en] Either the type or the struct member has to be renamed.
[:zh_CN] 类型或者结构体成员之一必须被重命名。

[?howwide]
[:en] Seldom.
[:zh_CN] 少见。
