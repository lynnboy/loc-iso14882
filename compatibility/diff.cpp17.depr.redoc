[section#diff.cpp17.depr
    [:en] [#depr]: compatibility features
    [:zh_CN] [#depr]：兼容性功能特性
]

[para:nodiff]
[?change]
[:en] Remove [`uncaught_exception].
[:zh_CN] 移除 [`uncaught_exception]。

[?rationale]
[:en] The function did not have a clear specification when multiple exceptions
were active, and has been superseded by [`uncaught_exceptions].
[:zh_CN] 当多个异常同时活跃时，没有对该函数的清晰规定，且它已经被
[`uncaught_exceptions] 所取代。

[?effect]
[:en] A valid [=CppXVII] program that calls [`std::uncaught_exception] may fail
to compile.
[:zh_CN] 调用了 [`std::uncaught_exception] 的有效 [=CppXVII] 程序可能无法编译。

[:en] It can be revised to use [`std::uncaught_exceptions] instead, for clear
and portable semantics.
[:zh_CN] 可以将之修订为代之以使用 [`std::uncaught_exceptions] 以获得更清晰和
可移植的语义。

[para:nodiff]
[?change]
[:en] Remove support for adaptable function API.
[:zh_CN] 移除对可适配函数 API 的支持。

[?rationale]
[:en] The deprecated support relied on a limited convention that could not be
extended to support the general case or new language features.
[:zh_CN] 这种被摒弃的支持依赖于一种有限制的约定，无法予以扩展以支持一般情况或
新的语言功能。

[:en] It has been superseded by direct language support with [`:key decltype],
and by the [`std::bind] and [`std::not_fn] function templates.
[:zh_CN] 它已经被语言直接支持的 [`:key decltype] 和函数模板 [`std::bind] 和
[`std::not_fn] 所取代。

[?effect]
[:en] A valid [=CppXVII] program that relies on the presence of [`result_type],
[`argument_type], [`first_argument_type], or [`second_argument_type] in a
standard library class may fail to compile.
[:zh_CN] 依赖于标准程序库的某个类中存在 [`result_type]、[`argument_type]、
[`first_argument_type] 或 [`second_argument_type] 的有效 [=CppXVII] 程序可能无法
编译。

[:en] A valid [=CppXVII] program that calls [`not1] or [`not2], or uses the
class templates [`unary_negate] or [`binary_negate], may fail to compile.
[:zh_CN] 调用了 [`not1] 或 [`not2]，或者使用了类模板 [`unary_negate] 或
[`binary_negate] 的有效 [=CppXVII] 程序可能无法编译。

[para:nodiff]
[?change]
[:en] Remove redundant members from [`std::allocator].
[:zh_CN] 移除 [`std::allocator] 的多余成员。

[?rationale]
[:en] [`std::allocator] was overspecified, encouraging direct usage in user
containers rather than relying on [`std::allocator_traits], leading to poor
containers.
[:zh_CN] [`std::allocator] 曾被过度规定，鼓励而在用户容器中直接使用而非依赖于
[`std::allocator_traits]，这导致不良的容器。

[?effect]
[:en] A valid [=CppXVII] program that directly makes use of the [`pointer],
[`const_pointer], [`reference], [`const_reference], [`rebind], [`address],
[`construct], [`destroy], or [`max_size] members of [`std::allocator], or that
directly calls [`allocate] with an additional hint argument, may fail to compile.
[:zh_CN] 直接使用 [`std::allocator] 的 [`pointer]，[`const_pointer]，
[`reference]，[`const_reference]，[`rebind]，[`address]，[`construct]，
[`destroy]，或者 [`max_size] 等各成员，或者以一个额外的提示形参直接调用其
[`allocate] 成员的有效 [=CppXVII] 程序可能无法编译。

[para:nodiff]
[?change]
[:en] Remove [`raw_storage_iterator].
[:zh_CN] 移除 [`raw_storage_iterator]。

[?rationale]
[:en] The iterator encouraged use of potentially-throwing algorithms, but did
not return the number of elements successfully constructed, as would be
necessary to destroyed them.
[:zh_CN] 这个迭代器鼓励使用潜在抛出的算法，但并不返回成功构造的元素数量，但其为
销毁它们所必须。

[?effect]
[:en] A valid [=CppXVII] program that uses this iterator class may fail to
compile.
[:zh_CN] 使用这种迭代器类的有效 [=CppXVII] 程序可能无法编译。

[para:nodiff]
[?change]
[:en] Remove temporary buffers API.
[:zh_CN] 移除临时缓冲区 API。

[?rationale]
[:en] The temporary buffer facility was intended to provide an efficient
optimization for small memory requests, but there is little evidence this was
achieved in practice, while requiring the user to provide their own
exception-safe wrappers to guard use of the facility in many cases.
[:zh_CN] 临时缓冲区功能的意图是为小型内存请求提供高效优化，但很少有证据支持这在
实践中可以做到，却要求用户提供其自己的异常安全包装以在许多情况中为使用这种功能
而进行防卫。

[?effect]
[:en] A valid [=CppXVII] program that calls [`get_temporary_buffer] or
[`return_temporary_buffer] may fail to compile.
[:zh_CN] 调用 [`get_temporary_buffer] 或 [`return_temporary_buffer] 的有效
[=CppXVII] 程序可能无法编译。

[para:nodiff]
[?change]
[:en] Remove [`shared_ptr::unique].
[:zh_CN] 移除 [`shared_ptr::unique]。

[?rationale]
[:en] The result of a call to this member function is not reliable in the
presence of multiple threads and weak pointers.
[:zh_CN] 对这个成员函数调用的结果在多线程和弱指针的情况下是不可靠的。

[:en] The member function [`use_count] is similarly unreliable, but has a
clearer contract in such cases, and remains available for well-defined use in
single-threaded cases.
[:zh_CN] 成员函数 [`use_count] 也类似地不可靠，但在这些情况下具有更清晰的契约，
并在单线程情况下维持具有恰当定义的可用性。

[?effect]
[:en] A valid [=CppXVII] program that calls [`unique] on a [`shared_ptr] object
may fail to compile.
[:zh_CN] 在 [`shared_ptr] 对象上调用 [`unique] 的有效 [=CppXVII] 程序可能无法
编译。

[para:diff] [#depr.meta.types]
[?change]
[:en] Remove deprecated type traits.
[:zh_CN] 移除被摒弃的类型特征。

[?rationale]
[:en] The traits had unreliable or awkward interfaces.
[:zh_CN] 这些特征具有不可靠或别扭的接口。

[:en] The [`is_literal_type] trait provided no way to detect which subset of
constructors and member functions of a type were declared [`:key constexpr].
[:zh_CN] [`is_literal_type] 特征没有提供检测类型的哪个构造函数和成员函数的子集
被声明为 [`:key constexpr] 的方法。

[:en] The [`result_of] trait had a surprising syntax that did not directly
support function types.
[:zh_CN] [`result_of] 特征具有使人意外的语法，它并不直接支持函数类型。

[:en] It has been superseded by the [`invoke_result] trait.
[:zh_CN] 它已被 [`invoke_result] 特征所取代。

[?effect]
[:en] A valid [=CppXVII] program that relies on the [`is_literal_type] or
[`result_of] type traits, on the [`is_literal_type_v] variable template,
or on the [`result_of_t] alias template may fail to compile.
[:zh_CN] 依赖于类型特征 [`is_literal_type] 或 [`result_of]，依赖于变量模板
[`is_literal_type_v]，或者依赖于别名模板 [`result_of_t] 的有效 [=CppXVII] 程序
可能无法编译。
