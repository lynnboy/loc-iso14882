[section#diff.cpp14.dcl.dcl
    [:en] [#dcl.dcl]: declarations
    [:zh_CN] [#dcl.dcl]：声明式
]

[para:diff] [#dcl.stc]
[:en] [%[`register] storage class]
[:zh_CN] [%[`register] 存储类]
[?change]
[:en] Removal of [`register] [~storage-class-specifier].
[:zh_CN] 移除[~存储类说明符] [`register]。

[?rationale]
[:en] Enable repurposing of deprecated keyword in future revisions of this
International Standard.
[:zh_CN] 准备在本国际标准的未来版本中为被摒弃的关键字重新设定功能。

[?effect]
[:en] A valid [=CppXIV] declaration utilizing the [`register]
[~storage-class-specifier] is ill-formed in this International Standard.
[:zh_CN] 使用[~存储类说明符] [`register] 的有效 [=CppXIV] 声明式，在本国际标准中
非良构。

[:en] The specifier can simply be removed to retain the original meaning.
[:zh_CN] 可以直接移除这个说明符并保持其原有含义。

[para:diff] [#dcl.spec.auto]
[?change]
[:en] [`auto] deduction from [~braced-init-list].
[:zh_CN] 从[~花括号初始化列表]进行 [`auto] 推断。

[?rationale]
[:en] More intuitive deduction behavior.
[:zh_CN] 更自然的推断行为。

[?effect]
[:en] Valid [=CppXIV] code may fail to compile or may change meaning
in this International Standard.
[:zh_CN] 有效的 [=CppXIV] 代码在本国际标准中可能无法编译或者改变其含义。

[:en] For example:
[:zh_CN] 例如：

[codeblock]
auto x1{1};         // [:en] was [`std::initializer_list<int>], now [`int] \
                       [:zh_CN] 原来是 [`std::initializer_list<int>]，现在是 [`int]
auto x2{1, 2};      // [:en] was [`std::initializer_list<int>], now ill-formed \
                       [:zh_CN] 原来是 [`std::initializer_list<int>]，现在非良构
[codeblock:end]

[para:diff] [#dcl.fct]
[?change]
[:en] Make exception specifications be part of the type system.
[:zh_CN] 使异常说明成为类型相同的一部分。

[?rationale]
[:en] Improve type-safety.
[:zh_CN] 改进类型安全性。

[?effect]
[:en] Valid [=CppXIV] code may fail to compile or change meaning in this
International Standard.
[:zh_CN] 有效的 [=CppXIV] 代码在本国际标准中可能无法编译或改变其含义。

[:en] For example:
[:zh_CN] 例如：

[codeblock]
void g1() noexcept;
void g2();
template<class T> int f(T *, T *);
int x = f(g1, g2);              // [:en] ill-formed; previously well-formed \
                                   [:zh_CN] 非良构；之前则良构
[codeblock:end]

[para:diff] [#dcl.init.aggr]
[?change]
[:en] Definition of an aggregate is extended to apply to user-defined types with
base classes.
[:zh_CN] 对聚合的定义扩展到适用于带有基类的用户定义类型。

[?rationale]
[:en] To increase convenience of aggregate initialization.
[:zh_CN] 增加聚合初始化的便利性。

[?effect]
[:en] Valid [=CppXIV] code may fail to compile or produce different results in
this International Standard; initialization from an empty initializer list will
perform aggregate initialization instead of invoking a default constructor for
the affected types.
[:zh_CN] 有效的 [=CppXIV] 代码在本国际标准中可能无法编译或产生不同的结果；从空
初始化式列表进行初始化可能会实施聚合初始化而不是调用所影响类型的默认构造函数。

[:en] For example:
[:zh_CN] 例如：

[codeblock]
struct derived;
struct base {
  friend struct derived;
private:
  base();
};
struct derived : base {};

derived d1{};       // [:en] error. The code was well-formed in [=CppXIV]. \
                       [:zh_CN] 错误。这行代码在 [=CppXIV] 中是良构的。
derived d2;         // [:en] still OK \
                       [:zh_CN] 仍然 OK
[codeblock:end]
