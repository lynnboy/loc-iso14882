[section#diff.cpp11.dcl.dcl
    [:en] [#dcl.dcl]: declarations
    [:zh_CN] [#dcl.dcl]：声明式
]

[para:diff] [#dcl.constexpr]
[?change]
[:en] [`:key constexpr] non-static member functions are not implicitly
[`:key const] member functions.
[:zh_CN] [`:key constexpr] 的非静态成员函数并不隐含为 [`:key const] 成员函数。

[?rationale]
[:en] Necessary to allow [`:key constexpr] member functions to mutate the object.
[:zh_CN] 要允许 [`:key constexpr] 成员函数改动对象要求如此。

[?effect]
[:en] Valid [=CppXI] code may fail to compile in this revision of [=Cpp].
[:zh_CN] 有效的 [=CppXI] 代码在 [=Cpp] 的此版本中可能无法编译。

[:en] For example, the following code is valid in [=CppXI] but invalid in this
revision of [=Cpp] because it declares the same member function twice with
different return types:
[:zh_CN] 例如，以下代码在 [=CppXI] 中有效但在 [=Cpp] 的此版本中无效，因为它两次
声明了相同的成员函数并带有不同的返回类型：

[codeblock]
struct S {
  constexpr const int &f();
  int &f();
};
[codeblock:end]

[para:diff] [#dcl.init.aggr]
[?change]
[:en] Classes with default member initializers can be aggregates.
[:zh_CN] 带有默认成员初始化式的类可以是聚合。

[?rationale]
[:en] Necessary to allow default member initializers to be used by aggregate
initialization.
[:zh_CN] 为允许将默认成员初始化式用在聚合初始化中需要如此。

[?effect]
[:en] Valid [=CppXI] code may fail to compile or may change meaning in this
revision of [=Cpp].
[:zh_CN] 有效的 [=CppXI] 代码在 [=Cpp] 的此版本中可能无法编译或改变其含义。

[:en] For example:
[:zh_CN] 例如：

[codeblock]
struct S {          // [:en] Aggregate in [=CppXIV] onwards. \
                       [:zh_CN] 从 [=CppXIV] 开始是聚合。
  int m = 1;
};
struct X {
  operator int();
  operator S();
};
X a{};
S b{a};             // [:en] uses copy constructor in [=CppXI], \
                       [:zh_CN] 在 [=CppXI] 中使用复制构造函数，
                    // [:en@~] performs aggregate initialization in this revision of [=Cpp] \
                       [:zh_CN@~] 在 [=Cpp] 的此版本中进行聚合初始化
[codeblock:end]
