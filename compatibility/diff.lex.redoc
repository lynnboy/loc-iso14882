[section#diff.lex
    [:en] [#lex]: lexical conventions
    [:zh_CN] [#lex]：词法约定
]

[para:diff] [#lex.key]

[?change]
[:en] New Keywords.[br]
[:zh_CN] 新关键词。[br]

[:en] New keywords are added to [=Cpp]; see [#lex.key].
[:zh_CN] [=Cpp] 添加了新关键词；参见 [#lex.key]。

[?rationale]
[:en] These keywords were added in order to implement the new semantics of [=Cpp].
[:zh_CN] 添加这些关键词是为了实现 [=Cpp] 的新语义。

[?effect]
[:en] Change to semantics of well-defined feature.
[:zh_CN] 改变了良定义的功能特性的语义。

[:en] Any C programs that used any of these keywords as identifiers are not
valid [=Cpp] programs.
[:zh_CN] 使用任何这些关键词作为标识符的 C 程序，都不是有效的 [=Cpp] 程序。

[?difficulty]
[:en] Syntactic transformation.
[:zh_CN] 语法转换。

[:en] Converting one specific program is easy.
[:zh_CN] 转换一个特定的程序是容易的。

[:en] Converting a large collection of related programs takes more work.
[:zh_CN] 转换大量相关程序则需要更多工作。

[?howwide]
[:en] Common.
[:zh_CN] 常见。

[para:diff] [#lex.ccon]

[?change]
[:en] Type of [~character-literal] is changed from [`int] to [`char].
[:zh_CN] [~字符字面量]的类型从 [`int] 变为 [`char]。

[?rationale]
[:en] This is needed for improved overloaded function argument type matching.
[:zh_CN] 需要这样做来改进重载函数的实参类型匹配。

[begin:example]
[codeblock]
int function( int i );
int function( char c );

function( 'x' );
[codeblock:end]

[:en] It is preferable that this call match the second version of function
rather than the first.
[:zh_CN] 这个调用应当优先匹配函数的第二个版本而不是第一个。
[end:example]

[?effect]
[:en] Change to semantics of well-defined feature.
[:zh_CN] 改变了良定义的功能特性的语义。

[:en] C programs which depend on
[:zh_CN] 依赖于

[codeblock]
sizeof('x') == sizeof(int)
[codeblock:end]

[:en@~] will not work the same as [=Cpp] programs.
[:zh_CN@~] 的 C 程序将不会如 [=Cpp] 程序一样工作。

[?difficulty]
[:en] Simple.
[:zh_CN] 简单。

[?howwide]
[:en] Programs which depend upon [`sizeof('x')] are probably rare.
[:zh_CN] 依赖于 [`sizeof('x')] 的程序可能很罕见。

[para:diff] [#lex.string]
[?change]
[:en] Concatenated [~string-literal]s can no longer have conflicting [~encoding-prefix]es.
[:zh_CN] 进行拼接的[~字符串字面量]不再能具有相冲突的[~编码前缀]。

[?rationale]
[:en] Removal of non-portable feature.
[:zh_CN] 移除不可移植的功能特性。

[?effect]
[:en] Concatenation of [~string-literal]s with different [~encoding-prefix]es
is now ill-formed.
[:zh_CN] 带有不同[~编码前缀]的[~字符串字面量]的拼接现在非良构。

[?difficulty]
[:en] Syntactic transformation.
[:zh_CN] 语法转换。

[?howwide]
[:en] Seldom.
[:zh_CN] 少见。

[para:diff] [#lex.string]

[?change]
[:en] String literals made const. [br]
[:zh_CN] 字符串字面量变为 [`const]。 [br]

[:en] The type of a [~string-literal] is changed from [=lq]array of [`char][=rq]
to [=lq]array of [`const char][=rq].
[:zh_CN] [~字符串字面量]的类型从“[`char] 的数组”变为“[`const char] 的数组”。

[:][%UTF-8]
[:en] The type of a UTF-8 string literal is changed from [=lq]array of [`char][=rq]
to [=lq]array of [`const char8_t][=rq].
[:zh_CN] UTF-8 字符串字面量的类型从“[`char] 的数组”变为“[`const char8_t] 的数组”。

[:][%UTF-16]
[:en] The type of a UTF-16 string literal is changed from [=lq]array of
[^some-integer-type][=rq] to [=lq]array of [`const char16_t][=rq].
[:zh_CN] [`char16_t] 字符串字面量的类型从“[^某种整数类型]的数组”变为“[`const char16_t] 的数组”。

[:][%UTF-32]
[:en] The type of a UTF-32 string literal is changed from [=lq]array of
[^some-integer-type][=rq] to [=lq]array of [`const char32_t][=rq].
[:zh_CN] [`char32_t] 字符串字面量的类型从“[^某种整数类型]的数组”变为“[`const char32_t] 的数组”。

[:en] The type of a wide string literal is changed from
[=lq]array of [`:key wchar_t][=rq] to [=lq]array of [`const wchar_t][=rq].
[:zh_CN] 宽字符串字面量的类型从“[`:key wchar_t] 的数组”变为“[`const wchar_t] 的数组”。

[?rationale]
[:en] This avoids calling an inappropriate overloaded function, which might
expect to be able to modify its argument.
[:zh_CN] 这样做避免了调用不恰当的重载函数，它可能是期望能够修改其实参的函数。

[?effect]
[:en] Change to semantics of well-defined feature.
[:zh_CN] 改变了良定义的功能特性的语义。

[?difficulty]
[:en] Syntactic transformation.
[:zh_CN] 语法转换。

[:en] The fix is to add a cast:
[:zh_CN] 修正方式是添加转型：
[codeblock]
char* p = "abc";                // [:en] valid in C, invalid in [=Cpp] [:zh_CN] 在 C 中有效，在 [=Cpp] 中无效
void f(char*) {
  char* p = (char*)"abc";       // [:en] OK, cast added [:zh_CN] OK，添加了转型
  f(p);
  f((char*)"def");              // [:en] OK, cast added [:zh_CN] OK，添加了转型
}
[codeblock:end]

[?howwide]
[:en] Programs that have a legitimate reason to treat string literal objects
as potentially modifiable memory are probably rare.
[:zh_CN] 有正当原因将字符串字面量对象当做前缀可被改动的内存的程序可能很罕见。
