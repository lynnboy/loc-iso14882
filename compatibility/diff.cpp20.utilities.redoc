[section#diff.cpp20.utilities
    [:en] [#utilities]: general utilities library
    [:zh_CN] [#utilities]：通用工具库
]

[para:diff] [#format]
[?change]
[:en] Signature changes: [`format], [`format_to], [`vformat_to], [`format_to_n],
[`formatted_size].
[:zh_CN] 签名变化：[`format]，[`format_to]，[`vformat_to]，[`format_to_n]，
[`formatted_size]。

[:en] Removal of [`format_args_t].
[:zh_CN] 移除 [`format_args_t]。

[?rationale]
[:en] Improve safety via compile-time format string checks, avoid unnecessary
template instantiations.
[:zh_CN] 通过编译时格式字符串检查改进安全性，避免不必要的模板实例化。

[?effect]
[:en] Valid [=CppXX] code that contained errors in format strings or relied on
previous format string signatures or [`format_args_t] may become ill-formed.
[:zh_CN] 在格式字符串中包含错误，或者依赖于之前的格式字符串签名或
[`format_args_t] 的有效 [=CppXX] 代码，可能变为非良构。

[begin:example]
[codeblock]
auto s = std::format("{:d}", "I am not a number");      // [:en] ill-formed, [:zh_CN] 非良构，
                                                        // [:en@~] previously threw [`format_error] \
                                                        [:zh_CN@~] 之前会抛出 [`format_error]
[codeblock:end]
[end:example]

[para:diff] [#format]
[?change]
[:en] Signature changes: [`format], [`format_to], [`format_to_n],
[`formatted_size].
[:zh_CN] 签名变化：[`format]，[`format_to]，[`format_to_n]，[`formatted_size]。

[?rationale]
[:en] Enable formatting of views that do not support iteration when
const-qualified and that are not copyable.
[:zh_CN] 使得不支持在 const 限定时进行迭代的视图和不能复制的视图可以进行格式化。

[?effect]
[:en] Valid [=CppXX] code that passes bit-fields to formatting functions
may become ill-formed.
[:zh_CN] 将位字段传递给格式化函数的有效 [=CppXX] 代码，可能变为非良构。

[begin:example]
[codeblock]
struct tiny {
  int bit: 1;
};

auto t = tiny();
std::format("{}", t.bit);       // [:en] ill-formed, previously returned [`"0"] \
                                [:zh_CN] 非良构，之前返回 [`"0"]
[codeblock:end]
[end:example]

[para:diff] [#format.string.std]
[?change]
[:en] Restrict types of formatting arguments used as [~@fmt width] or
[~@fmt precision] in a [~@fmt std-format-spec].
[:zh_CN] 限制了用作[~@fmt 标准格式说明]中[~@fmt 宽度]或[~@fmt 精度]的格式化实参
的类型。

[?rationale]
[:en] Disallow types that do not have useful or portable semantics as
a formatting width or precision.
[:zh_CN] 禁止没有有意义或可移植语义的类型作为格式化宽度或精度。

[?effect]
[:en] Valid [=CppXX] code that passes a boolean or character type as
[~@fmt arg-id] becomes invalid.
[:zh_CN] 将布尔或字符类型作为[~@fmt 实参标识]的类型传递的有效 [=CppXX] 代码变为
无效。

[begin:example]
[codeblock]
std::format("{:*^{}}", "", true);   // [:en] ill-formed, previously returned [`"*"] \
                                    [:zh_CN] 非良构，之前返回 [`"*"]
std::format("{:*^{}}", "", '1');    // [:en] ill-formed, previously returned an \
                                    [:zh_CN] 非良构，之前返回
                                    // [:en@~] implementation-defined number of [`'*'] characters \
                                    [:zh_CN@~] 由实现定义的数量的 [`'*'] 字符
[codeblock:end]
[end:example]

[para:diff] [#format.formatter.spec]
[?change]
[:en] Removed the [`formatter] specialization:
[:zh_CN] 移除 [`formatter] 特化式：
[codeblock]
template<size_t N> struct formatter<const charT[N], charT>;
[codeblock:end]

[?rationale]
[:en] The specialization is inconsistent with the design of [`formatter],
which is intended to be instantiated only with cv-unqualified object types.
[:zh_CN] 该特化式与 [`formatter] 的设计不一致，其本意仅用于对 cv 未限定的对象
类型实例化。

[?effect]
[:en] Valid [=CppXX] code that instantiated the removed specialization
can become ill-formed.
[:zh_CN] 实例化被移除特化式的有效 [=CppXX] 代码变得非良构。
