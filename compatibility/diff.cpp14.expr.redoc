[section#diff.cpp14.expr
    [:en] [#expr]: expressions
    [:zh_CN] [#expr]：表达式
]

[para:diff] [#expr.post.incr], [#expr.pre.incr]
[?change]
[:en] Remove increment operator with [`bool] operand.
[:zh_CN] 移除带有 [`bool] 操作数的增量运算符。

[?rationale]
[:en] Obsolete feature with occasionally surprising semantics.
[:zh_CN] 过时的功能特性，偶尔会带有让人意外的语义。

[?effect]
[:en] A valid [=CppXIV] expression utilizing the increment operator on a [`bool]
lvalue is ill-formed in this revision of [=Cpp].
[:zh_CN] 对 [`bool] 左值使用增量运算符的有效的 [=CppXIV] 表达式，在 [=Cpp] 的
此版本中非良构。

[:en] Note that this might occur when the lvalue has a type given by a template
parameter.
[:zh_CN] 注意，这可能发生于当左值具有由模板形参给出的类型时。

[para:diff] [#expr.new], [#expr.delete]
[?change]
[:en] Dynamic allocation mechanism for over-aligned types.
[:zh_CN] 针对过量对齐类型的动态分配机制。

[?rationale]
[:en] Simplify use of over-aligned types.
[:zh_CN] 简化过量对齐类型的使用。

[?effect]
[:en] In [=CppXIV] code that uses a [~new-expression] to allocate an object with
an over-aligned class type, where that class has no allocation functions of its
own, [`::operator new(std::size_t)] is used to allocate the memory.
[:zh_CN] 在使用一个 [~new-表达式]来分配具有过量对齐的类类型的对象的 [=CppXIV]
代码，其中该类没有自己的分配函数，将使用 [`::operator new(std::size_t)] 来分配其
内存。

[:en] In this revision of [=Cpp],
[`::operator new(std::size_t, std::align_val_t)] is used instead.
[:zh_CN] 在 [=Cpp] 的此版本中，代之以使用
[`::operator new(std::size_t, std::align_val_t)]。
