[section#diff.cpp14.decl
    [:en] Clause [#dcl.decl]: declarators
    [:zh_CN] 第 [#dcl.decl] 章：声明符
]

[para:~] [#dcl.fct]
[=Change]
[:en] Make exception specifications be part of the type system.
[:zh_CN] 使异常说明成为类型相同的一部分。

[=Rationale]
[:en] Improve type-safety.
[:zh_CN] 改进类型安全性。

[=Effect]
[:en] Valid [=CppXIV] code may fail to compile or change meaning in this
International Standard:
[:zh_CN] 有效的 [=CppXIV] 代码在本国际标准中可能无法编译或改变其含义。

[codeblock]
void g1() noexcept;
void g2();
template<class T> int f(T *, T *);
int x = f(g1, g2);    // [:en] ill-formed; previously well-formed
                      // [|:zh_CN] 非良构；之前则良构
[codeblock:end]

[para:~] [#dcl.init.aggr]
[=Change]
[:en] Definition of an aggregate is extended to apply to user-defined types with
base classes.
[:zh_CN] 对聚合的定义扩展到适用于带有基类的用户定义类型。

[=Rationale]
[:en] To increase convenience of aggregate initialization.
[:zh_CN] 增加聚合初始化的便利性。

[=Effect]
[:en] Valid [=CppXIV] code may fail to compile or produce different results in
this International Standard; initialization from an empty initializer list will
perform aggregate initialization instead of invoking a default constructor for
the affected types:
[:zh_CN] 有效的 [=CppXIV] 代码在本国际标准中可能无法编译或产生不同的结果；从空
初始化式列表进行初始化可能会实施聚合初始化而不是调用所影响类型的默认构造函数：

[codeblock]
struct derived;
struct base {
  friend struct derived;
private:
  base();
};
struct derived : base {};

derived d1{};       // [:en] Error. The code was well-formed before.
                    // [|:zh_CN] 错误。这行代码之前是良构的。
derived d2;         // [:en] still OK
                    // [|:zh_CN] 仍然 OK
[codeblock:end]
