[section#diff.cpp23.expr
    [:en] [#expr]: expressions
    [:zh_CN] [#expr]：表达式
]

[para:diff] [#expr.arith.conv]
[?change]
[:en] Operations mixing a value of an enumeration type and a value of a different
enumeration type or of a floating-point type are no longer valid.
[:zh_CN] 一个枚举类型的值和一个不同的枚举类型或浮点类型的值的混合运算不再合法。

[?rationale]
[:en] Reinforcing type safety.
[:zh_CN] 增强类型安全性。

[?effect]
[:en] A valid [=CppXXIII] program that performs operations mixing a value of an
enumeration type and a value of a different enumeration type or of a
floating-point type is ill-formed.
[:zh_CN] 进行一个枚举类型的值和一个不同的枚举类型或浮点类型的值的混合运算的合法
[=CppXXIII] 变为非良构。

[begin:example]
[codeblock]
enum E1 { e };
enum E2 { f };
bool b = e <= 3.7;      // [:en] ill-formed; previously well-formed [:zh_CN] 非良构；之前为良构
int  k = f - e;         // [:en] ill-formed; previously well-formed [:zh_CN] 非良构；之前为良构
auto x = true ? e : f;  // [:en] ill-formed; previously well-formed [:zh_CN] 非良构；之前为良构
[codeblock:end]
[end:example]

[para:diff] [#expr.rel], [#expr.eq]
[?change]
[:en] Comparing two objects of array type is no longer valid.
[:zh_CN] 比较数组类型的两个对象不再合法。

[?rationale]
[:en] The old behavior was confusing since it compared not the contents of the
two arrays, but their addresses.
[:zh_CN] 旧行为令人迷惑，因为它比较的不是两个数组的内容而是其地址。

[?effect]
[:en] A valid [=CppXXIII] program directly comparing two array objects is
rejected as ill-formed in this document.
[:zh_CN] 直接比较两个数组对象的合法 [=CppXXIII] 程序在本文档中被拒绝为非良构。

[begin:example]
[codeblock]
int arr1[5];
int arr2[5];
bool same = arr1 == arr2;       // [:en] ill-formed; previously well-formed [:zh_CN] 非良构；之前为良构
bool idem = arr1 == +arr2;      // [:en] compare addresses [:zh_CN] 比较地址
bool less = arr1 < +arr2;       // [:en] compare addresses, unspecified result [:zh_CN] 比较地址，结果未指明
[codeblock:end]
[end:example]

[para:diff] [#expr.delete]
[?change]
[:en] Calling [`delete] on a pointer to an incomplete class is ill-formed.
[:zh_CN] 对指向不完整类的指针调用 [`delete] 非良构。

[?rationale]
[:en] Reduce undefined behavior.
[:zh_CN] 减少未定义行为。

[?effect]
[:en] A valid [=CppXXIII] program that calls [`delete] on an incomplete class
type is ill-formed.
[:zh_CN] 对不完整类类型调用 [`delete] 的合法 [=CppXXIII] 变为非良构。

[begin:example]
[codeblock]
struct S;

void f(S *p) {
  delete p;             // [:en] ill-formed; previously well-formed \
                        [:zh_CN] 非良构；之前为良构
}

struct S {};
[codeblock:end]
[end:example]
