[section#diff.cpp03.expr
    [:en] [#expr]: expressions
    [:zh_CN] [#expr]：表达式
]

[para:diff] [#conv.ptr]
[?change]
[:en] Only literals are integer null pointer constants.
[:zh_CN] 只有字面量才是整数空指针常量。

[?rationale]
[:en] Removing surprising interactions with templates and constant expressions.
[:zh_CN] 移除了模板和常量表达式之间的预期之外的交互情形。

[?effect]
[:en] Valid [=CppIII] code may fail to compile or produce different results in
this revision of [=Cpp].
[:zh_CN] 有效的 [=CppIII] 代码可能在 [=Cpp] 的此版本中无法编译或产生不同的结果。

[begin:example]
[codeblock]
void f(void *);     // #1
void f(...);        // #2
template<int N> void g() {
  f(0*N);           // [:en] calls #2; used to call #1 \
                    [:zh_CN] 调用 #2；以前调用的是 #1
}
[codeblock:end]
[end:example]

[para:diff] [#conv.typeid]
[?change]
[:en] Evaluation of operands in [`:key typeid].
[:zh_CN] [`:key typeid] 中操作数的求值。

[?rationale]
[:en] Introduce additional expression value categories.
[:zh_CN] 引入额外的表达式值类别。

[?effect]
[:en] Valid [=CppIII] code that uses xvalues as operands for [`:key typeid]
may change behavior in this revision of [=Cpp].
[:zh_CN] 把临限值用作 [`:key typeid] 的操作数的有效的 [=CppIII] 代码可能在 [=Cpp] 的
此版本中改变行为。

[begin:example]
[codeblock]
void f() {
  struct B {
    B() {}
    virtual ~B() { }
  };

  struct C { B b; };
  typeid(C().b);    // [:en] unevaluated in [=CppIII], evaluated in [=CppXI] \
                    [:zh_CN] [=CppIII] 中免求值，[=CppXI] 中求值
}
[codeblock:end]
[end:example]

[para:diff] [#expr.mul]
[?change]
[:en] Specify rounding for results of integer [`/] and [`%].
[:zh_CN] 为整数的 [`/] 和 [`%] 的结果指定了舍入规则。

[?rationale]
[:en] Increase portability, C99 compatibility.
[:zh_CN] 增加可移植性，C99 兼容性。

[?effect]
[:en] Valid [=CppIII] code that uses integer division rounds the result toward 0
or toward negative infinity, whereas this revision of [=Cpp] always rounds the
result toward 0.
[:zh_CN] 有效的 [=CppIII] 代码使用整数除法可能将其结果向 0 或向负无穷舍入，而
[=Cpp] 的此版本总是将结果向 0 舍入。

[para:diff] [#expr.log.and]
[?change]
[:en] [`&&] is valid in a [~type-name].
[:zh_CN] [~类型名]中 [`&&] 是有效的。

[?rationale]
[:en] Required for new features.
[:zh_CN] 新功能特性所需要。

[?effect]
[:en] Valid [=CppIII] code may fail to compile or produce different results in
this revision of [=Cpp].
[:zh_CN] 有效的 [=CppIII] 代码可能在 [=Cpp] 的此版本中无法编译或产生不同的结果。

[begin:example]
[codeblock]
bool b1 = new int && false;             // [:en] previously [`false], now ill-formed \
                                        [:zh_CN] 之前为 [`false]，现在非良构
struct S { operator int(); };
bool b2 = &S::operator int && false;    // [:en] previously [`false], now ill-formed \
                                        [:zh_CN] 之前为 [`false]，现在非良构
[codeblock:end]
[end:example]

[para:diff] [#expr.cond]
[?change]
[:en] Fewer copies in the conditional operator.
[:zh_CN] 条件运算符中发生更少的复制。

[?rationale]
[:en] Introduce additional expression value categories.
[:zh_CN] 引入额外的表达式值类别。

[?effect]
[:en] Valid [=CppIII] code that uses xvalues as operands for the conditional
operator may change behavior in this revision of [=Cpp].
[:zh_CN] 把临限值用作条件运算符的操作数的有效的 [=CppIII] 代码可能在 [=Cpp] 的此版本中
改变行为。

[begin:example]
[codeblock]
void f() {
  struct B {
    B() {}
    B(const B&) { }
  };
  struct D : B {};

  struct BB { B b; };
  struct DD { D d; };

  true ? BB().b : DD().d;       // [:en] additional copy in [=CppIII], no copy or move in [=CppXI] \
                                [:zh_CN] [=CppIII] 中进行额外的复制，[=CppXI] 中没有复制或移动
}
[codeblock:end]
[end:example]
