[section#diff.cpp17.lex
    [:en] [#lex]: lexical conventions
    [:zh_CN] [#lex]：词法约定
]

[para:diff] [#lex.header]
[?change]
[:en] [~header-name] tokens are formed in more contexts.
[:zh_CN] 可以在更多语境构成[~头文件名]记号。

[?rationale]
[:en] Required for new features.
[:zh_CN] 新功能特性的要求。

[?effect]
[:en] When the identifier [`import] is followed by a [`<] character, a
[~header-name] token may be formed.
[:zh_CN] 当标识符 [`import] 后面跟着一个 [`<] 字符时，可以构成一个[~头文件名]
记号。

[begin:example]
[codeblock]
template<typename> class import {};
import<int> f();                // [:en] ill-formed; previously well-formed \
                                   [:zh_CN] 非良构；之前是良构的
::import<int> g();              // OK
[codeblock:end]
[end:example]

[para:diff] [#lex.key]
[?change]
[:en] New keywords.
[:zh_CN] 新关键字。

[?rationale]
[:en] Required for new features
[:zh_CN] 新功能特性的要求。

[list]
[item]
[:en] The [`char8_t] keyword is added to differentiate the types of ordinary and
UTF-8 literals ([#lex.string]).
[:zh_CN] 添加 [`char8_t] 关键字以区分普通字面量和 UTF-8 字面量的类型
（[#lex.string]）。

[item]
[:en] The [`concept] keyword is added to enable the definition of concepts
([#temp.concept]).
[:zh_CN] 添加 [`concept] 关键字以允许对概念的定义（[#temp.concept]）。

[item]
[:en] The [`consteval] keyword is added to declare immediate functions
([#dcl.constexpr]).
[:zh_CN] 添加 [`concept] 关键字用以声明直接函数（[#dcl.constexpr]）。

[item]
[:en] The [`:key constinit] keyword is added to prevent unintended dynamic
initialization ([#dcl.constinit]).
[:zh_CN] 添加 [`:key constinit] 关键字用以避免非故意的动态初始化
（[#dcl.constinit]）。

[item]
[:en] The [`co_await], [`co_yield], and [`co_return] keywords are added to
enable the definition of coroutines ([#dcl.fct.def.coroutine]).
[:zh_CN] 添加 [`co_await]、[`co_yield] 和 [`co_return] 关键字用以启用对协程的
定义（[#dcl.fct.def.coroutine]）。

[item]
[:en] The [`requires] keyword is added to introduce constraints through a
[~requires-clause] or a [~requires-expression].
[:zh_CN] 添加 [`requires] 关键字以通过 [~requires-子句]或[~requires-表达式]引入
约束。
[list:end]

[?effect]
[:en] Valid [=CppXVII] code using [`char8_t], [`concept], [`consteval],
[`constinit], [`co_await], [`co_yield], [`co_return], or [`requires] as an
identifier is not valid in this International Standard.
[:zh_CN] 将 [`char8_t]、[`concept]、[`consteval]、[`constinit]、[`co_await]、
[`co_yield]、[`co_return] 或 [`requires] 用作标识符的有效的 [=CppXVII] 代码在
本国际标准中无效。

[para:diff] [#lex.operators]
[?change]
[:en] New operator [`<=>].
[:zh_CN] 新运算符 [`<=>]。

[?rationale]
[:en] Necessary for new functionality.
[:zh_CN] 新功能特性的要求。

[?effect]
[:en] Valid [=CppXVII] code that contains a [`<=] token immediately followed by
a [`>] token may be ill-formed or have different semantics in this International
Standard:
[:zh_CN] 包含一个 [`<=] 记号后面紧跟一个 [`>] 记号的有效 [=CppXVII] 代码，在本
国际标准中可能非良构或者具有不同语义。

[codeblock]
namespace N {
  struct X {};
  bool operator<=(X, X);
  template<bool(X, X)> struct Y {};
  Y<operator<=> y;              // [:en] ill-formed; previously well-formed \
                                   [:zh_CN] 非良构；之前是良构的
}
[codeblock:end]

[para:diff] [#lex.literal]
[?change]
[:en] Type of UTF-8 string and character literals.
[:zh_CN] UTF-8 字符串字面量和字符字面量的类型。

[?rationale]
[:en] Required for new features.
[:zh_CN] 新功能特性的要求。

[:en] The changed types enable function overloading, template specialization,
and type deduction to distinguish ordinary and UTF-8 string and character
literals.
[:zh_CN] 类型的改变允许函数重载、模板特化和类型推断对普通和 UTF-8 字符串和字符
字面量进行区分。

[?effect]
[:en] Valid ISO [=CppXVII] code that depends on UTF-8 string literals having
type [=lq]array of [`const char][=rq] and UTF-8 character literals having type
[=lq]char[=rq] is not valid in this International Standard.
[:zh_CN] 依赖于 UTF-8 字符串字面量具有类型“[`const char] 的数组”，以及 UTF-8
字符字面量具有类型“[`char]”的有效 ISO [=CppXVII] 代码，在本国际标准中无效。

[codeblock]
const auto *u8s = u8"text";     // [:en] [`u8s] previously deduced as [`const char*]; now deduced as [`const char8_t*] \
                                   [:zh_CN] [`u8s] 之前被推断为 [`const char*]；现在则被推断为 [`const char8_t*]
const char *ps = u8s;           // [:en] ill-formed; previously well-formed \
                                   [:zh_CN] 非良构；之前是良构的

auto u8c = u8'c';               // [:en] [`u8c] previously deduced as [`char]; now deduced as \tcode{char8_t} \
                                   [:zh_CN] [`u8c] 之前被推断为 [`char]；现在则被推断为 [`char8_t]
char *pc = &u8c;                // [:en] ill-formed; previously well-formed \
                                   [:zh_CN] 非良构；之前是良构的

std::string s = u8"text";       // [:en] ill-formed; previously well-formed \
                                   [:zh_CN] 非良构；之前是良构的

void f(const char *s);
f(u8"text");                    // [:en] ill-formed; previously well-formed \
                                   [:zh_CN] 非良构；之前是良构的

template<typename> struct ct;
template<> struct ct<char> {
  using type = char;
};
ct<decltype(u8'c')>::type x;    // [:en] ill-formed; previously well-formed. \
                                   [:zh_CN] 非良构；之前是良构的
[codeblock:end]
