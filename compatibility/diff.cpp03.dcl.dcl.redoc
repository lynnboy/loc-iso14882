[section#diff.cpp03.dcl.dcl
    [:en] [#dcl.dcl]: declarations
    [:zh_CN] [#dcl.dcl]：声明式
]

[para:diff] [#dcl.spec]
[?change]
[:en] Remove [`:key auto] as a storage class specifier.
[:zh_CN] 将 [`:key auto] 删除不再作为存储类说明符。

[?rationale]
[:en] New feature.
[:zh_CN] 新功能特性。

[?effect]
[:en] Valid [=CppIII] code that uses the keyword [`:key auto] as a storage class
specifier may be invalid in this revision of [=Cpp].
[:zh_CN] 使用关键字 [`:key auto] 作为存储类说明符的有效 [=CppIII] 代码，在 [=Cpp]
的此版本中无效。

[:en] In this revision of [=Cpp], [`:key auto] indicates that the type of a
variable is to be deduced from its initializer expression.
[:zh_CN] [=Cpp] 的此版本中，[`:key auto] 标明变量的类型将从其初始化式表达式中
推断出来。

[para:diff] [#dcl.init.list]
[?change]
[:en] Narrowing restrictions in aggregate initializers.
[:zh_CN] 对聚合初始化式的窄化限制。

[?rationale]
[:en] Catches bugs.
[:zh_CN] 依次捕捉 Bug。

[?effect]
[:en] Valid [=CppIII] code may fail to compile in this revision of [=Cpp].
[:zh_CN] 有效的 [=CppIII] 代码在 [=Cpp] 的此版本中可能无法编译。

[:en] For example, the following code is valid in [=CppIII] but invalid in this
revision of [=Cpp] because [`double] to [`int] is a narrowing conversion:
[:zh_CN] 例如，以下代码在 [=CppIII] 中有效，但在 [=Cpp] 的此版本中无效，因为
[`double] 向 [`int] 是一种窄化转换：

[codeblock]
int x[] = { 2.0 };
[codeblock:end]
