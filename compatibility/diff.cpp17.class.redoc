[section#diff.cpp17.class
    [:en] [#class]: classes
    [:zh_CN] [#class]：类
]

[para:diff] [#class.ctor], [#class.conv.fct]
[?change]
[:en] The class name can no longer be used parenthesized immediately after an
[`explicit] [~decl-specifier] in a constructor declaration.
[:zh_CN] 类名不再可以在构造函数声明式中紧跟[~声明说明符] [`explicit] 之后带括号
地使用。

[:en] The [~conversion-function-id] can no longer be used parenthesized
immediately after an [`explicit] [~decl-specifier] in a conversion function
declaration.
[:zh_CN] [~转换函数标识]不再可以在转换函数声明式中紧跟[~声明说明符] [`explicit]
之后带括号地使用。

[?rationale]
[:en] Necessary for new functionality.
[:zh_CN] 由新功能所要求。

[?effect]
[:en] Valid [=CppXVII] code may fail to compile in this International Standard.
[:zh_CN] 有效的 [=CppXVII] 代码在本国际标准中可能无法编译。

[:en] For example:
[:zh_CN] 例如：

[codeblock]
struct S {
  explicit (S)(const S&);       // [:en] ill-formed; previously well-formed \
                                   [:zh_CN] 非良构；之前是良构的
  explicit (operator int)();    // [:en] ill-formed; previously well-formed \
                                   [:zh_CN] 非良构；之前是良构的
  explicit(true) (S)(int);      // OK
};
[codeblock:end]

[para:diff] [#class.ctor], [#class.dtor]
[?change]
[:en] A [~simple-template-id] is no longer valid as the [~declarator-id] of a
constructor or destructor.
[:zh_CN] [~简单模板标识]不再能够作为构造函数或析构函数的有效[~声明符标识]。

[?rationale]
[:en] Remove potentially error-prone option for redundancy.
[:zh_CN] 移除了潜在易错的多余选项。

[?effect]
[:en] Valid [=CppXVII] code may fail to compile in this International Standard.
[:zh_CN] 有效的 [=CppXVII] 代码在本国际标准中可能无法编译。

[:en] For example:
[:zh_CN] 例如：

[codeblock]
template<class T>
struct A {
  A<T>();           // [:en] error: [~simple-template-id] not allowed for constructor \
                       [:zh_CN] 错误：不允许构造函数使用[~简单模板标识]
  A(int);           // [:en] OK, injected-class-name used \
                       [:zh_CN] OK，使用了注入类名
  ~A<T>();          // [:en] error: [~simple-template-id] not allowed for destructor \
                       [:zh_CN] 错误：不允许析构函数使用[~简单模板标识]
};
[codeblock:end]

[para:diff] [#class.copy.elision]
[?change]
[:en] A function returning an implicitly movable entity may invoke a constructor
taking an rvalue reference to a type different from that of the returned
expression.
[:zh_CN] 返回隐含可移动实体的函数，可能会调用接受到与所返回表达式不同类型的右值
引用的构造函数。

[:en] Function and catch-clause parameters can be thrown using move constructors.
[:zh_CN] 可以使用移动构造函数来抛出函数和捕获子句的形参。

[?rationale]
[:en] Side effect of making it easier to write more efficient code that takes
advantage of moves.
[:zh_CN] 这是使得更易于编写利用移动的优势而更高效的代码的副作用。

[?effect]
[:en] Valid [=CppXVII] code may fail to compile or have different semantics
in this International Standard.
[:zh_CN] 有效的 [=CppXVII] 代码在本国际标准中可能无法编译或具有不同的语义。

[:en] For example:
[:zh_CN] 例如：

[codeblock]
struct base {
  base();
  base(base const &);
private:
  base(base &&);
};

struct derived : base {};

base f(base b) {
  throw b;                      // [:en] error: [`base(base &&)] is private \
                                   [:zh_CN] 错误：[`base(base &&)] 是私有的
  derived d;
  return d;                     // [:en] error: [`base(base &&)] is private \
                                   [:zh_CN] 错误：[`base(base &&)] 是私有的
}

struct S {
  S(const char *s) : m(s) { }
  S(const S&) = default;
  S(S&& other) : m(other.m) { other.m = nullptr; }
  const char * m;
};

S consume(S&& s) { return s; }

void g() {
  S s("text");
  consume(static_cast<S&&>(s));
  char c = *s.m;                // [:en] undefined behavior; previously ok \
                                   [:zh_CN] 未定义行为；之前为 OK
}
[codeblock:end]
