[section#diff.cpp17.dcl.dcl
    [:en] [#dcl.dcl]: declarations
    [:zh_CN] [#dcl.dcl]：声明式
]

[para:diff] [#dcl.typedef]
[?change]
[:en] Unnamed classes with a typedef name for linkage purposes can contain only
C-compatible constructs.
[:zh_CN] 具有用于连接目的的 typedef 名的无名类只能包含与 C 兼容的语言构造。

[?rationale]
[:en] Necessary for implementability.
[:zh_CN] 为可实现性所必须。

[?effect]
[:en] Valid [=CppXVII] code may be ill-formed in this revision of [=Cpp].
[:zh_CN] 有效的 [=CppXVII] 代码在 [=Cpp] 的此版本中可能非良构。

[:en] For example:
[:zh_CN] 例如：

[codeblock]
typedef struct {
  void f() {}           // [:en] ill-formed; previously well-formed \
                        [:zh_CN] 非良构；之前是良构的
} S;
[codeblock:end]

[para:diff] [#dcl.fct.default]
[?change]
[:en] A function cannot have different default arguments in different
translation units.
[:zh_CN] 函数不能在不同翻译单元中具有不同的默认实参。

[?rationale]
[:en] Required for modules support.
[:zh_CN] 为模块支持所要求。

[?effect]
[:en] Valid [=CppXVII] code may be ill-formed in this revision of [=Cpp],
with no diagnostic required.
[:zh_CN] 有效的 [=CppXVII] 代码在 [=Cpp] 的此版本中可能非良构，无须诊断。

[:en] For example:
[:zh_CN] 例如：

[codeblock]
// [:en] Translation unit 1 \
[:zh_CN] 翻译单元 1
int f(int a = 42);
int g() { return f(); }

// [:en] Translation unit 2 \
[:zh_CN] 翻译单元 2
int f(int a = 76) { return a; }         // [:en] ill-formed, no diagnostic required; previously well-formed \
                                        [:zh_CN] 非良构，无须诊断；之前是良构的
int g();
int main() { return g(); }              // [:en] used to return 42 \
                                        [:zh_CN] 之前返回 42
[codeblock:end]

[para:diff] [#dcl.init.aggr]
[?change]
[:en] A class that has user-declared constructors is never an aggregate.
[:zh_CN] 带有用户声明构造函数的类不是聚合。

[?rationale]
[:en] Remove potentially error-prone aggregate initialization which may apply
notwithstanding the declared constructors of a class.
[:zh_CN] 移除了潜在易错的聚合初始化，其可能与类中所声明的构造函数不一致。

[?effect]
[:en] Valid [=CppXVII] code that aggregate-initializes a type with a
user-declared constructor may be ill-formed or have different semantics
in this revision of [=Cpp].
[:zh_CN] 对具有用户声明构造函数的类型进行聚合初始化的有效 [=CppXVII] 代码，在
[=Cpp] 此版本中可能非良构或具有不同的语义。

[:en] For example:
[:zh_CN] 例如：

[codeblock]
struct A {              // [:en] not an aggregate; previously an aggregate \
                        [:zh_CN] 并非聚合；之前是聚合和
  A() = delete;
};

struct B {              // [:en] not an aggregate; previously an aggregate \
                        [:zh_CN] 并非聚合；之前是聚合和
  B() = default;
  int i = 0;
};

struct C {              // [:en] not an aggregate; previously an aggregate \
                        [:zh_CN] 并非聚合；之前是聚合和
  C(C&&) = default;
  int a, b;
};

A a{};                  // [:en] ill-formed; previously well-formed \
                        [:zh_CN] 非良构；之前是良构的
B b = {1};              // [:en] ill-formed; previously well-formed \
                        [:zh_CN] 非良构；之前是良构的
auto* c = new C{2, 3};  // [:en] ill-formed; previously well-formed \
                        [:zh_CN] 非良构；之前是良构的

struct Y;

struct X {
  operator Y();
};

struct Y {              // [:en] not an aggregate; previously an aggregate \
                        [:zh_CN] 并非聚合；之前是聚合和
  Y(const Y&) = default;
  X x;
};

Y y{X{}};               // [:en] copy constructor call; previously aggregate-initialization \
                        [:zh_CN] 调用复制构造函数；之前是聚合初始化
[codeblock:end]

[para:diff] [#dcl.init.list]
[?change]
[:en] Boolean conversion from a pointer or pointer-to-member type is now a
narrowing conversion.
[:zh_CN] 从指针或成员指针类型进行的布尔转换现在是窄化转换。

[?rationale]
[:en] Catches bugs.
[:zh_CN] 处理漏洞。

[?effect]
[:en] Valid [=CppXVII] code may fail to compile in this revision of [=Cpp].
[:zh_CN] 有效 [=CppXVII] 代码在 [=Cpp] 的此版本中可能无法编译。

[:en] For example:
[:zh_CN] 例如：
[codeblock]
bool y[] = { "bc" };    // [:en] ill-formed; previously well-formed \
                        [:zh_CN] 非良构；之前是良构的
[codeblock:end]
