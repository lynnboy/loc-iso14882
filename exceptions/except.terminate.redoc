[section#except.terminate
    [:en] The [`std::terminate] function
    [:zh_CN] [`std::terminate] 函数
]

[para]
[%[`terminate]]
[:en] Some errors in a program cannot be recovered from, such as when an exception
is not handled or a [`std::thread] object is destroyed while its thread
function is still executing.
[:zh_CN] 程序中的一些错误是无法恢复的，比如异常未被处理，或者 [`std::thread] 对象
在其线程函数仍在执行时被销毁。

[:en] In such cases, the function [`std::terminate] ([#exception.terminate]) is invoked.
[:zh_CN] 这些情况下，将调用函数 [`std::terminate]（[#exception.terminate]）。

[begin:note]
[:en] These situations are:
[:zh_CN] 这些情况有：

[:en] [%[`terminate][!called]]
[:zh_CN] [%[`terminate][!调用]]
[list]
[item]
[:en] when the exception handling mechanism, after completing the initialization
of the exception object but before activation of a handler for the exception
([#except.throw]), calls a function that exits via an exception, or
[:zh_CN] 当对异常对象的初始化完成之后但在该异常的某个处理器开始活跃之前（[#except.throw]），
异常处理机制调用了某个以异常退出的函数时，或者

[item]
[:en] when the exception handling mechanism cannot find a handler for a thrown
exception ([#except.handle]), or
[:zh_CN] 当异常处理机制无法为所抛出的异常找到处理器时（[#except.handle]），或者

[item]
[:en] when the search for a handler ([#except.handle]) exits the function body of
a function with a non-throwing exception specification ([#except.spec]), including
when a contract-violation handler invoked from an evaluation of a function contract
assertion ([#basic.contract.eval]) associated with the function exits via an exception, or
[:zh_CN] 当搜索处理器（[#except.handle]）退出带有无抛出异常说明（[#except.spec]）
的函数的函数体时，包括因评估与函数关联的函数契约断言（[#basic.contract.eval]）
所调用的契约违例处理器以异常退出时，或者

[item]
[:en] when the destruction of an object during stack unwinding ([#except.ctor])
terminates by throwing an exception, or
[:zh_CN] 当在栈解退（[#except.ctor]）过程中某对象的销毁过程以抛出异常退出时，或者

[item]
[:en] when initialization of a non-block variable with static or thread storage
duration ([#basic.start.dynamic]) exits via an exception, or
[:zh_CN] 当带有静态或线程存储期的非块变量的初始化过程（[#basic.start.dynamic]）
以异常退出时，或者

[item]
[:en] when destruction of an object with static or thread storage duration exits
via an exception ([#basic.start.term]), or
[:zh_CN] 当带有静态或线程存储期的对象的销毁过程以异常退出时（[#basic.start.term]），或者

[item]
[:en] when execution of a function registered with [`std::atexit] or
[`std::at_quick_exit] exits via an exception ([#support.start.term]), or
[:zh_CN] 当用 [`std::atexit] 或 [`std::at_quick_exit] 登记的函数的执行以异常退出
时（[#support.start.term]），或者

[item]
[:en] when a [~throw-expression] ([#expr.throw]) with no operand attempts to
rethrow an exception and no exception is being handled ([#except.throw]), or
[:zh_CN] 当没有操作数的 [~throw-表达式]（[#expr.throw]）试图重新抛出异常，而没有
正在被处理的异常时（[#except.throw]），或者

[item]
[:en] when the function [`std::nested_exception::rethrow_nested] is called for
an object that has captured no exception ([#except.nested]), or
[:zh_CN] 当为某个并未捕获异常的对象调用 [`std::nested_exception::rethrow_nested]
函数时（[#except.nested]），或者

[item]
[:en] when execution of the initial function of a thread exits via an exception
([#thread.thread.constr]), or
[:zh_CN] 当线程的起始函数以异常退出时（[#thread.thread.constr]），或者

[item]
[:en] for a parallel algorithm whose [`ExecutionPolicy] specifies such behavior
([#execpol.seq], [#execpol.par], [#execpol.parunseq]), when execution of an
element access function ([#algorithms.parallel.defns]) of the parallel algorithm
exits via an exception ([#algorithms.parallel.exceptions]), or
[:zh_CN] 若并行算法的 [`ExecutionPolicy] 指定了这种行为（[#execpol.seq]，[#execpol.par]，
[#execpol.parunseq]），当该并行算法的元素访问函数（[#algorithms.parallel.defns]）
的执行以异常退出时（[#algorithms.parallel.exceptions]），或者

[item]
[:en] when the destructor or the move assignment operator is invoked on an
object of type [`std::thread] that refers to a joinable thread
([#thread.thread.destr], [#thread.thread.assign]), or
[:zh_CN] 当为代表可会合线程的 [`std::thread] 类型的对象调用其析构函数或移动赋值
运算符时（[#thread.thread.destr]，[#thread.thread.assign]），或者

[item]
[:en] when a call to a [`wait()], [`wait_until()], or [`wait_for()] function on
a condition variable ([#thread.condition.condvar], [#thread.condition.condvarany])
fails to meet a postcondition, or
[:zh_CN] 当对条件变量（[#thread.condition.condvar]，[#thread.condition.condvarany]）
所调用的 [`wait()]，[`wait_until()]，或 [`wait_for()] 函数无法满足其后条件时，或者

[item]
[:en] when a callback invocation exits via an exception when requesting stop on
a [`std::stop_source] or a [`std::inplace_stop_source] ([#stopsource.mem], [#stopsource.inplace.mem]),
or in the constructor of [`std::stop_callback] or [`std::inplace_stop_callback]
([#stopcallback.cons], [#stopcallback.inplace.cons]) when a callback invocation
exits via an exception, or
[:zh_CN] 当对 [`std::stop_source] 或 [`std::inplace_stop_source] 请求停止
（[#stopsource.mem]，[#stopsource.inplace.mem]）而回调函数调用以异常退出时，或者
在 [`std::stop_callback] 或 [`std::inplace_stop_callback] 的构造函数
（[#stopcallback.cons]，[#stopcallback.inplace.cons]）之内，当回调函数调用
以异常退出时，或者

[item]
[:en] when a [`run_loop] object is destroyed that is still in the [`running]
state ([#exec.run.loop]), or
[:zh_CN] 当仍处于 [`running] 状态的 [`run_loop] 对象被销毁时（[#exec.run.loop]），或者

[item]
[:en] when [`unhandled_stopped] is called on a [`with_awaitable_senders<T>]
object ([#exec.with.awaitable.senders]) whose continuation is not a handle to a
coroutine whose promise type has an [`unhandled_stopped] member function.
[:zh_CN] 若 [`with_awaitable_senders<T>] 对象（[#exec.with.awaitable.senders]）
的继续并非某个承诺类型带有 [`unhandled_stopped] 成员函数的协程的句柄，当对它调用
[`unhandled_stopped] 时。
[list:end]
[end:note]

[para]
[%[`terminate]]
[:en] In the situation where no matching handler is found, it is [?impldef stack
unwinding before invocation to [`std::terminate]] whether or not the stack is
unwound before [`std::terminate] is invoked.
[:zh_CN] 在没有找到匹配处理器的情况中，调用 [`std::terminate] 之前是否进行栈解退是
[?impldef 调用 [`std::terminate] 之前进行栈解退]。

[:en] In the situation where the search for a handler ([#except.handle]) exits
the function body of a function with a non-throwing exception specification
([#except.spec]), it is [?impldef whether stack is unwound before invoking the
function [`std::terminate] when a [`noexcept] specification is violated] whether
the stack is unwound, unwound partially, or not unwound at all before the
function [`std::terminate] is invoked.
[:zh_CN] 在搜索处理器（[#except.handle]）退出某个带有无抛出异常说明（[#except.spec]）
的函数的函数体的情况中，调用函数 [`std::terminate] 之前，栈是否完成解退，
是部分进行了解退，还是完全未解退，是[?impldef 当违反 [`noexcept] 说明时，
调用函数 [`std::terminate] 之前是否进行栈解退]。

[:en] In all other situations, the stack shall not be unwound before the
function [`std::terminate] is invoked.
[:zh_CN] 所有其他情况下，调用函数 [`std::terminate] 之前不应进行栈解退。

[:en] An implementation is not permitted to finish stack unwinding prematurely
based on a determination that the unwind process will eventually cause an
invocation of the function [`std::terminate].
[:zh_CN] 不允许实现基于确定栈解退过程最终将导致对函数 [`std::terminate] 的调用而
过早结束栈解退过程。
