[section#except.spec
    [:en] Exception specifications
    [:zh_CN] 异常说明

[%:begin#exception.specification
    [:en] exception specification
    [:zh_CN] 异常说明
]
]

[para]
[:en]
The predicate indicating whether a function cannot exit via an exception is
called the [+exception specification] of the function.
[:zh_CN]
指定函数是否能够以异常退出的谓词，称为该函数的[+异常说明]。

[:en]
If the predicate is false, the function has a
[%exception specification[!potentially-throwing]]
[+potentially-throwing exception specification[%
potentially-throwing[!exception specification]]],
otherwise it has a
[%exception specification[!non-throwing]]
[+non-throwing exception specification].
[:zh_CN]
当谓词为假时，函数具有
[%异常说明[!潜在抛出～]][+潜在抛出异常说明[%潜在抛出[!异常说明]]]，
否则它具有
[%异常说明[!无抛出～]][+无抛出异常说明]。

[:en]
The exception specification is either defined implicitly, or defined explicitly
by using a [~noexcept-specifier] as a suffix of a function declarator ([#dcl.fct]).
[:zh_CN]
异常说明可以隐式定义，也可以使用 [~noexcept-说明符]作为函数声明符的后缀来进行
显式定义。

[syntax]
[rule noexcept-specifier [:zh_CN] noexcept-说明符 ]
    [| [`:key noexcept] [`(] constant-expression [`)] ]
    [| [`:key noexcept] ]
[rule:end]
[syntax:end]

[:en]
[%exception specification[!noexcept[!constant expression and]]]
In a [~noexcept-specifier], the [~constant-expression], if supplied, shall be a
contextually converted constant expression of type [`:key bool] ([#expr.const]);
that constant expression is the exception specification of the function type in
which the [~noexcept-specifier] appears. 
[:zh_CN]
[%异常说明[!noexcept[!常量表达式与～]]]
在 [~noexcept-说明符]中，[~常量表达式]（如果提供）应当是按语境转换为 [`:key bool]
的常量表达式（[#expr.const]）；这个常量表达式就是包含这个 [~noexcept-说明符]的
函数类型的异常说明。

[:en]
A [`(] token that follows [`:key noexcept] is part of the [~noexcept-specifier]
and does not commence an initializer ([#dcl.init]).
[:zh_CN]
跟在 [`:key noexcept] 后面的 [`(] 记号是 [~noexcept-说明符]的一部分，而并不开始
一个初始化式（[#dcl.init]）。

[:en]
The [~noexcept-specifier] [`:key noexcept] without a [~constant-expression] is
equivalent to the [~noexcept-specifier] [`[`:key noexcept]([`:key true])].
[:zh_CN]
不带有[~常量表达式]的 [~noexcept-说明符] [`:key noexcept] 等价于
[~noexcept-说明符] [`[`:key noexcept]([`:key true])]。

[begin:example]
[codeblock]
void f() noexcept(sizeof(char[2])); // [:en] error: narrowing conversion of value 2 to type [`:key bool] \
                                    [:zh_CN] 错误：值 2 向类型 [`:key bool] 的窄化转换
void g() noexcept(sizeof(char));    // [:en] OK, conversion of value 1 to type [`:key bool] is non-narrowing \
                                    [:zh_CN] OK，值 1 向类型 [`:key bool] 的转换不是窄化
[codeblock:end]
[end:example]

[para]
[:en]
If a declaration of a function does not have a [~noexcept-specifier], the
declaration has a potentially throwing exception specification unless it is a
destructor or a deallocation function or is defaulted on its first declaration,
in which cases the exception specification is as specified below and no other
declaration for that function shall have a [~noexcept-specifier].
[:zh_CN]
若函数的声明式中没有 [~noexcept-说明符]，则它具有潜在抛出异常说明，除非它是析构
函数或回收函数，或者在其首个声明式中被预置，这种情况下其异常说明如下文所述，且
该函数的任何其他声明式均不能再带有 [~noexcept-说明符]。

[:en]
In an explicit instantiation ([#temp.explicit]) a [~noexcept-specifier] may be
specified, but is not required.
[:zh_CN]
在显式实例化式（[#temp.explicit]）中可以指定[~noexcept-说明符]，但并不是必须的。

[:en]
If a [~noexcept-specifier] is specified in an explicit instantiation,
the exception specification shall be the same as the exception specification of
all other declarations of that function.
[:zh_CN]
若在显式实例化中指定了 [~noexcept-说明符]，则这个异常说明应当与该函数的其他
所有声明式具有相同的异常说明。

[:en]
A diagnostic is required only if the exception specifications are not the same
within a single translation unit.
[:zh_CN]
仅当同一个翻译单元中的这些异常说明不相同时才需要进行诊断。

[para]
[:en]
[%exception specification[!virtual function and]]
If a virtual function has a non-throwing exception specification, all
declarations, including the definition, of any function that overrides that
virtual function in any derived class shall have a non-throwing exception
specification, unless the overriding function is defined as deleted.
[:zh_CN]
[%异常说明[!虚函数与～]]
若虚函数带有无抛出异常说明，则在任何派生类中覆盖了该虚函数的任何函数的所有声明式，
包括定义式，应当带有无抛出异常说明，除非覆盖函数被定义为弃置的。

[begin:example]
[codeblock]
struct B {
  virtual void f() noexcept;
  virtual void g();
  virtual void h() noexcept = delete;
};

struct D: B {
  void f();                     // [:en] error \
                                [:zh_CN] 错误
  void g() noexcept;            // OK
  void h() = delete;            // OK
};
[codeblock:end]

[:en]
The declaration of [`D::f] is ill-formed because it has a potentially-throwing
exception specification, whereas [`B::f] has a non-throwing exception
specification.
[:zh_CN]
[`D::f] 的声明式是非良构的，这是由于它具有潜在抛出异常说明，而 [`B::f] 却具有
无抛出异常说明。
[end:example]

[para]
[:en]
An expression [$E] is [+potentially-throwing[%potentially-throwing[!expression]]]
if
[:zh_CN]
符合以下条件的表达式 [$E] 是[+潜在抛出的[%潜在抛出[!异常]]]：

[list]
[item]
[:en]
[$E] is a function call ([#expr.call]) whose [~postfix-expression] has a
function type, or a pointer-to-function type, with a potentially-throwing
exception specification, or
[:zh_CN]
[$E] 是函数调用（[#expr.call]），其[~后缀表达式]所具有的函数类型或函数指针类型，
具有潜在抛出异常说明，或者

[item]
[:en]
[$E] implicitly invokes a function (such as an overloaded operator, an
allocation function in a [~new-expression], a constructor for a function
argument, or a destructor if [$E] is a full-expression ([#intro.execution]))
that has a potentially-throwing exception specification, or
[:zh_CN]
[$E] 隐式调用了某个具有潜在抛出异常说明的函数（比如重载运算符，[~new-表达式]中的
分配函数，函数实参的构造函数，或者当 [$E] 是全表达式（[#intro.execution]）时的
析构函数），或者

[item]
[:en]
[$E] is a [~throw-expression] ([#expr.throw]), or
[:zh_CN]
[$E] 是 [~throw-表达式]（[#expr.throw]），或者

[item]
[:en]
[$E] is a [`:key dynamic_cast] expression that casts to a reference type and
requires a runtime check ([#expr.dynamic.cast]), or
[:zh_CN]
[$E] 是转型为引用类型并需要运行时检查的 [`:key dynamic_cast] 表达式
（[#expr.dynamic.cast]），或者

[item]
[:en]
[$E] is a [`:key typeid] expression applied to a (possibly parenthesized)
built-in unary [`*] operator applied to a pointer to a polymorphic class type
([#expr.typeid]), or
[:zh_CN]
[$E] 是 [`:key typeid] 表达式（[#expr.typeid]），施加于（可能带有括号的）内建的
一元 [`*] 运算符，后者施加于一个指向多态类类型的指针，或者

[item]
[:en]
any of the immediate subexpressions ([#intro.execution]) of [$E] is
potentially-throwing.
[:zh_CN]
[$E] 有任何直接子表达式（[#intro.execution]）是潜在抛出的。
[list:end]

[para]
[:en]
An implicitly-declared constructor for a class [`X], or a constructor without a
[~noexcept-specifier] that is defaulted on its first declaration, has a
potentially-throwing exception specification if and only if any of the following
constructs is potentially-throwing:
[:zh_CN]
类 [`X] 的隐式声明的构造函数，或者某个在其首个声明式被预置的没有
[~noexcept-说明符]的构造函数，当且仅当有任意下列构造为潜在抛出时，具有潜在抛出
异常说明：

[list]
[item]
[:en]
the invocation of a constructor selected by overload resolution in the implicit
definition of the constructor for class [`X] to initialize a potentially
constructed subobject, or
[:zh_CN]
类 [`X] 的隐式定义中，由重载决议选择用以初始化潜在构造子对象的构造函数的调用，
或者

[item]
[:en]
a subexpression of such an initialization, such as a default argument expression,
or,
[:zh_CN]
这种初始化中的子表达式，比如默认实参表达式，或者

[item]
[:en]
for a default constructor, a default member initializer.
[:zh_CN]
对于默认构造函数，其默认成员初始化式。
[list:end]

[begin:note]
[:en]
Even though destructors for fully-constructed subobjects are invoked when an
exception is thrown during the execution of a constructor ([#except.ctor]),
their exception specifications do not contribute to the exception specification
of the constructor, because an exception thrown from such a destructor would
call the function [`std::terminate] rather than escape the constructor
([#except.throw], [#except.terminate]).
[:zh_CN]
虽然在构造函数的执行中抛出异常时也会调用完全构造的子对象的析构函数
（[#except.ctor]），但它们的异常说明并不会对构造函数的异常说明有贡献，这是因为从
这种析构函数抛出的异常将会调用函数 [`std::terminate] 而不会脱离这个构造函数
（[#except.throw]，[#except.terminate]）。
[end:note]

[para]
[:en]
The exception specification for an implicitly-declared destructor, or a
destructor without a [~noexcept-specifier], is potentially-throwing if and only
if any of the destructors for any of its potentially constructed subojects is
potentially-throwing or the destructor is virtual and the destructor of any
virtual base class has a potentially-throwing exception specification.
[:zh_CN]
隐式声明的析构函数或没有 [~noexcept-说明符]的析构函数，当且仅当有任何潜在构造的
子对象的任何析构函数潜在抛出时，或其析构函数是虚函数且有任何虚基类的析构函数带有
潜在抛出的异常说明时，其异常说明是潜在抛出的。

[para]
[:en]
The exception specification for an implicitly-declared assignment operator, or
an assignment-operator without a [~noexcept-specifier] that is defaulted on its
first declaration, is potentially-throwing if and only if the invocation of any
assignment operator in the implicit definition has a potentially-throwing
exception specification.
[:zh_CN]
隐式声明的赋值运算符，或者首个声明式被预置的没有 [~noexcept-说明符]的赋值运算符，
当且仅当其隐式定义中所调用的任何赋值运算符带有潜在抛出的异常说明时，其异常说明是
潜在抛出的。

[para]
[:en]
A deallocation function ([#basic.stc.dynamic.deallocation]) with no explicit
[~noexcept-specifier] has a non-throwing exception specification.
[:zh_CN]
没有明确的 [~noexcept-说明符]的回收函数（[#basic.stc.dynamic.deallocation]），
具有无抛出异常说明。

[para]
[:en]
The exception specification for a comparison operator function ([#over.binary])
without a [~noexcept-specifier] that is defaulted on its first declaration is
potentially-throwing if and only if any expression in the implicit definition is
potentially-throwing.
[:zh_CN]
没有 [~noexcept-说明符]并在其首个声明式被预置的比较运算符函数（[#over.binary]），
当且仅当其隐式定义式中的任何表达式潜在抛出时，其异常说明是潜在抛出的。

[para]
[begin:example]
[codeblock]
struct A {
  A(int = (A(5), 0)) noexcept;
  A(const A&) noexcept;
  A(A&&) noexcept;
  ~A();
};
struct B {
  B() noexcept;
  B(const B&) = default;        // [:en] implicit exception specification is [`[`:key noexcept]([`:key true])] \
                                [:zh_CN] 隐含的异常说明为 [`[`:key noexcept]([`:key true])]
  B(B&&, int = (throw 42, 0)) noexcept;
  ~B() noexcept(false);
};
int n = 7;
struct D : public A, public B {
    int * p = new int[n];
    // [:en] [`D::D()] potentially-throwing, as the [`:key new] operator may throw [`bad_alloc] or [`bad_array_new_length] \
    [:zh_CN] [`D::D()] 潜在抛出，因为 [`:key new] 运算符可能抛出 [`bad_alloc] 或 [`std::bad_array_new_length]
    // [:en] [`D::D(const D&)] non-throwing \
    [:zh_CN] [`D::D(const D&)] 无抛出
    // [:en] [`D::D(D&&)] potentially-throwing, as the default argument for [`B][=']s constructor may throw \
    [:zh_CN] [`D::D(D&&)] 潜在抛出，因为 [`B] 的构造函数的默认实参可能抛出异常
    // [:en] [`D::~D()] potentially-throwing \
    [:zh_CN] [`D::~D()] 潜在抛出
};
[codeblock:end]

[:en]
Furthermore, if [`A::~A()] were virtual, the program would be ill-formed since a
function that overrides a virtual function from a base class shall not have a
potentially-throwing exception specification if the base class function has a
non-throwing exception specification.
[:zh_CN]
此外，如果 [`A::~A()] 是虚函数，则程序将是非良构的，因为当基类的虚函数具有无抛出
异常说明时，覆盖了基类中的虚函数的函数不能具有潜在抛出异常说明。
[end:example]

[para]
[:en]
An exception specification is considered to be [+needed [%needed[!exception
specification]]] when:
[:zh_CN]
以下情况下，认为[+需要[%需要[!异常说明]]]一个异常说明：

[list]
[item]
[:en] in an expression, the function is selected by overload resolution
([#basic.lookup], [#over.match], [#over.over]);
[:zh_CN] 在表达式中，该函数由重载决议所选择（[#basic.lookup]，[#over.match]，
[#over.over]）；

[item]
[:en] the function is odr-used ([#term.odr.use]) or, if it appears in an
unevaluated operand, would be odr-used if the expression were
potentially-evaluated;
[:zh_CN] 该函数被 ODR 式使用（[#term.odr.use]），或若它出现于免求值操作数中，当
该表达式被潜在求值时将被 ODR 式使用；

[item]
[:en] the exception specification is compared to that of another declaration
(e.g., an explicit specialization or an overriding virtual function);
[:zh_CN] 将其异常说明与另一个声明式（例如显式特化式或覆盖虚函数）进行比较；

[item]
[:en] the function is defined; or
[:zh_CN] 该函数被定义；或者

[item]
[:en] the exception specification is needed for a defaulted function that calls
the function.
[:zh_CN] 调用了该函数的预置函数需要其异常说明。

[begin:note]
[:en]
A defaulted declaration does not require the exception specification of a base
member function to be evaluated until the implicit exception specification of
the derived function is needed, but an explicit [~noexcept-specifier] needs the
implicit exception specification to compare against.
[:zh_CN]
预置的声明式不必对基类成员函数的异常说明求值，除非需要派生函数的隐含异常说明，
但显式 [~noexcept-说明符]需要隐含的异常说明以进行比较。
[end:note]
[list:end]

[:en]
The exception specification of a defaulted function is evaluated as described
above only when needed; similarly, the [~noexcept-specifier] of a specialization
of a function template or member function of a class template is instantiated
only when needed.
[:zh_CN]
预置函数的异常说明仅在需要时才根据上文进行求值；相似地，函数模板或类模板的成员
函数特例的 [~noexcept-说明符]仅在需要时才被实例化。

[%:end#exception.specification]
