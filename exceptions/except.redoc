[section:chapter#except
    [:en] Exception handling
    [:zh_CN] 异常处理
[%:begin#exception.handling
    [:en] exception handling
    [:zh_CN] 异常处理
]
]

[/
\gramSec[gram.except]{Exception handling}
/]

[% [:en] exception object[%exception handling[!exception object]]
   [:zh_CN] 异常对象[%异常处理[!异常对象]] ]
[% [:en] object [!exception][%exception handling[!exception object]]
   [:zh_CN] 对象[!异常～][%异常处理[!异常对象]] ]

[para]
[:en]
Exception handling provides a way of transferring control and information from a
point in the execution of a thread to an exception handler associated with a
point previously passed by the execution.
[:zh_CN]
异常处理提供一种方法，从线程执行中的某处转移控制和信息，到之前执行经过的某处所
关联的某个异常处理器。

[:en]
A handler will be invoked only by throwing an exception in code executed in the
handler[=']s try block or in functions called from the handler[=']s try block.
[:zh_CN]
一个处理器，只能被该处理器的 try 块中，或在该处理器的 try 块中调用的函数中抛出
的异常所调用。

[syntax]
[%[`try]]
[rule try-block [:zh_CN] try-块 ]
    [| [`try] compound-statement handler-seq ]
[rule:end]

[%[`try]]
[rule function-try-block [:zh_CN] 函数-try-块 ]
    [| [`try] [~:opt ctor-initializer] compound-statement handler-seq ]
[rule:end]

[rule handler-seq [:zh_CN] 处理器序列 ]
    [| handler [~:opt handler-seq] ]
[rule:end]

[%[`catch]]
[rule handler [:zh_CN] 处理器 ]
    [| [`catch] [`(] exception-declaration [`)] compound-statement ]
[rule:end]

[rule exception-declaration [:zh_CN] 异常声明式 ]
    [| [~:opt attribute-specifier-seq] type-specifier-seq declarator ]
    [| [~:opt attribute-specifier-seq] type-specifier-seq
        [~:opt abstract-declarator] ]
    [| [`...] ]
[rule:end]
[syntax:end]

[:en]
The optional [~attribute-specifier-seq] in an [~exception-declaration]
appertains to the parameter of the catch clause ([#except.handle]).
[:zh_CN]
[~异常声明式]中可选的[~特性说明符序列]属于 catch 子句的形参（[#except.handle]）。

[para]
[:en]
[%exception handling[!try block]]
[%exception handling[!handler]]
[%try block[%exception handling[!try block]]]
[%handler[%exception handling[!handler]]]
A [~try-block] is a [~statement] (Clause [#stmt.stmt]).
[:zh_CN]
[%异常处理[!try 块]]
[%异常处理[!处理器]]
[%try 块[%异常处理[!try 块]]]
[%处理器[%异常处理[!处理器]]]
[~try-块]是[~语句]（第 [#stmt.stmt] 章）。

[enter:note]
[:en]
Within this Clause ["try block] is taken to mean both [~try-block] and
[~function-try-block].
[:zh_CN]
本章中的“try 块”同时用来代表 [~try-块]和[~函数-try-块]。
[exit:note]

[para]
[:en]
[%exception handling[![`goto]]]
[%exception handling[![`switch]]]
[%[`goto][!and try block]]
[%[`switch][!and try block]]
[%[`goto][!and handler]]
[%[`switch][!and handler]]
A [`goto] or [`switch] statement shall not be used to transfer control into a
try block or into a handler.
[:zh_CN]
[%异常处理[![`goto]]]
[%异常处理[![`switch]]]
[%[`goto][!～与 try 块]]
[%[`switch][!～与 try 块]]
[%[`goto][!～与处理器]]
[%[`switch][!～与处理器]]
不能用 [`goto] 或 [`switch] 语句来将控制转移到 try 块或处理器之中。

[enter:example]
[codeblock]
void f() {
  goto l1;          // [:en] ill-formed
                    // [|:zh_CN] 非良构
  goto l2;          // [:en] ill-formed
                    // [|:zh_CN] 非良构
  try {
    goto l1;        // OK
    goto l2;        // [:en] ill-formed
                    // [|:zh_CN] 非良构
    l1: ;
  } catch (...) {
    l2: ;
    goto l1;        // [:en] ill-formed
                    // [|:zh_CN] 非良构
    goto l2;        // OK
  }
}
[codeblock:end]
[exit:example]

[:en]
[%[`goto][!and try block]]
[%[`switch][!and try block]]
[%[`return][!and try block]]
[%[`continue][!and try block]]
[%[`goto][!and handler]]
[%[`switch][!and handler]]
[%[`return][!and handler]]
[%[`continue][!and handler]]
A [`goto], [`break], [`return], or [`continue] statement can be used to transfer
control out of a try block or handler.
[:zh_CN]
[%[`goto][!～与 try 块]]
[%[`switch][!～与 try 块]]
[%[`return][!～与 try 块]]
[%[`continue][!～与 try 块]]
[%[`goto][!～与处理器]]
[%[`switch][!～与处理器]]
[%[`return][!～与处理器]]
[%[`continue][!～与处理器]]
可以用 [`goto]、[`break]、[`return] 或 [`continue] 语句将控制转移到 try 块或
处理器之外。

[:en]
When this happens, each variable declared in the try block will be destroyed in
the context that directly contains its declaration.
[:zh_CN]
当发生这种转移时，try 中所声明的每个变量将在直接包含其声明式的语境中被销毁。

[enter:example]
[codeblock [!:gram condition] ]
lab:  try {
  T1 t1;
  try {
    T2 t2;
    if ([~condition])
      goto lab;
    } catch(...) { /* [`handler 2] */ }
  } catch(...) { /* [`handler 1] */ }
[codeblock:end]

[:en]
Here, executing [`goto lab;] will destroy first [`t2], then [`t1], assuming the
[~condition] does not declare a variable.
[:zh_CN]
此处，假定 [~condition] 并未声明变量，则执行 [`goto lab;] 将首先销毁 [`t2]，然后
是 [`t1]。

[:en]
Any exception thrown while destroying [`t2] will result in executing
[`handler 2]; any exception thrown while destroying [`t1] will result in
executing [`handler 1].
[:zh_CN]
在销毁 [`t2] 过程中抛出的任何异常将导致执行 [`handler 2]；在销毁 [`t1] 过程中
抛出的任何异常将导致执行 [`handler 1]。
[exit:example]

[para]
[:en]
[%function try block[%exception handling [!function try block]]]
[%exception handling[!function try block]]
A [~function-try-block] associates a [~handler-seq] with the
[~ctor-initializer], if present, and the [~compound-statement].
[:zh_CN]
[%函数 try 块[%异常处理[!函数 try 块]]]
[%异常处理[!函数 try 块]]
[~函数-try-块]将一个[~处理器序列]与其[~构造函数初始化式]（如果有）及其[~组合
语句]关联起来。

[:en]
An exception thrown during the execution of the [~compound-statement] or, for
constructors and destructors, during the initialization or destruction,
respectively, of the class[=']s subobjects, transfers control to a handler in a
[~function-try-block] in the same way as an exception thrown during the
execution of a [~try-block] transfers control to other handlers.
[:zh_CN]
执行[~组合语句]时抛出的异常，以及对于构造函数和析构函数来说，分别当类的子对象
进行初始化或销毁时抛出的异常，将控制转移到该[~函数-try-块]中的某个处理器中，这与
在执行 [~try-块]时抛出异常将控制转移到其他处理器的方式相同。

[enter:example]
[codeblock]
int f(int);
class C {
  int i;
  double d;
public:
  C(int, double);
};

C::C(int ii, double id)
try : i(f(ii)), d(id) {
    // [:en] constructor statements
    // [|:zh_CN] 构造函数的语句
}
catch (...) {
    // [:en] handles exceptions thrown from the [~ctor-initializer] and from the constructor statements
    // [|:zh_CN] 处理在[~构造函数初始化式]中和构造函数的语句中抛出的异常
}
[codeblock:end]
[exit:example]

[para]
[:en]
In this section, ["before] and ["after] refer to the ["sequenced before]
relation ([#intro.execution]).
[:zh_CN]
本章中的“……之前”和“……之后”代表的是“按顺序早于”关系（[#intro.execution]）。

[include except.throw]

[include except.ctor]

[include except.handle]

[include except.spec]

[include except.special]

[%:end#exception.handling]
