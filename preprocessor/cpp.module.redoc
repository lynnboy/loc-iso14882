[section#cpp.module
    [:en] Header units
    [:zh_CN] 头文件单元

[%[:en] header unit[!preprocessing]
  [:zh_CN] 头文件单元[!预处理] ]
[%:begin#macro.import
    [:en] macro import
    [:zh_CN] 宏导入
]
]

[syntax]
[rule import-seq [:zh_CN] 导入序列 ]
    [| [~:opt top-level-token-seq] [`:opt export] [`import] ]
[rule:end]

[rule top-level-token-seq [:zh_CN] 顶层记号序列 ]
    [|:descriptive
        [:en] [~pp-balanced-token-seq] ending in [`;] or [`}]
        [:zh_CN] 以 [`;] 或 [`}] 结尾的[~预处理平衡记号序列]
    ]
[rule:end]

[rule pp-import [:zh_CN] 预处理导入 ]
    [| [`import] header-name [~:opt pp-import-suffix] [`;] ]
    [| [`import] header-name-tokens [~:opt pp-import-suffix] [`;] ]
[rule:end]

[rule pp-import-suffix [:zh_CN] 预处理导入后缀 ]
    [| pp-import-suffix-token ]
    [| pp-import-suffix pp-import-suffix-token ]
[rule:end]

[rule pp-import-suffix-token [:zh_CN] 预处理导入后缀记号 ]
    [|:descriptive
        [:en] any [~pp-balanced-token] other than [`;]
        [:zh_CN] 除 [`;] 之外的任何[~预处理平衡记号]
    ]
[rule:end]

[rule pp-balanced-token-seq [:zh_CN] 预处理平衡记号序列 ]
    [| pp-balanced-token ]
    [| pp-balanced-token-seq pp-balanced-token ]
[rule:end]

[rule pp-balanced-token [:zh_CN] 预处理平衡记号 ]
    [| pp-ldelim [~:opt pp-balanced-token] pp-rdelim ]
    [|:descriptive
        [:en] any [~preprocessing-token] other than a [~pp-ldelim] or [~pp-rdelim]
        [:zh_CN] 除[~预处理左分隔]或[~预处理右分隔]之外的任何[~预处理记号]
    ]
[rule:end]

[rule:oneof pp-ldelim [:zh_CN] 预处理左分隔 ]
    [|  (    [=`[]    {    <:    <% ]
[rule:end]

[rule:oneof pp-rdelim [:zh_CN] 预处理右分隔 ]
    [|  )    [=`]]    }    :>    %> ]
[rule:end]
[syntax:end]

[para]
[:en]
A sequence of [~preprocessing-token]s matching the form of a [~pp-import]
instructs the preprocessor to import macros from the header unit
([#module.import]) denoted by the [~header-name].
[:zh_CN]
符合[~预处理导入]的形式的[~预处理记号]的序列，指示预处理器从其[~头文件名]所代表
的头文件单元中导入宏（[#module.import]）。

[:en]
A [~pp-import] is only recognized when the sequence of tokens produced by phase
4 of translation up to the [`import] token forms an [~import-seq], and the
[`import] token is not within the [~header-name-tokens] or [~pp-import-suffix]
of another [~pp-import].
[:zh_CN]
只有当由翻译阶段 4 所产生的直到 [`import] 记号为止的记号序列构成一个[~导入序列]，
并且该 [`import] 记号并非处于另一个[~预处理导入]的[~头文件名记号序列]或[~预处理
导入后缀]之内时，才识别一个[~预处理导入]。

[:en]
The [`;] [~preprocessing-token] terminating a [~pp-import] shall not have been
produced by macro replacement ([#cpp.replace]).
[:zh_CN]
结束[~预处理导入]的 [`;] [~预处理记号]不能是由宏替换所产生的（[#cpp.replace]）。

[:en]
The [+point of macro import[%macro import[!point of]]][%point of macro import
[%macro import[!point of]]] for a [~pp-import] is immediately after the [`;]
terminating the [~pp-import].
[:zh_CN]
[~预处理导入]的[+宏导入点[%宏导入[!～点]]][%宏导入点[%宏导入[!～点]]]紧跟结束该
[~预处理导入]的 [`;] 之后。

[para]
[:en]
In the second form of [~pp-import], a [~header-name] token is formed as if the
[~header-name-tokens] were the [~pp-tokens] of a [`#include] directive.
[:zh_CN]
[~预处理导入]的第二种形式中，以如同其[~头文件名记号序列]是某个 [`#include] 指令
的[~预处理记号序列]一样构成一个[~头文件名]记号。

[:en]
The [~header-name-tokens] are replaced by the [~header-name] token.
[:zh_CN]
将该[~头文件名记号序列]替换为这个[~头文件名]记号。

[enter:note]
[:en]
This ensures that imports are treated consistently by the preprocessor and later
phases of translation.
[:zh_CN]
这样做确保预处理器和之后的翻译阶段能够统一地对待各个导入。
[exit:note]

[para]
[:en]
Each [`#define] directive encountered when preprocessing each translation unit
in a program results in a distinct [+macro definition].
[:zh_CN]
对程序中的每个翻译单元进行预处理时所遇到的每个 [`#define] 指令，都产生一个独立的
[+宏定义]。

[:en]
Importing macros from a header unit makes macro definitions from a translation
unit visible in other translation units.
[:zh_CN]
从头文件单元导入宏，使得某个翻译单元中的宏定义对其他翻译单元可见。

[:en]
Each macro definition has at most one point of definition in each translation
unit and at most one point of undefinition, as follows:
[:zh_CN]
各个翻译单元中，每个宏定义有最多一个定义点和最多一个去定义点，如下：

[list]
[item]
[:en]
The [+point of definition[%macro definition[!point of definition]]] of a macro
definition within a translation unit is the point at which its [`#define]
directive occurs (in the translation unit containing the [`#define] directive),
or, if the macro name is not lexically identical to a keyword ([#lex.key]) or to
the [~identifier]s [`module] or [`import], the first point of macro import of a
translation unit containing a point of definition for the macro definition, if
any (in any other translation unit).
[:zh_CN]
某个宏在一个翻译单元中的[+定义点[%宏定义[!定义点]]]，是出现其 [`#define] 指令的
位置（处于包含该 [`#define] 指令的翻译单元之中），或者如果这个宏名并非词法等同于
某个关键字（[#lex.key]）或者[~标识符] [`module] 或 [`import]，则为对包含该宏定义
的一个定义点的翻译单元的首个宏导入点（如果有）（处于其他翻译单元之中）。

[item]
[:en]
The [+point of undefinition[%macro definition[!point of undefinition]]] of a
macro definition within a translation unit is the first point at which a
[`#undef] directive naming the macro occurs after its point of definition, or
the first point of macro import of a translation unit containing a point of
undefinition for the macro definition, whichever (if any) occurs first.
[:zh_CN]
某个宏在一个翻译单元中的[+去定义点[%宏定义[!去定义点]]]，是在其定义点之后首次
出现指名这个宏的 [`#undef] 指令的位置，或者为对包含该宏定义的一个去定义点的
翻译单元的首个宏导入点，先出现者（如果有）为准。
[list:end]

[para]
[:en]
A macro directive is [+active[%macro definition[!active]]] at a source location
if it has a point of definition in that translation unit preceding the location,
and does not have a point of undefinition in that translation unit preceding
the location.
[:zh_CN]
如果一条宏指令在某个源代码位置所在的翻译单元中于该位置之前有定义点，并且在该
翻译单元中与该位置之前没有去定义点，则称该宏指令在该源代码位置[+活跃[%宏定义
[!活跃]]]。

[para]
[:en]
If a macro would be replaced or redefined, and multiple macro definitions are
active for that macro name, the active macro definitions shall all be valid
redefinitions of the same macro ([#cpp.replace]).
[:zh_CN]
如果某个宏可能被替换或重新定义，并且该宏的名字由多条活跃的宏定义，则活跃的宏定义
应当全部是同一个宏的有效重复定义（[#cpp.replace]）。

[enter:note]
[:en]
The relative order of [~pp-import]s has no bearing on whether a particular macro
definition is active.
[:zh_CN]
各个[~预处理导入]的相对顺序与某个特定宏定义是否活跃无关。
[exit:note]

[para]
[enter:example]
[:en] Importable header [`"a.h"]:
[:zh_CN] 可导入头文件 [`"a.h"]：
[codeblock]
#define X 123   // #1
#define Y 45    // #2
#define Z a     // #3
#undef X        // [:en] point of undefinition of #1 in [`"a.h"]
                // [|:zh_CN] 在 [`"a.h"] 中，#1 的去定义点
[codeblock:end]

[:en] Importable header [`"b.h"]:
[:zh_CN] 可导入头文件 [`"b.h"]：
[codeblock]
import "a.h";   // [:en] point of definition of #1, #2, and #3, point of undefinition of #1 in [`"b.h"]
                // [|:zh_CN] 在 [`"b.h"] 中，#1、#2 和 #3 的定义点，#1 的去定义点
#define X 456   // [:en] OK, #1 is not active
                // [|:zh_CN] OK，#1 不活跃
#define Y 6     // [:en] error: #2 is active
                // [|:zh_CN] 错误：#2 活跃
[codeblock:end]

[:en] Importable header [`"c.h"]:
[:zh_CN] 可导入头文件 [`"c.h"]：
[codeblock]
#define Y 45    // #4
#define Z c     // #5
[codeblock:end]

[:en] Importable header [`"d.h"]:
[:zh_CN] 可导入头文件 [`"d.h"]：
[codeblock]
import "a.h";   // [:en] point of definition of #1, #2, and #3, point of undefinition of #1 in [`"d.h"]
                // [|:zh_CN] 在 [`"d.h"] 中，#1、#2 和 #3 的定义点，#1 的去定义点
import "c.h";   // [:en] point of definition of #4 and #5 in [`"d.h"]
                // [|:zh_CN] 在 [`"d.h"] 中，#4 和 #5 的定义点
int a = Y;      // [:en] OK, active macro definitions #2 and #3 are valid redefinitions
                // [|:zh_CN] OK，#2 和 #3 的活跃宏定义是有效的重复定义
int c = Z;      // [:en] error: active macro definitions #2 and #3 are not valid redefinitions of [`Z]
                // [|:zh_CN] 错误：#2 和 #3 的活跃宏定义不是有效的 [`Z] 的重复定义
[codeblock:end]
[exit:example]

[%:end#macro.import]
