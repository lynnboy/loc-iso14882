[section#cpp.import
    [:en] Header unit importation
    [:zh_CN] 头文件单元导入

[%[:en] header unit[!preprocessing]
  [:zh_CN] 头文件单元[!预处理] ]
[%:begin#macro.import
    [:en] macro import
    [:zh_CN] 宏导入
]
]

[syntax]
[rule pp-import [:zh_CN] 预处理导入 ]
    [| [`:opt export] [`import] header-name [~:opt pp-tokens] [`;] new-line ]
    [| [`:opt export] [`import] header-name-tokens [~:opt pp-tokens] [`;] new-line ]
    [| [`:opt export] [`import] pp-tokens [`;] new-line ]
[rule:end]
[syntax:end]

[para]
[:en]
The preprocessing tokens after the [`import] preprocessing token in the [`import]
[~control-line] are processed just as in normal text (i.e., each identifier
currently defined as a macro name is replaced by its replacement list of
preprocessing tokens).
[:zh_CN]
[`import] [~控制行]中预处理记号 [`import] 之后的各预处理记号仅作为普通文本处理
（以及，各个当前已定义为宏名的标识符均被替换为其预处理记号的替换列表）。

[:en]
An [`import] directive matching the first two forms of a [~pp-import] instructs
the preprocessor to import macros from the header unit ([#module.import])
denoted by the [~header-name].
[:zh_CN]
符合[~预处理导入]前两种形式的 [`import] 指令，指示预处理器从其[~头文件名]所代表
的头文件单元中导入宏（[#module.import]）。

[:en]
The [+point of macro import[%macro[!point of import]]][%point of[!macro import
[%macro [!point of import]]]] for the first two forms of [~pp-import] is
immediately after the [~new-line] terminating the [~pp-import].
[:zh_CN]
前两种形式的[~预处理导入]的[+宏导入点[%宏[!导入点]]][%点[!宏导入～[%宏[!导入点]]]]
紧跟结束该[~预处理导入]的[~换行]之后。

[:en]
The last form of [~pp-import] is only considered if the first two forms did not
match.
[:zh_CN]
仅当[~预处理导入]的前两种形式均不匹配时才考虑最后一种形式。

[para]
[:en]
In all three forms of [~pp-import], the [`import] token is replaced by the
[~import-keyword] token.
[:zh_CN]
在[~预处理导入]的全部三种形式中，记号 [`import] 均被替换为[~导入关键字]记号。

[:en]
Additionally, in the second form of [~pp-import], a [~header-name] token is
formed as if the [~header-name-tokens] were the [~pp-tokens] of a [`#include]
directive.
[:zh_CN]
此外，[~预处理导入]的第二种形式中，以如同其[~头文件名记号序列]是某个 [`#include]
指令的[~预处理记号序列]一样构成一个[~头文件名]记号。

[:en]
The [~header-name-tokens] are replaced by the [~header-name] token.
[:zh_CN]
将该[~头文件名记号序列]替换为这个[~头文件名]记号。

[enter:note]
[:en]
This ensures that imports are treated consistently by the preprocessor and later
phases of translation.
[:zh_CN]
这样做确保预处理器和之后的翻译阶段能够统一地对待各个导入。
[exit:note]

[para]
[:en]
Each [`#define] directive encountered when preprocessing each translation unit
in a program results in a distinct [+macro definition[%macro[!definition]]].
[:zh_CN]
对程序中的每个翻译单元进行预处理时所遇到的每个 [`#define] 指令，都产生一个独立的
[+宏定义[%宏[!定义]]]。

[:en]
Importing macros from a header unit makes macro definitions from a translation
unit visible in other translation units.
[:zh_CN]
从头文件单元导入宏，使得某个翻译单元中的宏定义对其他翻译单元可见。

[:en]
Each macro definition has at most one point of definition in each translation
unit and at most one point of undefinition, as follows:
[:zh_CN]
各个翻译单元中，每个宏定义有最多一个定义点和最多一个去定义点，如下：

[list]
[item]
[:en]
The [+point of definition[%macro[!point of definition]]][%point of[!macro
definition[%macro[!point of definition]]]] of a macro definition within a
translation unit is the point at which its [`#define] directive occurs (in the
translation unit containing the [`#define] directive), or, if the macro name is
not lexically identical to a keyword ([#lex.key]) or to the [~identifier]s
[`module] or [`import], the first point of macro import of a translation unit
containing a point of definition for the macro definition, if any (in any other
translation unit).
[:zh_CN]
某个宏在一个翻译单元中的[+定义点[%宏[!定义点]]][%点[!宏定义～[%宏[!定义点]]]]，
是出现其 [`#define] 指令的位置（处于包含该 [`#define] 指令的翻译单元之中），或者
如果这个宏名并非词法等同于某个关键字（[#lex.key]）或者[~标识符] [`module] 或
[`import]，则为对包含该宏定义的一个定义点的翻译单元的首个宏导入点（如果有）
（处于其他翻译单元之中）。

[item]
[:en]
The [+point of undefinition[%macro[!point of undefinition]]][+point of[!macro
undefinition[%macro[!point of undefinition]]]] of a macro definition within a
translation unit is the first point at which a [`#undef] directive naming the
macro occurs after its point of definition, or the first point of macro import
of a translation unit containing a point of undefinition for the macro
definition, whichever (if any) occurs first.
[:zh_CN]
某个宏在一个翻译单元中的[+去定义点[%宏[!去定义点]]][%点[!去定义～[%宏[!去定义点]]]]，
是在其定义点之后首次出现指名这个宏的 [`#undef] 指令的位置，或者为对包含该宏定义
的一个去定义点的翻译单元的首个宏导入点，先出现者（如果有）为准。
[list:end]

[para]
[:en]
A macro directive is [+active[%macro[!active]]][%active macro directive[%macro
[!active]]] at a source location if it has a point of definition in that
translation unit preceding the location, and does not have a point of
undefinition in that translation unit preceding the location.
[:zh_CN]
如果一条宏指令在某个源代码位置所在的翻译单元中于该位置之前有定义点，并且在该
翻译单元中与该位置之前没有去定义点，则称该宏指令在该源代码位置[+活跃[%宏[!活跃]]]
[%活跃宏指令[%宏[!活跃]]]。

[para]
[:en]
If a macro would be replaced or redefined, and multiple macro definitions are
active for that macro name, the active macro definitions shall all be valid
redefinitions of the same macro ([#cpp.replace]).
[:zh_CN]
如果某个宏可能被替换或重新定义，并且该宏的名字由多条活跃的宏定义，则活跃的宏定义
应当全部是同一个宏的有效重复定义（[#cpp.replace]）。

[enter:note]
[:en]
The relative order of [~pp-import]s has no bearing on whether a particular macro
definition is active.
[:zh_CN]
各个[~预处理导入]的相对顺序与某个特定宏定义是否活跃无关。
[exit:note]

[para]
[enter:example]
[:en] Importable header [`"a.h"]:
[:zh_CN] 可导入头文件 [`"a.h"]：
[codeblock]
#define X 123   // #1
#define Y 45    // #2
#define Z a     // #3
#undef X        // [:en] point of undefinition of #1 in [`"a.h"]
                // [|:zh_CN] 在 [`"a.h"] 中，#1 的去定义点
[codeblock:end]

[:en] Importable header [`"b.h"]:
[:zh_CN] 可导入头文件 [`"b.h"]：
[codeblock]
import "a.h";   // [:en] point of definition of #1, #2, and #3, point of undefinition of #1 in [`"b.h"]
                // [|:zh_CN] 在 [`"b.h"] 中，#1、#2 和 #3 的定义点，#1 的去定义点
#define X 456   // [:en] OK, #1 is not active
                // [|:zh_CN] OK，#1 不活跃
#define Y 6     // [:en] error: #2 is active
                // [|:zh_CN] 错误：#2 活跃
[codeblock:end]

[:en] Importable header [`"c.h"]:
[:zh_CN] 可导入头文件 [`"c.h"]：
[codeblock]
#define Y 45    // #4
#define Z c     // #5
[codeblock:end]

[:en] Importable header [`"d.h"]:
[:zh_CN] 可导入头文件 [`"d.h"]：
[codeblock]
import "a.h";   // [:en] point of definition of #1, #2, and #3, point of undefinition of #1 in [`"d.h"]
                // [|:zh_CN] 在 [`"d.h"] 中，#1、#2 和 #3 的定义点，#1 的去定义点
import "c.h";   // [:en] point of definition of #4 and #5 in [`"d.h"]
                // [|:zh_CN] 在 [`"d.h"] 中，#4 和 #5 的定义点
int a = Y;      // [:en] OK, active macro definitions #2 and #4 are valid redefinitions
                // [|:zh_CN] OK，#2 和 #4 的活跃宏定义是有效的重复定义
int c = Z;      // [:en] error: active macro definitions #3 and #5 are not valid redefinitions of [`Z]
                // [|:zh_CN] 错误：#3 和 #5 的活跃宏定义不是有效的 [`Z] 的重复定义
[codeblock:end]
[exit:example]

[%:end#macro.import]
