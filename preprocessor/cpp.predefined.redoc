[section#cpp.predefined
    [:en] Predefined macro names
    [:zh_CN] 预定义的宏名
[:en]
[%macro[!predefined]]
[%name[!predefined macro][%macro[!predefined]]]
[:zh_CN]
[%宏[!预定义的～]]
[%名字[!预定义宏的～][%宏[!预定义的～]]]
]

[para]
[:en]
The following macro names shall be defined by the implementation:
[:zh_CN]
实现应当定义下列宏名：

[list:dl]

[item [`__cplusplus] [%[`__cplusplus] [@__CPLUSPLUS]]]
[:en]
The integer literal [`[=cppver]].
[:zh_CN]
整数字面量 [`[=cppver]]。

[begin:note]
[:en]
It is intended that future versions of this International Standard will replace
the value of this macro with a greater value.
[:zh_CN]
其意图是使本国际标准的未来版本将能够用更大的值替换这个宏的值。
[end:note]

[item [`__DATE__] [%[`__DATE__]]]
[:en]
The date of translation of the source file: a character string literal of the
form [`"Mmm dd yyyy"], where the names of the months are the same as those
generated by the [`asctime] function, and the first character of [`dd] is a
space character if the value is less than 10.
[:zh_CN]
源文件的翻译日期：形式为 [`"Mmm dd yyyy"] 的字符串字面量，其中月份的名字与由
[`asctime] 函数所生成的相同，而 [`dd] 的第一个字符当其值小于 10 时为空格字符。

[:en]
If the date of translation is not available, an [?impldef text of [`__DATE__]
when date of translation is not available] valid date shall be supplied.
[:zh_CN]
若翻译日期不可用，则应当提供一个[?impldef 当翻译日期不可用时 [`__DATE__] 的文本]
有效日期。

[item [`__FILE__] [%[`__FILE__]]]
[:en]
The presumed name of the current source file (a character string literal).
[#:note#fn:$1]
[:zh_CN]
假定的当前源文件的名字（字符字符串字面量）。[#:note#fn:$1]

[note:foot#fn:$1]
[:en]
The presumed source file name can be changed by the [`#line] directive.
[:zh_CN]
可以通过 [`#line] 指令改变假定的源文件名。
[note:end]

[item [`__LINE__] [%[`__LINE__]]]
[:en]
The presumed line number (within the current source file) of the current source
line (an integer literal).[#:note#fn:$2]
[:zh_CN]
当前源文件行的（在当前源文件中的）假定行号（整数字面量）。[#:note#fn:$2]

[note:foot#fn:$2]
[:en]
The presumed line number can be changed by the [`#line] directive.
[:zh_CN]
可以通过 [`#line] 指令改变假定的行号。
[note:end]

[item [`__STDC_HOSTED__] [%[`__STDC_HOSTED__]]]
[:en]
The integer literal [`1] if the implementation is a hosted implementation or the
integer literal [`0] if it is not.
[:zh_CN]
若实现为宿主式实现，则为整数字面量 [`1]，若它不是则为整数字面量 [`0]。

[item [`__STDCPP_DEFAULT_NEW_ALIGNMENT] [%[`__STDCPP_DEFAULT_NEW_ALIGNMENT__]]]
[:en]
An integer literal of type [`std::size_t] whose value is the alignment
guaranteed by a call to [`operator new(std::size_t)] or
[`operator new`[`](std::size_t)].
[:zh_CN]
[`std::size_t] 类型的整数字面量，其值是由 [`operator new(std::size_t)] 或
[`operator new`[`](std::size_t)] 的调用保证达成的对齐。

[begin:note]
[:en]
Larger alignments will be passed to
[`operator new(std::size_t, std::align_val_t)], etc. ([#expr.new]).
[:zh_CN]
更大的对齐将被传递给 [`operator new(std::size_t, std::align_val_t)] 等函数
（[#expr.new]）。
[end:note]

[item [`__TIME__] [%[`__TIME__]]]
[:en]
The time of translation of the source file: a character string literal of the
form [`"hh:mm:ss"] as in the time generated by the [`asctime] function.
[:zh_CN]
源文件的翻译时间：形式为 [`"hh:mm:ss"] 的字符串字面量，如同由 [`asctime] 函数所
生成的那样。

[:en]
If the time of translation is not available, an [?impldef text of [`__TIME__]
when time of translation is not available] valid time shall be supplied.
[:zh_CN]
若翻译时间不可用，则应当提供一个[?impldef 当翻译时间不可用是 [`__TIME__] 的文本]
有效时间。

[item
    [:en] The names listed in [#:tab#cpp.predefined.ft].
    [:zh_CN] [#:tab#cpp.predefined.ft] 中所列出的名字。
]
[:en]
The macros defined in [#:tab#cpp.predefined.ft] shall be defined to the
corresponding integer literal.
[:zh_CN]
[#:tab#cpp.predefined.ft] 中所定义的宏应当被定义为其对应的整数字面量。

[begin:note]
[:en]
Future versions of this International Standard might replace the values of these
macros with greater values.
[:zh_CN]
本国际标准的未来版本可能会将这些宏的值替换为更大的值。
[end:note]
[list:end]

[table:grid#cpp.predefined.ft
    [:en] Feature-test macros
    [:zh_CN] 功能特性检查宏
    [|@code
        [:en] Macro name
        [:zh_CN] 宏名 ]
    [|@code
        [:en] Value
        [:zh_CN] 值 ]
]
[|] [`@def __cpp_aggregate_bases]                    [|] 201603L [-]
[|] [`@def __cpp_aggregate_nsdmi]                    [|] 201304L [-]
[|] [`@def __cpp_aggregate_paren_init]               [|] 201902L [-]
[|] [`@def __cpp_alias_templates]                    [|] 200704L [-]
[|] [`@def __cpp_aligned_new]                        [|] 201606L [-]
[|] [`@def __cpp_attributes]                         [|] 200809L [-]
[|] [`@def __cpp_binary_literals]                    [|] 201304L [-]
[|] [`@def __cpp_capture_star_this]                  [|] 201603L [-]
[|] [`@def __cpp_char8_t]                            [|] 201811L [-]
[|] [`@def __cpp_conditional_explicit]               [|] 201806L [-]
[|] [`@def __cpp_constexpr]                          [|] 201907L [-]
[|] [`@def __cpp_constexpr_dynamic_alloc]            [|] 201907L [-]
[|] [`@def __cpp_constinit]                          [|] 201907L [-]
[|] [`@def __cpp_coroutines]                         [|] 201902L [-]
[|] [`@def __cpp_decltype]                           [|] 200707L [-]
[|] [`@def __cpp_decltype_auto]                      [|] 201304L [-]
[|] [`@def __cpp_deduction_guides]                   [|] 201907L [-]
[|] [`@def __cpp_delegating_constructors]            [|] 200604L [-]
[|] [`@def __cpp_enumerator_attributes]              [|] 201411L [-]
[|] [`@def __cpp_fold_expressions]                   [|] 201603L [-]
[|] [`@def __cpp_generic_lambdas]                    [|] 201304L [-]
[|] [`@def __cpp_guaranteed_copy_elision]            [|] 201606L [-]
[|] [`@def __cpp_hex_float]                          [|] 201603L [-]
[|] [`@def __cpp_if_constexpr]                       [|] 201606L [-]
[|] [`@def __cpp_impl_destroying_delete]             [|] 201806L [-]
[|] [`@def __cpp_impl_three_way_comparison]          [|] 201907L [-]
[|] [`@def __cpp_inheriting_constructors]            [|] 201511L [-]
[|] [`@def __cpp_init_captures]                      [|] 201304L [-]
[|] [`@def __cpp_initializer_lists]                  [|] 200806L [-]
[|] [`@def __cpp_inline_variables]                   [|] 201606L [-]
[|] [`@def __cpp_lambdas]                            [|] 200907L [-]
[|] [`@def __cpp_modules]                            [|] 201907L [-]
[|] [`@def __cpp_namespace_attributes]               [|] 201411L [-]
[|] [`@def __cpp_noexcept_function_type]             [|] 201510L [-]
[|] [`@def __cpp_nontype_template_args]              [|] 201411L [-]
[|] [`@def __cpp_nontype_template_parameter_auto]    [|] 201606L [-]
[|] [`@def __cpp_nontype_template_parameter_class]   [|] 201806L [-]
[|] [`@def __cpp_nsdmi]                              [|] 200809L [-]
[|] [`@def __cpp_range_based_for]                    [|] 201603L [-]
[|] [`@def __cpp_raw_strings]                        [|] 200710L [-]
[|] [`@def __cpp_ref_qualifiers]                     [|] 200710L [-]
[|] [`@def __cpp_return_type_deduction]              [|] 201304L [-]
[|] [`@def __cpp_rvalue_references]                  [|] 200610L [-]
[|] [`@def __cpp_sized_deallocation]                 [|] 201309L [-]
[|] [`@def __cpp_static_assert]                      [|] 201411L [-]
[|] [`@def __cpp_structured_bindings]                [|] 201606L [-]
[|] [`@def __cpp_template_template_args]             [|] 201611L [-]
[|] [`@def __cpp_threadsafe_static_init]             [|] 200806L [-]
[|] [`@def __cpp_unicode_characters]                 [|] 200704L [-]
[|] [`@def __cpp_unicode_literals]                   [|] 200710L [-]
[|] [`@def __cpp_user_defined_literals]              [|] 200809L [-]
[|] [`@def __cpp_using_enum]                         [|] 201907L [-]
[|] [`@def __cpp_variable_templates]                 [|] 201304L [-]
[|] [`@def __cpp_variadic_templates]                 [|] 200704L [-]
[|] [`@def __cpp_variadic_using]                     [|] 201611L [-]
[table:end]

[para]
[:en]
The following macro names are conditionally defined by the implementation:
[:zh_CN]
实现有条件地定义下列宏名：

[list:dl]

[item [`__STDC__] [%[`__STDC__]]]
[:en]
Whether [`__STDC__] is predefined and if so, what its value is, are [?impldef
definition and meaning of [`__STDC__]].
[:zh_CN]
是否预定义 [`__STDC__] 以及若定义其值如何，是[?impldef[`__STDC__] 的定义及其含义]。

[item [`__STDC_MB_MIGHT_NEQ_WC__] [%[`__STDC_MB_MIGHT_NEQ_WC__]]]
[:en]
The integer literal [`1], intended to indicate that, in the encoding for
[`wchar_t], a member of the basic character set need not have a code value equal
to its value when used as the lone character in an ordinary character literal.
[:zh_CN]
整数字面量 [`1]，用于指出，一个基本字符集的成员在 [`wchar_t] 的编码中的代码值，
不需要与当它单独用作普通字符字面量中的字符时的值相等。

[item [`__STDC_VERSION__] [%[`__STDC_VERSION__]]]
[:en]
Whether [`__STDC_VERSION__] is predefined and if so, what its value is, are
[?impldef definition and meaning of [`__STDC_VERSION__]].
[:zh_CN]
是否预定义 [`__STDC_VERSION__] 以及若定义其值如何，是
[?impldef [`__STDC_VERSION__] 的定义及其含义]。

[item [`__STDC_ISO_10646__] [%[`__STDC_ISO_10646__]]]
[:en]
An integer literal of the form [`yyyymmL] (for example, [`199712L]).
[:zh_CN]
形式为 [`yyyymmL] 的整数字面量（例如，[`199712L]）。

[:en]
If this symbol is defined, then every character in the Unicode required set,
when stored in an object of type [`wchar_t], has the same value as the code
point of that character.
[:zh_CN]
如果定义了这个符号，则 Unicode 必要集合中的每个字符，当保存在类型 [`wchar_t] 的
对象中时，所具有的值与该字符的代码点相同。

[:en]
The [+Unicode required set] consists of all the characters that are defined
by ISO/IEC 10646, along with all amendments and technical corrigenda as of the
specified year and month.
[:zh_CN]
[+Unicode 必要集合]由 ISO/IEC 10646，以及直到指定年份和月份的所有修订和技术勘误
之中所定义的全部字符构成。

[item [`__STDCPP_STRICT_POINTER_SAFETY__][%[`__STDCPP_STRICT_POINTER_SAFETY__]]]
[:en]
Defined, and has the value integer literal 1, if and only if the implementation
has strict pointer safety ([#basic.stc.dynamic.safety]).
[:zh_CN]
当且仅当实现带有严格指针安全性（[#basic.stc.dynamic.safety]）时定义，并具有整数
字面量值 1。

[item [`__STDCPP_THREADS__] [%[`__STDCPP_THREADS__]]]
[:en]
Defined, and has the value integer literal 1, if and only if a program can have
more than one thread of execution ([#intro.multithread]).
[:zh_CN]
当且仅当程序可以具有多个执行线程（[#intro.multithread]）时定义，并具有整数字面量
值 1。

[list:end]

[para]
[:en]
The values of the predefined macros (except for [`__FILE__] and [`__LINE__])
remain constant throughout the translation unit.
[:zh_CN]
（除 [`__FILE__] 和 [`__LINE__] 之外的）预定义宏的值在翻译单元中保持为常量。

[para]
[:en]
If any of the pre-defined macro names in this subclause, or the identifier
[`defined], is the subject of a [`#define] or a [`#undef] preprocessing
directive, the behavior is undefined.
[:zh_CN]
若本子条款中的任意预定义宏名，或者标识符 [`defined]，被施以预处理指令 [`#define]
或 [`#undef]，则其行为是未定义的。

[:en]
Any other predefined macro names shall begin with a leading underscore followed
by an uppercase letter or a second underscore.
[:zh_CN]
任何其他预定义宏名均应当以一个前导下划线跟着一个大写字母或第二个下划线开始。
