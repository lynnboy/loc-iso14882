[section#cpp.subst
    [:en] Argument substitution
    [:zh_CN] 实参代换

[:en]
[%macro[!argument substitution]]
[%argument substitution[%macro [!argument substitution]]]
[:zh_CN]
[%宏[!实参代换]]
[%实参代换[%宏[!实参代换]]]
]

[%[`__VA_OPT__]]
[syntax]
[rule va-opt-replacement [:zh_CN] va-opt-替代 ]
    [| [`__VA_OPT__] [`(] [~:opt pp-tokens] [`)] ]
[rule:end]
[syntax:end]

[para]
[:en]
After the arguments for the invocation of a function-like macro have been
identified, argument substitution takes place.
[:zh_CN]
标识出函数式宏的调用中的实参之后，进行实参代换。

[:en]
For each parameter in the replacement list that is neither preceded by a [`#] or
[`##] preprocessing token nor followed by a [`##] preprocessing token, the
preprocessing tokens naming the parameter are replaced by a token sequence
determined as follows:
[:zh_CN]
对于替换列表中每个前面没有预处理记号 [`#] 或 [`##]，后面也没跟着预处理记号 [`##]
的每个形参，指名该形参的预处理记号被替换成如下所确定的记号序列：

[list]
[item]
[:en]
If the parameter is of the form [~va-opt-replacement], the replacement
preprocessing tokens are the preprocessing token sequence for the corresponding
argument, as specified below.
[:zh_CN]
如果形参的形式为 [~va-opt-替代]，则替换预处理记号为其对应实参的预处理记号序列，
如下所述。

[item]
[:en]
Otherwise, the replacement preprocessing tokens are the preprocessing tokens of
corresponding argument after all macros contained therein have been expanded.
[:zh_CN]
否则，其替换预处理记号为对应实参经过对其中包含的所有宏进行展开之后的预处理记号。

[:en]
The argument[=']s preprocessing tokens are completely macro replaced before
being substituted as if they formed the rest of the preprocessing file with no
other preprocessing tokens being available.
[:zh_CN]
在进行代换前，每个实参的预处理记号均如同它们构成进行预处理的文件的余下部分且
没有其他预处理记号那样进行完全的宏替换。
[list:end]

[begin:example]
[codeblock]
#define LPAREN() (
#define G(Q) 42
#define F(R, X, ...)  __VA_OPT__(G R X) )
int x = F(LPAREN(), 0, <:-);    // [:en] replaced by [`int x = 42;] \
                                   [:zh_CN] 被替换为 [`int x = 42;]
[codeblock:end]
[end:example]

[para]
[%[`__VA_ARGS__]]
[:en]
An identifier [`__VA_ARGS__] that occurs in the replacement list shall be
treated as if it were a parameter, and the variable arguments shall form the
preprocessing tokens used to replace it.
[:zh_CN]
替换列表中出现的 [`__VA_ARGS__] 标识符应当当作如同是一个形参，并且应当由可变实参
构成用于替换它的预处理记号。

[para]
[%[`__VA_OPT__]]
[:en]
The identifier [`__VA_OPT__] shall always occur as part of the preprocessing
token sequence [~va-opt-replacement]; its closing [`)] is determined by skipping
intervening pairs of matching left and right parentheses in its [~pp-tokens].
[:zh_CN]
标识符 [`__VA_OPT__] 应当总是作为预处理记号序列 [~va-opt-替代]的一部分出现；其
闭合 [`)] 是通过跳过其[~预处理记号序列]中交错其间的匹配的左右括号对而确定的。

[:en]
The [~pp-tokens] of a [~va-opt-replacement] shall not contain [`__VA_OPT__].
[:zh_CN]
[~va-opt-替代]的[~预处理记号序列]中不能包含 [`__VA_OPT__]。

[:en]
If the [~pp-tokens] would be ill-formed as the replacement list of the current
function-like macro, the program is ill-formed.
[:zh_CN]
如果其[~预处理记号序列]作为当前函数式宏的替换列表是非良构的，则程序非良构。

[:en]
A [~va-opt-replacement] is treated as if it were a parameter, and the
preprocessing token sequence for the corresponding argument is defined as
follows.
[:zh_CN]
[~va-opt-替代]应当被当做如同它是一个形参，并且其对应实参的预处理记号序列按如下
定义：

[:en]
If the substitution of [`__VA_ARGS__] as neither an operand of [`#] nor [`##]
consists of no preprocessing tokens, the argument consists of a single
placemarker preprocessing token ([#cpp.concat], [#cpp.rescan]).
[:zh_CN]
如果并非 [`#] 或 [`##] 的操作数的 [`__VA_ARGS__] 的代换中没有任何预处理记号，则
该实参由单个位置标记预处理记号构成（[#cpp.concat]，[#cpp.rescan]）。

[:en]
Otherwise, the argument consists of the results of the expansion of the
contained [~pp-tokens] as the replacement list of the current function-like
macro before removal of placemarker tokens, rescanning, and further replacement.
[:zh_CN]
否则，将其所包含的[~预处理记号序列]作为当前函数式宏在移除位置标记记号、进行重新
扫描和进一步代换之前的替换列表进行展开，以其结果构成其实参。

[begin:note]
[:en]
The placemarker tokens are removed before stringization ([#cpp.stringize]),
and can be removed by rescanning and further replacement ([#cpp.rescan]).
[:zh_CN]
位置标记记号在字符串化（[#cpp.stringize]）之前移除，也可被重新扫描和进一步代换
（[#cpp.rescan]）所移除。
[end:note]

[begin:example]
[codeblock]
#define F(...)           f(0 __VA_OPT__(,) __VA_ARGS__)
#define G(X, ...)        f(0, X __VA_OPT__(,) __VA_ARGS__)
#define SDEF(sname, ...) S sname __VA_OPT__(= { __VA_ARGS__ })
#define EMP

F(a, b, c)          // [:en] replaced by [`f(0, a, b, c)] \
                       [:zh_CN] 替换为 [`f(0, a, b, c)]
F()                 // [:en] replaced by [`f(0)] \
                       [:zh_CN] 替换为 [`f(0)]
F(EMP)              // [:en] replaced by [`f(0)] \
                       [:zh_CN] 替换为 [`f(0)]

G(a, b, c)          // [:en] replaced by [`f(0, a, b, c)] \
                       [:zh_CN] 替换为 [`f(0, a, b, c)]
G(a, )              // [:en] replaced by [`f(0, a)] \
                       [:zh_CN] 替换为 [`f(0, a)]
G(a)                // [:en] replaced by [`f(0, a)] \
                       [:zh_CN] 替换为 [`f(0, a)]

SDEF(foo);          // [:en] replaced by [`S foo;] \
                       [:zh_CN] 替换为 [`S foo;]
SDEF(bar, 1, 2);    // [:en] replaced by [`S bar = { 1, 2 };] \
                       [:zh_CN] 替换为 [`S bar = { 1, 2 };]

#define H1(X, ...) X __VA_OPT__(##) __VA_ARGS__ // [:en] ill-formed: [`##] may not appear at \
                                                   [:zh_CN] 非良构：[`##] 不能出现在
                                                // [:en@~] the beginning of a replacement list ([#cpp.concat]) \
                                                   [:zh_CN@~] 替代列表的开始（[#cpp.concat]）

#define H2(X, Y, ...) __VA_OPT__(X ## Y,) __VA_ARGS__
H2(a, b, c, d)      // [:en] replaced by [`ab, c, d] \
                       [:zh_CN] 替换为 [`ab, c, d]

#define H3(X, ...) #__VA_OPT__(X##X X##X)
H3(, 0)             // [:en] replaced by [`""] \
                       [:zh_CN] 替换为 [`""]

#define H4(X, ...) __VA_OPT__(a X ## X) ## b
H4(, 1)             // [:en] replaced by [`a b] \
                       [:zh_CN] 替换为 [`a b]

#define H5A(...) __VA_OPT__()@\tcode{/**/}@__VA_OPT__()
#define H5B(X) a ## X ## b
#define H5C(X) H5B(X)
H5C(H5A())          // [:en] replaced by [`ab] \
                       [:zh_CN] 替换为 [`ab]
[codeblock:end]
[end:example]
