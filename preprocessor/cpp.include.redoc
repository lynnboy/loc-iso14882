[section#cpp.include
    [:en] Source file inclusion
    [:zh_CN] 源文件包含

[:en]
[%preprocessing directive[!header inclusion]]
[%preprocessing directive[!source-file inclusion]]
[%inclusion[!source file][%preprocessing directive[!source-file inclusion]]]
[:zh_CN]
[%预处理指令 [!头文件包含～]]
[%预处理指令 [!源文件包含～]]
[%包含[!源文件～][%预处理指令[!源文件包含～]]]
[:][%[`#include]]
]

[para]
[:en] A [+:adj header[!search]] for a sequence of characters searches a sequence
of places for a header identified uniquely by that sequence of characters.
[:zh_CN] 针对一个字符序列进行[+:adj 头文件[!搜索]]，在一系列位置中搜索一个
由这个字符序列所唯一标定的头文件。

[:en] How the places are determined or the header identified is [?impldef
determination of places and identification of headers during header search].
[:zh_CN] 如何确定这些位置及如何标定头文件，是[?impldef 头文件搜索中位置的确定和头文件的标定]。

[para]
[:en] A [+:adj source file[!search]] for a sequence of characters attempts to
identify a source file that is named by the sequence of characters.
[:zh_CN] 针对一个字符序列进行[+:adj 源文件[!搜索]]，尝试标定一个
由这个字符序列所指名的源文件。

[:en] The named source file is searched for in an [?impldef search for source
files during source file search] manner.
[:zh_CN] 对所指名源文件的搜索以[?impldef 源文件搜索中如何搜索源文件]方式进行。

[:en] If the implementation does not support a source file search for that
sequence of characters, or if the search fails, the result of the source file
search is the result of a header search for the same sequence of characters.
[:zh_CN] 如果不支持针对该字符序列的源文件搜索，或者如果搜索失败，则源文件搜索
的结果为针对相同字符序列的头文件搜索的结果。

[para]
[:en] A preprocessing directive of the form
[:zh_CN] 如下形式的预处理指令
[syntax:explanation]
[`#] [`include] [~header-name] [~new-line]
[syntax:end]
[:en@~] causes the replacement of that directive by the entire contents of
the header or source file identified by [~header-name].
[:zh_CN@~] 造成该指令被替换为[~头文件名]所标定的头文件或源文件的整个内容。

[para]
[:en] If the [~header-name] is of the form
[:zh_CN] 如果[~头文件名]的形式为
[syntax:explanation]
[`<] [~h-char-sequence] [`>]
[syntax:end]
[:en@~] a header is identified by a header search for the sequence of characters
of the [~h-char-sequence].
[:zh_CN@~] 则由针对 [~h-字符序列]的字符序列进行头文件搜索来标定一个头文件。

[para]
[:en] If the [~header-name] is of the form
[:zh_CN] 如果[~头文件名]的形式为
[syntax:explanation]
[`"] [~q-char-sequence] [`"]
[syntax:end]
[:en@~] the source file or header is identified by a source file search
for the sequence of characters of the [~q-char-sequence].
[:zh_CN@~] 则由针对 [~q-字符序列]的字符序列进行源文件搜索来标定一个源文件或头文件。

[para]
[:en] If a header search fails, or if a source file search or header search
identifies a header or source file that cannot be processed by the implementation,
the program is ill-formed.
[:zh_CN] 如果头文件搜索失败，或者如果源文件搜索或头文件搜索标定了某个无法被实现
处理的头文件或源文件，则程序非良构。

[begin:note]
[:en] If the header or source file cannot be processed,
the program is ill-formed even when evaluating [`__has_include].
[:zh_CN] 如果头文件或源文件无法被处理，则即便求值的是 [`__has_include] 程序也非良构。
[end:note]

[para]
[:en] A preprocessing directive of the form
[:zh_CN] 如下形式的预处理指令
[syntax:explanation]
[`#] [`include] [~pp-tokens] [~new-line]
[syntax:end]
[:en@~] (that does not match the previous form) is permitted.
[:zh_CN@~] （这并不匹配上述形式）是允许的。

[:en] The preprocessing tokens after [`include] in the directive are processed
just as in normal text (i.e., each identifier currently defined as a macro name
is replaced by its replacement list of preprocessing tokens).
[:zh_CN] 对指令中 [`include] 之后的预处理指令如同普通文本中那样进行处理（将每个
当前定义为宏名的标识符替换为它的预处理记号的替换列表）。

[:en] Then, an attempt is made to form a [~header-name] preprocessing
token ([#lex.header]) from the whitespace and the characters of the spellings of
the resulting sequence of preprocessing tokens; the treatment of whitespace
is [?impldef treatment of whitespace when processing a [`#include] directive].
[:zh_CN] 然后，尝试由空白和所产生的预处理记号序列的拼写的字符来构成[~头文件名]
预处理记号（[#lex.header]）；如何对待空白是[?impldef 处理 [`#include] 指令时如何对待空白]。

[:en] If the attempt succeeds, the directive with the so-formed [~header-name]
is processed as specified for the previous form.
[:zh_CN] 如果尝试成功，则按之前指令形式的规定来处理使用就此构成[~头文件名]的指令。

[:en] Otherwise, the program is ill-formed, no diagnostic required.
[:zh_CN] 否则，程序非良构，无须诊断。

[begin:note]
[:en] Adjacent [~string-literal]s are not concatenated into a single
[~string-literal] (see the translation phases in [#lex.phases]); thus,
an expansion that results in two [~string-literal]s is an invalid directive.
[:zh_CN] 相邻的[~字符串字面量]并不被拼接为一个[~字符串字面量]（参见
[#lex.phases] 中的翻译阶段）；因此，造成两个[~字符串字面量]的扩展是无效指令。
[end:note]

[para]
[:en] The implementation shall provide unique mappings for sequences consisting of
one or more [~nondigit]s or [~digit]s ([#lex.name]) followed by a period ([`.])
and a single [~nondigit].
[:zh_CN] 实现应当为由一个或多个[~非数字]或[~数字]（[#lex.name]）后面跟着一个句点（[`.]）
和一个[~非数字]所构成的序列提供唯一的映射。

[:en] The first character shall not be a [~digit].
[:zh_CN] 第一个字符不能为[~数字]。

[:en] The implementation may ignore distinctions of alphabetical case.
[:zh_CN] 实现可以忽略其字母大小写上的区别。

[para]
[:en] A [`#include] preprocessing directive may appear in a source file that has
been read because of a [`#include] directive in another file, up to an [?impldef
nesting limit for [`#include] directives] nesting limit.
[:zh_CN] 预处理指令 [`#include] 可以出现在已经因其他文件中的 [`#include] 指令
而被读入的源文件中，直到某个[?impldef [`#include] 指令的嵌套限度]嵌套限度。

[para]
[:en] If the header identified by the [~header-name] denotes an importable header
([#module.import]), it is [?impldef whether source file inclusion of importable
header is replaced with [`import] directive] whether the [`#include] preprocessing
directive is instead replaced by the [`import] directive ([#cpp.import]) of the form
[:zh_CN] 如果由[~头文件名]所标定的头文件是一个可导入头文件（[#module.import]），则该
[`#include] 预处理指令是否被替换如下形式的 [`import] 指令（[#cpp.import]）是
[?impldef 是否将可导入头文件的源文件包含替换为 [`import] 指令]：
[syntax:explanation]
[`:key import] [~header-name] [`;] [~new-line]
[syntax:end]
[para]
[begin:note]
[:en] An implementation can provide a mechanism for making arbitrary source files
available to the [`< >] search.
[:zh_CN] 实现可以提供使任意源文件对 [`< >] 搜索可用的机制。

[:en] However, using the [`< >] form for headers provided with the implementation,
and the [`" "] form for sources outside the control of the implementation achieves
wider portability.
[:zh_CN] 不过，为实现提供的头文件使用 [`< >] 形式，而为处于实现控制之外的源文件
使用 [`" "] 形式，可达成更广泛的可移植性。

[:en] For instance:
[:zh_CN] 例如：
[codeblock]
#include <stdio.h>
#include <unistd.h>
#include "usefullib.h"
#include "myprog.h"
[codeblock:end]
[end:note]

[para]
[begin:example]
[:en] This illustrates macro-replaced [`#include] directives:
[:zh_CN] 以下演示带有宏替换的 [`#include] 指令：

[codeblock]
#if VERSION == 1
    #define INCFILE  "vers1.h"
#elif VERSION == 2
    #define INCFILE  "vers2.h"  // [:en] and so on [:zh_CN] 等等
#else
    #define INCFILE  "versN.h"
#endif
#include INCFILE
[codeblock:end]
[end:example]
