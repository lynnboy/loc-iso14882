[section#cpp.replace.general
    [:en] General
    [:zh_CN] 概述

[:en]
[%replacement[!macro][%macro[!replacement]]]
[%preprocessing directive[!macro replacement][%macro[!replacement]]]
[:zh_CN]
[%替换[!宏～][%宏[!～替换]]]
[%预处理指令[!宏替换][%宏[!～替换]]]
]

[para]
[:en]
[%macro[!replacement list]]
Two replacement lists are identical if and only if the preprocessing tokens in
both have the same number, ordering, spelling, and white-space separation, where
all white-space separations are considered identical.
[:zh_CN]
[%宏[!～替换列表]]
两个替换列表当且仅当它们之中的预处理记号具有相同的数量、顺序、拼写和空白分隔时，
它们是等同的，其中所有空白分隔均被认为是等同的。

[para]
[:en]
An identifier currently defined as an [%macro[!object-like]] object-like macro
(see below) may be redefined by another [`#define] preprocessing directive
provided that the second definition is an object-like macro definition and the
two replacement lists are identical, otherwise the program is ill-formed.
[:zh_CN]
当前被定义为[%宏[!对象式～]]对象式宏（见下文）的标识符可被其他 [`#define] 预处理
指令重新定义，只要第二个定义也是对象式宏定义且其两个替换列表是等同的，否则程序
非良构。

[:en]
Likewise, an identifier currently defined as a [%macro[!function-like]]
function-like macro (see below) may be redefined by another [`#define]
preprocessing directive provided that the second definition is a function-like
macro definition that has the same number and spelling of parameters, and the
two replacement lists are identical, otherwise the program is ill-formed.
[:zh_CN]
相似地，当前被定义为[%宏[!函数式～]]函数式宏（见下文）的标识符可被其他 [`#define]
预处理指令重新定义，只要第二个定义也是带有相同数量和拼写的形参的函数式宏定义且其
两个替换列表是等同的，否则程序非良构。

[para]
[begin:example]
[:en]
The following sequence is valid.
[:zh_CN]
如下序列是合法的。

[codeblock]
#define OBJ_LIKE      (1-1)
#define OBJ_LIKE      /* [:en] white space [:zh_CN] 空白 */ (1-1) /* [:en] other [:zh_CN] 另一个空白 */
#define FUNC_LIKE(a)   ( a )
#define FUNC_LIKE( a )(     /* [:en] note the white space [:zh_CN] 注意空白 */ \
                a /* [:en] other stuff on this line [:zh_CN] 本行中的其他事物
                  */ )
[codeblock:end]

[:en]
But the following redefinitions are invalid:
[:zh_CN]
但如下重新定义是非法的：

[codeblock]
#define OBJ_LIKE    (0)         // [:en] different token sequence \
                                   [:zh_CN] 不同的记号序列
#define OBJ_LIKE    (1 - 1)     // [:en] different white space \
                                   [:zh_CN] 不同的空白
#define FUNC_LIKE(b) ( a )      // [:en] different parameter usage \
                                   [:zh_CN] 不同的形参用法
#define FUNC_LIKE(b) ( b )      // [:en] different parameter spelling \
                                   [:zh_CN] 不同的形参拼写
[codeblock:end]
[end:example]

[para]
[:en]
[%macro[!replacement list]]
There shall be white-space between the identifier and the replacement list
in the definition of an object-like macro.
[:zh_CN]
[%宏[!替换列表]]
对象式宏的定义中，标识符和替换列表之间应当有空白。

[para]
[:en]
If the [~identifier-list] in the macro definition does not end with an ellipsis,
the number of arguments (including those arguments consisting of no
preprocessing tokens) in an invocation of a function-like macro shall equal the
number of parameters in the macro definition.
[:zh_CN]
若宏定义中的[~标识符列表]不是以省略号结束的，则对函数式宏的调用中的实参（包括
没有预处理记号所构成的实参）数量应当与该宏定义中的形参数量相等。

[:en]
Otherwise, there shall be at least as many arguments in the invocation as there
are parameters in the macro definition (excluding the [`...]).
[:zh_CN]
否则，调用中的实参应当至少与宏定义中的（除 [`...] 之外的）形参一样多。

[:en]
There shall exist a [`)] preprocessing token that terminates the invocation.
[:zh_CN]
应当存在一个用来终止该调用的 [`)] 预处理记号。

[para]
[%[`__VA_ARGS__][@__va_args__]]
[%[`__VA_OPT__][@__va_opt__]]
[:en]
The identifiers [`__VA_ARGS__] and [`__VA_OPT__] shall occur only in the
[~replacement-list] of a function-like macro that uses the ellipsis notation in
the parameters.
[:zh_CN]
标识符 [`__VA_ARGS__] 和 [`__VA_OPT__] 只能出现在其形参中使用了省略号记法的
函数式宏的[~替换列表]中。

[para]
[:en]
A parameter identifier in a function-like macro shall be uniquely declared
within its scope.
[:zh_CN]
函数式宏中的形参标识符，在其作用域中应当被唯一声明。

[para]
[:en]
The identifier immediately following the [`define] is called the
[%name[!macro][%macro[!name]]] [+macro name[%macro[!name]]].
[:zh_CN]
紧跟在 [`define] 后面的标识符被称为[%名字[!宏～][%宏[!～名]]][+宏名[%宏[!～名]]]。

[:en]
There is one name space for macro names.
[:zh_CN]
宏名有一个命名空间。

[:en]
Any white-space characters preceding or following the replacement list of
preprocessing tokens are not considered part of the replacement list for either
form of macro.
[:zh_CN]
各种形式的宏中，预处理记号的替换列表前后的任何空白字符，均不认为是替换列表的
一部分。

[para]
[:en]
If a [%[`#] operator] [`#] preprocessing token, followed by an identifier,
occurs lexically at the point at which a preprocessing directive could begin,
the identifier is not subject to macro replacement.
[:zh_CN]
若某个后面跟着标识符的预处理记号 [%[`#] 运算符][`#] 在词法上出现于应当开始一个
预处理指令之处，则该标识符不会进行宏替换。

[para]
[:en]
A preprocessing directive of the form
[:zh_CN]
如下形式的预处理指令

[syntax:explanation]
[%[`#define]]
[`#] [`define] [~identifier] [~replacement-list] [~new-line]
[syntax:end]

[:en@~]
defines an [+:adj object-like macro[%macro[!object-like]]] that causes each
subsequent instance of the macro name[#:note#fn:$1] to be replaced by the
replacement list of preprocessing tokens that constitute the remainder of the
directive.[#:note#fn:$2]
[:zh_CN@~]
定义[+:adj 对象式宏[%宏[!对象式～]]]，并导致这个宏名的每个后续实例[#:note#fn:$1]
均被构成该指令的余下部分的预处理记号的替换序列所替换。[#:note#fn:$2]

[note:foot#fn:$1]
[:en]
Since, by macro-replacement time, all [~character-literal]s and
[~string literal]s are preprocessing tokens, not sequences possibly containing
identifier-like subsequences (see [#lex.phases], translation phases), they are
never scanned for macro names or parameters.
[:zh_CN]
由于在宏替换时，所有[~字符字面量]和[~字符串字面量]都是预处理记号，而不是可能包含
类似标识符子序列的序列（参见 [#lex.phrases]，翻译阶段），它们从不会为宏名或形参
进行扫描。
[note:end]

[note:foot#fn:$2]
[:en]
An alternative token ([#lex.digraph]) is not an identifier, even when its
spelling consists entirely of letters and underscores.
[:zh_CN]
代用记号（[#lex.digraph]）并不是标识符，即使其拼写完全由字母和下划线组成。

[:en]
Therefore it is not possible to define a macro whose name is the same as that of
an alternative token.
[:zh_CN]
因此定义与某代用记号的名字相同的宏是不可能的。
[note:end]

[:en]
The replacement list is then rescanned for more macro names as specified below.
[:zh_CN]
该替换序列随即按照下文所述重新扫描更多的宏名。

[para]
[begin:example]
[:en]
The simplest use of this facility is to define a [=lq]manifest constant[=rq], as
in
[:zh_CN]
此功能的最简单用法是如下这样用于定义“清单常量”

[codeblock]
#define TABSIZE 100
int table[TABSIZE];
[codeblock:end]
[end:example]

[para]
[:en]
A preprocessing directive of the form
[:zh_CN]
如下形式的预处理指令

[syntax:explanation]
[| [`#] [`define] identifier lparen [~:opt identifier-list] [`)]
    replacement-list new-line ]
[| [`#] [`define] identifier lparen [`...] [`)] replacement-list new-line ]
[| [`#] [`define] identifier lparen identifier-list [`,] [`...] [`)]
    replacement-list new-line ]
[syntax:end]

[:en@~]
defines a [+:adj function-like macro[%macro[!function-like]]] with parameters,
whose use is similar syntactically to a function call.
[:zh_CN@~]
定义带有形参的[+:adj 函数式宏[%宏[!函数式～]]]，其用法在语法上与函数调用相似。

[:en]
The parameters [%parameter[!macro]] are specified by the optional list of
identifiers, whose scope extends from their declaration in the identifier list
until the new-line character that terminates the [`#define] preprocessing
directive.
[:zh_CN]
其形参[%形参[!宏]]由可选的标识符列表所指定，其作用域从该标识符列表中的声明延伸到
终结该 [`#define] 预处理指令的换行字符。

[:en]
[%invocation[!macro]]
Each subsequent instance of the function-like macro name followed by a [`(] as
the next preprocessing token introduces the sequence of preprocessing tokens
that is replaced by the replacement list in the definition (an invocation of the
macro).
[:zh_CN]
[%调用[!宏]]
这个函数式宏名后面跟着 [`(] 为其下一个预处理记号的每个后续实例，都开始一个预处理
记号序列，它将被替换为其定义中的替换列表（对该宏的调用）。

[:en]
The replaced sequence of preprocessing tokens is terminated by the matching [`)]
preprocessing token, skipping intervening matched pairs of left and right
parenthesis preprocessing tokens.
[:zh_CN]
被替换的预处理记号序列由匹配的 [`)] 预处理记号终止，跳过介于其间的相匹配的左右
括号预处理记号对。

[:en]
Within the sequence of preprocessing tokens making up an invocation of a
function-like macro, new-line is considered a normal white-space character.
[:zh_CN]
在构成函数式宏的调用的预处理记号序列中，换行被当作普通空白字符。

[para]
[:en]
[%macro[!function-like[!arguments]]]
The sequence of preprocessing tokens bounded by the outside-most matching
parentheses forms the list of arguments for the function-like macro.
[:zh_CN]
[%宏[!函数式～[!实参]]]
由最外层的匹配括号所包围的预处理记号序列构成函数式宏的实参的列表。

[:en]
The individual arguments within the list are separated by comma preprocessing
tokens, but comma preprocessing tokens between matching inner parentheses do not
separate arguments.
[:zh_CN]
列表中的独立实参是以逗号预处理记号分隔的，但处于匹配的内部括号中的逗号预处理记号
并不分隔实参。

[:en]
If there are sequences of preprocessing tokens within the list of arguments that
would otherwise act as preprocessing directives,[#:note#fn:$3] the behavior is
undefined.
[:zh_CN]
若实参列表中的预处理记号序列可能被当作预处理指令[#:note#fn:$3]，则其行为是未定义
的。

[note:foot#fn:$3]
[:en]
A [~conditionally-supported-directive] is a preprocessing directive regardless
of whether the implementation supports it.
[:zh_CN]
无论实现是否支持，[~有条件支持的指令]都是预处理指令。
[note:end]

[para]
[begin:example]
[:en]
The following defines a function-like macro whose value is the maximum of its
arguments.
[:zh_CN]
如下定义了其值为其实参的最大值的函数式宏。

[:en]
It has the disadvantages of evaluating one or the other of its arguments a
second time (including [%side effects] side effects) and generating more code
than a function if invoked several times.
[:zh_CN]
其缺点是它会对其中一个或另一个实参进行再次求值（包括其[%副作用]副作用）并且当
多次调用时将比函数产生更多代码。

[:en]
It also cannot have its address taken, as it has none.
[:zh_CN]
还不能获取它的地址，因为它没有。

[codeblock]
#define max(a, b) ((a) > (b) ? (a) : (b))
[codeblock:end]

[:en]
The parentheses ensure that the arguments and the resulting expression are bound
properly.
[:zh_CN]
其中的括号保证实参和结果表达式被正确地括起来。
[end:example]

[para]
[:en]
[%macro[!function-like[!arguments]]]
If there is a [`...] immediately preceding the [`)] in the function-like macro
definition, then the trailing arguments (if any), including any separating comma
preprocessing tokens, are merged to form a single item: the [+variable arguments].
[:zh_CN]
[%宏[!函数式～[!实参]]]
若函数式宏定义中紧接 [`)] 之前有 [`...]，则尾部的实参（如果有），包括任何用于
分隔的逗号预处理记号，都被合并以构成一个单独的项：[+可变实参]。

[:en]
The number of arguments so combined is such that, following merger, the number
of arguments is either equal to or one more than the number of parameters in the
macro definition (excluding the [`...]).
[:zh_CN]
如此合并的实参的数量为，合并之后的实参数量，与宏定义中（除 [`...] 之外）的形参的
数量相等或比其大一。
