[section#cpp.pre
    [:en] Preamble
    [:zh_CN] 导言
]

[syntax]
[rule preprocessing-file [:zh_CN] 预处理文件 ]
    [| [~:opt group] ]
    [| module-file ]
[rule:end]

[rule module-file [:zh_CN] 模块文件 ]
    [| [~:opt pp-global-module-fragment] pp-module [~:opt group] [~:opt pp-private-module-fragment] ]
[rule:end]

[rule pp-global-module-fragment [:zh_CN] 预处理全局模块分段 ]
    [| [`:key module] [`;] new-line [~:opt group] ]
[rule:end]

[rule pp-private-module-fragment [:zh_CN] 预处理私有模块分段 ]
    [| [`:key module] [`:] [`:key private] [`;] new-line [~:opt group] ]
[rule:end]

[rule group [:zh_CN] 组 ]
    [| group-part ]
    [| group group-part ]
[rule:end]

[rule group-part [:zh_CN] 组部分 ]
    [| control-line ]
    [| if-section ]
    [| text-line ]
    [| [`#] conditionally-supported-directive ]
[rule:end]

[rule@aligned control-line [:zh_CN] 控制行 ]
    [| [`#] [`include]  pp-tokens new-line ]
    [| pp-import ]
    [| [`#] [`define]   identifier replacement-list new-line ]
    [| [`#] [`define]   identifier lparen [~:opt identifier-list] [`)] replacement-list new-line ]
    [| [`#] [`define]   identifier lparen [`...] [`)] replacement-list new-line ]
    [| [`#] [`define]   identifier lparen identifier-list [`,] [`...] [`)] replacement-list new-line ]
    [| [`#] [`undef]    identifier new-line ]
    [| [`#] [`line]     pp-tokens new-line ]
    [| [`#] [`error]    [~:opt pp-tokens] new-line ]
    [| [`#] [`pragma]   [~:opt pp-tokens] new-line ]
    [| [`#] new-line ]
[rule:end]

[rule if-section [:zh_CN] if-节 ]
    [| if-group [~:opt elif-groups] [~:opt else-group] endif-line ]
[rule:end]

[rule@aligned if-group [:zh_CN] if-组 ]
    [| [`#] [`if]       constant-expression new-line [~:opt group] ]
    [| [`#] [`ifdef]    identifier new-line [~:opt group] ]
    [| [`#] [`ifndef]   identifier new-line [~:opt group] ]
[rule:end]

[rule elif-groups [:zh_CN] elif-组序列 ]
    [| elif-group ]
    [| elif-groups elif-group ]
[rule:end]

[rule@aligned elif-group [:zh_CN] elif-组 ]
    [| [`#] [`elif]     constant-expression new-line [~:opt group] ]
    [| [`#] [`elifdef]  constant-expression new-line [~:opt group] ]
    [| [`#] [`elifndef] constant-expression new-line [~:opt group] ]
[rule:end]

[rule@aligned else-group [:zh_CN] else-组 ]
    [| [`#] [`else]     new-line [~:opt group] ]
[rule:end]

[rule@aligned endif-line [:zh_CN] endif-行 ]
    [| [`#] [`endif]    new-line ]
[rule:end]

[rule text-line [:zh_CN] 文本行 ]
    [| [~:opt pp-tokens] new-line ]
[rule:end]

[rule conditionally-supported-directive [:zh_CN] 有条件支持的指令 ]
    [| pp-tokens new-line ]
[rule:end]

[rule lparen [:zh_CN] 左括号 ]
    [|:descriptive
        [:en] a [`(] character not immediately preceded by whitespace
        [:zh_CN] 前面并非紧挨空白的 [`(] 字符
    ]
[rule:end]

[rule identifier-list [:zh_CN] 标识符列表 ]
    [| identifier ]
    [| identifier-list [`,] identifier ]
[rule:end]

[rule replacement-list [:zh_CN] 替换列表 ]
    [| [~:opt pp-tokens] ]
[rule:end]

[rule pp-tokens [:zh_CN] 预处理记号序列 ]
    [| preprocessing-token ]
    [| pp-tokens preprocessing-token ]
[rule:end]

[rule new-line [:zh_CN] 换行 ]
    [|:descriptive
        [:en] the new-line character
        [:zh_CN] 换行字符
    ]
[rule:end]
[syntax:end]

[para]
[:en]
A [+preprocessing directive] consists of a sequence of preprocessing tokens that
satisfies the following constraints:
[:zh_CN]
[+预处理指令]由预处理记号的序列构成，并满足如下约束条件：

[:en]
At the start of translation phase 4, the first token in the sequence, referred
to as a [+:adj directive-introducing[!token]], begins with the first character
in the source file (optionally after whitespace containing no new-line
characters) or follows whitespace containing at least one new-line character,
and is
[:zh_CN]
在翻译阶段 4 开始时，该序列中的第一个记号，称为[+:adj 指令发起[!记号]]，是以
源文件中的第一个字符（可选地跟在不包含换行字符的空白之后）开头，或者跟在至少包含
一个换行字符的空白后面，并且

[list]
[item]
[:en]
a [`#] preprocessing token, or
[:zh_CN]
是一个预处理记号 [`#]，或者

[item]
[:en]
an [`:key import] preprocessing token immediately followed on the same logical
line by a [~header-name], [`<], [~identifier], [~string-literal], or [`:]
preprocessing token, or
[:zh_CN]
是一个预处理记号 [`:key import] 且紧跟其后的是同一个逻辑代码行中的预处理记号
[~头文件名]，[`<]，[~标识符]，[~字符串字面量]，或 [`:]，或者

[item]
[:en]
an [`:key module] preprocessing token immediately followed on the same logical
line by an [~identifier], [`:], or [`;] preprocessing token, or
[:zh_CN]
是一个预处理记号 [`:key module] 且紧跟其后的是同一个逻辑代码行中的预处理记号
[~标识符]，[`:]，或 [`;]，或者
[list:end]

[item]
[:en]
an [`:key export] preprocessing token immediately followed on the same logical
line by one of the two preceding forms.
[:zh_CN]
是一个预处理记号 [`:key export] 且紧跟其后的是同一个逻辑代码行中以上两种形式之一。
[list:end]

[:en]
The last token in the sequence is the first token within the sequence that is
immediately followed by whitespace containing a new-line character.[#:fn]
[:zh_CN]
该序列中的最后一个记号是该序列中第一个其之后紧跟着包含一个换行字符的空白的记号[#:fn]。

[note:foot]
[:en]
Thus, preprocessing directives are commonly called [=lq]lines[=rq].
[:zh_CN]
因此，预处理指令通常被称为“行”。

[:en]
These [=lq]lines[=rq] have no other syntactic significance, as all whitespace
is equivalent except in certain situations during preprocessing (see the [`#]
character string literal creation operator in [#cpp.stringize], for example).
[:zh_CN]
这些“行”没有其他语法含义，因为除了预处理过程中的特殊情况（例如，参见
[#cpp.stringize] 中的字符字符串字面量创建运算符 [`#]）外，所有空白都是等价的。
[note:end]

[begin:note]
[:en]
A new-line character ends the preprocessing directive even if it occurs within
what would otherwise be an invocation of a function-like macro.
[:zh_CN]
即使换行字符出现于可能成为对某函数式宏的调用之内，它也将终止预处理指令。
[end:note]

[para:~]
[begin:example]
[codeblock]
#                       // [:en] preprocessing directive \
                        [:zh_CN] 预处理指令
module ;                // [:en] preprocessing directive \
                        [:zh_CN] 预处理指令
export module leftpad;  // [:en] preprocessing directive \
                        [:zh_CN] 预处理指令
import <string>;        // [:en] preprocessing directive \
                        [:zh_CN] 预处理指令
export import "squee";  // [:en] preprocessing directive \
                        [:zh_CN] 预处理指令
import rightpad;        // [:en] preprocessing directive \
                        [:zh_CN] 预处理指令
import :part;           // [:en] preprocessing directive \
                        [:zh_CN] 预处理指令

module                  // [:en] not a preprocessing directive \
                        [:zh_CN] 不是预处理指令
;                       // [:en] not a preprocessing directive \
                        [:zh_CN] 不是预处理指令

export                  // [:en] not a preprocessing directive \
                        [:zh_CN] 不是预处理指令
import                  // [:en] not a preprocessing directive \
                        [:zh_CN] 不是预处理指令
foo;                    // [:en] not a preprocessing directive \
                        [:zh_CN] 不是预处理指令

export                  // [:en] not a preprocessing directive \
                        [:zh_CN] 不是预处理指令
import foo;             // [:en] preprocessing directive (ill-formed at phase 7) \
                        [:zh_CN] 预处理指令（在阶段 7 非良构）

import ::               // [:en] not a preprocessing directive \
                        [:zh_CN] 不是预处理指令
import ->               // [:en] not a preprocessing directive \
                        [:zh_CN] 不是预处理指令
[codeblock:end]
[end:example]

[para]
[:en]
A sequence of preprocessing tokens is only a [~text-line] if it does not begin
with a directive-introducing token.
[:zh_CN]
如果预处理记号序列不以一个指令发起记号开头，则它只是一个[~文本行]。

[:en]
A sequence of preprocessing tokens is only a [~conditionally-supported-directive]
if it does not begin with any of the directive names appearing after a [`#] in
the syntax.
[:zh_CN]
如果预处理记号序列的开头不是语法中 [`#] 之后给出的任何指令的名字，则它只是一个
[~有条件支持的指令]。

[:en]
A [~conditionally-supported-directive] is conditionally-supported with
[?impldef additional supported forms of preprocessing directive] semantics.
[:zh_CN]
[~有条件支持的指令]是有条件支持的，并具有[?impldef 额外支持的预处理指令的形式]
语义。

[para]
[:en]
At the start of phase 4 of translation, the [~group] of a
[~pp-global-module-fragment] shall contain neither a [~text-line] nor a
[~pp-import].
[:zh_CN]
在翻译阶段 4 开始时，[~预处理全局模块分段]的[~组]不能包含[~文本行]或[~预处理导入]。

[para]
[:en]
When in a group that is skipped ([#cpp.cond]), the directive syntax is relaxed
to allow any sequence of preprocessing tokens to occur between the directive
name and the following new-line character.
[:zh_CN]
在被跳过的组（[#cpp.cond]）中，放宽指令语法，允许在指令名和下一个换行字符之间
出现任意预处理记号序列。

[para]
[:en]
The only whitespace characters that shall appear between preprocessing tokens
within a preprocessing directive (from just after the directive-introducing
token through just before the terminating new-line character) are space and
horizontal-tab (including spaces that have replaced comments or possibly other
whitespace characters in translation phase 3).
[:zh_CN]
允许在预处理指令中的预处理记号之间（从紧跟指令发起记号之后直到紧跟末尾的换行字符
之前）出现的空白字符，仅有空格和水平制表（包括在翻译阶段 3 中替换注释或其他可能
的空白字符的空格）。

[para]
[:en]
The implementation can process and skip sections of source files conditionally,
include other source files, import macros from header units, and replace macros.
[:zh_CN]
实现可以处理并有条件地处理并跳过源文件中的段落，包含其他源文件，从头文件单元导入
宏，以及对宏进行替换。

[:en]
These capabilities are called [+preprocessing], because conceptually they
occur before translation of the resulting translation unit.
[:zh_CN]
这些能力被称为[+预处理]，这是由于在概念上它们发生于对所产生的翻译单元进行翻译
之前。

[para]
[:en]
The preprocessing tokens within a preprocessing directive are not subject to
macro expansion unless otherwise stated.
[:zh_CN]
除非明确指出，预处理指令中的预处理记号并不进行宏展开。

[para:~]
[begin:example]
[:en]
In:
[:zh_CN]
下例中：

[codeblock]
#define EMPTY
EMPTY   #   include <file.h>
[codeblock:end]

[:en@~]
the sequence of preprocessing tokens on the second line is [span:em not]
a preprocessing directive, because it does not begin with a [`#] at the start of
translation phase 4, even though it will do so after the macro [`EMPTY] has been
replaced.
[:zh_CN@~]
第二行中的预处理记号序列[span:em 并不是]预处理指令，因为在翻译阶段 4 开始时它
并不是以 [`#] 开始的，虽然宏 [`EMPTY] 被替换之后确实会这样。
[end:example]
