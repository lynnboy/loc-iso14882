[section#namespace.std
    [:en] Namespace [`std]
    [:zh_CN] 命名空间 [`std]
]

[para]
[:en]
Unless otherwise specified, the behavior of a [=Cpp] program is undefined if it
adds declarations or definitions to namespace [`std] or to a namespace within
namespace [`std].
[:zh_CN]
除非另行指明，否则向命名空间 [`std] 或命名空间 [`std] 之中的命名空间中添加声明式
或定义式的 [=Cpp] 程序的行为是未定义的。

[para]
[:en]
Unless explicitly prohibited, a program may add a template specialization for
any standard library class template to namespace [`std] provided that (a) the
added declaration depends on at least one program-defined type and (b) the
specialization meets the standard library requirements for the original
template.[#:fn]
[:zh_CN]
除非被明确禁止，否则程序可以向命名空间 [`std] 中添加任何标准程序库的类模板的
模板特化式，但要满足（A）所添加的声明式依赖于至少一个由程序定义的类型，并且
（B）该特化式满足标准程序库对于原模板的规定[#:fn]。

[note:foot]
[:en]
Any library code that instantiates other library templates must be prepared to
work adequately with any user-supplied specialization that meets the minimum
requirements of this document.
[:zh_CN]
任何实例化其他程序库模板的程序库代码，必须足以与满足本文档的最小规定的任意用户
提供的特化式适当地工作。
[note:end]

[para]
[:en]
The behavior of a [=Cpp] program is undefined if it declares an explicit or
partial specialization of any standard library variable template, except where
explicitly permitted by the specification of that variable template.
[:zh_CN]
如果 [=Cpp] 程序声明了任何标准程序库的变量模板的显式或部分特化式，除非该变量模板
的规范中有明确许可，否则该程序的行为是未定义的。

[para]
[:en]
The behavior of a [=Cpp] program is undefined if it declares
[:zh_CN]
声明下列各项的 [=Cpp] 程序的行为是未定义的：

[list]
[item]
[:en] an explicit specialization of any member function of a standard library
class template, or
[:zh_CN] 标准程序库类模板的任意成员函数的显式特化式，或者

[item]
[:en] an explicit specialization of any member function template of a standard
library class or class template, or
[:zh_CN] 标准程序库类或类模板的任意成员函数模板的显式特化式，或者

[item]
[:en] an explicit or partial specialization of any member class template of a
standard library class or class template, or
[:zh_CN] 标准程序库类或类模板的任意成员类模板的显式或部分特化式，或者

[item]
[:en] a deduction guide for any standard library class template.
[:zh_CN] 任意标准程序库类模板的推断导引。
[list:end]

[para]
[:en]
A program may explicitly instantiate a class template defined in the standard
library only if the declaration (a) depends on the name of at least one
program-defined type and (b) the instantiation meets the standard library
requirements for the original template.
[:zh_CN]
程序可以显式实例化标准程序库中的任何类模板，但仅当其声明式（A）依赖于至少一个
由程序定义的类型的名字，并且（B）其实例化满足标准程序库对于原模板的规定。

[para]
[:en]
Let [`[^F]] denote a standard library function ([#global.functions]), a standard
library static member function, or an instantiation of a standard library
function template.
[:zh_CN]
令 [`[^F]] 代表某个标准程序库函数（[#global.functions]），标准程序库静态成员函数，
或者标准程序库函数模板的实例。

[:en]
Unless [`[^F]] is designated an [+:adj addressable[!function]], the behavior of
a [=Cpp] program is unspecified (possibly ill-formed) if it explicitly or
implicitly attempts to form a pointer to [`[^F]].
[:zh_CN]
除非 [`[^F]] 被指派为[+:adj 可取地址的[!函数]]，否则如果 [=Cpp] 程序显式或隐式
试图构成指向 [`[^F]] 的指针，则它的行为是未指明的（可能非良构）。

[begin:note]
[:en]
Possible means of forming such pointers include application of the unary [`&]
operator ([#expr.unary.op]), [`addressof] ([#specialized.addressof]), or
a function-to-pointer standard conversion ([#conv.func]).
[:zh_CN]
构成这种指针的可能方式包括用一元 [`&] 运算符（[#expr.unary.op]）、[`addressof]
（[#specialized.addressof]），或者一次函数指针标准转换（[#conv.func]）。
[end:note]

[:en]
Moreover, the behavior of a [=Cpp] program is unspecified (possibly ill-formed)
if it attempts to form a reference to [`[^F]] or if it attempts to form a
pointer-to-member designating either a standard library non-static member
function ([#member.functions]) or an instantiation of a standard library member
function template.
[:zh_CN]
此外，如果 [=Cpp] 程序试图构成到 [`[^F]] 的引用，或者它试图构成标准程序库的
非静态成员函数（[#member.functions]）或标准程序库的成员函数模板的某个实例的
成员指针，则该程序的行为是未指明的（可能非良构）。

[para]
[:en]
Other than in namespace [`std] or in a namespace within namespace [`std],
a program may provide an overload for any library function template designated
as a [+customization point], provided that (a) the overload[=']s declaration
depends on at least one user-defined type and (b) the overload meets the
standard library requirements for the customization point.[#:fn]
[:zh_CN]
除了在命名空间 [`std] 或 [`std] 中的命名空间意外，程序可以为任何被指派为
[+定制化点]的程序库函数模板提供重载，只要（A）该重载的声明式依赖于至少一个用户
定义的类型，并且（B）该重载满足标准程序库对该定制化点的规定[#:fn]。

[note:foot]
[:en]
Any library customization point must be prepared to work adequately with any
user-defined overload that meets the minimum requirements of this document.
[:zh_CN]
每个程序库定制化点都必须预备好对于任何用户定义的满足本文档的最小规定的重载都能
正常工作。

[:en]
Therefore an implementation can elect, under the as-if rule
([#intro.execution]), to provide any customization point in the form of an
instantiated function object ([#function.objects]) even though the customization
point[=']s specification is in the form of a function template.
[:zh_CN]
因此实现可以根据“如同”原则（[#intro.execution]）来决定将任何定制化点以实例化的
函数对象（[#function.objects]）的形式提供，即便该实例化点的规范是以函数模板的
形式给出的。

[:en]
The template parameters of each such function object and the function parameters
and return type of the object[=']s [`operator()] must match those of the
corresponding customization point[=']s specification.
[:zh_CN]
每个这种函数对象的模板形参，以及该对象的 [`operator()] 的函数形参和返回类型，
必须与其对应的定制化点的规范相匹配。
[note:end]

[begin:note]
[:en]
This permits a (qualified or unqualified) call to the customization point
to invoke the most appropriate overload for the given arguments.
[:zh_CN]
这样做允许对该实例化点的（有限定或无限定的）调用，能够为给定的实参调用最适当的
重载。
[end:note]

[para]
[:en]
A translation unit shall not declare namespace [`std] to be an inline namespace
([#namespace.def]).
[:zh_CN]
翻译单元不应当把命名空间 [`std] 声明为内联命名空间（[#namespace.def]）。
