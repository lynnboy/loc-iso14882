[section#handler.functions
    [:en] Handler functions
    [:zh_CN] 处理函数
]

[para]
[:en]
The [=Cpp] standard library provides a default version of the following handler
functions ([#support]):
[:zh_CN]
[=Cpp] 标准程序库提供下列各处理函数的一个缺省版本（[#support]）：

[list]
[item]
[%@lib terminate_handler]
[`terminate_handler]
[list:end]

[para]
[:en]
A [=Cpp] program may install different handler functions during execution, by
supplying a pointer to a function defined in the program or the library
as an argument to (respectively):
[:zh_CN]
[=Cpp] 程序可以在执行过程中安装不同的处理函数，将指向该程序中或程序库中所定义的
某个函数的指针作为实参（分别）提供给下列函数：

[list]
[item]
[%@lib set_new_handler]
[`set_new_handler]
[item]
[%@lib set_terminate]
[`set_terminate]

[para]
[:en]
See also subclauses [#alloc.errors], Storage allocation errors, and
[#support.exception], Exception handling.
[:zh_CN]
另见子条款 [#alloc.errors]，存储分配错误，以及 [#support.exception]，异常处理。
[list:end]

[para]
[:en]
A [=Cpp] program can get a pointer to the current handler function by calling
the following functions:
[:zh_CN]
[=Cpp] 程序可以通过调用下列函数来获得指向当前处理函数的指针：

[list]
[item]
[%@lib get_new_handler]
[`get_new_handler]

[item]
[%@lib get_terminate]
[`get_terminate]
[list:end]

[para]
[:en]
Calling the [`set_*] and [`get_*] functions shall not incur a data race.
[:zh_CN]
调用 [`set_*] 和 [`get_*] 函数不应当导致数据竞争。

[:en]
A call to any of the [`set_*] functions shall synchronize with subsequent calls
to the same [`set_*] function and to the corresponding [`get_*] function.
[:zh_CN]
对任何 [`set_*] 函数的调用都应当同步于对相同 [`set_*] 函数的后续调用，并同步于对
相应 [`get_*] 函数的调用。
