[section#contents
    [:en] Library contents
    [:zh_CN] 程序库的内容
]

[para]
[:en]
The [=Cpp] standard library provides definitions for the entities and macros
described in the synopses of the [=Cpp] standard library headers ([#headers]),
unless otherwise specified.
[:zh_CN]
除非另行指名，[=Cpp] 标准程序库为 [=Cpp] 标准库头文件（[#headers]）的纲要中所
描述的实体和宏提供定义。

[para]
[:en]
All library entities except [`operator new] and [`operator delete] are defined
within the namespace [`std] or namespaces nested within namespace [`std].[#:fn]
[:zh_CN]
除了 [`operator new] 和 [`operator delete] 外的所有程序库实体均定义于命名空间
[`std] 或嵌套在命名空间 [`std] 之内的命名空间中。[#:fn]

[note:foot]
[:en]
The C standard library headers ([#depr.c.headers]) also define names within the
global namespace, while the [=Cpp] headers for C library facilities ([#headers])
can also define names within the global namespace.
[:zh_CN]
C 标准程序库头文件（[#depr.c.headers]）也在全局命名空间中定义名字，而 C 程序库
设施的 [=Cpp] 头文件（[#headers]）也可以在全局命名空间中定义名字。
[note:end]

[:en]
[%namespace]
It is unspecified whether names declared in a specific namespace are declared
directly in that namespace or in an inline namespace inside that namespace.[#:fn]
[:zh_CN]
[%命名空间]
声明于特定命名空间中的名字，是直接在该命名空间中进行声明，还是在该命名空间中的
某个内联命名空间中声明是未指明的。[#:fn]

[note:foot]
[:en]
This gives implementers freedom to use inline namespaces to support multiple
configurations of the library.
[:zh_CN]
这给了实现者利用内联命名空间来支持程序库的多种配置的自由。
[note:end]

[para]
[:en]
Whenever an unqualified name is used in the specification of a declaration [`D]
in [#[=firstlibchapter]] through [#[=lastlibchapter]] or [#depr], its meaning is
established as-if by performing unqualified name lookup ([#basic.lookup.unqual])
in the context of [`D].
[:zh_CN]
从 [#[=firstlibchapter]] 到 [#[=lastlibchapter]] 和 [#depr] 中一旦在某个声明式
[`D] 的规定说明中使用了未限定名，其含义是如同在 [`D] 的语境中进行未限定名查找
（[#basic.lookup.unqual]）所建立的。

[begin:note]
[:en]
Argument-dependent lookup is not performed.
[:zh_CN]
不进行依赖于实参的查找。
[end:note]

[:en]
Similarly, the meaning of a [~qualified-id] is established as-if by performing
qualified name lookup ([#basic.lookup.qual]) in the context of [`D].
[:zh_CN]
与此相似，[~限定标识]的含义是如同在 [`D] 的语境中进行限定名查找
（[#basic.lookup.qual]）所建立的。

[begin:example]
[:en]
The reference to [`is_array_v] in the specification of [`std::to_array]
([#array.creation]) refers to [`::std::is_array_v].
[:zh_CN]
在 [`std::to_array] 的规范说明（[#array.creation]）对 [`is_array_v] 的引用所指代
的是 [`::std::is_array_v]。
[end:example]

[begin:note]
[:en]
Operators in expressions ([#over.match.oper]) are not so constrained;
see [#global.functions].
[:zh_CN]
表达式中的运算符（[#over.match.oper]）没有这样的约束；参见 [#global.functions]。
[end:note]
