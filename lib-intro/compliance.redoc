[section#compliance
    [:en] Freestanding implementations
    [:zh_CN] 自立式实现
[%:begin#implementation.freestanding
    [:en] implementations[!freestanding]
    [:zh_CN] 实现[!自立式] ]
]

[para]
[:en]
Two kinds of implementations are defined: hosted[%implementation[!hosted]]
and freestanding ([#intro.compliance]); the kind of the implementation is
[?impldef whether the implementation is hosted or freestanding].
[:zh_CN]
定义了两种实现：宿主式[%实现[!宿主式]]和自立式（[#intro.compliance]）；实现的
种类是[?impldef 实现是宿主式还是自立式]。

[:en]
For a hosted implementation, this document describes the set of available
headers.
[:zh_CN]
对于宿主式实现，本文档描述了可用的头文件的集合。

[para]
[:en]
A freestanding implementation has an [?impldef headers for freestanding
implementation] set of headers.
[:zh_CN]
自立式实现带有一个[?impldef 自立式实现的头文件]头文件集合。

[:en]
This set shall include at least the headers shown in [#:tab#headers.cpp.fs].
[:zh_CN]
这个集合至少应当包含 [#:tab#headers.cpp.fs] 所示的头文件：

[table:grid#headers.cpp.fs
    [:en] [=Cpp] headers for freestanding implementations
    [:zh_CN] 自立式实现的 [=Cpp] 头文件
    [|@headerspan=2
        [:en] Subclause
        [:zh_CN] 子条款 ]
    [|]
    [|  [:en] Header(s)
        [:zh_CN] 头文件 ]
]
[|] [#support.types] 
        [|] [:en] Types
            [:zh_CN] 类型
                [|] [`<cstddef>]
[-]
[|] [#support.limits]
        [|] [:en] Implementation properties
            [:zh_CN] 实现的属性
                [|] [`<cfloat>], [`<limits>], [`<climits>], [`<version>]
[-]
[|] [#cstdint]
        [|] [:en] Integer types
            [:zh_CN] 整数类型
                [|] [`<cstdint>]
[-]
[|] [#support.start.term]
        [|] [:en] Start and termination
            [:zh_CN] 启动与终止
                [|] [`<cstdlib>]
[-]
[|] [#support.dynamic]
        [|] [:en] Dynamic memory management
            [:zh_CN] 动态内存管理
                [|] [`<new>]
[-]
[|] [#support.rtti]
        [|] [:en] Type identification
            [:zh_CN] 类型标识
                [|] [`<typeinfo>]
[-]
[|] [#support.srcloc]
        [|] [:en] Source location
            [:zh_CN] 源代码位置
                [|] [`<source_location>]
[-]
[|] [#support.exception]
        [|] [:en] Exception handling
            [:zh_CN] 异常处理
                [|] [`<exception>]
[-]
[|] [#support.initlist]
        [|] [:en] Initializer lists
            [:zh_CN] 初始化式列表
                [|] [`<initializer_list>]
[-]
[|] [#cmp]
        [|] [:en] Comparisons
            [:zh_CN] 比较
                [|] [`<compare>]
[-]
[|] [#support.coroutine]
        [|] [:en] Coroutine support
            [:zh_CN] 协程支持
                [|] [`<coroutine>]
[-]
[|] [#support.runtime]
        [|] [:en] Other runtime support
            [:zh_CN] 其他运行时支持
                [|] [`<cstdarg>]
[-]
[|] [#concepts]
        [|] [:en] Concepts library
            [:zh_CN] 概念库
                [|] [`<concepts>]
[-]
[|] [#type.traits]
        [|] [:en] Type traits
            [:zh_CN] 类型特征
                [|] [`<type_traits>]
[-]
[|] [#bit]
        [|] [:en] Bit manipulation
            [:zh_CN] 位操作
                [|] [`<bit>]
[-]
[|] [#atomics]
        [|] [:en] Atomics
            [:zh_CN] 原子性
                [|] [`<atomic>]
[-]
[|] [#utility]
        [|] [:en] Utility components
            [:zh_CN] 工具组件
                [|] [`<utility>]
[-]
[|] [#tuple]
        [|] [:en] Tuples
            [:zh_CN] 元组
                [|] [`<tuple>]
[-]
[|] [#memory]
        [|] [:en] Memory
            [:zh_CN] 内存
                [|] [`<memory>]
[-]
[|] [#function.objects]
        [|] [:en] Function objects
            [:zh_CN] 函数对象
                [|] [`<functional>]
[-]
[|] [#ratio]
        [|] [:en] Compile-time rational arithmetic
            [:zh_CN] 编译期有理算术
                [|] [`<ratio>]
[-]
[|] [#iterators]
        [|] [:en] Iterators
            [:zh_CN] 迭代器库
                [|] [`<iterator>]
[-]
[|] [#ranges]
        [|] [:en] Ranges library
            [:zh_CN] 范围库
                [|] [`<ranges>]
[-]
[table:end]

[para]
[:en] For each of the headers listed in [#:tab#headers.cpp.fs],
a freestanding implementation provides at least
the freestanding entities ([#freestanding.entity]) declared in the header.
[:zh_CN] 对于 [#:tab#headers.cpp.fs] 中列出的每个头文件，自立式实现至少提供该
头文件中所声明的自立式实体（[#freestanding.entity]）。

[para]
[begin:note]
[:en] Throwing a standard library provided exception is not observably different
from [`terminate()] if the implementation does not unwind the stack during
exception handling ([#except.handle]) and the user[=']s program contains no
catch blocks.
[:zh_CN] 如果实现在异常处理（[#except.handle]）过程中并不进行栈解退，并且用户的
程序不包含任何 catch 块，则抛出标准程序库提供的异常和 [`terminate()] 没有可观察
的区别。
[end:note]

[%:end#implementation.freestanding]
