[section#compliance
    [:en] Freestanding implementations
    [:zh_CN] 自立式实现
]

[para]
[:en]
Two kinds of implementations are defined: [+hosted[%implementation[!hosted]]]
and [+freestanding[%implementation[!freestanding]]] ([#intro.compliance]); the
kind of the implementation is [?impldef whether the implementation is hosted or
freestanding].
[:zh_CN]
有两种实现被定义：[+宿主式[%实现[!宿主式]]]和[+自立式[%实现[!自立式]]]
（[#intro.compliance]）；实现的种类是[?impldef 实现是宿主式还是自立式]。

[:en]
For a hosted implementation, this document describes the set of available
headers.
[:zh_CN]
对于宿主式实现，本文档描述了可用的头文件的集合。

[para]
[:en]
A freestanding implementation [%implementation[!freestanding]] has an
[?impldef headers for freestanding implementation] set of headers.
[:zh_CN]
[%实现[!自立式～]]自立式实现带有一个[?impldef 自立式实现的头文件]头文件集合。

[:en]
This set shall include at least the headers shown in [#:tab#headers.cpp.fs].
[:zh_CN]
这个集合至少应当包含 [#:tab#headers.cpp.fs] 所示的头文件：

[table:grid#headers.cpp.fs
    [:en] [=Cpp] headers for freestanding implementations
    [:zh_CN] 自立式实现的 [=Cpp] 头文件
    [|@headerspan=2
        [:en] Subclause
        [:zh_CN] 子条款
    ]
    [|]
    [|
        [:en] Header(s)
        [:zh_CN] 头文件
    ]
]
[|] [#support.types] 
        [|] [:en] Types
            [:zh_CN] 类型
                [|] [`<cstddef>]
[-]
[|] [#support.limits]
        [|] [:en] Implementation properties
            [:zh_CN] 实现的属性
                [|] [`<cfloat>], [`<limits>], [`<climits>], [`<version>]
[-]
[|] [#cstdint]
        [|] [:en] Integer types
            [:zh_CN] 整数类型
                [|] [`<cstdint>]
[-]
[|] [#support.start.term]
        [|] [:en] Start and termination
            [:zh_CN] 启动与终止
                [|] [`<cstdlib>]
[-]
[|] [#support.dynamic]
        [|] [:en] Dynamic memory management
            [:zh_CN] 动态内存管理
                [|] [`<new>]
[-]
[|] [#support.rtti]
        [|] [:en] Type identification
            [:zh_CN] 类型标识
                [|] [`<typeinfo>]
[-]
[|] [#support.srcloc]
        [|] [:en] Source location
            [:zh_CN] 源代码位置
                [|] [`<source_location>]
[-]
[|] [#support.exception]
        [|] [:en] Exception handling
            [:zh_CN] 异常处理
                [|] [`<exception>]
[-]
[|] [#support.initlist]
        [|] [:en] Initializer lists
            [:zh_CN] 初始化式列表
                [|] [`<initializer_list>]
[-]
[|] [#support.coroutine]
        [|] [:en] Coroutine support
            [:zh_CN] 协程支持
                [|] [`<coroutine>]
[-]
[|] [#support.runtime]
        [|] [:en] Other runtime support
            [:zh_CN] 其他运行时支持
                [|] [`<cstdarg>]
[-]
[|] [#concepts]
        [|] [:en] Concepts library
            [:zh_CN] 概念库
                [|] [`<concepts>]
[-]
[|] [#meta]
        [|] [:en] Type traits
            [:zh_CN] 类型特征
                [|] [`<type_traits>]
[-]
[|] [#bit]
        [|] [:en] Bit manipulation
            [:zh_CN] 位操作
                [|] [`<bit>]
[-]
[|] [#atomics]
        [|] [:en] Atomics
            [:zh_CN] 原子性
                [|] [`<atomic>]
[-]
[table:end]

[para]
[:en]
The supplied version of the header [?libheader@ref cstdlib] shall declare at
least the functions [%@lib abort] [`abort], [%@lib atexit] [`atexit],
[%@lib at_quick_exit] [`at_quick_exit], [%@lib exit] [`exit], and
[%@lib quick_exit] [`quick_exit] ([#support.start.term]).
[:zh_CN]
所提供的 [?libheader@ref cstdlib] 头文件版本应当至少声明函数
[%@lib abort][`abort]，[%@lib atexit][`atexit]，
[%@lib at_quick_exit][`at_quick_exit]，[%@lib exit][`exit]，和
[%@lib quick_exit][`quick_exit]（[#support.start.term]）。

[:en]
The supplied version of the header [?libheader@ref#atomics.syn atomic] shall
meet the same requirements as for a hosted implementation except that support
for always lock-free integral atomic types ([#atomics.lockfree]) is
[?impldef support for always lock-free integral atomic types in freestanding
environments], and whether or not the type aliases [`atomic_signed_lock_free]
and [`atomic_unsigned_lock_free] are defined ([#atomics.alias]) is [?impldef
type aliases [`atomic_signed_lock_free] and [`atomic_unsigned_lock_free] in
freestanding environments].
[:zh_CN]
所提供的 [?libheader@ref#atomics.syn atomic] 头文件版本应当满足与宿主式实现相同
的规定，但对始终无锁的整型原子类型（[#atomics.lockfree]）的支持则是
[?impldef 自立式实现环境中对始终无锁的整型原子类型的支持]，并且是否定义类型别名
[`atomic_signed_lock_free] 和 [`atomic_unsigned_lock_free]（[#atomics.alias]）是
[?impldef 自立式实现环境中的类型别名 [`atomic_signed_lock_free] 和
[`atomic_unsigned_lock_free]]。

[:en]
The other headers listed in this table shall meet the same requirements as for a
hosted implementation.
[:zh_CN]
此表中列出的其他头文件应当满足与宿主式实现相同的规定。
