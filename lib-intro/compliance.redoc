[section#compliance
    [:en] Freestanding implementations
    [:zh_CN] 自立式实现
[%:begin#implementation.freestanding
    [:en] implementations[!freestanding]
    [:zh_CN] 实现[!自立式] ]
]

[para]
[:en] Two kinds of implementations are defined: hosted[%implementation[!hosted]]
and freestanding ([#intro.compliance]); the kind of the implementation is
[?impldef whether the implementation is hosted or freestanding].
[:zh_CN] 定义了两种实现：宿主式[%实现[!宿主式]]和自立式（[#intro.compliance]）；
实现的种类是[?impldef 实现是宿主式还是自立式]。

[:en] For a hosted implementation, this document describes the set of available headers.
[:zh_CN] 对于宿主式实现，本文档描述了可用的头文件的集合。

[para]
[:en] A freestanding implementation has an [?impldef headers for freestanding
implementation] set of headers.
[:zh_CN] 自立式实现带有一个[?impldef 自立式实现的头文件]头文件集合。

[:en] This set shall include at least the headers shown in [#:tab#headers.cpp.fs].
[:zh_CN] 这个集合至少应当包含 [#:tab#headers.cpp.fs] 所示的头文件：

[table:grid#headers.cpp.fs
    [:en] [=Cpp] headers for freestanding implementations
    [:zh_CN] 自立式实现的 [=Cpp] 头文件
    [|@headerspan=2
        [:en] Subclause
        [:zh_CN] 子条款 ]
    [|]
    [|  [:en] Header(s)
        [:zh_CN] 头文件 ]
]
[|] [#support.types] 
        [|] [:en] Common definitions
            [:zh_CN] 公共定义
                [|] [`<cstddef>]
[-]
[|] [#cstdlib.syn] 
        [|] [:en] C standard library
            [:zh_CN] C 标准程序库
                [|] [`<cstdlib>]
[-]
[|] [#support.limits]
        [|] [:en] Implementation properties
            [:zh_CN] 实现的属性
                [|] [`<cfloat>], [`<limits>], [`<climits>], [`<version>]
[-]
[|] [#cstdint.syn]
        [|] [:en] Integer types
            [:zh_CN] 整数类型
                [|] [`<cstdint>]
[-]
[|] [#support.dynamic]
        [|] [:en] Dynamic memory management
            [:zh_CN] 动态内存管理
                [|] [`<new>]
[-]
[|] [#support.rtti]
        [|] [:en] Type identification
            [:zh_CN] 类型标识
                [|] [`<typeinfo>]
[-]
[|] [#support.srcloc]
        [|] [:en] Source location
            [:zh_CN] 源代码位置
                [|] [`<source_location>]
[-]
[|] [#support.exception]
        [|] [:en] Exception handling
            [:zh_CN] 异常处理
                [|] [`<exception>]
[-]
[|] [#support.initlist]
        [|] [:en] Initializer lists
            [:zh_CN] 初始化式列表
                [|] [`<initializer_list>]
[-]
[|] [#cmp]
        [|] [:en] Comparisons
            [:zh_CN] 比较
                [|] [`<compare>]
[-]
[|] [#support.contract]
        [|] [:en] Contract-violation handling
            [:zh_CN] 契约违例处理
                [|] [`<contracts>]
[-]
[|] [#support.coroutine]
        [|] [:en] Coroutine support
            [:zh_CN] 协程支持
                [|] [`<coroutine>]
[-]
[|] [#support.runtime]
        [|] [:en] Other runtime support
            [:zh_CN] 其他运行时支持
                [|] [`<cstdarg>]
[-]
[|] [#concepts]
        [|] [:en] Concepts library
            [:zh_CN] 概念库
                [|] [`<concepts>]
[-]
[|] [#errno]
        [|] [:en] Error numbers
            [:zh_CN] 错误号码
                [|] [`<cerrno>]
[-]
[|] [#syserr]
        [|] [:en] System error support
            [:zh_CN] 系统错误支持
                [|] [`<system_error>]
[-]
[|] [#debugging]
        [|] [:en] Debugging
            [:zh_CN] 调试
                [|] [`<debugging>]
[-]
[|] [#memory]
        [|] [:en] Memory
            [:zh_CN] 内存
                [|] [`<memory>]
[-]
[|] [#type.traits]
        [|] [:en] Type traits
            [:zh_CN] 类型特征
                [|] [`<type_traits>]
[-]
[|] [#ratio]
        [|] [:en] Compile-time rational arithmetic
            [:zh_CN] 编译期有理算术
                [|] [`<ratio>]
[-]
[|] [#utility]
        [|] [:en] Utility components
            [:zh_CN] 工具组件
                [|] [`<utility>]
[-]
[|] [#tuple]
        [|] [:en] Tuples
            [:zh_CN] 元组
                [|] [`<tuple>]
[-]
[|] [#optional]
        [|] [:en] Optional objects
            [:zh_CN] 可选对象
                [|] [`<optional>]
[-]
[|] [#variant]
        [|] [:en] Variants
            [:zh_CN] 变体
                [|] [`<variant>]
[-]
[|] [#expected]
        [|] [:en] Expected objects
            [:zh_CN] 预期对象
                [|] [`<expected>]
[-]
[|] [#function.objects]
        [|] [:en] Function objects
            [:zh_CN] 函数对象
                [|] [`<functional>]
[-]
[|] [#bit]
        [|] [:en] Bit manipulation
            [:zh_CN] 位操作
                [|] [`<bit>]
[-]
[|] [#stdbit.h.syn]
        [|] [:en] C-compatible bit manipulation
            [:zh_CN] C 兼容的位操作
                [|] [`<stdbit.h>]
[-]
[|] [#array]
        [|] [:en] Class template [`array]
            [:zh_CN] 类模板 [`array]
                [|] [`<array>]
[-]
[|] [#inplace.vector]
        [|] [:en] Class template [`inplace_vector]
            [:zh_CN] 类模板 [`inplace_vector]
                [|] [`<inplace_vector>]
[-]
[|] [#views.contiguous]
        [|] [:en] Contiguous access
            [:zh_CN] 连续访问
                [|] [`<span>]
[-]
[|] [#views.multidim]
        [|] [:en] Multidimensional access
            [:zh_CN] 多维访问
                [|] [`<mdspan>]
[-]
[|] [#iterators]
        [|] [:en] Iterators
            [:zh_CN] 迭代器库
                [|] [`<iterator>]
[-]
[|] [#ranges]
        [|] [:en] Ranges library
            [:zh_CN] 范围库
                [|] [`<ranges>]
[-]
[|] [#algorithms]
        [|] [:en] Algorithms library
            [:zh_CN] 算法库
                [|] [`<algorithms>], [`<numeric>]
[-]
[|] [#execpol]
        [|] [:en] Execution policies
            [:zh_CN] 执行策略
                [|] [`<execution>]
[-]
[|] [#string.view]
        [|] [:en] String view classes
            [:zh_CN] 字符串视图类
                [|] [`<string_view>]
[-]
[|] [#string.classes]
        [|] [:en] String classes
            [:zh_CN] 字符串类
                [|] [`<string>]
[-]
[|] [#c.strings]
        [|] [:en] Null-terminated sequence utilities
            [:zh_CN] 空终结序列的工具
                [|] [`<cstring>], [`<cwchar>]
[-]
[|] [#charconv]
        [|] [:en] Primitive numeric conversions
            [:zh_CN] 基础数值转换
                [|] [`<charconv>]
[-]
[|] [#rand]
        [|] [:en] Random number generation
            [:zh_CN] 随机数生成
                [|] [`<random>]
[-]
[|] [#c.math]
        [|] [:en] Mathematical functions for floating-point types
            [:zh_CN] 针对浮点类型的数学函数
                [|] [`<cmath>]
[-]
[|] [#atomics]
        [|] [:en] Atomics
            [:zh_CN] 原子性
                [|] [`<atomic>]
[-]
[table:end]

[para]
[:en] For each of the headers listed in [#:tab#headers.cpp.fs],
a freestanding implementation provides at least
the freestanding items ([#freestanding.item]) declared in the header.
[:zh_CN] 对于 [#:tab#headers.cpp.fs] 中列出的每个头文件，自立式实现至少提供该
头文件中所声明的自立式项目（[#freestanding.item]）。

[para]
[:en] The [+:adj hosted[!library facilities]] are the set of facilities
described in this document that are required for hosted implementations,
but not required for freestanding implementations.
[:zh_CN] [+:adj 宿主式[!程序库设施]]是本文档中所描述的设施的集合，它们对宿主式
实现是必要的，但对自立式实现不是必要的。

[:en] A freestanding implementation provides a (possibly empty)
implementation-defined subset of the hosted library facilities.
[:zh_CN] 自立式实现提供宿主式程序库设施的一个（可能为空的）子集。

[:en] Unless otherwise specified, the requirements on each declaration, entity,
[~typedef-name], and macro provided in this way are the same as the
corresponding requirements for a hosted implementation, except that not all of
the members of the namespaces are required to be present.
[:zh_CN] 除非另行规定，以这种方式提供的各个声明式，实体，[~typedef-名]，和宏，
对它们的规定同宿主式实现中的相应规定相同，但并不要求提供命名空间的所有成员。

[para]
[:en] A freestanding implementation provides deleted definitions ([#dcl.fct.def.delete])
for a (possibly empty) implementation-defined subset of the namespace-scope
functions and function templates from the hosted library facilities.
[:zh_CN] 宿主式程序库设施中的命名空间作用域函数和函数模板的一个（可能为空的）
由实现定义的子集，自立式实现为它们提供弃置定义（[#dcl.fct.def.delete]）。

[begin:note]
[:en] An implementation can provide a deleted definition so that the result of
overload resolution does not silently change when migrating a program from a
freestanding implementation to a hosted implementation.
[:zh_CN] 实现可通过提供弃置定义式，使得当将程序从自立式实现向宿主式实现迁移时，
重载决议的结果不会静默地发生变化。
[end:note]

[%:end#implementation.freestanding]
