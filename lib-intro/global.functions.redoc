[section#global.functions
    [:en] Non-member functions
    [:zh_CN] 非成员函数
]

[para]
[:en]
It is unspecified whether any non-member functions in the [=Cpp] standard
library are defined as [`inline] ([#dcl.inline]).
[:zh_CN]
[=Cpp] 标准程序库中的任何非成员函数是否被定义为 [`inline]（[#dcl.inline]）是
未指明的。

[para]
[:en]
[%function[!global]]
A call to a non-member function signature described in Clauses
[#language.support] through [#thread] and Annex [#depr] shall behave as if the
implementation declared no additional non-member function signatures.
[#:note#fn:$section.1]
[:zh_CN]
[%函数[!全局～]]
对在第 [#language.support] 到第 [#thread] 章以及附录 [#depr] 中描述的非成员函数
签名的调用的行为，应当如同该实现并未声明任何额外的非成员函数签名。
[#:note#fn:$section.1]

[note:foot#fn:$section.1]
[:en]
A valid [=Cpp] program always calls the expected library non-member function.
[:zh_CN]
合法的 [=Cpp] 程序总会调用所期望的程序库非成员函数。

[:en]
An implementation may also define additional non-member functions that would
otherwise not be called by a valid [=Cpp] program.
[:zh_CN]
实现还可定义不会被合法的 [=Cpp] 程序调用的额外的非成员函数。
[note:end]

[para]
[:en]
An implementation shall not declare a non-member function signature with
additional default arguments.
[:zh_CN]
实现不应将非成员函数签名声明为带有额外的默认实参。

[para]
[:en]
Unless otherwise specified, calls made by functions in the standard library to
non-operator, non-member functions do not use functions from another namespace
which are found through [+argument-dependent name lookup[%]]
([#basic.lookup.argdep]).
[:zh_CN]
除非另行指明，标准程序库中的函数不使用通过[+依赖于实参的名字查找[%]]
（[#basic.lookup.argdep]）所找到的其他命名空间中的非运算符非成员函数。

[enter:note]
[:en]
The phrase ["unless otherwise specified] applies to cases such as the swappable
with requirements ([#swappable.requirements]).
[:zh_CN]
“除非另行指明”的说法适用于诸如“可互相交换”的规定（[#swappable.requirements]）等
情况。

[:en]
The exception for overloaded operators allows argument-dependent lookup in cases
like that of [`ostream_iterator::operator=] ([#ostream.iterator.ops]):
[:zh_CN]
而对于重载运算符的例外则允许在 [`ostream_iterator::operator=]
（[#ostream.iterator.ops]）的情况中实施依赖于实参的名字查找：

[para:effects]
[codeblock [!:var out_stream delim] ]
*out_stream << value;
if (delim != 0)
  *out_stream << delim;
return *this;
[codeblock:end]
[exit:note]
