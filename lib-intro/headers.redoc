[section#headers
    [:en] Headers
    [:zh_CN] 头文件
]

[para]
[:en]
Each element of the [=Cpp] standard library is declared or defined (as
appropriate) in a [+header].[#:note#fn:$1]
[:zh_CN]
[=Cpp] 标准程序库的每个元素均（视情况相应地）声明或者定义于某个[+头文件]中。
[#:note#fn:$1]

[note:foot#fn:$1]
[:en]
A header is not necessarily a source file, nor are the sequences delimited by
[`<] and [`>] in header names necessarily valid source file names
([#cpp.include]).
[:zh_CN]
头文件不必是源文件，在头文件名中由 [`<] 和 [`>] 分隔的序列也不必是有效的源文件名
（[#cpp.include]）。
[note:end]

[para]
[:en]
The [=Cpp] standard library provides the [+[=Cpp] library headers[%header[!C++
library]]], as shown in [#cpp.library.headers].
[:zh_CN]
[=Cpp] 标准程序库提供了 [+[=Cpp] 程序库头文件[%头文件[!C++ 程序库～]]]，如
[#cpp.library.headers] 所示。

[table:listing@shape=?x4@fill=column@code#tab:cpp.library.headers
    [:en] [=Cpp] library headers
    [:zh_CN] [=Cpp] 程序库头文件
    [column@code@5]
]
[|] <algorithm>
[|] <any>
[|] <array>
[|] <atomic>
[|] <bit>
[|] <bitset>
[|] <charconv>
[|] <chrono>
[|] <codecvt>
[|] <compare>
[|] <complex>
[|] <concepts>
[|] <condition_variable>
[|] <contract>
[|] <deque>
[|] <exception>
[|] <execution>
[|] <filesystem>

[|] <forward_list>
[|] <fstream>
[|] <functional>
[|] <future>
[|] <initializer_list>
[|] <iomanip>
[|] <ios>
[|] <iosfwd>
[|] <iostream>
[|] <istream>
[|] <iterator>
[|] <limits>
[|] <list>
[|] <locale>
[|] <map>
[|] <memory>
[|] <memory_resource>
[|] <mutex>

[|] <new>
[|] <numeric>
[|] <optional>
[|] <ostream>
[|] <queue>
[|] <random>
[|] <ratio>
[|] <regex>
[|] <scoped_allocator>
[|] <set>
[|] <shared_mutex>
[|] <span>
[|] <sstream>
[|] <stack>
[|] <stdexcept>
[|] <streambuf>
[|] <string>
[|] <string_view>

[|] <strstream>
[|] <syncstream>
[|] <system_error>
[|] <thread>
[|] <tuple>
[|] <typeindex>
[|] <typeinfo>
[|] <type_traits>
[|] <unordered_map>
[|] <unordered_set>
[|] <utility>
[|] <valarray>
[|] <variant>
[|] <vector>
[|] <version>
[table:end]

[para]
[:en]
The facilities of the C standard library are provided in the
[%library[!C standard]]
additional headers shown in [#cpp.c.headers].[#:note#fn:$2]
[:zh_CN]
[%程序库[!C 标准～]]C 标准程序库中的设施以如 [#cpp.c.headers] 所示的额外的头文件
提供。[#:note#fn:$2]

[note:foot#fn:$2]
[%[`<stdatomic.h>][@stdatomic.h][![:en]absence thereof[:zh_CN]缺少]]
[%[`<stdnoreturn.h>][@stdnoreturn.h][![:en]absence thereof[:zh_CN]缺少]]
[%[`<threads.h>][@threads.h][![:en]absence thereof[:zh_CN]缺少]]
[:en]
It is intentional that there is no [=Cpp] header for any of these C headers:
[`<stdatomic.h>], [`<stdnoreturn.h>], [`<threads.h>].
[:zh_CN]
有意没有为这些 C 头文件提供 [=Cpp] 头文件：[`<stdatomic.h>]，[`<stdnoreturn.h>]，
[`<threads.h>]。
[note:end]

[table:listing@shape=?x7@fill=column@code#tab:cpp.c.headers
    [:en] [=Cpp] headers for C library facilities
    [:zh_CN] C 程序库设施的 [=Cpp] 头文件
]
[|] <cassert>
[|] <cctype>
[|] <cerrno>

[|] <cfenv>
[|] <cfloat>
[|] <cinttypes>

[|] <climits>
[|] <clocale>
[|] <cmath>

[|] <csetjmp>
[|] <csignal>
[|] <cstdarg>

[|] <cstddef>
[|] <cstdint>
[|] <cstdio>

[|] <cstdlib>
[|] <cstring>
[|] <ctime>

[|] <cuchar>
[|] <cwchar>
[|] <cwctype>
[table:end]

[para]
[:en]
Except as noted in [#language.support] through [#thread] and [#depr], the
contents of each header [`c[*name]] is the same as that of the corresponding
header [`[*name].h], as specified in the C standard library ([#intro.refs]).
[:zh_CN]
除非在 [#language.support] 到 [#thread] 以及 [#depr] 中注明，否则每个头文件
[`c[*name]] 的内容与在 C 标准程序库（[#intro.refs]）中所指定的对应头文件
[`[*name].h] 相同。

[:en]
In the [=Cpp] standard library, however, the declarations (except for names
which are defined as macros in C) are within namespace scope
([#basic.scope.namespace]) of the namespace [`std].
[:zh_CN]
然而，在 [=Cpp] 标准程序库中，声明式（除了在 C 中被定义为宏的名字之外）都处于
命名空间 [`std] 的命名空间作用域之中（[#basic.scope.namespace]）。

[:en]
It is unspecified whether these names (including any overloads added in
[#language.support] through [#thread] and [#depr]) are first declared within the
global namespace scope and are then injected into namespace [`std] by explicit
[~using-declaration]s ([#namespace.udecl]).
[:zh_CN]
这些名字（包括在 [#language.support] 到 [#thread] 以及 [#depr] 中所添加的任何
重载）是否首先在全局命名空间作用域中声明然后再通过显式的 [~using-声明式]
（[#namespace.udecl]）注入到命名空间 [`std] 中是未指明的。

[para]
[:en]
Names which are defined as macros in C shall be defined as macros in the [=Cpp]
standard library, even if C grants license for implementation as functions.
[:zh_CN]
在 C 中被定义为宏的名字在 [=Cpp] 标准程序库中应该被定义为宏，即使 C 授予了实现为
函数的许可也应如此。

[enter:note]
[:en]
The names defined as macros in C include the following: [`assert], [`offsetof],
[`setjmp], [`va_arg], [`va_end], and [`va_start].
[:zh_CN]
在 C 中定义为宏的名字包括：[`assert]，[`offsetof]，[`setjmp]，[`va_arg]，
[`va_end] 和 [`va_start]。
[exit:note]

[para]
[:en]
Names that are defined as functions in C shall be defined as functions in the
[=Cpp] standard library.[#:note#fn:$3]
[:zh_CN]
在 C 中被定义为函数的名字在 [=Cpp] 标准程序库中应该被定义为函数。[#:note#fn:$3]

[note:foot#fn:$3]
[:en]
This disallows the practice, allowed in C, of providing a masking macro in
addition to the function prototype.
[:zh_CN]
由 C 中所允许的在函数原型之外提供“掩蔽宏”的实践在这里是不允许的。

[:en]
The only way to achieve equivalent inline behavior in [=Cpp] is to provide a
definition as an extern inline function.
[:zh_CN]
在 [=Cpp] 中获得等价的内联行为的唯一方式是以外部内联函数提供其定义式。
[note:end]

[para]
[:en]
Identifiers that are keywords or operators in [=Cpp] shall not be defined as
macros in [=Cpp] standard library headers.[#:note#fn:$4]
[:zh_CN]
在 [=Cpp] 中作为关键字或运算符的标识符不能在 [=Cpp] 标准程序库头文件中定义为宏。
[#:note#fn:$4]

[note:foot#fn:$4]
[:en]
In particular, including the standard header [`<iso646.h>] has no effect.
[:zh_CN]
特别地，包含标准头文件 [`<iso646.h>] 没有效果。
[note:end]

[para]
[:en]
[#depr.c.headers], C standard library headers, describes the effects of using
the [`[*name].h] (C header) form in a [=Cpp] program.[#:note#fn:$5]
[:zh_CN]
[#depr.c.headers]，C 标准程序库头文件，描述了在 [=Cpp] 程序中使用 [`[*name].h]
（C 头文件）的效果。[#:note#fn:$5]

[note:foot#fn:$5]
[:en]
The [`".h"] headers dump all their names into the global namespace, whereas the
newer forms keep their names in namespace [`std].
[:zh_CN]
[`".h"] 头文件将它们的所有名字倾倒入全局命名空间中，而其新形式保持它们的名字在
[`std] 命名空间中。

[:en]
Therefore, the newer forms are the preferred forms for all uses except for
[=Cpp] programs which are intended to be strictly compatible with C.
[:zh_CN]
因此，除了需要与 C 严格兼容的 [=Cpp] 程序外，新形式对所有使用来说均是更好的选择。
[note:end]

[para]
[:en]
Annex K of the C standard describes a large number of functions, with associated
types and macros, which ["promote safer, more secure programming] than many of
the traditional C library functions.
[:zh_CN]
C 标准的附录 K 描述了大量函数和相关的类型和宏，它们比传统的 C 程序库函数“推进了
更安全的编程实践”。

[:en]
The names of the functions have a suffix of [`_s]; most of them provide the same
service as the C library function with the unsuffixed name, but generally take
an additional argument whose value is the size of the result array.
[:zh_CN]
这些函数的名字带有 [`_s] 后缀；它们大多数都提供了与没有后缀的 C 程序库函数相同的
服务，但通常会接受一个额外的实参，其值为其结果数组的大小。

[:en]
If any [=Cpp] header is included, it is [%@impldef whether functions from Annex
K of the C standard library are declared when [=Cpp] headers are included]
implementation-defined whether any of these names is declared in the global
namespace.
[:zh_CN]
当包含任何 [=Cpp] 头文件时，是否在全局命名空间中声明了任何这些名字是
[%@impldef 当包含 [=Cpp] 头文件时是否声明 C 标准程序库的附录 K 中的函数]
由实现定义的。

[:en]
(None of them is declared in namespace [`std].)
[:zh_CN]
（它们都不会在命名空间 [`std] 中声明。）

[para]
[:en]
[#c.annex.k.names] lists the Annex K names that may be declared in
some header.
[:zh_CN]
[#c.annex.k.names] 列出了可能在某个头文件中声明的附录 K 的名字。

[:en]
These names are also subject to the restrictions of [#macro.names].
[:zh_CN]
这些名字也遵守 [#macro.names] 的限制。

[table:listing@shape=?x4@fill=column@code#tab:c.annex.k.names
    [:en] C standard Annex K names
    [:zh_CN] C 标准附录 K 的名字
]
[|] abort_handler_s
[|] asctime_s
[|] bsearch_s
[|] constraint_handler_t
[|] ctime_s
[|] errno_t
[|] fopen_s
[|] fprintf_s
[|] freopen_s
[|] fscanf_s
[|] fwprintf_s
[|] fwscanf_s
[|] getenv_s
[|] gets_s
[|] gmtime_s
[|] ignore_handler_s
[|] L_tmpname_s
[|] localtime_s
[|] mbsrtowcs_s

[|] mbstowcs_s
[|] memory_s
[|] memmove_s
[|] memset_s
[|] printf_s
[|] qsort_s
[|] RSIZE_MAX
[|] rsize_t
[|] scanf_s
[|] set_constraint_handler_s
[|] snprintf_s
[|] snwprintf_s
[|] sprintf_s
[|] sscanf_s
[|] strcat_s
[|] strcpy_s
[|] strerrorlen_s
[|] strerror_s
[|] strlen_s

[|] strncat_s
[|] strncpy_s
[|] strtok_s
[|] swprintf_s
[|] swscanf_s
[|] tmpfile_s
[|] TMP_MAX_S
[|] tmpnam_s
[|] vfprintf_s
[|] vfscanf_s
[|] vfwprintf_s
[|] vfwscanf_s
[|] vprintf_s
[|] vscanf_s
[|] vsnprintf_s
[|] vsnwprintf_s
[|] vsprintf_s
[|] vsscanf_s
[|] vswprintf_s

[|] vswscanf_s
[|] vwprintf_s
[|] vwscanf_s
[|] wcrtomb_s
[|] wcscat_s
[|] wcscpy_s
[|] wcsncat_s
[|] wcsncpy_s
[|] wcsnlen_s
[|] wcsrtombs_s
[|] wcstok_s
[|] wcstombs_s
[|] wctomb_s
[|] wmemory_s
[|] wmemmove_s
[|] wprintf_s
[|] wscanf_s
[table:end]
