[section#bitmask.types
    [:en] Bitmask types
    [:zh_CN] 掩码类型
]

[para]
[:en]
Several types defined in Clauses [#language.support] through [#thread] and Annex
[#depr] are [%type[!bitmask]] [+bitmask types[%]].
[:zh_CN]
第 [#language.support] 到第 [#thread] 章以及附录 [#depr] 中定义的几个类型是
[%类型[!掩码～]][+掩码类型[%]]。

[:en]
[%type[!enumerated]]
Each bitmask type can be implemented as an enumerated type that overloads
certain operators, as an integer type, or as a [`bitset] ([#template.bitset]).
[:zh_CN]
[%类型[!列举～]]
每个掩码类型可以被实现为重载了特定运算符的列举类型，整数类型，或者为 [`bitset]
（[#template.bitset]）。

[para]
[:en]
The bitmask type [`[*bitmask]] can be written:
[:zh_CN]
掩码类型 [`[*bitmask]] 可以写为：

[codeblock [!:var bitmask V0 V1 V2 V3 C0 C1 C2 C3 V C] ]
// [:en] For exposition only.
// [|:zh_CN] 只为阐释目的。
// [:en] [`int_type] is an integral type capable of representing all values of the bitmask type.
// [|:zh_CN] [`int_type] 为能够表示掩码类型的所有值的整型类型。
enum bitmask : int_type {
  V[$_0] = 1 << 0, V[$_1] = 1 << 1, V[$_2] = 1 << 2, V[$_3] = 1 << 3, .....
};

constexpr bitmask C[$_0](V[$_0]);
constexpr bitmask C[$_1](V[$_1]);
constexpr bitmask C[$_2](V[$_2]);
constexpr bitmask C[$_3](V[$_3]);
  .....

constexpr bitmask operator&(bitmask X, bitmask Y) {
  return static_cast<bitmask>(
    static_cast<int_type>(X) & static_cast<int_type>(Y));
}
constexpr bitmask operator|(bitmask X, bitmask Y) {
  return static_cast<bitmask>(
    static_cast<int_type>(X) | static_cast<int_type>(Y));
}
constexpr bitmask operator^(bitmask X, bitmask Y){
  return static_cast<bitmask>(
    static_cast<int_type>(X) ^ static_cast<int_type>(Y));
}
constexpr bitmask operator (bitmask X){
  return static_cast<bitmask>(~static_cast<int_type>(X));
}
bitmask& operator&=(bitmask& X, bitmask Y){
  X = X & Y; return X;
}
bitmask& operator|=(bitmask& X, bitmask Y) {
  X = X | Y; return X;
}
bitmask& operator^=(bitmask& X, bitmask Y) {
  X = X ^ Y; return X;
}
[codeblock:end]

[para]
[:en]
Here, the names [`[*C]][_0], [`[*C]][_1], etc. represent [+bitmask elements[%]]
for this particular [%type[!bitmask]] bitmask type.
[:zh_CN]
此处，名字 [`[*C]][_0]，[`[*C]][_1] 等等表示这个特定[%类型[!掩码～]]掩码类型的
[+掩码元素[%]]。

[:en]
All such elements have distinct, nonzero values such that, for any pair
[`[*C]][$_i] and [`[*C]][$_j] where [$i \neq $j], [`[*C]][$_i] & [`[*C]][$_i] is
nonzero and [`[*C]][$_i] & [`[*C]][$_j] is zero.
[:zh_CN]
这些元素都具有不同的值，使得对于任意一对 [`[*C]][$_i] 和 [`[*C]][$_j]（其中
[$i \neq $j]），“[`[*C]][$_i] & [`[*C]][$_i]”为非零，而
“[`[*C]][$_i] & [`[*C]][$_j]”为零。

[:en]
[%bitmask[!empty]]
Additionally, the value [`0] is used to represent an [+empty bitmask[%]], in
which no bitmask elements are set.
[:zh_CN]
[%掩码[!空～]]
此外，[`0] 值被用于表示[+空掩码[%]]，其中没有被设置的掩码元素。

[para]
[:en]
The following terms apply to objects and values of bitmask types:
[:zh_CN]
下列术语适用于位掩码类型的对象和值：

[list]
[item]
[:en]
To [+set[%]] a value [$Y] in an object [$X] is to evaluate the expression [$X]
[`|=] [$Y].
[:zh_CN]
对表达式 [$X] [`|=] [$Y] 求值将在对象 [$X] 中[+设置[%]]值 [$Y]。

[item]
[:en]
To [+clear[%]] a value [$Y] in an object [$X] is to evaluate the expression [$X]
[`&= ~][$Y].
[:zh_CN]
对表达式 [$X] [`&= ~][$Y] 求值将在对象 [$X] 中[+清除[%]]值 [$Y]。

[item]
[:en]
The value [$Y] [+is set[%]] in the object [$X] if the expression [$X] [`&] [$Y]
is nonzero.
[:zh_CN]
若表达式 [$X] [`&] [$Y] 为非零，则在对象 [$X] 中值 [$Y] [+已设置[%]]。
[list:end]
