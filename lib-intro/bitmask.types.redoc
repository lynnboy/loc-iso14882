[section#bitmask.types
    [:en] Bitmask types
    [:zh_CN] 掩码类型
]

[para]
[:en]
Several types defined in [#[=firstlibchapter]] through [#[=lastlibchapter]] and
[#depr] are [+bitmask types[%type[!bitmask]]].
[:zh_CN]
[#[=firstlibchapter]] 到 [#[=lastlibchapter]] 以及 [#depr] 中定义的几个类型是
[+掩码类型[%类型[!掩码～]]]。

[:en]
[%type[!enumerated]]
Each bitmask type can be implemented as an enumerated type that overloads
certain operators, as an integer type, or as a [`bitset] ([#template.bitset]).
[:zh_CN]
[%类型[!列举～]]
每个掩码类型可以被实现为重载了特定运算符的列举类型，整数类型，或者为 [`bitset]
（[#template.bitset]）。

[para]
[:en]
The bitmask type [`[^bitmask]] can be written:
[:zh_CN]
掩码类型 [`[^bitmask]] 可以写为：

[codeblock]
// [:en] For exposition only. \
   [:zh_CN] 只为阐释目的。
// [:en] [`int_type] is an integral type capable of representing all values of the bitmask type. \
   [:zh_CN] [`int_type] 为能够表示掩码类型的所有值的整型类型。
enum [[redoc("^>")]]bitmask : int_type {
  [[redoc("[$[`[^V]]_{0}]")]] = 1 << 0, [[redoc("[$[`[^V]]_{1}]")]] = 1 << 1, [[redoc("[$[`[^V]]_{2}]")]] = 1 << 2, [[redoc("[$[`[^V]]_{3}]")]] = 1 << 3, [[redoc("[$\\ldots]")]]
};

inline constexpr [[redoc("^>")]]bitmask [[redoc("[$[`[^C]]_{0}]")]]([[redoc("[$[`[^V]]_{0}]")]]);
inline constexpr [[redoc("^>")]]bitmask [[redoc("[$[`[^C]]_{1}]")]]([[redoc("[$[`[^V]]_{1}]")]]);
inline constexpr [[redoc("^>")]]bitmask [[redoc("[$[`[^C]]_{2}]")]]([[redoc("[$[`[^V]]_{2}]")]]);
inline constexpr [[redoc("^>")]]bitmask [[redoc("[$[`[^C]]_{3}]")]]([[redoc("[$[`[^V]]_{3}]")]]);
  [[redoc("[$\\vdots]")]]

constexpr [[redoc("^>")]]bitmask operator&([[redoc("^>")]]bitmask X, [[redoc("^>")]]bitmask Y) {
  return static_cast<[[redoc("^>")]]bitmask>(
    static_cast<int_type>(X) & static_cast<int_type>(Y));
}
constexpr [[redoc("^>")]]bitmask operator|([[redoc("^>")]]bitmask X, [[redoc("^>")]]bitmask Y) {
  return static_cast<[[redoc("^>")]]bitmask>(
    static_cast<int_type>(X) | static_cast<int_type>(Y));
}
constexpr [[redoc("^>")]]bitmask operator^([[redoc("^>")]]bitmask X, [[redoc("^>")]]bitmask Y) {
  return static_cast<[[redoc("^>")]]bitmask>(
    static_cast<int_type>(X) ^ static_cast<int_type>(Y));
}
constexpr [[redoc("^>")]]bitmask operator ([[redoc("^>")]]bitmask X) {
  return static_cast<[[redoc("^>")]]bitmask>(~static_cast<int_type>(X));
}
[[redoc("^>")]]bitmask& operator&=([[redoc("^>")]]bitmask& X, [[redoc("^>")]]bitmask Y) {
  X = X & Y; return X;
}
[[redoc("^>")]]bitmask& operator|=([[redoc("^>")]]bitmask& X, [[redoc("^>")]]bitmask Y) {
  X = X | Y; return X;
}
[[redoc("^>")]]bitmask& operator^=([[redoc("^>")]]bitmask& X, [[redoc("^>")]]bitmask Y) {
  X = X ^ Y; return X;
}
[codeblock:end]

[para]
[:en]
Here, the names [$[`[^C]]_0], [$[`[^C]]_1], etc. represent [+bitmask elements
[%bitmask[!element]]] for this particular [%type[!bitmask]] bitmask type.
[:zh_CN]
此处，名字 [$[`[^C]]_0]，[$[`[^C]]_1] 等等表示这个特定[%类型[!掩码～]]掩码
类型的[+掩码元素[%掩码[!元素]]]。

[:en]
All such elements have distinct, nonzero values such that, for any pair
[$[`[^C]]_i] and [$[`[^C]]_j] where [$i \neq j], [`[$[^C]_i] & [$[^C]_i]] is
nonzero and [`[$[^C]_i] & [$[^C]_j]] is zero.
[:zh_CN]
这些元素都具有不同的值，使得对于任意一对 [$[`[^C]]_i] 和 [$[`[^C]]_j]（其中
[$i \neq j]），“[`[$[^C]_i] & [$[^C]_i]]”为非零，而“[`[$[^C]_i] & [$[^C]_j]]”为零。

[:en]
Additionally, the value [`0] is used to represent an [+empty bitmask[%bitmask
[!empty]]], in which no bitmask elements are set.
[:zh_CN]
此外，[`0] 值被用于表示[+空掩码[%掩码[!空～]]]，其中没有被设置的掩码元素。

[para]
[:en]
The following terms apply to objects and values of bitmask types:
[:zh_CN]
下列术语适用于掩码类型的对象和值：

[list]
[item]
[:en]
To [+set[%bitmask[!value[!set]]]] a value [^Y] in an object [^X] is to evaluate
the expression [^X] [`|=] [^Y].
[:zh_CN]
对表达式 [^X] [`|=] [^Y] 求值将在对象 [^X] 中[+设置[%掩码[!值[!设置]]]]值 [^Y]。

[item]
[:en]
To [+clear[%bitmask[!value[!clear]]]] a value [^Y] in an object [^X] is to
evaluate the expression [^X] [`&= ~][^Y].
[:zh_CN]
对表达式 [^X] [`&= ~][^Y] 求值将在对象 [^X] 中[+清除[%掩码[!值[!清除]]]]值 [^Y]。

[item]
[:en]
The value [^Y] [+is set[%bitmask[!value[!is set]]]] in the object [^X] if the
expression [^X] [`&] [^Y] is nonzero.
[:zh_CN]
若表达式 [^X] [`&] [^Y] 为非零，则在对象 [^X] 中值 [^Y] [+已设置[%掩码[!值
[!已设置]]]]。
[list:end]
