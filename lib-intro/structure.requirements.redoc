[section#structure.requirements
    [:en] Requirements
    [:zh_CN] 规定
]

[para]
[:en]
[%requirements]
Requirements describe constraints that shall be met by a [=Cpp] program that
extends the standard library.
[:zh_CN]
[%规定]
规定描述了对标准程序库进行扩展的 [=Cpp] 程序所要满足的约束条件。

[:en]
Such extensions are generally one of the following:
[:zh_CN]
这种扩展通常是如下之一：

[list]
[item]
[:en] Template arguments
[:zh_CN] 模板实参
[item]
[:en] Derived classes
[:zh_CN] 派生类
[item]
[:en] Containers, iterators, and algorithms that meet an interface convention or
satisfy a concept
[:zh_CN] 符合某个接口约定或者满足某个概念的容器、迭代器和算法
[list:end]

[para]
[:en]
The string and iostream components use an explicit representation of operations
required of template arguments.

[:zh_CN]
字符串和 I/O 流组件使用针对模板实参所需的操作的明确表示。

[:en]
They use a class template [`char_traits] to define these constraints.
[:zh_CN]
它们使用类模板 [`char_traits] 来定义这些约束条件。

[para]
[:en]
Interface convention requirements are stated as generally as possible.
[:zh_CN]
尽可能一般性地叙述针对接口约定的规定。

[:en]
Instead of stating ["class [`X] has to define a member function
[`operator++()]], the interface requires ["for any object [`x] of class [`X],
[`++x] is defined].
[:zh_CN]
不说“类 [`X] 必须定义成员函数 [`operator++()]”，而是说接口要求“对于类 [`X] 的
任意对象 [`x]，[`++x] 是有定义的”。

[:en]
That is, whether the operator is a member is unspecified.
[:zh_CN]
就是说，该运算符是否是成员是未指明的。

[para]
[:en]
Requirements are stated in terms of well-defined expressions that define valid
terms of the types that satisfy the requirements.
[:zh_CN]
这些规定是依据良构表达式来叙述的，它们定义了满足这些规定的类型的有效依据术语。

[:en]
For every set of well-defined expression requirements there is either a named
concept or a table that specifies an initial set of the valid expressions and
their semantics.
[:zh_CN]
对于每组良构表达式规定，都有一个指定其有效表达式及其语义的初始集合的具名的概念或
表格。

[:en]
Any generic algorithm ([#algorithms]) that uses the well-defined expression
requirements is described in terms of the valid expressions for its template
type parameters.
[:zh_CN]
任何使用了某良构表达式规定的通用算法（[#algorithms]），都是依据其模板类型形参的
有效表达式来描述的。

[para]
[:en]
The library specification uses a typographical convention for naming
requirements.
[:zh_CN]
程序库说明中使用字体约定来指名各种规定。

[:en]
Names in [$italic] type that begin with the prefix [$Cpp17] refer to sets of
well-defined expression requirements typically presented in tabular form,
possibly with additional prose semantic requirements.
[:zh_CN]
具有前缀 [$Cpp17] 的[$斜体字]的名字代表具有恰当定义的表达式规定集合，通常以表格
形式给出，可能带有额外的语义规定。

[:en]
For example, [*Cpp17Destructible] ([#destructible]) is such a named
requirement.
[:zh_CN]
例如，[*Cpp17Destructible]（[#destructible]）就是这种具名规定。

[:en]
Names in [`constant width] type refer to library concepts which are presented as
a concept definition ([#temp]), possibly with additional prose semantic
requirements.
[:zh_CN]
[`等宽字体]的名字代表程序库概念，它们以概念定义式（[#temp]）的形式给出，可能带有
额外的语义规定。

[:en]
For example, [`Destructible] ([#concept.destructible]) is such a named
requirement.
[:zh_CN]
例如，[`Destructible]（[#concept.destructible]）就是这种具名规定。

[para]
[:en]
Template argument requirements are sometimes referenced by name.
[:zh_CN]
有时按名字提及针对模板实参的规定。

[:en]
See [#type.descriptions].
[:zh_CN]
参见 [#type.descriptions]。

[para]
[:en]
In some cases the semantic requirements are presented as [=Cpp] code.
[:zh_CN]
某些情况下的语义规定是用 [=Cpp] 代码表示的。

[:en]
Such code is intended as a specification of equivalence of a construct to
another construct, not necessarily as the way the construct must be implemented.
[#:note#fn:$section.1]
[:zh_CN]
此种代码的意图是作为对一个语言构造与另一个语言构造之间的等价性的说明，而并非作为
实现该语言构造的必须方式。[#:note#fn:$section.1]

[note:foot#fn:$section.1]
[:en]
Although in some cases the code given is unambiguously the optimum
implementation.
[:zh_CN]
虽然某些情况下给定的代码明显为其最优实现。
[note:end]

[para]
[:en]
Required operations of any concept defined in this document need not be total
functions; that is, some arguments to a required operation may result in the
required semantics failing to be satisfied.
[:zh_CN]
本文档中所定义的任何概念所需要的操作，不必是全函数；就是说，对某个所需操作的某些
实参可能导致无法满足其所要求的语义。

[enter:example]
[:en]
The required [`<] operator of the [`StrictTotallyOrdered] concept
([#concept.stricttotallyordered]) does not meet the semantic requirements of
that concept when operating on NaNs.
[:zh_CN]
[`StrictTotallyOrdered] 概念（[#concept.stricttotallyordered]）所需的 [`<]
运算符并不需要对 NaN 进行操作时也满足这个概念的语义规定。
[exit:example]

[:en]
This does not affect whether a type satisfies the concept.
[:zh_CN]
这并不会影响类型是否满足概念。

[para]
[:en]
A declaration may explicitly impose requirements through its associated
constraints ([#temp.constr.decl]).
[:zh_CN]
声明式可以通过其关联约束（[#temp.constr.decl]）显式地施加一些规定。

[:en]
When the associated constraints refer to a concept ([#temp.concept]), the
semantic constraints specified for that concept are additionally imposed on the
use of the declaration.
[:zh_CN]
如果关联约束涉指了某个概念（[#temp.concept]），则对这个概念所指定的语义约束同样
额外施加到对这个声明式的使用之中。
