[section#structure.requirements
    [:en] Requirements
    [:zh_CN] 规定
]

[para]
[:en] [%requirements]
Requirements describe constraints that shall be met by a [=Cpp] program that
extends the standard library.
[:zh_CN] [%规定]
规定部分描述了对标准程序库进行扩展的 [=Cpp] 程序所要满足的约束条件。

[:en] Such extensions are generally one of the following:
[:zh_CN] 这种扩展通常是如下之一：

[list]
[item]
[:en] Template arguments
[:zh_CN] 模板实参
[item]
[:en] Derived classes
[:zh_CN] 派生类
[item]
[:en] Containers, iterators, and algorithms that meet an interface convention or model a concept
[:zh_CN] 符合某个接口约定或者构成某个概念的容器、迭代器和算法
[list:end]

[para]
[:en] The string and iostream components use an explicit representation of operations
required of template arguments.
[:zh_CN] 字符串和 I/O 流组件采用了针对模板实参所需的操作的一种明确表示。

[:en] They use a class template [`char_traits] to define these constraints.
[:zh_CN] 它们用类模板 [`char_traits] 来定义这些约束条件。

[para]
[:en] Interface convention requirements are stated as generally as possible.
[:zh_CN] 以尽可能一般性地方式叙述针对接口约定的规定。

[:en] Instead of stating [=lq]class [`X] has to define a member function [`operator++()][=rq],
the interface requires [=lq]for any object [`x] of class [`X], [`++x] is defined[=rq].
[:zh_CN] 不说“类 [`X] 必须定义成员函数 [`operator++()]”，而是说接口要求
“对于类 [`X] 的任意对象 [`x]，[`++x] 有定义”。

[:en] That is, whether the operator is a member is unspecified.
[:zh_CN] 就是说，未指明该运算符是否是成员。

[para]
[:en] Requirements are stated in terms of well-defined expressions that define
valid terms of the types that meet the requirements.
[:zh_CN] 这些规定是以良定义表达式的形式给出的，它们定义了满足这些规定的类型的有效术语。

[:en] For every set of well-defined expression requirements there is either a named concept
or a table that specifies an initial set of the valid expressions and their semantics.
[:zh_CN] 对于每组良定义表达式规定，都有一个具名概念或一个表格，指定其有效表达式
及其语义的初始集合。

[:en] Any generic algorithm ([#algorithms]) that uses the well-defined expression
requirements is described in terms of the valid expressions for its template type parameters.
[:zh_CN] 任何使用了良定义表达式规定的通用算法（[#algorithms]），都是以针对其
模板类型形参的有效表达式的形式描述的。

[para]
[:en] The library specification uses a typographical convention for naming requirements.
[:zh_CN] 程序库的规范在指名各种规定时使用一套字体约定。

[:en] Names in [span:it italic] type that begin with the prefix [=oldconcept] refer to
sets of well-defined expression requirements typically presented in tabular form,
possibly with additional prose semantic requirements.
[:zh_CN] 具有前缀 [=oldconcept] 的[span:it 斜体字]的名字，代表良定义表达式规定集合，
它们通常以表格形式给出，可能带有额外的语义规定。

[:en] For example, [^:oc Destructible] ([#:tab#cpp17.destructible]) is such a named requirement.
[:zh_CN] 例如，[^:oc Destructible]（[#:tab#cpp17.destructible]）就是这种具名规定。

[:en] Names in [`constant width] type refer to library concepts which are presented as
a concept definition ([#temp]), possibly with additional prose semantic requirements.
[:zh_CN] [`等宽字体]的名字代表程序库概念，它们以概念定义式（[#temp]）的形式给出，
可能带有额外的语义规定。

[:en] For example, [`:c destructible] ([#concept.destructible]) is such a named requirement.
[:zh_CN] 例如，[`:c destructible]（[#concept.destructible]）就是这种具名规定。

[para]
[:en] Template argument requirements are sometimes referenced by name.
[:zh_CN] 有时按名字提及针对模板实参的规定。

[:en] See [#type.descriptions].
[:zh_CN] 参见 [#type.descriptions]。

[para]
[:en] In some cases the semantic requirements are presented as [=Cpp] code.
[:zh_CN] 某些情况下的语义规定是用 [=Cpp] 代码表示的。

[:en] Such code is intended as a specification of equivalence of a construct to
another construct, not necessarily as the way the construct must be implemented.[#:fn]
[:zh_CN] 此种代码的意图是作为对一个语言构造与另一个语言构造之间的等价性的说明，而并非作为
实现该语言构造的必须方式[#:fn]。

[note:foot]
[:en] Although in some cases the code given is unambiguously the optimum implementation.
[:zh_CN] 虽然某些情况下给定的代码明显为其最优实现。
[note:end]

[para]
[:en] Required operations of any concept defined in this document need not be total
functions; that is, some arguments to a required operation may result in the
required semantics failing to be met.
[:zh_CN] 本文档中所定义的任何概念所需要的操作，不必是全函数；就是说，对某个
所需操作的某些实参可能导致无法满足其所要求的语义。

[begin:example]
[:en] The required [`<] operator of the [`:c totally_ordered] concept ([#concept.totallyordered])
does not meet the semantic requirements of that concept when operating on NaNs.
[:zh_CN] [`:c totally_ordered] 概念（[#concept.totallyordered]）所需的 [`<] 运算符，
并不需要对操作 NaN 时也满足这个概念的语义规定。
[end:example]

[:en] This does not affect whether a type models the concept.
[:zh_CN] 这并不会影响类型是否构成概念。

[para]
[:en] A declaration may explicitly impose requirements through its associated
constraints ([#temp.constr.decl]).
[:zh_CN] 声明式可以通过其关联约束（[#temp.constr.decl]）显式地施加一些规定。

[:en] When the associated constraints refer to a concept ([#temp.concept]), the
semantic constraints specified for that concept are additionally imposed on the
use of the declaration.
[:zh_CN] 如果关联约束涉指了某个概念（[#temp.concept]），则对这个概念所指定的
语义约束同样额外施加到对这个声明式的使用之中。
