[section#expos.only.func
    [:en] Exposition-only functions
    [:zh_CN] 仅用于阐释的函数
]

[para]
[:en]
Several function templates defined in [#language.support] through [#thread] and
[#depr] are only defined for the purpose of exposition.
[:zh_CN]
从 [#language.support] 到 [#thread] 以及 [#depr] 中定义的一些函数模板，只是为了
进行阐释的目的而定义的。

[:en]
The declaration of such a function is followed by a comment ending in [=expos].
[:zh_CN]
这种函数的声明式后面跟着以“[=expos]”结尾的代码注释。

[para]
[:en]
The following are defined for exposition only to aid in the specification of the
library:
[:zh_CN]
下面各项仅用于阐释目的而定义，以助于对程序库的说明：

[%@lib@raw [`[^decay-copy]][@decay-copy]]
[codeblock:notation [!:var decay-copy]]
template<class T> constexpr decay_t<T> [*decay-copy](T&& v)
    noexcept(is_nothrow_convertible_v<T, decay_t<T>>)           // [=expos]
  { return std::forward<T>(v); }

constexpr auto [*synth-three-way] =
  []<class T, class U>(const T& t, const U& u)
    requires requires {
      { t < u } -> convertible_to<bool>;
      { u < t } -> convertible_to<bool>;
    }
  {
    if constexpr (three_way_comparable_with<T, U>) {
      return t <=> u;
    } else {
      if (t < u) return weak_ordering::less;
      if (u < t) return weak_ordering::greater;
      return weak_ordering::equivalent;
    }
  };

template<class T, class U=T>
using [*synth-three-way-result] = decltype([*synth-three-way](declval<T&>(), declval<U&>()));
[codeblock:end]
