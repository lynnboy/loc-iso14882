[section#customization.point.object
    [:en] Customization Point Object types
    [:zh_CN] 定制化点对象类型
]

[para]
[:en]
A [+customization point object[%]] is a function object ([#function.objects])
with a literal class type that interacts with program-defined types while
enforcing semantic requirements on that interaction.
[:zh_CN]
[+定制化点对象[%]]是具有字面类型的函数对象（[#function.objects]），它与程序所
定义的类型产生交互，参与对这种交互强制实施语义规定。

[para]
[:en]
The type of a customization point object shall model [`semiregular]
([#concepts.object]).
[:zh_CN]
定制化点对象的类型应当构成 [`semiregular]（[#concepts.object]）。

[para]
[:en]
All instances of a specific customization point object type shall be equal
([#concepts.equality]).
[:zh_CN]
某个特定定制化点对象类型的所有实例都应当相等（[#concepts.equality]）。

[para]
[:en]
The type [`T] of a customization point object shall model
[`invocable<const T&, Args...>] ([#concept.invocable]) when the types in
[`Args...] meet the requirements specified in that customization point
object[=']s definition.
[:zh_CN]
某个定制化点对象的类型 [`T]，当 [`Args...] 中的类型满足该定制化点对象的定义中所
指定的规定时，应当构成 [`invocable<const T&, Args...>]（[#concept.invocable]）。

[:en]
When the types of [`Args...] do not meet the customization point object[=']s
requirements, [`T] shall not have a function call operator that participates in
overload resolution.
[:zh_CN]
如果 [`Args...] 的各类型并不满足该定制化点对象的规定，则 [`T] 不能带有参与重载
决议的函数调用运算符。

[para]
[:en]
Each customization point object type constrains its return type to model a
particular concept.
[:zh_CN]
各个定制化点对象类型对其返回类型施加约束以构成某个特定的概念。

[para]
[enter:note]
[:en]
Many of the customization point objects in the library evaluate function call
expressions with an unqualified name which results in a call to a
program-defined function found by argument dependent name lookup
([#basic.lookup.argdep]).
[:zh_CN]
程序库中的许多定制化点对象都对具有未限定名的函数调用表达式进行求值，这导致对
依赖于实参的名字查找所找到的程序定义的函数的调用（[#basic.lookup.argdep]）。

[:en]
To preclude such an expression resulting in a call to unconstrained functions
with the same name in namespace [`std], customization point objects specify that
lookup for these expressions is performed in a context that includes deleted
overloads matching the signatures of overloads defined in namespace [`std].
[:zh_CN]
为防止这样的表达式导致对 [`std] 命名空间中的某个具有相同名字的无约束函数的调用，
定制化点对象为这些表达式指定的名字查找，将在包含与 [`std] 命名空间中所定义的重载
的签名相匹配的一个被弃置的重载函数的语境中进行。

[:en]
When the deleted overloads are viable, program-defined overloads need be more
specialized ([#temp.func.order]) or more constrained ([#temp.constr.order]) to
be used by a customization point object.
[:zh_CN]
如果被弃置的重载可行，则程序所定义的重载需要更加特殊（[#temp.func.order]），或者
更受约束（[#temp.constr.order]），以使其被定制化点对象所使用。
[exit:note]
