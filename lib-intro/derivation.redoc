[section#derivation
    [:en] Derived classes
    [:zh_CN] 派生类
]

[para]
[:en]
[%class[!derived]]
[%class[!base]]
An implementation may derive any class in the [=Cpp] standard library from a
class with a name reserved to the implementation.
[:zh_CN]
[%类[!派生～]]
[%类[!基～]]
实现可能把 [=Cpp] 标准程序库中的任何类派生于具有为实现保留的名字的类。

[para]
[:en]
Certain classes defined in the [=Cpp] standard library are required to be
derived from other classes in [%library[![=Cpp] standard]] the [=Cpp] standard
library.
[:zh_CN]
[=Cpp] 标准程序库中定义的某些类是规定派生自 [%程序库[![=Cpp] 标准～]][=Cpp] 标准
程序库中的其他类的。

[:en]
An implementation may derive such a class directly from the required base or
indirectly through a hierarchy of base classes with names reserved to the
implementation.
[:zh_CN]
实现可能把这种类直接派生于所规定的基类，或者通过一个具有为实现保留的名字的基类的
层次进行间接派生。

[para]
[:en]
In any case:
[:zh_CN]
在任何情况下：

[list]
[item]
[:en]
[%class[!base]]
Every base class described as [`:key virtual] shall be virtual;
[:zh_CN]
[%类[!基～]]
被描述为 [`:key virtual] 的每个基类都应当是虚的；

[item]
[:en]
[%class[!base]]
Every base class not specified as [`:key virtual] shall not be virtual;
[:zh_CN]
[%类[!基～]]
未被指定为 [`:key virtual] 的每个基类都不应是虚的；

[item]
[:en]
Unless explicitly stated otherwise, types with distinct names shall be distinct
types.[#:fn#]
[:zh_CN]
除非另外明确说明，带有不同名字的类型应当是不同的类型。[#:fn#]

[note:foot]
[:en]
There is an implicit exception to this rule for types that are described as
synonyms for basic integral types, such as [`size_t] ([#support.types]) and
[`streamoff] ([#stream.types]).
[:zh_CN]
对本规则存在一种隐含的例外，是描述为基本整型类型的同义词的类型，比如 [`size_t]
（[#support.types]）和 [`streamoff]（[#stream.types]）。
[note:end]
[list:end]

[para]
[:en]
All types specified in the [=Cpp] standard library shall be non-[`final] types
unless otherwise specified.
[:zh_CN]
除非另行指明，否则 [=Cpp] 标准程序库中指定的所有类型都应当为非 [`final] 类型。
