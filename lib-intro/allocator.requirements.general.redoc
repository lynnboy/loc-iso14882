[section#allocator.requirements.general
    [:en] General
    [:zh_CN] 概述
]

[%[^:oc Allocator]]
[para]
[:en]
The library describes a standard set of requirements for [+:% allocators], which
are class-type objects that encapsulate the information about an allocation
model.
[:zh_CN]
程序库描述了对于[+:% 分配器]的一组标准规定，它们是封装某种分配模型的相关信息的
类类型的对象。

[:en]
This information includes the knowledge of pointer types, the type of their
difference, the type of the size of objects in this allocation model, as well
as the memory allocation and deallocation primitives for it.
[:zh_CN]
这些信息中包括，关于其中的指针类型，它们的差的类型，这个分配模型中的对象的大小的
类型，以及其中的内存分配和回收原语的知识。

[:en]
All of the string types ([#strings]), containers ([#containers]) (except [`array]),
string buffers and string streams ([#input.output]), and [`match_results] ([#re])
are parameterized in terms of allocators.
[:zh_CN]
所有字符串类型（[#strings]），（除 [`array] 之外的）容器（[#containers]），
字符串缓冲区和字符串流（[#input.output]），以及 [`match_results]（[#re]），都是
以分配器进行参数化的。

[para]
[:en] In subclause [#allocator.requirements],
[:zh_CN] 在子条款 [#allocator.requirements] 中，
[list]
[item]
[:en] [`T], [`U], [`C] denote any [=cv]-unqualified object type
([#term.object.type]),
[:zh_CN] [`T]，[`U]，[`C] 代表任何无 [=cv] 限定的对象类型
（[#term.object.type]），
[item]
[:en] [`X] denotes an allocator class for type [`T],
[:zh_CN] [`X] 代表用于类型 [`T] 的分配器类，
[item]
[:en] [`Y] denotes the corresponding allocator class for type [`U],
[:zh_CN] [`Y] 代表对应的用于类型 [`U] 的分配器类，
[item]
[:en] [`XX] denotes the type [`allocator_traits<X>],
[:zh_CN] [`XX] 代表类型 [`allocator_traits<X>]，
[item]
[:en] [`XX] denotes the type [`allocator_traits<Y>],
[:zh_CN] [`XX] 代表类型 [`allocator_traits<Y>]，
[item]
[:en] [`a], [`a1], [`a2] denote lvalues of type [`X],
[:zh_CN] [`a]，[`a1]，[`a2] 代表类型 [`X] 的左值，
[item]
[:en] [`u] denotes the name of a variable being declared,
[:zh_CN] [`u] 代表所声明的变量的名字，
[item]
[:en] [`b] denotes a value of type [`Y],
[:zh_CN] [`b] 代表类型 [`Y] 的值，
[item]
[:en] [`c] denotes a pointer of type [`C*] through which indirection is valid,
[:zh_CN] [`c] 代表类型 [`C*] 的指针，通过它可以进行间接，
[item]
[:en] [`p] denotes a value of type [`XX::pointer] obtained by calling
[`a1.allocate], where [`a1 == a],
[:zh_CN] [`p] 代表类型 [`XX:pointer] 的值，通过调用 [`a1.allocate] 获得，其中
[`a1 == a]，
[item]
[:en] [`p] denotes a value of type [`XX::const_pointer] obtained by conversion
from a value [`p],
[:zh_CN] [`p] 代表通过从值 [`p] 转换而获得的类型 [`XX::const_pointer] 的值，
[item]
[:en] [`r] denotes a value of type [`T&] obtained by the expression [`*p],
[:zh_CN] [`p] 代表通过表达式 [`*p] 获得的 [`T&] 类型的值，
[item]
[:en] [`w] denotes a value of type [`XX::void_pointer] obtained by conversion
from a value [`p],
[:zh_CN] [`w] 代表通过从值 [`p] 转换而获得的类型 [`XX::void_pointer] 的值，
[item]
[:en] [`x] denotes a value of type [`XX::const_void_pointer] obtained by
conversion from a value [`q] or a value [`w],
[:zh_CN] [`x] 代表通过从值 [`q] 或值 [`w] 转换而获得的类型
[`XX::const_void_pointer] 的值，
[item]
[:en] [`y] denotes a value of type [`XX::const_void_pointer] obtained by
conversion from a result value of [`YY::allocate], or else a value of type
(possibly const) [`std::nullptr_t],
[:zh_CN] [`x] 代表通过从 [`YY::allocate] 的结果值，或者（可能为 const 的）
类型 [`std::nullptr_t] 的值转换而获得的类型 [`XX::const_void_pointer] 的值，
[item]
[:en] [`n] denotes a value of type [`XX::size_type],
[:zh_CN] [`n] 代表类型 [`XX::size_type] 的值，
[item]
[:en] [`Args] denotes a template parameter pack, and
[:zh_CN] [`Args] 代表模板形参包组，而
[item]
[:en] [`args] denotes a function parameter pack with the pattern [`Args&&].
[:zh_CN] [`args] 代表模式为 [`Args&&] 的函数形参包组。
[list:end]

[para]
[:en]
The class template [`allocator_traits] ([#allocator.traits]) supplies a uniform
interface to all allocator types.
[:zh_CN]
类模板 [`allocator_traits]（[#allocator.traits]）提供一套面对所有分配器类型的
统一接口。

[:en]
This subclause describes the requirements on allocator types and thus on types
used to instantiate [`allocator_traits].
[:zh_CN]
本子条款描述针对分配器类型（以及用以实例化 [`allocator_traits] 的类型）的规定。

[:en]
A requirement is optional if a default for a given type or expression is
specified.
[:zh_CN]
如果对于给定的类型或表达式给出了默认值，则该条规定是可选的。

[:en]
Within the standard library [`allocator_traits] template, an optional
requirement that is not supplied by an allocator is replaced by the specified
default type or expression.
[:zh_CN]
在标准程序库的 [`allocator_traits] 模板中，分配器没提供的可选规定被替换为所指定
的默认类型或表达式。

[begin:note]
[:en] There are no program-defined specializations of [`allocator_traits].
[:zh_CN] 没有程序定义的 [`allocator_traits] 特化式。
[end:note]

[codeblock:declaration]
typename X::pointer
[codeblock:end]

[div:description]
[para:remarks]
[:en] Default: [`T*]
[:zh_CN] 默认：[`T*]
[div:end]

[codeblock:declaration]
typename X::const_pointer
[codeblock:end]

[div:description]
[para:mandates]
[:en] [`XX::pointer] is convertible to [`XX::const_pointer].
[:zh_CN] [`XX::pointer] 可以转换为 [`XX::const_pointer]。

[para:remarks]
[:en] Default: [`pointer_traits<XX::pointer>::rebind<const T>]
[:zh_CN] 默认：[`pointer_traits<XX::pointer>::rebind<const T>]
[div:end]

[codeblock:declaration]
typename X::void_pointer
typename Y::void_pointer
[codeblock:end]

[div:description]
[para:mandates]
[:en] [`XX::pointer] is convertible to [`XX::void_pointer].
[:zh_CN] [`XX::pointer] 可以转换为 [`XX::void_pointer]。

[:en] [`XX::void_pointer] and [`YY::void_pointer] are the same type.
[:zh_CN] [`XX::void_pointer] 和 [`YY::void_pointer] 是相同类型。

[para:remarks]
[:en] Default: [`pointer_traits<XX::pointer>::rebind<void>]
[:zh_CN] 默认：[`pointer_traits<XX::pointer>::rebind<void>]
[div:end]

[codeblock:declaration]
typename X::const_void_pointer
typename Y::const_void_pointer
[codeblock:end]

[div:description]
[para:mandates]
[:en] [`XX::pointer], [`XX::const_pointer], and [`XX::void_pointer] are
convertible to [`XX::const_void_pointer].
[:zh_CN] [`XX::pointer]，[`XX::const_pointer]，和 [`XX::void_pointer] 可以转换为
[`XX::const_void_pointer].

[:en] [`XX::const_void_pointer] and [`YY::const_void_pointer] are the same type.
[:zh_CN] [`XX::const_void_pointer] 和 [`YY::const_void_pointer] 是相同类型。

[para:remarks]
[:en] Default: [`pointer_traits<XX::pointer>::rebind<const void>]
[:zh_CN] 默认：[`pointer_traits<XX::pointer>::rebind<const void>]
[div:end]

[codeblock:declaration]
typename X::value_type
[codeblock:end]

[div:description]
[para:result]
[:en] Identical to [`T].
[:zh_CN] 等同于 [`T]。
[div:end]

[codeblock:declaration]
typename X::size_type
[codeblock:end]

[div:description]
[para:result]
[:en] An unsigned integer type that can represent the size of the largest object
in the allocation model.
[:zh_CN] 可以表示分配模型中的最大对象大小的无符号整数类型。

[para:remarks]
[:en] Default: [`make_unsigned_t<XX::difference_type>]
[:zh_CN] 默认：[`make_unsigned_t<XX::difference_type>]
[div:end]

[codeblock:declaration]
typename X::difference_type
[codeblock:end]

[div:description]
[para:result]
[:en] A signed integer type that can represent the difference between any two
pointers in the allocation model.
[:zh_CN] 可以表示分配模型中任意两个指针之间的差的有符号整数类型。

[para:remarks]
[:en] Default: [`pointer_traits<XX::pointer>::difference_type]
[:zh_CN] 默认：[`pointer_traits<XX::pointer>::difference_type]
[div:end]

[codeblock:declaration]
typename X::template rebind<U>::other
[codeblock:end]

[div:description]
[para:result]
[`Y]

[para:ensures]
[:en] For all [`U] (including [`T]), [`YY::rebind_alloc<T>] is [`X].
[:zh_CN] 对于所有 [`U]（包括 [`T]），[`YY::rebind_alloc<T>] 为 [`X]。

[para:remarks]
[:en] If [`Allocator] is a class template instantiation of the form
[`SomeAllocator<T, Args>], where [`Args] is zero or more type arguments, and
[`Allocator] does not supply a [`rebind] member template, the standard
[`allocator_traits] template uses [`SomeAllocator<U, Args>] in place of
[`Allocator::rebind<U>::other] by default.
[:zh_CN] 若 [`Allocator] 是形式为 [`SomeAllocator<T, Args>] 的类模板实例，其中
[`Args] 为零个或更多的类型实参，而 [`Allocator] 并未提供 [`rebind] 成员模板，则
标准的 [`allocator_traits] 模板默认情况下就使用 [`SomeAllocator<U, Args>] 以代替
[`Allocator::rebind<U>::other]。

[:en] For allocator types that are not template instantiations of the above form,
no default is provided.
[:zh_CN] 对于并非以上形式的模板实例的分配器类型，不提供默认值。

[para]
[begin:note]
[:en] The member class template [`rebind] of [`X] is effectively a typedef
template.
[:zh_CN] [`X] 的成员类模板 [`rebind] 相当于一个 typedef 模板。

[:en] In general, if the name [`Allocator] is bound to [`SomeAllocator<T>], then
[`Allocator::rebind<U>::other] is the same type as [`SomeAllocator<U>], where
[`SomeAllocator<T>::value_type] is [`T] and [`SomeAllocator<U>::value_type] is [`U].
[:zh_CN] 一般地，如果名字 [`Allocator] 绑定为 [`SomeAllocator<T>]，则
[`Allocator::rebind<U>::other] 与 [`SomeAllocator<U>] 是相同类型，其中
[`SomeAllocator<T>::value_type] 为 [`T] 而 [`SomeAllocator<U>::value_type] 为 [`U]。
[end:note]
[div:end]

[codeblock:declaration]
*p
[codeblock:end]

[div:description]
[para:result]
[`T&]
[div:end]

[codeblock:declaration]
*q
[codeblock:end]

[div:description]
[para:result]
[`const T&]

[para:ensures]
[:en] [`*q] refers to the same object as [`*p].
[:zh_CN] [`*q] 与 [`*p] 指代相同对象。
[div:end]

[codeblock:declaration]
p->m
[codeblock:end]

[div:description]
[para:result]
[:en] Type of [`T::m].
[:zh_CN] [`T::m] 的类型。

[para:expects]
[:en] [`(*p).m] is well-defined.
[:zh_CN] [`(*p).m] 良构。

[para:effects]
[:en] Equivalent to [`(*p).m].
[:zh_CN] 等价于 [`(*p).m]。
[div:end]

[codeblock:declaration]
q->m
[codeblock:end]

[div:description]
[para:result]
[:en] Type of [`T::m].
[:zh_CN] [`T::m] 的类型。

[para:expects]
[:en] [`(*q).m] is well-defined.
[:zh_CN] [`(*q).m] 良构。

[para:effects]
[:en] Equivalent to [`(*q).m].
[:zh_CN] 等价于 [`(*q).m]。
[div:end]

[codeblock:declaration]
static_cast<XX::pointer>(w)
[codeblock:end]

[div:description]
[para:result]
[`XX::pointer]

[para:ensures]
[:en] [`static_cast<XX::pointer>(w) == p].
[:zh_CN] [`static_cast<XX::pointer>(w) == p]。
[div:end]

[codeblock:declaration]
static_cast<XX::const_pointer>(x)
[codeblock:end]

[div:description]
[para:result]
[`XX::const_pointer]

[para:ensures]
[:en] [`static_cast<XX::const_pointer>(w) == q].
[:zh_CN] [`static_cast<XX::const_pointer>(w) == q]。
[div:end]

[codeblock:declaration]
pointer_traits<XX::pointer>::pointer_to(r)
[codeblock:end]

[div:description]
[para:result]
[`XX::pointer]

[para:ensures]
[:en] Same as [`p].
[:zh_CN] 与 [`p] 相同。
[div:end]

[codeblock:declaration]
a.allocate(n)
[codeblock:end]

[div:description]
[para:result]
[`XX::pointer]

[para:effects]
[:en] Memory is allocated for an array of [`n] [`T] and such an object is
created but array elements are not constructed.
[:zh_CN] 为 [`n] 个 [`T] 的数组分配内存，创建该对象但并未构造其数组元素。

[begin:example]
[:en] When reusing storage denoted by some pointer value [`p],
[`launder(reinterpret_cast<T*>(new (p) byte`[n * sizeof(T)`]))] can be used
to implicitly create a suitable array object and obtain a pointer to it.
[:zh_CN] 若要重用某个指针值 [`p] 所代表的存储，可以使用
[`launder(reinterpret_cast<T*>(new (p) byte`[n * sizeof(T)`]))] 来隐式创建
一个合适的数组对象并获取指向它的指针。
[end:example]

[para:throws]
[:en] [`allocate] may throw an appropriate exception.
[:zh_CN] [`allocate] 可以抛出一个适当的异常。

[para]
[begin:note]
[:en] It is intended that [`a.allocate] be an efficient means of allocating
a single object of type [`T], even when [`sizeof(T)] is small.
[:zh_CN] 其目的是使得 [`a.allocate] 成为分配 [`T] 类型的单个对象的高效方式，
而无论 [`sizeof(T)] 是否很小。

[:en] That is, there is no need for a container to maintain its own free list.
[:zh_CN] 就是说，容器不需要维护其自己的自由表。
[end:note]

[para:remarks]
[:en] If [`n == 0], the return value is unspecified.
[:zh_CN] 若 [`n == 0]，则未指明返回值。
[div:end]

[codeblock:declaration]
a.allocate(n, y)
[codeblock:end]

[div:description]
[para:result]
[`XX::pointer]

[para:effects]
[:en] Same as [`a.allocate(n)].
[:zh_CN] 与 [`a.allocate(n)] 相同。

[:en] The use of [`y] is unspecified, but it is intended as an aid to locality.
[:zh_CN] 未指明 [`y] 的使用情况，但其意图是促进局部性。

[para:remarks]
[:en] Default: [`a.allocate(n)]
[:zh_CN] 默认：[`a.allocate(n)]
[div:end]

[codeblock:declaration]
a.allocate_at_least(n)
[codeblock:end]

[div:description]
[para:result]
[`allocation_result<XX::pointer, XX::size_type>]

[para:returns]
[:en] [`allocation_result<XX::pointer, XX::size_type>{ptr, count}], where [`ptr]
is memory allocated for an array of [`count] [`T] and such an object is created
but array elements are not constructed, such that [$[`count] \geq [`n]].
[:zh_CN] [`allocation_result<XX::pointer, XX::size_type>{ptr, count}]，其中
[`ptr] 是为 [`count] 个 [`T] 的数组所分配的内存，且这个对象被创建但未构造各个
数组元素，并使得 [$[`count] \geq [`n]]。

[para:throws]
[:en] [`allocate_at_least] may throw an appropriate exception.
[:zh_CN] [`allocate_at_least] 可能抛出适当的异常。

[para:remarks]
[:en] Default: [`{a.allocate(n), n}].
[:zh_CN] 默认值：[`{a.allocate(n), n}]。
[div:end]

[codeblock:declaration]
a.deallocate(p, n)
[codeblock:end]

[div:description]
[para:result]
[:en] (not used)
[:zh_CN] （未使用）

[para:expects]
[list]
[item]
[:en] If [`p] is memory that was obtained by a call to [`a.allocate_at_least],
let [`ret] be the value returned and [`req] be the value passed as the first
argument of that call.
[:zh_CN] 如果 [`p] 是通过对 [`a.allocate_at_least] 的调用所获得的内存，令 [`ret]
为所返回的值，而 [`req] 为作为该调用的第一个实参所传递的值。

[:en] [`p] is equal to [`ret.ptr] and [`n] is a value such that
[$[`req] \leq [`n] \leq [`ret.count]].
[:zh_CN] [`p] 等于 [`ret.ptr]，且 [`n] 为满足
[$[`req] \leq [`n] \leq [`ret.count]] 的值。

[item]
[:en] Otherwise, [`p] is a pointer value obtained from [`allocate].
[:zh_CN] 否则，[`p] 是从 [`allocate] 所获得的指针值。

[:en] [`n] equals the value passed as the first argument to the invocation of
[`allocate] which returned [`p].
[:zh_CN] [`n] 等于返回 [`p] 的那次对 [`allocate] 的调用中为第一个实参所传递的值。
[list:end]

[:en] [`p] has not been invalidated by an intervening call to [`deallocate].
[:zh_CN] [`p] 未被介入其间的对 [`deallocate] 的调用所失效。

[para:throws]
[:en] Nothing.
[:zh_CN] 不抛出异常。
[div:end]

[codeblock:declaration]
a.max_size()
[codeblock:end]

[div:description]
[para:result]
[`XX::size_type]

[para:returns]
[:en] The largest value [`n] that can meaningfully be passed to [`a.allocate(n)].
[:zh_CN] 可以传递给 [`a.allocate(n)] 且有意义的最大值 [`n]。

[para:remarks]
[:en] Default: [`numeric_limits<size_type>::max() / sizeof(value_type)]
[:zh_CN] 默认：[`numeric_limits<size_type>::max() / sizeof(value_type)]
[div:end]

[codeblock:declaration]
a1 == a2
[codeblock:end]

[div:description]
[para:result]
[`bool]

[para:returns]
[:en] [`true] only if storage allocated from each can be deallocated via the other.
[:zh_CN] 仅当其中任意一个所分配的存储都可以以另一个进行回收时返回 [`true]。

[para:throws]
[:en] Nothing.
[:zh_CN] 不抛出异常。

[para:remarks]
[:en] [`operator==] shall be reflexive, symmetric, and transitive.
[:zh_CN] [`operator==] 应当是自反的，对称的，和可传递的。
[div:end]

[codeblock:declaration]
a1 != a2
[codeblock:end]

[div:description]
[para:result]
[`bool]

[para:returns]
[:en] [!(a1 == a2)].
[:zh_CN] [!(a1 == a2)]。
[div:end]

[codeblock:declaration]
a == b
[codeblock:end]

[div:description]
[para:result]
[`bool]

[para:returns]
[:en] [`a == YY::rebind_alloc<T>(b)].
[:zh_CN] [`a == YY::rebind_alloc<T>(b)]。
[div:end]

[codeblock:declaration]
a != b
[codeblock:end]

[div:description]
[para:result]
[`bool]

[para:returns]
[:en] [`!(a == b)].
[:zh_CN] [`!(a == b)]。
[div:end]

[codeblock:declaration]
X u(a);
X u = a;
[codeblock:end]

[div:description]
[para:ensures]
[`u == a]

[para:throws]
[:en] Nothing.
[:zh_CN] 不抛出异常。
[div:end]

[codeblock:declaration]
X u(b);
[codeblock:end]

[div:description]
[para:ensures]
[:en] [`Y(u) == b] and [`u == X(b)].
[:zh_CN] [`Y(u) == b] 并且 [`u == X(b)]。

[para:throws]
[:en] Nothing.
[:zh_CN] 不抛出异常。
[div:end]

[codeblock:declaration]
X u(std::move(a));
X u = std::move(a);
[codeblock:end]

[div:description]
[para:ensures]
[:en] The value of [`a] is unchanged and is equal to [`u].
[:zh_CN] 不改变 [`a] 的值且它等于 [`u]。

[para:throws]
[:en] Nothing.
[:zh_CN] 不抛出异常。
[div:end]

[codeblock:declaration]
X u(std::move(b));
[codeblock:end]

[div:description]
[para:ensures]
[:en] [`u] is equal to the prior value of [`X(b)].
[:zh_CN] [`u] 等于 [`X(b)] 之前的值。

[para:throws]
[:en] Nothing.
[:zh_CN] 不抛出异常。
[div:end]

[codeblock:declaration]
a.construct(c, args)
[codeblock:end]

[div:description]
[para:result]
[:en] (not used)
[:zh_CN] （未使用）

[para:effects]
[:en] Constructs an object of type [`C] at [`c].
[:zh_CN] 在 [`c] 处构造类型 [`C] 的对象。

[para:remarks]
[:en] Default: [`construct_at(c, std::forward<Args>(args)...)]
[:zh_CN] 默认：[`construct_at(c, std::forward<Args>(args)...)]
[div:end]

[codeblock:declaration]
a.destroy(c)
[codeblock:end]

[div:description]
[para:result]
[:en] (not used)
[:zh_CN] （未使用）

[para:effects]
[:en] Destroys the object at [`c].
[:zh_CN] 销毁 [`c] 处的对象。

[para:remarks]
[:en] Default: [`destroy_at(c)]
[:zh_CN] 默认：[`destroy_at(c)]
[div:end]

[codeblock:declaration]
a.select_on_container_copy_construction()
[codeblock:end]

[div:description]
[para:result]
[`X]

[para:returns]
[:en] Typically returns either [`a] or [`X()].
[:zh_CN] 典型情况下返回 [`a] 或 [`X()]。

[para:remarks]
[:en] Default: [`return a;]
[:zh_CN] 默认：[`return a;]
[div:end]

[codeblock:declaration]
typename X::propagate_on_container_copy_assignment
[codeblock:end]

[div:description]
[para:result]
[:en] Identical to or derived from [`true_type] or [`false_type].
[:zh_CN] 等同于，或者派生于 [`true_type] 或 [`false_type]。

[para:returns]
[:en] [`true_type] only if an allocator of type [`X] should be copied when
the client container is copy-assigned; if so, [`X] shall meet the
[^:oc CopyAssignable] requirements ([#:tab#cpp17.copyassignable]) and the copy
operation shall not throw exceptions.
[:zh_CN] 当客户容器被复制赋值时，仅当类型 [`X] 的一个分配器应当被复制时，为
[`true_type]；若如此，则 [`X] 应当满足 [^:oc CopyAssignable] 的规定
（[#:tab#cpp17.copyassignable]），并且其复制操作不能抛出异常。

[para:remarks]
[:en] Default: [`false_type]
[:zh_CN] 默认：[`false_type]
[div:end]

[codeblock:declaration]
typename X::propagate_on_container_move_assignment
[codeblock:end]

[div:description]
[para:result]
[:en] Identical to or derived from [`true_type] or [`false_type].
[:zh_CN] 等同于，或者派生于 [`true_type] 或 [`false_type]。

[para:returns]
[:en] [`true_type] only if an allocator of type [`X] should be moved when
the client container is move-assigned; if so, [`X] shall meet the
[^:oc MoveAssignable] requirements ([#:tab#cpp17.moveassignable]) and the move
operation shall not throw exceptions.
[:zh_CN] 当客户容器被移动赋值时，仅当类型 [`X] 的一个分配器应当被移动时，为
[`true_type]；若如此，则 [`X] 应当满足 [^:oc MoveAssignable] 的规定
（[#:tab#cpp17.moveassignable]），并且其移动操作不能抛出异常。

[para:remarks]
[:en] Default: [`false_type]
[:zh_CN] 默认：[`false_type]
[div:end]

[codeblock:declaration]
typename X::propagate_on_container_swap
[codeblock:end]

[div:description]
[para:result]
[:en] Identical to or derived from [`true_type] or [`false_type].
[:zh_CN] 等同于，或者派生于 [`true_type] 或 [`false_type]。

[para:returns]
[:en] [`true_type] only if an allocator of type [`X] should be swapped when
the client container is swapped; if so, [`X] shall meet the [^:oc Swappable]
requirements ([#swappable.requirements]) and the [`swap] operation shall not
throw exceptions.
[:zh_CN] 当客户容器被交换时，仅当类型 [`X] 的一个分配器应当被交换时，为
[`true_type]；若如此，则 [`X] 应当满足 [^:oc Swappable] 的规定
（[#swappable.requirements]），并且其 [`swap] 操作不能抛出异常。

[para:remarks]
[:en] Default: [`false_type]
[:zh_CN] 默认：[`false_type]
[div:end]

[codeblock:declaration]
typename X::is_always_equal
[codeblock:end]

[div:description]
[para:result]
[:en] Identical to or derived from [`true_type] or [`false_type].
[:zh_CN] 等同于，或者派生于 [`true_type] 或 [`false_type]。

[para:returns]
[:en] [`true_type] only if the expression [`a1 == a2] is guaranteed to be [`true]
for any two (possibly const) values [`a1], [`a2] of type [`X].
[:zh_CN] 对于任意两个（可能为 const 的）类型 [`X] 的值 [`a1] 和 [`a2]，
仅当表达式 [`a1 == a2] 保证为 [`true] 时，为 [`true_type]。

[para:remarks]
[:en] Default: [`is_empty<X>::type]
[:zh_CN] 默认：[`is_empty<X>::type]
[div:end]

[para]
[:en]
An allocator type [`X] shall meet the [^:oc CopyConstructible] requirements
([#:tab#cpp17.copyconstructible]).
[:zh_CN]
分配器类型 [`X] 应当满足 [^:oc CopyConstructible] 的规定
（[#:tab#cpp17.copyconstructible]）。

[:en]
The [`XX::pointer], [`XX::const_pointer], [`XX::void_pointer], and
[`XX::const_void_pointer] types shall meet the [^:oc NullablePointer]
requirements ([#:tab#cpp17.nullablepointer]).
[:zh_CN]
类型 [`XX::pointer]，[`XX::const_pointer]，[`XX::void_pointer]，以及
[`XX::const_void_pointer] 应当满足 [^:oc NullablePointer] 的规定
（[#:tab#cpp17.nullablepointer]）。

[:en]
No constructor, comparison operator function, copy operation, move operation, or
swap operation on these pointer types shall exit via an exception.
[:zh_CN]
这些指针类型的构造函数，比较运算符函数，复制操作，移动操作，或者交换操作不能以
抛出异常退出。

[:en]
[`XX::pointer] and [`XX::const_pointer] shall also meet the requirements for a
[^:oc RandomAccessIterator] ([#random.access.iterators]) and the additional
requirement that, when [`p] and [`(p + n)] are dereferenceable pointer values
for some integral value [`n],
[:zh_CN]
[`XX::pointer] 和 [`XX::const_pointer] 应当也满足 [^:oc RandomAccessIterator]
（[#random.access.iterators]）的规定，以及如下的额外规定：对于整型值 [`n]，若
[`p] 和 [`(p + n)] 均为可解引用的指针值，
[codeblock]
addressof(*(p + n)) == addressof(*p) + n
[codeblock:end]
[:en@~] is [`true].
[:zh_CN@~] 为 [`true]。

[para]
[:en]
Let [`x1] and [`x2] denote objects of (possibly different) types
[`XX::void_pointer], [`XX::const_void_pointer], [`XX::pointer],
or [`XX::const_pointer].
[:zh_CN]
令 [`x1] 和 [`x2] 代表类型 [`XX::void_pointer]，[`XX::const_void_pointer]，
[`XX::pointer]，或者 [`XX::const_pointer] 的（可能不同的）对象。

[:en]
Then, [`x1] and [`x2] are [+equivalently-valued] pointer values, if and only
if both [`x1] and [`x2] can be explicitly converted to the two corresponding
objects [`px1] and [`px2] of type [`XX::const_pointer], using a sequence of
[`:key static_cast]s using only these four types, and the expression
[`px1 == px2] evaluates to [`true].
[:zh_CN]
则有，当且仅当 [`x1] 和 [`x2] 都可利用一系列仅使用这四种类型的
[`:key static_cast] 被显式转换为 [`XX::const_pointer] 类型的对应对象 [`px1] 和
[`px2]，并且表达式 [`px1 == px2] 求值为 [`true] 时，[`x1] 和 [`x2] 是[+具有等价值]
的指针值。

[para]
[:en]
Let [`w1] and [`w2] denote objects of type [`XX::void_pointer].
[:zh_CN]
令 [`w1] 和 [`w2] 代表类型 [`XX::void_pointer] 的对象。

[:en]
Then for the expressions
[:zh_CN]
则对于表达式

[codeblock]
w1 == w2
w1 != w2
[codeblock:end]

[:en@~]
either or both objects may be replaced by an equivalently-valued object of type
[`XX::const_void_pointer] with no change in semantics.
[:zh_CN@~]
两个对象之一或二者均可被替换为具有等价值的 [`XX::const_void_pointer] 类型的对象，
并且不改变其语义。

[para]
[:en]
Let [`p1] and [`p2] denote objects of type [`XX::pointer].
[:zh_CN]
令 [`p1] 和 [`p2] 代表类型 [`XX::pointer] 的对象。

[:en]
Then for the expressions
[:zh_CN]
则对于表达式

[codeblock]
p1 == p2
p1 != p2
p1 < p2
p1 <= p2
p1 >= p2
p1 > p2
p1 - p2
[codeblock:end]

[:en@~]
either or both objects may be replaced by an equivalently-valued object of type
[`XX::const_pointer] with no change in semantics.
[:zh_CN@~]
两个对象之一或二者均可被替换为具有等价值的 [`XX::const_pointer] 类型的对象，并且
不改变其语义。

[para]
[:en]
An allocator may constrain the types on which it can be instantiated and the
arguments for which its [`construct] or [`destroy] members may be called.
[:zh_CN]
分配器可以对有关何种类型可以对其进行实例化，以及它的 [`construct] 或 [`destroy]
成员可以对何种实参进行调用给出限制。

[:en]
If a type cannot be used with a particular allocator, the allocator class or the
call to [`construct] or [`destroy] may fail to instantiate.
[:zh_CN]
如果某个类型不能用于特定的分配器，则分配器的类，或对 [`construct] 或 [`destroy]
的调用，可以实例化失败。

[para]
[:en]
If the alignment associated with a specific over-aligned type is not supported
by an allocator, instantiation of the allocator for that type may fail.
[:zh_CN]
如果分配器无法支持与某个特定过量对齐类型关联的对齐，则分配器对这个类型的实例化
可以失败。

[:en]
The allocator also may silently ignore the requested alignment.
[:zh_CN]
分配器还可以沉默地忽略所请求的对齐。

[begin:note]
[:en]
Additionally, the member function [`allocate] for that type can fail by throwing
an object of type [`bad_alloc].
[:zh_CN]
此外，针对这个类型的成员函数 [`allocate] 可以通过抛出类型 [`bad_alloc] 的对象而
失败。
[end:note]

[para]
[begin:example]
[:en]
The following is an allocator class template supporting the minimal interface
that meets the requirements of [#allocator.requirements.general]:
[:zh_CN]
以下的分配器类模板支持能够满足 [#allocator.requirements.general] 的规定的最小接口：

[codeblock]
template<class T>
struct SimpleAllocator {
  using value_type = T;
  SimpleAllocator([[redoc("[em ctor args]")]]);

  template<class U> SimpleAllocator(const SimpleAllocator<U>& other);

  T* allocate(std::size_t n);
  void deallocate(T* p, std::size_t n);

  template<class U> bool operator==(const SimpleAllocator<U>& rhs) const;
};
[codeblock:end]
[end:example]
