[section#alg.func.obj
    [:en] Algorithm function objects
    [:zh_CN] 算法函数对象
]

[para]
[:en] An [+algorithm function object] is a customization point object ([#customization.point.object])
that is specified as one or more overloaded function templates.
[:zh_CN] [+算法函数对象]是规定作为一个或多个重载函数模板的定制化点对象（[#customization.point.object]）。

[:en] The name of these function templates designates
the corresponding algorithm function object.
[:zh_CN] 这些函数模板的名字代表对应的算法函数对象。

[para]
[:en] For an algorithm function object [`o], let [$S] be the corresponding set
of function templates.
[:zh_CN] 对于算法函数对象 [`o]，令 [$S] 为对应的函数模板集合。

[:en] Then for any sequence of arguments [$[`args] \dotsc],
[$[`o(args] \dotsc [`)]] is expression-equivalent to [$[`s(args] \dotsc [`)]],
where the result of name lookup for [`s] is the overload set [$S].
[:zh_CN] 从而对于任意实参序列 [$[`args] \dotsc]，[$[`o(args] \dotsc [`)]]
均按表达式等价于 [$[`s(args] \dotsc [`)]]，其中对 [`s] 名字查找的结果为重载集合 [$S]。

[begin:note]
[:en] Algorithm function objects are not found by argument-dependent name lookup
([#basic.lookup.argdep]).
[:zh_CN] 实参依赖查找（[#basic.lookup.argdep]）不会找到算法函数对象。

[:en] When found by unqualified name lookup ([#basic.lookup.unqual])
for the [~postfix-expression] in a function call ([#expr.call]),
they inhibit argument-dependent name lookup.
[:zh_CN] 若它被针对函数调用中的[~后缀表达式]（[#expr.call]）进行的无限定名查找（[#basic.lookup.unqual]）
所找到，则它抑制实参依赖查找。

[begin:example]
[codeblock]
void foo() {
  using namespace std::ranges;
  std::vector<int> vec{1,2,3};
  find(begin(vec), end(vec), 2);        // #1
}
[codeblock:end]

[:en] The function call expression at #1 invokes [`std::ranges::find],
not [`std::find].
[:zh_CN] #1 中的函数调用表达式调用的是 [`std::ranges::find] 而非 [`std::find]。
[end:example]
[end:note]
