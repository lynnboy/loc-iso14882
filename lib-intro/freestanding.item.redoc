[section#freestanding.item
    [:en] Freestanding items
    [:zh_CN] 自立式项目
]

[para]
[:en]
[%item[!freestanding][%freestanding item]]
A [+freestanding item] is a declaration, entity, [~typedef-name], or macro
that is required to be present in a freestanding implementation and a hosted
implementation.
[:zh_CN]
[%项目[!自立式][%自立式项目]]
[+自立式项目]是在自立式实现和宿主式实现中都要求出现的声明式，实体，[~typedef-名]，
或者宏。

[para]
[:en] Unless otherwise specified, the requirements on freestanding items for
a freestanding implementation are the same as the corresponding requirements for
a hosted implementation, except that not all of the members of the namespaces
are required to be present.
[:zh_CN] 除非另有规定，对自立式项目在自立式实现中的规定与其在宿主式实现中的对应
规定相同，但并不要求提供命名空间的所有成员。

[begin:note]
[:en] This implies that freestanding item enumerations have the same enumerators
on freestanding implementations and hosted implementations.
[:zh_CN] 这意味着自立式项目枚举在自立式实现和宿主式实现中具有相同的枚举符。

[:en] Furthermore, class types have the same members and class templates have
the same deduction guides on freestanding implementations and hosted
implementations.
[:zh_CN] 此外，类类型在自立式实现和宿主式实现中具有相同的成员，类模板还具有相同
的推断导引。
[end:note]

[para]
[:en] [%declaration[!freestanding item]]
A declaration in a header synopsis is a freestanding item if
[:zh_CN] [%声明式[!自立式项目]]
如下标注的头文件纲要中的声明式是自立式项目：
[list]
[item]
[:en@~] it is followed by a comment that includes [=freestanding], or
[:zh_CN@~] 其后跟着包含“[=freestanding]”的注释，或
[item]
[:en@~] the header synopsis begins with a comment that includes
[&:em all freestanding].
[:zh_CN@~] 头文件纲要以包含“[&:em 全自立式]”的注释开头。
[list:end]

[para]
[:en] [%entity[!freestanding item]] [%[~typedef-name][!freestanding item]]
An entity or [~typedef-name] is a freestanding item if it is:
[:zh_CN] [%实体[!自立式项目]] [%[~typedef-名][!自立式项目]]
如下标注的头文件纲要中的实体或 [~typedef-名]是自立式项目：
[list]
[item]
[:en@~] introduced by a declaration that is a freestanding item,
[:zh_CN@~] 由自立式项目声明式所引入，
[item]
[:en@~] an enclosing namespace of a freestanding item,
[:zh_CN@~] 自立式项目的外围命名空间，
[item]
[:en@~] a friend of a freestanding item,
[:zh_CN@~] 自立式项目的友元，
[item]
[:en@~] denoted by a [~typedef-name] that is a freestanding item, or
[:zh_CN@~] 由作为自立式项目的 [~typedef-名]所代表，
[item]
[:en@~] denoted by an alias template that is a freestanding item.
[:zh_CN@~] 由作为自立式项目的别名模板所代表。
[list:end]

[para]
[:en] [%macro[!freestanding item]]
A macro is a freestanding item if it is defined in a header synopsis and
[:zh_CN] [%宏[!自立式项目]]
若宏在头文件纲要中定义且被如下标注，则它是自立式项目：
[list]
[item]
[:en@~] the definition is followed by a comment that includes [=freestanding], or
[:zh_CN@~] 其定义之后跟着包含“[=freestanding]”的注释，或
[item]
[:en@~] the header synopsis begins with a comment that includes
[&:em all freestanding].
[:zh_CN@~] 头文件纲要以包含“[&:em 全自立式]”的注释开头。
[list:end]

[para]
[begin:example]
[codeblock]
#define NULL [[redoc("[=seebelow]")]]      // [=freestanding]
[codeblock:end]
[end:example]

[begin:example]
[codeblock]
// [:en] all freestanding [:zh_CN] 全自立式
namespace std {[[redoc("!>")]]}
[codeblock:end]
[end:example]

[para]
[:en] Function declarations and function template declarations followed by a
comment that include [=freestanding-deleted] are [+:adj freestanding deleted
[!functions[%function]]].
[:zh_CN] 其后跟着包含“[=freestanding-deleted]”的注释的函数声明式或函数模板声明式，
是[+:adj 自立式弃置[!函数]]。

[:en] On freestanding implementations, it is [?impldef whether a freestanding
deleted function is a freestanding item or a deleted function] whether each
function definition introduced by a freestanding deleted function
is a freestanding item or a deleted function ([#dcl.fct.def.delete]).
[:zh_CN] 在自立式实现中，由自立式弃置函数所引入的各个函数定义，是自立式项目还是
弃置函数（[#dcl.fct.def.delete]）是[?impldef 自立式弃置函数是自立式项目还是弃置
函数]。

[begin:example]
[codeblock]
double abs(double j);           // [=freestanding-deleted]
[codeblock:end]
[end:example]
