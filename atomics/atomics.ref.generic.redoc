[section#atomics.ref.generic
    [:en] Class template [`atomic_ref]
    [:zh_CN] 类模板 [`atomic_ref]
]

[%@lib atomic_ref]
[%@lib@member value_type[!atomic_ref]]
[codeblock:synopsis]
namespace std {
  template<class T> struct atomic_ref {
  private:
    T* ptr;             // [=expos]
  public:
    using value_type = T;
    static constexpr size_t required_alignment = [[redoc("[?impdefx"
        "[:en] required alignment for [`atomic_ref] type[=']s operations"
        "[:zh_CN] [`atomic_ref] 类型的操作所需的对齐]")]];

    static constexpr bool is_always_lock_free = [[redoc("[?impdefx"
        "[:en] whether a given [`atomic_ref] type[=']s operations are always lock free"
        "[:zh_CN] 给定 [`atomic_ref] 类型的操作是否总是无锁的]")]];
    bool is_lock_free() const noexcept;

    explicit atomic_ref(T&);
    atomic_ref(const atomic_ref&) noexcept;
    atomic_ref& operator=(const atomic_ref&) = delete;

    void store(T, memory_order = memory_order::seq_cst) const noexcept;
    T operator=(T) const noexcept;
    T load(memory_order = memory_order::seq_cst) const noexcept;
    operator T() const noexcept;

    T exchange(T, memory_order = memory_order::seq_cst) const noexcept;
    bool compare_exchange_weak(T&, T,
                               memory_order, memory_order) const noexcept;
    bool compare_exchange_strong(T&, T,
                                 memory_order, memory_order) const noexcept;
    bool compare_exchange_weak(T&, T,
                               memory_order = memory_order::seq_cst) const noexcept;
    bool compare_exchange_strong(T&, T,
                                 memory_order = memory_order::seq_cst) const noexcept;

    void wait(T, memory_order = memory_order::seq_cst) const noexcept;
    void notify_one() const noexcept;
    void notify_all() const noexcept;
  };
}
[codeblock:end]

[para]
[:en] An [`atomic_ref] object applies atomic operations ([#atomics.general]) to
the object referenced by [`*ptr] such that, for the lifetime ([#basic.life]) of
the [`atomic_ref] object, the object referenced by [`*ptr] is an atomic object
([#intro.races]).
[:zh_CN] [`atomic_ref] 对象对由 [`*ptr] 所引用的对象实施原子性操作
（[#atomics.general]），使得在该 [`atomic_ref] 对象的生存期（[#basic.life]）内，
由 [`*ptr] 所引用的对象时一个原子性对象（[#intro.races]）。

[para]
[:en] The program is ill-formed if [`is_trivially_copyable_v<T>] is [`false].
[:zh_CN] 若 [`is_trivially_copyable_v<T>] 为 [`false] 则程序非良构。

[para]
[:en] The lifetime ([#basic.life]) of an object referenced by [`*ptr] shall
exceed the lifetime of all [`atomic_ref]s that reference the object.
[:zh_CN] 由 [`*ptr] 所引用的对象的生存期（[#basic.life]）应当超过所有引用这个
对象的 [`atomic_ref] 的生存期。

[:en] While any [`atomic_ref] instances exist that reference the [`*ptr] object,
all accesses to that object shall exclusively occur through those [`atomic_ref]
instances.
[:zh_CN] 如果仍有引用 [`*ptr] 对象的 [`atomic_ref] 实例存在，则对该对象的所有
访问都应当排他性地通过这些 [`atomic_ref] 实例来进行。

[:en] No subobject of the object referenced by [`atomic_ref] shall be
concurrently referenced by any other [`atomic_ref] object.
[:zh_CN] 由 [`atomic_ref] 所引用的对象的任何子对象都不应当同时由其他
[`atomic_ref] 对象进行引用。

[para]
[:en] Atomic operations applied to an object through a referencing [`atomic_ref]
are atomic with respect to atomic operations applied through any other
[`atomic_ref] referencing the same object.
[:zh_CN] 通过引用它的 [`atomic_ref] 对象所实施的原子性操作，相对于通过引用相同
对象的任何其他 [`atomic_ref] 所实施的原子性操作来说都是原子性的。

[begin:note]
[:en] Atomic operations or the [`atomic_ref] constructor could acquire a shared
resource, such as a lock associated with the referenced object, to enable atomic
operations to be applied to the referenced object.
[:zh_CN] 各原子性操作或者 [`atomic_ref] 的构造函数可以获取一个共享资源，比如与
所引用的对象相关联的锁，以允许对所引用的对象实施原子性操作。
[end:note]

[include atomics.ref.ops]

[include atomics.ref.int]

[include atomics.ref.float]

[include atomics.ref.pointer]

[include atomics.ref.memop]
