[section#atomics.types.generic
    [:en] Class template [`atomic]
    [:zh_CN] 类模板 [`atomic]
]

[%@library atomic]
[%@library value_type[!atomic]]
[%@library atomic[!value_type]]
[codeblock:synopsis [!:mark ImpDef] ]
namespace std {
  template<class T> struct atomic {
    using value_type = T;
    static constexpr bool is_always_lock_free = [%@impdefx [:en] whether a given
[`atomic] type[=']s operations are always lock free [:zh_CN] 给定 [`atomic] 类型
的操作是否总是无锁的][=ImpDef];
    bool is_lock_free() const volatile noexcept;
    bool is_lock_free() const noexcept;
    void store(T, memory_order = memory_order::seq_cst) volatile noexcept;
    void store(T, memory_order = memory_order::seq_cst) noexcept;
    T load(memory_order = memory_order::seq_cst) const volatile noexcept;
    T load(memory_order = memory_order::seq_cst) const noexcept;
    operator T() const volatile noexcept;
    operator T() const noexcept;
    T exchange(T, memory_order = memory_order::seq_cst) volatile noexcept;
    T exchange(T, memory_order = memory_order::seq_cst) noexcept;
    bool compare_exchange_weak(T&, T, memory_order, memory_order) volatile noexcept;
    bool compare_exchange_weak(T&, T, memory_order, memory_order) noexcept;
    bool compare_exchange_strong(T&, T, memory_order, memory_order) volatile noexcept;
    bool compare_exchange_strong(T&, T, memory_order, memory_order) noexcept;
    bool compare_exchange_weak(T&, T, memory_order = memory_order::seq_cst) volatile noexcept;
    bool compare_exchange_weak(T&, T, memory_order = memory_order::seq_cst) noexcept;
    bool compare_exchange_strong(T&, T, memory_order = memory_order::seq_cst) volatile noexcept;
    bool compare_exchange_strong(T&, T, memory_order = memory_order::seq_cst) noexcept;

    atomic() noexcept = default;
    constexpr atomic(T) noexcept;
    atomic(const atomic&) = delete;
    atomic& operator=(const atomic&) = delete;
    atomic& operator=(const atomic&) volatile = delete;
    T operator=(T) volatile noexcept;
    T operator=(T) noexcept;
  };
}
[codeblock:end]

[%@library atomic]
[para]
[:en] The template argument for [`T] shall be trivially copyable
([#basic.types]).
[:zh_CN] 作为 [`T] 的模板实参应当是可平凡复制的（[#basic.types]）。

[enter:note]
[:en] Type arguments that are not also statically initializable may be difficult
to use.
[:zh_CN] 并非同时为可静态初始化的类型实参可能难于使用。
[exit:note]

[para]
[:en] The specialization [`atomic<bool>] is a standard-layout struct.
[:zh_CN] 特例 [`atomic<bool>] 是标准布局结构。

[para]
[enter:note]
[:en] The representation of an atomic specialization need not have the same size
as its corresponding argument type.
[:zh_CN] [`atomic] 的特例的表示并不需要与其对应实参类型具有相同大小。

[:en] Specializations should have the same size whenever possible, as this
reduces the effort required to port existing code.
[:zh_CN] 只要可能，各特例就应当具有相同的大小，这样可以减小移植现有代码时的
工作量。
[exit:note]

[include atomics.types.operations]

[include atomics.types.int]

[include atomics.types.float]

[include atomics.types.pointer]

[include atomics.types.memop]
