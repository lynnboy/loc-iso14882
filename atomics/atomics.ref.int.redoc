[section#atomics.ref.int
    [:en] Specializations for integral types
    [:zh_CN] 针对整型类型的特化式
]

[%@library atomic_ref<[*integral]>]
[para]
[:en] There are specializations of the [`atomic_ref] class template for the
integral types [`char], [`signed char], [`unsigned char], [`short],
[`unsigned short], [`int], [`unsigned int], [`long], [`unsigned long],
[`long long], [`unsigned long long], [`char16_t], [`char32_t], [`wchar_t], and
any other types needed by the typedefs in the header [`<cstdint>].
[:zh_CN] [`atomic_ref] 类模板对整型类型 [`char]、[`signed char]、
[`unsigned char]、[`short]、[`unsigned short]、[`int]、[`unsigned int]、[`long]、
[`unsigned long]、[`long long]、[`unsigned long long]、[`char16_t]、[`char32_t]、
[`wchar_t]，以及头文件 [`<cstdint>] 中的各 typedef 所需的任何其他类型，进行了
特化。

[:en] For each such type [`[*integral]], the specialization
[`atomic_ref<[*integral]>] provides additional atomic operations appropriate to
integral types.
[:zh_CN] 对于每个这样的类型 [`[*integral]]，特例 [`atomic_ref<[*integral]>] 提供
了适用于该整型类型的额外的原子性操作。

[enter:note]
[:en] For the specialization [`atomic_ref<bool>], see [#atomics.ref.generic].
[:zh_CN] 对于特例 [`atomic_ref<bool>]，参见 [#atomics.ref.generic]。
[exit:note]

[codeblock:synopsis [!:var integral] [!:mark ImpDef] ]
namespace std {
  template<> struct atomic_ref<[*integral]> {
  private:
    [*integral]* ptr;        // [=Expos]
  public:
    using value_type = [*integral];
    using difference_type = value_type;
    static constexpr bool is_always_lock_free = [%@impdefx [:en] whether a given
[`atomic_ref] type[=']s operations are always lock free [:zh_CN] 给定 [`atomic_ref] 类型
的操作是否总是无锁的][=ImpDef];
    static constexpr size_t required_alignment = [%@impdefx [:en] required alignment
for [`atomic_ref] type[=']s operations [:zh_CN] [`atomic_ref] 类型的操作所需的对齐][=ImpDef];

    atomic_ref() = delete;
    atomic_ref& operator=(const atomic_ref&) = delete;

    explicit atomic_ref([*integral]&);
    atomic_ref(const atomic_ref&) noexcept;

    [*integral] operator=([*integral]) const noexcept;
    operator [*integral]() const noexcept;

    bool is_lock_free() const noexcept;
    void store([*integral], memory_order = memory_order_seq_cst) const noexcept;
    [*integral] load(memory_order = memory_order_seq_cst) const noexcept;
    [*integral] exchange([*integral],
                      memory_order = memory_order_seq_cst) const noexcept;
    bool compare_exchange_weak([*integral]&, [*integral],
                               memory_order, memory_order) const noexcept;
    bool compare_exchange_strong([*integral]&, [*integral],
                                 memory_order, memory_order) const noexcept;
    bool compare_exchange_weak([*integral]&, [*integral],
                               memory_order = memory_order_seq_cst) const noexcept;
    bool compare_exchange_strong([*integral]&, [*integral],
                                 memory_order = memory_order_seq_cst) const noexcept;

    [*integral] fetch_add([*integral],
                       memory_order = memory_order_seq_cst) const noexcept;
    [*integral] fetch_sub([*integral],
                       memory_order = memory_order_seq_cst) const noexcept;
    [*integral] fetch_and([*integral],
                       memory_order = memory_order_seq_cst) const noexcept;
    [*integral] fetch_or([*integral],
                       memory_order = memory_order_seq_cst) const noexcept;
    [*integral] fetch_xor([*integral],
                       memory_order = memory_order_seq_cst) const noexcept;

    [*integral] operator++(int) const noexcept;
    [*integral] operator--(int) const noexcept;
    [*integral] operator++() const noexcept;
    [*integral] operator--() const noexcept;
    [*integral] operator+=([*integral]) const noexcept;
    [*integral] operator-=([*integral]) const noexcept;
    [*integral] operator&=([*integral]) const noexcept;
    [*integral] operator|=([*integral]) const noexcept;
    [*integral] operator^=([*integral]) const noexcept;
  };
}
[codeblock:end]

[para]
[:en] Descriptions are provided below only for members that differ from the
primary template.
[:zh_CN] 下文仅为与主模板不同的成员提供描述。

[para]
[:en] The following operations perform arithmetic computations.
[:zh_CN] 以下各操作实施算术运算。

[:en] The key, operator, and computation correspondence is identified in
[#atomic.arithmetic.computations].
[:zh_CN] 关键词、运算符和运算之间的对应关系在 [#atomic.arithmetic.computations]
中标明。

[%@library fetch_add[!atomic_ref<[*integral]>]]
[%@library atomic_ref<[*integral]>[!fetch_add]]
[%@library fetch_and[!atomic_ref<[*integral]>]]
[%@library atomic_ref<[*integral]>[!fetch_and]]
[%@library fetch_or [!atomic_ref<[*integral]>]]
[%@library atomic_ref<[*integral][!fetch_or >]]
[%@library fetch_sub[!atomic_ref<[*integral]>]]
[%@library atomic_ref<[*integral]>[!fetch_sub]]
[%@library fetch_xor[!atomic_ref<[*integral]>]]
[%@library atomic_ref<[*integral]>[!fetch_xor]]
[codeblock:declaration]
[*integral] fetch_[*key]([*integral] operand, memory_order order = memory_order_seq_cst) const noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Atomically replaces the value referenced by [`*ptr] with the result of the
computation applied to the value referenced by [`*ptr] and the given [`operand].
[:zh_CN] 原子地将由 [`*ptr] 所引用的值替换为对由 [`*ptr] 所引用的值和给定的
[`operand] 实施运算的结果。

[:en] Memory is affected according to the value of [`order].
[:zh_CN] 根据 [`order] 的值影响内存。

[:en] These operations are atomic read-modify-write operations
([#intro.races]).
[:zh_CN] 这些操作是原子性读-改-写操作（[#intro.races]）。

[para:returns]
[:en] Atomically, the value referenced by [`*ptr] immediately before the
effects.
[:zh_CN] 原子地返回紧接其效果生效前 [`*ptr] 所引用的值。

[para:remarks]
[:en]
[%signed integer representation[!two[=']s complement]]
For signed integer types, arithmetic is defined to use two[=']s complement
representation.
[:zh_CN]
[%有符号整数表示[!二的补码]]
对有符号整数类型，算术运算是基于二的补码表示定义的。

[:en] There are no undefined results.
[:zh_CN] 不存在未定义的结果。
[exit:description]

[%@library operator+=[!atomic_ref<[*integral]>]]
[%@library atomic_ref<[*integral]>[!operator+=]]
[%@library operator-=[!atomic_ref<[*integral]>]]
[%@library atomic_ref<[*integral]>[!operator-=]]
[%@library operator&=[!atomic_ref<[*integral]>]]
[%@library atomic_ref<[*integral]>[!operator&=]]
[%@library operator|=[!atomic_ref<[*integral]>]]
[%@library atomic_ref<[*integral]>[!operator|=]]
[%@library operator^=[!atomic_ref<[*integral]>]]
[%@library atomic_ref<[*integral]>[!operator^=]]
[codeblock:declaration]
[*integral] operator [*op]=([*integral] operand) const noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to: [`return fetch_[*key](operand) [*op] operand;]
[:zh_CN] 等价于：[`return fetch_[*key](operand) [*op] operand;]
[exit:description]
