[section#atomics.flag
    [:en] Flag type and operations
    [:zh_CN] 标记类型及其操作
]

[codeblock:synopsis]
namespace std {
  struct atomic_flag {
    constexpr atomic_flag() noexcept;
    atomic_flag(const atomic_flag&) = delete;
    atomic_flag& operator=(const atomic_flag&) = delete;
    atomic_flag& operator=(const atomic_flag&) volatile = delete;

    bool test(memory_order = memory_order::seq_cst) const volatile noexcept;
    bool test(memory_order = memory_order::seq_cst) const noexcept;
    bool test_and_set(memory_order = memory_order::seq_cst) volatile noexcept;
    bool test_and_set(memory_order = memory_order::seq_cst) noexcept;
    void clear(memory_order = memory_order::seq_cst) volatile noexcept;
    void clear(memory_order = memory_order::seq_cst) noexcept;

    void wait(bool, memory_order = memory_order::seq_cst) const volatile noexcept;
    void wait(bool, memory_order = memory_order::seq_cst) const noexcept;
    void notify_one() volatile noexcept;
    void notify_one() noexcept;
    void notify_all() volatile noexcept;
    void notify_all() noexcept;
  };
}
[codeblock:end]

[para]
[:en] The [`atomic_flag] type provides the classic test-and-set functionality.
[:zh_CN] [`atomic_flag] 类型提供经典的测试并设值功能。

[:en] It has two states, set and clear.
[:zh_CN] 它有两个状态，已设值和清除。

[para]
[:en] Operations on an object of type [`atomic_flag] shall be lock-free.
[:zh_CN] 对 [`atomic_flag] 类型的对象的操作应当是免锁的。

[:en] The operations should also be address-free.
[:zh_CN] 这些操作应当为地址自由的。

[para]
[:en] The [`atomic_flag] type is a standard-layout struct.
[:zh_CN] [`atomic_flag] 类型是标准布局结构体。

[:en] It has a trivial destructor.
[:zh_CN] 它具有平凡的析构函数。

[%@lib@ctor atomic_flag]
[codeblock:declaration]
constexpr atomic_flag::atomic_flag() noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [`*this] to the clear state.
[:zh_CN] 初始化 [`*this] 为清除状态。
[div:end]

[%@lib atomic_flag_test]
[%@lib atomic_flag_test_explicit]
[%@lib@member test[!atomic_flag]]
[codeblock:declaration]
bool atomic_flag_test(const volatile atomic_flag* object) noexcept;
bool atomic_flag_test(const atomic_flag* object) noexcept;
bool atomic_flag_test_explicit(const volatile atomic_flag* object,
                               memory_order order) noexcept;
bool atomic_flag_test_explicit(const atomic_flag* object,
                               memory_order order) noexcept;
bool atomic_flag::test(memory_order order = memory_order::seq_cst) const volatile noexcept;
bool atomic_flag::test(memory_order order = memory_order::seq_cst) const noexcept;
[codeblock:end]

[div:description]
[para]
[:en] For [`atomic_flag_test], let [`order] be [`memory_order::seq_cst].
[:zh_CN] 对于 [`atomic_flag_test]，令 [`order] 为 [`memory_order::seq_cst]。

[para:expects]
[:en] [`order] is neither [`memory_order::release] nor [`memory_order::acq_rel].
[:zh_CN] [`order] 既不是 [`memory_order::release] 也不是 [`memory_order::acq_rel]。

[para:effects]
[:en] Memory is affected according to the value of [`order].
[:zh_CN] 根据 [`order] 的值影响内存。

[para:returns]
[:en] Atomically returns the value pointed to by [`object] or [`:key this].
[:zh_CN] 原子性地返回由 [`object] 或 [`:key this] 所指向的值。
[div:end]
 
[%@lib atomic_flag_test_and_set]
[%@lib atomic_flag_test_and_set_explicit]
[%@lib@member test_and_set[!atomic_flag]]
[codeblock:declaration]
bool atomic_flag_test_and_set(volatile atomic_flag* object) noexcept;
bool atomic_flag_test_and_set(atomic_flag* object) noexcept;
bool atomic_flag_test_and_set_explicit(volatile atomic_flag* object, memory_order order) noexcept;
bool atomic_flag_test_and_set_explicit(atomic_flag* object, memory_order order) noexcept;
bool atomic_flag::test_and_set(memory_order order = memory_order::seq_cst) volatile noexcept;
bool atomic_flag::test_and_set(memory_order order = memory_order::seq_cst) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Atomically sets the value pointed to by [`object] or by [`:key this] to
[`true].
[:zh_CN] 原子地将由 [`object] 或 [`:key this] 所指向的值设置为 [`true]。

[:en] Memory is affected according to the value of [`order].
[:zh_CN] 根据 [`order] 的值影响内存。

[:en] These operations are atomic read-modify-write operations
([#intro.multithread]).
[:zh_CN] 这些操作是原子性读-改-写操作（[#intro.multithread]）。

[para:returns]
[:en] Atomically, the value of the object immediately before the effects.
[:zh_CN] 原子地返回紧接其效果生效前对象的值。
[div:end]

[%@lib atomic_flag_clear]
[%@lib atomic_flag_clear_explicit]
[%@lib@member clear[!atomic_flag]]
[codeblock:declaration]
void atomic_flag_clear(volatile atomic_flag* object) noexcept;
void atomic_flag_clear(atomic_flag* object) noexcept;
void atomic_flag_clear_explicit(volatile atomic_flag* object, memory_order order) noexcept;
void atomic_flag_clear_explicit(atomic_flag* object, memory_order order) noexcept;
void atomic_flag::clear(memory_order order = memory_order::seq_cst) volatile noexcept;
void atomic_flag::clear(memory_order order = memory_order::seq_cst) noexcept;
[codeblock:end]

[div:description]
[para:expects]
[:en] The [`order] argument is neither [`memory_order::consume],
[`memory_order::acquire], nor [`memory_order::acq_rel].
[:zh_CN] 实参 [`order] 不为 [`memory_order::consume]、[`memory_order::acquire]
或 [`memory_order::acq_rel]。

[para:effects]
[:en] Atomically sets the value pointed to by [`object] or by [`:key this] to
[`false].
[:zh_CN] 原子地将由 [`object] 或 [`:key this] 所指向的值设置为 [`false]。

[:en] Memory is affected according to the value of [`order].
[:zh_CN] 根据 [`order] 的值影响内存。
[div:end]

[%@lib atomic_flag_wait]
[%@lib atomic_flag_wait_explicit]
[%@lib@member wait[!atomic_flag]]
[codeblock:declaration]
void atomic_flag_wait(const volatile atomic_flag* object, bool old) noexcept;
void atomic_flag_wait(const atomic_flag* object, bool old) noexcept;
void atomic_flag_wait_explicit(const volatile atomic_flag* object,
                               bool old, memory_order order) noexcept;
void atomic_flag_wait_explicit(const atomic_flag* object,
                               bool old, memory_order order) noexcept;
void atomic_flag::wait(bool old, memory_order order =
                                   memory_order::seq_cst) const volatile noexcept;
void atomic_flag::wait(bool old, memory_order order =
                                   memory_order::seq_cst) const noexcept;
[codeblock:end]

[div:description]
[para]
[:en] For [`atomic_flag_wait], let [`order] be [`memory_order::seq_cst].
[:zh_CN] 对于 [`atomic_flag_wait]，令 [`order] 为 [`memory_order::seq_cst]。

[:en] Let [`flag] be [`object] for the non-member functions and [`:key this] for
the member functions.
[:zh_CN] 令 [`flag] 对于非成员函数为 [`object]，而对于成员函数为 [`:key this]。

[para:expects]
[:en] [`order] is neither [`memory_order::release] nor [`memory_order::acq_rel].
[:zh_CN] [`order] 既不是 [`memory_order::release] 也不是 [`memory_order::acq_rel]。

[para:effects]
[:en] Repeatedly performs the following steps, in order:
[:zh_CN] 重复依序实施以下各步骤：

[list]
[item]
[:en] Evaluates [`flag->test(order) != old].
[:zh_CN] 求值 [`flag->test(order) != old]。
[item]
[:en] If the result of that evaluation is [`true], returns.
[:zh_CN] 若该求值结果为 [`true] 则返回。
[item]
[:en] Blocks until it is unblocked by an atomic notifying operation or is
unblocked spuriously.
[:zh_CN] 阻塞，直到被原子性通知操作解除阻塞，或假性解除阻塞。
[list:end]

[para:remarks]
[:en] This function is an atomic waiting operation ([#atomics.wait]).
[:zh_CN] 这个函数是原子性等待操作（[#atomics.wait]）。
[div:end]

[codeblock:declaration]
void atomic_flag_notify_one(volatile atomic_flag* object) noexcept;
void atomic_flag_notify_one(atomic_flag* object) noexcept;
void atomic_flag::notify_one() volatile noexcept;
void atomic_flag::notify_one() noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Unblocks the execution of at least one atomic waiting operation that is
eligible to be unblocked ([#atomics.wait]) by this call, if any such atomic
waiting operations exist.
[:zh_CN] 使至少一个合乎被本次调用解除阻塞的条件（[#atomics.wait]）的原子性等待
操作解除阻塞（若存在任何这种原子性等待操作）。

[para:remarks]
[:en] This function is an atomic notifying operation ([#atomics.wait]).
[:zh_CN] 这个函数是原子性通知操作（[#atomics.wait]）。
[div:end]

[codeblock:declaration]
void atomic_flag_notify_all(volatile atomic_flag* object) noexcept;
void atomic_flag_notify_all(atomic_flag* object) noexcept;
void atomic_flag::notify_all() volatile noexcept;
void atomic_flag::notify_all() noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Unblocks the execution of all atomic waiting operations that are eligible
to be unblocked ([#atomics.wait]) by this call.
[:zh_CN] 使所有合乎被本次调用解除阻塞的条件（[#atomics.wait]）的原子性等待操作
解除阻塞。

[para:remarks]
[:en] This function is an atomic notifying operation ([#atomics.wait]).
[:zh_CN] 这个函数是原子性通知操作（[#atomics.wait]）。
[div:end]
