[section#atomics.types.int
    [:en] Specializations for integers
    [:zh_CN] 针对整数的特化式
]

[%@lib@raw [`atomic<[^integral]>]]
[para]
[:en] There are specializations of the [`atomic] class template for the integral
types [`char], [`signed char], [`unsigned char], [`short], [`unsigned short],
[`int], [`unsigned int], [`long], [`unsigned long], [`long long],
[`unsigned long long], [`char8_t], [`char16_t], [`char32_t], [`wchar_t], and any
other types needed by the typedefs in the header [?libheader@ref cstdint].
[:zh_CN] [`atomic] 类模板对整型类型 [`char]、[`signed char]、[`unsigned char]、
[`short]、[`unsigned short]、[`int]、[`unsigned int]、[`long]、[`unsigned long]、
[`long long]、[`unsigned long long]、[`char8_t]、[`char16_t]、[`char32_t]、
[`wchar_t]，以及头文件 [?libheader@ref cstdint] 中的各 typedef 所需的任何其他
类型，进行了特化。

[:en] For each such type [`[*integral]], the specialization
[`atomic<[*integral]>] provides additional atomic operations appropriate to
integral types.
[:zh_CN] 对于每个这样的类型 [`[*integral]]，特例 [`atomic<[*integral]>] 提供了
适用于该整型类型的额外的原子性操作。

[begin:note]
[:en] For the specialization [`atomic<bool>], see [#atomics.types.generic].
[:zh_CN] 对于特例 [`atomic<bool>]，参见 [#atomics.types.generic]。
[end:note]

[codeblock:synopsis [!:var integral] [!:mark ImpDef] ]
namespace std {
  template<> struct atomic<[*integral]> {
    using value_type = [*integral];
    using difference_type = value_type;

    static constexpr bool is_always_lock_free = [[redoc("?impdefx"
        "[:en] whether a given [`atomic] type[=']s operations are always lock free"
        "[:zh_CN] 给定 [`atomic] 类型的操作是否总是无锁的")]];
    bool is_lock_free() const volatile noexcept;
    bool is_lock_free() const noexcept;

    atomic() noexcept = default;
    constexpr atomic([*integral]) noexcept;
    atomic(const atomic&) = delete;
    atomic& operator=(const atomic&) = delete;
    atomic& operator=(const atomic&) volatile = delete;

    void store([*integral], memory_order = memory_order::seq_cst) volatile noexcept;
    void store([*integral], memory_order = memory_order::seq_cst) noexcept;
    [*integral] operator=([*integral]) volatile noexcept;
    [*integral] operator=([*integral]) noexcept;
    [*integral] load(memory_order = memory_order::seq_cst) const volatile noexcept;
    [*integral] load(memory_order = memory_order::seq_cst) const noexcept;
    operator [*integral]() const volatile noexcept;
    operator [*integral]() const noexcept;

    [*integral] exchange([*integral], memory_order = memory_order::seq_cst) volatile noexcept;
    [*integral] exchange([*integral], memory_order = memory_order::seq_cst) noexcept;
    bool compare_exchange_weak([*integral]&, [*integral],
                               memory_order, memory_order) volatile noexcept;
    bool compare_exchange_weak([*integral]&, [*integral],
                               memory_order, memory_order) noexcept;
    bool compare_exchange_strong([*integral]&, [*integral],
                                 memory_order, memory_order) volatile noexcept;
    bool compare_exchange_strong([*integral]&, [*integral],
                                 memory_order, memory_order) noexcept;
    bool compare_exchange_weak([*integral]&, [*integral],
                               memory_order = memory_order::seq_cst) volatile noexcept;
    bool compare_exchange_weak([*integral]&, [*integral],
                               memory_order = memory_order::seq_cst) noexcept;
    bool compare_exchange_strong([*integral]&, [*integral],
                                 memory_order = memory_order::seq_cst) volatile noexcept;
    bool compare_exchange_strong([*integral]&, [*integral],
                                 memory_order = memory_order::seq_cst) noexcept;

    [*integral] fetch_add([*integral], memory_order = memory_order::seq_cst) volatile noexcept;
    [*integral] fetch_add([*integral], memory_order = memory_order::seq_cst) noexcept;
    [*integral] fetch_sub([*integral], memory_order = memory_order::seq_cst) volatile noexcept;
    [*integral] fetch_sub([*integral], memory_order = memory_order::seq_cst) noexcept;
    [*integral] fetch_and([*integral], memory_order = memory_order::seq_cst) volatile noexcept;
    [*integral] fetch_and([*integral], memory_order = memory_order::seq_cst) noexcept;
    [*integral] fetch_or([*integral], memory_order = memory_order::seq_cst) volatile noexcept;
    [*integral] fetch_or([*integral], memory_order = memory_order::seq_cst) noexcept;
    [*integral] fetch_xor([*integral], memory_order = memory_order::seq_cst) volatile noexcept;
    [*integral] fetch_xor([*integral], memory_order = memory_order::seq_cst) noexcept;

    [*integral] operator++(int) volatile noexcept;
    [*integral] operator++(int) noexcept;
    [*integral] operator--(int) volatile noexcept;
    [*integral] operator--(int) noexcept;
    [*integral] operator++() volatile noexcept;
    [*integral] operator++() noexcept;
    [*integral] operator--() volatile noexcept;
    [*integral] operator--() noexcept;
    [*integral] operator+=([*integral]) volatile noexcept;
    [*integral] operator+=([*integral]) noexcept;
    [*integral] operator-=([*integral]) volatile noexcept;
    [*integral] operator-=([*integral]) noexcept;
    [*integral] operator&=([*integral]) volatile noexcept;
    [*integral] operator&=([*integral]) noexcept;
    [*integral] operator|=([*integral]) volatile noexcept;
    [*integral] operator|=([*integral]) noexcept;
    [*integral] operator^=([*integral]) volatile noexcept;
    [*integral] operator^=([*integral]) noexcept;

    void wait([*integral], memory_order = memory_order::seq_cst) const volatile noexcept;
    void wait([*integral], memory_order = memory_order::seq_cst) const noexcept;
    void notify_one() volatile noexcept;
    void notify_one() noexcept;
    void notify_all() volatile noexcept;
    void notify_all() noexcept;
  };
}
[codeblock:end]

[para]
[:en] The atomic integral specializations are standard-layout structs.
[:zh_CN] [`atomic] 的整型特例是标准布局结构体。

[:en] They each have a trivial default constructor and a trivial destructor.
[:zh_CN] 它们都具有平凡的默认构造函数和平凡的析构函数。

[para]
[:en] Descriptions are provided below only for members that differ from the
primary template.
[:zh_CN] 下文仅为与主模板不同的成员提供描述。

[para]
[:en] The following operations perform arithmetic computations.
[:zh_CN] 以下各操作实施算术运算。

[:en] The key, operator, and computation correspondence is:
[:zh_CN] 关键词、运算符和运算之间的对应关系为：

[table:listing@shape=?x2@fill=column#atomic.types.int.comp
    [:en] Atomic arithmetic computations
    [:zh_CN] 原子性算术运算
    [|@code [`[*key]] ]
    [|@code
        [:en] Op
        [:zh_CN] op ]
    [|  [:en] Computation
        [:zh_CN] 运算 ]
]
[|] add [|] +
[|] [:en] addition
    [:zh_CN] 加
[|] sub [|] -
[|] [:en] subtraction
    [:zh_CN] 减
[|] or [|] |
[|] [:en] bitwise inclusive or
    [:zh_CN] 按位或
[|] xor [|] ^
[|] [:en] bitwise exclusive or
    [:zh_CN] 按位异或
[|] and [|] &
[|] [:en] bitwise and
    [:zh_CN] 按位与
[table:end]

[%@library atomic_fetch_add]
[%@library atomic_fetch_and]
[%@library atomic_fetch_or]
[%@library atomic_fetch_sub]
[%@library atomic_fetch_xor]
[%@library atomic_fetch_add_explicit]
[%@library atomic_fetch_and_explicit]
[%@library atomic_fetch_or_explicit]
[%@library atomic_fetch_sub_explicit]
[%@library atomic_fetch_xor_explicit]
[%@library fetch_add[!atomic<[*integral]>]]
[%@library atomic<[*integral]>[!fetch_add]]
[%@library fetch_and[!atomic<[*integral]>]]
[%@library atomic<[*integral]>[!fetch_and]]
[%@library fetch_or [!atomic<[*integral]>]]
[%@library atomic<[*integral][!fetch_or >]]
[%@library fetch_sub[!atomic<[*integral]>]]
[%@library atomic<[*integral]>[!fetch_sub]]
[%@library fetch_xor[!atomic<[*integral]>]]
[%@library atomic<[*integral]>[!fetch_xor]]
[codeblock:declaration]
T fetch_[*key](T operand, memory_order order = memory_order::seq_cst) volatile noexcept;
T fetch_[*key](T operand, memory_order order = memory_order::seq_cst) noexcept;
[codeblock:end]

[begin:description]
[para:effects]
[:en] Atomically replaces the value pointed to by [`this] with the result of the
computation applied to the value pointed to by [`this] and the given [`operand].
[:zh_CN] 原子地将由 [`this] 所指向的值替换为对由 [`this] 所指向的值和给定的
[`operand] 实施运算的结果。

[:en] Memory is affected according to the value of [`order].
[:zh_CN] 根据 [`order] 的值影响内存。

[:en] These operations are atomic read-modify-write operations
([#intro.multithread]).
[:zh_CN] 这些操作是原子性读-改-写操作（[#intro.multithread]）。

[para:returns]
[:en] Atomically, the value pointed to by [`this] immediately before the
effects.
[:zh_CN] 原子地返回紧接其效果生效前 [`this] 所指向的值。

[para:remarks]
[:en]
[%signed integer representation[!two[=']s complement]]
For signed integer types, the result is as if the object value and parameters
were converted to their corresponding unsigned types, the computation performed
on those types, and the result converted back to the signed type.
[:zh_CN]
[%有符号整数表示[!二的补码]]
对有符号整数类型，其结果如同将对象值和各形参转换为它们的对应无符号类型，在这些
类型上实施运算，然后将其结果转换回有符号类型。

[begin:note]
[:en] There are no undefined results arising from the computation.
[:zh_CN] 这项运算中不会产生未定义的结果。
[end:note]

[end:description]

[%@library operator+=[!atomic<T*>]]
[%@library atomic<T*>[!operator+=]]
[%@library operator-=[!atomic<T*>]]
[%@library atomic<T*>[!operator-=]]
[%@library operator+=[!atomic<[*integral]>]]
[%@library atomic<[*integral]>[!operator+=]]
[%@library operator-=[!atomic<[*integral]>]]
[%@library atomic<[*integral]>[!operator-=]]
[%@library operator&=[!atomic<[*integral]>]]
[%@library atomic<[*integral]>[!operator&=]]
[%@library operator|=[!atomic<[*integral]>]]
[%@library atomic<[*integral]>[!operator|=]]
[%@library operator^=[!atomic<[*integral]>]]
[%@library atomic<[*integral]>[!operator^=]]
[codeblock:declaration]
T operator [*op]=(T operand) volatile noexcept;
T operator [*op]=(T operand) noexcept;
[codeblock:end]

[begin:description]
[para:effects]
[:en] Equivalent to: [`return fetch_[*key](operand) [*op] operand;]
[:zh_CN] 等价于：[`return fetch_[*key](operand) [*op] operand;]
[end:description]
