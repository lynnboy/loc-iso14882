[section#util.smartptr.atomic.weak
    [:en] Partial specialization for [`weak_ptr]
    [:zh_CN] 针对 [`weak_ptr] 的部分特化式
]
[%@lib atomic<weak_ptr<T>>]
[codeblock:synopsis]
namespace std {
  template<class T> struct atomic<weak_ptr<T>> {
    using value_type = weak_ptr<T>;

    static constexpr bool is_always_lock_free = [[redoc("[?impdefx [:en] whether a given [`atomic] type[=']s operations are always lock free"
                                                               "[:zh_CN] 给定 [`atomic] 类型的操作是否总是无锁的]")]];
    bool is_lock_free() const noexcept;

    constexpr atomic() noexcept;
    atomic(weak_ptr<T> desired) noexcept;
    atomic(const atomic&) = delete;
    void operator=(const atomic&) = delete;

    weak_ptr<T> load(memory_order order = memory_order::seq_cst) const noexcept;
    operator weak_ptr<T>() const noexcept;
    void store(weak_ptr<T> desired, memory_order order = memory_order::seq_cst) noexcept;
    void operator=(weak_ptr<T> desired) noexcept;

    weak_ptr<T> exchange(weak_ptr<T> desired,
                         memory_order order = memory_order::seq_cst) noexcept;
    bool compare_exchange_weak(weak_ptr<T>& expected, weak_ptr<T> desired,
                               memory_order success, memory_order failure) noexcept;
    bool compare_exchange_strong(weak_ptr<T>& expected, weak_ptr<T> desired,
                                 memory_order success, memory_order failure) noexcept;
    bool compare_exchange_weak(weak_ptr<T>& expected, weak_ptr<T> desired,
                               memory_order order = memory_order::seq_cst) noexcept;
    bool compare_exchange_strong(weak_ptr<T>& expected, weak_ptr<T> desired,
                                 memory_order order = memory_order::seq_cst) noexcept;

    void wait(weak_ptr<T> old, memory_order order = memory_order::seq_cst) const noexcept;
    void notify_one() noexcept;
    void notify_all() noexcept;

  private:
    weak_ptr<T> p;              // [=expos]
  };
}
[codeblock:end]

[%@lib@ctor atomic<weak_ptr<T>>]
[codeblock:declaration]
constexpr atomic() noexcept = default;
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [`p{}].
[:zh_CN] 初始化 [`p{}]。
[div:end]

[%@lib@ctor atomic<weak_ptr<T>>]
[codeblock:declaration]
atomic(weak_ptr<T> desired) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes the object with the value [`desired].
[:zh_CN] 以值 [`desired] 初始化对象。

[:en] Initialization is not an atomic operation ([#intro.multithread]).
[:zh_CN] 初始化并非是原子性操作（[#intro.multithread]）。

[begin:note]
[:en] It is possible to have an access to an atomic object [`A] race with its
construction, for example, by communicating the address of the just-constructed
object [`A] to another thread via [`memory_order::relaxed] operations on a
suitable atomic pointer variable, and then immediately accessing [`A] in the
receiving thread.
[:zh_CN] 使对原子性对象 [`A] 的访问与其构造产生竞争是可能的，例如通过将刚刚构造
的对象 [`A] 的地址通过对某个适当的原子性指针变量进行 [`memory_order::relaxed]
操作通信给其他线程，然后在接收方线程中立即访问 [`A]。

[:en] This results in undefined behavior.
[:zh_CN] 这将导致未定义的行为。
[end:note]
[div:end]

[%@lib@member store[!atomic<weak_ptr<T>>]]
[codeblock:declaration]
void store(weak_ptr<T> desired, memory_order order = memory_order::seq_cst) noexcept;
[codeblock:end]

[div:description]
[para:expects]
[:en] [`order] is neither [`memory_order::consume], [`memory_order::acquire],
nor [`memory_order::acq_rel].
[:zh_CN] [`order] 不为 [`memory_order::consume]、[`memory_order::acquire] 或
[`memory_order::acq_rel]。

[para:effects]
[:en] Atomically replaces the value pointed to by [`:key this] with the value of
[`desired] as if by [`p.swap(desired)].
[:zh_CN] 原子性地将 [`:key this] 所指向的值如同以 [`p.swap(desired)] 来替换为
[`desired] 的值。

[:en] Memory is affected according to the value of [`order].
[:zh_CN] 根据 [`order] 的值影响内存。
[div:end]

[%@lib@member operator=[!atomic<weak_ptr<T>>]]
[codeblock:declaration]
void operator=(weak_ptr<T> desired) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to [`store(desired)].
[:zh_CN] 等价于 [`store(desired)]。
[div:end]

[%@lib@member load[!atomic<weak_ptr<T>>]]
[codeblock:declaration]
weak_ptr<T> load(memory_order order = memory_order::seq_cst) const noexcept;
[codeblock:end]

[div:description]
[para:expects]
[:en] [`order] is neither [`memory_order::release] nor [`memory_order::acq_rel].
[:zh_CN] [`order] 不为 [`memory_order::release] 或 [`memory_order::acq_rel]。

[para:effects]
[:en] Memory is affected according to the value of [`order].
[:zh_CN] 根据 [`order] 的值影响内存。

[para:returns]
[:en] Atomically returns [`p].
[:zh_CN] 原子性地返回 [`p]。
[div:end]

[%@lib@member operator weak_ptr<T>[!atomic<weak_ptr<T>>]]
[codeblock:declaration]
operator weak_ptr<T>() const noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return load();]
[:zh_CN] 等价于：[`return load();]
[div:end]

[%@lib@member exchange[!atomic<weak_ptr<T>>]]
[codeblock:declaration]
weak_ptr<T> exchange(weak_ptr<T> desired, memory_order order = memory_order::seq_cst) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Atomically replaces [`p] with [`desired] as if by [`p.swap(desired)].
[:zh_CN] 原子性地将 [`p] 如同以 [`p.swap(desired)] 来替换为 [`desired]。

[:en] Memory is affected according to the value of [`order].
[:zh_CN] 根据 [`order] 的值影响内存。

[:en] This is an atomic read-modify-write operation ([#intro.races]).
[:zh_CN] 这是一个原子性的读-改-写操作（[#intro.races]）。

[para:returns]
[:en] Atomically returns the value of [`p] immediately before the effects.
[:zh_CN] 原子性地返回其效果产生前 [`p] 的值。
[div:end]

[%@lib@member compare_exchange_weak[!atomic<weak_ptr<T>>]]
[codeblock:declaration]
bool compare_exchange_weak(weak_ptr<T>& expected, weak_ptr<T> desired,
                           memory_order success, memory_order failure) noexcept;
bool compare_exchange_strong(weak_ptr<T>& expected, weak_ptr<T> desired,
                             memory_order success, memory_order failure) noexcept;
[codeblock:end]

[div:description]
[para:expects]
[:en] [`failure] is neither [`memory_order::release] nor [`memory_order::acq_rel].
[:zh_CN] [`failure] 不为 [`memory_order::release] 或 [`memory_order::acq_rel]。

[para:effects]
[:en] If [`p] is equivalent to [`expected], assigns [`desired] to [`p] and has
synchronization semantics corresponding to the value of [`success], otherwise
assigns [`p] to [`expected] and has synchronization semantics corresponding to
the value of [`failure].
[:zh_CN] 如果 [`p] 等价于 [`expected]，则将 [`desired] 赋值给 [`p] 并具有对应于
[`success] 的值的同步语义，否则将 [`p] 赋值给 [`expected] 并具有对应于
[`failure] 的值的同步语义。

[para:returns]
[:en] [`true] if [`p] was equivalent to [`expected], [`false] otherwise.
[:zh_CN] 当 [`p] 等价于 [`expected] 时返回 [`true]，否则返回 [`false]。

[para:remarks]
[:en] Two [`weak_ptr] objects are equivalent if they store the same pointer
value and either share ownership or both are empty.
[:zh_CN] 如果两个 [`weak_ptr] 对象存储了相同的指针值，并且它们共享所有权或者
都为空，则它们等价。

[:en] The weak form may fail spuriously.
[:zh_CN] 弱（weak）的形式可能会发生假性失败。

[:en] See [#atomics.types.operations].
[:zh_CN] 参见 [#atomics.types.operations]。

[para]
[:en] If the operation returns [`true], [`expected] is not accessed after the
atomic update and the operation is an atomic read-modify-write operation
([#intro.multithread]) on the memory pointed to by [`:key this].
[:zh_CN] 如果操作返回了 [`true]，则进行原子性更新之后不会访问 [`expected]，且
该操作是对由 [`:key this] 所指向的内存的原子性读-改-写操作（[#intro.multithread]）。

[:en] Otherwise, the operation is an atomic load operation on that memory, and
[`expected] is updated with the existing value read from the atomic object in
the attempted atomic update.
[:zh_CN] 否则，该操作是对该内存的原子性加载操作，且以从试图进行原子性更新的
原子性对象中所读到的现有值对 [`expected] 进行了更新。

[:en] The [`use_count] update corresponding to the write to [`expected] is part
of the atomic operation.
[:zh_CN] 对应于向 [`expected] 的写入的 [`use_count] 更新是原子性操作的一部分。

[:en] The write to [`expected] itself is not required to be part of the atomic
operation.
[:zh_CN] 向 [`example] 的写入本身并不需要是该原子性操作的一部分。
[div:end]

[%@lib@member compare_exchange_weak[!atomic<weak_ptr<T>>]]
[codeblock:declaration]
bool compare_exchange_weak(weak_ptr<T>& expected, weak_ptr<T> desired,
                           memory_order order = memory_order::seq_cst) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return compare_exchange_weak(expected, desired, order, fail_order);
[codeblock:end]

[:en@~] where [`fail_order] is the same as [`order] except that a value of
[`memory_order::acq_rel] shall be replaced by the value [`memory_order::acquire]
and a value of [`memory_order::release] shall be replaced by the value
[`memory_order::relaxed].
[:zh_CN@~] 其中 [`fail_order] 与 [`order] 相同，但 [`memory_order::acq_rel] 值
应当被替换为 [`memory_order::acquire] 值，且 [`memory_order::release] 值应当被
替换为 [`memory_order::relaxed] 值。
[div:end]

[%@lib@member compare_exchange_strong[!atomic<weak_ptr<T>>]]
[codeblock:declaration]
bool compare_exchange_strong(weak_ptr<T>& expected, weak_ptr<T> desired,
                             memory_order order = memory_order::seq_cst) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return compare_exchange_strong(expected, desired, order, fail_order);
[codeblock:end]

[:en@~] where [`fail_order] is the same as [`order] except that a value of
[`memory_order::acq_rel] shall be replaced by the value [`memory_order::acquire]
and a value of [`memory_order::release] shall be replaced by the value
[`memory_order::relaxed].
[:zh_CN@~] 其中 [`fail_order] 与 [`order] 相同，但 [`memory_order::acq_rel] 值
应当被替换为 [`memory_order::acquire] 值，且 [`memory_order::release] 值应当被
替换为 [`memory_order::relaxed] 值。
[div:end]

[%@lib@member wait[!atomic<weak_ptr<T>>]]
[codeblock:declaration]
void wait(weak_ptr<T> old, memory_order order = memory_order::seq_cst) const noexcept;
[codeblock:end]

[div:description]
[para:expects]
[:en] [`order] is neither [`memory_order::release] nor [`memory_order::acq_rel].
[:zh_CN] [`order] 既不是 [`memory_order::release] 也不是 [`memory_order::acq_rel]。

[para:effects]
[:en] Repeatedly performs the following steps, in order:
[:zh_CN] 重复地依序实施以下步骤：

[list]
[item]
[:en] Evaluates [`load(order)] and compares it to [`old].
[:zh_CN] 求值 [`load(order)] 并将之与 [`old] 比较。
[item]
[:en] If the two are not equivalent, returns.
[:zh_CN] 若二者不等价，则返回。
[item]
[:en] Blocks until it is unblocked by an atomic notifying operation or is
unblocked spuriously.
[:zh_CN] 阻塞直到其被某个原子性通知操作解除阻塞，或假性解除阻塞。
[list:end]

[para:remarks]
[:en] Two [`weak_ptr] objects are equivalent if they store the same pointer and
either share ownership or are both empty.
[:zh_CN] 两个 [`weak_ptr] 对象，当它们存储相同指针，且要么共享所有权要么都为空时，
二者等价。

[:en] This function is an atomic waiting operation ([#atomics.wait]).
[:zh_CN] 本函数是原子性等待操作（[#atomics.wait]）。
[div:end]

[%@lib@member notify_one[!atomic<weak_ptr<T>>]]
[codeblock:declaration]
void notify_one() noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Unblocks the execution of at least one atomic waiting operation that is
eligible to be unblocked ([#atomics.wait]) by this call, if any such atomic
waiting operations exist.
[:zh_CN] 对至少一个有资格被这次调用解除阻塞的原子性等待操作（[#atomics.wait]）的
执行解除阻塞（若有任何这种原子性等待操作存在）。

[para:remarks]
[:en] This function is an atomic notifying operation ([#atomics.wait]).
[:zh_CN] 本函数是原子性通知操作（[#atomics.wait]）。
[div:end]

[%@lib@member notify_all[!atomic<weak_ptr<T>>]]
[codeblock:declaration]
void notify_all() noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Unblocks the execution of all atomic waiting operations that are eligible
to be unblocked ([#atomics.wait]) by this call.
[:zh_CN] 对所有有资格被这次调用解除阻塞的原子性等待操作（[#atomics.wait]）的执行
解除阻塞。

[para:remarks]
[:en] This function is an atomic notifying operation ([#atomics.wait]).
[:zh_CN] 本函数是原子性通知操作（[#atomics.wait]）。
[div:end]
