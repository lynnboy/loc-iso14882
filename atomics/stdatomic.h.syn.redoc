[section#stdatomic.h.syn
    [:en] C compatibility
    [:zh_CN] C 兼容性
]

[:en]
The header [?libheader@def stdatomic.h] provides the following definitions:
[:zh_CN]
头文件 [?libheader@def stdatomic.h] 提供以下定义式：

[codeblock:synopsis]
template<class T>
  using [[redoc("*>")]]std-atomic = std::atomic<T>;        // exposition only

#define _Atomic(T) [[redoc("*>")]]std-atomic<T>

#define ATOMIC_BOOL_LOCK_FREE [[redoc("[=seebelow]")]]
#define ATOMIC_CHAR_LOCK_FREE [[redoc("[=seebelow]")]]
#define ATOMIC_CHAR16_T_LOCK_FREE [[redoc("[=seebelow]")]]
#define ATOMIC_CHAR32_T_LOCK_FREE [[redoc("[=seebelow]")]]
#define ATOMIC_WCHAR_T_LOCK_FREE [[redoc("[=seebelow]")]]
#define ATOMIC_SHORT_LOCK_FREE [[redoc("[=seebelow]")]]
#define ATOMIC_INT_LOCK_FREE [[redoc("[=seebelow]")]]
#define ATOMIC_LONG_LOCK_FREE [[redoc("[=seebelow]")]]
#define ATOMIC_LLONG_LOCK_FREE [[redoc("[=seebelow]")]]
#define ATOMIC_POINTER_LOCK_FREE [[redoc("[=seebelow]")]]

using std::[[redoc("`:lib>")]]memory_order;             // [=seebelow]
using std::[[redoc("`:lib>")]]memory_order_relaxed;     // [=seebelow]
using std::[[redoc("`:lib>")]]memory_order_consume;     // [=seebelow]
using std::[[redoc("`:lib>")]]memory_order_acquire;     // [=seebelow]
using std::[[redoc("`:lib>")]]memory_order_release;     // [=seebelow]
using std::[[redoc("`:lib>")]]memory_order_acq_rel;     // [=seebelow]
using std::[[redoc("`:lib>")]]memory_order_seq_cst;     // [=seebelow]

using std::[[redoc("`:lib>")]]atomic_flag;              // [=seebelow]

using std::[[redoc("`:lib>")]]atomic_bool;              // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_char;              // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_schar;             // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_uchar;             // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_short;             // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_ushort;            // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_int;               // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_uint;              // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_long;              // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_ulong;             // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_llong;             // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_ullong;            // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_char8_t;           // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_char16_t;          // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_char32_t;          // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_wchar_t;           // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_int8_t;            // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_uint8_t;           // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_int16_t;           // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_uint16_t;          // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_int32_t;           // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_uint32_t;          // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_int64_t;           // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_uint64_t;          // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_int_least8_t;      // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_uint_least8_t;     // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_int_least16_t;     // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_uint_least16_t;    // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_int_least32_t;     // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_uint_least32_t;    // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_int_least64_t;     // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_uint_least64_t;    // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_int_fast8_t;       // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_uint_fast8_t;      // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_int_fast16_t;      // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_uint_fast16_t;     // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_int_fast32_t;      // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_uint_fast32_t;     // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_int_fast64_t;      // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_uint_fast64_t;     // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_intptr_t;          // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_uintptr_t;         // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_size_t;            // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_ptrdiff_t;         // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_intmax_t;          // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_uintmax_t;         // [=seebelow]

using std::[[redoc("`:lib>")]]atomic_is_lock_free;                          // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_load;                                  // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_load_explicit;                         // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_store;                                 // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_store_explicit;                        // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_exchange;                              // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_exchange_explicit;                     // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_compare_exchange_strong;               // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_compare_exchange_strong_explicit;      // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_compare_exchange_weak;                 // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_compare_exchange_weak_explicit;        // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_fetch_add;                             // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_fetch_add_explicit;                    // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_fetch_sub;                             // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_fetch_sub_explicit;                    // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_fetch_or;                              // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_fetch_or_explicit;                     // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_fetch_and;                             // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_fetch_and_explicit;                    // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_flag_test_and_set;                     // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_flag_test_and_set_explicit;            // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_flag_clear;                            // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_flag_clear_explicit;                   // [=seebelow]

using std::[[redoc("`:lib>")]]atomic_thread_fence;                          // [=seebelow]
using std::[[redoc("`:lib>")]]atomic_signal_fence;                          // [=seebelow]
[codeblock:end]

[para]
[:en]
Each [~using-declaration] for some name [$A] in the synopsis above makes
available the same entity as [`std::[$A]] declared in
[?libheader@ref#atomics.syn atomic].
[:zh_CN]
以上纲要中各个对于某个名字 [$A] 的 [~using-声明式]，使其作为
[?libheader@ref#atomics.syn atomic] 中所声明的 [`std::[$A]] 为同一个实体。

[:en]
Each macro listed above other than [`_Atomic(T)] is defined as in
[?libheader atomic].
[:zh_CN]
以上列出的除了 [`_Atomic(T)] 的宏都如其在 [?libheader atomic] 所定义。

[:en]
It is unspecified whether [?libheader stdatomic.h] makes available any
declarations in namespace [`std].
[:zh_CN]
[?libheader stdatomic.h] 是否会使 [`std] 中的任何声明式可用是未指明的。

[para]
[:en]
Each of the [~using-declaration]s for [`int[$N]_t], [`uint[$N]_t], [`intptr_t],
and [`uintptr_t] listed above is defined if and only if the implementation
defines the corresponding typedef name in [#atomics.syn].
[:zh_CN]
以上列出的对于 [`int[$N]_t]，[`uint[$N]_t]，[`intptr_t]，和 [`uintptr_t] 的
[~using-声明式]，当且仅当实现在 [#atomics.syn] 中定义了对应 typedef 名时被定义。

[para]
[:en]
Neither the [`_Atomic] macro, nor any of the non-macro global namespace
declarations, are provided by any [=Cpp] standard library header other than
[?libheader stdatomic.h].
[:zh_CN]
宏 [`_Atomic]，或者任何非宏全局命名空间声明式，都未在除了 [?libheader stdatomic.h]
之外的任何 [=Cpp] 标准程序库头文件中提供。

[para:recommended]
[:en]
Implementations should ensure that C and [=Cpp] representations of atomic
objects are compatible, so that the same object can be accessed as both an
[`_Atomic(T)] from C code and an [`atomic<T>] from [=Cpp] code.
[:zh_CN]
实现应当确保原子性对象的 C 和 [=Cpp] 的表示是兼容的，以使得同一个对象可以从 C
代码中作为一个 [`_Atomic(T)] 访问，也可以从 [=Cpp] 代码汇总作为一个 [`atomic<T>]
访问。

[:en]
The representations should be the same, and the mechanisms used to ensure
atomicity and memory ordering should be compatible.
[:zh_CN]
这些表示应当相同，并且用于确保原子性和内存顺序的机制应当兼容。
