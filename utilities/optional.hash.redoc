[section#optional.hash
    [:en] Hash support
    [:zh_CN] 散列支持
]

[%@library hash[!optional]]
[%@library optional[!hash]]
[codeblock:declaration]
template <class T> struct hash<optional<T>>;
[codeblock:end]

[enter:description]
[para]
[:en] The specialization [`hash<optional<T>>] is enabled ([#unord.hash]) if and
only if [`hash<remove_const_t<T>>] is enabled.
[:zh_CN] 当且仅当 [`hash<remove_const_t<T>>] 被启用时，特例 [`hash<optional<T>>]
被启用。

[:en] When enabled, for an object [`o] of type [`optional<T>],
if [`bool(o) == true], then [`hash<optional<T>>()(o)] shall evaluate to the same
value as [`hash<remove_const_t<T>>()(*o)]; otherwise it evaluates to an
unspecified value.
[:zh_CN] 当其被启用时，对于 [`optional<T>] 类型的对象 [`o]，若
[`bool(o) == true] 则 [`hash<optional<T>>()(o)] 应当求值为与
[`hash<remove_const_t<T>>()(*o)] 相同的值；否则它求值为某个未指明的值。

[:en] The member functions are not guaranteed to be [`noexcept].
[:zh_CN] 不保证这些成员函数为 [`noexcept]。
[exit:description]
