[section#variant.syn
	[:en] Header [`<variant>] synopsis
	[:zh_CN] 头文件 [`<variant>] 纲要
]

[%@hdr@def variant]
[codeblock:synopsis]
// [=mostly freestanding]
#include <compare>              // [:en] see [#compare.syn] [:zh_CN] 参见 [#compare.syn]

namespace std {
  // [:en] [#variant.variant], class template [`variant] \
  [:zh_CN] [#variant.variant]，类模板 [`variant]
  template<class... Types>
    class variant;

  // [:en] [#variant.helper], variant helper classes \
  [:zh_CN] [#variant.helper]，variant 的辅助类
  template<class T> struct variant_size;                        // [=notdef]
  template<class T> struct variant_size<const T>;
  template<class T>
    constexpr size_t [[redoc("`:lib>")]]variant_size_v = variant_size<T>::value;

  template<class... Types>
    struct variant_size<variant<Types...>>;

  template<size_t I, class T> struct variant_alternative;       // [=notdef]
  template<size_t I, class T> struct variant_alternative<I, const T>;
  template<size_t I, class T>
    using [[redoc("`:lib>")]]variant_alternative_t = typename variant_alternative<I, T>::type;

  template<size_t I, class... Types>
    struct variant_alternative<I, variant<Types...>>;

  inline constexpr size_t variant_npos = -1;

  // [:en] [#variant.get], value access \
  [:zh_CN] [#variant.get]，值的访问
  template<class T, class... Types>
    constexpr bool holds_alternative(const variant<Types...>&) noexcept;

  template<size_t I, class... Types>
    constexpr variant_alternative_t<I, variant<Types...>>&
      get(variant<Types...>&);                                          // [=freestanding-deleted]
  template<size_t I, class... Types>
    constexpr variant_alternative_t<I, variant<Types...>>&&
      get(variant<Types...>&&);                                         // [=freestanding-deleted]
  template<size_t I, class... Types>
    constexpr const variant_alternative_t<I, variant<Types...>>&
      get(const variant<Types...>&);                                    // [=freestanding-deleted]
  template<size_t I, class... Types>
    constexpr const variant_alternative_t<I, variant<Types...>>&&
      get(const variant<Types...>&&);                                   // [=freestanding-deleted]

  template<class T, class... Types>
    constexpr T& get(variant<Types...>&);                               // [=freestanding-deleted]
  template<class T, class... Types>
    constexpr T&& get(variant<Types...>&&);                             // [=freestanding-deleted]
  template<class T, class... Types>
    constexpr const T& get(const variant<Types...>&);                   // [=freestanding-deleted]
  template<class T, class... Types>
    constexpr const T&& get(const variant<Types...>&&);                 // [=freestanding-deleted]

  template<size_t I, class... Types>
    constexpr add_pointer_t<variant_alternative_t<I, variant<Types...>>>
      get_if(variant<Types...>*) noexcept;
  template<size_t I, class... Types>
    constexpr add_pointer_t<const variant_alternative_t<I, variant<Types...>>>
      get_if(const variant<Types...>*) noexcept;

  template<class T, class... Types>
    constexpr add_pointer_t<T>
      get_if(variant<Types...>*) noexcept;
  template<class T, class... Types>
    constexpr add_pointer_t<const T>
      get_if(const variant<Types...>*) noexcept;

  // [:en] [#variant.relops], relational operators \
  [:zh_CN] [#variant.relops]，关系运算符
  template<class... Types>
    constexpr bool operator==(const variant<Types...>&, const variant<Types...>&);
  template<class... Types>
    constexpr bool operator!=(const variant<Types...>&, const variant<Types...>&);
  template<class... Types>
    constexpr bool operator<(const variant<Types...>&, const variant<Types...>&);
  template<class... Types>
    constexpr bool operator>(const variant<Types...>&, const variant<Types...>&);
  template<class... Types>
    constexpr bool operator<=(const variant<Types...>&, const variant<Types...>&);
  template<class... Types>
    constexpr bool operator>=(const variant<Types...>&, const variant<Types...>&);
  template<class... Types> requires ([[redoc("`:c>")]]three_way_comparable<Types> && ...)
    constexpr common_comparison_category_t<compare_three_way_result_t<Types>...>
      operator<=>(const variant<Types...>&, const variant<Types...>&);

  // [:en] [#variant.visit], visitation \
  [:zh_CN] [#variant.visit]，值的探访
  template<class Visitor, class... Variants>
    constexpr [[redoc("[=seebelow]")]] visit(Visitor&&, Variants&&...);
  template<class R, class Visitor, class... Variants>
    constexpr R visit(Visitor&&, Variants&&...);

  // [:en] [#variant.monostate], class [`monostate] \
  [:zh_CN] [#variant.monostate]，类 [`monostate]
  struct monostate;

  // [:en] [#variant.monostate.relops], [`monostate] relational operators \
  [:zh_CN] [#variant.monostate.relops]，[`monostate] 的关系运算符
  constexpr bool operator==(monostate, monostate) noexcept;
  constexpr strong_ordering operator<=>(monostate, monostate) noexcept;

  // [:en] [#variant.specalg], specialized algorithms \
  [:zh_CN] [#variant.specalg]，特化的算法
  template<class... Types>
    constexpr void swap(variant<Types...>&, variant<Types...>&) noexcept([[redoc("[=seebelow]")]]);

  // [:en] [#variant.bad.access], class [`bad_variant_access] \
  [:zh_CN] [#variant.bad.access]，类 [`bad_variant_access]
  class bad_variant_access;

  // [:en] [#variant.hash], hash support \
  [:zh_CN] [#variant.hash]，散列支持
  template<class T> struct hash;
  template<class... Types> struct hash<variant<Types...>>;
  template<> struct hash<monostate>;
}
[codeblock:end]
