[section#format.tuple
    [:en] Tuple formatter
    [:zh_CN] 元组格式化器
]

[para]
[:en] For each of [`pair] and [`tuple], the library provides the following
formatter specialization where [`[^pair-or-tuple]] is the name of the template:
[:zh_CN] 对于 [`pair] 和 [`tuple] 中的每一种，程序库都提供如下的格式化器特化式，
其中 [`[^pair-or-tuple]] 为模板的名字：

[%@lib formatter]
[codeblock:synopsis]
namespace std {
  template<class charT, [[redoc("`:c>")]]formattable<charT>... Ts>
  struct formatter<@\placeholder{pair-or-tuple}@<Ts...>, charT> {
  private:
    tuple<formatter<remove_cvref_t<Ts>, charT>...> [[redoc("*>")]]underlying_;               // [=expos]
    basic_string_view<charT> [[redoc("*>")]]separator_ = [[redoc("*>")]]STATICALLY-WIDEN<charT>(", ");      // [=expos]
    basic_string_view<charT> [[redoc("*>")]]opening-bracket_ = [[redoc("*>")]]STATICALLY-WIDEN<charT>("("); // [=expos]
    basic_string_view<charT> [[redoc("*>")]]closing-bracket_ = [[redoc("*>")]]STATICALLY-WIDEN<charT>(")"); // [=expos]

  public:
    constexpr void set_separator(basic_string_view<charT> sep) noexcept;
    constexpr void set_brackets(basic_string_view<charT> opening,
                                basic_string_view<charT> closing) noexcept;

    template<class ParseContext>
      constexpr typename ParseContext::iterator
        parse(ParseContext& ctx);

    template<class FormatContext>
      typename FormatContext::iterator
        format([[redoc("[=seebelow]")]]& elems, FormatContext& ctx) const;
  };

  template<class... Ts>
    inline constexpr bool enable_nonlocking_formatter_optimization<[[redoc("^>")]]pair-or-tuple<Ts...>> =
      (enable_nonlocking_formatter_optimization<Ts> && ...);
}
[codeblock:end]

[para]
[:en] The [`parse] member functions of these formatters interpret the format
specification as a [~@fmt tuple-format-spec] according to the following syntax:
[:zh_CN] 这些格式化器的 [`parse] 成员函数，根据以下语法，将格式说明解析为
[~@fmt 元组格式说明]：

[syntax]
[rule@fmt tuple-format-spec [:zh_CN] 元组格式说明 ]
    [| [~:opt tuple-fill-and-align] [~:opt width] [~:opt tuple-type] ]
[rule:end]

[rule@fmt tuple-fill-and-align [:zh_CN] 元组填充与对齐 ]
    [| [~:opt tuple-fill] align ]
[rule:end]

[rule@fmt tuple-fill [:zh_CN] 元组填充 ]
    [|:descriptive
        [:en] any character other than [`{] or [`}] or [`:]
        [:zh_CN] 除 [`{]，[`}]，或 [`:] 外的任意字符
    ]
[rule:end]

[rule:oneof@fmt tuple-type [:zh_CN] 元组类型 ]
    [| [`m] ]
    [| [`n] ]
[rule:end]
[syntax:end]

[para]
[:en] The [~@fmt tuple-fill-and-align] is interpreted the same way as a
[~@fmt fill-and-align] ([#format.string.std]).
[:zh_CN] [~@fmt 元组填充与对齐]与[~@fmt 填充与对齐]的解释方式相同
（[#format.string.std]）。

[:en] The productions [~@fmt align] and [~@fmt width] are described in
[#format.string].
[:zh_CN] 产生式[~@fmt 对齐]和[~@fmt 宽度]在 [#format.string] 中描述。

[para]
[:en] The [~@fmt tuple-type] specifier changes the way a [`pair] or [`tuple] is
formatted, with certain options only valid with certain argument types.
[:zh_CN] [~@fmt 范围类型]说明符改变 [`pair] 或 [`tuple] 格式化的方式，一些选项
仅对某些实参类型有效。

[:en] The meaning of the various type options is as specified in
[#:tab#formatter.tuple.type].
[:zh_CN] 各种类型选项的含义在 [#:tab#formatter.tuple.type] 中给出。

[table:grid#formatter.tuple.type
    [:en] Meaning of [~@fmt tuple-type] options
    [:zh_CN] [~@fmt 元组类型]各选项的含义
    [|  [:en] Option
        [:zh_CN] 选项 ]
    [|  [:en] Requirements
        [:zh_CN] 规定 ]
    [|  [:en] Meaning
        [:zh_CN] 含义 ]
]
[|] [`m]
[|] [`sizeof...(Ts) == 2]
[|] [:en] Equivalent to:
    [:zh_CN] 等价于：
[codeblock]
set_separator([[redoc("*>")]]STATICALLY-WIDEN<charT>(": "));
set_brackets({}, {});
[codeblock:end]
[-]
[|] [`n]
[|] [:en] none
    [:zh_CN] 无
[|] [:en] Equivalent to: [`set_brackets({}, {});]
    [:zh_CN] 等价于：[`set_brackets({}, {});]
[-]
[|] [:en] none
    [:zh_CN] 无
[|] [:en] none
    [:zh_CN] 无
[|] [:en] No effects
    [:zh_CN] 无效果
[-]
[table:end]

[%@lib@member set_separator[!formatter]]
[codeblock:declaration]
constexpr void set_separator(basic_string_view<charT> sep) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`[*separator_] = sep;]
[:zh_CN] 等价于：[`[*separator_] = sep;]
[div:end]

[%@lib@member set_brackets[!formatter]]
[codeblock:declaration]
constexpr void set_brackets(basic_string_view<charT> opening,
                            basic_string_view<charT> closing) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
[[redoc("*>")]]opening-bracket_ = opening;
[[redoc("*>")]]closing-bracket_ = closing;
[codeblock:end]
[div:end]

[%@lib@member parse[!formatter]]
[codeblock:declaration]
template<class ParseContext>
  constexpr typename ParseContext::iterator
    parse(ParseContext& ctx);
[codeblock:end]

[div:description]
[para:effects]
[:en] Parses the format specifiers as a [~@fmt tuple-format-spec] and stores the
parsed specifiers in [`*this].
[:zh_CN] 按[~@fmt 元组格式说明]解析格式说明符，并将解析到的各说明符存储于
[`*this] 中。

[:en] The values of [*opening-bracket_], [*closing-bracket_], and [*separator_]
are modified if and only if required by the [~@fmt tuple-type], if present.
[:zh_CN] 当且仅当[~@fmt 范围类型]（如果出现）需要时，修改 [*opening-bracket_]，
[*closing-bracket_]，和 [*separator_] 的值。

[:en] For each element [`[^e]] in [*underlying_], calls [`[*e].parse(ctx)] to
parse an empty [~@fmt format-spec] and, if [`[^e].set_debug_format()]
is a valid expression, calls [`[^e].set_debug_format()].
[:zh_CN] 对于 [*underlying_] 中的每个元素 [`[^e]]，调用 [`[*e].parse(ctx)] 以
解析一个空[~@fmt 格式说明]，并且如果 [`[^e].set_debug_format()] 是有效表达式，
则调用 [`[^e].set_debug_format()]。

[para:returns]
[:en] An iterator past the end of the [~@fmt tuple-format-spec].
[:zh_CN] [~@fmt 元组格式说明]的越过末尾迭代器。
[div:end]

[%@lib@member format[!formatter]]
[codeblock:declaration]
template<class FormatContext>
  typename FormatContext::iterator
    format([[redoc("[=seebelow]")]]& elems, FormatContext& ctx) const;
[codeblock:end]

[div:description]
[para]
[:en] The type of [`elems] is:
[:zh_CN] [`elems] 的类型：
[list]
[item]
[:en] If [`([`:c formattable]<const Ts, charT> && ...)] is [`true],
[`const [^pair-or-tuple]<Ts...>&].
[:zh_CN] 当 [`([`:c formattable]<const Ts, charT> && ...)] 为 [`true] 时，为
[`const [^pair-or-tuple]<Ts...>&]。
[item]
[:en] Otherwise [`[^pair-or-tuple]<Ts...>&].
[:zh_CN] 否则为 [`[^pair-or-tuple]<Ts...>&]。
[list:end]

[para:effects]
[:en] Writes the following into [`ctx.out()], adjusted according to the
[~@fmt tuple-format-spec]:
[:zh_CN] 将以下内容写入 [`ctx.out()]，并根据[~@fmt 元组格式说明]进行调整：

[list]
[item]
[:en@~] [*opening-bracket_],
[:zh_CN@~] [*opening-bracket_]，
[item]
[:en@~] for each index [`I] in the [=range(0,sizeof...(Ts))]:
[:zh_CN@~] 对 [=range(0,sizeof...(Ts))] 中的每个索引 [`I]：
[list]
[item]
[:en@~] if [`I != 0], [*separator_],
[:zh_CN@~] 若 [`I != 0]，则有 [*separator_]，
[item]
[:en@~] the result of writing [`get<I>(elems)] via [`get<I>([*underlying_])] and
[:zh_CN@~] 通过 [`get<I>([*underlying_])] 写入 [`get<I>(elems)] 的结果，和
[list:end]
[item]
[:en@~] [*closing-bracket_].
[:zh_CN@~] [*closing-bracket_]。
[list:end]

[para:returns]
[:en] An iterator past the end of the output range.
[:zh_CN] 输出范围的越过末尾迭代器。
[div:end]
