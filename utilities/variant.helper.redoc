[section#variant.helper
    [:en] [`variant] helper classes
    [:zh_CN] [`variant] 的辅助类
]

[%@library variant_size]
[codeblock:declaration]
template<class T> struct variant_size;
[codeblock:end]

[begin:description]
[para:remarks]
[:en] All specializations of [`variant_size] shall meet the
[*Cpp17UnaryTypeTrait] requirements ([#meta.rqmts]) with a base characteristic
of [`integral_constant<size_t, N>] for some [`N].
[:zh_CN] [`variant_size] 的每个特例都应当满足 [*Cpp17UnaryTypeTrait] 的规定
（[#meta.rqmts]），其基础特征为对于某个 [`N] 的 [`integral_constant<size_t, N>]。
[end:description]

[%@library variant_size]
[codeblock:declaration]
template<class T> class variant_size<const T>;
template<class T> class variant_size<volatile T>;
template<class T> class variant_size<const volatile T>;
[codeblock:end]

[begin:description]
[para]
[:en] Let [`VS] denote [`variant_size<T>] of the cv-unqualified type [`T].
[:zh_CN] 令 [`VS] 代表对某个 cv 未限定类型 [`T] 的 [`variant_size<T>]。

[:en] Then each of the three templates shall meet the [*Cpp17UnaryTypeTrait]
requirements ([#meta.rqmts]) with a base characteristic of
[`integral_constant<size_t, VS::value>].
[:zh_CN] 则这三个模板都应当满足 [*Cpp17UnaryTypeTrait] 的规定（[#meta.rqmts]），
其基础特征为 [`integral_constant<size_t, VS::value>]。
[end:description]

[%@library variant_size]
[codeblock:declaration]
template<class... Types>
  struct variant_size<variant<Types...>> : integral_constant<size_t, sizeof...(Types)> { };
[codeblock:end]
[/% No itemdescr needed for variant_size<variant<Types...>>/]

[%@library variant_alternative]
[codeblock:declaration]
template<size_t I, class T> class variant_alternative<I, const T>;
template<size_t I, class T> class variant_alternative<I, volatile T>;
template<size_t I, class T> class variant_alternative<I, const volatile T>;
[codeblock:end]

[begin:description]
[para]
[:en] Let [`VA] denote [`variant_alternative<I, T>] of the cv-unqualified type
[`T].
[:zh_CN] 令 [`VA] 代表对某个 cv 未限定类型 [`T] 的 [`variant_alternative<I, T>]。

[:en] Then each of the three templates shall satisfy the
[*Cpp17TransformationTrait] requirements ([#meta.rqmts]) with a member typedef
[`type] that names the following type:
[:zh_CN] 则这三个模板都应当满足 [*Cpp17TransformationTrait] 的规定
（[#meta.rqmts]），其成员 typedef [`type] 指名下列类型：

[list]
[item]
[:en@~] for the first specialization, [`add_const_t<VA::type>],
[:zh_CN@~] 对于第一种特例，为 [`add_const_t<VA::type>]，
[item]
[:en@~] for the second specialization, [`add_volatile_t<VA::type>], and
[:zh_CN@~] 对于第二种特例，为 [`add_volatile_t<VA::type>]，
[item]
[:en@~] for the third specialization, [`add_cv_t<VA::type>].
[:zh_CN@~] 对于第三种特例，为 [`add_cv_t<VA::type>]。
[list:end]
[end:description]

[%@library variant_alternative]
[codeblock:declaration]
variant_alternative<I, variant<Types...>>::type
[codeblock:end]

[begin:description]
[para:requires]
[:en] [`I < sizeof...(Types)].
[:zh_CN] [`I < sizeof...(Types)]。

[:en] The program is ill-formed if [`I] is out of bounds.
[:zh_CN] 如果 [`I] 越界则程序非良构。

[para:value]
[:en] The type [`T][$_I].
[:zh_CN] 类型 [`T][$_I]。
[end:description]
