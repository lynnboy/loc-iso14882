[section#unique.ptr.single.observers
    [:en] Observers
    [:zh_CN] 探察函数
]

[%@library operator*[!unique_ptr]]
[%@library unique_ptr[!operator*]]
[codeblock:declaration]
add_lvalue_reference_t<T> operator*() const;
[codeblock:end]

[div:description]
[para:requires]
[:en] [`get() != nullptr].
[:zh_CN] [`get() != nullptr]。

[para:returns]
[:en] [`*get()].
[:zh_CN] [`*get()]。

[div:end]

[%@library operator->[!unique_ptr]]
[%@library unique_ptr[!operator->]]
[codeblock:declaration]
pointer operator->() const noexcept;
[codeblock:end]

[div:description]
[para:requires]
[:en] [`get() != nullptr].
[:zh_CN] [`get() != nullptr]。

[para:returns]
[:en] [`get()].
[:zh_CN] [`get()]。

[para]
[begin:note]
[:en] use typically requires that [`T] be a complete type.
[:zh_CN] 其使用通常要求 [`T] 为完整类型。
[end:note]
[div:end]

[%@library get[!unique_ptr]]
[%@library unique_ptr[!get]]
[codeblock:declaration]
pointer get() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] The stored pointer.
[:zh_CN] 所存储的指针。
[div:end]

[%@library get_deleter[!unique_ptr]]
[%@library unique_ptr[!get_deleter]]
[codeblock:declaration]
deleter_type& get_deleter() noexcept;
const deleter_type& get_deleter() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] A reference to the stored deleter.
[:zh_CN] 指代所存储的删除器的引用。
[div:end]

[%@library operator bool[!unique_ptr]]
[%@library unique_ptr[!operator bool]]
[codeblock:declaration]
explicit operator bool() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`get() != nullptr].
[:zh_CN] [`get() != nullptr]。
[div:end]
