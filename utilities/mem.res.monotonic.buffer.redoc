[section#mem.res.monotonic.buffer
    [:en] Class [`monotonic_buffer_resource]
    [:zh_CN] 类 [`monotonic_buffer_resource]
]

[para]
[:en] A [`monotonic_buffer_resource] is a special-purpose memory resource
intended for very fast memory allocations in situations where memory is used to
build up a few objects and then is released all at once when the memory resource
object is destroyed.
[:zh_CN] [`monotonic_buffer_resource] 是一种特殊用途的内存资源，用于在需要内存来
构建少量对象并在内存资源对象被销毁时将它们一起释放掉的情况下，进行非常高效的内存
分配。

[:en] It has the following qualities:
[:zh_CN] 它具有以下各项性质：

[list]
[item]
[:en] A call to [`deallocate] has no effect, thus the amount of memory consumed
increases monotonically until the resource is destroyed.
[:zh_CN] 对 [`deallocate] 的调用没有效果，因而其所消耗的内存数量将会单调增长，
直到这个资源被销毁。

[item]
[:en] The program can supply an initial buffer, which the allocator uses to
satisfy memory requests.
[:zh_CN] 程序可以提供一个初始的缓冲区，分配器使用它来满足内存请求。

[item]
[:en] When the initial buffer (if any) is exhausted, it obtains additional
buffers from an [+upstream] memory resource supplied at construction.
[:zh_CN] 当初始缓冲区（如果有）被耗尽后，它将从在构造时所提供的[+上游]内存资源
获取新的缓冲区。

[:en] Each additional buffer is larger than the previous one, following a
geometric progression.
[:zh_CN] 各个缓冲区都比前一个要大，遵循集合级数增长规律。

[item]
[:en] It is intended for access from one thread of control at a time.
[:zh_CN] 有意使其每次仅能从一个控制线程进行访问。

[:en] Specifically, calls to [`allocate] and [`deallocate] do not synchronize
with one another.
[:zh_CN] 尤其是，对 [`allocate] 和 [`deallocate] 的调用之间并不会进行同步。

[item]
[:en] It frees the allocated memory on destruction, even if [`deallocate] has
not been called for some of the allocated blocks.
[:zh_CN] 它将于销毁时释放其所分配的内存，即便某些已分配的内存块并未调用
[`deallocate] 也是如此。
[list:end]

[%@library monotonic_buffer_resource]
[codeblock:synopsis]
namespace std::pmr {
  class monotonic_buffer_resource : public memory_resource {
    memory_resource *upstream_rsrc;     // [=Expos]
    void *current_buffer;               // [=Expos]
    size_t next_buffer_size;            // [=Expos]

  public:
    explicit monotonic_buffer_resource(memory_resource *upstream);
    monotonic_buffer_resource(size_t initial_size, memory_resource *upstream);
    monotonic_buffer_resource(void *buffer, size_t buffer_size, memory_resource *upstream);

    monotonic_buffer_resource()
        : monotonic_buffer_resource(get_default_resource()) {}
    explicit monotonic_buffer_resource(size_t initial_size)
        : monotonic_buffer_resource(initial_size, get_default_resource()) {}
    monotonic_buffer_resource(void *buffer, size_t buffer_size)
        : monotonic_buffer_resource(buffer, buffer_size, get_default_resource()) {}

    monotonic_buffer_resource(const monotonic_buffer_resource&) = delete;

    virtual ~monotonic_buffer_resource();

    monotonic_buffer_resource& operator=(const monotonic_buffer_resource&) = delete;

    void release();
    memory_resource* upstream_resource() const;

  protected:
    void* do_allocate(size_t bytes, size_t alignment) override;
    void do_deallocate(void* p, size_t bytes, size_t alignment) override;

    bool do_is_equal(const memory_resource& other) const noexcept override;
  };
}
[codeblock:end]

[include mem.res.monotonic.buffer.ctor]

[include mem.res.monotonic.buffer.mem]
