[section#stacktrace.syn
    [:en] Header [`<stacktrace>] synopsis
    [:zh_CN] 头文件 [`<stacktrace>] 纲要
]

[codeblock:synopsis]
namespace std {
  // [:en] [#stacktrace.entry], class [`stacktrace_entry] \
  [:zh_CN] [#stacktrace.entry]，类 [`stacktrace_entry]
  class stacktrace_entry;

  // [:en] [#stacktrace.basic], class template [`basic_stacktrace] \
  [:zh_CN] [#stacktrace.basic]，类模板 [`basic_stacktrace]
  template<class Allocator>
    class basic_stacktrace;

  // [:en] [#basic_stacktrace] typedef names \
  [:zh_CN] [#basic_stacktrace] typedef 名
  using stacktrace = basic_stacktrace<allocator<stacktrace_entry>>;

  // [:en] [#stacktrace.basic.nonmem], non-member functions \
  [:zh_CN] [#stacktrace.basic.nonmem]，非成员函数
  template<class Allocator>
    void swap(basic_stacktrace<Allocator>& a, basic_stacktrace<Allocator>& b)
      noexcept(noexcept(a.swap(b)));

  string to_string(const stacktrace_entry& f);

  template<class Allocator>
    string to_string(const basic_stacktrace<Allocator>& st);

  template<class charT, class traits>
    basic_ostream<charT, traits>&
      operator<<(basic_ostream<charT, traits>& os, const stacktrace_entry& f);

  template<class charT, class traits, class Allocator>
    basic_ostream<charT, traits>&
      operator<<(basic_ostream<charT, traits>& os, const basic_stacktrace<Allocator>& st);

  // [:en] [#stacktrace.basic.hash], hash support \
  [:zh_CN] [#stacktrace.basic.hash]，散列支持
  template<class T> struct hash;
  template<> struct hash<stacktrace_entry>;
  template<class Allocator> struct hash<basic_stacktrace<Allocator>>;
}
[codeblock:end]
