[section#format.range.fmtdef
    [:en] Class template [*range-default-formatter]
    [:zh_CN] 类模板 [*range-default-formatter]
]

[%@lib [*range-default-formatter]]
[codeblock:synopsis]
namespace std {
  template<ranges::[[redoc("`:c>")]]input_range R, class charT>
  struct [[redoc("*>")]]range-default-formatter<range_format::sequence, R, charT> {    // [=expos]
  private:
    using [[redoc("*>")]]maybe-const-r = [[redoc("*>")]]fmt-maybe-const<R, charT>;                    // [=expos]
    range_formatter<remove_cvref_t<ranges::range_reference_t<[[redoc("*>")]]maybe-const-r>>,
                    charT> [[redoc("*>")]]underlying_;                                 // [=expos]

  public:
    constexpr void set_separator(basic_string_view<charT> sep);
    constexpr void set_brackets(basic_string_view<charT> opening,
                                basic_string_view<charT> closing);

    template<class ParseContext>
      constexpr typename ParseContext::iterator
        parse(ParseContext& ctx);

    template<class FormatContext>
      typename FormatContext::iterator
        format([[redoc("*>")]]maybe-const-r& elems, FormatContext& ctx) const;
  };
}
[codeblock:end]

[%@lib@member set_separator[![*range-default-formatter]]]
[codeblock:declaration]
constexpr void set_separator(basic_string_view<charT> sep);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`[*underlying_].set_separator(sep);]
[:zh_CN] 等价于：[`[*underlying_].set_separator(sep);]
[div:end]

[%@lib@member set_brackets[![*range-default-formatter]]]
[codeblock:declaration]
constexpr void set_brackets(basic_string_view<charT> opening, basic_string_view<charT> closing);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`[*underlying_].set_brackets(opening, closing);]
[:zh_CN] 等价于：[`[*underlying_].set_brackets(opening, closing);]
[div:end]

[%@lib@member parse[![*range-default-formatter]]]
[codeblock:declaration]
template<class ParseContext>
  constexpr typename ParseContext::iterator
    parse(ParseContext& ctx);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return [*underlying_].parse(ctx);]
[:zh_CN] 等价于：[`return [*underlying_].parse(ctx);]
[div:end]

[%@lib@member format[![*range-default-formatter]]]
[codeblock:declaration]
template<class FormatContext>
  typename FormatContext::iterator
    format([[redoc("*>")]]maybe-const-r& elems, FormatContext& ctx) const;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return [*underlying_].format(elems, ctx);]
[:zh_CN] 等价于：[`return [*underlying_].format(elems, ctx);]
[div:end]
