[section#func.bind.bind
    [:en] Function template [`bind]
    [:zh_CN] 函数模板 [`bind]
[%:begin@library#bind bind]
]

[para]
[:en]
In the text that follows:
[:zh_CN]
下文中：

[list]
[item]
[:en] [`FD] is the type [`decay_t<F>],
[:zh_CN] [`FD] 为类型 [`decay_t<F>]，
[item]
[:en] [`fd] is an lvalue of type [`FD] constructed from [`std::forward<F>(f)],
[:zh_CN] [`fd] 是以 [`std::forward<F>(f)] 构造的 [`FD] 类型的左值，
[item]
[:en] [`T][$_i] is the [$i][^th] type in the template parameter pack
[`BoundArgs],
[:zh_CN] [`T][$_i] 为模板形参包组 [`BoundArgs] 中的第 [$i] 个类型，
[item]
[:en] [`TD][$_i] is the type [`decay_t<T[$_i]>],
[:zh_CN] [`TD][$_i] 为类型 [`decay_t<T[$_i]>]，
[item]
[:en] [`t][$_i] is the [$i][^th] argument in the function parameter pack
[`bound_args],
[:zh_CN] [`t][$_i] 为函数形参包组 [`bound_args] 中的第 [$i] 个实参，
[item]
[:en] [`td][$_i] is an lvalue of type [`TD][$_i] constructed from
[`std::forward<T[$_i]>(t[$_i])],
[:zh_CN] [`td][$_i] 是以 [`std::forward<T[$_i]>(t[$_i])] 构造的
[`TD][$_i] 类型的左值，
[item]
[:en] [`U][$_j] is the [$j][^th] deduced type of the [`UnBoundArgs&&...]
parameter of the argument forwarding call wrapper, and
[:zh_CN] [`U][$_j] 是实参转发调用包装器的 [`UnBoundArgs&&...] 形参的第 [$j] 个
被推断的类型，而
[item]
[:en] [`u][$_j] is the [$j][^th] argument associated with [`U][$_j].
[:zh_CN] [`u][$_j] 是与 [`U][$_j] 关联的第 [$j] 个实参。
[list:end]

[%@library bind]
[codeblock:declaration [!:mark UnSpec] ]
template<class F, class... BoundArgs>
  [=UnSpec] bind(F&& f, BoundArgs&&... bound_args);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`is_constructible_v<FD, F>] shall be [`true].
[:zh_CN] [`is_constructible_v<FD, F>] 应当为 [`true]。

[:en] For each [`T][$_i] in [`BoundArgs], [`is_constructible_v<TD[$_i], T[$_i]>]
shall be [`true].
[:zh_CN] 对于 [`BoundArgs] 中的每个 [`T][$_i]，
[`is_constructible_v<TD[$_i], T[$_i]>] 应当为 [`true]。

[:en] [`[*INVOKE] (fd, w[_1], w[_2], [$\dotsc], w[$_N])] ([#func.require]) shall
be a valid expression for some values [`w][_1], [`w][_2], [$\dotsc], [`w][$_N],
where [$N] has the value [`sizeof...(bound_args)].
[:zh_CN] [`[*INVOKE] (fd, w[_1], w[_2], [$\dotsc], w[$_N])]（[#func.require]）
对于一些值 [`w][_1], [`w][_2], [$\dotsc], [`w][$_N] 应当是有效的表达式，其中
[$N] 的值为 [`sizeof...(bound_args)]。

[:en] The cv-qualifiers [$cv] of the call wrapper [`g], as specified below,
shall be neither [`volatile] nor [`const volatile].
[:zh_CN] 上文所指定的调用包装器 [`g] 的 cv 限定符 [$cv]，既不能为 [`volatile]
也不能为 [`const volatile]。

[para:returns]
[:en] An argument forwarding call wrapper [`g] ([#func.require]).
[:zh_CN] 实参转发调用包装器 [`g]（[#func.require]）。

[:en] The effect of [`g(u[_1], u[_2], [$\dotsc], u[$_M])] shall be
[:zh_CN] [`g(u[_1], u[_2], [$\dotsc], u[$_M])] 的效果应当为

[codeblock:notation [!:var INVOKE] ]
[*INVOKE](fd, std::forward<V[_1]>(v[_1]), std::forward<V[_2]>(v[_2]), [$\dotsc], std::forward<V[$_N]>(v[$_N]))
[codeblock:end]

[:en@~] where the values and types of the bound arguments
[`v][_1], [`v][_2], [$\ldots], [`v][$_N] are determined as specified below.
[:zh_CN@~] 其中绑定的实参 [`v][_1], [`v][_2], [$\dotsc], [`v][$_N] 的值和类型是
以下述方式确定的。

[:en] The copy constructor and move constructor of the argument forwarding call
wrapper shall throw an exception if and only if the corresponding constructor of
[`FD] or of any of the types [`TD][$_i] throws an exception.
[:zh_CN] 实参转发调用包装器的复制构造函数和移动构造函数，当且仅当 [`FD] 的对应
构造函数或者 [`TD][$_i] 中的任何类型的构造函数抛出异常时，抛出异常。

[para:throws]
[:en] Nothing unless the construction of [`fd] or of one of the values
[`td][$_i] throws an exception.
[:zh_CN] 除非 [`fd] 或 [`td][$_i] 之中的一个值的构造抛出异常，否则不抛出异常。

[para:remarks]
[:en] The return type shall satisfy the [*Cpp17MoveConstructible] requirements.
[:zh_CN] 返回类型应当符合 [*Cpp17MoveConstructible] 的规定。

[:en] If all of [`FD] and [`TD][$_i] satisfy the [*Cpp17CopyConstructible]
requirements, then the return type shall satisfy the [*Cpp17CopyConstructible]
requirements.
[:zh_CN] 如果所有的 [`FD] 和 [`TD][$_i] 均满足 [*Cpp17CopyConstructible] 的规定，
则返回类型也应当满足 [*Cpp17CopyConstructible] 的规定。

[enter:note]
[:en] This implies that all of [`FD] and [`TD][$_i] are
[*Cpp17MoveConstructible].
[:zh_CN] 这意味着所有的 [`FD] 和 [`TD][$_i] 均为 [*Cpp17MoveConstructible]。
[exit:note]
[exit:description]

[%@library bind]
[codeblock:declaration [!:mark UnSpec] ]
template<class R, class F, class... BoundArgs>
  [=UnSpec] bind(F&& f, BoundArgs&&... bound_args);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`is_constructible_v<FD, F>] shall be [`true].
[:zh_CN] [`is_constructible_v<FD, F>] 应当为 [`true]。

[:en] For each [`T][$_i] in [`BoundArgs], [`is_constructible_v<TD[$_i], T[$_i]>]
shall be [`true].
[:zh_CN] 对于 [`BoundArgs] 中的每个 [`T][$_i]，
[`is_constructible_v<TD[$_i], T[$_i]>] 应当为 [`true]。

[:en] [`[*INVOKE](fd, w[_1], w[_2], [$\dotsc], w[$_N])] shall be a valid
expression for some values [`w][_1], [`w][_2], [$\dotsc], [`w][$_N], where [$N]
has the value [`sizeof...(bound_args)].
[:zh_CN]
[:zh_CN] [`[*INVOKE](fd, w[_1], w[_2], [$\dotsc], w[$_N])] 对于一些值
[`w][_1], [`w][_2], [$\dotsc], [`w][$_N] 应当是有效的表达式，其中 [$N] 的值为
[`sizeof...(bound_args)]。

[:en] The cv-qualifiers [$cv] of the call wrapper [`g], as specified below,
shall be neither [`volatile] nor [`const volatile].
[:zh_CN] 上文所指定的调用包装器 [`g] 的 cv 限定符 [$cv]，既不能为 [`volatile]
也不能为 [`const volatile]。

[para:returns]
[:en] An argument forwarding call wrapper [`g] ([#func.require]).
[:zh_CN] 实参转发调用包装器 [`g]（[#func.require]）。

[:en] The effect of [`g(u[_1], u[_2], [$\dotsc], u[$_M])] shall be
[:zh_CN] [`g(u[_1], u[_2], [$\dotsc], u[$_M])] 的效果应当为

[codeblock:notation]
[$INVOKE]<R>(fd, std::forward<V[_1]>(v[_1]), std::forward<V[_2]>(v[_2]), [$\dotsc], std::forward<V[_[$N]]>(v[_[$N]]))
[codeblock:end]

[:en@~] where the values and types of the bound arguments
[`v][_1], [`v][_2], [$\dotsc], [`v][$_N] are determined as specified below.
[:zh_CN@~] 其中绑定的实参 [`v][_1], [`v][_2], [$\dotsc], [`v][$_N] 的值和类型
是以下述方式确定的。

[:en] The copy constructor and move constructor of the argument forwarding call
wrapper shall throw an exception if and only if the corresponding constructor of
[`FD] or of any of the types [`TD][$_i] throws an exception.
[:zh_CN] 实参转发调用包装器的复制构造函数和移动构造函数，当且仅当 [`FD] 的对应
构造函数或者 [`TD][$_i] 中的任何类型的构造函数抛出异常时，抛出异常。

[para:throws]
[:en] Nothing unless the construction of [`fd] or of one of the values
[`td][$_i] throws an exception.
[:zh_CN] 除非 [`fd] 或 [`td][$_i] 之中的一个值的构造抛出异常，否则不抛出异常。

[para:remarks]
[:en] The return type shall satisfy the [*Cpp17MoveConstructible] requirements.
[:zh_CN] 返回类型应当符合 [*Cpp17MoveConstructible] 的规定。

[:en] If all of [`FD] and [`TD][$_i] satisfy the [*Cpp17CopyConstructible]
requirements, then the return type shall satisfy the [*Cpp17CopyConstructible]
requirements.
[:zh_CN] 如果所有的 [`FD] 和 [`TD][$_i] 均满足 [*Cpp17CopyConstructible] 的规定，
则返回类型也应当满足 [*Cpp17CopyConstructible] 的规定。

[enter:note]
[:en] This implies that all of [`FD] and [`TD][$_i] are
[*Cpp17MoveConstructible].
[:zh_CN] 这意味着所有的 [`FD] 和 [`TD][$_i] 均为 [*Cpp17MoveConstructible]。
[exit:note]
[exit:description]

[para]
[:en]
The values of the [+bound arguments]
[`v][_1], [`v][_2], [$\dotsc], [`v][$_N] and their corresponding types
[`V][_1], [`V][_2], [$\dotsc], [`V][$_N] depend on the types [`TD][$_i] derived
from the call to [`bind] and the cv-qualifiers [$cv] of the call wrapper [`g]
as follows:
[:zh_CN]
[+绑定的实参] [`v][_1], [`v][_2], [$\dotsc], [`v][$_N] 的值及其对应的类型
[`V][_1], [`V][_2], [$\dotsc], [`V][$_N] 以如下方式依赖于从对 [`bind] 的调用中
得出的类型 [`TD][$_i]，以及调用包装器 [`g] 的 cv 限定符 [$cv]：

[list]
[item]
[:en] if [`TD][$_i] is [`reference_wrapper<T>], the argument is
[`td[$_i].get()] and its type [`V][$_i] is [`T&];
[:zh_CN] 若 [`TD][$_i] 为 [`reference_wrapper<T>]，则实参为
[`td[$_i].get()] 而其类型 [`V][$_i] 为 [`T&]；

[item]
[:en] if the value of [`is_bind_expression_v<TD[$_i]>] is [`true], the
argument is [`td[$_i](std::forward<U[$_j]>(u[$_j])...)] and its type [`V][$_i]
is [`invoke_result_t<TD[$_i] [$cv] &, U[$_j]...>&&];
[:zh_CN] 若 [`is_bind_expression_v<TD[$_i]>] 的值为 [`true]，则实参为
[`td[$_i](std::forward<U[$_j]>(u[$_j])...)] 而其类型 [`V][$_i] 为
[`invoke_result_t<TD[$_i] [$cv] &, U[$_j]...>&&]；

[item]
[:en] if the value [`j] of [`is_placeholder_v<TD[$_i]>] is not zero, the
argument is [`std::forward<U[$_j]>(u[$_j])] and its type [`V][$_j] is
[`U[$_j]&&];
[:zh_CN] 若 [`is_placeholder_v<TD[$_i]>] 的值 [`j] 不为零，则实参为
[`std::forward<U[$_j]>(u[$_j])] 而其类型 [`V][$_j] 为 [`U[$_j]&&]；

[item]
[:en] otherwise, the value is [`td][$_i] and its type [`V][$_i] is
[`TD[$_i] [$cv] &].
[:zh_CN] 否则，其值为 [`td][$_i] 而其类型 [`V][$_i] 为 [`TD[$_i] [$cv] &]。
[list:end]

[%:end#bind]
