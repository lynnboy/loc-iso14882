[section#func.bind.bind
    [:en] Function template [`bind]
    [:zh_CN] 函数模板 [`bind]
[%:begin@lib#bind bind]
]

[para]
[:en]
In the text that follows:
[:zh_CN]
下文中：

[list]
[item]
[:en] [`g] is a value of the result of a [`bind] invocation,
[:zh_CN] [`g] 为 [`bind] 调用的结果值，
[item]
[:en] [`FD] is the type [`decay_t<F>],
[:zh_CN] [`FD] 为类型 [`decay_t<F>]，
[item]
[:en] [`fd] is an lvalue that is a target object of [`g] ([#func.def]) of type
[`FD] direct-non-list-initialized with [`std::forward<F>(f)],
[:zh_CN] [`fd] 为 [`g] 的目标对象（[#func.def]），是以 [`std::forward<F>(f)]
直接非列表初始化的 [`FD] 类型的左值，
[item]
[:en] [`T][$_i] is the [$i][^th] type in the template parameter pack
[`BoundArgs],
[:zh_CN] [`T][$_i] 为模板形参包组 [`BoundArgs] 中的第 [$i] 个类型，
[item]
[:en] [`TD][$_i] is the type [`decay_t<T[$_i]>],
[:zh_CN] [`TD][$_i] 为类型 [`decay_t<T[$_i]>]，
[item]
[:en] [`t][$_i] is the [$i][^th] argument in the function parameter pack
[`bound_args],
[:zh_CN] [`t][$_i] 为函数形参包组 [`bound_args] 中的第 [$i] 个实参，
[item]
[:en] [`td][$_i] is a bound argument entity of [`g] ([#func.def]) of type
[`TD][$_i] direct-non-list-initialized with [`std::forward<T[$_i]>(t[$_i])],
[:zh_CN] [`td][$_i] 为 [`g] 的一个绑定实参实体（[#func.def]），是以
[`std::forward<T[$_i]>(t[$_i])] 直接非列表初始化的 [`TD][$_i] 类型的左值，
[item]
[:en] [`U][$_j] is the [$j][^th] deduced type of the [`UnBoundArgs&&...]
parameter of the argument forwarding call wrapper, and
[:zh_CN] [`U][$_j] 是实参转发调用包装器的 [`UnBoundArgs&&...] 形参的第 [$j] 个
被推断的类型，而
[item]
[:en] [`u][$_j] is the [$j][^th] argument associated with [`U][$_j].
[:zh_CN] [`u][$_j] 是与 [`U][$_j] 关联的第 [$j] 个实参。
[list:end]

[%@lib bind]
[codeblock:declaration]
template<class F, class... BoundArgs>
  constexpr [[redoc("=unspec")]] bind(F&& f, BoundArgs&&... bound_args);
template<class R, class F, class... BoundArgs>
  constexpr [[redoc("=unspec")]] bind(F&& f, BoundArgs&&... bound_args);
[codeblock:end]

[div:description]
[para:mandates]
[:en] [`is_constructible_v<FD, F>] is [`true].
[:zh_CN] [`is_constructible_v<FD, F>] 为 [`true]。

[:en] For each [`T][$_i] in [`BoundArgs], [`is_constructible_v<TD[$_i], T[$_i]>]
is [`true].
[:zh_CN] 对于 [`BoundArgs] 中的每个 [`T][$_i]，
[`is_constructible_v<TD[$_i], T[$_i]>] 为 [`true]。

[para:expects]
[:en] [`FD] and each [`TD][$_i] meet the [^:oc MoveConstructible] and
[^:oc Destructible] requirements.
[:zh_CN] [`FD] 和每个 [`TD][$_i] 均满足 [^:oc MoveConstructible] 和
[^:oc Destructible] 的规定。

[:en] [`[^INVOKE] (fd, w[_1], w[_2], [$\dotsc], w[$_N])] ([#func.require]) is
a valid expression for some values [`w][_1], [`w][_2], [$\dotsc], [`w][$_N],
where [$N] has the value [`sizeof...(bound_args)].
[:zh_CN] [`[^INVOKE] (fd, w[_1], w[_2], [$\dotsc], w[$_N])]（[#func.require]）
对于一些值 [`w][_1], [`w][_2], [$\dotsc], [`w][$_N] 是有效的表达式，其中 [$N] 的
值为 [`sizeof...(bound_args)]。

[para:returns]
[:en] An argument forwarding call wrapper [`g] ([#func.require]).
[:zh_CN] 实参转发调用包装器 [`g]（[#func.require]）。

[:en] A program that attempts to invoke a volatile-qualified [`g] is ill-formed.
[:zh_CN] 视图调用 volatile 限定的 [`g] 的程序非良构。

[:en] When [`g] is not volatile-qualified, invocation of
[`g(u[_1], u[_2], [$\dotsc], u[$_M])] is expression-equivalent
([#defns.expression-equivalent]) to
[:zh_CN] 若 [`g] 无 volatile 限定，则调用 [`g(u[_1], u[_2], [$\dotsc], u[$_M])]，
对于第一个重载，按表达式等价（[#defns.expression-equivalent]）于：

[codeblock:notation]
[^INVOKE](static_cast<V[_[`fd]]>(v[_[`fd]]),
       static_cast<V[_1]>(v[_1]), static_cast<V[_2]>(v[_2]), [$\dotsc], static_cast<V[$_N]>(v[$_N]))
[codeblock:end]

[:en@~] for the first overload, and
[:zh_CN@~] 而对于第二个重载为

[codeblock:notation]
[^INVOKE]<R>(static_cast<V[_[`fd]]>(v[_[`fd]]),
          static_cast<V[_1]>(v[_1]), static_cast<V[_2]>(v[_2]), [$\dotsc], static_cast<V[$_N]>(v[$_N]))
[codeblock:end]

[:en@~] for the second overload, where the values and types of the target
argument [`v][_[`fd]] and of the bound arguments [`v][_1], [`v][_2], [$\ldots],
[`v][$_N] are determined as specified below.
[:zh_CN@~] 其中目标实参 [`v][_[`fd]] 和绑定的实参 [`v][_1], [`v][_2], [$\dotsc], 
[`v][$_N] 的值和类型是以下述方式确定的。

[para:throws]
[:en] Any excception thrown by the initialization of the state entities of [`g].
[:zh_CN] 由 [`g] 的各状态实体的初始化所抛出的任何异常。

[para]
[begin:note]
[:en] If all of [`FD] and [`TD][$_i] meet the requirements of
[^:oc CopyConstructible], then the return type meets the requirements of
[^:oc CopyConstructible].
[:zh_CN] 如果所有的 [`FD] 和 [`TD][$_i] 均满足 [^:oc CopyConstructible] 的规定，
则返回类型也满足 [^:oc CopyConstructible] 的规定。
[end:note]
[div:end]

[para]
[:en]
The values of the [+:% bound arguments]
[`v][_1], [`v][_2], [$\dotsc], [`v][$_N] and their corresponding types
[`V][_1], [`V][_2], [$\dotsc], [`V][$_N] depend on the types [`TD][$_i] derived
from the call to [`bind] and the cv-qualifiers [=cv] of the call wrapper [`g]
as follows:
[:zh_CN]
[+:% 绑定的实参] [`v][_1], [`v][_2], [$\dotsc], [`v][$_N] 的值及其对应的类型
[`V][_1], [`V][_2], [$\dotsc], [`V][$_N] 以如下方式依赖于从对 [`bind] 的调用中
得出的类型 [`TD][$_i]，以及调用包装器 [`g] 的 cv 限定符 [=cv]：

[list]
[item]
[:en] if [`TD][$_i] is [`reference_wrapper<T>], the argument is
[`td[$_i].get()] and its type [`V][$_i] is [`T&];
[:zh_CN] 若 [`TD][$_i] 为 [`reference_wrapper<T>]，则实参为
[`td[$_i].get()] 而其类型 [`V][$_i] 为 [`T&]；

[item]
[:en] if the value of [`is_bind_expression_v<TD[$_i]>] is [`true], the
argument is
[:zh_CN] 若 [`is_bind_expression_v<TD[$_i]>] 的值为 [`true]，则实参为
[codeblock:notation]
static_cast<[=cv] TD[$_i]&>(td[$_i])(std::forward<U[$_j]>(u[$_j])...)
[codeblock:end]
[:en@~] and its type [`V][$_i] is [`invoke_result_t<[=cv] TD[$_i]&, U[$_j]...>&&];
[:zh_CN@~] 而其类型 [`V][$_i] 为 [`invoke_result_t<[=cv] TD[$_i]&, U[$_j]...>&&]；

[item]
[:en] if the value [`j] of [`is_placeholder_v<TD[$_i]>] is not zero, the
argument is [`std::forward<U[$_j]>(u[$_j])] and its type [`V][$_j] is
[`U[$_j]&&];
[:zh_CN] 若 [`is_placeholder_v<TD[$_i]>] 的值 [`j] 不为零，则实参为
[`std::forward<U[$_j]>(u[$_j])] 而其类型 [`V][$_j] 为 [`U[$_j]&&]；

[item]
[:en] otherwise, the value is [`td][$_i] and its type [`V][$_i] is
[`[=cv] TD[$_i]&].
[:zh_CN] 否则，其值为 [`td][$_i] 而其类型 [`V][$_i] 为 [`[=cv] TD[$_i]&]。
[list:end]

[para]
[:en] The value of the target argument [`v][_[`fd]] is [`fd] and its
corresponding type [`V][_[`fd]] is [`[=cv] FD&].
[:zh_CN] 目标实参 [`v][_[`fd]] 的值为 [`fd]，而其对应类型 [`V][_[`fd]] 为
[`[=cv] FD&]。

[%:end#bind]
