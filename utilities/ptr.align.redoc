[section#ptr.align
    [:en] Pointer alignment
    [:zh_CN] 指针对齐
]

[%@library align]
[codeblock:declaration]
void* align(std::size_t alignment, std::size_t size,
    void*& ptr, std::size_t& space);
[codeblock:end]

[enter:description]
[para:effects]
[:en] If it is possible to fit [`size] bytes of storage aligned by [`alignment]
into the buffer pointed to by [`ptr] with length [`space], the function updates
[`ptr] to represent the first possible address of such storage and decreases
[`space] by the number of bytes used for alignment.
[:zh_CN] 如果将按照 [`alignment] 对齐的 [`size] 个字节的存储纳入由 [`ptr] 所指向
的长度为 [`space] 的缓冲区中是可能的，则函数更新 [`ptr] 以表示第一个可能的这种
存储并对 [`space] 减掉对齐所用掉的字节数。

[:en] Otherwise, the function does nothing.
[:zh_CN] 否则，此函数不做任何事。

[para:requires]

[list]
[item]
[:en] [`alignment] shall be a power of two
[:zh_CN] [`alignment] 应当为 2 的幂

[item]
[:en] [`ptr] shall represent the address of contiguous storage of at least
[`space] bytes
[:zh_CN] [`ptr] 应当表示至少 [`space] 个字节的连续存储的地址
[list:end]

[para:returns]
[:en] A null pointer if the requested aligned buffer would not fit into the
available space, otherwise the adjusted value of [`ptr].
[:zh_CN] 当所请求的对齐缓冲区不能纳入可用的空间中时返回空指针；否则返回调整后的
[`ptr] 值。

[para]
[enter:note]
[:en] The function updates its [`ptr] and [`space] arguments so that it can be
called repeatedly with possibly different [`alignment] and [`size] arguments for
the same buffer.
[:zh_CN] 此函数更新其 [`ptr] 和 [`space] 实参，因此它可以对相同的缓冲区用不同的
[`alignment] 和 [`size] 实参重复进行调用。
[exit:note]
[exit:description]

[%@library assume_aligned]
[codeblock:declaration]
template<size_t N, class T>
  [[nodiscard]] constexpr T* assume_aligned(T* ptr);
[codeblock:end]

[enter:description]
[para:mandates]
[:en] [`N] is a power of two.
[:zh_CN] [`N] 是二的幂。

[para:expects]
[:en] [`ptr] points to an object [`X] of a type similar ([#conv.qual]) to [`T],
where [`X] has alignment [`N] ([#basic.align]).
[:zh_CN] [`ptr] 指向某个类型与 [`T] 相似（[#conv.qual]）的对象 [`X]，其中 [`X]
具有对齐 [`N]（[#basic.align]）。

[para:returns]
[:en] [`ptr].
[:zh_CN] [`ptr]。

[para:throws]
[:en] Nothing.
[:zh_CN] 无。

[para]
[enter:note]
[:en] The alignment assumption on an object [`X] expressed by a call to
[`assume_aligned] may result in generation of more efficient code.
[:zh_CN] 由对 [`assume_aligned] 的调用所表达的对对象 [`X] 的对齐假设，可能导致
生成更加高效的代码。

[:en] It is up to the program to ensure that the assumption actually holds.
[:zh_CN] 确保该假设实际成立是由程序自身负责的。

[:en] The call does not cause the compiler to verify or enforce this.
[:zh_CN] 这次调用并不会导致编译器对此进行验证或强制达成。

[:en] An implementation might only make the assumption for those operations on
[`X] that access [`X] through the pointer returned by [`assume_aligned].
[:zh_CN] 实现可能只会对通过由 [`assume_aligned] 所返回的指针对 [`X] 进行访问的
那些 [`X] 上的操作做出这种假设。
[exit:note]
[exit:description]
