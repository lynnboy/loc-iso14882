[section#util.smartptr.hash
    [:en] Smart pointer hash support
    [:zh_CN] 智能指针的散列支持
]

[%@library hash[!unique_ptr]]
[codeblock:declaration]
template<class T, class D> struct hash<unique_ptr<T, D>>;
[codeblock:end]

[begin:description]
[para]
[:en] Letting [`UP] be [`unique_ptr<T,D>], the specialization [`hash<UP>] is
enabled ([#unord.hash]) if and only if [`hash<typename UP::pointer>] is enabled.
[:zh_CN] 令 [`UP] 为 [`unique_ptr<T,D>]，则当且仅当
[`hash<typename UP::pointer>] 被启用时，特例 [`hash<UP>] 被启用（[#unord.hash]）
。

[:en] When enabled, for an object [`p] of type [`UP], [`hash<UP>()(p)] shall
evaluate to the same value as [`hash<typename UP::pointer>()(p.get())].
[:zh_CN] 如果它被启用，则对于 [`UP] 类型的对象 [`p]，[`hash<UP>()(p)] 应当求值为
与 [`hash<typename UP::pointer>()(p.get())] 相同的值。

[:en] The member functions are not guaranteed to be [`noexcept].
[:zh_CN] 其各成员函数不保证为 [`noexcept]。
[end:description]

[%@library hash[!shared_ptr]]
[codeblock:declaration]
template<class T> struct hash<shared_ptr<T>>;
[codeblock:end]

[begin:description]
[para]
[:en] For an object [`p] of type [`shared_ptr<T>], [`hash<shared_ptr<T>>()(p)]
shall evaluate to the same value as
[`hash<typename shared_ptr<T>::element_type*>()(p.get())].
[:zh_CN] 对于类型 [`shared_ptr<T>] 的对象 [`p]，[`hash<shared_ptr<T>>()(p)] 应当
求值为与 [`hash<typename shared_ptr<T>::element_type*>()(p.get())] 相同的值。
[end:description]
