[section#func.wrap.func.con
    [:en] Constructors and destructor
    [:zh_CN] 构造函数和析构函数
]

[%@lib@ctor function]
[codeblock:declaration]
function() noexcept;
[codeblock:end]

[div:description]
[para:ensures]
[:en] [`!*this].
[:zh_CN] [`!*this]。
[div:end]

[%@lib@ctor function]
[codeblock:declaration]
function(nullptr_t) noexcept;
[codeblock:end]

[div:description]
[para:ensures]
[:en] [`!*this].
[:zh_CN] [`!*this]。
[div:end]

[%@lib@ctor function]
[codeblock:declaration]
function(const function& f);
[codeblock:end]

[div:description]
[para:ensures]
[:en] [`!*this] if [`!f]; otherwise, the target object of [`*this] is a copy of
the target object of [`f].
[:zh_CN] 若 [`!f] 则有 [`!*this]；否则 [`*this] 的目标对象为 [`f] 的目标对象的副本。

[para:throws]
[:en] Nothing if [`f][=']s target is a specialization of [`reference_wrapper] or
a function pointer.
[:zh_CN] 当 [`f] 的目标是 [`reference_wrapper] 的特例或函数指针时，不抛出异常。

[:en] Otherwise, may throw [`bad_alloc] or any exception thrown by the copy
constructor of the stored callable object.
[:zh_CN] 否则，可能抛出 [`bad_alloc] 或者任何由所存储的可调用对象的复制构造函数
所抛出的异常。

[para:recommended]
[:en] Implementations should avoid the use of dynamically allocated memory for
small callable objects, for example, where [`f][=']s target is an object holding
only a pointer or reference to an object and a member function pointer.
[:zh_CN] 实现最好对于小的可调用对象避免使用动态分配的内存，例如，当 [`f] 的目标
是一种仅保持一个对象指针或引用，以及一个成员函数指针的对象时。
[div:end]

[%@lib@ctor function]
[codeblock:declaration]
function(function&& f) noexcept;
[codeblock:end]

[div:description]
[para:ensures]
[:en] If [`!f], [`*this] has no target; otherwise, the target of [`*this] is
equivalent to the target of [`*f] before the construction, and [`f] is in a
valid state with an unspecified value.
[:zh_CN] 如果 [`!f]，则 [`*this] 没有目标；否则，[`*this] 的目标等价于构造之前
[`f] 的目标，并且 [`f] 处于某个具有未指明的值的有效状态。

[para]
[para:recommended]
[:en] Implementations should avoid the use of dynamically allocated memory for
small callable objects, for example, where [`f][=']s target is an object holding
only a pointer or reference to an object and a member function pointer.
[:zh_CN] 实现最好对于小的可调用对象避免使用动态分配的内存，例如，当 [`f] 的目标
是一种仅保持一个对象指针或引用，以及一个成员函数指针的对象时。
[div:end]

[%@lib@ctor function]
[codeblock:declaration]
template<class F> function(F&& f);
[codeblock:end]

[div:description]
[para]
[:en] Let [`FD] be [`decay_t<F>].
[:zh_CN] 令 [`FD] 为 [`decay_t<F>]。

[para:constraints]
[list]
[item]
[:en] [`is_same_v<remove_cvref_t<F>, function>] is [`false], and
[:zh_CN] [`is_same_v<remove_cvref_t<F>, function>] 为 [`false]，并且
[item]
[:en] [`FD] is Lvalue-Callable ([#func.wrap.func]) for argument types
[`ArgTypes...] and return type [`R].
[:zh_CN] [`FD] 对于实参类型 [`ArgTypes...] 和返回类型 [`R] 是可左值调用的（[#func.wrap.func]）。
[list:end]

[para:mandates]
[list]
[item]
[:en] [`is_copy_constructible_v<FD>] is [`true], and
[:zh_CN] [`is_copy_constructible_v<FD>] 为 [`true]，并且
[item]
[:en] [`is_constructible_v<FD, F>] is [`true].
[:zh_CN] [`is_constructible_v<FD, F>] 为 [`true]。
[list:end]

[para:expects]
[:en] [`FD] meets the [^:oc CopyConstructible] requirements.
[:zh_CN] [`FD] 满足 [^:oc CopyConstructible] 规定。

[para:ensures]
[:en] [`!*this] is [`true] if any of the following hold:
[:zh_CN] 如果符合以下任何情况，则 [`!*this] 为 [`true]：

[list]
[item]
[:en] [`f] is a null function pointer value.
[:zh_CN] [`f] 是空函数指针值。
[item]
[:en] [`f] is a null member pointer value.
[:zh_CN] [`f] 是空成员指针值。
[item]
[:en] [`remove_cvref_t<F>] is a specialization of the [`function] class template,
and [`!f] is [`true].
[:zh_CN] [`remove_cvref_t<F>] 是类模板 [`function] 的特例，且 [`!f] 为 [`true]。
[list:end]

[para]
[:en] Otherwise, [`*this] has a target object of type [`FD]
direct-non-list-initialized with [`std::forward<F>(f)].
[:zh_CN] 否则，[`*this] 具有以 [`std::forward<F>(f)] 直接非列表初始化的 [`FD]
类型的目标对象。

[para:throws]
[:en] Nothing if [`FD] is a specialization of [`reference_wrapper] or a
function pointer type.
[:zh_CN] 当 [`FD] 是 [`reference_wrapper] 的特例或函数指针类型时，不抛出任何异常。

[:en] Otherwise, may throw [`bad_alloc] or any exception thrown by the
initialization of the target object.
[:zh_CN] 否则，可能抛出 [`bad_alloc] 或者任何由目标对象的初始化所抛出的异常。

[para:recommended]
[:en] Implementations should avoid the use of dynamically allocated memory for
small callable objects, for example, where [`f] refers to an object holding only
a pointer or reference to an object and a member function pointer.
[:zh_CN] 实现最好对于小的可调用对象避免使用动态分配的内存，例如，当 [`f] 指代
某个仅保持一个对象指针或引用，以及一个成员函数指针的对象时。
[div:end]

[codeblock:declaration]
template<class F> function(F) -> function<[[redoc("[=seebelow]")]]>;
[codeblock:end]

[div:description]
[para:constrained]
[:en] [`&F::operator()] is well-formed when treated as an unevaluated operand
and either
[:zh_CN] 当 [`&F::operator()] 被当做免求值操作数时是良构的，且
[list]
[item]
[:en] [`F::operator()] is a non-static member function and
 [`decltype(&F::operator())] is either of the form
[`R(G::*)(A...)] [=cv] [`:opt &] [`:opt noexcept] or of the form
[`R(*)(G, A...) [`:opt noexcept]] for a type [`G], or
[:zh_CN] 要么 [`F::operator()] 是非静态成员函数，且对于某个类型 [`G]，
[`decltype(&F::operator())] 的形式为
“[`R(G::*)(A...)] [=cv] [`:opt &] [`:opt noexcept]”或
“[`R(*)(G, A...) [`:opt noexcept]]”，或者
[item]
[:en] [`F::operator()] is a static member function and [`decltype(&F::operator())]
is of the form [`R(*)(A...) [`:opt noexcept]].
[:zh_CN] 要么 [`F::operator()] 是静态成员函数，且 [`decltype(&F::operator())] 的
形式为“[`R(*)(A...) [`:opt noexcept]]”。
[list:end]

[para:remarks]
[:en] The deduced type is [`function<R(A...)>].
[:zh_CN] 所推断的类型为 [`function<R(A...)>]。

[para]
[begin:example]
[codeblock]
void f() {
  int i{5};
  function g = [&](double) { return i; };       // [:en] deduces [`function<int(double)>] \
                                                [:zh_CN] 推断为 [`function<int(double)>]
}
[codeblock:end]
[end:example]
[div:end]

[%@lib@member operator=[!function]]
[codeblock:declaration]
function& operator=(const function& f);
[codeblock:end]

[div:description]
[para:effects]
[:en] As if by [`function(f).swap(*this);]
[:zh_CN] 如同执行 [`function(f).swap(*this);]

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@lib@member operator=[!function]]
[codeblock:declaration]
function& operator=(function&& f);
[codeblock:end]

[div:description]
[para:effects]
[:en] Replaces the target of [`*this] with the target of [`f].
[:zh_CN] 以 [`f] 的目标替换 [`*this] 的目标。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@lib@member operator=[!function]]
[codeblock:declaration]
function& operator=(nullptr_t) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] If [`*this != nullptr], destroys the target of [`:key this].
[:zh_CN] 如果 [`*this != nullptr]，则销毁 [`:key this] 的目标。

[para:ensures]
[:en] [`!(*this)].
[:zh_CN] [`!(*this)]。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@lib@member operator=[!function]]
[codeblock:declaration]
template<class F> function& operator=(F&& f);
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`decay_t<F>] is Lvalue-Callable ([#func.wrap.func]) for argument types
[`ArgTypes...] and return type [`R].
[:zh_CN] [`decay_t<F>] 对于实参类型 [`ArgTypes...] 和返回类型 [`R] 是可左值调用
的（[#func.wrap.func]）。

[para:effects]
[:en] As if by: [`function(std::forward<F>(f)).swap(*this);]
[:zh_CN] 如同执行：[`function(std::forward<F>(f)).swap(*this);]

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@lib@member operator=[!function]]
[codeblock:declaration]
template<class F> function& operator=(reference_wrapper<F> f) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] As if by: [`function(f).swap(*this);]
[:zh_CN] 如同执行：[`function(f).swap(*this);]

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@lib@dtor function]
[codeblock:declaration]
~function();
[codeblock:end]

[div:description]
[para:effects]
[:en] If [`*this != nullptr], destroys the target of [`:key this].
[:zh_CN] 如果 [`*this != nullptr]，则销毁 [`:key this] 的目标。
[div:end]
