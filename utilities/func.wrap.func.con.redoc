[section#func.wrap.func.con
    [:en] Constructors and destructor
    [:zh_CN] 构造函数和析构函数
]

[%@library function[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
function() noexcept;
[codeblock:end]

[div:description]
[para:ensures]
[:en] [`!*this].
[:zh_CN] [`!*this]。
[div:end]

[%@library function[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
function(nullptr_t) noexcept;
[codeblock:end]

[div:description]
[para:ensures]
[:en] [`!*this].
[:zh_CN] [`!*this]。
[div:end]

[%@library function[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
function(const function& f);
[codeblock:end]

[div:description]
[para:ensures]
[:en] [`!*this] if [`!f]; otherwise, [`*this] targets a copy of [`f.target()].
[:zh_CN] 若 [`!f] 则有 [`!*this]；否则 [`*this] 的目标为 [`f.target()] 的一个
副本。

[para:throws]
[:en] Shall not throw exceptions if [`f][=']s target is a specialization of
[`reference_wrapper] or a function pointer.
[:zh_CN] 当 [`f] 的目标是 [`reference_wrapper] 的特例或函数指针时，不应当抛出
异常。

[:en] Otherwise, may throw [`bad_alloc] or any exception thrown by the copy
constructor of the stored callable object.
[:zh_CN] 否则，可能抛出 [`bad_alloc] 或者任何由所存储的可调用对象的复制构造函数
所抛出的异常。

[begin:note]
[:en] Implementations should avoid the use of dynamically allocated memory for
small callable objects, for example, where [`f][=']s target is an object holding
only a pointer or reference to an object and a member function pointer.
[:zh_CN] 实现最好对于小的可调用对象避免使用动态分配的内存，例如，当 [`f] 的目标
是一种仅保持一个对象指针或引用，以及一个成员函数指针的对象时。
[end:note]
[div:end]

[%@library function[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
function(function&& f) noexcept;
[codeblock:end]

[div:description]
[para:ensures]
[:en] If [`!f], [`*this] has no target; otherwise, the target of [`*this] is
equivalent to the target of [`*f] before the construction, and [`f] is in a
valid state with an unspecified value.
[:zh_CN] 如果 [`!f]，则 [`*this] 没有目标；否则，[`*this] 的目标等价于构造之前
[`f] 的目标，并且 [`f] 处于某个具有未指明的值的有效状态。

[para]
[begin:note]
[:en] Implementations shall avoid the use of dynamically allocated memory for
small callable objects, for example, where [`f][=']s target is an object holding
only a pointer or reference to an object and a member function pointer.
[:zh_CN] 实现最好对于小的可调用对象避免使用动态分配的内存，例如，当 [`f] 的目标
是一种仅保持一个对象指针或引用，以及一个成员函数指针的对象时。
[end:note]
[div:end]

[%@library function[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
template<class F> function(F f);
[codeblock:end]

[div:description]
[para:requires]
[:en] [`F] shall be [^:oc CopyConstructible].
[:zh_CN] [`F] 应当为 [^:oc CopyConstructible]。

[para:remarks]
[:en] This constructor template shall not participate in overload resolution
unless [`F] is Lvalue-Callable ([#func.wrap.func]) for argument types
[`ArgTypes...] and return type [`R].
[:zh_CN] 除非 [`F] 对于实参类型 [`ArgTypes...] 和返回类型 [`R] 是可左值调用的
（[#func.wrap.func]），否则这个构造函数模板不能参与重载决议。

[para:ensures]
[:en] [`!*this] if any of the following hold:
[:zh_CN] 如果符合以下任何情况则有 [`!*this]：

[list]
[item]
[:en] [`f] is a null function pointer value.
[:zh_CN] [`f] 是空函数指针值。
[item]
[:en] [`f] is a null member pointer value.
[:zh_CN] [`f] 是空成员指针值。
[item]
[:en] [`F] is an instance of the [`function] class template, and [`!f].
[:zh_CN] [`F] 是类模板 [`function] 的实例，且有 [`!f]。
[list:end]

[para]
[:en] Otherwise, [`*this] targets a copy of [`f] initialized with
[`std::move(f)].
[:zh_CN] 否则，[`*this] 的目标为以 [`std::move(f)] 初始化的一个 [`f] 的副本。

[begin:note]
[:en] Implementations should avoid the use of dynamically allocated memory for
small callable objects, for example, where [`f] is an object holding only a
pointer or reference to an object and a member function pointer.
[:zh_CN] 实现最好对于小的可调用对象避免使用动态分配的内存，例如，当 [`f] 是一种
仅保持一个对象指针或引用，以及一个成员函数指针的对象时。
[end:note]

[para:throws]
[:en] Shall not throw exceptions when [`f] is a function pointer or a
[`reference_wrapper<T>] for some [`T].
[:zh_CN] 当 [`f] 是函数指针或者某个 [`T] 的 [`reference_wrapper<T>] 时，不能抛出
任何异常。

[:en] Otherwise, may throw [`bad_alloc] or any exception thrown by [`F][=']s
copy or move constructor.
[:zh_CN] 否则，可能抛出 [`bad_alloc] 或者任何由 [`F] 的复制或移动构造函数所抛出
的异常。
[div:end]

[codeblock:declaration]
template<class F> function(F) -> function<[[redoc("=seebelow")]]>;
[codeblock:end]

[div:description]
[para:remarks]
[:en] This deduction guide participates in overload resolution only if
[`&F::operator()] is well-formed when treated as an unevaluated operand.
[:zh_CN] 仅当 [`&F::operator()] 被当做免求值操作数时是良构的时，这个推断导引才
参与重载决议。

[:en] In that case, if [`decltype(&F::operator())] is of the form
[`R(G::*)(A...)] [=cv] [`:opt &] [`:opt noexcept]
for a class type [`G], then the deduced type is [`function<R(A...)>].
[:zh_CN] 这种情况下，如果 [`decltype(&F::operator())] 的形式为（对于某个类类型
[`G]）“[`R(G::*)(A...)] [=cv] [`:opt &] [`:opt noexcept]”，则所推断的类型为
[`function<R(A...)>]。

[para]
[begin:example]
[codeblock]
void f() {
  int i{5};
  function g = [&](double) { return i; };       // [:en] deduces [`function<int(double)>] \
                                                   [:zh_CN] 推断为 [`function<int(double)>]
}
[codeblock:end]
[end:example]
[div:end]

[%@library function[!operator=]]
[%@library operator=[!function]]
[codeblock:declaration]
function& operator=(const function& f);
[codeblock:end]

[div:description]
[para:effects]
[:en] As if by [`function(f).swap(*this);]
[:zh_CN] 如同执行 [`function(f).swap(*this);]

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@library function[!operator=]]
[%@library operator=[!function]]
[codeblock:declaration]
function& operator=(function&& f);
[codeblock:end]

[div:description]
[para:effects]
[:en] Replaces the target of [`*this] with the target of [`f].
[:zh_CN] 以 [`f] 的目标替换 [`*this] 的目标。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@library function[!operator=]]
[%@library operator=[!function]]
[codeblock:declaration]
function& operator=(nullptr_t) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] If [`*this != nullptr], destroys the target of [`this].
[:zh_CN] 如果 [`*this != nullptr]，则销毁 [`this] 的目标。

[para:ensures]
[:en] [`!(*this)].
[:zh_CN] [`!(*this)]。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@library function[!operator=]]
[%@library operator=[!function]]
[codeblock:declaration]
template<class F> function& operator=(F&& f);
[codeblock:end]

[div:description]
[para:effects]
[:en] As if by: [`function(std::forward<F>(f)).swap(*this);]
[:zh_CN] 如同执行：[`function(std::forward<F>(f)).swap(*this);]

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。

[para:remarks]
[:en] This assignment operator shall not participate in overload resolution
unless [`decay_t<F>] is Lvalue-Callable ([#func.wrap.func]) for argument types
[`ArgTypes...] and return type [`R].
[:zh_CN] 除非 [`decay_t<F>] 对于实参类型 [`ArgTypes...] 和返回类型 [`R] 是可左值
调用的（[#func.wrap.func]），否则这个赋值运算符不能参与重载决议。
[div:end]

[%@library function[!operator=]]
[%@library operator=[!function]]
[codeblock:declaration]
template<class F> function& operator=(reference_wrapper<F> f) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] As if by: [`function(f).swap(*this);]
[:zh_CN] 如同执行：[`function(f).swap(*this);]

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@library function[![:en]destructor[:zh_CN]析构函数]]
[codeblock:declaration]
~function();
[codeblock:end]

[div:description]
[para:effects]
[:en] If [`*this != nullptr], destroys the target of [`this].
[:zh_CN] 如果 [`*this != nullptr]，则销毁 [`this] 的目标。
[div:end]
