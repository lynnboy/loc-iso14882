[section#optional.ref.ctor
    [:en] Constructors
    [:zh_CN] 构造函数
]

[codeblock:declaration]
template<class Args>
  constexpr explicit optional(in_place_t, Args&& args);
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en] [`is_constructible_v<T&, Args>] is [`true], and
[:zh_CN] [`is_constructible_v<T&, Args>] 为 [`true]，并且
[item]
[:en] [`reference_constructs_from_temporary_v<T&, Args>] is [`false].
[:zh_CN] [`reference_constructs_from_temporary_v<T&, Args>] 为 [`false]。
[list:end]

[para:effects]
[:en] Equivalent to: [`[*convert-ref-init-val](std::forward<Arg>(arg))].
[:zh_CN] 等价于：[`[*convert-ref-init-val](std::forward<Arg>(arg))]。

[para:ensures]
[:en] [`*this] contains a value.
[:zh_CN] [`*this] 包含值。
[div:end]

[codeblock:declaration]
template<class U>
  constexpr explicit(!is_convertible_v<U, T&>)
  optional(U&& u) noexcept(is_nothrow_constructible_v<T&, U>);
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en] [`is_same_v<remove_cvref_t<U>, optional>] is [`false],
[:zh_CN] [`is_same_v<remove_cvref_t<U>, optional>] 为 [`false]，
[item]
[:en] [`is_same_v<remove_cvref_t<U>, in_place_t>] is [`false], and
[:zh_CN] [`is_same_v<remove_cvref_t<U>, in_place_t>] 为 [`false]，并且
[item]
[:en] [`is_constructible_v<T&, U>] is [`true].
[:zh_CN] [`is_constructible_v<T&, U>] 为 [`true]。
[list:end]

[para:effects]
[:en] Equivalent to: [`[*convert-ref-init-val](std::forward<U>(u))].
[:zh_CN] 等价于：[`[*convert-ref-init-val](std::forward<U>(u))]。

[para:ensures]
[:en] [`*this] contains a value.
[:zh_CN] [`*this] 包含值。

[para:remarks]
[:en] This constructor is defined as deleted if
[:zh_CN] 如果
[codeblock]
reference_constructs_from_temporary_v<T&, U>
[codeblock:end]
[:en@~] is [`true].
[:zh_CN@~] 为 [`true]，则这个构造函数被定义为弃置的。
[div:end]

[codeblock:declaration]
template<class U>
  constexpr explicit(!is_convertible_v<U&, T&>)
  optional(optional<U>& rhs) noexcept(is_nothrow_constructible_v<T&, U&>);
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en] [`is_same_v<remove_cv_t<T>, optional<U>>] is [`false],
[:zh_CN] [`is_same_v<remove_cv_t<T>, optional<U>>] 为 [`false]，
[item]
[:en] [`is_same_v<T&, U>] is [`false], and
[:zh_CN] [`is_same_v<T&, U>] 为 [`false]，并且
[item]
[:en@~] [`is_constructible_v<T&, U&>] is [`true].
[:zh_CN@~] [`is_constructible_v<T&, U&>] 为 [`true]。
[list:end]

[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
if (rhs.has_value()) [[redoc("*>")]]convert-ref-init-val(*rhs);
[codeblock:end]

[para:remarks]
[:en] This constructor is defined as deleted if
[:zh_CN] 如果
[codeblock]
reference_constructs_from_temporary_v<T&, U&>
[codeblock:end]
[:en@~] is [`true].
[:zh_CN@~] 为 [`true]，则这个构造函数被定义为弃置的。
[div:end]

[codeblock:declaration]
template<class U>
  constexpr explicit(!is_convertible_v<const U&, T&>)
  optional(const optional<U>& rhs) noexcept(is_nothrow_constructible_v<T&, const U&>);
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en] [`is_same_v<remove_cv_t<T>, optional<U>>] is [`false],
[:zh_CN] [`is_same_v<remove_cv_t<T>, optional<U>>] 为 [`false]，
[item]
[:en] [`is_same_v<T&, U>] is [`false], and
[:zh_CN] [`is_same_v<T&, U>] 为 [`false]，并且
[item]
[:en@~] [`is_constructible_v<T&, const U&>] is [`true].
[:zh_CN@~] [`is_constructible_v<T&, const U&>] 为 [`true]。
[list:end]

[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
if (rhs.has_value()) [[redoc("*>")]]convert-ref-init-val(*rhs);
[codeblock:end]

[para:remarks]
[:en] This constructor is defined as deleted if
[:zh_CN] 如果
[codeblock]
reference_constructs_from_temporary_v<T&, const U&>
[codeblock:end]
[:en@~] is [`true].
[:zh_CN@~] 为 [`true]，则这个构造函数被定义为弃置的。
[div:end]

[codeblock:declaration]
template<class U>
  constexpr explicit(!is_convertible_v<U, T&>)
  optional(optional<U>&& rhs) noexcept(is_nothrow_constructible_v<T&, U>);
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en] [`is_same_v<remove_cv_t<T>, optional<U>>] is [`false],
[:zh_CN] [`is_same_v<remove_cv_t<T>, optional<U>>] 为 [`false]，
[item]
[:en] [`is_same_v<T&, U>] is [`false], and
[:zh_CN] [`is_same_v<T&, U>] 为 [`false]，并且
[item]
[:en@~] [`is_constructible_v<T&, U>] is [`true].
[:zh_CN@~] [`is_constructible_v<T&, U>] 为 [`true]。
[list:end]

[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
if (rhs.has_value()) [[redoc("*>")]]convert-ref-init-val(*std::move(rhs));
[codeblock:end]

[para:remarks]
[:en] This constructor is defined as deleted if
[:zh_CN] 如果
[codeblock]
reference_constructs_from_temporary_v<T&, U>
[codeblock:end]
[:en@~] is [`true].
[:zh_CN@~] 为 [`true]，则这个构造函数被定义为弃置的。
[div:end]

[codeblock:declaration]
template<class U>
  constexpr explicit(!is_convertible_v<const U, T&>)
  optional(const optional<U>&& rhs) noexcept(is_nothrow_constructible_v<T&, const U>);
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en] [`is_same_v<remove_cv_t<T>, optional<U>>] is [`false],
[:zh_CN] [`is_same_v<remove_cv_t<T>, optional<U>>] 为 [`false]，
[item]
[:en] [`is_same_v<T&, U>] is [`false], and
[:zh_CN] [`is_same_v<T&, U>] 为 [`false]，并且
[item]
[:en@~] [`is_constructible_v<T&, const U>] is [`true].
[:zh_CN@~] [`is_constructible_v<T&, const U>] 为 [`true]。
[list:end]

[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
if (rhs.has_value()) [[redoc("*>")]]convert-ref-init-val(*std::move(rhs));
[codeblock:end]

[para:remarks]
[:en] This constructor is defined as deleted if
[:zh_CN] 如果
[codeblock]
reference_constructs_from_temporary_v<T&, const U>
[codeblock:end]
[:en@~] is [`true].
[:zh_CN@~] 为 [`true]，则这个构造函数被定义为弃置的。
[div:end]
