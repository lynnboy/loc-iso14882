[section#uninitialized.move
    [`uninitialized_move]
]

[%@library uninitialized_move]
[codeblock:declaration]
template <class InputIterator, class ForwardIterator>
  ForwardIterator uninitialized_move(InputIterator first, InputIterator last,
                                     ForwardIterator result);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：

[codeblock:notation]
for (; first != last; (void)++result, ++first)
  ::new (static_cast<void*>(addressof(*result)))
    typename iterator_traits<ForwardIterator>::value_type(std::move(*first));
[codeblock:end]

[para:remarks]
[:en] If an exception is thrown, some objects in the range [=range(first,last)]
are left in a valid but unspecified state.
[:zh_CN] 如果抛出了异常，则范围 [=range(first,last)] 中的一些对象将遗留为某个
有效但未指明的状态。
[exit:description]

[%@library uninitialized_move_n]
[codeblock:declaration]
template <class InputIterator, class Size, class ForwardIterator>
  pair<InputIterator, ForwardIterator>
    uninitialized_move_n(InputIterator first, Size n, ForwardIterator result);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：

[codeblock:notation]
for (; n > 0; ++result, (void) ++first, --n)
  ::new (static_cast<void*>(addressof(*result)))
    typename iterator_traits<ForwardIterator>::value_type(std::move(*first));
return {first,result};
[codeblock:end]

[para:remarks]
[:en] If an exception is thrown, some objects in the range
[=range(first,std::next(first,n))] are left in a valid but unspecified state.
[:zh_CN] 如果抛出了异常，则范围 [=range(first,std::next(first,n))] 中的一些对象
将遗留为某个有效但未指明的状态。
[exit:description]
