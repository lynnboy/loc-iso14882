[section#func.wrap.general
    [:en] General
    [:zh_CN] 概述
]

[para]
[:en]
Subclause [#func.wrap] describes polymorphic wrapper classes that encapsulate
arbitrary callable objects.
[:zh_CN]
子条款 [#func.wrap] 描述可以封装任意可调用对象的多态包装器类。

[para]
[:en] Let [`t] be an object of a type that is a specialization of [`function],
[`copyable_function], or [`move_only_function], such that the target object [`x]
of [`t] has a type that is a specialization of [`function], [`copyable_function],
or [`move_only_function].
[:zh_CN] 令 [`t] 为 [`function]、[`copyable_function] 或 [`move_only_function]
的特例类型的对象，使得 [`t] 的目标对象 [`x] 的类型为 [`function]、
[`copyable_function] 或 [`move_only_function] 的特例。

[:en] Each argument of the invocation of [`x] evaluated as part of the
invocation of [`t] may alias an argument in the same position in the invocation
of [`t] that has the same type, even if the corresponding parameter is not of
reference type.
[:zh_CN] 作为 [`t] 的调用的一部分所求值的 [`x] 的调用的每个实参，可能为 [`t] 的
调用中相同位置并具有相同类型的实参的别名，即便其对应形参并非引用类型也是如此。

[begin:example]
[codeblock]
move_only_function<void(T)>
  f{copyable_function<void(T)>{[](T) {}}};
T t;
f(t);                               // [:en] it is unspecified how many copies of [`T] are made \
                                    [:zh_CN] 产生了多少个 [`T] 的副本是未指明的
[codeblock:end]
[end:example]

[para:recommended]
[:en] Implementations should avoid double wrapping when
constructing polymorphic wrappers from one another.
[:zh_CN] 各实现最好在从一个多态包装器构造另一个时避免产生双重包装。
