[section#optional.optional.general
    [:en] General
    [:zh_CN] 概述
]

[%@lib optional]
[%@lib@member value_type[!optional]]
[codeblock:synopsis]
namespace std {
  template<class T>
  class optional {
  public:
    using value_type = T;

    // [:en] [#optional.ctor], constructors \
    [:zh_CN] [#optional.ctor]，构造函数
    constexpr optional() noexcept;
    constexpr optional(nullopt_t) noexcept;
    constexpr optional(const optional&);
    constexpr optional(optional&&) noexcept([[redoc("[=seebelow]")]]);
    template<class... Args>
      constexpr explicit optional(in_place_t, Args&&...);
    template<class U, class... Args>
      constexpr explicit optional(in_place_t, initializer_list<U>, Args&&...);
    template<class U = T>
      constexpr explicit([[redoc("[=seebelow]")]]) optional(U&&);
    template<class U>
      constexpr explicit([[redoc("[=seebelow]")]]) optional(const optional<U>&);
    template<class U>
      constexpr explicit([[redoc("[=seebelow]")]]) optional(optional<U>&&);

    // [:en] [#optional.dtor], destructor \
    [:zh_CN] [#optional.dtor]，析构函数
    constexpr ~optional();

    // [:en] [#optional.assign], assignment \
    [:zh_CN] [#optional.assign]，赋值
    constexpr optional& operator=(nullopt_t) noexcept;
    constexpr optional& operator=(const optional&);
    constexpr optional& operator=(optional&&) noexcept([[redoc("[=seebelow]")]]);
    template<class U = T> constexpr optional& operator=(U&&);
    template<class U> constexpr optional& operator=(const optional<U>&);
    template<class U> constexpr optional& operator=(optional<U>&&);
    template<class... Args> constexpr T& emplace(Args&&...);
    template<class U, class... Args> constexpr T& emplace(initializer_list<U>, Args&&...);

    // [:en] [#optional.swap], swap \
    [:zh_CN] [#optional.swap]，交换
    constexpr void swap(optional&) noexcept([[redoc("[=seebelow]")]]);

    // [:en] [#optional.observe], observers \
    [:zh_CN] [#optional.observe]，探察函数
    constexpr const T* operator->() const noexcept;
    constexpr T* operator->() noexcept;
    constexpr const T& operator*() const & noexcept;
    constexpr T& operator*() & noexcept;
    constexpr T&& operator*() && noexcept;
    constexpr const T&& operator*() const && noexcept;
    constexpr explicit operator bool() const noexcept;
    constexpr bool has_value() const noexcept;
    constexpr const T& value() const &;
    constexpr T& value() &;
    constexpr T&& value() &&;
    constexpr const T&& value() const &&;
    template<class U> constexpr T value_or(U&&) const &;
    template<class U> constexpr T value_or(U&&) &&;

    // [:en] [#optional.monadic], monadic operations \
    [:zh_CN] [#optional.monadic]，Monad 式操作
    template<class F> constexpr auto and_then(F&& f) &;
    template<class F> constexpr auto and_then(F&& f) &&;
    template<class F> constexpr auto and_then(F&& f) const &;
    template<class F> constexpr auto and_then(F&& f) const &&;
    template<class F> constexpr auto transform(F&& f) &;
    template<class F> constexpr auto transform(F&& f) &&;
    template<class F> constexpr auto transform(F&& f) const &;
    template<class F> constexpr auto transform(F&& f) const &&;
    template<class F> constexpr optional or_else(F&& f) &&;
    template<class F> constexpr optional or_else(F&& f) const &;

    // [:en] [#optional.mod], modifiers \
    [:zh_CN] [#optional.mod]，改动函数
    constexpr void reset() noexcept;

  private:
    T *val;         // [=expos]
  };

  template<class T>
    optional(T) -> optional<T>;
}
[codeblock:end]

[para]
[:en]
Any instance of [`optional<T>] at any given time either contains a value or does
not contain a value.
[:zh_CN]
[`optional<T>] 的任何实例在任意给定时刻，或者包含一个值，或者不包含值。

[:en]
When an instance of [`optional<T>] [+contains a value[%contains a value
[![`optional]]]], it means that an object of type [`T], referred to as the
optional object[=']s [+contained value[%contained value[![`optional]]]],
is allocated within the storage of the optional object.
[:zh_CN]
当 [`optional<T>] 的一个实例[+包含值[%包含值[![`optional]]]]时，意味着一个 [`T]
类型的对象, 被分配在该可选对象的存储之内，它被称之为该可选对象所[+包含的值
[%包含的值[![`optional]]]]。

[:en]
Implementations are not permitted to use additional storage, such as dynamic
memory, to allocate its contained value.
[:zh_CN]
不允许实现利用诸如动态内存这样的其他存储来分配其所包含的值。

[:en]
The contained value shall be allocated in a region of the [`optional<T>] storage
suitably aligned for the type [`T].
[:zh_CN]
[`optional<T>] 所包含的值应当分配于其存储中为类型 [`T] 适当对齐的一个区域中。

[:en]
When an object of type [`optional<T>] is contextually converted to [`bool],
the conversion returns [`true] if the object contains a value;
otherwise the conversion returns [`false].
[:zh_CN]
当 [`optional<T>] 类型的对象按语境转换为 [`bool] 时，若对象包含值则该转换返回
[`true]，否则该转换返回 [`false]。

[para]
[:en]
Member [`val] is provided for exposition only.
[:zh_CN]
成员 [`val] 仅为阐释而提供。

[:en]
When an [`optional<T>] object contains a value, [`val] points to the contained
value.
[:zh_CN]
当 [`optional<T>] 对象包含值时，[`val] 指向所包含的值。

[para]
[:en]
[`T] shall be a type other than [=cv] [`in_place_t] or [=cv] [`nullopt_t]
that meets the [^:oc Destructible] requirements ([#:tab#cpp17.destructible]).
[:zh_CN]
[`T] 应当为除了 [=cv] [`in_place_t] 或 [=cv] [`nullopt_t] 之外的类型，并满足
[^:oc Destructible] 的规定（[#:tab#cpp17.destructible]）。
