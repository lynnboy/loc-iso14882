[section#optional.optional.general
    [:en] General
    [:zh_CN] 概述
]

[%@lib optional]
[%@lib@member value_type[!optional]]
[codeblock:synopsis]
namespace std {
  template<class T>
  class optional {
  public:
    using value_type     = T;
    using iterator       = [[redoc("[=impdef]")]];              // [:en] see [#optional.iterators] [:zh_CN] 参见 [#optional.iterators]
    using const_iterator = [[redoc("[=impdef]")]];              // [:en] see [#optional.iterators] [:zh_CN] 参见 [#optional.iterators]

    // [:en] [#optional.ctor], constructors \
    [:zh_CN] [#optional.ctor]，构造函数
    constexpr optional() noexcept;
    constexpr optional(nullopt_t) noexcept;
    constexpr optional(const optional&);
    constexpr optional(optional&&) noexcept([[redoc("[=seebelow]")]]);
    template<class... Args>
      constexpr explicit optional(in_place_t, Args&&...);
    template<class U, class... Args>
      constexpr explicit optional(in_place_t, initializer_list<U>, Args&&...);
    template<class U = remove_cv_t<T>>
      constexpr explicit([[redoc("[=seebelow]")]]) optional(U&&);
    template<class U>
      constexpr explicit([[redoc("[=seebelow]")]]) optional(const optional<U>&);
    template<class U>
      constexpr explicit([[redoc("[=seebelow]")]]) optional(optional<U>&&);

    // [:en] [#optional.dtor], destructor \
    [:zh_CN] [#optional.dtor]，析构函数
    constexpr ~optional();

    // [:en] [#optional.assign], assignment \
    [:zh_CN] [#optional.assign]，赋值
    constexpr optional& operator=(nullopt_t) noexcept;
    constexpr optional& operator=(const optional&);
    constexpr optional& operator=(optional&&) noexcept([[redoc("[=seebelow]")]]);
    template<class U = remove_cv_t<T>> constexpr optional& operator=(U&&);
    template<class U> constexpr optional& operator=(const optional<U>&);
    template<class U> constexpr optional& operator=(optional<U>&&);
    template<class... Args> constexpr T& emplace(Args&&...);
    template<class U, class... Args> constexpr T& emplace(initializer_list<U>, Args&&...);

    // [:en] [#optional.swap], swap \
    [:zh_CN] [#optional.swap]，交换
    constexpr void swap(optional&) noexcept([[redoc("[=seebelow]")]]);

    // [:en] [#optional.iterators], iterator support \
    [:zh_CN] [#optional.iterators]，迭代器支持
    constexpr iterator begin() noexcept;
    constexpr const_iterator begin() const noexcept;
    constexpr iterator end() noexcept;
    constexpr const_iterator end() const noexcept;

    // [:en] [#optional.observe], observers \
    [:zh_CN] [#optional.observe]，探察函数
    constexpr const T* operator->() const noexcept;
    constexpr T* operator->() noexcept;
    constexpr const T& operator*() const & noexcept;
    constexpr T& operator*() & noexcept;
    constexpr T&& operator*() && noexcept;
    constexpr const T&& operator*() const && noexcept;
    constexpr explicit operator bool() const noexcept;
    constexpr bool has_value() const noexcept;
    constexpr const T& value() const &;                                 // [=freestanding-deleted]
    constexpr T& value() &;                                             // [=freestanding-deleted]
    constexpr T&& value() &&;                                           // [=freestanding-deleted]
    constexpr const T&& value() const &&;                               // [=freestanding-deleted]
    template<class U = remove_cv_t<T>> constexpr T value_or(U&&) const &;
    template<class U = remove_cv_t<T>> constexpr T value_or(U&&) &&;

    // [:en] [#optional.monadic], monadic operations \
    [:zh_CN] [#optional.monadic]，Monad 式操作
    template<class F> constexpr auto and_then(F&& f) &;
    template<class F> constexpr auto and_then(F&& f) &&;
    template<class F> constexpr auto and_then(F&& f) const &;
    template<class F> constexpr auto and_then(F&& f) const &&;
    template<class F> constexpr auto transform(F&& f) &;
    template<class F> constexpr auto transform(F&& f) &&;
    template<class F> constexpr auto transform(F&& f) const &;
    template<class F> constexpr auto transform(F&& f) const &&;
    template<class F> constexpr optional or_else(F&& f) &&;
    template<class F> constexpr optional or_else(F&& f) const &;

    // [:en] [#optional.mod], modifiers \
    [:zh_CN] [#optional.mod]，改动函数
    constexpr void reset() noexcept;

  private:
    T* [[redoc("*>")]]val;         // [=expos]
  };

  template<class T>
    optional(T) -> optional<T>;
}
[codeblock:end]

[para]
[:en] Any instance of [`optional<T>] at any given time either contains a value
or does not contain a value.
[:zh_CN] [`optional<T>] 的任何实例在任意给定时刻，或者包含一个值，或者不包含值。

[:en] When an instance of [`optional<T>] [+contains a value[%contains a value
[![`optional]]]], it means that an object of type [`T], referred to as the
optional object[=']s [+contained value[%contained value[![`optional]]]],
is nested within ([#intro.object]) the optional object.
[:zh_CN] 当 [`optional<T>] 的一个实例[+包含值[%包含值[![`optional]]]]时，意味着
一个 [`T] 类型的对象, 被嵌套在该可选对象之内（[#intro.object]），它被称之为
该可选对象所[+包含的值[%包含的值[![`optional]]]]。

[:en] When an object of type [`optional<T>] is contextually converted to [`bool],
the conversion returns [`true] if the object contains a value;
otherwise the conversion returns [`false].
[:zh_CN] 当 [`optional<T>] 类型的对象按语境转换为 [`bool] 时，若对象包含值则
该转换返回 [`true]，否则该转换返回 [`false]。

[para]
[:en] When an [`optional<T>] object contains a value, member [`val] points to
the contained value.
[:zh_CN] 当 [`optional<T>] 对象包含值时，其 [`val] 成员指向所包含的值。

[para]
[:en] A type [`X] is a [+valid contained type[%valid contained type[![`optional]]]]
for [`optional] if [`X] is an lvalue reference type or a complete non-array object type,
and [`remove_cvref_t<X>] is a type other than [`in_place_t] or [`nullopt_t].
[:zh_CN] 如果类型 [`X] 是左值引用类型或完整的非数组对象类型，并且 [`remove_cvref_t<X>]
并非 [`in_place_t] 或 [`nullopt_t]，则 [`X] 是[+有效包含类型[%有效包含类型[![`optional]]]]。

[:en] If a specialization of [`optional] is instantiated with a type [`T]
that is not a valid contained type for [`optional], the program is ill-formed.
[:zh_CN] 如果某个 [`optional] 特例的实例化所针对的类型 [`T] 并非 [`optional] 的
有效包含类型，则程序非良构。

[:en] If [`T] is an object type, [`T] shall meet the [^:oc Destructible]
requirements ([#:tab#cpp17.destructible]).
[:zh_CN] 如果 [`T] 是对象类型，则 [`T] 应当满足 [^:oc Destructible] 的规定（[#:tab#cpp17.destructible]）。
