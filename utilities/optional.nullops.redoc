[section#optional.nullops
    [:en] Comparison with [`nullopt]
    [:zh_CN] 与 [`nullopt] 之间的比较
]

[%@library operator==[!optional]]
[%@library optional[!operator==]]
[codeblock:declaration]
template<class T> constexpr bool operator==(const optional<T>& x, nullopt_t) noexcept;
template<class T> constexpr bool operator==(nullopt_t, const optional<T>& x) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`!x].
[:zh_CN] [`!x]。
[exit:description]

[%@library operator!=[!optional]]
[%@library optional[!operator!=]]
[codeblock:declaration]
template<class T> constexpr bool operator!=(const optional<T>& x, nullopt_t) noexcept;
template<class T> constexpr bool operator!=(nullopt_t, const optional<T>& x) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`bool(x)].
[:zh_CN] [`bool(x)]。
[exit:description]

[%@library operator<[!optional]]
[%@library optional[!operator<]]
[codeblock:declaration]
template<class T> constexpr bool operator<(const optional<T>& x, nullopt_t) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`false].
[:zh_CN] [`false]。
[exit:description]

[%@library operator<[!optional]]
[%@library optional[!operator<]]
[codeblock:declaration]
template<class T> constexpr bool operator<(nullopt_t, const optional<T>& x) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`bool(x)].
[:zh_CN] [`bool(x)]。
[exit:description]

[%@library operator<=[!optional]]
[%@library optional[!operator<=]]
[codeblock:declaration]
template<class T> constexpr bool operator<=(const optional<T>& x, nullopt_t) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`!x].
[:zh_CN] [`!x]。
[exit:description]

[%@library operator<=[!optional]]
[%@library optional[!operator<=]]
[codeblock:declaration]
template<class T> constexpr bool operator<=(nullopt_t, const optional<T>& x) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`true].
[:zh_CN] [`true]。
[exit:description]

[%@library operator>[!optional]]
[%@library optional[!operator>]]
[codeblock:declaration]
template<class T> constexpr bool operator>(const optional<T>& x, nullopt_t) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`bool(x)].
[:zh_CN] [`bool(x)]。
[exit:description]

[%@library operator>[!optional]]
[%@library optional[!operator>]]
[codeblock:declaration]
template<class T> constexpr bool operator>(nullopt_t, const optional<T>& x) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`false].
[:zh_CN] [`false]。
[exit:description]

[%@library operator>=[!optional]]
[%@library optional[!operator>=]]
[codeblock:declaration]
template<class T> constexpr bool operator>=(const optional<T>& x, nullopt_t) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`true].
[:zh_CN] [`true]。
[exit:description]

[%@library operator>=[!optional]]
[%@library optional[!operator>=]]
[codeblock:declaration]
template<class T> constexpr bool operator>=(nullopt_t, const optional<T>& x) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`!x].
[:zh_CN] [`!x]。
[exit:description]
