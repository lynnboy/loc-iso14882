[section#variant.visit
    [:en] Visitation
    [:zh_CN] 值的探访
]

[%@library visit]
[%@library variant[!visit]]
[codeblock:declaration]
template<class Visitor, class... Variants>
  constexpr [[redoc("=seebelow")]] visit(Visitor&& vis, Variants&&... vars);
template<class R, class Visitor, class... Variants>
  constexpr R visit(Visitor&& vis, Variants&&... vars);
[codeblock:end]

[div:description]
[para]
[:en] Let [$n] be [`sizeof...(Variants)].
[:zh_CN] 令 [$n] 为 [`sizeof...(Variants)]。

[:en] Let [`m] be a pack of [$n] values of type [`size_t].
[:zh_CN] 令 [`m] 为 [$n] 个 [`size_t] 类型的值的包组。

[:en] Such a pack is called valid if
[$0 \leq [`m]_i < [`variant_size_v<remove_reference_t<Variants]_i[`>>]] for all
[$0 \leq i < n].
[:zh_CN] 对于所有 [$0 \leq i < n]，当
[$0 \leq [`m]_i < [`variant_size_v<remove_reference_t<Variants]_i[`>>]] 时称该
包组有效。

[:en] For each valid pack [`m], let [$e([`m])] denote the expression:
[:zh_CN] 对于每个有效的包组 [`m]，令 [$e([`m])] 对于第一种形式时代表如下表达式：

[codeblock]
[[redoc("^", "n>")]]INVOKE(std::forward<Visitor>(vis), get<m>(std::forward<Variants>(vars))...) // [:en] see [#func.require] \
                                                                                                   [:zh_CN] 参见 [#func.require]
[codeblock:end]

[:en@~] for the first form and
[:zh_CN@~] ，而对于第二种形式时代表如下表达式：

[codeblock]
[[redoc("^", "n>")]]INVOKE<R>(std::forward<Visitor>(vis), get<m>(std::forward<Variants>(vars))...) // [:en] see [#func.require] \
                                                                                                      [:zh_CN] 参见 [#func.require]
[codeblock:end]

[:en@~] for the second form.
[:zh_CN@~] 等。

[para:requires]
[:en] For each valid pack [`m], [$e([`m])] shall be a valid expression.
[:zh_CN] 对于每个有效的包组 [`m]，[$e([`m])] 应当为有效的表达式。

[:en] All such expressions shall be of the same type and value category;
otherwise, the program is ill-formed.
[:zh_CN] 所有这样的表达式都应当具有相同的类型和值类别；否则程序非良构。

[para:returns]
[:en] [$e([`m])], where [`m] is the pack for which [$[`m]_i] is
[`vars[$_i].index()] for all [$0 \leq i < n].
[:zh_CN] [$e([`m])]，其中的包组 [`m] 中，对于所有 [$0 \leq i < n]，[$[`m]_i] 为
[`vars[$_i].index()]。

[:en] The return type is [`decltype([$e([`m])])] for the first form.
[:zh_CN] 第一种形式的返回类型为 [`decltype([$e([`m])])] 的类型。

[para:throws]
[:en] [`bad_variant_access] if any [`variant] in [`vars] is
[`valueless_by_exception()].
[:zh_CN] 当 [`vars] 中的任何 [`variant] 为 [`valueless_by_exception()] 时抛出
[`bad_variant_access]。

[para:complexity]
[:en] For [$n \leq 1], the invocation of the callable object is implemented in
constant time, i.e., for [$n = 1], it does not depend on the number of
alternative types of [$[`Variants]_0].
[:zh_CN] 当 [$n \leq 1] 时，对可调用对象的调用操作时以常量时间实现的，亦即当
[$n = 1] 时，它并不依赖于 [$[`Variants]_0] 中的可选类型个数。

[:en] For [$n > 1], the invocation of the callable object has no complexity
requirements.
[:zh_CN] 当 [$n > 1] 时，对可调用对象的调用操作没有复杂度规定。
[div:end]
