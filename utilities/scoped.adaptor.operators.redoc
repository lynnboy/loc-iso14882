[section#scoped.adaptor.operators
    [:en] Operators
    [:zh_CN] 运算符
]

[%@library scoped_allocator_adaptor[!operator==]]
[%@library operator==[!scoped_allocator_adaptor]]
[codeblock:declaration]
template<class OuterA1, class OuterA2, class... InnerAllocs>
  bool operator==(const scoped_allocator_adaptor<OuterA1, InnerAllocs...>& a,
                  const scoped_allocator_adaptor<OuterA2, InnerAllocs...>& b) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] If [`sizeof...(InnerAllocs)] is zero,
[:zh_CN] 当 [`sizeof...(InnerAllocs)] 为零时返回

[codeblock:notation]
a.outer_allocator() == b.outer_allocator()
[codeblock:end]

[:en@~] otherwise
[:zh_CN@~] 否则返回

[codeblock:notation]
a.outer_allocator() == b.outer_allocator() && a.inner_allocator() == b.inner_allocator()
[codeblock:end]
[exit:description]

[%@library scoped_allocator_adaptor[!operator!=]]
[%@library operator!=[!scoped_allocator_adaptor]]
[codeblock:declaration]
template<class OuterA1, class OuterA2, class... InnerAllocs>
  bool operator!=(const scoped_allocator_adaptor<OuterA1, InnerAllocs...>& a,
                  const scoped_allocator_adaptor<OuterA2, InnerAllocs...>& b) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`!(a == b)].
[:zh_CN] [`!(a == b)]。
[exit:description]
