[section#variant.variant
    [:en] Class template [`variant]
    [:zh_CN] 类模板 [`variant]
[:] [%@library variant]
]

[codeblock:synopsis [!:mark SeeBelow] ]
namespace std {
  template<class... Types>
  class variant {
  public:
    // [:en] [#variant.ctor], constructors
    // [:zh_CN] [#variant.ctor]，构造函数
    constexpr variant() noexcept([[redoc:=]]SeeBelow);
    constexpr variant(const variant&);
    constexpr variant(variant&&) noexcept([[redoc:=]]SeeBelow);

    template<class T>
      constexpr variant(T&&) noexcept([[redoc:=]]SeeBelow);

    template<class T, class... Args>
      constexpr explicit variant(in_place_type_t<T>, Args&&...);
    template<class T, class U, class... Args>
      constexpr explicit variant(in_place_type_t<T>, initializer_list<U>, Args&&...);

    template<size_t I, class... Args>
      constexpr explicit variant(in_place_index_t<I>, Args&&...);
    template<size_t I, class U, class... Args>
      constexpr explicit variant(in_place_index_t<I>, initializer_list<U>, Args&&...);

    // [:en] [#variant.dtor], destructor
    // [:zh_CN] [#variant.dtor]，析构函数
    ~variant();

    // [:en] [#variant.assign], assignment
    // [:zh_CN] [#variant.assign]，赋值
    constexpr variant& operator=(const variant&);
    constexpr variant& operator=(variant&&) noexcept([[redoc:=]]SeeBelow);

    template<class T> variant& operator=(T&&) noexcept([[redoc:=]]SeeBelow);

    // [:en] [#variant.mod], modifiers
    // [:zh_CN] [#variant.mod]，改动函数
    template<class T, class... Args>
      T& emplace(Args&&...);
    template<class T, class U, class... Args>
      T& emplace(initializer_list<U>, Args&&...);
    template<size_t I, class... Args>
      variant_alternative_t<I, variant<Types...>>& emplace(Args&&...);
    template<size_t I, class U, class... Args>
      variant_alternative_t<I, variant<Types...>>& emplace(initializer_list<U>, Args&&...);

    // [:en] [#variant.status], value status
    // [:zh_CN] [#variant.status]，值的状态
    constexpr bool valueless_by_exception() const noexcept;
    constexpr size_t index() const noexcept;

    // [:en] [#variant.swap], swap
    // [:zh_CN] [#variant.swap]，swap
    void swap(variant&) noexcept([[redoc:=]]SeeBelow);
  };
}
[codeblock:end]

[para]
[:en] Any instance of [`variant] at any given time either holds a value of one
of its alternative types or holds no value.
[:zh_CN] 任何 [`variant] 的实例在任意给定时刻要么持有其候选类型之一的值，要么不
持有值。

[:en] When an instance of [`variant] holds a value of alternative type [`T], it
means that a value of type [`T], referred to as the [`variant] object[=']s
[+contained value[%contained value[![`variant]]]], is allocated within the
storage of the [`variant] object.
[:zh_CN] [`variant] 的实例持有候选类型 [`T] 的值的含义是，一个 [`T] 类型的值，
成为该 [`variant] 对象所[+包含的值[%包含的值[![`variant]]]]，被分配于该
[`variant] 对象的存储之中。

[:en] Implementations are not permitted to use additional storage, such as
dynamic memory, to allocate the contained value.
[:zh_CN] 不允许实现使用诸如动态内存这样的额外存储来分配其所包含的值。

[:en] The contained value shall be allocated in a region of the [`variant]
storage suitably aligned for all types in [`Types].
[:zh_CN] 所包含的值应当被分配于该 [`variant] 的存储中为 [`Types] 中的所有类型都
进行了适当对齐的区域中。

[para]
[:en] All types in [`Types] shall meet the [*Cpp17Destructible] requirements
([#:tab#cpp17.destructible]).
[:zh_CN] [`Types] 中的所有类型都应当满足 [*Cpp17Destructible] 的规定
（[#:tab#cpp17.destructible]）。

[para]
[:en] A program that instantiates the definition of [`variant] with no template
arguments is ill-formed.
[:zh_CN] 以空的模板实参来为 [`variant] 的定义进行实例化的程序非良构。

[include variant.ctor]

[include variant.dtor]

[include variant.assign]

[include variant.mod]

[include variant.status]

[include variant.swap]
