[section#utility.intcmp
    [:en] Integer comparison functions
    [:zh_CN] 整数比较函数
]

[%@lib cmp_equal]
[codeblock:declaration]
template<class T, class U>
  constexpr bool cmp_equal(T t, U u) noexcept;
[codeblock:end]

[div:description]
[para:mandates]
[:en] Both [`T] and [`U] are standard integer types or extended integer types
([#basic.fundamental]).
[:zh_CN] [`T] 和 [`U] 均为标准整数类型或扩展整数类型（[#basic.fundamental]）。

[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
using UT = make_unsigned_t<T>;
using UU = make_unsigned_t<U>;
if constexpr (is_signed_v<T> == is_signed_v<U>)
  return t == u;
else if constexpr (is_signed_v<T>)
  return t < 0 ? false : UT(t) == u;
else
  return u < 0 ? false : t == UU(u);
[codeblock:end]
[div:end]

[%@lib cmp_not_equal]
[codeblock:declaration]
template<class T, class U>
  constexpr bool cmp_not_equal(T t, U u) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return !cmp_equal(t, u);]
[:zh_CN] 等价于：[`return !cmp_equal(t, u);]
[div:end]

[%@lib cmp_less]
[codeblock:declaration]
template<class T, class U>
  constexpr bool cmp_less(T t, U u) noexcept;
[codeblock:end]

[div:description]
[para:mandates]
[:en] Both [`T] and [`U] are standard integer types or extended integer types
([#basic.fundamental]).
[:zh_CN] [`T] 和 [`U] 均为标准整数类型或扩展整数类型（[#basic.fundamental]）。

[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
using UT = make_unsigned_t<T>;
using UU = make_unsigned_t<U>;
if constexpr (is_signed_v<T> == is_signed_v<U>)
  return t < u;
else if constexpr (is_signed_v<T>)
  return t < 0 ? true : UT(t) < u;
else
  return u < 0 ? false : t < UU(u);
[codeblock:end]
[div:end]

[%@lib cmp_greater]
[codeblock:declaration]
template<class T, class U>
  constexpr bool cmp_greater(T t, U u) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return cmp_less(u, t);]
[:zh_CN] 等价于：[`return cmp_less(u, t);]
[div:end]

[%@lib cmp_less_equal]
[codeblock:declaration]
template<class T, class U>
  constexpr bool cmp_less_equal(T t, U u) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return !cmp_greater(t, u);]
[:zh_CN] 等价于：[`return !cmp_greater(t, u);]
[div:end]

[%@lib cmp_greater_equal]
[codeblock:declaration]
template<class T, class U>
  constexpr bool cmp_greater_equal(T t, U u) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return !cmp_less(t, u);]
[:zh_CN] 等价于：[`return !cmp_less(t, u);]
[div:end]

[%@lib in_range]
[codeblock:declaration]
template<class R, class T>
  constexpr bool in_range(T t) noexcept;
[codeblock:end]

[div:description]
[para:mandates]
[:en] Both [`T] and [`U] are standard integer types or extended integer types
([#basic.fundamental]).
[:zh_CN] [`T] 和 [`U] 均为标准整数类型或扩展整数类型（[#basic.fundamental]）。

[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return cmp_greater_equal(t, numeric_limits<R>::min()) &&
       cmp_less_equal(t, numeric_limits<R>::max());
[codeblock:end]
[div:end]

[para]
[begin:note]
[:en] These function templates cannot be used to compare [`byte], [`char],
[`char8_t], [`char16_t], [`char32_t], [`wchar_t], and [`bool].
[:zh_CN] 这些函数模板不能用于比较 [`byte]、[`char]、[`char8_t]、[`char16_t]、
[`char32_t]、[`wchar_t] 和 [`bool]。
[end:note]
