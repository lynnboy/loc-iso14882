[section#logical.operations.not
    [:en] Class template [`logical_not]
    [:zh_CN] 类模板 [`logical_not]
]

[%@library logical_not]
[codeblock:declaration]
template<class T = void> struct logical_not {
  constexpr bool operator()(const T& x) const;
};
[codeblock:end]

[%@library operator()[!logical_not]]
[%@library logical_not[!operator()]]
[codeblock:declaration]
constexpr bool operator()(const T& x) const;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`!x].
[:zh_CN] [`!x]。
[div:end]

[%@library logical_not<>]
[codeblock:declaration]
template<> struct logical_not<void> {
  template<class T> constexpr auto operator()(T&& t) const
    -> decltype(!std::forward<T>(t));

  using is_transparent = [[redoc("=unspec")]];
};
[codeblock:end]

[%@library operator()[!logical_not<>]]
[%@library logical_not<>[!operator()]]
[codeblock:declaration]
template<class T> constexpr auto operator()(T&& t) const
    -> decltype(!std::forward<T>(t));
[codeblock:end]

[div:description]
[para:returns]
[:en] [`!std::forward<T>(t)].
[:zh_CN] [`!std::forward<T>(t)]。
[div:end]
