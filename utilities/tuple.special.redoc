[section#tuple.special
    [:en] Tuple specialized algorithms
    [:zh_CN] 对元组特化的算法
]

[%@lib@member swap[!tuple]]
[codeblock:declaration]
template<class... Types>
  constexpr void swap(tuple<Types...>& x, tuple<Types...>& y) noexcept([[redoc("[=seebelow]")]]);
template<class... Types>
  constexpr void swap(const tuple<Types...>& x, const tuple<Types...>& y) noexcept([[redoc("[=seebelow]")]]);
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en] For the first overload, [`(is_swappable_v<Types> && ...)] is [`true].
[:zh_CN] 对于第一种重载，[`(is_swappable_v<Types> && ...)] 为 [`true]。
[item]
[:en] For the second overload, [`(is_swappable_v<const Types> && ...)] is [`true].
[:zh_CN] 对于第二种重载，[`(is_swappable_v<const Types> && ...)] 为 [`true]。
[list:end]

[para:effects]
[:en] As if by [`x.swap(y)].
[:zh_CN] 如同执行 [`x.swap(y)]。

[para:remarks]
[:en] The exception specification is equivalent to:
[:zh_CN] 其异常说明等价于：

[codeblock]
noexcept(x.swap(y))
[codeblock:end]
[div:end]
