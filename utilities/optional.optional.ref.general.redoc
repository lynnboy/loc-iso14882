[section#optional.optional.ref.general
    [:en] General
    [:zh_CN] 概述
]

[codeblock:synopsis]
namespace std {
  template<class T>
  class optional<T&> {
    public:
      using value_type     = T;
      using iterator       = [[redoc("[=impdef]")]];            // [:en] see [#optional.iterators] [:zh_CN] 参见 [#optional.iterators]

    public:
      // [:en] [#optional.ref.ctor], constructors \
      [:zh_CN] [#optional.ref.ctor]，构造函数
      constexpr optional() noexcept = default;
      constexpr optional(nullopt_t) noexcept : optional() {}
      constexpr optional(const optional& rhs) noexcept = default;

      template<class Arg>
        constexpr explicit optional(in_place_t, Arg&& arg);
      template<class U>
        constexpr explicit([[redoc("[=seebelow]")]]) optional(U&& u) noexcept([[redoc("[=seebelow]")]]);
      template<class U>
        constexpr explicit([[redoc("[=seebelow]")]]) optional(optional<U>& rhs) noexcept([[redoc("[=seebelow]")]]);
      template<class U>
        constexpr explicit([[redoc("[=seebelow]")]]) optional(const optional<U>& rhs) noexcept([[redoc("[=seebelow]")]]);
      template<class U>
        constexpr explicit([[redoc("[=seebelow]")]]) optional(optional<U>&& rhs) noexcept([[redoc("[=seebelow]")]]);
      template<class U>
        constexpr explicit([[redoc("[=seebelow]")]]) optional(const optional<U>&& rhs) noexcept([[redoc("[=seebelow]")]]);

      constexpr ~optional() = default;

      // [:en] [#optional.ref.assign], assignment \
      [:zh_CN] [#optional.ref.assign]，赋值
      constexpr optional& operator=(nullopt_t) noexcept;
      constexpr optional& operator=(const optional& rhs) noexcept = default;

      template<class U> constexpr T& emplace(U&& u) noexcept([[redoc("[=seebelow]")]]);

      // [:en] [#optional.ref.swap], swap \
      [:zh_CN] [#optional.ref.swap]，交换
      constexpr void swap(optional& rhs) noexcept;

      // [:en] [#optional.ref.iterators], iterator support \
      [:zh_CN] [#optional.ref.iterators]，迭代器支持
      constexpr iterator begin() const noexcept;
      constexpr iterator end() const noexcept;

      // [:en] [#optional.ref.observe], observers \
      [:zh_CN] [#optional.ref.observe]，探察函数
      constexpr T*       operator->() const noexcept;
      constexpr T&       operator*() const noexcept;
      constexpr explicit operator bool() const noexcept;
      constexpr bool     has_value() const noexcept;
      constexpr T&       value() const;                         // [=freestanding-deleted]
      template<class U = remove_cv_t<T>>
        constexpr remove_cv_t<T> value_or(U&& u) const;

      // [:en] [#optional.ref.monadic], monadic operations \
      [:zh_CN] [#optional.ref.monadic]，Monad 式操作
      template<class F> constexpr auto and_then(F&& f) const;
      template<class F> constexpr optional<invoke_result_t<F, T&>> transform(F&& f) const;
      template<class F> constexpr optional or_else(F&& f) const;

      // [:en] [#optional.ref.mod], modifiers \
      [:zh_CN] [#optional.ref.mod]，改动函数
      constexpr void reset() noexcept;

    private:
      T* [[redoc("*>")]]val = nullptr;                                         // [=expos]

      // [:en] [#optional.ref.expos], exposition only helper functions \
      [:zh_CN] [#optional.ref.expos]，仅用于阐释的辅助函数
      template<class U>
        constexpr void [[redoc("*>")]]convert-ref-init-val(U&& u);             // \expos
  };
}
[codeblock:end]

[para]
[:en] An object of [`optional<T&>] [+contains a value[%contains a value[![`optional.ref]]]]
if and only if [`[*val] != nullptr] is [`true].
[:zh_CN] 当且仅当 [`[*val] != nullptr] 为 [`true] 时，[`optional<T&>] 对象
[+包含值[%包含值[![`optional.ref]]]]。

[:en] When an [`optional<T&>] contains a value, the [+contained value
[%contained value[![`optional.ref]]]] is a reference to [`*[*val]].
[:zh_CN] 当 [`optional<T&>] 包含值时，其[+包含的值[%包含的值[![`optional.ref]]]]
是一个到 [`*[*val]] 的引用。
