[section#special.mem.concepts
    [:en] Special memory concepts
    [:zh_CN] ，专门的内存概念
]

[para]
[:en] Some algorithms in this subclause are constrained with the following
exposition-only concepts:
[:zh_CN] 本子条款中的某些算法是被以下仅用于阐释的概念所约束的：

[codeblock:declaration [!:var no-throw-input-iterator]]
template<class I>
concept [*no-throw-input-iterator] = // [:en] exposition only
                                     // [|:zh_CN] 仅用于阐释
  InputIterator<I> &&
  is_lvalue_reference_v<iter_reference_t<I>> &&
  Same<remove_cvref_t<iter_reference_t<I>>, iter_value_t<I>>;
[codeblock:end]

[enter:description]
[para]
[:en] A type [`I] models [`[*no-throw-input-iterator]] only if no exceptions are
thrown from increment, copy construction, move construction, copy assignment,
move assignment, or indirection through valid iterators.
[:zh_CN] 仅当增量，复制构造，移动构造，复制赋值，移动赋值，或者通过有效迭代器所
进行的间接等操作，都不抛出异常时，类型 [`I] 构成 [`[*no-throw-input-iterator]]。

[para]
[enter:note]
[:en] This concept allows some [`InputIterator] ([#iterator.concept.input])
operations to throw exceptions.
[:zh_CN] 这个概念允许某些 [`InputIterator]（[#iterator.concept.input]）的操作
抛出异常。
[exit:note]
[exit:description]

[codeblock:declaration [!:var no-throw-sentinel]]
template<class S, class I>
concept [*no-throw-sentinel] = Sentinel<S, I>; // [:en] exposition only
                                               // [|:zh_CN] 仅用于阐释
[codeblock:end]

[enter:description]
[para]
[:en] Types [`S] and [`I] model [`[*no-throw-sentinel]] only if no exceptions
are thrown from copy construction, move construction, copy assignment, move
assignment, or comparisons between valid values of type [`I] and [`S].
[:zh_CN] 仅当类型 [`I] 和 [`S] 的复制构造，移动构造，复制赋值，移动赋值，或者在
[`I] 和 [`S] 类型的有效值之间进行的比较等操作，都不抛出异常时，它们构成
[`[*no-throw-sentinel]]。

[para]
[enter:note]
[:en] This concept allows some [`Sentinel] ([#iterator.concept.sentinel])
operations to throw exceptions.
[:zh_CN] 这个概念允许某些 [`Sentinel]（[#iterator.concept.sentinel]）的操作抛出
异常。
[exit:note]
[exit:description]

[codeblock:declaration [!:var no-throw-input-range no-throw-input-iterator no-throw-sentinel]]
template<class R>
concept [*no-throw-input-range] = // [:en] exposition only
                                  // [|:zh_CN] 仅用于阐释
  Range<R> &&
  [*no-throw-input-iterator]<iterator_t<R>> &&
  [*no-throw-sentinel]<sentinel_t<R>, iterator_t<R>>;
[codeblock:end]

[enter:description]
[para]
[:en] A type [`R] models [`[*no-throw-input-range]] only if no exceptions are
thrown from calls to [`ranges::begin] and [`ranges::end] on an object of type
[`R].
[:zh_CN] 仅当在 [`R] 类型的对象上调用的 [`ranges::begin] 和 [`ranges::end] 不
抛出异常时，类型 [`R] 构成 [`[*no-throw-input-range]]。
[exit:description]

[codeblock:declaration [!:var no-throw-forward-iterator no-throw-input-iterator no-throw-sentinel]]
template<class I>
concept [*no-throw-forward-iterator] = // [:en] exposition only
                                       // [|:zh_CN] 仅用于阐释
  [*no-throw-input-iterator]<I> &&
  ForwardIterator<I> &&
  [*no-throw-sentinel]<I, I>;
[codeblock:end]

[enter:description]
[para]
[enter:note]
[:en] This concept allows some [`ForwardIterator] ([#iterator.concept.forward])
operations to throw exceptions.
[:zh_CN] 这个概念允许某些 ForwardIterator（[#iterator.concept.forward]）的操作
抛出异常。
[exit:note]
[exit:description]

[codeblock:declaration [!:var no-throw-forward-range no-throw-input-range no-throw-forward-iterator]]
template<class R>
concept [*no-throw-forward-range] = // [:en] exposition only
                                    // [|:zh_CN] 仅用于阐释
  [*no-throw-input-range]<R> &&
  [*no-throw-forward-iterator]<iterator_t<R>>;
[codeblock:end]
