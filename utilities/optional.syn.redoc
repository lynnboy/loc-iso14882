[section#optional
    [:en] Header [`<optional>] synopsis
    [:zh_CN] 头文件 [`<optional>] 纲要
]

[%@hdr@def optional]
[codeblock:synopsis]
#include <compare>              // [:en] see [#compare.syn] \
                                [:zh_CN] 参见 [#compare.syn]

namespace std {
  // [:en] [#optional.optional], class template [`optional] \
  [:zh_CN] [#optional.optional]，类模板 [`optional]
  template<class T>
    class optional;

  // [:en] [#optional.nullopt], no-value state indicator \
  [:zh_CN] [#optional.nullopt]，无值状态指示器
  struct nullopt_t{[[redoc("[=seebelow]")]]};
  inline constexpr nullopt_t nullopt([[redoc("[=unspec]")]]);

  // [:en] [#optional.bad.access], class [`bad_optional_access] \
  [:zh_CN] [#optional.bad.access]，类 [`bad_optional_access]
  class bad_optional_access;

  // [:en] [#optional.relops], relational operators \
  [:zh_CN] [#optional.relops]，关系运算符
  template<class T, class U>
    constexpr bool operator==(const optional<T>&, const optional<U>&);
  template<class T, class U>
    constexpr bool operator!=(const optional<T>&, const optional<U>&);
  template<class T, class U>
    constexpr bool operator<(const optional<T>&, const optional<U>&);
  template<class T, class U>
    constexpr bool operator>(const optional<T>&, const optional<U>&);
  template<class T, class U>
    constexpr bool operator<=(const optional<T>&, const optional<U>&);
  template<class T, class U>
    constexpr bool operator>=(const optional<T>&, const optional<U>&);
  template<class T, [[redoc("`:c>")]]three_way_comparable_with<T> U>
    constexpr compare_three_way_result_t<T,U>
      operator<=>(const optional<T>&, const optional<U>&);

  // [:en] [#optional.nullops], comparison with [`nullopt] \
  [:zh_CN] [#optional.nullops]，与 [`nullopt] 之间的比较
  template<class T> constexpr bool operator==(const optional<T>&, nullopt_t) noexcept;
  template<class T>
    constexpr strong_ordering operator<=>(const optional<T>&, nullopt_t) noexcept;

  // [:en] [#optional.comp.with.t], comparison with [`T] \
  [:zh_CN] [#optional.comp.with.t]，与 [`T] 之间的比较
  template<class T, class U> constexpr bool operator==(const optional<T>&, const U&);
  template<class T, class U> constexpr bool operator==(const U&, const optional<T>&);
  template<class T, class U> constexpr bool operator!=(const optional<T>&, const U&);
  template<class T, class U> constexpr bool operator!=(const U&, const optional<T>&);
  template<class T, class U> constexpr bool operator<(const optional<T>&, const U&);
  template<class T, class U> constexpr bool operator<(const U&, const optional<T>&);
  template<class T, class U> constexpr bool operator>(const optional<T>&, const U&);
  template<class T, class U> constexpr bool operator>(const U&, const optional<T>&);
  template<class T, class U> constexpr bool operator<=(const optional<T>&, const U&);
  template<class T, class U> constexpr bool operator<=(const U&, const optional<T>&);
  template<class T, class U> constexpr bool operator>=(const optional<T>&, const U&);
  template<class T, class U> constexpr bool operator>=(const U&, const optional<T>&);
  template<class T, [[redoc("`:c>")]]three_way_comparable_with<T> U>
    constexpr compare_three_way_result_t<T,U>
      operator<=>(const optional<T>&, const U&);

  // [:en] [#optional.specalg], specialized algorithms \
  [:zh_CN] [#optional.specalg]，特化的算法
  template<class T>
    constexpr void swap(optional<T>&, optional<T>&) noexcept([[redoc("[=seebelow]")]]);

  template<class T>
    constexpr optional<[[redoc("[=seebelow]")]]> make_optional(T&&);
  template<class T, class... Args>
    constexpr optional<T> make_optional(Args&&... args);
  template<class T, class U, class... Args>
    constexpr optional<T> make_optional(initializer_list<U> il, Args&&... args);

  // [:en] [#optional.hash], hash support \
  [:zh_CN] [#optional.hash]，散列支持
  template<class T> struct hash;
  template<class T> struct hash<optional<T>>;
}
[codeblock:end]
