[section#func.bind.place
    [:en] Placeholders
    [:zh_CN] 占位符
]

[%@library placeholders]
[%@library _1 [@1]]
[codeblock:synopsis [!:mark SeeBelow] ]
namespace std::placeholders {
  // [:en] M is the [%@impldef number of placeholders for bind expressions] implementation-defined number of placeholders
  // [|:zh_CN] M 为[%@impldef bind 表达式中的占位符的数量]由实现定义的占位符的数量
  [=SeeBelow] _1;
  [=SeeBelow] _2;
              .
              .
              .
  [=SeeBelow] _M;
}
[codeblock:end]

[para]
[:en]
All placeholder types shall be [`DefaultConstructible] and [`CopyConstructible],
and their default constructors and copy/move constructors shall not throw
exceptions.
[:zh_CN]
所有占位符类型均应为 [`DefaultConstructible] 和 [`CopyConstructible]，并且它们的
默认构造函数和复制/移动构造函数不能抛出任何异常。

[:en]
It is [%@impldef assignability of placeholder objects] implementation-defined
whether placeholder types are [`CopyAssignable].
[:zh_CN]
占位符类型是否为 [`CopyAssignable] 是[%@impldef 占位符对象的可赋值性]由实现定义
的。

[:en]
[`CopyAssignable] placeholders[='] copy assignment operators shall not throw
exceptions.
[:zh_CN]
[`CopyAssignable] 占位符的复制赋值运算符不能抛出任何异常。

[para]
[:en] Placeholders should be defined as:
[:zh_CN] 占位符应当定义如下：

[codeblock:notation [!:mark UnSpec] ]
inline constexpr [=UnSpec] _1{};
[codeblock:end]

[:en] If they are not, they shall be declared as:
[:zh_CN] 如果不是这样，则应当将它们声明为：

[codeblock:notation [!:mark UnSpec] ]
extern [=UnSpec] _1;
[codeblock:end]
