[section#func.bind.place
    [:en] Placeholders
    [:zh_CN] 占位符
]

[%@library placeholders]
[%@library _1 [@1]]
[codeblock:synopsis [!:mark SeeBelow] ]
namespace std::placeholders {
  // [:en] M is the [%@impldef number of placeholders for bind expressions] implementation-defined number of placeholders \
     [:zh_CN] M 为[%@impldef bind 表达式中的占位符的数量]由实现定义的占位符的数量
  [=SeeBelow] _1;
  [=SeeBelow] _2;
              .
              .
              .
  [=SeeBelow] _M;
}
[codeblock:end]

[para]
[:en]
All placeholder types meet [*Cpp17DefaultConstructible] and
[*Cpp17CopyConstructible] requirements, and their default constructors and
copy/move constructors are constexpr functions that do not throw exceptions.
[:zh_CN]
所有占位符类型均满足 [*Cpp17DefaultConstructible] 和 [*Cpp17CopyConstructible]
的规定，并且它们的默认构造函数和复制/移动构造函数均为不抛出任何异常的 constexpr
函数。

[:en]
It is [%@impldef assignability of placeholder objects] implementation-defined
whether placeholder types meet the [*Cpp17CopyAssignable] requirements, but if
so, their copy assignment operators are constexpr functions that do not throw
exceptions.
[:zh_CN]
占位符类型是否满足 [*Cpp17CopyAssignable] 的规定是[%@impldef 占位符对象的
可赋值性]由实现定义的，但当如此时，它们的复制赋值运算符均为不抛出任何异常的
constexpr 函数。

[para]
[:en] Placeholders should be defined as:
[:zh_CN] 占位符应当定义如下：

[codeblock:notation [!:mark UnSpec] ]
inline constexpr [=UnSpec] _1{};
[codeblock:end]

[:en] If they are not, they shall be declared as:
[:zh_CN] 如果不是这样，则应当将它们声明为：

[codeblock:notation [!:mark UnSpec] ]
extern [=UnSpec] _1;
[codeblock:end]
