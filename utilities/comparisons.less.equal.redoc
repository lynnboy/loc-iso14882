[section#comparisons.less.equal
    [:en] Class template [`less_equal]
    [:zh_CN] 类模板 [`less_equal]
]

[%@library less_equal]
[codeblock:declaration]
template<class T = void> struct less_equal {
  constexpr bool operator()(const T& x, const T& y) const;
};
[codeblock:end]

[%@library operator()[!less_equal]]
[%@library less_equal[!operator()]]
[codeblock:declaration]
constexpr bool operator()(const T& x, const T& y) const;
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`x <= y].
[:zh_CN] [`x <= y]。
[end:description]

[%@library less_equal<>]
[codeblock:declaration [!:mark UnSpec] ]
template<> struct less_equal<void> {
  template<class T, class U> constexpr auto operator()(T&& t, U&& u) const
    -> decltype(std::forward<T>(t) <= std::forward<U>(u));

  using is_transparent = [=UnSpec];
};
[codeblock:end]

[%@library operator()[!less_equal<>]]
[%@library less_equal<>[!operator()]]
[codeblock:declaration]
template<class T, class U> constexpr auto operator()(T&& t, U&& u) const
    -> decltype(std::forward<T>(t) <= std::forward<U>(u));
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`std::forward<T>(t) <= std::forward<U>(u)].
[:zh_CN] [`std::forward<T>(t) <= std::forward<U>(u)]。
[end:description]
