[section#out.ptr.t
    [:en] Class template [`out_ptr_t]
    [:zh_CN] 类模板 [`out_ptr_t]
]

[para]
[:en]
[`out_ptr_t] is a class template used to adapt types such as smart pointers
([#smartptr]) for functions that use output pointer parameters.
[:zh_CN]
[`out_ptr_t] 是一种用于为诸如智能指针（[#smartptr]）之类的类型进行适配的类模板，
用于使用输出指针形参的函数。

[para]
[begin:example]
[codeblock]
#include <memory>
#include <cstdio>

int fopen_s(std::FILE** f, const char* name, const char* mode);

struct fclose_deleter {
  void operator()(std::FILE* f) const noexcept {
    std::fclose(f);
  }
};

int main(int, char*[]) {
  constexpr const char* file_name = "ow.o";
  std::unique_ptr<std::FILE, fclose_deleter> file_ptr;
  int err = fopen_s(std::out_ptr<std::FILE*>(file_ptr), file_name, "r+b");
  if (err != 0)
    return 1;
  // [:en] [`*file_ptr] is valid \
  [:zh_CN] [`*file_ptr] 有效
  return 0;
}
[codeblock:end]

[:en]
[`unique_ptr] can be used with [`out_ptr] to be passed into an output
pointer-style function, without needing to hold onto an intermediate pointer
value and manually delete it on error or failure.
[:zh_CN]
[`unique_ptr] 可以和 [`out_ptr] 一起使用来传递给使用输出指针的函数，而无需持有
一个中间指针值而在发生错误或失败时手工删除它。
[end:example]

[%@lib out_ptr_t]
[codeblock:synopsis]
namespace std {
  template<class Smart, class Pointer, class... Args>
  class out_ptr_t {
  public:
    explicit out_ptr_t(Smart&, Args...);
    out_ptr_t(const out_ptr_t&) = delete;

    ~out_ptr_t();

    operator Pointer*() const noexcept;
    operator void**() const noexcept;

  private:
    Smart& s;                   // [=expos]
    tuple<Args...> a;           // [=expos]
    Pointer p;                  // [=expos]
  };
}
[codeblock:end]

[para]
[:en]
[`Pointer] shall meet the [^:oc NullablePointer] requirements.
[:zh_CN]
[`Pointer] 应当满足 [^:oc NullablePointer] 的规定。

[:en]
If [`Smart] is a specialization of [`shared_ptr] and [`sizeof...(Args) == 0],
the program is ill-formed.
[:zh_CN]
若 [`Smart] 是 [`shared_ptr] 的特例且 [`sizeof...(Args) == 0]，则程序非良构。

[begin:note]
[:en]
It is typically a user error to reset a [`shared_ptr] without specifying a
deleter, as [`shared_ptr] will replace a custom deleter upon usage of [`reset],
as specified in [#util.smartptr.shared.mod].
[:zh_CN]
重置 [`shared_ptr] 但不指定删除器是一种常见的用户错误，因为 [`shared_ptr] 会在
使用 [`reset] 时替换掉自定义删除器，如 [#util.smartptr.shared.mod] 中的说明。
[end:note]

[para]
[:en]
Program-defined specializations of [`out_ptr_t] that depend on at least 
program-defined type need not meet the requirements for the primary template.
[:zh_CN]
依赖于至少一个程序定义类型的程序定义的 [`out_ptr_t] 的特化式，不必满足针对主模板
的规定。

[para]
[:en]
Evaluations of the conversion functions on the same object may conflict
([#intro.races]).
[:zh_CN]
在相同对象上的转换函数求值可能互相冲突（[#intro.races]）。

[%@lib@ctor out_ptr_t]
[codeblock:declaration]
explicit out_ptr_t(Smart& smart, Args... args);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [`s] with [`smart], [`a] with [`std::forward<Args>(args)...],
and value-initializes [`p].
[:zh_CN] 以 [`smart] 初始化 [`s]，以 [`std::forward<Args>(args)...] 初始化 [`a]，
并值初始化 [`p]。

[para]
[begin:note]
[:en]
The constructor is not [`noexcept] to allow for a variety of non-terminating and
safe implementation strategies.
[:zh_CN]
构造函数并非 [`noexcept]，以允许多种不终止的以及安全的实现策略。

[:en]
For example, an implementation can allocate a [`shared_ptr][=']s internal node
in the constructor and let implementation-defined exceptions escape safely.
[:zh_CN]
例如，实现可以在构造函数中分配 [`shared_ptr] 的内部存储，并让实现定义的异常可以
安全逃逸。

[:en]
The destructor can then move the allocated control block in directly and
avoid any other exceptions.
[:zh_CN]
析构函数可以之后直接将分配的控制块移动进来而避免任何其他的异常。
[end:note]
[div:end]

[%@lib@dtor out_ptr_t]
[codeblock:declaration]
~out_ptr_t();
[codeblock:end]

[div:description]
[para]
[:en] Let [`SP] be [`[*POINTER_OF_OR](Smart, Pointer)] ([#memory.general]).
[:zh_CN] 令 [`SP] 为 [`[*POINTER_OF_OR](Smart, Pointer)]（[#memory.general]）。

[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：

[list]
[item]
[:zh_CN] 如果表达式 [`s.reset(static_cast<SP>(p), std::forward<Args>(args)...)]
良构，则为
[codeblock]
if (p) {
  apply([&](auto&&... args) {
    s.reset(static_cast<SP>(p), std::forward<Args>(args)...); }, std::move(a));
}
[codeblock:end]
[:en] if the expression
[`s.reset(static_cast<SP>(p), std::forward<Args>(args)...)] is well-formed;

[item]
[:en] otherwise,
[:zh_CN] 否则，如果 [`is_constructible_v<Smart, SP, Args...>] 为 [`true]，则为
[codeblock]
if (p) {
  apply([&](auto&&... args) {
    s = Smart(static_cast<SP>(p), std::forward<Args>(args)...); }, std::move(a));
}
[codeblock:end]
[:en] if [`is_constructible_v<Smart, SP, Args...>] is [`true];

[item]
[:en] otherwise, the program is ill-formed.
[:zh_CN] 否则，程序非良构。
[list:end]
[div:end]

[codeblock:declaration]
operator Pointer*() const noexcept;
[codeblock:end]

[div:description]
[para:expects]
[:en] [`operator void**()] has not been called on [`*this].
[:zh_CN] 尚未在 [`*this] 上调用 [`operator void**()]。

[para:returns]
[:en] [`addressof(const_cast<Pointer&>(p))].
[:zh_CN] [`addressof(const_cast<Pointer&>(p))]。
[div:end]

[codeblock:declaration]
operator void**() const noexcept;
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`is_same_v<Pointer, void*>] is [`false].
[:zh_CN] [`is_same_v<Pointer, void*>] 为 [`false]。

[para:mandates]
[:en] [`is_pointer_v<Pointer>] is [`true].
[:zh_CN] [`is_point_v<Pointer>] 为 [`true]。

[para:expects]
[:en] [`operator Pointer*()] has not been called on [`*this].
[:zh_CN] 尚未在 [`*this] 上调用 [`operator Pointer*()]。

[para:returns]
[:en] A pointer value [`v] such that:
[:zh_CN] 使如下各项成立的指针值 [`v]：
[list]
[item]
[:en@~] the initial value [`*v] is equivalent to [`static_cast<void*>(p)] and
[:zh_CN@~] [`*v] 的初始值等价于 [`static_cast<void*>(p)]，并且
[item]
[:en@~] any modification of [`*v] that is not followed by a subsequent
modification of [`*this] affects the value of [`p] during the destruction of
[`*this], such that [`static_cast<void*>(p) == *v].
[:zh_CN@~] 任何对 [`*v] 的改动，若其后未跟着后续对 [`*this] 的改动，则会影响
[`*this] 的销毁过程中的 [`p] 的值，如 [`static_cast<void*>(p) == *v]。
[list:end]

[para:remarks]
[:en] Accessing [`*v] outside the lifetime of [`*this] has undefined behavior.
[:zh_CN] 在 [`*this] 的生存期之外访问 [`*v] 是未定义行为。

[para]
[begin:note]
[:en] [`reinterpret_cast<void**>(static_cast<Pointer*>(*this))] can be a viable
implementation strategy.
[:zh_CN] [`reinterpret_cast<void**>(static_cast<Pointer*>(*this))] 可以是一种
可行的实现策略。
[end:note]
[div:end]
