[section#comparisons.greater.equal
    [:en] Class template [`greater_equal]
    [:zh_CN] 类模板 [`greater_equal]
]

[%@lib greater_equal]
[codeblock:declaration]
template<class T = void> struct greater_equal {
  constexpr bool operator()(const T& x, const T& y) const;
};
[codeblock:end]

[%@lib@member operator()[!greater_equal]]
[codeblock:declaration]
constexpr bool operator()(const T& x, const T& y) const;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`x >= y].
[:zh_CN] [`x >= y]。
[div:end]

[%@lib greater_equal<>]
[codeblock:declaration]
template<> struct greater_equal<void> {
  template<class T, class U> constexpr auto operator()(T&& t, U&& u) const
    -> decltype(std::forward<T>(t) >= std::forward<U>(u));

  using is_transparent = [[redoc("=unspec")]];
};
[codeblock:end]

[%@lib@member operator()[!greater_equal<>]]
[codeblock:declaration]
template<class T, class U> constexpr auto operator()(T&& t, U&& u) const
    -> decltype(std::forward<T>(t) >= std::forward<U>(u));
[codeblock:end]

[div:description]
[para:returns]
[:en] [`std::forward<T>(t) >= std::forward<U>(u)].
[:zh_CN] [`std::forward<T>(t) >= std::forward<U>(u)]。
[div:end]
