[section#func.wrap.ref.deduct
    [:en] Deduction guides
    [:zh_CN] 推断导引
]

[codeblock:declaration]
template<class F>
  function_ref(F*) -> function_ref<F>;
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`is_function_v<F>] is [`true].
[:zh_CN] [`is_function_v<F>] 为 [`true]。
[div:end]

[codeblock:declaration]
template<auto f>
  function_ref(nontype_t<f>) -> function_ref<[[redoc("[=seebelow]")]]>;
[codeblock:end]

[div:description]
[para]
[:en] Let [`F] be [`remove_pointer_t<decltype(f)>].
[:zh_CN] 令 [`F] 为 [`remove_pointer_t<decltype(f)>]。

[para:constraints]
[:en] [`is_function_v<F>] is [`true].
[:zh_CN] [`is_function_v<F>] 为 [`true]。

[para:remarks]
[:en] The deduced type is [`function_ref<F>].
[:zh_CN] 推断类型为 [`function_ref<F>]。
[div:end]

[codeblock:declaration]
template<auto f, class T>
  function_ref(nontype_t<f>, T&&) -> function_ref<[[redoc("[=seebelow]")]]>;
[codeblock:end]

[div:description]
[para]
[:en] Let [`F] be [`decltype(f)].
[:zh_CN] 令 [`F] 为 [`decltype(f)]。

[para:constraints]
[list]
[item]
[:en] [`F] is of the form [`R(G::*)(A...) [=cv] [`:opt &] noexcept(E)] for a
type [`G], or
[:zh_CN] 对于类型 [`G]，[`F] 的形式为 [`R(G::*)(A...) [=cv] [`:opt &] noexcept(E)]，
或者
[item]
[:en] [`F] is of the form [`M G::*] for a type [`G] and an object type [`M], in
which case let [`R] be [`invoke_result_t<F, T&>], [`A...] be an empty pack, and
[`E] be [`false], or
[:zh_CN] 对于类型 [`G] 和对象类型 [`M]，[`F] 的形式为 [`M G::*]，这种情况下，令
[`R] 为 [`invoke_result_t<F, T&>]，令 [`A...] 为空包组，并令 [`E] 为 [`false]，
或者
[item]
[:en] [`F] is of the form [`R(*)(G, A...) noexcept(E)] for a type [`G].
[:zh_CN] 对于类型 [`G]，[`F] 的形式为 [`R(*)(G, A...) noexcept(E)]。

[para:remarks]
[:en] The deduced type is [`function_ref<R(A...) noexcept(E)>].
[:zh_CN] 推断类型为 [`function_ref<R(A...) noexcept(E)>]。
[div:end]
