[section#optional.optional
    [:en] Class template [`optional]
    [:zh_CN] 类模板 [`optional]
]

[%@library optional]
[codeblock:synopsis [!:mark SeeBelow EXPLICIT] ]
template<class T>
  class optional {
  public:
    using value_type = T;

    // [:en] [#optional.ctor], constructors
    // [|:zh_CN] [#optional.ctor]，构造函数
    constexpr optional() noexcept;
    constexpr optional(nullopt_t) noexcept;
    constexpr optional(const optional&);
    constexpr optional(optional&&) noexcept([=SeeBelow]);
    template<class... Args>
      constexpr explicit optional(in_place_t, Args &&...);
    template<class U, class... Args>
      constexpr explicit optional(in_place_t, initializer_list<U>, Args &&...);
    template<class U = T>
      [=EXPLICIT] constexpr optional(U&&);
    template<class U>
      [=EXPLICIT] optional(const optional<U>&);
    template<class U>
      [=EXPLICIT] optional(optional<U> &&);

    // [:en] [#optional.dtor], destructor
    // [|:zh_CN] [#optional.dtor]，析构函数
    ~optional();

    // [:en] [#optional.assign], assignment
    // [|:zh_CN] [#optional.assign]，赋值
    optional& operator=(nullopt_t) noexcept;
    optional& operator=(const optional&);
    optional& operator=(optional&&) noexcept([=SeeBelow]);
    template<class U = T> optional& operator=(U&&);
    template<class U> optional& operator=(const optional<U>&);
    template<class U> optional& operator=(optional<U>&&);
    template<class... Args> T& emplace(Args&&...);
    template<class U, class... Args> T& emplace(initializer_list<U>, Args&&...);

    // [:en] [#optional.swap], swap
    // [|:zh_CN] [#optional.swap]，swap
    void swap(optional&) noexcept([=SeeBelow]);

    // [:en] [#optional.observe], observers
    // [|:zh_CN] [#optional.observe]，探察函数
    constexpr const T* operator->() const;
    constexpr T* operator->();
    constexpr const T& operator*() const&;
    constexpr T& operator*() &;
    constexpr T&& operator*() &&;
    constexpr const T&& operator*() const&&;
    constexpr explicit operator bool() const noexcept;
    constexpr bool has_value() const noexcept;
    constexpr const T& value() const&;
    constexpr T& value() &;
    constexpr T&& value() &&;
    constexpr const T&& value() const&&;
    template<class U> constexpr T value_or(U&&) const&;
    template<class U> constexpr T value_or(U&&) &&;

    // [:en] [#optional.mod], modifiers
    // [|:zh_CN] [#optional.mod]，改动函数
    void reset() noexcept;

  private:
    T *val; // [=Expos]
  };

template<class T> optional(T) -> optional<T>;
[codeblock:end]

[para]
[:en]
Any instance of [`optional<T>] at any given time either contains a value or does
not contain a value.
[:zh_CN]
任何 [`optional<T>] 的实例在任意给定时刻要么包含一个值要么不包含值。

[:en]
When an instance of [`optional<T>] [+contains a value [%contains a value
[![`optional]]]], it means that an object of type [`T], referred to as the
optional object[=']s [+contained value [%contained value[![`optional]]]],
is allocated within the storage of the optional object.
[:zh_CN]
[`optional<T>] 的实例[+包含值[%包含值[![`optional]]]]的含义是，一个 [`T] 类型的
对象，称为该可选对象的[+所包含的值[%所包含的值[![`optional]]]]，被分配于该可选
对象的存储之中。

[:en]
Implementations are not permitted to use additional storage, such as dynamic
memory, to allocate its contained value.
[:zh_CN]
不允许实现使用诸如动态内存这样的额外存储来分配其所包含的值。

[:en]
The contained value shall be allocated in a region of the [`optional<T>] storage
suitably aligned for the type [`T].
[:zh_CN]
所包含的值应当被分配于该 [`optional<T>] 的存储中为 [`T] 进行了适当对齐的区域中。

[:en]
When an object of type [`optional<T>] is contextually converted to [`bool], the
conversion returns [`true] if the object contains a value; otherwise the
conversion returns [`false].
[:zh_CN]
若 [`optional<T>] 类型的对象被按语境转换为 [`bool]，则当这个对象包含值时该转换
返回 [`true]；否则该转换返回 [`false]。

[para]
[:en]
Member [`val] is provided for exposition only.
[:zh_CN]
成员 [`val] 仅用于解释。

[:en]
When an [`optional<T>] object contains a value, [`val] points to the contained
value.
[:zh_CN]
当一个 [`optional<T>] 对象包含值时，[`val] 指向其所包含的值。

[para]
[:en]
[`T] shall be an object type and shall satisfy the requirements of
[`Destructible] (Table [#tab:destructible]).
[:zh_CN]
[`T] 应当为对象类型，且应满足 [`Destructible] 的规定（表 [#tab:destructible]）。

[include optional.ctor]

[include optional.dtor]

[include optional.assign]

[include optional.swap]

[include optional.observe]

[include optional.mod]
