[section#any.modifiers
    [:en] Modifiers
    [:zh_CN] 改动函数
]

[%@library emplace[!any]]
[%@library any[!emplace]]
[codeblock:declaration]
template<class T, class... Args>
  decay_t<T>& emplace(Args&&... args);
[codeblock:end]

[enter:description]
[para]
[:en] Let [`VT] be [`decay_t<T>].
[:zh_CN] 令 [`VT] 为 [`decay_t<T>]。

[para:requires]
[:en] [`VT] shall satisfy the [*Cpp17CopyConstructible] requirements.
[:zh_CN] [`VT] 应当符合 [*Cpp17CopyConstructible] 的规定。

[para:effects]
[:en] Calls [`reset()].
[:zh_CN] 调用 [`reset()]。

[:en] Then initializes the contained value as if direct-non-list-initializing
an object of type [`VT] with the arguments [`std::forward<Args>(args)...].
[:zh_CN] 然后如同以实参 [`std::forward<Args>(args)...] 对 [`VT] 类型的对象进行
直接非列表初始化一样初始化其所包含的值。

[para:ensures]
[:en] [`*this] contains a value.
[:zh_CN] [`*this] 包含值。

[para:returns]
[:en] A reference to the new contained value.
[:zh_CN] 指代新包含的值的引用。

[para:throws]
[:en] Any exception thrown by the selected constructor of [`VT].
[:zh_CN] 由所选择的 [`VT] 的构造函数所抛出的任何异常。

[para:remarks]
[:en] If an exception is thrown during the call to [`VT][=']s constructor,
[`*this] does not contain a value, and any previously contained value has been
destroyed.
[:zh_CN] 若在调用 [`VT] 的构造函数的过程中抛出了异常，则 [`*this] 不包含值，而
之前所包含的任何值则已被销毁。

[:en] This function shall not participate in overload resolution unless
[`is_copy_constructible_v<VT>] is [`true] and [`is_constructible_v<VT, Args...>]
is [`true].
[:zh_CN] 除非 [`is_copy_constructible_v<VT>] 为 [`true] 并且
[`is_constructible_v<VT, Args...>] 为 [`true]，否则这个函数不能参与重载决议。
[exit:description]

[%@library emplace[!any]]
[%@library any[!emplace]]
[codeblock:declaration]
template<class T, class U, class... Args>
  decay_t<T>& emplace(initializer_list<U> il, Args&&... args);
[codeblock:end]

[enter:description]
[para]
[:en] Let [`VT] be [`decay_t<T>].
[:zh_CN] 令 [`VT] 为 [`decay_t<T>]。

[para:requires]
[:en] [`VT] shall satisfy the [*Cpp17CopyConstructible] requirements.
[:zh_CN] [`VT] 应当符合 [*Cpp17CopyConstructible] 的规定。

[para:effects]
[:en] Calls [`reset()].
[:zh_CN] 调用 [`reset()]。

[:en] Then initializes the contained value as if direct-non-list-initializing
an object of type [`VT] with the arguments [`il, std::forward<Args>(args)...].
[:zh_CN] 然后如同以实参 [`il, std::forward<Args>(args)...] 对 [`VT] 类型的对象
进行直接非列表初始化一样初始化其所包含的值。

[para:ensures]
[:en] [`*this] contains a value.
[:zh_CN] [`*this] 包含值。

[para:returns]
[:en] A reference to the new contained value.
[:zh_CN] 指代新包含的值的引用。

[para:throws]
[:en] Any exception thrown by the selected constructor of [`VT].
[:zh_CN] 由所选择的 [`VT] 的构造函数所抛出的任何异常。

[para:remarks]
[:en] If an exception is thrown during the call to [`VT][=']s constructor,
[`*this] does not contain a value, and any previously contained value has been
destroyed.
[:zh_CN] 若在调用 [`VT] 的构造函数的过程中抛出了异常，则 [`*this] 不包含值，而
之前所包含的任何值则已被销毁。

[:en] The function shall not participate in overload resolution unless
[`is_copy_constructible_v<VT>] is [`true] and
[`is_constructible_v<VT, initializer_list<U>&, Args...>] is [`true].
[:zh_CN] 除非 [`is_copy_constructible_v<VT>] 为 [`true] 并且
[`is_constructible_v<VT, initializer_list<U>&, Args...>] 为 [`true]，否则这个
函数不能参与重载决议。
[exit:description]

[%@library reset[!any]]
[%@library any[!reset]]
[codeblock:declaration]
void reset() noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en] If [`has_value()] is [`true], destroys the contained value.
[:zh_CN] 若 [`has_value()] 为 [`true]，则销毁所包含的值。

[para:ensures]
[:en] [`has_value()] is [`false].
[:zh_CN] [`has_value()] 为 [`false]。
[exit:description]

[%@library swap[!any]]
[%@library any[!swap]]
[codeblock:declaration]
void swap(any& rhs) noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Exchanges the states of [`*this] and [`rhs].
[:zh_CN] 互换 [`*this] 和 [`rhs] 的状态。
[exit:description]
