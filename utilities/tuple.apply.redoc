[section#tuple.apply
    [:en] Calling a function with a [`tuple] of arguments
    [:zh_CN] 以实参的 [`tuple] 进行函数调用
]

[%@library apply]
[codeblock:declaration]
template<class F, class Tuple>
  constexpr decltype(auto) apply(F&& f, Tuple&& t);
[codeblock:end]

[begin:description]
[para:effects]
[:en] Given the exposition-only function:
[:zh_CN] 给定仅用于解释的函数：

[codeblock [!:mark INVOKE apply-impl] ]
template<class F, class Tuple, size_t... I>
constexpr decltype(auto) [*apply-impl](F&& f, Tuple&& t, index_sequence<I...>) {
                                                                        // [=Expos]
  return [=INVOKE](std::forward<F>(f), std::get<I>(std::forward<Tuple>(t))...);  // [:en] see [#func.require] \
                                                                                    [:zh_CN] 参见 [#func.require]
}
[codeblock:end]

[:en] Equivalent to:
[:zh_CN] 等价于：

[codeblock:notation [!:mark apply-impl] ]
return [*apply-impl](std::forward<F>(f), std::forward<Tuple>(t),
                  make_index_sequence<tuple_size_v<remove_reference_t<Tuple>>>{});
[codeblock:end]
[end:description]

[%@library make_from_tuple]
[codeblock:declaration]
template<class T, class Tuple>
  constexpr T make_from_tuple(Tuple&& t);
[codeblock:end]

[begin:description]
[para:effects]
[:en] Given the exposition-only function:
[:zh_CN] 给定仅用于解释的函数：

[codeblock:notation [!:mark make-from-tuple-impl] ]
template<class T, class Tuple, size_t... I>
constexpr T [*make-from-tuple-impl](Tuple&& t, index_sequence<I...>) {     // [=Expos]
  return T(get<I>(std::forward<Tuple>(t))...);
}
[codeblock:end]

[:en] Equivalent to:
[:zh_CN] 等价于：

[codeblock:notation [!:mark make-from-tuple-impl] ]
return [*make-from-tuple-impl]<T>(
          forward<Tuple>(t),
          make_index_sequence<tuple_size_v<remove_reference_t<Tuple>>>{});
[codeblock:end]

[begin:note]
[:en] The type of [`T] must be supplied as an explicit template parameter,
as it cannot be deduced from the argument list.
[:zh_CN] [`T] 的类型必须以明确的模板形参的形式提供，因为它无法从实参列表中进行
推断。
[end:note]
[end:description]
