[section#tuple.apply
    [:en] Calling a function with a [`tuple] of arguments
    [:zh_CN] 以实参的 [`tuple] 进行函数调用
]

[%@lib apply]
[codeblock:declaration]
template<class F, [[redoc("*:c>")]]tuple-like Tuple>
  constexpr apply_result_t<F, Tuple> apply(F&& f, Tuple&& t)
    noexcept(is_nothrow_applicable_v<F, Tuple>);
[codeblock:end]

[div:description]
[para:effects]
[:en] Given the exposition-only function template:
[:zh_CN] 给定仅用于阐释的函数模板：

[codeblock]
namespace std {
  template<class F, [[redoc("*:c>")]]tuple-like Tuple, size_t... I>
  constexpr decltype(auto) [[redoc("^>")]]apply-impl(F&& f, Tuple&& t, index_sequence<I...>) {
                                                                        // [=expos]
    return [[redoc("^>")]]INVOKE(std::forward<F>(f), get<I>(std::forward<Tuple>(t))...);     // [:en] see [#func.require] \
                                                                                             [:zh_CN] 参见 [#func.require]
  }
}
[codeblock:end]

[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return [[redoc("^>")]]apply-impl(std::forward<F>(f), std::forward<Tuple>(t),
                  make_index_sequence<tuple_size_v<remove_reference_t<Tuple>>>{});
[codeblock:end]
[div:end]

[%@lib make_from_tuple]
[codeblock:declaration]
template<class T, [[redoc("*:c>")]]tuple-like Tuple>
  constexpr T make_from_tuple(Tuple&& t);
[codeblock:end]

[div:description]
[para:mandates]
[:en] If [`tuple_size_v<remove_reference_t<Tuple>>] is 1, then
[`reference_constructs_from_temporary_v<T, decltype(get<0>(declval<Tuple>()))]
is [`false].
[:zh_CN] 若 [`tuple_size_v<remove_reference_t<Tuple>>] 为 1，则
[`reference_constructs_from_temporary_v<T, decltype(get<0>(declval<Tuple>()))]
为 [`false]。

[para:effects]
[:en] Given the exposition-only function template:
[:zh_CN] 给定仅用于阐释的函数模板：
[codeblock]
namespace std {
  template<class T, [[redoc("*:c>")]]tuple-like Tuple, size_t... I>
    requires is_constructible_v<T, decltype(get<I>(declval<Tuple>()))...>
  constexpr T @\placeholdernc{make-from-tuple-impl}@(Tuple&& t, index_sequence<I...>) {   // [=expos]
    return T(get<I>(std::forward<Tuple>(t))...);
  }
}
[codeblock:end]

[:en] Equivalent to:
[:zh_CN] 等价于：

[codeblock]
return [[redoc("^>")]]make-from-tuple-impl<T>(
          std::forward<Tuple>(t),
          make_index_sequence<tuple_size_v<remove_reference_t<Tuple>>>{});
[codeblock:end]

[begin:note]
[:en] The type of [`T] must be supplied as an explicit template parameter,
as it cannot be deduced from the argument list.
[:zh_CN] [`T] 的类型必须以明确的模板形参的形式提供，因为它无法从实参列表中进行
推断。
[end:note]
[div:end]
