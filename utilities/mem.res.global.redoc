[section#mem.res.global
    [:en] Access to program-wide [`memory_resource] objects
    [:zh_CN] 访问全程序范围的 [`memory_resource] 对象
]

[%@lib new_delete_resource]
[codeblock:declaration]
memory_resource* new_delete_resource() noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] A pointer to a static-duration object of a type derived from
[`memory_resource] that can serve as a resource for allocating memory using
[`::operator new] and [`::operator delete].
[:zh_CN] 指向具有派生于 [`memory_resource] 的某个类型的静态存储期的对象的指针，
它可以作为一种使用 [`::operator new] 和 [`::operator delete] 进行内存分配的资源。

[:en] The same value is returned every time this function is called.
[:zh_CN] 每次调用这个函数都返回相同的值。

[:en] For a return value [`p] and a memory resource [`r], [`p->is_equal(r)]
returns [`&r == p].
[:zh_CN] 对于一个返回值 [`p] 和某个内存资源 [`r]，[`p->is_equal(r)] 返回
[`&r == p]。
[div:end]

[%@lib null_memory_resource]
[codeblock:declaration]
memory_resource* null_memory_resource() noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] A pointer to a static-duration object of a type derived from
[`memory_resource] for which [`allocate()] always throws [`bad_alloc] and
for which [`deallocate()] has no effect.
[:zh_CN] 指向具有派生于 [`memory_resource] 的某个类型的静态存储期的对象的指针，
它的 [`allocate()] 总是抛出 [`bad_alloc]，而 [`deallocate()] 没有效果。

[:en] The same value is returned every time this function is called.
[:zh_CN] 每次调用这个函数都返回相同的值。

[:en] For a return value [`p] and a memory resource [`r], [`p->is_equal(r)]
returns [`&r == p].
[:zh_CN] 对于一个返回值 [`p] 和某个内存资源 [`r]，[`p->is_equal(r)] 返回
[`&r == p]。
[div:end]

[para]
[:en] The [+default memory resource pointer] is a pointer to a memory resource
that is used by certain facilities when an explicit memory resource
is not supplied through the interface.
[:zh_CN] 所谓[+默认内存资源指针]，是对于某些设施来说，当未通过其接口提供明确的
内存资源时，其所使用的指向内存资源的指针。

[:en] Its initial value is the return value of [`new_delete_resource()].
[:zh_CN] 其初始值为 [`new_delete_resource()] 的返回值。

[%@lib set_default_resource]
[codeblock:declaration]
memory_resource* set_default_resource(memory_resource* r) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] If [`r] is non-null, sets the value of the default memory resource pointer
to [`r], otherwise sets the default memory resource pointer to
[`new_delete_resource()].
[:zh_CN] 若 [`r] 非空，则将默认内存资源指针的值设置为 [`r]，否则就将默认内存资源
指针设置为 [`new_delete_resource()]。

[para:returns]
[:en] The previous value of the default memory resource pointer.
[:zh_CN] 默认内存资源指针之前的值。

[para:remarks]
[:en] Calling the [`set_default_resource] and [`get_default_resource] functions
shall not incur a data race.
[:zh_CN] 调用 [`set_default_resource] 和 [`get_default_resource] 函数不能造成
数据竞争。

[:en] A call to the [`set_default_resource] function shall synchronize with
subsequent calls to the [`set_default_resource] and [`get_default_resource]
functions.
[:zh_CN] 对 [`set_default_resource] 函数的调用应当同步于之后对
[`set_default_resource] 和 [`get_default_resource] 函数的调用。
[div:end]

[%@lib get_default_resource]
[codeblock:declaration]
memory_resource* get_default_resource() noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] The current value of the default memory resource pointer.
[:zh_CN] 默认内存资源指针的当前值。
[div:end]
