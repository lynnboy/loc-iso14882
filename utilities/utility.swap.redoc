[section#utility.swap
    [:en] [`swap]
    [:zh_CN] [`swap]
]

[%@lib swap]
[codeblock:declaration]
template<class T>
  constexpr void swap(T& a, T& b) noexcept([[redoc("[=seebelow]")]]);
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`is_move_constructible_v<T>] is [`true] and [`is_move_assignable_v<T>] is
[`true].
[:zh_CN] [`is_move_constructible_v<T>] 为 [`true] 且 [`is_move_assignable_v<T>]
为 [`true]。

[para:expects]
[:en] Type [`T] meets the [^:oc MoveConstructible]
([#:tab#cpp17.moveconstructible]) and [^:oc MoveAssignable]
([#:tab#cpp17.moveassignable]) requirements.
[:zh_CN] 类型 [`T] 满足 [^:oc MoveConstructible]
（[#:tab#cpp17.moveconstructible]）和 [^:oc MoveAssignable]
（[#:tab#cpp17.moveassignable]）的规定。

[para:effects]
[:en] Exchanges values stored in two locations.
[:zh_CN] 交换两个位置中所存储的值。

[para:remarks]
[:en] This function is a designated customization point ([#namespace.std]).
[:zh_CN] 这个函数被指派为定制化点（[#namespace.std]）。

[:en] The expression inside [`noexcept] is equivalent to:
[:zh_CN] [`noexcept] 中的表达式等价于：
[codeblock]
is_nothrow_move_constructible_v<T> && is_nothrow_move_assignable_v<T>
[codeblock:end]
[div:end]

[%@lib swap]
[codeblock:declaration]
template<class T, size_t N>
  constexpr void swap(T (&a)[N], T (&b)[N]) noexcept(is_nothrow_swappable_v<T>);
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`is_swappable_v<T>] is [`true].
[:zh_CN]  [`is_swappable_v<T>] 为 [`true]。

[para:expects]
[:en] [`a`[i`]] is swappable with ([#swappable.requirements]) [`b`[i`]] for all
[`i] in the range [=range(0,N)].
[:zh_CN] 对于范围 [=range(0,N)] 中的所有 [`i]，[`a`[i`]] 与 [`b`[i`]] 可互相交换
（[#swappable.requirements]）。

[para:effects]
[:en] As if by [`swap_ranges(a, a + N, b)].
[:zh_CN] 如同执行 [`swap_ranges(a, a + N, b)]。
[div:end]
