[section#utility.swap
    [:en] [`swap]
    [:zh_CN] [`swap]
]

[%@library swap]
[codeblock:declaration [!:mark SeeBelow] ]
template<class T>
  constexpr void swap(T& a, T& b) noexcept([=SeeBelow]);
[codeblock:end]

[enter:description]
[para:remarks]
[:en] This function is a designated customization point ([#namespace.std]) and
shall not participate in overload resolution unless
[`is_move_constructible_v<T>] is [`true] and [`is_move_assignable_v<T>] is
[`true].
[:zh_CN] 这个函数被指派为定制化点（[#namespace.std]），并且除非
[`is_move_constructible_v<T>] 为 [`true] 且 [`is_move_assignable_v<T>] 为
[`true]，否则不能参与重载决议。

[:en] The expression inside [`noexcept] is equivalent to:
[:zh_CN] [`noexcept] 中的表达式等价于：

[codeblock:notation]
is_nothrow_move_constructible_v<T> && is_nothrow_move_assignable_v<T>
[codeblock:end]

[para:requires]
[:en] Type [`T] shall be [*Cpp17MoveConstructible]
([#:tab cpp17.moveconstructible]) and [*Cpp17MoveAssignable]
([#:tab cpp17.moveassignable]).
[:zh_CN] 类型 [`T] 应当为 [*Cpp17MoveConstructible]
（[#:tab cpp17.moveconstructible]）且为 [*Cpp17MoveAssignable]
（[#:tab cpp17.moveassignable]）。

[para:effects]
[:en] Exchanges values stored in two locations.
[:zh_CN] 交换两个位置中所存储的值。
[exit:description]

[%@library swap]
[codeblock:declaration]
template<class T, size_t N>
  constexpr void swap(T (&a)[N], T (&b)[N]) noexcept(is_nothrow_swappable_v<T>);
[codeblock:end]

[enter:description]
[para:remarks]
[:en] This function shall not participate in overload resolution unless
[`is_swappable_v<T>] is [`true].
[:zh_CN] 除非 [`is_swappable_v<T>] 为 [`true]，否则这个函数不能参与重载决议。

[para:requires]
[:en] [`a`[i`]] shall be swappable with ([#swappable.requirements]) [`b`[i`]]
for all [`i] in the range [=range(0,N)].
[:zh_CN] 对于范围 [=range(0,N)] 中的所有 [`i]，[`a`[i`]] 应当与 [`b`[i`]] 可互相
交换（[#swappable.requirements]）。

[para:effects]
[:en] As if by [`swap_ranges(a, a + N, b)].
[:zh_CN] 如同执行 [`swap_ranges(a, a + N, b)]。
[exit:description]
