[section#pairs.pair
    [:en] Class template [`pair]
    [:zh_CN] 类模板 [`pair]
]

[%@lib pair]
[codeblock:synopsis]
namespace std {
  template<class T1, class T2>
  struct pair {
    using first_type  = T1;
    using second_type = T2;

    T1 first;
    T2 second;

    pair(const pair&) = default;
    pair(pair&&) = default;
    constexpr explicit([[redoc("[=seebelow]")]]) pair();
    constexpr explicit([[redoc("[=seebelow]")]]) pair(const T1& x, const T2& y);
    template<class U1 = T1, class U2 = T2>
      constexpr explicit([[redoc("[=seebelow]")]]) pair(U1&& x, U2&& y);
    template<class U1, class U2>
      constexpr explicit([[redoc("[=seebelow]")]]) pair(pair<U1, U2>& p);
    template<class U1, class U2>
      constexpr explicit([[redoc("[=seebelow]")]]) pair(const pair<U1, U2>& p);
    template<class U1, class U2>
      constexpr explicit([[redoc("[=seebelow]")]]) pair(pair<U1, U2>&& p);
    template<class U1, class U2>
      constexpr explicit([[redoc("[=seebelow]")]]) pair(const pair<U1, U2>&& p);
    template<[[redoc("*:c>")]]pair-like P>
      constexpr explicit([[redoc("[=seebelow]")]]) pair(P&& p);
    template<class... Args1, class... Args2>
      constexpr pair(piecewise_construct_t,
                     tuple<Args1...> first_args, tuple<Args2...> second_args);

    constexpr pair& operator=(const pair& p);
    constexpr const pair& operator=(const pair& p) const;
    template<class U1, class U2>
      constexpr pair& operator=(const pair<U1, U2>& p);
    template<class U1, class U2>
      constexpr const pair& operator=(const pair<U1, U2>& p) const;
    constexpr pair& operator=(pair&& p) noexcept([[redoc("[=seebelow]")]]);
    constexpr const pair& operator=(pair&& p) const;
    template<class U1, class U2>
      constexpr pair& operator=(pair<U1, U2>&& p);
    template<class U1, class U2>
      constexpr const pair& operator=(pair<U1, U2>&& p) const;
    template<[[redoc("*:c>")]]pair-like P>
      constexpr pair& operator=(P&& p);
    template<[[redoc("*:c>")]]pair-like P>
      constexpr const pair& operator=(P&& p) const;

    constexpr void swap(pair& p) noexcept([[redoc("[=seebelow]")]]);
    constexpr void swap(const pair& p) const noexcept([[redoc("[=seebelow]")]]);
  };

  template<class T1, class T2>
    pair(T1, T2) -> pair<T1, T2>;
}
[codeblock:end]

[para]
[:en]
Constructors and member functions of [`pair] do not throw exceptions unless one
of the element-wise operations specified to be called for that operation throws
an exception.
[:zh_CN]
[`pair] 的构造函数和成员函数不抛出异常，除非该操作所指定要调用的按元素操作抛出
了异常。

[para]
[:en]
The defaulted move and copy constructor, respectively, of [`pair] is a constexpr
function if and only if all required element-wise initializations for move and
copy, respectively, would satisfy the requirements for a constexpr function.
[:zh_CN]
[`pair] 的预置移动和复制构造函数，当且仅当分别为移动或复制所需要的所有按元素
初始化都能够符合 constexpr 函数的规定时，它是 constexpr 函数。

[para]
[:en]
If [`(is_trivially_destructible_v<T1> && is_trivially_destructible_v<T2>)] is
[`true], then the destructor of [`pair] is trivial.
[:zh_CN]
当 [`(is_trivially_destructible_v<T1> && is_trivially_destructible_v<T2>)] 为
[`true] 时，[`pair] 的析构函数是平凡的。

[para]
[:en]
[`pair<T, U>] is a structural type ([#temp.param]) if [`T] and [`U] are both
structural types.
[:zh_CN]
当 [`T] 和 [`U] 均为结构式类型（[#temp.param]）时，[`pair<T, U>] 为结构式类型。

[:en]
Two values [`p1] and [`p2] of type [`pair<T, U>] are
template-argument-equivalent ([#temp.type]) if and only if [`p1.first] and
[`p2.first] are template-argument-equivalent and [`p1.second] and [`p2.second]
are template-argument-equivalent.
[:zh_CN]
对于类型 [`pair<T, U>] 的两个值 [`p1] 和 [`p2]，当且仅当 [`p1.first] 和
[`p2.first] 之间模板实参等价，且 [`p1.second] 和 [`p2.second] 之间模板实参等价时，
它们之间模板实参等价。

[%@lib@ctor pair]
[codeblock:declaration]
constexpr explicit([[redoc("[=seebelow]")]]) pair();
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en] [`is_default_constructible_v<T1>] is [`true] and
[:zh_CN] [`is_default_constructible_v<T1>] 为 [`true] 并且
[item]
[:en] [`is_default_constructible_v<T2>] is [`true].
[:zh_CN] [`is_default_constructible_v<T2>] 为 [`true]。
[list:end]

[para:effects]
[:en] Value-initializes [`first] and [`second].
[:zh_CN] 值初始化 [`first] 和 [`second]。

[para:remarks]
[:en] The expression inside [`:key explicit] evaluates to [`true] if and only if
either [`T1] or [`T2] is not implicitly default-constructible.
[:zh_CN] 当且仅当 [`T1] 或者 [`T2] 都不能隐式默认构造时，[`:key explicit] 中的
表达式求值为 [`true]。

[begin:note]
[:en] This behavior can be implemented with a trait that checks whether a
[`const T1&] or a [`const T2&] can be initialized with [`{}].
[:zh_CN] 这种行为可以利用一个特征来检查 [`const T1&] 或者 [`const T2&] 是否可以
由 [`{}] 进行初始化来予以实现。
[end:note]
[div:end]

[%@lib@ctor pair]
[codeblock:declaration]
constexpr explicit([[redoc("[=seebelow]")]]) pair(const T1& x, const T2& y);
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en] [`is_copy_constructible_v<T1>] is [`true] and
[:zh_CN] [`is_copy_constructible_v<T1>] 为 [`true] 并且
[item]
[:en] [`is_copy_constructible_v<T2>] is [`true].
[:zh_CN] [`is_copy_constructible_v<T2>] 为 [`true]。
[list:end]

[para:effects]
[:en] Initializes [`first] with [`x] and [`second] with [`y].
[:zh_CN] 以 [`x] 初始化 [`first]，并以 [`y] 初始化 [`second]。

[para:remarks]
[:en] The expression inside [`:key explicit] is equivalent to:
[:zh_CN] [`:key explicit] 中的表达式等价于：
[codeblock]
!is_convertible_v<const T1&, T1> || !is_convertible_v<const T2&, T2>
[codeblock:end]
[div:end]

[%@lib@ctor pair]
[codeblock:declaration]
template<class U1 = T1, class U2 = T2> constexpr explicit([[redoc("[=seebelow]")]]) pair(U1&& x, U2&& y);
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en] [`is_constructible_v<T1, U1>] is [`true] and
[:zh_CN] [`is_constructible_v<T1, U1>] 为 [`true] 并且
[item]
[:en] [`is_constructible_v<T2, U2>] is [`true].
[:zh_CN] [`is_constructible_v<T2, U2>] 为 [`true]。
[list:end]

[para:effects]
[:en] Initializes [`first] with [`std::forward<U1>(x)] and [`second] with
[`std::forward<U2>(y)].
[:zh_CN] 以 [`std::forward<U1>(x)] 初始化 [`first]，并以 [`std::forward<U2>(y)]
初始化 [`second]。

[para:remarks]
[:en] The expression inside [`:key explicit] is equivalent to:
[:zh_CN] [`:key explicit] 中的表达式等价于：
[codeblock]
!is_convertible_v<U1, T1> || !is_convertible_v<U2, T2>
[codeblock:end]

[:en] This constructor is defined as deleted if
[`reference_constructs_from_temporary_v<first_type, U1&&>] is [`true] or
[`reference_constructs_from_temporary_v<second_type, U2&&>] is [`true].
[:zh_CN] 当 [`reference_constructs_from_temporary_v<first_type, U1&&>] 为 [`true]
或 [`reference_constructs_from_temporary_v<second_type, U2&&>] 为 [`true] 时，
本构造函数定义为弃置的。
[div:end]

[%@lib@ctor pair]
[codeblock:declaration]
template<class U1, class U2> constexpr explicit([[redoc("[=seebelow]")]]) pair(pair<U1, U2>& p);
template<class U1, class U2> constexpr explicit([[redoc("[=seebelow]")]]) pair(const pair<U1, U2>& p);
template<class U1, class U2> constexpr explicit([[redoc("[=seebelow]")]]) pair(pair<U1, U2>&& p);
template<class U1, class U2> constexpr explicit([[redoc("[=seebelow]")]]) pair(const pair<U1, U2>&& p);
template<[[redoc("*:c>")]]pair-like P> constexpr explicit([[redoc("[=seebelow]")]]) pair(P&& p);
[codeblock:end]

[div:description]
[para]
[:en] Let [`[*FWD](u)] be [`static_cast<decltype(u)>(u)].
[:zh_CN] 令 [`[*FWD](u)] 为 [`static_cast<decltype(u)>(u)]。

[para:constraints]
[list]
[item]
[:en] For the last overload, [`remove_cvref_t<P>] is not a specialization of
[`ranges::subrange],
[:zh_CN] 对于最后一种重载，[`remove_cvref_t<P>] 不是 [`ranges::subrange] 的特例，
[item]
[:en] [`is_constructible_v<T1, decltype(get<0>([*FWD](p)))>] is [`true], and
[:zh_CN] [`is_constructible_v<T1, decltype(get<0>([*FWD](p)))>] 为 [`true]，并且
[item]
[:en] [`is_constructible_v<T2, decltype(get<1>([*FWD](p)))>] is [`true].
[:zh_CN] [`is_constructible_v<T2, decltype(get<1>([*FWD](p)))>] 为 [`true]。
[list:end]

[para:effects]
[:en] Initializes [`first] with [`get<0>([*FWD](p))] and [`second] with
[`get<1>([*FWD](p))].
[:zh_CN] 以 [`get<0>([*FWD](p))] 初始化 [`first] 并以 [`get<1>([*FWD](p))]
初始化 [`second]。

[para:remarks]
[:en] The expression inside [`:key explicit] is equivalent to:
[:zh_CN] [`:key explicit] 中的表达式等价于：
[codeblock]
!is_convertible_v<decltype(get<0>([[redoc("*>")]]FWD(p))), T1> ||
!is_convertible_v<decltype(get<1>([[redoc("*>")]]FWD(p))), T2>
[codeblock:end]

[:en] The constructor is defined as deleted if
[:zh_CN] 当
[codeblock]
reference_constructs_from_temporary_v<first_type, decltype(get<0>([[redoc("*>")]]FWD(p)))> ||
reference_constructs_from_temporary_v<second_type, decltype(get<1>([[redoc("*>")]]FWD(p)))>
[codeblock:end]
[:en@~] is [`true].
[:zh_CN@~] 为 [`true] 时，本构造函数定义为弃置的。
[div:end]

[%@lib@ctor pair]
[codeblock:declaration]
template<class... Args1, class... Args2>
  constexpr pair(piecewise_construct_t,
                 tuple<Args1...> first_args, tuple<Args2...> second_args);
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en] [`is_constructible_v<T1, Args1...>] is [`true] and
[:zh_CN] [`is_constructible_v<T1, Args1...>] 为 [`true] 并且
[item]
[:en] [`is_constructible_v<T2, Args2...>] is [`true].
[:zh_CN] [`is_constructible_v<T2, Args2...>] 为 [`true]。
[list:end]

[para:effects]
[:en] Initializes [`first] with arguments of types [`Args1...] obtained by
forwarding the elements of [`first_args] and initializes [`second] with
arguments of types [`Args2...] obtained by forwarding the elements of
[`second_args].
[:zh_CN] 通过转发 [`first_args] 的元素获得 [`Args1...] 的各类型的实参并以之
初始化 [`first]，并且通过转发 [`second_args] 的元素获得 [`Args2...] 的各类型的
实参并以之初始化 [`second]。

[:en]
(Here, forwarding an element [`x] of type [`U] within a [`tuple] object means
calling [`std::forward<U>(x)].)
[:zh_CN]
（此处，转发一个 [`tuple] 对象中类型 [`U] 的元素 [`x] 的意思是调用
[`std::forward<U>(x)]。）

[:en]
This form of construction, whereby constructor arguments for [`first] and
[`second] are each provided in a separate [`tuple] object, is called
[+piecewise construction].
[:zh_CN]
这种形式的构造，其中为 [`first] 和 [`second] 提供的构造函数实参是以各自独立的
[`tuple] 对象提供的，称之为[+逐段构造]。

[begin:note]
[:en] If a data member of [`pair] is of reference type and its initialization
binds it to a temporary object, the program is ill-formed ([#class.base.init]).
[:zh_CN] 如果 [`pair] 的数据成员是引用类型，且其初始化绑定到临时对象，则程序
非良构（[#class.base.init]）。
[end:note]
[div:end]

[%@lib@member operator=[!pair]]
[codeblock:declaration]
constexpr pair& operator=(const pair& p);
[codeblock:end]

[div:description]
[para:effects]
[:en] Assigns [`p.first] to [`first] and [`p.second] to [`second].
[:zh_CN] 赋值 [`p.first] 给 [`first]，并赋值 [`p.second] 给 [`second]。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。

[para:remarks]
[:en] This operator is defined as deleted unless [`is_copy_assignable_v<T1>] is
[`true] and [`is_copy_assignable_v<T2>] is [`true].
[:zh_CN] 除非 [`is_copy_assignable_v<T1>] 为 [`true] 并且
[`is_copy_assignable_v<T2>] 为 [`true]，否则这个运算符被定义为弃置的。
[div:end]

[%@lib@member operator=[!pair]]
[codeblock:declaration]
constexpr const pair& operator=(const pair& p) const;
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en] [`is_copy_assignable<const T1>] is [`true] and
[:zh_CN] [`is_copy_assignable<const T1>] 为 [`true] 并且
[item]
[:en] [`is_copy_assignable<const T2>] is [`true].
[:zh_CN] [`is_copy_assignable<const T2>] 为 [`true]。
[list:end]

[para:effects]
[:en] Assigns [`p.first] to [`first] and [`p.second] to [`second].
[:zh_CN] 赋值 [`p.first] 给 [`first]，并赋值 [`p.second] 给 [`second]。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@lib@member operator=[!pair]]
[codeblock:declaration]
template<class U1, class U2> constexpr pair& operator=(const pair<U1, U2>& p);
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en] [`is_assignable_v<T1&, const U1&>] is [`true] and
[:zh_CN] [`is_assignable_v<T1&, const U1&>] 为 [`true] 并且
[item]
[:en] [`is_assignable_v<T2&, const U2&>] is [`true].
[:zh_CN] [`is_assignable_v<T2&, const U2&>] 为 [`true]。
[list:end]

[para:effects]
[:en] Assigns [`p.first] to [`first] and [`p.second] to [`second].
[:zh_CN] 赋值 [`p.first] 给 [`first]，并赋值 [`p.second] 给 [`second]。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@lib@member operator=[!pair]]
[codeblock:declaration]
template<class U1, class U2> constexpr const pair& operator=(const pair<U1, U2>& p) const;
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en] [`is_assignable_v<const T1&, const U1&>] is [`true] and
[:zh_CN] [`is_assignable_v<const T1&, const U1&>] 为 [`true] 并且
[item]
[:en] [`is_assignable_v<const T2&, const U2&>] is [`true].
[:zh_CN] [`is_assignable_v<const T2&, const U2&>] 为 [`true]。
[list:end]

[para:effects]
[:en] Assigns [`p.first] to [`first] and [`p.second] to [`second].
[:zh_CN] 赋值 [`p.first] 给 [`first]，并赋值 [`p.second] 给 [`second]。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@lib@member operator=[!pair]]
[codeblock:declaration]
constexpr pair& operator=(pair&& p) noexcept([[redoc("[=seebelow]")]]);
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en] [`is_move_assignable_v<T1>] is [`true] and
[:zh_CN] [`is_move_assignable_v<T1>] 为 [`true] 并且
[item]
[:en] [`is_move_assignable_v<T2>] is [`true].
[:zh_CN] [`is_move_assignable_v<T2>] 为 [`true]。
[list:end]

[para:effects]
[:en] Assigns to [`first] with [`std::forward<T1>(p.first)] and to [`second]
with [`std::forward<T2>(p.second)].
[:zh_CN] 以 [`std::forward<T1>(p.first)] 对 [`first] 赋值，并以
[`std::forward<T2>(p.second)] 对 [`second] 赋值。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。

[para:remarks]
[:en] The exception specification is equivalent to:
[:zh_CN] 其异常说明等价于：
[codeblock]
is_nothrow_move_assignable_v<T1> && is_nothrow_move_assignable_v<T2>
[codeblock:end]
[div:end]

[%@lib@member operator=[!pair]]
[codeblock:declaration]
constexpr const pair& operator=(pair&& p) const;
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en] [`is_assignable<const T1&, T1>] is [`true] and
[:zh_CN] [`is_assignable<const T1&, T1>] 为 [`true] 并且
[item]
[:en] [`is_assignable<const T2&, T2>] is [`true].
[:zh_CN] [`is_assignable<const T2&, T2>] 为 [`true]。
[list:end]

[para:effects]
[:en] Assigns [`std::forward<T1>(p.first)] to [`first] and
[`std::forward<T2>(p.second)] to [`second].
[:zh_CN] 以 [`std::forward<T1>(p.first)] 对 [`first] 赋值，并以
[`std::forward<T2>(p.second)] 对 [`second] 赋值。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@lib@member operator=[!pair]]
[codeblock:declaration]
template<class U1, class U2> constexpr pair& operator=(pair<U1, U2>&& p);
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en] [`is_assignable_v<T1&, U1>] is [`true] and
[:zh_CN] [`is_assignable_v<T1&, U1>] 为 [`true] 并且
[item]
[:en] [`is_assignable_v<T2&, U2>] is [`true].
[:zh_CN] [`is_assignable_v<T2&, U2>] 为 [`true]。
[list:end]

[para:effects]
[:en] Assigns to [`first] with [`std::forward<U1>(p.first)] and to [`second]
with [`std::forward<U2>(p.second)].
[:zh_CN] 以 [`std::forward<U1>(p.first)] 对 [`first] 赋值，并以
[`std::forward<U2>(p.second)] 对 [`second] 赋值。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@lib@member operator=[!pair]]
[codeblock:declaration]
template<[[redoc("*:c>")]]pair-like P> constexpr pair& operator=(P&& p);
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en] [`[*:c different-from]<P, pair>] ([#range.utility.helpers]) is [`true],
[:zh_CN] [`[*:c different-from]<P, pair>]（[#range.utility.helpers]）为 [`true]，
[item]
[:en] [`remove_cvref_t<P>] is not a specialization of [`ranges::subrange],
[:zh_CN] [`remove_cvref_t<P>] 不是 [`ranges::subrange] 的特例，
[item]
[:en] [`is_assignable_v<T1&, decltype(get<0>(std::forward<P>(p)))>] is [`true],
and
[:zh_CN] [`is_assignable_v<T1&, decltype(get<0>(std::forward<P>(p)))>] 为 [`true]，
并且
[item]
[:en] [`is_assignable_v<T2&, decltype(get<1>(std::forward<P>(p)))>] is [`true].
[:zh_CN] [`is_assignable_v<T2&, decltype(get<1>(std::forward<P>(p)))>] 为 [`true]。
[list:end]

[para:effects]
[:en] Assigns [`get<0>(std::forward<P>(p))] to [`first] and
[`get<1>(std::forward<P>(p))] to [`second].
[:zh_CN] 以 [`get<0>(std::forward<P>(p))] 对 [`first] 赋值，并以
[`get<1>(std::forward<P>(p))] 对 [`second] 赋值。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@lib@member operator=[!pair]]
[codeblock:declaration]
template<[[redoc("*:c>")]]pair-like P> constexpr const pair& operator=(P&& p) const;
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en] [`[*:c different-from]<P, pair>] ([#range.utility.helpers]) is [`true],
[:zh_CN] [`[*:c different-from]<P, pair>]（[#range.utility.helpers]）为 [`true]，
[item]
[:en] [`remove_cvref_t<P>] is not a specialization of [`ranges::subrange],
[:zh_CN] [`remove_cvref_t<P>] 不是 [`ranges::subrange] 的特例，
[item]
[:en] [`is_assignable_v<const T1&, decltype(get<0>(std::forward<P>(p)))>] is
[`true], and
[:zh_CN] [`is_assignable_v<const T1&, decltype(get<0>(std::forward<P>(p)))>] 为
[`true]，并且
[item]
[:en] [`is_assignable_v<T2&, decltype(get<1>(std::forward<P>(p)))>] is [`true].
[:zh_CN] [`is_assignable_v<T2&, decltype(get<1>(std::forward<P>(p)))>] 为 [`true]。
[list:end]

[para:effects]
[:en] Assigns [`get<0>(std::forward<P>(p))] to [`first] and
[`get<1>(std::forward<P>(p))] to [`second].
[:zh_CN] 以 [`get<0>(std::forward<P>(p))] 对 [`first] 赋值，并以
[`get<1>(std::forward<P>(p))] 对 [`second] 赋值。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@lib@member operator=[!pair]]
[codeblock:declaration]
template<class U1, class U2> constexpr const pair& operator=(pair<U1, U2>&& p) const;
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en] [`is_assignable_v<const T1&, U1>] is [`true] and
[:zh_CN] [`is_assignable_v<const T1&, U1>] 为 [`true] 并且
[item]
[:en] [`is_assignable_v<const T2&, U2>] is [`true].
[:zh_CN] [`is_assignable_v<const T2&, U2>] 为 [`true]。
[list:end]

[para:effects]
[:en] Assigns [`std::forward<U1>(p.first)] to [`first] and
[`std::forward<U2>(p.second)] to [`second].
[:zh_CN] 以 [`std::forward<U1>(p.first)] 对 [`first] 赋值，并以
[`std::forward<U2>(p.second)] 对 [`second] 赋值。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@lib@member swap[!pair]]
[codeblock:declaration]
constexpr void swap(pair& p) noexcept([[redoc("[=seebelow]")]]);
constexpr void swap(const pair& p) const noexcept([[redoc("[=seebelow]")]]);
[codeblock:end]

[div:description]
[para:mandates]
[list]
[item]
[:en] For the first overload, [`is_swappable_v<T1>] is [`true] and
[`is_swappable_v<T2>] is [`true].
[:zh_CN] 对于第一种重载，[`is_swappable_v<T1>] 为 [`true] 并且
[`is_swappable_v<T2>] 为 [`true]。
[item]
[:en] For the second overload, [`is_swappable_v<const T1>] is [`true] and
[`is_swappable_v<const T2>] is [`true].
[:zh_CN] 对于第二种重载，[`is_swappable_v<const T1>] 为 [`true] 并且
[`is_swappable_v<const T2>] 为 [`true]。
[list:end]

[para:expects]
[:en] [`first] is swappable with ([#swappable.requirements]) [`p.first] and
[`second] is swappable with [`p.second].
[:zh_CN] [`first] 能够与 [`p.first] 互相交换（[#swappable.requirements]），并且
[`second] 能够与 [`p.second] 互相交换。

[para:effects]
[:en] Swaps [`first] with [`p.first] and [`second] with [`p.second].
[:zh_CN] 交换 [`first] 与 [`p.first]，并交换 [`second] 与 [`p.second]。

[para:remarks]
[:en] The exception specification is equivalent to:
[:zh_CN] 其异常说明等价于：
[list]
[item]
[:en] [`is_nothrow_swappable_v<T1> && is_nothrow_swappable_v<T2>] for the first
overload, and
[:zh_CN] 对于第一种重载为
[`is_nothrow_swappable_v<T1> && is_nothrow_swappable_v<T2>] 而
[item]
[:en] [`is_nothrow_swappable_v<const T1> && is_nothrow_swappable_v<const T2>]
for the second overload.
[:zh_CN] 对于第而种重载为
[`is_nothrow_swappable_v<const T1> && is_nothrow_swappable_v<const T2>]。
[list:end]
[div:end]
