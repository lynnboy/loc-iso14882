[section#stacktrace.basic.ctor
    [:en] Creation and assignment
    [:zh_CN] 创建与赋值
]

[%@lib@member current[!basic_stacktrace]]
[codeblock:declaration]
static basic_stacktrace current(const allocator_type& alloc = allocator_type()) noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] A [`basic_stacktrace] object with [`frames_] storing the stacktrace of the
current evaluation in the current thread of execution, or an empty
[`basic_stacktrace] object if the initialization of [`frames_] failed.
[:zh_CN] 一个 [`basic_stacktrace] 对象，其 [`frames_] 存储当前执行线程中的当前
执行的栈踪迹，或当 [`frames_] 的初始化失败时返回一个空 [`basic_stacktrace] 对象。

[:en] [`alloc] is passed to the constructor of the [`frames_] object.
[:zh_CN] [`alloc] 被传递给 [`frames_] 对象的构造函数。

[begin:note]
[:en] If the stacktrace was successfully obtained, then [`frames_.front()] is
the [`stacktrace_entry] representing approximately the current evaluation, and
[`frames_.back()] is the [`stacktrace_entry] representing approximately the
initial function of the current thread of execution.
[:zh_CN] 如果成功获取了栈踪迹，则 [`frames_.front()] 为表示大约为当前求值的
[`stacktrace_entry]，而 [`frames_.back()] 为表示大约为当前执行线程的启动函数的
[`stacktrace_entry]。
[end:note]
[div:end]

[%@lib@member current[!basic_stacktrace]]
[codeblock:declaration]
static basic_stacktrace current(size_type skip,
                                const allocator_type& alloc = allocator_type()) noexcept;
[codeblock:end]

[div:description]
[para]
[:en] Let [`t] be a stacktrace as-if obtained via
[`basic_stacktrace::current(alloc)].
[:zh_CN] 令 [`t] 为如同通过 [`basic_stacktrace::current(alloc)] 所获得的栈踪迹。

[:en] Let [`n] be [`t.size()].
[:zh_CN] 令 [`n] 为 [`t.size()]。

[para:returns]
[:en] A [`basic_stacktrace] object where [`frames_] is
direct-non-list-initialized from arguments [`t.begin() + min(n, skip)],
[`t.end()], and [`alloc], or an empty [`basic_stacktrace] object if the
initialization of [`frames_] failed.
[:zh_CN] 一个 [`basic_stacktrace] 对象，其 [`frames_] 从实参
[`t.begin() + min(n, skip)]，[`t.end()]，和 [`alloc] 进行直接非列表初始化，或当
[`frames_] 的初始化失败时返回一个空 [`basic_stacktrace] 对象。
[div:end]

[%@lib@member current[!basic_stacktrace]]
[codeblock:declaration]
static basic_stacktrace current(size_type skip, size_type max_depth,
                                const allocator_type& alloc = allocator_type()) noexcept;
[codeblock:end]

[div:description]
[para]
[:en] Let [`t] be a stacktrace as-if obtained via
[`basic_stacktrace::current(alloc)].
[:zh_CN] 令 [`t] 为如同通过 [`basic_stacktrace::current(alloc)] 所获得的栈踪迹。

[:en] Let [`n] be [`t.size()].
[:zh_CN] 令 [`n] 为 [`t.size()]。

[para:expects]
[:en] [`skip <= skip + max_depth] is [`true].
[:zh_CN] [`skip <= skip + max_depth] 为 [`true]。

[para:returns]
[:en] A [`basic_stacktrace] object where [`frames_] is
direct-non-list-initialized from arguments [`t.begin() + min(n, skip)],
[`t.begin() + min(n, skip + max_depth)], and [`alloc], or an empty
[`basic_stacktrace] object if the initialization of [`frames_] failed.
[:zh_CN] 一个 [`basic_stacktrace] 对象，其 [`frames_] 从实参
[`t.begin() + min(n, skip)]，[`t.begin() + min(n, skip + max_depth)]，和 [`alloc]
进行直接非列表初始化，或当 [`frames_] 的初始化失败时返回一个空
[`basic_stacktrace] 对象。
[div:end]

[%@lib@ctor basic_stacktrace]
[codeblock:declaration]
basic_stacktrace() noexcept(is_nothrow_default_constructible_v<allocator_type>);
[codeblock:end]

[div:description]
[para:ensures]
[:en] [`empty()] is [`true].
[:zh_CN] [`empty()] 为 [`true]。
[div:end]

[%@lib@ctor basic_stacktrace]
[codeblock:declaration]
explicit basic_stacktrace(const allocator_type& alloc) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] [`alloc] is passed to the [`frames_] constructor.
[:zh_CN] [`alloc] 被传递给 [`frames_] 的构造函数。

[para:ensures]
[:en] [`empty()] is [`true].
[:zh_CN] [`empty()] 为 [`true]。
[div:end]

[%@lib@ctor basic_stacktrace]
[%@lib@member operator=[!basic_stacktrace]]
[codeblock:declaration]
basic_stacktrace(const basic_stacktrace& other);
basic_stacktrace(const basic_stacktrace& other, const allocator_type& alloc);
basic_stacktrace(basic_stacktrace&& other, const allocator_type& alloc);
basic_stacktrace& operator=(const basic_stacktrace& other);
basic_stacktrace& operator=(basic_stacktrace&& other)
  noexcept(allocator_traits<Allocator>::propagate_on_container_move_assignment::value ||
    allocator_traits<Allocator>::is_always_equal::value);
[codeblock:end]

[div:description]
[para:remarks]
[:en] Implementations may strengthen the exception specification for these
functions ([#res.on.exception.handling]) by ensuring that [`empty()] is [`true]
on failed allocation.
[:zh_CN] 实现可以强化这些函数的异常说明（[#res.on.exception.handling]），确保
[`empty()] 在分配失败时为 [`true]。
[div:end]
