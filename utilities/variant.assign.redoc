[section#variant.assign
    [:en] Assignment
    [:zh_CN] 赋值
]

[%@library operator=[!variant]]
[%@library variant[!operator=]]
[codeblock:declaration]
variant& operator=(const variant& rhs);
[codeblock:end]

[enter:description]
[para]
[:en] Let [$j] be [`rhs.index()].
[:zh_CN] 令 [$j] 为 [`rhs.index()]。

[para:effects]
[list]
[item]
[:en] If neither [`*this] nor [`rhs] holds a value, there is no effect.
[:zh_CN] 若 [`*this] 和 [`rhs] 都不持有值，则没有效果。

[:en] Otherwise,
[:zh_CN] 否则，

[item]
[:en@~] if [`*this] holds a value but [`rhs] does not, destroys the value
contained in [`*this] and sets [`*this] to not hold a value.
[:zh_CN@~] 若 [`*this] 持有值但 [`rhs] 不持有值，则销毁 [`*this] 所持有的值并
设置 [`*this] 为不持有值。

[:en] Otherwise,
[:zh_CN] 否则，

[item]
[:en@~] if [`index() == [$j]], assigns the value contained in [`rhs] to the
value contained in [`*this].
[:zh_CN@~] 若 [`index() == [$j]]，则将 [`rhs] 所包含的值赋值给 [`*this] 所包含的
值。

[:en] Otherwise,
[:zh_CN] 否则，

[item]
[:en@~] if either [`is_nothrow_copy_constructible_v<T[$_j]>] or
[`!is_nothrow_move_constructible_v<T[$_j]>] is [`true], equivalent to
[`emplace<[$j]>(get<[$j]>(rhs))].
[:zh_CN@~] 若 [`is_nothrow_copy_constructible_v<T[$_j]>] 或
[`!is_nothrow_move_constructible_v<T[$_j]>] 为 [`true]，则等价于
[`emplace<[$j]>(get<[$j]>(rhs))]。

[:en] Otherwise,
[:zh_CN] 否则，

[item]
[:en@~] equivalent to [`operator=(variant(rhs))].
[:zh_CN@~] 等价于 [`operator=(variant(rhs))]。
[list:end]

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。

[para:postconditions]
[:en] [`index() == rhs.index()].
[:zh_CN] [`index() == rhs.index()]。

[para:remarks]
[:en] This function shall not participate in overload resolution unless
[`is_copy_constructible_v<T[$_i]> && is_copy_assignable_v<T[$_i]>] is [`true]
for all [$i].
[:zh_CN] 除非 [`is_copy_constructible_v<T[$_i]> && is_copy_assignable_v<T[$_i]>]
对于所有 [$i] 均为 [`true]，否则这个函数不能参与重载决议。
[exit:description]

[%@library operator=[!variant]]
[%@library variant[!operator=]]
[codeblock:declaration [!:mark SeeBelow] ]
variant& operator=(variant&& rhs) noexcept([=SeeBelow]);
[codeblock:end]

[enter:description]
[para]
[:en] Let [$j] be [`rhs.index()].
[:zh_CN] 令 [$j] 为 [`rhs.index()]。

[para:effects]
[list]
[item]
[:en] If neither [`*this] nor [`rhs] holds a value, there is no effect.
[:zh_CN] 若 [`*this] 和 [`rhs] 都不持有值，则没有效果。

[:en] Otherwise,
[:zh_CN] 否则，

[item]
[:en@~] if [`*this] holds a value but [`rhs] does not, destroys the value
contained in [`*this] and sets [`*this] to not hold a value.
[:zh_CN@~] 若 [`*this] 持有值但 [`rhs] 不持有值，则销毁 [`*this] 所持有的值并
设置 [`*this] 为不持有值。

[:en] Otherwise,
[:zh_CN] 否则，

[item]
[:en@~] if [`index() == [$j]], assigns [`get<][$j][`>(std::move(rhs))] to the
value contained in [`*this].
[:zh_CN@~] 若 [`index() == [$j]]，则将 [`get<][$j][`>(std::move(rhs))] 赋值给
[`*this] 所包含的值。

[:en] Otherwise,
[:zh_CN] 否则，

[item]
[:en@~] equivalent to [`emplace<[$j]>(get<[$j]>(std::move(rhs)))].
[:zh_CN@~] 等价于 [`emplace<[$j]>(get<[$j]>(std::move(rhs)))]。
[list:end]

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。

[para:remarks]
[:en] This function shall not participate in overload resolution unless
[`is_move_constructible_v<T[$_i]> && is_move_assignable_v<T[$_i]>] is [`true]
for all [$i].
[:zh_CN] 除非
[`is_move_constructible_v<T[$_i]> && is_move_assignable_v<T[$_i]>] 对于所有 [$i]
均为 [`true]，否则这个函数不能参与重载决议。

[:en] The expression inside [`noexcept] is equivalent to:
[`is_nothrow_move_constructible_v<T[$_i]> &&
is_nothrow_move_assignable_v<T[$_i]>] for all [$i].
[:zh_CN] [`noexcept] 中的表达式等价于对于所有 [$i]，
[`is_nothrow_move_constructible_v<T[$_i]> &&
is_nothrow_move_assignable_v<T[$_i]>]。

[list]
[item]
[:en] If an exception is thrown during the call to [`T][$_j][=']s move
construction (with [$j] being [`rhs.index())], the [`variant] will hold no
value.
[:zh_CN] 如果在调用 [`T][$_j] 的移动构造中抛出了异常（其中 [$j] 为
[`rhs.index()]），则这个 [`variant] 将不持有值。

[item]
[:en] If an exception is thrown during the call to [`T][$_j][=']s move
assignment, the state of the contained value is as defined by the exception
safety guarantee of [`T][$_j][=']s move assignment; [`index()] will be [$j].
[:zh_CN] 如果在调用 [`T][$_j] 的移动赋值的过程中抛出了异常，则所包含的值的状态
依据 [`T][$_j] 的移动赋值的异常安全性保证所定义；[`index()] 将为 [$j]。
[list:end]
[exit:description]

[%@library operator=[!variant]]
[%@library variant[!operator=]]
[codeblock:declaration [!:mark SeeBelow] ]
template <class T> variant& operator=(T&& t) noexcept([=SeeBelow]);
[codeblock:end]

[enter:description]
[para]
[:en] Let [`T][$_j] be a type that is determined as follows: build an
imaginary function [`[$FUN](T[$_i])] for each alternative type [`T][$_i].
[:zh_CN] 令 [`T][$_j] 为如下所确定的类型：为每个候选类型 [`T][$_i] 构建一个
虚构的函数 [`[$FUN](T[$_i])]。

[:en] The overload [`[$FUN](T[$_j])] selected by overload resolution for
the expression [`[$FUN](std::forward<T>(t))] defines the alternative [`T][$_j]
which is the type of the contained value after assignment.
[:zh_CN] 由为表达式 [`[$FUN](std::forward<T>(t))] 所进行的重载决议所选择的重载
[`[$FUN](T[$_j])]，定义了候选类型 [`T][$_j]，为赋值之后所包含的值的类型。

[para:effects]
[list]
[item]
[:en] If [`*this] holds a [`T][$_j], assigns [`std::forward<T>(t)] to the
value contained in [`*this].
[:zh_CN] 若 [`*this] 持有一个 [`T][$_j]，则将 [`std::forward<T>(t)] 赋值给
[`*this] 所包含的值。

[:en] Otherwise,
[:zh_CN] 否则，

[item]
[:en@~] if [`is_nothrow_constructible_v<T[$_j], T> ||
!is_nothrow_move_constructible_v<T[$_j]>] is [`true], equivalent to
[`emplace<[$j]>(std::forward<T>(t))].
[:zh_CN@~] 若 [`is_nothrow_constructible_v<T[$_j], T> ||
!is_nothrow_move_constructible_v<T[$_j]>] 为 [`true]，则等价于
[`emplace<[$j]>(std::forward<T>(t))]。

[:en] Otherwise,
[:zh_CN] 否则，

[item]
[:en@~] equivalent to [`operator=(variant(std::forward<T>(t)))].
[:zh_CN@~] 等价于 [`operator=(variant(std::forward<T>(t)))]。
[list:end]

[para:postconditions]
[:en] [`holds_alternative<T[$_j]>(*this)] is [`true], with [`T][$_j] selected by
the imaginary function overload resolution described above.
[:zh_CN] [`holds_alternative<T[$_j]>(*this)] 为 [`true]，其中 [`T][$_j] 为由上述
虚构的函数重载决议所选择。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。

[para:remarks]
[:en] This function shall not participate in overload resolution unless
[`is_same_v<decay_t<T>, variant>] is [`false], unless
[`is_assignable_v<T[$_j]&, T> && is_constructible_v<T[$_j], T>] is [`true], and
unless the expression [`[$FUN](std::forward<T>(t))] (with [`[$FUN]] being the
above-mentioned set of imaginary functions) is well-formed.
[:zh_CN] 除非 [`is_same_v<decay_t<T>, variant>] 为 [`false]，除非
[`is_assignable_v<T[$_j]&, T> && is_constructible_v<T[$_j], T>] 为 [`true]，并且
除非表达式 [`[$FUN](std::forward<T>(t))] 良构（其中 [`[$FUN]] 为上述的虚构函数
集合），否则这个函数不能参与重载决议。

[para]
[enter:note]
[codeblock]
variant<string, string> v;
v = "abc";
[codeblock:end]

[:en] is ill-formed, as both alternative types have an equally viable
constructor for the argument.
[:zh_CN] 非良构，因为两个候选类型对这个实参都具有同样可行的构造函数。
[exit:note]

[para]
[:en] The expression inside [`noexcept] is equivalent to:
[:zh_CN] [`noexcept] 中的表达式等价于：

[codeblock:notation]
is_nothrow_assignable_v<T[$_j]&, T> && is_nothrow_constructible_v<T[$_j], T>
[codeblock:end]

[list]
[item]
[:en] If an exception is thrown during the assignment of [`std::forward<T>(t)]
to the value contained in [`*this], the state of the contained value and [`t]
are as defined by the exception safety guarantee of the assignment expression;
[`valueless_by_exception()] will be [`false].
[:zh_CN] 如果在将 [`std::forward<T>(t)] 赋值给 [`*this] 所包含的值的过程中抛出了
异常，则所包含的值和 [`t] 的状态依据赋值表达式的异常安全性保证所定义；
[`valueless_by_exception()] 将为 [`false]。

[item]
[:en] If an exception is thrown during the initialization of the contained
value, the [`variant] object might not hold a value.
[:zh_CN] 若在所包含的值的初始化过程中抛出了异常，则该 [`variant] 对象可能不持有
值。
[list:end]
[exit:description]
