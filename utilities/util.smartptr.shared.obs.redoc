[section#util.smartptr.shared.obs
    [:en] Observers
    [:zh_CN] 探察函数
]

[%@lib@member get[!shared_ptr]]
[codeblock:declaration]
element_type* get() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] The stored pointer.
[:zh_CN] 所存储的指针。
[div:end]

[%@lib@member operator*[!shared_ptr]]
[codeblock:declaration]
T& operator*() const noexcept;
[codeblock:end]

[div:description]
[para:requires]
[:en] [`get() != 0].
[:zh_CN] [`get() != 0]。

[para:returns]
[:en] [`*get()].
[:zh_CN] [`*get()]。

[para:remarks]
[:en] When [`T] is an array type or [=cv] [`void], it is unspecified whether
this member function is declared.
[:zh_CN] 若 [`T] 为数组类型或 [=cv] [`void]，则是否声明这个成员函数是未指明的。

[:en] If it is declared, it is unspecified what its return type is, except that
the declaration (although not necessarily the definition) of the function shall
be well-formed.
[:zh_CN] 若其被声明，则其返回类型是未指明的，但该函数的声明式（虽然它不必是
定义式）应当是良构的。
[div:end]

[%@lib@member operator->[!shared_ptr]]
[codeblock:declaration]
T* operator->() const noexcept;
[codeblock:end]

[div:description]
[para:requires]
[:en] [`get() != 0].
[:zh_CN] [`get() != 0]。

[para:returns]
[:en] [`get()].
[:zh_CN] [`get()]。

[para:remarks]
[:en] When [`T] is an array type, it is unspecified whether this member function
is declared.
[:zh_CN] 若 [`T] 为数组类型，则是否声明这个成员函数是未指明的。

[:en] If it is declared, it is unspecified what its return type is, except that
the declaration (although not necessarily the definition) of the function shall
be well-formed.
[:zh_CN] 若其被声明，则其返回类型是未指明的，但该函数的声明式（虽然它不必是
定义式）应当是良构的。
[div:end]

[%@lib@member operator`[`][!shared_ptr]]
[codeblock:declaration]
element_type& operator[](ptrdiff_t i) const;
[codeblock:end]

[div:description]
[para:requires]
[:en] [`get() != 0 && i >= 0].
[:zh_CN] [`get() != 0 && i >= 0]。

[:en] If [`T] is [`U`[N`]], [`i < N].
[:zh_CN] 当 [`T] 为 [`U`[N`]] 时，[`i < N]。

[para:returns]
[:en] [`get()`[i`]].
[:zh_CN] [`get()`[i`]]。

[para:remarks]
[:en] When [`T] is not an array type, it is unspecified whether this member
function is declared.
[:zh_CN] 若 [`T] 不是数组类型，则是否声明这个成员函数是未指明的。

[:en] If it is declared, it is unspecified what its return type is, except that
the declaration (although not necessarily the definition) of the function shall
be well-formed.
[:zh_CN] 若其被声明，则其返回类型是未指明的，但该函数的声明式（虽然它不必是
定义式）应当是良构的。

[para:throws]
[:en] Nothing.
[:zh_CN] 无。
[div:end]

[%@lib@member use_count[!shared_ptr]]
[codeblock:declaration]
long use_count() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] The number of [`shared_ptr] objects, [`*this] included, that share
ownership with [`*this], or [`0] when [`*this] is empty.
[:zh_CN] 与 [`*this] 共享所有权的 [`shared_ptr] 对象（包括 [`*this]）的数量，
或者当 [`*this] 为空时返回 [`0]。

[para:sync]
[:en] None.
[:zh_CN] 无。

[para]
[begin:note]
[:en] [`get() == nullptr] does not imply a specific return value of
[`use_count()].
[:zh_CN] [`get() == nullptr] 并不意味着 [`use_count()] 的某个特定返回值。
[end:note]

[para]
[begin:note]
[:en] [`weak_ptr<T>::lock()] can affect the return value of [`use_count()].
[:zh_CN] [`weak_ptr<T>::lock()] 能够影响 [`use_count()] 的返回值。
[end:note]

[para]
[begin:note]
[:en] When multiple threads can affect the return value of [`use_count()], the
result should be treated as approximate.
[:zh_CN] 当有多个线程可以影响 [`use_count()] 的返回值时，应当将其结果当做一种
估计值。

[:en] In particular, [`use_count() == 1] does not imply that accesses through
a previously destroyed [`shared_ptr] have in any sense completed.
[:zh_CN] 特别是，[`use_count() == 1] 并不意味着通过之前已被销毁的 [`shared_ptr]
所进行的访问已经完成了。
[end:note]
[div:end]

[%@lib@member operator bool[!shared_ptr]]
[codeblock:declaration]
explicit operator bool() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`get() != 0].
[:zh_CN] [`get() != 0]。
[div:end]

[%@lib@member owner_before[!shared_ptr]]
[codeblock:declaration]
template<class U> bool owner_before(const shared_ptr<U>& b) const noexcept;
template<class U> bool owner_before(const weak_ptr<U>& b) const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] An unspecified value such that
[:zh_CN] 一个未指明的值，使得

[list]
[item]
[:en] [`x.owner_before(y)] defines a strict weak ordering as defined in
[#alg.sorting];
[:zh_CN] [`x.owner_before(y)] 定义一种如 [#alg.sorting] 所定义的严格弱序关系；

[item]
[:en] under the equivalence relation defined by [`owner_before],
[`!a.owner_before(b) && !b.owner_before(a)], two [`shared_ptr] or [`weak_ptr]
instances are equivalent if and only if they share ownership or are both empty.
[:zh_CN] 基于由 [`owner_before] 所定义的等价关系
[`!a.owner_before(b) && !b.owner_before(a)]，当且仅当两个 [`shared_ptr] 或
[`weak_ptr] 实例共享所有权，或者均为空时，它们是等价的。
[list:end]

[div:end]
