[section#execpol
    [:en] Execution policy type traits
    [:zh_CN] 执行策略的类型特征
]

[%@library is_execution_policy]
[codeblock:declaration [!:mark SeeBelow] ]
template<class T> struct is_execution_policy { [=SeeBelow] };
[codeblock:end]

[enter:description]
[para]
[:en] [`is_execution_policy] can be used to detect execution policies for the
purpose of excluding function signatures from otherwise ambiguous overload
resolution participation.
[:zh_CN] [`is_execution_policy] 可被用于检测执行策略，以将函数签名从可能导致歧义
的重载决议集合中排除出去。

[para]
[:en] [`is_execution_policy<T>] shall be a [*Cpp17UnaryTypeTrait] with a
base characteristic of [`true_type] if [`T] is the type of a standard or
[%@impldef additional execution policies supported by parallel algorithms]
implementation-defined execution policy, otherwise [`false_type].
[:zh_CN] [`is_execution_policy<T>] 应当为一种 [*Cpp17UnaryTypeTrait]，当 [`T] 为
某个标准的或[%@impldef 各并行算法所支持的额外的执行策略]由实现定义的执行策略时，
其基础特征为 [`true_type]，否则为 [`false_type]。

[enter:note]
[:en] This provision reserves the privilege of creating non-standard execution
policies to the library implementation.
[:zh_CN] 这一条保留了在程序库实现中创建非标准的执行策略的特权。
[exit:note]

[para]
[:en] The behavior of a program that adds specializations for
[`is_execution_policy] is undefined.
[:zh_CN] 为 [`is_execution_policy] 添加特化式的程序的行为是未定义的。
[exit:description]
