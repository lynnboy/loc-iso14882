[section#util.smartptr.weak.assign
    [:en] Assignment
    [:zh_CN] 赋值
]

[%@library weak_ptr[!operator=]]
[%@library operator=[!weak_ptr]]
[codeblock:declaration]
weak_ptr& operator=(const weak_ptr& r) noexcept;
template<class Y> weak_ptr& operator=(const weak_ptr<Y>& r) noexcept;
template<class Y> weak_ptr& operator=(const shared_ptr<Y>& r) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to [`weak_ptr(r).swap(*this)].
[:zh_CN] 等价于 [`weak_ptr(r).swap(*this)]。

[para:remarks]
[:en] The implementation may meet the effects (and the implied guarantees) via
different means, without creating a temporary object.
[:zh_CN] 实现可以以其他方式满足其效果（及其隐含的保证）而不创建临时对象。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@library weak_ptr[!operator=]]
[%@library operator=[!weak_ptr]]
[codeblock:declaration]
weak_ptr& operator=(weak_ptr&& r) noexcept;
template<class Y> weak_ptr& operator=(weak_ptr<Y>&& r) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to [`weak_ptr(std::move(r)).swap(*this)].
[:zh_CN] 等价于 [`weak_ptr(std::move(r)).swap(*this)]。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]
