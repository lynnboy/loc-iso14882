[section#default.allocator
    [:en] The default allocator
    [:zh_CN] 默认分配器
]

[para]
[:en] All specializations of the default allocator meet the allocator
completeness requirements ([#allocator.requirements.completeness]).
[:zh_CN] 默认分配器的所有特例都满足迭代器完整性的规定
（[#allocator.requirements.completeness]）。

[%@library allocator]
[%@library value_type[!allocator]]
[%@library allocator[!value_type]]
[%@library size_type[!allocator]]
[%@library allocator[!size_type]]
[%@library difference_type[!allocator]]
[%@library allocator[!difference_type]]
[%@library propagate_on_container_move_assignment[!allocator]]
[%@library allocator[!propagate_on_container_move_assignment]]
[%@library is_always_equal[!allocator]]
[%@library allocator[!is_always_equal]]
[%@library operator=[!allocator]]
[%@library allocator[!operator=]]
[codeblock:synopsis]
namespace std {
  template<class T> class allocator {
   public:
    using value_type                             = T;
    using size_type                              = size_t;
    using difference_type                        = ptrdiff_t;
    using propagate_on_container_move_assignment = true_type;
    using is_always_equal                        = true_type;

    constexpr allocator() noexcept;
    constexpr allocator(const allocator&) noexcept;
    template<class U> constexpr allocator(const allocator<U>&) noexcept;
    ~allocator();
    allocator& operator=(const allocator&) = default;

    [[nodiscard]] T* allocate(size_t n);
    void deallocate(T* p, size_t n);
  };
}
[codeblock:end]

[include allocator.members]

[include allocator.globals]
