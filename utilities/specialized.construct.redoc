[section#specialized.construct
    [`construct_at]
]

[%@library construct_at]
[codeblock:declaration]
template<class T, class... Args>
  constexpr T* construct_at(T* location, Args&&... args);

namespace ranges {
  template<class T, class... Args>
    constexpr T* construct_at(T* location, Args&&... args);
}
[codeblock:end]

[div:description]
[para:constraints]
[:en] The expression [`::new (declval<void*>()) T(declval<Args>()...)]
is well-formed when treated as an unevaluated operand.
[:zh_CN] 表达式 [`::new (declval<void*>()) T(declval<Args>()...)] 当作为免求值
操作数时良构。

[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return ::new ([[redoc("^", "n>")]]voidify(*location)) T(std::forward<Args>(args)...);
[codeblock:end]
[div:end]
