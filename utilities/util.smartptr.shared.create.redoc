[section#util.smartptr.shared.create
    [:en] [`shared_ptr] creation
    [:zh_CN] [`shared_ptr] 的创建
]

[para]
[:en] The common requirements that apply to all [`make_shared] and
[`allocate_shared] overloads, unless specified otherwise, are described below.
[:zh_CN] 除非另行指明，下文描述了适用于 [`make_shared] 和 [`allocate_shared] 的
所有重载的一般要求。

[%@library make_shared]
[%@library allocate_shared]
[codeblock:declaration [!:var args] ]
template<class T, ...>
  shared_ptr<T> make_shared([$args]);
template<class T, class A, ...>
  shared_ptr<T> allocate_shared(const A& a, [$args]);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`A] shall satisfy the [*Cpp17Allocator] requirements
([#utilities.allocator.requirements]).
[:zh_CN] [`A] 应当满足 [*Cpp17Allocator] 的规定
（[#utilities.allocator.requirements]）。

[para:effects]
[:en] Allocates memory for an object of type [`T] (or [`U`[N`]] when [`T] is
[`U`[`]], where [`N] is determined from [$args] as specified by the concrete
overload).
[:zh_CN] 为一个 [`T]（或者当 [`T] 为 [`U`[`]] 时为 [`U`[N`]]，其中 [`N] 根据
具体重载的规定从 [$args] 来确定）类型的对象。


[:en] The object is initialized from [$args] as specified by the concrete
overload.
[:zh_CN] 根据具体重载苏哦指定的，以 [$args] 对该对象进行初始化。

[:en] The [`allocate_shared] templates use a copy of [`a] (rebound for an
unspecified [`value_type]) to allocate memory.
[:zh_CN] [`allocate_shared] 模板利用 [`a] 的一个副本（重绑定到某个未指明的
[`value_type]）进行内存分配。

[:en] If an exception is thrown, the functions have no effect.
[:zh_CN] 如果抛出了异常，则该函数没有效果。

[para:returns]
[:en] A [`shared_ptr] instance that stores and owns the address of the newly
constructed object.
[:zh_CN] 一个存储并拥有新近创建的对象的地址的 [`shared_ptr] 实例。

[para:postconditions]
[:en] [`r.get() != 0 && use_count() == 1], where [`r] is the return value.
[:zh_CN] [`r.get() != 0 && use_count() == 1]，其中 [`r] 为返回值。

[para:throws]
[:en] [`bad_alloc], or an exception thrown from [`allocate] or from the
initialization of the object.
[:zh_CN] [`bad_alloc]，或者从 [`allocate] 该对象的初始化中抛出的异常。

[para:remarks]
[list]
[item]
[:en] Implementations should perform no more than one memory allocation.
[:zh_CN] 实现应当进行不多于一次的内存分配。

[enter:note]
[:en] This provides efficiency equivalent to an intrusive smart pointer.
[:zh_CN] 这提供了等价于侵入式智能指针的效率。
[exit:note]

[item]
[:en] When an object of an array type [`U] is specified to have an initial value
of [`u] (of the same type), this shall be interpreted to mean that each array
element of the object has as its initial value the corresponding element from
[`u].
[:zh_CN] 如果数组类型 [`U] 的对象被指定为具有初始值 [`u]（具有相同类型），则应当
将其解释为该对象的每个数组元素都以 [`u] 中的对应元素为初始值。。

[item]
[:en] When an object of an array type is specified to have a default initial
value, this shall be interpreted to mean that each array element of the object
has a default initial value.
[:zh_CN] 如果数组类型的对象被指定为具有默认初始值，则应当将其解释为该对象的每个
数组元素都具有默认初始值。

[item]
[:en] When a (sub)object of a non-array type [`U] is specified to have an
initial value of [`v], or [`U(l...)], where [`l...] is a list of constructor
arguments, [`make_shared] shall initialize this (sub)object via the expression
[`::new(pv) U(v)] or [`::new(pv) U(l...)] respectively, where [`pv] has type
[`void*] and points to storage suitable to hold an object of type
[`remove_cv_t<U>].
[:zh_CN] 如果非数组类型 [`U] 的（子）对象被指定为具有初始值 [`v] 或 [`U(l...)]，
其中 [`l...] 为构造函数实参列表，则 [`make_shared] 应当分别通过表达式
[`::new(pv) U(v)] 或 [`::new(pv) U(l...)] 来初始化该（子）对象，其中 [`pv] 类型
为 [`void*] 并指向适于存储 [`remove_cv_t<U>] 类型的对象的存储。

[item]
[:en] When a (sub)object of a non-array type [`U] is specified to have an
initial value of [`v], or [`U(l...)], where [`l...] is a list of constructor
arguments, [`allocate_shared] shall initialize this (sub)object via the
expression
[:zh_CN] 如果非数组类型 [`U] 的（子）对象被指定为具有初始值 [`v] 或 [`U(l...)]，
其中 [`l...] 为构造函数实参列表，则 [`allocate_shared] 应当分别通过表达式
[list]
[item]
[:en@~] [`allocator_traits<A2>::construct(a2, pv, v)] or
[:zh_CN@~] [`allocator_traits<A2>::construct(a2, pv, v)] 或
[item]
[`allocator_traits<A2>::construct(a2, pv, l...)]
[list:end]
[:en@~] respectively, where [`pv] points to storage suitable to hold an object
of type [`U] and [`a2] of type [`A2] is a rebound copy of the allocator [`a]
passed to [`allocate_shared] such that its [`value_type] is [`remove_cv_t<U>].
[:zh_CN@~] 来初始化该（子）对象，其中 [`pv] 指向适于存储 [`U] 类型的对象的存储，
[`a2] 类型为 [`A2]，是传递给 [`allocate_shared] 的分配器 [`a] 的一个重绑定副本，
其 [`value_type] 为 [`remove_cv_t<U>]。

[item]
[:en] When a (sub)object of non-array type [`U] is specified to have a default
initial value, [`make_shared] shall initialize this (sub)object via the
expression [`::new(pv) U()], where [`pv] has type [`void*] and points to storage
suitable to hold an object of type [`U].
[:zh_CN] 如果非数组类型 [`U] 的（子）对象被指定为具有默认初始值，则
[`make_shared] 应当通过表达式 [`::new(pv) U()] 来初始化该（子）对象，其中 [`pv]
类型为 [`void*] 并指向适于存储 [`U] 类型的对象的存储。

[item]
[:en] When a (sub)object of non-array type [`U] is specified to have a default
initial value, [`allocate_shared] shall initialize this (sub)object via the
expression [`allocator_traits<A2>::construct(a2, pv)], where [`pv] points to
storage suitable to hold an object of type [`U] and [`a2] of type [`A2] is a
rebound copy of the allocator [`a] passed to [`allocate_shared] such that its
[`value_type] is [`remove_cv_t<U>].
[:zh_CN] 如果非数组类型 [`U] 的（子）对象被指定为具有默认初始值，则
[`allocate_shared] 应当通过表达式 [`allocator_traits<A2>::construct(a2, pv)]
来初始化该（子）对象，其中 [`pv] 指向适于存储 [`U] 类型的对象的存储，[`a2] 类型
为 [`A2]，是传递给 [`allocate_shared] 的分配器 [`a] 的一个重绑定副本，其
[`value_type] 为 [`remove_cv_t<U>]。

[item]
[:en] Array elements are initialized in ascending order of their addresses.
[:zh_CN] 数组元素的初始化以其地址增长顺序进行。

[item]
[:en] When the lifetime of the object managed by the return value ends, or when
the initialization of an array element throws an exception, the initialized
elements are destroyed in the reverse order of their original construction.
[:zh_CN] 当由返回值所管理的对象的生存期结束时，或当某个数组元素的初始化抛出了
异常时，已初始化的元素将按照其原来构造的相反顺序销毁。
[list:end]

[para]
[enter:note]
[:en] These functions will typically allocate more memory than [`sizeof(T)] to
allow for internal bookkeeping structures such as the reference counts.
[:zh_CN] 这些函数典型地分配大于 [`sizeof(T)] 的内存，以保存如引用计数这样的内部
簿记结构。
[exit:note]
[exit:description]

[%@library make_shared]
[%@library allocate_shared]
[codeblock:declaration]
template<class T, class... Args>
  shared_ptr<T> make_shared(Args&&... args);                    // [:en] [`T] is not array
                                                                // [|:zh_CN] [`T] 不是数组
template<class T, class A, class... Args>
  shared_ptr<T> allocate_shared(const A& a, Args&&... args);    // [:en] [`T] is not array
                                                                // [|:zh_CN] [`T] 不是数组
[codeblock:end]

[enter:description]
[para:returns]
[:en] A [`shared_ptr] to an object of type [`T] with an initial value
[`T(forward<Args>(args)...)].
[:zh_CN] 指向一个 [`T] 类型对象的 [`shared_ptr]，其初始值为
[`T(forward<Args>(args)...)]。

[para:remarks]
[:en] These overloads shall only participate in overload resolution when [`T]
is not an array type.
[:zh_CN] 仅当 [`T] 不是数组类型时，这些重载才能参与重载决议。

[:en] The [`shared_ptr] constructor called by these functions enables
[`shared_from_this] with the address of the newly constructed object of type
[`T].
[:zh_CN] 这些函数所调用的 [`shared_ptr] 构造函数以新创建的 [`T] 类型对象的地址
启用 [`shared_from_this]。

[para]
[enter:example]
[codeblock]
shared_ptr<int> p = make_shared<int>(); // [:en] [`shared_ptr] to [`int()]
                                        // [|:zh_CN] 指向 [`int()] 的 [`shared_ptr]
shared_ptr<vector<int>> q = make_shared<vector<int>>(16, 1);
  // [:en] [`shared_ptr] to vector of [`16] elements with value [`1]
  // [|:zh_CN] 指向 [`16] 个值为 [`1] 的元素的 [`vector] 的 [`shared_ptr]
[codeblock:end]
[exit:example]
[exit:description]

[%@library make_shared]
[%@library allocate_shared]
[codeblock:declaration]
template<class T> shared_ptr<T>
  make_shared(size_t N);                                        // [:en] [`T] is [`U`[`]]
                                                                // [|:zh_CN] [`T] 为 [`U`[`]]
template<class T, class A>
  shared_ptr<T> allocate_shared(const A& a, size_t N);          // [:en] [`T] is [`U`[`]]
                                                                // [|:zh_CN] [`T] 为 [`U`[`]]
[codeblock:end]

[enter:description]
[para:returns]
[:en] A [`shared_ptr] to an object of type [`U`[N`]] with a default initial
value.
[:zh_CN] 指向一个 [`U`[N`]] 类型并具有默认初始值的对象的 [`shared_ptr]。

[para:remarks]
[:en] These overloads shall only participate in overload resolution when [`T]
is of the form [`U`[`]]
[:zh_CN] 仅当 [`T] 的形式为 [`U`[`]] 时，这些重载才能参与重载决议。

[para]
[enter:example]
[codeblock]
shared_ptr<double[]> p = make_shared<double[]>(1024);
  // [:en] [`shared_ptr] to a value-initialized [`double`[1024`]]
  // [|:zh_CN] 指向经过值初始化的 [`double`[1024`]] 的 [`shared_ptr]
shared_ptr<double[][2][2]> q = make_shared<double[][2][2]>(6);
  // [:en] [`shared_ptr] to a value-initialized [`double`[6`]`[2`]`[2`]]
  // [|:zh_CN] 指向经过值初始化的 [`double`[6`]`[2`]`[2`]] 的 [`shared_ptr]
[codeblock:end]
[exit:example]
[exit:description]

[%@library make_shared]
[%@library allocate_shared]
[codeblock:declaration]
template<class T> shared_ptr<T>
  make_shared();                                                // [:en] [`T] is [`U`[N`]]
                                                                // [|:zh_CN] [`T] 为 [`U`[N`]]
template<class T, class A>
  shared_ptr<T> allocate_shared(const A& a);                    // [:en] [`T] is [`U`[N`]]
                                                                // [|:zh_CN] [`T] 为 [`U`[N`]]
[codeblock:end]

[enter:description]
[para:returns]
[:en] A [`shared_ptr] to an object of type [`T] with a default initial value.
[:zh_CN] 指向一个 [`T] 类型并具有默认初始值的对象的 [`shared_ptr]。

[para:remarks]
[:en] These overloads shall only participate in overload resolution when [`T]
is of the form [`U`[N`]]
[:zh_CN] 仅当 [`T] 的形式为 [`U`[N`]] 时，这些重载才能参与重载决议。

[para]
[enter:example]
[codeblock]
shared_ptr<double[1024]> p = make_shared<double[1024]>();
  // [:en] [`shared_ptr] to a value-initialized [`double`[1024`]]
  // [|:zh_CN] 指向经过值初始化的 [`double`[1024`]] 的 [`shared_ptr]
shared_ptr<double[6][2][2]> q = make_shared<double[6][2][2]>();
  // [:en] [`shared_ptr] to a value-initialized [`double`[6`]`[2`]`[2`]]
  // [|:zh_CN] 指向经过值初始化的 [`double`[6`]`[2`]`[2`]] 的 [`shared_ptr]
[codeblock:end]
[exit:example]
[exit:description]

[%@library make_shared]
[%@library allocate_shared]
[codeblock:declaration]
template<class T>
  shared_ptr<T> make_shared(size_t N,
                            const remove_extent_t<T>& u);       // [:en] [`T] is [`U`[`]]
                                                                // [|:zh_CN] [`T] 为 [`U`[`]]
template<class T, class A>
  shared_ptr<T> allocate_shared(const A& a, size_t N,
                                const remove_extent_t<T>& u);   // [:en] [`T] is [`U`[`]]
                                                                // [|:zh_CN] [`T] 为 [`U`[`]]
[codeblock:end]

[enter:description]
[para:returns]
[:en] A [`shared_ptr] to an object of type [`U`[N`]], where [`U] is
[`remove_extent_t<T>] and each array element has an initial value of [`u].
[:zh_CN] 指向一个 [`U`[N`]] 类型对象的 [`shared_ptr]，其中 [`U] 为
[`remove_extent_t<T>]，且每个数组元素都具有初始值 [`u]。

[para:remarks]
[:en] These overloads shall only participate in overload resolution when [`T]
is of the form [`U`[`]]
[:zh_CN] 仅当 [`T] 的形式为 [`U`[`]] 时，这些重载才能参与重载决议。

[para]
[enter:example]
[codeblock]
shared_ptr<double[]> p = make_shared<double[]>(1024, 1.0);
  // [:en] [`shared_ptr] to a [`double`[1024`]], where each element is [`1.0]
  // [|:zh_CN] 指向 [`double`[1024`]] 的 [`shared_ptr]，其每个元素均为 [`1.0]
shared_ptr<double[][2]> q = make_shared<double[][2]>(6, {1.0, 0.0});
  // [:en] [`shared_ptr] to a [`double`[6`]`[2`]], where each [`double`[2`]] element is [`{1.0, 0.0}]
  // [|:zh_CN] 指向 [`double`[6`]`[2`]] 的 [`shared_ptr]，其每个 [`double`[2`]] 元素均为 [`{1.0, 0.0}]
shared_ptr<vector<int>[]> r = make_shared<vector<int>[]>(4, {1, 2});
  // [:en] [`shared_ptr] to a [`vector<int>`[4`]], where each vector has contents [`{1, 2}]
  // [|:zh_CN] 指向 [`vector<int>`[4`]] 的 [`shared_ptr]，其每个 [`vector] 的内容均为 [`{1, 2}]
[codeblock:end]
[exit:example]
[exit:description]

[%@library make_shared]
[%@library allocate_shared]
[codeblock:declaration]
template<class T>
  shared_ptr<T> make_shared(const remove_extent_t<T>& u);       // [:en] [`T] is [`U`[N`]]
                                                                // [|:zh_CN] [`T] 为 [`U`[N`]]
template<class T, class A>
  shared_ptr<T> allocate_shared(const A& a,
                                const remove_extent_t<T>& u);   // [:en] [`T] is [`U`[N`]]
                                                                // [|:zh_CN] [`T] 为 [`U`[N`]]
[codeblock:end]

[enter:description]
[para:returns]
[:en] A [`shared_ptr] to an object of type [`T], where each array element of
type [`remove_extent_t<T>] has an initial value of [`u].
[:zh_CN] 指向一个 [`T] 类型对象的 [`shared_ptr]，其中每个 [`remove_extent_t<T>]
类型的数组元素都具有初始值 [`u]。

[para:remarks]
[:en] These overloads shall only participate in overload resolution when [`T]
is of the form [`U`[N`]]
[:zh_CN] 仅当 [`T] 的形式为 [`U`[N`]] 时，这些重载才能参与重载决议。

[para]
[enter:example]
[codeblock]
shared_ptr<double[1024]> p = make_shared<double[1024]>(1.0);
  // [:en] [`shared_ptr] to a [`double`[1024`]], where each element is [`1.0]
  // [|:zh_CN] 指向 [`double`[1024`]] 的 [`shared_ptr]，其每个元素均为 [`1.0]
shared_ptr<double[6][2]> q = make_shared<double[6][2]>({1.0, 0.0});
  // [:en] [`shared_ptr] to a [`double`[6`]`[2`]], where each [`double`[2`]] element is [`{1.0, 0.0}]
  // [|:zh_CN] 指向 [`double`[6`]`[2`]] 的 [`shared_ptr]，其每个 [`double`[2`]] 元素均为 [`{1.0, 0.0}]
shared_ptr<vector<int>[4]> r = make_shared<vector<int>[4]>({1, 2});
  // [:en] [`shared_ptr] to a [`vector<int>`[4`]], where each vector has contents [`{1, 2}]
  // [|:zh_CN] 指向 [`vector<int>`[4`]] 的 [`shared_ptr]，其每个 [`vector] 的内容均为 [`{1, 2}]
[codeblock:end]
[exit:example]
[exit:description]

