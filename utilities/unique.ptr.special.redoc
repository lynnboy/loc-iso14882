[section#unique.ptr.special
    [:en] [`unique_ptr] specialized algorithms
    [:zh_CN] [`unique_ptr] 特化的算法
]

[%@library swap(unique_ptr&, unique_ptr&)]
[codeblock:declaration]
template<class T, class D> void swap(unique_ptr<T, D>& x, unique_ptr<T, D>& y) noexcept;
[codeblock:end]

[enter:description]
[para:remarks]
[:en] This function shall not participate in overload resolution unless
[`is_swappable_v<D>] is [`true].
[:zh_CN] 除非 [`is_swappable_v<D>] 为 [`true]，否则这个函数不能参与重载决议。

[para:effects]
[:en] Calls [`x.swap(y)].
[:zh_CN] 调用 [`x.swap(y)]。
[exit:description]

[%@library operator==[!unique_ptr]]
[%@library unique_ptr[!operator==]]
[codeblock:declaration]
template<class T1, class D1, class T2, class D2>
  bool operator==(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`x.get() == y.get()].
[:zh_CN] [`x.get() == y.get()]。
[exit:description]

[%@library operator!=[!unique_ptr]]
[%@library unique_ptr[!operator!=]]
[codeblock:declaration]
template<class T1, class D1, class T2, class D2>
  bool operator!=(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`x.get() != y.get()].
[:zh_CN] [`x.get() != y.get()]。
[exit:description]

[%@library operator<[!unique_ptr]]
[%@library unique_ptr[!operator<]]
[codeblock:declaration]
template<class T1, class D1, class T2, class D2>
  bool operator<(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
[codeblock:end]

[enter:description]
[para:requires]
[:en] Let [`[*CT]] denote
[:zh_CN] 令 [`[*CT]] 代表

[codeblock:notation]
common_type_t<typename unique_ptr<T1, D1>::pointer,
              typename unique_ptr<T2, D2>::pointer>
[codeblock:end]

[:en] Then the specialization [`less<[*CT]>] shall be a function object type
([#function.objects]) that induces a strict weak ordering ([#alg.sorting]) on
the pointer values.
[:zh_CN] 特例 [`less<[*CT]>] 应当是函数对象类型（[#function.objects]），且为
指针值引入一种严格弱序（[#alg.sorting]）。

[para:returns]
[:en] [`less<[*CT]>()(x.get(), y.get())].
[:zh_CN] [`less<[*CT]>()(x.get(), y.get())]。

[para:remarks]
[:en] If [`unique_ptr<T1, D1>::pointer] is not implicitly convertible to
[`[*CT]] or [`unique_ptr<T2, D2>::pointer] is not implicitly convertible to
[`[*CT]], the program is ill-formed.
[:zh_CN] 若 [`unique_ptr<T1, D1>::pointer] 不能隐式转换为 [`[*CT]] 或者
[`unique_ptr<T2, D2>::pointer] 不能隐式转换为 [`[*CT]]，则程序非良构。
[exit:description]

[%@library operator<=[!shared_ptr]]
[%@library shared_ptr[!operator<=]]
[codeblock:declaration]
template<class T1, class D1, class T2, class D2>
  bool operator<=(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`!(y < x)].
[:zh_CN] [`!(y < x)]。
[exit:description]

[%@library operator>[!unique_ptr]]
[%@library unique_ptr[!operator>]]
[codeblock:declaration]
template<class T1, class D1, class T2, class D2>
  bool operator>(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`y < x].
[:zh_CN] [`y < x]。
[exit:description]

[%@library operator>=[!unique_ptr]]
[%@library unique_ptr[!operator>=]]
[codeblock:declaration]
template<class T1, class D1, class T2, class D2>
  bool operator>=(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`!(x < y)].
[:zh_CN] [`!(x < y)]。
[exit:description]

[%@library operator==[!unique_ptr]]
[%@library unique_ptr[!operator==]]
[codeblock:declaration]
template<class T, class D>
  bool operator==(const unique_ptr<T, D>& x, nullptr_t) noexcept;
template<class T, class D>
  bool operator==(nullptr_t, const unique_ptr<T, D>& x) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`!x].
[:zh_CN] [`!x]。
[exit:description]

[%@library operator!=[!unique_ptr]]
[%@library unique_ptr[!operator!=]]
[codeblock:declaration]
template<class T, class D>
  bool operator!=(const unique_ptr<T, D>& x, nullptr_t) noexcept;
template<class T, class D>
  bool operator!=(nullptr_t, const unique_ptr<T, D>& x) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`(bool)x].
[:zh_CN] [`(bool)x]。
[exit:description]

[%@library operator<[!unique_ptr]]
[%@library unique_ptr[!operator<]]
[codeblock:declaration]
template<class T, class D>
  bool operator<(const unique_ptr<T, D>& x, nullptr_t);
template<class T, class D>
  bool operator<(nullptr_t, const unique_ptr<T, D>& x);
[codeblock:end]

[enter:description]
[para:requires]
[:en] The specialization [`less<unique_ptr<T, D>::pointer>] shall be a function
object type ([#function.objects]) that induces a strict weak ordering
([#alg.sorting]) on the pointer values.
[:zh_CN] 特例 [`less<unique_ptr<T, D>::pointer>] 应当是函数对象类型
（[#function.objects]），且为指针值引入一种严格弱序（[#alg.sorting]）。

[para:returns]
[:en] The first function template returns
[:zh_CN] 第一个函数模板返回

[codeblock:notation]
less<unique_ptr<T, D>::pointer>()(x.get(), nullptr)
[codeblock:end]

[:en] The second function template returns
[:zh_CN] 第二个函数模板返回

[codeblock:notation]
less<unique_ptr<T, D>::pointer>()(nullptr, x.get())
[codeblock:end]
[exit:description]

[%@library operator>[!unique_ptr]]
[%@library unique_ptr[!operator>]]
[codeblock:declaration]
template<class T, class D>
  bool operator>(const unique_ptr<T, D>& x, nullptr_t);
template<class T, class D>
  bool operator>(nullptr_t, const unique_ptr<T, D>& x);
[codeblock:end]

[enter:description]
[para:returns]
[:en] The first function template returns [`nullptr < x].
[:zh_CN] 第一个函数模板返回 [`nullptr < x]。

[:en] The second function template returns [`x < nullptr].
[:zh_CN] 第二个函数模板返回 [`x < nullptr]。
[exit:description]

[%@library operator<=[!unique_ptr]]
[%@library unique_ptr[!operator<=]]
[codeblock:declaration]
template<class T, class D>
  bool operator<=(const unique_ptr<T, D>& x, nullptr_t);
template<class T, class D>
  bool operator<=(nullptr_t, const unique_ptr<T, D>& x);
[codeblock:end]

[enter:description]
[para:returns]
[:en] The first function template returns [`!(nullptr < x)].
[:zh_CN] 第一个函数模板返回 [`!(nullptr < x)]。

[:en] The second function template returns [`!(x < nullptr)].
[:zh_CN] 第二个函数模板返回 [`!(x < nullptr)]。
[exit:description]

[%@library operator>=[!unique_ptr]]
[%@library unique_ptr[!operator>=]]
[codeblock:declaration]
template<class T, class D>
  bool operator>=(const unique_ptr<T, D>& x, nullptr_t);
template<class T, class D>
  bool operator>=(nullptr_t, const unique_ptr<T, D>& x);
[codeblock:end]

[enter:description]
[para:returns]
[:en] The first function template returns [`!(x < nullptr)].
[:zh_CN] 第一个函数模板返回 [`!(x < nullptr)]。

[:en] The second function template returns [`!(nullptr < x)].
[:zh_CN] 第二个函数模板返回 [`!(nullptr < x)]。
[exit:description]
