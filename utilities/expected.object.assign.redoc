[section#expected.object.assign
    [:en] Assignment
    [:zh_CN] 赋值
]

[para]
[:en] This subclause makes use of the following exposition-only function template:
[:zh_CN] 本子条款利用如下的仅用于阐释的函数模板：

[codeblock]
template<class T, class U, class... Args>
constexpr void [[redoc("*>")]]reinit-expected(T& newval, U& oldval, Args&&... args) {  // [=expos]
  if constexpr (is_nothrow_constructible_v<T, Args...>) {
    destroy_at(addressof(oldval));
    construct_at(addressof(newval), std::forward<Args>(args)...);
  } else if constexpr (is_nothrow_move_constructible_v<T>) {
    T tmp(std::forward<Args>(args)...);
    destroy_at(addressof(oldval));
    construct_at(addressof(newval), std::move(tmp));
  } else {
    U tmp(std::move(oldval));
    destroy_at(addressof(oldval));
    try {
      construct_at(addressof(newval), std::forward<Args>(args)...);
    } catch (...) {
      construct_at(addressof(oldval), std::move(tmp));
      throw;
    }
  }
}
[codeblock:end]

[%@lib@member operator=[!expected]]
[codeblock:declaration]
constexpr expected& operator=(const expected& rhs);
[codeblock:end]

[div:description]
[para:effects]
[list]
[item]
[:en] If [`this->has_value() && rhs.has_value()] is [`true], equivalent to
[`[*val] = *rhs].
[:zh_CN] 如果 [`this->has_value() && rhs.has_value()] 为 [`true]，则等价于
[`[*val] = *rhs]。
[item]
[:en] Otherwise, if [`this->has_value()] is [`true], equivalent to:
[:zh_CN] 否则，如果 [`this->has_value()] 为 [`true]，则等价于
[codeblock]
[[redoc("*>")]]reinit-expected([[redoc("*>")]]unex, [[redoc("*>")]]val, rhs.error())
[codeblock:end]
[item]
[:en] Otherwise, if [`rhs.has_value()] is [`true], equivalent to:
[:zh_CN] 否则，如果 [`rhs.has_value()] 为 [`true]，则等价于
[codeblock]
[[redoc("*>")]]reinit-expected([[redoc("*>")]]val, [[redoc("*>")]]unex, *rhs)
[codeblock:end]
[item]
[:en] Otherwise, equivalent to [`[*unex] = rhs.error()].
[:zh_CN] 否则，等价于 [`[*unex] = rhs.error()]。
[list:end]

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。

[para:remarks]
[:en] This operator is defined as deleted unless
[:zh_CN] 本运算符被定义为弃置的，除非：
[list]
[item]
[:en@~] [`is_copy_assignable_v<T>] is [`true] and
[:zh_CN@~] [`is_copy_assignable_v<T>] 为 [`true] 且
[item]
[:en@~] [`is_copy_constructible_v<T>] is [`true] and
[:zh_CN@~] [`is_copy_constructible_v<T>] 为 [`true] 且
[item]
[:en@~] [`is_copy_assignable_v<E>] is [`true] and
[:zh_CN@~] [`is_copy_assignable_v<E>] 为 [`true] 且
[item]
[:en@~] [`is_copy_constructible_v<E>] is [`true] and
[:zh_CN@~] [`is_copy_constructible_v<E>] 为 [`true] 且
[item]
[:en@~] [`is_nothrow_move_constructible_v<T> || is_nothrow_move_constructible_v<E>] is [`true].
[:zh_CN@~] [`is_nothrow_move_constructible_v<T> || is_nothrow_move_constructible_v<E>] 为 [`true]。
[list:end]
[div:end]

[%@lib@member operator=[!expected]]
[codeblock:declaration]
constexpr expected& operator=(expected&& rhs) noexcept([[redoc("[=seebelow]")]]);
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en@~] [`is_move_constructible_v<T>] is [`true] and
[:zh_CN@~] [`is_move_constructible_v<T>] 为 [`true] 且
[item]
[:en@~] [`is_move_assignable_v<T>] is [`true] and
[:zh_CN@~] [`is_move_assignable_v<T>] 为 [`true] 且
[item]
[:en@~] [`is_move_constructible_v<E>] is [`true] and
[:zh_CN@~] [`is_move_constructible_v<E>] 为 [`true] 且
[item]
[:en@~] [`is_move_assignable_v<E>] is [`true] and
[:zh_CN@~] [`is_move_assignable_v<E>] 为 [`true] 且
[item]
[:en@~] [`is_nothrow_move_constructible_v<T> || is_nothrow_move_constructible_v<E>] is [`true].
[:zh_CN@~] [`is_nothrow_move_constructible_v<T> || is_nothrow_move_constructible_v<E>] 为 [`true]。
[list:end]

[para:effects]
[list]
[item]
[:en] If [`this->has_value() && rhs.has_value()] is [`true], equivalent to
[`[*val] = std::move(*rhs)].
[:zh_CN] 如果 [`this->has_value() && rhs.has_value()] 为 [`true]，则等价于
[`[*val] = std::move(*rhs)]。
[item]
[:en] Otherwise, if [`this->has_value()] is [`true], equivalent to:
[:zh_CN] 否则，如果 [`this->has_value()] 为 [`true]，则等价于
[codeblock]
[[redoc("*>")]]reinit-expected([[redoc("*>")]]unex, [[redoc("*>")]]val, std::move(rhs.error()))
[codeblock:end]
[item]
[:en] Otherwise, if [`rhs.has_value()] is [`true], equivalent to:
[:zh_CN] 否则，如果 [`rhs.has_value()] 为 [`true]，则等价于
[codeblock]
[[redoc("*>")]]reinit-expected([[redoc("*>")]]val, [[redoc("*>")]]unex, std::move(*rhs))
[codeblock:end]
[item]
[:en] Otherwise, equivalent to [`[*unex] = std::move(rhs.error())].
[:zh_CN] 否则，等价于 [`[*unex] = std::move(rhs.error())]。
[list:end]

[:en] Then, if no exception was thrown, equivalent to:
[`has_val = rhs.has_value(); return *this;]
[:zh_CN] 然后，若未抛出异常，则等价于：
[`has_val = rhs.has_value(); return *this;]

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。

[para:remarks]
[:en] The exception specification is equivalent to:
[:zh_CN] 其异常说明等价于：
[codeblock]
is_nothrow_move_assignable_v<T> && is_nothrow_move_constructible_v<T> &&
is_nothrow_move_assignable_v<E> && is_nothrow_move_constructible_v<E>
[codeblock:end]
[div:end]

[%@lib@member operator=[!expected]]
[codeblock:declaration]
template<class U = remove_cv_t<T>>
  constexpr expected& operator=(U&& v);
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en@~] [`is_same_v<expected, remove_cvref_t<U>>] is [`false]; and
[:zh_CN@~] [`is_same_v<expected, remove_cvref_t<U>>] 为 [`false]；且
[item]
[:en@~] [`remove_cvref_t<U>] is not a specialization of [`unexpected]; and
[:zh_CN@~] [`remove_cvref_t<U>] 不是 [`unexpected] 的特例；且
[item]
[:en@~] [`is_constructible_v<T, U>] is [`true]; and
[:zh_CN@~] [`is_constructible_v<T, U>] 为 [`true]；且
[item]
[:en@~] [`is_assignable_v<T&, U>] is [`true]; and
[:zh_CN@~] [`is_assignable_v<T&, U>] 为 [`true]；且
[item]
[:en@~]
[`is_nothrow_constructible_v<T, U> || is_nothrow_move_constructible_v<T> || is_nothrow_move_constructible_v<E>]
is [`true].
[:zh_CN@~]
[`is_nothrow_constructible_v<T, U> || is_nothrow_move_constructible_v<T> || is_nothrow_move_constructible_v<E>]
为 [`true]。
[list:end]

[para:effects]
[list]
[item]
[:en] If [`has_value()] is [`true], equivalent to: [`[*val] = std::forward<U>(v)]
[:zh_CN] 如果 [`has_value()] 为 [`true]，则等价于：[`[*val] = std::forward<U>(v)]
[item]
[:en] Otherwise, equivalent to:
[:zh_CN] 否则，等价于：
[codeblock]
[[redoc("*>")]]reinit-expected([[redoc("*>")]]val, [[redoc("*>")]]unex, std::forward<U>(v));
[[redoc("*>")]]has_val = true;
[codeblock:end]
[list:end]

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@lib@member operator=[!expected]]
[codeblock:declaration]
template<class G>
  constexpr expected& operator=(const unexpected<G>& e);
template<class G>
  constexpr expected& operator=(unexpected<G>&& e);
[codeblock:end]

[div:description]
[para]
[:en] Let [`GF] be [`const G&] for the first overload and [`G] for the second overload.
[:zh_CN] 令 [`GF] 对于第一个重载为 [`const G&]，而对于第二个重载为 [`G]。

[para:constraints]
[list]
[item]
[:en] [`is_constructible_v<E, GF>] is [`true]; and
[:zh_CN] [`is_constructible_v<E, GF>] 为 [`true]；且
[item]
[:en@~] [`is_assignable_v<E&, GF>] is [`true]; and
[:zh_CN@~] [`is_assignable_v<E&, GF>] 为 [`true]；且
[item]
[:en@~]
[`is_nothrow_constructible_v<E, GF> || is_nothrow_move_constructible_v<T> || is_nothrow_move_constructible_v<E>]
is [`true].
[:zh_CN@~]
[`is_nothrow_constructible_v<E, GF> || is_nothrow_move_constructible_v<T> || is_nothrow_move_constructible_v<E>]
为 [`true]。
[list:end]

[para:effects]
[list]
[item]
[:en] If [`has_value()] is [`true], equivalent to:
[:zh_CN] 如果 [`has_value()] 为 [`true]，则等价于：
[codeblock]
[[redoc("*>")]]reinit-expected([[redoc("*>")]]unex, [[redoc("*>")]]val, std::forward<GF>(e.error()));
[[redoc("*>")]]has_val = false;
[codeblock:end]
[item]
[:en] Otherwise, equivalent to: [`[*unex] = std::forward<GF>(e.error());]
[:zh_CN] 否则，等价于：[`[*unex] = std::forward<GF>(e.error());]
[list:end]

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@lib@member emplace[!expected]]
[codeblock:declaration]
template<class... Args>
  constexpr T& emplace(Args&&... args) noexcept;
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`is_nothrow_constructible_v<T, Args...>] is [`true].
[:zh_CN] [`is_nothrow_constructible_v<T, Args...>] 为 [`true]。

[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
if (has_value()) {
  destroy_at(addressof([[redoc("*>")]]val));
} else {
  destroy_at(addressof([[redoc("*>")]]unex));
  [[redoc("*>")]]has_val = true;
}
return *construct_at(addressof([[redoc("*>")]]val), std::forward<Args>(args)...);
[codeblock:end]
[div:end]

[%@lib@member emplace[!expected]]
[codeblock:declaration]
template<class U, class... Args>
  constexpr T& emplace(initializer_list<U> il, Args&&... args) noexcept;
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`is_nothrow_constructible_v<T, initializer_list<U>&, Args...>] is [`true].
[:zh_CN] [`is_nothrow_constructible_v<T, initializer_list<U>&, Args...>] 为 [`true]。

[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
if (has_value()) {
  destroy_at(addressof([[redoc("*>")]]val));
} else {
  destroy_at(addressof([[redoc("*>")]]unex));
  [[redoc("*>")]]has_val = true;
}
return *construct_at(addressof([[redoc("*>")]]val), il, std::forward<Args>(args)...);
[codeblock:end]
[div:end]
