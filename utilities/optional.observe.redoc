[section#optional.observe
    [:en] Observers
    [:zh_CN] 探察函数
]

[%@lib@member operator->[!optional]]
[codeblock:declaration]
constexpr const T* operator->() const noexcept;
constexpr T* operator->() noexcept;
[codeblock:end]

[div:description]
[para:expects]
[:en] [`*this] contains a value.
[:zh_CN] [`*this] 包含值。

[para:returns]
[:en] [`val].
[:zh_CN] [`val]。

[para:remarks]
[:en] These functions are constexpr functions.
[:zh_CN] 这些函数为 constexpr 函数。
[div:end]

[%@lib@member operator*[!optional]]
[codeblock:declaration]
constexpr const T& operator*() const & noexcept;
constexpr T& operator*() & noexcept;
[codeblock:end]

[div:description]
[para:expects]
[:en] [`*this] contains a value.
[:zh_CN] [`*this] 包含值。

[para:returns]
[:en] [`val].
[:zh_CN] [`val]。

[para:remarks]
[:en] These functions are constexpr functions.
[:zh_CN] 这些函数为 constexpr 函数。
[div:end]

[%@lib@member operator*[!optional]]
[codeblock:declaration]
constexpr T&& operator*() && noexcept;
constexpr const T&& operator*() const && noexcept;
[codeblock:end]

[div:description]
[para:expects]
[:en] [`*this] contains a value.
[:zh_CN] [`*this] 包含值。

[para:effects]
[:en] Equivalent to: [`return std::move(*val);]
[:zh_CN] 等价于：[`return std::move(*val);]
[div:end]

[%@lib@member operator bool[!optional]]
[codeblock:declaration]
constexpr explicit operator bool() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`true] if and only if [`*this] contains a value.
[:zh_CN] 当且仅当 [`*this] 包含值时为 [`true]。

[para:remarks]
[:en] This function is a constexpr function.
[:zh_CN] 这个函数为 constexpr 函数。
[div:end]

[%@lib@member has_value[!optional]]
[codeblock:declaration]
constexpr bool has_value() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`true] if and only if [`*this] contains a value.
[:zh_CN] 当且仅当 [`*this] 包含值时为 [`true]。

[para:remarks]
[:en] This function is a constexpr function.
[:zh_CN] 这个函数为 constexpr 函数。
[div:end]

[%@lib@member value[!optional]]
[codeblock:declaration]
constexpr const T& value() const &;
constexpr T& value() &;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return has_value() ? *val : throw bad_optional_access();
[codeblock:end]
[div:end]

[%@lib@member value[!optional]]
[codeblock:declaration]
constexpr T&& value() &&;
constexpr const T&& value() const &&;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return has_value() ? std::move(*val) : throw bad_optional_access();
[codeblock:end]
[div:end]

[%@lib@member value_or[!optional]]
[codeblock:declaration]
template<class U> constexpr T value_or(U&& v) const &;
[codeblock:end]

[div:description]
[para:mandates]
[:en] [`is_copy_constructible_v<T> && is_convertible_v<U&&, T>] is [`true].
[:zh_CN] [`is_copy_constructible_v<T> && is_convertible_v<U&&, T>] 为 [`true]。

[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return has_value() ? **this : static_cast<T>(std::forward<U>(v));
[codeblock:end]
[div:end]

[%@lib@member value_or[!optional]]
[codeblock:declaration]
template<class U> constexpr T value_or(U&& v) &&;
[codeblock:end]

[div:description]
[para:mandates]
[:en] [`is_move_constructible_v<T> && is_convertible_v<U&&, T>] is [`true].
[:zh_CN] [`is_move_constructible_v<T> && is_convertible_v<U&&, T>] 为 [`true]。

[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return has_value() ? std::move(**this) : static_cast<T>(std::forward<U>(v));
[codeblock:end]
[div:end]
