[section#optional.observe
    [:en] Observers
    [:zh_CN] 探察函数
]

[%@library operator->[!optional]]
[%@library optional[!operator->]]
[codeblock:declaration]
constexpr const T* operator->() const;
constexpr T* operator->();
[codeblock:end]

[begin:description]
[para:requires]
[:en] [`*this] contains a value.
[:zh_CN] [`*this] 包含值。

[para:returns]
[:en] [`val].
[:zh_CN] [`val]。

[para:throws]
[:en] Nothing.
[:zh_CN] 无。

[para:remarks]
[:en] These functions shall be constexpr functions.
[:zh_CN] 这些函数应当为 constexpr 函数。
[end:description]

[%@library operator*[!optional]]
[%@library optional[!operator*]]
[codeblock:declaration]
constexpr const T& operator*() const&;
constexpr T& operator*() &;
[codeblock:end]

[begin:description]
[para:requires]
[:en] [`*this] contains a value.
[:zh_CN] [`*this] 包含值。

[para:returns]
[:en] [`val].
[:zh_CN] [`val]。

[para:throws]
[:en] Nothing.
[:zh_CN] 无。

[para:remarks]
[:en] These functions shall be constexpr functions.
[:zh_CN] 这些函数应当为 constexpr 函数。
[end:description]

[%@library operator*[!optional]]
[%@library optional[!operator*]]
[codeblock:declaration]
constexpr T&& operator*() &&;
constexpr const T&& operator*() const&&;
[codeblock:end]

[begin:description]
[para:requires]
[:en] [`*this] contains a value.
[:zh_CN] [`*this] 包含值。

[para:effects]
[:en] Equivalent to: [`return std::move(*val);]
[:zh_CN] 等价于：[`return std::move(*val);]
[end:description]

[%@library operator bool[!optional]]
[%@library optional[!operator bool]]
[codeblock:declaration]
constexpr explicit operator bool() const noexcept;
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`true] if and only if [`*this] contains a value.
[:zh_CN] 当且仅当 [`*this] 包含值时为 [`true]。

[para:remarks]
[:en] This function shall be a constexpr function.
[:zh_CN] 这个函数应当为 constexpr 函数。
[end:description]

[%@library has_value[!optional]]
[%@library optional[!has_value]]
[codeblock:declaration]
constexpr bool has_value() const noexcept;
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`true] if and only if [`*this] contains a value.
[:zh_CN] 当且仅当 [`*this] 包含值时为 [`true]。

[para:remarks]
[:en] This function shall be a constexpr function.
[:zh_CN] 这个函数应当为 constexpr 函数。
[end:description]

[%@library value[!optional]]
[%@library optional[!value]]
[codeblock:declaration]
constexpr const T& value() const&;
constexpr T& value() &;
[codeblock:end]

[begin:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：

[codeblock:notation]
return bool(*this) ? *val : throw bad_optional_access();
[codeblock:end]
[end:description]

[%@library value[!optional]]
[%@library optional[!value]]
[codeblock:declaration]
constexpr T&& value() &&;
constexpr const T&& value() const&&;
[codeblock:end]

[begin:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：

[codeblock:notation]
return bool(*this) ? std::move(*val) : throw bad_optional_access();
[codeblock:end]
[end:description]

[%@library value_or[!optional]]
[%@library optional[!value_or]]
[codeblock:declaration]
template<class U> constexpr T value_or(U&& v) const&;
[codeblock:end]

[begin:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：

[codeblock:notation]
return bool(*this) ? **this : static_cast<T>(std::forward<U>(v));
[codeblock:end]

[para:remarks]
[:en] If [`is_copy_constructible_v<T> && is_convertible_v<U&&, T>] is [`false],
the program is ill-formed.
[:zh_CN] 若 [`is_copy_constructible_v<T> && is_convertible_v<U&&, T>] 为
[`false]，则程序非良构。
[end:description]

[%@library value_or[!optional]]
[%@library optional[!value_or]]
[codeblock:declaration]
template<class U> constexpr T value_or(U&& v) &&;
[codeblock:end]

[begin:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：

[codeblock:notation]
return bool(*this) ? std::move(**this) : static_cast<T>(std::forward<U>(v));
[codeblock:end]

[para:remarks]
[:en] If [`is_move_constructible_v<T> && is_convertible_v<U&&, T>] is [`false],
the program is ill-formed.
[:zh_CN] 若 [`is_move_constructible_v<T> && is_convertible_v<U&&, T>] 为
[`false]，则程序非良构。
[end:description]
