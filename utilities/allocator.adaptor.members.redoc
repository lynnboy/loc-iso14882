[section#allocator.adaptor.members
    [:en] Members
    [:zh_CN] 成员
]

[para]
[:en]
In the [`construct] member functions, [`[^OUTERMOST](x)] is
[`[^OUTERMOST](x.outer_allocator())] if the expression [`x.outer_allocator()] is
valid ([#temp.deduct]) and [`x] otherwise; [`[^OUTERMOST_ALLOC_TRAITS](x)]
is [`allocator_traits<remove_reference_t<decltype([^OUTERMOST](x))>>].
[:zh_CN]
成员函数 [`construct] 中，若表达式 [`x.outer_allocator()] 有效（[#temp.deduct]）
则 [`[^OUTERMOST](x)] 为 [`[^OUTERMOST](x.outer_allocator())]，否则为 [`x]；
[`[^OUTERMOST_ALLOC_TRAITS](x)] 为
[`allocator_traits<remove_reference_t<decltype([^OUTERMOST](x))>>]。

[begin:note]
[:en]
[`[^OUTERMOST](x)] and [`[^OUTERMOST_ALLOC_TRAITS](x)] are recursive operations.
[:zh_CN]
[`[^OUTERMOST](x)] 和 [`[^OUTERMOST_ALLOC_TRAITS](x)] 是递归操作。

[:en]
It is incumbent upon the definition of [`outer_allocator()] to ensure that the
recursion terminates.
[:zh_CN]
确保该递归终止的职责在于 [`outer_allocator()] 的定义式。

[:en]
It will terminate for all instantiations of [`scoped_allocator_adaptor].
[:zh_CN]
所有 [`scoped_allocator_adaptor] 的实例化均会终止该递归。
[end:note]

[%@lib@member inner_allocator[!scoped_allocator_adaptor]]
[codeblock:declaration]
inner_allocator_type& inner_allocator() noexcept;
const inner_allocator_type& inner_allocator() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`*this] if [`sizeof...(InnerAllocs)] is zero; otherwise, [`inner].
[:zh_CN] 如果 [`sizeof...(InnerAllocs)] 为零，则为 [`*this]；否则为 [`inner]。
[div:end]

[%@lib@member outer_allocator[!scoped_allocator_adaptor]]
[codeblock:declaration]
outer_allocator_type& outer_allocator() noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`static_cast<OuterAlloc&>(*this)].
[:zh_CN] [`static_cast<OuterAlloc&>(*this)]。
[div:end]

[%@lib@member outer_allocator[!scoped_allocator_adaptor]]
[codeblock:declaration]
const outer_allocator_type& outer_allocator() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`static_cast<const OuterAlloc&>(*this)].
[:zh_CN] [`static_cast<const OuterAlloc&>(*this)]。
[div:end]

[%@lib@member allocate[!scoped_allocator_adaptor]]
[codeblock:declaration]
[[nodiscard]] pointer allocate(size_type n);
[codeblock:end]

[div:description]
[para:returns]
[:en] [`allocator_traits<OuterAlloc>::allocate(outer_allocator(), n)].
[:zh_CN] [`allocator_traits<OuterAlloc>::allocate(outer_allocator(), n)]。
[div:end]

[%@lib@member allocate[!scoped_allocator_adaptor]]
[codeblock:declaration]
[[nodiscard]] pointer allocate(size_type n, const_void_pointer hint);
[codeblock:end]

[div:description]
[para:returns]
[:en] [`allocator_traits<OuterAlloc>::allocate(outer_allocator(), n, hint)].
[:zh_CN] [`allocator_traits<OuterAlloc>::allocate(outer_allocator(), n, hint)]。
[div:end]

[%@lib@member deallocate[!scoped_allocator_adaptor]]
[codeblock:declaration]
void deallocate(pointer p, size_type n) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] As if by:
[`allocator_traits<OuterAlloc>::deallocate(outer_allocator(), p, n);]
[:zh_CN] 如同执行：
[`allocator_traits<OuterAlloc>::deallocate(outer_allocator(), p, n);]
[div:end]

[%@lib@member max_size[!scoped_allocator_adaptor]]
[codeblock:declaration]
size_type max_size() const;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`allocator_traits<OuterAlloc>::max_size(outer_allocator())].
[:zh_CN] [`allocator_traits<OuterAlloc>::max_size(outer_allocator())]。
[div:end]

[%@lib@member construct[!scoped_allocator_adaptor]]
[codeblock:declaration]
template<class T, class... Args>
  void construct(T* p, Args&&... args);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
apply([p, this](auto&&... newargs) {
        [[redoc("^>")]]OUTERMOST_ALLOC_TRAITS(*this)::construct(
          [[redoc("^>")]]OUTERMOST(*this), p,
          std::forward<decltype(newargs)>(newargs)...);
      },
      uses_allocator_construction_args<T>(inner_allocator(),
                                          std::forward<Args>(args)...));
[codeblock:end]
[div:end]

[%@lib@member destroy[!scoped_allocator_adaptor]]
[codeblock:declaration]
template<class T>
  void destroy(T* p);
[codeblock:end]

[div:description]
[para:effects]
[:en] Calls
[`[^OUTERMOST_ALLOC_TRAITS](*this)::destroy([^OUTERMOST](*this), p)].
[:zh_CN] 调用
[`[^OUTERMOST_ALLOC_TRAITS](*this)::destroy([^OUTERMOST](*this), p)]。
[div:end]

[%@lib@member select_on_container_copy_construction[!scoped_allocator_adaptor]]
[codeblock:declaration]
scoped_allocator_adaptor select_on_container_copy_construction() const;
[codeblock:end]

[div:description]
[para:returns]
[:en] A new [`scoped_allocator_adaptor] object where each allocator [`A] in the
adaptor is initialized from the result of calling
[`allocator_traits<A>::select_on_container_copy_construction()] on the
corresponding allocator in [`*this].
[:zh_CN] 一个新的 [`scoped_allocator_adaptor] 对象，该适配器中的每个分配器 [`A]
是以对 [`*this] 中的对应分配器调用
[`allocator_traits<A>::select_on_container_copy_construction()] 的结果进行初始化
的。
[div:end]
