[section#tuple.syn
	[:en] Header [`<tuple>] synopsis
	[:zh_CN] 头文件 [`<tuple>] 纲要
]

[%@hdr@def tuple]
[codeblock:synopsis]
// [:en] all freestanding \
[:zh_CN] 全自立式
#include <compare>              // [:en] see [#compare.syn] \
                                [:zh_CN] 参见 [#compare.syn]

namespace std {
  // [:en] [#tuple.tuple], class template [`tuple] \
  [:zh_CN] [#tuple.tuple]，类模板 [`tuple]
  template<class... Types>
    class tuple;

  // [:en] [#tuple.like], concept [*:c tuple-like] \
  [:zh_CN] [#tuple.like]，概念 [*:c tuple-like]
  template<class T>
    concept [[redoc("*:c>")]]tuple-like = @\seebelownc@;         // [=expos]
  template<class T>
    concept [[redoc("*:c>")]]pair-like =                     // [=expos]
      [[redoc("*:c>")]]tuple-like<T> && tuple_size_v<remove_cvref_t<T>> == 2;

  // [:en] [#tuple.common.ref], [`common_reference] related specializations \
  [:zh_CN] [#tuple.common.ref]，[`common_reference] 相关特例
  template<[[redoc("*:c>")]]tuple-like TTuple, [[redoc("*:c>")]]tuple-like UTuple,
           template<class> class TQual, template<class> class UQual>
    struct basic_common_reference<TTuple, UTuple, TQual, UQual>;
  template<[[redoc("*:c>")]]tuple-like TTuple, [[redoc("*:c>")]]tuple-like UTuple>
    struct common_type<TTuple, UTuple>;

  // [:en] [#tuple.creation], tuple creation functions \
  [:zh_CN] [#tuple.creation]，tuple 创建函数
  inline constexpr [[redoc("[=unspec]")]] ignore;

  template<class... TTypes>
    constexpr tuple<unwrap_ref_decay_t<TTypes>...> make_tuple(TTypes&&...);

  template<class... TTypes>
    constexpr tuple<TTypes&&...> forward_as_tuple(TTypes&&...) noexcept;

  template<class... TTypes>
    constexpr tuple<TTypes&...> tie(TTypes&...) noexcept;

  template<[[redoc("*:c>")]]tuple-like... Tuples>
    constexpr tuple<CTypes...> tuple_cat(Tuples&&...);

  // [:en] [#tuple.apply], calling a function with a tuple of arguments \
  [:zh_CN] [#tuple.apply]，以实参的 tuple 进行函数调用
  template<class F, [[redoc("*:c>")]]tuple-like Tuple>
    constexpr decltype(auto) apply(F&& f, Tuple&& t) noexcept([[redoc("[=seebelow]")]]);

  template<class T, [[redoc("*:c>")]]tuple-like Tuple>
    constexpr T make_from_tuple(Tuple&& t);

  // [:en] [#tuple.helper], tuple helper classes \
  [:zh_CN] [#tuple.helper]，tuple 辅助类
  template<class T> struct tuple_size;                  // [=notdef]
  template<class T> struct tuple_size<const T>;

  template<class... Types> struct tuple_size<tuple<Types...>>;

  template<size_t I, class T> struct tuple_element;     // [=notdef]
  template<size_t I, class T> struct tuple_element<I, const T>;

  template<size_t I, class... Types>
    struct tuple_element<I, tuple<Types...>>;

  template<size_t I, class T>
    using [[redoc("`:lib>")]]tuple_element_t = typename tuple_element<I, T>::type;

  // [:en] [#tuple.elem], element access \
  [:zh_CN] [#tuple.elem]，元素访问
  template<size_t I, class... Types>
    constexpr tuple_element_t<I, tuple<Types...>>& get(tuple<Types...>&) noexcept;
  template<size_t I, class... Types>
    constexpr tuple_element_t<I, tuple<Types...>>&& get(tuple<Types...>&&) noexcept;
  template<size_t I, class... Types>
    constexpr const tuple_element_t<I, tuple<Types...>>& get(const tuple<Types...>&) noexcept;
  template<size_t I, class... Types>
    constexpr const tuple_element_t<I, tuple<Types...>>&& get(const tuple<Types...>&&) noexcept;
  template<class T, class... Types>
    constexpr T& get(tuple<Types...>& t) noexcept;
  template<class T, class... Types>
    constexpr T&& get(tuple<Types...>&& t) noexcept;
  template<class T, class... Types>
    constexpr const T& get(const tuple<Types...>& t) noexcept;
  template<class T, class... Types>
    constexpr const T&& get(const tuple<Types...>&& t) noexcept;

  // [:en] [#tuple.rel], relational operators \
  [:zh_CN] [#tuple.rel]，关系运算符
  template<class... TTypes, class... UTypes>
    constexpr bool operator==(const tuple<TTypes...>&, const tuple<UTypes...>&);
  template<class... TTypes, [[redoc("*:c>")]]tuple-like UTuple>
    constexpr bool operator==(const tuple<TTypes...>&, const UTuple&);
  template<class... TTypes, class... UTypes>
    constexpr common_comparison_category_t<[[redoc("^>")]]synth-three-way-result<TTypes, UTypes>...>
      operator<=>(const tuple<TTypes...>&, const tuple<UTypes...>&);
  template<class... TTypes, [[redoc("*:c>")]]tuple-like UTuple>
    constexpr [[redoc("[=seebelow]")]] operator<=>(const tuple<TTypes...>&, const UTuple&);

  // [:en] [#tuple.traits], allocator-related traits \
  [:zh_CN] [#tuple.traits]，分配器相关的特征
  template<class... Types, class Alloc>
    struct uses_allocator<tuple<Types...>, Alloc>;

  // [:en] [#tuple.special], specialized algorithms: \
  [:zh_CN] [#tuple.special]，特化的算法：
  template<class... Types>
    constexpr void swap(tuple<Types...>& x, tuple<Types...>& y) noexcept([[redoc("[=seebelow]")]]);
  template<class... Types>
    constexpr void swap(const tuple<Types...>& x, const tuple<Types...>& y) noexcept([[redoc("[=seebelow]")]]);

  // [:en] [#tuple.helper], tuple helper classes \
  [:zh_CN] [#tuple.helper]，元组的辅助类
  template<class T>
    inline constexpr size_t [[redoc("`:lib>")]]tuple_size_v = tuple_size<T>::value;
}
[codeblock:end]
