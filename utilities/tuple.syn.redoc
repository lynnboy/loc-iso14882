[section#tuple.syn
	[:en] Header [`<tuple>] synopsis
	[:zh_CN] 头文件 [`<tuple>] 纲要
]

[%@hdr@def tuple]
[codeblock:synopsis [!:mark SeeBelow UnSpec] ]
namespace std {
  // [:en] [#tuple.tuple], class template [`tuple] \
     [:zh_CN] [#tuple.tuple]，类模板 [`tuple]
  template<class... Types>
    class tuple;

  // [:en] [#tuple.creation], tuple creation functions \
     [:zh_CN] [#tuple.creation]，tuple 创建函数
  inline constexpr [=UnSpec] ignore;

  template<class... TTypes>
    constexpr tuple<unwrap_ref_decay_t<TTypes>...> make_tuple(TTypes&&...);

  template<class... TTypes>
    constexpr tuple<TTypes&&...> forward_as_tuple(TTypes&&...) noexcept;

  template<class... TTypes>
    constexpr tuple<TTypes&...> tie(TTypes&...) noexcept;

  template<class... Tuples>
    constexpr tuple<CTypes...> tuple_cat(Tuples&&...);

  // [:en] [#tuple.apply], calling a function with a tuple of arguments \
     [:zh_CN] [#tuple.apply]，以实参的 tuple 进行函数调用
  template<class F, class Tuple>
    constexpr decltype(auto) apply(F&& f, Tuple&& t);

  template<class T, class Tuple>
    constexpr T make_from_tuple(Tuple&& t);

  // [:en] [#tuple.helper], tuple helper classes \
     [:zh_CN] [#tuple.helper]，tuple 辅助类
  template<class T> struct tuple_size;                  // [=notdef]
  template<class T> struct tuple_size<const T>;
  template<class T> struct tuple_size<volatile T>;
  template<class T> struct tuple_size<const volatile T>;

  template<class... Types> struct tuple_size<tuple<Types...>>;

  template<size_t I, class T> struct tuple_element;     // [=notdef]
  template<size_t I, class T> struct tuple_element<I, const T>;
  template<size_t I, class T> struct tuple_element<I, volatile T>;
  template<size_t I, class T> struct tuple_element<I, const volatile T>;

  template<size_t I, class... Types>
    struct tuple_element<I, tuple<Types...>>;

  template<size_t I, class T>
    using [[redoc("?libglobal")]]tuple_element_t = typename tuple_element<I, T>::type;

  // [:en] [#tuple.elem], element access \
     [:zh_CN] [#tuple.elem]，元素访问
  template<size_t I, class... Types>
    constexpr tuple_element_t<I, tuple<Types...>>& get(tuple<Types...>&) noexcept;
  template<size_t I, class... Types>
    constexpr tuple_element_t<I, tuple<Types...>>&& get(tuple<Types...>&&) noexcept;
  template<size_t I, class... Types>
    constexpr const tuple_element_t<I, tuple<Types...>>& get(const tuple<Types...>&) noexcept;
  template<size_t I, class... Types>
    constexpr const tuple_element_t<I, tuple<Types...>>&& get(const tuple<Types...>&&) noexcept;
  template<class T, class... Types>
    constexpr T& get(tuple<Types...>& t) noexcept;
  template<class T, class... Types>
    constexpr T&& get(tuple<Types...>&& t) noexcept;
  template<class T, class... Types>
    constexpr const T& get(const tuple<Types...>& t) noexcept;
  template<class T, class... Types>
    constexpr const T&& get(const tuple<Types...>&& t) noexcept;

  // [:en] [#tuple.rel], relational operators \
     [:zh_CN] [#tuple.rel]，关系运算符
  template<class... TTypes, class... UTypes>
    constexpr bool operator==(const tuple<TTypes...>&, const tuple<UTypes...>&);
  template<class... TTypes, class... UTypes>
    constexpr common_comparison_category_t<[*synth-three-way-result]<TTypes, UTypes>...>
      operator<=>(const tuple<TTypes...>&, const tuple<UTypes...>&);

  // [:en] [#tuple.traits], allocator-related traits \
     [:zh_CN] [#tuple.traits]，分配器相关的特征
  template<class... Types, class Alloc>
    struct uses_allocator<tuple<Types...>, Alloc>;

  // [:en] [#tuple.special], specialized algorithms: \
     [:zh_CN] [#tuple.special]，特化的算法：
  template<class... Types>
    constexpr void swap(tuple<Types...>& x, tuple<Types...>& y) noexcept([[redoc:=]]SeeBelow);

  // [:en] [#tuple.helper], tuple helper classes \
     [:zh_CN] [#tuple.helper]，元组的辅助类
  template<class T>
    inline constexpr size_t [[redoc("?libglobal")]]tuple_size_v = tuple_size<T>::value;
}
[codeblock:end]
