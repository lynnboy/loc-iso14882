[section#expected.bad
    [:en] Class template [`bad_expected_access]
    [:zh_CN] 类模板 [`bad_expected_access]
]

[%@lib bad_expected_access]
[codeblock:synopsis]
namespace std {
  template<class E>
  class bad_expected_access : public bad_expected_access<void> {
  public:
    explicit bad_expected_access(E);
    const char* what() const noexcept override;
    E& error() & noexcept;
    const E& error() const & noexcept;
    E&& error() && noexcept;
    const E&& error() const && noexcept;
  private:
    E [[redoc("*>")]]val;              // [=expos]
  };
}
[codeblock:end]

[para]
[:en] The class template [`bad_expected_access] defines the type of objects
thrown as exceptions to report the situation where an attempt is made to access
the value of an [`expected<T, E>] object for which [`has_value()] is [`false].
[:zh_CN] 类模板 [`bad_expected_access] 定义了作为异常抛出的对象的类型，用于报告
试图对 [`has_value()] 为 [`false] 的 [`expected<T, E>] 对象访问其值的情况。

[%@lib@ctor bad_expected_access]
[codeblock:declaration]
explicit bad_expected_access(E e);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*val] with [`std::move(e)].
[:zh_CN] 以 [`std::move(e)] 初始化 [*val]。
[div:end]

[%@lib@member error[!bad_expected_access]]
[codeblock:declaration]
const E& error() const & noexcept;
E& error() & noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [*val].
[:zh_CN] [*val]。
[div:end]

[%@lib@member error[!bad_expected_access]]
[codeblock:declaration]
E&& error() && noexcept;
const E&& error() const && noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`std::move([*val])].
[:zh_CN] [`std::move([*val])]。
[div:end]

[%@lib@member what[!bad_expected_access]]
[codeblock:declaration]
const char* what() const noexcept override;
[codeblock:end]

[div:description]
[para:returns]
[:en] An implementation-defined [=ntbs].
[:zh_CN] 由实现定义的 [=ntbs]。
[div:end]
