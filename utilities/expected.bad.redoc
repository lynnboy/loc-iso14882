[section#expected.bad
    [:en] Class template [`bad_expected_access]
    [:zh_CN] 类模板 [`bad_expected_access]
]

[%@lib bad_expected_access]
[codeblock:synopsis]
namespace std {
  template<class E>
  class bad_expected_access : public bad_expected_access<void> {
  public:
    constexpr explicit bad_expected_access(E);
    constexpr const char* what() const noexcept override;
    constexpr E& error() & noexcept;
    constexpr const E& error() const & noexcept;
    constexpr E&& error() && noexcept;
    constexpr const E&& error() const && noexcept;

  private:
    E [[redoc("*>")]]unex;             // [=expos]
  };
}
[codeblock:end]

[para]
[:en] The class template [`bad_expected_access] defines the type of objects
thrown as exceptions to report the situation where an attempt is made to access
the value of an [`expected<T, E>] object for which [`has_value()] is [`false].
[:zh_CN] 类模板 [`bad_expected_access] 定义了作为异常抛出的对象的类型，用于报告
试图对 [`has_value()] 为 [`false] 的 [`expected<T, E>] 对象访问其值的情况。

[%@lib@ctor bad_expected_access]
[codeblock:declaration]
constexpr explicit bad_expected_access(E e);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*unex] with [`std::move(e)].
[:zh_CN] 以 [`std::move(e)] 初始化 [*unex]。
[div:end]

[%@lib@member error[!bad_expected_access]]
[codeblock:declaration]
constexpr const E& error() const & noexcept;
constexpr E& error() & noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [*unex].
[:zh_CN] [*unex]。
[div:end]

[%@lib@member error[!bad_expected_access]]
[codeblock:declaration]
constexpr E&& error() && noexcept;
constexpr const E&& error() const && noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`std::move([*unex])].
[:zh_CN] [`std::move([*unex])]。
[div:end]

[%@lib@member what[!bad_expected_access]]
[codeblock:declaration]
constexpr const char* what() const noexcept override;
[codeblock:end]

[para:returns]
[:en] An [?impldef return value of [`bad_expected_access::what]] [=ntbs], which
during constant evaluation is encoded with the ordinary literal encoding ([#lex.ccon]).
[:zh_CN] 一个[?impldef [`bad_expected_access::what] 的返回值] [=ntbs]，它在常量求值
期间按照普通字面量编码（[#lex.ccon]）。
[div:end]
