[section#unord.hash
    [:en] Class template [`hash]
    [:zh_CN] 类模板 [`hash]
]

[para]
[%@library hash]
[:en]
[%[`hash][!instantiation restrictions]]
The unordered associative containers defined in [#unord] use specializations of
the class template [`hash] ([#functional.syn]) as the default hash function.
[:zh_CN]
[%[`hash][!实例化的限制]]
[#unord] 中所定义的无序关联容器使用类模板 [`hash]（[#functional.syn]）的特例作为
其默认散列函数。

[para]
[:en]
Each specialization of [`hash] is either enabled or disabled, as described
below.
[:zh_CN]
[`hash] 的各个特例要么被启用要么被禁用，如下文所述。

[begin:note]
[:en]
Enabled specializations meet the [*Cpp17Hash] requirements, and disabled
specializations do not.
[:zh_CN]
被启用的特例满足 [*Cpp17Hash] 的规定，而被禁用的特例则不用如此。
[end:note]

[:en]
Each header that declares the template [`hash] provides enabled specializations
of [`hash] for [`nullptr_t] and all cv-unqualified arithmetic, enumeration, and
pointer types.
[:zh_CN]
各个声明了模板 [`hash] 的头文件，都提供 [`hash] 对 [`nullptr_t] 和所有 cv 未限定
的算术、枚举和指针类型的启用特例。

[:en]
For any type [`Key] for which neither the library nor the user provides an
explicit or partial specialization of the class template [`hash], [`hash<Key>]
is disabled.
[:zh_CN]
对于程序库和用户都未为其提供类模板 [`hash] 的显式或部分特化式的任何类型 [`Key]，
[`hash<Key>] 被禁用。

[para]
[:en]
If the library provides an explicit or partial specialization of [`hash<Key>],
that specialization is enabled except as noted otherwise, and its member
functions are [`noexcept] except as noted otherwise.
[:zh_CN]
如果程序库提供了显式或部分特化式 [`hash<Key>]，则除非另行说明，这个特例即被启用，
且除非另行指明否则其成员函数均为 [`noexcept]。

[para]
[:en]
If [`H] is a disabled specialization of [`hash], these values are [`false]:
[`is_default_constructible_v<H>], [`is_copy_constructible_v<H>],
[`is_move_constructible_v<H>], [`is_copy_assignable_v<H>], and
[`is_move_assignable_v<H>].
[:zh_CN]
设 [`H] 为 [`hash] 的被禁用的特例，下列值均为 [`false]：
[`is_default_constructible_v<H>]，[`is_copy_constructible_v<H>]，
[`is_move_constructible_v<H>]，[`is_copy_assignable_v<H>]，以及
[`is_move_assignable_v<H>]。

[:en]
Disabled specializations of [`hash] are not function object types
([#function.objects]).
[:zh_CN]
[`hash] 的被禁用的特例不是函数对象类型（[#function.objects]）。

[begin:note]
[:en]
This means that the specialization of [`hash] exists, but any attempts to use it
as a [*Cpp17Hash] will be ill-formed.
[:zh_CN]
这表示这个 [`hash] 的特例存在，但试图用它作为一个 [*Cpp17Hash] 则是非良构的。
[end:note]

[para]
[:en]
An enabled specialization [`hash<Key>] will:
[:zh_CN]
被启用的特例 [`hash<Key>] 应当：

[list]
[item]
[:en] meet the [*Cpp17Hash] requirements ([#:tab#cpp17.hash]), with [`Key] as
the function call argument type, the [*Cpp17DefaultConstructible] requirements
([#:tab#cpp17.defaultconstructible]), the [*Cpp17CopyAssignable] requirements
([#:tab#cpp17.copyassignable]),
[:zh_CN] 满足 [*Cpp17Hash] 的规定（[#:tab#cpp17.hash]），并以 [`Key] 为函数调用
实参类型，满足 [*Cpp17DefaultConstructible] 的规定
（[#:tab#cpp17.defaultconstructible]），满足 [*Cpp17CopyAssignable] 的规定
（[#:tab#cpp17.copyassignable]），

[item]
[:en] be swappable ([#swappable.requirements]) for lvalues,
[:zh_CN] 对于左值为可交换的（[#swappable.requirements]），

[item]
[:en] meet the requirement that if [`k1 == k2] is [`true], [`h(k1) == h(k2)]
is also [`true], where [`h] is an object of type [`hash<Key>] and [`k1] and [`k2]
are objects of type [`Key];
[:zh_CN] 满足当 [`k1 == k2] 为 [`true] 时 [`h(k1) == h(k2)] 也为 [`true] 的规定，
其中 [`h] 为类型 [`hash<Key>] 的对象而 [`k1] 和 [`k2] 为类型 [`Key] 的对象；

[item]
[:en] meet the requirement that the expression [`h(k)], where [`h] is an
object of type [`hash<Key>] and [`k] is an object of type [`Key], shall not
throw an exception unless [`hash<Key>] is a user-defined specialization that
depends on at least one program-defined type.
[:zh_CN] 符合表达式 [`h(k)] 除 [`hash<Key>] 是用户定义的特化式且依存于至少一个
由程序定义的类型的情况之外不能抛出异常的规定，其中 [`h] 为类型 [`hash<Key>] 的
对象而 [`k] 为类型 [`Key] 的对象。
[list:end]
