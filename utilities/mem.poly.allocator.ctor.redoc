[section#mem.poly.allocator.ctor
    [:en] [`polymorphic_allocator] constructors
    [:zh_CN] [`polymorphic_allocator] 的构造函数
]

[%@library polymorphic_allocator[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
polymorphic_allocator() noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Sets [`memory_rsrc] to [`get_default_resource()].
[:zh_CN] 设置 [`memory_rsrc] 为 [`get_default_resource()]。
[exit:description]

[%@library polymorphic_allocator[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
polymorphic_allocator(memory_resource* r);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`r] is non-null.
[:zh_CN] [`r] 非空。

[para:effects]
[:en] Sets [`memory_rsrc] to [`r].
[:zh_CN] 设置 [`memory_rsrc] 为 [`r]。

[para:throws]
[:en] Nothing.
[:zh_CN] 无。

[para]
[enter:note]
[:en] This constructor provides an implicit conversion from [`memory_resource*].
[:zh_CN] 这个构造函数提供了从 [`memory_resource*] 的隐式转换。
[exit:note]
[exit:description]

[%@library polymorphic_allocator[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
template <class U>
  polymorphic_allocator(const polymorphic_allocator<U>& other) noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Sets [`memory_rsrc] to [`other.resource()].
[:zh_CN] 设置 [`memory_rsrc] 为 [`other.resource()]。
[exit:description]
