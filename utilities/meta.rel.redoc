[section#meta.rel
    [:en] Relationships between types
    [:zh_CN] 类型之间的关系
]

[para]
[:en]
This subclause contains templates that may be used to query relationships
between types at compile time.
[:zh_CN]
本子条款包括可在编译时用来查询类型之间的关系的模板。

[para]
[:en]
Each of these templates shall be a [`BinaryTypeTrait] ([#meta.rqmts]) with a
base characteristic of [`true_type] if the corresponding condition is true,
otherwise [`false_type].
[:zh_CN]
这些模板中的每个都应为 [`BinaryTypeTrait]（[#meta.rqmts]），当其对应条件为真时其
基础特征为 [`true_type]，否则为 [`false_type]。

[table:grid#tab:type-traits.relationship
    [:en] Type relationship predicates
    [:zh_CN] 类型关系谓词
    [|@code
        [:en] Template
        [:zh_CN] 模板
    ]
    [|
        [:en] Condition
        [:zh_CN] 条件
    ]
    [|
        [:en] Comments
        [:zh_CN] 注释
    ]
]

[|]
template <class T, class U> [br]
struct is_same;
[|] [:en] [`T] and [`U] name the same type with the same cv-qualifications
    [:zh_CN] [`T] 和 [`U] 指名带有相同的 cv 限定性的相同类型
[|]

[%@library is_base_of]
[|]
template <class Base, class Derived> [br]
struct is_base_of;
[|] [:en] [`Base] is a base class of [`Derived] ([#class.derived]) without
    regard to cv-qualifiers or [`Base] and [`Derived] are not unions and name
    the same class type without regard to cv-qualifiers
    [:zh_CN] [`Base] 是 [`Derived] 的基类（[#class.derived]）而不管其 cv 限定符，
    或者 [`Base] 和 [`Derived] 不是联合且指明相同的类类型而不管其 cv 限定符
[|] [:en] If [`Base] and [`Derived] are non-union class types and are not
    possibly cv-qualified versions of the same type, [`Derived] shall be a
    complete type.
    [:zh_CN] 若 [`Base] 和 [`Derived] 都是非联合类类型并且不是相同类型的可能被
    cv 限定的版本，则 [`Derived] 应当为完整类型。
    [enter:note]
    [:en] Base classes that are private, protected, or ambiguous are,
    nonetheless, base classes.
    [:zh_CN] 无论如何，私有、受保护或有歧义的基类也都是基类。
    [exit:note]
[-]

[%@library is_convertible]
[|]
template <class From, class To> [br]
struct is_convertible;
[|] [=SeeBelow]
[|] [:en] [`From] and [`To] shall be complete types, arrays of unknown bound, or
    [$cv] [`void] types.
    [:zh_CN] [`From] 和 [`To] 应当为完整类型，未知边界的数组，或者 [$cv] [`void]
    类型。
[-]

[%@library is_invocable]
[|]
template <class Fn, class... ArgTypes> [br]
struct is_invocable;
[|] [:en] The expression [`[*INVOKE](declval<Fn>(), declval<ArgTypes>()...)]
    is well formed when treated as an unevaluated operand
    [:zh_CN] 表达式 [`[*INVOKE](declval<Fn>(), declval<ArgTypes>()...)] 被
    当成免求值操作数时是良构的
[|] [:en] [`Fn], and all types in the parameter pack [`ArgTypes] shall be
    complete types, [$cv] [`void], or arrays of unknown bound.
    [:zh_CN] [`Fn]，以及形参包组 [`ArgTypes] 中的所有类型都应当为完整类型，
    [$cv] [`void]，或者未知边界的数组。
[-]

[%@library is_invocable_r]
[|]
template <class R, class Fn, class... ArgTypes> [br]
struct is_invocable_r;
[|] [:en] The expression [`[*INVOKE]<R>(declval<Fn>(), declval<ArgTypes>()...)]
    is well formed when treated as an unevaluated operand
    [:zh_CN] 表达式 [`[*INVOKE]<R>(declval<Fn>(), declval<ArgTypes>()...)] 被
    当成免求值操作数时是良构的
[|] [:en] [`Fn], [`R], and all types in the parameter pack [`ArgTypes] shall be
    complete types, [$cv] [`void], or arrays of unknown bound.
    [:zh_CN] [`Fn]，[`R]，以及形参包组 [`ArgTypes] 中的所有类型都应当为完整类型，
    [$cv] [`void]，或者未知边界的数组。
[-]

[%@library is_nothrow_invocable]
[|]
template <class Fn, class... ArgTypes> [br]
struct is_nothrow_invocable;
[|] [:en] [`is_invocable_v<Fn, ArgTypes...>] is [`true] and the expression
    [`[*INVOKE](declval<Fn>(), declval<ArgTypes>()...)] is known not to throw
    any exceptions
    [:zh_CN] [`is_invocable_v<Fn, ArgTypes...>] 为 [`true]，并且表达式
    [`[*INVOKE](declval<Fn>(), declval<ArgTypes>()...)] 已知不会抛出任何异常
[|] [:en] [`Fn], and all types in the parameter pack [`ArgTypes] shall be
    complete types, [$cv] [`void], or arrays of unknown bound.
    [:zh_CN] [`Fn]，以及形参包组 [`ArgTypes] 中的所有类型都应当为完整类型，
    [$cv] [`void]，或者未知边界的数组。
[-]

[%@library is_nothrow_invocable_r]
[|]
template <class R, class Fn, class... ArgTypes> [br]
struct is_nothrow_invocable_r;
[|] [:en] [`is_invocable_r_v<R, Fn, ArgTypes...>] is [`true] and the expression
    [`[*INVOKE]<R>(declval<Fn>(), declval<ArgTypes>()...)] is known not to throw
    any exceptions
    [:zh_CN] [`is_invocable_r_v<R, Fn, ArgTypes...>] 为 [`true]，并且表达式
    [`[*INVOKE]<R>(declval<Fn>(), declval<ArgTypes>()...)] 已知不会抛出任何异常
[|] [:en] [`Fn], [`R], and all types in the parameter pack [`ArgTypes] shall be
    complete types, [$cv] [`void], or arrays of unknown bound.
    [:zh_CN] [`Fn]，[`R]，以及形参包组 [`ArgTypes] 中的所有类型都应当为完整类型，
    [$cv] [`void]，或者未知边界的数组。
[-]

[table:end]

[para]
[:en]
For the purpose of defining the templates in this subclause, a function call
expression [`declval<T>()] for any type [`T] is considered to be a trivial
([#basic.types], [#special]) function call that is not an odr-use
([#basic.def.odr]) of [`declval] in the context of the corresponding definition
notwithstanding the restrictions of [#declval].
[:zh_CN]
为定义本子条款中的各模板，对任意类型 [`T] 的函数调用表达式 [`declval<T>()]，被
当做是平凡的（[#basic.types]，[#special]）函数调用，而不是在相应定义的语境中对
[`declval] 的 ODR 式使用（[#basic.def.odr]），而不管 [#declval] 中的限制条件。

[para]
[enter:example]
[codeblock]
struct B {};
struct B1 : B {};
struct B2 : B {};
struct D : private B1, private B2 {};

is_base_of_v<B, D>         // [`true]
is_base_of_v<const B, D>   // [`true]
is_base_of_v<B, const D>   // [`true]
is_base_of_v<B, const B>   // [`true]
is_base_of_v<D, B>         // [`false]
is_base_of_v<B&, D&>       // [`false]
is_base_of_v<B[3], D[3]>   // [`false]
is_base_of_v<int, int>     // [`false]
[codeblock:end]
[exit:example]

[%@library is_convertible]
[:en]
The predicate condition for a template specialization
[`is_convertible<From, To>] shall be satisfied if and only if the return
expression in the following code would be well-formed, including any implicit
conversions to the return type of the function:
[:zh_CN]
当且仅当下列代码中的 return 表达式为良构的（包括向返回类型进行的任何隐式转换），
模板特例 [`is_convertible<From, To>] 的谓词条件应当被满足：

[codeblock:notation]
To test() {
  return declval<From>();
}
[codeblock:end]

[enter:note]
[:en]
This requirement gives well-defined results for reference types, void types,
array types, and function types.
[:zh_CN]
该规定为引用类型，void 类型，数组类型和函数类型给出了有明确定义的结果。
[exit:note]

[:en]
Access checking is performed in a context unrelated to [`To] and [`From].
[:zh_CN]
在与 [`To] 和 [`From] 无关的语境中进行访问检查。

[:en]
Only the validity of the immediate context of the [~expression] of the
[`return] statement (including initialization of the returned object or
reference) is considered.
[:zh_CN]
只考察 [`return] 语句的[~表达式]（包括对所返回的对象或引用的初始化）的直接语境中
的合法性。

[enter:note]
[:en]
The initialization can result in side effects such as the instantiation of class
template specializations and function template specializations, the generation
of implicitly-defined functions, and so on.
[:zh_CN]
这种初始化可能造成的副作用包括对类模板特例和函数模板特例的实例化，生成隐式
定义的函数，等等。

[:en]
Such side effects are not in the ["immediate context] and can result in the
program being ill-formed.
[:zh_CN]
这种副作用不属于其“直接语境”，且可能导致程序非良构。
[exit:note]
