[section#func.require
    [:en] Requirements
    [:zh_CN] 规定
]

[para]
[%[^INVOKE][@invoke]] [%@lib@raw [`[^INVOKE]][@invoke]]
[:en] Define [`[^INVOKE](f, t[$_1], t[$_2], [$\dotsc], t[$_N])] as follows:
[:zh_CN] 定义 [`[^INVOKE](f, t[$_1], t[$_2], [$\dotsc], t[$_N])] 如下：

[list]
[item]
[:en] [`(t[$_1].*f)(t[$_2], [$\dotsc], t[$_N])] when [`f] is a pointer to a
member function of a class [`T] and
[`is_same_v<T, remove_cvref_t<decltype(t[$_1])>> || is_base_of_v<T, remove_cvref_t<decltype(t[$_1])>>]
is [`true];
[:zh_CN] 当 [`f] 为指向类 [`T] 的成员函数的指针，并且
[`is_same_v<T, remove_cvref_t<decltype(t[$_1])>> || is_base_of_v<T, remove_cvref_t<decltype(t[$_1])>>]
为 [`true] 时，为 [`(t[$_1].*f)(t[$_2], [$\dotsc], t[$_N])]；

[item]
[:en] [`(t[$_1].get().*f)(t[$_2], [$\dotsc], t[$_N])] when [`f] is a pointer to
a member function of a class [`T] and [`remove_cvref_t<decltype(t[$_1])>] is
a specialization of [`reference_wrapper];
[:zh_CN] 当 [`f] 为指向类 [`T] 的成员函数的指针，并且
[`remove_cvref_t<decltype(t[$_1])>] 是 [`reference_wrapper] 的某个特例时，为
[`(t[$_1].get().*f)(t[$_2], [$\dotsc], t[$_N])]；

[item]
[:en] [`((*t[$_1]).*f)(t[$_2], [$\dotsc], t[$_N])] when [`f] is a pointer to a
member function of a class [`T] and [`t[$_1]] does not satisfy the previous two
items;
[:zh_CN] 当 [`f] 为指向类 [`T] 的成员函数的指针，并且 [`t[$_1]] 并不符合以上两条
时，为 [`((*t[$_1]).*f)(t[$_2], [$\dotsc], t[$_N])]；

[item]
[:en] [`t[$_1].*f] when [$N = 1] and [`f] is a pointer to data member of a
class [`T] and
[`is_same_v<T, remove_cvref_t<decltype(t[$_1])>> || is_base_of_v<T, remove_cvref_t<decltype(t[$_1])>>]
is [`true];
[:zh_CN] 当 [$N = 1] 且 [`f] 为指向类 [`T] 的数据成员的指针，并且
[`is_same_v<T, remove_cvref_t<decltype(t[$_1])>> || is_base_of_v<T, remove_cvref_t<decltype(t[$_1])>>]
为 [`true] 时，为 [`t[$_1].*f]；

[item]
[:em] [`t[$_1].get().*f] when [$N = 1] and [`f] is a pointer to data member of
a class [`T] and [`remove_cvref_t<decltype(t[$_1])>] is a specialization of
[`reference_wrapper];
[:zh_CN] 当 [$N = 1] 且 [`f] 为指向类 [`T] 的数据成员的指针，并且
[`remove_cvref_t<decltype(t[$_1])>] 是 [`reference_wrapper] 的某个特例时，为
[`t[$_1].get().*f]；

[item]
[:en] [`(*t[$_1]).*f] when [$N = 1] and [`f] is a pointer to data member of a
class [`T] and [`t[$_1]] does not satisfy the previous two items;
[:zh_CN] 当 [$N = 1] 且 [`f] 为指向类 [`T] 的数据成员的指针，并且 [`t[$_1]]
并不符合以上两条时，为 [`(*t[$_1]).*f]；

[item]
[:en] [`f(t[$_1], t[$_2], [$\dotsc], t[$_N])] in all other cases.
[:zh_CN] 在所有其他情况下为 [`f(t[$_1], t[$_2], [$\dotsc], t[$_N])]。
[list:end]

[para]
[%@lib@raw [`[^INVOKE]][@invoke]]
[:en]
Define [`[^INVOKE]<R>(f, t[$_1], t[$_2], [$\dotsc], t[$_N])] as
[`static_cast<void>([^INVOKE](f, t[$_1], t[$_2], [$\dotsc], t[$_N]))] if [`R] is
[=cv] [`:key void], otherwise [`[^INVOKE](f, t[$_1], t[$_2], [$\dotsc], t[$_N])]
implicitly converted to [`R].
[:zh_CN]
定义 [`[^INVOKE]<R>(f, t[$_1], t[$_2], [$\dotsc], t[$_N])] 为，当 [`R] 为
[=cv] [`:key void] 时为
[`static_cast<void>([^INVOKE](f, t[$_1], t[$_2], [$\dotsc], t[$_N]))]，否则为
[`[^INVOKE](f, t[$_1], t[$_2], [$\dotsc], t[$_N])] 并隐式转换为 [`R]。

[:en] If
[`reference_converts_from_temporary_v<R, decltype([^INVOKE](f, t[$_1], t[$_2], [$\dotsc], t[$_N]))>]
is [`true], [`[^INVOKE]<R>(f, t[$_1], t[$_2], [$\dotsc], t[$_N])] is ill-formed.
[:zh_CN] 如果
[`reference_converts_from_temporary_v<R, decltype([^INVOKE](f, t[$_1], t[$_2], [$\dotsc], t[$_N]))>]
为 [`true]，则 [`[^INVOKE]<R>(f, t[$_1], t[$_2], [$\dotsc], t[$_N])] 非良构。

[para]
[:en]
[%call wrapper]
[%call wrapper[!simple]]
[%call wrapper[!forwarding]]
Every call wrapper ([#func.def]) meets the [^:oc MoveConstructible] and
[^:oc Destructible] requirements.
[:zh_CN]
[%调用包装器]
[%调用包装器[!简单～]]
[%调用包装器[!转发～]]
每个调用包装器（[#func.def]）均满足 [^:oc MoveConstructible] 和
[^:oc Destructible] 的规定。

[:en]
An [+argument forwarding call wrapper] is a call wrapper that can be called with
an arbitrary argument list and delivers the arguments to the target object as
references.
[:zh_CN]
[+实参转发调用包装器]是可以用任意实参列表调用，并将其实参按引用递交给目标对象的
调用包装器。

[:en]
This forwarding step delivers rvalue arguments as rvalue references and lvalue
arguments as lvalue references.
[:zh_CN]
转发步骤中按右值引用传递右值实参，按左值引用传递左值实参。

[begin:note]
[:en]
In a typical implementation, argument forwarding call wrappers have an
overloaded function call operator of the form
[:zh_CN]
在典型实现中实参转发调用包装器具有如下形式的重载函数调用运算符
[~cv-qual]
[codeblock]
template<class... UnBoundArgs>
  constexpr R operator()(UnBoundArgs&&... unbound_args) [[redoc("$>")]]cv-qual;
[codeblock:end]
[end:note]

[para#term.perfect.forwarding.call.wrapper]
[:en] A [+:adj perfect forwarding[!call wrapper]] is an argument forwarding call
wrapper that forwards its state entities to the underlying call expression.
[:zh_CN] [+:adj 完美转发[!调用包装器]]是将各状态实体转发给底层调用表达式的实参
转发调用包装器。

[:en] This forwarding step delivers a state entity of type [`T] as [=cv] [`T&]
when the call is performed on an lvalue of the call wrapper type and
as [=cv] [`T&&] otherwise, where [=cv] represents the cv-qualifiers of the call
wrapper and where [=cv] shall be neither [`volatile] nor [`const volatile].
[:zh_CN] 这个转发步骤，如果其调用是在调用包装器类型的左值上所实施的，则将 [`T]
类型的状态实体以 [=cv] [`T&] 的方式传递，否则就以 [=cv] [`T&&] 来传递，其中
[=cv] 代表该调用包装器的 cv 限定符，而且 [=cv] 不能为 [`volatile] 或
[`const volatile]。

[para]
[:en] A [+call pattern] defines the semantics of invoking a perfect forwarding
call wrapper.
[:zh_CN] [+调用模式]定义了调用一个完美转发调用包装器的语义。

[:en] A postfix call performed on a perfect forwarding call wrapper is
expression-equivalent ([#defns.expression.equivalent]) to an expression [`e]
determined from its call pattern [`cp] by replacing all occurrences of the
arguments of the call wrapper and its state entities with references as
described in the corresponding forwarding steps.
[:zh_CN] 在完美转发调用包装器上实施的后缀调用，与从其调用模式 [`cp] 中所确定的
表达式 [`e] 按表达式等价（[#defns.expression.equivalent]），其中将出现的所有调用
包装器实参及其各状态实体，都按照对应转发步骤替换为引用。

[para#term.simple.call.wrapper]
[:en] A [+simple call wrapper] is a perfect forwarding call wrapper that meets
the [^:oc CopyConstructible] and [^:oc CopyAssignable] requirements and whose
copy constructor, move constructor, and assignment operators are constexpr
functions that do not throw exceptions.
[:zh_CN] [+简单调用包装器]是满足 [^:oc CopyConstructible] 和
[^:oc CopyAssignable] 的规定的完美转发调用包装器，且其复制构造函数、移动构造函数、
各赋值运算符均为不抛出异常的 constexpr 函数。

[para]
[:en] The copy/move constructor of an argument forwarding call wrapper has the
same apparent semantics as if memberwise copy/move of its state entities were
performed ([#class.copy.ctor]).
[:zh_CN] 实参转发调用包装器的复制/移动构造函数，所具有的语义如同对其各个状态实体
实施的按成员复制/移动（[#class.copy.ctor]）。

[begin:note]
[:en] This implies that each of the copy/move constructors has the same
exception-specification as the corresponding implicit definition and is declared
as [`:key constexpr] if the corresponding implicit definition would be
considered to be constexpr.
[:zh_CN] 这意味着，其复制/移动构造函数各个都与其所对应的隐含定义具有相同的异常
说明，并且当其对应的隐含定义可被当成 constexpr 时也被声明为 [`:key constexpr]。
[end:note]

[para]
[:en] Argument forwarding call wrappers returned by a given standard library
function template have the same type if the types of their corresponding state
entities are the same.
[:zh_CN] 由给定的标准程序库函数模板所返回的实参转发调用包装器，如果它们的对应
状态实体都相同，则它们的类型相同。
