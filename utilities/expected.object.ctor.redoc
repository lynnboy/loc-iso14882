[section#expected.object.ctor
    [:en] Swap
    [:zh_CN] 交换
]

[%@lib@ctor expected]
[codeblock:declaration]
constexpr expected();
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`is_default_constructible_v<T>] is [`true].
[:zh_CN] [`is_default_constructible_v<T>] 为 [`true]。

[para:effects]
[:en] Value-initializes [*val].
[:zh_CN] 值初始化 [*val]。

[para:ensures]
[:en] [`has_value()] is [`true].
[:zh_CN] [`has_value()] 为 [`true]。

[para:throws]
[:en] Any exception thrown by the initialization of [*val].
[:zh_CN] 由 [*val] 的初始化所抛出的任何异常。
[div:end]

[%@lib@ctor expected]
[codeblock:declaration]
constexpr expected(const expected& rhs);
[codeblock:end]

[div:description]
[para:effects]
[:en] If [`rhs.has_value()] is [`true], direct-non-list-initializes [*val] with
[`*rhs].
[:zh_CN] 如果 [`rhs.has_value()] 为 [`true]，则以 [`*rhs] 直接非列表初始化 [*val]。

[:en] Otherwise, direct-non-list-initializes [*unex] with [`rhs.error()].
[:zh_CN] 否则，以 [`rhs.error()] 直接非列表初始化 [*unex]。

[para:ensures]
[:en] [`rhs.has_value() == this->has_value()].
[:zh_CN] [`rhs.has_value() == this->has_value()]。

[para:throws]
[:en] Any exception thrown by the initialization of [*val] or [*unex].
[:zh_CN] 由 [*val] 或 [*unex] 的初始化所抛出的任何异常。

[para:remarks]
[:en] This constructor is defined as deleted unless
[:zh_CN] 本构造函数被定义为弃置的，除非：
[list]
[item]
[:en@~] [`is_copy_constructible_v<T>] is [`true] and
[:zh_CN@~] [`is_copy_constructible_v<T>] 为 [`true] 且
[item]
[:en@~] [`is_copy_constructible_v<E>] is [`true].
[:zh_CN@~] [`is_copy_constructible_v<E>] 为 [`true]。

[para]
[:en] This constructor is trivial if
[:zh_CN] 以下情况下，本构造函数是平凡的：
[list]
[item]
[:en@~] [`is_trivially_copy_constructible_v<T>] is [`true] and
[:zh_CN@~] [`is_trivially_copy_constructible_v<T>] 为 [`true] 且
[item]
[:en@~] [`is_trivially_copy_constructible_v<E>] is [`true].
[:zh_CN@~] [`is_trivially_copy_constructible_v<E>] 为 [`true]。
[div:end]

[%@lib@ctor expected]
[codeblock:declaration]
constexpr expected(expected&& rhs) noexcept([[redoc("[=seebelow]")]]);
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en] [`is_move_constructible_v<T>] is [`true] and
[:zh_CN] [`is_move_constructible_v<T>] 为 [`true] 且
[item]
[:en@~] [`is_move_constructible_v<E>] is [`true].
[:zh_CN@~] [`is_move_constructible_v<E>] 为 [`true]。
[list:end]

[para:effects]
[:en] If [`rhs.has_value()] is [`true], direct-non-list-initializes [*val] with
[`std::move(*rhs)].
[:zh_CN] 如果 [`rhs.has_value()] 为 [`true]，则以 [`std::move(*rhs)] 直接非列表
初始化 [*val]。

[:en] Otherwise, direct-non-list-initializes [*unex] with [`std::move(rhs.error())].
[:zh_CN] 否则，以 [`std::move(rhs.error())] 直接非列表初始化 [*unex]。

[para:ensures]
[:en] [`rhs.has_value()] is unchanged; [`rhs.has_value() == this->has_value()]
is [`true].
[:zh_CN] [`rhs.has_value()] 未改变；[`rhs.has_value() == this->has_value()] 为
[`true]。

[para:throws]
[:en] Any exception thrown by the initialization of [*val] or [*unex].
[:zh_CN] 由 [*val] 或 [*unex] 的初始化所抛出的任何异常。

[para:remarks]
[:en] The exception specification is equivalent to
[`is_nothrow_move_constructible_v<T> && is_nothrow_move_constructible_v<E>].
[:zh_CN] 其异常说明等价于
[`is_nothrow_move_constructible_v<T> && is_nothrow_move_constructible_v<E>]。

[para]
[:en] This constructor is trivial if
[:zh_CN] 以下情况下，本构造函数是平凡的：
[list]
[item]
[:en@~] [`is_trivially_move_constructible_v<T>] is [`true] and
[:zh_CN@~] [`is_trivially_move_constructible_v<T>] 为 [`true] 且
[item]
[:en@~] [`is_trivially_move_constructible_v<E>] is [`true].
[:zh_CN@~] [`is_trivially_move_constructible_v<E>] 为 [`true]。
[div:end]
