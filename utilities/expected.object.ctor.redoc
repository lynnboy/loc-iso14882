[section#expected.object.ctor
    [:en] Constructors
    [:zh_CN] 构造函数
]

[%@lib@ctor expected]
[codeblock:declaration]
constexpr expected();
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`is_default_constructible_v<T>] is [`true].
[:zh_CN] [`is_default_constructible_v<T>] 为 [`true]。

[para:effects]
[:en] Value-initializes [*val].
[:zh_CN] 值初始化 [*val]。

[para:ensures]
[:en] [`has_value()] is [`true].
[:zh_CN] [`has_value()] 为 [`true]。

[para:throws]
[:en] Any exception thrown by the initialization of [*val].
[:zh_CN] 由 [*val] 的初始化所抛出的任何异常。
[div:end]

[%@lib@ctor expected]
[codeblock:declaration]
constexpr expected(const expected& rhs);
[codeblock:end]

[div:description]
[para:effects]
[:en] If [`rhs.has_value()] is [`true], direct-non-list-initializes [*val] with
[`*rhs].
[:zh_CN] 如果 [`rhs.has_value()] 为 [`true]，则以 [`*rhs] 直接非列表初始化 [*val]。

[:en] Otherwise, direct-non-list-initializes [*unex] with [`rhs.error()].
[:zh_CN] 否则，以 [`rhs.error()] 直接非列表初始化 [*unex]。

[para:ensures]
[:en] [`rhs.has_value() == this->has_value()].
[:zh_CN] [`rhs.has_value() == this->has_value()]。

[para:throws]
[:en] Any exception thrown by the initialization of [*val] or [*unex].
[:zh_CN] 由 [*val] 或 [*unex] 的初始化所抛出的任何异常。

[para:remarks]
[:en] This constructor is defined as deleted unless
[:zh_CN] 本构造函数被定义为弃置的，除非：
[list]
[item]
[:en@~] [`is_copy_constructible_v<T>] is [`true] and
[:zh_CN@~] [`is_copy_constructible_v<T>] 为 [`true] 且
[item]
[:en@~] [`is_copy_constructible_v<E>] is [`true].
[:zh_CN@~] [`is_copy_constructible_v<E>] 为 [`true]。
[list:end]

[para]
[:en] This constructor is trivial if
[:zh_CN] 以下情况下，本构造函数是平凡的：
[list]
[item]
[:en@~] [`is_trivially_copy_constructible_v<T>] is [`true] and
[:zh_CN@~] [`is_trivially_copy_constructible_v<T>] 为 [`true] 且
[item]
[:en@~] [`is_trivially_copy_constructible_v<E>] is [`true].
[:zh_CN@~] [`is_trivially_copy_constructible_v<E>] 为 [`true]。
[list:end]
[div:end]

[%@lib@ctor expected]
[codeblock:declaration]
constexpr expected(expected&& rhs) noexcept([[redoc("[=seebelow]")]]);
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en] [`is_move_constructible_v<T>] is [`true] and
[:zh_CN] [`is_move_constructible_v<T>] 为 [`true] 且
[item]
[:en@~] [`is_move_constructible_v<E>] is [`true].
[:zh_CN@~] [`is_move_constructible_v<E>] 为 [`true]。
[list:end]

[para:effects]
[:en] If [`rhs.has_value()] is [`true], direct-non-list-initializes [*val] with
[`std::move(*rhs)].
[:zh_CN] 如果 [`rhs.has_value()] 为 [`true]，则以 [`std::move(*rhs)] 直接非列表
初始化 [*val]。

[:en] Otherwise, direct-non-list-initializes [*unex] with [`std::move(rhs.error())].
[:zh_CN] 否则，以 [`std::move(rhs.error())] 直接非列表初始化 [*unex]。

[para:ensures]
[:en] [`rhs.has_value()] is unchanged; [`rhs.has_value() == this->has_value()]
is [`true].
[:zh_CN] [`rhs.has_value()] 未改变；[`rhs.has_value() == this->has_value()] 为
[`true]。

[para:throws]
[:en] Any exception thrown by the initialization of [*val] or [*unex].
[:zh_CN] 由 [*val] 或 [*unex] 的初始化所抛出的任何异常。

[para:remarks]
[:en] The exception specification is equivalent to
[`is_nothrow_move_constructible_v<T> && is_nothrow_move_constructible_v<E>].
[:zh_CN] 其异常说明等价于
[`is_nothrow_move_constructible_v<T> && is_nothrow_move_constructible_v<E>]。

[para]
[:en] This constructor is trivial if
[:zh_CN] 以下情况下，本构造函数是平凡的：
[list]
[item]
[:en@~] [`is_trivially_move_constructible_v<T>] is [`true] and
[:zh_CN@~] [`is_trivially_move_constructible_v<T>] 为 [`true] 且
[item]
[:en@~] [`is_trivially_move_constructible_v<E>] is [`true].
[:zh_CN@~] [`is_trivially_move_constructible_v<E>] 为 [`true]。
[list:end]
[div:end]

[%@lib@ctor expected]
[codeblock:declaration]
template<class U, class G>
  constexpr explicit([[redoc("[=seebelow]")]]) expected(const expected<U, G>& rhs);
template<class U, class G>
  constexpr explicit([[redoc("[=seebelow]")]]) expected(expected<U, G>&& rhs);
[codeblock:end]

[div:description]
[para]
[:en] Let:
[:zh_CN] 令：
[list]
[item]
[:en] [`UF] be [`const U&] for the first overload and [`U] for the second
overload.
[:zh_CN] [`UF] 对于第一个重载为 [`const U&]，而对于第二个重载为 [`U]。
[item]
[:en] [`GF] be [`const G&] for the first overload and [`G] for the second
overload.
[:zh_CN] [`GF] 对于第一个重载为 [`const G&]，而对于第二个重载为 [`G]。
[list:end]

[para:constraints]
[list]
[item]
[:en] [`is_constructible_v<T, UF>] is [`true]; and
[:zh_CN] [`is_constructible_v<T, UF>] 为 [`true]；且
[item]
[:en] [`is_constructible_v<E, GF>] is [`true]; and
[:zh_CN] [`is_constructible_v<E, GF>] 为 [`true]；且
[item]
[:en] [`is_constructible_v<T, expected<U, G>&>] is [`false]; and
[:zh_CN] [`is_constructible_v<T, expected<U, G>&>] 为 [`false]；且
[item]
[:en] [`is_constructible_v<T, expected<U, G>>] is [`false]; and
[:zh_CN] [`is_constructible_v<T, expected<U, G>>] 为 [`false]；且
[item]
[:en] [`is_constructible_v<T, const expected<U, G>&>] is [`false]; and
[:zh_CN] [`is_constructible_v<T, const expected<U, G>&>] 为 [`false]；且
[item]
[:en] [`is_constructible_v<T, const expected<U, G>>] is [`false]; and
[:zh_CN] [`is_constructible_v<T, const expected<U, G>>] 为 [`false]；且
[item]
[:en] [`is_convertible_v<expected<U, G>&, T>] is [`false]; and
[:zh_CN] [`is_convertible_v<expected<U, G>&, T>] 为 [`false]；且
[item]
[:en] [`is_convertible_v<expected<U, G>&&, T>] is [`false]; and
[:zh_CN] [`is_convertible_v<expected<U, G>&&, T>] 为 [`false]；且
[item]
[:en] [`is_convertible_v<const expected<U, G>&, T>] is [`false]; and
[:zh_CN] [`is_convertible_v<const expected<U, G>&, T>] 为 [`false]；且
[item]
[:en] [`is_convertible_v<const expected<U, G>&&, T>] is [`false]; and
[:zh_CN] [`is_convertible_v<const expected<U, G>&&, T>] 为 [`false]；且
[item]
[:en] [`is_constructible_v<unexpected<E>, expected<U, G>&>] is [`false]; and
[:zh_CN] [`is_constructible_v<unexpected<E>, expected<U, G>&>] 为 [`false]；且
[item]
[:en] [`is_constructible_v<unexpected<E>, expected<U, G>>] is [`false]; and
[:zh_CN] [`is_constructible_v<unexpected<E>, expected<U, G>>] 为 [`false]；且
[item]
[:en] [`is_constructible_v<unexpected<E>, const expected<U, G>&>] is [`false]; and
[:zh_CN] [`is_constructible_v<unexpected<E>, const expected<U, G>&>] 为 [`false]；且
[item]
[:en] [`is_constructible_v<unexpected<E>, const expected<U, G>>] is [`false]; and
[:zh_CN] [`is_constructible_v<unexpected<E>, const expected<U, G>>] 为 [`false]；且
[list:end]

[para:effects]
[:en] If [`rhs.has_value()], direct-non-list-initializes [*val] with
[`std::forward<UF>(*rhs)].
[:zh_CN] 如果 [`rhs.has_value()]，则以 [`std::forward<UF>(*rhs)] 直接非列表
初始化 [*val]。

[:en] Otherwise, direct-non-list-initializes [*unex] with
[`std::forward<GF>(rhs.error())].
[:zh_CN] 否则，以 [`std::forward<GF>(rhs.error())] 直接非列表初始化 [*unex]。

[para:ensures]
[:en] [`rhs.has_value()] is unchanged; [`rhs.has_value() == this->has_value()]
is [`true].
[:zh_CN] [`rhs.has_value()] 未改变；[`rhs.has_value() == this->has_value()] 为
[`true]。

[para:throws]
[:en] Any exception thrown by the initialization of [*val] or [*unex].
[:zh_CN] 由 [*val] 或 [*unex] 的初始化所抛出的任何异常。

[para:remarks]
[:en] The expression inside [`explicit] is equivalent to
[`!is_convertible_v<UF, T> || !is_convertible_v<GF, E>].
[:zh_CN] [`explicit] 中的表达式等价于
[`!is_convertible_v<UF, T> || !is_convertible_v<GF, E>]。
[div:end]

[%@lib@ctor expected]
[codeblock:declaration]
template<class U = T>
  constexpr explicit(!is_convertible_v<U, T>) expected(U&& v);
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en] [`is_same_v<remove_cvref_t<U>, in_place_t>] is [`false]; and
[:zh_CN] [`is_same_v<remove_cvref_t<U>, in_place_t>] 为 [`false]；且
[item]
[:en] [`is_same_v<expected, remove_cvref_t<U>>] is [`false]; and
[:zh_CN] [`is_same_v<expected, remove_cvref_t<U>>] 为 [`false]；且
[item]
[:en] [`remove_cvref_t<U>] is not a specialization of [`unexpected]; and
[:zh_CN] [`remove_cvref_t<U>] 不是 [`unexpected] 的特例；且
[item]
[:en@~] [`is_constructible_v<T, U>] is [`true].
[:zh_CN@~] [`is_constructible_v<T, U>] 为 [`true]。
[list:end]

[para:effects]
[:en] Direct-non-list-initializes [*val] with [`std::forward<U>(v)].
[:zh_CN] 以 [`std::forward<U>(v)] 直接非列表初始化 [*val]。

[para:ensures]
[:en] [`has_value()] is [`true].
[:zh_CN] [`has_value()] 为 [`true]。

[para:throws]
[:en] Any exception thrown by the initialization of [*val].
[:zh_CN] 由 [*val] 的初始化所抛出的任何异常。
[div:end]

[%@lib@ctor expected]
[codeblock:declaration]
template<class G>
  constexpr explicit(!is_convertible_v<const G&, E>) expected(const unexpected<G>& e);
template<class G>
  constexpr explicit(!is_convertible_v<G, E>) expected(unexpected<G>&& e);
[codeblock:end]

[div:description]
[para]
[:en] Let [`GF] be [`const G&] for the first overload and [`G] for the second
overload.
[:zh_CN] 令 [`GF] 对于第一个重载为 [`const G&]，而对于第二个重载为 [`G]。

[para:constraints]
[:en] [`is_constructible_v<E, GF>] is [`true].
[:zh_CN] [`is_constructible_v<E, GF>] 为 [`true]。

[para:effects]
[:en] Direct-non-list-initializes [*unex] with [`std::forward<GF>(e.error())].
[:zh_CN] 以 [`std::forward<GF>(e.error())] 直接非列表初始化 [*unex]。

[para:ensures]
[:en] [`has_value()] is [`false].
[:zh_CN] [`has_value()] 为 [`false]。

[para:throws]
[:en] Any exception thrown by the initialization of [*unex].
[:zh_CN] 由 [*unex] 的初始化所抛出的任何异常。
[div:end]

[%@lib@ctor expected]
[codeblock:declaration]
template<class... Args>
  constexpr explicit expected(in_place_t, Args&&... args);
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`is_constructible_v<T, Args...>] is [`true].
[:zh_CN] [`is_constructible_v<T, Args...>] 为 [`true]。

[para:effects]
[:en] Direct-non-list-initializes [*val] with [`std::forward<Args>(args)...].
[:zh_CN] 以 [`std::forward<Args>(args)...] 直接非列表初始化 [*val]。

[para:ensures]
[:en] [`has_value()] is [`true].
[:zh_CN] [`has_value()] 为 [`true]。

[para:throws]
[:en] Any exception thrown by the initialization of [*val].
[:zh_CN] 由 [*val] 的初始化所抛出的任何异常。
[div:end]

[%@lib@ctor expected]
[codeblock:declaration]
template<class U, class... Args>
  constexpr explicit expected(in_place_t, initializer_list<U> il, Args&&... args);
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`is_constructible_v<T, initializer_list<U>&, Args...>] is [`true].
[:zh_CN] [`is_constructible_v<T, initializer_list<U>&, Args...>] 为 [`true]。

[para:effects]
[:en] Direct-non-list-initializes [*val] with [`il, std::forward<Args>(args)...].
[:zh_CN] 以 [`il, std::forward<Args>(args)...] 直接非列表初始化 [*val]。

[para:ensures]
[:en] [`has_value()] is [`true].
[:zh_CN] [`has_value()] 为 [`true]。

[para:throws]
[:en] Any exception thrown by the initialization of [*val].
[:zh_CN] 由 [*val] 的初始化所抛出的任何异常。
[div:end]

[%@lib@ctor expected]
[codeblock:declaration]
template<class... Args>
  constexpr explicit expected(unexpect_t, Args&&... args);
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`is_constructible_v<E, Args...>] is [`true].
[:zh_CN] [`is_constructible_v<E, Args...>] 为 [`true]。

[para:effects]
[:en] Direct-non-list-initializes [*unex] with [`std::forward<Args>(args)...].
[:zh_CN] 以 [`std::forward<Args>(args)...] 直接非列表初始化 [*unex]。

[para:ensures]
[:en] [`has_value()] is [`false].
[:zh_CN] [`has_value()] 为 [`false]。

[para:throws]
[:en] Any exception thrown by the initialization of [*unex].
[:zh_CN] 由 [*unex] 的初始化所抛出的任何异常。
[div:end]

[%@lib@ctor expected]
[codeblock:declaration]
template<class U, class... Args>
  constexpr explicit expected(unexpect_t, initializer_list<U> il, Args&&... args);
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`is_constructible_v<E, initializer_list<U>&, Args...>] is [`true].
[:zh_CN] [`is_constructible_v<E, initializer_list<U>&, Args...>] 为 [`true]。

[para:effects]
[:en] Direct-non-list-initializes [*unex] with [`il, std::forward<Args>(args)...].
[:zh_CN] 以 [`il, std::forward<Args>(args)...] 直接非列表初始化 [*unex]。

[para:ensures]
[:en] [`has_value()] is [`false].
[:zh_CN] [`has_value()] 为 [`false]。

[para:throws]
[:en] Any exception thrown by the initialization of [*unex].
[:zh_CN] 由 [*unex] 的初始化所抛出的任何异常。
[div:end]
