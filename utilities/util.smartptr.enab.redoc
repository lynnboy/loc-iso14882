[section#util.smartptr.enab
    [:en] Class template [`enable_shared_from_this]
    [:zh_CN] 类模板 [`enable_shared_from_this]
]

[para]
[%@lib enable_shared_from_this]
[:en]
A class [`T] can inherit from [`enable_shared_from_this<T>] to inherit the
[`shared_from_this] member functions that obtain a [`shared_ptr] instance
pointing to [`*this].
[:zh_CN]
类 [`T] 可以继承于 [`enable_shared_from_this<T>]，以继承成员函数
[`shared_from_this]，用以获取一个指向 [`*this] 的 [`shared_ptr] 实例。

[para]
[begin:example]
[codeblock]
struct X: public enable_shared_from_this<X> { };

int main() {
  shared_ptr<X> p(new X);
  shared_ptr<X> q = p->shared_from_this();
  assert(p == q);
  assert(!p.owner_before(q) && !q.owner_before(p)); // [:en] [`p] and [`q] share ownership \
                                                    [:zh_CN] [`p] 和 [`q] 共享所有权
}
[codeblock:end]
[end:example]

[codeblock:synopsis]
namespace std {
  template<class T> class enable_shared_from_this {
  protected:
    constexpr enable_shared_from_this() noexcept;
    enable_shared_from_this(const enable_shared_from_this&) noexcept;
    enable_shared_from_this& operator=(const enable_shared_from_this&) noexcept;
    ~enable_shared_from_this();

  public:
    shared_ptr<T> shared_from_this();
    shared_ptr<T const> shared_from_this() const;
    weak_ptr<T> weak_from_this() noexcept;
    weak_ptr<T const> weak_from_this() const noexcept;

  private:
    mutable weak_ptr<T> weak_this;  // [=expos]
  };
}
[codeblock:end]

[para]
[:en]
The template parameter [`T] of [`enable_shared_from_this] may be an incomplete
type.
[:zh_CN]
[`enable_shared_from_this] 的模板形参 [`T] 可以是不完整类型。

[%@lib@ctor enable_shared_from_this]
[codeblock:declaration]
constexpr enable_shared_from_this() noexcept;
enable_shared_from_this(const enable_shared_from_this<T>&) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Value-initialize [`weak_this].
[:zh_CN] 值初始化 [`weak_this]。
[div:end]

[%@lib@member operator=[!enable_shared_from_this]]
[codeblock:declaration]
enable_shared_from_this<T>& operator=(const enable_shared_from_this<T>&) noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。

[para]
[begin:note]
[:en] [`weak_this] is not changed.
[:zh_CN] [`weak_this] 未被改变。
[end:note]
[div:end]

[%@lib shared_ptr]
[%@lib@member shared_from_this[!enable_shared_from_this]]
[codeblock:declaration]
shared_ptr<T>       shared_from_this();
shared_ptr<T const> shared_from_this() const;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`shared_ptr<T>(weak_this)].
[:zh_CN] [`shared_ptr<T>(weak_this)]。
[div:end]

[%@lib weak_ptr]
[%@lib@member weak_from_this[!enable_shared_from_this]]
[codeblock:declaration]
weak_ptr<T>       weak_from_this() noexcept;
weak_ptr<T const> weak_from_this() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`weak_this].
[:zh_CN] [`weak_this]。
[div:end]
