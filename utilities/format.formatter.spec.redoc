[section#format.formatter.spec
    [:en] Formatter specializations
    [:zh_CN] 格式化器的特化式
[:][%@lib formatter]
]

[para]
[:en] The functions defined in [#format.functions] use specializations of the
class template [`formatter] to format individual arguments.
[:zh_CN] [#format.functions] 中所定义的各个函数，利用类模板 [`formatter] 的特例
来格式化各个实参。

[para]
[:en] Let [`charT] be either [`char] or [`:key wchar_t].
[:zh_CN] 令 [`charT] 或为 [`char] 或为 [`:key wchar_t]。

[:en] Each specialization of [`formatter] is either enabled or disabled,
as described below.
[:zh_CN] 各个 [`formatter] 的特例要么被启用要么被禁用，如下所述。

[begin:note]
[:en] Enabled specializations meet the [^:newoc Formatter] requirements, and
disabled specializations do not.
[:zh_CN] 被启用的特例均满足 [^:newoc Formatter] 的规定，而被禁用的特例则不满足。
[end:note]

[:en] Each header that declares the template [`formatter] provides the following
enabled specializations:
[:zh_CN] 每个声明了模板 [`formatter] 的头文件都提供了下列被启用的特例：

[list]
[item]
[%@lib@raw [`formatter]
  [![:en]specializations[!character types]
    [:zh_CN]特化式[!字符类型] ]]
[:en] The specializations
[:zh_CN] 特例
[codeblock]
template<> struct formatter<char, char>;
template<> struct formatter<char, wchar_t>;
template<> struct formatter<wchar_t, wchar_t>;
[codeblock:end]

[item]
[%@lib@raw [`formatter]
  [![:en]specializations[!string types]
    [:zh_CN]特化式[!字符串类型] ]]
[:en] For each [`charT], the string type specializations
[:zh_CN] 对于每种 [`charT]，有字符串类型的特例
[codeblock]
template<> struct formatter<charT*, charT>;
template<> struct formatter<const charT*, charT>;
template<size_t N> struct formatter<const charT[N], charT>;
template<class traits, class Allocator>
  struct formatter<basic_string<charT, traits, Allocator>, charT>;
template<class traits>
  struct formatter<basic_string_view<charT, traits>, charT>;
[codeblock:end]

[item]
[%@lib@raw [`formatter]
  [![:en]specializations[!arithmetic types]
    [:zh_CN]特化式[!算术类型] ]]
[:en] For each [`charT], for each cv-unqualified arithmetic type [`ArithmeticT]
other than [`chart], [`:key wchar_t], [`:key char8_t], [`:key char16_t], or
[`:key char32_t], a specialization
[:zh_CN] 对于每种 [`charT]，对于除了 [`chart]、[`:key wchar_t]、[`:key char8_t]、
[`:key char16_t] 和 [`:key char32_t] 之外的每个 cv 未限定的算术类型
[`ArithmeticT]，有特例
[codeblock]
template<> struct formatter<ArithmeticT, charT>;
[codeblock:end]

[item]
[%@lib@raw [`formatter]
  [![:en]specializations[!pointer types]
    [:zh_CN]特化式[!指针类型] ]]
[%@lib@raw [`formatter]
  [![:en]specializations[:zh_CN]特化式[![`nullptr_t]] ]]
[:en] For each [`charT], the pointer type specializations
[:zh_CN] 对于每种 [`charT]，有指针类型的特例
[codeblock]
template<> struct formatter<nullptr_t, charT>;
template<> struct formatter<void*, charT>;
template<> struct formatter<const void*, charT>;
[codeblock:end]
[list:end]

[:en] The [`parse] member functions of these formatters interpret the format
specification as a [~@fmt std-format-spec] as described in [#format.string.std].
[:zh_CN] 这些格式化器的成员函数 [`parse] 将格式说明解释为 [#format.string.std]
中所述的 [~@fmt 标准格式说明]。

[begin:note]
[:en] Specializations such as [`formatter<wchar_t, char>] and
[`formatter<const char*, wchar_t>] that would require implicit multibyte / wide
string or character conversion are disabled.
[:zh_CN] 诸如 [`formatter<wchar_t, char>] 和 [`formatter<const char*, wchar_t>]
这样的可能需要隐含的多字节/宽字符串或字符转换的特例均被禁用。
[end:note]

[para]
[:en] For any types [`T] and [`charT] for which neither the library nor the user
provides an explicit or partial specialization of the class template [`formatter],
[`formatter<T, charT>] is disabled.
[:zh_CN] 对于程序库和用于都没有提供类模板 [`formatter] 的显式或部分特化式的任何
类型 [`T] 和 [`charT]，均禁用 [`formatter<T, charT>]。

[para]
[:en] If the library provides an explicit or partial specialization of
[`formatter<T, charT>], that specialization is enabled except as noted otherwise.
[:zh_CN] 若程序库提供了 [`formatter<T, charT>] 的显式或部分特化式，则除非另行
指名，否则该特例即被启用。

[para]
[:en] If [`F] is a disabled specialization of [`formatter], these values are
[`false]:
[:zh_CN] 若 [`F] 为 [`formatter] 的某个被禁用的特例，则以下各值均为 [`false]：
[list]
[item]
[:en@~] [`is_default_constructible_v<F>],
[:zh_CN@~] [`is_default_constructible_v<F>]，
[item]
[:en@~] [`is_copy_constructible_v<F>],
[:zh_CN@~] [`is_copy_constructible_v<F>]，
[item]
[:en@~] [`is_move_constructible_v<F>],
[:zh_CN@~] [`is_move_constructible_v<F>]，
[item]
[:en@~] [`is_copy_assignable_v<F>], and
[:zh_CN@~] [`is_copy_assignable_v<F>]，以及
[item]
[:en@~] [`is_move_assignable_v<F>].
[:zh_CN@~] [`is_move_assignable_v<F>]。
[list:end]

[para]
[:en] An enabled specialization [`formatter<T, charT>] meets the
[^:newoc Formatter] requirements ([#formatter.requirements]).
[:zh_CN] 被启用的特例 [`formatter<T, charT>] 满足 [^:newoc Formatter] 的规定
（[#formatter.requirements]）。

[begin:example]
[codeblock]
#include <format>

enum color { red, green, blue };
const char* color_names[] = { "red", "green", "blue" };

template<> struct std::formatter<color> : std::formatter<const char*> {
  auto format(color c, format_context& ctx) {
    return formatter<const char*>::format(color_names[c], ctx);
  }
};

struct err {};

std::string s0 = std::format("{}", 42);         // [:en] OK, library-provided formatter \
                                                   [:zh_CN] OK，程序库提供的 formatter
std::string s1 = std::format("{}", L"foo");     // [:en] error: disabled formatter \
                                                   [:zh_CN] 错误：被禁用的 formatter
std::string s2 = std::format("{}", red);        // [:en] OK, user-provided formatter \
                                                   [:zh_CN] OK，程序库提供的 formatter
std::string s3 = std::format("{}", err{});      // [:en] error: disabled formatter \
                                                   [:zh_CN] 错误：被禁用的 formatter
[codeblock:end]
[end:example]
