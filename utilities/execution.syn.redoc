[section#execution.syn
    [:en] Header [`<execution>] synopsis
    [:zh_CN] 头文件 [`<execution>] 纲要
]

[%@hdr@def execution]
[codeblock:synopsis]
namespace std {
  // [:en] [#execpol.type], execution policy type trait \
  [:zh_CN] [#execpol.type]，执行策略类型的特征
  template<class T> struct is_execution_policy;
  template<class T> constexpr bool [[redoc("`:lib>")]]is_execution_policy_v = is_execution_policy<T>::value;
}

namespace std::execution {
  // [:en] [#execpol.seq], sequenced execution policy \
  [:zh_CN] [#execpol.seq]，顺序执行策略
  class sequenced_policy;

  // [:en] [#execpol.par], parallel execution policy \
  [:zh_CN] [#execpol.par]，并行执行策略
  class parallel_policy;

  // [:en] [#execpol.parunseq], parallel and unsequenced execution policy \
  [:zh_CN] [#execpol.parunseq]，并行无顺序执行策略
  class parallel_unsequenced_policy;

  // [:en] [#execpol.unseq], unsequenced execution policy \
  [:zh_CN] [#execpol.unseq]，无顺序执行策略
  class unsequenced_policy;

  // [:en] [#execpol.objects], execution policy objects \
  [:zh_CN] [#execpol.objects]，执行策略对象
  inline constexpr sequenced_policy            seq{ [[redoc("[=unspec]")]] };
  inline constexpr parallel_policy             par{ [[redoc("[=unspec]")]] };
  inline constexpr parallel_unsequenced_policy par_unseq{ [[redoc("[=unspec]")]] };
  inline constexpr unsequenced_policy          unseq{ [[redoc("[=unspec]")]] };
}
[codeblock:end]
