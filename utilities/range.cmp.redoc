[section#range.cmp
    [:en] Concept-constrained comparisons
    [:zh_CN] 受概念约束的比较
]

[para]
[:en] In this subclause, [`[*BUILTIN-PTR-CMP](T, [$op], U)] for types [`T] and
[`U] and where [$op] is an equality ([#expr.eq]) or relational operator
([#expr.rel]) is a boolean constant expression.
[:zh_CN] 本子条款中，对于类型 [`T] 和 [`U] 的 [`[*BUILTIN-PTR-CMP](T, [$op], U)]
是布尔常量表达式，其中 [$op] 是相等性（[#expr.eq]）或关系运算符（[#expr.rel]）。

[:en] [`[*BUILTIN-PTR-CMP](T, [$op], U)] is [`true] if and only if [$op] in the
expression [`declval<T>() [$op] declval<U>()] resolves to a built-in operator
comparing pointers.
[:zh_CN] 当且仅当 [$op] 在表达式 [`declval<T>() [$op] declval<U>()] 中被解析为
用于比较指针的内建运算符时，[`[*BUILTIN-PTR-CMP](T, [$op], U)] 为 [`true]。

[para]
[:en] There is an implementation-defined strict total ordering over all pointer
values of a given type.
[:zh_CN] 一个给定类型的所有指针值之间存在一种由实现定义的严格全序。

[:en] This total ordering is consistent with the partial order imposed by the
builtin operators [`<], [`>], [`<=], [`>=], and [`<=>].
[:zh_CN] 这个全序与内建运算符 [`<]、[`>]、[`<=]、[`>=] 和 [`<=>] 所蕴含的部分序
相一致。

[%@library equal_to]
[codeblock:declaration [!:var BUILTIN-PTR-CMP]]
struct ranges::equal_to {
  template<class T, class U>
    requires equality_comparable_with<T, U> || [*BUILTIN-PTR-CMP](T, ==, U)
  constexpr bool operator()(T&& t, U&& u) const;

  using is_transparent = [=UnSpec];
};
[codeblock:end]

[begin:description]
[para:expects]
[:en] If the expression [`std::forward<T>(t) == std::forward<U>(u)] results in
a call to a built-in operator [`==] comparing pointers of type [`P], the
conversion sequences from both [`T] and [`U] to [`P] shall be
equality-preserving ([#concepts.equality]).
[:zh_CN] 如果表达式 [`std::forward<T>(t) == std::forward<U>(u)] 造成了对 [`P]
类型的指针进行比较的内建运算符 [`==] 的调用，则从 [`T] 和 [`U] 向 [`P] 进行的
转换序列都应当是维持相等性的（[#concepts.equality]）。

[para:effects]
[list]
[item]
[:en] If the expression [`std::forward<T>(t) == std::forward<U>(u)] results in
a call to a built-in operator [`==] comparing pointers of type [`P]: returns
[`false] if either (the converted value of) [`t] precedes [`u] or [`u] precedes
[`t] in the implementation-defined strict total order over pointers of type [`P]
and otherwise [`true].
[:zh_CN] 如果表达式 [`std::forward<T>(t) == std::forward<U>(u)] 造成了对 [`P]
类型的指针进行比较的内建运算符 [`==] 的调用，则有：如果在由实现定义的 [`P] 类型
指针的严格全序中，或者 [`t]（转换后的值）在 [`u] 之前或者 [`u] 在 [`t] 之前，则
返回 [`false]，否则返回 [`true]。

[item]
[:en] Otherwise, equivalent to:
[`return std::forward<T>(t) == std::forward<U>(u);]
[:zh_CN] 否则，等价于：[`return std::forward<T>(t) == std::forward<U>(u);]
[list:end]
[end:description]

[%@library not_equal_to]
[codeblock:declaration [!:var BUILTIN-PTR-CMP] [!:mark UnSpec]]
struct ranges::not_equal_to {
  template<class T, class U>
    requires equality_comparable_with<T, U> || [*BUILTIN-PTR-CMP](T, ==, U)
  constexpr bool operator()(T&& t, U&& u) const;

  using is_transparent = [=UnSpec];
};
[codeblock:end]

[begin:description]
[para]
[:en] [`operator()] has effects equivalent to:
[:zh_CN] [`operator()] 的效果等价于：
[codeblock:notation]
return !ranges::equal_to{}(std::forward<T>(t), std::forward<U>(u));
[codeblock:end]
[end:description]

[%@library greater]
[codeblock:declaration [!:var BUILTIN-PTR-CMP] [!:mark UnSpec]]
struct ranges::greater {
  template<class T, class U>
    requires totally_ordered_with<T, U> || [*BUILTIN-PTR-CMP](U, <, T)
  constexpr bool operator()(T&& t, U&& u) const;

  using is_transparent = [=UnSpec];
};
[codeblock:end]

[begin:description]
[para]
[:en] [`operator()] has effects equivalent to:
[:zh_CN] [`operator()] 的效果等价于：
[codeblock:notation]
return ranges::less{}(std::forward<U>(u), std::forward<T>(t));
[codeblock:end]
[end:description]

[%@library less]
[codeblock:declaration [!:var BUILTIN-PTR-CMP] [!:mark UnSpec]]
struct ranges::less {
  template<class T, class U>
    requires totally_ordered_with<T, U> || [*BUILTIN-PTR-CMP](T, <, U)
  constexpr bool operator()(T&& t, U&& u) const;

  using is_transparent = [=UnSpec];
};
[codeblock:end]

[begin:description]
[para:expects]
[:en] If the expression [`std::forward<T>(t) < std::forward<U>(u)] results in a
call to a built-in operator [`<] comparing pointers of type [`P], the conversion
sequences from both [`T] and [`U] to [`P] shall be equality-preserving
([#concepts.equality]).
[:zh_CN] 如果表达式 [`std::forward<T>(t) < std::forward<U>(u)] 造成了对 [`P]
类型的指针进行比较的内建运算符 [`<] 的调用，则从 [`T] 和 [`U] 向 [`P] 进行的
转换序列都应当是维持相等性的（[#concepts.equality]）。

[:en] For any expressions [`ET] and [`EU] such that [`decltype((ET))] is [`T]
and [`decltype((EU))] is [`U], exactly one of [`ranges::less{}(ET, EU)],
[`ranges::less{}(EU, ET)], or [`ranges::equal_to{}(ET, EU)] shall be [`true].
[:zh_CN] 对于任何使得 [`decltype((ET))] 为 [`T] 且 [`decltype((EU))] 为 [`U] 的
表达式 [`ET] 和 [`EU]，则 [`ranges::less{}(ET, EU)]，[`ranges::less{}(EU, ET)]，
和 [`ranges::equal_to{}(ET, EU)] 刚好有一个为 [`true]。

[para:effects]
[list]
[item]
[:en] If the expression [`std::forward<T>(t) < std::forward<U>(u)] results in a
call to a built-in operator [`<] comparing pointers of type [`P]: returns
[`true] if (the converted value of) [`t] precedes [`u] in the
implementation-defined strict total order over pointers of type [`P] and
otherwise [`false].
[:zh_CN] 如果表达式 [`std::forward<T>(t) < std::forward<U>(u)] 造成了对 [`P]
类型的指针进行比较的内建运算符 [`<] 的调用，则有：如果在由实现定义的 [`P] 类型
指针的严格全序中，[`t]（转换后的值）在 [`u] 之前则返回 [`true]，否则返回
[`false]。

[item]
[:en] Otherwise, equivalent to:
[`return std::forward<T>(t) < std::forward<U>(u);]
[:zh_CN] 否则，等价于：[`return std::forward<T>(t) < std::forward<U>(u);]
[list:end]
[end:description]

[%@library greater_equal]
[codeblock:declaration [!:var BUILTIN-PTR-CMP] [!:mark UnSpec]]
struct ranges::greater_equal {
  template<class T, class U>
    requires totally_ordered_with<T, U> || [*BUILTIN-PTR-CMP](T, <, U)
  constexpr bool operator()(T&& t, U&& u) const;

  using is_transparent = [=UnSpec];
};
[codeblock:end]

[begin:description]
[para]
[:en] [`operator()] has effects equivalent to:
[:zh_CN] [`operator()] 的效果等价于：
[codeblock:notation]
return !ranges::less{}(std::forward<T>(t), std::forward<U>(u));
[codeblock:end]
[end:description]

[%@library less_equal]
[codeblock:declaration [!:var BUILTIN-PTR-CMP] [!:mark UnSpec]]
struct ranges::less_equal {
  template<class T, class U>
    requires totally_ordered_with<T, U> || [*BUILTIN-PTR-CMP](U, <, T)
  constexpr bool operator()(T&& t, U&& u) const;

  using is_transparent = [=UnSpec];
};
[codeblock:end]

[begin:description]
[para]
[:en] [`operator()] has effects equivalent to:
[:zh_CN] [`operator()] 的效果等价于：
[codeblock:notation]
return !ranges::less{}(std::forward<U>(u), std::forward<T>(t));
[codeblock:end]
[end:description]
