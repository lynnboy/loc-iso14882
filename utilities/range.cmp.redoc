[section#range.cmp
    [:en] Concept-constrained comparisons
    [:zh_CN] 受概念约束的比较
]

[%@lib equal_to]
[codeblock:synopsis]
struct ranges::equal_to {
  template<class T, class U>
    constexpr bool operator()(T&& t, U&& u) const;

  using is_transparent = [[redoc("[=unspec]")]];
};
[codeblock:end]

[codeblock:declaration]
template<class T, class U>
  constexpr bool operator()(T&& t, U&& u) const;
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`T] and [`U] satisfy [`:c equality_comparable_with].
[:zh_CN] [`T] 和 [`U] 满足 [`:c equality_comparable_with]。

[para:expects]
[:en] If the expression [`std::forward<T>(t) == std::forward<U>(u)] results in
a call to a built-in operator [`==] comparing pointers of type [`P], the
conversion sequences from both [`T] and [`U] to [`P] are equality-preserving
([#concepts.equality]); otherwise, [`T] and [`U] model
[`equality_comparable_with].
[:zh_CN] 如果表达式 [`std::forward<T>(t) == std::forward<U>(u)] 造成了对 [`P]
类型的指针进行比较的内建运算符 [`==] 的调用，则从 [`T] 和 [`U] 向 [`P] 进行的
转换序列都是维持相等性的（[#concepts.equality]）；否则，[`T] 和 [`U] 构成
[`equality_comparable_with]。

[para:effects]
[list]
[item]
[:en] If the expression [`std::forward<T>(t) == std::forward<U>(u)] results in
a call to a built-in operator [`==] comparing pointers: returns [`false] if
either (the converted value of) [`t] precedes [`u] or [`u] precedes [`t] in the
implementation-defined strict total order over pointers ([#defns.order.ptr]) and
otherwise [`true].
[:zh_CN] 如果表达式 [`std::forward<T>(t) == std::forward<U>(u)] 造成了对指针进行
比较的内建运算符 [`==] 的调用，则有：如果在由实现定义的指针上的严格全序
（[#defns.order.ptr]）中，或者 [`t]（转换后的值）在 [`u] 之前或者 [`u] 在 [`t]
之前，则返回 [`false]，否则返回 [`true]。

[item]
[:en] Otherwise, equivalent to:
[`return std::forward<T>(t) == std::forward<U>(u);]
[:zh_CN] 否则，等价于：[`return std::forward<T>(t) == std::forward<U>(u);]
[list:end]
[div:end]

[%@lib not_equal_to]
[codeblock:synopsis]
struct ranges::not_equal_to {
  template<class T, class U>
    constexpr bool operator()(T&& t, U&& u) const;

  using is_transparent = [[redoc("[=unspec]")]];
};
[codeblock:end]

[codeblock:declaration]
template<class T, class U>
  constexpr bool operator()(T&& t, U&& u) const;
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`T] and [`U] satisfy [`:c equality_comparable_with].
[:zh_CN] [`T] 和 [`U] 满足 [`:c equality_comparable_with]。

[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return !ranges::equal_to{}(std::forward<T>(t), std::forward<U>(u));
[codeblock:end]
[div:end]

[%@lib greater]
[codeblock:synopsis]
struct ranges::greater {
  template<class T, class U>
  constexpr bool operator()(T&& t, U&& u) const;

  using is_transparent = [[redoc("[=unspec]")]];
};
[codeblock:end]

[codeblock:declaration]
template<class T, class U>
  constexpr bool operator()(T&& t, U&& u) const;
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`T] and [`U] satisfy [`:c totally_ordered_with].
[:zh_CN] [`T] 和 [`U] 满足 [`:c totally_ordered_with]。

[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return ranges::less{}(std::forward<U>(u), std::forward<T>(t));
[codeblock:end]
[div:end]

[%@lib less]
[codeblock:synopsis]
struct ranges::less {
  template<class T, class U>
    constexpr bool operator()(T&& t, U&& u) const;

  using is_transparent = [[redoc("[=unspec]")]];
};
[codeblock:end]

[codeblock:declaration]
template<class T, class U>
  constexpr bool operator()(T&& t, U&& u) const;
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`T] and [`U] satisfy [`:c totally_ordered_with].
[:zh_CN] [`T] 和 [`U] 满足 [`:c totally_ordered_with]。

[para:expects]
[:en] If the expression [`std::forward<T>(t) < std::forward<U>(u)] results in
a call to a built-in operator [`==] comparing pointers of type [`P], the
conversion sequences from both [`T] and [`U] to [`P] are equality-preserving
([#concepts.equality]); otherwise, [`T] and [`U] model [`:c totally_ordered_with].
[:zh_CN] 如果表达式 [`std::forward<T>(t) < std::forward<U>(u)] 造成了对 [`P]
类型的指针进行比较的内建运算符 [`==] 的调用，则从 [`T] 和 [`U] 向 [`P] 进行的
转换序列都是维持相等性的（[#concepts.equality]）；否则，[`T] 和 [`U] 构成
[`:c totally_ordered_with]。

[:en] For any expressions [`ET] and [`EU] such that [`decltype((ET))] is [`T]
and [`decltype((EU))] is [`U], exactly one of [`ranges::less{}(ET, EU)],
[`ranges::less{}(EU, ET)], or [`ranges::equal_to{}(ET, EU)] is [`true].
[:zh_CN] 对于任何使得 [`decltype((ET))] 为 [`T] 且 [`decltype((EU))] 为 [`U] 的
表达式 [`ET] 和 [`EU]，则 [`ranges::less{}(ET, EU)]，[`ranges::less{}(EU, ET)]，
和 [`ranges::equal_to{}(ET, EU)] 刚好有一个为 [`true]。

[para:effects]
[list]
[item]
[:en] If the expression [`std::forward<T>(t) < std::forward<U>(u)] results in a
call to a built-in operator [`<] comparing pointers: returns [`true] if (the
converted value of) [`t] precedes [`u] in the implementation-defined strict
total order over pointers ([#defns.order.ptr]) and otherwise [`false].
[:zh_CN] 如果表达式 [`std::forward<T>(t) < std::forward<U>(u)] 造成了对指针进行
比较的内建运算符 [`<] 的调用，则有：如果在由实现定义的指针上的严格全序
（[#defns.order.ptr]）中，[`t]（转换后的值）在 [`u] 之前则返回 [`true]，否则返回
[`false]。

[item]
[:en] Otherwise, equivalent to: [`return std::forward<T>(t) < std::forward<U>(u);]
[:zh_CN] 否则，等价于：[`return std::forward<T>(t) < std::forward<U>(u);]
[list:end]
[div:end]

[%@lib greater_equal]
[codeblock:synopsis]
struct ranges::greater_equal {
  template<class T, class U>
    constexpr bool operator()(T&& t, U&& u) const;

  using is_transparent = [[redoc("[=unspec]")]];
};
[codeblock:end]

[codeblock:declaration]
template<class T, class U>
  constexpr bool operator()(T&& t, U&& u) const;
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`T] and [`U] satisfy [`:c totally_ordered_with].
[:zh_CN] [`T] 和 [`U] 满足 [`:c totally_ordered_with]。

[para:expects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return !ranges::less{}(std::forward<T>(t), std::forward<U>(u));
[codeblock:end]
[div:end]

[%@lib less_equal]
[codeblock:synopsis]
struct ranges::less_equal {
  template<class T, class U>
    constexpr bool operator()(T&& t, U&& u) const;

  using is_transparent = [[redoc("[=unspec]")]];
};
[codeblock:end]

[codeblock:declaration]
template<class T, class U>
  constexpr bool operator()(T&& t, U&& u) const;
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`T] and [`U] satisfy [`:c totally_ordered_with].
[:zh_CN] [`T] 和 [`U] 满足 [`:c totally_ordered_with]。

[para:expects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return !ranges::less{}(std::forward<U>(u), std::forward<T>(t));
[codeblock:end]
[div:end]
