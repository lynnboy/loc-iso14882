[section#tuple.assign
    [:en] Assignment
    [:zh_CN] 赋值
]

[para]
[:en]
For each [`tuple] assignment operator, an exception is thrown only if the
assignment of one of the types in [`Types] throws an exception.
[:zh_CN]
对于每个 [`tuple] 赋值运算符，仅当 [`Types] 中的一个类型的赋值抛出异常时，它才
抛出异常。

[:en]
In the function descriptions that follow, let [$i] be in the range
[=range(0,sizeof...(Types))] in order, [$[`T]_i] be the [$i^\text{th}] type in
[`Types], and [$[`U]_i] be the [$i^\text{th}] type in a template parameter pack
named [`UTypes], where indexing is zero-based.
[:zh_CN]
下文对函数的描述中，令 [$i] 在范围 [=range(0,sizeof...(Types))] 中依序取值，
[$[`T]_i] 为 [`Types] 中的第 [$i] 个类型，而 [$[`U]_i] 为名为 [`UTypes] 的模板
形参包组中的第 [$i] 个类型，其中的索引基于零。

[%@lib@member operator=[!tuple]]
[codeblock:declaration]
constexpr tuple& operator=(const tuple& u);
[codeblock:end]

[div:description]
[para:effects]
[:en] Assigns each element of [`u] to the corresponding element of [`*this].
[:zh_CN] 以 [`u] 的每个元素对 [`*this] 的对应元素赋值。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。

[para:remarks]
[:en] This operator is defined as deleted unless [`is_copy_assignable_v<T[$_i]>]
is [`true] for all [$i].
[:zh_CN] 除非 [`is_copy_assignable_v<T[$_i]>] 对于所有 [$i] 为 [`true]，否则
这个运算符被定义为弃置的。
[div:end]

[%@lib@member operator=[!tuple]]
[codeblock:declaration]
constexpr const tuple& operator=(const tuple& u) const;
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`(is_copy_assignable_v<const Types> && ...)] is [`true].
[:zh_CN] [`(is_copy_assignable_v<const Types> && ...)] 为 [`true]。

[para:effects]
[:en] Assigns each element of [`u] to the corresponding element of [`*this].
[:zh_CN] 以 [`u] 的每个元素对 [`*this] 的对应元素赋值。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@lib@member operator=[!tuple]]
[codeblock:declaration]
constexpr tuple& operator=(tuple&& u) noexcept([[redoc("[=seebelow]")]]);
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`is_move_assignable_v<T[$_i]>] is [`true] for all [$i].
[:zh_CN] [`is_move_assignable_v<T[$_i]>] 对于所有 [$i] 为 [`true]。

[para:effects]
[:en] For all [$i], assigns [`std::forward<$T[$_i]>(get<[$i]>(u))] to
[`get<[$i]>(*this)].
[:zh_CN] 对于所有 [$i]，以 [`std::forward<T[$_i]>(get<[$i]>(u))] 对
[`get<[$i]>(*this)] 进行赋值。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。

[para:remarks]
[:en] The exception specification is equivalent to the logical [=logop and] 
of the following expressions:
[:zh_CN] 其异常说明等价于以下表达式的逻辑与（[=logop and]）：

[codeblock:notation]
is_nothrow_move_assignable_v<T[$_i]>
[codeblock:end]

[:en@~]
where [$[`T]_i] is the [$i^\text{th}] type in [`Types].
[:zh_CN@~]
其中 [$[`T]_i] 为 [`Types] 的第 [$i] 个类型。
[div:end]

[%@lib@member operator=[!tuple]]
[codeblock:declaration]
constexpr const tuple& operator=(tuple&& u) const;
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`(is_assignable_v<const Types&, Types> && ...)] is [`true].
[:zh_CN] [`(is_assignable_v<const Types&, Types> && ...)] 为 [`true]。

[para:effects]
[:en] For all [$i], assigns [`std::forward<$T[$_i]>(get<[$i]>(u))] to
[`get<[$i]>(*this)].
[:zh_CN] 对于所有 [$i]，以 [`std::forward<T[$_i]>(get<[$i]>(u))] 对
[`get<[$i]>(*this)] 进行赋值。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@lib@member operator=[!tuple]]
[codeblock:declaration]
template<class... UTypes> constexpr tuple& operator=(const tuple<UTypes...>& u);
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en] [`sizeof...(Types)] equals [`sizeof...(UTypes)] and
[:zh_CN] [`sizeof...(Types)] 等于 [`sizeof...(UTypes)] 并且
[item]
[:en] [`is_assignable_v<T[$_i]&, const U[$_i]&>] is [`true] for all [$i].
[:zh_CN] [`is_assignable_v<T[$_i]&, const U[$_i]&>] 对于所有 [$i] 为 [`true]。
[list:end]

[para:effects]
[:en] Assigns each element of [`u] to the corresponding element of [`*this].
[:zh_CN] 以 [`u] 的每个元素对 [`*this] 的对应元素进行赋值。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@lib@member operator=[!tuple]]
[codeblock:declaration]
template<class... UTypes> constexpr const tuple& operator=(const tuple<UTypes...>& u) const;
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en] [`sizeof...(Types)] equals [`sizeof...(UTypes)] and
[:zh_CN] [`sizeof...(Types)] 等于 [`sizeof...(UTypes)] 并且
[item]
[:en] [`(is_assignable_v<const Types&, const UTypes&> && ...)] is [`true].
[:zh_CN] [`(is_assignable_v<const Types&, const UTypes&> && ...)] 为 [`true]。
[list:end]

[para:effects]
[:en] Assigns each element of [`u] to the corresponding element of [`*this].
[:zh_CN] 以 [`u] 的每个元素对 [`*this] 的对应元素进行赋值。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@lib@member operator=[!tuple]]
[codeblock:declaration]
template<class... UTypes> constexpr tuple& operator=(tuple<UTypes...>&& u);
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en] [`sizeof...(Types)] equals [`sizeof...(UTypes)] and
[:zh_CN] [`sizeof...(Types)] 等于 [`sizeof...(UTypes)] 并且
[item]
[:en] [`is_assignable_v<T[$_i]&, U[$_i]>] is [`true] for all [$i].
[:zh_CN] [`is_assignable_v<T[$_i]&, U[$_i]>] 对于所有 [$i] 为 [`true]。
[list:end]

[para:effects]
[:en] For all [$i], assigns [`std::forward<U[$_i]>(get<[$i]>(u))] to
[`get<[$i]>(*this)].
[:zh_CN] 对于所有 [$i]，以 [`std::forward<U[$_i]>(get<[$i]>(u))] 对
[`get<[$i]>(*this)] 进行赋值。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@lib@member operator=[!tuple]]
[codeblock:declaration]
template<class... UTypes> constexpr const tuple& operator=(tuple<UTypes...>&& u) const;
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en] [`sizeof...(Types)] equals [`sizeof...(UTypes)] and
[:zh_CN] [`sizeof...(Types)] 等于 [`sizeof...(UTypes)] 并且
[item]
[:en] [`(is_assignable_v<const Types&, UTypes> && ...)] is [`true].
[:zh_CN] [`(is_assignable_v<const Types&, UTypes> && ...)] 为 [`true]。
[list:end]

[para:effects]
[:en] For all [$i], assigns [`std::forward<U[$_i]>(get<[$i]>(u))] to
[`get<[$i]>(*this)].
[:zh_CN] 对于所有 [$i]，以 [`std::forward<U[$_i]>(get<[$i]>(u))] 对
[`get<[$i]>(*this)] 进行赋值。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@lib@member operator=[!tuple]]
[%@lib pair]
[codeblock:declaration]
template<class U1, class U2> constexpr tuple& operator=(const pair<U1, U2>& u);
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en] [`sizeof...(Types)] is 2 and
[:zh_CN] [`sizeof...(Types)] 为 2 并且
[item]
[:en] [`is_assignable_v<T[$_0]&, const U1&>] is [`true], and
[:zh_CN] [`is_assignable_v<T[$_0]&, const U1&>] 为 [`true]，并且
[item]
[:en] [`is_assignable_v<T[$_1]&, const U2&>] is [`true].
[:zh_CN] [`is_assignable_v<T[$_1]&, const U2&>] 为 [`true]。
[list:end]

[para:effects]
[:en] Assigns [`u.first] to the first element of [`*this] and [`u.second] to the
second element of [`*this].
[:zh_CN] 以 [`u.first] 对 [`*this] 的第一个元素赋值，并以 [`u.second] 对
[`*this] 的第二个元素赋值。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@lib@member operator=[!tuple]]
[codeblock:declaration]
template<class U1, class U2> constexpr const tuple& operator=(const pair<U1, U2>& u) const;
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en] [`sizeof...(Types)] is 2,
[:zh_CN] [`sizeof...(Types)] 为 2，
[item]
[:en] [`is_assignable_v<const T[$_0]&, const U1&>] is [`true], and
[:zh_CN] [`is_assignable_v<const T[$_0]&, const U1&>] 为 [`true]，并且
[item]
[:en] [`is_assignable_v<const T[$_1]&, const U2&>] is [`true].
[:zh_CN] [`is_assignable_v<const T[$_1]&, const U2&>] 为 [`true]。
[list:end]

[para:effects]
[:en] Assigns [`u.first] to the first element and [`u.second] to the second
element.
[:zh_CN] 以 [`u.first] 对第一个元素赋值，并以 [`u.second] 对第二个元素赋值。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@lib@member operator=[!tuple]]
[%@lib pair]
[codeblock:declaration]
template<class U1, class U2> constexpr tuple& operator=(pair<U1, U2>&& u);
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en] [`sizeof...(Types)] is 2 and
[:zh_CN] [`sizeof...(Types)] 为 2 并且
[item]
[:en] [`is_assignable_v<T[$_0]&, U1>] is [`true], and
[:zh_CN] [`is_assignable_v<T[$_0]&, U1>] 为 [`true]，并且
[item]
[:en] [`is_assignable_v<T[$_1]&, U2>] is [`true].
[:zh_CN] [`is_assignable_v<T[$_1]&, U2>] 为 [`true]。
[list:end]

[para:effects]
[:en] Assigns [`std::forward<U1>(u.first)] to the first element of [`*this] and
[`std::forward<U2>(u.second)] to the second element of [`*this].
[:zh_CN] 以 [`std::forward<U1>(u.first)] 对 [`*this] 的第一个元素赋值，并以
[`std::forward<U2>(u.second)] 对 [`*this] 的第二个元素赋值。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@lib@member operator=[!tuple]]
[%@lib pair]
[codeblock:declaration]
template<class U1, class U2> constexpr const tuple& operator=(pair<U1, U2>&& u) const;
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en] [`sizeof...(Types)] is 2,
[:zh_CN] [`sizeof...(Types)] 为 2，
[item]
[:en] [`is_assignable_v<const T[$_0]&, U1>] is [`true], and
[:zh_CN] [`is_assignable_v<const T[$_0]&, U1>] 为 [`true]，并且
[item]
[:en] [`is_assignable_v<const T[$_1]&, U2>] is [`true].
[:zh_CN] [`is_assignable_v<const T[$_1]&, U2>] 为 [`true]。
[list:end]

[para:effects]
[:en] Assigns [`std::forward<U1>(u.first)] to the first element and
[`std::forward<U2>(u.second)] to the second element.
[:zh_CN] 以 [`std::forward<U1>(u.first)] 对第一个元素赋值，并以
[`std::forward<U2>(u.second)] 对第二个元素赋值。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@lib@member operator=[!tuple]]
[codeblock:declaration]
template<[[redoc("*:c>")]]tuple-like UTuple>
  constexpr tuple& operator=(UTuple&& u);
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en] [`[*:c different-from]<UTuple, tuple>] ([#range.utility.helpers]) is [`true],
[:zh_CN] [`[*:c different-from]<UTuple, tuple>]（[#range.utility.helpers]）为
[`true]，

[item]
[:en] [`remove_cvref_t<UTuple>] is not a specialization of [`ranges::subrange],
[:zh_CN] [`remove_cvref_t<UTuple>] 不是 [`ranges::subrange] 的特例，

[item]
[:en] [`sizeof...(Types)] equals [`tuple_size_v<remove_cvref_t<UTuple>>], and,
[:zh_CN] [`sizeof...(Types)] 等于 [`tuple_size_v<remove_cvref_t<UTuple>>]，并且

[item]
[:en] [`is_assignable_v<[$[`T]_i]&, decltype(get<[$i]>(std::forward<UTuple>(u)))>]
is [`true] for all [$i].
[:zh_CN] 对于所有 [$i]，
[`is_assignable_v<[$[`T]_i]&, decltype(get<[$i]>(std::forward<UTuple>(u)))>]
均为 [`true]。
[list:end]

[para:effects]
[:en] For all [$i], assigns [`get<[$i]>(std::forward<UTuple>(u))] to
[`get<[$i]>(*this)].
[:zh_CN] 对于所有 [$i]，将 [`get<[$i]>(std::forward<UTuple>(u))] 赋值给
[`get<[$i]>(*this)]。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@lib@member operator=[!tuple]]
[codeblock:declaration]
template<[[redoc("*:c>")]]tuple-like UTuple>
  constexpr const tuple& operator=(UTuple&& u) const;
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en] [`[*:c different-from]<UTuple, tuple>] ([#range.utility.helpers]) is [`true],
[:zh_CN] [`[*:c different-from]<UTuple, tuple>]（[#range.utility.helpers]）为
[`true]，

[item]
[:en] [`remove_cvref_t<UTuple>] is not a specialization of [`ranges::subrange],
[:zh_CN] [`remove_cvref_t<UTuple>] 不是 [`ranges::subrange] 的特例，

[item]
[:en] [`sizeof...(Types)] equals [`tuple_size_v<remove_cvref_t<UTuple>>], and,
[:zh_CN] [`sizeof...(Types)] 等于 [`tuple_size_v<remove_cvref_t<UTuple>>]，并且

[item]
[:en]
[`is_assignable_v<const [$[`T]_i]&, decltype(get<[$i]>(std::forward<UTuple>(u)))>]
is [`true] for all [$i].
[:zh_CN] 对于所有 [$i]，
[`is_assignable_v<const [$[`T]_i]&, decltype(get<[$i]>(std::forward<UTuple>(u)))>]
均为 [`true]。
[list:end]

[para:effects]
[:en] For all [$i], assigns [`get<[$i]>(std::forward<UTuple>(u))] to
[`get<[$i]>(*this)].
[:zh_CN] 对于所有 [$i]，将 [`get<[$i]>(std::forward<UTuple>(u))] 赋值给
[`get<[$i]>(*this)]。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]
