[section#tuple.assign
    [:en] Assignment
    [:zh_CN] 赋值
]

[para]
[:en]
For each [`tuple] assignment operator, an exception is thrown only if the
assignment of one of the types in [`Types] throws an exception.
[:zh_CN]
对于每个 [`tuple] 赋值运算符，仅当 [`Types] 中的一个类型的赋值抛出异常时，它才
抛出异常。

[:en]
In the function descriptions that follow, let [$i] be in the range
[=range(0,sizeof...(Types))] in order, [`T][$_i] be the [$i][^th] type in
[`Types], and [`U][$_i] be the [$i][^th] type in a template parameter pack named
[`UTypes], where indexing is zero-based.
[:zh_CN]
下文对函数的描述中，令 [$i] 在范围 [=range(0,sizeof...(Types))] 中依序取值，
[`T][$_i] 为 [`Types] 中的第 [$i] 个类型，而 [`U][$_i] 为名为 [`UTypes] 的模板
形参包组中的第 [$i] 个类型，其中的索引基于零。

[%@library tuple[!operator=]]
[%@library operator=[!tuple]]
[codeblock:declaration]
tuple& operator=(const tuple& u);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Assigns each element of [`u] to the corresponding element of [`*this].
[:zh_CN] 以 [`u] 的每个元素对 [`*this] 的对应元素赋值。

[para:remarks]
[:en] This operator shall be defined as deleted unless
[`is_copy_assignable_v<T[$_i]>] is [`true] for all [$i].
[:zh_CN] 除非 [`is_copy_assignable_v<T[$_i]>] 对于所有 [$i] 为 [`true]，否则
这个运算符应当被定义为弃置的。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[exit:description]

[%@library tuple[!operator=]]
[%@library operator=[!tuple]]
[codeblock:declaration [!:mark SeeBelow] ]
tuple& operator=(tuple&& u) noexcept([=SeeBelow]);
[codeblock:end]

[enter:description]
[para:effects]
[:en] For all [$i], assigns [`std::forward<$T[$_i]>(get<[$i]>(u))] to
[`get<[$i]>(*this)].
[:zh_CN] 对于所有 [$i]，以 [`std::forward<T[$_i]>(get<[$i]>(u))] 对
[`get<[$i]>(*this)] 进行赋值。

[para:remarks]
[:en] This operator shall be defined as deleted unless
[`is_move_assignable_v<T[$_i]>] is [`true] for all [$i].
[:zh_CN] 除非 [`is_move_assignable_v<T[$_i]>] 对于所有 [$i] 为 [`true]，否则
这个运算符应当被定义为弃置的。

[para:remarks]
[:en] The expression inside [`noexcept] is equivalent to the logical [em@sc and]
of the following expressions:
[:zh_CN] [`noexcept] 中的表达式等价于以下表达式的逻辑 [em@sc and]：

[codeblock:notation [!:sub i] ]
is_nothrow_move_assignable_v<T[$_i]>
[codeblock:end]

[:en@~]
where [`T][$_i] is the [$i][^th] type in [`Types].
[:zh_CN@~]
其中 [`T][$_i] 为 [`Types] 的第 [$i] 个类型。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[exit:description]

[%@library tuple[!operator=]]
[%@library operator=[!tuple]]
[codeblock:declaration]
template <class... UTypes> tuple& operator=(const tuple<UTypes...>& u);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Assigns each element of [`u] to the corresponding element of [`*this].
[:zh_CN] 以 [`u] 的每个元素对 [`*this] 的对应元素进行赋值。

[para:remarks]
[:en] This operator shall not participate in overload resolution unless
[`sizeof...(Types) == sizeof...(UTypes)] and
[`is_assignable_v<T[$_i]&, const U[$_i]&>] is [`true] for all [$i].
[:zh_CN] 除非 [`sizeof...(Types) == sizeof...(UTypes)] 并且
[`is_assignable_v<T[$_i]&, const U[$_i]&>] 对于所有 [$i] 为 [`true]，否则
这个运算符不能参与重载决议。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[exit:description]

[%@library tuple[!operator=]]
[%@library operator=[!tuple]]
[codeblock:declaration]
template <class... UTypes> tuple& operator=(tuple<UTypes...>&& u);
[codeblock:end]

[enter:description]
[para:effects]
[:en] For all [$i], assigns [`std::forward<U[$_i]>(get<[$i])>(u))] to
[`get<[$i]>(*this)].
[:zh_CN] 对于所有 [$i]，以 [`std::forward<U[$_i]>(get<[$i])>(u))] 对
[`get<[$i]>(*this)] 进行赋值。

[para:remarks]
[:en] This operator shall not participate in overload resolution unless
[`is_assignable_v<T[$_i]&, U[$_i]&&> == true] for all [`i] and
[`sizeof...(Types) == sizeof...(UTypes)].
[:zh_CN] 除非对于所有 [`i]，[`is_assignable<T[$_i]&, U[$_i]&&>::value == true]
并且 [`sizeof...(Types) == sizeof...(UTypes)]，否则这个运算符不能参与重载决议。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[exit:description]

[%@library tuple[!operator=]]
[%@library operator=[!tuple]]
[%@library pair]
[codeblock:declaration]
template <class U1, class U2> tuple& operator=(const pair<U1, U2>& u);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Assigns [`u.first] to the first element of [`*this] and [`u.second] to the
second element of [`*this].
[:zh_CN] 以 [`u.first] 对 [`*this] 的第一个元素赋值，并以 [`u.second] 对
[`*this] 的第二个元素赋值。

[para:remarks]
[:en] This operator shall not participate in overload resolution unless
[`sizeof...(Types) == 2] and [`is_assignable_v<T[_0]&, const U1&>] is [`true]
for the first type [`T][_0] in [`Types] and
[`is_assignable_v<T[_1]&, const U2&>] is [`true] for the second type [`T][_1]
in [`Types].
[:zh_CN] 除非 [`sizeof...(Types) == 2] 并且对于 [`Types] 中的第一个类型
[`T][_0]，[`is_assignable_v<T[_0]&, const U1&>] 为 [`true] 并且对于 [`Types]
中的第二个类型 [`T][_1]， [`is_assignable_v<T[_1]&, const U2&>] 为 [`true]，否则
这个运算符不能参与重载决议。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[exit:description]

[%@library tuple[!operator=]]
[%@library operator=[!tuple]]
[%@library pair]
[codeblock:declaration]
template <class U1, class U2> tuple& operator=(pair<U1, U2>&& u);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Assigns [`std::forward<U1>(u.first)] to the first element of [`*this] and
[`std::forward<U2>(u.second)] to the second element of [`*this].
[:zh_CN] 以 [`std::forward<U1>(u.first)] 对 [`*this] 的第一个元素赋值，并以
[`std::forward<U2>(u.second)] 对 [`*this] 的第二个元素赋值。

[para:remarks]
[:en] This operator shall not participate in overload resolution unless
[`sizeof...(Types) == 2] and  [`is_assignable_v<T[_0]&, U1&&>] is [`true] for
the first type [`T][_0] in [`Types] and [`is_assignable_v<T[_1]&, U2&&>] is
[`true] for the second type [`T][_1] in [`Types].
[:zh_CN] 除非 [`sizeof...(Types) == 2] 并且对于 [`Types] 中的第一个类型
[`T][_0]，[`is_assignable_v<T[_0]&, U1&&>] 为 [`true] 并且对于 [`Types] 中的
第二个类型 [`T][_1]，[`is_assignable_v<T[_1]&, U2&&>] 为 [`true]，否则这个运算符
不能参与重载决议。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[exit:description]
