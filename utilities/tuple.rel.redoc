[section#tuple.rel
    [:en] Relational operators
    [:zh_CN] 关系运算符
]

[%@lib@member operator==[!tuple]]
[codeblock:declaration]
template<class... TTypes, class... UTypes>
  constexpr bool operator==(const tuple<TTypes...>& t, const tuple<UTypes...>& u);
template<class... TTypes, [[redoc("*:c>")]]tuple-like UTuple>
  constexpr bool operator==(const tuple<TTypes...>& t, const UTuple& u);
[codeblock:end]

[div:description]
[para]
[:en] For the first overload let [`UTuple] be [`tuple<UTypes...>].
[:zh_CN] 对于第一种重载，令 [`UTuple] 为 [`tuple<UTypes...>]。

[para:mandates]
[:en] For all [`i], where [$0 \leq [`i] < [`sizeof...(TTypes)]],
[`get<i>(t) == get<i>(u)] is a valid expression.
[:zh_CN] 对于所有 [`i]，其中 [$0 \leq [`i] < [`sizeof...(TTypes)]]，
[`get<i>(t) == get<i>(u)] 为有效表达式。

[:en] [`sizeof...(TTypes)] equals [`tuple_size_v<UTuple>].
[:zh_CN] [`sizeof...(TTypes)] 等于 [`tuple_size_v<UTuple>]。

[para:expects]
[:en] For all [`i], [`decltype(get<i>(t) == get<i>(u))] models
[*:c boolean-testable].
[:zh_CN] 对于所有 [`i]，[`decltype(get<i>(t) == get<i>(u))] 均构成
[*:c boolean-testable]。

[para:returns]
[:en] [`true] if [`get<i>(t) == get<i>(u)] for all [`i], otherwise [`false].
[:zh_CN] 若对于所有 [`i] 均有 [`get<i>(t) == get<i>(u)] 则为 [`true]，否则为
[`false]。

[begin:note]
[:en] If [`sizeof...(TTypes)] equals zero, returns [`true].
[:zh_CN] 当 [`sizeof...(TTypes)] 等于零时，返回 [`true]。
[end:note]

[para:remarks]
[list]
[item]
[:en] The elementary comparisons are performed in order from the zeroth index
upwards.
[:zh_CN] 从第零个索引开始依增序进行按元素比较。

[:en] No comparisons or element accesses are performed after the first equality
comparison that evaluates to [`false].
[:zh_CN] 在第一个求值为 [`false] 的比较之后不再实施任何比较或元素访问。
[item]
[:en] The second overload is to be found via argument-dependent lookup
([#basic.lookup.argdep]) only.
[:zh_CN] 第二种重载仅会被依赖于实参的查找找到（[#basic.lookup.argdep]）。
[list:end]
[div:end]

[%@lib@member operator<=>[!tuple]]
[codeblock:declaration]
template<class... TTypes, class... UTypes>
  constexpr common_comparison_category_t<[[redoc("^>")]]synth-three-way-result<TTypes, UTypes>...>
    operator<=>(const tuple<TTypes...>& t, const tuple<UTypes...>& u);
template<class... TTypes, [[redoc("*:c>")]]tuple-like UTuple>
  constexpr common_comparison_category_t<[[redoc("^>")]]synth-three-way-result<TTypes, Elems>...>
    operator<=>(const tuple<TTypes...>& t, const UTuple& u);
[codeblock:end]

[div:description]
[para]
[:en] For the second overload, [`Elems] denotes the pack of types
[`tuple_element_t<0, UTuple>], [`tuple_element_t<1, UTuple>], [$\ldots],
[`tuple_element_t<tuple_size_v<UTuple> - 1, UTuple>].
[:zh_CN] 对于第二种重载，[`Elems] 代表类型包组
[`tuple_element_t<0, UTuple>], [`tuple_element_t<1, UTuple>], [$\ldots],
[`tuple_element_t<tuple_size_v<UTuple> - 1, UTuple>]。

[para:effects]
[:en] Performs a lexicographical comparison between [`t] and [`u].
[:zh_CN] 在 [`t] 和 [`u] 之间实施字典序比较。

[:en] If [`sizeof...(TTypes)] equals zero, returns [`strong_ordering::equal].
[:zh_CN] 当 [`sizeof...(TTypes)] 等于零时，返回 [`strong_ordering::equal]。

[:en] Otherwise, equivalent to:
[:zh_CN] 否则，等价于：
[codeblock]
if (auto c = [[redoc("^>")]]synth-three-way(get<0>(t), get<0>(u)); c != 0) return c;
return t[[redoc("[$_\\mathrm{tail}]")]] <=> u[[redoc("[$_\\mathrm{tail}]")]];
[codeblock:end]
[:en@~] where [$[`r]_\mathrm{tail}] for some tuple [`r] is a tuple containing
all but the first element of [`r].
[:zh_CN@~] 其中对于某个元组 [`r]，[$[`r]_\mathrm{tail}] 为包含 [`r] 除第一个之外
所有元素的元组。

[para:remarks]
[:en] The second overload is to be found via argument-dependent lookup
([#basic.lookup.argdep]) only.
[:zh_CN] 第二种重载仅会被依赖于实参的查找找到（[#basic.lookup.argdep]）。
[div:end]

[para]
[begin:note]
[:en]
The above definitions does not require [$[`t]_\mathrm{tail}] (or
[$[`u]_\mathrm{tail}]) to be constructed.
[:zh_CN]
以上定义并不要求构造 [$[`t]_\mathrm{tail}]（或 [$[`u]_\mathrm{tail}]）。

[:en]
It might not even be possible, as [`t] and [`u] are not required to be copy
constructible.
[:zh_CN]
这在当并不要求 [`t] 和 [`u] 为可被复制构造时甚至是不可能的。

[:en]
Also, all comparison operator functions are short circuited; they do not perform
element accesses beyond what is required to determine the result of the
comparison.
[:zh_CN]
并且，所有的比较运算符函数都是短路的：它们并不实施超出了用以确定比较结果所需的
元素访问。
[end:note]
