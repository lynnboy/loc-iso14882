[section#expected.void.general
    [:en] General
    [:zh_CN] 概述
]

[codeblock:synopsis]
template<class T, class E> requires is_void_v<T>
class expected<T, E> {
  public:
  using [[redoc("\%lib@member value_type[!expected<void>]")]]value_type = T;
  using [[redoc("\%lib@member error_type[!expected<void>]")]]error_type = E;
  using [[redoc("\%lib@member unexpected_type[!expected<void>]")]]unexpected_type = unexpected<E>;

  template<class U>
  using [[redoc("\%lib@member rebind[!expected<void>]")]]rebind = expected<U, error_type>;

  // [:en] [#expected.void.ctor], constructors \
  [:zh_CN] [#expected.void.ctor]，构造函数
  constexpr expected() noexcept;
  constexpr explicit([[redoc("[=seebelow]")]]) expected(const expected&);
  constexpr explicit([[redoc("[=seebelow]")]]) expected(expected&&) noexcept([[redoc("[=seebelow]")]]);
  template<class U, class G>
    constexpr explicit([[redoc("[=seebelow]")]]) expected(const expected<U, G>&);
  template<class U, class G>
    constexpr explicit([[redoc("[=seebelow]")]]) expected(expected<U, G>&&);

  template<class G>
    constexpr expected(const unexpected<G>&);
  template<class G>
    constexpr expected(unexpected<G>&&);

  constexpr explicit expected(in_place_t) noexcept;
  template<class... Args>
    constexpr explicit expected(unexpect_t, Args&&...);
  template<class U, class... Args>
    constexpr explicit expected(unexpect_t, initializer_list<U>, Args&&...);


  // [:en] [#expected.void.dtor], destructor \
  [:zh_CN] [#expected.void.dtor]，析构函数
  constexpr ~expected();

  // [:en] [#expected.void.assign], assignment \
  [:zh_CN] [#expected.void.assign]，赋值
  constexpr expected& operator=(const expected&);
  constexpr expected& operator=(expected&&) noexcept([[redoc("[=seebelow]")]]);
  template<class U = T> constexpr expected& operator=(U&&);
  template<class G>
    constexpr expected& operator=(const unexpected<G>&);
  template<class G>
    constexpr expected& operator=(unexpected<G>&&);

  // [:en] [#expected.void.swap], swap \
  [:zh_CN] [#expected.void.swap]，交换
  constexpr void swap(expected&) noexcept([[redoc("[=seebelow]")]]);
  friend constexpr void swap(expected& x, expected& y) noexcept(noexcept(x.swap(y)));

  // [:en] [#expected.void.obs], observers \
  [:zh_CN] [#expected.void.obs]，探察函数
  constexpr explicit operator bool() const noexcept;
  constexpr bool has_value() const noexcept;
  constexpr void operator*() const noexcept;
  constexpr void value() const &;
  constexpr void value() &&;
  constexpr const E& error() const &;
  constexpr E& error() &;
  constexpr const E&& error() const &&;
  constexpr E&& error() &&;

  // [:en] [#expected.void.eq], equality operators \
  [:zh_CN] [#expected.void.eq]，相等性运算符
  template<class T2, class E2> requires is_void_v<T2>
    friend constexpr bool operator==(const expected& x, const expected<T2, E2>& y);
  template<class E2>
    friend constexpr bool operator==(const expected&, const unexpected<E2>&);

private:
  bool [[redoc("*>")]]has_val;         // [=expos]
  union {
    E [[redoc("*>")]]unex;             // [=expos]
  };
};
[codeblock:end]

[para]
[:en] [`E] shall meet the requirements of [^:oc Destructible]
([#:tab#cpp17.destructible]).
[:zh_CN] [`E] 应当满足 [^:oc Destructible] 的规定（[#:tab#cpp17.destructible]）。
