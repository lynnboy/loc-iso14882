[section#expected.void.general
    [:en] General
    [:zh_CN] 概述
]

[codeblock:synopsis]
template<class T, class E> requires is_void_v<T>
class expected<T, E> {
  public:
  using [[redoc("[%@lib@member value_type[!expected<void>]]")]]value_type = T;
  using [[redoc("[%@lib@member error_type[!expected<void>]]")]]error_type = E;
  using [[redoc("[%@lib@member unexpected_type[!expected<void>]]")]]unexpected_type = unexpected<E>;

  template<class U>
  using [[redoc("[%@lib@member rebind[!expected<void>]]")]]rebind = expected<U, error_type>;

  // [:en] [#expected.void.cons], constructors \
  [:zh_CN] [#expected.void.cons]，构造函数
  constexpr expected() noexcept;
  constexpr expected(const expected&);
  constexpr expected(expected&&) noexcept([[redoc("[=seebelow]")]]);
  template<class U, class G>
    constexpr explicit([[redoc("[=seebelow]")]]) expected(const expected<U, G>&);
  template<class U, class G>
    constexpr explicit([[redoc("[=seebelow]")]]) expected(expected<U, G>&&);

  template<class G>
    constexpr explicit([[redoc("[=seebelow]")]]) expected(const unexpected<G>&);
  template<class G>
    constexpr explicit([[redoc("[=seebelow]")]]) expected(unexpected<G>&&);

  constexpr explicit expected(in_place_t) noexcept;
  template<class... Args>
    constexpr explicit expected(unexpect_t, Args&&...);
  template<class U, class... Args>
    constexpr explicit expected(unexpect_t, initializer_list<U>, Args&&...);


  // [:en] [#expected.void.dtor], destructor \
  [:zh_CN] [#expected.void.dtor]，析构函数
  constexpr ~expected();

  // [:en] [#expected.void.assign], assignment \
  [:zh_CN] [#expected.void.assign]，赋值
  constexpr expected& operator=(const expected&);
  constexpr expected& operator=(expected&&) noexcept([[redoc("[=seebelow]")]]);
  template<class U = T> constexpr expected& operator=(U&&);
  template<class G>
    constexpr expected& operator=(const unexpected<G>&);
  template<class G>
    constexpr expected& operator=(unexpected<G>&&);

  // [:en] [#expected.void.swap], swap \
  [:zh_CN] [#expected.void.swap]，交换
  constexpr void swap(expected&) noexcept([[redoc("[=seebelow]")]]);
  friend constexpr void swap(expected& x, expected& y) noexcept(noexcept(x.swap(y)));

  // [:en] [#expected.void.obs], observers \
  [:zh_CN] [#expected.void.obs]，探察函数
  constexpr explicit operator bool() const noexcept;
  constexpr bool has_value() const noexcept;
  constexpr void operator*() const noexcept;
  constexpr void value() const &;                                           // [=freestanding-deleted]
  constexpr void value() &&;                                                // [=freestanding-deleted]
  constexpr const E& error() const & noexcept;
  constexpr E& error() & noexcept;
  constexpr const E&& error() const && noexcept;
  constexpr E&& error() && noexcept;
  template<class G = E> constexpr E error_or(G&&) const &;
  template<class G = E> constexpr E error_or(G&&) &&;

  // [:en] [#expected.void.monadic], monadic operations \
  [:zh_CN] [#expected.void.monadic]，monad 式操作
  template<class F> constexpr auto and_then(F&& f) &;
  template<class F> constexpr auto and_then(F&& f) &&;
  template<class F> constexpr auto and_then(F&& f) const &;
  template<class F> constexpr auto and_then(F&& f) const &&;
  template<class F> constexpr auto or_else(F&& f) &;
  template<class F> constexpr auto or_else(F&& f) &&;
  template<class F> constexpr auto or_else(F&& f) const &;
  template<class F> constexpr auto or_else(F&& f) const &&;
  template<class F> constexpr auto transform(F&& f) &;
  template<class F> constexpr auto transform(F&& f) &&;
  template<class F> constexpr auto transform(F&& f) const &;
  template<class F> constexpr auto transform(F&& f) const &&;
  template<class F> constexpr auto transform_error(F&& f) &;
  template<class F> constexpr auto transform_error(F&& f) &&;
  template<class F> constexpr auto transform_error(F&& f) const &;
  template<class F> constexpr auto transform_error(F&& f) const &&;

  // [:en] [#expected.void.eq], equality operators \
  [:zh_CN] [#expected.void.eq]，相等性运算符
  template<class T2, class E2> requires is_void_v<T2>
    friend constexpr bool operator==(const expected& x, const expected<T2, E2>& y);
  template<class E2>
    friend constexpr bool operator==(const expected&, const unexpected<E2>&);

private:
  bool [[redoc("*>")]]has_val;         // [=expos]
  union {
    E [[redoc("*>")]]unex;             // [=expos]
  };
};
[codeblock:end]

[para]
[:en] Any object of type [`expected<T, E>] either represents a value of type [`T],
or contains a value of type [`E] nested within ([#intro.object]) it.
[:zh_CN] 任何 [`expected<T, E>] 类型的对象，要么表示一个 [`T] 类型的值，要么它之内
嵌套一个 [`E] 类型的值（[#intro.object]）。

[:en] Member [*has_val] indicates whether the [`expected<T, E>] object
represents a value of type [`T].
[:zh_CN] 其 [*has_val] 成员标明 [`expected<T, E>] 对象是否表示一个 [`T] 类型的值。

[para]
[:en] A program that instantiates the definition of template [`expected<T, E>]
with a type for the [`E] parameter that is not a valid template argument for
[`unexpected] is ill-formed.
[:zh_CN] 若某个用作 [`E] 形参的类型不是 [`unexpected] 的有效模板实参，则以它来
实例化 [`expected<T, E>] 的定义式的程序非良构。

[para]
[:en] [`E] shall meet the requirements of [^:oc Destructible] ([#:tab#cpp17.destructible]).
[:zh_CN] [`E] 应当满足 [^:oc Destructible] 的规定（[#:tab#cpp17.destructible]）。
