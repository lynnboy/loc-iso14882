[section#ratio.comparison
    [:en] Comparison of [`ratio]s
    [:zh_CN] [`ratio] 的比较
]

[%@library ratio_equal]
[codeblock:declaration]
template<class R1, class R2>
  struct ratio_equal : bool_constant<R1::num == R2::num && R1::den == R2::den> { };
[codeblock:end]

[%@library ratio_not_equal]
[codeblock:declaration]
template<class R1, class R2>
  struct ratio_not_equal : bool_constant<!ratio_equal_v<R1, R2>> { };
[codeblock:end]

[%@library ratio_less]
[codeblock:declaration]
template<class R1, class R2>
  struct ratio_less : bool_constant<[[redoc("=seebelow")]]> { };
[codeblock:end]

[begin:description]
[para]
[:en] If [`R1::num] [$\times] [`R2::den] is less than [`R2::num] [$\times]
[`R1::den], [`ratio_less<R1, R2>] shall be derived from [`bool_constant<true>];
otherwise it shall be derived from [`bool_constant<false>].
[:zh_CN] 若 [`R1::num] [$\times] [`R2::den] 小于 [`R2::num] [$\times] [`R1::den]
，则 [`ratio_less<R1, R2>] 应当派生于 [`bool_constant<true>]；否则它应当派生于
[`bool_constant<false>]。

[:en] Implementations may use other algorithms to compute this relationship to
avoid overflow.
[:zh_CN] 实现可以使用其他算法来计算这些关系以避免溢出。

[:en] If overflow occurs, the program is ill-formed.
[:zh_CN] 若发生了溢出，则程序非良构。
[end:description]

[%@library ratio_less_equal]
[codeblock:declaration]
template<class R1, class R2>
  struct ratio_less_equal : bool_constant<!ratio_less_v<R2, R1>> { };
[codeblock:end]

[%@library ratio_greater]
[codeblock:declaration]
template<class R1, class R2>
  struct ratio_greater : bool_constant<ratio_less_v<R2, R1>> { };
[codeblock:end]

[%@library ratio_greater_equal]
[codeblock:declaration]
template<class R1, class R2>
  struct ratio_greater_equal : bool_constant<!ratio_less_v<R1, R2>> { };
[codeblock:end]
