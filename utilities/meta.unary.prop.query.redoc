[section#meta.unary.prop.query
    [:en] Type property queries
    [:zh_CN] 类型属性查询
]

[para]
[:en]
This subclause contains templates that may be used to query properties of types
at compile time.
[:zh_CN]
本子条款包括可以用于在编译期查询类型的属性的模板。

[table:grid#tab:type-traits.properties.queries
    [:en] Type property queries
    [:zh_CN] 类型属性查询
    [|@code
        [:en] Template
        [:zh_CN] 模板
    ]
    [|
        [:en] Value
        [:zh_CN] 值
    ]
]

[%@library alignment_of]
[|]
template<class T> [br]
struct alignment_of;
[|] [:en] [`alignof(T)].
    [:zh_CN] [`alignof(T)]。
    [para:requires]
    [:en] [`alignof(T)] shall be a valid expression ([#expr.alignof])
    [:zh_CN] [`alignof(T)] 应当是有效的表达式（[#expr.alignof]）
[-]

[%@library rank]
[|]
template<class T> [br]
struct rank;
[|] [:en] If [`T] names an array type, an integer value representing the number
    of dimensions of [`T]; otherwise, 0.
    [:zh_CN] 若 [`T] 指名某个数组类型，则为表示 [`T] 的维数的整数值；否则为 0。
[-]

[%@library extent]
[|]
template<class T, [br]
unsigned I = 0> [br]
struct extent;
[|] [:en] If [`T] is not an array type, or if it has rank less than or equal to
    [`I], or if [`I] is 0 and [`T] has type ["array of unknown bound of [`U]],
    then 0; otherwise, the bound ([#dcl.array]) of the [`I][=']th dimension of
    [`T], where indexing of [`I] is zero-based
    [:zh_CN] 若 [`T] 不是数组类型，或者若它的维数小于或等于 [`I]，或者若 [`I] 为
    0 而 [`T] 的类型为“[`U] 的未知边界的数组”，则为 0；否则为 [`T] 的第 [`I] 维
    的边界（[#dcl.array]）。
[-]
[table:end]

[para]
[:en]
Each of these templates shall be a [*Cpp17UnaryTypeTrait] ([#meta.rqmts]) with a
base characteristic of [`integral_constant<size_t, Value>].
[:zh_CN]
这些模板的每一个均应当为 [*Cpp17UnaryTypeTrait]（[#meta.rqmts]），且其基础特征为
[`integral_constant<size_t, Value>]。

[para]
[enter:example]
[codeblock]
// [:en] the following assertions hold:
// [|:zh_CN] 下列断言均成立：
assert(rank_v<int> == 0);
assert(rank_v<int[2]> == 1);
assert(rank_v<int[][4]> == 2);
[codeblock:end]
[exit:example]

[para]
[enter:example]
[codeblock]
// [:en] the following assertions hold:
// [|:zh_CN] 下列断言均成立：
assert(extent_v<int> == 0);
assert(extent_v<int[2]> == 2);
assert(extent_v<int[2][4]> == 2);
assert(extent_v<int[][4]> == 0);
assert((extent_v<int, 1>) == 0);
assert((extent_v<int[2], 1>) == 0);
assert((extent_v<int[2][4], 1>) == 4);
assert((extent_v<int[][4], 1>) == 4);
[codeblock:end]
[exit:example]
