[section#meta.type.synop
    [:en] Header [`<type_traits>] synopsis
    [:zh_CN] 头文件 [`<type_traits>] 纲要
]

[%@hdr@def type_traits]
[codeblock:synopsis]
namespace std {
  // [:en] [#meta.help], helper class \
     [:zh_CN] [#meta.help]，辅助类
  template<class T, T v> struct integral_constant;

  template<bool B>
    using bool_constant = integral_constant<bool, B>;
  using true_type  = bool_constant<true>;
  using false_type = bool_constant<false>;

  // [:en] [#meta.unary.cat], primary type categories \
     [:zh_CN] [#meta.unary.cat]，基本类型分类
  template<class T> struct is_void;
  template<class T> struct is_null_pointer;
  template<class T> struct is_integral;
  template<class T> struct is_floating_point;
  template<class T> struct is_array;
  template<class T> struct is_pointer;
  template<class T> struct is_lvalue_reference;
  template<class T> struct is_rvalue_reference;
  template<class T> struct is_member_object_pointer;
  template<class T> struct is_member_function_pointer;
  template<class T> struct is_enum;
  template<class T> struct is_union;
  template<class T> struct is_class;
  template<class T> struct is_function;

  // [:en] [#meta.unary.comp], composite type categories \
     [:zh_CN] [#meta.unary.comp]，组合类型分类
  template<class T> struct is_reference;
  template<class T> struct is_arithmetic;
  template<class T> struct is_fundamental;
  template<class T> struct is_object;
  template<class T> struct is_scalar;
  template<class T> struct is_compound;
  template<class T> struct is_member_pointer;

  // [:en] [#meta.unary.prop], type properties \
     [:zh_CN] [#meta.unary.prop]，类型属性
  template<class T> struct is_const;
  template<class T> struct is_volatile;
  template<class T> struct is_trivial;
  template<class T> struct is_trivially_copyable;
  template<class T> struct is_standard_layout;
  template<class T> struct is_empty;
  template<class T> struct is_polymorphic;
  template<class T> struct is_abstract;
  template<class T> struct is_final;
  template<class T> struct is_aggregate;

  template<class T> struct is_signed;
  template<class T> struct is_unsigned;
  template<class T> struct is_bounded_array;
  template<class T> struct is_unbounded_array;

  template<class T, class... Args> struct is_constructible;
  template<class T> struct is_default_constructible;
  template<class T> struct is_copy_constructible;
  template<class T> struct is_move_constructible;

  template<class T, class U> struct is_assignable;
  template<class T> struct is_copy_assignable;
  template<class T> struct is_move_assignable;

  template<class T, class U> struct is_swappable_with;
  template<class T> struct is_swappable;

  template<class T> struct is_destructible;

  template<class T, class... Args> struct is_trivially_constructible;
  template<class T> struct is_trivially_default_constructible;
  template<class T> struct is_trivially_copy_constructible;
  template<class T> struct is_trivially_move_constructible;

  template<class T, class U> struct is_trivially_assignable;
  template<class T> struct is_trivially_copy_assignable;
  template<class T> struct is_trivially_move_assignable;
  template<class T> struct is_trivially_destructible;

  template<class T, class... Args> struct is_nothrow_constructible;
  template<class T> struct is_nothrow_default_constructible;
  template<class T> struct is_nothrow_copy_constructible;
  template<class T> struct is_nothrow_move_constructible;

  template<class T, class U> struct is_nothrow_assignable;
  template<class T> struct is_nothrow_copy_assignable;
  template<class T> struct is_nothrow_move_assignable;

  template<class T, class U> struct is_nothrow_swappable_with;
  template<class T> struct is_nothrow_swappable;

  template<class T> struct is_nothrow_destructible;

  template<class T> struct has_virtual_destructor;

  template<class T> struct has_unique_object_representations;

  // [:en] [#meta.unary.prop.query], type property queries \
     [:zh_CN] [#meta.unary.prop.query]，类型属性查询
  template<class T> struct alignment_of;
  template<class T> struct rank;
  template<class T, unsigned I = 0> struct extent;

  // [:en] [#meta.rel], type relations \
     [:zh_CN] [#meta.rel]，类型关系
  template<class T, class U> struct is_same;
  template<class Base, class Derived> struct is_base_of;
  template<class From, class To> struct is_convertible;
  template<class From, class To> struct is_nothrow_convertible;
  template<class T, class U> struct is_layout_compatible;
  template<class Base, class Derived> struct is_pointer_interconvertible_base_of;

  template<class Fn, class... ArgTypes> struct is_invocable;
  template<class R, class Fn, class... ArgTypes> struct is_invocable_r;

  template<class Fn, class... ArgTypes> struct is_nothrow_invocable;
  template<class R, class Fn, class... ArgTypes> struct is_nothrow_invocable_r;

  // [:en] [#meta.trans.cv], const-volatile modifications \
     [:zh_CN] [#meta.trans.cv]，const-volatile 改造
  template<class T> struct remove_const;
  template<class T> struct remove_volatile;
  template<class T> struct remove_cv;
  template<class T> struct add_const;
  template<class T> struct add_volatile;
  template<class T> struct add_cv;

  template<class T>
    using [[redoc("?libglobal>")]]remove_const_t    = typename remove_const<T>::type;
  template<class T>
    using [[redoc("?libglobal>")]]remove_volatile_t = typename remove_volatile<T>::type;
  template<class T>
    using [[redoc("?libglobal>")]]remove_cv_t       = typename remove_cv<T>::type;
  template<class T>
    using [[redoc("?libglobal>")]]add_const_t       = typename add_const<T>::type;
  template<class T>
    using [[redoc("?libglobal>")]]add_volatile_t    = typename add_volatile<T>::type;
  template<class T>
    using [[redoc("?libglobal>")]]add_cv_t          = typename add_cv<T>::type;

  // [:en] [#meta.trans.ref], reference modifications \
     [:zh_CN] [#meta.trans.ref]，引用改造
  template<class T> struct remove_reference;
  template<class T> struct add_lvalue_reference;
  template<class T> struct add_rvalue_reference;

  template<class T>
    using [[redoc("?libglobal>")]]remove_reference_t     = typename remove_reference<T>::type;
  template<class T>
    using [[redoc("?libglobal>")]]add_lvalue_reference_t = typename add_lvalue_reference<T>::type;
  template<class T>
    using [[redoc("?libglobal>")]]add_rvalue_reference_t = typename add_rvalue_reference<T>::type;

  // [:en] [#meta.trans.sign], sign modifications \
     [:zh_CN] [#meta.trans.sign]，符号改造
  template<class T> struct make_signed;
  template<class T> struct make_unsigned;

  template<class T>
    using [[redoc("?libglobal>")]]make_signed_t   = typename make_signed<T>::type;
  template<class T>
    using [[redoc("?libglobal>")]]make_unsigned_t = typename make_unsigned<T>::type;

  // [:en] [#meta.trans.arr], array modifications \
     [:zh_CN] [#meta.trans.arr]，数组改造
  template<class T> struct remove_extent;
  template<class T> struct remove_all_extents;

  template<class T>
    using [[redoc("?libglobal>")]]remove_extent_t      = typename remove_extent<T>::type;
  template<class T>
    using [[redoc("?libglobal>")]]remove_all_extents_t = typename remove_all_extents<T>::type;

  // [:en] [#meta.trans.ptr], pointer modifications \
     [:zh_CN] [#meta.trans.ptr]，指针改造
  template<class T> struct remove_pointer;
  template<class T> struct add_pointer;

  template<class T>
    using [[redoc("?libglobal>")]]remove_pointer_t = typename remove_pointer<T>::type;
  template<class T>
    using [[redoc("?libglobal>")]]add_pointer_t    = typename add_pointer<T>::type;

  // [:en] [#meta.trans.other], other transformations \
     [:zh_CN] [#meta.trans.other]，其他变换
  template<class T> struct type_identity;
  template<size_t Len, size_t Align = [[redoc("*>")]]default-alignment> // [:en] see [#meta.trans.other] \
                                                                                [:zh_CN] 参见 [#meta.trans.other]
    struct aligned_storage;
  template<size_t Len, class... Types> struct aligned_union;
  template<class T> struct remove_cvref;
  template<class T> struct decay;
  template<bool, class T = void> struct enable_if;
  template<bool, class T, class F> struct conditional;
  template<class... T> struct common_type;
  template<class T, class U, template<class> class TQual, template<class> class UQual>
    struct basic_common_reference { };
  template<class... T> struct common_reference;
  template<class T> struct underlying_type;
  template<class Fn, class... ArgTypes> struct invoke_result;
  template<class T> struct unwrap_reference;
  template<class T> struct unwrap_ref_decay;

  template<class T>
    using [[redoc("?libglobal>")]]type_identity_t    = typename type_identity<T>::type;
  template<size_t Len, size_t Align = [[redoc("*>")]]default-alignment> // [:en] see [#meta.trans.other] \
                                                                                [:zh_CN] 参见 [#meta.trans.other]
    using [[redoc("?libglobal>")]]aligned_storage_t  = typename aligned_storage<Len, Align>::type;
  template<size_t Len, class... Types>
    using [[redoc("?libglobal>")]]aligned_union_t    = typename aligned_union<Len, Types...>::type;
  template<class T>
    using [[redoc("?libglobal>")]]remove_cvref_t     = typename remove_cvref<T>::type;
  template<class T>
    using [[redoc("?libglobal>")]]decay_t            = typename decay<T>::type;
  template<bool b, class T = void>
    using [[redoc("?libglobal>")]]enable_if_t        = typename enable_if<b, T>::type;
  template<bool b, class T, class F>
    using [[redoc("?libglobal>")]]conditional_t      = typename conditional<b, T, F>::type;
  template<class... T>
    using [[redoc("?libglobal>")]]common_type_t      = typename common_type<T...>::type;
  template<class... T>
    using [[redoc("?libglobal>")]]common_type_t      = typename common_type<T...>::type;
  template<class T>
    using [[redoc("?libglobal>")]]underlying_type_t  = typename underlying_type<T>::type;
  template<class Fn, class... ArgTypes>
    using [[redoc("?libglobal>")]]invoke_result_t    = typename invoke_result<Fn, ArgTypes...>::type;
  template<class T>
    using unwrap_reference_t = typename unwrap_reference<T>::type;
  template<class T>
    using unwrap_ref_decay_t = typename unwrap_ref_decay<T>::type;
  template<class...>
    using [[redoc("?libglobal>")]]void_t             = void;

  // [:en] [#meta.logical], logical operator traits \
     [:zh_CN] [#meta.logical]，逻辑运算符特征
  template<class... B> struct conjunction;
  template<class... B> struct disjunction;
  template<class B> struct negation;

  // [:en] [#meta.unary.cat], primary type categories \
     [:zh_CN] [#meta.unary.cat]，基本类型分类
  template<class T>
    inline constexpr bool [[redoc("?libglobal>")]]is_void_v = is_void<T>::value;
  template<class T>
    inline constexpr bool [[redoc("?libglobal>")]]is_null_pointer_v = is_null_pointer<T>::value;
  template<class T>
    inline constexpr bool [[redoc("?libglobal>")]]is_integral_v = is_integral<T>::value;
  template<class T>
    inline constexpr bool [[redoc("?libglobal>")]]is_floating_point_v = is_floating_point<T>::value;
  template<class T>
    inline constexpr bool [[redoc("?libglobal>")]]is_array_v = is_array<T>::value;
  template<class T>
    inline constexpr bool [[redoc("?libglobal>")]]is_pointer_v = is_pointer<T>::value;
  template<class T>
    inline constexpr bool [[redoc("?libglobal>")]]is_lvalue_reference_v = is_lvalue_reference<T>::value;
  template<class T>
    inline constexpr bool [[redoc("?libglobal>")]]is_rvalue_reference_v = is_rvalue_reference<T>::value;
  template<class T>
    inline constexpr bool [[redoc("?libglobal>")]]is_member_object_pointer_v = is_member_object_pointer<T>::value;
  template<class T>
    inline constexpr bool [[redoc("?libglobal>")]]is_member_function_pointer_v = is_member_function_pointer<T>::value;
  template<class T>
    inline constexpr bool [[redoc("?libglobal>")]]is_enum_v = is_enum<T>::value;
  template<class T>
    inline constexpr bool [[redoc("?libglobal>")]]is_union_v = is_union<T>::value;
  template<class T>
    inline constexpr bool [[redoc("?libglobal>")]]is_class_v = is_class<T>::value;
  template<class T>
    inline constexpr bool [[redoc("?libglobal>")]]is_function_v = is_function<T>::value;

  // [:en] [#meta.unary.comp], composite type categories \
     [:zh_CN] [#meta.unary.comp]，组合类型分类
  template<class T>
    inline constexpr bool [[redoc("?libglobal>")]]is_reference_v = is_reference<T>::value;
  template<class T>
    inline constexpr bool [[redoc("?libglobal>")]]is_arithmetic_v = is_arithmetic<T>::value;
  template<class T>
    inline constexpr bool [[redoc("?libglobal>")]]is_fundamental_v = is_fundamental<T>::value;
  template<class T>
    inline constexpr bool [[redoc("?libglobal>")]]is_object_v = is_object<T>::value;
  template<class T>
    inline constexpr bool [[redoc("?libglobal>")]]is_scalar_v = is_scalar<T>::value;
  template<class T>
    inline constexpr bool [[redoc("?libglobal>")]]is_compound_v = is_compound<T>::value;
  template<class T>
    inline constexpr bool [[redoc("?libglobal>")]]is_member_pointer_v = is_member_pointer<T>::value;

  // [:en] [#meta.unary.prop], type properties \
     [:zh_CN] [#meta.unary.prop]，类型属性
  template<class T>
    inline constexpr bool [[redoc("?libglobal>")]]is_const_v = is_const<T>::value;
  template<class T>
    inline constexpr bool [[redoc("?libglobal>")]]is_volatile_v = is_volatile<T>::value;
  template<class T>
    inline constexpr bool [[redoc("?libglobal>")]]is_trivial_v = is_trivial<T>::value;
  template<class T>
    inline constexpr bool [[redoc("?libglobal>")]]is_trivially_copyable_v = is_trivially_copyable<T>::value;
  template<class T>
    inline constexpr bool [[redoc("?libglobal>")]]is_standard_layout_v = is_standard_layout<T>::value;
  template<class T>
    inline constexpr bool [[redoc("?libglobal>")]]is_empty_v = is_empty<T>::value;
  template<class T>
    inline constexpr bool [[redoc("?libglobal>")]]is_polymorphic_v = is_polymorphic<T>::value;
  template<class T>
    inline constexpr bool [[redoc("?libglobal>")]]is_abstract_v = is_abstract<T>::value;
  template<class T>
    inline constexpr bool [[redoc("?libglobal>")]]is_final_v = is_final<T>::value;
  template<class T>
    inline constexpr bool [[redoc("?libglobal>")]]is_aggregate_v = is_aggregate<T>::value;
  template<class T>
    inline constexpr bool [[redoc("?libglobal>")]]is_signed_v = is_signed<T>::value;
  template<class T>
    inline constexpr bool [[redoc("?libglobal>")]]is_unsigned_v = is_unsigned<T>::value;
  template<class T>
    inline constexpr bool [[redoc("?libglobal>")]]is_bounded_array_v = is_bounded_array<T>::value;
  template<class T>
    inline constexpr bool [[redoc("?libglobal>")]]is_unbounded_array_v = is_unbounded_array<T>::value;
  template<class T, class... Args>
    inline constexpr bool [[redoc("?libglobal>")]]is_constructible_v = is_constructible<T, Args...>::value;
  template<class T>
    inline constexpr bool [[redoc("?libglobal>")]]is_default_constructible_v = is_default_constructible<T>::value;
  template<class T>
    inline constexpr bool [[redoc("?libglobal>")]]is_copy_constructible_v = is_copy_constructible<T>::value;
  template<class T>
    inline constexpr bool [[redoc("?libglobal>")]]is_move_constructible_v = is_move_constructible<T>::value;
  template<class T, class U>
    inline constexpr bool [[redoc("?libglobal>")]]is_assignable_v = is_assignable<T, U>::value;
  template<class T>
    inline constexpr bool [[redoc("?libglobal>")]]is_copy_assignable_v = is_copy_assignable<T>::value;
  template<class T>
    inline constexpr bool [[redoc("?libglobal>")]]is_move_assignable_v = is_move_assignable<T>::value;
  template<class T, class U>
    inline constexpr bool [[redoc("?libglobal>")]]is_swappable_with_v = is_swappable_with<T, U>::value;
  template<class T>
    inline constexpr bool [[redoc("?libglobal>")]]is_swappable_v = is_swappable<T>::value;
  template<class T>
    inline constexpr bool [[redoc("?libglobal>")]]is_destructible_v = is_destructible<T>::value;
  template<class T, class... Args>
    inline constexpr bool is_trivially_constructible_v
      = is_trivially_constructible<T, Args...>::value;
  template<class T>
    inline constexpr bool is_trivially_default_constructible_v
      = is_trivially_default_constructible<T>::value;
  template<class T>
    inline constexpr bool is_trivially_copy_constructible_v
      = is_trivially_copy_constructible<T>::value;
  template<class T>
    inline constexpr bool is_trivially_move_constructible_v
      = is_trivially_move_constructible<T>::value;
  template<class T, class U>
    inline constexpr bool [[redoc("?libglobal>")]]is_trivially_assignable_v = is_trivially_assignable<T, U>::value;
  template<class T>
    inline constexpr bool is_trivially_copy_assignable_v
      = is_trivially_copy_assignable<T>::value;
  template<class T>
    inline constexpr bool is_trivially_move_assignable_v
      = is_trivially_move_assignable<T>::value;
  template<class T>
    inline constexpr bool [[redoc("?libglobal>")]]is_trivially_destructible_v = is_trivially_destructible<T>::value;
  template<class T, class... Args>
    inline constexpr bool is_nothrow_constructible_v
      = is_nothrow_constructible<T, Args...>::value;
  template<class T>
    inline constexpr bool is_nothrow_default_constructible_v
      = is_nothrow_default_constructible<T>::value;
  template<class T>
    inline constexpr bool is_nothrow_copy_constructible_v
      = is_nothrow_copy_constructible<T>::value;
  template<class T>
    inline constexpr bool is_nothrow_move_constructible_v
      = is_nothrow_move_constructible<T>::value;
  template<class T, class U>
    inline constexpr bool [[redoc("?libglobal>")]]is_nothrow_assignable_v = is_nothrow_assignable<T, U>::value;
  template<class T>
    inline constexpr bool [[redoc("?libglobal>")]]is_nothrow_copy_assignable_v = is_nothrow_copy_assignable<T>::value;
  template<class T>
    inline constexpr bool [[redoc("?libglobal>")]]is_nothrow_move_assignable_v = is_nothrow_move_assignable<T>::value;
  template<class T, class U>
    inline constexpr bool [[redoc("?libglobal>")]]is_nothrow_swappable_with_v = is_nothrow_swappable_with<T, U>::value;
  template<class T>
    inline constexpr bool [[redoc("?libglobal>")]]is_nothrow_swappable_v = is_nothrow_swappable<T>::value;
  template<class T>
    inline constexpr bool [[redoc("?libglobal>")]]is_nothrow_destructible_v = is_nothrow_destructible<T>::value;
  template<class T>
    inline constexpr bool [[redoc("?libglobal>")]]has_virtual_destructor_v = has_virtual_destructor<T>::value;
  template<class T>
    inline constexpr bool has_unique_object_representations_v
      = has_unique_object_representations<T>::value;

  // [:en] [#meta.unary.prop.query], type property queries \
     [:zh_CN] [#meta.unary.prop.query]，类型属性查询
  template<class T>
    inline constexpr size_t [[redoc("?libglobal>")]]alignment_of_v = alignment_of<T>::value;
  template<class T>
    inline constexpr size_t [[redoc("?libglobal>")]]rank_v = rank<T>::value;
  template<class T, unsigned I = 0>
    inline constexpr size_t [[redoc("?libglobal>")]]extent_v = extent<T, I>::value;

  // [:en] [#meta.rel], type relations \
     [:zh_CN] [#meta.rel]，类型关系
  template<class T, class U>
    inline constexpr bool [[redoc("?libglobal>")]]is_same_v = is_same<T, U>::value;
  template<class Base, class Derived>
    inline constexpr bool [[redoc("?libglobal>")]]is_base_of_v = is_base_of<Base, Derived>::value;
  template<class From, class To>
    inline constexpr bool [[redoc("?libglobal>")]]is_convertible_v = is_convertible<From, To>::value;
  template<class From, class To>
    inline constexpr bool [[redoc("?libglobal>")]]is_nothrow_convertible_v = is_nothrow_convertible<From, To>::value;
  template<class T, class U>
    inline constexpr bool [[redoc("?libglobal>")]]is_layout_compatible_v = is_layout_compatible<T, U>::value;
  template<class Base, class Derived>
    inline constexpr bool is_pointer_interconvertible_base_of_v
      = is_pointer_interconvertible_base_of<Base, Derived>::value;
  template<class Fn, class... ArgTypes>
    inline constexpr bool [[redoc("?libglobal>")]]is_invocable_v = is_invocable<Fn, ArgTypes...>::value;
  template<class R, class Fn, class... ArgTypes>
    inline constexpr bool [[redoc("?libglobal>")]]is_invocable_r_v = is_invocable_r<R, Fn, ArgTypes...>::value;
  template<class Fn, class... ArgTypes>
    inline constexpr bool [[redoc("?libglobal>")]]is_nothrow_invocable_v = is_nothrow_invocable<Fn, ArgTypes...>::value;
  template<class R, class Fn, class... ArgTypes>
    inline constexpr bool is_nothrow_invocable_r_v
      = is_nothrow_invocable_r<R, Fn, ArgTypes...>::value;

  // [:en] [#meta.logical], logical operator traits \
     [:zh_CN] [#meta.logical]，逻辑运算符特征
  template<class... B>
    inline constexpr bool [[redoc("?libglobal>")]]conjunction_v = conjunction<B...>::value;
  template<class... B>
    inline constexpr bool [[redoc("?libglobal>")]]disjunction_v = disjunction<B...>::value;
  template<class B>
    inline constexpr bool [[redoc("?libglobal>")]]negation_v = negation<B>::value;

  // [:en] [#meta.member], member relationships \
     [:zh_CN] [#meta.member]，成员关系
  template<class S, class M>
    constexpr bool is_pointer_interconvertible_with_class(M S::*m) noexcept;
  template<class S1, class S2, class M1, class M2>
    constexpr bool is_corresponding_member(M1 S1::*m1, M2 S2::*m2) noexcept;

  // [:en] [#meta.const.eval], constant evaluation context \
     [:zh_CN] [#meta.const.eval]，常量求值语境
  constexpr bool is_constant_evaluated() noexcept;
}
[codeblock:end]
