[section#format.formattable
    [:en] Concept [`:c formattable]
    [:zh_CN] 概念 [`formattable]
]

[para]
[:en] Let [`[^fmt-iter-for]<charT>] be an unspecified type that models
[`[`:c output_iterator]<const charT&>] ([#iterator.concept.output]).
[:zh_CN] 令 [`[^fmt-iter-for]<charT>] 为一种构成了
[`[`:c output_iterator]<const charT&>]（[#iterator.concept.output]）的未指明类型。

[codeblock:synopsis]
template<class T, class Context,
         class Formatter = typename Context::template formatter_type<remove_const_t<T>>>
  concept [[redoc("*:c@def>")]]formattable-with =                // [=expos]
    [[redoc("`:c>")]]semiregular<Formatter> &&
    requires(Formatter& f, const Formatter& cf, T&& t, Context fc,
             basic_format_parse_context<typename Context::char_type> pc)
    {
      { f.parse(pc) } -> [[redoc("`:c>")]]same_as<typename decltype(pc)::iterator>;
      { cf.format(t, fc) } -> [[redoc("`:c>")]]same_as<typename Context::iterator>;
    };

template<class T, class charT>
  concept [[redoc("`:c@def>")]]formattable =
    [[redoc("*:c>")]]formattable-with<remove_reference_t<T>, basic_format_context<[[redoc("^>")]]fmt-iter-for<charT>>>;
[codeblock:end]

[para]
[:en] A type [`T] and a character type [`charT] model [`:c formattable]
if [`formatter<remove_cvref_t<T>, charT>] meets the [^:newoc BasicFormatter]
requirements ([#formatter.requirements]) and, if [`remove_reference_t<T>]
is const-qualified, the [^:newoc Formatter] requirements.
[:zh_CN] 对于类型 [`T] 和字符类型 [`charT]，如果
[`formatter<remove_cvref_t<T>, charT>] 满足 [^:newoc BasicFormatter] 的规定
（[#formatter.requirements]），以及如果 [`remove_reference_t<T>] 是 const 限定的，
满足 [^:newoc Formatter] 的规定，则它们构成 [`:c formattable]。
