[section#functional.syn
	[:en] Header [`<functional>] synopsis
	[:zh_CN] 头文件 [`<functional>] 纲要
]

[%@hdr@def functional]
[%@lib unwrap_ref_decay]
[%@lib unwrap_ref_decay_t]
[codeblock:synopsis]
namespace std {
  // [:en] [#func.invoke], invoke \
  [:zh_CN] [#func.invoke]，invoke
  template<class F, class... Args>
    constexpr invoke_result_t<F, Args...> invoke(F&& f, Args&&... args)             // [=freestanding]
      noexcept(is_nothrow_invocable_v<F, Args...>);

  template<class R, class F, class... Args>
    constexpr R invoke_r(F&& f, Args&&... args)                                     // [=freestanding]
      noexcept(is_nothrow_invocable_r_v<R, F, Args...>);

  // [:en] [#refwrap], [`reference_wrapper] \
  [:zh_CN] [#refwrap]，[`reference_wrapper]
  template<class T> class reference_wrapper;                                        // [=freestanding]

  template<class T> constexpr reference_wrapper<T> ref(T&) noexcept;                // [=freestanding]
  template<class T> constexpr reference_wrapper<const T> cref(const T&) noexcept;   // [=freestanding]
  template<class T> void ref(const T&&) = delete;                                   // [=freestanding]
  template<class T> void cref(const T&&) = delete;                                  // [=freestanding]

  template<class T>
    constexpr reference_wrapper<T> ref(reference_wrapper<T>) noexcept;              // [=freestanding]
  template<class T>
    constexpr reference_wrapper<const T> cref(reference_wrapper<T>) noexcept;       // [=freestanding]

  // [:en] [#arithmetic.operations], arithmetic operations \
  [:zh_CN] [#arithmetic.operations]，算术运算
  template<class T = void> struct plus;                                             // [=freestanding]
  template<class T = void> struct minus;                                            // [=freestanding]
  template<class T = void> struct multiplies;                                       // [=freestanding]
  template<class T = void> struct divides;                                          // [=freestanding]
  template<class T = void> struct modulus;                                          // [=freestanding]
  template<class T = void> struct negate;                                           // [=freestanding]
  template<> struct plus<void>;                                                     // [=freestanding]
  template<> struct minus<void>;                                                    // [=freestanding]
  template<> struct multiplies<void>;                                               // [=freestanding]
  template<> struct divides<void>;                                                  // [=freestanding]
  template<> struct modulus<void>;                                                  // [=freestanding]
  template<> struct negate<void>;                                                   // [=freestanding]

  // [:en] [#comparisons], comparisons \
  [:zh_CN] [#comparisons]，比较
  template<class T = void> struct equal_to;                                         // [=freestanding]
  template<class T = void> struct not_equal_to;                                     // [=freestanding]
  template<class T = void> struct greater;                                          // [=freestanding]
  template<class T = void> struct less;                                             // [=freestanding]
  template<class T = void> struct greater_equal;                                    // [=freestanding]
  template<class T = void> struct less_equal;                                       // [=freestanding]
  template<> struct equal_to<void>;                                                 // [=freestanding]
  template<> struct not_equal_to<void>;                                             // [=freestanding]
  template<> struct greater<void>;                                                  // [=freestanding]
  template<> struct less<void>;                                                     // [=freestanding]
  template<> struct greater_equal<void>;                                            // [=freestanding]
  template<> struct less_equal<void>;                                               // [=freestanding]

  // [:en] [#comparisons.three.way], class [`compare_three_way] \
  [:zh_CN] [#comparisons.three.way]，类 [`compare_three_way]
  struct compare_three_way;                                                         // [=freestanding]

  // [:en] [#logical.operations], logical operations \
  [:zh_CN] [#logical.operations]，逻辑运算
  template<class T = void> struct logical_and;                                      // [=freestanding]
  template<class T = void> struct logical_or;                                       // [=freestanding]
  template<class T = void> struct logical_not;                                      // [=freestanding]
  template<> struct logical_and<void>;                                              // [=freestanding]
  template<> struct logical_or<void>;                                               // [=freestanding]
  template<> struct logical_not<void>;                                              // [=freestanding]

  // [:en] [#bitwise.operations], bitwise operations \
  [:zh_CN] [#bitwise.operations]，按位运算
  template<class T = void> struct bit_and;                                          // [=freestanding]
  template<class T = void> struct bit_or;                                           // [=freestanding]
  template<class T = void> struct bit_xor;                                          // [=freestanding]
  template<class T = void> struct bit_not;                                          // [=freestanding]
  template<> struct bit_and<void>;                                                  // [=freestanding]
  template<> struct bit_or<void>;                                                   // [=freestanding]
  template<> struct bit_xor<void>;                                                  // [=freestanding]
  template<> struct bit_not<void>;                                                  // [=freestanding]

  // [:en] [#func.identity], identity \
  [:zh_CN] [#func.identity]，identity
  struct identity;                                                                  // [=freestanding]

  // [:en] [#func.not.fn], function template [`not_fn] \
  [:zh_CN] [#func.not.fn]，函数模板 [`not_fn]
  template<class F> constexpr [[redoc("[=unspec]")]] not_fn(F&& f);                            // [=freestanding]

  // [:en] [#func.bind.partial], function template [`bind_front] and [`bind_back] \
  [:zh_CN] [#func.bind.partial]，函数模板 [`bind_front] 和 [`bind_back]
  template<class F, class... Args>
    constexpr [[redoc("[=unspec]")]] bind_front(F&&, Args&&...);                               // [=freestanding]
  template<class F, class... Args>
    constexpr [[redoc("[=unspec]")]] bind_back(F&&, Args&&...);                                // [=freestanding]

  // [:en] [#func.bind], bind \
  [:zh_CN] [#func.bind]，bind
  template<class T> struct is_bind_expression;                                      // [=freestanding]
  template<class T>
    constexpr bool [[redoc("`:lib>")]]is_bind_expression_v =                                           // [=freestanding]
      is_bind_expression<T>::value;
  template<class T> struct is_placeholder;
  template<class T>
    constexpr int [[redoc("`:lib>")]]is_placeholder_v =                                                // [=freestanding]
      is_placeholder<T>::value;

  template<class F, class... BoundArgs>
    constexpr [[redoc("[=unspec]")]] bind(F&&, BoundArgs&&...);                                // [=freestanding]
  template<class R, class F, class... BoundArgs>
    constexpr [[redoc("[=unspec]")]] bind(F&&, BoundArgs&&...);                                // [=freestanding]

  namespace placeholders {
    // [:en] [`[^M]] is the [?impldef number of placeholders for bind expressions] number of placeholders \
    [:zh_CN] [`[^M]] 是[?impldef bind 表达式中的占位符的数量]占位符的数量
    [[redoc("[=seebelow]")]] _1;                                                                   // [=freestanding]
    [[redoc("[=seebelow]")]] _2;                                                                   // [=freestanding]
               .
               .
               .
    [[redoc("[=seebelow]")]] [[redoc("^>")]]_M;                                                                   // [=freestanding]
  }

  // [:en] [#func.memfn], member function adaptors \
  [:zh_CN] [#func.memfn]，成员函数适配器
  template<class R, class T>
    constexpr [[redoc("[=unspec]")]] mem_fn(R T::*) noexcept;                                  // [=freestanding]

  // [:en] [#func.wrap] polymorphic function wrappers \
  [:zh_CN] [#func.wrap] 多态的函数包装器
  class bad_function_call;

  template<class> class function;       // [=notdef]
  template<class R, class... ArgTypes> class function<R(ArgTypes...)>;

  // [:en] [#func.wrap.func.alg], specialized algorithms \
  [:zh_CN] [#func.wrap.func.alg]，特化的算法
  template<class R, class... ArgTypes>
    void swap(function<R(ArgTypes...)>&, function<R(ArgTypes...)>&) noexcept;

  // [:en] [#func.wrap.func.nullptr], null pointer comparison operator functions \
  [:zh_CN] [#func.wrap.func.nullptr]，空指针比较运算符函数
  template<class R, class... ArgTypes>
    bool operator==(const function<R(ArgTypes...)>&, nullptr_t) noexcept;

  // [:en] [#func.wrap.move], move only wrapper \
  [:zh_CN] [#func.wrap.move]，仅可移动包装器
  template<class... S> class move_only_function;        // [=notdef]
  template<class R, class... ArgTypes>
    class move_only_function<R(ArgTypes...) [[redoc("[=cv]")]] [[redoc("^>")]]ref noexcept([[redoc("^>")]]noex)>; // [=seebelow]

  // [:en] [#func.search], searchers \
  [:zh_CN] [#func.search]，搜索器
  template<class ForwardIterator1, class BinaryPredicate = equal_to<>>
    class default_searcher;                                                         // [=freestanding]

  template<class RandomAccessIterator,
           class Hash = hash<typename iterator_traits<RandomAccessIterator>::value_type>,
           class BinaryPredicate = equal_to<>>
    class boyer_moore_searcher;

  template<class RandomAccessIterator,
           class Hash = hash<typename iterator_traits<RandomAccessIterator>::value_type>,
           class BinaryPredicate = equal_to<>>
    class boyer_moore_horspool_searcher;

  // [:en] [#unord.hash], class template [`hash] \
  [:zh_CN] [#unord.hash]，类模板 [`hash]
  template<class T>
    struct hash;                                                                    // [=freestanding]

  namespace ranges {
    // [:en] [#range.cmp], concept-constrained comparisons \
    [:zh_CN] [#range.cmp]，受概念约束的比较
    struct equal_to;                                                                // [=freestanding]
    struct not_equal_to;                                                            // [=freestanding]
    struct greater;                                                                 // [=freestanding]
    struct less;                                                                    // [=freestanding]
    struct greater_equal;                                                           // [=freestanding]
    struct less_equal;                                                              // [=freestanding]
  }
}
[codeblock:end]

[para]
[begin:example]
[:en] If a [=Cpp] program wants to have a by-element addition of two vectors
[`a] and [`b] containing [`double] and put the result into [`a], it can do:
[:zh_CN] 若 [=Cpp] 程序想要对包含 [`double] 的两个 [`vector] [`a] 和 [`b] 进行
逐成员相加并将结果放入 [`a]，则它可以：

[codeblock]
transform(a.begin(), a.end(), b.begin(), a.begin(), plus<double>());
[codeblock:end]
[end:example]

[para]
[begin:example]
[:en] To negate every element of [`a]:
[:zh_CN] 为对 [`a] 的每个元素求反，可以：

[codeblock]
transform(a.begin(), a.end(), a.begin(), negate<double>());
[codeblock:end]
[end:example]
