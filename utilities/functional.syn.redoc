[section#functional.syn
	[:en] Header [`<functional>] synopsis
	[:zh_CN] 头文件 [`<functional>] 纲要
]

[%@header functional]
[%@library unwrap_ref_decay]
[%@library unwrap_ref_decay_t]
[codeblock:synopsis [!:mark UnSpec SeeBelow] [!:var _M] ]
namespace std {
  // [:en] [#func.invoke], invoke
  // [|:zh_CN] [#func.invoke]，invoke
  template<class F, class... Args>
    invoke_result_t<F, Args...> invoke(F&& f, Args&&... args)
      noexcept(is_nothrow_invocable_v<F, Args...>);

  // [:en] [#refwrap], [`reference_wrapper]
  // [|:zh_CN] [#refwrap]，[`reference_wrapper]
  template<class T> class reference_wrapper;

  template<class T> reference_wrapper<T> ref(T&) noexcept;
  template<class T> reference_wrapper<const T> cref(const T&) noexcept;
  template<class T> void ref(const T&&) = delete;
  template<class T> void cref(const T&&) = delete;

  template<class T> reference_wrapper<T> ref(reference_wrapper<T>) noexcept;
  template<class T> reference_wrapper<const T> cref(reference_wrapper<T>) noexcept;

  template<class T> struct unwrap_reference;
  template<class T> struct unwrap_ref_decay : unwrap_reference<decay_t<T>> {};
  template<class T> using unwrap_ref_decay_t = typename unwrap_ref_decay<T>::type;

  // [:en] [#arithmetic.operations], arithmetic operations
  // [|:zh_CN] [#arithmetic.operations]，算术运算
  template<class T = void> struct plus;
  template<class T = void> struct minus;
  template<class T = void> struct multiplies;
  template<class T = void> struct divides;
  template<class T = void> struct modulus;
  template<class T = void> struct negate;
  template<> struct plus<void>;
  template<> struct minus<void>;
  template<> struct multiplies<void>;
  template<> struct divides<void>;
  template<> struct modulus<void>;
  template<> struct negate<void>;

  // [:en] [#comparisons], comparisons
  // [|:zh_CN] [#comparisons]，比较
  template<class T = void> struct equal_to;
  template<class T = void> struct not_equal_to;
  template<class T = void> struct greater;
  template<class T = void> struct less;
  template<class T = void> struct greater_equal;
  template<class T = void> struct less_equal;
  template<> struct equal_to<void>;
  template<> struct not_equal_to<void>;
  template<> struct greater<void>;
  template<> struct less<void>;
  template<> struct greater_equal<void>;
  template<> struct less_equal<void>;

  // [:en] [#logical.operations], logical operations
  // [|:zh_CN] [#logical.operations]，逻辑运算
  template<class T = void> struct logical_and;
  template<class T = void> struct logical_or;
  template<class T = void> struct logical_not;
  template<> struct logical_and<void>;
  template<> struct logical_or<void>;
  template<> struct logical_not<void>;

  // [:en] [#bitwise.operations], bitwise operations
  // [|:zh_CN] [#bitwise.operations]，按位运算
  template<class T = void> struct bit_and;
  template<class T = void> struct bit_or;
  template<class T = void> struct bit_xor;
  template<class T = void> struct bit_not;
  template<> struct bit_and<void>;
  template<> struct bit_or<void>;
  template<> struct bit_xor<void>;
  template<> struct bit_not<void>;

  // [:en] [#func.identity], identity
  // [:zh_CN] [#func.identity]，identity
  struct identity;

  // [:en] [#func.not.fn], function template [`not_fn]
  // [|:zh_CN] [#negators]，函数模板 [`not_fn]
  template<class F> [=UnSpec] not_fn(F&& f);

  // [:en] [#func.bind_front], function template [`bind_front]
  // [|:zh_CN] [#func.bind_front]，函数模板 [`bind_front]
  template <class F, class... Args> [=UnSpec] bind_front(F&&, Args&&...);

  // [:en] [#func.bind], bind
  // [|:zh_CN] [#func.bind]，bind
  template<class T> struct is_bind_expression;
  template<class T> struct is_placeholder;

  template<class F, class... BoundArgs>
    [=UnSpec] bind(F&&, BoundArgs&&...);
  template<class R, class F, class... BoundArgs>
    [=UnSpec] bind(F&&, BoundArgs&&...);

  namespace placeholders {
    // [:en] [`[*M]] is the [%@impldef number of placeholders for bind expressions] implementation-defined number of placeholders
    // [|:zh_CN] [`[*M]] 是[%@impldef bind 表达式中的占位符的数量]由实现定义的占位符的数量
    [=SeeBelow] _1;
    [=SeeBelow] _2;
               .
               .
               .
    [=SeeBelow] [*_M];
  }

  // [:en] [#func.memfn], member function adaptors
  // [|:zh_CN] [#func.memfn]，成员函数适配器
  template<class R, class T>
    [=UnSpec] mem_fn(R T::*) noexcept;

  // [:en] [#func.wrap] polymorphic function wrappers
  // [|:zh_CN] [#func.wrap] 多态的函数包装器
  class bad_function_call;

  template<class> class function; // [:en] not defined
                                  // [|:zh_CN] 未予定义
  template<class R, class... ArgTypes> class function<R(ArgTypes...)>;

  template<class R, class... ArgTypes>
    void swap(function<R(ArgTypes...)>&, function<R(ArgTypes...)>&) noexcept;

  template<class R, class... ArgTypes>
    bool operator==(const function<R(ArgTypes...)>&, nullptr_t) noexcept;
  template<class R, class... ArgTypes>
    bool operator==(nullptr_t, const function<R(ArgTypes...)>&) noexcept;
  template<class R, class... ArgTypes>
    bool operator!=(const function<R(ArgTypes...)>&, nullptr_t) noexcept;
  template<class R, class... ArgTypes>
    bool operator!=(nullptr_t, const function<R(ArgTypes...)>&) noexcept;

  // [:en] [#func.search], searchers
  // [|:zh_CN] [#func.search]，搜索器
  template<class ForwardIterator, class BinaryPredicate = equal_to<>>
    class default_searcher;

  template<class RandomAccessIterator,
           class Hash = hash<typename iterator_traits<RandomAccessIterator>::value_type>,
           class BinaryPredicate = equal_to<>>
    class boyer_moore_searcher;

  template<class RandomAccessIterator,
           class Hash = hash<typename iterator_traits<RandomAccessIterator>::value_type>,
           class BinaryPredicate = equal_to<>>
    class boyer_moore_horspool_searcher;

  // [:en] [#unord.hash], hash function primary template
  // [|:zh_CN] [#unord.hash]，散列函数的主模板
  template<class T>
    struct hash;

  // [:en] [#func.bind], function object binders
  // [|:zh_CN] [#func.bind]，函数对象绑定器
  template<class T>
    inline constexpr bool is_bind_expression_v = is_bind_expression<T>::value;
  template<class T>
    inline constexpr int is_placeholder_v = is_placeholder<T>::value;

  namespace ranges {
    // [:en] [#range.cmp], range comparisons
    // [|:zh_CN] [#range.cmp]，范围的比较
    template<class T = void>
      requires [=SeeBelow]
    struct equal_to;

    template<class T = void>
      requires [=SeeBelow]
    struct not_equal_to;

    template<class T = void>
      requires [=SeeBelow]
    struct greater;

    template<class T = void>
      requires [=SeeBelow]
    struct less;

    template<class T = void>
      requires [=SeeBelow]
    struct greater_equal;

    template<class T = void>
      requires [=SeeBelow]
    struct less_equal;

    template<> struct equal_to<void>;
    template<> struct not_equal_to<void>;
    template<> struct greater<void>;
    template<> struct less<void>;
    template<> struct greater_equal<void>;
    template<> struct less_equal<void>;
  }
}
[codeblock:end]

[para]
[enter:example]
[:en] If a [=Cpp] program wants to have a by-element addition of two vectors
[`a] and [`b] containing [`double] and put the result into [`a], it can do:
[:zh_CN] 若 [=Cpp] 程序想要对包含 [`double] 的两个 [`vector] [`a] 和 [`b] 进行
逐成员相加并将结果放入 [`a]，则它可以：

[codeblock]
transform(a.begin(), a.end(), b.begin(), a.begin(), plus<double>());
[codeblock:end]
[exit:example]

[para]
[enter:example]
[:en] To negate every element of [`a]:
[:zh_CN] 为对 [`a] 的每个元素求反，可以：

[codeblock]
transform(a.begin(), a.end(), a.begin(), negate<double>());
[codeblock:end]
[exit:example]
