[section#variant.hash
    [:en] Hash support
    [:zh_CN] 散列支持
]

[%@library hash[!variant]]
[codeblock:declaration]
template <class... Types> struct hash<variant<Types...>>;
[codeblock:end]

[enter:description]
[para]
[:en] The specialization [`hash<variant<Types...>>] is enabled ([#unord.hash])
if and only if every specialization in [`hash<remove_const_t<Types>>...] is
enabled.
[:zh_CN] 当且仅当 [`hash<remove_const_t<Types>>...] 中的每个特例都被启用时，特例
[`hash<variant<Types...>>] 被启用（[#unord.hash]）。

[:en] The member functions are not guaranteed to be [`noexcept].
[:zh_CN] 其成员函数不保证为 [`noexcept]。
[exit:description]

[%@library hash[!monostate]]
[codeblock:declaration]
template <> struct hash<monostate>;
[codeblock:end]

[enter:description]
[para]
[:en] The specialization is enabled ([#unord.hash]).
[:zh_CN] 这个特例被启用（[#unord.hash]）。
[exit:description]
