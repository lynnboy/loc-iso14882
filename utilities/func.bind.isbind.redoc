[section#func.bind.isbind
    [:en] Class template [`is_bind_expression]
    [:zh_CN] 类模板 [`is_bind_expression]
]

[%@library is_bind_expression]
[codeblock:synopsis]
namespace std {
  template<class T> struct is_bind_expression;  // [:en] see below
                                                // [|:zh_CN] 见下文
}
[codeblock:end]

[para]
[:en]
The class template [`is_bind_expression] can be used to detect function objects
generated by [`bind].
[:zh_CN]
类模板 [`is_bind_expression] 可被用于检测由 [`bind] 产生的函数对象。

[:en]
The function template [`bind] uses [`is_bind_expression] to detect
subexpressions.
[:zh_CN]
函数模板 [`bind] 使用 [`is_bind_expression] 来检测子表达式。

[para]
[:en]
Instantiations of the [`is_bind_expression] template shall meet the
[`UnaryTypeTrait] requirements ([#meta.rqmts]).
[:zh_CN]
[`is_bind_expression] 模板的实例应当符合 [`UnaryTypeTrait] 的规定
（[#meta.rqmts]）。

[:en]
The implementation shall provide a definition that has a base characteristic of
[`true_type] if [`T] is a type returned from [`bind], otherwise it shall have a
base characteristic of [`false_type].
[:zh_CN]
实现为其提供的定义，当 [`T] 是由 [`bind] 所返回的类型时应当具有 [`true_type] 的
基础特征，否则应当具有 [`false_type] 的基础特征。

[:en]
A program may specialize this template for a user-defined type [`T] to have a
base characteristic of [`true_type] to indicate that [`T] should be treated as a
subexpression in a [`bind] call.
[:zh_CN]
程序可以为某个用户定义的类型 [`T] 特化这个模板以具有 [`true_type] 的基础特征，
用以指出 [`T] 在 [`bind] 的调用中应当被当作其子表达式。
