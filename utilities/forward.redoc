[section#forward
    [:en] Forward/move helpers
    [:zh_CN] 转发/移动辅助函数
]

[para]
[:en]
The library provides templated helper functions to simplify applying move
semantics to an lvalue and to simplify the implementation of forwarding
functions.
[:zh_CN]
程序库中提供了模板化的辅助函数，来简化对左值施加移动语义并简化转发函数的实现。

[:en]
[%signal-safe[![`forward]]]
[%signal-safe[![`move]]]
[%signal-safe[![`move_if_noexcept]]]
All functions specified in this subclause are signal-safe ([#support.signal]).
[:zh_CN]
[%信号安全[![`forward]]]
[%信号安全[![`move]]]
[%信号安全[![`move_if_noexcept]]]
本子条款中所给出的所有函数都是信号安全的（[#support.signal]）。

[%@lib forward]
[%[`forward]]
[codeblock:declaration]
template<class T> constexpr T&& forward(remove_reference_t<T>& t) noexcept;
template<class T> constexpr T&& forward(remove_reference_t<T>&& t) noexcept;
[codeblock:end]

[div:description]
[para:mandates]
[:en] For the second overload, [`is_lvalue_reference_v<T>] is [`false].
[:zh_CN] 对于第二个重载，[`is_lvalue_reference_v<T>] 为 [`false]。

[para:returns]
[:en] [`static_cast<T&&>(t)].
[:zh_CN] [`static_cast<T&&>(t)]。

[para]
[begin:example]
[codeblock]
template<class T, class A1, class A2>
shared_ptr<T> factory(A1&& a1, A2&& a2) {
  return shared_ptr<T>(new T(std::forward<A1>(a1), std::forward<A2>(a2)));
}

struct A {
  A(int&, const double&);
};

void g() {
  shared_ptr<A> sp1 = factory<A>(2, 1.414); // [:en] error: 2 will not bind to [`int&] \
                                            [:zh_CN] 错误：2 不会绑定到 [`int&]
  int i = 2;
  shared_ptr<A> sp2 = factory<A>(i, 1.414); // OK
}
[codeblock:end]

[:en]
In the first call to [`factory], [`A1] is deduced as [`int], so 2 is forwarded
to [`A][=']s constructor as an rvalue.
[:zh_CN]
在第一次调用 [`factory] 中，[`A1] 被推断为 [`int]，故 2 作为一个右值被转发给
[`A] 的构造函数。

[:en]
In the second call to [`factory], [`A1] is deduced as [`int&], so [`i] is
forwarded to [`A][=']s constructor as an lvalue.
[:zh_CN]
在第二次调用 [`factory] 中，[`A1] 被推断为 [`int&]，故 [`i] 作为一个左值被转发给
[`A] 的构造函数。

[:en]
In both cases, [`A2] is deduced as [`double], so 1.414 is forwarded to [`A][=']s
constructor as an rvalue.
[:zh_CN]
两种情况下，[`A2] 均被推断为 [`double]，故 1.414 作为一个右值被转发给 [`A] 的
构造函数。
[end:example]
[div:end]

[%@lib@raw [`move][![:en]function][:zh_CN]函数]
[%[`move]]
[codeblock:declaration]
template<class T> constexpr remove_reference_t<T>&& move(T&& t) noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`static_cast<remove_reference_t<T>&&>(t)].
[:zh_CN] [`static_cast<remove_reference_t<T>&&>(t)]。

[para]
[begin:example]
[codeblock]
template<class T, class A1>
shared_ptr<T> factory(A1&& a1) {
  return shared_ptr<T>(new T(std::forward<A1>(a1)));
}

struct A {
  A();
  A(const A&);      // [:en] copies from lvalues \
                    [:zh_CN] 从左值复制
  A(A&&);           // [:en] moves from rvalues \
                    [:zh_CN] 从右值移动
};

void g() {
  A a;
  shared_ptr<A> sp1 = factory<A>(a);                // [:en] [=lq][`a][=rq] binds to [`A(const A&)] \
                                                    [:zh_CN] “[`a]”绑定到 [`A(const A&)]
  shared_ptr<A> sp2 = factory<A>(std::move(a));     // [:en] [=lq][`a][=rq] binds to [`A(A&&)] \
                                                    [:zh_CN] “[`a]”绑定到 [`A(A&&)]
}
[codeblock:end]

[:en]
In the first call to [`factory], [`A1] is deduced as [`A&], so [`a] is forwarded
as a non-const lvalue.
[:zh_CN]
在第一次调用 [`factory] 时，[`A1] 被推断为 [`A&]，故 [`a] 作为非 const 左值被
转发。

[:en]
This binds to the constructor [`A(const A&)], which copies the value from [`a].
[:zh_CN]
它被绑定到构造函数 [`A(const A&)]，它复制 [`a] 中的值。

[:en]
In the second call to [`factory], because of the call [`std::move(a)], [`A1] is
deduced as [`A], so [`a] is forwarded as an rvalue.
[:zh_CN]
在第二次调用 [`factory] 时，由于调用 [`std::move(a)]，[`A1] 被推断为 [`A]，故
[`a] 作为右值被转发。

[:en]
This binds to the constructor [`A(A&&)], which moves the value from [`a].
[:zh_CN]
它被绑定到构造函数 [`A(A&&)]，它将 [`a] 中的值移动出来。
[end:example]
[div:end]

[%@lib move_if_noexcept]
[codeblock:declaration]
template<class T> constexpr conditional_t<
    !is_nothrow_move_constructible_v<T> && is_copy_constructible_v<T>, const T&, T&&>
  move_if_noexcept(T& x) noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`std::move(x)].
[:zh_CN] [`std::move(x)]。
[div:end]
