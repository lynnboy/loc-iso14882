[section#mem.res.pool.overview
    [:en] Classes [`synchronized_pool_resource] and
            [`unsynchronized_pool_resource]
    [:zh_CN] 类 [`synchronized_pool_resource] 和 [`unsynchronized_pool_resource]
]

[para]
[:en] The [`synchronized_pool_resource] and [`unsynchronized_pool_resource]
classes (collectively called [+pool resource classes]) are general-purpose
memory resources having the following qualities:
[:zh_CN] 类 [`synchronized_pool_resource] 和 [`unsynchronized_pool_resource]
（统称为[+池化资源类]）是通用的内存资源，具有以下性质：

[list]
[item]
[:en] Each resource frees its allocated memory on destruction, even if
[`deallocate] has not been called for some of the allocated blocks.
[:zh_CN] 每个资源都在销毁时释放掉其所分配的内存，即便一些已分配的内存块尚未调用
[`deallocate] 也是如此。

[item]
[:en] A pool resource consists of a collection of [+pools], serving requests for
different block sizes.
[:zh_CN] 池化资源由[+内存池]的集合构成，它们用以处理对不同大小的内存块的请求。

[:en] Each individual pool manages a collection of [+chunks] that are in turn
divided into blocks of uniform size, returned via calls to [`do_allocate].
[:zh_CN] 每个单独的内存池都管理一组[+区块]的集合，它们各自都被分割为统一大小的
内存块，并由 [`do_allocate] 的调用所返回。

[:en] Each call to [`do_allocate(size, alignment)] is dispatched to the pool
serving the smallest blocks accommodating at least [`size] bytes.
[:zh_CN] 对 [`do_allocate(size, alignment)] 的每次调用，都被派发到为能够容纳
[`size] 个字节的最小内存块提供服务的内存池来处理。

[item]
[:en] When a particular pool is exhausted, allocating a block from that pool
results in the allocation of an additional chunk of memory from the [+upstream
allocator] (supplied at construction), thus replenishing the pool.
[:zh_CN] 当某个内存池被耗尽后，从这个内存池分配一个内存块，将导致从其[+上游
分配器]（在其构造时提供）再分配一个内存区块，从而扩展这个内存池。

[:en] With each successive replenishment, the chunk size obtained increases
geometrically.
[:zh_CN] 每次内存池的扩展中，内存区块的大小按几何级数增长。

[begin:note]
[:en] By allocating memory in chunks, the pooling strategy increases the chance
that consecutive allocations will be close together in memory.
[:zh_CN] 池化策略以区块为单位进行内存分配，由此增加了使得连续的分配在内存中互相
靠近的机会。
[end:note]

[item]
[:en] Allocation requests that exceed the largest block size of any pool are
fulfilled directly from the upstream allocator.
[:zh_CN] 超出任何内存池的最大块大小的分配请求，直接从上游分配器进行处理。

[item]
[:en] A [`pool_options] struct may be passed to the pool resource constructors
to tune the largest block size and the maximum chunk size.
[:zh_CN] 可以将一个 [`pool_options] 结构体传递给池化资源的构造函数，以调整其最大
的块大小和最大的区块大小。
[list:end]

[para]
[:en] A [`synchronized_pool_resource] may be accessed from multiple threads
without external synchronization and may have thread-specific pools to reduce
synchronization costs.
[:zh_CN] 可以从多个线程中访问一个 [`synchronized_pool_resource] 而无需进行外部的
同步，它也可能为减低同步开销而具有线程特有的内存池。

[:en] An [`unsynchronized_pool_resource] class may not be accessed from multiple
threads simultaneously and thus avoids the cost of synchronization entirely
in single-threaded applications.
[:zh_CN] [`unsynchronized_pool_resource] 不能从多个线程同时访问，它可以在单线程
应用程序中完全避免同步的开销。

[%@library pool_options]
[%@library synchronized_pool_resource]
[%@library unsynchronized_pool_resource]
[codeblock:synopsis]
namespace std::pmr {
  struct pool_options {
    size_t max_blocks_per_chunk = 0;
    size_t largest_required_pool_block = 0;
  };

  class synchronized_pool_resource : public memory_resource {
  public:
    synchronized_pool_resource(const pool_options& opts, memory_resource* upstream);

    synchronized_pool_resource()
        : synchronized_pool_resource(pool_options(), get_default_resource()) {}
    explicit synchronized_pool_resource(memory_resource* upstream)
        : synchronized_pool_resource(pool_options(), upstream) {}
    explicit synchronized_pool_resource(const pool_options& opts)
        : synchronized_pool_resource(opts, get_default_resource()) {}

    synchronized_pool_resource(const synchronized_pool_resource&) = delete;
    virtual ~synchronized_pool_resource();

    synchronized_pool_resource& operator=(const synchronized_pool_resource&) = delete;

    void release();
    memory_resource* upstream_resource() const;
    pool_options options() const;

  protected:
    void* do_allocate(size_t bytes, size_t alignment) override;
    void do_deallocate(void* p, size_t bytes, size_t alignment) override;

    bool do_is_equal(const memory_resource& other) const noexcept override;
  };

  class unsynchronized_pool_resource : public memory_resource {
  public:
    unsynchronized_pool_resource(const pool_options& opts, memory_resource* upstream);

    unsynchronized_pool_resource()
        : unsynchronized_pool_resource(pool_options(), get_default_resource()) {}
    explicit unsynchronized_pool_resource(memory_resource* upstream)
        : unsynchronized_pool_resource(pool_options(), upstream) {}
    explicit unsynchronized_pool_resource(const pool_options& opts)
        : unsynchronized_pool_resource(opts, get_default_resource()) {}

    unsynchronized_pool_resource(const unsynchronized_pool_resource&) = delete;
    virtual ~unsynchronized_pool_resource();

    unsynchronized_pool_resource& operator=(const unsynchronized_pool_resource&) = delete;

    void release();
    memory_resource* upstream_resource() const;
    pool_options options() const;

  protected:
    void* do_allocate(size_t bytes, size_t alignment) override;
    void do_deallocate(void* p, size_t bytes, size_t alignment) override;

    bool do_is_equal(const memory_resource& other) const noexcept override;
  };
}
[codeblock:end]
