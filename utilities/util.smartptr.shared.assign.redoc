[section#util.smartptr.shared.assign
    [:en] Assignment
    [:zh_CN] 赋值
]

[%@lib@member operator=[!shared_ptr]]
[codeblock:declaration]
shared_ptr& operator=(const shared_ptr& r) noexcept;
template<class Y> shared_ptr& operator=(const shared_ptr<Y>& r) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to [`shared_ptr(r).swap(*this)].
[:zh_CN] 等价于 [`shared_ptr(r).swap(*this)]。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。

[para]
[begin:note]
[:en] The use count updates caused by the temporary object construction and
destruction are not observable side effects, so the implementation can meet the
effects (and the implied guarantees) via different means, without creating a
temporary.
[:zh_CN] 临时对象的构造和销毁所造成的使用计数更改并非可观察的副作用，因而实现
可以通过不同方式来符合其效果（及其隐含的保证），而并不创建临时对象。

[:en] In particular, in the example:
[:zh_CN] 特别地，以下例子中：

[codeblock]
shared_ptr<int> p(new int);
shared_ptr<void> q(p);
p = p;
q = p;
[codeblock:end]

[:en@~]
both assignments can be no-ops.
[:zh_CN@~]
两个赋值均可为空操作。
[end:note]
[div:end]

[%@lib@member operator=[!shared_ptr]]
[codeblock:declaration]
shared_ptr& operator=(shared_ptr&& r) noexcept;
template<class Y> shared_ptr& operator=(shared_ptr<Y>&& r) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to [`shared_ptr(std::move(r)).swap(*this)].
[:zh_CN] 等价于 [`shared_ptr(std::move(r)).swap(*this)]。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@lib@member operator=[!shared_ptr]]
[codeblock:declaration]
template<class Y, class D> shared_ptr& operator=(unique_ptr<Y, D>&& r);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to [`shared_ptr(std::move(r)).swap(*this)].
[:zh_CN] 等价于 [`shared_ptr(std::move(r)).swap(*this)]。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]
