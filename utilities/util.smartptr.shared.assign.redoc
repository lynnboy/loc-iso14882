[section#util.smartptr.shared.assign
    [:en] Assignment
    [:zh_CN] 赋值
]

[%@library shared_ptr[!operator=]]
[%@library operator=[!shared_ptr]]
[codeblock:declaration]
shared_ptr& operator=(const shared_ptr& r) noexcept;
template<class Y> shared_ptr& operator=(const shared_ptr<Y>& r) noexcept;
[codeblock:end]

[begin:description]
[para:effects]
[:en] Equivalent to [`shared_ptr(r).swap(*this)].
[:zh_CN] 等价于 [`shared_ptr(r).swap(*this)]。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。

[para]
[begin:note]
[:en] The use count updates caused by the temporary object construction and
destruction are not observable side effects, so the implementation may meet the
effects (and the implied guarantees) via different means, without creating a
temporary. In particular, in the example:
[:zh_CN]

[codeblock]
shared_ptr<int> p(new int);
shared_ptr<void> q(p);
p = p;
q = p;
[codeblock:end]

[:en@~]
both assignments may be no-ops.
[:zh_CN@~]
两个赋值均可能为空操作。
[end:note]
[end:description]

[%@library operator=[!shared_ptr]]
[%@library shared_ptr[!operator=]]
[codeblock:declaration]
shared_ptr& operator=(shared_ptr&& r) noexcept;
template<class Y> shared_ptr& operator=(shared_ptr<Y>&& r) noexcept;
[codeblock:end]

[begin:description]
[para:effects]
[:en] Equivalent to [`shared_ptr(std::move(r)).swap(*this)].
[:zh_CN] 等价于 [`shared_ptr(std::move(r)).swap(*this)]。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[end:description]

[%@library operator=[!shared_ptr]]
[%@library shared_ptr[!operator=]]
[codeblock:declaration]
template<class Y, class D> shared_ptr& operator=(unique_ptr<Y, D>&& r);
[codeblock:end]

[begin:description]
[para:effects]
[:en] Equivalent to [`shared_ptr(std::move(r)).swap(*this)].
[:zh_CN] 等价于 [`shared_ptr(std::move(r)).swap(*this)]。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[end:description]
