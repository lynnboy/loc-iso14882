[section#optional.assign
    [:en] Assignment
    [:zh_CN] 赋值
]

[%@lib@member operator=[!optional]]
[codeblock:declaration]
constexpr optional<T>& operator=(nullopt_t) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] If [`*this] contains a value, calls [`val->T::~T()] to destroy the
contained value; otherwise no effect.
[:zh_CN] 若 [`*this] 包含值，则为所包含的值调用 [`val->T::~T()]；否则没有效果。

[para:ensures]
[:en] [`*this] does not contain a value.
[:zh_CN] [`*this] 不包含值。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@lib@member operator=[!optional]]
[codeblock:declaration]
constexpr optional<T>& operator=(const optional& rhs);
[codeblock:end]

[div:description]
[para:effects]
[:en] See [#:tab#optional.assign.copy].
[:zh_CN] 参见 [#:tab#optional.assign.copy]。

[table:grid#optional.assign.copy
    [:en] [`optional::operator=(const optional&)] effects
    [:zh_CN] [`optional::operator=(const optional&)] 的效果
]
[|@null ]
[|@head ]   [:en] [`*this] contains a value
            [:zh_CN] [`*this] 包含值
[|@head ]   [:en] [`*this] does not contain a value
            [:zh_CN] [`*this] 不包含值
[-]
[|@head ]   [:en] [`rhs] contains a value
            [:zh_CN] [`rhs] 包含值
[|] [:en] assigns [`*rhs] to the contained value
    [:zh_CN] 将 [`*rhs] 赋值给所包含的值
[|] [:en] direct-non-list-initializes the contained value with [`*rhs]
    [:zh_CN] 以 [`*rhs] 对其所包含的值进行直接非列表初始化
[-]
[|@head ]   [:en] [`rhs] does not contain a value
            [:zh_CN] [`rhs] 不包含值
[|] [:en] destroys the contained value by calling [`val->T::~T()]
    [:zh_CN] 调用 [`val->T::~T()] 以销毁所包含的值
[|] [:en] no effect
    [:zh_CN] 没有效果
[-]
[table:end]

[para:ensures]
[:en] [`rhs.has_value() == this->has_value()].
[:zh_CN] [`rhs.has_value() == this->has_value()]。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。

[para:remarks]
[:en] If any exception is thrown, the result of the expression [`this->has_value()]
remains unchanged.
[:zh_CN] 若抛出了任何异常，则不改变表达式 [`this->has_value()] 的结果。

[:en] If an exception is thrown during the call to [`T][=']s copy constructor,
no effect.
[:zh_CN] 若在调用 [`T] 的复制构造函数中抛出了异常则没有效果。

[:en] If an exception is thrown during the call to [`T][=']s copy assignment,
the state of its contained value is as defined by the exception safety guarantee
of [`T][=']s copy assignment.
[:zh_CN] 若在调用 [`T] 的复制赋值过程中抛出了异常，则所包含的值的状态由 [`T]
的复制赋值的异常安全性保证所定义。

[:en] This operator is defined as deleted unless [`is_copy_constructible_v<T>]
is [`true] and [`is_copy_assignable_v<T>] is [`true].
[:zh_CN] 除非 [`is_copy_constructible_v<T>] 为 [`true] 并且
[`is_copy_assignable_v<T>] 为 [`true]，否则这个构造函数被定义为弃置的。

[:en] If [`is_trivially_copy_constructible_v<T> &&
is_trivially_copy_assignable_v<T> && is_trivially_destructible_v<T>] is [`true],
this assignment operator is trivial.
[:zh_CN] 当 [`is_trivially_copy_constructible_v<T> &&
is_trivially_copy_assignable_v<T> && is_trivially_destructible_v<T>] 为 [`true]
时，这个赋值运算符是平凡的。
[div:end]

[%@lib@member operator=[!optional]]
[codeblock:declaration]
constexpr optional& operator=(optional&& rhs) noexcept([[redoc("[=seebelow]")]]);
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`is_move_constructible_v<T>] is [`true] and [`is_move_assignable_v<T>] is
[`true].
[:zh_CN] [`is_move_constructible_v<T>] 为 [`true] 并且 [`is_move_assignable_v<T>]
为 [`true]。

[para:effects]
[:en] See [#:tab#optional.assign.move].
[:zh_CN] 参见 [#:tab#optional.assign.move]。

[:en] The result of the expression [`rhs.has_value()] remains unchanged.
[:zh_CN] 不改变表达式 [`rhs.has_value()] 的结果。

[table:grid#optional.assign.move
    [:en] [`optional::operator=(optional&&)] effects
    [:zh_CN] [`optional::operator=(optional&&)] 的效果
]
[|@null ]
[|@head ]   [:en] [`*this] contains a value
            [:zh_CN] [`*this] 包含值
[|@head ]   [:en] [`*this] does not contain a value
            [:zh_CN] [`*this] 不包含值
[-]
[|@head ]   [:en] [`rhs] contains a value
            [:zh_CN] [`rhs] 包含值
[|] [:en] assigns [`std::move(*rhs)] to the contained value
    [:zh_CN] 将 [`std::move(*rhs)] 赋值给所包含的值
[|] [:en] direct-non-list-initializes the contained value with [`std::move(*rhs)]
    [:zh_CN] 以 [`std::move(*rhs)] 对其所包含的值进行直接非列表初始化
[-]
[|@head ]   [:en] [`rhs] does not contain a value
            [:zh_CN] [`rhs] 不包含值
[|] [:en] destroys the contained value by calling [`val->T::~T()]
    [:zh_CN] 调用 [`val->T::~T()] 以销毁所包含的值
[|] [:en] no effect
    [:zh_CN] 没有效果
[-]
[table:end]

[para:ensures]
[:en] [`rhs.has_value() == this->has_value()].
[:zh_CN] [`rhs.has_value() == this->has_value()]。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。

[para:remarks]
[:en] The exception specification is equivalent to:
[:zh_CN] 其异常说明等价于：
[codeblock]
is_nothrow_move_assignable_v<T> && is_nothrow_move_constructible_v<T>
[codeblock:end]

[para]
[:en] If any exception is thrown, the result of the expression [`this->has_value()]
remains unchanged.
[:zh_CN] 若抛出了任何异常，则不改变表达式 [`this->has_value()] 的结果。

[:en] If an exception is thrown during the call to [`T][=']s move constructor,
the state of [`*rhs.val] is determined by the exception safety guarantee of
[`T][=']s move constructor.
[:zh_CN] 若在调用 [`T] 的移动构造函数的过程中抛出了异常，则 [`*rhs.val] 的状态
由 [`T] 的移动构造函数的异常安全性保证决定。

[:en] If an exception is thrown during the call to [`T][=']s move assignment,
the state of [`*val] and [`*rhs.val] is determined by the exception safety
guarantee of [`T][=']s move assignment.
[:zh_CN] 若在调用 [`T] 的移动赋值的过程中抛出了异常，则 [`*val] 和 [`*rhs.val]
的状态由 [`T] 的移动赋值的异常安全性保证决定。

[:en] If [`is_trivially_move_constructible_v<T> &&
is_trivially_move_assignable_v<T> && is_trivially_destructible_v<T>] is [`true],
this assignment operator is trivial.
[:zh_CN] 当 [`is_trivially_move_constructible_v<T> &&
is_trivially_move_assignable_v<T> && is_trivially_destructible_v<T>] 为 [`true]
时，这个赋值运算符是平凡的。
[div:end]

[%@lib@member operator=[!optional]]
[codeblock:declaration]
template<class U = T> constexpr optional<T>& operator=(U&& v);
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`is_same_v<remove_cvref_t<U>, optional>] is [`false],
[`conjunction_v<is_scalar<T>, is_same<T, decay_t<U>>>] is [`false],
[`is_constructible_v<T, U>] is [`true], and [`is_assignable_v<T&, U>] is [`true].
[:zh_CN] [`is_same_v<remove_cvref_t<U>, optional>] 为 [`false]，
[`conjunction_v<is_scalar<T>, is_same<T, decay_t<U>>>] 为 [`false]，
[`is_constructible_v<T, U>] 为 [`true]，并且 [`is_assignable_v<T&, U>] 为 [`true]。

[para:effects]
[:en] If [`*this] contains a value, assigns [`std::forward<U>(v)] to the
contained value; otherwise direct-non-list-initializes the contained value with
[`std::forward<U>(v)].
[:zh_CN] 若 [`*this] 包含值，则将 [`std::forward<U>(v)] 赋值给所包含的值；否则以
[`std::forward<U>(v)] 对其所包含的值进行直接非列表初始化。

[para:ensures]
[:en] [`*this] contains a value.
[:zh_CN] [`*this] 包含值。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。

[para:remarks]
[:en] If any exception is thrown, the result of the expression [`this->has_value()]
remains unchanged.
[:zh_CN] 若抛出了任何异常，则不改变表达式 [`this->has_value()] 的结果。

[:en] If an exception is thrown during the call to [`T][=']s constructor, the
state of [`v] is determined by the exception safety guarantee of [`T][=']s
constructor.
[:zh_CN] 若在调用 [`T] 的构造函数的过程中抛出了异常，则 [`v] 的状态由 [`T] 的
构造函数的异常安全性保证决定。

[:en] If an exception is thrown during the call to [`T][=']s assignment, the
state of [`*val] and [`v] is determined by the exception safety guarantee of
[`T][=']s assignment.
[:zh_CN] 若在调用 [`T] 的赋值的过程中抛出了异常，则 [`*val] 和 [`v] 的状态由
[`T] 的赋值的异常安全性保证决定。
[div:end]

[%@lib@member operator=[!optional]]
[codeblock:declaration]
template<class U> constexpr optional<T>& operator=(const optional<U>& rhs);
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en] [`is_constructible_v<T, const U&>] is [`true],
[:zh_CN] [`is_constructible_v<T, const U&>] 为 [`true]，
[item]
[:en] [`is_assignable_v<T&, const U&>] is [`true],
[:zh_CN] [`is_assignable_v<T&, const U&>] 为 [`true]，
[item]
[:en@~] [`[*converts-from-any-cvref]<T, optional<U>>] is [`false].
[:zh_CN@~] [`[*converts-from-any-cvref]<T, optional<U>>] 为 [`false]。
[item]
[:en] [`is_assignable_v<T&, optional<U>&>] is [`false],
[:zh_CN] [`is_assignable_v<T&, optional<U>&>] 为 [`false]，
[item]
[:en] [`is_assignable_v<T&, optional<U>&&>] is [`false],
[:zh_CN] [`is_assignable_v<T&, optional<U>&&>] 为 [`false]，
[item]
[:en] [`is_assignable_v<T&, const optional<U>&>] is [`false], and
[:zh_CN] [`is_assignable_v<T&, const optional<U>&>] 为 [`false]，并且
[item]
[:en] [`is_assignable_v<T&, const optional<U>&&>] is [`false].
[:zh_CN] [`is_assignable_v<T&, const optional<U>&&>] 为 [`false]。
[list:end]

[para:effects]
[:en] See [#:tab#optional.assign.copy.templ].
[:zh_CN] 参见 [#:tab#optional.assign.copy.templ]。

[table:grid#optional.assign.copy.templ
    [:en] [`optional::operator=(const optional<U>&)] effects
    [:zh_CN] [`optional::operator=(const optional<U>&)] 的效果
]
[|@null ]
[|@head ]   [:en] [`*this] contains a value
            [:zh_CN] [`*this] 包含值
[|@head ]   [:en] [`*this] does not contain a value
            [:zh_CN] [`*this] 不包含值
[-]
[|@head ]   [:en] [`rhs] contains a value
            [:zh_CN] [`rhs] 包含值
[|] [:en] assigns [`*rhs] to the contained value
    [:zh_CN] 将 [`*rhs] 赋值给所包含的值
[|] [:en] direct-non-list-initializes the contained value with [`*rhs]
    [:zh_CN] 以 [`*rhs] 对其所包含的值进行直接非列表初始化
[-]
[|@head ]   [:en] [`rhs] does not contain a value
            [:zh_CN] [`rhs] 不包含值
[|] [:en] destroys the contained value by calling [`val->T::~T()]
    [:zh_CN] 调用 [`val->T::~T()] 以销毁所包含的值
[|] [:en] no effect
    [:zh_CN] 没有效果
[-]
[table:end]

[para:ensures]
[:en] [`rhs.has_value() == this->has_value()].
[:zh_CN] [`rhs.has_value() == this->has_value()]。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。

[para:remarks]
[:en] If any exception is thrown, the result of the expression [`this->has_value()]
remains unchanged.
[:zh_CN] 若抛出了任何异常，则不改变表达式 [`this->has_value()] 的结果。

[:en] If an exception is thrown during the call to [`T][=']s constructor, the
state of [`*rhs.val] is determined by the exception safety guarantee of
[`T][=']s constructor.
[:zh_CN] 若在调用 [`T] 的构造函数的过程中抛出了异常，则 [`*rhs.val] 的状态由
[`T] 的构造函数的异常安全性保证决定。

[:en] If an exception is thrown during the call to [`T][=']s assignment, the
state of [`*val] and [`*rhs.val] is determined by the exception safety guarantee
of [`T][=']s assignment.
[:zh_CN] 若在调用 [`T] 的赋值的过程中抛出了异常，则 [`*val] 和 [`*rhs.val] 的
状态由 [`T] 的赋值的异常安全性保证决定。
[div:end]

[%@lib@member operator=[!optional]]
[codeblock:declaration]
template<class U> constexpr optional<T>& operator=(optional<U>&& rhs);
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en] [`is_constructible_v<T, U>] is [`true],
[:zh_CN] [`is_constructible_v<T, U>] 为 [`true]，
[item]
[:en] [`is_assignable_v<T&, U>] is [`true],
[:zh_CN] [`is_assignable_v<T&, U>] 为 [`true]，
[item]
[:en@~] [`[*converts-from-any-cvref]<T, optional<U>>] is [`false].
[:zh_CN@~] [`[*converts-from-any-cvref]<T, optional<U>>] 为 [`false]。
[item]
[:en] [`is_assignable_v<T&, optional<U>&>] is [`false],
[:zh_CN] [`is_assignable_v<T&, optional<U>&>] 为 [`false]，
[item]
[:en] [`is_assignable_v<T&, optional<U>&&>] is [`false],
[:zh_CN] [`is_assignable_v<T&, optional<U>&&>] 为 [`false]，
[item]
[:en] [`is_assignable_v<T&, const optional<U>&>] is [`false], and
[:zh_CN] [`is_assignable_v<T&, const optional<U>&>] 为 [`false]，并且
[item]
[:en] [`is_assignable_v<T&, const optional<U>&&>] is [`false].
[:zh_CN] [`is_assignable_v<T&, const optional<U>&&>] 为 [`false]。
[list:end]

[para:effects]
[:en] See [#:tab#optional.assign.move.templ].
[:zh_CN] 参见 [#:tab#optional.assign.move.templ]。

[:en] The result of the expression [`rhs.has_value()] remains unchanged.
[:zh_CN] 不改变表达式 [`rhs.has_value()] 的结果。

[table:grid#optional.assign.move.templ
    [:en] [`optional::operator=(optional<U>&&)] effects
    [:zh_CN] [`optional::operator=(optional<U>&&)] 的效果
]
[|@null ]
[|@head ]   [:en] [`*this] contains a value
            [:zh_CN] [`*this] 包含值
[|@head ]   [:en] [`*this] does not contain a value
            [:zh_CN] [`*this] 不包含值
[-]
[|@head ]   [:en] [`rhs] contains a value
            [:zh_CN] [`rhs] 包含值
[|] [:en] assigns [`std::move(*rhs)] to the contained value
    [:zh_CN] 将 [`std::move(*rhs)] 赋值给所包含的值
[|] [:en] direct-non-list-initializes the contained value with [`std::move(*rhs)]
    [:zh_CN] 以 [`std::move(*rhs)] 对其所包含的值进行直接非列表初始化
[-]
[|@head ]   [:en] [`rhs] does not contain a value
            [:zh_CN] [`rhs] 不包含值
[|] [:en] destroys the contained value by calling [`val->T::~T()]
    [:zh_CN] 调用 [`val->T::~T()] 以销毁所包含的值
[|] [:en] no effect
    [:zh_CN] 没有效果
[-]
[table:end]

[para:ensures]
[:en] [`rhs.has_value() == this->has_value()].
[:zh_CN] [`rhs.has_value() == this->has_value()]。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。

[para:remarks]
[:en] If any exception is thrown, the result of the expression [`this->has_value()]
remains unchanged.
[:zh_CN] 若抛出了任何异常，则不改变表达式 [`this->has_value()] 的结果。

[:en] If an exception is thrown during the call to [`T][=']s constructor, the
state of [`*rhs.val] is determined by the exception safety guarantee of
[`T][=']s constructor.
[:zh_CN] 若在调用 [`T] 的构造函数的过程中抛出了异常，则 [`*rhs.val] 的状态由
[`T] 的构造函数的异常安全性保证决定。

[:en] If an exception is thrown during the call to [`T][=']s assignment, the
state of [`*val] and [`*rhs.val] is determined by the exception safety guarantee
of [`T][=']s assignment.
[:zh_CN] 若在调用 [`T] 的赋值的过程中抛出了异常，则 [`*val] 和 [`*rhs.val] 的
状态由 [`T] 的赋值的异常安全性保证决定。
[div:end]

[%@lib@member emplace[!optional]]
[codeblock:declaration]
template<class... Args> constexpr T& emplace(Args&&... args);
[codeblock:end]

[div:description]
[para:mandates]
[:en] [`is_constructible_v<T, Args...>] is [`true].
[:zh_CN] [`is_constructible_v<T, Args...>] 为 [`true]。

[para:effects]
[:en] Calls [`*this = nullopt].
[:zh_CN] 调用 [`*this = nullopt]。

[:en] Then direct-non-list-initializes the contained value with
[`std::forward<Args>(args)...].
[:zh_CN] 然后以 [`std::forward<Args>(args)...] 对其所包含的值进行直接非列表初始化。

[para:ensures]
[:en] [`*this] contains a value.
[:zh_CN] [`*this] 包含值。

[para:returns]
[:en] A reference to the new contained value.
[:zh_CN] 指代新包含的值的引用。

[para:throws]
[:en] Any exception thrown by the selected constructor of [`T].
[:zh_CN] 由所选择的 [`T] 的构造函数所抛出的任何异常。

[para:remarks]
[:en] If an exception is thrown during the call to [`T][=']s constructor,
[`*this] does not contain a value, and the previous [`*val] (if any) has been
destroyed.
[:zh_CN] 若在调用 [`T] 的构造函数中抛出了异常，则 [`*this] 不包含值，且之前的
[`*val]（如果有）将被销毁。
[div:end]

[%@lib@member emplace[!optional]]
[codeblock:declaration]
template<class U, class... Args> constexpr T& emplace(initializer_list<U> il, Args&&... args);
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`is_constructible_v<T, initializer_list<U>&, Args...>] is [`true].
[:zh_CN] [`is_constructible_v<T, initializer_list<U>&, Args...>] 为 [`true]。

[para:effects]
[:en] Calls [`*this = nullopt].
[:zh_CN] 调用 [`*this = nullopt]。

[:en] Then direct-non-list-initializes the contained value with
[`il, std::forward<Args>(args)...].
[:zh_CN] 然后以 [`il, std::forward<Args>(args)...] 对其所包含的值进行直接非列表
初始化。

[para:ensures]
[:en] [`*this] contains a value.
[:zh_CN] [`*this] 包含值。

[para:returns]
[:en] A reference to the new contained value.
[:zh_CN] 指代新包含的值的引用。

[para:throws]
[:en] Any exception thrown by the selected constructor of [`T].
[:zh_CN] 由所选择的 [`T] 的构造函数所抛出的任何异常。

[para:remarks]
[:en] If an exception is thrown during the call to [`T][=']s constructor,
[`*this] does not contain a value, and the previous [`*val] (if any) has been
destroyed.
[:zh_CN] 若在调用 [`T] 的构造函数中抛出了异常，则 [`*this] 不包含值，且之前的
[`*val]（如果有）将被销毁。
[div:end]
