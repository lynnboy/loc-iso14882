[section#function.objects
    [:en] Function objects
    [:zh_CN] 函数对象
]

[para]
[:en]
A [+function object type [%function object[!type]]] is an object type
([#basic.types]) that can be the type of the [~postfix-expression] in a function
call ([#expr.call], [#over.match.call]).[#:note#fn:$section.1]
[:zh_CN]
[+函数对象类型[%函数对象[!～类型]]]是可以用作函数调用（[#expr.call，
[#over.match.call]）中的[~后缀表达式]的类型的对象类型（[#basic.types]）。
[#:note#fn:$section.1]

[note:foot#fn:$section.1]
[:en]
Such a type is a function pointer or a class type which has a member
[`operator()] or a class type which has a conversion to a pointer to function.
[:zh_CN]
这种类型是函数指针，或者带有成员 [`operator()] 的类类型，或者带有向函数指针的
转换的类类型。
[note:end]

[:en]
A [+function object] is an object of a function object type.
[:zh_CN]
[+函数对象]是具有函数对象类型的对象。

[:en]
In the places where one would expect to pass a pointer to a function to an
algorithmic template ([#algorithms]), the interface is specified to accept a
function object.
[:zh_CN]
在预期可以向算法模板（[#algorithms]）传递指向某函数的指针之处，该接口就被指定为
接受一个函数对象。

[:en]
This not only makes algorithmic templates work with pointers to functions, but
also enables them to work with arbitrary function objects.
[:zh_CN]
这使得算法模板不仅可以用函数指针进行工作，也使它们可以用任意函数对象来工作。

[include functional.syn]

[include func.def]

[include func.require]

[include func.invoke]

[include refwrap]

[include arithmetic.operations]

[include comparisons]

[include logical.operations]

[include bitwise.operations]

[include func.identity]

[include func.not_fn]

[include func.bind]

[include func.memfn]

[include func.wrap]

[include func.search]

[include unord.hash]
