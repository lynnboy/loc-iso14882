[section#func.wrap.move.class
    [:en] Class template [`move_only_function]
    [:zh_CN] 类模板 [`move_only_function]
]

[%@lib move_only_function]
[codeblock:synopsis]
namespace std {
  template<class... S> class move_only_function;                // [=notdef]

  template<class R, class... ArgTypes>
  class move_only_function<R(ArgTypes...) [[redoc("[=cv]")]] [[redoc("^>")]]ref noexcept([[redoc("^>")]]noex)> {
  public:
    using result_type = R;

    // [:en] [#func.wrap.move.ctor], constructors, assignment, and destructor \
    [:zh_CN] [#func.wrap.move.ctor]，构造函数，赋值，和析构函数
    move_only_function() noexcept;
    move_only_function(nullptr_t) noexcept;
    move_only_function(move_only_function&&) noexcept;
    template<class F> move_only_function(F&&);
    template<class T, class... Args>
      explicit move_only_function(in_place_type_t<T>, Args&&...);
    template<class T, class U, class... Args>
      explicit move_only_function(in_place_type_t<T>, initializer_list<U>, Args&&...);

    move_only_function& operator=(move_only_function&&);
    move_only_function& operator=(nullptr_t) noexcept;
    template<class F> move_only_function& operator=(F&&);

    ~move_only_function();

    // [:en] [#func.wrap.move.inv], invocation \
    [:zh_CN] [#func.wrap.move.inv]，调用
    R operator()(ArgTypes...) [[redoc("[=cv]")]] [[redoc("^>")]]ref noexcept([[redoc("^>")]]noex);

    // [:en] [#func.wrap.move.util], utility \
    [:zh_CN] [#func.wrap.move.util]，工具函数
    void swap(move_only_function&) noexcept;
    friend void swap(move_only_function&, move_only_function&) noexcept;
    friend bool operator==(const move_only_function&, nullptr_t) noexcept;

  private:
    template<class VT>
      static constexpr bool [[redoc("*>")]]is-callable-from = [[redoc("[=seebelow]")]];       // [=expos]
  };
}
[codeblock:end]

[para]
[:en]
The [`move_only_function] class template provides polymorphic wrappers that
generalize the notion of a callable object ([#func.def]).
[:zh_CN]
[`move_only_function] 类模板提供一种多态的包装器，将可调用对象（[#func.def]）
概念一般化。

[:en]
These wrappers can store, move, and call arbitrary callable objects,
given a call signature.
[:zh_CN]
给定一个调用签名，这些包装器可以存储、移动和调用任意可调用对象。

[para:recommended]
[:en]
Implementations should avoid the use of dynamically allocated memory
for a small contained value.
[:zh_CN]
各实现最好避免为小型的包含值使用动态分配内存。

[begin:note]
[:en]
Such small-object optimization can only be applied to a type [`T]
for which [`is_nothrow_move_constructible_v<T>] is [`true].
[:zh_CN]
这种小型对象优化只能应用于使得 [`is_nothrow_move_constructible_v<T>] 为 [`true]
的类型 [`T]。
[end:note]
