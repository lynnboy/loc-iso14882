[section#arithmetic.operations.minus
    [:en] Class template [`minus]
    [:zh_CN] 类模板 [`minus]
]

[%@library minus]
[codeblock:declaration]
template<class T = void> struct minus {
  constexpr T operator()(const T& x, const T& y) const;
};
[codeblock:end]

[%@library operator()[!minus]]
[%@library minus[!operator()]]
[codeblock:declaration]
constexpr T operator()(const T& x, const T& y) const;
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`x - y].
[:zh_CN] [`x - y]。
[end:description]

[%@library minus<>]
[codeblock:declaration]
template<> struct minus<void> {
  template<class T, class U> constexpr auto operator()(T&& t, U&& u) const
    -> decltype(std::forward<T>(t) - std::forward<U>(u));

  using is_transparent = [[redoc("=unspec")]];
};
[codeblock:end]

[%@library operator()[!minus<>]]
[%@library minus<>[!operator()]]
[codeblock:declaration]
template<class T, class U> constexpr auto operator()(T&& t, U&& u) const
    -> decltype(std::forward<T>(t) - std::forward<U>(u));
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`std::forward<T>(t) - std::forward<U>(u)].
[:zh_CN] [`std::forward<T>(t) - std::forward<U>(u)]。
[end:description]
