[section#func.invoke
    [:en] [`invoke] functions
    [:zh_CN] [`invoke] 等函数
]

[%@lib invoke]
[%@lib@raw [`[^INVOKE]][@invoke]]
[codeblock:declaration]
template<class F, class... Args>
  constexpr invoke_result_t<F, Args...> invoke(F&& f, Args&&... args)
    noexcept(is_nothrow_invocable_v<F, Args...>);
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`is_invocable_v<F, Args...>] is [`true].
[:zh_CN] [`is_invocable_v<F, Args...>] 为 [`true]。

[para:returns]
[:en] [`[^INVOKE](std::forward<F>(f), std::forward<Args>(args)...)]
([#func.require]).
[:zh_CN] [`[^INVOKE](std::forward<F>(f), std::forward<Args>(args)...)]
（[#func.require]）。
[div:end]

[%@lib invoke_r]
[codeblock:declaration]
template<class R, class F, class... Args>
  constexpr R invoke_r(F&& f, Args&&... args)
    noexcept(is_nothrow_invocable_r_v<R, F, Args...>);
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`is_invocable_r_v<R, F, Args...>] is [`true].
[:zh_CN] [`is_invocable_r_v<R, F, Args...>] 为 [`true]。

[para:returns]
[:en] [`[^INVOKE]<R>(std::forward<F>(f), std::forward<Args>(args)...)]
([#func.require]).
[:zh_CN] [`[^INVOKE]<R>(std::forward<F>(f), std::forward<Args>(args)...)]
（[#func.require]）。
[div:end]
