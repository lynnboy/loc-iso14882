[section#expected.void.eq
    [:en] Equality operators
    [:zh_CN] 相等性运算符
]

[%@lib@member operator==[!expected<void>]]
[codeblock:declaration]
template<class T2, class E2> requires is_void_v<T2>
  friend constexpr bool operator==(const expected& x, const expected<T2, E2>& y);
[codeblock:end]

[div:description]
[para:mandates]
[:en] The expression [`x.error() == y.error()] is well-formed and its result is
convertible to [`bool].
[:zh_CN] 表达式 [`x.error() == y.error()] 良构且其结果可以转换为 [`bool]。

[para:returns]
[:en] If [`x.has_value()] does not equal [`y.has_value()], [`false]; otherwise
[`x.has_value() || static_cast<bool>(x.error() == y.error())].
[:zh_CN] 当 [`x.has_value()] 不等于 [`y.has_value()] 时返回 [`false]；否则返回
[`x.has_value() || static_cast<bool>(x.error() == y.error())]。
[div:end]

[%@lib@member operator==[!expected<void>]]
[codeblock:declaration]
template<class E2>
  friend constexpr bool operator==(const expected& x, const unexpected<E2>& e);
[codeblock:end]

[div:description]
[para:mandates]
[:en] The expression [`x.error() == e.value()] is well-formed and its result is
convertible to [`bool].
[:zh_CN] 表达式 [`x.error() == e.value()] 良构且其结果可以转换为 [`bool]。

[para:returns]
[:en] [`!x.has_value() && static_cast<bool>(x.error() == e.value())].
[:zh_CN] [`!x.has_value() && static_cast<bool>(x.error() == e.value())]。
[div:end]
