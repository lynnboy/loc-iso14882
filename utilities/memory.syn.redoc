[section#memory.syn
    [:en] Header [`<memory>] synopsis
    [:zh_CN] 头文件 [`<memory>] 纲要
]

[para]
[:en]
The header [`<memory>] defines several types and function templates that
describe properties of pointers and pointer-like types, manage memory for
containers and other template types, destroy objects, and construct multiple
objects in uninitialized memory buffers
([#pointer.traits][=-][#specialized.algorithms]).
[:zh_CN]
头文件 [`<memory>] 定义了用于描述指针和指针式类型，用于管理容器和其他模板类型的
内存，销毁对象，以及用于在未初始化内存缓冲区中构造多个对象的几个类型和函数模板
（[#pointer.traits]—[#specialized.algorithms]）。

[:en]
The header also defines the templates [`unique_ptr], [`shared_ptr], [`weak_ptr],
and various function templates that operate on objects of these types
([#smartptr]).
[:zh_CN]
这个头文件还定义了模板 [`unique_ptr]，[`shared_ptr]，[`weak_ptr]，以及操作这些
类型的对象的各种函数模板（[#smartptr]）。

[%[`<memory>] [@memory]]
[%@library <memory> [@memory]]
[codeblock:synopsis [!:mark UnSpec] ]
namespace std {
  // [:en] [#pointer.traits], pointer traits
  // [|:zh_CN] [#pointer.traits]，指针特征
  template <class Ptr> struct pointer_traits;
  template <class T> struct pointer_traits<T*>;

  // [:en] [#util.dynamic.safety], pointer safety
  // [|:zh_CN] [#util.dynamic.safety]，指针安全性
  enum class pointer_safety { relaxed, preferred, strict };
  void declare_reachable(void* p);
  template <class T> T* undeclare_reachable(T* p);
  void declare_no_pointers(char* p, size_t n);
  void undeclare_no_pointers(char* p, size_t n);
  pointer_safety get_pointer_safety() noexcept;

  // [:en] [#ptr.align], pointer alignment function
  // [|:zh_CN] [#ptr.align]，指针对齐函数
  void* align(size_t alignment, size_t size, void*& ptr, size_t& space);

  // [:en] [#allocator.tag], allocator argument tag
  // [|:zh_CN] [#allocator.tag]，分配器实参标签
  struct allocator_arg_t { explicit allocator_arg_t() = default; };
  inline constexpr allocator_arg_t allocator_arg{};

  // [:en] [#allocator.uses], [`uses_allocator]
  // [|:zh_CN] [#allocator.uses]，[`uses_allocator]
  template <class T, class Alloc> struct uses_allocator;

  // [:en] [#allocator.traits], allocator traits
  // [|:zh_CN] [#allocator.traits]，分配器特征
  template <class Alloc> struct allocator_traits;

  // [:en] [#default.allocator], the default allocator:
  // [|:zh_CN] [#default.allocator]，默认分配器：
  template <class T> class allocator;
  template <class T, class U>
    bool operator==(const allocator<T>&, const allocator<U>&) noexcept;
  template <class T, class U>
    bool operator!=(const allocator<T>&, const allocator<U>&) noexcept;

  // [:en] [#specialized.algorithms], specialized algorithms:
  // [|:zh_CN] [#specialized.algorithms]，特化的算法：
  template <class T> constexpr T* addressof(T& r) noexcept;
  template <class T> const T* addressof(const T&&) = delete;
  template <class ForwardIterator>
    void uninitialized_default_construct(ForwardIterator first, ForwardIterator last);
  template <class ExecutionPolicy, class ForwardIterator>
    void uninitialized_default_construct(ExecutionPolicy&& exec, // [:en] see [#algorithms.parallel.overloads]
                                                                 // [|:zh_CN] 参见 [#algorithms.parallel.overloads]
                                         ForwardIterator first, ForwardIterator last);
  template <class ForwardIterator, class Size>
    ForwardIterator uninitialized_default_construct_n(ForwardIterator first, Size n);
  template <class ExecutionPolicy, class ForwardIterator, class Size>
    ForwardIterator uninitialized_default_construct_n(ExecutionPolicy&& exec, // [:en] see [#algorithms.parallel.overloads]
                                                                              // [|:zh_CN] 参见 [#algorithms.parallel.overloads]
                                                      ForwardIterator first, Size n);
  template <class ForwardIterator>
    void uninitialized_value_construct(ForwardIterator first, ForwardIterator last);
  template <class ExecutionPolicy, class ForwardIterator>
    void uninitialized_value_construct(ExecutionPolicy&& exec, // [:en] see [#algorithms.parallel.overloads]
                                                               // [|:zh_CN] 参见 [#algorithms.parallel.overloads]
                                       ForwardIterator first, ForwardIterator last);
  template <class ForwardIterator, class Size>
    ForwardIterator uninitialized_value_construct_n(ForwardIterator first, Size n);
  template <class ExecutionPolicy, class ForwardIterator, class Size>
    ForwardIterator uninitialized_value_construct_n(ExecutionPolicy&& exec, // [:en] see [#algorithms.parallel.overloads]
                                                                            // [|:zh_CN] 参见 [#algorithms.parallel.overloads]
                                                    ForwardIterator first, Size n);
  template <class InputIterator, class ForwardIterator>
    ForwardIterator uninitialized_copy(InputIterator first, InputIterator last,
                                       ForwardIterator result);
  template <class ExecutionPolicy, class InputIterator, class ForwardIterator>
    ForwardIterator uninitialized_copy(ExecutionPolicy&& exec, // [:en] see [#algorithms.parallel.overloads]
                                                               // [|:zh_CN] 参见 [#algorithms.parallel.overloads]
                                       InputIterator first, InputIterator last,
                                       ForwardIterator result);
  template <class InputIterator, class Size, class ForwardIterator>
    ForwardIterator uninitialized_copy_n(InputIterator first, Size n,
                                         ForwardIterator result);
  template <class ExecutionPolicy, class InputIterator, class Size, class ForwardIterator>
    ForwardIterator uninitialized_copy_n(ExecutionPolicy&& exec, // [:en] see [#algorithms.parallel.overloads]
                                                                 // [|:zh_CN] 参见 [#algorithms.parallel.overloads]
                                         InputIterator first, Size n,
                                         ForwardIterator result);
  template <class InputIterator, class ForwardIterator>
    ForwardIterator uninitialized_move(InputIterator first, InputIterator last,
                                       ForwardIterator result);
  template <class ExecutionPolicy, class InputIterator, class ForwardIterator>
    ForwardIterator uninitialized_move(ExecutionPolicy&& exec, // [:en] see [#algorithms.parallel.overloads]
                                                               // [|:zh_CN] 参见 [#algorithms.parallel.overloads]
                                       InputIterator first, InputIterator last,
                                       ForwardIterator result);
  template <class InputIterator, class Size, class ForwardIterator>
    pair<InputIterator, ForwardIterator>
      uninitialized_move_n(InputIterator first, Size n, ForwardIterator result);
  template <class ExecutionPolicy, class InputIterator, class Size, class ForwardIterator>
    pair<InputIterator, ForwardIterator>
      uninitialized_move_n(ExecutionPolicy&& exec, // [:en] see [#algorithms.parallel.overloads]
                                                   // [|:zh_CN] 参见 [#algorithms.parallel.overloads]
                           InputIterator first, Size n, ForwardIterator result);
  template <class ForwardIterator, class T>
    void uninitialized_fill(ForwardIterator first, ForwardIterator last,
                            const T& x);
  template <class ExecutionPolicy, class ForwardIterator, class T>
    void uninitialized_fill(ExecutionPolicy&& exec, // [:en] see [#algorithms.parallel.overloads]
                                                    // [|:zh_CN] 参见 [#algorithms.parallel.overloads]
                            ForwardIterator first, ForwardIterator last,
                            const T& x);
  template <class ForwardIterator, class Size, class T>
    ForwardIterator uninitialized_fill_n(ForwardIterator first, Size n, const T& x);
  template <class ExecutionPolicy, class ForwardIterator, class Size, class T>
    ForwardIterator uninitialized_fill_n(ExecutionPolicy&& exec, // [:en] see [#algorithms.parallel.overloads]
                                                                 // [|:zh_CN] 参见 [#algorithms.parallel.overloads]
                                         ForwardIterator first, Size n, const T& x);
  template <class T>
    void destroy_at(T* location);
  template <class ForwardIterator>
    void destroy(ForwardIterator first, ForwardIterator last);
  template <class ExecutionPolicy, class ForwardIterator>
    void destroy(ExecutionPolicy&& exec, // [:en] see [#algorithms.parallel.overloads]
                                         // [|:zh_CN] 参见 [#algorithms.parallel.overloads]
                 ForwardIterator first, ForwardIterator last);
  template <class ForwardIterator, class Size>
    ForwardIterator destroy_n(ForwardIterator first, Size n);
  template <class ExecutionPolicy, class ForwardIterator, class Size>
    ForwardIterator destroy_n(ExecutionPolicy&& exec, // [:en] see [#algorithms.parallel.overloads]
                                                      // [|:zh_CN] 参见 [#algorithms.parallel.overloads]
                              ForwardIterator first, Size n);

  // [:en] [#unique.ptr], class template [`unique_ptr]
  // [|:zh_CN] [#unique.ptr]，类模板 [`unique_ptr]
  template <class T> struct default_delete;
  template <class T> struct default_delete<T[]>;
  template <class T, class D = default_delete<T>> class unique_ptr;
  template <class T, class D> class unique_ptr<T[], D>;

  template <class T, class... Args> unique_ptr<T> make_unique(Args&&... args);
  template <class T> unique_ptr<T> make_unique(size_t n);
  template <class T, class... Args> [=UnSpec] make_unique(Args&&...) = delete;

  template <class T, class D> void swap(unique_ptr<T, D>& x, unique_ptr<T, D>& y) noexcept;

  template <class T1, class D1, class T2, class D2>
    bool operator==(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
  template <class T1, class D1, class T2, class D2>
    bool operator!=(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
  template <class T1, class D1, class T2, class D2>
    bool operator<(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
  template <class T1, class D1, class T2, class D2>
    bool operator<=(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
  template <class T1, class D1, class T2, class D2>
    bool operator>(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
  template <class T1, class D1, class T2, class D2>
    bool operator>=(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);

  template <class T, class D>
    bool operator==(const unique_ptr<T, D>& x, nullptr_t) noexcept;
  template <class T, class D>
    bool operator==(nullptr_t, const unique_ptr<T, D>& y) noexcept;
  template <class T, class D>
    bool operator!=(const unique_ptr<T, D>& x, nullptr_t) noexcept;
  template <class T, class D>
    bool operator!=(nullptr_t, const unique_ptr<T, D>& y) noexcept;
  template <class T, class D>
    bool operator<(const unique_ptr<T, D>& x, nullptr_t);
  template <class T, class D>
    bool operator<(nullptr_t, const unique_ptr<T, D>& y);
  template <class T, class D>
    bool operator<=(const unique_ptr<T, D>& x, nullptr_t);
  template <class T, class D>
    bool operator<=(nullptr_t, const unique_ptr<T, D>& y);
  template <class T, class D>
    bool operator>(const unique_ptr<T, D>& x, nullptr_t);
  template <class T, class D>
    bool operator>(nullptr_t, const unique_ptr<T, D>& y);
  template <class T, class D>
    bool operator>=(const unique_ptr<T, D>& x, nullptr_t);
  template <class T, class D>
    bool operator>=(nullptr_t, const unique_ptr<T, D>& y);

  // [:en] [#util.smartptr.weakptr], class [`bad_weak_ptr]
  // [|:zh_CN] [#util.smartptr.weakptr]，类 [`bad_weak_ptr]
  class bad_weak_ptr;

  // [:en] [#util.smartptr.shared], class template [`shared_ptr]
  // [|:zh_CN] [#util.smartptr.shared]，类模板 [`shared_ptr]
  template<class T> class shared_ptr;

  // [:en] [#util.smartptr.shared.create], [`shared_ptr] creation
  // [|:zh_CN] [#util.smartptr.shared.create]，[`shared_ptr] 的创建
  template<class T, class... Args> shared_ptr<T>
    make_shared(Args&&... args);
  template<class T, class A, class... Args>
    shared_ptr<T> allocate_shared(const A& a, Args&&... args);

  // [:en] [#util.smartptr.shared.cmp], [`shared_ptr] comparisons
  // [|:zh_CN] [#util.smartptr.shared.cmp]，[`shared_ptr] 的比较
  template<class T, class U>
    bool operator==(const shared_ptr<T>& a, const shared_ptr<U>& b) noexcept;
  template<class T, class U>
    bool operator!=(const shared_ptr<T>& a, const shared_ptr<U>& b) noexcept;
  template<class T, class U>
    bool operator<(const shared_ptr<T>& a, const shared_ptr<U>& b) noexcept;
  template<class T, class U>
    bool operator>(const shared_ptr<T>& a, const shared_ptr<U>& b) noexcept;
  template<class T, class U>
    bool operator<=(const shared_ptr<T>& a, const shared_ptr<U>& b) noexcept;
  template<class T, class U>
    bool operator>=(const shared_ptr<T>& a, const shared_ptr<U>& b) noexcept;

  template <class T>
    bool operator==(const shared_ptr<T>& x, nullptr_t) noexcept;
  template <class T>
    bool operator==(nullptr_t, const shared_ptr<T>& y) noexcept;
  template <class T>
    bool operator!=(const shared_ptr<T>& x, nullptr_t) noexcept;
  template <class T>
    bool operator!=(nullptr_t, const shared_ptr<T>& y) noexcept;
  template <class T>
    bool operator<(const shared_ptr<T>& x, nullptr_t) noexcept;
  template <class T>
    bool operator<(nullptr_t, const shared_ptr<T>& y) noexcept;
  template <class T>
    bool operator<=(const shared_ptr<T>& x, nullptr_t) noexcept;
  template <class T>
    bool operator<=(nullptr_t, const shared_ptr<T>& y) noexcept;
  template <class T>
    bool operator>(const shared_ptr<T>& x, nullptr_t) noexcept;
  template <class T>
    bool operator>(nullptr_t, const shared_ptr<T>& y) noexcept;
  template <class T>
    bool operator>=(const shared_ptr<T>& x, nullptr_t) noexcept;
  template <class T>
    bool operator>=(nullptr_t, const shared_ptr<T>& y) noexcept;

  // [:en] [#util.smartptr.shared.spec], [`shared_ptr] specialized algorithms
  // [|:zh_CN] [#util.smartptr.shared.spec]，[`shared_ptr] 的特化算法
  template<class T> void
    swap(shared_ptr<T>& a, shared_ptr<T>& b) noexcept;

  // [:en] [#util.smartptr.shared.cast], [`shared_ptr] casts
  // [|:zh_CN] [#util.smartptr.shared.cast]，[`shared_ptr] 的强制转换
  template<class T, class U>
    shared_ptr<T> static_pointer_cast(const shared_ptr<U>& r) noexcept;
  template<class T, class U>
    shared_ptr<T> dynamic_pointer_cast(const shared_ptr<U>& r) noexcept;
  template<class T, class U>
    shared_ptr<T> const_pointer_cast(const shared_ptr<U>& r) noexcept;
  template<class T, class U>
    shared_ptr<T> reinterpret_pointer_cast(const shared_ptr<U>& r) noexcept;

  // [:en] [#util.smartptr.getdeleter], [`shared_ptr] [`get_deleter]
  // [|:zh_CN] [#util.smartptr.getdeleter]，[`shared_ptr] 的 [`get_deleter]
  template<class D, class T>
    D* get_deleter(const shared_ptr<T>& p) noexcept;

  // [:en] [#util.smartptr.shared.io], [`shared_ptr] I/O
  // [|:zh_CN] [#util.smartptr.shared.io]，[`shared_ptr] 的 I/O
  template<class E, class T, class Y>
    basic_ostream<E, T>& operator<< (basic_ostream<E, T>& os, const shared_ptr<Y>& p);

  // [:en] [#util.smartptr.weak], class template [`weak_ptr]
  // [|:zh_CN] [#util.smartptr.weak]，类模板 [`weak_ptr]
  template<class T> class weak_ptr;

  // [:en] [#util.smartptr.weak.spec], [`weak_ptr] specialized algorithms
  // [|:zh_CN] [#util.smartptr.weak.spec]，[`weak_ptr] 的特化算法
  template<class T> void swap(weak_ptr<T>& a, weak_ptr<T>& b) noexcept;

  // [:en] [#util.smartptr.ownerless], class template [`owner_less]
  // [|:zh_CN] [#util.smartptr.ownerless]，类模板 [`owner_less]
  template<class T> class owner_less;

  // [:en] [#util.smartptr.enab], class template [`enable_shared_from_this]
  // [|:zh_CN] [#util.smartptr.enab]，类模板 [`enable_shared_from_this]
  template<class T> class enable_shared_from_this;

  // [:en] [#util.smartptr.shared.atomic], [`shared_ptr] atomic access
  // [|:zh_CN] [#util.smartptr.shared.atomic]，[`shared_ptr] 的原子性访问
  template<class T>
    bool atomic_is_lock_free(const shared_ptr<T>* p);

  template<class T>
    shared_ptr<T> atomic_load(const shared_ptr<T>* p);
  template<class T>
    shared_ptr<T> atomic_load_explicit(const shared_ptr<T>* p, memory_order mo);

  template<class T>
    void atomic_store(shared_ptr<T>* p, shared_ptr<T> r);
  template<class T>
    void atomic_store_explicit(shared_ptr<T>* p, shared_ptr<T> r, memory_order mo);

  template<class T>
    shared_ptr<T> atomic_exchange(shared_ptr<T>* p, shared_ptr<T> r);
  template<class T>
    shared_ptr<T> atomic_exchange_explicit(shared_ptr<T>* p, shared_ptr<T> r, memory_order mo);

  template<class T>
    bool atomic_compare_exchange_weak(
      shared_ptr<T>* p, shared_ptr<T>* v, shared_ptr<T> w);
  template<class T>
    bool atomic_compare_exchange_strong(
      shared_ptr<T>* p, shared_ptr<T>* v, shared_ptr<T> w);
  template<class T>
    bool atomic_compare_exchange_weak_explicit(
      shared_ptr<T>* p, shared_ptr<T>* v, shared_ptr<T> w,
      memory_order success, memory_order failure);
  template<class T>
    bool atomic_compare_exchange_strong_explicit(
      shared_ptr<T>* p, shared_ptr<T>* v, shared_ptr<T> w,
      memory_order success, memory_order failure);

  // [:en] [#util.smartptr.hash], hash support
  // [|:zh_CN] [#util.smartptr.hash]，散列支持
  template <class T> struct hash;
  template <class T, class D> struct hash<unique_ptr<T, D>>;
  template <class T> struct hash<shared_ptr<T>>;

  // [:en] [#allocator.uses.trait], [`uses_allocator]
  // [|:zh_CN] [#allocator.uses.trait]，[`uses_allocator]
  template <class T, class Alloc>
    inline constexpr bool uses_allocator_v = uses_allocator<T, Alloc>::value;
}
[codeblock:end]
