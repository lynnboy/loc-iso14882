[section#memory.syn
    [:en] Header [`<memory>] synopsis
    [:zh_CN] 头文件 [`<memory>] 纲要
]

[para]
[:en]
The header [`<memory>] defines several types and function templates that
describe properties of pointers and pointer-like types, manage memory for
containers and other template types, destroy objects, and construct multiple
objects in uninitialized memory buffers
([#pointer.traits][=-][#specialized.algorithms]).
[:zh_CN]
头文件 [`<memory>] 定义了用于描述指针和指针式类型，用于管理容器和其他模板类型的
内存，销毁对象，以及用于在未初始化内存缓冲区中构造多个对象的几个类型和函数模板
（[#pointer.traits]—[#specialized.algorithms]）。

[:en]
The header also defines the templates [`unique_ptr], [`shared_ptr], [`weak_ptr],
and various function templates that operate on objects of these types
([#smartptr]).
[:zh_CN]
这个头文件还定义了模板 [`unique_ptr]，[`shared_ptr]，[`weak_ptr]，以及操作这些
类型的对象的各种函数模板（[#smartptr]）。

[%@header memory]
[codeblock:synopsis [!:mark UnSpec] ]
namespace std {
  // [:en] [#pointer.traits], pointer traits \
     [:zh_CN] [#pointer.traits]，指针特征
  template<class Ptr> struct pointer_traits;
  template<class T> struct pointer_traits<T*>;

  // [:en] [#pointer.conversion], pointer conversion \
     [:zh_CN] [#pointer.conversion]，指针转换
  template<class T>
    constexpr T* to_address(T* p) noexcept;
  template<class Ptr>
    auto to_address(const Ptr& p) noexcept;

  // [:en] [#util.dynamic.safety], pointer safety \
     [:zh_CN] [#util.dynamic.safety]，指针安全性
  enum class pointer_safety { relaxed, preferred, strict };
  void declare_reachable(void* p);
  template<class T>
    T* undeclare_reachable(T* p);
  void declare_no_pointers(char* p, size_t n);
  void undeclare_no_pointers(char* p, size_t n);
  pointer_safety get_pointer_safety() noexcept;

  // [:en] [#ptr.align], pointer alignment \
     [:zh_CN] [#ptr.align]，指针对齐
  void* align(size_t alignment, size_t size, void*& ptr, size_t& space);
  template<size_t N, class T>
    [[nodiscard]] constexpr T* assume_aligned(T* ptr);

  // [:en] [#allocator.tag], allocator argument tag \
     [:zh_CN] [#allocator.tag]，分配器实参标签
  struct allocator_arg_t { explicit allocator_arg_t() = default; };
  inline constexpr allocator_arg_t allocator_arg{};

  // [:en] [#allocator.uses], [`uses_allocator] \
     [:zh_CN] [#allocator.uses]，[`uses_allocator]
  template<class T, class Alloc> struct uses_allocator;

  // [:en] [#allocator.uses.trait], [`uses_allocator] \
     [:zh_CN] [#allocator.uses.trait]，[`uses_allocator]
  template<class T, class Alloc>
    inline constexpr bool uses_allocator_v = uses_allocator<T, Alloc>::value;

  // [:en] [#allocator.uses.construction], uses-allocator construction \
     [:zh_CN] [#allocator.uses.construction]，带分配器构造
  template<class T, class Alloc, class... Args>
    constexpr auto uses_allocator_construction_args(const Alloc& alloc,
                                                    Args&&... args) noexcept -> [=SeeBelow];
  template<class T, class Alloc, class Tuple1, class Tuple2>
    constexpr auto uses_allocator_construction_args(const Alloc& alloc, piecewise_construct_t,
                                                    Tuple1&& x, Tuple2&& y)
                                                    noexcept ->  [=SeeBelow];
  template<class T, class Alloc>
    constexpr auto uses_allocator_construction_args(const Alloc& alloc) noexcept -> [=SeeBelow];
  template<class T, class Alloc, class U, class V>
    constexpr auto uses_allocator_construction_args(const Alloc& alloc,
                                                    U&& u, V&& v) noexcept -> [=SeeBelow];
  template<class T, class Alloc, class U, class V>
    constexpr auto uses_allocator_construction_args(const Alloc& alloc,
                                                    const pair<U,V>& pr) noexcept -> [=SeeBelow];
  template<class T, class Alloc, class U, class V>
    constexpr auto uses_allocator_construction_args(const Alloc& alloc,
                                                    pair<U,V>&& pr) noexcept -> [=SeeBelow];
  template<class T, class Alloc, class... Args>
    constexpr T make_obj_using_allocator(const Alloc& alloc, Args&&... args);
  template<class T, class Alloc, class... Args>
    constexpr T* uninitialized_construct_using_allocator(T* p, const Alloc& alloc,
                                                         Args&&... args);

  // [:en] [#allocator.traits], allocator traits \
     [:zh_CN] [#allocator.traits]，分配器特征
  template<class Alloc> struct allocator_traits;

  // [:en] [#default.allocator], the default allocator: \
     [:zh_CN] [#default.allocator]，默认分配器：
  template<class T> class allocator;
  template<class T, class U>
    constexpr bool operator==(const allocator<T>&, const allocator<U>&) noexcept;

  // [:en] [#specialized.algorithms], specialized algorithms: \
     [:zh_CN] [#specialized.algorithms]，特化的算法：
  // [:en] [#special.mem.concepts], special memory concepts \
     [:zh_CN] [#special.mem.concepts]，专门的内存概念
  template<class I>
    concept [*no-throw-input-iterator] = [=SeeBelow];    // [=Expos]
  template<class I>
    concept [*no-throw-forward-iterator] = [=SeeBelow];  // [=Expos]
  template<class S, class I>
    concept [*no-throw-sentinel] = [=SeeBelow];          // [=Expos]
  template<class R>
    concept [*no-throw-input-range] = [=SeeBelow];       // [=Expos]
  template<class R>
    concept [*no-throw-forward-range] = [=SeeBelow];     // [=Expos]

  template<class T>
    constexpr T* addressof(T& r) noexcept;
  template<class T>
    const T* addressof(const T&&) = delete;
  template<class ForwardIterator>
    void uninitialized_default_construct(ForwardIterator first, ForwardIterator last);
  template<class ExecutionPolicy, class ForwardIterator>
    void uninitialized_default_construct(ExecutionPolicy&& exec,        // [:en] see [#algorithms.parallel.overloads] \
                                                                           [:zh_CN] 参见 [#algorithms.parallel.overloads]
                                         ForwardIterator first, ForwardIterator last);
  template<class ForwardIterator, class Size>
    ForwardIterator uninitialized_default_construct_n(ForwardIterator first, Size n);
  template<class ExecutionPolicy, class ForwardIterator, class Size>
    ForwardIterator uninitialized_default_construct_n(ExecutionPolicy&& exec,   // [:en] see [#algorithms.parallel.overloads] \
                                                                                   [:zh_CN] 参见 [#algorithms.parallel.overloads]
                                                      ForwardIterator first, Size n);

  namespace ranges {
    template<[*no-throw-forward-iterator] I, [*no-throw-sentinel]<I> S>
      requires default_constructible<iter_value_t<I>>
        I uninitialized_default_construct(I first, S last);
    template<[*no-throw-forward-range] R>
      requires default_constructible<iter_value_t<iterator_t<R>>>
        safe_iterator_t<R> uninitialized_default_construct(R&& r);

    template<[*no-throw-forward-iterator] I>
      requires default_constructible<iter_value_t<I>>
        I uninitialized_default_construct_n(I first, iter_difference_t<I> n);
  }

  template<class ForwardIterator>
    void uninitialized_value_construct(ForwardIterator first, ForwardIterator last);
  template<class ExecutionPolicy, class ForwardIterator>
    void uninitialized_value_construct(ExecutionPolicy&& exec,  // [:en] see [#algorithms.parallel.overloads] \
                                                                   [:zh_CN] 参见 [#algorithms.parallel.overloads]
                                       ForwardIterator first, ForwardIterator last);
  template<class ForwardIterator, class Size>
    ForwardIterator uninitialized_value_construct_n(ForwardIterator first, Size n);
  template<class ExecutionPolicy, class ForwardIterator, class Size>
    ForwardIterator uninitialized_value_construct_n(ExecutionPolicy&& exec, // [:en] see [#algorithms.parallel.overloads] \
                                                                               [:zh_CN] 参见 [#algorithms.parallel.overloads]
                                                    ForwardIterator first, Size n);

  namespace ranges {
    template<[*no-throw-forward-iterator] I, [*no-throw-sentinel]<I> S>
      requires default_constructible<iter_value_t<I>>
        I uninitialized_value_construct(I first, S last);
    template<[*no-throw-forward-range] R>
      requires default_constructible<iter_value_t<iterator_t<R>>>
        safe_iterator_t<R> uninitialized_value_construct(R&& r);

    template<[*no-throw-forward-iterator] I>
      requires default_constructible<iter_value_t<I>>
        I uninitialized_value_construct_n(I first, iter_difference_t<I> n);
  }

  template<class InputIterator, class ForwardIterator>
    ForwardIterator uninitialized_copy(InputIterator first, InputIterator last,
                                       ForwardIterator result);
  template<class ExecutionPolicy, class InputIterator, class ForwardIterator>
    ForwardIterator uninitialized_copy(ExecutionPolicy&& exec,  // [:en] see [#algorithms.parallel.overloads] \
                                                                   [:zh_CN] 参见 [#algorithms.parallel.overloads]
                                       InputIterator first, InputIterator last,
                                       ForwardIterator result);
  template<class InputIterator, class Size, class ForwardIterator>
    ForwardIterator uninitialized_copy_n(InputIterator first, Size n,
                                         ForwardIterator result);
  template<class ExecutionPolicy, class InputIterator, class Size, class ForwardIterator>
    ForwardIterator uninitialized_copy_n(ExecutionPolicy&& exec,        // [:en] see [#algorithms.parallel.overloads] \
                                                                           [:zh_CN] 参见 [#algorithms.parallel.overloads]
                                         InputIterator first, Size n,
                                         ForwardIterator result);

  namespace ranges {
    template<class I, class O>
    using uninitialized_copy_result = copy_result<I, O>;
    template<input_iterator I, sentinel_for<I> S1,
             [*no-throw-forward-iterator] O, [*no-throw-sentinel]<O> S2>
      requires constructible_from<iter_value_t<O>, iter_reference_t<I>>
        uninitialized_copy_result<I, O>
          uninitialized_copy(I ifirst, S1 ilast, O ofirst, S2 olast);
    template<input_range IR, [*no-throw-forward-range] OR>
      requires constructible_from<range_value_t<OR>, range_reference_t<IR>>
        uninitialized_copy_result<safe_iterator_t<IR>, safe_iterator_t<OR>>
          uninitialized_copy(IR&& in_range, OR&& out_range);

    template<class I, class O>
      using uninitialized_copy_n_result = uninitialized_copy_result<I, O>;
    template<input_iterator I, [*no-throw-forward-iterator] O, [*no-throw-sentinel]<O> S>
      requires constructible_from<iter_value_t<O>, iter_reference_t<I>>
        uninitialized_copy_n_result<I, O>
          uninitialized_copy_n(I ifirst, iter_difference_t<I> n, O ofirst, S olast);
  }

  template<class InputIterator, class ForwardIterator>
    ForwardIterator uninitialized_move(InputIterator first, InputIterator last,
                                       ForwardIterator result);
  template<class ExecutionPolicy, class InputIterator, class ForwardIterator>
    ForwardIterator uninitialized_move(ExecutionPolicy&& exec,  // [:en] see [#algorithms.parallel.overloads] \
                                                                   [:zh_CN] 参见 [#algorithms.parallel.overloads]
                                       InputIterator first, InputIterator last,
                                       ForwardIterator result);
  template<class InputIterator, class Size, class ForwardIterator>
    pair<InputIterator, ForwardIterator> uninitialized_move_n(InputIterator first, Size n,
                                                              ForwardIterator result);
  template<class ExecutionPolicy, class InputIterator, class Size, class ForwardIterator>
    pair<InputIterator, ForwardIterator>
      uninitialized_move_n(ExecutionPolicy&& exec,              // [:en] see [#algorithms.parallel.overloads] \
                                                                   [:zh_CN] 参见 [#algorithms.parallel.overloads]
                           InputIterator first, Size n, ForwardIterator result);

  namespace ranges {
    template<class I, class O>
      using uninitialized_move_result = uninitialized_copy_result<I, O>;
    template<input_iterator I, sentinel_for<I> S1,
             [*no-throw-forward-iterator] O, [*no-throw-sentinel]<O> S2>
      requires constructible_from<iter_value_t<O>, iter_rvalue_reference_t<I>>
        uninitialized_move_result<I, O>
          uninitialized_move(I ifirst, S1 ilast, O ofirst, S2 olast);
    template<input_range IR, [*no-throw-forward-range] OR>
      requires constructible_from<range_value_t<OR>, range_rvalue_reference_t<IR>>
        uninitialized_move_result<safe_iterator_t<IR>, safe_iterator_t<OR>>
          uninitialized_move(IR&& in_range, OR&& out_range);

    template<class I, class O>
      using uninitialized_move_n_result = uninitialized_copy_result<I, O>;
    template<input_iterator I,
             [*no-throw-forward-iterator] O, [*no-throw-sentinel]<O> S>
      requires constructible_from<iter_value_t<O>, iter_rvalue_reference_t<I>>
        uninitialized_move_n_result<I, O>
          uninitialized_move_n(I ifirst, iter_difference_t<I> n, O ofirst, S olast);
  }

  template<class ForwardIterator, class T>
    void uninitialized_fill(ForwardIterator first, ForwardIterator last, const T& x);
  template<class ExecutionPolicy, class ForwardIterator, class T>
    void uninitialized_fill(ExecutionPolicy&& exec,             // [:en] see [#algorithms.parallel.overloads] \
                                                                   [:zh_CN] 参见 [#algorithms.parallel.overloads]
                            ForwardIterator first, ForwardIterator last, const T& x);
  template<class ForwardIterator, class Size, class T>
    ForwardIterator uninitialized_fill_n(ForwardIterator first, Size n, const T& x);
  template<class ExecutionPolicy, class ForwardIterator, class Size, class T>
    ForwardIterator uninitialized_fill_n(ExecutionPolicy&& exec,        // [:en] see [#algorithms.parallel.overloads] \
                                                                           [:zh_CN] 参见 [#algorithms.parallel.overloads]
                                         ForwardIterator first, Size n, const T& x);

  namespace ranges {
    template<[*no-throw-forward-iterator] I, [*no-throw-sentinel]<I> S, class T>
      requires constructible_from<iter_value_t<I>, const T&>
        I uninitialized_fill(I first, S last, const T& x);
    template<[*no-throw-forward-range] R, class T>
      requires constructible_from<range_value_t<R>, const T&>
        safe_iterator_t<R> uninitialized_fill(R&& r, const T& x);

    template<[*no-throw-forward-iterator] I, class T>
      requires constructible_from<iter_value_t<I>, const T&>
        I uninitialized_fill_n(I first, iter_difference_t<I> n, const T& x);
  }

  // [:en] [#specialized.construct], [`construct_at] \
     [:zh_CN] [#specialized.construct]，[`construct_at]
  template<class T, class... Args>
    constexpr T* construct_at(T* location, Args&&... args);

  namespace ranges {
    template<class T, class... Args>
      constexpr T* construct_at(T* location, Args&&... args);
  }

  // [:en] [#specialized.destroy], [`destroy] \
     [:zh_CN] [#specialized.destroy]，[`destroy]
  template<class T>
    constexpr void destroy_at(T* location);
  template<class ForwardIterator>
    constexpr void destroy(ForwardIterator first, ForwardIterator last);
  template<class ExecutionPolicy, class ForwardIterator>
    constexpr void destroy(ExecutionPolicy&& exec,              // [:en] see [#algorithms.parallel.overloads] \
                                                                   [:zh_CN] 参见 [#algorithms.parallel.overloads]
                           ForwardIterator first, ForwardIterator last);
  template<class ForwardIterator, class Size>
    constexpr ForwardIterator destroy_n(ForwardIterator first, Size n);
  template<class ExecutionPolicy, class ForwardIterator, class Size>
    constexpr ForwardIterator destroy_n(ExecutionPolicy&& exec, // [:en] see [#algorithms.parallel.overloads] \
                                                                   [:zh_CN] 参见 [#algorithms.parallel.overloads]
                                        ForwardIterator first, Size n);

  namespace ranges {
    template<destructible T>
      constexpr void destroy_at(T* location) noexcept;

    template<[*no-throw-input-iterator] I, [*no-throw-sentinel]<I> S>
      requires destructible<iter_value_t<I>>
        constexpr I destroy(I first, S last) noexcept;
    template<[*no-throw-input-range] R>
      requires destructible<range_value_t<R>>
        constexpr safe_iterator_t<R> destroy(R&& r) noexcept;

    template<[*no-throw-input-iterator] I>
      requires destructible<iter_value_t<I>>
        constexpr I destroy_n(I first, iter_difference_t<I> n) noexcept;
  }

  // [:en] [#unique.ptr], class template [`unique_ptr] \
     [:zh_CN] [#unique.ptr]，类模板 [`unique_ptr]
  template<class T> struct default_delete;
  template<class T> struct default_delete<T[]>;
  template<class T, class D = default_delete<T>> class unique_ptr;
  template<class T, class D> class unique_ptr<T[], D>;

  template<class T, class... Args>
    unique_ptr<T> make_unique(Args&&... args);                                  // [:en] [`T] is not array \
                                                                                   [:zh_CN] [`T] 不是数组
  template<class T>
    unique_ptr<T> make_unique(size_t n);                                        // [:en] [`T] is [`U`[`]] \
                                                                                   [:zh_CN] [`T] 为 [`U`[`]]
  template<class T, class... Args>
    [=UnSpec] make_unique(Args&&...) = delete;                                // [:en] [`T] is [`U`[N`]] \
                                                                                 [:zh_CN] [`T] 为 [`U`[N`]]

  template<class T>
    unique_ptr<T> make_unique_default_init();                                   // [:en] [`T] is not array \
                                                                                   [:zh_CN] [`T] 不是数组
  template<class T>
    unique_ptr<T> make_unique_default_init(size_t n);                           // [:en] [`T] is [`U`[`]] \
                                                                                   [:zh_CN] [`T] 为 [`U`[`]]
  template<class T, class... Args>
    [=UnSpec] make_unique_default_init(Args&&...) = delete;                   // [:en] [`T] is [`U`[N`]] \
                                                                                 [:zh_CN] [`T] 为 [`U`[N`]]

  template<class T, class D>
    void swap(unique_ptr<T, D>& x, unique_ptr<T, D>& y) noexcept;

  template<class T1, class D1, class T2, class D2>
    bool operator==(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
  template<class T1, class D1, class T2, class D2>
    bool operator<(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
  template<class T1, class D1, class T2, class D2>
    bool operator>(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
  template<class T1, class D1, class T2, class D2>
    bool operator<=(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
  template<class T1, class D1, class T2, class D2>
    bool operator>=(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
  template<class T1, class D1, class T2, class D2>
    requires three_way_comparable_with<typename unique_ptr<T1, D1>::pointer,
                                       typename unique_ptr<T2, D2>::pointer>
    compare_three_way_result_t<typename unique_ptr<T1, D1>::pointer,
                               typename unique_ptr<T2, D2>::pointer>
      operator<=>(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);

  template<class T, class D>
    bool operator==(const unique_ptr<T, D>& x, nullptr_t) noexcept;
  template<class T, class D>
    bool operator<(const unique_ptr<T, D>& x, nullptr_t);
  template<class T, class D>
    bool operator<(nullptr_t, const unique_ptr<T, D>& y);
  template<class T, class D>
    bool operator>(const unique_ptr<T, D>& x, nullptr_t);
  template<class T, class D>
    bool operator>(nullptr_t, const unique_ptr<T, D>& y);
  template<class T, class D>
    bool operator<=(const unique_ptr<T, D>& x, nullptr_t);
  template<class T, class D>
    bool operator<=(nullptr_t, const unique_ptr<T, D>& y);
  template<class T, class D>
    bool operator>=(const unique_ptr<T, D>& x, nullptr_t);
  template<class T, class D>
    bool operator>=(nullptr_t, const unique_ptr<T, D>& y);
  template<class T, class D>
    requires three_way_comparable_with<typename unique_ptr<T, D>::pointer, nullptr_t>
    compare_three_way_result_t<typename unique_ptr<T, D>::pointer, nullptr_t>
      operator<=>(const unique_ptr<T, D>& x, nullptr_t);

  // [:en] [#util.smartptr.weakptr], class [`bad_weak_ptr] \
     [:zh_CN] [#util.smartptr.weakptr]，类 [`bad_weak_ptr]
  class bad_weak_ptr;

  // [:en] [#util.smartptr.shared], class template [`shared_ptr] \
     [:zh_CN] [#util.smartptr.shared]，类模板 [`shared_ptr]
  template<class T> class shared_ptr;

  // [:en] [#util.smartptr.shared.create], [`shared_ptr] creation \
     [:zh_CN] [#util.smartptr.shared.create]，[`shared_ptr] 的创建
  template<class T, class... Args>
    shared_ptr<T> make_shared(Args&&... args);                                  // [:en] [`T] is not array \
                                                                                   [:zh_CN] [`T] 不是数组
  template<class T, class A, class... Args>
    shared_ptr<T> allocate_shared(const A& a, Args&&... args);                  // [:en] [`T] is not array \
                                                                                   [:zh_CN] [`T] 不是数组

  template<class T>
    shared_ptr<T> make_shared(size_t N);                                        // [:en] [`T] is [`U`[`]] \
                                                                                   [:zh_CN] [`T] 为 [`U`[`]]
  template<class T, class A>
    shared_ptr<T> allocate_shared(const A& a, size_t N);                        // [:en] [`T] is [`U`[`]] \
                                                                                   [:zh_CN] [`T] 为 [`U`[`]]

  template<class T>
    shared_ptr<T> make_shared();                                                // [:en] [`T] is [`U`[N`]] \
                                                                                   [:zh_CN] [`T] 为 [`U`[N`]]
  template<class T, class A>
    shared_ptr<T> allocate_shared(const A& a);                                  // [:en] [`T] is [`U`[N`]] \
                                                                                   [:zh_CN] [`T] 为 [`U`[N`]]

  template<class T>
    shared_ptr<T> make_shared(size_t N, const remove_extent_t<T>& u);           // [:en] [`T] is [`U`[`]] \
                                                                                   [:zh_CN] [`T] 为 [`U`[`]]
  template<class T, class A>
    shared_ptr<T> allocate_shared(const A& a, size_t N,
                                  const remove_extent_t<T>& u);                 // [:en] [`T] is [`U`[`]] \
                                                                                   [:zh_CN] [`T] 为 [`U`[`]]

  template<class T>
    shared_ptr<T> make_shared(const remove_extent_t<T>& u);                     // [:en] [`T] is [`U`[N`]] \
                                                                                   [:zh_CN] [`T] 为 [`U`[N`]]
  template<class T, class A>
    shared_ptr<T> allocate_shared(const A& a, const remove_extent_t<T>& u);     // [:en] [`T] is [`U`[N`]] \
                                                                                   [:zh_CN] [`T] 为 [`U`[N`]]

  template<class T>
    shared_ptr<T> make_shared_default_init();                                   // [:en] [`T] is not [`U`[`]] \
                                                                                   [:zh_CN] [`T] 不为 [`U`[`]]
  template<class T, class A>
    shared_ptr<T> allocate_shared_default_init(const A& a);                     // [:en] [`T] is not [`U`[`]] \
                                                                                   [:zh_CN] [`T] 不为 [`U`[`]]

  template<class T>
    shared_ptr<T> make_shared_default_init(size_t N);                           // [:en] [`T] is [`U`[`]] \
                                                                                   [:zh_CN] [`T] 为 [`U`[`]]
  template<class T, class A>
    shared_ptr<T> allocate_shared_default_init(const A& a, size_t N);           // [:en] [`T] is [`U`[`]] \
                                                                                   [:zh_CN] [`T] 为 [`U`[`]]

  // [:en] [#util.smartptr.shared.cmp], [`shared_ptr] comparisons \
     [:zh_CN] [#util.smartptr.shared.cmp]，[`shared_ptr] 的比较
  template<class T, class U>
    bool operator==(const shared_ptr<T>& a, const shared_ptr<U>& b) noexcept;
  template<class T, class U>
    strong_ordering operator<=>(const shared_ptr<T>& a, const shared_ptr<U>& b) noexcept;

  template<class T>
    bool operator==(const shared_ptr<T>& x, nullptr_t) noexcept;
  template<class T>
    strong_ordering operator<=>(const shared_ptr<T>& x, nullptr_t) noexcept;

  // [:en] [#util.smartptr.shared.spec], [`shared_ptr] specialized algorithms \
     [:zh_CN] [#util.smartptr.shared.spec]，[`shared_ptr] 的特化算法
  template<class T> void
    swap(shared_ptr<T>& a, shared_ptr<T>& b) noexcept;

  // [:en] [#util.smartptr.shared.cast], [`shared_ptr] casts \
     [:zh_CN] [#util.smartptr.shared.cast]，[`shared_ptr] 的强制转换
  template<class T, class U>
    shared_ptr<T> static_pointer_cast(const shared_ptr<U>& r) noexcept;
  template<class T, class U>
    shared_ptr<T> static_pointer_cast(shared_ptr<U>&& r) noexcept;
  template<class T, class U>
    shared_ptr<T> dynamic_pointer_cast(const shared_ptr<U>& r) noexcept;
  template<class T, class U>
    shared_ptr<T> dynamic_pointer_cast(shared_ptr<U>&& r) noexcept;
  template<class T, class U>
    shared_ptr<T> const_pointer_cast(const shared_ptr<U>& r) noexcept;
  template<class T, class U>
    shared_ptr<T> const_pointer_cast(shared_ptr<U>&& r) noexcept;
  template<class T, class U>
    shared_ptr<T> reinterpret_pointer_cast(const shared_ptr<U>& r) noexcept;
  template<class T, class U>
    shared_ptr<T> reinterpret_pointer_cast(shared_ptr<U>&& r) noexcept;

  // [:en] [#util.smartptr.getdeleter], [`shared_ptr] [`get_deleter] \
     [:zh_CN] [#util.smartptr.getdeleter]，[`shared_ptr] 的 [`get_deleter]
  template<class D, class T>
    D* get_deleter(const shared_ptr<T>& p) noexcept;

  // [:en] [#util.smartptr.shared.io], [`shared_ptr] I/O \
     [:zh_CN] [#util.smartptr.shared.io]，[`shared_ptr] 的 I/O
  template<class E, class T, class Y>
    basic_ostream<E, T>& operator<<(basic_ostream<E, T>& os, const shared_ptr<Y>& p);

  // [:en] [#util.smartptr.weak], class template [`weak_ptr] \
     [:zh_CN] [#util.smartptr.weak]，类模板 [`weak_ptr]
  template<class T> class weak_ptr;

  // [:en] [#util.smartptr.weak.spec], [`weak_ptr] specialized algorithms \
     [:zh_CN] [#util.smartptr.weak.spec]，[`weak_ptr] 的特化算法
  template<class T> void swap(weak_ptr<T>& a, weak_ptr<T>& b) noexcept;

  // [:en] [#util.smartptr.ownerless], class template [`owner_less] \
     [:zh_CN] [#util.smartptr.ownerless]，类模板 [`owner_less]
  template<class T> class owner_less;

  // [:en] [#util.smartptr.enab], class template [`enable_shared_from_this] \
     [:zh_CN] [#util.smartptr.enab]，类模板 [`enable_shared_from_this]
  template<class T> class enable_shared_from_this;

  // [:en] [#util.smartptr.hash], hash support \
     [:zh_CN] [#util.smartptr.hash]，散列支持
  template<class T> struct hash;
  template<class T, class D> struct hash<unique_ptr<T, D>>;
  template<class T> struct hash<shared_ptr<T>>;

  // [:en] [#util.smartptr.atomic], atomic smart pointers \
     [:zh_CN] [#util.smartptr.atomic]，原子性智能指针
  template<class T> struct atomic;
  template<class T> struct atomic<shared_ptr<T>>;
  template<class T> struct atomic<weak_ptr<T>>;
}
[codeblock:end]
