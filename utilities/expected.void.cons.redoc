[section#expected.void.cons
    [:en] Constructors
    [:zh_CN] 构造函数
]

[%@lib@ctor expected<void>]
[codeblock:declaration]
constexpr expected() noexcept;
[codeblock:end]

[div:description]
[para:ensures]
[:en] [`has_value()] is [`true].
[:zh_CN] [`has_value()] 为 [`true]。
[div:end]

[%@lib@ctor expected<void>]
[codeblock:declaration]
constexpr expected(const expected& rhs);
[codeblock:end]

[div:description]
[para:effects]
[:en] If [`rhs.has_value()] is [`false], direct-non-list-initializes [*unex]
with [`rhs.error()].
[:zh_CN] 如果 [`rhs.has_value()] 为 [`false]，则以 [`rhs.error()] 直接非列表
初始化 [*unex]。

[para:ensures]
[:en] [`rhs.has_value() == this->has_value()].
[:zh_CN] [`rhs.has_value() == this->has_value()]。

[para:throws]
[:en] Any exception thrown by the initialization of [*unex].
[:zh_CN] 由 [*unex] 的初始化所抛出的任何异常。

[para:remarks]
[:en] This constructor is defined as deleted unless
[`is_copy_constructible_v<E>] is [`true].
[:zh_CN] 本构造函数被定义为弃置的，除非 [`is_copy_constructible_v<E>] 为 [`true]。

[para]
[:en] This constructor is trivial if [`is_trivially_copy_constructible_v<E>] is
[`true].
[:zh_CN] 当 [`is_trivially_copy_constructible_v<E>] 为 [`true] 时，本构造函数是
平凡的。
[div:end]

[%@lib@ctor expected<void>]
[codeblock:declaration]
constexpr expected(expected&& rhs) noexcept(is_nothrow_move_constructible_v<E>);
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`is_move_constructible_v<E>] is [`true].
[:zh_CN] [`is_move_constructible_v<E>] 为 [`true]。

[para:effects]
[:en] If [`rhs.has_value()] is [`false], direct-non-list-initializes [*unex]
with [`std::move(rhs.error())].
[:zh_CN] 如果 [`rhs.has_value()] 为 [`false]，则以 [`std::move(rhs.error())]
直接非列表初始化 [*unex]。

[para:ensures]
[:en] [`rhs.has_value()] is unchanged; [`rhs.has_value() == this->has_value()]
is [`true].
[:zh_CN] [`rhs.has_value()] 未改变；[`rhs.has_value() == this->has_value()] 为
[`true]。

[para:throws]
[:en] Any exception thrown by the initialization of [*unex].
[:zh_CN] 由 [*unex] 的初始化所抛出的任何异常。

[para:remarks]
[:en] This constructor is trivial if [`is_trivially_move_constructible_v<E>] is
[`true].
[:zh_CN] 当 [`is_trivially_move_constructible_v<E>] 为 [`true] 时，本构造函数是
平凡的。
[div:end]

[%@lib@ctor expected<void>]
[codeblock:declaration]
template<class U, class G>
  constexpr explicit(!is_convertible_v<const G&, E>) expected(const expected<U, G>& rhs);
template<class U, class G>
  constexpr explicit(!is_convertible_v<G, E>) expected(expected<U, G>&& rhs);
[codeblock:end]

[div:description]
[para]
[:en] Let [`GF] be [`const G&] for the first overload and [`G] for the second
overload.
[:zh_CN] 令 [`GF] 对于第一个重载为 [`const G&]，而对于第二个重载为 [`G]。

[para:constraints]
[list]
[item]
[:en] [`is_void_v<U>] is [`true]; and
[:zh_CN] [`is_void_v<U>] 为 [`true]；且
[item]
[:en] [`is_constructible_v<E, GF>] is [`true]; and
[:zh_CN] [`is_constructible_v<E, GF>] 为 [`true]；且
[item]
[:en] [`is_constructible_v<unexpected<E>, expected<U, G>&>] is [`false]; and
[:zh_CN] [`is_constructible_v<unexpected<E>, expected<U, G>&>] 为 [`false]；且
[item]
[:en] [`is_constructible_v<unexpected<E>, expected<U, G>>] is [`false]; and
[:zh_CN] [`is_constructible_v<unexpected<E>, expected<U, G>>] 为 [`false]；且
[item]
[:en] [`is_constructible_v<unexpected<E>, const expected<U, G>&>] is [`false]; and
[:zh_CN] [`is_constructible_v<unexpected<E>, const expected<U, G>&>] 为 [`false]；且
[item]
[:en] [`is_constructible_v<unexpected<E>, const expected<U, G>>] is [`false]; and
[:zh_CN] [`is_constructible_v<unexpected<E>, const expected<U, G>>] 为 [`false]；且
[list:end]

[para:effects]
[:en] If [`rhs.has_value()] is [`false], direct-non-list-initializes [*unex]
with [`std::forward<UF>(rhs.error())].
[:zh_CN] 如果 [`rhs.has_value()] 为 [`false]，则以
[`std::forward<GF>(rhs.error())] 直接非列表初始化 [*unex]。

[para:ensures]
[:en] [`rhs.has_value()] is unchanged; [`rhs.has_value() == this->has_value()]
is [`true].
[:zh_CN] [`rhs.has_value()] 未改变；[`rhs.has_value() == this->has_value()] 为
[`true]。

[para:throws]
[:en] Any exception thrown by the initialization of [*unex].
[:zh_CN] 由 [*unex] 的初始化所抛出的任何异常。
[div:end]

[%@lib@ctor expected<void>]
[codeblock:declaration]
template<class G>
  constexpr explicit(!is_convertible_v<const G&, E>) expected(const unexpected<G>& e);
template<class G>
  constexpr explicit(!is_convertible_v<G, E>) expected(unexpected<G>&& e);
[codeblock:end]

[div:description]
[para]
[:en] Let [`GF] be [`const G&] for the first overload and [`G] for the second
overload.
[:zh_CN] 令 [`GF] 对于第一个重载为 [`const G&]，而对于第二个重载为 [`G]。

[para:constraints]
[:en] [`is_constructible_v<E, GF>] is [`true].
[:zh_CN] [`is_constructible_v<E, GF>] 为 [`true]。

[para:effects]
[:en] Direct-non-list-initializes [*unex] with [`std::forward<GF>(e.error())].
[:zh_CN] 以 [`std::forward<GF>(e.error())] 直接非列表初始化 [*unex]。

[para:ensures]
[:en] [`has_value()] is [`false].
[:zh_CN] [`has_value()] 为 [`false]。

[para:throws]
[:en] Any exception thrown by the initialization of [*unex].
[:zh_CN] 由 [*unex] 的初始化所抛出的任何异常。
[div:end]

[%@lib@ctor expected<void>]
[codeblock:declaration]
constexpr explicit expected(in_place_t) noexcept;
[codeblock:end]

[div:description]
[para:ensures]
[:en] [`has_value()] is [`true].
[:zh_CN] [`has_value()] 为 [`true]。
[div:end]

[%@lib@ctor expected<void>]
[codeblock:declaration]
template<class... Args>
  constexpr explicit expected(unexpect_t, Args&&... args);
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`is_constructible_v<E, Args...>] is [`true].
[:zh_CN] [`is_constructible_v<E, Args...>] 为 [`true]。

[para:effects]
[:en] Direct-non-list-initializes [*unex] with [`std::forward<Args>(args)...].
[:zh_CN] 以 [`std::forward<Args>(args)...] 直接非列表初始化 [*unex]。

[para:ensures]
[:en] [`has_value()] is [`false].
[:zh_CN] [`has_value()] 为 [`false]。

[para:throws]
[:en] Any exception thrown by the initialization of [*unex].
[:zh_CN] 由 [*unex] 的初始化所抛出的任何异常。
[div:end]

[%@lib@ctor expected<void>]
[codeblock:declaration]
template<class U, class... Args>
  constexpr explicit expected(unexpect_t, initializer_list<U> il, Args&&... args);
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`is_constructible_v<E, initializer_list<U>&, Args...>] is [`true].
[:zh_CN] [`is_constructible_v<E, initializer_list<U>&, Args...>] 为 [`true]。

[para:effects]
[:en] Direct-non-list-initializes [*unex] with [`il, std::forward<Args>(args)...].
[:zh_CN] 以 [`il, std::forward<Args>(args)...] 直接非列表初始化 [*unex]。

[para:ensures]
[:en] [`has_value()] is [`false].
[:zh_CN] [`has_value()] 为 [`false]。

[para:throws]
[:en] Any exception thrown by the initialization of [*unex].
[:zh_CN] 由 [*unex] 的初始化所抛出的任何异常。
[div:end]
