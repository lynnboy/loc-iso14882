[section#type.index.members
    [:en] [`type_index] members
    [:zh_CN] [`type_index] 的成员
]

[%@library type_index[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
type_index(const type_info& rhs) noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Constructs a [`type_index] object, the equivalent of [`target = &rhs].
[:zh_CN] 构造一个 [`type_index] 对象，等价于 [`target = &rhs]。
[exit:description]

[%@library operator==[!type_index]]
[%@library type_index[!operator==]]
[codeblock:declaration]
bool operator==(const type_index& rhs) const noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`*target == *rhs.target].
[:zh_CN] [`*target == *rhs.target]。
[exit:description]

[%@library operator<[!type_index]]
[%@library type_index[!operator<]]
[codeblock:declaration]
bool operator<(const type_index& rhs) const noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`target->before(*rhs.target)].
[:zh_CN] [`target->before(*rhs.target)]。
[exit:description]

[%@library operator>[!type_index]]
[%@library type_index[!operator>]]
[codeblock:declaration]
bool operator>(const type_index& rhs) const noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`rhs.target->before(*target)].
[:zh_CN] [`rhs.target->before(*target)]。
[exit:description]

[%@library operator<=[!type_index]]
[%@library type_index[!operator<=]]
[codeblock:declaration]
bool operator<=(const type_index& rhs) const noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`!rhs.target->before(*target)].
[:zh_CN] [`!rhs.target->before(*target)]。
[exit:description]

[%@library operator>=[!type_index]]
[%@library type_index[!operator>=]]
[codeblock:declaration]
bool operator>=(const type_index& rhs) const noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`!target->before(*rhs.target)].
[:zh_CN] [`!target->before(*rhs.target)]。
[exit:description]

[%@library operator<=>[!type_index]]
[%@library type_index[!operator<=>]]
[codeblock:declaration]
strong_ordering operator<=>(const type_index& rhs) const noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock:notation]
if (*target == *rhs.target) return strong_ordering::equal;
if (target->before(*rhs.target)) return strong_ordering::less;
return strong_ordering::greater;
[codeblock:end]
[exit:description]

[%@library hash_code[!type_index]]
[%@library type_index[!hash_code]]
[codeblock:declaration]
size_t hash_code() const noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`target->hash_code()].
[:zh_CN] [`target->hash_code()]。
[exit:description]

[%@library name[!type_index]]
[%@library type_index[!name]]
[codeblock:declaration]
const char* name() const noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`target->name()].
[:zh_CN] [`target->name()]。
[exit:description]
