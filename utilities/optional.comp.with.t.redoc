[section#optional.comp.with.t
    [:en] Comparison with [`T]
    [:zh_CN] 与 [`T] 之间的比较
]

[%@library operator==[!optional]]
[%@library optional[!operator==]]
[codeblock:declaration]
template<class T, class U> constexpr bool operator==(const optional<T>& x, const U& v);
[codeblock:end]

[begin:description]
[para:requires]
[:en] The expression [`*x == v] shall be well-formed and its result shall be
convertible to [`bool].
[:zh_CN] 表达式 [`*x == v] 应当良构，且其值应当可以转换为 [`bool]。

[begin:note]
[:en] [`T] need not be [^:oc EqualityComparable].
[:zh_CN] [`T] 不必是 [^:oc EqualityComparable]。
[end:note]

[para:effects]
[:en] Equivalent to: [`return bool(x) ? *x == v : false;]
[:zh_CN] 等价于：[`return bool(x) ? *x == v : false;]
[end:description]

[%@library operator==[!optional]]
[%@library optional[!operator==]]
[codeblock:declaration]
template<class T, class U> constexpr bool operator==(const U& v, const optional<T>& x);
[codeblock:end]

[begin:description]
[para:requires]
[:en] The expression [`v == *x] shall be well-formed and its result shall be
convertible to [`bool].
[:zh_CN] 表达式 [`v == *x] 应当良构，且其值应当可以转换为 [`bool]。

[para:effects]
[:en] Equivalent to: [`return bool(x) ? v == *x : false;]
[:zh_CN] 等价于：[`return bool(x) ? v == *x : false;]
[end:description]

[%@library operator!=[!optional]]
[%@library optional[!operator!=]]
[codeblock:declaration]
template<class T, class U> constexpr bool operator!=(const optional<T>& x, const U& v);
[codeblock:end]

[begin:description]
[para:requires]
[:en] The expression [`*x != v] shall be well-formed and its result shall be
convertible to [`bool].
[:zh_CN] 表达式 [`*x != v] 应当良构，且其值应当可以转换为 [`bool]。

[para:effects]
[:en] Equivalent to: [`return bool(x) ? *x != v : true;]
[:zh_CN] 等价于：[`return bool(x) ? *x != v : true;]
[end:description]

[%@library operator!=[!optional]]
[%@library optional[!operator!=]]
[codeblock:declaration]
template<class T, class U> constexpr bool operator!=(const U& v, const optional<T>& x);
[codeblock:end]

[begin:description]
[para:requires]
[:en] The expression [`v != *x] shall be well-formed and its result shall be
convertible to [`bool].
[:zh_CN] 表达式 [`v != *x] 应当良构，且其值应当可以转换为 [`bool]。

[para:effects]
[:en] Equivalent to: [`return bool(x) ? v != *x : true;]
[:zh_CN] 等价于：[`return bool(x) ? v != *x : true;]
[end:description]

[%@library operator<[!optional]]
[%@library optional[!operator<]]
[codeblock:declaration]
template<class T, class U> constexpr bool operator<(const optional<T>& x, const U& v);
[codeblock:end]

[begin:description]
[para:requires]
[:en] The expression [`*x < v] shall be well-formed and its result shall be
convertible to [`bool].
[:zh_CN] 表达式 [`*x < v] 应当良构，且其值应当可以转换为 [`bool]。

[para:effects]
[:en] Equivalent to: [`return bool(x) ? *x < v : true;]
[:zh_CN] 等价于：[`return bool(x) ? *x < v : true;]
[end:description]

[%@library operator<[!optional]]
[%@library optional[!operator<]]
[codeblock:declaration]
template<class T, class U> constexpr bool operator<(const U& v, const optional<T>& x);
[codeblock:end]

[begin:description]
[para:requires]
[:en] The expression [`v < *x] shall be well-formed and its result shall be
convertible to [`bool].
[:zh_CN] 表达式 [`v < *x] 应当良构，且其值应当可以转换为 [`bool]。

[para:effects]
[:en] Equivalent to: [`return bool(x) ? v < *x : false;]
[:zh_CN] 等价于：[`return bool(x) ? v < *x : false;]
[end:description]

[%@library operator>[!optional]]
[%@library optional[!operator>]]
[codeblock:declaration]
template<class T, class U> constexpr bool operator>(const optional<T>& x, const U& v);
[codeblock:end]

[begin:description]
[para:requires]
[:en] The expression [`*x > v] shall be well-formed and its result shall be
convertible to [`bool].
[:zh_CN] 表达式 [`*x > v] 应当良构，且其值应当可以转换为 [`bool]。

[para:effects]
[:en] Equivalent to: [`return bool(x) ? *x > v : false;]
[:zh_CN] 等价于：[`return bool(x) ? *x > v : false;]
[end:description]

[%@library operator>[!optional]]
[%@library optional[!operator>]]
[codeblock:declaration]
template<class T, class U> constexpr bool operator>(const U& v, const optional<T>& x);
[codeblock:end]

[begin:description]
[para:requires]
[:en] The expression [`v > *x] shall be well-formed and its result shall be
convertible to [`bool].
[:zh_CN] 表达式 [`v > *x] 应当良构，且其值应当可以转换为 [`bool]。

[para:effects]
[:en] Equivalent to: [`return bool(x) ? v > *x : true;]
[:zh_CN] 等价于：[`return bool(x) ? v > *x : true;]
[end:description]

[%@library operator<=[!optional]]
[%@library optional[!operator<=]]
[codeblock:declaration]
template<class T, class U> constexpr bool operator<=(const optional<T>& x, const U& v);
[codeblock:end]

[begin:description]
[para:requires]
[:en] The expression [`*x <= v] shall be well-formed and its result shall be
convertible to [`bool].
[:zh_CN] 表达式 [`*x <= v] 应当良构，且其值应当可以转换为 [`bool]。

[para:effects]
[:en] Equivalent to: [`return bool(x) ? *x <= v : true;]
[:zh_CN] 等价于：[`return bool(x) ? *x <= v : true;]
[end:description]

[%@library operator<=[!optional]]
[%@library optional[!operator<=]]
[codeblock:declaration]
template<class T, class U> constexpr bool operator<=(const U& v, const optional<T>& x);
[codeblock:end]

[begin:description]
[para:requires]
[:en] The expression [`v <= *x] shall be well-formed and its result shall be
convertible to [`bool].
[:zh_CN] 表达式 [`v <= *x] 应当良构，且其值应当可以转换为 [`bool]。

[para:effects]
[:en] Equivalent to: [`return bool(x) ? v <= *x : false;]
[:zh_CN] 等价于：[`return bool(x) ? v <= *x : false;]
[end:description]

[%@library operator>=[!optional]]
[%@library optional[!operator>=]]
[codeblock:declaration]
template<class T, class U> constexpr bool operator>=(const optional<T>& x, const U& v);
[codeblock:end]

[begin:description]
[para:requires]
[:en] The expression [`*x >= v] shall be well-formed and its result shall be
convertible to [`bool].
[:zh_CN] 表达式 [`*x >= v] 应当良构，且其值应当可以转换为 [`bool]。

[para:effects]
[:en] Equivalent to: [`return bool(x) ? *x >= v : false;]
[:zh_CN] 等价于：[`return bool(x) ? *x >= v : false;]
[end:description]

[%@library operator>=[!optional]]
[%@library optional[!operator>=]]
[codeblock:declaration]
template<class T, class U> constexpr bool operator>=(const U& v, const optional<T>& x);
[codeblock:end]

[begin:description]
[para:requires]
[:en] The expression [`v >= *x] shall be well-formed and its result shall be
convertible to [`bool].
[:zh_CN] 表达式 [`v >= *x] 应当良构，且其值应当可以转换为 [`bool]。

[para:effects]
[:en] Equivalent to: [`return bool(x) ? v >= *x : true;]
[:zh_CN] 等价于：[`return bool(x) ? v >= *x : true;]
[end:description]

[%@library operator<=>[!optional]]
[%@library optional[!operator<=>]]
[codeblock:declaration]
template<class T, three_way_comparable_with<T> U>
  constexpr compare_three_way_result_t<T,U>
    operator<=>(const optional<T>& x, const U& v);
[codeblock:end]

[begin:description]
[para:effects]
[:en] Equivalent to: [`return bool(x) ? *x <=> v : strong_ordering::less;]
[:zh_CN] 等价于：[`return bool(x) ? *x <=> v : strong_ordering::less;]
[end:description]
