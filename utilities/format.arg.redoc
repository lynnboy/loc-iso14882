[section#format.arg
    [:en] Class template [`basic_format_arg]
    [:zh_CN] 类模板 [`basic_format_arg]
]

[%@lib basic_format_arg]
[codeblock:synopsis]
namespace std {
  template<class Context>
  class basic_format_arg {
  public:
    class handle;

  private:
    using char_type = typename Context::char_type;                              // [=expos]

    variant<monostate, bool, char_type,
            int, unsigned int, long long int, unsigned long long int,
            float, double, long double,
            const char_type*, basic_string_view<char_type>,
            const void*, handle> value;                                         // [=expos]

    template<class T> explicit basic_format_arg(T& v) noexcept;                 // [=expos]

  public:
    basic_format_arg() noexcept;

    explicit operator bool() const noexcept;

    template<class Visitor>
      decltype(auto) visit(this basic_format_arg arg, Visitor&& vis);
    template<class R, class Visitor>
      R visit(this basic_format_arg arg, Visitor&& vis);
  };
}
[codeblock:end]

[para]
[:en] An instance of [`basic_format_arg] provides access to a formatting
argument for user-defined formatters.
[:zh_CN] [`basic_format_arg] 的实例为用户定义的格式化器提供对所格式化的实参的
访问能力。

[para]
[:en] The behavior of a program that adds specializations of [`basic_format_arg]
is undefined.
[:zh_CN] 添加 [`basic_format_arg] 的特化式的程序的行为未定义。

[%:begin@lib@ctor#basic.format.arg.ctor basic_format_arg]

[codeblock:declaration]
basic_format_arg() noexcept;
[codeblock:end]

[div:description]
[para:ensures]
[:en] [`!(*this)].
[:zh_CN] [`!(*this)]。
[div:end]

[codeblock:declaration]
template<class T> explicit basic_format_arg(T& v) noexcept;
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`T] satisfies [`[*:c formattable-with]<Context>].
[:zh_CN] [`T] 符合 [`[*:c formattable-with]<Context>]。

[para:expects]
[:en] If [`decay_t<T>] is [`char_type*] or [`const char_type*],
[`static_cast<const char_type*>(v)] points to a NTCTS ([#defns.ntcts]).
[:zh_CN] 如果 [`decay_t<T>] 为 [`char_type*] 或 [`const char_type*]，则
[`static_cast<const char_type*>(v)] 指向一个 NTCTS（[#defns.ntcts]）。

[para:effects]
[:en] Let [`TD] be [`remove_const_t<T>].
[:zh_CN] 令 [`TD] 为 [`remove_const_t<T>]。

[list]
[item]
[:en] If [`TD] is [`bool] or [`char_type], initializes [`value] with [`v];
[:zh_CN] 若 [`TD] 为 [`bool] 或 [`char_type]，则以 [`v] 初始化 [`value]；
[item]
[:en] otherwise, if [`TD] is [`char] and [`char_type] is [`:key wchar_t],
initializes [`value] with [`static_cast<wchar_t>(static_cast<unsigned char>(v))];
[:zh_CN] 否则，若 [`TD] 为 [`char] 并且 [`char_type] 为 [`:key wchar_t]，则以
[`static_cast<wchar_t>(static_cast<unsigned char>(v))] 初始化 [`value]；
[item]
[:en] otherwise, if [`TD] is a signed integer type ([#basic.fundamental]) and
[`sizeof(TD) <= sizeof(int)], initializes [`value] with [`static_cast<int>(v)];
[:zh_CN] 否则，若 [`TD] 为有符号整数类型（[#basic.fundamental]）并且
[`sizeof(TD) <= sizeof(int)]，则以 [`static_cast<int>(v)] 初始化 [`value]；
[item]
[:en] otherwise, if [`TD] is an unsigned integer type and
[`sizeof(TD) <= sizeof(unsigned int)], initializes [`value] with
[`static_cast<unsigned int>(v)];
[:zh_CN] 否则，若 [`TD] 为无符号整数类型并且 [`sizeof(TD) <= sizeof(unsigned int)]，
则以 [`static_cast<unsigned int>(v)] 初始化 [`value]；
[item]
[:en] otherwise, if [`TD] is a signed integer type and
[`sizeof(TD) <= sizeof(long long int)], initializes [`value] with
[`static_cast<long long int>(v)];
[:zh_CN] 否则，若 [`TD] 为有符号整数类型并且 [`sizeof(TD) <= sizeof(long long int)]，
则以 [`static_cast<long long int>(v)] 初始化 [`value]；
[item]
[:en] otherwise, if [`TD] is an unsigned integer type and
[`sizeof(TD) <= sizeof(unsigned long long int)], initializes [`value] with
[`static_cast<unsigned long long int>(v)];
[:zh_CN] 否则，若 [`TD] 为无符号整数类型并且
[`sizeof(TD) <= sizeof(unsigned long long int)]，则以
[`static_cast<unsigned long long int>(v)] 初始化 [`value]；
[item]
[:en] otherwise, if [`TD] is a standard floating-point type, initializes [`value]
with [`v];
[:zh_CN] 否则，若 [`TD] 为标准浮点类型，则以 [`v] 初始化 [`value]；
[item]
[:en] otherwise, if [`TD] is a specialization of [`basic_string_view] or
[`basic_string] and [`TD::value_type] is [`char_type], initializes [`value]
with [`basic_string_view<char_type>(v.data(), v.size())];
[:zh_CN] 否则，若 [`TD] 为 [`basic_string_view] 或 [`basic_string] 的特例且
[`TD::value_type] 为 [`char_type]，则以
[`basic_string_view<char_type>(v.data(), v.size())] 初始化 [`value]；
[item]
[:en] otherwise, if [`decay_t<TD>] is [`char_type*] or [`const char_type*],
initializes [`value] with [`static_cast<const char_type*>(v)];
[:zh_CN] 否则，若 [`decay_t<TD>] 为 [`char_type*] 或 [`const char_type*]，则以
[`static_cast<const char_type*>(v)] 初始化 [`value]；
[item]
[:en] otherwise, if [`is_void_v<remove_pointer_t<TD>>] is [`true] or
[`is_null_pointer_v<TD>] is [`true], initializes [`value] with
[`static_cast<const void*>(v)];
[:zh_CN] 否则，若 [`is_void_v<remove_pointer_t<TD>>] 为 [`true] 或
[`is_null_pointer_v<TD>] 为 [`true]，则以 [`static_cast<const void*>(v)] 初始化
[`value]；
[item]
[:en] otherwise, initializes [`value] with [`handle(v)].
[:zh_CN] 否则，以 [`handle(v)] 初始化 [`value]。
[list:end]

[begin:note]
[:en] Constructing [`basic_format_arg] from a pointer to a member is ill-formed
unless the user provides an enabled specialization of [`formatter] for that
pointer to member type.
[:zh_CN] 从指向某个成员的指针构造 [`basic_format_arg]，除非用户为这个成员指针
类型提供了一个被启用的 [`formatter] 特例，否则是非良构的。
[end:note]
[div:end]

[%:end#basic.format.arg.ctor]

[%@lib@member operator bool[!basic_format_arg]]
[codeblock:declaration]
explicit operator bool() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`!holds_alternative<monostate>(value)].
[:zh_CN] [`!holds_alternative<monostate>(value)]。
[div:end]

[%@lib@member visit[!basic_format_arg]]
[codeblock:declaration]
template<class Visitor>
  decltype(auto) visit(this basic_format_arg arg, Visitor&& vis);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return arg.value.visit(std::forward<Visitor>(vis));]
[:zh_CN] 等价于：[`return arg.value.visit(std::forward<Visitor>(vis));]
[div:end]

[%@lib@member visit[!basic_format_arg]]
[codeblock:declaration]
template<class R, class Visitor>
  R visit(this basic_format_arg arg, Visitor&& vis);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return arg.value.visit<R>(std::forward<Visitor>(vis));]
[:zh_CN] 等价于：[`return arg.value.visit<R>(std::forward<Visitor>(vis));]
[div:end]

[para]
[:en] The class [`handle] allows formatting an object of a user-defined type.
[:zh_CN] 类 [`handle] 允许对用户定义类型的对象进行格式化。

[%@library basic_format_arg::handle]
[%@lib@member handle[!basic_format_arg]]
[codeblock:synopsis]
namespace std {
  template<class Context>
  class basic_format_arg<Context>::handle {
    const void* ptr_;                                           // [=expos]
    void (*format_)(basic_format_parse_context<char_type>&,
                    Context&, const void*);                     // [=expos]

    template<class T> explicit handle(T& val) noexcept;         // [=expos]

    friend class basic_format_arg<Context>;                     // [=expos]

  public:
    void format(basic_format_parse_context<char_type>&, Context& ctx) const;
  };
}
[codeblock:end]

[%@lib@ctor basic_format_arg::handle]
[codeblock:declaration]
template<class T> explicit handle(T& val) noexcept;
[codeblock:end]

[div:description]
[para]
[:en] Let
[:zh_CN] 令
[list]
[item]
[:en] [`TD] be [`remove_const_t<T>],
[:zh_CN] [`TD] 为 [`remove_const_t<T>]，
[item]
[:en] [`TD] be [`const TD] if [`const TD] satisfies
[`[*:c formattable-with]<Context>] and [`TD] otherwise.
[:zh_CN@~] 如果 [`const TD] 符合 [`[*:c formattable-with]<Context>] 则 [`TD] 为
[`const TD]，否则为 [`TD]。
[list:end]

[para:mandates]
[:en] [`TQ] satisfies [`[*:c formattable-with]<Context>].
[:zh_CN] [`TQ] 符合 [`[*:c formattable-with]<Context>]。

[para:effects]
[:en] Initializes [`ptr_] with [`addressof(val)] and [`format_] with
[:zh_CN] 以 [`addressof(val)] 初始化 [`ptr_] 并将 [`format_] 初始化为
[codeblock]
[](basic_format_parse_context<char_type>& parse_ctx,
   Context& format_ctx, const void* ptr) {
  typename Context::template formatter_type<TD> f;
  parse_ctx.advance_to(f.parse(parse_ctx));
  format_ctx.advance_to(f.format(*const_cast<TQ*>(static_cast<const TD*>(ptr)),
                                 format_ctx));
}
[codeblock:end]
[div:end]

[%@lib@member format[!basic_format_arg::handle]]
[codeblock:declaration]
void format(basic_format_parse_context<char_type>& parse_ctx, Context& format_ctx) const;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`format_(parse_ctx, format_ctx, ptr_);]
[:zh_CN] 等价于：[`format_(parse_ctx, format_ctx, ptr_);]
[div:end]
