[section#expected.bad.void
    [:en] Class template specialization [`bad_expected_access<void>]
    [:zh_CN] 类模板特化式 [`bad_expected_access<void>]
]

[codeblock:synopsis]
namespace std {
  template<>
  class bad_expected_access<void> : public exception {
  protected:
    constexpr bad_expected_access() noexcept;
    constexpr bad_expected_access(const bad_expected_access&) noexcept;
    constexpr bad_expected_access(bad_expected_access&&) noexcept;
    constexpr bad_expected_access& operator=(const bad_expected_access&) noexcept;
    constexpr bad_expected_access& operator=(bad_expected_access&&) noexcept;
    constexpr ~bad_expected_access();

  public:
    constexpr const char* what() const noexcept override;
  };
}
[codeblock:end]

[%@lib@member what[!bad_expected_access]]
[codeblock:declaration]
constexpr const char* what() const noexcept override;
[codeblock:end]

[para:returns]
[:en] An [?impldef return value of [`bad_expected_access<void>::what]] [=ntbs], which
during constant evaluation is encoded with the ordinary literal encoding ([#lex.ccon]).
[:zh_CN] 一个[?impldef [`bad_expected_access<void>::what] 的返回值] [=ntbs]，
它在常量求值期间按照普通字面量编码（[#lex.ccon]）。
[div:end]
