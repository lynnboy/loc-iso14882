[section#optional.swap
    [:en] Swap
    [:zh_CN] swap
]

[%@lib@member swap[!optional]]
[codeblock:declaration]
void swap(optional& rhs) noexcept([[redoc("=seebelow")]]);
[codeblock:end]

[div:description]
[para:requires]
[:en] Lvalues of type [`T] shall be swappable and [`is_move_constructible_v<T>]
is [`true].
[:zh_CN] [`T] 类型的左值应当是可交换的，且 [`is_move_constructible_v<T>] 为
[`true]。

[para:effects]
[:en] See [#:tab#optional.swap].
[:zh_CN] 参见 [#:tab#optional.swap]。

[table:grid#optional.swap
    [:en] [`optional::swap(optional&)] effects
    [:zh_CN] [`optional::swap(optional&)] 的效果
]
[|@null ]
[|@head ]   [:en] [`*this] contains a value
            [:zh_CN] [`*this] 包含值
[|@head ]   [:en] [`*this] does not contain a value
            [:zh_CN] [`*this] 不包含值
[-]
[|@head ]   [:en] [`rhs] contains a value
            [:zh_CN] [`rhs] 包含值
[|] [:en] calls [`swap(*(*this), *rhs)]
    [:zh_CN] 调用 [`swap(*(*this), *rhs)]
[|] [:en] initializes the contained value of [`*this] as if
          direct-non-list-initializing an object of type [`T] with the
          expression [`std::move(*rhs)], followed by [`rhs.val->T::~T()];
          postcondition is that [`*this] contains a value and [`rhs] does not
          contain a value
    [:zh_CN] 如同以 [`std::move(*rhs)] 对 [`T] 类型的对象进行直接非列表初始化
             一样初始化 [`*this] 所包含的值，随后调用 [`rhs.val->T::~T()]；
             其后条件为 [`*this] 包含值且 [`rhs] 不包含值
[-]
[|@head ]   [:en] [`rhs] does not contain a value
            [:zh_CN] [`rhs] 不包含值
[|] [:en] initializes the contained value of [`rhs] as if
          direct-non-list-initializing an object of type [`T] with the
          expression [`std::move(*(*this))], followed by [`val->T::~T()];
          postcondition is that [`*this] does not contain a value and [`rhs]
          contains a value
    [:zh_CN] 如同以 [`std::move(*(*this))] 对 [`T] 类型的对象进行直接非列表
             初始化一样初始化 [`rhs] 所包含的值，随后调用 [`val->T::~T()]；
             其后条件为 [`*this] 不包含值且 [`rhs] 包含值
[|] [:en] no effect
    [:zh_CN] 没有效果
[-]
[table:end]

[para:throws]
[:en] Any exceptions thrown by the operations in the relevant part of
[#:tab#optional.swap].
[:zh_CN] 由 [#:tab#optional.swap] 中的相关部分中的各操作所抛出的任何异常。

[para:remarks]
[:en] The expression inside [`noexcept] is equivalent to:
[:zh_CN] [`noexcept] 中的表达式等价于：

[codeblock:notation]
is_nothrow_move_constructible_v<T> && is_nothrow_swappable_v<T>
[codeblock:end]

[:en] If any exception is thrown, the results of the expressions [`bool(*this)]
and [`bool(rhs)] remain unchanged.
[:zh_CN] 若抛出了任何异常，则不改变表达式 [`bool(*this)] 和 [`bool(rhs)] 的结果。

[:en] If an exception is thrown during the call to function [`swap], the state
of [`*val] and [`*rhs.val] is determined by the exception safety guarantee of
[`swap] for lvalues of [`T].
[:zh_CN] 若在调用函数 [`swap] 之中抛出了异常，则 [`*val] 和 [`*rhs.val] 的状态
依据对 [`T] 的左值的 [`swap] 的异常安全性保证所确定。

[:en] If an exception is thrown during the call to [`T][=']s move constructor,
the state of [`*val] and [`*rhs.val] is determined by the exception safety
guarantee of [`T][=']s move constructor.
[:zh_CN] 若在调用 [`T] 的移动构造函数中抛出了异常，则 [`*val] 和 [`*rhs.val] 的
状态依据 [`T] 的移动构造函数的异常安全性保证所确定。
[div:end]
