[section#time.syn
    [:en] Header [`<chrono>] synopsis
    [:zh_CN] 头文件 [`<chrono>] 纲要
]

[%[`<chrono>][@chrono]]
[%@library <chrono>[@chrono]]
[codeblock:synopsis [!:note] [!:mark UnSpec] ]
namespace std {
  namespace chrono {
    // [:en] [#time.duration], class template [`duration]
    // [|:zh_CN] [#time.duration]，类模板 [`duration]
    template <class Rep, class Period = ratio<1>> class duration;

    // [:en] [#time.point], class template [`time_point]
    // [|:zh_CN] [#time.point]，类模板 [`time_point]
    template <class Clock, class Duration = typename Clock::duration> class time_point;
  }

  // [:en] [#time.traits.specializations] [`common_type] specializations
  // [|:zh_CN] [#time.traits.specializations] [`common_type] 的特化式
  template <class Rep1, class Period1, class Rep2, class Period2>
    struct common_type<chrono::duration<Rep1, Period1>,
                       chrono::duration<Rep2, Period2>>;

  template <class Clock, class Duration1, class Duration2>
    struct common_type<chrono::time_point<Clock, Duration1>,
                       chrono::time_point<Clock, Duration2>>;

  namespace chrono {
    // [:en] [#time.traits], customization traits
    // [|:zh_CN] [#time.traits]，定制化特征
    template <class Rep> struct treat_as_floating_point;
    template <class Rep> struct duration_values;
    template <class Rep>
      inline constexpr bool treat_as_floating_point_v = treat_as_floating_point<Rep>::value;

    // [:en] [#time.duration.nonmember], [`duration] arithmetic
    // [|:zh_CN] [#time.duration.nonmember]，[`duration] 的算术
    template <class Rep1, class Period1, class Rep2, class Period2>
      constexpr common_type_t<duration<Rep1, Period1>, duration<Rep2, Period2>>
        operator+(const duration<Rep1, Period1>& lhs, const duration<Rep2, Period2>& rhs);
    template <class Rep1, class Period1, class Rep2, class Period2>
      constexpr common_type_t<duration<Rep1, Period1>, duration<Rep2, Period2>>
        operator-(const duration<Rep1, Period1>& lhs, const duration<Rep2, Period2>& rhs);
    template <class Rep1, class Period, class Rep2>
      constexpr duration<common_type_t<Rep1, Rep2>, Period>
        operator*(const duration<Rep1, Period>& d, const Rep2& s);
    template <class Rep1, class Rep2, class Period>
      constexpr duration<common_type_t<Rep1, Rep2>, Period>
        operator*(const Rep1& s, const duration<Rep2, Period>& d);
    template <class Rep1, class Period, class Rep2>
      constexpr duration<common_type_t<Rep1, Rep2>, Period>
        operator/(const duration<Rep1, Period>& d, const Rep2& s);
    template <class Rep1, class Period1, class Rep2, class Period2>
      constexpr common_type_t<Rep1, Rep2>
        operator/(const duration<Rep1, Period1>& lhs, const duration<Rep2, Period2>& rhs);
    template <class Rep1, class Period, class Rep2>
      constexpr duration<common_type_t<Rep1, Rep2>, Period>
        operator%(const duration<Rep1, Period>& d, const Rep2& s);
    template <class Rep1, class Period1, class Rep2, class Period2>
      constexpr common_type_t<duration<Rep1, Period1>, duration<Rep2, Period2>>
        operator%(const duration<Rep1, Period1>& lhs, const duration<Rep2, Period2>& rhs);

    // [:en] [#time.duration.comparisons], [`duration] comparisons
    // [|:zh_CN] [#time.duration.comparisons]，[`duration] 的比较
    template <class Rep1, class Period1, class Rep2, class Period2>
      constexpr bool operator==(const duration<Rep1, Period1>& lhs,
                                const duration<Rep2, Period2>& rhs);
    template <class Rep1, class Period1, class Rep2, class Period2>
      constexpr bool operator!=(const duration<Rep1, Period1>& lhs,
                                const duration<Rep2, Period2>& rhs);
    template <class Rep1, class Period1, class Rep2, class Period2>
      constexpr bool operator< (const duration<Rep1, Period1>& lhs,
                                const duration<Rep2, Period2>& rhs);
    template <class Rep1, class Period1, class Rep2, class Period2>
      constexpr bool operator<=(const duration<Rep1, Period1>& lhs,
                                const duration<Rep2, Period2>& rhs);
    template <class Rep1, class Period1, class Rep2, class Period2>
      constexpr bool operator> (const duration<Rep1, Period1>& lhs,
                                const duration<Rep2, Period2>& rhs);
    template <class Rep1, class Period1, class Rep2, class Period2>
      constexpr bool operator>=(const duration<Rep1, Period1>& lhs,
                                const duration<Rep2, Period2>& rhs);

    // [:en] [#time.duration.cast], [`duration_cast]
    // [|:zh_CN] [#time.duration.cast]，[`duration_cast]
    template <class ToDuration, class Rep, class Period>
      constexpr ToDuration duration_cast(const duration<Rep, Period>& d);
    template <class ToDuration, class Rep, class Period>
      constexpr ToDuration floor(const duration<Rep, Period>& d);
    template <class ToDuration, class Rep, class Period>
      constexpr ToDuration ceil(const duration<Rep, Period>& d);
    template <class ToDuration, class Rep, class Period>
      constexpr ToDuration round(const duration<Rep, Period>& d);

    // [:en] convenience typedefs
    // [|:zh_CN] 便利的 typedef
    using nanoseconds  = duration<[$:note [:en] signed integer type of at least 64 bits [:zh_CN] 至少 64 位的有符号整数类型], nano>;
    using microseconds = duration<[$:note [:en] signed integer type of at least 55 bits [:zh_CN] 至少 55 位的有符号整数类型], micro>;
    using milliseconds = duration<[$:note [:en] signed integer type of at least 45 bits [:zh_CN] 至少 45 位的有符号整数类型], milli>;
    using seconds      = duration<[$:note [:en] signed integer type of at least 35 bits [:zh_CN] 至少 35 位的有符号整数类型]>;
    using minutes      = duration<[$:note [:en] signed integer type of at least 29 bits [:zh_CN] 至少 29 位的有符号整数类型], ratio<  60>>;
    using hours        = duration<[$:note [:en] signed integer type of at least 23 bits [:zh_CN] 至少 23 位的有符号整数类型], ratio<3600>>;

    // [:en] [#time.point.nonmember], [`time_point] arithmetic
    // [|:zh_CN] [#time.point.nonmember]，[`time_point] 的算术
    template <class Clock, class Duration1, class Rep2, class Period2>
      constexpr time_point<Clock, common_type_t<Duration1, duration<Rep2, Period2>>>
        operator+(const time_point<Clock, Duration1>& lhs, const duration<Rep2, Period2>& rhs);
    template <class Rep1, class Period1, class Clock, class Duration2>
      constexpr time_point<Clock, common_type_t<duration<Rep1, Period1>, Duration2>>
        operator+(const duration<Rep1, Period1>& lhs, const time_point<Clock, Duration2>& rhs);
    template <class Clock, class Duration1, class Rep2, class Period2>
      constexpr time_point<Clock, common_type_t<Duration1, duration<Rep2, Period2>>>
        operator-(const time_point<Clock, Duration1>& lhs, const duration<Rep2, Period2>& rhs);
    template <class Clock, class Duration1, class Duration2>
      constexpr common_type_t<Duration1, Duration2>
        operator-(const time_point<Clock, Duration1>& lhs,
                  const time_point<Clock, Duration2>& rhs);

    // [:en] [#time.point.comparisons], [`time_point] comparisons
    // [|:zh_CN] [#time.point.comparisons]，[`time_point] 的比较
    template <class Clock, class Duration1, class Duration2>
       constexpr bool operator==(const time_point<Clock, Duration1>& lhs,
                                 const time_point<Clock, Duration2>& rhs);
    template <class Clock, class Duration1, class Duration2>
       constexpr bool operator!=(const time_point<Clock, Duration1>& lhs,
                                 const time_point<Clock, Duration2>& rhs);
    template <class Clock, class Duration1, class Duration2>
       constexpr bool operator< (const time_point<Clock, Duration1>& lhs,
                                 const time_point<Clock, Duration2>& rhs);
    template <class Clock, class Duration1, class Duration2>
       constexpr bool operator<=(const time_point<Clock, Duration1>& lhs,
                                 const time_point<Clock, Duration2>& rhs);
    template <class Clock, class Duration1, class Duration2>
       constexpr bool operator> (const time_point<Clock, Duration1>& lhs,
                                 const time_point<Clock, Duration2>& rhs);
    template <class Clock, class Duration1, class Duration2>
       constexpr bool operator>=(const time_point<Clock, Duration1>& lhs,
                                 const time_point<Clock, Duration2>& rhs);

    // [:en] [#time.point.cast], [`time_point_cast]
    // [|:zh_CN] [#time.point.cast]，[`time_point_cast]
    template <class ToDuration, class Clock, class Duration>
      constexpr time_point<Clock, ToDuration>
        time_point_cast(const time_point<Clock, Duration>& t);
    template <class ToDuration, class Clock, class Duration>
      constexpr time_point<Clock, ToDuration> floor(const time_point<Clock, Duration>& tp);
    template <class ToDuration, class Clock, class Duration>
      constexpr time_point<Clock, ToDuration> ceil(const time_point<Clock, Duration>& tp);
    template <class ToDuration, class Clock, class Duration>
      constexpr time_point<Clock, ToDuration> round(const time_point<Clock, Duration>& tp);

    // [:en] [#time.duration.alg], specialized algorithms
    // [|:zh_CN] [#time.duration.alg]，特化的算法
    template <class Rep, class Period>
      constexpr duration<Rep, Period> abs(duration<Rep, Period> d);

    // [:en] [#time.clock], clocks
    // [|:zh_CN] [#time.clock]，时钟
    class system_clock;
    class steady_clock;
    class high_resolution_clock;
  }

  inline namespace literals {
  inline namespace chrono_literals {
    // [:en] [#time.duration.literals], suffixes for duration literals
    // [|:zh_CN] [#time.duration.literals]，duration 字面量的后缀
    constexpr chrono::hours                                operator""h(unsigned long long);
    constexpr chrono::duration<[=UnSpec], ratio<3600,1>> operator""h(long double);
    constexpr chrono::minutes                              operator""min(unsigned long long);
    constexpr chrono::duration<[=UnSpec], ratio<60,1>>   operator""min(long double);
    constexpr chrono::seconds                              operator""s(unsigned long long);
    constexpr chrono::duration<[=UnSpec]>                operator""s(long double);
    constexpr chrono::milliseconds                         operator""ms(unsigned long long);
    constexpr chrono::duration<[=UnSpec], milli>         operator""ms(long double);
    constexpr chrono::microseconds                         operator""us(unsigned long long);
    constexpr chrono::duration<[=UnSpec], micro>         operator""us(long double);
    constexpr chrono::nanoseconds                          operator""ns(unsigned long long);
    constexpr chrono::duration<[=UnSpec], nano>          operator""ns(long double);
  }
  }

  namespace chrono {
    using namespace literals::chrono_literals;
  }
}
[codeblock:end]
