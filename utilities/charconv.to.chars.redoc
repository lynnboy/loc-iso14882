[section#charconv.to.chars
    [:en] Primitive numeric output conversion
    [:zh_CN] 基础数值输出转换
]

[para]
[:en]
All functions named [`to_chars] convert [`value] into a character string by
successively filling the range [=range(first,last)], where [=range(first,last)]
is required to be a valid range.
[:zh_CN]
所有名为 [`to_chars] 的函数都通过成功地向范围 [=range(first,last)] 中填充一个
字符串来转换 [`value]，其中 [=range(first,last)] 必须是有效的范围。

[:en]
If the member [`ec] of the return value is such that the value is equal to the
value of a value-initialized [`errc], the conversion was successful and the
member [`ptr] is the one-past-the-end pointer of the characters written.
[:zh_CN]
如果返回值的 [`ec] 成员的值等于值初始化的 [`errc] 的值，则该转换成功且成员
[`ptr] 指向所写入的字符的越过末尾指针。

[:en]
Otherwise, the member [`ec] has the value [`errc::value_too_large], the member
[`ptr] has the value [`last], and the contents of the range [=range(first,last)]
are unspecified.
[:zh_CN]
否则，成员 [`ec] 的值为 [`errc:value_too_large]，成员 [`ptr] 的值为 [`last]，而
范围 [=range(first,last)] 的内容并未指定。

[para]
[:en]
The functions that take a floating-point [`value] but not a [`precision]
parameter ensure that the string representation consists of the smallest number
of characters such that there is at least one digit before the radix point (if
present) and parsing the representation using the corresponding [`from_chars]
function recovers [`value] exactly.
[:zh_CN]
接受浮点 [`value] 但没有 [`precision] 形参的函数确保其字符串表示由最小数量的字符
构成并使得小数点（如果有）前至少有一个数字，并且使用对应的 [`from_chars] 函数
解析这个表示可以精确恢复 [`vavlue]。

[begin:note]
[:en]
This guarantee applies only if [`to_chars] and [`from_chars] are executed on the
same implementation.
[:zh_CN]
这项保证仅当 [`to_chars] 和 [`from_chars] 是在同一个实现中执行时才适用。
[end:note]

[:en]
If there are several such representations, the representation with the smallest
difference from the floating-point argument value is chosen, resolving any
remaining ties using rounding according to [`round_to_nearest] ([#round.style]).
[:zh_CN]
如果有多个这样的表示，则选择与浮点实参的值的差最小的表示，任何剩余的相等候选均
采用基于 [`round_to_nearest]（[#round.style]）的舍入方式选择。

[para]
[:en]
The functions taking a [`chars_format] parameter determine the conversion
specifier for [`printf] as follows:
[:zh_CN]
接受 [`chars_format] 形参的函数按如下方式确定 [`printf] 的转换说明符：

[:en]
The conversion specifier is [`f] if [`fmt] is [`chars_format::fixed], [`e] if
[`fmt] is [`chars_format::scientific], [`a] (without leading [`"0x"] in the
result) if [`fmt] is [`chars_format::hex], and [`g] if [`fmt] is
[`chars_format::general].
[:zh_CN]
当 [`fmt] 为 [`chars_format::fixed] 时转换说明符为 [`f]，当 [`fmt] 为
[`chars_format::scientific] 时为 [`e]，当 [`fmt] 为 [`chars_format::hex] 时为
[`a]（但结果中没有前导的 [`"0x"]），而当 [`fmt] 为 [`chars_format::general] 时
则为 [`g]。

[%@library to_chars]
[codeblock:declaration]
to_chars_result to_chars(char* first, char* last, [[redoc("=seebelow")]] value, int base = 10);
[codeblock:end]

[begin:description]
[para:requires]
[:en] [`base] has a value between 2 and 36 (inclusive).
[:zh_CN] [`base] 的值在 2 到 36 之内（含边界）。

[para:effects]
[:en] The value of [`value] is converted to a string of digits in the given base
(with no redundant leading zeroes).
[:zh_CN] [`value] 的值被转换为给定基数的数字的字符串（没有多余的前导零）。

[:en] Digits in the range 10..35 (inclusive) are represented as lowercase
characters [`a]..[`z].
[:zh_CN] 范围 10 到 35（韩边界）的数字以小写字母 [`a] 到 [`z] 表示。

[:en] If [`value] is less than zero, the representation starts with [`'-'].
[:zh_CN] 如果 [`value] 小于零，则以 [`'-'] 开始其表示。

[para:throws]
[:en] Nothing.
[:zh_CN] 无。

[para:remarks]
[:en] The implementation shall provide overloads for all signed and unsigned
integer types and [`char] as the type of the parameter [`value].
[:zh_CN] 实现应当为所有有符号和无符号整数类型和 [`char] 作为形参 [`value] 的类型
提供重载。
[end:description]

[%@library to_chars]
[codeblock:declaration]
to_chars_result to_chars(char* first, char* last, float value);
to_chars_result to_chars(char* first, char* last, double value);
to_chars_result to_chars(char* first, char* last, long double value);
[codeblock:end]

[begin:description]
[para:effects]
[:en] [`value] is converted to a string in the style of [`printf] in the [`"C"]
locale.
[:zh_CN] 将 [`value] 在 [`"C"] 地域中以 [`printf] 风格转换为字符串。

[:en] The conversion specifier is [`f] or [`e], chosen according to the
requirement for a shortest representation (see above); a tie is resolved in
favor of [`f].
[:zh_CN] 转换说明符为 [`f] 或 [`e]，根据最短表示的要求来选择（见上文）；候选均可
时选择 [`f]。

[para:throws]
[:en] Nothing.
[:zh_CN] 无。
[end:description]

[%@library to_chars]
[codeblock:declaration]
to_chars_result to_chars(char* first, char* last, float value, chars_format fmt);
to_chars_result to_chars(char* first, char* last, double value, chars_format fmt);
to_chars_result to_chars(char* first, char* last, long double value, chars_format fmt);
[codeblock:end]

[begin:description]
[para:requires]
[:en] [`fmt] has the value of one of the enumerators of [`chars_format].
[:zh_CN] [`fmt] 具有 [`chars_format] 的枚举符之一的值。

[para:effects]
[:en] [`value] is converted to a string in the style of [`printf] in the [`"C"]
locale.
[:zh_CN] 将 [`value] 在 [`"C"] 地域中以 [`printf] 风格转换为字符串。

[para:throws]
[:en] Nothing.
[:zh_CN] 无。
[end:description]

[%@library to_chars]
[codeblock:declaration]
to_chars_result to_chars(char* first, char* last, float value,
                         chars_format fmt, int precision);
to_chars_result to_chars(char* first, char* last, double value,
                         chars_format fmt, int precision);
to_chars_result to_chars(char* first, char* last, long double value,
                         chars_format fmt, int precision);
[codeblock:end]

[begin:description]
[para:requires]
[:en] [`fmt] has the value of one of the enumerators of [`chars_format].
[:zh_CN] [`fmt] 具有 [`chars_format] 的枚举符之一的值。

[para:effects]
[:en] [`value] is converted to a string in the style of [`printf] in the [`"C"]
locale with the given precision.
[:zh_CN] 将 [`value] 在 [`"C"] 地域中以 [`printf] 风格按给定精度转换为字符串。

[para:throws]
[:en] Nothing.
[:zh_CN] 无。
[end:description]

[para:xref@c] 7.21.6.1
