[section#template.bitset.general
	[:en] General
	[:zh_CN] 概述
]

[%@lib bitset]
[codeblock:synopsis]
namespace std {
  template<size_t N> class bitset {
  public:
    // [:en] bit reference \
       [:zh_CN] 位的引用
    class reference {
      friend class bitset;
      reference() noexcept;

    public:
      reference(const reference&) = default;
      ~reference();
      reference& operator=(bool x) noexcept;            // [:en] for [`b`[i`] = x;] \
                                                           [:zh_CN] 用于 [`b`[i`] = x;]
      reference& operator=(const reference&) noexcept;  // [:en] for [`b`[i`] = b`[j`];] \
                                                           [:zh_CN] 用于 [`b`[i`] = b`[j`];]
      bool operator~() const noexcept;                  // [:en] flips the bit \
                                                           [:zh_CN] 位的翻转
      operator bool() const noexcept;                   // [:en] for [`x = b`[i`];] \
                                                           [:zh_CN] 用于 [`x = b`[i`];]
      reference& flip() noexcept;                       // [:en] for [`b`[i`].flip();] \
                                                           [:zh_CN] 用于 [`b`[i`].flip();]
    };

    // [:en] [#bitset.cons], constructors \
       [:zh_CN] [#bitset.cons]，构造函数
    constexpr bitset() noexcept;
    constexpr bitset(unsigned long long val) noexcept;
    template<class charT, class traits, class Allocator>
      explicit bitset(
        const basic_string<charT,traits,Allocator>& str,
        typename basic_string<charT,traits,Allocator>::size_type pos = 0,
        typename basic_string<charT,traits,Allocator>::size_type n
          = basic_string<charT,traits,Allocator>::npos,
        charT zero = charT('0'),
        charT one = charT('1'));
    template<class charT>
      explicit bitset(
        const charT* str,
        typename basic_string<charT>::size_type n = basic_string<charT>::npos,
        charT zero = charT('0'),
        charT one = charT('1'));

    // [:en] [#bitset.members], bitset operations \
       [:zh_CN] [#bitset.members]，bitset 操作
    bitset<N>& operator&=(const bitset<N>& rhs) noexcept;
    bitset<N>& operator|=(const bitset<N>& rhs) noexcept;
    bitset<N>& operator^=(const bitset<N>& rhs) noexcept;
    bitset<N>& operator<<=(size_t pos) noexcept;
    bitset<N>& operator>>=(size_t pos) noexcept;
    bitset<N>& set() noexcept;
    bitset<N>& set(size_t pos, bool val = true);
    bitset<N>& reset() noexcept;
    bitset<N>& reset(size_t pos);
    bitset<N>  operator~() const noexcept;
    bitset<N>& flip() noexcept;
    bitset<N>& flip(size_t pos);

    // [:en] element access \
       [:zh_CN] 元素访问
    constexpr bool operator[](size_t pos) const;        // [:en] for [`b`[i`];] \
                                                           [:zh_CN] 用于 [`b`[i`];]
    reference operator[](size_t pos);                   // [:en] for [`b`[i`];] \
                                                           [:zh_CN] 用于 [`b`[i`];]

    unsigned long to_ulong() const;
    unsigned long long to_ullong() const;
    template<class charT = char,
             class traits = char_traits<charT>,
             class Allocator = allocator<charT> >
      basic_string<charT, traits, Allocator>
        to_string(charT zero = charT('0'), charT one = charT('1')) const;

    size_t count() const noexcept;
    constexpr size_t size() const noexcept;
    bool operator==(const bitset<N>& rhs) const noexcept;
    bool test(size_t pos) const;
    bool all() const noexcept;
    bool any() const noexcept;
    bool none() const noexcept;
    bitset<N> operator<<(size_t pos) const noexcept;
    bitset<N> operator>>(size_t pos) const noexcept;
  };

  // [:en] [#bitset.hash], hash support \
     [:zh_CN] [#bitset.hash]，散列支持
  template<class T> struct hash;
  template<size_t N> struct hash<bitset<N> >;
}
[codeblock:end]

[para]
[:en]
The class template [`bitset<N>] describes an object that can store a sequence
consisting of a fixed number of bits, [`N].
[:zh_CN]
类模板 [`bitset<N>] 描述一种能够保存由固定数量（[`N]）的位构成的序列的对象。

[para]
[:en]
Each bit represents either the value zero (reset) or one (set).
[:zh_CN]
每个位都表示为零值（复位）或者数值一（置位）。

[:en]
To [+:% toggle] a bit is to change the value zero to one, or the value one to
zero.
[:zh_CN]
[+:% 切换]一个位的意思是将数值零变为一，或者将一变为零。

[:en]
Each bit has a non-negative position [`pos].
[:zh_CN]
每个位都有一个非负位置 [`pos]。

[:en]
When converting between an object of class [`bitset<N>] and a value of some
integral type, bit position [`pos] corresponds to the [+:% bit value] [`1 << pos].
[:zh_CN]
当在类 [`bitset<N>] 的对象和某种整型类型的值之间进行转换时，位的位置 [`pos] 对应
于[+:% 位值] [`1 << pos]。

[:en]
The integral value corresponding to two or more bits is the sum of their bit
values.
[:zh_CN]
对应于两个或更多位的整型值，是其各个位值的和。

[para]
[:en]
The functions described in [#template.bitset] can report three kinds of errors,
each associated with a distinct exception:
[:zh_CN]
[#template.bitset] 中说明的函数，可能报告三种错误，每种都与一种独立的异常相关联：

[list]
[item]
[:en] an [+:% invalid-argument] error is associated with exceptions of type
[%@lib invalid_argument] [`invalid_argument] ([#invalid.argument]);
[:zh_CN] [+:% 无效实参]错误与[%@lib invalid_argument] [`invalid_argument]
类型（[#invalid.argument]）的异常相关联；
[item]
[:en] an [+:% out-of-range] error is associated with exceptions of type
[%@lib out_of_range] [`out_of_range] ([#out.of.range]);
[:zh_CN] [+:% 越界]错误与[%@lib out_of_range] [`out_of_range] 类型
（[#out.of.range]）的异常相关联；
[item]
[:en] an [+:% overflow] error is associated with exceptions of type
[%@lib overflow_error] [`overflow_error] ([#overflow.error]).
[:zh_CN] [+:% 上溢]错误与[%@lib overflow_error] [`overflow_error] 类型
（[#overflow.error]）的异常相关联。
[list:end]
