[section#utility.syn
	[:en] Header [`<utility>] synopsis
	[:zh_CN] 头文件 [`<utility>] 纲要
]

[para]
[:en]
The header [?libheader@def utility] contains some basic function and class
templates that are used throughout the rest of the library.
[:zh_CN]
头文件 [?libheader@def utility] 包含一些基本的函数和类模板，在程序库的余下部分中
有所使用。

[codeblock:synopsis]
// [:en] all freestanding \
[:zh_CN] 全自立式
#include <compare>              // [:en] see [#compare.syn] \
                                [:zh_CN] 参见 [#compare.syn]
#include <initializer_list>     // [:en] see [#initializer.list.syn] \
                                [:zh_CN] 参见 [#initializer.list.syn]

namespace std {
  // [:en] [#utility.swap], swap \
  [:zh_CN] [#utility.swap]，swap
  template<class T>
    constexpr void swap(T& a, T& b) noexcept([[redoc("[=seebelow]")]]);
  template<class T, size_t N>
    constexpr void swap(T (&a)[N], T (&b)[N]) noexcept(is_nothrow_swappable_v<T>);

  // [:en] [#utility.exchange], exchange \
  [:zh_CN] [#utility.exchange]，exchange
  template<class T, class U=T>
    constexpr T exchange(T& obj, U&& new_val) noexcept([[redoc("[=seebelow]")]]);

  // [:en] [#forward], forward/move \
  [:zh_CN] [#forward]，forward/move
  template<class T>
    constexpr T&& forward(remove_reference_t<T>& t) noexcept;
  template<class T>
    constexpr T&& forward(remove_reference_t<T>&& t) noexcept;
  template<class T, class U>
    constexpr auto forward_like(U&& x) noexcept -> [[redoc("[=seebelow]")]];
  template<class T>
    constexpr remove_reference_t<T>&& move(T&&) noexcept;
  template<class T>
    constexpr conditional_t<
        !is_nothrow_move_constructible_v<T> && is_copy_constructible_v<T>, const T&, T&&>
      move_if_noexcept(T& x) noexcept;

  // [:en] [#utility.as.const], [`as_const] \
  [:zh_CN] [#utility.as.const]，[`as_const]
  template<class T>
    constexpr add_const_t<T>& as_const(T& t) noexcept;
  template<class T>
    void as_const(const T&&) = delete;

  // [:en] [#declval], declval \
  [:zh_CN] [#declval]，declval
  template<class T>
    add_rvalue_reference_t<T> declval() noexcept;   // [:en] as unevaluated operand \
                                                    [:zh_CN] 作为免求值操作数

  // [:en] [#utility.intcmp], integer comparison functions \
  [:zh_CN] [#utility.intcmp]，整数比较函数
  template<class T, class U>
    constexpr bool cmp_equal(T t, U u) noexcept;
  template<class T, class U>
    constexpr bool cmp_not_equal(T t, U u) noexcept;

  template<class T, class U>
    constexpr bool cmp_less(T t, U u) noexcept;
  template<class T, class U>
    constexpr bool cmp_greater(T t, U u) noexcept;
  template<class T, class U>
    constexpr bool cmp_less_equal(T t, U u) noexcept;
  template<class T, class U>
    constexpr bool cmp_greater_equal(T t, U u) noexcept;

  template<class R, class T>
    constexpr bool in_range(T t) noexcept;

  // [:en] [#utility.underlying], [`to_underlying] \
  [:zh_CN] [#utility.underlying]，[`to_underlying]
  template<class T>
    constexpr underlying_type_t<T> to_underlying(T value) noexcept;

  // [:en] [#utility.unreachable], unreachable \
  [:zh_CN] [#utility.unreachable]，不可达
  [[noreturn]] void unreachable();

  // [:en] [#intseq], Compile-time integer sequences \
  [:zh_CN] [#intseq]，编译期整数序列
[[redoc("
[%@lib index_sequence]
[%@lib make_index_sequence]
[%@lib index_sequence_for]
")]]\
  template<class T, T...>
    struct integer_sequence;
  template<size_t... I>
    using index_sequence = integer_sequence<size_t, I...>;

  template<class T, T N>
    using make_integer_sequence = integer_sequence<T, [[redoc("[=seebelow]")]]>;
  template<size_t N>
    using make_index_sequence = make_integer_sequence<size_t, N>;

  template<class... T>
    using index_sequence_for = make_index_sequence<sizeof...(T)>;

  // [:en] [#pairs], class template [`pair] \
  [:zh_CN] [#pairs]，类模板 [`pair]
  template<class T1, class T2>
    struct pair;

  template<class T1, class T2, class U1, class U2,
           template<class> class TQual, template<class> class UQual>
    requires requires { typename pair<common_reference_t<TQual<T1>, UQual<U1>>,
                                      common_reference_t<TQual<T2>, UQual<U2>>>; }
  struct basic_common_reference<pair<T1, T2>, pair<U1, U2>, TQual, UQual> {
    using type = pair<common_reference_t<TQual<T1>, UQual<U1>>,
                      common_reference_t<TQual<T2>, UQual<U2>>>;
  };

  template<class T1, class T2, class U1, class U2>
    requires requires { typename pair<common_type_t<T1, U1>, common_type_t<T2, U2>>; }
  struct common_type<pair<T1, T2>, pair<U1, U2>> {
    using type = pair<common_type_t<T1, U1>, common_type_t<T2, U2>>;
  };

  // [:en] [#pairs.spec], pair specialized algorithms \
  [:zh_CN] [#pairs.spec]，对 pair 特化的算法
  template<class T1, class T2, class U1, class U2>
    constexpr bool operator==(const pair<T1, T2>&, const pair<U1, U2>&);
  template<class T1, class T2, class U1, class U2>
    constexpr common_comparison_category_t<[[redoc("^>")]]synth-three-way-result<T1, U1>,
                                           [[redoc("^>")]]synth-three-way-result<T2, U2>>
      operator<=>(const pair<T1, T2>&, const pair<U1, U2>&);

  template<class T1, class T2>
    constexpr void swap(pair<T1, T2>& x, pair<T1, T2>& y) noexcept(noexcept(x.swap(y)));
  template<class T1, class T2>
    constexpr void swap(const pair<T1, T2>& x, const pair<T1, T2>& y)
      noexcept(noexcept(x.swap(y)));

  template<class T1, class T2>
    constexpr [[redoc("[=seebelow]")]] make_pair(T1&&, T2&&);

  // [:en] [#pair.astuple], tuple-like access to pair \
  [:zh_CN] [#pair.astuple]，tuple 式的 pair 访问
  template<class T> struct tuple_size;
  template<size_t I, class T> struct tuple_element;

  template<class T1, class T2> struct tuple_size<pair<T1, T2>>;
  template<size_t I, class T1, class T2> struct tuple_element<I, pair<T1, T2>>;

  template<size_t I, class T1, class T2>
    constexpr tuple_element_t<I, pair<T1, T2>>& get(pair<T1, T2>&) noexcept;
  template<size_t I, class T1, class T2>
    constexpr tuple_element_t<I, pair<T1, T2>>&& get(pair<T1, T2>&&) noexcept;
  template<size_t I, class T1, class T2>
    constexpr const tuple_element_t<I, pair<T1, T2>>& get(const pair<T1, T2>&) noexcept;
  template<size_t I, class T1, class T2>
    constexpr const tuple_element_t<I, pair<T1, T2>>&& get(const pair<T1, T2>&&) noexcept;
  template<class T1, class T2>
    constexpr T1& get(pair<T1, T2>& p) noexcept;
  template<class T1, class T2>
    constexpr const T1& get(const pair<T1, T2>& p) noexcept;
  template<class T1, class T2>
    constexpr T1&& get(pair<T1, T2>&& p) noexcept;
  template<class T1, class T2>
    constexpr const T1&& get(const pair<T1, T2>&& p) noexcept;
  template<class T2, class T1>
    constexpr T2& get(pair<T1, T2>& p) noexcept;
  template<class T2, class T1>
    constexpr const T2& get(const pair<T1, T2>& p) noexcept;
  template<class T2, class T1>
    constexpr T2&& get(pair<T1, T2>&& p) noexcept;
  template<class T2, class T1>
    constexpr const T2&& get(const pair<T1, T2>&& p) noexcept;

  // [:en] [#pair.piecewise], pair piecewise construction \
  [:zh_CN] [#pair.piecewise]，pair 逐段构造
  struct piecewise_construct_t {
    explicit piecewise_construct_t() = default;
  };
  inline constexpr piecewise_construct_t piecewise_construct{};
  template<class... Types> class tuple;         // [:en] defined in [?libheader@ref tuple] \
                                                [:zh_CN] 定义于 [?libheader@ref tuple]

  // [:en] in-place construction \
  [:zh_CN] 就地构造
[[redoc("
[%@lib in_place_t]
[%@lib in_place]
[%@lib in_place_type_t]
[%@lib in_place_type]
[%@lib in_place_index_t]
[%@lib in_place_index]
")]]\
  struct in_place_t {
    explicit in_place_t() = default;
  };
  inline constexpr in_place_t in_place{};

  template<class T>
    struct in_place_type_t {
      explicit in_place_type_t() = default;
    };
  template<class T> constexpr in_place_type_t<T> in_place_type{};

  template<size_t I>
    struct in_place_index_t {
      explicit in_place_index_t() = default;
    };
  template<size_t I> constexpr in_place_index_t<I> in_place_index{};

  // [:en] [`nontype] argument tag \
  [:zh_CN] [`nontype] 实参标签
[[redoc("
[%@lib nontype_t]
[%@lib nontype]
")]]\
  template<auto V>
    struct nontype_t {
      explicit nontype_t() = default;
    };
  template<auto V> constexpr nontype_t<V> nontype{};
}
[codeblock:end]
