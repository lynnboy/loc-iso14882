[section#bitwise.operations.xor
    [:en] Class template [`bit_xor]
    [:zh_CN] 类模板 [`bit_xor]
]

[%@lib bit_xor]
[codeblock:declaration]
template<class T = void> struct bit_xor {
  constexpr T operator()(const T& x, const T& y) const;
};
[codeblock:end]

[%@lib@member operator()[!bit_xor]]
[codeblock:declaration]
constexpr T operator()(const T& x, const T& y) const;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`x ^ y].
[:zh_CN] [`x ^ y]。
[div:end]

[%@lib bit_xor<>]
[codeblock:declaration]
template<> struct bit_xor<void> {
  template<class T, class U> constexpr auto operator()(T&& t, U&& u) const
    -> decltype(std::forward<T>(t) ^ std::forward<U>(u));

  using is_transparent = [[redoc("[=unspec]")]];
};
[codeblock:end]

[%@lib@member operator()[!bit_xor<>]]
[codeblock:declaration]
template<class T, class U> constexpr auto operator()(T&& t, U&& u) const
    -> decltype(std::forward<T>(t) ^ std::forward<U>(u));
[codeblock:end]

[div:description]
[para:returns]
[:en] [`std::forward<T>(t) ^ std::forward<U>(u)].
[:zh_CN] [`std::forward<T>(t) ^ std::forward<U>(u)]。
[div:end]
