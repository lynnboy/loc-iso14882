[section#refwrap
    [:en] Class template [`reference_wrapper]
    [:zh_CN] 类模板 [`reference_wrapper]
]

[%@library reference_wrapper]
[:en]
[%function object[!reference_wrapper]]
[:zh_CN]
[%函数对象[!reference_wrapper]]
[codeblock:synopsis]
namespace std {
  template<class T> class reference_wrapper {
  public:
    // [:en] types \
       [:zh_CN] 类型
    using type = T;

    // [:en] construct/copy/destroy \
       [:zh_CN] 构造/复制/销毁
    template<class U>
      constexpr reference_wrapper(U&&) noexcept([[redoc("=seebelow")]]);
    constexpr reference_wrapper(const reference_wrapper& x) noexcept;

    // [:en] assignment \
       [:zh_CN] 赋值
    constexpr reference_wrapper& operator=(const reference_wrapper& x) noexcept;

    // [:en] access \
       [:zh_CN] 访问
    constexpr operator T& () const noexcept;
    constexpr T& get() const noexcept;

    // [:en] invocation \
       [:zh_CN] 调用
    template<class... ArgTypes>
      constexpr invoke_result_t<T&, ArgTypes...> operator() (ArgTypes&&...) const;
  };

  template<class T>
    reference_wrapper(T&) -> reference_wrapper<T>;
}
[codeblock:end]

[para]
[:en]
[`reference_wrapper<T>] is a [^:oc CopyConstructible] and
[^:oc CopyAssignable] wrapper around a reference to an object or function of
type [`T].
[:zh_CN]
[`reference_wrapper<T>] 是为 [^:oc CopyConstructible] 且为
[^:oc CopyAssignable] 的，对指代 [`T] 类型的对象或函数的引用进行包装的包装器。

[para]
[:en]
[`reference_wrapper<T>] is a trivially copyable type ([#basic.types]).
[:zh_CN]
[`reference_wrapper<T>] 是可平凡复制类型（[#basic.types]）。

[para]
[:en] The template parameter [`T] of [`reference_wrapper] may be an incomplete
type.
[:zh_CN] [`reference_wrapper] 的模板形参 [`T] 可以是不完整类型。

[include refwrap.const]

[include refwrap.assign]

[include refwrap.access]

[include refwrap.invoke]

[include refwrap.helpers]

[include refwrap.unwrapref]
