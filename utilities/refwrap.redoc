[section#refwrap
    [:en] Class template [`reference_wrapper]
    [:zh_CN] 类模板 [`reference_wrapper]
]

[%@library reference_wrapper]
[:en]
[%function object[!reference_wrapper]]
[:zh_CN]
[%函数对象[!reference_wrapper]]
[codeblock:synopsis [!:mark SeeBelow] ]
namespace std {
  template<class T> class reference_wrapper {
  public:
    // [:en] types
    // [|:zh_CN] 类型
    using type = T;

    // [:en] construct/copy/destroy
    // [|:zh_CN] 构造/复制/销毁
    template<class U>
      reference_wrapper(U&&) noexcept([=SeeBelow]);
    reference_wrapper(const reference_wrapper& x) noexcept;

    // [:en] assignment
    // [|:zh_CN] 赋值
    reference_wrapper& operator=(const reference_wrapper& x) noexcept;

    // [:en] access
    // [|:zh_CN] 访问
    operator T& () const noexcept;
    T& get() const noexcept;

    // [:en] invocation
    // [|:zh_CN] 调用
    template<class... ArgTypes>
      invoke_result_t<T&, ArgTypes...> operator() (ArgTypes&&...) const;
  };

  template<class T>
    reference_wrapper(T&) -> reference_wrapper<T>;
}
[codeblock:end]

[para]
[:en]
[`reference_wrapper<T>] is a [`CopyConstructible] and [`CopyAssignable] wrapper
around a reference to an object or function of type [`T].
[:zh_CN]
[`reference_wrapper<T>] 是为 [`CopyConstructible] 且为 [`CopyAssignable] 的，
对指代 [`T] 类型的对象或函数的引用进行包装的包装器。

[para]
[:en]
[`reference_wrapper<T>] shall be a trivially copyable type ([#basic.types]).
[:zh_CN]
[`reference_wrapper<T>] 不能是可平凡复制类型（[#basic.types]）。

[include refwrap.const]

[include refwrap.assign]

[include refwrap.access]

[include refwrap.invoke]

[include refwrap.helpers]
