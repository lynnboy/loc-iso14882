[section#unique.ptr.dltr.dflt1
    [`default_delete<T`[`]>]
]

[codeblock:synopsis]
namespace std {
  template<class T> struct default_delete<T[]> {
    constexpr default_delete() noexcept = default;
    template<class U> default_delete(const default_delete<U[]>&) noexcept;
    template<class U> void operator()(U* ptr) const;
  };
}
[codeblock:end]

[%@lib@ctor default_delete]
[codeblock:declaration]
template<class U> default_delete(const default_delete<U[]>& other) noexcept;
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`U(*)`[`]] is convertible to [`T(*)`[`]].
[:zh_CN] [`U(*)`[`]] 可以转换为 [`T(*)`[`]]。

[para:effects]
[:en] Constructs a [`default_delete] object from another [`default_delete<U`[`]>]
object.
[:zh_CN] 以另一个 [`default_delete<U`[`]>] 对象构造一个 [`default_delete] 对象。
[div:end]

[%@lib@member operator()[!default_delete]]
[codeblock:declaration]
template<class U> void operator()(U* ptr) const;
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`U(*)`[`]] is convertible to [`T(*)`[`]].
[:zh_CN] [`U(*)`[`]] 可以转换为 [`T(*)`[`]]。

[para:effects]
[:en] Calls [`delete`[`]] on [`ptr].
[:zh_CN] 对 [`ptr] 调用 [`delete`[`]]。

[para:remarks]
[:en] [`U] is a complete type.
[:zh_CN] [`U] 是完整类型。
[div:end]
