[section#variant.mod
    [:en] Modifiers
    [:zh_CN] 改动函数
]

[%@lib@member emplace[!variant]]
[codeblock:declaration]
template<class T, class... Args> T& emplace(Args&&... args);
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`is_constructible_v<T, Args...>] is [`true], and [`T] occurs exactly once
in [`Types].
[:zh_CN] [`is_constructible_v<T, Args...>] 为 [`true]，并且 [`T] 在 [`Types] 中
恰好出现一次。

[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return emplace<[[redoc("$>")]]I>(std::forward<Args>(args)...);
[codeblock:end]
[:en@~] where [$I] is the zero-based index of [`T] in [`Types].
[:zh_CN@~] 其中 [$I] 为 [`T] 在 [`Types] 中的基于零的索引。
[div:end]

[%@lib@member emplace[!variant]]
[codeblock:declaration]
template<class T, class U, class... Args> T& emplace(initializer_list<U> il, Args&&... args);
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`is_constructible_v<T, initializer_list<U>&, Args...>] is [`true], and
[`T] occurs exactly once in [`Types].
[:zh_CN] [`is_constructible_v<T, initializer_list<U>&, Args...>] 为 [`true]，
并且 [`T] 在 [`Types] 中恰好出现一次。

[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return emplace<[[redoc("$>")]]I>(il, std::forward<Args>(args)...);
[codeblock:end]
[:en@~] where [$I] is the zero-based index of [`T] in [`Types].
[:zh_CN@~] 其中 [$I] 为 [`T] 在 [`Types] 中的基于零的索引。
[div:end]

[%@lib@member emplace[!variant]]
[codeblock:declaration]
template<size_t I, class... Args>
  variant_alternative_t<I, variant<Types...>>& emplace(Args&&... args);
[codeblock:end]

[div:description]
[para:mandates]
[:en] [$[`I] < [`sizeof...(Types)]].
[:zh_CN] [$[`I] < [`sizeof...(Types)]]。

[para:constraints]
[:en] [`is_constructible_v<T[$_I], Args...>] is [`true].
[:zh_CN] [`is_constructible_v<T[$_I], Args...>] 为 [`true]。

[para:effects]
[:en] Destroys the currently contained value if [`valueless_by_exception()] is
[`false].
[:zh_CN] 若 [`valueless_by_exception()] 为 [`false] 则销毁当前所包含的值。

[:en] Then initializes the contained value as if direct-non-list-initializing
a value of type [$[`T]_I] with the arguments [`std::forward<Args>(args)...].
[:zh_CN] 然后如同以实参 [`std::forward<Args>(args)...] 直接非列表初始化一个
[$[`T]_I] 类型的值一样初始化其所包含的值。

[para:ensures]
[:en] [`index()] is [`I].
[:zh_CN] [`index()] 为 [`I]。

[para:returns]
[:en] A reference to the new contained value.
[:zh_CN] 指代新包含的值的引用。

[para:throws]
[:en] Any exception thrown during the initialization of the contained value.
[:zh_CN] 由所包含的值的初始化过程中所抛出的任何异常。

[para:remarks]
[:en] If an exception is thrown during the initialization of the contained value,
the [`variant] might not hold a value.
[:en] 如果在所包含的值的初始化过程中抛出了异常，则 [`variant] 可能不持有值。
[div:end]

[%@lib@member emplace[!variant]]
[codeblock:declaration]
template<size_t I, class U, class... Args>
  variant_alternative_t<I, variant<Types...>>& emplace(initializer_list<U> il, Args&&... args);
[codeblock:end]

[div:description]
[para:mandates]
[:en] [`I < sizeof...(Types)].
[:zh_CN] [`I < sizeof...(Types)]。

[para:constraints]
[:en] [`is_constructible_v<T[$_I], initializer_list<U>&, Args...>] is [`true].
[:zh_CN] [`is_constructible_v<T[$_I], initializer_list<U>&, Args...>] 为 [`true]。

[para:effects]
[:en] Destroys the currently contained value if [`valueless_by_exception()] is
[`false].
[:zh_CN] 若 [`valueless_by_exception()] 为 [`false] 则销毁当前所包含的值。

[:en] Then initializes the contained value as if direct-non-list-initializing
a value of type [$[`T]_I] with the arguments [`il, std::forward<Args>(args)...].
[:zh_CN] 然后如同以实参 [`il, std::forward<Args>(args)...] 直接非列表初始化一个
[$[`T]_I] 类型的值一样初始化其所包含的值。

[para:ensures]
[:en] [`index()] is [`I].
[:zh_CN] [`index()] 为 [`I]。

[para:returns]
[:en] A reference to the new contained value.
[:zh_CN] 指代新包含的值的引用。

[para:throws]
[:en] Any exception thrown during the initialization of the contained value.
[:zh_CN] 由所包含的值的初始化过程中所抛出的任何异常。

[para:remarks]
[:en] If an exception is thrown during the initialization of the contained value,
the [`variant] might not hold a value.
[:en] 如果在所包含的值的初始化过程中抛出了异常，则 [`variant] 可能不持有值。
[div:end]
