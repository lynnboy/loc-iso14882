[section#format.context
    [:en] Class template [`basic_format_context]
    [:zh_CN] 类模板 [`basic_format_context]
]

[%@lib basic_format_context]
[%@lib@member iterator[!basic_format_context]]
[%@lib@member char_type[!basic_format_context]]
[%@lib@member formatter_type[!basic_format_context]]
[codeblock:synopsis]
namespace std {
  template<class Out, class charT>
  class basic_format_context {
    basic_format_args<basic_format_context> args_;      // [=expos]
    Out out_;                                           // [=expos]

  public:
    using iterator = Out;
    using char_type = charT;
    template<class T> using formatter_type = formatter<T, charT>;

    basic_format_arg<basic_format_context> arg(size_t id) const;
    std::locale locale();

    iterator out();
    void advance_to(iterator it);
  };
}
[codeblock:end]

[para]
[:en] An instance of [`basic_format_context] holds the formatting state
consisting of the formatting arguments and the output iterator.
[:zh_CN] [`basic_format_context] 的实例中持有格式化状态，包括所格式化的各实参和
输出迭代器。

[para]
[:en] [`Out] shall model [`[`:c output_iterator]<const charT&>].
[:zh_CN] [`Out] 应当构成 [`[`:c output_iterator]<const charT&>]。

[para]
[%@lib format_context]
[:en] [`format_context] is an alias for a specialization of
[`basic_format_context] with an output iterator that appends to [`string], such
as [`back_insert_iterator<string>].
[:zh_CN] [`format_context] 是 [`basic_format_context] 的一个特例的别名，它带有
一个向 [`string] 进行追加的输出迭代器，如 [`back_insert_iterator<string>]。

[:][%@lib wformat_context]
[:en] Similarly, [`wformat_context] is an alias for a specialization of
[`basic_format_context] with an output iterator that appends to [`wstring].
[:zh_CN] 类似地，[`wformat_context] 是 [`basic_format_context] 的一个特例的别名，
它带有一个向 [`wstring] 进行追加的输出迭代器。

[para:recommended]
[:en] For a given type [`charT], implementations should provide a single
instantiation of [`basic_format_context] for appending to [`basic_string<charT>],
[`vector<charT>], or any other container with contiguous storage by wrapping
those in temporary objects with a uniform interface (such as a [`span<charT>])
and polymorphic reallocation.
[:zh_CN] 对于给定的 [`charT] 类型，实现应当提供单个 [`basic_format_context] 的
实例用于向 [`basic_string<charT>]，[`vector<charT>]，或具有连续存储的任何容器
进行追加，通过将他们包装到一个具有统一接口（如一个 [`span<charT>]）和多态的
再分配能力的临时对象中。

[%@lib@member arg[!basic_format_context]]
[codeblock:declaration]
basic_format_arg<basic_format_context> arg(size_t id) const;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`args_.get(id)].
[:zh_CN] [`args_.get(id)]。
[div:end]

[%@lib@member locale[!basic_format_context]]
[codeblock:declaration]
std::locale locale();
[codeblock:end]

[div:description]
[para:returns]
[:en] The locale passed to the formatting function if the latter takes one, and
[`std::locale()] otherwise.
[:zh_CN] 若格式化函数接受地域，则为传递给它的地域，否则为 [`std::locale()]。
[div:end]

[%@lib@member out[!basic_format_context]]
[codeblock:declaration]
iterator out();
[codeblock:end]

[div:description]
[para:returns]
[:en] [`out_].
[:zh_CN] [`out_]。
[div:end]

[%@lib@member advance_to[!basic_format_context]]
[codeblock:declaration]
void advance_to(iterator it);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`out_ = it;]
[:zh_CN] 等价于：[`out_ = it;]
[div:end]

[:en]
[%left-pad]
[:zh_CN]
[%左填充]
[begin:example]
[codeblock]
struct S { int value; };

template<> struct std::formatter<S> {
  size_t width_arg_id = 0;

  // [:en] Parses a width argument id in the format [`{] [~@fmt digit] [`}]. \
  [:zh_CN] 解析格式为 [`{] [~@fmt 数字] [`}] 的宽度实参标识
  constexpr auto parse(format_parse_context& ctx) {
    auto iter = ctx.begin();
    auto get_char = [&]() { return iter != ctx.end() ? *iter : 0; };
    if (get_char() != '{')
      return iter;
    ++iter;
    char c = get_char();
    if (!isdigit(c) || (++iter, get_char()) != '}')
      throw format_error("invalid format");
    width_arg_id = c - '0';
    ctx.check_arg_id(width_arg_id);
    return ++iter;
  }

  // [:en] Formats an [`S] with width given by the argument [`width_arg_id]. \
  [:zh_CN] 以实参 [`width_arg_id] 所给定的宽度对 [`S] 进行格式化。
  auto format(S s, format_context& ctx) {
    int width = visit_format_arg([](auto value) -> int {
      if constexpr (!is_integral_v<decltype(value)>)
        throw format_error("width is not integral");
      else if (value < 0 || value > numeric_limits<int>::max())
        throw format_error("invalid width");
      else
        return value;
      }, ctx.arg(width_arg_id));
    return format_to(ctx.out(), "{0:x<{1}}", s.value, width);
  }
};

std::string s = std::format("{0:{1}}", S{42}, 10);  // [:en] value of [`s] is [`"xxxxxxxx42"] \
                                                    [:zh_CN] [`s] 的值为 [`"xxxxxxxx42"]
[codeblock:end]
[end:example]
