[section#c.malloc
    [:en] C library memory allocation
    [:zh_CN] C 程序库的内存分配
]

[para]
[begin:note]
[:en]
The header [?libheader@ref cstdlib] declares the functions described in this
subclause.
[:zh_CN]
头文件 [?libheader@ref cstdlib] 声明了本子条款所说明的各个函数。
[end:note]

[%@lib aligned_alloc]
[%@lib calloc]
[%@lib malloc]
[%@lib realloc]
[codeblock:declaration]
void* aligned_alloc(size_t alignment, size_t size);
void* calloc(size_t nmemb, size_t size);
void* malloc(size_t size);
void* realloc(void* ptr, size_t size);
[codeblock:end]

[div:description]
[para:effects]
[:en]
These functions have the semantics specified in the C standard library.
[:zh_CN]
这些函数具有它们在 C 标准程序库中所指定的语义。

[para:remarks]
[:en]
These functions do not attempt to allocate storage by calling
[%@lib@member new[!operator]] [`::operator new()] ([#new.delete]).
[:zh_CN]
这些函数并不试图通过调用 [%@lib@member new[!operator]] [`::operator new()]
（[#new.delete]）来分配存储。

[para]
[:en]
Storage allocated directly with these functions is implicitly declared reachable
(see [#basic.stc.dynamic.safety]) on allocation, ceases to be declared reachable
on deallocation, and need not cease to be declared reachable as the result of an
[`undeclare_reachable()] call.
[:zh_CN]
直接通过这些函数所分配的存储，是当分配时就被隐含地声明为可达的
（参见 [#basic.stc.dynamic.safety]），并当回收时结束其声明为可达的状态，并且
不需要以一次 [`undeclare_reachable()] 调用来结束其声明为可达的状态。

[begin:note]
[:en]
This allows existing C libraries to remain unaffected by restrictions on
pointers that are not safely derived, at the expense of providing far fewer
garbage collection and leak detection options for [`malloc()]-allocated objects.
[:zh_CN]
这样就允许现存的 C 程序库保持不受针对非安全衍生指针的限制的影响，但其代价是为由
[`malloc()] 分配的对象所提供的垃圾收集和泄漏检测的选项要少得多。

[:en]
It also allows [`malloc()] to be implemented with a separate allocation arena,
bypassing the normal [`declare_reachable()] implementation.
[:zh_CN]
这还允许将 [`malloc()] 实现为一个独立的分配场所，以绕过通常的
[`declare_reachable()] 实现。
[end:note]

[para]
[:en]
These functions implicitly create objects ([#intro.object]) in the returned
region of storage and return a pointer to a suitable created object.
[:zh_CN]
这些函数在所返回的存储区域中隐式创建对象（[#intro.object]）并返回指向一个适当
创建的对象的指针。

[:en]
In the case of [`calloc] and [`realloc], the objects are created before the
storage is zeroed or copied, respectively.
[:zh_CN]
对于 [`calloc] 和 [`realloc] 的情况，这些对象是分别在存储被清零或复制之前创建的。
[div:end]

[%@lib free]
[codeblock:declaration]
void free(void* ptr);
[codeblock:end]

[div:description]
[para:effects]
[:en]
This function has the semantics specified in the C standard library.
[:zh_CN]
这个函数具有它在 C 标准程序库中所指定的语义。

[para:remarks]
[:en]
This function does not attempt to deallocate storage by calling
[%@lib@member delete[!operator]] [`::operator delete()].
[:zh_CN]
这个函数并不试图通过调用 [%@lib@member delete[!operator]] [`::operator delete()]
来回收存储。

[para:xref@c] 7.22.3
