[section#bitwise.operations.not
    [:en] Class template [`bit_not]
    [:zh_CN] 类模板 [`bit_not]
]

[%@library bit_not]
[codeblock:declaration]
template<class T = void> struct bit_not {
  constexpr T operator()(const T& x) const;
};
[codeblock:end]

[%@library operator()[!bit_not]]
[%@library bit_not[!operator()]]
[codeblock:declaration]
constexpr T operator()(const T& x) const;
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`~x].
[:zh_CN] [`~x]。
[end:description]

[%@library bit_not<>]
[codeblock:declaration]
template<> struct bit_not<void> {
  template<class T> constexpr auto operator()(T&& t) const
    -> decltype(~std::forward<T>(t));

  using is_transparent = [[redoc("=unspec")]];
};
[codeblock:end]

[%@library operator()[!bit_not<>]]
[%@library bit_not<>[!operator()]]
[codeblock:declaration]
template<class T> constexpr auto operator()(T&& t) const
    -> decltype(~std::forward<T>(t));
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`~std::forward<T>(t)].
[:zh_CN] [`~std::forward<T>(t)]。
[end:description]
