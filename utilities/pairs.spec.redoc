[section#pairs.spec
    [:en] Specialized algorithms
    [:zh_CN] 特化的算法
]

[%@lib@member operator<=>[!pair]]
[codeblock:declaration]
friend constexpr
  common_comparison_category_t<[[redoc("^>")]]synth-three-way-result<T1>, [[redoc("^>")]]synth-three-way-result<T2>>
    operator<=>(const pair& x, const pair& y);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
if (auto c = [[redoc("^>")]]synth-three-way(x.first, y.first); c != 0) return c;
return [[redoc("^>")]]synth-three-way(x.second, y.second);
[codeblock:end]
[div:end]

[%@lib@member swap[!pair]]
[codeblock:declaration]
template<class T1, class T2>
  constexpr void swap(pair<T1, T2>& x, pair<T1, T2>& y) noexcept(noexcept(x.swap(y)));
[codeblock:end]

[div:description]
[para:effects]
[:en] As if by [`x.swap(y)].
[:zh_CN] 如同执行 [`x.swap(y)]。

[para:remarks]
[:en] This function shall not participate in overload resolution unless
[`is_swappable_v<T1>] is [`true] and [`is_swappable_v<T2>] is [`true].
[:zh_CN] 除非 [`is_swappable_v<T1>] 为 [`true] 并且 [`is_swappable_v<T2>] 为
[`true]，否则这个函数不能参与重载决议。
[div:end]

[%@lib make_pair]
[codeblock:declaration]
template<class T1, class T2>
  constexpr pair<unwrap_ref_decay_t<T1>, unwrap_ref_decay_t<T2>> make_pair(T1&& x, T2&& y);
[codeblock:end]

[div:description]
[para:returns]
[codeblock]
pair<unwrap_ref_decay_t<T1>,
     unwrap_ref_decay_t<T2>>(std::forward<T1>(x), std::forward<T2>(y))
[codeblock:end]
[div:end]

[para]
[begin:example]
[:en]
In place of:
[:zh_CN]
当使用

[codeblock]
return pair<int, double>(5, 3.1415926);     // [:en] explicit types \
                                               [:zh_CN] 明确的类型
[codeblock:end]

[:en@~]
a [=Cpp] program may contain:
[:zh_CN@~]
时，[=Cpp] 程序可以代之以

[codeblock]
return make_pair(5, 3.1415926);             // [:en] types are deduced \
                                               [:zh_CN] 类型被推断
[codeblock:end]
[end:example]
