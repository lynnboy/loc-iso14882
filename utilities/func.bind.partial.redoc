[section#func.bind.partial
    [:en] Function template [`bind_front] and [`bind_back]
    [:zh_CN] 函数模板 [`bind_front] 和 [`bind_back]
]

[%@lib bind_front]
[%@lib bind_back]
[codeblock:declaration]
template<class F, class... Args>
  constexpr [[redoc("[=unspec]")]] bind_front(F&& f, Args&&... args);
template<class F, class... Args>
  constexpr [[redoc("[=unspec]")]] bind_back(F&& f, Args&&... args);
[codeblock:end]

[div:description]
[para]
[:en] Within this subclause:
[:zh_CN] 在本子条款中：
[list]
[item]
[:en@~] [`g] is a value of the result of a [`bind_front] or [`bind_back]
invocation,
[:zh_CN@~] [`g] 为一次 [`bind_front] 或 [`bind_back] 调用的结果值，
[item]
[:en@~] [`FD] is the type [`decay_t<F>],
[:zh_CN@~] [`FD] 为类型 [`decay_t<F>]，
[item]
[:en@~] [`fd] is the target object of [`g] ([#func.def]) of type [`FD]
direct-non-list-initialized with [`std::forward<F>(f)],
[:zh_CN@~] [`fd] 为 [`g] 的目标对象（[#func.def]），类型为 [`FD]，并以
[`std::forward<F>(f)] 进行直接非列表初始化，
[item]
[:en@~] [`BoundArgs] is a pack that denotes [`decay_t<Args>...],
[:zh_CN@~] [`BoundArgs] 为代表 [`decay_t<Args>...] 的包组，
[item]
[:en@~] [`bound_args] is a pack of bound argument entities of [`g] ([#func.def])
of types [`BoundArgs...], direct-non-list-initialized with
[`std::forward<Args>(args)...], respectively, and
[:zh_CN@~] [`bound_args] 为 [`g] 的绑定实参实体（[#func.def]）的包组，其类型为
[`BoundArgs...]，并分别以 [`std::forward<Args>(args)...] 进行直接非列表初始化，
并且
[item]
[:en@~] [`call_args] is an argument pack used in a function call expression
([#expr.call]) of [`g].
[:zh_CN@~] [`call_args] 为在 [`g] 的函数调用表达式（[#expr.call]）中所使用的
实参包组。
[list:end]

[para:mandates]
[codeblock]
is_constructible_v<FD, F> &&
is_move_constructible_v<FD> &&
(is_constructible_v<BoundArgs, Args> && ...) &&
(is_move_constructible_v<BoundArgs> && ...)
[codeblock:end]
[:en@~] is [`true].
[:zh_CN@~] 为 [`true]。

[para:expects]
[:en] [`FD] meets the [^:oc MoveConstructible] requirements.
[:zh_CN] [`FD] 满足 [^:oc MoveConstructible] 的规定。

[:en] For each [$[`T]_i] in [`BoundArgs], if [$[`T]_i] is an object type,
[$[`T]_i] meets the [^:oc MoveConstructible] requirements.
[:zh_CN] 对于 [`BoundArgs] 中的每个 [$[`T]_i]，如果 [$[`T]_i] 为对象类型，则
[$[`T]_i] 满足 [^:oc MoveConstructible] 的规定。

[para:returns]
[:en] A perfect forwarding call wrapper ([#term.perfect.forwarding.call.wrapper])
[`g] with call pattern:
[:zh_CN] 完美转发调用包装器（[#term.perfect.forwarding.call.wrapper]）[`g]，其
调用模式：
[list]
[item]
[:en@~] [`invoke(fd, bound_args..., call_args...)] for a [`bind_front]
invocation, or
[:zh_CN@~] 对于 [`bind_front] 调用为 [`invoke(fd, bound_args..., call_args...)]，
或者
[item]
[:en@~] [`invoke(fd, call_args..., bound_args...)] for a [`bind_back] invocation.
[:zh_CN@~] 对于 [`bind_back] 调用为 [`invoke(fd, call_args..., bound_args...)]。
[list:end]

[para:throws]
[:en] Any exception thrown by the initialization of the state entities of [`g]
([#func.def]).
[:zh_CN] 任何由 [`g] 的各状态实体（[#func.def]）的初始化所抛出的异常。
[div:end]

[%@lib bind_front]
[%@lib bind_back]
[codeblock:declaration]
template<auto f, class... Args>
  constexpr [[redoc("[=unspec]")]] bind_front(Args&&... args);
template<auto f, class... Args>
  constexpr [[redoc("[=unspec]")]] bind_back(Args&&... args);
[codeblock:end]

[div:description]
[para]
[:en] Within this subclause:
[:zh_CN] 在本子条款中：
[list]
[item]
[:en@~] [`F] is the type of [`f],
[:zh_CN@~] [`F] 为 [`f] 的类型，
[item]
[:en@~] [`g] is a value of the result of a [`bind_front] or [`bind_back]
invocation,
[:zh_CN@~] [`g] 为一次 [`bind_front] 或 [`bind_back] 调用的结果值，
[item]
[:en@~] [`BoundArgs] is a pack that denotes [`decay_t<Args>...],
[:zh_CN@~] [`BoundArgs] 为代表 [`decay_t<Args>...] 的包组，
[item]
[:en@~] [`bound_args] is a pack of bound argument entities of [`g] ([#func.def])
of types [`BoundArgs...], direct-non-list-initialized with
[`std::forward<Args>(args)...], respectively, and
[:zh_CN@~] [`bound_args] 为 [`g] 的绑定实参实体（[#func.def]）的包组，其类型为
[`BoundArgs...]，并分别以 [`std::forward<Args>(args)...] 进行直接非列表初始化，
并且
[item]
[:en@~] [`call_args] is an argument pack used in a function call expression
([#expr.call]) of [`g].
[:zh_CN@~] [`call_args] 为在 [`g] 的函数调用表达式（[#expr.call]）中所使用的
实参包组。
[list:end]

[para:mandates]
[list]
[item]
[:en@~] [`(is_constructible_v<BoundArgs, Args> && ...)] is [`true], and
[:zh_CN@~] [`(is_constructible_v<BoundArgs, Args> && ...)] 为 [`true]，并且
[item]
[:en@~] [`(is_move_constructible_v<BoundArgs> && ...)] is [`true], and
[:zh_CN@~] [`(is_move_constructible_v<BoundArgs> && ...)] 为 [`true]，并且
[item]
[:en@~] if [`is_pointer_v<F> || is_member_pointer_v<F>] is [`true], then
[`f != nullptr] is [`true].
[:zh_CN@~] 如果 [`is_pointer_v<F> || is_member_pointer_v<F>] 为 [`true]，则
[`f != nullptr] 为 [`true]。
[list:end]

[para:expects]
[:en] For each [$[`T]_i] in [`BoundArgs], [$[`T]_i] meets the
[^:oc MoveConstructible] requirements.
[:zh_CN] 对于 [`BoundArgs] 中的每个 [$[`T]_i]，[$[`T]_i] 满足
[^:oc MoveConstructible] 的规定。

[para:returns]
[:en] A perfect forwarding call wrapper ([#func.require]) [`g] that does not
have a target object, and has the call pattern:
[:zh_CN] 一个完美转发调用包装器（[#func.require]）[`g]，它没有目标对象，且其
调用模式：
[list]
[item]
[:en@~] [`invoke(f, bound_args..., call_args...)] for a [`bind_front] invocation,
or
[:zh_CN@~] 对于 [`bind_front] 调用为 [`invoke(f, bound_args..., call_args...)]，
或者
[item]
[:en@~] [`invoke(f, call_args..., bound_args...)] for a [`bind_back] invocation.
[:zh_CN@~] 对于 [`bind_back] 调用为 [`invoke(f, call_args..., bound_args...)]。
[list:end]

[para:throws]
[:en] Any exception thrown by the initialization of [`bound_args].
[:zh_CN] 任何由 [`bound_args] 的初始化所抛出的异常。
[div:end]
