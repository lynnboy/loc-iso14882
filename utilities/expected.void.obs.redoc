[section#expected.void.obs
    [:en] Observers
    [:zh_CN] 探察函数
]

[%@lib@member operator bool[!expected<void>]]
[%@lib@member has_value[!expected<void>]]
[codeblock:declaration]
constexpr explicit operator bool() const noexcept;
constexpr bool has_value() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [*has_val].
[:zh_CN] [*has_val]。
[div:end]

[%@lib@member operator*[!expected<void>]]
[codeblock:declaration]
constexpr void operator*() const noexcept;
[codeblock:end]

[div:description]
[para:hardexpects]
[:en] [`has_value()] is [`true].
[:zh_CN] [`has_value()] 为 [`true]。
[div:end]

[%@lib@member value[!expected<void>]]
[codeblock:declaration]
constexpr void value() const &;
[codeblock:end]

[div:description]
[para:mandates]
[:en] [`is_copy_constructible_v<E>] is [`true].
[:zh_CN] [`is_copy_constructible_v<E>] 为 [`true]。

[para:throws]
[:en] [`bad_expected_access(error())] if [`has_value()] is [`false].
[:zh_CN] 当 [`has_value()] 为 [`false] 时抛出 [`bad_expected_access(error())]。
[div:end]

[%@lib@member value[!expected<void>]]
[codeblock:declaration]
constexpr void value() &&;
[codeblock:end]

[div:description]
[para:mandates]
[:en] [`is_copy_constructible_v<E>] is [`true] and [`is_move_constructible_v<E>] is [`true].
[:zh_CN] [`is_copy_constructible_v<E>] 为 [`true] 且 [`is_move_constructible_v<E>] 为 [`true]。

[para:throws]
[:en] [`bad_expected_access(std::move(error()))] if [`has_value()] is [`false].
[:zh_CN] 当 [`has_value()] 为 [`false] 时抛出 [`bad_expected_access(std::move(error()))]。
[div:end]

[%@lib@member error[!expected<void>]]
[codeblock:declaration]
constexpr const E& error() const & noexcept;
constexpr E& error() & noexcept;
[codeblock:end]

[div:description]
[para:hardexpects]
[:en] [`has_value()] is [`false].
[:zh_CN] [`has_value()] 为 [`false]。

[para:returns]
[:en] [*unex].
[:zh_CN] [*unex]。
[div:end]

[%@lib@member error[!expected<void>]]
[codeblock:declaration]
constexpr E&& error() && noexcept;
constexpr const E&& error() const && noexcept;
[codeblock:end]

[div:description]
[para:hardexpects]
[:en] [`has_value()] is [`false].
[:zh_CN] [`has_value()] 为 [`false]。

[para:returns]
[:en] [`std::move([*unex])].
[:zh_CN] [`std::move([*unex])]。
[div:end]

[%@lib@member error_or[!expected<void>]]
[codeblock:declaration]
template<class G = E> constexpr E error_or(G&& e) const &;
[codeblock:end]

[div:description]
[para:mandates]
[:en] [`is_copy_constructible_v<E>] is [`true] and [`is_convertible_v<G, E>] is [`true].
[:zh_CN] [`is_copy_constructible_v<E>] 为 [`true] 并且 [`is_convertible_v<G, E>] 为 [`true]。

[para:returns]
[:en] [`std::forward<G>(e)] if [`has_value()] is [`true], [`error()] otherwise.
[:zh_CN] 当 [`has_value()] 为 [`true] 时返回 [`std::forward<G>(e)]，否则返回 [`error()]。
[div:end]

[%@lib@member error_or[!expected<void>]]
[codeblock:declaration]
template<class G = E> constexpr E error_or(G&& e) &&;
[codeblock:end]

[div:description]
[para:mandates]
[:en] [`is_move_constructible_v<E>] is [`true] and [`is_convertible_v<G, E>] is [`true].
[:zh_CN] [`is_move_constructible_v<E>] 为 [`true] 并且 [`is_convertible_v<G, E>] 为 [`true]。

[para:returns]
[:en] [`std::forward<G>(e)] if [`has_value()] is [`true], [`std::move(error())] otherwise.
[:zh_CN] 当 [`has_value()] 为 [`true] 时返回 [`std::forward<G>(e)]，否则返回 [`std::move(error())]。
[div:end]
