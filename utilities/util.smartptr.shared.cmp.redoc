[section#util.smartptr.shared.cmp
    [:en] Comparison
    [:zh_CN] 比较
]

[%@library shared_ptr[!operator==]]
[%@library operator==[!shared_ptr]]
[codeblock:declaration]
template<class T, class U>
  bool operator==(const shared_ptr<T>& a, const shared_ptr<U>& b) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`a.get() == b.get()].
[:zh_CN] [`a.get() == b.get()]。
[exit:description]

[%@library shared_ptr[!operator<]]
[%@library operator<[!shared_ptr]]
[codeblock:declaration]
template<class T, class U>
  bool operator<(const shared_ptr<T>& a, const shared_ptr<U>& b) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`less<V>()(a.get(), b.get())].
[:zh_CN] [`less<V>()(a.get(), b.get())]。

[para]
[enter:note]
[:en] Defining a comparison operator allows [`shared_ptr] objects to be used as
keys in associative containers.
[:zh_CN] 定义比较运算符允许 [`shared_ptr] 对象被用作关联容器中的键。
[exit:note]
[exit:description]

[%@library operator==[!shared_ptr]]
[%@library shared_ptr[!operator==]]
[codeblock:declaration]
template<class T>
  bool operator==(const shared_ptr<T>& a, nullptr_t) noexcept;
template<class T>
  bool operator==(nullptr_t, const shared_ptr<T>& a) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`!a].
[:zh_CN] [`!a]。
[exit:description]

[%@library operator!=[!shared_ptr]]
[%@library shared_ptr[!operator!=]]
[codeblock:declaration]
template<class T>
  bool operator!=(const shared_ptr<T>& a, nullptr_t) noexcept;
template<class T>
  bool operator!=(nullptr_t, const shared_ptr<T>& a) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`(bool)a].
[:zh_CN] [`(bool)a]。
[exit:description]

[%@library operator<[!shared_ptr]]
[%@library shared_ptr[!operator<]]
[codeblock:declaration]
template<class T>
  bool operator<(const shared_ptr<T>& a, nullptr_t) noexcept;
template<class T>
  bool operator<(nullptr_t, const shared_ptr<T>& a) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] The first function template returns
[:zh_CN] 第一个函数模板返回

[codeblock:notation]
less<shared_ptr<T>::element_type*>()(a.get(), nullptr)
[codeblock:end]

[:en] The second function template returns
[:zh_CN] 第二个函数模板返回

[codeblock:notation]
less<shared_ptr<T>::element_type*>()(nullptr, a.get())
[codeblock:end]
[exit:description]

[%@library operator>[!shared_ptr]]
[%@library shared_ptr[!operator>]]
[codeblock:declaration]
template<class T>
  bool operator>(const shared_ptr<T>& a, nullptr_t) noexcept;
template<class T>
  bool operator>(nullptr_t, const shared_ptr<T>& a) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] The first function template returns [`nullptr < a].
[:zh_CN] 第一个函数模板返回 [`nullptr < a]。

[:en] The second function template returns [`a < nullptr].
[:zh_CN] 第二个函数模板返回 [`a < nullptr]。
[exit:description]

[%@library operator<=[!shared_ptr]]
[%@library shared_ptr[!operator<=]]
[codeblock:declaration]
template<class T>
  bool operator<=(const shared_ptr<T>& a, nullptr_t) noexcept;
template<class T>
  bool operator<=(nullptr_t, const shared_ptr<T>& a) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] The first function template returns [`!(nullptr < a)].
[:zh_CN] 第一个函数模板返回 [`!(nullptr < a)]。

[:en] The second function template returns [`!(a < nullptr)].
[:zh_CN] 第二个函数模板返回 [`!(a < nullptr)]。
[exit:description]

[%@library operator>=[!shared_ptr]]
[%@library shared_ptr[!operator>=]]
[codeblock:declaration]
template<class T>
  bool operator>=(const shared_ptr<T>& a, nullptr_t) noexcept;
template<class T>
  bool operator>=(nullptr_t, const shared_ptr<T>& a) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] The first function template returns [`!(a < nullptr)].
[:zh_CN] 第一个函数模板返回 [`!(a < nullptr)]。

[:en] The second function template returns [`!(nullptr < a)].
[:zh_CN] 第二个函数模板返回 [`!(nullptr < a)]。
[exit:description]
