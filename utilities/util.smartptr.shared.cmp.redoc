[section#util.smartptr.shared.cmp
    [:en] Comparison
    [:zh_CN] 比较
]

[%@lib@member operator==[!shared_ptr]]
[codeblock:declaration]
template<class T, class U>
  bool operator==(const shared_ptr<T>& a, const shared_ptr<U>& b) noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`a.get() == b.get()].
[:zh_CN] [`a.get() == b.get()]。
[div:end]

[%@lib@member operator==[!shared_ptr]]
[codeblock:declaration]
template<class T>
  bool operator==(const shared_ptr<T>& a, nullptr_t) noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`!a].
[:zh_CN] [`!a]。
[div:end]

[%@lib@member operator<=>[!shared_ptr]]
[codeblock:declaration]
template<class T, class U>
  strong_ordering operator<=>(const shared_ptr<T>& a, const shared_ptr<U>& b) noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`compare_three_way()(a.get(), b.get())].
[:zh_CN] [`compare_three_way()(a.get(), b.get())]。

[para]
[begin:note]
[:en] Defining a comparison operator function allows [`shared_ptr] objects to be
used as keys in associative containers.
[:zh_CN] 定义比较运算符函数使得允许将 [`shared_ptr] 对象当做关联容器中的键使用。
[end:note]
[div:end]

[%@lib@member operator<=>[!shared_ptr]]
[codeblock:declaration]
template<class T>
  strong_ordering operator<=>(const shared_ptr<T>& a, nullptr_t) noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`compare_three_way()(a.get(), nullptr)].
[:zh_CN] [`compare_three_way()(a.get(), nullptr)]。
[div:end]
