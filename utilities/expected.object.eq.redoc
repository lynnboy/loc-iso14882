[section#expected.object.eq
    [:en] Equality operators
    [:zh_CN] 相等性运算符
]

[%@lib@member operator==[!expected]]
[codeblock:declaration]
template<class T2, class E2> requires (!is_void_v<T2>)
  friend constexpr bool operator==(const expected& x, const expected<T2, E2>& y);
[codeblock:end]

[div:description]
[para:mandates]
[:en] The expressions [`*x == *y] and [`x.error() == y.error()] are well-formed
and their results are convertible to [`bool].
[:zh_CN] 表达式 [`*x == *y] 和 [`x.error() == y.error()] 良构且它们的结果可以
转换为 [`bool]。

[para:returns]
[:en] If [`x.has_value()] does not equal [`y.has_value()], [`false]; otherwise
if [`x.has_value()] is [`true], [`*x == *y]; otherwise [`x.error() == y.error()].
[:zh_CN] 当 [`x.has_value()] 不等于 [`y.has_value()] 时返回 [`false]；否则当
[`x.has_value()] 为 [`true] 时返回 [`*x == *y]；否则返回 [`x.error() == y.error()]。
[div:end]

[%@lib@member operator==[!expected]]
[codeblock:declaration]
template<class T2> friend constexpr bool operator==(const expected& x, const T2& v);
[codeblock:end]

[div:description]
[para:mandates]
[:en] The expression [`*x == v] is well-formed and its result is convertible to
[`bool].
[:zh_CN] 表达式 [`*x == v] 良构且其结果可以转换为 [`bool]。

[begin:note]
[:en] [`T1] need not be [^:oc EqualityComparable].
[:zh_CN] [`T1] 不必为 [^:oc EqualityComparable]。
[end:note]

[para:returns]
[:en] [`x.has_value() && static_cast<bool>(*x == v)].
[:zh_CN] [`x.has_value() && static_cast<bool>(*x == v)]。
[div:end]

[%@lib@member operator==[!expected]]
[codeblock:declaration]
template<class E2> friend constexpr bool operator==(const expected& x, const unexpected<E2>& e);
[codeblock:end]

[div:description]
[para:mandates]
[:en] The expression [`x.error() == e.error()] is well-formed and its result is
convertible to [`bool].
[:zh_CN] 表达式 [`x.error() == e.error()] 良构且其结果可以转换为 [`bool]。

[para:returns]
[:en] [`!x.has_value() && static_cast<bool>(x.error() == e.error())].
[:zh_CN] [`!x.has_value() && static_cast<bool>(x.error() == e.error())]。
[div:end]
