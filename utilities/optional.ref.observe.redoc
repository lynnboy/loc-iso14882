[section#optional.ref.observe
    [:en] Observers
    [:zh_CN] 探察函数
]

[codeblock:declaration]
constexpr const T* operator->() const noexcept;
[codeblock:end]

[div:description]
[para:hardexpects]
[:en] [`has_value()] is [`true].
[:zh_CN] [`has_value()] 为 [`true]。

[para:returns]
[:en] [`val].
[:zh_CN] [`val]。
[div:end]

[codeblock:declaration]
constexpr const T& operator*() const noexcept;
[codeblock:end]

[div:description]
[para:hardexpects]
[:en] [`has_value()] is [`true].
[:zh_CN] [`has_value()] 为 [`true]。

[para:returns]
[:en] [`val].
[:zh_CN] [`val]。
[div:end]

[codeblock:declaration]
constexpr explicit operator bool() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`[*val] != nullptr].
[:zh_CN] [`[*val] != nullptr]。
[div:end]

[codeblock:declaration]
constexpr bool has_value() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`[*val] != nullptr].
[:zh_CN] [`[*val] != nullptr]。
[div:end]

[codeblock:declaration]
constexpr T& value() const;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return has_value() ? *[[redoc("*>")]]val : throw bad_optional_access();
[codeblock:end]
[div:end]

[codeblock:declaration]
template<class U = remove_cv_t<T>> constexpr remove_cv_t<T> value_or(U&& u) const;
[codeblock:end]

[div:description]
[para]
[:en] Let [`X] be [`remove_cv_t<T>].
[:zh_CN] 令 [`X] 为 [`remove_cv_t<T>]。

[para:mandates]
[:en] [`is_constructible_v<X, T&> && is_convertible_v<U, X>] is [`true].
[:zh_CN] [`is_constructible_v<X, T&> && is_convertible_v<U, X>] 为 [`true]。

[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return has_value() ? *[[redoc("*>")]]val : static_cast<X>(std::forward<U>(u));
[codeblock:end]
[div:end]
