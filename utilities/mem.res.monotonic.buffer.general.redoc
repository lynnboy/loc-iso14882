[section#mem.res.monotonic.buffer.general
    [:en] General
    [:zh_CN] 概述
]

[para]
[:en] A [`monotonic_buffer_resource] is a special-purpose memory resource
intended for very fast memory allocations in situations where memory is used to
build up a few objects and then is released all at once when the memory resource
object is destroyed.
[:zh_CN] [`monotonic_buffer_resource] 是一种特殊用途的内存资源，用于在需要内存来
构建少量对象并在内存资源对象被销毁时将它们一起释放掉的情况下，进行非常高效的内存
分配。

[%@lib monotonic_buffer_resource]
[codeblock:synopsis]
namespace std::pmr {
  class monotonic_buffer_resource : public memory_resource {
    memory_resource* upstream_rsrc;     // [=expos]
    void* current_buffer;               // [=expos]
    size_t next_buffer_size;            // [=expos]

  public:
    explicit monotonic_buffer_resource(memory_resource* upstream);
    monotonic_buffer_resource(size_t initial_size, memory_resource* upstream);
    monotonic_buffer_resource(void* buffer, size_t buffer_size, memory_resource* upstream);

    monotonic_buffer_resource()
      : monotonic_buffer_resource(get_default_resource()) {}
    explicit monotonic_buffer_resource(size_t initial_size)
      : monotonic_buffer_resource(initial_size, get_default_resource()) {}
    monotonic_buffer_resource(void* buffer, size_t buffer_size)
      : monotonic_buffer_resource(buffer, buffer_size, get_default_resource()) {}

    monotonic_buffer_resource(const monotonic_buffer_resource&) = delete;

    virtual ~monotonic_buffer_resource();

    monotonic_buffer_resource& operator=(const monotonic_buffer_resource&) = delete;

    void release();
    memory_resource* upstream_resource() const;

  protected:
    void* do_allocate(size_t bytes, size_t alignment) override;
    void do_deallocate(void* p, size_t bytes, size_t alignment) override;

    bool do_is_equal(const memory_resource& other) const noexcept override;
  };
}
[codeblock:end]
