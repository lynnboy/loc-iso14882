[section#tuple.helper
    [:en] Tuple helper classes
    [:zh_CN] 元组的辅助类
]

[%@lib@raw [`tuple_size][![:en]in general[:zh_CN]一般说明]]
[codeblock:declaration]
template<class T> struct tuple_size;
[codeblock:end]

[begin:description]
[para:remarks]
[:en] All specializations of [`tuple_size] shall meet the [*Cpp17UnaryTypeTrait]
requirements ([#meta.rqmts]) with a base characteristic of
[`integral_constant<size_t, N>] for some [`N].
[:zh_CN] [`tuple_size] 的所有特例都应当满足 [*Cpp17UnaryTypeTrait] 规定
（[#meta.rqmts]），并以对于某个 [`N] 的 [`integral_constant<size_t, N>] 为其
基础特征。
[end:description]

[%@library tuple_size]
[codeblock:declaration]
template<class... Types>
  struct tuple_size<tuple<Types...>> : public integral_constant<size_t, sizeof...(Types)> { };
[codeblock:end]

[%@library tuple_element]
[codeblock:declaration]
template<size_t I, class... Types>
  struct tuple_element<I, tuple<Types...>> {
    using type = TI;
  };
[codeblock:end]

[begin:description]
[para:requires]
[:en] [`I < sizeof...(Types)].
[:zh_CN] [`I < sizeof...(Types)]。

[:en] The program is ill-formed if [`I] is out of bounds.
[:zh_CN] 若 [`I] 超出范围则程序非良构。

[para:ctype]
[:en] [`TI] is the type of the [`I][^th] element of [`Types], where indexing is
zero-based.
[:zh_CN] [`TI] 为 [`Types] 的第 [`I] 个元素的类型，其中的索引基于零。
[end:description]

[%@library tuple_size]
[codeblock:declaration]
template<class T> struct tuple_size<const T>;
template<class T> struct tuple_size<volatile T>;
template<class T> struct tuple_size<const volatile T>;
[codeblock:end]

[begin:description]
[para]
[:en] Let [`TS] denote [`tuple_size<T>] of the [$cv]-unqualified type [`T].
[:zh_CN] 令 [`TS] 代表 [$cv] 未限定类型 [`T] 的 [`tuple_size<T>]。

[:en] If the expression [`TS::value] is well-formed when treated as an
unevaluated operand, then each of the three templates shall meet the
[*Cpp17UnaryTypeTrait] requirements ([#meta.rqmts]) with a base characteristic
of
[:zh_CN] 若表达式 [`TS::value] 被当成免求值操作数时是良构的，则三个模板中的每个
都满足 [*Cpp17UnaryTypeTrait] 规定（[#meta.rqmts]），其基础特征为

[codeblock:notation]
integral_constant<size_t, TS::value>
[codeblock:end]

[:en] Otherwise, they shall have no member [`value].
[:zh_CN] 否则，它们不能带有成员 [`value]。

[para]
[:en] Access checking is performed as if in a context unrelated to [`TS] and
[`T].
[:zh_CN] 如同在与 [`TS] 和 [`T] 无关的语境中一样照常进行访问检查。

[:en] Only the validity of the immediate context of the expression is
considered.
[:zh_CN] 仅考虑表达式的直接语境的有效性。

[begin:note]
[:en] The compilation of the expression can result in side effects such as the
instantiation of class template specializations and function template
specializations, the generation of implicitly-defined functions, and so on.
[:zh_CN] 对表达式的编译可能会造成诸如类模板特例和函数模板特例的实例化，生成隐式
定义的函数等等的各种副作用。

[:en] Such side effects are not in the [=lq]immediate context[=rq] and can
result in the program being ill-formed.
[:zh_CN] 这样的副作用并不属于其“直接语境”，并可能造成程序非良构。
[end:note]

[para]
[:en] In addition to being available via inclusion of the [?libheader tuple]
header, the three templates are available when any of the headers
[?libheaderref array], [?libheaderref ranges], [?libheaderref span], or
[?libheaderref utility] are included.
[:zh_CN] 除了通过包含 [?libheader tuple] 头文件而使其可用之外，这三个模板还可以
通过包含 [?libheaderref array]、[?libheaderref ranges]、[?libheaderref span] 或
[?libheaderref utility] 之一而可用。
[end:description]

[%@library tuple_element]
[codeblock:declaration]
template<size_t I, class T> struct tuple_element<I, const T>;
template<size_t I, class T> struct tuple_element<I, volatile T>;
template<size_t I, class T> struct tuple_element<I, const volatile T>;
[codeblock:end]

[begin:description]
[para]
[:en] Let [`TE] denote [`tuple_element<I, T>] of the [$cv]-unqualified type
[`T].
[:zh_CN] 令 [`TE] 代表 [$cv] 未限定的类型 [`T] 的 [`tuple_element<I, T>]。

[:en] Then each of the three templates shall meet the
[*Cpp17TransformationTrait] requirements ([#meta.rqmts]) with a member typedef
[`type] that names the following type:
[:zh_CN] 则三个模板中的每个都满足 [*Cpp17TransformationTrait] 规定
（[#meta.rqmts]），并带有指名下列类型的成员 typedef [`type]：

[list]
[item]
[:en@~] for the first specialization, [`add_const_t<TE>],
[:zh_CN@~] 对于第一个特化式，为 [`add_const_t<TE>]，
[item]
[:en@~] for the second specialization, [`add_volatile_t<TE>], and
[:zh_CN@~] 对于第二个特化式，为 [`add_volatile_t<TE>]，而
[item]
[:en@~] for the third specialization, [`add_cv_t<TE>].
[:zh_CN@~] 对于第三个特化式，为 [`add_cv_t<TE>]。
[list:end]

[para]
[:en] In addition to being available via inclusion of the [?libheader tuple]
header, the three templates are available when any of the headers
[?libheaderref array], [?libheaderref ranges], [?libheaderref span], or
[?libheaderref utility] are included.
[:zh_CN] 除了通过包含 [?libheader tuple] 头文件而使其可用之外，这三个模板还可以
通过包含 [?libheaderref array]、[?libheaderref ranges]、[?libheaderref span>] 或
[?libheaderref utility] 之一而可用。
[end:description]
