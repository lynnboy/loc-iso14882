[section#tuple.elem
    [:en] Element access
    [:zh_CN] 成员访问
]

[%@lib@member get[!tuple]]
[codeblock:declaration]
template<size_t I, class... Types>
  constexpr tuple_element_t<I, tuple<Types...>>&
    get(tuple<Types...>& t) noexcept;
template<size_t I, class... Types>
  constexpr tuple_element_t<I, tuple<Types...>>&&
    get(tuple<Types...>&& t) noexcept;        // [:en] Note A \
                                                 [:zh_CN] 注解 A
template<size_t I, class... Types>
  constexpr const tuple_element_t<I, tuple<Types...>>&
    get(const tuple<Types...>& t) noexcept;   // [:en] Note B \
                                                 [:zh_CN] 注解 B
template<size_t I, class... Types>
  constexpr const tuple_element_t<I, tuple<Types...>>&& get(const tuple<Types...>&& t) noexcept;
[codeblock:end]

[div:description]
[para:mandates]
[:en] [$[`I] < [`sizeof...(Types)]].
[:zh_CN] [$[`I] < [`sizeof...(Types)]]。

[para:returns]
[:en] A reference to the [$[`I]^\text{th}] element of [`t], where indexing is
zero-based.
[:zh_CN] 指代 [`t] 的第 [`I] 个元素的引用，其中的索引基于零。

[para]
[begin:note A]
[:en] If a type [`T] in [`Types] is some reference type [`X&], the return type
is [`X&], not [`X&&].
[:zh_CN] 若 [`Types] 中的某个类型 [`T] 是某个引用类型 [`X&]，则其返回类型为
[`X&]，而不是 [`X&&]。

[:en] However, if the element type is a non-reference type [`T], the return type
is [`T&&].
[:zh_CN] 然而，若元素类型为非引用类型 [`T]，则返回类型为 [`T&&]。
[end:note]

[para]
[enter:note B]
[:en] Constness is shallow.
[:zh_CN] 常量性是浅层的。

[:en] If a type [`T] in [`Types] is some reference type [`X&], the return type
is [`X&], not [`const X&].
[:zh_CN] 若 [`Types] 中的某个类型 [`T] 是某个引用类型 [`X&]，则其返回类型为
[`X&]，而不是 [`const X&]。

[:en] However, if the element type is a non-reference type [`T], the return type
is [`const T&].
[:zh_CN] 然而，若元素类型为非引用类型 [`T]，则返回类型为 [`const T&]。

[:en] This is consistent with how constness is defined to work for member
variables of reference type.
[:zh_CN] 这与对引用类型的成员变量所定义的常量性的工作方式相一致。
[end:note]
[div:end]

[%@lib@member get[!tuple]]
[codeblock:declaration]
template<class T, class... Types>
  constexpr T& get(tuple<Types...>& t) noexcept;
template<class T, class... Types>
  constexpr T&& get(tuple<Types...>&& t) noexcept;
template<class T, class... Types>
  constexpr const T& get(const tuple<Types...>& t) noexcept;
template<class T, class... Types>
  constexpr const T&& get(const tuple<Types...>&& t) noexcept;
[codeblock:end]

[div:description]
[para:mandates]
[:en] The type [`T] occurs exactly once in [`Types].
[:zh_CN] 类型 [`T] 在 [`Types] 中恰好出现一次。

[para:returns]
[:en] A reference to the element of [`t] corresponding to the type [`T] in
[`Types].
[:zh_CN] 指代 [`t] 中对应于 [`Types] 中的类型 [`T] 的元素的引用。

[para]
[begin:example]
[codeblock]
const tuple<int, const int, double, double> t(1, 2, 3.4, 5.6);
const int& i1 = get<int>(t);                    // [:en] OK, [`i1] has value [`1] \
                                                   [:zh_CN] OK，[`i1] 的值为 [`1]
const int& i2 = get<const int>(t);              // [:en] OK, [`i2] has value [`2] \
                                                   [:zh_CN] OK，[`i2] 的值为 [`2]
const double& d = get<double>(t);               // [:en] error: type [`double] is not unique within [`t] \
                                                   [:zh_CN] 错误：类型 [`double] 在 [`t] 中不唯一
[codeblock:end]
[end:example]
[div:end]

[para]
[begin:note]
[:en]
The reason [`get] is a non-member function is that if this functionality had
been provided as a member function, code where the type depended on a template
parameter would have required using the [`template] keyword.
[:zh_CN]
把 [`get] 作为非成员函数的原因为，若以成员函数来提供这个功能，则类型依赖于某模板
形参的代码将导致要求使用 [`template] 关键字。
[end:note]
