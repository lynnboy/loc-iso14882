[section#bit.syn
    [:en] Header [`<bit>] synopsis
    [:zh_CN] 头文件 [`<bit>] 纲要
]

[%@header bit]
[codeblock:synopsis]
// [:en] all freestanding \
[:zh_CN] 全自立式
namespace std {
  // [:en] [#bit.cast], [`bit_cast] \
  [:zh_CN] [#bit.cast]，[`bit_cast]
  template<class To, class From>
    constexpr To bit_cast(const From& from) noexcept;

  // [:en] [#bit.byteswap], [`byteswap] \
  [:zh_CN] [#bit.byteswap]，[`byteswap]
  template<class T>
    constexpr T byteswap(T value) noexcept;

  // [:en] [#bit.pow.two], integral powers of 2 \
  [:zh_CN] [#bit.pow.two]，2 的整数幂
  template<class T>
    constexpr bool has_single_bit(T x) noexcept;
  template<class T>
    constexpr T bit_ceil(T x);
  template<class T>
    constexpr T bit_floor(T x) noexcept;
  template<class T>
    constexpr int bit_width(T x) noexcept;

  // [:en] [#bit.rotate], rotating \
  [:zh_CN] [#bit.rotate]，旋转
  template<class T>
    [[nodiscard]] constexpr T rotl(T x, int s) noexcept;
  template<class T>
    [[nodiscard]] constexpr T rotr(T x, int s) noexcept;

  // [:en] [#bit.count], counting \
  [:zh_CN] [#bit.count]，计数
  template<class T>
    constexpr int countl_zero(T x) noexcept;
  template<class T>
    constexpr int countl_one(T x) noexcept;
  template<class T>
    constexpr int countr_zero(T x) noexcept;
  template<class T>
    constexpr int countr_one(T x) noexcept;
  template<class T>
    constexpr int popcount(T x) noexcept;

  // [:en] [#bit.endian], endian \
  [:zh_CN] [#bit.endian]，端序
  enum class endian {
    little = [[redoc("[=seebelow]")]],
    big    = [[redoc("[=seebelow]")]],
    native = [[redoc("[=seebelow]")]]
  };
}
[codeblock:end]
