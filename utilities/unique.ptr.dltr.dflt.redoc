[section#unique.ptr.dltr.dflt
    [`default_delete]
]

[codeblock:synopsis]
namespace std {
  template<class T> struct default_delete {
    constexpr default_delete() noexcept = default;
    template<class U> default_delete(const default_delete<U>&) noexcept;
    void operator()(T*) const;
  };
}
[codeblock:end]

[%@lib@ctor default_delete]
[codeblock:declaration]
template<class U> default_delete(const default_delete<U>& other) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Constructs a [`default_delete] object from another [`default_delete<U>]
object.
[:zh_CN]
以另一个 [`default_delete<U>] 对象构造一个 [`default_delete] 对象。

[para:remarks]
[:en] This constructor shall not participate in overload resolution unless
[`U*] is implicitly convertible to [`T*].
[:zh_CN]
除非 [`U*] 可以隐式转换为 [`T*]，否则该构造函数不能参与重载决议。
[div:end]

[%@lib@member operator()[!default_delete]]
[codeblock:declaration]
void operator()(T* ptr) const;
[codeblock:end]

[div:description]
[para:effects]
[:en] Calls [`delete] on [`ptr].
[:zh_CN] 对 [`ptr] 调用 [`delete]。

[para:remarks]
[:en] If [`T] is an incomplete type, the program is ill-formed.
[:zh_CN] 若 [`T] 是不完整类型，则程序非良构。
[div:end]
