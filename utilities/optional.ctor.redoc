[section#optional.ctor
    [:en] Constructors
    [:zh_CN] 构造函数
]

[%@lib@ctor optional]
[codeblock:declaration]
constexpr optional() noexcept;
constexpr optional(nullopt_t) noexcept;
[codeblock:end]

[div:description]
[para:ensures]
[:en] [`*this] does not contain a value.
[:zh_CN] [`*this] 不包含值。

[para:remarks]
[:en] No contained value is initialized.
[:zh_CN] 没有初始化任何所包含的值。

[:en] For every object type [`T] these constructors shall be constexpr
constructors ([#dcl.constexpr]).
[:zh_CN] 对于每个对象类型 [`T]，这些构造函数都应当为 constexpr 构造函数
（[#dcl.constexpr]）。
[div:end]

[%@lib@ctor optional]
[codeblock:declaration]
constexpr optional(const optional& rhs);
[codeblock:end]

[div:description]
[para:effects]
[:en] If [`rhs] contains a value, initializes the contained value as if
direct-non-list-initializing an object of type [`T] with the expression [`*rhs].
[:zh_CN] 若 [`rhs] 包含值，则如同以表达式 [`*rhs] 对 [`T] 类型的对象进行直接非
列表初始化的方式，初始化其所包含的值。

[para:ensures]
[:en] [`bool(rhs) == bool(*this)].
[:zh_CN] [`bool(rhs) == bool(*this)]。

[para:throws]
[:en] Any exception thrown by the selected constructor of [`T].
[:zh_CN] 任何由 [`T] 所选择的构造函数所抛出的异常。

[para:remarks]
[:en] This constructor shall be defined as deleted unless
[`is_copy_constructible_v<T>] is [`true].
[:zh_CN] 除非 [`is_copy_constructible_v<T>] 为 [`true]，否则这个构造函数应当定义
为弃置的。

[:en] If [`is_trivially_copy_constructible_v<T>] is [`true], this constructor
is trivial.
[:zh_CN] 当 [`is_trivially_copy_constructible_v<T>] 为 [`true] 时，这个构造函数
是平凡的。
[div:end]

[%@lib@ctor optional]
[codeblock:declaration]
constexpr optional(optional&& rhs) noexcept([[redoc("=seebelow")]]);
[codeblock:end]

[div:description]
[para:effects]
[:en] If [`rhs] contains a value, initializes the contained value as if
direct-non-list-initializing an object of type [`T] with the expression
[`std::move(*rhs)].
[:zh_CN] 若 [`rhs] 包含值，则如同以表达式 [`std::move(*rhs)] 对 [`T] 类型的对象
进行直接非列表初始化的方式，初始化其所包含的值。

[:en] [`bool(rhs)] is unchanged.
[:zh_CN] [`bool(rhs)] 未改变。

[para:ensures]
[:en] [`bool(rhs) == bool(*this)].
[:zh_CN] [`bool(rhs) == bool(*this)]。

[para:throws]
[:en] Any exception thrown by the selected constructor of [`T].
[:zh_CN] 任何由 [`T] 所选择的构造函数所抛出的异常。

[para:remarks]
[:en] The expression inside [`noexcept] is equivalent to
[`is_nothrow_move_constructible_v<T>].
[:zh_CN] [`noexcept] 中的表达式等价于 [`is_nothrow_move_constructible_v<T>]。

[:en] This constructor shall not participate in overload resolution unless
[`is_move_constructible_v<T>] is [`true].
[:zh_CN] 除非 [`is_move_constructible_v<T>] 为 [`true]，否则这个构造函数不能参与
重载决议。

[:en] If [`is_trivially_move_constructible_v<T>] is [`true], this constructor
is trivial.
[:zh_CN] 当 [`is_trivially_move_constructible_v<T>] 为 [`true] 时，这个构造函数
是平凡的。
[div:end]

[%@lib@ctor optional]
[codeblock:declaration]
template<class... Args> constexpr explicit optional(in_place_t, Args&&... args);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes the contained value as if direct-non-list-initializing an
object of type [`T] with the arguments [`std::forward<Args>(args)...].
[:zh_CN] 如同以实参 [`std::forward<Args>(args)...] 对 [`T] 类型的对象进行直接
非列表初始化的方式，初始化其所包含的值。

[para:ensures]
[:en] [`*this] contains a value.
[:zh_CN] [`*this] 包含值。

[para:throws]
[:en] Any exception thrown by the selected constructor of [`T].
[:zh_CN] 任何由 [`T] 所选择的构造函数所抛出的异常。

[para:remarks]
[:en] If [`T][=']s constructor selected for the initialization is a
constexpr constructor, this constructor shall be a constexpr constructor.
[:zh_CN] 若被选择用于初始化的 [`T] 的构造函数是 constexpr 构造函数，则这个
构造函数应当是 constexpr 构造函数。

[:en] This constructor shall not participate in overload resolution unless
[`is_constructible_v<T, Args...>] is [`true].
[:zh_CN] 除非 [`is_constructible_v<T, Args...>] 为 [`true]，否则这个构造函数不能
参与重载决议。
[div:end]

[%@lib@ctor optional]
[codeblock:declaration]
template<class U, class... Args>
  constexpr explicit optional(in_place_t, initializer_list<U> il, Args&&... args);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes the contained value as if direct-non-list-initializing an
object of type [`T] with the arguments [`il, std::forward<Args>(args)...].
[:zh_CN] 如同以实参 [`il, std::forward<Args>(args)...] 对 [`T] 类型的对象进行
直接非列表初始化的方式，初始化其所包含的值。

[para:ensures]
[:en] [`*this] contains a value.
[:zh_CN] [`*this] 包含值。

[para:throws]
[:en] Any exception thrown by the selected constructor of [`T].
[:zh_CN] 任何由 [`T] 所选择的构造函数所抛出的异常。

[para:remarks]
[:en] This constructor shall not participate in overload resolution unless
[`is_constructible_v<T, initializer_list<U>&, Args&&...>] is [`true].
[:zh_CN] 除非 [`is_constructible_v<T, initializer_list<U>&, Args&&...>] 为
[`true]，否则这个构造函数不能参与重载决议。

[:en] If [`T][=']s constructor selected for the initialization is a constexpr
constructor, this constructor shall be a constexpr constructor.
[:zh_CN] 若被选择用于初始化的 [`T] 的构造函数是 constexpr 构造函数，则这个
构造函数应当是 constexpr 构造函数。
[div:end]

[%@lib@ctor optional]
[codeblock:declaration]
template<class U = T> explicit([[redoc("=seebelow")]]) constexpr optional(U&& v);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes the contained value as if direct-non-list-initializing
an object of type [`T] with the expression [`std::forward<U>(v)].
[:zh_CN] 如同以表达式 [`std::forward<U>(v)] 对 [`T] 类型的对象进行直接非列表
初始化的方式，初始化其所包含的值。

[para:ensures]
[:en] [`*this] contains a value.
[:zh_CN] [`*this] 包含值。

[para:throws]
[:en] Any exception thrown by the selected constructor of [`T].
[:zh_CN] 任何由 [`T] 所选择的构造函数所抛出的异常。

[para:remarks]
[:en] If [`T][=']s selected constructor is a constexpr constructor, this
constructor shall be a constexpr constructor.
[:zh_CN] 若被选择用于初始化的 [`T] 的构造函数是 constexpr 构造函数，则这个
构造函数应当是 constexpr 构造函数。

[:en] This constructor shall not participate in overload resolution unless
[`is_constructible_v<T, U&&>] is [`true],
[`is_same_v<remove_cvrev_t<U>, in_place_t>] is [`false], and
[`is_same_v<remove_cvrev_t<T>, decay_t<U>>] is [`false].
[:zh_CN] 除非 [`is_constructible_v<T, U&&>] 为 [`true]，
[`is_same_v<remove_cvrev_t<U>, in_place_t>] 为 [`false]，并且
[`is_same_v<remove_cvrev_t<T>, decay_t<U>>] 为 [`false]，否则这个构造函数不能
参与重载决议。

[:en] The expression inside [`explicit] is equivalent to:
[:zh_CN] [`explicit] 中的表达式等价于：

[codeblock:notation]
!is_convertible_v<U, T>
[codeblock:end]
[div:end]

[%@lib@ctor optional]
[codeblock:declaration]
template<class U> explicit([[redoc("=seebelow")]]) optional(const optional<U>& rhs);
[codeblock:end]

[div:description]
[para:effects]
[:en] If [`rhs] contains a value, initializes the contained value as if
direct-non-list-initializing an object of type [`T] with the expression [`*rhs].
[:zh_CN] 如果 [`rhs] 包含值，则如同以表达式 [`*rhs] 对 [`T] 类型的对象进行直接非
列表初始化的方式，初始化其所包含的值。

[para:ensures]
[:en] [`bool(rhs) == bool(*this)].
[:zh_CN] [`bool(rhs) == bool(*this)]。

[para:throws]
[:en] Any exception thrown by the selected constructor of [`T].
[:zh_CN] 任何由 [`T] 所选择的构造函数所抛出的异常。

[para:remarks]
[:en] This constructor shall not participate in overload resolution unless
[:zh_CN] 除非满足以下条件，否则这个构造函数不能参与重载决议：

[list]
[item]
[:en@~] [`is_constructible_v<T, const U&>] is [`true],
[:zh_CN@~] [`is_constructible_v<T, const U&>] 为 [`true]，
[item]
[:en@~] [`is_constructible_v<T, optional<U>&>] is [`false],
[:zh_CN@~] [`is_constructible_v<T, optional<U>&>] 为 [`false]，
[item]
[:en@~] [`is_constructible_v<T, optional<U>&&>] is [`false],
[:zh_CN@~] [`is_constructible_v<T, optional<U>&&>] 为 [`false]，
[item]
[:en@~] [`is_constructible_v<T, const optional<U>&>] is [`false],
[:zh_CN@~] [`is_constructible_v<T, const optional<U>&>] 为 [`false]，
[item]
[:en@~] [`is_constructible_v<T, const optional<U>&&>] is [`false],
[:zh_CN@~] [`is_constructible_v<T, const optional<U>&&>] 为 [`false]，
[item]
[:en@~] [`is_convertible_v<optional<U>&, T>] is [`false],
[:zh_CN@~] [`is_convertible_v<optional<U>&, T>] 为 [`false]，
[item]
[:en@~] [`is_convertible_v<optional<U>&&, T>] is [`false],
[:zh_CN@~] [`is_convertible_v<optional<U>&&, T>] 为 [`false]，
[item]
[:en@~] [`is_convertible_v<const optional<U>&, T>] is [`false], and
[:zh_CN@~] [`is_convertible_v<const optional<U>&, T>] 为 [`false]，并且
[item]
[:en@~] [`is_convertible_v<const optional<U>&&, T>] is [`false].
[:zh_CN@~] [`is_convertible_v<const optional<U>&&, T>] 为 [`false]。
[list:end]

[:en] The expression inside [`explicit] is equivalent to:
[:zh_CN] [`explicit] 中的表达式等价于：

[codeblock:notation]
!is_convertible_v<const U&, T>
[codeblock:end]
[div:end]

[%@lib@ctor optional]
[codeblock:declaration]
template<class U> explicit([[redoc("=seebelow")]]) optional(optional<U>&& rhs);
[codeblock:end]

[div:description]
[para:effects]
[:en] If [`rhs] contains a value, initializes the contained value as if
direct-non-list-initializing an object of type [`T] with the expression
[`std::move(*rhs)].
[:zh_CN] 如果 [`rhs] 包含值，则如同以表达式 [`std::move(*rhs)] 对 [`T] 类型的
对象进行直接非列表初始化的方式，初始化其所包含的值。

[:en] [`bool(rhs)] is unchanged.
[:zh_CN] [`bool(rhs)] 不改变。

[para:ensures]
[:en] [`bool(rhs) == bool(*this)].
[:zh_CN] [`bool(rhs) == bool(*this)]。

[para:throws]
[:en] Any exception thrown by the selected constructor of [`T].
[:zh_CN] 任何由 [`T] 所选择的构造函数所抛出的异常。

[para:remarks]
[:en] This constructor shall not participate in overload resolution unless
[:zh_CN] 除非满足以下条件，否则这个构造函数不能参与重载决议：

[list]
[item]
[:en@~] [`is_constructible_v<T, U&&>] is [`true],
[:zh_CN@~] [`is_constructible_v<T, U&&>] 为 [`true]，
[item]
[:en@~] [`is_constructible_v<T, optional<U>&>] is [`false],
[:zh_CN@~] [`is_constructible_v<T, optional<U>&>] 为 [`false]，
[item]
[:en@~] [`is_constructible_v<T, optional<U>&&>] is [`false],
[:zh_CN@~] [`is_constructible_v<T, optional<U>&&>] 为 [`false]，
[item]
[:en@~] [`is_constructible_v<T, const optional<U>&>] is [`false],
[:zh_CN@~] [`is_constructible_v<T, const optional<U>&>] 为 [`false]，
[item]
[:en@~] [`is_constructible_v<T, const optional<U>&&>] is [`false],
[:zh_CN@~] [`is_constructible_v<T, const optional<U>&&>] 为 [`false]，
[item]
[:en@~] [`is_convertible_v<optional<U>&, T>] is [`false],
[:zh_CN@~] [`is_convertible_v<optional<U>&, T>] 为 [`false]，
[item]
[:en@~] [`is_convertible_v<optional<U>&&, T>] is [`false],
[:zh_CN@~] [`is_convertible_v<optional<U>&&, T>] 为 [`false]，
[item]
[:en@~] [`is_convertible_v<const optional<U>&, T>] is [`false], and
[:zh_CN@~] [`is_convertible_v<const optional<U>&, T>] 为 [`false]，并且
[item]
[:en@~] [`is_convertible_v<const optional<U>&&, T>] is [`false].
[:zh_CN@~] [`is_convertible_v<const optional<U>&&, T>] 为 [`false]。
[list:end]

[:en] The expression inside [`explicit] is equivalent to:
[:zh_CN] [`explicit] 中的表达式等价于：

[codeblock:notation]
!is_convertible_v<U, T>
[codeblock:end]
[div:end]
