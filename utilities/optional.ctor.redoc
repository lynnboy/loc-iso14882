[section#optional.ctor
    [:en] Constructors
    [:zh_CN] 构造函数
]

[para]
[:en] The exposition-only variable template [*converts-from-any-cvref] is used
by some constructors for [`optional].
[:zh_CN] [`optional] 的一些构造函数中使用了仅用于阐释的变量模板
[*converts-from-any-cvref]。

[codeblock]
template<class T, class W>
constexpr bool [[redoc("*>")]]converts-from-any-cvref =  // [=expos]
  disjunction_v<is_constructible<T, W&>, is_convertible<W&, T>,
                is_constructible<T, W>, is_convertible<W, T>,
                is_constructible<T, const W&>, is_convertible<const W&, T>,
                is_constructible<T, const W>, is_convertible<const W, T>>;
[codeblock:end]

[%@lib@ctor optional]
[codeblock:declaration]
constexpr optional() noexcept;
constexpr optional(nullopt_t) noexcept;
[codeblock:end]

[div:description]
[para:ensures]
[:en] [`*this] does not contain a value.
[:zh_CN] [`*this] 不包含值。

[para:remarks]
[:en] No contained value is initialized.
[:zh_CN] 没有初始化任何所包含的值。

[:en] For every object type [`T] these constructors are constexpr constructors
([#dcl.constexpr]).
[:zh_CN] 对于每个对象类型 [`T]，这些构造函数都为 constexpr 构造函数
（[#dcl.constexpr]）。
[div:end]

[%@lib@ctor optional]
[codeblock:declaration]
constexpr optional(const optional& rhs);
[codeblock:end]

[div:description]
[para:effects]
[:en] If [`rhs] contains a value, direct-non-list-initializes the contained
value with [`*rhs].
[:zh_CN] 若 [`rhs] 包含值，则以 [`*rhs] 对其所包含的值进行直接非列表初始化。

[para:ensures]
[:en] [`rhs.has_value() == this->has_value()].
[:zh_CN] [`rhs.has_value() == this->has_value()]。

[para:throws]
[:en] Any exception thrown by the selected constructor of [`T].
[:zh_CN] 任何由 [`T] 所选择的构造函数所抛出的异常。

[para:remarks]
[:en] This constructor is defined as deleted unless [`is_copy_constructible_v<T>]
is [`true].
[:zh_CN] 除非 [`is_copy_constructible_v<T>] 为 [`true]，否则这个构造函数被定义
为弃置的。

[:en] If [`is_trivially_copy_constructible_v<T>] is [`true], this constructor
is trivial.
[:zh_CN] 当 [`is_trivially_copy_constructible_v<T>] 为 [`true] 时，这个构造函数
是平凡的。
[div:end]

[%@lib@ctor optional]
[codeblock:declaration]
constexpr optional(optional&& rhs) noexcept([[redoc("[=seebelow]")]]);
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`is_move_constructible_v<T>] is [`true].
[:zh_CN] [`is_move_constructible_v<T>] 为 [`true]。

[para:effects]
[:en] If [`rhs] contains a value, direct-non-list-initializes the contained
value with [`std::move(*rhs)].
[:zh_CN] 若 [`rhs] 包含值，则以 [`std::move(*rhs)] 对其所包含的值进行直接非列表
初始化。

[:en] [`bool(rhs)] is unchanged.
[:zh_CN] [`bool(rhs)] 未改变。

[para:ensures]
[:en] [`rhs.has_value() == this->has_value()].
[:zh_CN] [`rhs.has_value() == this->has_value()]。

[para:throws]
[:en] Any exception thrown by the selected constructor of [`T].
[:zh_CN] 任何由 [`T] 所选择的构造函数所抛出的异常。

[para:remarks]
[:en] The exception specification is equivalent to
[`is_nothrow_move_constructible_v<T>].
[:zh_CN] 其异常说明等价于 [`is_nothrow_move_constructible_v<T>]。

[:en] If [`is_trivially_move_constructible_v<T>] is [`true], this constructor
is trivial.
[:zh_CN] 当 [`is_trivially_move_constructible_v<T>] 为 [`true] 时，这个构造函数
是平凡的。
[div:end]

[%@lib@ctor optional]
[codeblock:declaration]
template<class... Args> constexpr explicit optional(in_place_t, Args&&... args);
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`is_constructible_v<T, Args...>] is [`true].
[:zh_CN] [`is_constructible_v<T, Args...>] 为 [`true]。

[para:effects]
[:en] Direct-non-list-initializes the contained value with
[`std::forward<Args>(args)...].
[:zh_CN] 以 [`std::forward<Args>(args)...] 对其所包含的值进行直接非列表初始化。

[para:ensures]
[:en] [`*this] contains a value.
[:zh_CN] [`*this] 包含值。

[para:throws]
[:en] Any exception thrown by the selected constructor of [`T].
[:zh_CN] 任何由 [`T] 所选择的构造函数所抛出的异常。

[para:remarks]
[:en] If [`T][=']s constructor selected for the initialization is a
constexpr constructor, this constructor is a constexpr constructor.
[:zh_CN] 若被选择用于初始化的 [`T] 的构造函数是 constexpr 构造函数，则这个
构造函数是 constexpr 构造函数。
[div:end]

[%@lib@ctor optional]
[codeblock:declaration]
template<class U, class... Args>
  constexpr explicit optional(in_place_t, initializer_list<U> il, Args&&... args);
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`is_constructible_v<T, initializer_list<U>&, Args...>] is [`true].
[:zh_CN] [`is_constructible_v<T, initializer_list<U>&, Args...>] 为 [`true]。

[para:effects]
[:en] Direct-non-list-initializes the contained value with
[`il, std::forward<Args>(args)...].
[:zh_CN] 以 [`il, std::forward<Args>(args)...] 对其所包含的值进行直接非列表初始化。

[para:ensures]
[:en] [`*this] contains a value.
[:zh_CN] [`*this] 包含值。

[para:throws]
[:en] Any exception thrown by the selected constructor of [`T].
[:zh_CN] 任何由 [`T] 所选择的构造函数所抛出的异常。

[para:remarks]
[:en] If [`T][=']s constructor selected for the initialization is a constexpr
constructor, this constructor is a constexpr constructor.
[:zh_CN] 若被选择用于初始化的 [`T] 的构造函数是 constexpr 构造函数，则这个
构造函数是 constexpr 构造函数。
[div:end]

[%@lib@ctor optional]
[codeblock:declaration]
template<class U = T> constexpr explicit([[redoc("[=seebelow]")]]) optional(U&& v);
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en] [`is_constructible_v<T, U>] is [`true],
[:zh_CN] [`is_constructible_v<T, U>] 为 [`true]，
[item]
[:en] [`is_same_v<remove_cvref_t<U>, in_place_t>] is [`false],
[:zh_CN] [`is_same_v<remove_cvref_t<U>, in_place_t>] 为 [`false]，
[item]
[:en] [`is_same_v<remove_cvref_t<T>, optional>] is [`false], and
[:zh_CN] [`is_same_v<remove_cvref_t<T>, optional>] 为 [`false]，并且
[item]
[:en] if [`T] is [=cv] [`bool], [`remove_cvref_t<U>] is not a specification of
[`optional].
[:zh_CN] 当 [`T] 为 [=cv] [`bool] 时 [`remove_cvref_t<U>] 不是 [`optional] 的特例。
[list:end]

[para:effects]
[:en] Direct-non-list-initializes the contained value with [`std::forward<U>(v)].
[:zh_CN] 以 [`std::forward<U>(v)] 对其所包含的值进行直接非列表初始化。

[para:ensures]
[:en] [`*this] contains a value.
[:zh_CN] [`*this] 包含值。

[para:throws]
[:en] Any exception thrown by the selected constructor of [`T].
[:zh_CN] 任何由 [`T] 所选择的构造函数所抛出的异常。

[para:remarks]
[:en] If [`T][=']s selected constructor is a constexpr constructor, this
constructor is a constexpr constructor.
[:zh_CN] 若被选择用于初始化的 [`T] 的构造函数是 constexpr 构造函数，则这个
构造函数是 constexpr 构造函数。

[:en] The expression inside [`:key explicit] is equivalent to:
[:zh_CN] [`:key explicit] 中的表达式等价于：
[codeblock]
!is_convertible_v<U, T>
[codeblock:end]
[div:end]

[%@lib@ctor optional]
[codeblock:declaration]
template<class U> constexpr explicit([[redoc("[=seebelow]")]]) optional(const optional<U>& rhs);
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en@~] [`is_constructible_v<T, U>] is [`true], and
[:zh_CN@~] [`is_constructible_v<T, U>] 为 [`true]，并且
[item]
[:en@~] if [`T] is not [=cv] [`bool],
[`[*converts-from-any-cvref]<T, optional<U>>] is [`false].
[:zh_CN@~] 当 [`T] 不是 [=cv] [`bool] 时，
[`[*converts-from-any-cvref]<T, optional<U>>] 为 [`false]。
[list:end]

[para:effects]
[:en] If [`rhs] contains a value, direct-non-list-initializes the contained
value with [`*rhs].
[:zh_CN] 若 [`rhs] 包含值，则以 [`*rhs] 对其所包含的值进行直接非列表初始化。

[para:ensures]
[:en] [`rhs.has_value() == this->has_value()].
[:zh_CN] [`rhs.has_value() == this->has_value()]。

[para:throws]
[:en] Any exception thrown by the selected constructor of [`T].
[:zh_CN] 任何由 [`T] 所选择的构造函数所抛出的异常。

[para:remarks]
[:en] The expression inside [`:key explicit] is equivalent to:
[:zh_CN] [`:key explicit] 中的表达式等价于：
[codeblock]
!is_convertible_v<const U&, T>
[codeblock:end]
[div:end]

[%@lib@ctor optional]
[codeblock:declaration]
template<class U> constexpr explicit([[redoc("[=seebelow]")]]) optional(optional<U>&& rhs);
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en@~] [`is_constructible_v<T, U>] is [`true], and
[:zh_CN@~] [`is_constructible_v<T, U>] 为 [`true]，并且
[item]
[:en@~] if [`T] is not [=cv] [`bool],
[`[*converts-from-any-cvref]<T, optional<U>>] is [`false].
[:zh_CN@~] 当 [`T] 不是 [=cv] [`bool] 时，
[`[*converts-from-any-cvref]<T, optional<U>>] 为 [`false]。
[list:end]

[para:effects]
[:en] If [`rhs] contains a value, direct-non-list-initializes the contained
value with [`std::move(*rhs)].
[:zh_CN] 若 [`rhs] 包含值，则以 [`std::move(*rhs)] 对其所包含的值进行直接非列表
初始化。

[para:ensures]
[:en] [`rhs.has_value() == this->has_value()].
[:zh_CN] [`rhs.has_value() == this->has_value()]。

[para:ensures]
[:en] [`bool(rhs) == bool(*this)].
[:zh_CN] [`bool(rhs) == bool(*this)]。

[para:throws]
[:en] Any exception thrown by the selected constructor of [`T].
[:zh_CN] 任何由 [`T] 所选择的构造函数所抛出的异常。

[para:remarks]
[:en] The expression inside [`:key explicit] is equivalent to:
[:zh_CN] [`:key explicit] 中的表达式等价于：
[codeblock]
!is_convertible_v<U, T>
[codeblock:end]
[div:end]
