[section#optional.specalg
    [:en] Specialized algorithms
    [:zh_CN] 特化的算法
]

[%@lib@member swap[!optional]]
[codeblock:declaration]
template<class T> void swap(optional<T>& x, optional<T>& y) noexcept(noexcept(x.swap(y)));
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`is_move_constructible_v<T>] is [`true] and [`is_swappable_v<T>] is
[`true].
[:zh_CN] [`is_move_constructible_v<T>] 为 [`true] 并且 [`is_swappable_v<T>] 为
[`true]。

[para:effects]
[:en] Calls [`x.swap(y)].
[:zh_CN] 调用 [`x.swap(y)]。
[div:end]

[%@lib make_optional]
[codeblock:declaration]
template<class T> constexpr optional<decay_t<T>> make_optional(T&& v);
[codeblock:end]

[div:description]
[para:returns]
[:en] [`optional<decay_t<T>>(std::forward<T>(v))].
[:zh_CN] [`optional<decay_t<T>>(std::forward<T>(v))]。
[div:end]

[%@lib make_optional]
[codeblock:declaration]
template<class T, class...Args>
  constexpr optional<T> make_optional(Args&&... args);
[codeblock:end]

[div:description]
[para:effects]
[:en]
Equivalent to: [`return optional<T>(in_place, std::forward<Args>(args)...);]
[:zh_CN]
等价于：[`return optional<T>(in_place, std::forward<Args>(args)...);]
[div:end]

[%@lib make_optional]
[codeblock:declaration]
template<class T, class U, class... Args>
  constexpr optional<T> make_optional(initializer_list<U> il, Args&&... args);
[codeblock:end]

[div:description]
[para:effects]
[:en]
Equivalent to: [`return optional<T>(in_place, il, std::forward<Args>(args)...);]
[:zh_CN]
等价于：[`return optional<T>(in_place, il, std::forward<Args>(args)...);]
[div:end]
