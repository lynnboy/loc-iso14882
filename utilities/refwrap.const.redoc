[section#refwrap.const
    [:en] Constructors and destructor
    [:zh_CN] 构造函数和析构函数
]

[%@lib@ctor reference_wrapper]
[codeblock:declaration]
template<class U>
  constexpr reference_wrapper(U&& u) noexcept([[redoc("=seebelow")]]);
[codeblock:end]

[div:description]
[para:remarks]
[:en] Let [`[^FUN]] denote the exposition-only functions
[:zh_CN] 令 [`[^FUN]] 代表一个仅为阐释目的的函数

[codeblock]
void [[redoc("^", "n>")]]FUN(T&) noexcept;
void [[redoc("^", "n>")]]FUN(T&&) = delete;
[codeblock:end]

[:en] This constructor shall not participate in overload resolution unless
the expression [`[^FUN](declval<U>())] is well-formed and
[`is_same_v<remove_cvref_t<U>, reference_wrapper>] is [`false].
[:zh_CN] 除非表达式 [`[^FUN](declval<U>())] 良构且
[`is_same_v<remove_cvref_t<U>, reference_wrapper>] 为 [`false]，否则这个构造函数
不能参与重载决议。

[:en] The expression inside [`noexcept] is equivalent to
[`noexcept([^FUN](declval<U>()))].
[:zh_CN] [`noexcept] 中的表达式等价于
[`noexcept([^FUN](declval<U>()))]。

[para:effects]
[:en] Creates a variable [`r] as if by [`T& r = std::forward<U>(u)], then
constructs a [`reference_wrapper] object that stores a reference to [`r].
[:zh_CN] 以如同 [`T& r = std::forward<U>(u)] 的方式创建一个变量，再
构造一个存储指代 [`r] 的引用的 [`reference_wrapper] 对象。
[div:end]

[%@lib@ctor reference_wrapper]
[codeblock:declaration]
constexpr reference_wrapper(const reference_wrapper& x) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Constructs a [`reference_wrapper] object that stores a reference to
[`x.get()].
[:zh_CN] 构造一个存储指代 [`x.get()] 的引用的 [`reference_wrapper] 对象。
[div:end]
