[section#expected.void.assign
    [:en] Assignment
    [:zh_CN] 赋值
]

[%@lib@member operator=[!expected<void>]]
[codeblock:declaration]
constexpr expected& operator=(const expected& rhs);
[codeblock:end]

[div:description]
[para:effects]
[list]
[item]
[:en] If [`this->has_value() && rhs.has_value()] is [`true], no effects.
[:zh_CN] 如果 [`this->has_value() && rhs.has_value()] 为 [`true]，则没有效果。
[item]
[:en] Otherwise, if [`this->has_value()] is [`true], equivalent to:
[`construct_at(addressof([*unex]), rhs.[*unex]); [*has_val] = false;]
[:zh_CN] 否则，如果 [`this->has_value()] 为 [`true]，则等价于：
[`construct_at(addressof([*unex]), rhs.[*unex]); [*has_val] = false;]
[item]
[:en] Otherwise, if [`rhs.has_value()] is [`true], destroys [*unex] and sets
[*has_val] to [`true].
[:zh_CN] 否则，如果 [`rhs.has_value()] 为 [`true]，则销毁 [*unex] 并将 [*has_val]
设值为 [`true]。
[item]
[:en] Otherwise, equivalent to [`[*unex] = rhs.error()].
[:zh_CN] 否则，等价于 [`[*unex] = rhs.error()]。
[list:end]

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。

[para:remarks]
[:en] This operator is defined as deleted unless [`is_copy_assignable_v<E>] is
[`true] and [`is_copy_constructible_v<E>] is [`true].
[:zh_CN] 本运算符被定义为弃置的，除非 [`is_copy_assignable_v<E>] 为 [`true] 且
[`is_copy_constructible_v<E>] 为 [`true]。
[div:end]

[%@lib@member operator=[!expected<void>]]
[codeblock:declaration]
constexpr expected& operator=(expected&& rhs) noexcept([[redoc("[=seebelow]")]]);
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`is_move_constructible_v<E>] is [`true] and [`is_move_assignable_v<E>] is
[`true].
[:zh_CN] [`is_move_constructible_v<E>] 为 [`true] 且 [`is_move_assignable_v<E>]
为 [`true]。

[para:effects]
[list]
[item]
[:en] If [`this->has_value() && rhs.has_value()] is [`true], no effects.
[:zh_CN] 如果 [`this->has_value() && rhs.has_value()] 为 [`true]，则没有效果。
[item]
[:en] Otherwise, if [`this->has_value()] is [`true], equivalent to:
[:zh_CN] 否则，如果 [`this->has_value()] 为 [`true]，则等价于：
[codeblock]
construct_at(addressof([[redoc("*>")]]unex), std::move(rhs.[[redoc("*>")]]unex));
[[redoc("*>")]]has_val = false;
[codeblock:end]
[item]
[:en] Otherwise, if [`rhs.has_value()] is [`true], destroys [*unex] and sets
[*has_val] to [`true].
[:zh_CN] 否则，如果 [`rhs.has_value()] 为 [`true]，则销毁 [*unex] 并将 [*has_val]
设值为 [`true]。
[item]
[:en] Otherwise, equivalent to [`[*unex] = std::move(rhs.error())].
[:zh_CN] 否则，等价于 [`[*unex] = std::move(rhs.error())]。
[list:end]

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。

[para:remarks]
[:en] The exception specification is equivalent to
[`is_nothrow_move_assignable_v<E> && is_nothrow_move_constructible_v<E>].
[:zh_CN] 其异常说明等价于
[`is_nothrow_move_assignable_v<E> && is_nothrow_move_constructible_v<E>]。
[div:end]

[%@lib@member operator=[!expected<void>]]
[codeblock:declaration]
template<class G>
  constexpr expected& operator=(const unexpected<G>& e);
template<class G>
  constexpr expected& operator=(unexpected<G>&& e);
[codeblock:end]

[div:description]
[para]
[:en] Let [`GF] be [`const G&] for the first overload and [`G] for the second
overload.
[:zh_CN] 令 [`GF] 对于第一个重载为 [`const G&]，而对于第二个重载为 [`G]。

[para:constraints]
[:en] [`is_constructible_v<E, GF>] is [`true] and [`is_assignable_v<E&, GF>] is
[`true].
[:zh_CN] [`is_constructible_v<E, GF>] 为 [`true] 且 [`is_assignable_v<E&, GF>]
为 [`true]。

[para:effects]
[list]
[item]
[:en] If [`has_value()] is [`true], equivalent to:
[:zh_CN] 如果 [`has_value()] 为 [`true]，则等价于：
[codeblock]
construct_at(addressof([[redoc("*>")]]unex), std::forward<GF>(e.error()));
[[redoc("*>")]]has_val = false;
[codeblock:end]
[item]
[:en] Otherwise, equivalent to: [`[*unex] = std::forward<GF>(e.error());]
[:zh_CN] 否则，等价于：[`[*unex] = std::forward<GF>(e.error());]
[list:end]

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@lib@member emplace[!expected<void>]]
[codeblock:declaration]
constexpr void emplace() noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] If [`has_value()] is [`false], destroys [*unex] and sets [*has_val] to
[`true].
[:zh_CN] 如果 [`has_value()] 为 [`false]，则销毁 [*unex] 并将 [*has_val] 设值为
[`true]。
[div:end]
