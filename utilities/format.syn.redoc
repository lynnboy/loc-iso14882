[section#format.syn
    [:en] Header [`<format>] synopsis
    [:zh_CN] 头文件 [`<format>] 纲要
]

[%@hdr@def format]
[%@lib format_parse_context]
[%@lib wformat_parse_context]
[%@lib format_context]
[%@lib wformat_context]
[%@lib format_args]
[%@lib wformat_args]
[%@lib format_args_t]
[%@lib format_to_n_result]
[%@lib@member out[!format_to_n_result]]
[%@lib@member size[!format_to_n_result]]
[codeblock:synopsis]
namespace std {
  // [:en] [#format.context], class template [`basic_format_context] \
  [:zh_CN] [#format.context]，类模板 [`basic_format_context]
  template<class Out, class charT> class basic_format_context;
  using format_context = basic_format_context<[[redoc("[=unspec]")]], char>;
  using wformat_context = basic_format_context<[[redoc("[=unspec]")]], wchar_t>;

  // [:en] [#format.args], class template [`basic_format_args] \
  [:zh_CN] [#format.args]，类模板 [`basic_format_args]
  template<class Context> class basic_format_args;
  using format_args = basic_format_args<format_context>;
  using wformat_args = basic_format_args<wformat_context>;

  // [:en] [#format.fmt.string], class template [*basic-format-string] \
  [:zh_CN] [#format.fmt.string]，类模板 [*basic-format-string]
  template<class charT, class... Args>
    struct [[redoc("*>")]]basic-format-string;                       // [=expos]

  template<class... Args>
    using [[redoc("*>")]]format-string =                             // [=expos]
      [[redoc("*>")]]basic-format-string<char, type_identity_t<Args>...>;
  template<class... Args>
    using [[redoc("*>")]]wformat-string =                            // [=expos]
      [[redoc("*>")]]basic-format-string<wchar_t, type_identity_t<Args>...>;

  // [:en] [#format.functions], formatting functions \
  [:zh_CN] [#format.functions]，格式化函数
  template<class... Args>
    string format([[redoc("*>")]]format-string<Args...> fmt, const Args&... args);
  template<class... Args>
    wstring format([[redoc("*>")]]wformat-string<Args...> fmt, const Args&... args);
  template<class... Args>
    string format(const locale& loc, [[redoc("*>")]]format-string<Args...> fmt, const Args&... args);
  template<class... Args>
    wstring format(const locale& loc, [[redoc("*>")]]wformat-string<Args...> fmt, const Args&... args);

  string vformat(string_view fmt, format_args args);
  wstring vformat(wstring_view fmt, wformat_args args);
  string vformat(const locale& loc, string_view fmt, format_args args);
  wstring vformat(const locale& loc, wstring_view fmt, wformat_args args);

  template<class Out, class... Args>
    Out format_to(Out out, [[redoc("*>")]]format-string<Args...> fmt, const Args&... args);
  template<class Out, class... Args>
    Out format_to(Out out, [[redoc("*>")]]wformat-string<Args...> fmt, const Args&... args);
  template<class Out, class... Args>
    Out format_to(Out out, const locale& loc, [[redoc("*>")]]format-string<Args...> fmt, const Args&... args);
  template<class Out, class... Args>
    Out format_to(Out out, const locale& loc, [[redoc("*>")]]wformat-string<Args...> fmt, const Args&... args);

  template<class Out>
    Out vformat_to(Out out, string_view fmt, format_args args);
  template<class Out>
    Out vformat_to(Out out, wstring_view fmt, wformat_args args);
  template<class Out>
    Out vformat_to(Out out, const locale& loc, string_view fmt, format_args args);
  template<class Out>
    Out vformat_to(Out out, const locale& loc, wstring_view fmt, wformat_args args);

  template<class Out> struct format_to_n_result {
    Out out;
    iter_difference_t<Out> size;
  };
  template<class Out, class... Args>
    format_to_n_result<Out> format_to_n(Out out, iter_difference_t<Out> n,
                                        [[redoc("*>")]]format-string<Args...> fmt, const Args&... args);
  template<class Out, class... Args>
    format_to_n_result<Out> format_to_n(Out out, iter_difference_t<Out> n,
                                        [[redoc("*>")]]wformat-string<Args...> fmt, const Args&... args);
  template<class Out, class... Args>
    format_to_n_result<Out> format_to_n(Out out, iter_difference_t<Out> n,
                                        const locale& loc, [[redoc("*>")]]format-string<Args...> fmt,
                                        const Args&... args);
  template<class Out, class... Args>
    format_to_n_result<Out> format_to_n(Out out, iter_difference_t<Out> n,
                                        const locale& loc, [[redoc("*>")]]wformat-string<Args...> fmt,
                                        const Args&... args);

  template<class... Args>
    size_t formatted_size([[redoc("*>")]]format-string<Args...> fmt, const Args&... args);
  template<class... Args>
    size_t formatted_size([[redoc("*>")]]wformat-string<Args...> fmt, const Args&... args);
  template<class... Args>
    size_t formatted_size(const locale& loc, [[redoc("*>")]]format-string<Args...> fmt, const Args&... args);
  template<class... Args>
    size_t formatted_size(const locale& loc, [[redoc("*>")]]wformat-string<Args...> fmt, const Args&... args);

  // [:en] [#format.formatter], formatter \
  [:zh_CN] [#format.formatter]，格式化器
  template<class T, class charT = char> struct formatter;

  // [:en] [#format.parse.ctx], class template [`basic_format_parse_context] \
  [:zh_CN] [#format.parse.ctx]，类模板 [`basic_format_parse_context]
  template<class charT> class basic_format_parse_context;
  using format_parse_context = basic_format_parse_context<char>;
  using wformat_parse_context = basic_format_parse_context<wchar_t>;

  // [:en] [#format.arguments], arguments \
  [:zh_CN] [#format.arguments]，实参
  // [:en] [#format.arg], class template [`basic_format_arg] \
  [:zh_CN] [#format.arg]，类模板 [`basic_format_arg]
  template<class Context> class basic_format_arg;

  template<class Visitor, class Context>
    decltype(auto) visit_format_arg(Visitor&& vis, basic_format_arg<Context> arg);

  // [:en] [#format.arg.store], class template [*format-arg-store] \
  [:zh_CN] [#format.arg.store]，类模板 [*format-arg-store]
  template<class Context, class... Args> class [[redoc("^>")]]format-arg-store;       // [=expos]

  template<class Context = format_context, class... Args>
    [[redoc("^>")]]format-arg-store<Context, Args...>
      make_format_args(const Args&... fmt_args);
  template<class... Args>
    [[redoc("^>")]]format-arg-store<wformat_context, Args...>
      make_wformat_args(const Args&... args);

  // [:en] [#format.error], class [`format_error] \
  [:zh_CN] [#format.error]，类 [`format_error]
  class format_error;
}
[codeblock:end]

[para]
[:en]
The class template [`format_to_n_result] has the template parameters, data
members, and special members specified above.
[:zh_CN]
类模板 [`format_to_n_result] 具有以上所指定的模板形参，数据成员，和特殊成员。

[:en]
It has no base classes or members other than those specified.
[:zh_CN]
它没有基类或除了所指定之外的其他成员。
