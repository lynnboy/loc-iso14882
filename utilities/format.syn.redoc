[section#format.syn
    [:en] Header [`<format>] synopsis
    [:zh_CN] 头文件 [`<format>] 纲要
]

[%@header format]
[%format_parse_context]
[%wformat_parse_context]
[%format_context]
[%wformat_context]
[%format_args]
[%wformat_args]
[%format_args_t]
[%format_to_n_result]
[%out[!format_to_n_result]]
[%format_to_n_result[!out]]
[%size[!format_to_n_result]]
[%format_to_n_result[!size]]
[codeblock:synopsis]
namespace std {
  // [:en] [#format.functions], formatting functions
  // [|:zh_CN] [#format.functions]，格式化函数
  template<class... Args>
    string format(string_view fmt, const Args&... args);
  template<class... Args>
    wstring format(wstring_view fmt, const Args&... args);
  template<class... Args>
    string format(const locale& loc, string_view fmt, const Args&... args);
  template<class... Args>
    wstring format(const locale& loc, wstring_view fmt, const Args&... args);

  string vformat(string_view fmt, format_args args);
  wstring vformat(wstring_view fmt, wformat_args args);
  string vformat(const locale& loc, string_view fmt, format_args args);
  wstring vformat(const locale& loc, wstring_view fmt, wformat_args args);

  template<class Out, class... Args>
    Out format_to(Out out, string_view fmt, const Args&... args);
  template<class Out, class... Args>
    Out format_to(Out out, wstring_view fmt, const Args&... args);
  template<class Out, class... Args>
    Out format_to(Out out, const locale& loc, string_view fmt, const Args&... args);
  template<class Out, class... Args>
    Out format_to(Out out, const locale& loc, wstring_view fmt, const Args&... args);

  template<class Out>
    Out vformat_to(Out out, string_view fmt, format_args_t<Out, char> args);
  template<class Out>
    Out vformat_to(Out out, wstring_view fmt, format_args_t<Out, wchar_t> args);
  template<class Out>
    Out vformat_to(Out out, const locale& loc, string_view fmt,
                   format_args_t<Out, char> args);
  template<class Out>
    Out vformat_to(Out out, const locale& loc, wstring_view fmt,
                   format_args_t<Out, wchar_t> args);

  template<class Out> struct format_to_n_result {
    Out out;
    iter_difference_t<Out> size;
  };
  template<class Out, class... Args>
    format_to_n_result<Out> format_to_n(Out out, iter_difference_t<Out> n,
                                        string_view fmt, const Args&... args);
  template<class Out, class... Args>
    format_to_n_result<Out> format_to_n(Out out, iter_difference_t<Out> n,
                                        wstring_view fmt, const Args&... args);
  template<class Out, class... Args>
    format_to_n_result<Out> format_to_n(Out out, iter_difference_t<Out> n,
                                        const locale& loc, string_view fmt,
                                        const Args&... args);
  template<class Out, class... Args>
    format_to_n_result<Out> format_to_n(Out out, iter_difference_t<Out> n,
                                        const locale& loc, wstring_view fmt,
                                        const Args&... args);

  template<class... Args>
    size_t formatted_size(string_view fmt, const Args&... args);
  template<class... Args>
    size_t formatted_size(wstring_view fmt, const Args&... args);
  template<class... Args>
    size_t formatted_size(const locale& loc, string_view fmt, const Args&... args);
  template<class... Args>
    size_t formatted_size(const locale& loc, wstring_view fmt, const Args&... args);

  // [:en] [#format.formatter], formatter
  // [|:zh_CN] [#format.formatter]，格式化器
  template<class T, class charT = char> struct formatter;

  // [:en] [#format.parse.ctx], class template [`basic_format_parse_context]
  // [|:zh_CN] [#format.parse.ctx]，类模板 [`basic_format_parse_context]
  template<class charT> class basic_format_parse_context;
  using format_parse_context = basic_format_parse_context<char>;
  using wformat_parse_context = basic_format_parse_context<wchar_t>;

  template<class Out, class charT> class basic_format_context;
  using format_context = basic_format_context<[=UnSpec], char>;
  using wformat_context = basic_format_context<[=UnSpec], wchar_t>;

  // [:en] [#format.arguments], arguments
  // [|:zh_CN] [#format.arguments]，实参
  // [:en] [#format.arg], class template [`basic_format_arg]
  // [|:zh_CN] [#format.arg]，类模板 [`basic_format_arg]
  template<class Context> class basic_format_arg;

  template<class Visitor, class Context>
    [=SeeBelow] visit_format_arg(Visitor&& vis, basic_format_arg<Context> arg);

  // [:en] [#format.arg.store], class template [`format-arg-store]
  // [|:zh_CN] [#format.arg.store]，类模板 [`format-arg-store]
  template<class Context, class... Args> struct [*format-arg-store];      // [=Expos]

  template<class Context = format_context, class... Args>
    [*format-arg-store]<Context, Args...>
      make_format_args(const Args&... args);
  template<class... Args>
    [*format-arg-store]<wformat_context, Args...>
      make_wformat_args(const Args&... args);

  // [:en] [#format.args], class template [`basic_format_args]
  // [|:zh_CN] [#format.args]，类模板 [`basic_format_args]
  template<class Context> class basic_format_args;
  using format_args = basic_format_args<format_context>;
  using wformat_args = basic_format_args<wformat_context>;

  template<class Out, class charT>
    using format_args_t = basic_format_args<basic_format_context<Out, charT>>;

  // [:en] [#format.error], class [`format_error]
  // [|:zh_CN] [#format.error]，类 [`format_error]
  class format_error;
}
[codeblock:end]
