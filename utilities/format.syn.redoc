[section#format.syn
    [:en] Header [`<format>] synopsis
    [:zh_CN] 头文件 [`<format>] 纲要
]

[%@hdr@def format]
[%@lib format_parse_context]
[%@lib wformat_parse_context]
[%@lib format_context]
[%@lib wformat_context]
[%@lib format_args]
[%@lib wformat_args]
[%@lib format_to_n_result]
[%@lib@member out[!format_to_n_result]]
[%@lib@member size[!format_to_n_result]]
[codeblock:synopsis]
namespace std {
  // [:en] [#format.context], class template [`basic_format_context] \
  [:zh_CN] [#format.context]，类模板 [`basic_format_context]
  template<class Out, class charT> class basic_format_context;
  using format_context = basic_format_context<[[redoc("[=unspec]")]], char>;
  using wformat_context = basic_format_context<[[redoc("[=unspec]")]], wchar_t>;

  // [:en] [#format.args], class template [`basic_format_args] \
  [:zh_CN] [#format.args]，类模板 [`basic_format_args]
  template<class Context> class basic_format_args;
  using format_args = basic_format_args<format_context>;
  using wformat_args = basic_format_args<wformat_context>;

  // [:en] [#format.fmt.string], class template [`basic_format_string] \
  [:zh_CN] [#format.fmt.string]，类模板 [`basic_format_string]
  template<class charT, class... Args>
    struct basic_format_string;

  template<class charT> struct [[redoc("*>")]]runtime-format-string {                  // [=expos]
  private:
    basic_string_view<charT> [[redoc("*>")]]str;                                       // [=expos]
  public:
    [[redoc("*>")]]runtime-format-string(basic_string_view<charT> s) noexcept : [[redoc("*>")]]str(s) {}
    [[redoc("*>")]]runtime-format-string(const [[redoc("*>")]]runtime-format-string&) = delete;
    [[redoc("*>")]]runtime-format-string& operator=(const [[redoc("*>")]]runtime-format-string&) = delete;
  };
  [[redoc("*>")]]runtime-format-string<char> runtime_format(string_view fmt) noexcept { return fmt; }
  [[redoc("*>")]]runtime-format-string<wchar_t> runtime_format(wstring_view fmt) noexcept { return fmt; }

  template<class... Args>
    using [[redoc("`:lib")]]format_string = basic_format_string<char, type_identity_t<Args>...>;
  template<class... Args>
    using [[redoc("`:lib")]]wformat_string = basic_format_string<wchar_t, type_identity_t<Args>...>;

  // [:en] [#format.functions], formatting functions \
  [:zh_CN] [#format.functions]，格式化函数
  template<class... Args>
    string format(format_string<Args...> fmt, Args&&... args);
  template<class... Args>
    wstring format(wformat_string<Args...> fmt, Args&&... args);
  template<class... Args>
    string format(const locale& loc, format_string<Args...> fmt, Args&&... args);
  template<class... Args>
    wstring format(const locale& loc, wformat_string<Args...> fmt, Args&&... args);

  string vformat(string_view fmt, format_args args);
  wstring vformat(wstring_view fmt, wformat_args args);
  string vformat(const locale& loc, string_view fmt, format_args args);
  wstring vformat(const locale& loc, wstring_view fmt, wformat_args args);

  template<class Out, class... Args>
    Out format_to(Out out, format_string<Args...> fmt, Args&&... args);
  template<class Out, class... Args>
    Out format_to(Out out, wformat_string<Args...> fmt, Args&&... args);
  template<class Out, class... Args>
    Out format_to(Out out, const locale& loc, format_string<Args...> fmt, Args&&... args);
  template<class Out, class... Args>
    Out format_to(Out out, const locale& loc, wformat_string<Args...> fmt, Args&&... args);

  template<class Out>
    Out vformat_to(Out out, string_view fmt, format_args args);
  template<class Out>
    Out vformat_to(Out out, wstring_view fmt, wformat_args args);
  template<class Out>
    Out vformat_to(Out out, const locale& loc, string_view fmt, format_args args);
  template<class Out>
    Out vformat_to(Out out, const locale& loc, wstring_view fmt, wformat_args args);

  template<class Out> struct format_to_n_result {
    Out out;
    iter_difference_t<Out> size;
  };
  template<class Out, class... Args>
    format_to_n_result<Out> format_to_n(Out out, iter_difference_t<Out> n,
                                        format_string<Args...> fmt, Args&&... args);
  template<class Out, class... Args>
    format_to_n_result<Out> format_to_n(Out out, iter_difference_t<Out> n,
                                        wformat_string<Args...> fmt, Args&&... args);
  template<class Out, class... Args>
    format_to_n_result<Out> format_to_n(Out out, iter_difference_t<Out> n,
                                        const locale& loc, format_string<Args...> fmt,
                                        Args&&... args);
  template<class Out, class... Args>
    format_to_n_result<Out> format_to_n(Out out, iter_difference_t<Out> n,
                                        const locale& loc, wformat_string<Args...> fmt,
                                        Args&&... args);

  template<class... Args>
    size_t formatted_size(format_string<Args...> fmt, Args&&... args);
  template<class... Args>
    size_t formatted_size(wformat_string<Args...> fmt, Args&&... args);
  template<class... Args>
    size_t formatted_size(const locale& loc, format_string<Args...> fmt, Args&&... args);
  template<class... Args>
    size_t formatted_size(const locale& loc, wformat_string<Args...> fmt, Args&&... args);

  // [:en] [#format.formatter], formatter \
  [:zh_CN] [#format.formatter]，格式化器
  template<class T, class charT = char> struct formatter;

  // [:en] [#format.formatter.locking], formatter locking \
  [:zh_CN] [#format.formatter.locking]，格式化器的锁定
  template<class T>
    constexpr bool enable_nonlocking_formatter_optimization = false;

  // [:en] [#format.formattable], concept [`:c formattable] \
  [:zh_CN] [#format.formattable]，概念 [`:c formattable]
  template<class T, class charT>
    concept formattable = [[redoc("[=seebelow]")]];

  template<class R, class charT>
    concept [[redoc("*:c@def>")]]const-formattable-range =                                   // [=expos]
      ranges::[[redoc("`:c>")]]input_range<const R> &&
      [[redoc("`:c>")]]formattable<ranges::range_reference_t<const R>, charT>;

  template<class R, class charT>
    using [[redoc("*>")]]fmt-maybe-const =                                             // [=expos]
      conditional_t<[[redoc("*:c>")]]const-formattable-range<R, charT>, const R, R>;

  // [:en] [#format.parse.ctx], class template [`basic_format_parse_context] \
  [:zh_CN] [#format.parse.ctx]，类模板 [`basic_format_parse_context]
  template<class charT> class basic_format_parse_context;
  using format_parse_context = basic_format_parse_context<char>;
  using wformat_parse_context = basic_format_parse_context<wchar_t>;

  // [:en] [#format.range], formatting of ranges \
  [:zh_CN] [#format.range]，范围的格式化
  // [:en] [#format.range.fmtkind], variable template [`format_kind] \
  [:zh_CN] [#format.range.fmtkind]，变量模板 [`format_kind]
  enum class [[redoc("`:lib>")]]range_format {
    [[redoc("[%@lib@member disabled[!range_format]]")]]disabled,
    [[redoc("[%@lib@member map[!range_format]]")]]map,
    [[redoc("[%@lib@member set[!range_format]]")]]set,
    [[redoc("[%@lib@member sequence[!range_format]]")]]sequence,
    [[redoc("[%@lib@member string[!range_format]]")]]string,
    [[redoc("[%@lib@member debug_string[!range_format]]")]]debug_string
  };

  template<class R>
    constexpr [[redoc("[=unspec]")]] format_kind = [[redoc("[=unspec]")]];

  template<ranges::[[redoc("`:c>")]]input_range R>
      requires [[redoc("`:c>")]]same_as<R, remove_cvref_t<R>>
    constexpr range_format format_kind<R> = [[redoc("[=seebelow]")]];

  // [:en] [#format.range.formatter], class template [`range_formatter] \
  [:zh_CN] [#format.range.formatter]，类模板 [`range_formatter]
  template<class T, class charT = char>
    requires [[redoc("`:c>")]]same_as<remove_cvref_t<T>, T> && [[redoc("`:c>")]]formattable<T, charT>
  class range_formatter;

  // [:en] [#format.range.fmtdef], class template [*range-default-formatter] \
  [:zh_CN] [#format.range.fmtdef]，类模板 [*range-default-formatter]
  template<range_format K, ranges::[[redoc("`:c>")]]input_range R, class charT>
    struct [[redoc("*>")]]range-default-formatter;                                     // [=expos]

  // [:en] [#format.range.fmtmap], [#format.range.fmtset], [#format.range.fmtstr], specializations for maps, sets, and strings \
  [:zh_CN] [#format.range.fmtmap]，[#format.range.fmtset]，[#format.range.fmtstr]，针对各种映射、集合和字符串的特化式
  template<ranges::[[redoc("`:c>")]]input_range R, class charT>
    requires (format_kind<R> != range_format::disabled) &&
             [[redoc("`:c>")]]formattable<ranges::range_reference_t<R>, charT>
  struct formatter<R, charT> : [[redoc("*>")]]range-default-formatter<format_kind<R>, R, charT> { };

  template<ranges::input_range R>
      requires (format_kind<R> != range_format::disabled)
    inline constexpr bool enable_nonlocking_formatter_optimization<R> = false;

  // [:en] [#format.arguments], arguments \
  [:zh_CN] [#format.arguments]，实参
  // [:en] [#format.arg], class template [`basic_format_arg] \
  [:zh_CN] [#format.arg]，类模板 [`basic_format_arg]
  template<class Context> class basic_format_arg;

  // [:en] [#format.arg.store], class template [*format-arg-store] \
  [:zh_CN] [#format.arg.store]，类模板 [*format-arg-store]
  template<class Context, class... Args> class [[redoc("*>")]]format-arg-store;       // [=expos]

  template<class Context = format_context, class... Args>
    [[redoc("*>")]]format-arg-store<Context, Args...>
      make_format_args(Args&... fmt_args);
  template<class... Args>
    [[redoc("*>")]]format-arg-store<wformat_context, Args...>
      make_wformat_args(Args&... args);

  // [:en] [#format.error], class [`format_error] \
  [:zh_CN] [#format.error]，类 [`format_error]
  class format_error;
}
[codeblock:end]

[para]
[:en]
The class template [`format_to_n_result] has the template parameters, data
members, and special members specified above.
[:zh_CN]
类模板 [`format_to_n_result] 具有以上所指定的模板形参，数据成员，和特殊成员。

[:en]
It has no base classes or members other than those specified.
[:zh_CN]
它没有基类或除了所指定之外的其他成员。
