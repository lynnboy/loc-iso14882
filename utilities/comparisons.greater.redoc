[section#comparisons.greater
    [:en] Class template [`greater]
    [:zh_CN] 类模板 [`greater]
]

[%@library greater]
[codeblock:declaration]
template<class T = void> struct greater {
  constexpr bool operator()(const T& x, const T& y) const;
};
[codeblock:end]

[%@library operator()[!greater]]
[%@library greater[!operator()]]
[codeblock:declaration]
constexpr bool operator()(const T& x, const T& y) const;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`x > y].
[:zh_CN] [`x > y]。
[exit:description]

[%@library greater<>]
[codeblock:declaration [!:mark UnSpec] ]
template<> struct greater<void> {
  template<class T, class U> constexpr auto operator()(T&& t, U&& u) const
    -> decltype(std::forward<T>(t) > std::forward<U>(u));

  using is_transparent = [=UnSpec];
};
[codeblock:end]

[%@library operator()[!greater<>]]
[%@library greater<>[!operator()]]
[codeblock:declaration]
template<class T, class U> constexpr auto operator()(T&& t, U&& u) const
    -> decltype(std::forward<T>(t) > std::forward<U>(u));
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`std::forward<T>(t) > std::forward<U>(u)].
[:zh_CN] [`std::forward<T>(t) > std::forward<U>(u)]。
[exit:description]
