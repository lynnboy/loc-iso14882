[section#format.range.formatter
    [:en] Class template [`range_formatter]
    [:zh_CN] 类模板 [`range_formatter]
]

[%@lib range_formatter]
[codeblock:synopsis]
namespace std {
  template<class T, class charT = char>
    requires [[redoc("`:c>")]]same_as<remove_cvref_t<T>, T> && [[redoc("`:c>")]]formattable<T, charT>
  class range_formatter {
    formatter<T, charT> [[redoc("*>")]]underlying_;                                          // [=expos]
    basic_string_view<charT> [[redoc("*>")]]separator_ = [[redoc("*>")]]STATICALLY-WIDEN<charT>(", ");      // [=expos]
    basic_string_view<charT> [[redoc("*>")]]opening-bracket_ = [[redoc("*>")]]STATICALLY-WIDEN<charT>("["); // [=expos]
    basic_string_view<charT> [[redoc("*>")]]closing-bracket_ = [[redoc("*>")]]STATICALLY-WIDEN<charT>("]"); // [=expos]

  public:
    constexpr void set_separator(basic_string_view<charT> sep) noexcept;
    constexpr void set_brackets(basic_string_view<charT> opening,
                                basic_string_view<charT> closing) noexcept;
    constexpr formatter<T, charT>& underlying() noexcept { return [[redoc("*>")]]underlying_; }
    constexpr const formatter<T, charT>& underlying() const noexcept { return [[redoc("*>")]]underlying_; }

    template<class ParseContext>
      constexpr typename ParseContext::iterator
        parse(ParseContext& ctx);

    template<ranges::[[redoc("`:c>")]]input_range R, class FormatContext>
        requires [[redoc("`:c>")]]formattable<ranges::range_reference_t<R>, charT> &&
                 [[redoc("`:c>")]]same_as<remove_cvref_t<ranges::range_reference_t<R>>, T>
      typename FormatContext::iterator
        format(R&& r, FormatContext& ctx) const;
  };
}
[codeblock:end]

[para]
[:en] The class template [`range_formatter] is a utility for implementing
[`formatter] specializations for range types.
[:zh_CN] 类模板 [`range_formatter] 是用于实现针对范围类型的 [`formatter] 特化式
的辅助工具。

[para]
[:en] [`range_formatter] interprets [~@fmt format-spec] as a
[~@fmt range-format-spec].
[:zh_CN] [`range_formatter] 将[~@fmt 格式说明]作为[~@fmt 范围格式说明]来解释。

[:en] The syntax of format specifications is as follows:
[:zh_CN] 格式说明的语法如下：

[syntax]
[rule@fmt range-format-spec [:zh_CN] 范围格式说明 ]
    [| [~:opt range-fill-and-align] [~:opt width] [`:opt n] [~:opt range-type] [~:opt range-underlying-spec] ]
[rule:end]

[rule@fmt range-fill-and-align [:zh_CN] 范围填充与对齐 ]
    [| [~:opt range-fill] align ]
[rule:end]

[rule@fmt range-fill [:zh_CN] 范围填充 ]
    [|:descriptive
        [:en] any character other than [`{] or [`}] or [`:]
        [:zh_CN] 除 [`{]，[`}]，或 [`:] 外的任意字符
    ]
[rule:end]

[rule:oneof@fmt range-type [:zh_CN] 范围类型 ]
    [| [`m] ]
    [| [`s] ]
    [| [`?s] ]
[rule:end]

[rule:oneof@fmt range-underlying-spec [:zh_CN] 范围底层说明 ]
    [| [`:] format-spec ]
[rule:end]
[syntax:end]

[para]
[:en] For [`range_formatter<T, charT>], the [~@fmt format-spec] in a
[~@fmt range-underlying-spec], if any, is interpreted by [`formatter<T, charT>].
[:zh_CN] 对于 [`range_formatter<T, charT>]，将[~@fmt 范围底层说明]中的
[~@fmt 格式说明]（如果有），由 [`formatter<T, charT>] 进行解释。

[para]
[:en] The [~@fmt range-fill-and-align] is interpreted the same way as a
[~@fmt fill-and-align] ([#format.string.std]).
[:zh_CN] [~@fmt 范围填充与对齐]与[~@fmt 填充与对齐]的解释方式相同
（[#format.string.std]）。

[:en] The productions [~@fmt align] and [~@fmt width] are described in
[#format.string].
[:zh_CN] 产生式[~@fmt 对齐]和[~@fmt 宽度]在 [#format.string] 中描述。

[para]
[:en] The [`n] option causes the range to be formatted without the opening and
closing brackets.
[:zh_CN] [`n] 选项导致格式化范围时不适用打开和闭合花括号。

[begin:note 1]
[:en] This is equivalent to invoking [`set_brackets({}, {})].
[:zh_CN] 这等价于调用 [`set_brackets({}, {})]。
[end:note]

[para]
[:en] The [~@fmt range-type] specifier changes the way a range is formatted,
with certain options only valid with certain argument types.
[:zh_CN] [~@fmt 范围类型]说明符改变范围格式化的方式，一些选项仅对某些实参类型
有效。

[:en] The meaning of the various type options is as specified in
[#:tab#formatter.range.type].
[:zh_CN] 各种类型选项的含义在 [#:tab#formatter.range.type] 中给出。

[table:grid#formatter.range.type
    [:en] Meaning of [~@fmt range-type] options
    [:zh_CN] [~@fmt 范围类型]各选项的含义
    [|  [:en] Option
        [:zh_CN] 选项 ]
    [|  [:en] Requirements
        [:zh_CN] 规定 ]
    [|  [:en] Meaning
        [:zh_CN] 含义 ]
]
[|] [`m]
[|] [:en] [`T] shall be either a specialization of [`pair] or a specialization
    of [`tuple] such that [`tuple_size_v<T>] is [`2].
    [:zh_CN] [`T] 应当为 [`pair] 的特例，或者为 [`tuple] 的特例并使得
    [`tuple_size_v<T>] 为 [`2]。
[|] [:en] Indicates that the opening bracket should be [`"{"], the closing
    bracket should be [`"}"], the separator should be [`", "], and each range
    element should be formatted as if [`m] were specified for its
    [~@fmt tuple-type].
    [:zh_CN] 指定打开花括号应当为 [`"{"]，闭合花括号应当为 [`"}"]，分隔符应当为
    [`", "]，且各个范围元素应当如同其[~@fmt 元组类型]指定了 [`m] 那样进行格式化。
    
    [begin:note@tail]
    [:en] If the [`n] option is provided in addition to the [`m] option, both
    the opening and closing brackets are still empty.
    [:zh_CN] 如果在给出 [`m] 选项时还提供 [`n] 选项，则打开和闭合花括号仍为空。
    [end:note]
[-]
[|] [`s]
[|] [:en] [`T] shall be [`charT].
    [:zh_CN] [`T] 应当为 [`charT]。
[|] [:en] Indicates that the range should be formatted as a [`string].
    [:zh_CN] 指定范围应当作为 [`string] 进行格式化。
[-]
[|] [`?s]
[|] [:en] [`T] shall be [`charT].
    [:zh_CN] [`T] 应当为 [`charT]。
[|] [:en] Indicates that the range should be formatted as an escaped string
    ([#format.string.escaped]).
    [:zh_CN] 指定范围应当作为经转义字符串（[#format.string.escaped]）进行格式化。
[-]
[table:end]

[para:~]
[:en] If the [~@fmt range-type] is [`s] or [`?s], then there shall be no [`n]
option and no [~@fmt range-underlying-spec].
[:zh_CN] 如果[~@fmt 范围类型]为 [`s] 或 [`?s]，则应当没有 [`n] 选项且没有
[~@fmt 范围底层说明]。

[%@lib@member set_separator[!range_formatter]]
[codeblock:declaration]
constexpr void set_separator(basic_string_view<charT> sep) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`[*separator_] = sep;]
[:zh_CN] 等价于：[`[*separator_] = sep;]
[div:end]

[%@lib@member set_brackets[!range_formatter]]
[codeblock:declaration]
constexpr void set_brackets(basic_string_view<charT> opening,
                            basic_string_view<charT> closing) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
[[redoc("*>")]]opening-bracket_ = opening;
[[redoc("*>")]]closing-bracket_ = closing;
[codeblock:end]
[div:end]

[%@lib@member parse[!range_formatter]]
[codeblock:declaration]
template<class ParseContext>
  constexpr typename ParseContext::iterator
    parse(ParseContext& ctx);
[codeblock:end]

[div:description]
[para:effects]
[:en] Parses the format specifiers as a [~@fmt range-format-spec] and stores the
parsed specifiers in [`*this].
[:zh_CN] 按[~@fmt 范围格式说明]解析格式说明符，并将解析到的各说明符存储于
[`*this] 中。

[:en] Calls [`[*underlying_].parse(ctx)] to parse [~@fmt format-spec] in
[~@fmt range-format-spec] or, if the latter is not present, an empty
[~@fmt format-spec].
[:zh_CN] 调用 [`[*underlying_].parse(ctx)] 来解析[~@fmt 范围格式说明]中的
 [~@fmt 格式说明]，或如果未给出前者时则采用空[~@fmt 格式说明]。

[:en] The values of [*opening-bracket_], [*closing-bracket_], and [*separator_]
are modified if and only if required by the [~@fmt range-type] or the [`n]
option, if present.
[:zh_CN] 当且仅当[~@fmt 范围类型]或 [`n] 选项（如果出现）需要时，修改
[*opening-bracket_]，[*closing-bracket_]，和 [*separator_] 的值。

[:en] If:
[:zh_CN] 如果：
[list]
[item]
[:en@~] the [~@fmt range-type] is neither [`s] nor [`?s],
[:zh_CN@~] [~@fmt 范围类型]既不是 [`s] 也不是 [`?s]，
[item]
[:en@~] [`[*underlying_].set_debug_format()] is a valid expression, and
[:zh_CN@~] [`[*underlying_].set_debug_format()] 是有效表达式，并且
[item]
[:en@~] there is no [~@fmt range-underlying-spec],
[:zh_CN@~] 没有[~@fmt 范围底层说明]，
[list:end]
[:en@~] then calls [`[*underlying_].set_debug_format()].
[:zh_CN@~] 则调用 [`[*underlying_].set_debug_format()]。

[para:returns]
[:en] An iterator past the end of the [~@fmt range-format-spec].
[:zh_CN] [~@fmt 范围格式说明]的越过末尾迭代器。
[div:end]

[%@lib@member format[!range_formatter]]
[codeblock:declaration]
template<ranges::[[redoc("`:c>")]]input_range R, class FormatContext>
    requires [[redoc("`:c>")]]formattable<ranges::range_reference_t<R>, charT> &&
             [[redoc("`:c>")]]same_as<remove_cvref_t<ranges::range_reference_t<R>>, T>
  typename FormatContext::iterator
    format(R&& r, FormatContext& ctx) const;
[codeblock:end]

[div:description]
[para:effects]
[:en] Writes the following into [`ctx.out()], adjusted according to the
[~@fmt range-format-spec]:
[:zh_CN] 将以下内容写入 [`ctx.out()]，并根据[~@fmt 范围格式说明]进行调整：

[list]
[item]
[:en] If the [~@fmt range-type] was [`s], then as if by formatting
[`basic_string<charT>(from_range, r)].
[:zh_CN] 当[~@fmt 范围类型]为 [`s] 时，如同对
[`basic_string<charT>(from_range, r)] 进行格式化。

[item]
[:en] Otherwise, if the [~@fmt range-type] was [`?s], then as if by formatting
[`basic_string<charT>(from_range, r)] as an escaped string
([#format.string.escaped]).
[:zh_CN] 否则，当[~@fmt 范围类型]为 [`?s] 时，如同对经转义字符串
（[#format.string.escaped]）的 [`basic_string<charT>(from_range, r)] 进行格式化。

[item]
[:en] Otherwise,
[:zh_CN] 否则，格式化
[list]
[item]
[:en@~] [*opening-bracket_],
[:zh_CN@~] [*opening-bracket_]，
[item]
[:en@~] for each element [`e] of the range [`r]:
[:zh_CN@~] 对范围 [`r] 中的每个元素 [`e]，格式化：
[list]
[item]
[:en@~] the result of writing [`e] via [*underlying_] and
[:zh_CN@~] 通过 [*underlying_] 写入 [`e] 的结果，和
[item]
[:en@~] [*separator_], unless [`e] is the last element of [`r], and
[:zh_CN@~] [*separator_]，除非 [`e] 是 [`r] 的最后一个元素，以及
[list:end]
[item]
[:en@~] [*closing-bracket_].
[:zh_CN@~] [*closing-bracket_]。
[list:end]
[list:end]

[para:returns]
[:en] An iterator past the end of the output range.
[:zh_CN] 输出范围的越过末尾迭代器。
[div:end]
