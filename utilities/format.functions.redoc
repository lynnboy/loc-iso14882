[section#format.functions
    [:en] Formatting functions
    [:zh_CN] 格式化函数
]

[para]
[:en] In the description of the functions, operator [`+] is used for some of the
iterator categories for which it does not have to be defined.
[:zh_CN] 以下函数的描述中，对于一些并不一定定义运算符 [`+] 的迭代器类别，也使用
了 [`+]。

[:en] In these cases the semantics of [`a + n] are the same as in
[#algorithms.requirements].
[:zh_CN] 这些情况下，[`a + n] 的语义与 [#algorithms.requirements] 中相同。

[%@lib format]
[codeblock:declaration]
template<class... Args>
  string format([[redoc("*>")]]format-string<Args...> fmt, Args&&... args);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return vformat(fmt.[[redoc("*>")]]str, make_format_args(args...));
[codeblock:end]
[div:end]

[%@lib format]
[codeblock:declaration]
template<class... Args>
  wstring format([[redoc("*>")]]wformat-string<Args...> fmt, Args&&... args);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return vformat(fmt.[[redoc("*>")]]str, make_wformat_args(args...));
[codeblock:end]
[div:end]

[%@lib format]
[codeblock:declaration]
template<class... Args>
  string format(const locale& loc, [[redoc("*>")]]format-string<Args...> fmt, Args&&... args);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return vformat(loc, fmt.[[redoc("*>")]]str, make_format_args(args...));
[codeblock:end]
[div:end]

[%@lib format]
[codeblock:declaration]
template<class... Args>
  wstring format(const locale& loc, [[redoc("*>")]]wformat-string<Args...> fmt, Args&&... args);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return vformat(loc, fmt.[[redoc("*>")]]str, make_wformat_args(args...));
[codeblock:end]
[div:end]

[%@lib vformat]
[codeblock:declaration]
string vformat(string_view fmt, format_args args);
wstring vformat(wstring_view fmt, wformat_args args);
string vformat(const locale& loc, string_view fmt, format_args args);
wstring vformat(const locale& loc, wstring_view fmt, wformat_args args);
[codeblock:end]

[div:description]
[para:returns]
[:en] A string object holding the character representation of formatting
arguments provided by [`args] formatted according to specifications given in
[`fmt].
[:zh_CN] 一个字符串对象，持有 [`args] 所提供的实参根据 [`fmt] 中给定的说明进行
格式化的字符表示。

[:en] If present, [`loc] is used for locale-specific formatting.
[:zh_CN] 当出现时，[`loc] 用于特定于地域的格式化。

[para:throws]
[:en] As specified in [#format.err.report].
[:zh_CN] 如 [#format.err.report] 所述。
[div:end]

[%@lib format_to]
[codeblock:declaration]
template<class Out, class... Args>
  Out format_to(Out out, [[redoc("*>")]]format-string<Args...> fmt, Args&&... args);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return vformat_to(out, fmt.[[redoc("*>")]]str, make_format_args(args...));
[codeblock:end]
[div:end]

[%@lib format_to]
[codeblock:declaration]
template<class Out, class... Args>
  Out format_to(Out out, [[redoc("*>")]]wformat-string<Args...> fmt, Args&&... args);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return vformat_to(std::move(out), fmt.[[redoc("*>")]]str, make_wformat_args(args...));
[codeblock:end]
[div:end]

[%@lib format_to]
[codeblock:declaration]
template<class Out, class... Args>
  Out format_to(Out out, const locale& loc, [[redoc("*>")]]format-string<Args...> fmt, Args&&... args);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return vformat_to(out, loc, fmt.[[redoc("*>")]]str, make_format_args(args...));
[codeblock:end]
[div:end]

[%@lib format_to]
[codeblock:declaration]
template<class Out, class... Args>
  Out format_to(Out out, const locale& loc, [[redoc("*>")]]wformat-string<Args...> fmt, Args&&... args);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return vformat_to(std::move(out), loc, fmt.[[redoc("*>")]]str, make_wformat_args(args...));
[codeblock:end]
[div:end]

[%@lib vformat_to]
[codeblock:declaration]
template<class Out>
  Out vformat_to(Out out, string_view fmt, format_args args);
template<class Out>
  Out vformat_to(Out out, wstring_view fmt, wformat_args args);
template<class Out>
  Out vformat_to(Out out, const locale& loc, string_view fmt, format_args args);
template<class Out>
  Out vformat_to(Out out, const locale& loc, wstring_view fmt, wformat_args args);
[codeblock:end]

[div:description]
[para]
[:en] Let [`charT] be [`decltype(fmt)::value_type].
[:zh_CN] 令 [`charT] 为 [`decltype(fmt)::value_type]。

[para:constraints]
[:en] [`Out] satisfies [`[`:c output_iterator]<const charT&>].
[:zh_CN] [`Out] 满足 [`[`:c output_iterator]<const charT&>]。

[para:expects]
[:en] [`Out] models [`[`:c output_iterator]<const charT&>].
[:zh_CN] [`Out] 构成 [`[`:c output_iterator]<const charT&>]。

[para:effects]
[:en] Places the character representation of formatting the arguments provided
by [`args], formatted according to the specifications given in [`fmt], into the
range [=range(out,out + N)], where [`N] is [`formatted_size(fmt, args...)] for
the functions without a [`loc] parameter and [`formatted_size(loc, fmt, args...)]
for the functions with a [`loc] parameter.
[:zh_CN] 将 [`args] 所提供的实参根据 [`fmt] 中给定的说明进行格式化的字符表示，
置入范围 [=range(out,out + N)] 中，其中 [`N] 对于没有 [`loc] 形参的函数为
[`formatted_size(fmt, args...)]，而对于带有 [`loc] 形参的函数为
[`formatted_size(loc, fmt, args...)]。

[:en] If present, [`loc] is used for locale-specific formatting.
[:zh_CN] 当出现时，[`loc] 用于特定于地域的格式化。

[para:returns]
[:en] [`out + N].
[:zh_CN] [`out + N]。

[para:throws]
[:en] As specified in [#format.err.report].
[:zh_CN] 如 [#format.err.report] 所述。
[div:end]

[%@lib format_to_n]
[codeblock:declaration]
template<class Out, class... Args>
  format_to_n_result<Out> format_to_n(Out out, iter_difference_t<Out> n,
                                      [[redoc("*>")]]format-string<Args...> fmt, Args&&... args);
template<class Out, class... Args>
  format_to_n_result<Out> format_to_n(Out out, iter_difference_t<Out> n,
                                      [[redoc("*>")]]wformat-string<Args...> fmt, Args&&... args);
template<class Out, class... Args>
  format_to_n_result<Out> format_to_n(Out out, iter_difference_t<Out> n,
                                      const locale& loc, [[redoc("*>")]]format-string<Args...> fmt,
                                      Args&&... args);
template<class Out, class... Args>
  format_to_n_result<Out> format_to_n(Out out, iter_difference_t<Out> n,
                                      const locale& loc, [[redoc("*>")]]wformat-string<Args...> fmt,
                                      Args&&... args);
[codeblock:end]

[div:description]
[para]
[:en] Let
[:zh_CN] 令：
[list]
[item]
[:en@~] [`charT] be [`decltype(fmt.[*str])::value_type],
[:zh_CN@~] [`charT] 为 [`decltype(fmt.[*str])::value_type]，
[item]
[:en@~] [`N] be [`formatted_size(fmt, args...)] for the functions without a
[`loc] parameter and [`formatted_size(loc, fmt, args...)] for the functions with
a [`loc] parameter, and
[:zh_CN@~] [`N] 对于没有 [`loc] 形参的函数为 [`formatted_size(fmt, args...)]，
而对于带有 [`loc] 形参的函数为 [`formatted_size(loc, fmt, args...)]。
[item]
[:en@~] [`M] be [`clamp(n, 0, N)].
[:zh_CN@~] [`M] 为 [`clamp(n, 0, N)]。
[list:end]

[para:constraints]
[:en] [`Out] satisfies [`[`:c output_iterator]<const charT&>].
[:zh_CN] [`Out] 满足 [`[`:c output_iterator]<const charT&>]。

[para:expects]
[:en] [`Out] models [`[`:c output_iterator]<const charT&>], and
[`formatter<remove_cvref_t<T[$_i]>, charT>] meets the [^:newoc BasicFormatter]
requirements ([#formatter.requirements]) for each [$[`T]_i] in [`Args].
[:zh_CN] [`Out] 构成 [`[`:c output_iterator]<const charT&>]，并且对于 [`Args] 中
的每个 [$[`T]_i]，[`formatter<remove_cvref_t<T[$_i]>, charT>] 都满足
[^:newoc BasicFormatter] 的规定（[#formatter.requirements]）。

[para:effects]
[:en] Places the first [`M] characters of the character representation of
formatting the arguments provided by [`args], formatted according to the
specifications given in [`fmt], into the range [=range(out,out + M)].
[:zh_CN] 将 [`args] 所提供的实参根据 [`fmt] 中给定的说明进行格式化的字符表示的
前 [`M] 个字符，置入范围 [=range(out,out + M)] 中。

[:en] If present, [`loc] is used for locale-specific formatting.
[:zh_CN] 当出现时，[`loc] 用于特定于地域的格式化。

[para:returns]
[:en] [`{out + M, N}].
[:zh_CN] [`{out + M, N}]。

[para:throws]
[:en] As specified in [#format.err.report].
[:zh_CN] 如 [#format.err.report] 所述。
[div:end]

[%@lib formatted_size]
[codeblock:declaration]
template<class... Args>
  size_t formatted_size([[redoc("*>")]]format-string<Args...> fmt, Args&&... args);
template<class... Args>
  size_t formatted_size([[redoc("*>")]]wformat-string<Args...> fmt, Args&&... args);
template<class... Args>
  size_t formatted_size(const locale& loc, [[redoc("*>")]]format-string<Args...> fmt, Args&&... args);
template<class... Args>
  size_t formatted_size(const locale& loc, [[redoc("*>")]]wformat-string<Args...> fmt, Args&&... args);
[codeblock:end]

[div:description]
[para]
[:en] Let [`charT] be [`decltype(fmt.[*str])::value_type].
[:zh_CN] 令 [`charT] 为 [`decltype(fmt.[*str])::value_type]。

[para:expects]
[:en] [`formatter<remove_cvref_t<T[$_i]>, charT>] meets the [^:newoc Formatter]
requirements ([#formatter.requirements]) for each [$[`T]_i] in [`Args].
[:zh_CN] 对于 [`Args] 中的每个 [$[`T]_i]，
[`formatter<remove_cvref_t<T[$_i]>, charT>] 都满足 [^:newoc Formatter] 的规定
（[#formatter.requirements]）。

[para:returns]
[:en] The number of characters in the character representation of formatting
arguments [`args] formatted according to specifications given in [`fmt].
[:zh_CN] 实参 [`args] 根据 [`fmt] 中给定的说明进行格式化的字符表示中的字符数。

[:en] If present, [`loc] is used for locale-specific formatting.
[:zh_CN] 当出现时，[`loc] 用于特定于地域的格式化。

[para:throws]
[:en] As specified in [#format.err.report].
[:zh_CN] 如 [#format.err.report] 所述。
[div:end]
