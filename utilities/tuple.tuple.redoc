[section#tuple.tuple
    [:en] Class template [`tuple]
    [:zh_CN] 类模板 [`tuple]
]

[%@library tuple]
[codeblock:synopsis [!:mark SeeBelow] ]
namespace std {
  template<class... Types>
  class tuple {
  public:
    // [:en] [#tuple.cnstr], [`tuple] construction
    // [|:zh_CN] [#tuple.cnstr]，[`tuple] 的构造
    constexpr explicit([=SeeBelow]) tuple();
    constexpr explicit([=SeeBelow]) tuple(const Types&...);         // [:en] only if [`sizeof...(Types) >= 1]
                                                                    // [|:zh_CN] 仅当 [`sizeof...(Types) >= 1]
    template<class... UTypes>
      constexpr explicit([=SeeBelow]) tuple(UTypes&&...);           // [:en] only if [`sizeof...(Types) >= 1]
                                                                    // [|:zh_CN] 仅当 [`sizeof...(Types) >= 1]

    tuple(const tuple&) = default;
    tuple(tuple&&) = default;

    template<class... UTypes>
      constexpr explicit([=SeeBelow]) tuple(const tuple<UTypes...>&);
    template<class... UTypes>
      constexpr explicit([=SeeBelow]) tuple(tuple<UTypes...>&&);

    template<class U1, class U2>
      constexpr explicit([=SeeBelow]) tuple(const pair<U1, U2>&);   // [:en] only if [`sizeof...(Types) == 2]
                                                                    // [|:zh_CN] 仅当 [`sizeof...(Types) == 2]
    template<class U1, class U2>
      constexpr explicit([=SeeBelow]) tuple(pair<U1, U2>&&);        // [:en] only if [`sizeof...(Types) == 2]
                                                                    // [|:zh_CN] 仅当 [`sizeof...(Types) == 2]

    // [:en] allocator-extended constructors
    // [|:zh_CN] 为分配器所扩充的构造函数
    template<class Alloc>
      constexpr explicit([=SeeBelow])
        tuple(allocator_arg_t, const Alloc& a);
    template<class Alloc>
      constexpr explicit([=SeeBelow])
        tuple(allocator_arg_t, const Alloc& a, const Types&...);
    template<class Alloc, class... UTypes>
      constexpr explicit([=SeeBelow])
        tuple(allocator_arg_t, const Alloc& a, UTypes&&...);
    template<class Alloc>
      constexpr tuple(allocator_arg_t, const Alloc& a, const tuple&);
    template<class Alloc>
      constexpr tuple(allocator_arg_t, const Alloc& a, tuple&&);
    template<class Alloc, class... UTypes>
      constexpr explicit([=SeeBelow])
        tuple(allocator_arg_t, const Alloc& a, const tuple<UTypes...>&);
    template<class Alloc, class... UTypes>
      constexpr explicit([=SeeBelow])
        tuple(allocator_arg_t, const Alloc& a, tuple<UTypes...>&&);
    template<class Alloc, class U1, class U2>
      constexpr explicit([=SeeBelow])
        tuple(allocator_arg_t, const Alloc& a, const pair<U1, U2>&);
    template<class Alloc, class U1, class U2>
      constexpr explicit([=SeeBelow])
        tuple(allocator_arg_t, const Alloc& a, pair<U1, U2>&&);

    // [:en] [#tuple.assign], [`tuple] assignment
    // [|:zh_CN] [#tuple.assign]，[`tuple] 的赋值
    constexpr tuple& operator=(const tuple&);
    constexpr tuple& operator=(tuple&&) noexcept([=SeeBelow]);

    template<class... UTypes>
      constexpr tuple& operator=(const tuple<UTypes...>&);
    template<class... UTypes>
      constexpr tuple& operator=(tuple<UTypes...>&&);

    template<class U1, class U2>
      constexpr tuple& operator=(const pair<U1, U2>&);            // [:en] only if [`sizeof...(Types) == 2]
                                                                  // [|:zh_CN] 仅当 [`sizeof...(Types) == 2]
    template<class U1, class U2>
      constexpr tuple& operator=(pair<U1, U2>&&);                 // [:en] only if [`sizeof...(Types) == 2]
                                                                  // [|:zh_CN] 仅当 [`sizeof...(Types) == 2]

    // [:en] [#tuple.swap], [`tuple] swap
    // [|:zh_CN] [#tuple.swap]，[`tuple] 的交换
    constexpr void swap(tuple&) noexcept([=SeeBelow]);
  };

  template<class... UTypes>
    tuple(UTypes...) -> tuple<UTypes...>;
  template<class T1, class T2>
    tuple(pair<T1, T2>) -> tuple<T1, T2>;
  template<class Alloc, class... UTypes>
    tuple(allocator_arg_t, Alloc, UTypes...) -> tuple<UTypes...>;
  template<class Alloc, class T1, class T2>
    tuple(allocator_arg_t, Alloc, pair<T1, T2>) -> tuple<T1, T2>;
  template<class Alloc, class... UTypes>
    tuple(allocator_arg_t, Alloc, tuple<UTypes...>) -> tuple<UTypes...>;
}
[codeblock:end]

[include tuple.cnstr]

[include tuple.assign]

[include tuple.swap]
