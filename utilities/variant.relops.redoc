[section#variant.relops
    [:en] Relational operators
    [:zh_CN] 关系运算符
]

[%@library operator==[!variant]]
[%@library variant[!operator==]]
[codeblock:declaration]
template <class... Types>
  constexpr bool operator==(const variant<Types...>& v, const variant<Types...>& w);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`get<[$i]>(v) == get<[$i]>(w)] is a valid expression returning a type
that is convertible to [`bool], for all [$i].
[:zh_CN] 对于所有的 [$i]，[`get<[$i]>(v) == get<[$i]>(w)] 是返回类型可以转换为
[`bool] 的有效表达式。

[para:returns]
[:en] If [`v.index() != w.index()], [`false]; otherwise if
[`v.valueless_by_exception()], [`true]; otherwise
[`get<[$i]>(v) == get<[$i]>(w)] with [$i] being [`v.index()].
[:zh_CN] 当 [`v.index() != w.index()] 时为 [`false]；否则当
[`v.valueless_by_exception()] 时为 [`true]；否则为
[`get<[$i]>(v) == get<[$i]>(w)]，其中 [$i] 为 [`v.index()]。
[exit:description]

[%@library operator!=[!variant]]
[%@library variant[!operator!=]]
[codeblock:declaration]
template <class... Types>
  constexpr bool operator!=(const variant<Types...>& v, const variant<Types...>& w);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`get<[$i]>(v) != get<[$i]>(w)] is a valid expression returning a type
that is convertible to [`bool], for all [$i].
[:zh_CN] 对于所有的 [$i]，[`get<[$i]>(v) != get<[$i]>(w)] 是返回类型可以转换为
[`bool] 的有效表达式。

[para:returns]
[:en] If [`v.index() != w.index()], [`true]; otherwise if
[`v.valueless_by_exception()], [`false]; otherwise
[`get<[$i]>(v) != get<[$i]>(w)] with [$i] being [`v.index()].
[:zh_CN] 当 [`v.index() != w.index()] 时为 [`true]；否则当
[`v.valueless_by_exception()] 时为 [`false]；否则为
[`get<[$i]>(v) != get<[$i]>(w)]，其中 [$i] 为 [`v.index()]。
[exit:description]

[%@library operator<[!variant]]
[%@library variant[!operator<]]
[codeblock:declaration]
template <class... Types>
  constexpr bool operator<(const variant<Types...>& v, const variant<Types...>& w);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`get<[$i]>(v) < get<[$i]>(w)] is a valid expression returning a type that
is convertible to [`bool], for all [$i].
[:zh_CN] 对于所有的 [$i]，[`get<[$i]>(v) < get<[$i]>(w)] 是返回类型可以转换为
[`bool] 的有效表达式。

[para:returns]
[:en] If [`w.valueless_by_exception()], [`false]; otherwise if
[`v.valueless_by_exception()], [`true]; otherwise, if [`v.index() < w.index()],
[`true]; otherwise if [`v.index() > w.index()], [`false]; otherwise
[`get<[$i]>(v) < get<[$i]>(w)] with [$i] being [`v.index()].
[:zh_CN] 当 [`w.valueless_by_exception()] 时为 [`false]；否则当
[`v.valueless_by_exception()] 时为 [`true]；否则当 [`v.index() < w.index()] 时为
[`true]；否则当 [`v.index() > w.index()] 时为 [`false]；否则为
[`get<[$i]>(v) < get<[$i]>(w)]，其中 [$i] 为 [`v.index()]。
[exit:description]

[%@library operator>[!variant]]
[%@library variant[!operator>]]
[codeblock:declaration]
template <class... Types>
  constexpr bool operator>(const variant<Types...>& v, const variant<Types...>& w);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`get<[$i]>(v) > get<[$i]>(w)] is a valid expression returning a type that
is convertible to [`bool], for all [$i].
[:zh_CN] 对于所有的 [$i]，[`get<[$i]>(v) > get<[$i]>(w)] 是返回类型可以转换为
[`bool] 的有效表达式。

[para:returns]
[:en] If [`v.valueless_by_exception()], [`false]; otherwise if
[`w.valueless_by_exception()], [`true]; otherwise, if [`v.index() > w.index()],
[`true]; otherwise if [`v.index() < w.index()], [`false]; otherwise
[`get<[$i]>(v) > get<[$i]>(w)] with [$i] being [`v.index()].
[:zh_CN] 当 [`v.valueless_by_exception()] 时为 [`false]；否则当
[`w.valueless_by_exception()] 时为 [`true]；否则当 [`v.index() > w.index()] 时为
[`true]；否则当 [`v.index() < w.index()] 时为 [`false]；否则为
[`get<[$i]>(v) > get<[$i]>(w)]，其中 [$i] 为 [`v.index()]。
[exit:description]

[%@library operator<=[!variant]]
[%@library variant[!operator<=]]
[codeblock:declaration]
template <class... Types>
  constexpr bool operator<=(const variant<Types...>& v, const variant<Types...>& w);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`get<[$i]>(v) <= get<[$i]>(w)] is a valid expression returning a type
that is convertible to [`bool], for all [$i].
[:zh_CN] 对于所有的 [$i]，[`get<[$i]>(v) <= get<[$i]>(w)] 是返回类型可以转换为
[`bool] 的有效表达式。

[para:returns]
[:en] If [`v.valueless_by_exception()], [`true]; otherwise if
[`w.valueless_by_exception()], [`false]; otherwise, if [`v.index() < w.index()],
[`true]; otherwise if [`v.index() > w.index()], [`false]; otherwise
[`get<[$i]>(v) <= get<[$i]>(w)] with [$i] being [`v.index()].
[:zh_CN] 当 [`v.valueless_by_exception()] 时为 [`true]；否则当
[`w.valueless_by_exception()] 时为 [`false]；否则当 [`v.index() < w.index()] 时
为 [`true]；否则当 [`v.index() > w.index()] 时为 [`false]；否则为
[`get<[$i]>(v) <= get<[$i]>(w)]，其中 [$i] 为 [`v.index()]。
[exit:description]

[%@library operator>=[!variant]]
[%@library variant[!operator>=]]
[codeblock:declaration]
template <class... Types>
  constexpr bool operator>=(const variant<Types...>& v, const variant<Types...>& w);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`get<[$i]>(v) >= get<[$i]>(w)] is a valid expression returning a type
that is convertible to [`bool], for all [$i].
[:zh_CN] 对于所有的 [$i]，[`get<[$i]>(v) >= get<[$i]>(w)] 是返回类型可以转换为
[`bool] 的有效表达式。

[para:returns]
[:en] If [`w.valueless_by_exception()], [`true]; otherwise if
[`v.valueless_by_exception()], [`false]; otherwise, if [`v.index() > w.index()],
[`true]; otherwise if [`v.index() < w.index()], [`false]; otherwise
[`get<[$i]>(v) >= get<[$i]>(w)] with [$i] being [`v.index()].
[:zh_CN] 当 [`w.valueless_by_exception()] 时为 [`true]；否则当
[`v.valueless_by_exception()] 时为 [`false]；否则当 [`v.index() > w.index()] 时
为 [`true]；否则当 [`v.index() < w.index()] 时为 [`false]；否则为
[`get<[$i]>(v) >= get<[$i]>(w)]，其中 [$i] 为 [`v.index()]。
[exit:description]
