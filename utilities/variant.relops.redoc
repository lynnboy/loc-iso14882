[section#variant.relops
    [:en] Relational operators
    [:zh_CN] 关系运算符
]

[%@lib@member operator==[!variant]]
[codeblock:declaration]
template<class... Types>
  constexpr bool operator==(const variant<Types...>& v, const variant<Types...>& w);
[codeblock:end]

[div:description]
[para:mandates]
[:en] [`get<[$i]>(v) == get<[$i]>(w)] is a valid expression that is convertible
to [`bool], for all [$i].
[:zh_CN] 对于所有的 [$i]，[`get<[$i]>(v) == get<[$i]>(w)] 均为可以转换为 [`bool]
的有效表达式。

[para:returns]
[:en] If [`v.index() != w.index()], [`false]; otherwise if
[`v.valueless_by_exception()], [`true]; otherwise
[`get<[$i]>(v) == get<[$i]>(w)] with [$i] being [`v.index()].
[:zh_CN] 当 [`v.index() != w.index()] 时为 [`false]；否则当
[`v.valueless_by_exception()] 时为 [`true]；否则为
[`get<[$i]>(v) == get<[$i]>(w)]，其中 [$i] 为 [`v.index()]。
[div:end]

[%@lib@member operator!=[!variant]]
[codeblock:declaration]
template<class... Types>
  constexpr bool operator!=(const variant<Types...>& v, const variant<Types...>& w);
[codeblock:end]

[div:description]
[para:mandates]
[:en] [`get<[$i]>(v) != get<[$i]>(w)] is a valid expression that is convertible
to [`bool], for all [$i].
[:zh_CN] 对于所有的 [$i]，[`get<[$i]>(v) != get<[$i]>(w)] 均为可以转换为 [`bool]
的有效表达式。

[para:returns]
[:en] If [`v.index() != w.index()], [`true]; otherwise if
[`v.valueless_by_exception()], [`false]; otherwise
[`get<[$i]>(v) != get<[$i]>(w)] with [$i] being [`v.index()].
[:zh_CN] 当 [`v.index() != w.index()] 时为 [`true]；否则当
[`v.valueless_by_exception()] 时为 [`false]；否则为
[`get<[$i]>(v) != get<[$i]>(w)]，其中 [$i] 为 [`v.index()]。
[div:end]

[%@lib@member operator<[!variant]]
[codeblock:declaration]
template<class... Types>
  constexpr bool operator<(const variant<Types...>& v, const variant<Types...>& w);
[codeblock:end]

[div:description]
[para:mandates]
[:en] [`get<[$i]>(v) < get<[$i]>(w)] is a valid expression that is convertible
to [`bool], for all [$i].
[:zh_CN] 对于所有的 [$i]，[`get<[$i]>(v) < get<[$i]>(w)] 均为可以转换为 [`bool]
的有效表达式。

[para:returns]
[:en] If [`w.valueless_by_exception()], [`false]; otherwise if
[`v.valueless_by_exception()], [`true]; otherwise, if [`v.index() < w.index()],
[`true]; otherwise if [`v.index() > w.index()], [`false]; otherwise
[`get<[$i]>(v) < get<[$i]>(w)] with [$i] being [`v.index()].
[:zh_CN] 当 [`w.valueless_by_exception()] 时为 [`false]；否则当
[`v.valueless_by_exception()] 时为 [`true]；否则当 [`v.index() < w.index()] 时为
[`true]；否则当 [`v.index() > w.index()] 时为 [`false]；否则为
[`get<[$i]>(v) < get<[$i]>(w)]，其中 [$i] 为 [`v.index()]。
[div:end]

[%@lib@member operator>[!variant]]
[codeblock:declaration]
template<class... Types>
  constexpr bool operator>(const variant<Types...>& v, const variant<Types...>& w);
[codeblock:end]

[div:description]
[para:mandates]
[:en] [`get<[$i]>(v) > get<[$i]>(w)] is a valid expression that is convertible
to [`bool], for all [$i].
[:zh_CN] 对于所有的 [$i]，[`get<[$i]>(v) > get<[$i]>(w)] 均为可以转换为 [`bool]
的有效表达式。

[para:returns]
[:en] If [`v.valueless_by_exception()], [`false]; otherwise if
[`w.valueless_by_exception()], [`true]; otherwise, if [`v.index() > w.index()],
[`true]; otherwise if [`v.index() < w.index()], [`false]; otherwise
[`get<[$i]>(v) > get<[$i]>(w)] with [$i] being [`v.index()].
[:zh_CN] 当 [`v.valueless_by_exception()] 时为 [`false]；否则当
[`w.valueless_by_exception()] 时为 [`true]；否则当 [`v.index() > w.index()] 时为
[`true]；否则当 [`v.index() < w.index()] 时为 [`false]；否则为
[`get<[$i]>(v) > get<[$i]>(w)]，其中 [$i] 为 [`v.index()]。
[div:end]

[%@lib@member operator<=[!variant]]
[codeblock:declaration]
template<class... Types>
  constexpr bool operator<=(const variant<Types...>& v, const variant<Types...>& w);
[codeblock:end]

[div:description]
[para:mandates]
[:en] [`get<[$i]>(v) <= get<[$i]>(w)] is a valid expression that is convertible
to [`bool], for all [$i].
[:zh_CN] 对于所有的 [$i]，[`get<[$i]>(v) <= get<[$i]>(w)] 均为可以转换为 [`bool]
的有效表达式。

[para:returns]
[:en] If [`v.valueless_by_exception()], [`true]; otherwise if
[`w.valueless_by_exception()], [`false]; otherwise, if [`v.index() < w.index()],
[`true]; otherwise if [`v.index() > w.index()], [`false]; otherwise
[`get<[$i]>(v) <= get<[$i]>(w)] with [$i] being [`v.index()].
[:zh_CN] 当 [`v.valueless_by_exception()] 时为 [`true]；否则当
[`w.valueless_by_exception()] 时为 [`false]；否则当 [`v.index() < w.index()] 时
为 [`true]；否则当 [`v.index() > w.index()] 时为 [`false]；否则为
[`get<[$i]>(v) <= get<[$i]>(w)]，其中 [$i] 为 [`v.index()]。
[div:end]

[%@lib@member operator>=[!variant]]
[codeblock:declaration]
template<class... Types>
  constexpr bool operator>=(const variant<Types...>& v, const variant<Types...>& w);
[codeblock:end]

[div:description]
[para:requires]
[:en] [`get<[$i]>(v) >= get<[$i]>(w)] is a valid expression that is convertible
to [`bool], for all [$i].
[:zh_CN] 对于所有的 [$i]，[`get<[$i]>(v) >= get<[$i]>(w)] 均为可以转换为 [`bool]
的有效表达式。

[para:returns]
[:en] If [`w.valueless_by_exception()], [`true]; otherwise if
[`v.valueless_by_exception()], [`false]; otherwise, if [`v.index() > w.index()],
[`true]; otherwise if [`v.index() < w.index()], [`false]; otherwise
[`get<[$i]>(v) >= get<[$i]>(w)] with [$i] being [`v.index()].
[:zh_CN] 当 [`w.valueless_by_exception()] 时为 [`true]；否则当
[`v.valueless_by_exception()] 时为 [`false]；否则当 [`v.index() > w.index()] 时
为 [`true]；否则当 [`v.index() < w.index()] 时为 [`false]；否则为
[`get<[$i]>(v) >= get<[$i]>(w)]，其中 [$i] 为 [`v.index()]。
[div:end]

[%@lib@member operator<=>[!variant]]
[codeblock:declaration]
template<class... Types> requires ([[redoc("`:c>")]]three_way_comparable<Types> && ...)
  constexpr common_comparison_category_t<compare_three_way_result_t<Types>...>
    operator<=>(const variant<Types...>& v, const variant<Types...>& w);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
if (v.valueless_by_exception() && w.valueless_by_exception())
  return strong_ordering::equal;
if (v.valueless_by_exception()) return strong_ordering::less;
if (w.valueless_by_exception()) return strong_ordering::greater;
if (auto c = v.index() <=> w.index(); c != 0) return c;
return get<[[redoc("$>")]]i>(v) <=> get<[[redoc("$>")]]i>(w);
[codeblock:end]
[:en@~] with [$i] being [`v.index()].
[:zh_CN@~] 其中 [$i] 为 [`v.index()]。
[div:end]
