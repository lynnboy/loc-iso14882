[section#mem.poly.allocator.mem
    [:en] Member functions
    [:zh_CN] 成员函数
]

[%@lib@member allocate[!polymorphic_allocator]]
[codeblock:declaration]
[[nodiscard]] Tp* allocate(size_t n);
[codeblock:end]

[div:description]
[para:effects]
[:en] If [`numeric_limits<size_t>::max() / sizeof(Tp) < n], throws
[`bad_array_new_length].
[:zh_CN] 如果 [`numeric_limits<size_t>::max() / sizeof(Tp) < n]，则抛出
[`bad_array_new_length]。

[:en] Otherwise equivalent to:
[:zh_CN] 否则，等价于：
[codeblock]
return static_cast<Tp*>(memory_rsrc->allocate(n * sizeof(Tp), alignof(Tp)));
[codeblock:end]
[div:end]

[%@lib@member deallocate[!polymorphic_allocator]]
[codeblock:declaration]
void deallocate(Tp* p, size_t n);
[codeblock:end]

[div:description]
[para:expects]
[:en] [`p] was allocated from a memory resource [`x], equal to [`*memory_rsrc],
using [`x.allocate(n * sizeof(Tp), alignof(Tp))].
[:zh_CN] [`p] 是通过某个与 [`*memory_rsrc] 相等的内存资源 [`x]，使用
[`x.allocate(n * sizeof(Tp), alignof(Tp))] 所分配的结果。

[para:effects]
[:en] Equivalent to [`memory_rsrc->deallocate(p, n * sizeof(Tp), alignof(Tp))].
[:zh_CN] 等价于 [`memory_rsrc->deallocate(p, n * sizeof(Tp), alignof(Tp))]。

[para:throws]
[:en] Nothing.
[:zh_CN] 无。
[div:end]

[%@lib@member allocate_bytes[!polymorphic_allocator]]
[codeblock:declaration]
[[nodiscard]] void* allocate_bytes(size_t nbytes, size_t alignment = alignof(max_align_t));
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return memory_rsrc->allocate(nbytes, alignment);]
[:zh_CN] 等价于：[`return memory_rsrc->allocate(nbytes, alignment);]

[para]
[begin:note]
[:en] The return type is [`void*] (rather than, e.g., [`byte*]) to support
conversion to an arbitrary pointer type [`U*] by [`static_cast<U*>], thus
facilitating construction of a [`U] object in the allocated memory.
[:zh_CN] 返回类型为 [`void*]（而不是如 [`byte*] 等），以支持用
[`static_cast<U*>] 转换为任意的指针类型 [`U*]，从而提供了在所分配内存中构造一个
[`U] 对象的设施。
[end:note]
[div:end]

[%@lib@member deallocate_bytes[!polymorphic_allocator]]
[codeblock:declaration]
void deallocate_bytes(void* p, size_t nbytes, size_t alignment = alignof(max_align_t));
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to [`memory_rsrc->deallocate(p, nbytes, alignment)].
[:zh_CN] 等价于 [`memory_rsrc->deallocate(p, nbytes, alignment)]。
[div:end]

[%@lib@member allocate_object[!polymorphic_allocator]]
[codeblock:declaration]
template<class T>
  [[nodiscard]] T* allocate_object(size_t n = 1);
[codeblock:end]

[div:description]
[para:effects]
[:en] Allocates memory suitable for holding an array of [`n] objects of type [`T],
as follows:
[:zh_CN] 分配适于持有一个 [`n] 个 [`T] 类型的对象的数组，方式如下：

[list]
[item]
[:en@~] if [`numeric_limits<size_t>::max() / sizeof(T) < n], throws
[`bad_array_new_length],
[:zh_CN@~] 如果 [`numeric_limits<size_t>::max() / sizeof(T) < n]，则抛出
[`bad_array_new_length]，
[list]
[item]
[:en@~] otherwise equivalent to:
[:zh_CN@~] 否则等价于：
[codeblock]
return static_cast<T*>(allocate_bytes(n*sizeof(T), alignof(T)));
[codeblock:end]
[list:end]

[para]
[begin:note]
[:en] [`T] is not deduced and must therefore be provided as a template argument.
[:zh_CN] [`T] 未进行推断，因而必须作为模板实参提供。
[end:note]
[div:end]

[%@lib@member deallocate_object[!polymorphic_allocator]]
[codeblock:declaration]
template<class T>
  void deallocate_object(T* p, size_t n = 1);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to [`deallocate_bytes(p, n*sizeof(T), alignof(T))].
[:zh_CN] 等价于 [`deallocate_bytes(p, n*sizeof(T), alignof(T))]。
[div:end]

[%@lib@member new_object[!polymorphic_allocator]]
[codeblock:declaration]
template<class T, class CtorArgs...>
  [[nodiscard]] T* new_object(CtorArgs&&... ctor_args);
[codeblock:end]

[div:description]
[para:effects]
[:en] Allocates and constructs an object of type [`T], as follows.
[:zh_CN] 分配并构造一个 [`T] 类型的对象，方式如下。

[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
T* p = allocate_object<T>();
try {
  construct(p, std::forward<CtorArgs>(ctor_args)...);
} catch (...) {
  deallocate_object(p);
  throw;
}
return p;
[codeblock:end]

[para]
[begin:note]
[:en] [`T] is not deduced and must therefore be provided as a template argument.
[:zh_CN] [`T] 未进行推断，因而必须作为模板实参提供。
[end:note]
[div:end]

[%@lib@member new_object[!polymorphic_allocator]]
[codeblock:declaration]
template<class T>
  void delete_object(T* p);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
destroy(p);
deallocate_object(p);
[codeblock:end]
[div:end]

[%@lib@member construct[!polymorphic_allocator]]
[codeblock:declaration]
template<class T, class... Args>
  void construct(T* p, Args&&... args);
[codeblock:end]

[div:description]
[para:mandates]
[:en] Uses-allocator construction of [`T] with allocator [`*this]
(see [#allocator.uses.construction]) and constructor arguments
[`std::forward<Args>(args)...] is well-formed.
[:zh_CN] 用分配器 [`*this] 和实参 [`std::forward<Args>(args)...] 所进行的 [`T]
的使用分配器的构造是良构的（参见 [#allocator.uses.construction]）。

[para:effects]
[:en] Construct a [`T] object in the storage whose address is represented by [`p]
by uses-allocator construction with allocator [`*this] and constructor arguments
[`std::forward<Args>(args)...].
[:zh_CN] 在由 [`p] 代表其地址的存储中，以分配器 [`*this] 和构造函数实参
[`std::forward<Args>(args)...]，通过使用分配器的构造，构造一个 [`T] 对象。

[para:throws]
[:en] Nothing unless the constructor for [`T] throws.
[:zh_CN] 无，除非 [`T] 的构造函数抛出异常。
[div:end]

[%@lib@member destroy[!polymorphic_allocator]]
[codeblock:declaration]
template<class T>
  void destroy(T* p);
[codeblock:end]

[div:description]
[para:effects]
[:en] As if by [`p->~T()].
[:zh_CN] 如同执行 [`p->~T()]。
[div:end]

[%@lib@member select_on_container_copy_construction[!polymorphic_allocator]]
[codeblock:declaration]
polymorphic_allocator select_on_container_copy_construction() const;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`polymorphic_allocator()].
[:zh_CN] [`polymorphic_allocator()]。

[para]
[begin:note]
[:en] The memory resource is not propagated.
[:zh_CN] 这个内存资源不会被传播。
[end:note]
[div:end]

[%@lib@member resource[!polymorphic_allocator]]
[codeblock:declaration]
memory_resource* resource() const;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`memory_rsrc].
[:zh_CN] [`memory_rsrc]。
[div:end]
