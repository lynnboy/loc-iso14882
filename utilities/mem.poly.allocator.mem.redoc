[section#mem.poly.allocator.mem
    [:en] Member functions
    [:zh_CN] 成员函数
]

[%@library allocate[!polymorphic_allocator]]
[%@library polymorphic_allocator[!allocate]]
[codeblock:declaration]
[[nodiscard]] Tp* allocate(size_t n);
[codeblock:end]

[enter:description]
[para:effects]
[:en] If [`SIZE_MAX / sizeof(Tp) < n], throws [`length_error].
[:zh_CN] 如果 [`SIZE_MAX / sizeof(Tp) < n]，则抛出 [`length_error]。

[:en] Otherwise equivalent to:
[:zh_CN] 否则，等价于：

[codeblock:notation]
return static_cast<Tp*>(memory_rsrc->allocate(n * sizeof(Tp), alignof(Tp)));
[codeblock:end]
[exit:description]

[%@library deallocate[!polymorphic_allocator]]
[%@library polymorphic_allocator[!deallocate]]
[codeblock:declaration]
void deallocate(Tp* p, size_t n);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`p] was allocated from a memory resource [`x], equal to [`*memory_rsrc],
using [`x.allocate(n * sizeof(Tp), alignof(Tp))].
[:zh_CN] [`p] 是通过某个与 [`*memory_rsrc] 相等的内存资源 [`x]，使用
[`x.allocate(n * sizeof(Tp), alignof(Tp))] 所分配的结果。

[para:effects]
[:en] Equivalent to [`memory_rsrc->deallocate(p, n * sizeof(Tp), alignof(Tp))].
[:zh_CN] 等价于 [`memory_rsrc->deallocate(p, n * sizeof(Tp), alignof(Tp))]。

[para:throws]
[:en] Nothing.
[:zh_CN] 无。
[exit:description]

[%@library construct[!polymorphic_allocator]]
[%@library polymorphic_allocator[!construct]]
[codeblock:declaration]
template<class T, class... Args>
  void construct(T* p, Args&&... args);
[codeblock:end]

[enter:description]
[para:mandates]
[:en] Uses-allocator construction of [`T] with allocator [`*this]
(see [#allocator.uses.construction]) and constructor arguments
[`std::forward<Args>(args)...] is well-formed.
[:zh_CN] 用分配器 [`*this] 和实参 [`std::forward<Args>(args)...] 所进行的 [`T]
的使用分配器的构造是良构的（参见 [#allocator.uses.construction]）。

[para:effects]
[:en] Construct a [`T] object in the storage whose address is represented by
[`p] by uses-allocator construction with allocator [`*this] and constructor
arguments [`std::forward<Args>(args)...].
[:zh_CN] 在由 [`p] 代表其地址的存储中，以分配器 [`*this] 和构造函数实参
[`std::forward<Args>(args)...]，通过使用分配器的构造，构造一个 [`T] 对象。

[para:throws]
[:en] Nothing unless the constructor for [`T] throws.
[:zh_CN] 无，除非 [`T] 的构造函数抛出异常。
[exit:description]

[%@library destroy[!polymorphic_allocator]]
[%@library polymorphic_allocator[!destroy]]
[codeblock:declaration]
template<class T>
  void destroy(T* p);
[codeblock:end]

[enter:description]
[para:effects]
[:en] As if by [`p->~T()].
[:zh_CN] 如同执行 [`p->~T()]。
[exit:description]

[%@library select_on_container_copy_construction[!polymorphic_allocator]]
[%@library polymorphic_allocator[!select_on_container_copy_construction]]
[codeblock:declaration]
polymorphic_allocator select_on_container_copy_construction() const;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`polymorphic_allocator()].
[:zh_CN] [`polymorphic_allocator()]。

[para]
[enter:note]
[:en] The memory resource is not propagated.
[:zh_CN] 这个内存资源不会被传播。
[exit:note]
[exit:description]

[%@library resource[!polymorphic_allocator]]
[%@library polymorphic_allocator[!resource]]
[codeblock:declaration]
memory_resource* resource() const;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`memory_rsrc].
[:zh_CN] [`memory_rsrc]。
[exit:description]
