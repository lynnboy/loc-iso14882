[section#optional.relops
    [:en] Relational operators
    [:zh_CN] 关系运算符
]

[%@lib@member operator==[!optional]]
[codeblock:declaration]
template<class T, class U> constexpr bool operator==(const optional<T>& x, const optional<U>& y);
[codeblock:end]

[div:description]
[para:mandates]
[:en] The expression [`*x == *y] is well-formed and its result is convertible to
[`bool].
[:zh_CN] 表达式 [`*x == *y] 良构，且其结果可以转换为 [`bool]。

[begin:note]
[:en] [`T] need not be [^:oc EqualityComparable].
[:zh_CN] [`T] 不需要为 [^:oc EqualityComparable]。
[end:note]

[para:returns]
[:en] If [`bool(x) != bool(y)], [`false]; otherwise if [`bool(x) == false],
[`true]; otherwise [`*x == *y].
[:zh_CN] 若 [`bool(x) != bool(y)] 则为 [`false]；否则若 [`bool(x) == false] 则为
[`true]；否则为 [`*x == *y]。

[para:remarks]
[:en] Specializations of this function template for which [`*x == *y] is a core
constant expression are constexpr functions.
[:zh_CN] 这个函数模板的特例，对于 [`*x == *y] 是核心常量表达式的情况下，为
constexpr 函数。
[div:end]

[%@lib@member operator!=[!optional]]
[codeblock:declaration]
template<class T, class U> constexpr bool operator!=(const optional<T>& x, const optional<U>& y);
[codeblock:end]

[div:description]
[para:mandates]
[:en] The expression [`*x != *y] is well-formed and its result is convertible to
[`bool].
[:zh_CN] 表达式 [`*x != *y] 良构，且其结果可以转换为 [`bool]。

[para:returns]
[:en] If [`bool(x) != bool(y)], [`true]; otherwise, if [`bool(x) == false],
[`false]; otherwise [`*x != *y].
[:zh_CN] 若 [`bool(x) != bool(y)] 则为 [`true]；否则若 [`bool(x) == false] 则为
[`false]；否则为 [`*x != *y]。

[para:remarks]
[:en] Specializations of this function template for which [`*x != *y] is a core
constant expression are constexpr functions.
[:zh_CN] 这个函数模板的特例，对于 [`*x != *y] 是核心常量表达式的情况下，为
constexpr 函数。
[div:end]

[%@lib@member operator<[!optional]]
[codeblock:declaration]
template<class T, class U> constexpr bool operator<(const optional<T>& x, const optional<U>& y);
[codeblock:end]

[div:description]
[para:mandates]
[:en] [`*x < *y] is well-formed and its result is convertible to [`bool].
[:zh_CN] [`*x < *y] 良构，且其结果可以转换为 [`bool]。

[para:returns]
[:en] If [`!y], [`false]; otherwise, if [`!x], [`true]; otherwise [`*x < *y].
[:zh_CN] 若 [`!y] 则为 [`false]；否则若 [`!x] 则为 [`true]；否则为 [`*x < *y]。

[para:remarks]
[:en] Specializations of this function template for which [`*x < *y] is a core
constant expression are constexpr functions.
[:zh_CN] 这个函数模板的特例，对于 [`*x < *y] 是核心常量表达式的情况下，为
constexpr 函数。
[div:end]

[%@lib@member operator>[!optional]]
[codeblock:declaration]
template<class T, class U> constexpr bool operator>(const optional<T>& x, const optional<U>& y);
[codeblock:end]

[div:description]
[para:mandates]
[:en] The expression [`*x > *y] is well-formed and its result is convertible to
[`bool].
[:zh_CN] 表达式 [`*x > *y] 良构，且其结果可以转换为 [`bool]。

[para:returns]
[:en] If [`!x], [`false]; otherwise, if [`!y], [`true]; otherwise [`*x > *y].
[:zh_CN] 若 [`!x] 则为 [`false]；否则若 [`!y] 则为 [`true]；否则为 [`*x > *y]。

[para:remarks]
[:en] Specializations of this function template for which [`*x > *y] is a core
constant expression are constexpr functions.
[:zh_CN] 这个函数模板的特例，对于 [`*x > *y] 是核心常量表达式的情况下，为
constexpr 函数。
[div:end]

[%@lib@member operator<=[!optional]]
[codeblock:declaration]
template<class T, class U> constexpr bool operator<=(const optional<T>& x, const optional<U>& y);
[codeblock:end]

[div:description]
[para:mandates]
[:en] The expression [`*x <= *y] is well-formed and its result is convertible to
[`bool].
[:zh_CN] 表达式 [`*x <= *y] 良构，且其结果可以转换为 [`bool]。

[para:returns]
[:en] If [`!x], [`true]; otherwise, if [`!y], [`false]; otherwise [`*x <= *y].
[:zh_CN] 若 [`!x] 则为 [`true]；否则若 [`!y] 则为 [`false]；否则为 [`*x <= *y]。

[para:remarks]
[:en] Specializations of this function template for which [`*x <= *y] is a core
constant expression are constexpr functions.
[:zh_CN] 这个函数模板的特例，对于 [`*x <= *y] 是核心常量表达式的情况下，为
constexpr 函数。
[div:end]

[%@lib@member operator>=[!optional]]
[codeblock:declaration]
template<class T, class U> constexpr bool operator>=(const optional<T>& x, const optional<U>& y);
[codeblock:end]

[div:description]
[para:mandates]
[:en] The expression [`*x >= *y] is well-formed and its result is convertible to
[`bool].
[:zh_CN] 表达式 [`*x >= *y] 良构，且其结果可以转换为 [`bool]。

[para:returns]
[:en] If [`!y], [`true]; otherwise, if [`!x], [`false]; otherwise [`*x >= *y].
[:zh_CN] 若 [`!y] 则为 [`true]；否则若 [`!x] 则为 [`false]；否则为 [`*x >= *y]。

[para:remarks]
[:en] Specializations of this function template for which [`*x >= *y] is a core
constant expression are constexpr functions.
[:zh_CN] 这个函数模板的特例，对于 [`*x >= *y] 是核心常量表达式的情况下，应当为
constexpr 函数。
[div:end]

[%@lib@member operator<=>[!optional]]
[codeblock:declaration]
template<class T, [[redoc("`:c>")]]three_way_comparable_with<T> U>
  constexpr compare_three_way_result_t<T,U>
    operator<=>(const optional<T>& x, const optional<U>& y);
[codeblock:end]

[div:description]
[para:returns]
[:en] If [`x && y], [`*x <=> *y]; otherwise [`bool(x) <=> bool(y)].
[:zh_CN] 若 [`x && y] 则为 [`*x <=> *y]；否则为 [`bool(x) <=> bool(y)]。

[para:remarks]
[:en] Specializations of this function template for which [`*x <=> *y] is a core
constant expression are constexpr functions.
[:zh_CN] 这个函数模板的特例，对于 [`*x <=> *y] 是核心常量表达式的情况下，为
constexpr 函数。
[div:end]
