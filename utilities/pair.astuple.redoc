[section#pair.astuple
    [:en] Tuple-like access to pair
    [:zh_CN] tuple 式的 pair 访问
]

[%@lib tuple_size]
[codeblock:declaration]
template<class T1, class T2>
  struct tuple_size<pair<T1, T2>> : integral_constant<size_t, 2> { };
[codeblock:end]

[%@lib tuple_element]
[codeblock:declaration]
template<size_t I, class T1, class T2>
  struct tuple_element<I, pair<T1, T2>> {
    using type = [[redoc("[=seebelow]")]] ;
  };
[codeblock:end]

[div:description]
[para:mandates]
[:en] [$[`I] < 2].
[:zh_CN] [$[`I] < 2]。

[para:ctype]
[:en] The type [`T1] if [`I] is 0, otherwise the type [`T2].
[:zh_CN] 当 [`I] 为 0 时为类型 [`T1]，否则为类型 [`T2]。
[div:end]

[%@lib@member get[!pair]]
[codeblock:declaration]
template<size_t I, class T1, class T2>
  constexpr tuple_element_t<I, pair<T1, T2>>& get(pair<T1, T2>& p) noexcept;
template<size_t I, class T1, class T2>
  constexpr const tuple_element_t<I, pair<T1, T2>>& get(const pair<T1, T2>& p) noexcept;
template<size_t I, class T1, class T2>
  constexpr tuple_element_t<I, pair<T1, T2>>&& get(pair<T1, T2>&& p) noexcept;
template<size_t I, class T1, class T2>
  constexpr const tuple_element_t<I, pair<T1, T2>>&& get(const pair<T1, T2>&& p) noexcept;
[codeblock:end]

[div:description]
[para:mandates]
[:en] [$[`I] < 2].
[:zh_CN] [$[`I] < 2]。

[para:returns]
[list]
[item]
[:en] If [`I] is 0, returns a reference to [`p.first].
[:zh_CN] 若 [`I] 为 0，返回指代 [`p.first] 的引用。
[item]
[:en] If [`I] is 1, returns a reference to [`p.second].
[:zh_CN] 若 [`I] 为 1，返回指代 [`p.second] 的引用。
[list:end]
[div:end]

[%@lib@member get[!pair]]
[codeblock:declaration]
template<class T1, class T2>
  constexpr T1& get(pair<T1, T2>& p) noexcept;
template<class T1, class T2>
  constexpr const T1& get(const pair<T1, T2>& p) noexcept;
template<class T1, class T2>
  constexpr T1&& get(pair<T1, T2>&& p) noexcept;
template<class T1, class T2>
  constexpr const T1&& get(const pair<T1, T2>&& p) noexcept;
[codeblock:end]

[div:description]
[para:mandates]
[:en] [`T1] and [`T2] are distinct types.
[:zh_CN] [`T1] 和 [`T2] 是不同的类型。

[para:returns]
[:en] A reference to [`p.first].
[:zh_CN] 指代 [`p.first] 的引用。
[div:end]

[%@lib@member get[!pair]]
[codeblock:declaration]
template<class T2, class T1>
  constexpr T2& get(pair<T1, T2>& p) noexcept;
template<class T2, class T1>
  constexpr const T2& get(const pair<T1, T2>& p) noexcept;
template<class T2, class T1>
  constexpr T2&& get(pair<T1, T2>&& p) noexcept;
template<class T2, class T1>
  constexpr const T2&& get(const pair<T1, T2>&& p) noexcept;
[codeblock:end]

[div:description]
[para:mandates]
[:en] [`T1] and [`T2] are distinct types.
[:zh_CN] [`T1] 和 [`T2] 是不同的类型。

[para:returns]
[:en] A reference to [`p.second].
[:zh_CN] 指代 [`p.second] 的引用。
[div:end]
