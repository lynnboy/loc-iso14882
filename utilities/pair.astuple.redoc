[section#pair.astuple
    [:en] Tuple-like access to pair
    [:zh_CN] tuple 式的 pair 访问
]

[%@library tuple_size]
[codeblock:declaration]
template<class T1, class T2>
  struct tuple_size<pair<T1, T2>> : integral_constant<size_t, 2> { };
[codeblock:end]

[%@library tuple_element]
[codeblock:declaration [!:mark SeeBelow] ]
template<size_t I, class T1, class T2>
  struct tuple_element<I, pair<T1, T2>> {
    using type = [=SeeBelow] ;
  };
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`I < 2].
[:zh_CN] [`I < 2]。

[:en] The program is ill-formed if [`I] is out of bounds.
[:zh_CN] 如果 [`I] 越界则程序非良构。

[para:ctype]
[:en] The type [`T1] if [`I == 0], otherwise the type [`T2].
[:zh_CN] 如果 [`I == 0] 则为类型 [`T1]，否则为类型 [`T2]。
[exit:description]

[%@library pair[!get]]
[%@library get[!pair]]
[codeblock:declaration]
template<size_t I, class T1, class T2>
  constexpr tuple_element_t<I, pair<T1, T2>>& get(pair<T1, T2>& p) noexcept;
template<size_t I, class T1, class T2>
  constexpr const tuple_element_t<I, pair<T1, T2>>& get(const pair<T1, T2>& p) noexcept;
template<size_t I, class T1, class T2>
  constexpr tuple_element_t<I, pair<T1, T2>>&& get(pair<T1, T2>&& p) noexcept;
template<size_t I, class T1, class T2>
  constexpr const tuple_element_t<I, pair<T1, T2>>&& get(const pair<T1, T2>&& p) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] If [`I == 0] returns a reference to [`p.first]; if [`I == 1] returns a
reference to [`p.second]; otherwise the program is ill-formed.
[:zh_CN] 当 [`I == 0] 时返回指代 [`p.first] 的引用；当 [`I == 1] 时返回指代
[`p.second] 的引用；否则程序非良构。
[exit:description]

[%@library pair[!get]]
[%@library get[!pair]]
[codeblock:declaration]
template<class T1, class T2>
  constexpr T1& get(pair<T1, T2>& p) noexcept;
template<class T1, class T2>
  constexpr const T1& get(const pair<T1, T2>& p) noexcept;
template<class T1, class T2>
  constexpr T1&& get(pair<T1, T2>&& p) noexcept;
template<class T1, class T2>
  constexpr const T1&& get(const pair<T1, T2>&& p) noexcept;
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`T1] and [`T2] are distinct types.
[:zh_CN] [`T1] 和 [`T2] 是不同的类型。

[:en] Otherwise, the program is ill-formed.
[:zh_CN] 否则，程序非良构。

[para:returns]
[:en] A reference to [`p.first].
[:zh_CN] 指代 [`p.first] 的引用。
[exit:description]

[%@library pair[!get]]
[%@library get[!pair]]
[codeblock:declaration]
template<class T2, class T1>
  constexpr T2& get(pair<T1, T2>& p) noexcept;
template<class T2, class T1>
  constexpr const T2& get(const pair<T1, T2>& p) noexcept;
template<class T2, class T1>
  constexpr T2&& get(pair<T1, T2>&& p) noexcept;
template<class T2, class T1>
  constexpr const T2&& get(const pair<T1, T2>&& p) noexcept;
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`T1] and [`T2] are distinct types.
[:zh_CN] [`T1] 和 [`T2] 是不同的类型。

[:en] Otherwise, the program is ill-formed.
[:zh_CN] 否则，程序非良构。

[para:returns]
[:en] A reference to [`p.second].
[:zh_CN] 指代 [`p.second] 的引用。
[exit:description]
