[section#arithmetic.operations.negate
    [:en] Class template [`negate]
    [:zh_CN] 类模板 [`negate]
]

[%@library negate]
[codeblock:declaration]
template <class T = void> struct negate {
  constexpr T operator()(const T& x) const;
};
[codeblock:end]

[%@library operator()[!negate]]
[%@library negate[!operator()]]
[codeblock:declaration]
constexpr T operator()(const T& x) const;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`-x].
[:zh_CN] [`-x]。
[exit:description]

[%@library negate<>]
[codeblock:declaration [!:mark UnSpec] ]
template <> struct negate<void> {
  template <class T> constexpr auto operator()(T&& t) const
    -> decltype(-std::forward<T>(t));

  using is_transparent = [=UnSpec];
};
[codeblock:end]

[%@library operator()[!negate<>]]
[%@library negate<>[!operator()]]
[codeblock:declaration]
template <class T> constexpr auto operator()(T&& t) const
    -> decltype(-std::forward<T>(t));
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`-std::forward<T>(t)].
[:zh_CN] [`-std::forward<T>(t)]。
[exit:description]
