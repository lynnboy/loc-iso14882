[section#arithmetic.operations.negate
    [:en] Class template [`negate]
    [:zh_CN] 类模板 [`negate]
]

[%@lib negate]
[codeblock:declaration]
template<class T = void> struct negate {
  constexpr T operator()(const T& x) const;
};
[codeblock:end]

[%@lib@member operator()[!negate]]
[codeblock:declaration]
constexpr T operator()(const T& x) const;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`-x].
[:zh_CN] [`-x]。
[div:end]

[%@lib negate<>]
[codeblock:declaration]
template<> struct negate<void> {
  template<class T> constexpr auto operator()(T&& t) const
    -> decltype(-std::forward<T>(t));

  using is_transparent = [[redoc("=unspec")]];
};
[codeblock:end]

[%@lib@member operator()[!negate<>]]
[codeblock:declaration]
template<class T> constexpr auto operator()(T&& t) const
    -> decltype(-std::forward<T>(t));
[codeblock:end]

[div:description]
[para:returns]
[:en] [`-std::forward<T>(t)].
[:zh_CN] [`-std::forward<T>(t)]。
[div:end]
