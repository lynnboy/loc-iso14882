[section#mem.res.syn
    [:en] Header [`<memory_resource>] synopsis
    [:zh_CN] 头文件 [`<memory_resource>] 纲要
]

[%@header memory_resource]
[codeblock:synopsis]
namespace std::pmr {
  // [#mem.res.class], class [`memory_resource]
  class memory_resource;

  bool operator==(const memory_resource& a, const memory_resource& b) noexcept;
  bool operator!=(const memory_resource& a, const memory_resource& b) noexcept;

  // [:en] [#mem.poly.allocator.class], class template [`polymorphic_allocator]
  // [|:zh_CN] [#mem.poly.allocator.class]，类模板 [`polymorphic_allocator]
  template<class Tp> class polymorphic_allocator;

  template<class T1, class T2>
    bool operator==(const polymorphic_allocator<T1>& a,
                    const polymorphic_allocator<T2>& b) noexcept;
  template<class T1, class T2>
    bool operator!=(const polymorphic_allocator<T1>& a,
                    const polymorphic_allocator<T2>& b) noexcept;

  // [:en] [#mem.res.global], global memory resources
  // [|:zh_CN] [#mem.res.global]，全局内存资源
  memory_resource* new_delete_resource() noexcept;
  memory_resource* null_memory_resource() noexcept;
  memory_resource* set_default_resource(memory_resource* r) noexcept;
  memory_resource* get_default_resource() noexcept;

  // [:en] [#mem.res.pool], pool resource classes
  // [|:zh_CN] [#mem.res.pool]，池化资源类
  struct pool_options;
  class synchronized_pool_resource;
  class unsynchronized_pool_resource;
  class monotonic_buffer_resource;
}
[codeblock:end]
