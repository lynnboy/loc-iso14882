[section#tuple.tuple.general
    [:en] General
    [:zh_CN] 概述
]

[%@lib tuple]
[codeblock:synopsis]
namespace std {
  template<class... Types>
  class tuple {
  public:
    // [:en] [#tuple.cnstr], [`tuple] construction \
    [:zh_CN] [#tuple.cnstr]，[`tuple] 的构造
    constexpr explicit([[redoc("[=seebelow]")]]) tuple();
    constexpr explicit([[redoc("[=seebelow]")]]) tuple(const Types&...);         // [:en] only if [`sizeof...(Types) >= 1] \
                                                                                  [:zh_CN] 仅当 [`sizeof...(Types) >= 1]
    template<class... UTypes>
      constexpr explicit([[redoc("[=seebelow]")]]) tuple(UTypes&&...);           // [:en] only if [`sizeof...(Types) >= 1] \
                                                                                  [:zh_CN] 仅当 [`sizeof...(Types) >= 1]

    tuple(const tuple&) = default;
    tuple(tuple&&) = default;

    template<class... UTypes>
      constexpr explicit([[redoc("[=seebelow]")]]) tuple(tuple<UTypes...>&);
    template<class... UTypes>
      constexpr explicit([[redoc("[=seebelow]")]]) tuple(const tuple<UTypes...>&);
    template<class... UTypes>
      constexpr explicit([[redoc("[=seebelow]")]]) tuple(tuple<UTypes...>&&);
    template<class... UTypes>
      constexpr explicit([[redoc("[=seebelow]")]]) tuple(const tuple<UTypes...>&&);

    template<class U1, class U2>
      constexpr explicit([[redoc("[=seebelow]")]]) tuple(pair<U1, U2>&);         // [:en] only if [`sizeof...(Types) == 2] \
                                                                                  [:zh_CN] 仅当 [`sizeof...(Types) == 2]
    template<class U1, class U2>
      constexpr explicit([[redoc("[=seebelow]")]]) tuple(const pair<U1, U2>&);   // [:en] only if [`sizeof...(Types) == 2] \
                                                                                  [:zh_CN] 仅当 [`sizeof...(Types) == 2]
    template<class U1, class U2>
      constexpr explicit([[redoc("[=seebelow]")]]) tuple(pair<U1, U2>&&);        // [:en] only if [`sizeof...(Types) == 2] \
                                                                                  [:zh_CN] 仅当 [`sizeof...(Types) == 2]
    template<class U1, class U2>
      constexpr explicit([[redoc("[=seebelow]")]]) tuple(const pair<U1, U2>&&);  // [:en] only if [`sizeof...(Types) == 2] \
                                                                                  [:zh_CN] 仅当 [`sizeof...(Types) == 2]

    template<[[redoc("*:c>")]]tuple-like UTuple>
      constexpr explicit([[redoc("[=seebelow]")]]) tuple(UTuple&&);

    // [:en] allocator-extended constructors \
    [:zh_CN] 为分配器所扩充的构造函数
    template<class Alloc>
      constexpr explicit([[redoc("[=seebelow]")]])
        tuple(allocator_arg_t, const Alloc& a);
    template<class Alloc>
      constexpr explicit([[redoc("[=seebelow]")]])
        tuple(allocator_arg_t, const Alloc& a, const Types&...);
    template<class Alloc, class... UTypes>
      constexpr explicit([[redoc("[=seebelow]")]])
        tuple(allocator_arg_t, const Alloc& a, UTypes&&...);
    template<class Alloc>
      constexpr tuple(allocator_arg_t, const Alloc& a, const tuple&);
    template<class Alloc>
      constexpr tuple(allocator_arg_t, const Alloc& a, tuple&&);
    template<class Alloc, class... UTypes>
      constexpr explicit([[redoc("[=seebelow]")]])
        tuple(allocator_arg_t, const Alloc& a, tuple<UTypes...>&);
    template<class Alloc, class... UTypes>
      constexpr explicit([[redoc("[=seebelow]")]])
        tuple(allocator_arg_t, const Alloc& a, const tuple<UTypes...>&);
    template<class Alloc, class... UTypes>
      constexpr explicit([[redoc("[=seebelow]")]])
        tuple(allocator_arg_t, const Alloc& a, tuple<UTypes...>&&);
    template<class Alloc, class... UTypes>
      constexpr explicit([[redoc("[=seebelow]")]])
        tuple(allocator_arg_t, const Alloc& a, const tuple<UTypes...>&&);
    template<class Alloc, class U1, class U2>
      constexpr explicit([[redoc("[=seebelow]")]])
        tuple(allocator_arg_t, const Alloc& a, pair<U1, U2>&);
    template<class Alloc, class U1, class U2>
      constexpr explicit([[redoc("[=seebelow]")]])
        tuple(allocator_arg_t, const Alloc& a, const pair<U1, U2>&);
    template<class Alloc, class U1, class U2>
      constexpr explicit([[redoc("[=seebelow]")]])
        tuple(allocator_arg_t, const Alloc& a, pair<U1, U2>&&);
    template<class Alloc, class U1, class U2>
      constexpr explicit([[redoc("[=seebelow]")]])
        tuple(allocator_arg_t, const Alloc& a, const pair<U1, U2>&&);

    template<class Alloc, [[redoc("*:c>")]]tuple-like UTuple>
      constexpr explicit([[redoc("[=seebelow]")]]) tuple(allocator_arg_t, const Alloc& a, UTuple&&);

    // [:en] [#tuple.assign], [`tuple] assignment \
    [:zh_CN] [#tuple.assign]，[`tuple] 的赋值
    constexpr tuple& operator=(const tuple&);
    constexpr const tuple& operator=(const tuple&) const;
    constexpr tuple& operator=(tuple&&) noexcept([[redoc("[=seebelow]")]]);
    constexpr const tuple& operator=(tuple&&) const;

    template<class... UTypes>
      constexpr tuple& operator=(const tuple<UTypes...>&);
    template<class... UTypes>
      constexpr const tuple& operator=(const tuple<UTypes...>&) const;
    template<class... UTypes>
      constexpr tuple& operator=(tuple<UTypes...>&&);
    template<class... UTypes>
      constexpr const tuple& operator=(tuple<UTypes...>&&) const;

    template<class U1, class U2>
      constexpr tuple& operator=(const pair<U1, U2>&);          // [:en] only if [`sizeof...(Types) == 2] \
                                                                [:zh_CN] 仅当 [`sizeof...(Types) == 2]
    template<class U1, class U2>
      constexpr const tuple& operator=(const pair<U1, U2>&) const;
                                                                // [:en] only if [`sizeof...(Types) == 2] \
                                                                [:zh_CN] 仅当 [`sizeof...(Types) == 2]
    template<class U1, class U2>
      constexpr tuple& operator=(pair<U1, U2>&&);               // [:en] only if [`sizeof...(Types) == 2] \
                                                                [:zh_CN] 仅当 [`sizeof...(Types) == 2]
    template<class U1, class U2>
      constexpr const tuple& operator=(pair<U1, U2>&&) const;   // [:en] only if [`sizeof...(Types) == 2] \
                                                                [:zh_CN] 仅当 [`sizeof...(Types) == 2]

    template<[[redoc("*:c>")]]tuple-like UTuple>
      constexpr tuple& operator=(UTuple&&);
    template<[[redoc("*:c>")]]tuple-like UTuple>
      constexpr const tuple& operator=(UTuple&&) const;

    // [:en] [#tuple.swap], [`tuple] swap \
    [:zh_CN] [#tuple.swap]，[`tuple] 的交换
    constexpr void swap(tuple&) noexcept([[redoc("[=seebelow]")]]);
    constexpr void swap(const tuple&) const noexcept([[redoc("[=seebelow]")]]);
  };

  template<class... UTypes>
    tuple(UTypes...) -> tuple<UTypes...>;
  template<class T1, class T2>
    tuple(pair<T1, T2>) -> tuple<T1, T2>;
  template<class Alloc, class... UTypes>
    tuple(allocator_arg_t, Alloc, UTypes...) -> tuple<UTypes...>;
  template<class Alloc, class T1, class T2>
    tuple(allocator_arg_t, Alloc, pair<T1, T2>) -> tuple<T1, T2>;
  template<class Alloc, class... UTypes>
    tuple(allocator_arg_t, Alloc, tuple<UTypes...>) -> tuple<UTypes...>;
}
[codeblock:end]

[para]
[:en] If a program declares an explicit or partial specialization of [`tuple],
the program is ill-formed, no diagnostic required.
[:zh_CN] 如果程序声明了 [`tuple] 的显式或部分特化式，则程序非良构，无须诊断。
