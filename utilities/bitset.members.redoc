[section#bitset.members
    [:en] Members
    [:zh_CN] 成员
]

[%@lib@member operator&=[!bitset]]
[codeblock:declaration]
bitset& operator&=(const bitset& rhs) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Clears each bit in [`*this] for which the corresponding bit in [`rhs] is
clear, and leaves all other bits unchanged.
[:zh_CN] 清除 [`*this] 中的每个 [`rhs] 中的对应位被清除的位，而其他位保持不变。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@lib@member operator|=[!bitset]]
[codeblock:declaration]
bitset& operator|=(const bitset& rhs) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Sets each bit in [`*this] for which the corresponding bit in [`rhs] is
set, and leaves all other bits unchanged.
[:zh_CN] 设置 [`*this] 中的每个 [`rhs] 中的对应位被置位的位，而其他位保持不变。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@lib@member operator^=[!bitset]]
[codeblock:declaration]
bitset& operator^=(const bitset& rhs) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Toggles each bit in [`*this] for which the corresponding bit in [`rhs] is
set, and leaves all other bits unchanged.
[:zh_CN] 切换 [`*this] 中的每个 [`rhs] 中的对应位被置位的位，而其他位保持不变。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@lib@member operator<<=[!bitset]]
[codeblock:declaration]
bitset& operator<<=(size_t pos) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Replaces each bit at position [`I] in [`*this] with a value determined as
follows:
[:zh_CN] 将 [`*this] 中的每个处于位置 [`I] 的位替换为以下所确定的值：

[list]
[item]
[:en] If [`I < pos], the new value is zero;
[:zh_CN] 若 [`I < pos]，则新值为零；
[item]
[:en] If [`I >= pos], the new value is the previous value of the bit at position
[`I - pos].
[:zh_CN] 若 [`I >= pos]，则新值为位置 [`I - pos] 的位之前的值。
[list:end]

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@lib@member operator>>=[!bitset]]
[codeblock:declaration]
bitset& operator>>=(size_t pos) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Replaces each bit at position [`I] in [`*this] with a value determined as
follows:
[:zh_CN] 将 [`*this] 中的每个处于位置 [`I] 的位替换为以下所确定的值：

[list]
[item]
[:en] If [`pos >= N - I], the new value is zero;
[:zh_CN] 若 [`pos >= N - I]，则新值为零；
[item]
[:en] If [`pos < N - I], the new value is the previous value of the bit at
position [`I + pos].
[:zh_CN] 若 [`pos < N - I]，则新值为位置 [`I + pos] 的位之前的值。
[list:end]

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@lib@raw [:en] [`set] (member) [:zh_CN] [`set]（成员）[![`bitset]]]
[%@lib bitset[!set]]
[codeblock:declaration]
bitset& set() noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Sets all bits in [`*this].
[:zh_CN] 置位 [`*this] 中的所有位。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@lib@raw [:en] [`set] (member) [:zh_CN] [`set]（成员）[![`bitset]]]
[%@lib bitset[!set]]
[codeblock:declaration]
bitset& set(size_t pos, bool val = true);
[codeblock:end]

[div:description]
[para:effects]
[:en] Stores a new value in the bit at position [`pos] in [`*this].
[:zh_CN] 在 [`*this] 中处于位置 [`pos] 的位中保存新值。

[:en] If [`val] is [`true], the stored value is one, otherwise it is zero.
[:zh_CN] 若 [`val] 为 [`true]，则所保存的值为一，否则为零。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。

[para:throws]
[:en] [%@lib out_of_range] [`out_of_range] if [`pos] does not correspond to
a valid bit position.
[:zh_CN] 当 [`pos] 无法对应于有效的位位置时抛出 [%@lib out_of_range]
[`out_of_range]。
[div:end]

[%@lib@member reset[!bitset]]
[codeblock:declaration]
bitset& reset() noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Resets all bits in [`*this].
[:zh_CN] 重置 [`*this] 中的所有位。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@lib@member reset[!bitset]]
[codeblock:declaration]
bitset& reset(size_t pos);
[codeblock:end]

[div:description]
[para:effects]
[:en] Resets the bit at position [`pos] in [`*this].
[:zh_CN] 重置 [`*this] 中处于位置 [`pos] 的位。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。

[para:throws]
[:en] [%@lib out_of_range] [`out_of_range] if [`pos] does not correspond to
a valid bit position.
[:zh_CN] 当 [`pos] 无法对应于有效的位位置时抛出 [%@lib out_of_range]
[`out_of_range]。
[div:end]

[%@lib@member operator~[!bitset]]
[codeblock:declaration]
bitset operator~() const noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Constructs an object [`x] of class [`bitset] and initializes it with
[`*this].
[:zh_CN] 构造类 [`bitset] 的一个对象 [`x]，并以 [`*this] 对其进行初始化。

[para:returns]
[:en] [`x.flip()].
[:zh_CN] [`x.flip()]。
[div:end]

[%@lib@member flip[!bitset]]
[codeblock:declaration]
bitset& flip() noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Toggles all bits in [`*this].
[:zh_CN] 切换 [`*this] 中的所有位。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@lib@member flip[!bitset]]
[codeblock:declaration]
bitset& flip(size_t pos);
[codeblock:end]

[div:description]
[para:effects]
[:en] Toggles the bit at position [`pos] in [`*this].
[:zh_CN] 切换 [`*this] 中处于位置 [`pos] 的位。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。

[para:throws]
[:en] [%@lib out_of_range] [`out_of_range] if [`pos] does not correspond to
a valid bit position.
[:zh_CN] 当 [`pos] 无法对应于有效的位位置时抛出 [%@lib out_of_range]
[`out_of_range]。
[div:end]

[%@lib@member to_ulong[!bitset]]
[codeblock:declaration]
unsigned long to_ulong() const;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`x].
[:zh_CN] [`x]。

[para:throws]
[:en] [%@lib overflow_error][`overflow_error] if the integral value [`x]
corresponding to the bits in [`*this] cannot be represented as type
[`unsigned long].
[:zh_CN] 当对应于 [`*this] 中的位的整型值 [`x] 无法以类型 [`unsigned long] 表示
时，抛出 [%@lib overflow_error] [`overflow_error]。
[div:end]

[%@lib@member to_ullong[!bitset]]
[codeblock:declaration]
unsigned long long to_ullong() const;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`x].
[:zh_CN] [`x]。

[para:throws]
[:en] [%@lib overflow_error] [`overflow_error] if the integral value [`x]
corresponding to the bits in [`*this] cannot be represented as type
[`unsigned long long].
[:zh_CN] 当对应于 [`*this] 中的位的整型值 [`x] 无法以类型 [`unsigned long long]
表示时，抛出 [%@lib overflow_error] [`overflow_error]。
[div:end]

[%@lib@member to_string[!bitset]]
[codeblock:declaration]
template<class charT = char,
         class traits = char_traits<charT>,
         class Allocator = allocator<charT>>
  basic_string<charT, traits, Allocator>
    to_string(charT zero = charT('0'), charT one = charT('1')) const;
[codeblock:end]

[div:description]
[para:effects]
[:en] Constructs a string object of the appropriate type and initializes it to a
string of length [`N] characters.
[:zh_CN] 构造相应类型的字符串对象，并将其初始化为 [`N] 个字符长度的字符串。

[:en] Each character is determined by the value of its corresponding bit
position in [`*this].
[:zh_CN] 各个字符以其在 [`*this] 中的对应位位置的值来确定。

[:en] Character position [`N - 1] corresponds to bit position zero.
[:zh_CN] 字符位置 [`N - 1] 对应于位位置零。

[:en] Subsequent decreasing character positions correspond to increasing bit
positions.
[:zh_CN] 随后的字符位置按降序对应于升序的位位置。

[:en] Bit value zero becomes the character [`zero], bit value one becomes the
character [`one].
[:zh_CN] 位的值零成为字符 [`zero]，而位的值一成为字符 [`one]。

[para:returns]
[:en] The created object.
[:zh_CN] 所创建的对象。
[div:end]

[%@lib@member count[!bitset]]
[codeblock:declaration]
size_t count() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] A count of the number of bits set in [`*this].
[:zh_CN] [`*this] 中被置位的位的个数。
[div:end]

[%@lib@member size[!bitset]]
[codeblock:declaration]
constexpr size_t size() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`N].
[:zh_CN] [`N]。
[div:end]

[%@lib@member operator==[!bitset]]
[codeblock:declaration]
bool operator==(const bitset& rhs) const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`true] if the value of each bit in [`*this] equals the value of the
corresponding bit in [`rhs].
[:zh_CN] 当 [`*this] 中的各个位等于 [`rhs] 中的对应位时为 [`true]。
[div:end]

[%@lib@member test[!bitset]]
[codeblock:declaration]
bool test(size_t pos) const;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`true] if the bit at position [`pos] in [`*this] has the value one.
[:zh_CN] 当 [`*this] 中处于位置 [`pos] 的位的值为一时返回 [`true]。

[para:throws]
[:en] [%@lib out_of_range] [`out_of_range] if [`pos] does not correspond to
a valid bit position.
[:zh_CN] 当 [`pos] 无法对应于有效的位位置时抛出 [%@lib out_of_range]
[`out_of_range]。
[div:end]

[%@lib@member all[!bitset]]
[codeblock:declaration]
bool all() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`count() == size()].
[:zh_CN] [`count() == size()]。
[div:end]

[%@lib@raw [:en] [`any] (member) [:zh_CN] [`any]（成员）[![`bitset]]]
[%@lib bitset[!any]]
[codeblock:declaration]
bool any() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`count() != 0].
[:zh_CN] [`count() != 0]。
[div:end]

[%@lib@member none[!bitset]]
[codeblock:declaration]
bool none() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`count() == 0].
[:zh_CN] [`count() == 0]。
[div:end]

[%@lib@member operator<<[!bitset]]
[codeblock:declaration]
bitset operator<<(size_t pos) const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`bitset<N>(*this) <<= pos].
[:zh_CN] [`bitset<N>(*this) <<= pos]。
[div:end]

[%@lib@member operator>>[!bitset]]
[codeblock:declaration]
bitset operator>>(size_t pos) const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`bitset(*this) >>= pos].
[:zh_CN] [`bitset(*this) >>= pos]。
[div:end]

[%@lib@member operator`[`][!bitset]]
[codeblock:declaration]
constexpr bool operator[](size_t pos) const;
[codeblock:end]

[div:description]
[para:expects]
[:en] [`pos] is valid.
[:zh_CN] [`pos] 有效。

[para:returns]
[:en] [`true] if the bit at position [`pos] in [`*this] has the value one,
otherwise [`false].
[:zh_CN] 当 [`*this] 中处于位置 [`pos] 的位的值为一时返回 [`true]，否则为
[`false]。

[para:throws]
[:en] Nothing.
[:zh_CN] 无。
[div:end]

[%@lib@member operator`[`][!bitset]]
[codeblock:declaration]
bitset::reference operator[](size_t pos);
[codeblock:end]

[div:description]
[para:expects]
[:en] [`pos] is valid.
[:zh_CN] [`pos] 有效。

[para:returns]
[:en] An object of type [`bitset::reference] such that
[`(*this)`[pos`] == this->test(pos)], and such that [`(*this)`[pos`] = val] is
equivalent to [`this->set(pos, val)].
[:zh_CN] [`bitset::reference] 类型的对象，使得
[`(*this)`[pos`] == this->test(pos)]，并使得 [`(*this)`[pos`] = val] 等价于
[`this->set(pos, val)]。

[para:throws]
[:en] Nothing.
[:zh_CN] 无。

[para:remarks]
[:en] For the purpose of determining the presence of a data race
([#intro.multithread]), any access or update through the resulting reference
potentially accesses or modifies, respectively, the entire underlying bitset.
[:zh_CN] 当确定数据竞争的存在性时（[#intro.multithread]），任何通过其所返回的
引用进行的访问或更改，都分别访问或更改其整个底层 [`bitset]。
[div:end]
