[section#charconv.syn
    [:en] Header [`<charconv>] synopsis
    [:zh_CN] 头文件 [`<charconv>] 纲要
]

[%@hdr@def charconv]
[codeblock:synopsis]
[[redoc("
[%@lib chars_format]
[%@lib@member scientific[!chars_format]]
[%@lib@member fixed[!chars_format]]
[%@lib@member hex[!chars_format]]
[%@lib@member general[!chars_format]]
")]]\
namespace std {
  // [:en] floating-point format for primitive numerical conversion \
     [:zh_CN] 基础数值转换的浮点格式
  enum class chars_format {
    scientific = [[redoc("[=unspec]")]],
    fixed = [[redoc("[=unspec]")]],
    hex = [[redoc("[=unspec]")]],
    general = fixed | scientific
  };
[[redoc("
[%@lib to_chars_result]
[%@lib@member ptr[!to_chars_result]]
[%@lib@member ec[!to_chars_result]]
")]]
  // [:en] [#charconv.to.chars], primitive numerical output conversion \
     [:zh_CN] [#charconv.to.chars]，基础数值输出转换
  struct to_chars_result {
    char* ptr;
    errc ec;
    friend bool operator==(const to_chars_result&, const to_chars_result&) = default;
  };

  to_chars_result to_chars(char* first, char* last, [[redoc("[=seebelow]")]] value, int base = 10);
  to_chars_result to_chars(char* first, char* last, bool value, int base = 10) = delete;

  to_chars_result to_chars(char* first, char* last, float value);
  to_chars_result to_chars(char* first, char* last, double value);
  to_chars_result to_chars(char* first, char* last, long double value);

  to_chars_result to_chars(char* first, char* last, float value, chars_format fmt);
  to_chars_result to_chars(char* first, char* last, double value, chars_format fmt);
  to_chars_result to_chars(char* first, char* last, long double value, chars_format fmt);

  to_chars_result to_chars(char* first, char* last, float value,
                           chars_format fmt, int precision);
  to_chars_result to_chars(char* first, char* last, double value,
                           chars_format fmt, int precision);
  to_chars_result to_chars(char* first, char* last, long double value,
                           chars_format fmt, int precision);
[[redoc("
[%@lib from_chars_result]
[%@lib@member ptr[!from_chars_result]]
[%@lib@member ec[!from_chars_result]]
")]]
  // [:en] [#charconv.from.chars], primitive numerical input conversion \
     [:zh_CN] [#charconv.from.chars]，基础数值输入转换
  struct from_chars_result {
    const char* ptr;
    errc ec;
    friend bool operator==(const from_chars_result&, const from_chars_result&) = default;
  };

  from_chars_result from_chars(const char* first, const char* last,
                               [[redoc("[=seebelow]")]]& value, int base = 10);

  from_chars_result from_chars(const char* first, const char* last, float& value,
                               chars_format fmt = chars_format::general);
  from_chars_result from_chars(const char* first, const char* last, double& value,
                               chars_format fmt = chars_format::general);
  from_chars_result from_chars(const char* first, const char* last, long double& value,
                               chars_format fmt = chars_format::general);
}
[codeblock:end]

[para]
[:en]
The type [`chars_format] is a bitmask type ([#bitmask.types]) with elements
[`scientific], [`fixed], and [`hex].
[:zh_CN]
类型 [`chars_format] 是一种掩码类型（[#bitmask.types]），具有 [`scientific]、
[`fixed] 和 [`hex] 等元素。

[para]
[:en]
The types [`to_chars_result] and [`from_chars_result] have the data members and
special members specified above.
[:zh_CN]
类型 [`to_chars_result] 和 [`from_chars_result] 具有以上指定的各个数据成员和
特殊成员。

[:en]
They have no base classes or members other than those specified.
[:zh_CN]
它们没有基类或除了所指定之外的其他成员。
