[section#comparisons.equal.to
    [:en] Class template [`equal_to]
    [:zh_CN] 类模板 [`equal_to]
]

[%@lib equal_to]
[codeblock:declaration]
template<class T = void> struct equal_to {
  constexpr bool operator()(const T& x, const T& y) const;
};
[codeblock:end]

[%@lib@member operator()[!equal_to]]
[codeblock:declaration]
constexpr bool operator()(const T& x, const T& y) const;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`x == y].
[:zh_CN] [`x == y]。
[div:end]

[%@lib equal_to<>]
[codeblock:declaration]
template<> struct equal_to<void> {
  template<class T, class U> constexpr auto operator()(T&& t, U&& u) const
    -> decltype(std::forward<T>(t) == std::forward<U>(u));

  using is_transparent = [[redoc("[=unspec]")]];
};
[codeblock:end]

[%@lib@member operator()[!equal_to<>]]
[codeblock:declaration]
template<class T, class U> constexpr auto operator()(T&& t, U&& u) const
    -> decltype(std::forward<T>(t) == std::forward<U>(u));
[codeblock:end]

[div:description]
[para:returns]
[:en] [`std::forward<T>(t) == std::forward<U>(u)].
[:zh_CN] [`std::forward<T>(t) == std::forward<U>(u)]。
[div:end]
