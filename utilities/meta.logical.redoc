[section#meta.logical
    [:en] Logical operator traits
    [:zh_CN] 逻辑运算符特征
]

[para]
[:en] This subclause describes type traits for applying logical operators
to other type traits.
[:zh_CN] 本子条款描述的类型特征用于在其他类型特征上实施逻辑运算符。

[%@library conjunction]
[codeblock:declaration [!:mark SeeBelow] ]
template<class... B> struct conjunction : [=SeeBelow] { };
[codeblock:end]

[enter:description]
[para]
[:en] The class template [`conjunction] forms the logical conjunction of its
template type arguments.
[:zh_CN] 类模板 [`conjunction] 构成对其模板类型实参的逻辑合取。

[para]
[:en] For a specialization [`conjunction<B1, ..., BN>], if there is a template
type argument [`Bi] for which [`bool(Bi::value)] is [`false], then instantiating
[`conjunction<B1, ..., BN>::value] does not require the instantiation of
[`Bj::value] for [`j > i].
[:zh_CN] 对于特例 [`conjunction<B1, ..., BN>]，如果某个模板类型实参 [`Bi]，使得
[`bool(Bi::value)] 为 [`false]，则对 [`conjunction<B1, ..., BN>::value] 的实例化
并不需要对 [`j > i] 的 [`Bj::value] 的实例化。

[enter:note]
[:en] This is analogous to the short-circuiting behavior of the built-in
operator [`&&].
[:zh_CN] 这类似于内建运算符 [`&&] 的短路行为。
[exit:note]

[para]
[:en] Every template type argument for which [`Bi::value] is instantiated shall
be usable as a base class and shall have a member [`value] which is convertible
to [`bool], is not hidden, and is unambiguously available in the type.
[:zh_CN] 对 [`Bi::value] 进行了实例化的每个模板类型实参，都应当可以被用作基类，
而且应当具有一个可转换为 [`bool]，未被隐藏，且在该类型中可以无歧义访问的成员
[`value]。

[para]
[:en] The specialization [`conjunction<B1, ..., BN>] has a public and
unambiguous base that is either
[:zh_CN] 特例 [`conjunction<B1, ..., BN>] 具有一个公用并且无歧义的基类：

[list]
[item]
[:en] the first type [`Bi] in the list [`true_type, B1, ..., BN] for which
[`bool(Bi::value)] is [`false], or
[:zh_CN] 列表 [`true_type, B1, ..., BN] 中的第一个类型 [`Bi]，使得
[`bool(Bi::value)] 为 [`false]，或者

[item]
[:en] if there is no such [`Bi], the last type in the list.
[:zh_CN] 若没有这样的 [`Bi]，则为列表中的最后一个类型。
[list:end]

[enter:note]
[:en] This means a specialization of [`conjunction] does not necessarily inherit
from either [`true_type] or [`false_type].
[:zh_CN] 这意味着 [`conjunction] 的特例不必继承与 [`true_type] 或 [`false_type]。
[exit:note]

[para]
[:en] The member names of the base class, other than [`conjunction] and
[`operator=], shall not be hidden and shall be unambiguously available in
[`conjunction].
[:zh_CN] 其基类中除了 [`conjunction] 和 [`operator=] 之外的各成员名，不能被隐藏
且应当在 [`conjunction] 中可以无歧义地访问。
[exit:description]

[%@library disjunction]
[codeblock:declaration [!:mark SeeBelow] ]
template<class... B> struct disjunction : [=SeeBelow] { };
[codeblock:end]

[enter:description]
[para]
[:en] The class template [`disjunction] forms the logical disjunction of its
template type arguments.
[:zh_CN] 类模板 [`disjunction] 构成对其模板类型实参的逻辑析取。

[para]
[:en] For a specialization [`disjunction<B1, ..., BN>], if there is a template
type argument [`Bi] for which [`bool(Bi::value)] is [`true], then instantiating
[`disjunction<B1, ..., BN>::value] does not require the instantiation of
[`Bj::value] for [`j > i].
[:zh_CN] 对于特例 [`disjunction<B1, ..., BN>]，如果某个模板类型实参 [`Bi]，使得
[`bool(Bi::value)] 为 [`true]，则对 [`disjunction<B1, ..., BN>::value] 的实例化
并不需要对 [`j > i] 的 [`Bj::value] 的实例化。

[enter:note]
[:en] This is analogous to the short-circuiting behavior of the built-in
operator [`||].
[:zh_CN] 这类似于内建运算符 [`||] 的短路行为。
[exit:note]

[para]
[:en] Every template type argument for which [`Bi::value] is instantiated shall
be usable as a base class and shall have a member [`value] which is convertible
to [`bool], is not hidden, and is unambiguously available in the type.
[:zh_CN] 对 [`Bi::value] 进行了实例化的每个模板类型实参，都应当可以被用作基类，
而且应当具有一个可转换为 [`bool]，未被隐藏，且在该类型中可以无歧义访问的成员
[`value]。

[para]
[:en] The specialization [`disjunction<B1, ..., BN>] has a public and
unambiguous base that is either
[:zh_CN] 特例 [`disjunction<B1, ..., BN>] 具有一个公用并且无歧义的基类：

[list]
[item]
[:en] the first type [`Bi] in the list [`false_type, B1, ..., BN] for which
[`bool(Bi::value)] is [`true], or
[:zh_CN] 列表 [`false_type, B1, ..., BN] 中的第一个类型 [`Bi]，使得
[`bool(Bi::value)] 为 [`true]，或者

[item]
[:en] if there is no such [`Bi], the last type in the list.
[:zh_CN] 若没有这样的 [`Bi]，则为列表中的最后一个类型。
[list:end]

[enter:note]
[:en] This means a specialization of [`disjunction] does not necessarily inherit
from either [`true_type] or [`false_type].
[:zh_CN] 这意味着 [`disjunction] 的特例不必继承与 [`true_type] 或 [`false_type]。
[exit:note]

[para]
[:en] The member names of the base class, other than [`disjunction] and
[`operator=], shall not be hidden and shall be unambiguously available in
[`disjunction].
[:zh_CN] 其基类中除了 [`disjunction] 和 [`operator=] 之外的各成员名，不能被隐藏
且应当在 [`disjunction] 中可以无歧义地访问。
[exit:description]

[%@library negation]
[codeblock:declaration [!:mark SeeBelow] ]
template<class B> struct negation : [=SeeBelow] { };
[codeblock:end]

[enter:description]
[para]
[:en] The class template [`negation] forms the logical negation of its template
type argument.
[:zh_CN] 类模板 [`negation] 构成其模板类型实参的逻辑取反。

[:en] The type [`negation<B>] is a [*Cpp17UnaryTypeTrait] with a base
characteristic of [`bool_constant<!bool(B::value)>].
[:zh_CN] 类型 [`negation<B>] 是一种 [*Cpp17UnaryTypeTrait]，其基础特征为
[`bool_constant<!bool(B::value)>]。
[exit:description]
