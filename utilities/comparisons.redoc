[section#comparisons
    [:en] Comparisons
    [:zh_CN] 比较
]

[para]
[:en]
The library provides basic function object classes for all of the comparison
operators in the language ([#expr.rel], [#expr.eq]).
[:zh_CN]
程序库为语言中的所有比较运算符（[#expr.rel]，[#expr.eq]）提供了基本的函数对象类。

[para]
[:en]
For templates [`less], [`greater], [`less_equal], and [`greater_equal], the
specializations for any pointer type yield a strict total order that is
consistent among those specializations and is also consistent with the partial
order imposed by the built-in operators [`<], [`>], [`<=], [`>=].
[:zh_CN]
对于模板 [`less]、[`greater]、[`less_equal] 和 [`greater_equal]，它们对任意指针
类型的特例均构成一个严格全序，并在这些特例之间保持一致，而且与由内建的运算符
[`<]、[`>]、[`<=]、[`>=] 所蕴含的部分顺序之间也保持一致。

[enter:note]
[:en]
When [`a < b] is well-defined for pointers [`a] and [`b] of type [`P], this
implies [`(a < b) == less<P>()(a, b)], [`(a > b) == greater<P>()(a, b)], and so
forth.
[:zh_CN]
如果对于 [`P] 类型的指针 [`a] 和 [`b]，[`a < b] 良构，那么这就意味着
[`(a < b) == less<P>()(a, b)]，[`(a > b) == greater<P>()(a, b)]，以此类推。

[:en]
For template specializations [`less<void>], [`greater<void>],
[`less_equal<void>], and [`greater_equal<void>], if the call operator calls a
built-in operator comparing pointers, the call operator yields a strict total
order that is consistent among those specializations and is also consistent with
the partial order imposed by those built-in operators.
[:zh_CN]
对于模板特例 [`less<void>]、[`greater<void>]、[`less_equal<void>]
和 [`greater_equal<void>]，如果其调用运算符调用了某个对指针进行比较的内建运算符，
则该调用运算符构成一个严格全序，并在这些特例之间保持一致，而且与由内建的运算符所
蕴含的部分顺序之间也保持一致。

[include comparisons.equal_to]

[include comparisons.not_equal_to]

[include comparisons.greater]

[include comparisons.less]

[include comparisons.greater_equal]

[include comparisons.less_equal]
