[section#comparisons
    [:en] Comparisons
    [:zh_CN] 比较
]

[para]
[:en]
The library provides basic function object classes for all of the comparison
operators in the language ([#expr.rel], [#expr.eq]).
[:zh_CN]
程序库为语言中的所有比较运算符（[#expr.rel]，[#expr.eq]）提供了基本的函数对象类。

[para]
[:en]
For templates [`less], [`greater], [`less_equal], and [`greater_equal], the
specializations for any pointer type yield a result consistent with the
implementation-defined strict total order over pointers ([#defns.order.ptr]).
[:zh_CN]
对于模板 [`less]、[`greater]、[`less_equal] 和 [`greater_equal]，它们对任意指针
类型的特例所产生的结果，均与由实现定义的指针上的严格全序（[#defns.order.ptr]）
保持一致。

[begin:note]
[:en]
If [`a < b] is well-defined for pointers [`a] and [`b] of type [`P], then
[`(a < b) == less<P>()(a, b)], [`(a > b) == greater<P>()(a, b)], and so forth.
[:zh_CN]
如果对于 [`P] 类型的指针 [`a] 和 [`b]，[`a < b] 良构，那么
[`(a < b) == less<P>()(a, b)]，[`(a > b) == greater<P>()(a, b)]，以此类推。

[:en]
For template specializations [`less<void>], [`greater<void>], [`less_equal<void>],
and [`greater_equal<void>], if the call operator calls a built-in operator
comparing pointers, the call operator yields a result consistent with the
implementation-defined strict total order over pointers.
[:zh_CN]
对于模板特例 [`less<void>]、[`greater<void>]、[`less_equal<void>]
和 [`greater_equal<void>]，如果其调用运算符调用了某个对指针进行比较的内建运算符，
则该调用运算符所产生的结果，与由实现定义的指针上的严格全序保持一致。

[include comparisons.equal.to]

[include comparisons.not.equal.to]

[include comparisons.greater]

[include comparisons.less]

[include comparisons.greater.equal]

[include comparisons.less.equal]

[include comparisons.three.way]
