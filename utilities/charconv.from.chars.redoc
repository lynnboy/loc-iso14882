[section#charconv.from.chars
    [:en] Primitive numberic input conversion
    [:zh_CN] 基础数值输入转换
]

[para]
All functions named [`from_chars] analyze the string [=range(first,last)] for a
pattern, where [=range(first,last)] is required to be a valid range.
[:zh_CN]
所有名为 [`from_chars] 的函数都根据某个模式分析字符串 [=range(first,last)]，其中
[=range(first,last)] 必须是有效的范围。

[:en]
If no characters match the pattern, [`value] is unmodified, the member [`ptr] of
the return value is [`first] and the member [`ec] is equal to
[`errc::invalid_argument].
[:zh_CN]
如果没有匹配该模式的字符串，则不改动 [`value]，返回值的成员 [`ptr] 为 [`first]，
而成员 [`ec] 等于 [`errc::invalid_argument]。

[begin:note]
[:en]
If the pattern allows for an optional sign, but the string has no digit
characters following the sign, no characters match the pattern.
[:zh_CN]
如果模式中允许可选的正负号，但字符串在正负号后没有数字字符，则也没有匹配该模式的
字符。
[end:note]

[:en]
Otherwise, the characters matching the pattern are interpreted as a
representation of a value of the type of [`value].
[:zh_CN]
否则，将与模式匹配的字符按照 [`value] 的类型的一个值进行解释。

[:en]
The member [`ptr] of the return value points to the first character not matching
the pattern, or has the value [`last] if all characters match.
[:zh_CN]
返回值的成员 [`ptr] 指向不与模式匹配的第一个字符，或者当所有字符均匹配时其值为
[`last]。

[:en]
If the parsed value is not in the range representable by the type of [`value],
[`value] is unmodified and the member [`ec] of the return value is equal to
[`errc::result_out_of_range].
[:zh_CN]
如果所解析的值不在 [`value] 的类型的可表示范围之内，则不改变 [`value]，返回值的
成员 [`ec] 等于 [`errc::result_out_of_range]。

[:en]
Otherwise, [`value] is set to the parsed value, after rounding according to
[`round_to_nearest] ([#round.style]), and the member [`ec] is value-initialized.
[:zh_CN]
否则，[`value] 被设为所解析的值根据 [`round_to_nearest]（[#round.style]）进行
舍入后的值，而成员 [`ec] 则被值初始化。

[%@library from_chars]
[codeblock:declaration]
from_chars_result from_chars(const char* first, const char* last,
                             [[redoc("=seebelow")]]& value, int base = 10);
[codeblock:end]

[begin:description]
[para:requires]
[:en] [`base] has a value between 2 and 36 (inclusive).
[:zh_CN] [`base] 的值在 2 到 36 之内（含边界）。

[para:effects]
[:en] The pattern is the expected form of the subject sequence in the [`"C"]
locale for the given nonzero base, as described for [`strtol], except that no
[`"0x"] or [`"0X"] prefix shall appear if the value of [`base] is 16, and except
that a minus sign is the only sign that may appear, and only if [`value] has a
signed type.
[:zh_CN] 其模式如同对于 [`strtol] 中所述在 [`"C"] 地域中对于给定的非零基数的序列
的预期形式，但当 [`base] 为 16 时不能出现前缀 [`"0x"] 或 [`"0X"]，并且仅当
[`value] 具有有符号类型时，一个减号是唯一可以出现的正负号。

[para:throws]
[:en] Nothing.
[:zh_CN] 无。

[para:remarks]
[:en] The implementation shall provide overloads for all signed and unsigned
integer types and [`char] as the referenced type of the parameter [`value].
[:zh_CN] 实现应当为所有有符号和无符号整数类型和 [`char] 作为形参 [`value] 所引用
的类型提供重载。
[end:description]

[%@library from_chars]
[codeblock:declaration]
from_chars_result from_chars(const char* first, const char* last, float& value,
                             chars_format fmt = chars_format::general);
from_chars_result from_chars(const char* first, const char* last, double& value,
                             chars_format fmt = chars_format::general);
from_chars_result from_chars(const char* first, const char* last, long double& value,
                             chars_format fmt = chars_format::general);
[codeblock:end]

[begin:description]
[para:requires]
[:en] [`fmt] has the value of one of the enumerators of [`chars_format].
[:zh_CN] [`fmt] 具有 [`chars_format] 的枚举符之一的值。

[para:effects]
[:en] The pattern is the expected form of the subject sequence in the [`"C"]
locale, as described for [`strtod], except that
[:zh_CN] 其模式如同对于 [`strtod] 中所述在 [`"C"] 地域中序列的预期形式，但

[list]
[item]
[:en] the sign [`'-'] may only appear in the exponent part;
[:zh_CN] 正负号 [`'-'] 只能出现在指数部分中；
[item]
[:en] if [`fmt] has [`chars_format::scientific] set but not
[`chars_format::fixed], the otherwise optional exponent part shall appear;
[:zh_CN] 当 [`fmt] 设置了 [`chars_format::scientific] 但未设置
[`chars_format::fixed] 时，原本可选的指数部分应当存在；
[item]
[:en] if [`fmt] has [`chars_format::fixed] set but not
[`chars_format::scientific], the optional exponent part shall not appear; and
[:zh_CN] 当 [`fmt] 设置了 [`chars_format::fixed] 但未设置
[`chars_format::scientific] 时，原本可选的指数部分不能出现；以及
[item]
[:en] if [`fmt] is [`chars_format::hex], the prefix [`"0x"] or [`"0X"] is
assumed.
[:zh_CN] 当 [`fmt] 为 [`chars_format::fixed] 时，假定已读取前缀 [`"0x"] 或
[`"0X"]。

[begin:example]
[:en] The string [`0x123] is parsed to have the value [`0] with remaining
characters [`x123].
[:zh_CN] 字符串 [`0x123] 被解析为具有 [`0] 值，并余下字符 [`x123]。
[end:example]
[list:end]

[:en] In any case, the resulting [`value] is one of at most two floating-point
values closest to the value of the string matching the pattern.
[:zh_CN] 无论何种情况，结果 [`value] 是与字符串匹配模式的值最接近的至多两个
浮点值之一。

[para:throws]
[:en] Nothing.
[:zh_CN] 无。
[end:description]

[para:xref@c] 7.22.1.3, 7.22.1.4
