[section#uninitialized.construct.default
    [`uninitialized_default_construct]
]

[%@library uninitialized_default_construct]
[codeblock:declaration]
template<class ForwardIterator>
  void uninitialized_default_construct(ForwardIterator first, ForwardIterator last);
[codeblock:end]

[begin:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock:notation [!:var voidify]]
for (; first != last; ++first)
  ::new ([*voidify](*first))
    typename iterator_traits<ForwardIterator>::value_type;
[codeblock:end]
[end:description]

[%@library uninitialized_default_construct]
[codeblock:declaration [!:var no-throw-forward-iterator no-throw-forward-range no-throw-sentinel]]
namespace ranges {
  template<[*no-throw-forward-iterator] I, [*no-throw-sentinel]<I> S>
      requires default_constructible<iter_value_t<I>>
    I uninitialized_default_construct(I first, S last);
  template<[*no-throw-forward-range] R>
      requires default_constructible<range_value_t<R>>
    safe_iterator_t<R> uninitialized_default_construct(R&& r);
}
[codeblock:end]

[begin:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock:notation [!:var voidify]]
for (; first != last; ++first)
  ::new ([*voidify](*first)) remove_reference_t<iter_reference_t<I>>;
return first;
[codeblock:end]
[end:description]

[%@library uninitialized_default_construct_n]
[codeblock:declaration]
template<class ForwardIterator, class Size>
  ForwardIterator uninitialized_default_construct_n(ForwardIterator first, Size n);
[codeblock:end]

[begin:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock:notation [!:var voidify]]
for (; n > 0; (void)++first, --n)
  ::new ([*voidify](*first))
    typename iterator_traits<ForwardIterator>::value_type;
return first;
[codeblock:end]
[end:description]

[%@library uninitialized_default_construct_n]
[codeblock:declaration [!:var no-throw-forward-iterator]]
namespace ranges {
  template<[*no-throw-forward-iterator] I>
      requires default_constructible<iter_value_t<I>>
    I uninitialized_default_construct_n(I first, iter_difference_t<I> n);
}
[codeblock:end]

[begin:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock:notation]
return uninitialized_default_construct(counted_iterator(first, n),
                                       default_sentinel).base();
[codeblock:end]
[end:description]
