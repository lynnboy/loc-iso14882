[section#tuple.creation
    [:en] Tuple creation functions
    [:zh_CN] 元组创建函数
]

[para]
[:en]
In the function descriptions that follow, the members of a template parameter
pack [`[^X]Types] are denoted by [`[^X]][$_i] for [$i] in
[=range(0,sizeof...(`[^X`]Types))] in order, where indexing is zero-based.
[:zh_CN]
下文的函数描述中，模板形参包组 [`[^X]Types] 的各个成员，对于
[=range(0,sizeof...(`[^X`]Types))] 中依序取值的 [$i]，由 [`[^X]][$_i] 所代表，
其中的索引基于零。

[%@library make_tuple]
[%@library tuple[!make_tuple]]
[codeblock:declaration]
template<class... TTypes>
  constexpr tuple<unwrap_ref_decay_t<TTypes>...> make_tuple(TTypes&&... t);
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`tuple<unwrap_ref_decay_t<TTypes>...>(std::forward<TTypes>(t)...)].
[:zh_CN] [`tuple<unwrap_ref_decay_t<TTypes>...>(std::forward<TTypes>(t)...)]。

[para]
[begin:example]
[codeblock]
int i; float j;
make_tuple(1, ref(i), cref(j))
[codeblock:end]

[:en@~] creates a tuple of type [`tuple<int, int&, const float&>].
[:zh_CN] 创建了一个 [`tuple<int, int&, const float&>] 类型的元组。
[end:example]
[end:description]

[%@library forward_as_tuple]
[%@library tuple[!forward_as_tuple]]
[codeblock:declaration]
template<class... TTypes>
  constexpr tuple<TTypes&&...> forward_as_tuple(TTypes&&... t) noexcept;
[codeblock:end]

[begin:description]
[para:effects]
[:en] Constructs a tuple of references to the arguments in [`t] suitable for
forwarding as arguments to a function.
[:zh_CN] 构造由指代 [`t] 中的实参的引用构成的元组，适用于作为实参转发给某个函数。

[:en] Because the result may contain references to temporary objects, a program
shall ensure that the return value of this function does not outlive any of its
arguments (e.g., the program should typically not store the result in a named
variable).
[:zh_CN] 由于其结果可能包含指代临时对象的引用，所以程序应当确保该函数的返回值的
生存期不会超过其任何实参（例如，典型情况下程序不能将其结果保存到命名的变量中。）

[para:returns]
[:en] [`tuple<TTypes&&...>(std::forward<TTypes>(t)...)].
[:zh_CN] [`tuple<TTypes&&...>(std::forward<TTypes>(t)...)]。
[end:description]

[%@library tie]
[%@library ignore]
[%@library tuple[!tie]]
[codeblock:declaration]
template<class... TTypes>
  constexpr tuple<TTypes&...> tie(TTypes&... t) noexcept;
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`tuple<TTypes&...>(t...)].
[:zh_CN] [`tuple<TTypes&...>(t...)]。

[:en] When an argument in [`t] is [`ignore], assigning any value to the
corresponding tuple element has no effect.
[:zh_CN] 当 [`t] 中的实参为 [`ignore] 时，对其对应元组元素以任何值进行赋值均没有
效果。

[para]
[begin:example]
[:en] [`tie] functions allow one to create tuples that unpack tuples into
variables.
[:zh_CN] [`tie] 函数可以用于创建元组并被拆开到各个变量中。

[:en] [`ignore] can be used for elements that are not needed:
[:zh_CN] 可以为不需要的元素使用 [`ignore]：

[codeblock]
int i; std::string s;
tie(i, ignore, s) = make_tuple(42, 3.14, "C++");
// [`i == 42], [`s == "C++"]
[codeblock:end]
[end:example]
[end:description]

[%@library tuple_cat]
[codeblock:declaration]
template<class... Tuples>
  constexpr tuple<CTypes...> tuple_cat(Tuples&&... tpls);
[codeblock:end]

[begin:description]
[para]
[:en]
In the following paragraphs, let [`T][$_i] be the [$i][^th] type in [`Tuples],
[`U][$_i] be [`remove_reference_t<Ti>], and [`tp][$_i] be the [$i][^th]
parameter in the function parameter pack [`tpls], where all indexing is
zero-based.
[:zh_CN]
下列段落中，令 [`T][$_i] 为 [`Tuples] 中的第 [$i] 个类型，[`U][$_i] 为
[`remove_reference_t<Ti>]]，而 [`tp][$_i] 为函数形参包组 [`tpls] 中的第 [$i]
个形参，其中索引均基于零。

[para:requires]
[:en] For all [$i], [`U][$_i] shall be the type [$cv_i] [`tuple<Args[$_i]...>],
where [$cv_i] is the (possibly empty) [$i][^th] [~cv-qualifier-seq] and
[`Args][$_i] is the template parameter pack representing the element types in
[`U][$_i].
[:zh_CN] 对于所有 [$i]，[`U][$_i] 应当为类型“[$cv_i] [`tuple<Args[_[$i]]...>]”，
其中 [$cv_i] 为（可能为空的）第 [$i] 个 [~cv-限定符序列]，而 [`Args][$_i] 为表示
[`U][$_i] 中的元素类型的模板形参包组。

[:en] Let [`A][$_{ik}] be the [$k][^th] type in [`Args][$_i].
[:zh_CN] 令 [`A][$_{ik}] 为 [`Args][$_i] 中的第 [$k] 个类型。

[:en] For all [`A][$_{ik}] the following requirements shall be met:
[:zh_CN] 对于所有 [`A][$_{ik}]，下列规定均应当满足：

[list]
[item]
[:en] If [`T][$_i] is deduced as an lvalue reference type, then
[`is_constructible_v<A[$_{ik}], [$cv_i] A[$_{ik}]&> == true], otherwise
[:zh_CN] 若 [`T][$_i] 被推断为左值引用类型，则有
[`is_constructible_v<A[$_{ik}], [$cv_i] A[$_{ik}]&> == true]，否则有
[item]
[:en@~] [`is_constructible_v<A[$_{ik}], [$cv_i] A[$_{ik}]&&> == true].
[:zh_CN@~] [`is_constructible_v<A[$_{ik}], [$cv_i] A[$_{ik}]&&> == true]。
[list:end]

[para:remarks]
[:en] The types in [`CTypes] shall be equal to the ordered sequence of the
extended types [`Args[_0]..., Args[_1]..., [$\dotsc], Args[$_{n-1}]...],
where [$n] is equal to [`sizeof...(Tuples)].
[:zh_CN] [`[$Ctypes]] 中的类型应当等同于展开的类型的有序序列
[`Args[_0]..., Args[_1]..., [$\dotsc], Args[$_{n-1}]...]，其中 [$n] 等于
[`sizeof...(Tuples)]。

[:en] Let [`e[$_i]...] be the [$i][^th] ordered sequence of tuple elements of
the resulting [`tuple] object corresponding to the type sequence [`Args][$_i].
[:zh_CN] 令 [`e[$_i]...] 为结果 [`tuple] 对象中对应于类型序列 [`Args][$_i] 的第
[$i] 个元组元素的有序序列。

[para:returns]
[:en] A [`tuple] object constructed by initializing the [$k_i][^th] type element
[`e][$_{ik}] in [`e[$_i]...] with
[:zh_CN] 一个 [`tuple] 对象，其构造是对于每个有效的 [$k_i] 和每个分组 [`e][$_i]，
以

[codeblock:notation]
get<[$k_i]>(std::forward<T[$_i]>(tp[$_i]))
[codeblock:end]

[:en@~] for each valid [$k_i] and each group [`e][$_i] in order.
[:zh_CN@~] 对 [`e[$_i]...] 中的第 [$k_i] 个类型元素 [`e][$_{ik}] 进行初始化。

[para]
[begin:note]
[:en] An implementation may support additional types in the template parameter
pack [`Tuples] that support the [`tuple]-like protocol, such as [`pair] and
[`array].
[:zh_CN] 实现可以在模板形参包组 [`Tuples] 中支持其他支持 [`tuple] 式协议的类型，
比如 [`pair] 和 [`array]。
[end:note]
[end:description]
