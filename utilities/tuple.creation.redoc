[section#tuple.creation
    [:en] Tuple creation functions
    [:zh_CN] 元组创建函数
]

[%@lib make_tuple]
[%@lib@member tuple[!make_tuple]]
[codeblock:declaration]
template<class... TTypes>
  constexpr tuple<unwrap_ref_decay_t<TTypes>...> make_tuple(TTypes&&... t);
[codeblock:end]

[div:description]
[para:returns]
[:en] [`tuple<unwrap_ref_decay_t<TTypes>...>(std::forward<TTypes>(t)...)].
[:zh_CN] [`tuple<unwrap_ref_decay_t<TTypes>...>(std::forward<TTypes>(t)...)]。

[para]
[begin:example]
[codeblock]
int i; float j;
make_tuple(1, ref(i), cref(j));
[codeblock:end]

[:en@~] creates a tuple of type [`tuple<int, int&, const float&>].
[:zh_CN] 创建了一个 [`tuple<int, int&, const float&>] 类型的元组。
[end:example]
[div:end]

[%@lib forward_as_tuple]
[%@lib@member tuple[!forward_as_tuple]]
[codeblock:declaration]
template<class... TTypes>
  constexpr tuple<TTypes&&...> forward_as_tuple(TTypes&&... t) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Constructs a tuple of references to the arguments in [`t] suitable for
forwarding as arguments to a function.
[:zh_CN] 构造由指代 [`t] 中各实参的引用所构成的元组，适用于作为实参转发给某个函数。

[:en] Because the result may contain references to temporary objects, a program
shall ensure that the return value of this function does not outlive any of its
arguments (e.g., the program should typically not store the result in a named
variable).
[:zh_CN] 由于其结果可能包含指代临时对象的引用，所以程序应当确保该函数的返回值的
生存期不会超过其任何实参（例如，典型情况下程序不能将其结果保存到命名的变量中。）

[para:returns]
[:en] [`tuple<TTypes&&...>(std::forward<TTypes>(t)...)].
[:zh_CN] [`tuple<TTypes&&...>(std::forward<TTypes>(t)...)]。
[div:end]

[%@lib tie]
[%@lib ignore]
[%@lib@member tuple[!tie]]
[codeblock:declaration]
template<class... TTypes>
  constexpr tuple<TTypes&...> tie(TTypes&... t) noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`tuple<TTypes&...>(t...)].
[:zh_CN] [`tuple<TTypes&...>(t...)]。

[:en] When an argument in [`t] is [`ignore], assigning any value to the
corresponding tuple element has no effect.
[:zh_CN] 若 [`t] 中的某个实参为 [`ignore]，则对其对应元组元素以任何值进行赋值均
没有效果。

[para]
[begin:example]
[:en] [`tie] functions allow one to create tuples that unpack tuples into
variables.
[:zh_CN] [`tie] 函数可以用于创建元组并被拆开到各个变量中。

[:en] [`ignore] can be used for elements that are not needed:
[:zh_CN] 可以为不需要的元素使用 [`ignore]：

[codeblock]
int i; std::string s;
tie(i, ignore, s) = make_tuple(42, 3.14, "C++");
// [`i == 42], [`s == "C++"]
[codeblock:end]
[end:example]
[div:end]

[%@lib tuple_cat]
[codeblock:declaration]
template<[[redoc("*:c>")]]tuple-like... Tuples>
  constexpr tuple<CTypes...> tuple_cat(Tuples&&... tpls);
[codeblock:end]

[div:description]
[para]
[:en] Let [$n] be [`sizeof...(Tuples)].
[:zh_CN] 令 [$n] 为 [`sizeof...(Tuples)]。

[:en] For every integer [$0 \eq i < n]:
[:zh_CN] 对于每个整数 [$0 \eq i < n]：
[list]
[item]
[:en] Let [$[`T]_i] be the [$i^\text{th}] type in [`Tuples].
[:zh_CN] 令 [$[`T]_i] 为 [`Tuples] 中的第 [$i] 个类型。
[item]
[:en] Let [$[`U]_i] be [`remove_cvref_t<[$[`T]_i]>].
[:zh_CN] 令 [$[`U]_i] 为 [`remove_cvref_t<[$[`T]_i]>]。
[item]
[:en] Let [$[`tp]_i] be the [$i^\text{th}] element in the function parameter
pack [`tpls].
[:zh_CN] 令 [$[`tp]_i] 为函数形参包组 [`tpls] 中的第 [$i] 个元素。
[item]
[:en] Let [$[`S]_i] be [`tuple_size_v<[$[`U]_i]>].
[:zh_CN] 令 [$[`S]_i] 为 [`tuple_size_v<[$[`U]_i]>]。
[item]
[:en] Let [$[`E]_i^k] be [`tuple_element_t<[$k], [$[`U]_i]>].
[:zh_CN] 令 [$[`E]_i^k] 为 [`tuple_element_t<[$k], [$[`U]_i]>]。
[item]
[:en] Let [$[`e]_i^k] be [`get<[$k]>(std::forward<[$[`T]_i]>([$[`tp]_i]))].
[:zh_CN] 令 [$[`e]_i^k] 为 [`get<[$k]>(std::forward<[$[`T]_i]>([$[`tp]_i]))]。
[item]
[:en] Let [$Elems_i] be a pack of the types [$E_i^0, \dotsc, E_i^{S_{i-1}}].
[:zh_CN] 令 [$Elems_i] 为类型 [$E_i^0, \dotsc, E_i^{S_{i-1}}] 的包组。
[item]
[:en] Let [$elems_i] be a pack of the expressions [$e_i^0, \dotsc, e_i^{S_{i-1}}].
[:zh_CN] 令 [$elems_i] 为表达式 [$e_i^0, \dotsc, e_i^{S_{i-1}}] 的包组。
[list:end]

[:en] The types in [`CTypes] are equal to the ordered sequence of the expanded
packs of types [`[$Elems_0]...], [`[$Elems_1]...], [$\ldots], [`[$Elems_{n-1}]...].
[:zh_CN] [`CTypes] 中的各类型等于展开的类型包组的有序序列
[`[$Elems_0]...], [`[$Elems_1]...], [$\ldots], [`[$Elems_{n-1}]...]。

[:en] Let [`celems] be the ordered sequence of the expanded packs of expressions
[`[$elems_0]...], [$\ldots], [`[$elems_{n-1}]...].
[:zh_CN] 令 [`celems] 为展开的表达式包组的有序序列
[`[$elems_0]...], [$\ldots], [`[$elems_{n-1}]...]。

[para:mandates]
[:en] [`(is_constructible_v<CTypes, decltype(celems)> && ...)] is [`true].
[:zh_CN] [`(is_constructible_v<CTypes, decltype(celems)> && ...)] 为 [`true]。

[para:returns]
[:en] [`tuple<CTypes...>(celems...)].
[:zh_CN] [`tuple<CTypes...>(celems...)]。
[div:end]
