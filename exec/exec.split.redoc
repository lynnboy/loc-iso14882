[section#exec.split
    [`execution::split]
]

[para]
[:en] [`split] adapts an arbitrary sender
into a sender that can be connected multiple times.
[:zh_CN] [`split] 将任意一个发送器适配为一个可以多次连接的发送器。

[para]
[:en] Let [*split-env] be the type of an environment such that, given an
instance [`env], the expression [`get_stop_token(env)] is well-formed and
has type [`inplace_stop_token].
[:zh_CN] 令 [*split-env] 为环境的类型，使得给定一个实力 [`env]，表达式
[`get_stop_token(env)] 良构且类型为 [`inplace_stop_token]。

[para]
[:en] The name [`split] denotes a pipeable sender adaptor object.
[:zh_CN] 名字 [`split] 代表一个可连管道的发送器适配器对象。

[:en] For subexpressions [`sndr], let [`Sndr] be [`decltype((sndr))].
[:zh_CN] 对于子表达式 [`sndr]，令 [`Sndr] 为 [`decltype((sndr))]。

[:en] If [`[`:c sender_in]<Sndr, [*split-env]>] is [`false],
[`split(sndr)] is ill-formed.
[:zh_CN] 如果 [`[`:c sender_in]<Sndr, [*split-env]>] 为 [`false]，那么
[`split(sndr)] 非良构。

[para]
[:en] Otherwise, the expression [`split(sndr)] is expression-equivalent to:
[:zh_CN] 否则，表达式 [`split(sndr)] 按表达式等价于：
[codeblock]
transform_sender([[redoc("*>")]]get-domain-early(sndr), [[redoc("*>")]]make-sender(split, {}, sndr))
[codeblock:end]
[:en@~] except that [`sndr] is evaluated only once.
[:zh_CN@~] 但 [`sndr] 仅被求值一次。

[begin:note]
[:en] The default implementation of [`transform_sender]
will have the effect of connecting the sender to a receiver.
[:zh_CN] [`transform_sender] 的缺省实现具有连接发送器与接收器的效果。

[:en] It will return a sender with a different tag type.
[:zh_CN] 它会返回带有不同标签类型的发送器。
[end:note]

[para]
[:en] Let [*local-state] denote the following exposition-only class template:
[:zh_CN] 令 [*local-state] 代表以下仅用于阐释的类模板：
[codeblock:synopsis]
namespace std::execution {
  struct [[redoc("*>")]]local-state-base {                                     // [=expos]
    virtual ~[[redoc("*>")]]local-state-base() = default;
    virtual void [[redoc("*>")]]notify() noexcept = 0;                         // [=expos]
  };

  template<class Sndr, class Rcvr>
  struct [[redoc("*>")]]local-state : [[redoc("*>")]]local-state-base {                       // [=expos]
    using [[redoc("*>")]]on-stop-callback =                                    // [=expos]
      stop_callback_of_t<stop_token_of_t<env_of_t<Rcvr>>, [[redoc("*>")]]on-stop-request>;

    [[redoc("*>")]]local-state(Sndr&& sndr, Rcvr& rcvr) noexcept;
    ~[[redoc("*>")]]local-state();

    void [[redoc("*>")]]notify() noexcept override;

  private:
    optional<[[redoc("*>")]]on-stop-callback> [[redoc("*>")]]on_stop;                         // [=expos]
    [[redoc("*>")]]shared-state<Sndr>* [[redoc("*>")]]sh_state;                               // [=expos]
    Rcvr* [[redoc("*>")]]rcvr;                                                 // [=expos]
  };
}
[codeblock:end]

[codeblock:declaration]
[[redoc("*>")]]local-state(Sndr&& sndr, Rcvr& rcvr) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
auto& [_, data, _] = sndr;
this->[[redoc("*>")]]sh_state = data.sh_state.get();
this->[[redoc("*>")]]sh_state->[[redoc("*>")]]inc-ref();
this->[[redoc("*>")]]rcvr = addressof(rcvr);
[codeblock:end]
[div:end]

[codeblock:declaration]
~[[redoc("*>")]]local-state();
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
sh_state->[[redoc("*>")]]dec-ref();
[codeblock:end]
[div:end]

[codeblock:declaration]
void [[redoc("*>")]]notify() noexcept override;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
[[redoc("*>")]]on_stop.reset();
visit(
  [this](const auto& tupl) noexcept -> void {
    apply(
      [this](auto tag, const auto&... args) noexcept -> void {
        tag(std::move(*[[redoc("*>")]]rcvr), args...);
      },
      tupl);
  },
  [[redoc("*>")]]sh_state->result);
[codeblock:end]
[div:end]

[para]
[:en] Let [*split-receiver] denote the following exposition-only class template:
[:zh_CN] 令 [*split-receiver] 代表以下仅用于阐释的类模板：
[codeblock:synopsis]
namespace std::execution {
  template<class Sndr>
  struct [[redoc("*>")]]split-receiver {                                       // [=expos]
    using receiver_concept = receiver_t;

    template<class Tag, class... Args>
    void [[redoc("*>")]]complete(Tag, Args&&... args) noexcept {               // [=expos]
      using tuple_t = [[redoc("*>")]]decayed-tuple<Tag, Args...>;
      try {
        [[redoc("*>")]]sh_state->result.template emplace<tuple_t>(Tag(), std::forward<Args>(args)...);
      } catch (...) {
        using tuple_t = tuple<set_error_t, exception_ptr>;
        [[redoc("*>")]]sh_state->result.template emplace<tuple_t>(set_error, current_exception());
      }
      [[redoc("*>")]]sh_state->notify();
    }

    template<class... Args>
    void set_value(Args&&... args) && noexcept {
      [[redoc("*>")]]complete(execution::set_value, std::forward<Args>(args)...);
    }

    template<class Error>
    void set_error(Error&& err) && noexcept {
      [[redoc("*>")]]complete(execution::set_error, std::forward<Error>(err));
    }

    void set_stopped() && noexcept {
      [[redoc("*>")]]complete(execution::set_stopped);
    }

    struct [[redoc("*>")]]env {                                                // [=expos]
      [[redoc("*>")]]shared-state<Sndr>* [[redoc("*>")]]sh-state;                             // [=expos]

      inplace_stop_token query(get_stop_token_t) const noexcept {
        return [[redoc("*>")]]sh-state->stop_src.get_token();
      }
    };

    [[redoc("*>")]]env get_env() const noexcept {
      return [[redoc("*>")]]env{[[redoc("*>")]]sh_state};
    }

    [[redoc("*>")]]shared-state<Sndr>* [[redoc("*>")]]sh_state;                               // [=expos]
  };
}
[codeblock:end]

[para]
[:en] Let [*shared-state] denote the following exposition-only class template:
[:zh_CN] 令 [*shared-state] 代表以下仅用于阐释的类模板：
[codeblock:synopsis]
namespace std::execution {
  template<class Sndr>
  struct [[redoc("*>")]]shared-state {
    using [[redoc("*>")]]variant-type = [[redoc("[=seebelow]")]];                             // [=expos]
    using [[redoc("*>")]]state-list-type = [[redoc("[=seebelow]")]];                          // [=expos]

    explicit [[redoc("*>")]]shared-state(Sndr&& sndr);

    void [[redoc("*>")]]start-op() noexcept;                                   // [=expos]
    void [[redoc("*>")]]notify() noexcept;                                     // [=expos]
    void [[redoc("*>")]]inc-ref() noexcept;                                    // [=expos]
    void [[redoc("*>")]]dec-ref() noexcept;                                    // [=expos]

    inplace_stop_source [[redoc("*>")]]stop_src{};                             // [=expos]
    [[redoc("*>")]]variant-type [[redoc("*>")]]result{};                                      // [=expos]
    [[redoc("*>")]]state-list-type [[redoc("*>")]]waiting_states;                             // [=expos]
    atomic<bool> [[redoc("*>")]]completed{false};                              // [=expos]
    atomic<size_t> [[redoc("*>")]]ref_count{1};                                // [=expos]
    connect_result_t<Sndr, [[redoc("*>")]]split-receiver<Sndr>> [[redoc("*>")]]op_state;      // [=expos]
  };
}
[codeblock:end]

[para]
[:en] Let [`Sigs] be a pack of the arguments to the [`completion_signatures]
specialization named by [`completion_signatures_of_t<Sndr>].
[:zh_CN] 令 [`Sigs] 为由 [`completion_signatures_of_t<Sndr>] 指名的
[`completion_signatures] 的特例的实参包组。

[:en] For type [`Tag] and pack [`Args], let [*as-tuple] be an alias template
such that [`[*as-tuple]<Tag(Args...)>] denotes
the type [`[*decayed-tuple]<Tag, Args...>].
[:zh_CN] 对于类型 [`Tag] 和包组 [`Args]，令 [*as-tuple] 为一个别名模板，使得
[`[*as-tuple]<Tag(Args...)>] 代表类型 [`[*decayed-tuple]<Tag, Args...>]。

[:en] Then [*variant-type] denotes the type
[:zh_CN] 然后，令 [*variant-type] 代表类型
[codeblock]
variant<tuple<set_stopped_t>, tuple<set_error_t, exception_ptr>, [[redoc("*>")]]as-tuple<Sigs>...>
[codeblock:end]
[:en@~] but with duplicate types removed.
[:zh_CN@~] 但移除其中的重复类型。

[para]
[:en] Let [*state-list-type] be a type that stores a list of pointers to
[*local-state-base] objects and that permits atomic insertion.
[:zh_CN] 令 [*state-list-type] 为存储指向 [*local-state-base] 对象的指针列表，
并允许进行原子插入的类型。

[codeblock:declaration]
explicit [[redoc("*>")]]shared-state(Sndr&& sndr);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*op_state] with the result of
[`connect(std::forward<Sndr>(sndr), [*split-receiver]{this})].
[:zh_CN] 以 [`connect(std::forward<Sndr>(sndr), [*split-receiver]{this})]
的结果初始化 [*op_state]。

[para:ensures]
[:en] [*waiting_states] is empty, and [*completed] is [`false].
[:zh_CN] [*waiting_states] 为空，且 [*completed] 为 [`false]。
[div:end]

[codeblock:declaration]
void [[redoc("*>")]]start-op() noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Evaluates [`[*inc-ref]()].
[:zh_CN] 求值 [`[*inc-ref]()]。

[:en] If [`stop_src.stop_requested()] is [`true], evaluates [`[*notify]()];
otherwise, evaluates [`start([*op_state])].
[:zh_CN] 若 [`stop_src.stop_requested()] 为 [`true]，则求值 [`[*notify]()]；
否则，求值 [`start([*op_state])]。
[div:end]

[codeblock:declaration]
void [[redoc("*>")]]notify() noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Atomically does the following:
[:zh_CN] 原子地执行如下步骤：
[list]
[item]
[:en] Sets [`completed] to [`true], and
[:zh_CN] 将 [`completed] 置为 [`true]，并
[item]
[:en] Exchanges [`waiting_states] with an empty list,
storing the old value in a local [`prior_states].
[:zh_CN] 将 [`waiting_states] 与一个空列表互换，将其旧值存储与局部的 [`prior_states] 中。
[list:end]

[:en] Then, for each pointer [`p] in [`prior_states], evaluates [`p->[*notify]()].
[:zh_CN] 然后，对于 [`prior_states] 中的每个指针 [`p]，求值 [`p->[*notify]()]。

[:en] Finally, evaluates [`[*dec-ref]()].
[:zh_CN] 最后，求值 [`[*dec-ref]()]。
[div:end]

[codeblock:declaration]
void [[redoc("*>")]]inc-ref() noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Increments [*ref_count].
[:zh_CN] 增加 [*ref_count]。
[div:end]

[codeblock:declaration]
void [[redoc("*>")]]dec-ref() noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Decrements [*ref_count].
[:zh_CN] 减少 [*ref_count]。

[:en] If the new value of [*ref_count] is [`0], calls [`delete this].
[:zh_CN] 若 [*ref_count] 的新值为 [`0]，则调用 [`delete this]。

[para:sync]
[:en] If an evaluation of [`[*dec-ref]()] does not decrement the [`ref_count]
to [`0] then synchronizes with the evaluation of [`[*dec-ref]()]
that decrements [`ref_count] to [`0].
[:zh_CN] 如果 [`[*dec-ref]()] 的求值并未把 [`ref_count] 减为 [`0]，那么它同步于
把 [`ref_count] 减为 [`0] 的 [`[*dec-ref]()] 求值。
[div:end]

[para]
[:en] Let [*split-impl-tag] be an empty exposition-only class type.
[:zh_CN] 令 [*split-impl-tag] 为一个仅用于阐释的空的类类型。

[:en] Given an expression [`sndr], the expression [`split.transform_sender(sndr)]
is equivalent to:
[:zh_CN] 给定表达式 [`sndr]，表达式 [`split.transform_sender(sndr)] 等价于：
[codeblock]
auto&& [tag, _, child] = sndr;
auto* sh_state = new [[redoc("*>")]]shared-state{std::forward_like<decltype((sndr))>(child)};
return [[redoc("*>")]]make-sender([[redoc("*>")]]split-impl-tag(), [[redoc("*>")]]shared-wrapper{sh_state, tag});
[codeblock:end]
[:en@~] where [*shared-wrapper] is an exposition-only class
that manages the reference count of the [*shared-state] object
pointed to by [`sh_state].
[:zh_CN@~] 其中 [*shared-wrapper] 为一种仅用于阐释的类，管理 [`sh_state] 所指向的
[*shared-state] 对象的引用计数。

[:en] [*shared-wrapper] models [`:c copyable] with move operations nulling out
the moved-from object, copy operations incrementing the reference count
by calling [`sh_state->[*inc-ref]()], and
assignment operations performing a copy-and-swap operation.
[:zh_CN] [*shared-wrapper] 构成 [`:c copyable]，其移动操作会将被移动对象置空，其
复制操作通过调用 [`sh_state->[*inc-ref]()] 增加引用计数，而其赋值操作施行复制-交换操作。

[:en] The destructor has no effect if [`sh_state] is null; otherwise,
it decrements the reference count by evaluating [`sh_state->[*dec-ref]()].
[:zh_CN] 若 [`sh_state] 为空，则析构函数没有效果；否则它通过求值
[`sh_state->[*dec-ref]()] 减少引用计数。

[para]
[:en] The exposition-only class template [*impls-for] ([#exec.snd.general]) is
specialized for [*split-impl-tag] as follows:
[:zh_CN] 仅用于阐释的类模板 [*impls-for]（[#exec.snd.general]）针对
[*split-impl-tag] 进行如下特化：
[codeblock]
namespace std::execution {
  template<>
  struct [[redoc("*>")]]impls-for<[[redoc("*>")]]split-impl-tag> : [[redoc("*>")]]default-impls {
    static constexpr auto [[redoc("*>")]]get-state = [[redoc("[=seebelow]")]];
    static constexpr auto [[redoc("*>")]]start = [[redoc("[=seebelow]")]];
  };
}
[codeblock:end]

[para]
[:en] The member [`[*impls-for]<[*split-impl-tag]>::[*get-state]] is initialized
with a callable object equivalent to the following lambda expression:
[:zh_CN] 成员 [`[*impls-for]<[*split-impl-tag]>::[*get-state]] 以等价于如下 lambda
表达式的可调用对象初始化：
[codeblock]
[]<class Sndr>(Sndr&& sndr, auto& rcvr) noexcept {
  return [[redoc("*>")]]local-state{std::forward<Sndr>(sndr), rcvr};
}
[codeblock:end]

[para]
[:en] The member [`[*impls-for]<[*split-impl-tag]>::[*start]] is initialized with
a callable object that has a function call operator equivalent to the following:
[:zh_CN] 成员 [`[*impls-for]<[*split-impl-tag]>::[*start]] 以带有等价于如下代码
的函数调用运算符的可调用对象初始化：
[codeblock]
template<class Sndr, class Rcvr>
void operator()(local-state<Sndr, Rcvr>& state, Rcvr& rcvr) const noexcept;
[codeblock:end]

[para:effects@~]
[:en] If [`state.[*sh_state]->[*completed]] is [`true], evaluates
[`state.[*notify]()] and returns.
[:zh_CN] 如果 [`state.[*sh_state]->[*completed]] 为 [`true]，则求值
[`state.[*notify]()] 并返回。

[:en] Otherwise, does the following in order:
[:zh_CN] 否则，依次执行以下步骤：

[list]
[item]
[:en] Evaluates
[:zh_CN] 求值
[codeblock]
state.[[redoc("*>")]]on_stop.emplace(
  get_stop_token(get_env(rcvr)),
  [[redoc("*>")]]on-stop-request{state.[[redoc("*>")]]sh_state->[[redoc("*>")]]stop_src});
[codeblock:end]

[item]
[:en] Then atomically does the following:
[:zh_CN] 然后原子地进行以下步骤：

[list]
[item]
[:en] Reads the value [`c] of [`state.[*sh_state]->[*completed]], and
[:zh_CN] 读取 [`state.[*sh_state]->[*completed]] 的值 [`c]，并
[item]
[:en] Inserts [`addressof(state)] into [`state.[*sh_state]->[*waiting_states]]
if [`c] is [`false].
[:zh_CN] 若 [`c] 为 [`false]，则把 [`addressof(state)] 插入
[`state.[*sh_state]->[*waiting_states]] 中。
[list:end]

[item]
[:en] If [`c] is [`true], calls [`state.[*notify]()] and returns.
[:zh_CN] 若 [`c] 为 [`true]，则调用 [`state.[*notify]()] 并返回。

[item]
[:en] Otherwise, if [`addressof(state)] is the first item added to
[`state.[*sh_state]->[*waiting_states]], evaluates
[`state.[*sh_state]->[*start-op]()].
[:zh_CN] 否则，如果 [`addressof(state)] 是加入到
[`state.[*sh_state]->[*waiting_states]] 的第一项，则求值
[`state.[*sh_state]->[*start-op]()]。
[list:end]
