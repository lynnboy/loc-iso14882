[section#exec.domain.default
    [`execution::default_domain]
]

[para]
[codeblock:synopsis]
namespace std::execution {
  struct [[redoc("`:lib>")]]default_domain {
    template<[[redoc("`:c>")]]sender Sndr, [[redoc("*:c>")]]queryable... Env>
        requires (sizeof...(Env) <= 1)
      static constexpr [[redoc("`:c>")]]sender decltype(auto) transform_sender(Sndr&& sndr, const Env&... env)
        noexcept([[redoc("[=seebelow]")]]);

    template<[[redoc("`:c>")]]sender Sndr, [[redoc("*:c>")]]queryable Env>
      static constexpr [[redoc("*:c>")]]queryable decltype(auto) transform_env(Sndr&& sndr, Env&& env) noexcept;

    template<class Tag, [[redoc("`:c>")]]sender Sndr, class... Args>
      static constexpr decltype(auto) apply_sender(Tag, Sndr&& sndr, Args&&... args)
        noexcept([[redoc("[=seebelow]")]]);
  };
}
[codeblock:end]

[%@lib@member transform_sender[!default_domain]]
[codeblock:declaration]
template<[[redoc("`:c>")]]sender Sndr, [[redoc("*:c>")]]queryable... Env>
  requires (sizeof...(Env) <= 1)
constexpr [[redoc("`:c>")]]sender decltype(auto) transform_sender(Sndr&& sndr, const Env&... env)
  noexcept([[redoc("[=seebelow]")]]);
[codeblock:end]

[div:description]
[para]
[:en] Let [`e] be the expression
[:zh_CN] 若表达式
[codeblock]
tag_of_t<Sndr>().transform_sender(std::forward<Sndr>(sndr), env...)
[codeblock:end]
[:en@~] if that expression is well-formed; otherwise, [`std::forward<Sndr>(sndr)].
[:zh_CN] 良构，则令 [`e] 为该表达式；否则令其为 [`std::forward<Sndr>(sndr)]。

[para:returns]
[:en] [`e].
[:zh_CN] [`e]。

[para:remarks]
[:en] The exception specification is equivalent to [`noexcept(e)].
[:zh_CN] 异常说明等价于 [`noexcept(e)]
[div:end]

[%@lib@member transform_env[!default_domain]]
[codeblock:declaration]
template<[[redoc("`:c>")]]sender Sndr, [[redoc("*:c>")]]queryable Env>
  constexpr [[redoc("*:c>")]]queryable decltype(auto) transform_env(Sndr&& sndr, Env&& env) noexcept;
[codeblock:end]

[div:description]
[para]
[:en] Let [`e] be the expression
[:zh_CN] 若表达式
[codeblock]
tag_of_t<Sndr>().transform_env(std::forward<Sndr>(sndr), std::forward<Env>(env))
[codeblock:end]
[:en@~] if that expression is well-formed; otherwise,
[`static_cast<Env>(std::forward<Env>(env))].
[:zh_CN] 良构，则令 [`e] 为该表达式；否则令其为
[`static_cast<Env>(std::forward<Env>(env))]。

[para:mandates]
[:en] [`noexcept(e)] is [`true].
[:zh_CN] [`noexcept(e)] 为 [`true]。

[para:returns]
[:en] [`e].
[:zh_CN] [`e]。
[div:end]

[%@lib@member apply_sender[!default_domain]]
[codeblock:declaration]
template<class Tag, [[redoc("`:c>")]]sender Sndr, class... Args>
constexpr decltype(auto) apply_sender(Tag, Sndr&& sndr, Args&&... args)
  noexcept([[redoc("[=seebelow]")]]);
[codeblock:end]

[div:description]
[para]
[:en] Let [`e] be the expression
[:zh_CN] 令 [`e] 为表达式
[codeblock]
  Tag().apply_sender(std::forward<Sndr>(sndr), std::forward<Args>(args)...)
[codeblock:end]

[para:constraints]
[:en] [`e] is a well-formed expression.
[:zh_CN] [`e] 是良构表达式。

[para:returns]
[:en] [`e].
[:zh_CN] [`e]。

[para:remarks]
[:en] The exception specification is equivalent to [`noexcept(e)].
[:zh_CN] 异常说明等价于 [`noexcept(e)]
[div:end]
