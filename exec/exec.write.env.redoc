[section#exec.write.env
    [`execution::write_env]
]

[para]
[:en] [`write_env] is a sender adaptor that accepts a sender and a queryable object,
and that returns a sender that, when connected with a receiver [`rcvr],
connects the adapted sender with a receiver whose execution environment is the
result of joining the [*:c queryable] object to the result of [`get_env(rcvr)].
[:zh_CN] [`write_env] 是一个发送器适配器，它接受一个发送器和一个可查询对象，并返回
一个发送器，该发送器在与接收器 [`rcvr] 连接时，将所适配的发送器与一个接收器连接，
该接收器的执行环境是将 [*:c queryable] 对象与 [`get_env(rcvr)] 的结果连接的结果。

[para]
[:en] [`write_env] is a customization point object.
[:zh_CN] [`write_env] 是一个定制化点对象。

[:en] For some subexpressions [`sndr] and [`env], if [`decltype((sndr))] does not
satisfy [`:c sender], or [`decltype((env))] does not satisfy [*:c queryable],
the expression [`write_env(sndr, env)] is ill-formed.
[:zh_CN] 对于某子表达式 [`sndr] 和 [`env]，如果 [`decltype((sndr))] 不满足
[`:c sender] 或者 [`decltype((env))] 不满足 [`:c queryable]，那么表达式
[`write_env(sndr, env)] 非良构。

[:en] Otherwise, it is expression-equivalent to [`[*make-sender](write_env, env, sndr)].
[:zh_CN] 否则，它按表达式等价于 [`[*make-sender](write_env, env, sndr)]。

[para]
[:en] Let [`write-env-t] denote the type [`decltype(auto(write_env))].
[:zh_CN] 令 [`write-env-t] 代表类型 [`decltype(auto(write_env))]。

[:en] The exposition-only class template [*impls-for] ([#exec.snd.general])
is specialized for [*write-env-t] as follows:
[:zh_CN] 仅用于阐释的类模板 [*impls-for]（[#exec.snd.general]）针对 [*write-env-t] 进行如下特化：
[codeblock]
template<>
struct [[redoc("*>")]]impls-for<[[redoc("*>")]]write-env-t> : [[redoc("*>")]]default-impls {
  static constexpr auto [[redoc("*>")]]join-env(const auto& state, const auto& env) noexcept {
    return [[redoc("[=seebelow]")]];
  }

  static constexpr auto [[redoc("*>")]]get-env =
    [](auto, const auto& state, const auto& rcvr) noexcept {
      return [[redoc("*>")]]join-env(state, [[redoc("*>")]]FWD-ENV(get_env(rcvr)));
    };

  template<class Sndr, class... Env>
    static consteval void [[redoc("*>")]]check-types();
};
[codeblock:end]

[:en] Invocation of [`[*impls-for]<[*write-env-t]>::[*join-env]]
returns an object [`e] such that
[:zh_CN] 调用 [`[*impls-for]<[*write-env-t]>::[*join-env]] 返回一个对象 [`e]，使得
[list]
[item]
[:en@~] [`decltype(e)] models [*:c queryable] and
[:zh_CN@~] [`decltype(e)] 构成 [*:c queryable]，并且
[item]
[:en@~] given a query object [`q], the expression [`e.query(q)] is
expression-equivalent to [`state.query(q)] if that expression is valid,
otherwise, [`e.query(q)] is expression-equivalent to [`env.query(q)].
[:zh_CN@~] 给定查询对象 [`q]，如果表达式 [`state.query(q)] 有效，那么表达式
[`e.query(q)] 按表达式等价于该表达式。
[item]
[:en] For a type [`Sndr] and a pack of types [`Env], let [`State] be
[`[*data-type]<Sndr>] and let [`JoinEnv] be the pack
[`decltype([*join-env](declval<State>(), [*FWD-ENV](declval<Env>())))].
[:zh_CN] 对于类型 [`Sndr] 和类型包 [`Env]，令 [`State] 为 [`[*data-type]<Sndr>]，
并令 [`JoinEnv] 为包 [`decltype([*join-env](declval<State>(), [*FWD-ENV](declval<Env>())))]。

[:en] Then [`[*impls-for]<[*write-env-t]>::[*check-types]<Sndr, Env...>()]
is expression-equivalent to [`get_completion_signatures<[*child-type]<Sndr>, JoinEnv...>()].
[:zh_CN] 那么 [`[*impls-for]<[*write-env-t]>::[*check-types]<Sndr, Env...>()]
按表达式等价于 [`get_completion_signatures<[*child-type]<Sndr>, JoinEnv...>()]。
[list:end]
