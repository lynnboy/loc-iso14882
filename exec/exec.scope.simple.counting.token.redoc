[section#exec.scope.simple.counting.token
    [:en] Token
    [:zh_CN] 令牌
]

[%@lib execution::simple_counting_scope::token]
[codeblock:synopsis]
namespace std::execution {
  struct simple_counting_scope::token {
    template<[[redoc("`:c>")]]sender Sender>
      Sender&& wrap(Sender&& snd) const noexcept;
    bool try_associate() const noexcept;
    void disassociate() const noexcept;

  private:
    simple_counting_scope* [[redoc("*>")]]scope;   // [=expos]
  };
}
[codeblock:end]

[%@lib@member wrap[!execution::simple_counting_scope::token]]
[codeblock:declaration]
template<[[redoc("`:c>")]]sender Sender>
  Sender&& wrap(Sender&& snd) const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`std::forward<Sender>(snd)].
[:zh_CN] [`std::forward<Sender>(snd)]。
[div:end]

[%@lib@member try-associate[!execution::simple_counting_scope::token]]
[codeblock:declaration]
bool try-associate() const noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return [*scope]->[*try-associate]();]
[:zh_CN] 等价于：[`return [*scope]->[*try-associate]();]
[div:end]

[%@lib@member disassociate[!execution::simple_counting_scope::token]]
[codeblock:declaration]
void disassociate() const noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`[*scope]->[*disassociate]()].
[:zh_CN] 等价于：[`[*scope]->[*disassociate]()]。
[list:end]
