[section#exec.snd.transform
    [`execution::transform_sender]
]

[%@lib transform_sender]
[codeblock:declaration]
namespace std::execution {
  template<class Domain, [[redoc("`:c>")]]sender Sndr, [[redoc("*:c>")]]queryable... Env>
      requires (sizeof...(Env) <= 1)
    constexpr [[redoc("`:c>")]]sender decltype(auto) transform_sender(Domain dom, Sndr&& sndr, const Env&... env)
      noexcept([[redoc("[=seebelow]")]]);
}
[codeblock:end]

[div:description]
[para]
[:en] Let [*transformed-sndr] be the expression
[:zh_CN] 若表达式
[codeblock]
dom.transform_sender(std::forward<Sndr>(sndr), env...)
[codeblock:end]
[:en@~] if that expression is well-formed; otherwise,
[:zh_CN] 良构，则令 [*transformed-sndr] 为该表达式；否则令其为
[codeblock]
default_domain().transform_sender(std::forward<Sndr>(sndr), env...)
[codeblock:end]

[:en] Let [*final-sndr] be the expression [*transformed-sndr]
if [*transformed-sndr] and [*sndr] have the same type ignoring cv-qualifiers;
otherwise, it is the expression [`transform_sender(dom, transformed-sndr, env...)].
[:zh_CN] 如果忽略 cv 限定符表达式 [*transformed-sndr] 和 [*sndr] 具有相同类型，则
令 [*final-sndr] 为表达式 [*transformed-sndr]；否则，令其为表达式
[`transform_sender(dom, transformed-sndr, env...)]。

[para:returns]
[:en] [*final-sndr].
[:zh_CN] [*final-sndr]。

[para:remarks]
[:en] The exception specification is equivalent to [`noexcept([*final-sndr])].
[:zh_CN] 异常说明等价于 [`noexcept([*final-sndr])]
[div:end]
