[section#exec.getcomplsigs
    [`execution::get_completion_signatures]
]

[%@lib get_completion_signatures]
[codeblock:declaration]
template<class Sndr, class... Env>
  consteval auto get_completion_signatures() -> [[redoc("*:c")]]valid-completion-signatures auto;
[codeblock:end]

[div:description]
[para]
[:en] Let [$except] be an rvalue subexpression of an unspecified class type
[$Except] such that
[`[`:c move_constructible]<[$Except]> && [`:c derived_from]<[$Except], exception>] is [`true].
[:zh_CN] 令 [$except] 为右值子表达式，具有某个未指定的类类型 [$Except]，使得
[`[`:c move_constructible]<[$Except]> && [`:c derived_from]<[$Except], exception>] 为 [`true]。

[:en] Let [`[^CHECKED-COMPLSIGS]([$e])] be [$e] if [$e] is a core constant
expression whose type satisfies [*:c valid-completion-signatures];
otherwise, it is the following expression:
[:zh_CN] 令 [`[^CHECKED-COMPLSIGS]([$e])] 在当 [$e] 是核心常量表达式且其类型满足
[*:c valid-completion-signatures] 时为 [$e]；否则为以下表达式：
[codeblock]
([[redoc("$>")]]e, throw [[redoc("$>")]]except, completion_signatures())
[codeblock:end]

[:en] Let [`[^get-complsigs]<Sndr, Env...>()] be expression-equivalent to
[`remove_reference_t<Sndr>::template get_completion_signatures<Sndr, Env...>()].
[:zh_CN] 令 [`[^get-complsigs]<Sndr, Env...>()] 按表达式等价于
[`remove_reference_t<Sndr>::template get_completion_signatures<Sndr, Env...>()]。

[:en] Let [`NewSndr] be [`Sndr] if [`sizeof...(Env) == 0] is [`true];
otherwise, [`decltype([$s])] where [$s] is the following expression:
[:zh_CN] 令 [`NewSndr] 在当 [`sizeof...(Env) == 0] 为 [`true] 时为 [`Sndr]；
否则为 [`decltype([$s])]，其中 [$s] 为以下表达式：
[codeblock]
transform_sender(
  [[redoc("*>")]]get-domain-late(declval<Sndr>(), declval<Env>()...),
  declval<Sndr>(),
  declval<Env>()...)
[codeblock:end]

[para:constraints]
[:en] [`sizeof...(Env) <= 1] is [`true].
[:zh_CN] [`sizeof...(Env) <= 1] 为 [`true]。

[para:effects]
[:en] Equivalent to: [`return [$e];] where [$e] is expression-equivalent to the following:
[:zh_CN] 等价于：[`return [$e];]，其中 [$e] 按表达式等价于以下内容：
[list]
[item]
[:en] [`[^CHECKED-COMPLSIGS]([^get-complsigs]<NewSndr, Env...>())]
if [`[^get-complsigs]<NewSndr, Env...>()] is a well-formed expression.
[:zh_CN] 若 [`[^get-complsigs]<NewSndr, Env...>()] 是良构表达式，则为
[`[^CHECKED-COMPLSIGS]([^get-complsigs]<NewSndr, Env...>())]。

[item]
[:en] Otherwise, [`[^CHECKED-COMPLSIGS]([^get-complsigs]<NewSndr>())]
if [`[^get-complsigs]<NewSndr>()] is a well-formed expression.
[:zh_CN] 否则，若 [`[^get-complsigs]<NewSndr>()] 是良构表达式，则为
[`[^CHECKED-COMPLSIGS]([^get-complsigs]<NewSndr>())]。

[item]
[:en] Otherwise,
[:zh_CN] 否则，如果 [`[*:c is-awaitable]<NewSndr, [*env-promise]<Env>...>] 为 [`true]，则为
[codeblock]
completion_signatures<
  [[redoc("*>")]]SET-VALUE-SIG([[redoc("*>")]]await-result-type<NewSndr, [[redoc("*>")]]env-promise<Env>...>),   // [#exec.snd.concepts]
  set_error_t(exception_ptr),
  set_stopped_t()>
[codeblock:end]
[:en@~] if [`[*:c is-awaitable]<NewSndr, [*env-promise]<Env>...>] is [`true].

[item]
[:en] Otherwise, [`(throw [^dependent-sender-error](), completion_signatures())]
if [`sizeof...(Env) == 0] is [`true], where [^dependent-sender-error] is
[`dependent_sender_error] or an unspecified type derived publicly and
unambiguously from [`dependent_sender_error].
[:zh_CN] 否则，如果 [`sizeof...(Env) == 0] 为 [`true]，则为
[`(throw [^dependent-sender-error](), completion_signatures())]，其中
[^dependent-sender-error] 为 [`dependent_sender_error] 或者某个公开且无歧义派生自
[`dependent_sender_error] 的未指明类型。

[item]
[:en] Otherwise, [`(throw [$except], completion_signatures())].
[:zh_CN] 否则，为 [`(throw [$except], completion_signatures())]。
[list:end]

[para]
[:en] Given a type [`Env], if [`completion_signatures_of_t<Sndr>] and
[`completion_signatures_of_t<Sndr, Env>] are both well-formed,
they shall denote the same type.
[:zh_CN] 给定类型 [`Env]，如果 [`completion_signatures_of_t<Sndr>] 和
[`completion_signatures_of_t<Sndr, Env>] 均良构，那么它们应当代表同一类型。
[div:end]

[para]
[:en] Let [`rcvr] be an rvalue whose type [`Rcvr] models [`:c receiver], and
let [`Sndr] be the type of a sender such that
[`[`:c sender_in]<Sndr, env_of_t<Rcvr>>] is [`true].
[:zh_CN] 令 [`rcvr] 为右值且其类型 [`Rcvr] 构成 [`:c receiver]，并令 [`Sndr] 为
某种发送器的类型，使得 [`[`:c sender_in]<Sndr, env_of_t<Rcvr>>] 为 [`true]。

[:en] Let [`Sigs...] be the template arguments of the [`completion_signatures]
specialization named by [`completion_signatures_of_t<Sndr, env_of_t<Rcvr>>].
[:zh_CN] 令 [`Sigs...] 为 [`completion_signatures_of_t<Sndr, env_of_t<Rcvr>>]
所指名的 [`completion_signatures] 特例的各模板实参。

[:en] Let [`CSO] be a completion function.
[:zh_CN] 令 [`CSO] 为完成函数。

[:en] If sender [`Sndr] or its operation state cause the expression
[`CSO(rcvr, args...)] to be potentially evaluated ([#basic.def.odr])
then there shall be a signature [`Sig] in [`Sigs...] such that
[:zh_CN] 如果发送器 [`Sndr] 或者其操作状态会导致表达式 [`CSO(rcvr, args...)]
被潜在求值（[#basic.def.odr]），那么 [`Sigs...] 中应当有一个签名 [`Sig] 使得
[codeblock]
[[redoc("*>")]]MATCHING-SIG([[redoc("*>")]]decayed-typeof<CSO>(decltype(args)...), Sig)
[codeblock:end]
[:en@~] is [`true] ([#exec.general]).
[:zh_CN@~] 为 [`true]（[#exec.general]）。
