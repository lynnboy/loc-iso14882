[section#exec.read.env
    [`execution::read_env]
]

[para]
[:en] [`read_env] is a sender factory for a sender whose asynchronous operation
completes synchronously in its start operation with a value completion operation
result equal to a value read from the receiver[=']s associated environment.
[:zh_CN] [`read_env] 是发送器工厂，它的异步操作在启动操作中以一个值完成操作同步地完成，
其结果等于从接收器的关联环境中读取的值。

[para]
[:en] [`read_env] is a customization point object.
[:zh_CN] [`read_env] 是一个定制化点对象。

[:en] For some query object [`q], the expression [`read_env(q)]
is expression-equivalent to [`[*make-sender](read_env, q)].
[:zh_CN] 对于查询对象 [`q]，表达式 [`read_env(q)] 按表达式等价于
[`[*make-sender](read_env, q)]。

[para]
[:en] The exposition-only class template [*impls-for] ([#exec.snd.general])
is specialized for [`read_env] as follows:
[:zh_CN] 仅用于阐释的类模板 [*impls-for]（[#exec.snd.general]）针对 [`read_env]
进行如下特化：
[%@lib [*impls-for]<[*decayed-typeof]<read_env>>]
[codeblock]
namespace std::execution {
  template<>
  struct [[redoc("*>")]]impls-for<[[redoc("*>")]]decayed-typeof<read_env>> : [[redoc("*>")]]default-impls {
    static constexpr auto start =
      [](auto query, auto& rcvr) noexcept -> void {
        [[redoc("*>")]]TRY-SET-VALUE(rcvr, query(get_env(rcvr)));
      };
  };

  template<class Sndr, class Env>
    static consteval void [[redoc("*>")]]check-types();
}
[codeblock:end]

[%@lib@member [*check-types][![*impls-for]<[*decayed-typeof]<read_env>]]
[codeblock:declaration]
template<class Sndr, class Env>
  static consteval void [[redoc("*>")]]check-types();
[codeblock:end]

[div:description]
[para]
[:en] Let [`Q] be [`decay_t<[*data-type]<Sndr>>].
[:zh_CN] 令 [`Q] 为 [`decay_t<[*data-type]<Sndr>>]。

[para:throws]
[:en] An exception of an unspecified type derived from [`exception] if
the expression [`Q()(env)] is ill-formed or has type [`void], where
[`env] is an lvalue subexpression whose type is [`Env].
[:zh_CN] 如果表达式 [`Q()(env)] 非良构或类型为 [`void]，则抛出一个派生自
[`exception] 的未指明类型的异常，其中[`env] 是类型为 [`Env] 的左值子表达式。
[div:end]
