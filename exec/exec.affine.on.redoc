[section#exec.affine.on
    [`execution::affine_on]
]

[para]
[:en] [`affine_on] adapts a sender into one that completes on the specified scheduler.
[:zh_CN] [`affine_on] 将发送器适配为在指定调度器上完成的发送器。

[:en] If the algorithm determines that the adapted sender already completes
on the correct scheduler it can avoid any scheduling operation.
[:zh_CN] 如果算法确定适配的发送器已经在正确的调度器上完成，则可以避免任何调度操作。

[para]
[:en] The name [`affine_on] denotes a pipeable sender adaptor object.
[:zh_CN] 名字 [`affine_on] 代表一个可连管道的发送器适配器对象。

[:en] For subexpressions [`sch] and [`sndr], if [`decltype((sch))] does not
satisfy [`:c scheduler], or [`decltype((sndr))] does not satisfy [`:c sender],
[`affine_on(sndr, sch)] is ill-formed.
[:zh_CN] 对于子表达式 [`sch] 和 [`sndr]，如果 [`decltype((sch))] 不符合 [`:c scheduler]，
或者 [`decltype((sndr))] 不符合 [`:c sender]，那么 [`affine_on(sndr, sch)] 非良构。

[item]
[:en] Otherwise, the expression [`affine_on(sndr, sch)] is expression-equivalent to:
[:zh_CN] 否则，表达式 [`affine_on(sndr, sch)] 按表达式等价于：
[codeblock]
transform_sender([[redoc("*>")]]get-domain-early(sndr), [[redoc("*>")]]make-sender(affine_on, sch, sndr))
[codeblock:end]
[:en@~] except that [`sndr] is evaluated only once.
[:zh_CN@~] 但 [`sndr] 仅被求值一次。
[list:end]

[para]
[:en] The exposition-only class template [*impls-for]
is specialized for [`affine_on_t] as follows:
[:zh_CN] 仅用于阐释的类模板 [*impls-for] 针对 [`affine_on_t] 进行如下特化：

[codeblock]
namespace std::execution {
  template<>
  struct [[redoc("*>")]]impls-for<affine_on_t> : [[redoc("*>")]]default-impls {
    static constexpr auto [[redoc("*>")]]get-attrs =
      [](const auto& data, const auto& child) noexcept -> decltype(auto) {
        return [[redoc("*>")]]JOIN-ENV([[redoc("*>")]]SCHED-ATTRS(data), [[redoc("*>")]]FWD-ENV(get_env(child)));
      };
  };
}
[codeblock:end]

[para]
[:en] Let [`[^out_sndr]] be a subexpression denoting a sender
returned from [`affine_on(sndr, sch)] or one equal to such,
and let [`[^OutSndr]] be the type [`decltype(([^out_sndr]))].
[:zh_CN] 令 [`[^out_sndr]] 为代表从 [`affine_on(sndr, sch)] 返回的或与之相等的发送器
的子表达式，并令 [`[^OutSndr]] 为类型 [`decltype(([^out_sndr]))]。

[:en] Let [`[^out_rcvr]] be a subexpression denoting a receiver that has an
environment of type [`Env] such that [`[`:c sender_in]<[^OutSndr], Env>] is [`true].
[:zh_CN] 令 [`[^out_rcvr]] 为代表具有类型 [`Env] 的环境的接收器的子表达式，
使得 [`[`:c sender_in]<[^OutSndr], Env>] 为 [`true]。

[:en] Let [`[^op]] be an lvalue referring to the operation state that
results from connecting [`[^out_sndr]] to [`[^out_rcvr]].
[:zh_CN] 令 [`[^op]] 为一个左值，指代将 [`[^out_sndr]] 连接到 [`[^out_rcvr]] 所得的操作状态。

[:en] Calling [`start([^op])] will start [`sndr] on the current execution agent
and execute completion operations on [`[^out_rcvr]]
on an execution agent of the execution resource associated with [`sch].
[:zh_CN] 调用 [`start([^op])] 将在当前执行代理中启动 [`sndr]，
并在与 [`sch] 关联的执行资源的某个执行代理中执行 [`[^out_rcvr]] 上的完成操作。

[:en] If the current execution resource is the same as the execution
resource associated with [`sch], the completion operation on
[`[^out_rcvr]] may be called before [`start([^op])] completes.
[:zh_CN] 如果当前执行资源与 [`sch] 关联的执行资源相同，
则 [`[^out_rcvr]] 上的完成操作可能在 [`start([^op])] 完成之前被调用。

[:en] If scheduling onto [`sch] fails, an error completion on
[`[^out_rcvr]] shall be executed on an unspecified execution agent.
[:zh_CN] 如果向 [`sch] 调度失败，则应当在某个未指明的执行代理上执行 [`[^out_rcvr]] 上的错误完成。
