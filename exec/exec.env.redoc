[section#exec.env
    [:en] Class template [`env]
    [:zh_CN] 类模板 [`env]
]

[codeblock:synopsis]
namespace std::execution {
  template<[[redoc("*:c>")]]queryable... Envs>
  struct [[redoc("`:lib")]]env {
    Envs[[redoc("[$_0]")]] [[redoc("[$[*envs]_0]")]];               // [=expos]
    Envs[[redoc("[$_1]")]] [[redoc("[$[*envs]_1]")]];               // [=expos]
      [[redoc("[$\vdots]")]]
    Envs[[redoc("[$_{n-1}]")]] [[redoc("[$[*envs]_{n-1}]")]];           // [=expos]

    template<class QueryTag>
      constexpr decltype(auto) query(QueryTag q) const noexcept([[redoc("[=seebelow]")]]);
  };

  template<class... Envs>
    env(Envs...) -> env<unwrap_reference_t<Envs>...>;
}
[codeblock:end]

[para]
[:en] The class template [`env] is used to construct a queryable object
from several queryable objects.
[:zh_CN] 类模板 [`env] 用于从多个可查询对象构造一个可查询对象。

[:en] Query invocations on the resulting object are resolved
by attempting to query each subobject in lexical order.
[:zh_CN] 对结果对象进行查询调用，通过以词法顺序对各个子对象尝试查询予以解决。

[para]
[:en] Specializations of [`env] are not assignable.
[:zh_CN] [`env] 的特例不可赋值。

[para]
[:en] It is unspecified whether [`env] supports initialization using a
parenthesized [~expression-list] ([#dcl.init]), unless the [~expression-list]
consist of a single element of type (possibly const) [`env].
[:zh_CN] [`env] 是否支持以带括号[~表达式列表]进行初始化（[#dcl.init]）
是未指明的，除非[~表达式列表]由类型为（可能为常量的）[`env] 类型的单个元素构成。

[para]
[begin:example]
[codeblock]
template<sender Sndr>
sender auto parameterize_work(Sndr sndr) {
  // [:en] Make an environment such that: [:zh_CN] 制作环境以使得：
  //   [:en@~] [`get_allocator(env)] returns a reference to a copy of [`my_alloc{}] \
    [:zh_CN@~] [`get_allocator(env)] 返回到 [`my_alloc{}] 的一个副本的引用
  //   [:en@~] [`get_scheduler(env)] returns a reference to a copy of [`my_sched{}] \
    [:zh_CN@~] [`get_scheduler(env)] 返回到 [`my_sched{}] 的一个副本的引用
  auto e = env{prop(get_allocator, my_alloc{}),
               prop(get_scheduler, my_sched{})};

  // [:en] Parameterize the input sender so that it will use our custom execution environment. \
  [:zh_CN] 对输入发送器参数化，使其使用自定义的执行环境
  return write_env(sndr, e);
}
[codeblock:end]
[end:example]

[%@lib@member query[!env]]
[codeblock:declaration]
template<class QueryTag>
constexpr decltype(auto) query(QueryTag q) const noexcept([[redoc("[=seebelow]")]]);
[codeblock:end]

[div:description]
[para]
[:en] Let [*:c has-query] be the following exposition-only concept:
[:zh_CN] 令 [*:c has-query] 为以下仅用于阐释的概念：
[codeblock]
template<class Env, class QueryTag>
  concept [[redoc("*:c@def>")]]has-query =                   // [=expos]
    requires (const Env& env) {
      env.query(QueryTag());
    };
[codeblock:end]

[para]
[:en] Let [*fe] be the first element of
[$[*envs]_0], [$[*envs]_1], [$\dotsc], [$[*envs]_{n-1}]
such that the expression [`[*fe].query(q)] is well-formed.
[:zh_CN] 令 [*fe] 为 [$[*envs]_0], [$[*envs]_1], [$\dotsc], [$[*envs]_{n-1}]
中第一个使得表达式 [`[*fe].query(q)] 良构的元素。

[para:constraints]
[:en] [`([*:c has-query]<Envs, QueryTag> || ...)] is [`true].
[:zh_CN] [`([*:c has-query]<Envs, QueryTag> || ...)] 为 [`true]。

[para:effects]
[:en] Equivalent to: [`return [*fe].query(q);]
[:zh_CN] 等价于：[`return [*fe].query(q);]

[para:remarks]
[:en] The expression in the [`noexcept] clause is equivalent
to [`noexcept([*fe].query(q))].
[:zh_CN] [`noexcept] 子句中的表达式等价于 [`noexcept([*fe].query(q))]。
[div:end]
