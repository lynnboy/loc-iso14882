[section#depr.atomics.volatile
    [:en] Volatile access
    [:zh_CN] volatile 访问
]

[para]
[:en] If an atomic specialization has one of the following overloads, then that
overload participates in overload resolution even if
[`atomic<T>::is_always_lock_free] is [`false]:
[:zh_CN] 如果 [`atomic] 的特例具有以下重载之一，则即便
[`atomic<T>::is_always_lock_free] 为 [`false]，该重载仍参与重载决议：

[codeblock]
void store(T desired, memory_order order = memory_order::seq_cst) volatile noexcept;
T operator=(T desired) volatile noexcept;
T load(memory_order order = memory_order::seq_cst) const volatile noexcept;
operator T() const volatile noexcept;
T exchange(T desired, memory_order order = memory_order::seq_cst) volatile noexcept;
bool compare_exchange_weak(T& expected, T desired,
                           memory_order success, memory_order failure) volatile noexcept;
bool compare_exchange_strong(T& expected, T desired,
                             memory_order success, memory_order failure) volatile noexcept;
bool compare_exchange_weak(T& expected, T desired,
                           memory_order order = memory_order::seq_cst) volatile noexcept;
bool compare_exchange_strong(T& expected, T desired,
                             memory_order order = memory_order::seq_cst) volatile noexcept;
T fetch_key[[redoc("^<3c")]](T operand, memory_order order = memory_order::seq_cst) volatile noexcept;
T operator [[redoc("^>")]]op=(T operand) volatile noexcept;
T* fetch_key[[redoc("^<3c")]](ptrdiff_t operand, memory_order order = memory_order::seq_cst) volatile noexcept;
}
[codeblock:end]
