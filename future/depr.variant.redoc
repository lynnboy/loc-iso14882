[section#depr.variant
    [:en] Variant
    [:zh_CN] 变体
]

[para]
[:en] The header [?libheader@ref variant] has the following addition:
[:zh_CN] 头文件 [?libheader@ref variant] 有下列添加声明：

[codeblock:synopsis]
namespace std {
  template<class T> struct variant_size<volatile T>;
  template<class T> struct variant_size<const volatile T>;

  template<size_t I, class T> struct variant_alternative<I, volatile T>;
  template<size_t I, class T> struct variant_alternative<I, const volatile T>;
}
[codeblock:end]

[codeblock:declaration]
template<class T> struct variant_size<volatile T>;
template<class T> struct variant_size<const volatile T>;
[codeblock:end]

[div:description]
[para]
[:en] Let [`VS] denote [`variant_size<T>] of the cv-unqualified type [`T].
[:zh_CN] 令 [`VS] 代表对某个无 cv 限定类型 [`T] 的 [`variant_size<T>]。

[:en] Then specializations of each of the two templates meet the
[^:oc UnaryTypeTrait] requirements with a base characteristic of
[`integral_constant<size_t, VS::value>].
[:zh_CN] 则这两个模板中的每个的特例都满足 [^:oc UnaryTypeTrait] 的规定，其基础
特征为 [`integral_constant<size_t, VS::value>]。
[div:end]

[codeblock:declaration]
template<size_t I, class T> struct variant_alternative<I, volatile T>;
template<size_t I, class T> struct variant_alternative<I, const volatile T>;
[codeblock:end]

[div:description]
[para]
[:en] Let [`VA] denote [`variant_alternative<I, T>] of the cv-unqualified type
[`T].
[:zh_CN] 令 [`VA] 代表对某个无 cv 限定类型 [`T] 的 [`variant_alternative<I, T>]。

[:en] Then specializations of each of the two templates meet the
[^:oc TransformationTrait] requirements with a member typedef [`type] that names
the following type:
[:zh_CN] 则这两个模板中的每个的特例都满足 [^:oc TransformationTrait] 的规定，其
成员 typedef [`type] 指名下列类型：

[list]
[item]
[:en@~] for the first specialization, [`add_volatile_t<VA::type>], and
[:zh_CN@~] 对于第一种特例，为 [`add_volatile_t<VA::type>]，
[item]
[:en@~] for the second specialization, [`add_cv_t<VA::type>].
[:zh_CN@~] 对于第二种特例，为 [`add_cv_t<VA::type>]。
[list:end]
[div:end]
