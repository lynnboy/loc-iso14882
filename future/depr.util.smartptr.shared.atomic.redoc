[section#depr.util.smartptr.shared.atomic
    [:en] [`shared_ptr] atomic access
    [:zh_CN] [`shared_ptr] 的原子性访问
]

[para]
[:en] The header [?libheader@ref memory] has the following additions:
[:zh_CN] 头文件 [?libheader@ref memory] 有下列添加声明：

[%@lib shared_ptr]
[codeblock:synopsis]
namespace std {
  template<class T>
    bool atomic_is_lock_free(const shared_ptr<T>* p);

  template<class T>
    shared_ptr<T> atomic_load(const shared_ptr<T>* p);
  template<class T>
    shared_ptr<T> atomic_load_explicit(const shared_ptr<T>* p, memory_order mo);

  template<class T>
    void atomic_store(shared_ptr<T>* p, shared_ptr<T> r);
  template<class T>
    void atomic_store_explicit(shared_ptr<T>* p, shared_ptr<T> r, memory_order mo);

  template<class T>
    shared_ptr<T> atomic_exchange(shared_ptr<T>* p, shared_ptr<T> r);
  template<class T>
    shared_ptr<T> atomic_exchange_explicit(shared_ptr<T>* p, shared_ptr<T> r, memory_order mo);

  template<class T>
    bool atomic_compare_exchange_weak(shared_ptr<T>* p, shared_ptr<T>* v, shared_ptr<T> w);
  template<class T>
    bool atomic_compare_exchange_strong(shared_ptr<T>* p, shared_ptr<T>* v, shared_ptr<T> w);
  template<class T>
    bool atomic_compare_exchange_weak_explicit(
      shared_ptr<T>* p, shared_ptr<T>* v, shared_ptr<T> w,
      memory_order success, memory_order failure);
  template<class T>
    bool atomic_compare_exchange_strong_explicit(
      shared_ptr<T>* p, shared_ptr<T>* v, shared_ptr<T> w,
      memory_order success, memory_order failure);
}
[codeblock:end]

[para]
[:en]
Concurrent access to a [`shared_ptr] object from multiple threads does not
introduce a data race if the access is done exclusively via the functions in
this section and the instance is passed as their first argument.
[:zh_CN]
从多个线程对一个 [`shared_ptr] 对象进行并发访问，如果是利用本节中的函数，并以该
实例作为第一个实参所进行的互斥访问，则不会引入数据竞争。

[para]
[:en]
The meaning of the arguments of type [`memory_order] is explained in
[#atomics.order].
[:zh_CN]
[`memory_order] 类型的实参的含义在 [#atomics.order] 中说明。

[%@lib@member atomic_is_lock_free[!shared_ptr]]
[codeblock:declaration]
template<class T> bool atomic_is_lock_free(const shared_ptr<T>* p);
[codeblock:end]

[div:description]
[para:requires]
[:en] [`p] shall not be null.
[:zh_CN] [`p] 不应为空。

[para:returns]
[:en] [`true] if atomic access to [`*p] is lock-free, [`false] otherwise.
[:zh_CN] 如果对 [`*p] 的原子性访问是无锁的，则返回 [`true]，否则返回 [`false]。

[para:throws]
[:en] Nothing.
[:zh_CN] 无。
[div:end]

[%@lib@member atomic_load[!shared_ptr]]
[codeblock:declaration]
template<class T> shared_ptr<T> atomic_load(const shared_ptr<T>* p);
[codeblock:end]

[div:description]
[para:requires]
[:en] [`p] shall not be null.
[:zh_CN] [`p] 不应为空。

[para:returns]
[:en] [`atomic_load_explicit(p, memory_order::seq_cst)].
[:zh_CN] [`atomic_load_explicit(p, memory_order::seq_cst)]。

[para:throws]
[:en] Nothing.
[:zh_CN] 无。
[div:end]

[%@lib@member atomic_load_explicit[!shared_ptr]]
[codeblock:declaration]
template<class T> shared_ptr<T> atomic_load_explicit(const shared_ptr<T>* p, memory_order mo);
[codeblock:end]

[div:description]
[para:requires]
[:en] [`p] shall not be null.
[:zh_CN] [`p] 不应为空。

[para:requires]
[:en] [`mo] shall not be [`memory_order::release] or [`memory_order::acq_rel].
[:zh_CN] [`mo] 不应当为 [`memory_order::release] 或者 [`memory_order::acq_rel]。

[para:returns]
[:en] [`*p].
[:zh_CN] [`*p]。

[para:throws]
[:en] Nothing.
[:zh_CN] 无。
[div:end]

[%@lib@member atomic_store[!shared_ptr]]
[codeblock:declaration]
template<class T> void atomic_store(shared_ptr<T>* p, shared_ptr<T> r);
[codeblock:end]

[div:description]
[para:requires]
[:en] [`p] shall not be null.
[:zh_CN] [`p] 不应为空。

[para:effects]
[:en] As if by [`atomic_store_explicit(p, r, memory_order::seq_cst)].
[:zh_CN] 如同执行 [`atomic_store_explicit(p, r, memory_order::seq_cst)]。

[para:throws]
[:en] Nothing.
[:zh_CN] 无。
[div:end]

[%@lib@member atomic_store_explicit[!shared_ptr]]
[codeblock:declaration]
template<class T> void atomic_store_explicit(shared_ptr<T>* p, shared_ptr<T> r, memory_order mo);
[codeblock:end]

[div:description]
[para:requires]
[:en] [`p] shall not be null.
[:zh_CN] [`p] 不应为空。

[para:requires]
[:en] [`mo] shall not be [`memory_order::acquire] or [`memory_order::acq_rel].
[:zh_CN] [`mo] 不应当为 [`memory_order::acquire] 或者 [`memory_order::acq_rel]。

[para:effects]
[:en] As if by [`p->swap(r)].
[:zh_CN] 如同执行 [`p->swap(r)]。

[para:throws]
[:en] Nothing.
[:zh_CN] 无。
[div:end]

[%@lib@member atomic_exchange[!shared_ptr]]
[codeblock:declaration]
template<class T> shared_ptr<T> atomic_exchange(shared_ptr<T>* p, shared_ptr<T> r);
[codeblock:end]

[div:description]
[para:requires]
[:en] [`p] shall not be null.
[:zh_CN] [`p] 不应为空。

[para:returns]
[:en] [`atomic_exchange_explicit(p, r, memory_order::seq_cst)].
[:zh_CN] [`atomic_exchange_explicit(p, r, memory_order::seq_cst)]。

[para:throws]
[:en] Nothing.
[:zh_CN] 无。
[div:end]

[%@lib@member atomic_exchange_explicit[!shared_ptr]]
[codeblock:declaration]
template<class T>
  shared_ptr<T> atomic_exchange_explicit(shared_ptr<T>* p, shared_ptr<T> r, memory_order mo);
[codeblock:end]

[div:description]
[para:requires]
[:en] [`p] shall not be null.
[:zh_CN] [`p] 不应为空。

[para:effects]
[:en] As if by [`p->swap(r)].
[:zh_CN] 如同执行 [`p->swap(r)]。

[para:returns]
[:en] The previous value of [`*p].
[:zh_CN] [`*p] 之前的值。

[para:throws]
[:en] Nothing.
[:zh_CN] 无。
[div:end]

[%@lib@member atomic_compare_exchange_weak[!shared_ptr]]
[codeblock:declaration]
template<class T>
  bool atomic_compare_exchange_weak(shared_ptr<T>* p, shared_ptr<T>* v, shared_ptr<T> w);
[codeblock:end]

[div:description]
[para:requires]
[:en] [`p] shall not be null and [`v] shall not be null.
[:zh_CN] [`p] 不应为空，且 [`v] 不应为空。

[para:returns]
[codeblock]
atomic_compare_exchange_weak_explicit(p, v, w, memory_order::seq_cst, memory_order::seq_cst)
[codeblock:end]

[para:throws]
[:en] Nothing.
[:zh_CN] 无。
[div:end]

[%@lib@member atomic_compare_exchange_strong[!shared_ptr]]
[codeblock:declaration]
template<class T>
  bool atomic_compare_exchange_strong(shared_ptr<T>* p, shared_ptr<T>* v, shared_ptr<T> w);
[codeblock:end]

[div:description]
[para:returns]
[codeblock]
atomic_compare_exchange_strong_explicit(p, v, w, memory_order::seq_cst,
                                        memory_order::seq_cst)
[codeblock:end]
[div:end]

[%@lib@member atomic_compare_exchange_weak_explicit[!shared_ptr]]
[%@lib@member atomic_compare_exchange_strong_explicit[!shared_ptr]]
[codeblock:declaration]
template<class T>
  bool atomic_compare_exchange_weak_explicit(
    shared_ptr<T>* p, shared_ptr<T>* v, shared_ptr<T> w,
    memory_order success, memory_order failure);
template<class T>
  bool atomic_compare_exchange_strong_explicit(
    shared_ptr<T>* p, shared_ptr<T>* v, shared_ptr<T> w,
    memory_order success, memory_order failure);
[codeblock:end]

[div:description]
[para:requires]
[:en] [`p] shall not be null and [`v] shall not be null.
[:zh_CN] [`p] 不应为空，且 [`v] 不应为空。

[:en] The [`failure] argument shall not be [`memory_order::release] nor
[`memory_order::acq_rel].
[:zh_CN] [`failure] 实参不应当为 [`memory_order::release] 或
[`memory_order::acq_rel]。

[para:effects]
[:en] If [`*p] is equivalent to [`*v], assigns [`w] to [`*p] and has
synchronization semantics corresponding to the value of [`success], otherwise
assigns [`*p] to [`*v] and has synchronization semantics corresponding to the
value of [`failure].
[:zh_CN] 当 [`*p] 等价于 [`*v] 时，以 [`w] 对 [`*p] 进行赋值，并具有对应于
[`success] 的值的同步语义，否则以 [`*p] 对 [`*v] 进行赋值，并具有对应于
[`failure] 的值的同步语义。

[para:returns]
[:en] [`true] if [`*p] was equivalent to [`*v], [`false] otherwise.
[:zh_CN] 当 [`*p] 等价于 [`*v] 时返回 [`true]，否则返回 [`false]。

[para:throws]
[:en] Nothing.
[:zh_CN] 无。

[para:remarks]
[:en] Two [`shared_ptr] objects are equivalent if they store the same pointer
value and share ownership.
[:zh_CN] 当两个 [`shared_ptr] 对象存储相同的指针并且共享所有权时，它们是等价的。

[para:remarks]
[:en] The weak forms may fail spuriously.
[:zh_CN] 弱的版本可能会发生假性失败。

[:en] See [#atomics.types.operations].
[:zh_CN] 参见 [#atomics.types.operations]。
[div:end]
