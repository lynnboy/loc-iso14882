[section#depr.temporary.buffer
    [:en] Temporary buffers
    [:zh_CN] 临时缓冲区
]

[para]
[%@header memory]
[:en] The header [`<memory>] has the following addition:
[:zh_CN] 头文件 [`<memory>] 有下列添加声明：

[codeblock:synopsis]
namespace std {
  template<class T>
    pair<T*, ptrdiff_t> get_temporary_buffer(ptrdiff_t n) noexcept;
  template<class T>
    void return_temporary_buffer(T* p);
}
[codeblock:end]

[%@library get_temporary_buffer]
[codeblock:declaration]
template<class T>
  pair<T*, ptrdiff_t> get_temporary_buffer(ptrdiff_t n) noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Obtains a pointer to uninitialized, contiguous storage for [$N] adjacent
objects of type [`T], for some non-negative number [$N].
[:zh_CN] 对于某个非负数 [$N]，获得一个指向 [$N] 个 [`T] 类型的相邻对象的未初始化
的连续存储的指针。

[:en] It is [%@impldef support for over-aligned types] implementation-defiend
whether over-aligned types are supported ([#basic.align]).
[:zh_CN] 是否支持过量对齐类型（[#basic.align]）是[%@impldef 支持过量对齐类型]
由实现定义的。

[para:remarks]
[:en] Calling [`get_temporary_buffer] with a positive number [`n] is a
non-binding request to return storage for [`n] objects of type [`T].
[:zh_CN] 以正数 [`n] 来调用 [`get_temporary_buffer] 是一种返回 [`n] 个 [`T] 类型
的对象的存储的未绑定的请求。

[:en] In this case, an implementation is permitted to return instead storage for
a non-negative number [$N] of such objects, where [`[$N] != n] (including
[`[$N] == 0]).
[:zh_CN] 这种情况下，允许实现代之以返回非负数 [$N] 个这种对象，其中 [`[$N] != n]
（包含 [`[$N] == 0]）。

[enter:note]
[:en] The request is non-binding to allow latitude for implementation-specific
optimizations of its memory management.
[:zh_CN] 使这项请求非绑定，是为了允许在特定于实现的内存管理的优化方面获得自由度。
[exit:note]

[para:returns]
[:en] If [`n <= 0] or if no storage could be obtained, returns a pair [`P] such
that [`P.first] is a null pointer value and [`P.second == 0]; otherwise returns
a pair [`P] such that [`P.first] refers to the address of the uninitialized
storage and [`P.second] refers to its capacity [$N] (in the units of
[`sizeof(T)]).
[:zh_CN] 如果 [`n <= 0] 或无法获得存储，则返回对偶 [`P]，[`P.first] 为空指针值，
而 [`P.second == 0]；否则返回对偶 [`P]，使 [`P.first] 代表未初始化存储的地址，而
[`P.second] 代表其容量 [$N]（以 [`sizeof(T)] 为单位）。
[exit:description]

[%@library return_temporary_buffer]
[codeblock:declaration]
template<class T> void return_temporary_buffer(T* p);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Deallocates the storage referenced by [`p].
[:zh_CN] 回收由 [`p] 所引用的存储。

[para:requires]
[:en] [`p] shall be a pointer value returned by an earlier call to
[`get_temporary_buffer] that has not been invalidated by an intervening call to
[`return_temporary_buffer(T*)].
[:zh_CN] [`p] 应当为之前对 [`get_temporary_buffer] 的调用所返回的指针值，且并未
由介入其中的对 [`return_temporary_buffer(T*)] 的调用使其失效。

[para:throws]
[:en] Nothing.
[:zh_CN] 无。
[exit:description]
