[section#depr.conversions.buffer
    [:en] Class template [`wbuffer_convert]
    [:zh_CN] 类模板 [`wbuffer_convert]
]

[para]
[:en] Class template [`wbuffer_convert] looks like a wide stream buffer, but
performs all its I/O through an underlying byte stream buffer that you specify
when you construct it.
[:zh_CN] 类模板 [`wbuffer_convert] 看起来想一个宽流缓冲区，但其通过一个其构造时
所给定的一个底层字节流缓冲区来进行其所有的 I/O 操作。

[:en] Like class template [`wstring_convert], it lets you specify a code
conversion facet to perform the conversions, without affecting any streams or
locales.
[:zh_CN] 和类模板 [`wstring_convert] 类似，它允许指定一个编码转换刻面来实施转换
而不影响任何流或地域。

[%@library wbuffer_convert]
[codeblock:synopsis]
namespace std {
  template<class Codecvt, class Elem = wchar_t, class Tr = char_traits<Elem>>
    class wbuffer_convert : public basic_streambuf<Elem, Tr> {
    public:
      using state_type = typename Codecvt::state_type;

      explicit wbuffer_convert(streambuf* bytebuf = nullptr,
                               Codecvt* pcvt = new Codecvt,
                               state_type state = state_type());

      ~wbuffer_convert();

      wbuffer_convert(const wbuffer_convert&) = delete;
      wbuffer_convert& operator=(const wbuffer_convert&) = delete;

      streambuf* rdbuf() const;
      streambuf* rdbuf(streambuf* bytebuf);

      state_type state() const;

    private:
      streambuf* bufptr;            // [=Expos]
      Codecvt* cvtptr;              // [=Expos]
      state_type cvtstate;          // [=Expos]
  };
}
[codeblock:end]

[para]
[:en] The class template describes a stream buffer that controls the
transmission of elements of type [`Elem], whose character traits are described
by the class [`Tr], to and from a byte stream buffer of type [`streambuf].
[:zh_CN] 该类模板描述一种流缓冲区，控制 [`Elem] 类型的元素（其字符特征由类 [`Tr]
描述）与 [`streambuf] 类型的字节流缓冲区之间的双向传输。

[:en] Conversion between a sequence of [`Elem] values and multibyte sequences is
performed by an object of class [`Codecvt], which shall satisfy the requirements
of the standard code-conversion facet [`codecvt<Elem, char, mbstate_t>].
[:zh_CN] 在 [`Elem] 值序列和多字节序列之间进行的转换，是由一个类 [`Codecvt] 的
对象所实施的，它应当满足对标准编码转换刻面 [`codecvt<Elem, char, mbstate_t>] 的
规定。

[para]
[:en] An object of this class template stores:
[:zh_CN] 这个类模板的对象存储：

[list]
[item]
[:en] [`bufptr] [=--] a pointer to its underlying byte stream buffer
[:zh_CN] [`byte_err_string] [=--] 指向其底层字节流缓冲区的指针
[item]
[:en] [`cvtptr] [=--] a pointer to the allocated conversion object (which is
freed when the [`wbuffer_convert] object is destroyed)
[:zh_CN] [`cvtptr] [=--] 指向已分配的转换对象的指针（将于 [`wbuffer_convert]
对象销毁时释放）
[item]
[:en] [`cvtstate] [=--] a conversion state object
[:zh_CN] [`cvtstate] [=--] 转换状态对象
[list:end]

[%@library state[!wbuffer_convert]]
[%@library wbuffer_convert[!state]]
[codeblock:declaration]
state_type state() const;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`cvtstate].
[:zh_CN] [`cvtstate]。
[exit:description]

[%@library rdbuf[!wbuffer_convert]]
[%@library wbuffer_convert[!rdbuf]]
[codeblock:declaration]
streambuf* rdbuf() const;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`bufptr].
[:zh_CN] [`bufptr]。
[exit:description]

[%@library rdbuf[!wbuffer_convert]]
[%@library wbuffer_convert[!rdbuf]]
[codeblock:declaration]
streambuf* rdbuf(streambuf* bytebuf);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Stores [`bytebuf] in [`bufptr].
[:zh_CN] 将 [`bytebuf] 存储到 [`bufptr] 中。

[para:returns]
[:en] The previous value of [`bufptr].
[:zh_CN] [`bufptr] 之前的值。
[exit:description]

[%@library state_type[!wbuffer_convert]]
[%@library wbuffer_convert[!state_type]]
[codeblock:declaration]
using state_type = typename Codecvt::state_type;
[codeblock:end]

[enter:description]
[para]
[:en] The type shall be a synonym for [`Codecvt::state_type].
[:zh_CN] 该类型应当是 [`Codecvt::state_type] 的同义词。
[exit:description]

[%@library wbuffer_convert[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
explicit wbuffer_convert(
    streambuf* bytebuf = nullptr,
    Codecvt* pcvt = new Codecvt,
    state_type state = state_type());
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`pcvt != nullptr].
[:zh_CN] [`pcvt != nullptr]。

[para:effects]
[:en] The constructor constructs a stream buffer object, initializes [`bufptr]
to [`bytebuf], initializes [`cvtptr] to [`pcvt], and initializes [`cvtstate] to
[`state].
[:zh_CN] 该构造函数构造一个流缓冲区对象，将 [`bufptr] 初始化为 [`bytebuf]，将
[`cvtptr] 初始化为 [`pcvt]，并将 [`cvtstate] 初始化为 [`state]。
[exit:description]

[%@library wbuffer_convert[![:en]destructor[:zh_CN]析构函数]]
[codeblock:declaration]
~wbuffer_convert();
[codeblock:end]

[enter:description]
[para:effects]
[:en] The destructor shall delete [`cvtptr].
[:zh_CN] 析构函数应当删除 [`cvtptr]。
[exit:description]
