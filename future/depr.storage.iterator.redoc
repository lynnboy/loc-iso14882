[section#depr.storage.iterator
    [:en] Raw storage iterator
    [:zh_CN] 原始存储迭代器
]

[para]
[%[`<memory>][@memory]]
[%@library <memory>[@memory]]
[:en] The header [`<memory>] has the following addition:
[:zh_CN] 头文件 [`<memory>] 有下列添加声明：

[%@library raw_storage_iterator]
[codeblock:synopsis]
namespace std {
  template <class OutputIterator, class T>
  class raw_storage_iterator {
  public:
    using iterator_category = output_iterator_tag;
    using value_type        = void;
    using difference_type   = void;
    using pointer           = void;
    using reference         = void;

    explicit raw_storage_iterator(OutputIterator x);

    raw_storage_iterator& operator*();
    raw_storage_iterator& operator=(const T& element);
    raw_storage_iterator& operator=(T&& element);
    raw_storage_iterator& operator++();
    raw_storage_iterator  operator++(int);
    OutputIterator base() const;
  };
}
[codeblock:end]

[para]
[:en] [`raw_storage_iterator] is provided to enable algorithms to store their
results into uninitialized memory.
[:zh_CN] [`raw_storage_iterator] 是为使算法能够将其结果存储到未初始化内存而提供
的。

[:en] The template parameter [`OutputIterator] is required to have its
[`operator*] return an object for which [`operator&] is defined and returns a
pointer to [`T], and is also required to satisfy the requirements of an output
iterator ([#output.iterators]).
[:zh_CN] 要求模板形参 [`OutputIterator] 的 [`operator*] 所返回的对象对
[`operator&] 有定义并返回指向 [`T] 的指针，还要求其满足输出迭代器的规定
（[#output.iterators]）。

[%@library raw_storage_iterator[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
explicit raw_storage_iterator(OutputIterator x);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Initializes the iterator to point to the same value to which [`x] points.
[:zh_CN] 将迭代器初始化为指向与 [`x] 所指向的相同的值。
[exit:description]

[%@library operator*[!raw_storage_iterator]]
[%@library raw_storage_iterator[!operator*]]
[codeblock:declaration]
raw_storage_iterator& operator*();
[codeblock:end]

[enter:description]
[para:returns]
[`*this]
[exit:description]

[%@library operator=[!raw_storage_iterator]]
[%@library raw_storage_iterator[!operator=]]
[codeblock:declaration]
raw_storage_iterator& operator=(const T& element);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`T] shall be [`CopyConstructible].
[:zh_CN] [`T] 应当为 [`CopyConstructible]。

[para:effects]
[:en] Constructs a value from [`element] at the location to which the iterator
points.
[:zh_CN] 从 [`element] 在迭代器所指向的位置构造一个值。

[para:returns]
[:en] A reference to the iterator.
[:zh_CN] 到迭代器的引用。
[exit:description]

[%@library operator=[!raw_storage_iterator]]
[%@library raw_storage_iterator[!operator=]]
[codeblock:declaration]
raw_storage_iterator& operator=(T&& element);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`T] shall be [`MoveConstructible].
[:zh_CN] [`T] 应当为 [`MoveConstructible]。

[para:effects]
[:en] Constructs a value from [`std::move(element)] at the location to which the
iterator points.
[:zh_CN] 从 [`std::move(element)] 在迭代器所指向的位置构造一个值。

[para:returns]
[:en] A reference to the iterator.
[:zh_CN] 到迭代器的引用。
[exit:description]

[%@library operator++[!raw_storage_iterator]]
[%@library raw_storage_iterator[!operator++]]
[codeblock:declaration]
raw_storage_iterator& operator++();
[codeblock:end]

[enter:description]
[para:effects]
[:en] Pre-increment: advances the iterator and returns a reference to the
updated iterator.
[:zh_CN] 前置增量：推进迭代器并返回到更新后的迭代器的引用。
[exit:description]

[%@library operator++[!raw_storage_iterator]]
[%@library raw_storage_iterator[!operator++]]
[codeblock:declaration]
raw_storage_iterator operator++(int);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Post-increment: advances the iterator and returns the old value of the
iterator.
[:zh_CN] 后置增量：推进迭代器并返回该迭代器的旧值。
[exit:description]

[%@library base[!raw_storage_iterator]]
[%@library raw_storage_iterator[!base]]
[codeblock:declaration]
OutputIterator base() const;
[codeblock:end]

[enter:description]
[para:returns]
[:en] An iterator of type [`OutputIterator] that points to the same value as
[`*this] points to.
[:zh_CN] 一个指向与 [`*this] 所指向的相同的值的 [`OutputIterator] 类型的迭代器。
[exit:description]
