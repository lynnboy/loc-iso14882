[section#depr.strstreambuf
    [:en] Class [`strstreambuf]
    [:zh_CN] 类 [`strstreambuf]
]

[%@library strstreambuf]
[codeblock:synopsis]
namespace std {
  class strstreambuf : public basic_streambuf<char> {
  public:
    strstreambuf() : strstreambuf(0) {}
    explicit strstreambuf(streamsize alsize_arg);
    strstreambuf(void* (*palloc_arg)(size_t), void (*pfree_arg)(void*));
    strstreambuf(char* gnext_arg, streamsize n, char* pbeg_arg = nullptr);
    strstreambuf(const char* gnext_arg, streamsize n);

    strstreambuf(signed char* gnext_arg, streamsize n,
                 signed char* pbeg_arg = nullptr);
    strstreambuf(const signed char* gnext_arg, streamsize n);
    strstreambuf(unsigned char* gnext_arg, streamsize n,
                 unsigned char* pbeg_arg = nullptr);
    strstreambuf(const unsigned char* gnext_arg, streamsize n);

    virtual ~strstreambuf();

    void  freeze(bool freezefl = true);
    char* str();
    int   pcount();

  protected:
    int_type overflow (int_type c = EOF) override;
    int_type pbackfail(int_type c = EOF) override;
    int_type underflow() override;
    pos_type seekoff(off_type off, ios_base::seekdir way,
                     ios_base::openmode which
                      = ios_base::in | ios_base::out) override;
    pos_type seekpos(pos_type sp,
                     ios_base::openmode which
                      = ios_base::in | ios_base::out) override;
    streambuf* setbuf(char* s, streamsize n) override;

  private:
    using strstate = T1;                // [=Expos]
    static const strstate allocated;    // [=Expos]
    static const strstate constant;     // [=Expos]
    static const strstate dynamic;      // [=Expos]
    static const strstate frozen;       // [=Expos]
    strstate strmode;                   // [=Expos]
    streamsize alsize;                  // [=Expos]
    void* (*palloc)(size_t);            // [=Expos]
    void (*pfree)(void*);               // [=Expos]
  };
}
[codeblock:end]

[para]
[:en] The class [`strstreambuf] associates the input sequence, and possibly the
output sequence, with an object of some [+character[%]] array type, whose
elements store arbitrary values.
[:zh_CN] 类 [`strstreambuf] 将输入序列以及可能的输出序列与某个[+字符[%]]数组类型
的对象关联起来，其中的元素存储任意的值。

[:en] The array object has several attributes.
[:zh_CN] 数组对象具有几项属性。

[para]
[enter:note]
[:en] For the sake of exposition, these are represented as elements of a bitmask
type (indicated here as [`T1]) called [`strstate].
[:zh_CN] 为阐释目的，它们被表示为一个被称为 [`strstate] 的掩码类型（此处表示为
[`T1]）的各元素。

[:en] The elements are:
[:zh_CN] 这些元素有：

[list]
[item]
[:en] [`allocated], set when a dynamic array object has been allocated, and
hence should be freed by the destructor for the [`strstreambuf] object;
[:zh_CN] [`allocated]，当动态数组对象已经分配时设置，且因而应当由
[`strstreambuf] 对象的析构函数所释放；
[item]
[:en] [`constant], set when the array object has [`const] elements, so the
output sequence cannot be written;
[:zh_CN] [`constant]，当数组对象具有 [`const] 元素时设置，因而不能写入输出序列；
[item]
[:en] [`dynamic], set when the array object is allocated (or reallocated)
as necessary to hold a character sequence that can change in length;
[:zh_CN] [`dynamic]，当数组对象根据需要进行分配（和回收）以持有可以改变长度的
字符序列时设置；
[item]
[:en] [`frozen], set when the program has requested that the array object not be
altered, reallocated, or freed.
[:zh_CN] [`frozen]，当程序要求数组对象不能改动、重新分配或回收时设置。
[list:end]
[exit:note]

[para]
[enter:note]
[:en] For the sake of exposition, the maintained data is presented here as:
[:zh_CN] 为阐释目的，此处将其所维护的数据表示为：

[list]
[item]
[:en] [`strstate strmode], the attributes of the array object associated with
the [`strstreambuf] object;
[:zh_CN] [`strstate strmode]，与该 [`strstreambuf] 对象所关联的数组对象的属性；
[item]
[:en] [`int alsize], the suggested minimum size for a dynamic array object;
[:zh_CN] [`int alsize]，动态数组对象的建议最小大小；
[item]
[:en] [`void* (*palloc)(size_t)], points to the function to call to allocate a
dynamic array object;
[:zh_CN] [`void* (*palloc)(size_t)]，指向用于调用以分配动态数组对象的函数；
[item]
[:en] [`void (*pfree)(void*)], points to the function to call to free a dynamic
array object.
[:zh_CN] [`void (*pfree)(void*)]，指向用于调用以释放动态数组对象的函数。
[list:end]
[exit:note]

[para]
[:en] Each object of class [`strstreambuf] has a [+seekable area[%]], delimited
by the pointers [`seeklow] and [`seekhigh].
[:zh_CN] 类 [`strstreambuf] 的每个对象都有一个[+可定位区[%]]，由指针 [`seeklow]
和 [`seekhigh] 所标明。

[:en] If [`gnext] is a null pointer, the seekable area is undefined.
[:zh_CN] 当 [`gnext] 是空指针时，可定位区无定义。

[:en] Otherwise, [`seeklow] equals [`gbeg] and [`seekhigh] is either [`pend],
if [`pend] is not a null pointer, or [`gend].
[:zh_CN] 否则，[`seeklow] 等于 [`gbeg]，而 [`seekhigh] 在当 [`pend] 不为空指针时
为 [`pend]，否则为 [`gend]。

[include depr.strstreambuf.cons]

[include depr.strstreambuf.members]

[include depr.strstreambuf.virtuals]
