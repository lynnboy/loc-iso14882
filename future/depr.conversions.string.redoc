[section#depr.conversions.string
    [:en] Class template [`wstring_convert]
    [:zh_CN] 类模板 [`wstring_convert]
]

[para]
[:en] Class template [`wstring_convert] performs conversions between a wide
string and a byte string.
[:zh_CN] 类模板 [`wstring_convert] 在宽字符串和字节字符串之间实施转换。

[:en] It lets you specify a code conversion facet (like class template [`codecvt])
to perform the conversions, without affecting any streams or locales.
[:zh_CN] 它允许指定一个编码转换刻面（如类模板 [`codecvt]）来实施这个转换而不影响
任何流或地域。

[begin:example]
[:en] If you want to use a code conversion facet, [`codecvt_for_utf8], to output
to [`cout] a UTF-8 multibyte sequence corresponding to a wide string, but you
don[=']t want to alter the locale for [`cout], you can write something like:
[:zh_CN] 如果你希望使用代码转换刻面 [`codecvt_for_utf8] 来向 [`cout] 输出一个
对应于一个款字符串的 UTF-8 多字符序列，但又不希望改变 [`cout] 的地域，你可以编写
类似下面的代码：

[codeblock]
std::wstring_convert<codecvt_for_utf8<wchar_t>> myconv;
std::string mbstring = myconv.to_bytes(L"Hello\n");
std::cout << mbstring;
[codeblock:end]
[end:example]

[%@lib wstring_convert]
[%@lib@member byte_string[!wstring_convert]]
[%@lib@member int_type[!wstring_convert]]
[%@lib@member state_type[!wstring_convert]]
[%@lib@member wide_string[!wstring_convert]]
[codeblock:synopsis]
namespace std {
  template<class Codecvt, class Elem = wchar_t,
           class WideAlloc = allocator<Elem>,
           class ByteAlloc = allocator<char>>
    class wstring_convert {
    public:
      using byte_string = basic_string<char, char_traits<char>, ByteAlloc>;
      using wide_string = basic_string<Elem, char_traits<Elem>, WideAlloc>;
      using state_type  = typename Codecvt::state_type;
      using int_type    = typename wide_string::traits_type::int_type;

      wstring_convert() : wstring_convert(new Codecvt) {}
      explicit wstring_convert(Codecvt* pcvt);
      wstring_convert(Codecvt* pcvt, state_type state);
      explicit wstring_convert(const byte_string& byte_err,
                               const wide_string& wide_err = wide_string());
      ~wstring_convert();

      wstring_convert(const wstring_convert&) = delete;
      wstring_convert& operator=(const wstring_convert&) = delete;

      wide_string from_bytes(char byte);
      wide_string from_bytes(const char* ptr);
      wide_string from_bytes(const byte_string& str);
      wide_string from_bytes(const char* first, const char* last);

      byte_string to_bytes(Elem wchar);
      byte_string to_bytes(const Elem* wptr);
      byte_string to_bytes(const wide_string& wstr);
      byte_string to_bytes(const Elem* first, const Elem* last);

      size_t converted() const noexcept;
      state_type state() const;

    private:
      byte_string byte_err_string;  // [=expos]
      wide_string wide_err_string;  // [=expos]
      Codecvt* cvtptr;              // [=expos]
      state_type cvtstate;          // [=expos]
      size_t cvtcount;              // [=expos]
    };
}
[codeblock:end]

[para]
[:en] The class template describes an object that controls conversions between
wide string objects of class [`basic_string<Elem, char_traits<Elem>, WideAlloc>]
and byte string objects of class
[`basic_string<char, char_traits<char>, ByteAlloc>].
[:zh_CN] 该类模板描述一种对象，控制在类
[`basic_string<Elem, char_traits<Elem>, WideAlloc>] 的宽字符串对象和类
[`basic_string<char, char_traits<char>, ByteAlloc>] 的字节字符串对象之间的转换。

[:en] The class template defines the types [`wide_string] and [`byte_string] as
synonyms for these two types.
[:zh_CN] 该类模板定义了类型 [`wide_string] 和 [`byte_string] 作为这些类型的
同义词。

[:en] Conversion between a sequence of [`Elem] values (stored in a [`wide_string]
object) and multibyte sequences (stored in a [`byte_string] object) is performed
by an object of class [`Codecvt], which meets the requirements of the standard
code-conversion facet [`codecvt<Elem, char, mbstate_t>].
[:zh_CN] 在 [`Elem] 值序列（存储于一个 [`wide_string] 对象中）和多字节序列（存储
于一个 [`byte_string] 对象中）之间进行的转换，是由一个类 [`Codecvt] 的对象所实施
的，它满足对标准编码转换刻面 [`codecvt<Elem, char, mbstate_t>] 的规定。

[para]
[:en] An object of this class template stores:
[:zh_CN] 这个类模板的对象存储：

[list]
[item]
[:en] [`byte_err_string] [=--] a byte string to display on errors
[:zh_CN] [`byte_err_string] [=--] 用以显示错误的字节字符串
[item]
[:en] [`wide_err_string] [=--] a wide string to display on errors
[:zh_CN] [`wide_err_string] [=--] 用以显示错误的宽字符串
[item]
[:en] [`cvtptr] [=--] a pointer to the allocated conversion object (which is
freed when the [`wstring_convert] object is destroyed)
[:zh_CN] [`cvtptr] [=--] 指向已分配的转换对象的指针（将于 [`wstring_convert]
对象销毁时释放）
[item]
[:en] [`cvtstate] [=--] a conversion state object
[:zh_CN] [`cvtstate] [=--] 转换状态对象
[item]
[:en] [`cvtcount] [=--] a conversion count
[:zh_CN] [`cvtcount] [=--] 转换计数
[list:end]

[%@lib@member converted[!wstring_convert]]
[codeblock:declaration]
size_t converted() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`cvtcount].
[:zh_CN] [`cvtcount]。
[div:end]

[%@lib@member from_bytes[!wstring_convert]]
[codeblock:declaration]
wide_string from_bytes(char byte);
wide_string from_bytes(const char* ptr);
wide_string from_bytes(const byte_string& str);
wide_string from_bytes(const char* first, const char* last);
[codeblock:end]

[div:description]
[para:effects]
[:en] The first member function converts the single-element sequence [`byte]
to a wide string.
[:zh_CN] 第一个成员函数将单元素序列 [`byte] 转换为宽字符串。

[:en] The second member function converts the null-terminated sequence
beginning at [`ptr] to a wide string.
[:zh_CN] 第二个成员函数将以 [`ptr] 开始的空终结序列转换为宽字符串。

[:en] The third member function converts the sequence stored in [`str] to a
wide string.
[:zh_CN] 第三个成员函数将 [`str] 中存储的序列转换为宽字符串。

[:en] The fourth member function converts the sequence defined by the range
[=range(first,last)] to a wide string.
[:zh_CN] 第四个成员函数将由范围 [=range(first,last)] 所定义的序列转换为宽字符串。

[para]
[:en] In all cases:
[:zh_CN] 任何情况下：

[list]
[item]
[:en] If the [`cvtstate] object was not constructed with an explicit value, it
is set to its default value (the initial conversion state) before the
conversion begins.
[:zh_CN] 如果 [`cvtstate] 对象尚未以明确的值构造，则在转换开始前将其设置为默认值
（初始转换状态）。

[:en] Otherwise it is left unchanged.
[:zh_CN] 否则不对其进行改动。

[item]
[:en] The number of input elements successfully converted is stored in [`cvtcount].
[:zh_CN] 成功转换的输入元素数量存储于 [`cvtcount] 中。
[list:end]

[para:returns]
[:en] If no conversion error occurs, the member function returns the
converted wide string.
[:zh_CN] 如果没有发生转换错误，则成员函数返回转换后的宽字符串。

[:en] Otherwise, if the object was constructed with a wide-error string, the
member function returns the wide-error string.
[:zh_CN] 否则，如果该对象是以一个宽字符串来构造的，则该成员函数返回该宽字符串。

[:en] Otherwise, the member function throws an object of class [`range_error].
[:zh_CN] 否则，该成员函数抛出类 [`range_error] 的对象。
[div:end]

[%@lib@member state[!wstring_convert]]
[codeblock:declaration]
state_type state() const;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`cvtstate].
[:zh_CN] [`cvtstate]。
[div:end]

[%@lib@member to_bytes[!wstring_convert]]
[codeblock:declaration]
byte_string to_bytes(Elem wchar);
byte_string to_bytes(const Elem* wptr);
byte_string to_bytes(const wide_string& wstr);
byte_string to_bytes(const Elem* first, const Elem* last);
[codeblock:end]

[div:description]
[para:effects]
[:en] The first member function converts the single-element sequence [`wchar] to
a byte string.
[:zh_CN] 第一个成员函数将单元素序列 [`wchar] 转换为字节字符串。

[:en] The second member function converts the null-terminated sequence beginning
at [`wptr] to a byte string.
[:zh_CN] 第二个成员函数将以 [`wptr] 开始的空终结序列转换为字节字符串。

[:en] The third member function converts the sequence stored in [`wstr] to
a byte string.
[:zh_CN] 第三个成员函数将 [`wstr] 中存储的序列转换为字节字符串。

[:en] The fourth member function converts the sequence defined by the range
[=range(first,last)] to a byte string.
[:zh_CN] 第四个成员函数将由范围 [=range(first,last)] 所定义的序列转换为字节
字符串。

[para]
[:en] In all cases:
[:zh_CN] 任何情况下：

[list]
[item]
[:en] If the [`cvtstate] object was not constructed with an explicit value, it
is set to its default value (the initial conversion state) before the
conversion begins.
[:zh_CN] 如果 [`cvtstate] 对象尚未以明确的值构造，则在转换开始前将其设置为默认值
（初始转换状态）。

[:en] Otherwise it is left unchanged.
[:zh_CN] 否则不对其进行改动。

[item]
[:en] The number of input elements successfully converted is stored in [`cvtcount].
[:zh_CN] 成功转换的输入元素数量存储于 [`cvtcount] 中。
[list:end]

[para:returns]
[:en] If no conversion error occurs, the member function returns the
converted byte string.
[:zh_CN] 如果没有发生转换错误，则成员函数返回转换后的字节字符串。

[:en] Otherwise, if the object was constructed with a byte-error string, the
member function returns the byte-error string.
[:zh_CN] 否则，如果该对象是以一个字节字符串来构造的，则该成员函数返回该字节
字符串。

[:en] Otherwise, the member function throws an object of class [`range_error].
[:zh_CN] 否则，该成员函数抛出类 [`range_error] 的对象。
[div:end]

[%@lib@ctor wstring_convert]
[codeblock:declaration]
explicit wstring_convert(Codecvt* pcvt);
wstring_convert(Codecvt* pcvt, state_type state);
explicit wstring_convert(const byte_string& byte_err,
    const wide_string& wide_err = wide_string());
[codeblock:end]

[div:description]
[para:expects]
[:en] For the first and second constructors, [`pcvt] is not null.
[:zh_CN] 对于第一和第二个构造函数，[`pcvt] 不为空。

[para:effects]
[:en] The first constructor stores [`pcvt] in [`cvtptr] and default values
in [`cvtstate], [`byte_err_string], and [`wide_err_string].
[:zh_CN] 第一个构造函数将 [`pcvt] 存储到 [`cvtptr] 中，并将默认值存储到
[`cvtstate]、[`byte_err_string] 和 [`wide_err_string] 中。

[:en] The second constructor stores [`pcvt] in [`cvtptr], [`state] in [`cvtstate],
and default values in [`byte_err_string] and [`wide_err_string]; moreover the
stored state is retained between calls to [`from_bytes] and [`to_bytes].
[:zh_CN] 第二个构造函数将 [`pcvt] 存储到 [`cvtptr] 中，将 [`state] 存储到
[`cvtstate] 中，并将默认值存储到 [`byte_err_string] 和 [`wide_err_string] 中；
此外其所存储的状态在 [`from_bytes] 和 [`to_bytes] 的调用之间保留。

[:en] The third constructor stores [`new Codecvt] in [`cvtptr], [`state_type()]
in [`cvtstate], [`byte_err] in [`byte_err_string], and [`wide_err] in
[`wide_err_string].
[:zh_CN] 第三个构造函数将 [`new Codecvt] 存储到 [`cvtptr] 中，将 [`state_type()]
存储到 [`cvtstate] 中，将 [`byte_err] 存储到 [`byte_err_string] 中，并将
[`wide_err] 存储到 [`wide_err_string] 中。
[div:end]

[%@lib@dtor wstring_convert]
[codeblock:declaration]
~wstring_convert();
[codeblock:end]

[div:description]
[para:effects]
[:en] [`delete cvtptr].
[:zh_CN] [`delete cvtptr]。
[div:end]
