[section#depr.tuple
    [:en] Tuple
    [:zh_CN] 元组
]

[para]
[:en] The header [?libheader@ref tuple] has the following addition:
[:zh_CN] 头文件 [?libheader@ref tuple] 有下列添加声明：

[codeblock:synopsis]
namespace std {
  template<class T> class tuple_size<volatile T>;
  template<class T> class tuple_size<const volatile T>;

  template<size_t I, class T> class tuple_element<I, volatile T>;
  template<size_t I, class T> class tuple_element<I, const volatile T>;
}
[codeblock:end]

[codeblock:declaration]
template<class T> struct tuple_size<volatile T>;
template<class T> struct tuple_size<const volatile T>;
[codeblock:end]

[div:description]
[para]
[:en] Let [`TS] denote [`tuple_size<T>] of the cv-unqualified type [`T].
[:zh_CN] 令 [`TS] 代表无 cv 限定类型 [`T] 的 [`tuple_size<T>]。

[:en] If the expression [`TS::value] is well-formed when treated as an
unevaluated operand, then specializations of each of the two templates meet the
[^:oc TransformationTrait] requirements with a base characteristic of
[`integral_constant<size_t, TS::value>].
[:zh_CN] 若表达式 [`TS::value] 被当成免求值操作数时是良构的，则两个模板中的每个
的特例都满足 [^:oc TransformationTrait] 规定，其基础特征为
[`integral_constant<size_t, TS::value>]。

[:en] Otherwise, they have no member [`value].
[:zh_CN] 否则，它们不带有成员 [`value]。

[para]
[:en] Access checking is performed as if in a context unrelated to [`TS] and [`T].
[:zh_CN] 如同在与 [`TS] 和 [`T] 无关的语境中一样照常进行访问检查。

[:en] Only the validity of the immediate context of the expression is considered.
[:zh_CN] 仅考虑表达式的直接语境的有效性。

[para]
[:en] In addition to being available via inclusion of the [?libheader tuple]
header, the two templates are available when any of the headers
[?libheader@ref array], [?libheader@ref ranges], or [?libheader@ref utility] are
included.
[:zh_CN] 除了通过包含 [?libheader tuple] 头文件而使其可用之外，这两个模板还可以
通过包含 [?libheader@ref array]、[?libheader@ref ranges] 或
[?libheader@ref utility] 之一而可用。
[div:end]

[codeblock:declaration]
template<size_t I, class T> struct tuple_element<I, volatile T>;
template<size_t I, class T> struct tuple_element<I, const volatile T>;
[codeblock:end]

[div:description]
[para]
[:en] Let [`TE] denote [`tuple_element<I, T>] of the cv-unqualified type [`T].
[:zh_CN] 令 [`TE] 代表无 cv 限定的类型 [`T] 的 [`tuple_element<I, T>]。

[:en] Then specializations of each of the two templates meet the
[^:oc TransformationTrait] requirements with a member typedef [`type] that names
the following type:
[:zh_CN] 则两个模板中的每个的特例都满足 [^:oc TransformationTrait] 规定，并带有
指名下列类型的成员 typedef [`type]：

[list]
[item]
[:en@~] for the first specialization, [`add_volatile_t<TE>], and
[:zh_CN@~] 对于第一个特化式，为 [`add_volatile_t<TE>]，而
[item]
[:en@~] for the second specialization, [`add_cv_t<TE>].
[:zh_CN@~] 对于第二个特化式，为 [`add_cv_t<TE>]。
[list:end]

[para]
[:en] In addition to being available via inclusion of the [?libheader tuple]
header, the tow templates are available when any of the headers
[?libheader@ref array], [?libheader@ref ranges], or [?libheader@ref utility] are
included.
[:zh_CN] 除了通过包含 [?libheader tuple] 头文件而使其可用之外，这两个模板还可以
通过包含 [?libheader@ref array]、[?libheader@ref ranges] 或
[?libheader@ref utility] 之一而可用。
[div:end]
