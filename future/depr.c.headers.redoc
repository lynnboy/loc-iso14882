[section#depr.c.headers
    [:en] C standard library headers
    [:zh_CN] C 标准程序库头文件
]

[para]
[:en] For compatibility with the [%library[!C standard]] C standard library, the
[=Cpp] standard library provides the [+C headers[%headers[!C library]]] shown in
[#future.c.headers].
[:zh_CN] 为维护与 [%程序库[!C 标准～]] C 标准程序库的兼容性，[=Cpp] 标准程序库
提供了 [#future.c.headers] 中所示的各 [+C 头文件[%头文件[!C 程序库]]]。

[table:listing@shape=?x5@fill=column@code#tab:future.c.headers
    [:en] C headers
    [:zh_CN] C 头文件
    [column@code@5]
]
[|] <assert.h>
[|] <complex.h>
[|] <ctype.h>
[|] <errno.h>
[|] <fenv.h>
[|] <float.h>

[|] <inttypes.h>
[|] <iso646.h>
[|] <limits.h>
[|] <locale.h>
[|] <math.h>
[|] <setjmp.h>

[|] <signal.h>
[|] <stdalign.h>
[|] <stdarg.h>
[|] <stdbool.h>
[|] <stddef.h>
[|] <stdint.h>

[|] <stdio.h>
[|] <stdlib.h>
[|] <string.h>
[|] <tgmath.h>
[|] <time.h>
[|] <uchar.h>

[|] <wchar.h>
[|] <wctype.h>
[table:end]

[para]
[:en] The header [`<complex.h>] behaves as if it simply includes the header
[`<ccomplex>].
[:zh_CN] 头文件 [`<complex.h>] 的行为如同其单纯地包含了头文件 [`<ccomplex>]。

[:en] The header [`<tgmath.h>] behaves as if it simply includes the header
[`<ctgmath>].
[:zh_CN] 头文件 [`<tgmath.h>] 的行为如同其单纯地包含了头文件 [`<ctgmath>]。

[para]
[:en] Every other C header, each of which has a name of the form [%header[!C]]
[`name.h], behaves as if each name placed in the standard library namespace by
the corresponding [`c[*name]] header is placed within the global namespace
scope, except for the functions described in [#sf.cmath], the declaration of
[`std::byte] ([#cstddef.syn]), and the functions and function templates
described in [#support.types.byteops].
[:zh_CN] 其他的每个头文件，其名字具有形式 [%头文件[!C]][`name.h]，其行为如同将
由对应的 [`c[*name]] 头文件所放入到标准程序库命名空间中的各个名字，都放入到全局
命名空间作用域中，但排除 [#sf.cmath] 中所描述的函数，[`std::byte] 的声明式
（[#cstddef.syn]），以及在 [#support.types.byteops] 中所描述的各函数和函数模板。

[:en] It is unspecified whether these names are first declared or defined within
[%namespace] namespace scope ([#basic.scope.namespace]) of the namespace [`std]
and are then injected into the global namespace scope by explicit
[~using-declaration]s ([#namespace.udecl]).
[:zh_CN] 是否将这些名字首先在[%命名空间]命名空间 [`std] 的命名空间作用域
（[#basic.scope.namespace]）中声明或定义，然后再通过显式 [~using-声明式]
（[#namespace.udecl]）将它们注入到全局命名空间作用域，是未指明的。

[para]
[enter:example]
[%@header cstdlib]
[%@header stdlib.h]
[:en] The header [`<cstdlib>] assuredly provides its declarations and
definitions within the namespace [`std].
[:zh_CN] 头文件 [`<cstdlib>] 确定会在命名空间 [`std] 中提供其声明式和定义式。

[:en] It may also provide these names within the global namespace.
[:zh_CN] 它可能也在全局命名空间中提供这些名字。

[:en] The header [`<stdlib.h>] assuredly provides the same declarations and
definitions within the global namespace, much as in the C Standard.
[:zh_CN] 头文件 [`<stdlib.h>] 确定会在全局命名空间中提供相同的声明式和定义式，
与其在 C 标准中非常相似。

[:en] It may also provide these names within the namespace [`std].
[:zh_CN] 它可能也在命名空间 [`std] 中提供这些名字。
[exit:example]
