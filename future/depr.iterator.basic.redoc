[section#depr.iterator.basic
    [:en] Basic iterator
    [:zh_CN] 基本迭代器
]

[para]
[:en] The header [?libheader@ref#iterator.synopsis iterator] has the following
addition:
[:zh_CN] 头文件 [?libheader@ref#iterator.synopsis iterator] 有下列添加声明：

[%@library iterator]
[codeblock:synopsis]
namespace std {
  template<class Category, class T, class Distance = ptrdiff_t,
           class Pointer = T*, class Reference = T&>
  struct iterator {
    using iterator_category = Category;
    using value_type        = T;
    using difference_type   = Distance;
    using pointer           = Pointer;
    using reference         = Reference;
  };
}
[codeblock:end]

[para]
[:en] The [`iterator] template may be used as a base class to ease the
definition of required types for new iterators.
[:zh_CN] [`iterator] 模板可以用作基类以简化为新迭代器定义所需类型的工作。

[para]
[begin:note]
[:en] If the new iterator type is a class template, then these aliases will not
be visible from within the iterator class[=']s template definition, but only to
callers of that class.
[:zh_CN] 如果新迭代器类型是类模板，则这些别名不会在该迭代器类模板的定义式中可见，
而只会对该类的调用方可见。
[end:note]

[para]
[begin:example]
[:en] If a [=Cpp] program wants to define a bidirectional iterator for some data
structure containing [`double] and such that it works on a large memory model of
the implementation, it can do so with:
[:zh_CN] 如果一个 [=Cpp] 程序需要为某种包含 [`double] 的数据结构定义双向迭代器，
且使其能够在该实现的某种大型内存模型上工作，则它可以如此进行：

[codeblock]
class MyIterator :
  public iterator<bidirectional_iterator_tag, double, long, T*, T&> {
  // [:en] code implementing [`++], etc. \
     [:zh_CN] 实现 [`++] 等的代码。
};
[codeblock:end]
[end:example]
