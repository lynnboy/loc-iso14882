[section#over.built
    [:en] Built-in operators
    [:zh_CN] 内建运算符

[%  [:en] overloading[!built-in operators and]
    [:zh_CN] 重载[!内建运算符与～] ]
]

[para]
[:en] The candidate operator functions that represent the built-in operators
defined in [#expr.compound] are specified in this subclause.
[:zh_CN] 本子条款中指定了用于代表 [#expr.compound] 中定义的内建运算符的候选运算符函数。

[:en] These candidate functions participate in the operator overload resolution
process as described in [#over.match.oper] and are used for no other purpose.
[:zh_CN] 这些候选函数参与在 [#over.match.oper] 中所描述的运算符重载决议过程，
而并不用于其它目的。

[begin:note]
[:en] Because built-in operators take only operands with non-class type, and operator
overload resolution occurs only when an operand expression originally has class
or enumeration type, operator overload resolution can resolve to a built-in
operator only when an operand has a class type that has a user-defined conversion
to a non-class type appropriate for the operator, or when an operand has an
enumeration type that can be converted to a type appropriate for the operator.
[:zh_CN] 因为内建运算符只接受非类类型的操作数，并且运算符重载决议仅当某个操作数
表达式本来具有类或枚举类型时才会发生，所以仅当某个操作数具有类类型，并带有转换为
适用于该运算符的非类类型的用户定义的转换时，或者当某个操作数具有枚举类型，并可被
转换为适用于该运算符的类型时，重载决议才能决议为内建运算符。

[:en] Also note that some of the candidate operator functions given in this
subclause are more permissive than the built-in operators themselves.
[:zh_CN] 还要注意，本子条款中给定的某些候选运算符函数比内建运算符自身具有更少限制。

[:en] As described in [#over.match.oper], after a built-in operator is selected by
overload resolution the expression is subject to the requirements for the
built-in operator given in [#expr.compound], and therefore to any additional
semantic constraints given there.
[:zh_CN] 如同 [#over.match.oper] 中所述，重载决议选择内建运算符之后，其表达式需要满足
[#expr.compound] 中给出的对内建运算符的规定，因而要满足在该处给出的任何附加的语义约束。

[:en] In some cases, user-written candidates with the same name and parameter types
as a built-in candidate operator function cause the built-in operator function to
not be included in the set of candidate functions.
[:zh_CN] 一些情况下，带有与内建候选运算符函数相同名字和形参类型的某个由用户写出的候选，
会造成该内建运算符函数并不被包含进候选函数集合之内。
[end:note]

[para]
[:en] [%type[!integral[!promoted]]]
In this subclause, the term [+promoted integral type] is used to refer to those
cv-unqualified integral types which are preserved by integral promotion
([#conv.prom]) (including e.g. [`int] and [`long] but excluding e.g. [`char]).
[:zh_CN] [%类型[!整型～[!已提升～]]]
在本子条款中，术语[+已提升整型类型]用于表示被整型提升（[#conv.prom]）所保持的
无 cv 限定的整型类型（比如说，包括 [`int] 和 [`long] 但排除 [`char]）。

[begin:note]
[:en] In all cases where a promoted integral type is required, an operand of
unscoped enumeration type will be acceptable by way of the integral promotions.
[:zh_CN] 在所有需要已提升整型类型的情况下，可以通过整型提升来接受无作用域枚举类型的操作数。
[end:note]

[para] [:en] In the remainder of this subclause, [=cv vq] represents either
[`volatile] or no cv-qualifier.
[:zh_CN] 在本子条款的余下部分中，[=cv vq] 代表 [`volatile] 或没有 cv 限定符。

[para]
[:en] For every pair ([`[^T]], [=cv vq]), where [`[^T]] is a cv-unqualified
arithmetic type other than [`bool] or a cv-unqualified pointer to (possibly
cv-qualified) ojbect type, there exist candidate operator functions of the form
[:zh_CN] 对于每对 ([`[^T]], [=cv vq])，其中 [`[^T]] 为除 [`bool] 之外的无 cv 限定的算术
类型或指向（可能 cv 限定的）对象类型的无 cv 限定的指针，存在如下形式的候选运算符函数
[codeblock:notation]
[=cv vq] [^T]& operator++([=cv vq] [^T]&);
[^T] operator++([=cv vq] [^T]&, int);
[=cv vq] [^T]& operator--([=cv vq] [^T]&);
[^T] operator--([=cv vq] [^T]&, int);
[codeblock:end]

[para]
[:en] For every (possibly cv-qualified) object type [`[^T]] and for every function
type [`[^T]] that has neither [~cv-qualifier]s nor a [~ref-qualifier], there
exist candidate operator functions of the form
[:zh_CN] 对于每个（可能 cv 限定的）对象类型 [`[^T]]，以及对于每个既没有 [~cv-限定符]
也没有[~引用限定符]的函数类型 [`[^T]]，存在如下形式的候选运算符函数
[codeblock:notation]
[^T]&    operator*([^T]*);
[codeblock:end]

[para]
[:en] For every type [`[^T]] there exist candidate operator functions of the form
[:zh_CN] 对于每个类型 [`[^T]]，存在如下形式的候选运算符函数
[codeblock:notation]
[^T]*    operator+([^T]*);
[codeblock:end]

[para]
[:en] For every cv-unqualified floating-point or promoted integral type [`[^T]],
there exist candidate operator functions of the form
[:zh_CN] 对于每个无 cv 限定的浮点或已提升整型类型 [`[^T]]，存在如下形式的候选运算符函数
[codeblock:notation]
[^T] operator+([^T]);
[^T] operator-([^T]);
[codeblock:end]

[para]
[:en] For every promoted integral type [`[^T]], there exist candidate operator
functions of the form
[:zh_CN] 对于每个已提升整型类型 [`[^T]]，存在如下形式的候选运算符函数
[codeblock:notation]
[^T] operator~([^T]);
[codeblock:end]

[para]
[:en] For every quintuple ([`[^C1]], [`[^C2]], [`[^T]], [=cv cv1], [=cv cv2]),
where [`[^C2]] is a class type, [`[^C1]] is the same type as [`[^C2]] or is a
derived class of [`[^C2]], and [`[^T]] is an object type or a function type,
there exist candidate operator functions of the form
[:zh_CN] 对于每个五元组 ([`[^C1]], [`[^C2]], [`[^T]], [=cv cv1], [=cv cv2])，
其中 [`[^C2]] 为类类型，[`[^C1]] 为与 [`[^C2]] 相同的类类型或 [`[^C2]] 的派生类，
[`[^T]] 为对象类型或函数类型，存在如下形式的候选运算符函数
[codeblock:notation]
[=cv cv12] [^T]& operator->*([=cv cv1] [^C1]*, [=cv cv2] [^T] [^C2]::*);
[codeblock:end]
[:en@~] where [=cv cv12] is the union of [=cv cv1] and [=cv cv2].
[:zh_CN@~] 其中 [=cv cv12] 为 [=cv cv1] 和 [=cv cv2] 的并集。

[:en] The return type is shown for exposition only; see [#expr.mptr.oper] for the
determination of the operator[=']s result type.
[:zh_CN] 所示返回类型仅用于解释目的；关于确定运算符的返回类型，参见 [#expr.mptr.oper]。

[para]
[:en] For every pair of types [`[^L]] and [`[^R]], where each of [`[^L]] and [`[^R]]
is a floating-point or promoted integral type, there exist candidate operator
functions of the form
[:zh_CN] 对于每对类型 [`[^L]] 和 [`[^R]]，其中 [`[^L]] 和 [`[^R]] 中的每个都为
浮点或已提升整型类型，存在如下形式的候选运算符函数
[codeblock:notation]
[^LR]      operator*([^L], [^R]);
[^LR]      operator/([^L], [^R]);
[^LR]      operator+([^L], [^R]);
[^LR]      operator-([^L], [^R]);
bool    operator==([^L], [^R]);
bool    operator!=([^L], [^R]);
bool    operator<([^L], [^R]);
bool    operator>([^L], [^R]);
bool    operator<=([^L], [^R]);
bool    operator>=([^L], [^R]);
[codeblock:end]
[:en@~] where [`[^LR]] is the result of the usual arithmetic conversions
([#expr.arith.conv]) between types [`[^L]] and [`[^R]].
[:zh_CN@~] 其中 [`[^LR]] 为 [`[^L]] 和 [`[^R]] 之间的一般算术转换（[#expr.arith.conv]）的结果。

[para]
[:en] For every integral type [`[^T]] there exists a candidate operator function of the form
[:zh_CN] 对于每个整型类型 [`[^T]]，存在如下形式的候选运算符函数
[codeblock:notation]
std::strong_ordering operator<=>([^T], [^T]);
[codeblock:end]

[para]
[:en] For every pair of floating-point types [`[^L]] and [`[^R]], there exists a
candidate operator function of the form
[:zh_CN] 对于每对浮点类型 [`[^L]] 和 [`[^R]]，存在如下形式的候选运算符函数
[codeblock:notation]
std::partial_ordering operator<=>([^L], [^R]);
[codeblock:end]

[para]
[:en] For every cv-qualified or cv-unqualified object type [`[^T]] there exist
candidate operator functions of the form
[:zh_CN] 对于每个被 cv 限定或未被 cv 限定的对象类型 [`[^T]]，存在如下形式的候选运算符函数
[codeblock:notation]
[^T]*      operator+([^T]*, std::ptrdiff_t);
[^T]&      operator`[`]([^T]*, std::ptrdiff_t);
[^T]*      operator-([^T]*, std::ptrdiff_t);
[^T]*      operator+(std::ptrdiff_t, [^T]*);
[^T]&      operator`[`](std::ptrdiff_t, [^T]*);
[codeblock:end]

[para]
[:en] For every [`[^T]], where [`[^T]] is a pointer to object type, there exist
candidate operator functions of the form
[:zh_CN] 对于每个 [`[^T]]，其中 [`[^T]] 为指向对象类型的指针，存在如下形式的候选运算符函数
[codeblock:notation]
std::ptrdiff_t   operator-([^T], [^T]);
[codeblock:end]

[para]
[:en] For every [`[^T]], where [`[^T]] is an enumeration type or a pointer type,
there exist candidate operator functions of the form
[:zh_CN] 对于每个 [`[^T]]，其中 [`[^T]] 为枚举类型或指针类型，存在如下形式的候选运算符函数
[codeblock:notation]
bool    operator==([^T], [^T]);
bool    operator!=([^T], [^T]);
bool    operator<([^T], [^T]);
bool    operator>([^T], [^T]);
bool    operator<=([^T], [^T]);
bool    operator>=([^T], [^T]);
[^R]       operator<=>([^T], [^T]);
[codeblock:end]
[:en@~] where [`[^R]] is the result type specified in [#expr.spaceship].
[:zh_CN@~] 其中 [`[^R]] 为 [#expr.spaceship] 中指定的结果类型。

[para]
[:en] For every [`[^T]], where [`[^T]] is a pointer-to-member type, [`std::meta::info],
or [`std::nullptr_t], there exist candidate operator functions of the form
[:zh_CN] 对于每个 [`[^T]]，其中 [`[^T]] 为成员指针类型、[`std::meta::info] 或
[`std::nullptr_t]，在如下形式的候选运算符函数
[codeblock:notation]
bool operator==([^T], [^T]);
bool operator!=([^T], [^T]);
[codeblock:end]

[para]
[:en] For every pair of promoted integral types [`[^L]] and [`[^R]], there exist
candidate operator functions of the form
[:zh_CN] 对于每对已提升整型类型 [`[^L]] 和 [`[^R]]，存在如下形式的候选运算符函数
[codeblock:notation]
[^LR]      operator%([^L], [^R]);
[^LR]      operator&([^L], [^R]);
[^LR]      operator^([^L], [^R]);
[^LR]      operator|([^L], [^R]);
[^L]       operator<<([^L], [^R]);
[^L]       operator>>([^L], [^R]);
[codeblock:end]
[:en@~] where [`[^LR]] is the result of the usual arithmetic conversions
([#expr.arith.conv]) between types [`[^L]] and [`[^R]].
[:zh_CN@~] 其中 [`[^LR]] 为 [`[^L]] 和 [`[^R]] 之间的一般算术转换（[#expr.arith.conv]）的结果。

[para]
[:en] For every triple ([`[^L]], [=cv vq], [`[^R]]), where [`[^L]] is an arithmetic
type, and [`[^R]] is a floating-point or promoted integral type, there exist
candidate operator functions of the form
[:zh_CN] 对于每个三元组 ([`[^L]], [=cv vq], [`[^R]])，其中 [`[^L]] 为算术类型，
而 [`[^R]]为浮点或已提升整型类型，存在如下形式的候选运算符函数
[codeblock:notation]
[=cv vq] [^L]&   operator=([=cv vq] [^L]&, [^R]);
[=cv vq] [^L]&   operator*=([=cv vq] [^L]&, [^R]);
[=cv vq] [^L]&   operator/=([=cv vq] [^L]&, [^R]);
[=cv vq] [^L]&   operator+=([=cv vq] [^L]&, [^R]);
[=cv vq] [^L]&   operator-=([=cv vq] [^L]&, [^R]);
[codeblock:end]

[para]
[:en] For every pair ([`[^T]], [=cv vq]), where [`[^T]] is any type, there exist
candidate operator functions of the form
[:zh_CN] 对于每对 ([`[^T]], [=cv vq])，其中 [`[^T]] 为任意类型，存在如下形式的候选运算符函数
[codeblock:notation]
[^T]*[=cv vq]&   operator=([^T]*[=cv vq]&, [^T]*);
[codeblock:end]

[para]
[:en] For every pair ([`[^T]], [=cv vq]), where [`[^T]] is an enumeration or
pointer-to-member type, there exist candidate operator functions of the form
[:zh_CN] 对于每对 ([`[^T]], [=cv vq])，其中 [`[^T]] 为枚举或成员指针类型，
存在如下形式的候选运算符函数
[codeblock:notation]
[=cv vq] [^T]&   operator=([=cv vq] [^T]&, [^T]);
[codeblock:end]

[para]
[:en] For every pair ([`[^T]], [=cv vq]), where [`[^T]] is a cv-qualified or
cv-unqualified object type, there exist candidate operator functions of the form
[:zh_CN] 对于每对 ([`[^T]], [=cv vq])，其中 [`[^T]] 为被 cv 限定或未被 cv 限定的
对象类型，存在如下形式的候选运算符函数
[codeblock:notation]
[^T]*[=cv vq]&   operator+=([^T]*[=cv vq]&, std::ptrdiff_t);
[^T]*[=cv vq]&   operator-=([^T]*[=cv vq]&, std::ptrdiff_t);
[codeblock:end]

[para]
[:en] For every triple ([`[^L]], [=cv vq], [`[^R]]), where [`[^L]] is an integral type,
and [`[^R]] is a promoted integral type, there exist candidate operator
functions of the form
[:zh_CN] 对于每个三元组 ([`[^L]], [=cv vq], [`[^R]])，其中 [`[^L]] 为整型类型，
而 [`[^R]] 为已提升整型类型，存在如下形式的候选运算符函数
[codeblock:notation]
[=cv vq] [^L]&   operator%=([=cv vq] [^L]&, [^R]);
[=cv vq] [^L]&   operator<<=([=cv vq] [^L]&, [^R]);
[=cv vq] [^L]&   operator>>=([=cv vq] [^L]&, [^R]);
[=cv vq] [^L]&   operator&=([=cv vq] [^L]&, [^R]);
[=cv vq] [^L]&   operator^=([=cv vq] [^L]&, [^R]);
[=cv vq] [^L]&   operator|=([=cv vq] [^L]&, [^R]);
[codeblock:end]

[para]
[:en] There also exist candidate operator functions of the form
[:zh_CN] 还存在如下形式的候选运算符函数
[codeblock:notation]
bool    operator!(bool);
bool    operator&&(bool, bool);
bool    operator||(bool, bool);
[codeblock:end]

[para]
[:en] For every pair of types [`[^L]] and [`[^R]], where each of [`[^L]] and [`[^R]]
is a floating-point or promoted integral type, there exist candidate operator
functions of the form
[:zh_CN] 对于每对类型 [`[^L]] 和 [`[^R]]，其中 [`[^L]] 和 [`[^R]] 中的每个都为
浮点或已提升整型类型，存在如下形式的候选运算符函数
[codeblock:notation]
[^LR]      operator?:(bool, [^L], [^R]);
[codeblock:end]
[:en@~] where [`[^LR]] is the result of the usual arithmetic conversions
([#expr.arith.conv]) between types [`[^L]] and [`[^R]].
[:zh_CN@~] 其中 [`[^LR]] 为 [`[^L]] 和 [`[^R]] 之间的一般算术转换（[#expr.arith.conv]）的结果。

[begin:note]
[:en] As with all these descriptions of candidate functions, this declaration serves
only to describe the built-in operator for purposes of overload resolution.
[:zh_CN] 如同所有这些候选函数的说明，此声明式仅用于为进行重载决议而描述内建运算符。

[:en] The operator [=lq][`?:][=rq] cannot be overloaded.
[:zh_CN] 运算符“[`?:]”不能被重载。
[end:note]

[para]
[:en] For every type [`[^T]], where [`[^T]] is a pointer, pointer-to-member, or
scoped enumeration type, there exist candidate operator functions of the form
[:zh_CN] 对于每个类型 [`[^T]]，其中 [`[^T]] 为指针、成员指针或有作用域枚举类型，
存在如下形式的候选运算符函数
[codeblock:notation]
[^T]       operator?:(bool, [^T], [^T]);
[codeblock:end]
