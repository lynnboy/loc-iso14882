[section:chapter#over
    [:en] Overloading
    [:zh_CN] 重载

[%:begin#overloading
    [:en] overloading
    [:zh_CN] 重载
]
]

[/
\gramSec[gram.over]{Overloading}
/]

[para]
[:en]
[%overloaded function[%overloading]]
[%function[!overloaded][%overloading]]
When two or more different declarations are specified for a single name in the
same scope, that name is said to be [+overloaded[%overloading]], and the
declarations are called [+overloaded declarations[%declaration[!overloaded]]].
[:zh_CN]
[%重载函数[%重载]]
[%函数[!重载～][%重载]]
当在同一个作用域中为单个名字指定两个或多个不同的声明式时，称该名字被[+重载]，
而这些声明式被称为[+重载声明式[%声明式[!重载～]]]。

[:en]
Only function and function template declarations can be overloaded; variable and
type declarations cannot be overloaded.
[:zh_CN]
只有函数和函数模板的声明式可以被重载；变量和类型的声明式不能被重载。

[para]
[:en]
When a function name is used in a call, which function declaration is being
referenced and the validity of the call are determined by comparing the types
of the arguments at the point of use with the types of the parameters in the
declarations that are visible at the point of use.
[:zh_CN]
当在某个调用中使用一个函数名时，所涉指的是哪个函数的声明式，以及该调用的有效性，
是通过对使用点的实参类型和在使用点可见的各重载声明式中的形参的类型进行比较来
确定的。

[:en]
This function selection process is called [+overload resolution] and is defined
in [#over.match].
[:zh_CN]
这个函数选择的过程称为[+重载决议]，并在 [#over.match] 中定义。

[enter:example]
[%[:en] overloading[!example of]
  [:zh_CN] 重载[!～的示例] ]
[codeblock]
double abs(double);
int abs(int);

abs(1);             // [:en] calls [`abs(int);]
                    // [|:zh_CN] 调用 [`abs(int);]
abs(1.0);           // [:en] calls [`abs(double);]
                    // [|:zh_CN] 调用 [`abs(double);]
[codeblock:end]
[exit:example]

[include over.load]

[include over.dcl]

[include over.match]

[include over.over]

[include over.oper]

[include over.built]

[%:end#overloading]
