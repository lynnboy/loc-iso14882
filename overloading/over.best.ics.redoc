[section#over.best.ics
    [:en] Implicit conversion sequences
    [:zh_CN] 隐式转换序列
]

[para]
[:en]
An [+implicit conversion sequence[%]] [%sequence[!implicit conversion]]
is a sequence of conversions used to convert an argument in a function call to
the type of the corresponding parameter of the function being called.
[:zh_CN]
[+隐式转换序列[%]][%序列[!隐式转换～]]是将函数调用中的实参转换为被调用的函数的
对应形参的类型的转换序列。

[:en]
The sequence of conversions is an implicit conversion as defined in [#conv],
which means it is governed by the rules for initialization of an object
or reference by a single expression ([#dcl.init], [#dcl.init.ref]).
[:zh_CN]
转换的序列是 [#conv] 中定义的隐式转换，这意味着它要遵循以单个表达式对对象或引用
进行初始化的规则（[#dcl.init]，[#dcl.init.ref]）。

[para]
[:en]
Implicit conversion sequences are concerned only with the type,
cv-qualification, and value category of the argument and how these are converted
to match the corresponding properties of the parameter.
[:zh_CN]
隐式转换序列只涉及实参的类型、cv 限定性和值类别，以及如何转换它们以匹配形参的
对应性质的方式。

[:en]
Other properties, such as the lifetime, storage class, alignment, accessibility
of the argument, whether the argument is a bit-field, and whether a function is
deleted ([#dcl.fct.def.delete]), are ignored.
[:zh_CN]
其他性质，比如实参的生存期，存储类，对齐，可访问性，实参是否是位字段，以及函数
是否被弃置（[#dcl.fct.def.delete]），是被忽略的。

[:en]
So, although an implicit conversion sequence can be defined for a given
argument-parameter pair, the conversion from the argument to the parameter might
still be ill-formed in the final analysis.
[:zh_CN]
因此，即使对给定实参-形参对可以定义一个隐式转换序列，在最终的分析中从该实参到该
形参的转换仍可能是非良构的。

[para]
[:en]
A well-formed implicit conversion sequence is one of the following forms:
[:zh_CN]
良构的隐式转换序列具有如下形式之一：

[list]
[item]
[:en@~] a [+standard conversion sequence[%]] ([#over.ics.scs]),
[:zh_CN@~] [+标准转换序列[%]]（[#over.ics.scs]），
[item]
[:en@~] a [+user-defined conversion sequence[%]] ([#over.ics.user]), or
[:zh_CN@~] [+用户定义的转换序列[%]]（[#over.ics.user]），或者
[item]
[:en@~] an [+ellipsis conversion sequence[%]] ([#over.ics.ellipsis]).
[:zh_CN@~] [+省略号转换序列[%]]（[#over.ics.ellipsis]）。
[list:end]

[para]
[:en]
However, if the target is
[:zh_CN]
然而，若其目标是

[list]
[item]
[:en@~] the first parameter of a constructor or
[:zh_CN@~] 构造函数的第一个形参，或
[item]
[:en@~] the implicit object parameter of a user-defined conversion function
[:zh_CN@~] 用户定义的转换函数的隐含对象形参
[list:end]

[:en@~]
and the constructor or user-defined conversion function is a candidate by
[:zh_CN@~]
且该构造函数或用户定义的转换函数，

[list]
[item]
[:en@~] [#over.match.ctor], when the argument is the temporary in the second
step of a class copy-initialization,
[:zh_CN@~] 当其实参是类的复制初始化的第二阶段中的临时对象时，根据
[#over.match.ctor] 成为候选函数，
[item]
[:en@~] [#over.match.copy], [#over.match.conv], or [#over.match.ref] (in all
cases), or
[:zh_CN@~] 根据 [#over.match.copy]，[#over.match.conv]，或 [#over.match.ref]
（在所有情况下）成为候选函数，或者
[item]
[:en@~] the second phase of [#over.match.list] when the initializer list has
exactly one element that is itself an initializer list, and the target is the
first parameter of a constructor of class [`X], and the conversion is to [`X] or
reference to [$cv] [`X],
[:zh_CN@~] [#over.match.list] 的第二个阶段，当初始化式列表仅有一个元素而其自身
也是初始化式列表，且其目标是类 [`X] 的某个构造函数的第一个形参，并且该转换是转换
为 [`X] 或 [$cv] [`X] 的引用，
[list:end]

[:en@~]
user-defined conversion sequences are not considered.
[:zh_CN@~]
则不考虑用户定义的转换序列。

[enter:note]
[:en]
These rules prevent more than one user-defined conversion from being applied
during overload resolution, thereby avoiding infinite recursion.
[:zh_CN]
这些规则防止了在重载决议中应用多个用户定义转换，以此避免无限递归。
[exit:note]

[enter:example]
[codeblock]
  struct Y { Y(int); };
  struct A { operator int(); };
  Y y1 = A();       // [:en] error: [`A::operator int()] is not a candidate
                    // [|:zh_CN] 错误：[`A::operator int()] 不是候选函数

  struct X { };
  struct B { operator X(); };
  B b;
  X x({b});         // [:en] error: [`B::operator X()] is not a candidate
                    // [|:zh_CN] 错误：[`B::operator X()] 不是候选函数
[codeblock:end]
[exit:example]

[para]
[:en]
For the case where the parameter type is a reference, see [#over.ics.ref].
[:zh_CN]
对于形参类型为引用的情况，参见 [#over.ics.ref]。

[para]
[:en]
When the parameter type is not a reference, the implicit conversion sequence
models a copy-initialization of the parameter from the argument expression.
[:zh_CN]
当形参类型不是引用时，隐式转换序列模仿从实参表达式对该形参的复制初始化。

[:en]
The implicit conversion sequence is the one required to convert the argument
expression to a prvalue of the type of the parameter.
[:zh_CN]
其隐式转换序列是将实参表达式转换为形参类型的纯右值所需的转换序列。

[enter:note]
[:en]
When the parameter has a class type, this is a conceptual conversion defined for
the purposes of [#over]; the actual initialization is defined in terms of
constructors and is not a conversion.
[:zh_CN]
当形参为类类型时，它是 [#over] 所要求的概念上的转换；而其实际初始化是以构造函数
定义的，并且它并不是转换。
[exit:note]

[:en]
Any difference in top-level cv-qualification is subsumed by the initialization
itself and does not constitute a conversion.
[:zh_CN]
顶层 cv-限定性中的任何区别均被该初始化自身所涵盖且并不构成一个转换。

[enter:example]
[:en]
A parameter of type [`A] can be initialized from an argument of type [`const A].
[:zh_CN]
类型 [`A] 的形参可以从类型 [`const A] 的实参初始化。

[:en]
The implicit conversion sequence for that case is the identity sequence; it
contains no ["conversion] from [`const A] to [`A].
[:zh_CN]
此种情况下的隐式转换序列是个恒等序列；它并不包含从 [`const A] 到 [`A] 的“转换”。
[exit:example]

[:en]
When the parameter has a class type and the argument expression has the same
type, the implicit conversion sequence is an identity conversion.
[:zh_CN]
当形参为类类型且实参表达式具有相同的类型时，隐式转换序列是恒等转换。

[:en]
When the parameter has a class type and the argument expression has a derived
class type, the implicit conversion sequence is a derived-to-base
[%conversion[!derived-to-base]] Conversion from the derived class to the base
class.
[:zh_CN]
当形参为类类型且实参表达式具有派生类类型时，隐式转换序列为从这个派生类到这个基类
的[%转换[!派生类到基类～]]派生类到基类转换。

[enter:note]
[:en]
There is no such standard conversion; this derived-to-base Conversion exists
only in the description of implicit conversion sequences.
[:zh_CN]
没有这个标准转换；派生类到基类转换只存在于对隐式转换序列的描述中。
[exit:note]

[:en]
A derived-to-base Conversion has Conversion rank ([#over.ics.scs]).
[:zh_CN]
派生类到基类转换具有转换级等级（[#over.ics.scs]）。

[para]
[:en]
In all contexts, when converting to the implicit object parameter or when
converting to the left operand of an assignment operation only standard
conversion sequences are allowed.
[:zh_CN]
在所有语境中，当转换到隐含对象形参，或当转换到赋值操作的左操作数时，只允许标准
转换序列。

[para]
[:en]
If no conversions are required to match an argument to a parameter type, the
implicit conversion sequence is the standard conversion sequence consisting of
the identity conversion ([#over.ics.scs]).
[:zh_CN]
若无需为实参与形参类型的匹配进行转换，则隐式转换序列为由恒等转换构成的标准转换
序列（[#over.ics.scs]）。

[para]
[:en]
If no sequence of conversions can be found to convert an argument to a parameter
type, an implicit conversion sequence cannot be formed.
[:zh_CN]
若无法找到将实参转换为形参类型的转换的序列，则不能构成隐式转换序列。

[para]
[:en]
If several different sequences of conversions exist that each convert the
argument to the parameter type, the implicit conversion sequence associated with
the parameter is defined to be the unique conversion sequence designated the
[%sequence[!ambiguous conversion]] [+ambiguous conversion sequence[%]].
[:zh_CN]
若存在几个不同的转换的序列都能将实参转换为形参类型，则与该形参相关联的隐式转换
序列被定义为唯一代表[%序列[!有歧义的转换～]][+有歧义的转换序列[%]]的转换序列。

[:en]
For the purpose of ranking implicit conversion sequences as described in
[#over.ics.rank], the ambiguous conversion sequence is treated as a user-defined
conversion sequence that is indistinguishable from any other user-defined
conversion sequence.
[:zh_CN]
为根据 [#over.ics.rank] 所述进行隐式转换序列的分级，有歧义的转换序列被当作一个与
其他任何用户定义的转换序列均无法区分的用户定义的转换序列。

[enter:note]
[:en]
This rule prevents a function from becoming non-viable because of an ambiguous
conversion sequence for one of its parameters.
[:zh_CN]
这条规则防止了由于函数的形参之一的有歧义的转换序列而使它成为非可行函数。

[enter:example]
[codeblock]
class B;
class A { A (B&); };
class B { operator A (); };
class C { C (B&); };
void f(A) { }
void f(C) { }
B b;
f(b);               // [:en] ill-formed: ambiguous because there is a conversion [`b] [$\to] [`C] (via constructor)
                    // [|:zh_CN] 非良构：有歧义的，由于存在（经过构造函数的）转换 [`b] [$\to] [`C]
                    // [:en@~] and an (ambiguous) conversion [`b] [$\to] [`A] (via constructor or conversion function)
                    // [|:zh_CN@~] 和（有歧义的）（经过构造函数或转换函数的）转换 [`b] [$\to] [`A]
void f(B) { }
f(b);               // [:en] OK, unambiguous
                    // [|:zh_CN] OK，无歧义
[codeblock:end]
[exit:example]
[exit:note]

[:en]
If a function that uses the ambiguous conversion sequence is selected
as the best viable function, the call will be ill-formed because the conversion
of one of the arguments in the call is ambiguous.
[:zh_CN]
若使用了有歧义的转换序列的函数被选择为最佳可行函数，则其调用将因为在调用中的实参
之一的转换有歧义而是非良构的。

[para]
[:en]
The three forms of implicit conversion sequences mentioned above are defined in
the following subclauses.
[:zh_CN]
上述隐式转换序列的三种形式在如下子条款中定义。

[include over.ics.scs]

[include over.ics.user]

[include over.ics.ellipsis]

[include over.ics.ref]

[include over.ics.list]
