[section#over.match.class.deduct
    [:en] Class template argument deduction
    [:zh_CN] 类模板实参推断
[%  [:en] deduction[!class template argument]
    [:zh_CN] 推断[!类模板实参～] ]
]

[para]
[:en]
When resolving a placeholder for a deduced class type ([#dcl.type.class.deduct])
where the [~template-name] names a primary class template [`C], a set of
functions and function templates, called the guides of [`C], is formed
comprising:
[:zh_CN]
当为推断的类类型（[#dcl.type.class.deduct]）的占位符进行决议时，其中的[~模板名]
指名某个主类模板 [`C]，则构成一个称为“[`C] 的指导”的函数和函数模板的集合，包含：

[list]
[item]
[:en]
If [`C] is defined, for each constructor of [`C], a function template with the
following properties:
[:zh_CN]
如果 [`C] 有定义，则对于 [`C] 的每个构造函数，有一个具有以下性质的函数模板：

[list]
[item]
[:en]
The template parameters are the template parameters of [`C] followed by the
template parameters (including default template arguments) of the constructor,
if any.
[:zh_CN]
其各个模板形参就是 [`C] 的模板形参，跟着该构造函数的模板实参（包括其默认模板
实参）（如果有）。

[item]
[:en]
The types of the function parameters are those of the constructor.
[:zh_CN]
其各个函数形参的类型与该构造函数相同。

[item]
[:en]
The return type is the class template specialization designated by [`C] and
template arguments corresponding to the template parameters of [`C].
[:zh_CN]
其返回类型即为 [`] 和对应于 [`C] 的各模板形参的模板实参所指定的类模板特例。
[list:end]

[item]
[:en]
If [`C] is not defined or does not declare any constructors, an additional
function template derived as above from a hypothetical constructor [`C()].
[:zh_CN]
如果 [`C] 未定义或并未声明任何构造函数，则从一个虚构的构造函数 [`C()] 以上述方式
产生出一个额外的函数模板。

[item]
[:en]
An additional function template derived as above from a hypothetical constructor
[`C(C)], called the [+copy deduction candidate].
[:zh_CN]
从虚构的构造函数 [`C(C)] 以上述方式产生出一个额外的函数模板，称为[+复制推断候选
函数]。

[item]
[:en]
For each [~deduction-guide], a function or function template with the following
properties:
[:zh_CN]
对于每个[~推断指导]，有一个具有以下性质的函数或函数模板：

[list]
[item]
[:en]
The template parameters, if any, and function parameters are those of the
[~deduction-guide].
[:zh_CN]
其模板形参（如果有）以及函数形参，与该[~推断指导]相同。

[item]
[:en]
The return type is the [~simple-template-id] of the [~deduction-guide].
[:zh_CN]
其返回类型为该[~推断指导]的[~简单模板标识]。
[list:end]
[list:end]

[:en]
In addition, if [`C] is defined and its definition satisfies the conditions for
an aggregate class ([#dcl.init.aggr]) with the assumption that any dependent
base class has no virtual functions and no virtual base classes, and the
initializer is a non-empty [~braced-init-list] or parenthesized
[~expression-list], the set contains an additional function template, called the
[+aggregate deduction candidate[%candidate[!aggregate deduction]]]
[%aggregate deduction candidate[%candidate[!aggregate deduction]]], defined as
follows.
[:zh_CN]
此外，若 [`C] 有定义，且假定任何待决基类都没有虚函数和虚基类，其定义式符合聚合类
的条件（[#dcl.init.aggr]），并且其初始化式是个非空的[~花括号初始列表]或带括号的
[~表达式列表]，则集合中包含一个额外的函数模板，称为[+聚合推断候选函数[%候选函数
[!聚合推断～]]][%聚合推断候选函数[%候选函数[!聚合推断～]]]，定义如下。

[:en]
Let [$x_1, \dotsc, x_n] be the elements of the [~initializer-list] or
[~designated-initializer-list] of the [~braced-init-list], or of the
[~expression-list].
[:zh_CN]
令 [$x_1, \dotsc, x_n] 为[~花括号初始化列表]的[~初始化式列表]或[~定名初始化式
列表]中的各个元素。

[:en]
For each [$x_i], let [$e_i] be the corresponding element of [`C] or of one of
its (possibly recursive) subaggregates that would be initialized by [$x_i]
([#dcl.init.aggr]) if brace elision is not considered for any element
that has a dependent type.
[:zh_CN]
对于每个 [$x_i]，令 [$e_i] 为当对具有待决类型的任何元素不考虑花括号消除时，将由
[$x_i] 所初始化的 [`C] 的对应元素或其（可能递归的）子聚合之一。

[:en]
If there is no such element [$e_i], the program is ill-formed.
[:zh_CN]
若不存在这样的 [$e_i]，则程序非良构。

[:en]
The aggregate deduction candidate is derived as above from a hypothetical
constructor [$[`C]([`T]_1, \dotsc, [`T]_n)], where [$[`T]_i] is the declared
type of the element [$e_i].
[:zh_CN]
聚合推断候选函数，是从一个虚构的构造函数 [$[`C]([`T]_1, \dotsc, [`T]_n)] 如上文
的方式得出的，其中 [$[`T]_i] 是元素 [$e_i] 的声明类型。

[para]
[:en]
When resolving a placeholder for a deduced class type ([#dcl.type.simple]) where
the [~template-name] names an alias template [`A], the [~defining-type-id] of
[`A] must be of the form
[:zh_CN]
当对某个推断类类型（[#dcl.type.simple]）的占位符进行决议时，其中的[~模板名]指名
某个别名模板 [`A]，[`A] 的 [~定义类型标识]必须具有形式

[syntax:explanation]
[`:opt typename] [~:opt nested-name-specifier] [`:opt template] [~simple-template-id]
[syntax:end]

[:en@~] as specified in [#dcl.type.simple].
[:zh_CN@~] 如 [#dcl.type.simple] 所述。

[:en]
The guides of [`A] are the set of functions or function templates formed as
follows.
[:zh_CN]
[`A] 的指导为如下所构成的函数或函数模板的集合。

[:en]
For each function or function template [`f] in the guides of the template named
by the [~simple-template-id] of the [~defining-type-id], the template arguments
of the return type of [`f] are deduced from the [~defining-type-id] of [`A]
according to the process in [#temp.deduct.type] with the exception that
deduction does not fail if not all template arguments are deduced.
[:zh_CN]
对[~定义类型标识]的[~简单模板标识]所指名的模板的指导中的每个函数或函数模板 [`f]，
根据 [#temp.deduct.type] 中的过程从 [`A] 的[~定义类型标识]来推断 [`f] 的返回类型
的各个模板实参，但当并非所有模板实参都推断出来时并不导致推断失败。

[:en]
Let [`g] denote the result of substituting these deductions into [`f].
[:zh_CN]
令 [`g] 代表将这些推断在 [`f] 中替换的结果。

[:en]
If substitution succeeds, form a function or function template [`f'] with the
following properties and add it to the set of guides of [`A]:
[:zh_CN]
若替换成功，则构成一个具有如下性质的函数或函数模板 [`f']，并将之添加到 [`A] 的
指导集合中：

[list]
[item]
[:en]
The function type of [`f'] is the function type of [`g].
[:zh_CN]
[`f'] 的函数类型为 [`g] 的函数类型。

[item]
[:en]
If [`f] is a function template, [`f'] is a function template whose template
parameter list consists of all the template parameters of [`A] (including their
default template arguments) that appear in the above deductions or (recursively)
in their default template arguments, followed by the template parameters of [`f]
that were not deduced (including their default template arguments), otherwise
[`f'] is not a function template.
[:zh_CN]
如果 [`f] 是函数模板，则 [`f'] 是函数模板，其模板形参列表由在上述推断或（递归地）
在其默认模板实参中出现过的 [`A] 的所有模板形参（包括默认模板实参），跟着 [`f] 的
未能推断的各个模板形参（包括默认模板实参）构成，否则 [`f] 不是函数模板。

[item]
[:en]
The associated constraints ([#temp.constr.decl]) are the conjunction of the
associated constraints of [`g] and a constraint that is satisfied if and only if
the arguments of [`A] are deducible (see below) from the return type.
[:zh_CN]
其关联约束（[#temp.constr.decl]）为 [`g] 的关联约束和一个约束“当且仅当 [`A] 的
各实参可从其返回类型推断（见下文）时得以满足”的合取。

[item]
[:en]
If [`f] is a copy deduction candidate ([#over.match.class.deduct]), then [`f']
is considered to be so as well.
[:zh_CN]
如果 [`f] 是复制推断候选函数（[#over.match.class.deduct]），则 [`f'] 也被当做
如此。

[item]
[:en]
If [`f] was generated from a [~deduction-guide] ([#over.match.class.deduct]),
then [`f'] is considered to be so as well.
[:zh_CN]
如果 [`f] 是从一个[~推断指导]（[#over.match.class.deduct]）产生的，则 [`f'] 也被
当做如此。

[item]
[:en]
The [~explicit-specifier] of [`f'] is the [~explicit-specifier] of [`g] (if any).
[:zh_CN]
[`f'] 的 [~explicit-说明符]为 [`g] 的 [~explicit-说明符]（如果有）。
[list:end]

[para]
[:en]
[%template[!deducible arguments of]]
The arguments of a template [`A] are said to be deducible from a type [`T] if,
given a class template
[:zh_CN]
[%模板[!可推断实参]]
对于模板 [`A]，给定类模板

[codeblock:notation]
template <typename> class AA;
[codeblock:end]

[:en@~]
with a single partial specialization whose template parameter list is that of
[`A] and whose template argument list is a specialization of [`A] with the
template argument list of [`A] ([#temp.dep.type]), [`AA<T>] matches the partial
specialization.
[:zh_CN@~]
它具有一个部分特化式，其模板形参列表为 [`A] 的模板形参列表，且其模板实参列表为
带有 [`A] 的模板实参列表的 [`A] 的特例的模板实参列表（[#temp.dep.type]），如果
[`AA<T>] 与该部分特化式匹配，则称 [`A] 的各个实参可从类型 [`T] 推断。

[para]
[:en]
Initialization and overload resolution are performed as described in [#dcl.init]
and [#over.match.ctor], [#over.match.copy], or [#over.match.list]
(as appropriate for the type of initialization performed) for an object of a
hypothetical class type, where the guides of the template named by the
placeholder are considered to be the constructors of that class type for the
purpose of forming an overload set, and the initializer is provided by the
context in which class template argument deduction was performed.
[:zh_CN]
对一个虚构类类型的对象根据 [#dcl.init] 以及 [#over.match.ctor]，
[#over.match.copy]，或者 [#over.match.list] 所述实施初始化以及重载决议（根据其所
实施的初始化的种类），其中该占位符所指名的模板的指导，在构成重载集合时被当做是
这个类类型的构造函数，而其初始化式则由实施类模板实参推断的语境来提供。

[:en]
As an exception, the first phase in [#over.match.list] (considering
initializer-list constructors) is omitted if the initializer list consists of
a single expression of type [$cv] [`U], where [`U] is, or is derived from,
a specialization of the class template directly or indirectly named by the
placeholder.
[:zh_CN]
一种例外是，如果初始化式列表由一个 [$cv] [`U] 类型的表达式所构成，其中 [`U] 是
（或派生于）由该占位符所直接或间接指名的类模板的特例，则省略 [#over.match.list]
的第一个阶段（考察初始化列表构造函数）。

[:en]
If the function or function template was generated from a constructor or
[~deduction-guide] that had an [~explicit-specifier], each such notional
constructor is considered to have that same [~explicit-specifier].
[:zh_CN]
如果函数或函数模板是根据带有 [~explicit-说明符]的构造函数或[~推断指导]所生成的，
则这个想象的构造函数亦被认为具有相同的 [~explicit-说明符]。

[:en]
All such notional constructors are considered to be public members of the
hypothetical class type.
[:zh_CN]
所有这些想象中的构造函数都被当做是这个虚构的类类型的公开成员。

[para]
[begin:example]
[codeblock]
template <class T> struct A {
  explicit A(const T&, ...) noexcept;               // #1
  A(T&&, ...);                                      // #2
};

int i;
A a1 = { i, i };    // [:en] error: explicit constructor #1 selected in copy-list-initialization during deduction,
                    // [|:zh_CN] 错误：推断过程中在复制列表初始化中选择了显式构造函数 #1
                    // [:en@~] cannot deduce from non-forwarding rvalue reference in #2
                    // [|:zh_CN@~] 无法从 #2 中的非转发右值引用进行推断

A a2{i, i};         // [:en] OK, #1 deduces to [`A<int>] and also initializes
                    // [|:zh_CN] OK，#1 推断为 [`A<int>] 并进行初始化
A a3{0, i};         // [:en] OK, #2 deduces to [`A<int>] and also initializes
                    // [|:zh_CN] OK，#2 推断为 [`A<int>] 并进行初始化
A a4 = {0, i};      // [:en] OK, #2 deduces to [`A<int>] and also initializes
                    // [|:zh_CN] OK，#2 推断为 [`A<int>] 并进行初始化

template <class T> A(const T&, const T&) -> A<T&>;  // #3
template <class T> explicit A(T&&, T&&) -> A<T>;    // #4

A a5 = {0, 1};      // [:en] error: explicit deduction guide #4 selected in copy-list-initialization during deduction
                    // [|:zh_CN] 错误：推断过程中在复制列表初始化中选择了显式构造函数 #4
A a6{0,1};          // [:en] OK, #4 deduces to [`A<int>] and #2 initializes
                    // [|:zh_CN] OK，#4 推断为 [`A<int>] 并由 #2 进行初始化
A a7 = {0, i};      // [:en] error: #3 deduces to [`A<int&>], #1 and #2 declare same constructor
                    // [|:zh_CN] 错误：#3 推断为 [`A<int&>]，#1 和 #2 声明了同一个构造函数
A a8{0,i};          // [:en] error: #3 deduces to [`A<int&>], #1 and #2 declare same constructor
                    // [|:zh_CN] 错误：#3 推断为 [`A<int&>]，#1 和 #2 声明了同一个构造函数

template <class T> struct B {
  template <class U> using TA = T;
  template <class U> B(U, TA<U>);
};

B b{(int*)0, (char*)0};         // [:en] OK, deduces [`B<char*>]
                                // [|:zh_CN] OK，推断为 [`B<char*>]

template <typename T>
struct S {
  T x;
  T y;
};

template <typename T>
struct C {
  S<T> s;
  T t;
};

template <typename T>
struct D {
  S<int> s;
  T t;
};

C c1 = {1, 2};                  // [:en] error: deduction failed
                                // [|:zh_CN] 错误：推断失败
C c2 = {1, 2, 3};               // [:en] error: deduction failed
                                // [|:zh_CN] 错误：推断失败
C c3 = {{1u, 2u}, 3};           // [:en] OK, deduces [`C<int>]
                                // [|:zh_CN] OK，推断为 [`C<int>]

D d1 = {1, 2};                  // [:en] error: deduction failed
                                // [|:zh_CN] 错误：推断失败
D d2 = {1, 2, 3};               // [:en] OK, braces elided, deduces [`D<int>]
                                // [|:zh_CN] OK，花括号消除，推断为 [`D<int>]

template <typename T>
struct E {
  T t;
  decltype(t) t2;
};

E e1 = {1, 2};                  // [:en] OK, deduces [`E<int>]
                                // [|:zh_CN] OK，推断为 [`E<int>]
[codeblock:end]
[end:example]

[para]
[begin:example]
[codeblock]
template <class T, class U> struct C {
  C(T, U);                                      // #1
};
template<class T, class U>
  C(T, U) -> C<T, std::type_identity_t<U>>;     // #2

template<class V> using A = C<V *, V *>;
template<std::integral W> using B = A<W>;

int i{};
double d{};
A a1(&i, &i);   // [:en] deduces [`A<int>]
                // [|:zh_CN] 推断为 [`E<int>]
A a2(i, i);     // [:en] error: cannot deduce [`V *] from [`i]
                // [|:zh_CN] 错误：无法从 [`i] 推断 [`V *]
A a3(&i, &d);   // [:en] error: #1: cannot deduce [`(V*, V*)] from [`(int *, double *)]
                // [|:zh_CN] 错误：#1：无法从 [`(int *, double *)] 推断 [`(V*, V*)]
                // [:en] #2: cannot deduce [`A<V>] from [`C<int *, double *>]
                // [|:zh_CN] #2：无法从 [`C<int *, double *>] 推断 [`A<V>]
B b1(&i, &i);   // [:en] deduces [`B<int>]
                // [|:zh_CN] 推断为 [`B<int>]
B b2(&d, &d);   // [:en] error: cannot deduce [`B<W>] from [`C<double *, double *>]
                // [|:zh_CN] 错误：无法从 [`C<double *, double *>] 推断 [`B<W>]
[codeblock:end]

[:en]
Possible exposition-only implementation of the above procedure:
[:zh_CN]
以上过程的可能实现（仅用于阐释）：

[codeblock]
// [:en] The following concept ensures a specialization of [`A] is deduced.
// [|:zh_CN] 以下概念保证推断 [`A] 的一个特例。
template <class> class AA;
template <class V> class AA<A<V>> { };
template <class T> concept deduces_A = requires { sizeof(AA<T>); };

// [:en] [`f1] is formed from the constructor #1 of [`C], generating the following function template
// [|:zh_CN] [`f1] 由 [`C] 的构造函数 #1 构成，产生以下函数模板
template<T, U>
  auto f1(T, U) -> C<T, U>;

// [:en] Deducing arguments for [`C<T, U>] from [`C<V *, V*>] deduces [`T] as [`V *] and [`U] as [`V *];
// [|:zh_CN] 从 [`C<V *, V*>] 推断 [`C<T, U>] 的实参，推断 [`T] 为 [`V *]，[`U] 为 [`V *]；
// [:en@~] [`f1'] is obtained by transforming [`f1] as described by the above procedure.
// [|:zh_CN@~] [`f1'] 为通过上文所述过程对 [`f1] 进行变换而得。
template<class V> requires deduces_A<C<V *, V *>>
  auto f1_prime(V *, V*) -> C<V *, V *>;

// [:en] [`f2] is formed from the deduction-guide #2 of [`C]
// [|:zh_CN] [`f2] 由 [`C] 的推断指导 #2 构成
template<class T, class U> auto f2(T, U) -> C<T, std::type_identity_t<U>>;

// [:en] Deducing arguments for [`C<T, std::type_identity_t<U>>] from [`C<V *, V*>] deduces [`T] as [`V *];
// [|:zh_CN] 从 [`C<V *, V*>] 推断 [`C<T, std::type_identity_t<U>>] 的实参，推断 [`T] 为 [`V *]；
// [:en@~] [`f2'] is obtained by transforming [`f2] as described by the above procedure.
// [|:zh_CN@~] [`f2'] 为通过上文所述过程对 [`f2] 进行变换而得。
template<class V, class U>
  requires deduces_A<C<V *, std::type_identity_t<U>>>
  auto f2_prime(V *, U) -> C<V *, std::type_identity_t<U>>;

// [:en] The following concept ensures a specialization of [`B] is deduced.
// [|:zh_CN] 以下概念保证推断 [`B] 的一个特例。
template <class> class BB;
template <class V> class BB<B<V>> { };
template <class T> concept deduces_B = requires { sizeof(BB<T>); };

// [:en] The guides for [`B] derived from the above [`f1'] and [`f2'] for [`A] are as follows:
// [|:zh_CN] [`B] 的指导从上述对于 [`A] 的 [`f1'] 和 [`f2'] 以如下方式得出：
template<std::integral W>
  requires deduces_A<C<W *, W *>> && deduces_B<C<W *, W *>>
  auto f1_prime_for_B(W *, W *) -> C<W *, W *>;

template<std::integral W, class U>
  requires deduces_A<C<W *, std::type_identity_t<U>>> &&
    deduces_B<C<W *, std::type_identity_t<U>>>
  auto f2_prime_for_B(W *, U) -> C<W *, std::type_identity_t<U>>;
[codeblock:end]
[end:example]
