[section#over.match.viable
    [:en] Viable functions
    [:zh_CN] 可行函数

[%:begin#overloading.resolution.viable.functions
    [:en] overloading[!resolution[!viable functions]]
    [:zh_CN] 重载[!～决议[!可行函数]]
]
]

[para]
[:en] From the set of candidate functions constructed for a given context
([#over.match.funcs]), a set of viable functions is chosen, from which the best
function will be selected by comparing argument conversion sequences and
associated constraints ([#temp.constr.decl]) for the best fit ([#over.match.best]).
[:zh_CN] 从为给定语境构造的候选函数集合（[#over.match.funcs]）中，选择可行函数的集合，
并通过比较出最合适的实参转换序列和其关联的各项约束（[#temp.constr.decl]），
在其中选择出最佳的函数（[#over.match.best]）。

[:en] The selection of viable functions considers associated constraints, if any,
and relationships between arguments and function parameters other than the ranking
of conversion sequences.
[:zh_CN] 选择可行函数时将考察其关联约束（如果有）以及实参和函数形参之间的关系，
而不是转换序列的等级。

[para]
[:en] [%ellipsis[!overload resolution and]] [%default argument[!overload resolution and]]
First, to be a viable function, a candidate function shall have enough
parameters to agree in number with the arguments in the list.
[:zh_CN] [%省略号[!重载决议与～]] [%默认实参[!重载决议与～]]
首先，作为可行函数，候选函数应当带有足够数量的形参来与列表中的实参相配。

[list]
[item]
[:en] If there are [$m] arguments in the list, all candidate functions having
exactly [$m] parameters are viable.
[:zh_CN] 若列表中有 [$m] 个实参，则所有恰好带有 [$m] 个形参的候选函数是可行的。

[item]
[:en] A candidate function having fewer than [$m] parameters is viable only if
it has an ellipsis in its parameter list ([#dcl.fct]).
[:zh_CN] 带有少于 [$m] 个形参的候选函数只有当其形参列表中带有省略号（[#dcl.fct]）时才是可行的。

[:en] For the purposes of overload resolution, any argument for which there is no
corresponding parameter is considered to [=lq]match the ellipsis[=rq] ([#over.ics.ellipsis]).
[:zh_CN] 进行重载决议时，任何没有对应形参的实参被当作“与省略号匹配”（[#over.ics.ellipsis]）。

[item]
[:en] A candidate function [$C] having more than [$m] parameters is viable only if
the set of scopes [$G], as defined below, is not empty.
[:zh_CN] 带有多于 [$m] 个形参的候选函数 [$C]，只有当（如下定义的）作用域集合 [$G]
非空时才是可行的。

[:en] [$G] consists of every scope [$X] that satisfies all of the following:
[:zh_CN] [$G] 由满足下列全部条件的所有作用域 [$X] 组成：
 [list]
 [item]
[:en] There is a declaration of [`C], whose host scope is [$X],
considered by the overload resolution.
[:zh_CN] 从重载决议角度考虑，存在 [`C] 的一条声明式，其主作用域为 [$X]。
 [item]
[:en] For every [$k^\textrm{th}] parameter [$P] where [$k] > [$m],
there is a reachable declaration, whose host scope is [$X],
that specifies a default argument ([#dcl.fct.default]) for [$P].
[:zh_CN] 对于每个满足 [$k] > [$m] 的第 [$k] 个形参 [$P]，存在一个可达声明式，
其主作用域为 [$X]，且为 [$P] 指定了默认实参（[#dcl.fct.default]）。
 [list:end]

[:en] If [`C] is selected as the best viable function ([#over.match.best]):
[:zh_CN] 如果 [`C] 被选中为最佳可行函数（[#over.match.best]）：
 [list]
 [item]
[:en] [$G] shall contain exactly one scope (call it [$S]).
[:zh_CN] [$G] 应当恰好包含一个作用域（称其为 [$S]）。
 [item]
[:en] If the candidates are denoted by a [~splice-expression],
then [$S] shall not be a block scope.
[:zh_CN] 如果各候选是由[~拼接表达式]所表示的，则 [$S] 应当不是块作用域。
 [item]
[:en] The default arguments used in the call to [`C] are the default arguments
specified by the reachable declarations whose host scope is [$S].
[:zh_CN] 在对 [`C] 的调用中所使用的各默认实参，均为以 [$S] 为主作用域的可达
声明式所指定的默认实参。
 [list:end]

[:en] For the purposes of overload resolution, the parameter list is truncated on
the right, so that there are exactly [$m] parameters.
[:zh_CN] 进行重载决议时，其形参列表的右边被截断，使得其恰有 [$m] 个形参。
[list:end]

[begin:example]
[codeblock]
namespace A {
  extern "C" void f(int, int = 5);
  extern "C" void f(int = 6, int);
}
namespace B {
  extern "C" void f(int, int = 7);
}

void use() {
  [:^^A::f:](3, 4);     // [:en] OK, default argument was not used for viability \
                        [:zh_CN] OK，并未使用默认实参而影响可行性
  [:^^A::f:](3);        // [:en] error: default argument provided by declarations from two scopes \
                        [:zh_CN] 错误：两个作用域中的声明式都提供了默认实参
  [:^^A::f:]();         // [:en] OK, default arguments provided by declarations in the scope of [`A] \
                        [:zh_CN] OK，由 [`A] 的作用域中的声明式提供默认实参

  using A::f;
  using B::f;
  f(3, 4);              // [:en] OK, default argument was not used for viability \
                        [:zh_CN] OK，并未使用默认实参而影响可行性
  f(3);                 // [:en] error: default argument provided by declarations from two scopes \
                        [:zh_CN] 错误：两个作用域中的声明式都提供了默认实参
  f();                  // [:en] OK, default arguments provided by declarations in the scope of [`A] \
                        [:zh_CN] OK，由 [`A] 的作用域中的声明式提供默认实参

  void g(int = 8);
  g();                  // OK
  [:^^g:]();            // [:en] error: host scope is block scope [:zh_CN] 错误：主作用域是块作用域
}

void h(int = 7);
constexpr std::meta::info r = ^^h;
void poison() {
  void h(int = 8);
  h();                  // [:en] OK, calls [`h(8)] [:zh_CN] OK，调用 [`h(8)]
  [:^^h:]();            // [:en] error: default argument provided by declarations from two scopes \
                        [:zh_CN] 错误：两个作用域中的声明式都提供了默认实参
}
void call_h() {
  [:^^h:]();            // [:en] error: default argument provided by declarations from two scopes \
                        [:zh_CN] 错误：两个作用域中的声明式都提供了默认实参
  [:r:]();              // [:en] error: default argument provided by declarations from two scopes \
                        [:zh_CN] 错误：两个作用域中的声明式都提供了默认实参
}

template<typename... Ts>
int k(int = 3, Ts...);
int i = k<int>();       // [:en] error: no default argument for the second parameter \
                        [:zh_CN] 错误：第二个形参没有默认实参
int j = k<>();          // OK
[codeblock:end]
[end:example]

[para]
[:en] Second, for a function to be viable, if it has associated constraints
([#temp.constr.decl]), those constraints shall be satisfied ([#temp.constr.constr]).
[:zh_CN] 第二，对于可行函数，如果其带有关联约束（[#temp.constr.decl]），则这些
约束应当被满足（[#temp.constr.constr]）。

[para]
[:en] Third, for [`F] to be a viable function, there shall exist for each argument an
implicit conversion sequence ([#over.best.ics]) that converts that argument to
the corresponding parameter of [`F].
[:zh_CN] 第三，若 [`F] 为可行函数，对其每个实参应当存在一个将该实参转换为 [`F] 的
对应形参的隐式转换序列（[#over.best.ics]）。

[:en] If the parameter has reference type, the implicit conversion sequence includes
the operation of binding the reference, and the fact that an lvalue reference to
non-[`:key const] cannot bind to an rvalue and that an rvalue reference cannot
bind to an lvalue can affect the viability of the function (see [#over.ics.ref]).
[:zh_CN] 若形参为引用类型，则其隐式转换序列还包括对该引用的绑定操作，并且指代非
[`:key const] 对象的左值引用不能绑定到右值，以及右值引用不能绑定到左值的事实也会
影响函数的可行性（参见 [#over.ics.ref]）。
