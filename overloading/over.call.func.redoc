[section#over.call.func
    [:en] Call to named function
    [:zh_CN] 调用具名函数
]

[para]
[:en]
Of interest in [#over.call.func] are only those function calls in which the
[~postfix-expression] ultimately contains an [~id-expression] that denotes one
or more functions.
[:zh_CN]
[#over.call.func] 只关心其[~后缀表达式]最终包含代表了一个或多个函数的
[~标识表达式]的函数调用。

[:en]
Such a [~postfix-expression], perhaps nested arbitrarily deep in parentheses,
has one of the following forms:
[:zh_CN]
此种[~后缀表达式]，可能被嵌套在任意深度的括号中，并具有如下形式之一：

[syntax:explanation]
[rule [~postfix-expression] ]
    [| [~postfix-expression] [`.] [~id-expression] ]
    [| [~postfix-expression] [`->] [~id-expression] ]
    [| [~primary-expression] ]
[rule:end]
[syntax:end]

[:en]
These represent two syntactic subcategories of function calls: qualified
function calls and unqualified function calls.
[:zh_CN]
此处表示了函数调用的两个语法子范畴：限定的函数调用和无限定的函数调用。

[para]
[:en]
In qualified function calls, the function is named by an [~id-expression]
preceded by an [`->] or [`.] operator.
[:zh_CN]
在限定的函数调用中，函数是由前面带有 [`->] 或 [`.] 运算符的[~标识表达式]所指名的。

[:en]
Since the construct [`A->B] is generally equivalent to [`(*A).B], the rest of
[#over] assumes, without loss of generality, that all member function calls have
been normalized to the form that uses an object and the [`.] operator.
[:zh_CN]
由于语言构造 [`A->B] 通常等价于 [`(*A).B]，在 [#over] 的余下部分中，（不失一般性
地）假设，所有成员函数调用均被规范化为使用某个对象与 [`.] 运算符的形式。

[:en]
Furthermore, [#over] assumes that the [~postfix-expression] that is the left
operand of the [`.] operator has type [=lq][=cv] [`T][=rq] where [`T] denotes a
class.[#:fn]
[:zh_CN]
而且，[#over] 还假设作为 [`.] 运算符的左操作数的[~后缀表达式]的类型为
“[=cv] [`T]”，其中 [`T] 代表某个类。[#:fn]

[note:foot]
[:en]
Note that cv-qualifiers on the type of objects are significant in overload
resolution for both glvalue and class prvalue objects.
[:zh_CN]
注意，对象的类型中的 cv 限定符在对泛左值和类的纯右值对象进行重载决议时都是有意义
的。
[note:end]

[:en]
The function declarations found by name lookup ([#class.member.lookup])
constitute the set of candidate functions.
[:zh_CN]
由名字查找（[#class.member.lookup]）所找到的函数声明式构成了候选函数的集合。

[:en]
The argument list is the [~expression-list] in the call augmented by the
addition of the left operand of the [`.] operator in the normalized member
function call as the implied object argument ([#over.match.funcs]).
[:zh_CN]
其实参列表是这个调用中的[~表达式列表]扩张后的结果，其中，规范化后的成员函数调用
中的 [`.] 运算符的左操作数，作为隐含对象实参（[#over.match.funcs]）而添加进来。

[para]
[:en]
In unqualified function calls, the function is named by a [~primary-expression].
[:zh_CN]
在无限定的函数调用中，函数由[~初等表达式]指名。

[:en]
The function declarations found by name lookup ([#basic.lookup]) constitute the
set of candidate functions.
[:zh_CN]
由名字查找（[#basic.lookup]）所找到的函数声明式构成了候选函数的集合。

[:en]
Because of the rules for name lookup, the set of candidate functions consists
(1) entirely of non-member functions or (2) entirely of member functions of some
class [`T].
[:zh_CN]
根据名字查找的规则，候选函数的集合（1）完全由非成员函数构成，或者（2）完全由某个
类 [`T] 的成员函数构成。

[:en]
In case (1), the argument list is the same as the [~expression-list] in the call.
[:zh_CN]
在情况（1）中，实参列表与该调用中的[~表达式列表]相同。

[:en]
In case (2), the argument list is the [~expression-list] in the call augmented
by the addition of an implied object argument as in a qualified function call.
[:zh_CN]
在情况（2）中，实参列表是该调用中的[~表达式列表]，并添加了如同在有限定的函数调用
中那样的隐含对象实参。

[:en]
If the current class is, or is derived from, [`T], and the keyword [`:key this]
([#expr.prim.this]) refers to it, then the implied object argument is [`(*this)].
[:zh_CN]
若当前类是或派生于 [`T]，且关键字 [`:key this]（[#expr.prim.this]）指代它，则
隐含对象实参为 [`(*this)]。

[:en]
Otherwise, a contrived object of type [`T] becomes the implied object argument;
[#:fn] if overload resolution selects a non-static member function, the call is
ill-formed.
[:zh_CN]
否则，类型 [`T] 的某个虚构的对象成为隐含对象实参；[#:fn] 若重载决议选择了非静态
成员函数，则该调用非良构。

[note:foot#fn:$2]
[:en]
An implied object argument is contrived to correspond to the implicit object
parameter attributed to member functions during overload resolution.
[:zh_CN]
在重载决议过程中，隐含对象实参与为成员函数所设的隐含对象形参相对应。

[:en]
It is not used in the call to the selected function.
[:zh_CN]
调用被选择的函数时并不使用它。

[:en]
Since the member functions all have the same implicit object parameter, the
contrived object will not be the cause to select or reject a function.
[:zh_CN]
由于所有成员函数都带有相同的隐含对象形参，故这个假对象不会成为选择或拒绝某函数的
原因。
[note:end]
