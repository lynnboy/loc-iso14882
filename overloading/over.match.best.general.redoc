[section#over.match.best.general
    [:en] General
    [:zh_CN] 概述
]

[para]
[:en]
[%conversion[!overload resolution and]]
Define ICS[$i]([`F]) as follows:
[:zh_CN]
[%转换[!重载决议与～]]
ICS[$i]([`F]) 定义如下；

[list]
[item]
[:en]
If [`F] is a static member function, ICS[$1]([`F]) is defined such that
ICS[$1]([`F]) is neither better nor worse than ICS[$1]([`G]) for any function
[`G], and, symmetrically, ICS[$1]([`G]) is neither better nor worse than
ICS[$1]([`F])[#:note#fn:$1]; otherwise,
[:zh_CN]
若 [`F] 是静态成员函数，则 ICS[$1]([`F]) 被定义为，对于任意函数 [`G]，
ICS[$1]([`F]) 比 ICS[$1]([`G]) 既不更好也不更差，并且，对称地，ICS[$1]([`G]) 比
ICS[$1]([`F]) 既不更好也不更差[#:note#fn:$1]；否则，

[note:foot#fn:$1]
[:en]
If a function is a static member function, this definition means that the first
argument, the implied object argument, has no effect in the determination of
whether the function is better or worse than any other function.
[:zh_CN]
若某个函数是静态成员函数，则此定义表明其第一个实参（即隐含对象实参）对确定该函数
比任意其他函数更好还是更差没有影响。
[note:end]

[item]
[:en]
let ICS[$i]([`F]) denote the implicit conversion sequence that converts the
[$i]-th argument in the list to the type of the [$i]-th parameter of viable
function [`F].
[:zh_CN]
设 ICS[$i]([`F]) 代表将列表中的第 [$i] 个实参转换为可行函数 [`F] 的第 [$i] 个
形参的类型的隐式转换序列。

[:en]
[#over.best.ics] defines the implicit conversion sequences and [#over.ics.rank]
defines what it means for one implicit conversion sequence to be a better
conversion sequence or worse conversion sequence than another.
[:zh_CN]
[#over.best.ics] 定义了隐式转换序列，而 [#over.ics.rank] 定义了当一个隐式转换
序列是比另一个更好或更差的转换序列时意味着什么。
[list:end]

[para]
[:en]
Given these definitions, a viable function [`F1] is defined to be a [+better
[%overloading[!resolution[!better viable function]]]] function than another
viable function [`F2] if for all arguments [$i], ICS[$i]([`F1]) is not a worse
conversion sequence than ICS[$i]([`F2]), and then
[:zh_CN]
给定这些定义，若对于所有实参 [$i]，ICS[$i]([`F1]) 是不比 ICS[$i]([`F2]) 更差的
转换序列，并且满足如下条件，则可行函数 [`F1] 被定义为是比另一个可行函数 [`F2]
[+更好[%重载[!～决议[!更好的可行函数]]]]的函数。

[list]
[item]
[:en]
for some argument [$j], ICS[$j]([`F1]) is a better conversion sequence than
ICS[$j]([`F2]), or, if not that,
[:zh_CN]
对于某个实参 [$j]，ICS[$j]([`F1]) 是比 ICS[$j]([`F2]) 更好的转换序列，或者，若非
如此，

[item]
[:en]
the context is an initialization by user-defined conversion (see [#dcl.init],
[#over.match.conv], and [#over.match.ref]) and the standard conversion sequence
from the return type of [`F1] to the destination type (i.e., the type of the
entity being initialized) is a better conversion sequence than the standard
conversion sequence from the return type of [`F2] to the destination type
[:zh_CN]
其语境是通过用户定义的转换进行的初始化（参见 [#dcl.init]，[#over.match.conv] 和
[#over.match.ref]），且从 [`F1] 的返回类型到其目标类型（也就是被初始化的实体的
类型）的标准转换序列，是比从 [`F2] 的返回类型到目标类型的标准转换序列更好的转换
序列。

[begin:example]
[codeblock]
struct A {
  A();
  operator int();
  operator double();
} a;
int i = a;          // [:en] [`a.[`:key operator] int()] followed by no conversion is better than \
                       [:zh_CN] [`a.[`:key operator] int()] 之后没有转换比 [`a.[`:key operator] double()]
                    // [:en@~] [`a.[`:key operator] double()] followed by a conversion to [`int] \
                       [:zh_CN@~] 之后跟着向 [`int] 的转换更好
float x = a;        // [:en] ambiguous: both possibilities require conversions, \
                       [:zh_CN] 歧义：两种可能性都需要转换，
                    // [:en@~] and neither is better than the other \
                       [:zh_CN@~] 而其中没有比另一个更好的
[codeblock:end]
[end:example]

[:en@~]
or, if not that,
[:zh_CN@~]
或者，若非如此，

[item]
[:en]
the context is an initialization by conversion function for direct reference
binding ([#over.match.ref]) of a reference to function type, the return type of
[`F1] is the same kind of reference (lvalue or rvalue) as the reference
being initialized, and the return type of [`F2] is not
[:zh_CN]
其语境是为函数类型的引用进行直接引用绑定时通过转换函数所进行的初始化
（[#over.match.ref]），且 [`F1] 的返回类型是与被初始化的引用相同种类（左值或
右值）的引用，而 [`F2] 的返回类型并非如此

[begin:example]
[codeblock]
template <class T> struct A {
  operator T&();    // #1
  operator T&&();   // #2
};
typedef int Fn();
A<Fn> a;
Fn& lf = a;         // [:en] calls #1 \
                       [:zh_CN] 调用 #1
Fn&& rf = a;        // [:en] calls #2 \
                       [:zh_CN] 调用 #2
[codeblock:end]
[end:example]
[:en@~]
or, if not that,
[:zh_CN@~]
或者，若非如此，

[item]
[:en]
[`F1] is not a function template specialization and [`F2] is a function template
specialization, or, if not that,
[:zh_CN]
[`F1] 不是函数模板特例而 [`F2] 是函数模板特例，或者，若非如此，

[item]
[:en]
[`F1] and [`F2] are function template specializations, and the function template
for [`F1] is more specialized than the template for [`F2] according to the
partial ordering rules described in [#temp.func.order], or, if not that,
[:zh_CN]
[`F1] 和 [`F2] 都是函数模板特例，且按照 [#temp.func.order] 中描述的偏序规则，
[`F1] 的函数模板比 [`F2] 的模板更加特殊，或者，若非如此，

[item]
[:en]
[`F1] and [`F2] are non-template functions with the same parameter-type-lists,
and [`F1] is more constrained than [`F2] according to the partial ordering of
constraints described in [#temp.constr.order], or if not that,
[:zh_CN]
[`F1] 和 [`F2] 是具有相同形参类型列表的非模板函数，且根据 [#temp.constr.order]
中所述的约束部分排序， [`F1] 比 [`F2] 更加受约束，或者，若非如此，

[item]
[:en]
[`F1] is a constructor for a class [`D], [`F2] is a constructor for a base class
[`B] of [`D], and for all arguments the corresponding parameters of [`F1] and
[`F2] have the same type
[:zh_CN]
[`F1] 是类 [`D] 的构造函数，[`F2] 是 [`D] 的基类 [`B] 的构造函数，并且每个实参在
[`F1] 和 [`F2] 中对应的形参都具有相同类型。

[begin:example]
[codeblock]
struct A {
  A(int = 0);
};

struct B: A {
  using A::A;
  B();
};

int main() {
  B b;              // [:en] OK, [`B::B()] \
                       [:zh_CN] oK，[`B::B()]
}
[codeblock:end]
[end:example]

[:en@~] or, if not that,
[:zh_CN@~] 或者，若非如此，

[item]
[:en]
[`F2] is a rewritten candidate ([#over.match.oper]) and [`F1] is not
[:zh_CN]
[`F2] 是重写候选（[#over.match.oper]）但 [`F1] 不是

[begin:example]
[codeblock]
struct S {
  friend auto operator<=>(const S&, const S&) = default;        // #1
  friend bool operator<(const S&, const S&);                    // #2
};
bool b = S() < S();                                             // [:en] calls #2 \
                                                                   [:zh_CN] 调用 #2
[codeblock:end]
[end:example]

[:en@~] or, if not that,
[:zh_CN@~] 或者，若非如此，

[item]
[:en]
[`F1] and [`F2] are rewritten candidates, and [`F2] is a synthesized candidate
with reversed order of parameters and [`F1] is not
[:zh_CN]
[`F1] 和 [`F2] 都是重写候选，且 [`F2] 为具有相反形参顺序的合成候选而 [`F1] 不是

[begin:example]
[codeblock]
struct S {
  friend std::weak_ordering operator<=>(const S&, int);         // #1
  friend std::weak_ordering operator<=>(int, const S&);         // #2
};
bool b = 1 < S();                                               // [:en] calls #2 \
                                                                   [:zh_CN] 调用 #2
[codeblock:end]
[end:example]

[:en@~] or, if not that,
[:zh_CN@~] 或者，若非如此，

[item]
[:en]
[`F1] is generated from a [~deduction-guide] ([#over.match.class.deduct]) and
[`F2] is not, or, if not that,
[:zh_CN]
[`F1] 是从[~推断导引]生成的（[#over.match.class.deduct]）而 [`F2] 并不是，或者，
若非如此，

[item]
[:en]
[`F1] is the copy deduction candidate ([#over.match.class.deduct]) and [`F2] is
not, or, if not that,
[:zh_CN]
[`F1] 是复制推断候选（[#over.match.class.deduct]）而 [`F2] 并不是，或者，
若非如此，

[item]
[:en]
[`F1] is generated from a non-template constructor and [`F2] is generated from a
constructor template.
[:zh_CN]
[`F1] 是从某个非模板构造函数生成的，而 [`F2] 则是从某个构造函数模板生成的。

[begin:example]
[codeblock]
template <class T> struct A {
  using value_type = T;
  A(value_type);    // #1
  A(const A&);      // #2
  A(T, T, int);     // #3
  template<class U>
    A(int, T, U);   // #4
  // [:en] #5 is the copy deduction candidate, [`A(A)] \
     [:zh_CN] #5 为复制推断候选，[`A(A)]
};

A x(1, 2, 3);       // [:en] uses #3, generated from a non-template constructor \
                       [:zh_CN] 使用 #3，从非模板构造函数生成

template <class T>
A(T) -> A<T>;       // [:en] #6, less specialized than #5 \
                       [:zh_CN] #6，不如 #5 特殊

A a(42);            // [:en] uses #6 to deduce [`A<int>] and #1 to initialize \
                       [:zh_CN] 使用 #6 推断出 [`A<int>] 并以 #1 进行初始化
A b = a;            // [:en] uses #5 to deduce [`A<int>] and #2 to initialize \
                       [:zh_CN] 使用 #5 推断出 [`A<int>] 并以 #2 进行初始化

template <class T>
A(A<T>) -> A<A<T>>; // [:en] #7, as specialized as #5 \
                       [:zh_CN] #7，和 #5 一样特殊

A b2 = a;           // [:en] uses #7 to deduce [`A<A<int>>] and #1 to initialize \
                       [:zh_CN] 使用 #7 推断出 [`A<A<int>>] 并以 #1 进行初始化
[codeblock:end]
[end:example]
[list:end]

[para]
[:en]
If there is exactly one viable function that is a better function than all other
viable functions, then it is the one selected by overload resolution; otherwise
the call is ill-formed.[#:note#fn:$2]
[:zh_CN]
若恰好有一个比其他所有可行函数更好的可行函数，则它就是被重载决议所选择的函数，
否则该调用就是非良构的。[#:note#fn:$2]

[note:foot#fn:$2]
[:en]
The algorithm for selecting the best viable function is linear in the number
of viable functions.
[:zh_CN]
选择最佳可行函数的算法对可行函数的数量是线性的。

[:en]
Run a simple tournament to find a function [`W] that is not worse than any
opponent it faced.
[:zh_CN]
进行一个简单的竞赛已找到某个函数 [`W] 使其不比其所面对的任意对手更差。

[:en]
Although another function [`F] that [`W] did not face might be at least as good
as [`W], [`F] cannot be the best function because at some point in the
tournament [`F] encountered another function [`G] such that [`F] was not better
than [`G].
[:zh_CN]
虽然 [`W] 并未面对的另一个函数 [`F] 可能至少和 [`W] 一样好，但因为在竞赛的某些点
[`F] 所遭遇到的另一个函数 [`G] 使得 [`F] 不比 [`G] 更好，所以 [`F] 不能为最佳
函数。

[:en]
Hence, either [`W] is the best function or there is no best function.
[:zh_CN]
这样，要么 [`W] 是最佳函数要么不存在最佳函数。

[:en]
So, make a second pass over the viable functions to verify that [`W] is better
than all other functions.
[:zh_CN]
故此，要对可行函数进行第二次遍历以验证 [`W] 比所有其他函数都更好。
[note:end]

[begin:example]
[codeblock]
void Fcn(const int*,  short);
void Fcn(int*, int);

int i;
short s = 0;

void f() {
  Fcn(&i, s);       // [:en] is ambiguous because [`&i] [$\to] [`int*] is better than [`&i] [$\to] [`const int*] \
                       [:zh_CN] 有歧义，因为 [`&i] [$\to] [`int*] 比 [`&i] [$\to] [`const int*] 更好
                    // [:en@~] but [`s] [$\to] [`short] is also better than [`s] [$\to] [`int] \
                       [:zh_CN@~] 但 [`s] [$\to] [`short] 也比 [`s] [$\to] [`int] 更好

  Fcn(&i, 1L);      // [:en] calls [`Fcn(int*, int)], because [`&i] [$\to] [`int*] is better than [`&i] [$\to] [`const int*] \
                       [:zh_CN] 调用了 [`Fcn(int*, int)]，因为 [`&i] [$\to] [`int*] 比 [`&i] [$\to] [`const int*] 更好
                    // [:en@~] and [`1L] [$\to] [`short] and [`1L] [$\to] [`int] are indistinguishable \
                       [:zh_CN@~] 而 [`1L] [$\to] [`short] 和 [`1L] [$\to] [`int] 无法区分

  Fcn(&i, 'c');     // [:en] calls [`Fcn(int*, int)], because [`&i] [$\to] [`int*] is better than [`&i] [$\to] [`const int*] \
                       [:zh_CN] 调用了 [`Fcn(int*, int)]，因为 [`&i] [$\to] [`int*] 比 [`&i] [$\to] [`const int*] 更好
                    // [:en@~] and [`c] [$\to] [`int] is better than [`c] [$\to] [`short] \
                       [:zh_CN@~] 而 [`c] [$\to] [`int] 比 [`c] [$\to] [`short] 更好
}
[codeblock:end]
[end:example]

[para]
[:en]
If the best viable function resolves to a function for which multiple
declarations were found, and if at least two of these declarations [=--] or the
declarations they refer to in the case of [~using-declaration]s [=--] specify a
default argument that made the function viable, the program is ill-formed.
[:zh_CN]
若最佳可行函数被决议为某个找到了多个声明式的函数，且若其声明式（或者在
[~using-声明式]的情况中它们所涉指的声明式）中至少有两个指定了使该函数可行的默认
实参，则程序非良构。

[begin:example]
[codeblock]
namespace A {
  extern "C" void f(int = 5);
}
namespace B {
  extern "C" void f(int = 5);
}

using A::f;
using B::f;

void use() {
  f(3);             // [:en] OK, default argument was not used for viability \
                       [:zh_CN] OK，默认实参并未参与可行性
  f();              // [:en] error: found default argument twice \
                       [:zh_CN] 错误：两次找到了默认实参
}
[codeblock:end]
[end:example]
