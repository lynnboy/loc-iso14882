[section#over.ass
    [:en] Assignment
    [:zh_CN] 赋值

[:en]
[%assignment operator[!overloaded]]
[%overloading[!assignment operator]]
[:zh_CN]
[%赋值运算符[!重载～]]
[%重载[!～赋值运算符]]
]

[para]
[:en]
A [+:adj simple assignment[!operator function]] is a binary operator function
named [`[`:key operator]=].
[:zh_CN]
[+:adj 简单赋值[!运算符函数]]是名为 [`[`:key operator]=] 的二元运算符函数。

[:en]
A simple assignment operator function shall be a non-static member function.
[:zh_CN]
简单赋值运算符函数应当是非静态成员函数。

[begin:note]
[:en]
Because only standard conversion sequences are considered when converting to the
left operand of an assignment operation ([#over.best.ics]), an expression
[`[$x] = [$y]] with a subexpression [$x] of class type is always interpreted as
[`[$x].[`:key operator]=([$y])].
[:zh_CN]
因为在向赋值操作的左操作数转换时仅考虑标准转换序列（[#over.best.ics]），带有
类类型的子表达式 [$x] 的表达式 [`[$x] = [$y]] 总是被解释为
[`[$x].[`:key operator]=([$y])]。
[end:note]

[para]
[begin:note]
[:en]
Since a copy assignment operator is implicitly declared for a class if not
declared by the user ([#class.copy.assign]), a base class assignment operator
function is always hidden by the copy assignment operator function of the
derived class.
[:zh_CN]
因为类的复制赋值运算符 [`operator=] 若未被用户所声明就会被隐式声明
（[#class.copy.assign]），所以基类的赋值运算符函数总是被派生类的复制赋值运算符
函数所隐藏。
[end:note]

[para]
[begin:note]
[:en]
Any assignment operator function, even the copy and move assignment operators,
can be virtual.
[:zh_CN]
任何赋值运算符函数，甚至是复制和移动赋值运算符，均可为虚函数。

[:en]
For a derived class [`D] with a base class [`B] for which a virtual copy/move
assignment has been declared, the copy/move assignment operator in [`D] does not
override [`B][=']s virtual copy/move assignment operator.
[:zh_CN]
对于声明了虚复制/移动赋值的基类 [`B] 的派生类 [`D]，[`D] 中的复制/移动赋值运算符
并不会覆盖 [`B] 的虚复制/移动赋值运算符。

[begin:example]
[codeblock]
struct B {
  virtual int operator= (int);
  virtual B& operator= (const B&);
};
struct D : B {
  virtual int operator= (int);
  virtual D& operator= (const B&);
};

D dobj1;
D dobj2;
B* bptr = &dobj1;
void f() {
  bptr->operator=(99);          // [:en] calls [`D::[`:key operator]=(int)] \
                                   [:zh_CN] 调用了 [`D::[`:key operator]=(int)]
  *bptr = 99;                   // [:en] ditto \
                                   [:zh_CN] 同上
  bptr->operator=(dobj2);       // [:en] calls [`D::[`:key operator]=(const B&)] \
                                   [:zh_CN] 调用了 [`D::[`:key operator]=(const B&)]
  *bptr = dobj2;                // [:en] ditto \
                                   [:zh_CN] 同上
  dobj1 = dobj2;                // [:en] calls implicitly-declared [`D::[`:key operator]=(const D&)] \
                                   [:zh_CN] 调用了隐式声明的 [`D::[`:key operator]=(const D&)]
}
[codeblock:end]
[end:example]
[end:note]
