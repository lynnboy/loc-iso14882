[section#over.ics.list
    [:en] List-initialization sequence
    [:zh_CN] 列表初始化序列
]

[para]
[:en]
When an argument is an initializer list ([#dcl.init.list]), it is not an
expression and special rules apply for converting it to a parameter type.
[:zh_CN]
当实参是初始化式列表（[#dcl.init.list]）时，它不是表达式，并且对它实施特殊的规则
以将其转换为形参类型。

[para]
[:en]
If the initializer list is a [~designated-initializer-list], a conversion is
only possible if the parameter has an aggregate type that can be initialized
from the initializer list according to the rules for aggregate initialization
([#dcl.init.aggr]), in which case the implicit conversion sequence is a
user-defined conversion sequence whose second standard conversion sequence
is an identity conversion.
[:zh_CN]
如果初始化式列表是[~定名初始化式列表]，则只有当形参具有聚合类型且可以根据聚合
初始化的规则（[#dcl.init.aggr]）从这个初始化式列表进行初始化时，才可能进行转换，
这种情况下隐式转换序列是一个用户定义转换序列，其第二个标准转换序列为恒等转换。

[begin:note]
[:en]
Aggregate initialization does not require that the members are declared in
designation order.
[:zh_CN]
聚合初始化并不需要成员按照所指名的顺序声明。

[:en]
If, after overload resolution, the order does not match for the selected
overload, the initialization of the parameter will be ill-formed
([#dcl.init.list]).
[:zh_CN]
如果进行重载决议之后，其顺序与所选择的重载不匹配，则对该形参的初始化将是非良构的
（[#dcl.init.list]）。

[begin:example]
[codeblock]
struct A { int x, y; };
struct B { int y, x; };
void f(A a, int);               // #1
void f(B b, ...);               // #2
void g(A a);                    // #3
void g(B b);                    // #4
void h() {
  f({.x = 1, .y = 2}, 0);       // [:en] OK; calls #1 \
                                   [:zh_CN] OK；调用 #1
  f({.y = 2, .x = 1}, 0);       // [:en] error: selects #1, initialization of [`a] fails \
                                   [:zh_CN] 错误：选择了 #1，由于不匹配的
                                // [:en@~] due to non-matching member order ([#dcl.init.list]) \
                                   [:zh_CN@~] 成员顺序而导致失败（[#dcl.init.list]）
  g({.x = 1, .y = 2});          // [:en] error: ambiguous between #3 and #4 \
                                   [:zh_CN] 错误：在 #3 和 #4 之间有歧义
}
[codeblock:end]
[end:example]
[end:note]

[para]
[:en]
Otherwise, if the parameter type is an aggregate class [`X] and the initializer
list has a single element of type [=cv] [`U], where [`U] is [`X] or a class
derived from [`X], the implicit conversion sequence is the one required to
convert the element to the parameter type.
[:zh_CN]
否则，如果形参类型为聚合类 [`X] 且其初始化式列表具有类型 [=cv] [`U] 的单个元素，
其中 [`U] 为 [`X] 或派生自 [`X] 的类，则隐式转换序列是将该元素转换为形参类型所需
的一个转换。

[para]
[:en]
Otherwise, if the parameter type is a character array[#:note#fn:$1] and the
initializer list has a single element that is an appropriately-typed
[~string-literal] ([#dcl.init.string]), the implicit conversion sequence is the
identity conversion.
[:zh_CN]
否则，若形参类型为字符数组[#:note#fn:$1]且初始化式列表包含单个元素，并且是适当
类型的[~字符串字面量]（[#dcl.init.string]），则隐式转换序列是恒等转换。

[note:foot#fn:$1]
[:en]
Since there are no parameters of array type, this will only occur as the
referenced type of a reference parameter.
[:zh_CN]
并不存在数组类型的形参，因此它只会作为某个引用形参的被引用类型而出现。
[note:end]

[para]
[:en]
Otherwise, if the parameter type is [`std::initializer_list<X>] and all the
elements of the initializer list can be implicitly converted to [`X], the
implicit conversion sequence is the worst conversion necessary to convert an
element of the list to [`X], or if the initializer list has no elements, the
identity conversion.

[:zh_CN]
否则，如果形参类型为 [`std::initializer_list<X>]，并且初始化式列表中的所有元素
都能隐式转换为 [`X]，则隐式转换序列为将该列表中的某个元素转换为 [`X] 所需的最差
的转换，或者当初始化式列表没有元素时为恒等转换。

[:en]
This conversion can be a user-defined conversion even in the context of a call
to an initializer-list constructor.
[:zh_CN]
即使在调用初始化式列表构造函数的语境中，这个转换也可以是用户定义的转换。

[begin:example]
[codeblock]
void f(std::initializer_list<int>);
f( {} );                        // [:en] OK: [`f(initializer_list<int>)] identity conversion \
                                   [:zh_CN] OK：[`f(initializer_list<int>)] 恒等转换
f( {1,2,3} );                   // [:en] OK: [`f(initializer_list<int>)] identity conversion \
                                   [:zh_CN] OK：[`f(initializer_list<int>)] 恒等转换
f( {'a','b'} );                 // [:en] OK: [`f(initializer_list<int>)] integral promotion \
                                   [:zh_CN] OK：[`f(initializer_list<int>)] 整型提升
f( {1.0} );                     // [:en] error: narrowing \
                                   [:zh_CN] 错误：窄化

struct A {
  A(std::initializer_list<double>);           // #1
  A(std::initializer_list<complex<double>>);  // #2
  A(std::initializer_list<std::string>);      // #3
};
A a{ 1.0,2.0 };                 // [:en] OK, uses #1 \
                                   [:zh_CN] OK：使用 #1

void g(A);
g({ "foo", "bar" });            // [:en] OK, uses #3 \
                                   [:zh_CN] OK：使用 #3

typedef int IA[3];
void h(const IA&);
h({ 1, 2, 3 });                 // [:en] OK: identity conversion \
                                   [:zh_CN] OK：恒等转换
[codeblock:end]
[end:example]

[para]
[:en]
Otherwise, if the parameter type is [=lq]array of [`N X][=rq] or [=lq]array of
unknown bound of [`X][=rq], if there exists an implicit conversion sequence from
each element of the initializer list (and from [`{}] in the former case if [`N]
exceeds the number of elements in the initializer list) to [`X], the implicit
conversion sequence is the worst such implicit conversion sequence.
[:zh_CN]
否则，如果形参类型为“[`X] 的 [`N] 元数组”或“[`X] 的未知边界数组”，当从初始化式
列表中的每个元素（以及前一种情况中当 [`N] 超过初始化式列表元素数量时，从 [`{}]）
到 [`X] 都存在一个隐式转换序列时，该隐式转换序列就是这种隐式转换序列中最差的一个。

[para]
[:en]
Otherwise, if the parameter is a non-aggregate class [`X] and overload
resolution per [#over.match.list] chooses a single best constructor [`C] of [`X]
to perform the initialization of an object of type [`X] from the argument
initializer list:
[:zh_CN]
否则，如果形参是非聚合类 [`X] 且重载决议根据 [#over.match.list] 选择了 [`X] 的
单个最佳构造函数 [`C] 以从实参初始化式列表对类型 [`X] 的对象进行初始化：

[list]
[item]
[:en]
If [`C] is not an initializer-list constructor and the initializer list has a
single element of type [=cv] [`U], where [`U] is [`X] or a class derived from
[`X], the implicit conversion sequence has Exact Match rank if [`U] is [`X],
or Conversion rank if [`U] is derived from [`X].
[:zh_CN]
若 [`C] 并非初始化式列表构造函数且初始化式列表具有单个 [=cv] [`U] 类型的元素，
其中 [`U] 为 [`X] 或派生于 [`X] 的类，则当 [`U] 为 [`X] 时该隐式转换序列具有精确
匹配级，而当 [`U] 派生于 [`X] 时则具有转换级。
[item]
[:en]
Otherwise, the implicit conversion sequence is a user-defined conversion
sequence with the second standard conversion sequence an identity conversion.
[:zh_CN]
否则该隐式转换序列为第二个标准转换序列为恒等转换的用户定义的转换序列。
[list:end]

[:en]
If multiple constructors are viable but none is better than the others, the
implicit conversion sequence is the ambiguous conversion sequence.
[:zh_CN]
如果多个构造函数都可行，旦其中没有更好的，则隐式转换序列为有歧义的转换序列。

[:en]
User-defined conversions are allowed for conversion of the initializer list
elements to the constructor parameter types except as noted in [#over.best.ics].
[:zh_CN]
除了 [#over.best.ics] 中注明的情况外，允许对初始化式列表的元素向构造函数形参类型
进行用户定义的转换。

[begin:example]
[codeblock]
struct A {
  A(std::initializer_list<int>);
};
void f(A);
f( {'a', 'b'} );        // [:en] OK: [`f(A(std::initializer_list<int>))] user-defined conversion \
                           [:zh_CN] OK：[`f(A(std::initializer_list<int>))] 用户定义的转换

struct B {
  B(int, double);
};
void g(B);
g( {'a', 'b'} );        // [:en] OK: [`g(B(int, double))] user-defined conversion \
                           [:zh_CN] OK：[`g(B(int, double))] 用户定义的转换
g( {1.0, 1.0} );        // [:en] error: narrowing \
                           [:zh_CN] 错误：窄化

void f(B);
f( {'a', 'b'} );        // [:en] error: ambiguous [`f(A)] or [`f(B)] \
                           [:zh_CN] 错误：有歧义

struct C {
  C(std::string);
};
void h(C);
h({"foo"});             // OK: [`h(C(std::string("foo")))]

struct D {
  D(A, C);
};
void i(D);
i({ {1,2}, {"bar"} });  // OK: [`i(D(A(std::initializer_list<int>{1,2}), C(std::string("bar"))))]
[codeblock:end]
[end:example]

[para]
[:en]
Otherwise, if the parameter has an aggregate type which can be initialized from
the initializer list according to the rules for aggregate initialization
([#dcl.init.aggr]), the implicit conversion sequence is a user-defined
conversion sequence with the second standard conversion sequence an identity
conversion.
[:zh_CN]
否则，如果形参具有聚合类型，并能够根据聚合初始化的规则从初始化式列表进行初始化
（[#dcl.init.aggr]），则隐式转换序列为其第二个标准转换序列是恒等转换的用户定义的
转换序列。

[begin:example]
[codeblock]
struct A {
  int m1;
  double m2;
};

void f(A);
f( {'a', 'b'} );        // [:en] OK: [`f(A(int,double))] user-defined conversion \
                           [:zh_CN] OK：[`f(A(int,double))] 用户定义的转换
f( {1.0} );             // [:en] error: narrowing \
                           [:zh_CN] 错误：窄化
[codeblock:end]
[end:example]

[para]
[:en]
Otherwise, if the parameter is a reference, see [#over.ics.ref].
[:zh_CN]
否则，如果形参是一个引用，参见 [#over.ics.ref]。

[begin:note]
[:en]
The rules in this subclause will apply for initializing the underlying temporary
for the reference.
[:zh_CN]
本子条款中的规则适用于对该引用底层的临时对象进行的初始化。
[end:note]

[begin:example]
[codeblock]
struct A {
  int m1;
  double m2;
};

void f(const A&);
f( {'a', 'b'} );        // [:en] OK: [`f(A(int,double))] user-defined conversion \
                           [:zh_CN] OK：[`f(A(int,double))] 用户定义的转换
f( {1.0} );             // [:en] error: narrowing \
                           [:zh_CN] 错误：窄化

void g(const double &);
g({1});                 // [:en] same conversion as [`int] to [`double] \
                           [:zh_CN] 与从 [`int] 到 [`double] 相同的转换
[codeblock:end]
[end:example]

[para]
[:en]
Otherwise, if the parameter type is not a class:
[:zh_CN]
否则，如果形参类型不是类：

[list]
[item]
[:en] if the initializer list has one element that is not itself an initializer
list, the implicit conversion sequence is the one required to convert the
element to the parameter type;
[:zh_CN] 如果初始化式列表带有一个并非初始化式列表的元素，隐式转换序列为将该元素
转换为形参类型所需的转换；

[begin:example]
[codeblock]
void f(int);
f( {'a'} );             // [:en] OK: same conversion as [`char] to [`int] \
                           [:zh_CN] OK：与从 [`char] 到 [`int] 相同的转换
f( {1.0} );             // [:en] error: narrowing \
                           [:zh_CN] 错误：窄化
[codeblock:end]
[end:example]

[item]
[:en] if the initializer list has no elements, the implicit conversion sequence
is the identity conversion.
[:zh_CN] 如果初始化式列表没有元素，则隐式转换序列为恒等转换。

[begin:example]
[codeblock]
void f(int);
f( { } );               // [:en] OK: identity conversion  \
                           [:zh_CN] OK：恒等转换
[codeblock:end]
[end:example]
[list:end]

[para]
[:en]
In all cases other than those enumerated above, no conversion is possible.
[:zh_CN]
除了上面列举的情况之外的所有情况下，没有可能的转换存在。
