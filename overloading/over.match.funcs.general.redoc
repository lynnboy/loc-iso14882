[section#over.match.funcs.general
    [:en] General
    [:zh_CN] 概述
]

[para]
[:en]
The subclauses of [#over.match.funcs] describe the set of candidate functions
and the argument list submitted to overload resolution in each context in which
overload resolution is used.
[:zh_CN]
[#over.match.funcs] 的各子条款分别描述了在使用重载决议的各种语境中，提交给重载
决议的候选函数集合和实参列表。

[:en]
The source transformations and constructions defined in these subclauses are
only for the purpose of describing the overload resolution process.
[:zh_CN]
这些子条款中所定义的源代码的变形和构造仅用于描述重载决议过程。

[:en]
An implementation is not required to use such transformations and constructions.
[:zh_CN]
实现并不需要使用这些变形和构造。

[para]
[:en]
[%member function[!overload resolution and]]
[%function[!overload resolution and]]
The set of candidate functions can contain both member and non-member functions
to be resolved against the same argument list.
[:zh_CN]
[%成员函数[!重载决议与～]]
[%函数[!重载决议与～]]
候选函数的集合可以同时包含依照相同的实参列表进行决议的成员和非成员函数。

[:en]
If a member function is
[:zh_CN]
如果成员函数是
[list]
[item]
[:en@~] an implicit object member function that is not a constructor, or
[:zh_CN@~] 并非构造函数的隐式对象成员函数，或
[item]
[:en@~] a static member function and the argument list includes an implied
object argument,
[:zh_CN@~] 静态成员函数且其实参列表包含隐含对象实参，
[list:end]
[:en@~] it is considered to have an extra first parameter, called the
[+:adj implicit[!object parameter]], which represents the object for which the
member function has been called.
[:zh_CN@~] 则认为它带有一个额外的第一形参，称为其 [+:adj 隐含[!对象形参]]，表示
被调用该成员函数的对象。

[:en]
For the purposes of overload resolution, both static and non-static member
functions have an object parameter, but constructors do not.
[:zh_CN]
进行重载决议时，静态和非静态成员函数都带有对象形参，但构造函数没有。

[para]
[:en]
Similarly, when appropriate, the context can construct an argument list that
contains an [+implied object argument] as the first argument in the list to
denote the object to be operated on.
[:zh_CN]
相似地，如果需要，语境中可以构造一个实参列表，其中包含一个作为列表中的第一个实参
来代表要操作的对象的[+隐含对象实参]。

[para]
[:en]
For implicit object member functions, the type of the implicit object parameter is
[:zh_CN]
对于隐式对象成员函数，隐含对象形参的类型，

[list]
[item]
[:en@~] [=lq]lvalue reference to [=cv] [`X][=rq] for functions declared without
a [~ref-qualifier] or with the [`&] [~ref-qualifier]
[:zh_CN@~] 对于声明时没有[~引用限定符]或带有[~引用限定符] [`&] 的函数，为“[=cv]
[`X] 的左值引用”
[item]
[:en@~] [=lq]rvalue reference to [=cv] [`X][=rq] for functions declared with the
[`&&] [~ref-qualifier]
[:zh_CN@~] 对于声明时带有[~引用限定符] [`&&] 的函数，为“[=cv] [`X] 的右值引用”
[list:end]

[:en@~] where [`X] is the class of which the function is a direct member and
[=cv] is the cv-qualification on the member function declaration.
[:zh_CN@~] 其中 [`X] 为以该函数作为直接的类而 [=cv] 为该成员函数的声明式上的
cv 限定。

[begin:example]
[:en]
For a [`:key const] member function of class [`X], the extra parameter is
assumed to have type [=lq]lvalue reference to [`const X][=rq].
[:zh_CN]
对于类 [`X] 的 [`:key const] 成员函数，假定它的额外形参具有类型
“[`const X] 的左值引用”。
[end:example]

[:en]
For conversion functions that are implicit object member functions, the function
is considered to be a member of the class of the implied object argument for the
purpose of defining the type of the implicit object parameter.
[:zh_CN]
对于作为隐式对象成员函数的转换函数，为定义隐含对象形参的类型，该函数被当作是其
隐含对象实参的类的成员。

[:en]
For non-conversion functions that are implicit object member functions nominated
by a [~using-declaration] in a derived class, the function is considered to be
a member of the derived class for the purpose of defining the type of the
implicit object parameter.
[:zh_CN]
对于派生类中的 [~using-声明式]所提名的，作为隐式对象成员函数的非转换函数，为定义
隐含对象形参的类型，该函数被当作是派生类的成员。

[:en]
For static member functions, the implicit object parameter is considered to
match any object (since if the function is selected, the object is discarded).
[:zh_CN]
对于静态成员函数，隐含对象形参被认为与任意对象相匹配（因为一旦选择了这个函数，
对象即被丢弃）。

[begin:note]
[:en]
No actual type is established for the implicit object parameter of a static
member function, and no attempt will be made to determine a conversion sequence
for that parameter ([#over.match.best]).
[:zh_CN]
不会为静态成员函数的隐含对象形参实际建立类型，也不会尝试为此形参确定转换序列
（[#over.match.best]）。
[end:note]

[para]
[:en]
[%implied object argument[!implicit conversion sequences]]
During overload resolution, the implied object argument is indistinguishable
from other arguments.
[:zh_CN]
[%隐含对象实参[!隐式转换序列]]
在重载决议过程中，隐含对象实参与其它实参没有区别。

[:en]
The implicit object parameter, however, retains its identity since no
user-defined conversions can be applied to achieve a type match with it.
[:zh_CN]
然而隐含对象形参仍会保持其特殊性，这是由于不存在适用的用户定义转换能够达成与之
匹配的类型。

[:en]
[%implied object argument[!non-static member function and]]
For implicit object member functions declared without a [~ref-qualifier], even
if the implicit object parameter is not const-qualified, an rvalue can be bound
to the parameter as long as in all other respects the argument can be converted
to the type of the implicit object parameter.
[:zh_CN]
[%隐含对象实参[!非静态成员函数与～]]
对于声明时没有[~引用限定符]的隐式对象成员函数，即使隐含对象形参并未被 const 限定，
仍可以将一个右值绑定到该形参上，同时在其它各个方面该实参仍可以转换为隐含对象形参
的类型。

[begin:note]
[:en]
The fact that such an argument is an rvalue does not affect the ranking of
implicit conversion sequences ([#over.ics.rank]).
[:zh_CN]
这个实参是右值的事实并不会影响隐式转换序列的分级（[#over.ics.rank]）。
[end:note]

[para]
[:en]
Because other than in list-initialization only one user-defined conversion is
allowed in an implicit conversion sequence, special rules apply when selecting
the best user-defined conversion ([#over.match.best], [#over.best.ics]).
[:zh_CN]
由于除了列表初始化之外，隐式转换序列中只允许一个用户定义转换，所以当选择最佳的
用户定义转换时将采用特殊的规则（[#over.match.best]，[#over.best.ics]）。

[begin:example]
[codeblock]
class T {
public:
  T();
};

class C : T {
public:
  C(int);
};
T a = 1;            // [:en] error: no viable conversion ([`T(C(1))] not considered) \
                    [:zh_CN] 错误：没有可行的转换（不考虑 [`T(C(1))]）
[codeblock:end]
[end:example]

[para]
[:en]
In each case where conversion functions of a class [`S] are considered for
initializing an object or reference of type [`T], the candidate functions
include the result of a search for the [~conversion-function-id]
[`[`:key operator] T] in [`S].
[:zh_CN]
对类型 [`T] 的对象或引用进行初始化中，需要考察类 [`S] 的转换函数的各种情况中，
候选函数均包括在 [`S] 中对[~转换函数标识] [`[`:key operator] T] 进行搜索的结果。

[begin:note]
[:en]
This search can find a specialization of a conversion function template
([#basic.lookup]).
[:zh_CN]
这种搜索能够找到转换函数模板的特例（[#basic.lookup]）。
[end:note]

[:en]
Each such case also defines sets of [+:adj permissible[!types]] for explicit and
non-explicit conversion functions; each (non-template) conversion function that
[:zh_CN]
这些情况中还针对显式和非显式转换函数分别定义了[+:adj 允许[!类型]]的集合；对于
每个（非模板）转换函数，若它
[list]
[item]
[:en@~] is a non-hidden member of [`S],
[:zh_CN@~] 是 [`S] 的未隐藏成员，
[item]
[:en@~] yields a permissible type, and,
[:zh_CN@~] 产生允许类型，且
[item]
[:en@~] for the former set, is non-explicit
[:zh_CN@~] 对于前一种集合，为非显式的，
[list:end]
[:en@~] is also a candidate function.
[:zh_CN@~] 则它也是候选函数。

[:en]
If initializing an object, for any permissible type [=cv] [`U], any
[=cv cv2] [`U], [=cv cv2] [`U&], or [=cv cv2] [`U&&] is also a permissible type.
[:zh_CN]
若所初始化的是对象，则对于任意允许类型 [=cv] [`U]，任何 [=cv cv2] [`U]，
[=cv cv2] [`U&]，或 [=cv cv2] [`U&&] 也都是允许类型。

[:en]
If the set of permissible types for explicit conversion functions is empty,
any candidates that are explicit are discarded.
[:zh_CN]
如果针对显式转换函数的允许类型集合为空，则丢弃所有显式的候选。

[para]
[:en]
In each case where a candidate is a function template, candidate function
template specializations are generated using template argument deduction
([#temp.over], [#temp.deduct]).
[:zh_CN]
一旦候选是函数模板，就使用模板实参推断（[#temp.over]，[#temp.deduct]）生成
候选的函数模板特例。

[:en]
If a constructor template or conversion function template has an
[~explicit-specifier] whose [~constant-expression] is value-dependent
([#temp.dep]), template argument deduction is performed first and then, if the
context admits only candidates that are not explicit and the generated
specialization is explicit ([#dcl.fct.spec]), it will be removed from the
candidate set.
[:zh_CN]
如果构造函数模板或转换函数模板带有[~explicit-说明符]且其[~常量表达式]是值待决的
（[#temp.dep]），则首先进行模板实参推断，然后若语境仅认可非显式的候选而所产生的
特例是显式的（[#dcl.fct.spec]），则将其从候选集合中移除。

[:en]
Those candidates are then handled as candidate functions in the usual way.[#:fn]
[:zh_CN]
随后，这些候选就按照常规方式当作候选函数来处理[#:fn]。

[note:foot]
[:en]
The process of argument deduction fully determines the parameter types of the
function template specializations, i.e., the parameters of function template
specializations contain no template parameter types.
[:zh_CN]
实参推断的过程完全确定了函数模板特例的形参类型，就是说，函数模板特例的形参不包含
模板形参类型。

[:en]
Therefore, except where specified otherwise, function template specializations
and non-template functions ([#dcl.fct]) are treated equivalently for the
remainder of overload resolution.
[:zh_CN]
因此除非明确说明，函数模板特例和非模板函数（[#dcl.fct]）在余下的重载决议中将以
相同方式对待。
[note:end]

[:en]
A given name can refer to, or a conversion can consider, one or more function
templates as well as a set of non-template functions.
[:zh_CN]
某个给定名字可以涉指（或某个转换可以考察）一个或多个函数模板以及一组非模板函数。

[:en]
In such a case, the candidate functions generated from each function template
are combined with the set of non-template candidate functions.
[:zh_CN]
在这种情况下，从每个函数模板生成的候选函数与非模板候选函数的集合进行合并。

[para]
[:en]
A defaulted move special member function ([#class.copy.ctor],
[#class.copy.assign]) that is defined as deleted is excluded from the set of
candidate functions in all contexts.
[:zh_CN]
被定义为弃置的预置移动特殊成员函数（[#class.copy.ctor]，[#class.copy.assign]），
在所有语境中都从候选函数的集合中排除。

[:en]
A constructor inherited from class type [`C] ([#class.inhctor.init]) that has a
first parameter of type [=lq]reference to [=cv cv1] [`P][=rq] (including such a
constructor instantiated from a template) is excluded from the set of candidate
functions when constructing an object of type [=cv cv2] [`D] if the argument
list has exactly one argument and [`C] is reference-related to [`P] and [`P] is
reference-related to [`D].
[:zh_CN]
当构造一个 [=cv cv2] [`D] 类型的对象时，若其实参列表恰好包含一个实参，并且 [`C]
与 [`P] 引用相关而 [`P] 与 [`D] 引用相关，则继承于类类型 [`C] 的构造函数
（[#class.inhctor.init]），若其第一个形参类型为“到 [=cv cv1] [`P] 的引用”（包括
从模板中实例化而得的构造函数），将从候选函数集合中被排除。

[begin:example]
[codeblock]
struct A {
  A();                                  // #1
  A(A &&);                              // #2
  template<typename T> A(T &&);         // #3
};
struct B : A {
  using A::A;
  B(const B &);                         // #4
  B(B &&) = default;                    // [:en] #5, implicitly deleted \
                                        [:zh_CN] #4，隐含为弃置的

  struct X { X(X &&) = delete; } x;
};
extern B b1;
B b2 = static_cast<B&&>(b1);            // [:en] calls #4: #1 is not viable, #2, #3, and #5 are not candidates \
                                        [:zh_CN] 调用 #4：#1 不可行，#2、#3 和 #5 均不是候选
struct C { operator B&&(); };
B b3 = C();                             // [:en] calls #4 \
                                        [:zh_CN] 调用 #3
[codeblock:end]
[end:example]
