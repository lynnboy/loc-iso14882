[section#over.oper
    [:en] Overloaded operators
    [:zh_CN] 重载运算符

[%:begin#overloading.operator
    [:en] overloading[!operator]
    [:zh_CN] 重载[!运算符～]
]
[%[:en] overloaded operator[%overloading[!operator]]
  [:zh_CN] 重载运算符[%重载[!运算符～]] ]
[%[:en] operator overloading[%overloading[!operator]]
  [:zh_CN] 运算符重载[%重载[!运算符～]] ]
]

[para]
[:en]
[%operator[!overloaded]]
A function declaration having one of the following [~operator-function-id]s as
its name declares an [+operator function[%function[!operator]]].
[:zh_CN]
[%运算符[!重载～]]
以如下[~运算符函数标识]之一作为其名字的函数声明式，声明了[+运算符函数[%函数
[!运算符～]]]。

[:en]
A function template declaration having one of the following
[~operator-function-id]s as its name declares an [+operator function template
[%function[!operator[!template]]]].
[:zh_CN]
以如下[~运算符函数标识]之一作为其名字的函数模板声明式，声明了[+运算符函数模板
[%函数[!运算符～[!模板]]]]。

[:en]
A specialization of an operator function template is also an operator function.
[:zh_CN]
运算符函数模板的特例也是运算符函数。

[:en]
An operator function is said to [+implement[%operator[!implementation]]] the
operator named in its [~operator-function-id].
[:zh_CN]
运算符函数被称为[+实现[%运算符[!实现]]]了其[~运算符函数标识]中所指名的运算符。

[syntax]
[rule operator-function-id [:zh_CN] 运算符函数标识 ]
    [| [`:key operator] operator ]
[rule:end]

[rule:oneof@aligned operator [:zh_CN] 运算符 ]
  [| [`new      delete   new`[`]    delete`[`] co_await ()        `[`]        ->       ->*] ]
  [| [`~        !        +        -        *        /        %        ^        &]  ]
  [| [`|        =        +=       -=       *=       /=       %=       ^=       &=] ]
  [| [`|=       ==       !=       <        >        <=       >=       <=>      &&] ]
  [| [`||       <<       >>       <<=      >>=      ++       --       ,] ]
[rule:end]
[syntax:end]

[begin:note]
[:en]
The operators [`new`[`]], [`delete`[`]], [`()], and [``[`]] are formed from more
than one token.
[:zh_CN]
运算符 [`new`[`]]、[`delete`[`]]、[`()] 和 [``[`]] 是以多个记号构成的。

[:en]
[%operator[!subscripting]]
[%operator[!function call]]
The latter two operators are function call ([#expr.call]) and subscripting
([#expr.sub]).
[:zh_CN]
[%运算符[!下标～]]
[%运算符[!函数调用～]]
后两个运算符是函数调用（[#expr.call]）和下标（[#expr.sub]）。
[end:note]

[para]
[:en]
Both the unary and binary forms of
[:zh_CN]
一元和二元形式的

[codeblock:literal]
+      -      *      &
[codeblock:end]

[:en@~]
can be overloaded.
[:zh_CN@~]
都可被重载。

[para]
[begin:note]
[:en]
[%restriction[!operator overloading]]
The following operators cannot be overloaded:
[:zh_CN]
[%限制[!运算符重载]]
下列运算符不能重载：

[codeblock:literal]
.      .*     ::     ?:
[codeblock:end]

[:en@~]
nor can the preprocessing symbols [`#] ([#cpp.stringize]) and [`##]
([#cpp.concat]).
[:zh_CN@~]
预处理符号 [`#]（[#cpp.stringize]）和 [`##]（[#cpp.concat]）也不能重载。
[end:note]

[para]
[:en]
[%call[!operator function]]
Operator functions are usually not called directly; instead they are invoked
to evaluate the operators they implement ([#over.unary] [=-] [#over.inc]).
[:zh_CN]
[%调用[!运算符函数]]
运算符函数通常并不直接调用；而是对它们所实现的运算符进行求值而调用的
（[#over.unary] — [#over.inc]）。

[:en]
They can be explicitly called, however, using the [~operator-function-id]
as the name of the function in the function call syntax ([#expr.call]).
[:zh_CN]
可以对它们进行显式的调用，但需要将[~运算符函数标识]作为函数调用语法（[#expr.call]）
中的函数的名字。

[begin:example]
[codeblock]
complex z = a.operator+(b);     // [`complex z = a+b;]
void* p = operator new(sizeof(int)*n);
[codeblock:end]
[end:example]

[para]
[:en]
The allocation and deallocation functions, [`:key operator] [`:key new],
[`:key operator] [`[`:key new]`[`]], [`:key operator] [`:key delete] and
[`:key operator] [`[`:key delete]`[`]], are described completely in
[#basic.stc.dynamic].
[:zh_CN]
分配和回收函数，[`:key operator] [`:key new]，[`:key operator] [`[`:key new]`[`]]，
[`:key operator] [`:key delete]，和 [`:key operator] [`[`:key delete]`[`]]，
在 [#basic.stc.dynamic] 中进行了完整描述。

[:en]
The attributes and restrictions found in the rest of this subclause do not apply
to them unless explicitly stated in [#basic.stc.dynamic].
[:zh_CN]
本子条款的余下部分中给出的性质和限制，除非在 [#basic.stc.dynamic] 中有明确的说明，
否则对其并不适用。

[para]
[:en]
The [`co_await] operator is described completely in [#expr.await].
[:zh_CN]
[`co_await] 运算符在 [#expr.await] 中进行了完整描述。

[:en]
The attributes and restrictions found in the rest of this subclause do not apply
to it unless explicitly stated in [#expr.await].
[:zh_CN]
本子条款的余下部分中给出的性质和限制，除非在 [#expr.await] 中有明确的说明，否则
对其并不适用。

[para]
[:en]
[%restriction[!overloading]]
An operator function shall either be a non-static member function or be a
non-member function that has at least one parameter whose type is a class, a
reference to a class, an enumeration, or a reference to an enumeration.
[:zh_CN]
[%限制[!重载]]
运算符函数应当要么为非静态成员函数，要么为非成员函数且至少带有一个类型为类、类的
引用、枚举或者枚举的引用的形参。

[:en]
It is not possible to change the precedence, grouping, or number of operands
of operators.
[:zh_CN]
运算符的优先级，组合方式，或其操作数的数量不能改变。

[:en]
The meaning of the operators [`=], (unary) [`&], and [`,] (comma), predefined
for each type, can be changed for specific class types by defining operator
functions that implement these operators.
[:zh_CN]
为每个类型所预定义的 [`=]，（一元）[`&]，以及 [`,]（逗号）运算符的含义，可以为
特定的类类型，通过定义实现这些运算符的运算符函数而改变。

[:en]
Likewise, the meaning of the operators (unary) [`&] and [`,] (comma) can be
changed for specific enumeration types.
[:zh_CN]
类似地，（一元）[`&] 和 [`,]（逗号）运算符的含义，可以为特定的枚举类型而改变。

[:en]
[%overloaded operator[!inheritance of]]
Operator functions are inherited in the same manner as other base class
functions.
[:zh_CN]
[%重载运算符[!～的继承]]
运算符函数以与其它基类函数相同的方式被继承。

[para]
[:en]
An operator function shall be a prefix unary, binary, function call,
subscripting, class member access, increment, or decrement operator function.
[:zh_CN]
运算符函数应当是前缀一元，二元，函数调用，下标，类成员访问，增量，或者减量运算符
函数。

[para]
[begin:note]
[:en]
[%operator]
The identities among certain predefined operators applied to basic types (for
example, [`++a] [$\equiv] [`a+=1]) need not hold for operator functions.
[:zh_CN]
[%运算符]
适用于基础类型的特定预定义运算符中的不变式（例如，[`++a] [$\equiv] [`a+=1]），
并不需要在运算符函数中维持。

[:en]
Some predefined operators, such as [`+=], require an operand to be an lvalue
when applied to basic types; this is not required by operator functions.
[:zh_CN]
某些预定义运算符，如 [`+=]，当施加于基本类型时需要左值操作数；运算符函数并不需要
如此。
[end:note]

[para]
[:en]
[%argument[!overloaded operator and default]]
An operator function cannot have default arguments ([#dcl.fct.default]), except
where explicitly stated below.
[:zh_CN]
[%实参[!重载运算符与默认～]]
除非后文明确指出，运算符函数不能带有默认实参（[#dcl.fct.default]）。

[:en]
Operator functions cannot have more or fewer parameters than the number required
for the corresponding operator, as described in the rest of this subclause.
[:zh_CN]
正如本子条款的余下部分所述，运算符函数不能带有比其对应运算符所需更多或更少数量的
形参。

[para]
[:en]
Operators not mentioned explicitly in subclauses [#over.ass] through [#over.inc]
act as ordinary unary and binary operators obeying the rules of [#over.unary] or
[#over.binary].
[:zh_CN]
未在 [#over.ass] 到 [#over.inc] 子条款中明确提到的运算符的行为，如同遵循
[#over.unary] 或 [#over.binary] 的规则的常规一元和二元运算符。

[%:end#overloading.resolution.best.viable.function]
[%:end#overloading.resolution.viable.functions]

[include over.unary]

[include over.binary]

[include over.call]

[include over.sub]

[include over.ref]

[include over.inc]

[%:end#overloading.operator]
