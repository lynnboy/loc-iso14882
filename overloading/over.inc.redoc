[section#over.inc
    [:en] Increment and decrement
    [:zh_CN] 增量和减量

[:en]
[%increment operator[!overloaded][%overloading[!increment operator]]]
[%decrement operator[!overloaded][%overloading[!decrement operator]]]
[%prefix [`++] and [`--][!overloading]]
[%postfix [`++] and [`--][!overloading]]
[:zh_CN]
[%增量运算符[!重载～][%重载[!～增量运算符]]]
[%减量运算符[!重载～][%重载[!～减量运算符]]]
[%前置 [`++] 和 [`--][!重载～]]
[%后置 [`++] 和 [`--][!重载～]]
]

[para]
[:en]
An [+:adj increment operator function[%increment[!operator function]]] is a
function named [`[`:key operator]++].
[:zh_CN]
[+:adj 增量运算符函数[%增量[!运算符函数]]]是名为 [`[`:key operator]++]的函数。

[:en]
If this function is a non-static member function with no parameters, or a
non-member function with one parameter, it defines the prefix increment operator
[`++] for objects of that type.
[:zh_CN]
若该函数是没有形参的非静态成员函数，或者带有一个形参的非成员函数，则它为该类型的
对象定义了前置增量运算符 [`++]。

[:en]
If the function is a non-static member function with one parameter (which shall
be of type [`int]) or a non-member function with two parameters (the second of
which shall be of type [`int]), it defines the postfix increment operator [`++]
for objects of that type.
[:zh_CN]
若该函数是带有一个形参（其类型应为 [`int]）的非静态成员函数，或者带有两个形参
（其第二个的类型应为 [`int]）的非成员函数，则它为该类型的对象定义了后置增量运算
符 [`++]。

[:en]
When the postfix increment is called as a result of using the [`++] operator,
the [`int] argument will have value zero.[#:fn]
[:zh_CN]
当后置增量通过使用 [`++] 运算符而调用时，其 [`int] 实参的值为零。[#:fn]

[note:foot]
[:en]
Calling [`[`:key operator]++] explicitly, as in expressions like
[`a.[`:key operator]++(2)], has no special properties:
[:zh_CN]
显式调用 [`[`:key operator]++]（如在 [`a.[`:key operator]++(2)] 这样的表达式中）
没有特殊的性质：

[:en]
The argument to [`[`:key operator]++] is [`2].
[:zh_CN]
传给 [`[`:key operator]++] 的实参为 [`2]。
[note:end]

[begin:example]
[codeblock]
struct X {
  X&   operator++();            // [:en] prefix [`++a] \
                                   [:zh_CN] 前置 [`++a]
  X    operator++(int);         // [:en] postfix [`a++] \
                                   [:zh_CN] 后置 [`a++]
};

struct Y { };
Y&   operator++(Y&);            // [:en] prefix [`++b] \
                                   [:zh_CN] 前置 [`++b]
Y    operator++(Y&, int);       // [:en] postfix [`b++] \
                                   [:zh_CN] 后置 [`b++]

void f(X a, Y b) {
  ++a;                          // [`a.[`:key operator]++();]
  a++;                          // [`a.[`:key operator]++(0);]
  ++b;                          // [`[`:key operator]++(b);]
  b++;                          // [`[`:key operator]++(b, 0);]

  a.operator++();               // [:en] explicit call: like [`++a;] \
                                   [:zh_CN] 显式调用：如同 [`++a;]
  a.operator++(0);              // [:en] explicit call: like [`a++;] \
                                   [:zh_CN] 显式调用：如同 [`a++;]
  operator++(b);                // [:en] explicit call: like [`++b;] \
                                   [:zh_CN] 显式调用：如同 [`++b;]
  operator++(b, 0);             // [:en] explicit call: like [`b++;] \
                                   [:zh_CN] 显式调用：如同 [`b++;]
}
[codeblock:end]
[end:example]

[para]
[:en]
An [+:adj decrement operator function[%decrement[!operator function]]] is a
function named [`[`:key operator]--] and is handled analogously to an increment
operator function.
[:zh_CN]
[+:adj 减量运算符函数[%减量[!运算符函数]]]是名为 [`[`:key operator]--]的函数，
而对它的处理与增量运算符函数类似。
