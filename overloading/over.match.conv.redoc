[section#over.match.conv
    [:en] Initialization by conversion function
    [:zh_CN] 通过转换函数进行初始化

[%[:en] overloading[!resolution[!initialization]]
  [:zh_CN] 重载[!～决议[!初始化]] ]
]

[para]
[:en]
Under the conditions specified in [#dcl.init], as part of an initialization of
an object of non-class type, a conversion function can be invoked to convert an
initializer expression of class type to the type of the object being initialized.
[:zh_CN]
在 [#dcl.init] 中指定的条件下，作为非类类型对象的初始化的一部分，可以调用转换
函数以将类类型的初始化式表达式转换为所初始化的对象的类型。

[:en]
Overload resolution is used to select the conversion function to be invoked.
[:zh_CN]
使用重载决议来选择所要调用的转换函数。

[:en]
Assuming that [=lq][=cv] [`T][=rq] is the type of the object being initialized,
the candidate functions are selected as follows:
[:zh_CN]
假定“[=cv] [`T]”为所初始化的对象的类型，候选函数选择如下：

[list]
[item]
[:en]
The permissible types for non-explicit conversion functions are those that can
be converted to type [`T] via a standard conversion sequence ([#over.ics.scs]).
[:zh_CN]
针对非显式转换函数的允许类型为可以通过一个标准转换序列（[#over.ics.scs]）转换为
类型 [`T] 的那些类型。

[:en]
For direct-initialization, the permissible types for explicit conversion
functions are those that be converted to type [`T] with a (possibly trivial)
qualification conversion ([#conv.qual]); otherwise there are none.
[:zh_CN]
对于直接初始化，针对显式转换函数的允许类型为经由（可能平凡的）限定转换
（[#conv.qual]）转换为类型 [`T] 的那些类型；否则没有允许类型。
[list:end]

[para]
[:en]
The argument list has one argument, which is the initializer expression.
[:zh_CN]
实参列表有一个实参，就是其初始化式表达式。

[begin:note]
[:en]
This argument will be compared against the implicit object parameter of the
conversion functions.
[:zh_CN]
此实参将与转换函数的隐含对象形参进行比较。
[end:note]
