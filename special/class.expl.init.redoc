[section#class.expl.init
    [:en] Explicit initialization
    [:zh_CN] 显式初始化

[%[:en] initialization[!explicit]
  [:zh_CN] 初始化[!显式～] ]
[%[:en] initialization[!constructor and]
  [:zh_CN] 初始化[!构造函数与～] ]
]

[para]
[:en]
An object of class type can be initialized with a parenthesized
[~expression-list], where the [~expression-list] is construed as an argument
list for a constructor that is called to initialize the object.
[:zh_CN]
类类型的对象可以用带括号的[~表达式列表]初始化，其中的[~表达式列表]将作为实参列表
来调用用以初始化该对象的构造函数。

[:en]
Alternatively, a single [~assignment-expression] can be specified as an
[~initializer] using the [`=] form of initialization.
[:zh_CN]
或者，可以使用 [`=] 形式的初始化把单个[~赋值表达式]指定为[~初始化式]。

[:en]
Either direct-initialization semantics or copy-initialization semantics apply;
see [#dcl.init].
[:zh_CN]
实施直接初始化语义或者复制初始化语义；参见 [#dcl.init]。

[enter:example]

[codeblock]
struct complex {
  complex();
  complex(double);
  complex(double,double);
};

complex sqrt(complex,complex);

complex a(1);                   // [:en] initialized by calling [`complex(double)] with argument [`1]
                                // [|:zh_CN] 通过以实参 [`1] 调用 [`complex(double)] 进行初始化
complex b = a;                  // [:en] initialized as a copy of [`a]
                                // [|:zh_CN] 初始化为 [`a] 的副本
complex c = complex(1,2);       // [:en] initialized by calling [`complex(double,double)] with arguments [`1] and [`2]
                                // [|:zh_CN] 通过以实参 [`1] 和 [`2] 调用 [`complex(double,double)] 进行初始化
complex d = sqrt(b,c);          // [:en] initialized by calling [`sqrt(complex,complex)] with [`d] as its result object
                                // [|:zh_CN] 通过调用 [`sqrt(complex,complex)] 进行初始化并以 [`d] 作为其结果对象
complex e;                      // [:en] initialized by calling [`complex()]
                                // [|:zh_CN] 通过调用 [`complex()] 进行初始化
complex f = 3;                  // [:en] initialized by calling [`complex(double)] with argument [`3]
                                // [|:zh_CN] 通过以实参 [`3] 调用 [`complex(double)] 进行初始化
complex g = { 1, 2 };           // [:en] initialized by calling [`complex(double, double)] with arguments [`1] and [`2]
                                // [|:zh_CN] 通过以实参 [`1] 和 [`2] 调用 [`complex(double, double)] 进行初始化
[codeblock:end]
[exit:example]

[enter:note]
[:en]
[%initialization[!overloaded assignment and]]
Overloading of the assignment operator ([#over.ass]) has no effect on
initialization.
[:zh_CN]
[%初始化[!重载的赋值与～]]
对赋值运算符的重载（[#over.ass]）并不影响初始化。
[exit:note]

[para]
[:en]
[%initialization[!array of class objects]]
[%constructor[!array of class objects and]]
An object of class type can also be initialized by a [~braced-init-list].
[:zh_CN]
[%初始化[!类对象的数组]]
[%构造函数[!类对象的数组与～]]
类类型的对象还可以由[~花括号初始化列表]初始化。

[:en]
List-initialization semantics apply; see [#dcl.init] and [#dcl.init.list].
[:zh_CN]
此时采用列表初始化语义；参见 [#dcl.init] 和 [#dcl.init.list]。

[enter:example]
[codeblock]
complex v[6] = { 1, complex(1,2), complex(), 2 };
[codeblock:end]

[:en]
Here, [`complex::complex(double)] is called for the initialization of [`v`[0`]]
and [`v`[3`]], [`complex::complex(double, double)] is called for the
initialization of [`v`[1`]], [`complex::complex()] is called for the
initialization [`v`[2`]], [`v`[4`]], and [`v`[5`]].
[:zh_CN]
此处，[`v`[0`]] 和 [`v`[3`]] 的初始化调用了 [`complex::complex(double)]，
[`v`[1`]] 的初始化调用了 [`complex::complex(double, double)]，[`v`[2`]]，
[`v`[4`]] 和 [`v`[5`]] 的初始化调用了 [`complex::complex()]。

[:en]
For another example,
[:zh_CN]
又例如，

[codeblock]
struct X {
  int i;
  float f;
  complex c;
} x = { 99, 88.8, 77.7 };
[codeblock:end]

[:en]
Here, [`x.i] is initialized with 99, [`x.f] is initialized with 88.8, and
[`complex::complex(double)] is called for the initialization of [`x.c].
[:zh_CN]
此处，[`x.i] 被初始化为 99，[`x.f] 被初始化为 88.8，而 [`x.c] 的初始化调用了
[`complex::complex(double)]。
[exit:example]

[enter:note]
[:en]
Braces can be elided in the [~initializer-list] for any aggregate, even if the
aggregate has members of a class type with user-defined type conversions; see
[#dcl.init.aggr].
[:zh_CN]
任意聚合的[~初始化式列表]之中的花括号均可以省略，即使聚合中含有带有用户定义的
类型转换的类类型的成员也是如此；参见 [#dcl.init.aggr]。
[exit:note]

[para]
[enter:note]
[:en]
If [`T] is a class type with no default constructor, any declaration of an
object of type [`T] (or array thereof) is ill-formed if no [~initializer]
is explicitly specified (see [#class.init] and [#dcl.init]).
[:zh_CN]
若 [`T] 是没有默认构造函数的类类型，则当类型 [`T]（或其数组）的任何对象的声明式
没有显式指定[~初始化式]时，它就是非良构的（参见 [#class.init] 和 [#dcl.init]）。
[exit:note]

[para]
[enter:note]
[:en]
[%order of execution[!constructor and [`static] objects]]
The order in which objects with static or thread storage duration
are initialized is described in [#basic.start.dynamic] and [#stmt.dcl].
[:zh_CN]
[%执行顺序[!构造函数～与 [`static] 对象]]
具有静态或线程存储期的对象的初始化顺序在 [#basic.start.dynamic] 和 [#stmt.dcl] 中
说明。
[exit:note]
