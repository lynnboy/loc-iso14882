[section#meta.trans.cv
    [:en] Const-volatile modifications
    [:zh_CN] const-volatile 改造
]

[table:grid#meta.trans.cv
    [:en] Const-volatile modifications
    [:zh_CN] const-volatile 改造
    [|  [:en] Template
        [:zh_CN] 模板 ]
    [|  [:en] Comments
        [:zh_CN] 注释 ]
]

[%@lib remove_const]
[|]
[`template<class T>] [br]
[`struct remove_const;]
[|] [:en] The member typedef [`type] names the same type as [`T] except that any
    top-level const-qualifier has been removed.
    [:zh_CN] 成员 typedef [`type] 指名与 [`T] 相同的类型，但任何顶层 [`const]
    限定符均被移除。
    [para]
    [begin:example]
    [:en] [`remove_const_t<const volatile int>] evaluates to [`volatile int],
    whereas [`remove_const_t<const int*>] evaluates to [`const int*].
    [:zh_CN] [`remove_const_t<const volatile int>] 求值为 [`volatile int]，而
    [`remove_const_t<const int*>] 为 [`const int*]。
    [end:example]
[-]

[%@lib remove_volatile]
[|]
[`template<class T>] [br]
[`struct remove_volatile;]
[|] [:en] The member typedef [`type] names the same type as [`T] except that any
    top-level volatile-qualifier has been removed.
    [:zh_CN] 成员 typedef [`type] 指名与 [`T] 相同的类型，但任何顶层 [`volatile]
    限定符均被移除。
    [para]
    [begin:example]
    [:en] [`remove_volatile_t<const volatile int>] evaluates to [`const int],
    whereas [`remove_volatile_t<volatile int*>] evaluates to [`volatile int*].
    [:zh_CN] [`remove_volatile_t<const volatile int>] 求值为 [`const int]，而
    [`remove_volatile_t<volatile int*>] 求值为 [`volatile int*]。
    [end:example]
[-]

[%@lib remove_cv]
[|]
[`template<class T>] [br]
[`struct remove_cv;]
[|] [:en] The member typedef [`type] shall be the same as [`T] except that any
    top-level cv-qualifier has been removed.
    [:zh_CN] 成员 typedef [`type] 应当与 [`T] 相同，但任何顶层 cv 限定符
    均被移除。
    [para]
    [begin:example]
    [:en] [`remove_cv_t<const volatile int>] evaluates to [`int], whereas
    [`remove_cv_t<const volatile int*>] evaluates to [`const volatile int*].
    [:zh_CN] [`remove_cv_t<const volatile int>] 求值为 [`int]，而
    [`remove_cv_t<const volatile int*>] 求值为 [`const volatile int*]。
    [end:example]
[-]

[%@lib add_const]
[|]
[`template<class T>] [br]
[`struct add_const;]
[|] [:en] If [`T] is a reference, function, or top-level const-qualified type,
    then [`type] names the same type as [`T], otherwise [`T const].
    [:zh_CN] 若 [`T] 为引用、函数或带有顶层 [`const] 限定的类型，则 [`type] 指名
    与 [`T] 相同的类型，否则为 [`T const]。
[-]

[%@lib add_volatile]
[|]
[`template<class T>] [br]
[`struct add_volatile;]
[|] [:en] If [`T] is a reference, function, or top-level volatile-qualified
    type, then [`type] names the same type as [`T], otherwise [`T volatile].
    [:zh_CN] 若 [`T] 为引用、函数或带有顶层 [`volatile] 限定的类型，则 [`type]
    指名与 [`T] 相同的类型，否则为 [`T volatile]。
[-]

[%@lib add_cv]
[|]
[`template<class T>] [br]
[`struct add_cv;]
[|] [:en] The member typedef [`type] names the same type as
    [`add_const_t<add_volatile_t<T>>].
    [:zh_CN] 成员 typedef [`type] 指名与 [`add_const_t<add_volatile_t<T>>] 相同
    的类型。
[-]

[table:end]
