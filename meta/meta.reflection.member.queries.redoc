[section#ratio.reflection.member.queries
    [:en] Reflection member queries
    [:zh_CN] 反射成员查询
]

[%@lib members_of]
[codeblock:declaration]
consteval vector<info> members_of(info r, access_context ctx);
[codeblock:end]

[div:description]
[para]
[:en] A declaration [$D] [+:% members-of-precedes] a point [$P] if [$D] precedes
either [$P] or the point immediately following the [~class-specifier]
of the outermost class for which [$P] is in a complete-class context.
[:zh_CN] 如果声明式 [$D] 先于位置 [$P] 或先于紧跟使 [$P] 处于完整类语境的最外层类
的[~类说明符]之后的位置，则 [$D] 为 [$P] 的[+:% 先前成员]。

[para]
[:en] A declaration [$D] of a member [$M] of a class or namespace [$Q] is
[+:% [$Q]-members-of-eligible] if
[:zh_CN] 如果符合以下情况，则类或命名空间 [$Q] 的成员 [$M] 的声明式 [$D]是
[+:% [$Q] 的有资格成员]：
[list]
[item]
[:en] the host scope of [$D] ([#basic.scope.scope]) is the class scope or
namespace scope associated with [$Q],
[:zh_CN] [$D] 的主作用域（[#basic.scope.scope]）是 [$Q] 的关联类作用域或命名空间作用域，
[item]
[:en] [$D] is not a friend declaration,
[:zh_CN] [$D] 不是友元声明式，
[item]
[:en] [$M] is not a closure type ([#expr.prim.lambda.closure]),
[:zh_CN] [$M] 不是闭包类型（[#expr.prim.lambda.closure]），
[item]
[:en] [$M] is not a specialization of a template ([#temp.pre]),
[:zh_CN] [$M] 不是模板特例（[#temp.pre]），
[item]
[:en] if [$Q] is a class that is not a closure type, then [$M] is a direct member
of [$Q] ([#class.mem.general]) that is not a variant member of a
nested anonymous union of [$Q] ([#class.union.anon]), and
[:zh_CN] 如果 [$Q] 是并非闭包类型的类，则 [$M] 是 [$Q] 的直接成员（[#class.mem.general]）
且不是 [$Q] 的嵌套匿名联合体（[#class.union.anon]）的变体成员，并且
[item]
[:en] if [$Q] is a closure type, then [$M] is a function call operator or
function call operator template.
[:zh_CN] 如果 [$Q] 是闭包类型，则 [$M] 是函数调用运算符或函数调用运算符模板。
[list:end]

[:en] It is [?impldef whether declarations of some members of a closure type [$Q]
are [$Q]-members-of-eligible] whether declarations of other members of a
closure type [$Q] are [$Q]-members-of-eligible.
[:zh_CN] 闭包类型 [$Q] 的其他成员的声明式是否是 [$Q] 的有资格成员是[?impldef
闭包类型 [$Q] 的某些成员的声明式是否是 [$Q] 的有资格成员]。

[para]
[:en] A member [$M] of a class or namespace [$Q] is [+:% [$Q]-members-of-representable]
from a point [$P] if a [$Q]-members-of-eligible declaration of [$M] members-of-precedes [$P], and [$M] is
[:zh_CN] 对于类或类模板 [$Q] 的某个成员 [$M]，如果 [$M] 的某条 [$Q] 的有资格成员
声明式是位置 [$P] 的[+:% 先前成员]，并且 [$M] 为以下各项，则 [$M] 是
[+:% [$Q] 的从 [$P] 可表示成员]：
[list]
[item]
[:en@~] a class or enumeration type
[:zh_CN@~] 类或枚举类型
[item]
[:en@~] a type alias
[:zh_CN@~] 类型别名
[item]
[:en@~] a class template, function template, variable template, alias template, or concept,
[:zh_CN@~] 类模板、函数模板、变量模板、别名模板或概念，
[item]
[:en@~] a variable or reference [$V] for which the type of [$V] does not contain
an undeduced placeholder type,
[:zh_CN@~] 变量或引用 [$V]，[$V] 的类型不包含未推断的占位符类型，
[item]
[:en@~] a function [$F] for which
[:zh_CN@~] 函数 [$F]，其中
 [list]
 [item]
[:en] the type of [$F] does not contain an undeduced placeholder type,
[:zh_CN] [$F] 的类型不包含未推断的占位符类型，
 [item]
[:en] the constraints (if any) of [$F] are satisfied, and
[:zh_CN] [$F] 的约束（如果有）均被满足，并且
 [item]
[:en] if [$F] is a prospective destructor, [$F] is the selected destructor ([#class.dtor]),
[:zh_CN] 若 [$F] 是预期析构函数，则 [$F] 是被选中的析构函数（[#class.dtor]），
 [list:end]
[item]
[:en@~] a non-static data member,
[:zh_CN@~] 非静态数据成员
[item]
[:en@~] a namespace, or
[:zh_CN@~] 命名空间，或者
[item]
[:en@~] a namespace alias.
[:zh_CN@~] 命名空间别名。
[list:end]

[begin:note]
[:en] Examples of direct members that are not [$Q]-members-of-representable
for any entity [$Q] include: unscoped enumerators ([#enum]),
partial specializations of templates ([#temp.spec.partial]), and
closure types ([#expr.prim.lambda.closure]).
[:zh_CN] 对于任何实体 [$Q]，并非 [$Q] 的可表示成员的直接成员的例子包括：
无作用域枚举符（[#enum]），模板的部分特化式（[#temp.spec.partial]），和闭包类型（[#expr.prim.lambda.closure]）。
[end:note]

[para:returns]
[:en] A [`vector] containing reflections of all members [$M]
of the entity [$Q] represented by [`dealias(r)] for which
[:zh_CN] 包含 [`dealias(r)] 所表示的实体 [$Q] 的所有符合以下条件的成员 [$M] 的反射的 [`vector]：
[list]
[item]
[:en@~] [$M] is [$Q]-members-of-representable from some point in the evaluation context and
[:zh_CN@~] [$M] 是 [$Q] 的从执行语境中某个位置可表示的成员，并且
[item]
[:en@~] [`is_accessible(^^[$M], ctx)] is [`true].
[:zh_CN@~] [`is_accessible(^^[$M], ctx)] 为 [`true]。
[list:end]

[:en] If [`dealias(r)] represents a class [$C], then the [`vector] also contains
reflections representing all unnamed bit-fields [$B] whose declarations inhabit
the class scope corresponding to [$C] for which [`is_accessible(^^[$B], ctx)] is [`true].
[:zh_CN] 如果 [`dealias(r)] 表示某个类 [$C]，那么对于声明式居于 [$C] 的对应类作用域
的所有无名位字段 [$B]，此 [`vector] 还包含使得 [`is_accessible(^^[$B], ctx)] 为
[`true] 的所有 [$B] 的反射。

[:en] Reflections of class members and unnamed bit-fields that are declared
appear in the order in which they are declared.
[:zh_CN] 类成员和有声明的无名位字段的反射，依照它们的声明顺序出现。

[begin:note]
[:en] Base classes are not members.
[:zh_CN] 基类并非成员。

[:en] Implicitly-declared special members appear after any user-declared members ([#special]).
[:zh_CN] 隐式声明的特殊成员出现于所有用户声明的成员之后（[#special]）。
[end:note]

[begin:example]
[codeblock]
// TU1
export module M;
namespace NS {
  export int m;
  static int l;
}
static_assert(members_of(^^NS, access_context::current()).size() == 2);

// TU2
import M;

static_assert(                                                  // [:en] [`NS::l] does not precede [:zh_CN] [`NS::l] 并非先于
  members_of(^^NS, access_context::current()).size() == 1);     // [:en@~] the constant-expression ([#basic.lookup]) [:zh_CN@~] 常量表达式（[#basic.lookup]）

class B {};

struct S : B {
private:
  class I;
public:
  int m;
};

static_assert(                                                  // [:en] 6 special members, [:zh_CN] 6 个特殊成员，
  members_of(^^S, access_context::current()).size() == 7);      // [:en@~] 1 public member, [:zh_CN@~] 1 个公开成员，
                                                                // [:en@~] does not include base [:zh_CN@~] 不包括基类

static_assert(                                                  // [:en] all of the above, [:zh_CN] 以上所有，
  members_of(^^S, access_context::unchecked()).size() == 8);    // [:en@~] as well as a reflection [:zh_CN@~] 还包括
                                                                // [:en@~] representing [`S::I] [:zh_CN@~] 表示 [`S::I] 的反射
[codeblock:end]
[end:example]

[para:throws]
[:en] [`meta::exception] unless [`dealias(r)] is a reflection representing either
a class type that is complete from some point in the evaluation context or a namespace.
[:zh_CN] 除非 [`dealias(r)] 是表示在求值语境中某点完整的类类型，或表示命名空间的反射，
否则抛出 [`meta::exception]。
[div:end]

[%@lib bases_of]
[codeblock:declaration]
consteval vector<info> bases_of(info type, access_context ctx);
[codeblock:end]

[div:description]
[para:returns]
[:en] Let [$C] be the class represented by [`dealias(type)].
[:zh_CN] 令 [$C] 为 [`dealias(type)] 所代表的类。

[:en] A [`vector] containing the reflections of all the direct base class
relationships of [$B], if any, of [$C] such that [`is_accessible(^^[$B], ctx)] is [`true].
[:zh_CN] 对于 [$C] 的所有直接基类关系 [$B]，返回包含使得
[`is_accessible(^^[$B], ctx)] 为 [`true] 的所有 [$B] 的反射的 [`vector]。

[:en] The direct base class relationships appear in the order in which
the corresponding base classes appear in the [~base-specifier-list] of [$C].
[:zh_CN] 直接基类关系的出现顺序依照其在 [$C] 的[~基说明符列表]中的对应基类的出现顺序。

[para:throws]
[:en] [`meta::exception] unless [`dealias(type)] represents a class type
that is complete from some point in the evaluation context.
[:zh_CN] 除非 [`dealias(type)] 表示在求值语境中某点完整的类类型，否则抛出 [`meta::exception]。
[div:end]

[%@lib static_data_members_of]
[codeblock:declaration]
consteval vector<info> static_data_members_of(info type, access_context ctx);
[codeblock:end]

[div:description]
[para:returns]
[:en] A [`vector] containing each element [`e] of [`members_of(type, ctx)]
such that [`is_variable(e)] is [`true], preserving their order.
[:zh_CN] 包含 [`members_of(type, ctx)] 中使得 [`is_variable(e)] 为 [`true] 的
每个成员 [`e] 的 [`vector]，保留其顺序。

[para:throws]
[:en] [`meta::exception] unless [`dealias(type)] represents a class type
that is complete from some point in the evaluation context.
[:zh_CN] 除非 [`dealias(type)] 表示在求值语境中某点完整的类类型，否则抛出 [`meta::exception]。
[div:end]

[%@lib nonstatic_data_members_of]
[codeblock:declaration]
consteval vector<info> nonstatic_data_members_of(info type, access_context ctx);
[codeblock:end]

[div:description]
[para:returns]
[:en] A [`vector] containing each element [`e] of [`members_of(type, ctx)]
such that [`is_nonstatic_data_members_of(e)] is [`true], preserving their order.
[:zh_CN] 包含 [`members_of(type, ctx)] 中使得 [`is_nonstatic_data_members_of(e)]
为 [`true] 的每个成员 [`e] 的 [`vector]，保留其顺序。

[para:throws]
[:en] [`meta::exception] unless [`dealias(type)] represents a class type
that is complete from some point in the evaluation context.
[:zh_CN] 除非 [`dealias(type)] 表示在求值语境中某点完整的类类型，否则抛出 [`meta::exception]。
[div:end]

[%@lib subobjects_of]
[codeblock:declaration]
consteval vector<info> subobjects_of(info type, access_context ctx);
[codeblock:end]

[div:description]
[para:returns]
[:en] A [`vector] containing each element of [`bases_of(type, ctx)] followed by
each element of [`nonstatic_data_members_of(type, ctx)], preserving their order.
[:zh_CN] 包含 [`bases_of(type, ctx)] 的每个成员跟着
[`nonstatic_data_members_of(type, ctx)] 的每个成员的 [`vector]，保留其顺序。

[para:throws]
[:en] [`meta::exception] unless [`dealias(type)] represents a class type
that is complete from some point in the evaluation context.
[:zh_CN] 除非 [`dealias(type)] 表示在求值语境中某点完整的类类型，否则抛出 [`meta::exception]。
[div:end]

[%@lib enumerators_of]
[codeblock:declaration]
consteval vector<info> enumerators_of(info type_enum);
[codeblock:end]

[div:description]
[para:returns]
[:en] A [`vector] containing the reflections of each enumerator of the enumeration
represented by [`dealias(type_enum)], in the order in which they are declared.
[:zh_CN] 包含 [`dealias(type_enum)] 所代表枚举的每个枚举符的反射的 [`vector]，
依照它们的声明顺序。

[para:throws]
[:en] [`meta::exception] unless [`dealias(type)] represents an enumeration type,
and [`is_enumerable_type(type_enum)] is [`true].
[:zh_CN] 除非 [`dealias(type)] 表示枚举类型，并且
[`is_enumerable_type(type_enum)] 为 [`true]，否则抛出 [`meta::exception]。
[div:end]
