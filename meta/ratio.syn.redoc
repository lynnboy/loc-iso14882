[section#ratio.syn
    [:en] Header [`<ratio>] synopsis
    [:zh_CN] 头文件 [`<ratio>] 纲要
]

[%@hdr@def ratio]
[codeblock:synopsis]
namespace std {
  // [:en] [#ratio.ratio], class template [`ratio] \
  [:zh_CN] [#ratio.ratio]，类模板 [`ratio]
  template<intmax_t N, intmax_t D = 1> class ratio;

  // [:en] [#ratio.arithmetic], ratio arithmetic \
  [:zh_CN] [#ratio.arithmetic]，ratio 算术
  template<class R1, class R2> using ratio_add = [[redoc("[=seebelow]")]];
  template<class R1, class R2> using ratio_subtract = [[redoc("[=seebelow]")]];
  template<class R1, class R2> using ratio_multiply = [[redoc("[=seebelow]")]];
  template<class R1, class R2> using ratio_divide = [[redoc("[=seebelow]")]];

  // [:en] [#ratio.comparison], ratio comparison \
  [:zh_CN] [#ratio.comparison]，ratio 比较
  template<class R1, class R2> struct ratio_equal;
  template<class R1, class R2> struct ratio_not_equal;
  template<class R1, class R2> struct ratio_less;
  template<class R1, class R2> struct ratio_less_equal;
  template<class R1, class R2> struct ratio_greater;
  template<class R1, class R2> struct ratio_greater_equal;

  // [:en] [#ratio.arithmetic], ratio comparison \
  [:zh_CN] [#ratio.arithmetic]，ratio 比较
  template<class R1, class R2>
    inline constexpr bool [[redoc("`:lib>")]]ratio_equal_v = ratio_equal<R1, R2>::value;
  template<class R1, class R2>
    inline constexpr bool [[redoc("`:lib>")]]ratio_not_equal_v = ratio_not_equal<R1, R2>::value;
  template<class R1, class R2>
    inline constexpr bool [[redoc("`:lib>")]]ratio_less_v = ratio_less<R1, R2>::value;
  template<class R1, class R2>
    inline constexpr bool [[redoc("`:lib>")]]ratio_less_equal_v = ratio_less_equal<R1, R2>::value;
  template<class R1, class R2>
    inline constexpr bool [[redoc("`:lib>")]]ratio_greater_v = ratio_greater<R1, R2>::value;
  template<class R1, class R2>
    inline constexpr bool [[redoc("`:lib>")]]ratio_greater_equal_v = ratio_greater_equal<R1, R2>::value;

  // [:en] [#ratio.si], convenience SI typedefs \
  [:zh_CN] [#ratio.si]，便利的 SI typedef
  using yocto = ratio<1, 1'000'000'000'000'000'000'000'000>;  // [:en] see below \
                                                              [:zh_CN] 见下文
  using zepto = ratio<1,     1'000'000'000'000'000'000'000>;  // [:en] see below \
                                                              [:zh_CN] 见下文
  using atto  = ratio<1,         1'000'000'000'000'000'000>;
  using femto = ratio<1,             1'000'000'000'000'000>;
  using pico  = ratio<1,                 1'000'000'000'000>;
  using nano  = ratio<1,                     1'000'000'000>;
  using micro = ratio<1,                         1'000'000>;
  using milli = ratio<1,                             1'000>;
  using centi = ratio<1,                               100>;
  using deci  = ratio<1,                                10>;
  using deca  = ratio<                               10, 1>;
  using hecto = ratio<                              100, 1>;
  using kilo  = ratio<                            1'000, 1>;
  using mega  = ratio<                        1'000'000, 1>;
  using giga  = ratio<                    1'000'000'000, 1>;
  using tera  = ratio<                1'000'000'000'000, 1>;
  using peta  = ratio<            1'000'000'000'000'000, 1>;
  using exa   = ratio<        1'000'000'000'000'000'000, 1>;
  using zetta = ratio<    1'000'000'000'000'000'000'000, 1>;  // [:en] see below \
                                                              [:zh_CN] 见下文
  using yotta = ratio<1'000'000'000'000'000'000'000'000, 1>;  // [:en] see below \
                                                              [:zh_CN] 见下文
}
[codeblock:end]
