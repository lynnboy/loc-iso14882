[section#meta.unary.prop
    [:en] Type properties
    [:zh_CN] 类型属性
]

[para]
[:en] The templates specified in [#:tab#meta.unary.prop] provide access to some
of the more important properties of types.
[:zh_CN] [#:tab#meta.unary.prop] 中给出的各模板提供对某些更加重要的类型属性的访问。

[para]
[:en] It is unspecified whether the library defines any full or partial
specializations of any of these templates.
[:zh_CN] 程序库中是否对这些模板中的任意一个提供任何完全或部分特化是未指明的。

[para]
[:en] For all of the class templates [`X] declared in this subclause,
instantiating that template with a template-argument that is a class template
specialization may result in the implicit instantiation of the template argument
if and only if the semantics of [`X] require that the argument is a complete type.
[:zh_CN] 对于本子条款所声明的所有类模板 [`X]，对这个模板以某个类模板特例作为模板实参
进行实例化，当且仅当 [`X] 的语义要求该实参为完整类型时，将导致对模板实参进行隐式实例化。

[para]
[:en] For the purpose of defining the templates in this subclause, a function
call expression [`declval<T>()] for any type [`T] is considered to be a trivial
([#term.trivial.type], [#special]) function call that is not an odr-use
([#term.odr.use]) of [`declval] in the context of the corresponding definition
notwithstanding the restrictions of [#declval].
[:zh_CN] 为定义本子条款中的各模板，对任意类型 [`T] 的函数调用表达式 [`declval<T>()]，
被当做是平凡的（[#term.trivial.type]，[#special]）函数调用，而不是在相应定义的语境
中对 [`declval] 的 ODR 式使用（[#term.odr.use]），而不管 [#declval] 中的限制条件。

[para]
[:en] For the purpose of defining the templates in this subclause, let
[`[^VAL]<T>] for some type [`T] be an expression defined as follows:
[:zh_CN] 为定义本子条款中的各模板，令 [`[^VAL]<T>] 对于某个类型 [`T] 为如下定义的
表达式：

[list]
[item]
[:en] If [`T] is a reference or function type, [`[^VAL]<T>] is an expression
with the same type and value category as [`declval<T>()].
[:zh_CN] 如果 [`T] 是引用或函数类型，则 [`[^VAL]<T>] 为具有与 [`declval<T>()]
相同的类型和值类别。
[item]
[:en] Otherwise, [`[^VAL]<T>] is a prvalue that initially has type [`T].
[:zh_CN] 否则，[`[^VAL]<T>] 为起初具有类型 [`T] 的纯右值。

[begin:note 1]
[:en] If [`T] is cv-qualified, the cv-qualification is subject to adjustment
([#expr.type]).
[:zh_CN] 如果 [`T] 被 cv 限定，则其 cv 限定被调整（[#expr.type]）。
[end:note]
[list:end]

[table:grid#meta.unary.prop
    [:en] Type property predicates
    [:zh_CN] 类型属性谓词
    [|  [:en] Template
        [:zh_CN] 模板 ]
    [|  [:en] Condition
        [:zh_CN] 条件 ]
    [|  [:en] Preconditions
        [:zh_CN] 前条件 ]
]
[%@lib is_const]
[|]
[`template<class T>] [br]
[`struct is_const;]
[|] [:en] [`T] is const-qualified ([#basic.type.qualifier])
    [:zh_CN] [`T] 是 const 限定的（[#basic.type.qualifier]）
[|]
[-]

[%@lib is_volatile]
[|]
[`template<class T>] [br]
[`struct is_volatile;]
[|] [:en] [`T] is volatile-qualified ([#basic.type.qualifier])
    [:zh_CN] [`T] 是 volatile 限定的（[#basic.type.qualifier]）
[|]
[-]

[%@lib is_trivial]
[|]
[`template<class T>] [br]
[`struct is_trivial;]
[|] [:en] [`T] is a trivial type ([#term.trivial.type])
    [:zh_CN] [`T] 为平凡类型（[#term.trivial.type]）
[|] [:en] [`remove_all_extents_t<T>] shall be a complete type or
    [=cv] [`:key void].
    [:zh_CN] [`remove_all_extents_t<T>] 应当为完整类型或 [=cv] [`:key void]。
[-]

[%@lib is_trivially_copyable]
[|]
[`template<class T>] [br]
[`struct is_trivially_copyable;]
[|] [:en] [`T] is a trivially copyable type ([#term.trivially.copyable.type])
    [:zh_CN] [`T] 为可平凡复制类型（[#term.trivially.copyable.type]）
[|] [:en] [`remove_all_extents_t<T>] shall be a complete type or
    [=cv] [`:key void].
    [:zh_CN] [`remove_all_extents_t<T>] 应当为完整类型或 [=cv] [`:key void]。
[-]

[%@lib is_standard_layout]
[|]
[`template<class T>] [br]
[`struct is_standard_layout;]
[|] [:en] [`T] is a standard-layout type ([#term.standard.layout.type])
    [:zh_CN] [`T] 为标准布局类型（[#term.standard.layout.type]）
[|] [:en] [`remove_all_extents_t<T>] shall be a complete type or
    [=cv] [`:key void].
    [:zh_CN] [`remove_all_extents_t<T>] 应当为完整类型或 [=cv] [`:key void]。
[-]

[%@lib@raw [`is_empty][![:en]class[:zh_CN]类]]
[|]
[`template<class T>] [br]
[`struct is_empty;]
[|] [:en] [`T] is a class type, but not a union type, with no non-static data
    members other than subobjects of zero size, no virtual member functions, no
    virtual base classes, and no base class [`B] for which [`is_empty_v<B>]
    is [`false].
    [:zh_CN] [`T] 为类类型，但不是联合体类型，没有除大小为零的子对象之外的非静态
    数据成员，没有虚成员函数，没有虚基类，并且没有使得 [`is_empty_v<B>] 为
    [`false] 的基类 [`B]。
[|] [:en] If [`T] is a non-union class type, [`T] shall be a complete type.
    [:zh_CN] 若 [`T] 是非联合体类类型，则 [`T] 应当为完整类型。
[-]

[%@lib is_polymorphic]
[|]
[`template<class T>] [br]
[`struct is_polymorphic;]
[|] [:en] [`T] is a polymorphic class ([#class.virtual])
    [:zh_CN] [`T] 为多态类（[#class.virtual]）
[|] [:en] If [`T] is a non-union class type, [`T] shall be a complete type.
    [:zh_CN] 若 [`T] 是非联合体类类型，则 [`T] 应当为完整类型。
[-]

[%@lib is_abstract]
[|]
[`template<class T>] [br]
[`struct is_abstract;]
[|] [:en] [`T] is an abstract class ([#class.abstract])
    [:zh_CN] [`T] 为抽象类（[#class.abstract]）
[|] [:en] If [`T] is a non-union class type, [`T] shall be a complete type.
    [:zh_CN] 若 [`T] 是非联合体类类型，则 [`T] 应当为完整类型。
[-]

[%@lib is_final]
[|]
[`template<class T>] [br]
[`struct is_final;]
[|] [:en] [`T] is a class type marked with the [~class-virt-specifier] [`final]
    ([#class.pre]).
    [:zh_CN] [`T] 为被标以[~类虚说明符] [`final] 的类类型（[#class.pre]）。
    [begin:note@tail]
    [:en] A union is a class type that can be marked with [`final].
    [:zh_CN] 联合体是可以被标以 [`final] 的类类型。
    [end:note]                                        &
[|] [:en] If [`T] is a class type, [`T] shall be a complete type.
    [:zh_CN] 若 [`T] 是类类型，则 [`T] 应当为完整类型。
[-]

[%@lib is_aggregate]
[|]
[`template<class T>] [br]
[`struct is_aggregate;]
[|] [:en] [`T] is an aggregate type ([#dcl.init.aggr])
    [:zh_CN] [`T] 为聚合类型（[#dcl.init.aggr]）
[|] [:en] [`T] shall be an array type, a complete type, or [=cv] [`:key void].
    [:zh_CN] [`T] 应当为数组类型，完整类型，或 [=cv] [`:key void]。
[-]

[%@lib@raw [`is_signed][![:en]class[:zh_CN]类]]
[|]
[`template<class T>] [br]
[`struct is_signed;]
[|] [:en] If [`is_arithmetic_v<T>] is [`true], the same result as
    [`T(-1) < T(0)]; otherwise, [`false]
    [:zh_CN] 若 [`is_arithmetic_v<T>] 为 [`true]，则与 [`T(-1) < T(0)] 的结果
    相同；否则为 [`false]
[|]
[-]

[%@lib is_unsigned]
[|]
[`template<class T>] [br]
[`struct is_unsigned;]
[|] [:en] If [`is_arithmetic_v<T>] is [`true], the same result as
    [`T(0) < T(-1)]; otherwise, [`false]
    [:zh_CN] 若 [`is_arithmetic_v<T>] 为 [`true]，则与 [`T(0) < T(-1)] 的结果
    相同；否则为 [`false]
[|]
[-]

[%@lib is_bounded_array]
[|]
[`template<class T>] [br]
[`struct is_bounded_array;]
[|] [:en] [`T] is an array of known bound ([#dcl.array])
    [:zh_CN] [`T] 为已知边界的数组（[#dcl.array]）
[|]
[-]

[%@lib is_unbounded_array]
[|]
[`template<class T>] [br]
[`struct is_unbounded_array;]
[|] [:en] [`T] is an array of unknown bound ([#dcl.array])
    [:zh_CN] [`T] 为未知边界的数组（[#dcl.array]）
[|]
[-]

[%@lib is_scoped_enum]
[|]
[`template<class T>] [br]
[`struct is_scoped_enum;]
[|] [:en] [`T] is a scoped enumeration ([#dcl.enum])
    [:zh_CN] [`T] 为有作用域枚举（[#dcl.enum]）
[|]
[-]

[%@lib is_constructible]
[|]
[`template<class T, class... Args>] [br]
[`struct is_constructible;]
[|] [:en] For a function type [`T] or for a [=cv] [`:key void] type [`T],
    [`is_constructible_v<T, Args...>] is [`false], otherwise [=seebelow]
    [:zh_CN] 对于函数类型 [`T] 或者 [=cv] [`:key void] 类型 [`T]，
    [`is_constructible_v<T, Args...>] 为 [`false]，否则 [=seebelow]。
[|] [:en] [`T] and all types in the template parameter pack [`Args] shall be
    complete types, [=cv] [`:key void], or arrays of unknown bound.
    [:zh_CN] [`T] 以及模板形参包组 [`Args] 中的所有类型均应当为完整类型，
    [=cv] [`:key void]，或者未知边界的数组。
[-]

[%@lib is_default_constructible]
[|]
[`template<class T>] [br]
[`struct is_default_constructible;]
[|] [:en] [`is_constructible_v<T>] is [`true].
    [:zh_CN] [`is_constructible_v<T>] 为 [`true]。
[|] [:en] [`T] shall be a complete type, [=cv] [`:key void], or an array of
    unknown bound.
    [:zh_CN] [`T] 以及形参包组 [`Args] 中的所有类型均应当为完整类型，
    [=scv] [`:key void]，或者未知边界的数组。
[-]

[%@lib is_copy_constructible]
[|]
[`template<class T>] [br]
[`struct is_copy_constructible;]
[|] [:en] For a referenceable type [`T] ([#defns.referenceable]), the same
    result as [`is_constructible_v<T, const T&>], otherwise [`false].
    [:zh_CN] 对于可被引用的类型 [`T]（[#defns.referenceable]），与
    [`is_constructible_v<T, const T&>] 的结果相同，否则为 [`false]。
[|] [:en] [`T] shall be a complete type, [=cv] [`:key void], or an array of
    unknown bound.
    [:zh_CN] [`T] 应当为完整类型，[=cv] [`:key void]，或者未知边界的数组。
[-]

[%@lib is_move_constructible]
[|]
[`template<class T>] [br]
[`struct is_move_constructible;]
[|] [:en] For a referenceable type [`T], the same result as
    [`is_constructible_v<T, T&&>], otherwise [`false].
    [:zh_CN] 对于可被引用的类型 [`T]，与 [`is_constructible_v<T, T&&>] 的结果
    相同，否则为 [`false]。
[|] [:en] [`T] shall be a complete type, [=cv] [`:key void], or an array of
    unknown bound.
    [:zh_CN] [`T] 应当为完整类型，[=cv] [`:key void]，或者未知边界的数组。
[-]

[%@lib is_assignable]
[|]
[`template<class T, class U>] [br]
[`struct is_assignable;]
[|] [:en] The expression [`declval<T>() = declval<U>()] is well-formed when
    treated as an unevaluated operand ([#term.unevaluated.operand]).
    [:zh_CN] 表达式 [`declval<T>() = declval<U>()] 被当作免求值操作数时是良构的
    （[#term.unevaluated.operand]）。

    [:en] Access checking is performed as if in a context unrelated to [`T] and [`U].
    [:zh_CN] 如同在与 [`T] 和 [`U] 无关的语境那样进行访问检查。

    [:en] Only the validity of the immediate context of the assignment
    expression is considered.
    [:zh_CN] 只考察赋值表达式的直接语境的有效性。

    [begin:note@tail]
    [:en] The compilation of the expression can result in side effects such as
    the instantiation of class template specializations and function template
    specializations, the generation of implicitly-defined functions, and so on.
    [:zh_CN] 对表达式的编译可能导致的副作用包括对类模板特例和函数模板特例的实例
    化，生成隐式声明的函数，等等。

    [:en] Such side effects are not in the [=lq]immediate context[=rq] and can
    result in the program being ill-formed.
    [:zh_CN] 这些副作用并非处于其“直接语境”，并可能导致程序非良构。
    [end:note]
[|] [:en] [`T] and [`U] shall be complete types, [=cv] [`:key void], or arrays
    of unknown bound.
    [:zh_CN] [`T] 和 [`U] 应当为完整类型，[=cv] [`:key void]，或者未知边界的数组。
[-]

[%@lib is_copy_assignable]
[|]
[`template<class T>] [br]
[`struct is_copy_assignable;]
[|] [:en] For a referenceable type [`T], the same result as
    [`is_assignable_v<T&, const T&>], otherwise [`false].
    [:zh_CN] 对于可被引用的类型 [`T]，与 [`is_assignable_v<T, const T&>] 的结果
    相同，否则为 [`false]。
[|] [:en] [`T] shall be a complete type, [=cv] [`:key void], or an array of
    unknown bound.
    [:zh_CN] [`T] 应当为完整类型，[=cv] [`:key void]，或者未知边界的数组。
[-]

[%@lib is_move_assignable]
[|]
[`template<class T>] [br]
[`struct is_move_assignable;]
[|] [:en] For a referenceable type [`T], the same result as
    [`is_assignable_v<T&, T&&>], otherwise [`false].
    [:zh_CN] 对于可被引用的类型 [`T]，与 [`is_assignable_v<T, T&&>] 的结果相同，
    否则为 [`false]。
[|] [:en] [`T] shall be a complete type, [=cv] [`:key void], or an array of
    unknown bound.
    [:zh_CN] [`T] 应当为完整类型，[=cv] [`:key void]，或者未知边界的数组。
[-]

[%@lib is_swappable_with]
[|]
[`template<class T, class U>] [br]
[`struct is_swappable_with;]
[|] [:en] The expressions [`swap(declval<T>(), declval<U>())] and
    [`swap(declval<U>(), declval<T>())] are each well-formed when treated as an
    unevaluated operand ([#term.unevaluated.operand]) in an overload-resolution
    context for swappable values ([#swappable.requirements]).
    [:zh_CN] 表达式 [`swap(declval<T>(), declval<U>())] 和
    [`swap(declval<U>(), declval<T>())]，在对可互相交换的值
    （[#swappable.requirements]）进行重组决议的语境中被当作免求值操作数
    （[#term.unevaluated.operand]）时，都是良构的。

    [:en] Access checking is performed as if in a context unrelated to [`T] and
    [`U].
    [:zh_CN] 如同在与 [`T] 和 [`U] 无关的语境那样进行访问检查。

    [:en] Only the validity of the immediate context of the [`swap] expression
    is considered.
    [:zh_CN] 只考察 [`swap] 表达式的直接语境的有效性。

    [begin:note@tail]
    [:en] The compilation of the expression can result in side effects such as
    the instantiation of class template specializations and function template
    specializations, the generation of implicitly-defined functions, and so on.
    [:zh_CN] 对表达式的编译可能导致的副作用包括对类模板特例和函数模板特例的实例
    化，生成隐式声明的函数，等等。

    [:en] Such side effects are not in the [=lq]immediate context[=rq] and can
    result in the program being ill-formed.
    [:zh_CN] 这些副作用并非处于其“直接语境”，并可能导致程序非良构。
    [end:note]
[|] [:en] [`T] and [`U] shall be complete types, [=cv] [`:key void], or arrays
    of unknown bound.
    [:zh_CN] [`T] 和 [`U] 应当为完整类型，[=cv] [`:key void]，或者未知边界的数组。
[-]

[%@lib is_swappable]
[|]
[`template<class T>] [br]
[`struct is_swappable;]
[|] [:en] For a referenceable type [`T], the same result as
    [`is_swappable_with_v<T&, T&>], otherwise [`false].
    [:zh_CN] 对于可被引用的类型 [`T]，与 [`is_swappable_with_v<T&, T&>] 的结果
    相同，否则为 [`false]。
[|] [:en] [`T] shall be a complete type, [=cv] [`:key void], or an array of
    unknown bound.
    [:zh_CN] [`T] 应当为完整类型，[=cv] [`:key void]，或者未知边界的数组。
[-]

[%@lib is_destructible]
[|]
[`template<class T>] [br]
[`struct is_destructible;]
[|] [:en] Either [`T] is a reference type, or [`T] is a complete object type
    for which the expression [`declval<U&>().~U()] is well-formed when treated
    as an unevaluated operand ([#term.unevaluated.operand]), where [`U] is
    [`remove_all_extents_t<T>].
    [:zh_CN] 要么 [`T] 为引用类型，要么 [`T] 为完整对象类型且表达式
    [`declval<U&>().~U()] 被当作免求值操作数（[#term.unevaluated.operand]）时是
    良构的，其中 [`U] 为 [`remove_all_extents_t<T>]。
[|] [:en] [`T] shall be a complete type, [=cv] [`:key void], or an array of
    unknown bound.
    [:zh_CN] [`T] 应当为完整类型，[=cv] [`:key void]，或者未知边界的数组。
[-]

[%@lib is_trivially_constructible]
[|]
[`template<class T, class... Args>] [br]
[`[`:key struct] is_trivially_constructible;]
[|] [:en] [`is_constructible_v<T, Args...>] is [`true] and the variable
    definition for [`is_constructible], as defined below, is known to call
    no operation that is not trivial ([#term.trivial.type], [#special]).
    [:zh_CN] [`is_constructible_v<T, Args...>] 为 [`true]，且对于下文所定义
    的针对 [`is_constructible] 的变量定义式，已知其不会调用任何非平凡的操作
    （[#term.trivial.type]，[#special]）。
[|] [:en] [`T] and all types in the template parameter pack [`Args] shall be
    complete types, [=cv] [`:key void], or arrays of unknown bound.
    [:zh_CN] [`T] 和模板形参包组 [`Args] 中的所有类型均应当为完整类型，
    [=cv] [`:key void]，或者未知边界的数组。
[-]

[%@lib is_trivially_default_constructible]
[|]
[`template<class T>] [br]
[`struct is_trivially_default_constructible;]
[|] [:en] [`is_trivially_constructible_v<T>] is [`true].
    [:zh_CN] [`is_trivially_constructible_v<T>] 为 [`true]。
[|] [:en] [`T] shall be a complete type, [=cv] [`:key void], or an array of
    unknown bound.
    [:zh_CN] [`T] 应当为完整类型，[=cv] [`:key void]，或者未知边界的数组。
[-]

[%@lib is_trivially_copy_constructible]
[|]
[`template<class T>] [br]
[`struct is_trivially_copy_constructible;]
[|] [:en] For a referenceable type [`T], the same result as
    [`is_trivially_constructible_v<T, const T&>], otherwise [`false].
    [:zh_CN] 对于可被引用的类型 [`T]，与
    [`is_trivially_constructible_v<T, const T&>] 的结果相同，否则为 [`false]。
[|] [:en] [`T] shall be a complete type, [=cv] [`:key void], or an array of
    unknown bound.
    [:zh_CN] [`T] 应当为完整类型，[=cv] [`:key void]，或者未知边界的数组。
[-]

[%@lib is_trivially_move_constructible]
[|]
[`template<class T>] [br]
[`struct is_trivially_move_constructible;]
[|] [:en] For a referenceable type [`T], the same result as
    [`is_trivially_constructible_v<T, T&&>], otherwise [`false].
    [:zh_CN] 对于可被引用的类型 [`T]，与
    [`is_trivially_constructible_v<T, T&&>] 的结果相同，否则为 [`false]。
[|] [:en] [`T] shall be a complete type, [=cv] [`:key void], or an array of
    unknown bound.
    [:zh_CN] [`T] 应当为完整类型，[=cv] [`:key void]，或者未知边界的数组。
[-]

[%@lib is_trivially_assignable]
[|]
[`template<class T, class U>] [br]
[`struct is_trivially_assignable;]
[|] [:en] [`is_assignable_v<T, U>] is [`true] and the assignment, as defined by
    [`is_assignable], is known to call no operation that is not trivial
    ([#term.trivial.type], [#special]).
    [:zh_CN] [`is_assignable_v<T, U>] 为 [`true]，并且其赋值操作（如同对于
    [`is_assignable] 的定义）已知不会调用任何非平凡操作（[#term.trivial.type]，
    [#special]）。
[|] [:en] [`T] and [`U] shall be complete types, [=cv] [`:key void], or arrays
    of unknown bound.
    [:zh_CN] [`T] 和 [`U] 应当为完整类型，[=cv] [`:key void]，或者未知边界的数组。
[-]

[%@lib is_trivially_copy_assignable]
[|]
[`template<class T>] [br]
[`struct is_trivially_copy_assignable;]
[|] [:en] For a referenceable type [`T], the same result as
    [`is_trivially_assignable_v<T&, const T&>], otherwise [`false].
    [:zh_CN] 对于可被引用的类型 [`T]，与
    [`is_trivially_assignable_v<T, const T&>] 的结果相同，否则为 [`false]。
[|] [:en] [`T] shall be a complete type, [=cv] [`:key void], or an array of
    unknown bound.
    [:zh_CN] [`T] 应当为完整类型，[=cv] [`:key void]，或者未知边界的数组。
[-]

[%@lib is_trivially_move_assignable]
[|]
[`template<class T>] [br]
[`struct is_trivially_move_assignable;]
[|] [:en] For a referenceable type [`T], the same result as
    [`is_trivially_assignable_v<T&, T&&>], otherwise [`false].
    [:zh_CN] 对于可被引用的类型 [`T]，与
    [`is_trivially_assignable_v<T, T&&>] 的结果相同，否则为 [`false]。
[|] [:en] [`T] shall be a complete type, [=cv] [`:key void], or an array of
    unknown bound.
    [:zh_CN] [`T] 应当为完整类型，[=cv] [`:key void]，或者未知边界的数组。
[-]

[%@lib is_trivially_destructible]
[|]
[`template<class T>] [br]
[`struct is_trivially_destructible;]
[|] [:en] [`is_destructible_v<T>] is [`true] and [`remove_all_extents_t<T>] is
    either a non-class type or a class type with a trivial destructor.
    [:zh_CN] [`is_destructible_v<T>] 为 [`true]，并且 [`remove_all_extents_t<T>]
    为非类类型或者带有平凡析构函数的类类型。
[|] [:en] [`T] shall be a complete type, [=cv] [`:key void], or an array of
    unknown bound.
    [:zh_CN] [`T] 应当为完整类型，[=cv] [`:key void]，或者未知边界的数组。
[-]

[%@lib is_nothrow_constructible]
[|]
[`template<class T, class... Args>] [br]
[`struct is_nothrow_constructible;]
[|] [:en] [`is_constructible_v<T, Args...>] is [`true] and the variable
    definition for [`is_constructible], as defined below, is known not to throw
    any exceptions ([#expr.unary.noexcept]).
    [:zh_CN] [`is_constructible_v<T, Args...>] 为 [`true]，并且如下文所定义的
    针对 [`is_constructible] 的变量定义式，已知不会抛出任何异常
    （[#expr.unary.noexcept]）。
[|] [:en] [`T] and all types in the template parameter pack [`Args] shall be
    complete types, [=cv] [`:key void], or arrays of unknown bound.
    [:zh_CN] [`T] 和模板形参包组 [`Args] 中的所有类型均应当为完整类型，
    [=cv] [`:key void]，或者未知边界的数组。
[-]

[%@lib is_nothrow_default_constructible]
[|]
[`template<class T>] [br]
[`struct is_nothrow_default_constructible;]
[|] [:en] [`is_nothrow_constructible_v<T>] is [`true].
    [:zh_CN] [`is_nothrow_constructible_v<T>] 为 [`true]。
[|] [:en] [`T] shall be a complete type, [=cv] [`:key void], or an array of
    unknown bound.
    [:zh_CN] [`T] 应当为完整类型，[=cv] [`:key void]，或者未知边界的数组。
[-]

[%@lib is_nothrow_copy_constructible]
[|]
[`template<class T>] [br]
[`struct is_nothrow_copy_constructible;]
[|] [:en] For a referenceable type [`T], the same result as
    [`is_nothrow_constructible_v<T, const T&>], otherwise [`false].
    [:zh_CN] 对于可被引用的类型 [`T]，与
    [`is_nothrow_constructible_v<T, const T&>] 的结果相同，否则为 [`false]。
[|] [:en] [`T] shall be a complete type, [=cv] [`:key void], or an array of
    unknown bound.
    [:zh_CN] [`T] 应当为完整类型，[=cv] [`:key void]，或者未知边界的数组。
[-]

[%@lib is_nothrow_move_constructible]
[|]
[`template<class T>] [br]
[`struct is_nothrow_move_constructible;]
[|] [:en] For a referenceable type [`T], the same result as
    [`is_nothrow_constructible_v<T, T&&>], otherwise [`false].
    [:zh_CN] 对于可被引用的类型 [`T]，与
    [`is_nothrow_constructible_v<T, T&&>] 的结果相同，否则为 [`false]。
[|] [:en] [`T] shall be a complete type, [=cv] [`:key void], or an array of
    unknown bound.
    [:zh_CN] [`T] 应当为完整类型，[=cv] [`:key void]，或者未知边界的数组。
[-]

[%@lib is_nothrow_assignable]
[|]
[`template<class T, class U>] [br]
[`struct is_nothrow_assignable;]
[|] [:en] [`is_assignable_v<T, U>] is [`true] and the assignment is known not to
    throw any exceptions ([#expr.unary.noexcept]).
    [:zh_CN] [`is_assignable_v<T, U>] 为 [`true]，并且其赋值已知不会抛出任何异常
    （[#expr.unary.noexcept]）。
[|] [:en] [`T] and [`U] shall be complete types, [=cv] [`:key void], or arrays
    of unknown bound.
    [:zh_CN] [`T] 和 [`U] 应当为完整类型，[=cv] [`:key void]，或者未知边界的数组。
[-]

[%@lib is_nothrow_copy_assignable]
[|]
[`template<class T>] [br]
[`struct is_nothrow_copy_assignable;]
[|] [:en] For a referenceable type [`T], the same result as
    [`is_nothrow_assignable_v<T&, const T&>], otherwise [`false].
    [:zh_CN] 对于可被引用的类型 [`T]，与
    [`is_nothrow_assignable_v<T, const T&>] 的结果相同，否则为 [`false]。
[|] [:en] [`T] shall be a complete type, [=cv] [`:key void], or an array of
    unknown bound.
    [:zh_CN] [`T] 应当为完整类型，[=cv] [`:key void]，或者未知边界的数组。
[-]

[%@lib is_nothrow_move_assignable]
[|]
[`template<class T>] [br]
[`struct is_nothrow_move_assignable;]
[|] [:en] For a referenceable type [`T], the same result as
    [`is_nothrow_assignable_v<T&, T&&>], otherwise [`false].
    [:zh_CN] 对于可被引用的类型 [`T]，与
    [`is_nothrow_assignable_v<T, T&&>] 的结果相同，否则为 [`false]。
[|] [:en] [`T] shall be a complete type, [=cv] [`:key void], or an array of
    unknown bound.
    [:zh_CN] [`T] 应当为完整类型，[=cv] [`:key void]，或者未知边界的数组。
[-]

[%@lib is_nothrow_swappable_with]
[|]
[`template<class T, class U>] [br]
[`struct is_nothrow_swappable_with;]
[|] [:en] [`is_swappable_with_v<T, U>] is [`true] and each [`swap] expression of
    the definition of [`is_swappable_with<T, U>] is known not to throw any
    exceptions ([#expr.unary.noexcept]).
    [:zh_CN] [`is_swappable_with_v<T, U>] 为 [`true]，并且
    [`is_swappable_with<T, U>] 的定义式中的各个 [`swap] 表达式已知均不会抛出任何
    异常（[#expr.unary.noexcept]）。
[|] [:en] [`T] and [`U] shall be complete types, [=cv] [`:key void], or arrays
    of unknown bound.
    [:zh_CN] [`T] 和 [`U] 应当为完整类型，[=cv] [`:key void]，或者未知边界的数组。
[-]

[%@lib is_nothrow_swappable]
[|]
[`template<class T>] [br]
[`struct is_nothrow_swappable;]
[|] [:en] For a referenceable type [`T], the same result as
    [`is_nothrow_swappable_with_v<T&, T&>], otherwise [`false].
    [:zh_CN] 对于可被引用的类型 [`T]，与
    [`is_nothrow_swappable_with_v<T&, T&>] 的结果相同，否则为 [`false]。
[|] [:en] [`T] shall be a complete type, [=cv] [`:key void], or an array of
    unknown bound.
    [:zh_CN] [`T] 应当为完整类型，[=cv] [`:key void]，或者未知边界的数组。
[-]

[%@lib is_nothrow_destructible]
[|]
[`template<class T>] [br]
[`struct is_nothrow_destructible;]
[|] [:en] [`is_destructible_v<T>] is [`true] and the indicated destructor is
    known not to throw any exceptions ([#expr.unary.noexcept]).
    [:zh_CN] [`is_destructible_v<T>] 为 [`true]，并且所指定的析构函数已知不会
    抛出任何异常（[#expr.unary.noexcept]）。
[|] [:en] [`T] shall be a complete type, [=cv] [`:key void], or an array of
    unknown bound.
    [:zh_CN] [`T] 应当为完整类型，[=cv] [`:key void]，或者未知边界的数组。

[%@lib is_implicit_lifetime]
[|]
[`template<class T>] [br]
[`struct is_implicit_lifetime;]
[|] [:en] [`T] is an implicit-lifetime type ([#term.implicit.lifetime.type]).
    [:zh_CN] [`T] 为隐式生存期类型（[#term.implicit.lifetime.type]）。
[|] [:en] [`T] shall be an array type, a complete type, or [=cv] [`:key void].
    [:zh_CN] [`T] 应当为数组类型，完整类型，或者 [=cv] [`:key void]。

[%@lib has_virtual_destructor]
[|]
[`template<class T>] [br]
[`struct has_virtual_destructor;]
[|] [:en] [`T] has a virtual destructor ([#class.dtor])
    [:zh_CN] [`T] 带有虚析构函数（[#class.dtor]）
[|] [:en] If [`T] is a non-union class type, [`T] shall be a complete type.
    [:zh_CN] 当 [`T] 是非联合体类类型时，[`T] 应当是完整类型。

[%@lib has_unique_object_representations]
[|]
[`template<class T>] [br]
[`struct has_unique_object_representations;]
[|] [:en] For an array type [`T], the same result as
    [`has_unique_object_representations_v<remove_all_extents_t<T>>], otherwise
    [=seebelow].
    [:zh_CN] 对于数组类型 [`T]，其结果与
    [`has_unique_object_representations_v<remove_all_extents_t<T>>] 相同，否则
    [=seebelow]。
[|] [:en] [`T] shall be a complete type, [=cv] [`:key void], or an array of
    unknown bound.
    [:zh_CN] [`T] 应当为完整类型，[=cv] [`:key void]，或者未知边界的数组。
[-]

[%@lib reference_constructs_from_temporary]
[|]
[`template<class T, class U>] [br]
[`struct reference_constructs_from_temporary;]
[|] [:en] [`T] is a reference type, and the initialization [`T t([*VAL]<U>);] is
    well-formed and binds [`t] to a temporary object whose lifetime is extended
    ([#class.temporary]).
    [:zh_CN] [`T] 为引用类型，并且初始化 [`T t([*VAL]<U>);] 良构且将 [`t] 绑定到
    一个扩展了生存期的临时对象（[#class.temporary]）。

    [:en] Access checking is performed as if in a context unrelated to [`T] and
    [`U].
    [:zh_CN] 如同在与 [`T] 和 [`U] 无关的语境那样进行访问检查。

    [:en] Only the validity of the immediate context of the variable
    initialization is considered.
    [:zh_CN] 只考察变量初始化的直接语境的有效性。

    [begin:note@tail]
    [:en] The initialization can result in effects such as the instantiation of
    class template specializations and function template specializations, the
    generation of implicitly-defined functions, and so on.
    [:zh_CN] 初始化可能导致的效果包括对类模板特例和函数模板特例的实例化，生成
    隐式声明的函数，等等。

    [:en] Such effects are not in the [=lq]immediate context[=rq] and can
    result in the program being ill-formed.
    [:zh_CN] 这些效果并非处于其“直接语境”，并可能导致程序非良构。
    [end:note]
[|] [:en] [`T] and [`U] shall be complete types, [=cv] [`:key void], or arrays
    of unknown bound.
    [:zh_CN] [`T] 和 [`U] 应当为完整类型，[=cv] [`:key void]，或者未知边界的数组。
[-]

[%@lib reference_converts_from_temporary]
[|]
[`template<class T, class U>] [br]
[`struct reference_converts_from_temporary;]
[|] [:en] [`T] is a reference type, and the initialization [`T t = [*VAL]<U>;] is
    well-formed and binds [`t] to a temporary object whose lifetime is extended
    ([#class.temporary]).
    [:zh_CN] [`T] 为引用类型，并且初始化 [`T t = [*VAL]<U>;] 良构且将 [`t] 绑定到
    一个扩展了生存期的临时对象（[#class.temporary]）。

    [:en] Access checking is performed as if in a context unrelated to [`T] and [`U].
    [:zh_CN] 如同在与 [`T] 和 [`U] 无关的语境那样进行访问检查。

    [:en] Only the validity of the immediate context of the variable
    initialization is considered.
    [:zh_CN] 只考察变量初始化的直接语境的有效性。

    [begin:note@tail]
    [:en] The initialization can result in effects such as the instantiation of
    class template specializations and function template specializations, the
    generation of implicitly-defined functions, and so on.
    [:zh_CN] 初始化可能导致的效果包括对类模板特例和函数模板特例的实例化，生成
    隐式声明的函数，等等。

    [:en] Such effects are not in the [=lq]immediate context[=rq] and can
    result in the program being ill-formed.
    [:zh_CN] 这些效果并非处于其“直接语境”，并可能导致程序非良构。
    [end:note]
[|] [:en] [`T] and [`U] shall be complete types, [=cv] [`:key void], or arrays
    of unknown bound.
    [:zh_CN] [`T] 和 [`U] 应当为完整类型，[=cv] [`:key void]，或者未知边界的数组。
[-]
[table:end]

[para]
[begin:example]
[codeblock]
is_const_v<const volatile int>      // [`true]
is_const_v<const int*>              // [`false]
is_const_v<const int&>              // [`false]
is_const_v<int[3]>                  // [`false]
is_const_v<const int[3]>            // [`true]
[codeblock:end]
[end:example]

[para]
[begin:example]
[codeblock]
remove_const_t<const volatile int>  // [`volatile int]
remove_const_t<const int* const>    // [`const int*]
remove_const_t<const int&>          // [`const int&]
remove_const_t<const int[3]>        // [`int`[3`]]
[codeblock:end]
[end:example]

[para]
[begin:example]
[codeblock]
// [:en] Given: \
[:zh_CN] 给定：
struct P final { };
union U1 { };
union U2 final { };

// [:en] the following assertions hold: \
[:zh_CN] 下列断言成立：
static_assert(!is_final_v<int>);
static_assert(is_final_v<P>);
static_assert(!is_final_v<U1>);
static_assert(is_final_v<U2>);
[codeblock:end]
[end:example]

[%@lib is_constructible]
[para]
[:en] The predicate condition for a template specialization
[`is_constructible<T, Args...>] shall be satisfied if and only if the following
variable definition would be well-formed for some invented variable [`t]:
[:zh_CN] 当且仅当以下变量定义式对于某个虚构的变量 [`t] 是良构的，模板特例
[`is_constructible<T, Args...>] 的谓词条件应当被满足：

[codeblock]
T t(declval<Args>()...);
[codeblock:end]

[begin:note]
[:en] These tokens are never interpreted as a function declaration.
[:zh_CN] 这些记号不会被解释成函数声明式。
[end:note]

[:en] Access checking is performed as if in a context unrelated to [`T] and any
of the [`Args].
[:zh_CN] 如同在与 [`T] 和任何 [`Args] 均无关的语境中那样进行访问检查。

[:en] Only the validity of the immediate context of the variable initialization
is considered.
[:zh_CN] 只考察变量初始化的直接语境的有效性。

[begin:note]
[:en] The evaluation of the initialization can result in side effects such as
the instantiation of class template specializations and function template
specializations, the generation of implicitly-defined functions, and so on.
[:zh_CN] 对初始化的求值可能导致的副作用包括对类模板特例和函数模板特例的实例化，生成
隐式声明的函数，等等。

[:en] Such side effects are not in the [=lq]immediate context[=rq] and can
result in the program being ill-formed.
[:zh_CN] 这些副作用并非处于其“直接语境”，并可能导致程序非良构。
[end:note]

[%@lib has_unique_object_representations]
[para]
[:en] The predicate condition for a template specialization
[`has_unique_object_representations<T>] shall be satisfied if and only if
[:zh_CN]当且仅当以下情况下，模板特例 [`has_unique_object_representations<T>] 的
谓词条件应当被满足：

[list]
[item]
[:en] [`T] is trivially copyable, and
[:zh_CN] [`T] 是可平凡复制的，

[item]
[:en] any two objects of type [`T] with the same value have the same object
representation, where
[:zh_CN] [`T] 类型的任意两个具有相同值的对象，都具有相同的值表示，其中

[list]
[item]
[:en] two objects of array or non-union class type are considered to have the
same value if their respective sequences of direct subobjects have the same
values, and
[:zh_CN] 两个数组或非联合体类类型的对象，当它们的对应直接子对象都具有相同的值时，
被当成具有相同的值，且
[item]
[:en] two objects of union type are considered to have the same value if they
have the same active member and the corresponding members have the same value.
[:zh_CN] 两个联合体类型的对象，当它们具有相同的活跃成员，且相应的成员具有相同的
值时，被当成具有相同的值。
[list:end]
[list:end]

[:en] The set of scalar types for which this condition holds is [?impldef which
scalar types have unique object representations].
[:zh_CN] 符合这一条件的标量类型的集合是[?impldef 哪些标量类型具有唯一的对象表示]。

[begin:note]
[:en] If a type has padding bits, the condition does not hold; otherwise, the
condition holds true for integral types.
[:zh_CN] 如果某个类型带有填充位，则无法符合这一条件；否则对于整型类型这一条件均为真。
[end:note]
