[section#ratio.reflection.exception
    [:en] Class [`exception]
    [:zh_CN] 类 [`exception]
]

[%@lib exception]
[codeblock:synopsis]
namespace std::meta {
  class exception : public std::exception {
  private:
    optional<string> [[redoc("*>")]]what_;     // [=expos]
    u8string [[redoc("*>")]]u8what_;           // [=expos]
    info [[redoc("*>")]]from_;                 // [=expos]
    source_location [[redoc("*>")]]where_;     // [=expos]

  public:
    consteval exception(u8string_view what, info from,
                        source_location where = source_location::current()) noexcept;

    consteval exception(string_view what, info from,
                        source_location where = source_location::current()) noexcept;

    exception(const exception&) = default;
    exception(exception&&) = default;

    exception& operator=(const exception&) = default;
    exception& operator=(exception&&) = default;

    constexpr const char* what() const noexcept override;
    consteval u8string_view u8what() const noexcept;
    consteval info from() const noexcept;
    consteval source_location where() const noexcept;
  };
}
[codeblock:end]

[para]
[:en] Reflection functions throw exceptions of type [`meta::exception] to signal an error.
[:zh_CN] 各反射函数通过抛出 [`meta::exception] 类型的异常来报告错误。

[:en] [`meta::exception] is a consteval-only type.
[:zh_CN] [`meta::exception] 是仅 consteval 类型。

[%@lib@ctor exception]
[codeblock:declaration]
consteval exception(u8string_view what, info from,
                    source_location where = source_location::current()) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*u8what_] with [`what], [*from_] with [`from], and [*where_] with [`where].
[:zh_CN] 以 [`what] 初始化 [*u8what_]，以 [`from] 初始化 [*from_]，并以 [`where] 初始化 [*where_]。

[:en] If [`what] can be represented in the ordinary literal encoding, initializes
[*what_] with [`what], transcoded from UTF-8 to the ordinary literal encoding.
[:zh_CN] 如果 [`what] 可以用普通字面编码表示，则以从 UTF-8 转码为普通字面编码的
[`what] 初始化 [*what_]。

[:en] Otherwise, [*what_] is value-initialized.
[:zh_CN] 否则，[*what_] 被值初始化。
[div:end]

[%@lib@ctor exception]
[codeblock:declaration]
consteval exception(string_view what, info from,
                    source_location where = source_location::current()) noexcept;
[codeblock:end]

[div:description]
[para:constantwhen]
[:en] [`what] designates a sequence of characters that can be encoded in UTF-8.
[:zh_CN] [`what] 指名一个可以按 UTF-8 编码的字符序列。

[para:effects]
[:en] Initializes [*what_] with [`what], [*u8what_] with [`what] transcoded from the
ordinary literal encoding to UTF-8, [*from_] with [`from], and [*where_] with [`where].
[:zh_CN] 以 [`what] 初始化 [*what_]，以从普通字面编码转码为 UTF-8 的 [`what] 初始化
[`u8what_]，以 [`from] 初始化 [*from_]，并以 [`where] 初始化 [*where_]。
[div:end]

[%@lib@member what[!exception]]
[codeblock:declaration]
constexpr const char* what() const noexcept override;
[codeblock:end]

[div:description]
[para:constantwhen]
[:en] [`[*what_].has_value()] is [`true].
[:zh_CN] [`[*what_].has_value()] 为 [`true]。

[para:returns]
[:en] [`[*what_]->c_str()].
[:zh_CN] [`[*what_]->c_str()]。
[div:end]

[%@lib@member u8what[!exception]]
[codeblock:declaration]
consteval u8string_view u8what() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [*u8what_].
[:zh_CN] [*u8what_]。
[div:end]

[%@lib@member from[!exception]]
[codeblock:declaration]
consteval info from() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [*from_].
[:zh_CN] [*from_]。
[div:end]

[%@lib@member where[!exception]]
[codeblock:declaration]
consteval source_location where() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [*where_].
[:zh_CN] [*where_]。
[div:end]
