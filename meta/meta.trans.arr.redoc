[section#meta.trans.arr
    [:en] Array modifications
    [:zh_CN] 数组改造
]

[para]
[:en]
The templates specified in [#:tab#meta.trans.arr] modify array types.
[:zh_CN]
[#:tab#meta.trans.arr] 中给出的各模板修改数组类型。

[table:grid#meta.trans.arr
    [:en] Array modifications
    [:zh_CN] 数组改造
    [|  [:en] Template
        [:zh_CN] 模板 ]
    [|  [:en] Comments
        [:zh_CN] 注释 ]
]

[%@lib remove_extent]
[|]
[`template<class T>] [br]
[`struct remove_extent;]
[|] [:en] If [`T] is a type [=lq]array of [`U][=rq], the member typedef
    [`type] denotes [`U], otherwise [`T].
    [:zh_CN] 若 [`T] 是类型“[`U] 的数组”，则成员 typedef [`type] 代表 [`U]，否则
    为 [`T]。

    [begin:note@tail]
    [:en] For multidimensional arrays, only the first array dimension is removed.
    [:zh_CN] 对于多维数组，只移除第一个数组维度。

    [:en] For a type [=lq]array of [`const U][=rq], the resulting type is
    [`const U].
    [:zh_CN] 对于类型“[`const U] 的数组”，结果的类型为 [`const U]。
    [end:note]
[-]

[%@lib remove_all_extents]
[|]
[`template<class T>] [br]
[`struct remove_all_extents;]
[|] [:en] If [`T] is [=lq]multidimensional array of [`U][=rq], the resulting
    member typedef [`type] denotes [`U], otherwise [`T].
    [:zh_CN] 若 [`T] 为“[`U] 的多维数组”，结果的成员 typedef [`type] 代表 [`U]，
    否则为 [`T]。
[-]
[table:end]

[para]
[begin:example]
[codeblock]
// [:en] the following assertions hold: \
[:zh_CN] 下列断言均成立：
static_assert(is_same_v<remove_extent_t<int>, int>);
static_assert(is_same_v<remove_extent_t<int[2]>, int>);
static_assert(is_same_v<remove_extent_t<int[2][3]>, int[3]>);
static_assert(is_same_v<remove_extent_t<int[][3]>, int[3]>);
[codeblock:end]
[end:example]

[para]
[begin:example]
[codeblock]
// [:en] the following assertions hold: \
[:zh_CN] 下列断言均成立：
static_assert(is_same_v<remove_all_extents_t<int>, int>);
static_assert(is_same_v<remove_all_extents_t<int[2]>, int>);
static_assert(is_same_v<remove_all_extents_t<int[2][3]>, int>);
static_assert(is_same_v<remove_all_extents_t<int[][3]>, int>);
[codeblock:end]
[end:example]
