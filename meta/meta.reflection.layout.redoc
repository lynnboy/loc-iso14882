[section#ratio.reflection.layout
    [:en] Reflection layout queries
    [:zh_CN] 反射布局查询
]

[%@lib member_offset]
[codeblock:synopsis]
struct member_offset {
  ptrdiff_t bytes;
  ptrdiff_t bits;
  constexpr ptrdiff_t total_bits() const;
  auto operator<=>(const member_offset&) const = default;
};
[codeblock:end]

[%@lib@member member_offset[!total_bits]]
[codeblock:declaration]
constexpr ptrdiff_t member_offset::total_bits() const;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`bytes * CHAR_BIT + bits].
[:zh_CN] [`bytes * CHAR_BIT + bits]。
[div:end]

[%@lib offset_of]
[codeblock:declaration]
consteval member_offset offset_of(info r);
[codeblock:end]

[div:description]
[para]
[:en] Let [$V] be the offset in bits from the beginning of a complete object
of the type represented by [`parent_of(r)]
to the subobject associated with the entity represented by [`r].
[:zh_CN] 令 [$V] 为 [`parent_of(r)] 所代表类型的完整对象中，从开始到 [`r] 代表的
实体所关联的子对象按位计的偏移量。

[para:returns]
[:en] [`{[$V] / CHAR_BIT, [$V] % CHAR_BIT}].
[:zh_CN] [`{[$V] / CHAR_BIT, [$V] % CHAR_BIT}]。

[para:throws]
[:en] [`meta::exception] unless [`r] represents a non-static data member,
unnamed bit-field, or direct base class relationship [$(D, B)]
for which either [$B] is not a virtual base class or [$D] is not an abstract class.
[:zh_CN] 除非 [`r] 代表非静态数据成员，无名位字段，或者直接基类关系 [$(D, B)]
而 [$B] 并非虚基类或 [$D] 不是抽象类，否则抛出 [`meta::exception]。
[div:end]

[%@lib size_of]
[codeblock:declaration]
consteval size_t size_of(info r);
[codeblock:end]

[div:description]
[para:returns]
[:en] If [`r] represents
[:zh_CN] 如果 [`r] 代表
[list]
[item]
[:en@~] a non-static data member of type [$T],
[:zh_CN@~] 类型 [`T] 的非静态数据成员，
[item]
[:en@~] a data member description [$(T, N, A, W, \mathit{NUA})], or
[:zh_CN@~] 数据成员描述 [$(T, N, A, W, \mathit{NUA})]，或者
[item]
[:en@~] [`dealias(r)] represents a type [$T],
[:zh_CN@~] [`dealias(r)] 代表某个类型 [$T]，
[list:end]
[:en@~] then [`sizeof([$T])] if [$T] is not a reference type
and [`size_of(add_pointer(^^[$T]))] otherwise.
[:zh_CN@~] 则当 [$T] 不是引用类型时返回 [`sizeof([$T])]，否则返回
[`size_of(add_pointer(^^[$T]))]。

[:en] Otherwise, [`size_of(type_of(r))].
[:zh_CN] 否则，返回 [`size_of(type_of(r))]。

[begin:note]
[:en] It is possible that while [`sizeof(char) == size_of(^^char)] is [`true],
that [`sizeof(char&) == size_of(^^char&)] is [`false].
[:zh_CN] 在 [`sizeof(char) == size_of(^^char)] 为 [`true] 的同时，有可能
[`sizeof(char&) == size_of(^^char&)] 为 [`false]。

[:en] If [`b] represents a direct base class relationship of an empty base class,
then [`size_of(b) > 0] is [`true].
[:zh_CN] 如果 [`b] 表示空基类的直接基类关系，则 [`size_of(b) > 0] 为 [`true]。
[end:note]

[para:throws]
[:en] [`meta::exception] unless all of the following conditions are met:
[:zh_CN] 除非满足下列所有条件，否则抛出 [`meta::exception]：
[list]
[item]
[:en] [`dealias(r)] is a reflection of a type, object, value, variable of
non-reference type, non-static data member that is not a bit-field, direct base
class relationship, or data member description [$(T, N, A, W, \mathit{NUA})] ([#class.mem.general])
where [$W] is not [$\bot].
[:zh_CN] [`dealias(r)] 是某个类型、对象、值、非引用类型变量、并非位字段的
非静态数据成员，直接基类关系或者数据成员描述 [$(T, N, A, W, \mathit{NUA})]（[#class.mem.general]），
其中 [$W] 不是 [$\bot]。
[item]
[:en] If [`dealias(r)] represents a type, then [`is_complete_type(r)] is [`true].
[:zh_CN] 若 [`dealias(r)] 表示类型，则 [`is_complete_type(r)] 为 [`true]。
[list:end]
[div:end]

[%@lib alignment_of]
[codeblock:declaration]
consteval size_t alignment_of(info r);
[codeblock:end]

[div:description]
[para:returns]
[list]
[item]
[:en] If [`dealias(r)] represents a type [$T], then [`alignment_of(add_pointer(r))]
if [$T] is a reference type and the alignment requirement of [$T] otherwise.
[:zh_CN] 如果 [`dealias(r)] 表示某个类型 [$T]，则当 [$T] 是引用类型时返回
[`alignment_of(add_pointer(r))]，否则返回 [$T] 的对齐要求。
[item]
[:en] Otherwise, if [`dealias(r)] represents a variable or object,
then the alignment requirement of the variable or object.
[:zh_CN] 否则，如果 [`dealias(r)] 表示某个变量或对象，则返回该变量或对象的对齐要求。
[item]
[:en] Otherwise, if [`r] represents a direct base class relationship,
then [`alignment_of(type_of(r))].
[:zh_CN] 否则，如果 [`r] 表示一项直接基类关系，则返回 [`alignment_of(type_of(r))]。
[item]
[:en] Otherwise, if [`r] represents a non-static data member [$M] of a class [$C],
then the alignment of the direct member subobject corresponding to [$M] of
a complete object of type [$C].
[:zh_CN] 否则，如果 [`r] 表示类 [$C] 的非静态数据成员 [$M]，则返回 [$C] 类型的
完整对象中 [$M] 的对应直接成员子对象的对齐。
[item]
[:en] Otherwise, [`r] represents a data member description
[$(T, N, A, W, \mathit{NUA})] ([#class.mem.general]).
[:zh_CN] 否则，[`r] 表示一项数据成员描述 [$(T, N, A, W, \mathit{NUA})]（[#class.mem.general]）。

[:en] If [$A] is not [$\bot], then the value of [$A].
[:zh_CN] 如果 [$A] 不是 [$\bot]，则返回 [$A] 的值。

[:en] Otherwise, [`alignment_of(^^[$T])].
[:zh_CN] 否则，返回 [`alignment_of(^^[$T])]。
[list:end]

[para:throws]
[:en] [`meta::exception] unless all of the following conditions are met:
[:zh_CN] 除非满足下列所有条件，否则抛出 [`meta::exception]：
[list]
[item]
[:en] [`dealias(r)] is a reflection of a type, object, variable of non-reference type,
non-static data member that is not a bit-field, direct base class relationship,
or data member description.
[:zh_CN] [`dealias(r)] 是某个类型、对象、非引用类型变量、并非位字段的非静态数据成员，
直接基类关系或者数据成员描述。
[item]
[:en] If [`dealias(r)] represents a type, then [`is_complete_type(r)] is [`true].
[:zh_CN] 若 [`dealias(r)] 表示类型，则 [`is_complete_type(r)] 为 [`true]。
[list:end]
[div:end]

[%@lib bit_size_of]
[codeblock:declaration]
consteval size_t bit_size_of(info r);
[codeblock:end]

[div:description]
[para:returns]
[list]
[item]
[:en] If [`r] represents an unnamed bit-field or a non-static data member that
is a bit-field with width [$W], then [$W].
[:zh_CN] 否则，如果 [`r] 表示一个宽度为 [$W] 的无名位字段或者作为位字段的
非静态数据成员，则返回 [$W]。
[item]
[:en] Otherwise, if [`r] represents a data member description
[$(T, N, A, W, \mathit{NUA})] ([#class.mem.general]) and [$W] is not [$\bot], then [$W].
[:zh_CN] 否则，如果 [`r] 表示一项数据成员描述 [$(T, N, A, W, \mathit{NUA})]（[#class.mem.general]）
且 [$W] 不是 [$\bot]，则返回 [$W]。
[item]
[:en] Otherwise, [`CHAR_BIT * size_of(r)].
[:zh_CN] 否则，返回 [`CHAR_BIT * size_of(r)]。
[list:end]

[para:throws]
[:en] [`meta::exception] unless all of the following conditions are met:
[:zh_CN] 除非满足下列所有条件，否则抛出 [`meta::exception]：
[list]
[item]
[:en] [`dealias(r)] is a reflection of a type, object, value, variable of
non-reference type, non-static data member, unnamed bit-field,
direct base class relationship, or data member description.
[:zh_CN] [`dealias(r)] 是某个类型、对象、值、非引用类型变量、非静态数据成员、
无名位字段、直接基类关系或者数据成员描述。
[item]
[:en] If [`dealias(r)] represents a type [$T], there is a point within the
evaluation context from which [$T] is not incomplete.
[:zh_CN] 若 [`dealias(r)] 表示类型 [$T]，则求值语境中存在使得 [$T] 完整的位置。
[list:end]
[div:end]
