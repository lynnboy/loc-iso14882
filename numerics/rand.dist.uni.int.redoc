[/
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% uniform_int_distribution distribution:
/]

[section#rand.dist.uni.int
    [:en] Class template [`uniform_int_distribution]
    [:zh_CN] 类模板 [`uniform_int_distribution]
]

[%@lib uniform_int_distribution]
[%[:en]random number distribution[![`uniform_int_distribution]]
  [:zh_CN]随机数分布[![`uniform_int_distribution]]]

[para]
[:en] A [`uniform_int_distribution] random number distribution produces random
integers [$i], [$a \leq i \leq b], distributed according to the constant
discrete probability function
[%discrete probability function[![`uniform_int_distribution]]]
[%[`uniform_int_distribution][!discrete probability function]]
[:zh_CN] [`uniform_int_distribution] 随机数分布产生随机整数 [$i]，
[$a \leq i \leq b]，其分布符合常离散概率函数
[%离散概率函数[![`uniform_int_distribution]]]
[%[`uniform_int_distribution][!离散概率函数]]

[math]
P(i\,|\,a,b) = 1 / (b - a + 1) \text{ .}
[math:end]

[%@lib uniform_int_distribution]
[%@lib@member result_type[!uniform_int_distribution]]
[codeblock:synopsis]
template<class IntType = int>
  class uniform_int_distribution {
  public:
    // [:en] types \
       [:zh_CN] 类型
    using result_type = IntType;
    using param_type  = [[redoc("[=unspec]")]];

    // [:en] constructors and reset functions \
       [:zh_CN] 构造函数和重置函数
    uniform_int_distribution() : uniform_int_distribution(0) {}
    explicit uniform_int_distribution(IntType a, IntType b = numeric_limits<IntType>::max());
    explicit uniform_int_distribution(const param_type& parm);
    void reset();

    // [:en] generating functions \
       [:zh_CN] 生成函数
    template<class URBG>
      result_type operator()(URBG& g);
    template<class URBG>
      result_type operator()(URBG& g, const param_type& parm);

    // [:en] property functions \
       [:zh_CN] 属性函数
    result_type a() const;
    result_type b() const;
    param_type param() const;
    void param(const param_type& parm);
    result_type min() const;
    result_type max() const;
  };
[codeblock:end]

[%@lib@ctor uniform_int_distribution]
[codeblock:declaration]
explicit uniform_int_distribution(IntType a, IntType b = numeric_limits<IntType>::max());
[codeblock:end]

[div:description]
[para:requires]
[:en] [$[`a] \leq [`b]].
[:zh_CN] [$[`a] \leq [`b]]。

[para:effects]
[:en] Constructs a [`uniform_int_distribution] object; [`a] and [`b] correspond
to the respective parameters of the distribution.
[:zh_CN] 构造一个 [`uniform_int_distribution] 对象；[`a] 和 [`b] 对应于分布的
相应形参。
[div:end]

[%@lib@member a[!uniform_int_distribution]]
[codeblock:declaration]
result_type a() const;
[codeblock:end]

[div:description]
[para:returns]
[:en] The value of the [`a] parameter with which the object was constructed.
[:zh_CN] 该对象构造时的形参 [`a] 的值。
[div:end]

[%@lib@member b[!uniform_int_distribution]]
[codeblock:declaration]
result_type b() const;
[codeblock:end]

[div:description]
[para:returns]
[:en] The value of the [`b] parameter with which the object was constructed.
[:zh_CN] 该对象构造时的形参 [`b] 的值。
[div:end]
