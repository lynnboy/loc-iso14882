[/
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% gamma_distribution
/]

[section#rand.dist.pois.gamma
    [:en] Class template [`gamma_distribution]
    [:zh_CN] 类模板 [`gamma_distribution]
]

[%@lib gamma_distribution]

[para]
[:en] A [`gamma_distribution] random number distribution produces random numbers
[$x > 0] distributed according to the probability density function
[:zh_CN] [`gamma_distribution] 随机数分布产生随机数 [$x > 0]，
其分布符合概率密度函数

[math]
p(x\,|\,\alpha,\beta) =
  \frac{e^{-x/\beta}}{\beta^{\alpha} \cdot \Gamma(\alpha)} \, \cdot \, x^{\, \alpha-1}
  \text{ .}
[math:end]

[%@lib gamma_distribution]
[%@lib result_type[!gamma_distribution]]
[codeblock:synopsis]
namespace std {
  template<class RealType = double>
  class gamma_distribution {
  public:
    // [:en] types \
    [:zh_CN] 类型
    using result_type = RealType;
    using param_type  = [[redoc("[=unspec]")]];

    // [:en] constructors and reset functions \
    [:zh_CN] 构造函数和重置函数
    gamma_distribution() : gamma_distribution(1.0) {}
    explicit gamma_distribution(RealType alpha, RealType beta = 1.0);
    explicit gamma_distribution(const param_type& parm);
    void reset();

    // [:en] equality operators \
    [:zh_CN] 相等性运算符
    friend bool operator==(const gamma_distribution& x, const gamma_distribution& y);

    // [:en] generating functions \
    [:zh_CN] 生成函数
    template<class URBG>
      result_type operator()(URBG& g);
    template<class URBG>
      result_type operator()(URBG& g, const param_type& parm);

    // [:en] property functions \
    [:zh_CN] 属性函数
    RealType alpha() const;
    RealType beta() const;
    param_type param() const;
    void param(const param_type& parm);
    result_type min() const;
    result_type max() const;

    // [:en] inserters and extractors \
    [:zh_CN] 插入符和提取符
    template<class charT, class traits>
      friend basic_ostream<charT, traits>&
        operator<<(basic_ostream<charT, traits>& os, const gamma_distribution& x);
    template<class charT, class traits>
      friend basic_istream<charT, traits>&
        operator>>(basic_istream<charT, traits>& is, gamma_distribution& x);
  };
}
[codeblock:end]

[%@lib@ctor gamma_distribution]
[codeblock:declaration]
explicit gamma_distribution(RealType alpha, RealType beta = 1.0);
[codeblock:end]

[div:description]
[para:expects]
[:en] [$0 < [`alpha]] and [$0 < [`beta]].
[:zh_CN] [$0 < [`alpha]] 且 [$0 < [`beta]]。

[para:remarks]
[:en] [`alpha] and [`beta] correspond to the parameters of the distribution.
[:zh_CN] [`alpha] 和 [`beta] 对应于分布的相应形参。
[div:end]

[%@lib@member alpha[!gamma_distribution]]
[codeblock:declaration]
RealType alpha() const;
[codeblock:end]

[div:description]
[para:returns]
[:en] The value of the [`alpha] parameter with which the object was constructed.
[:zh_CN] 该对象构造时的形参 [`alpha] 的值。
[div:end]

[%@lib@member beta[!gamma_distribution]]
[codeblock:declaration]
RealType beta() const;
[codeblock:end]

[div:description]
[para:returns]
[:en] The value of the [`beta] parameter with which the object was constructed.
[:zh_CN] 该对象构造时的形参 [`beta] 的值。
[div:end]
