[/
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Random Number Engine requirements:
/]

[section#rand.req.eng
    [:en] Random number engine requirements
    [:zh_CN] 随机数引擎规定

[%:begin#random.number.engine.requirements
    [:en] random number engine [!requirements]
    [:zh_CN] 随机数引擎[!规定]
]
[%:begin#requirements.random.number.engine
    [:en] requirements [!random number engine]
    [:zh_CN] 规定[!随机数引擎]
]
]

[para]
[:en] A [+:% random number engine] (commonly shortened to [+:% engine]) [`e] of
type [`E] is a uniform random bit generator that additionally meets the
requirements (e.g., for seeding and for input/output) specified in this
subclause.
[:zh_CN] 类型 [`E] 的[+:% 随机数引擎]（常简称为[+:% 引擎]）[`e]，是额外符合本
子条款所指定的规定（比如有关播种以及 I/O 的规定）的均匀随机位生成器。

[para]
[:en] At any given time, [`e] has a state [`e][$_i] for some integer
[$i \geq 0].
[:zh_CN] 在任意给定时间，[`e] 对于整数 [$i \geq 0] 具有状态 [`e][$_i]。

[:en] Upon construction, [`e] has an initial state [`e][_0].
[:zh_CN] 当构造完成时，[`e] 具有初始状态 [`e][_0]。

[:en] An engine[=']s state may be established via a constructor, a [`seed]
function, assignment, or a suitable [`operator>>].
[:zh_CN] 引擎的状态可以通过构造函数，[`seed] 函数，赋值，或者适当的
[`operator>>] 来建立。

[para]
[:en] [`E][=']s specification shall define:
[:zh_CN] [`E] 的说明中应当定义：

[list]
[item]
[:en] the size of [`E][=']s state in multiples of the size of [`result_type],
given as an integral constant expression;
[:zh_CN] [`E] 的状态的大小相对于 [`result_type] 的大小的倍数，作为整型常量表达式
给出；
[item]
[:en] the [+:% transition algorithm] [$\mathsf{TA}] by which [`e][=']s state
[`e][$_i] is advanced to its [+:% successor state] [`e][$_{i+1}]; and
[:zh_CN] [+:% 转移算法] [$\mathsf{TA}]，通过它将 [`e] 的状态 [`e][$_i] 推进到其
[+:% 后继状态] [`e][$_{i+1}]；以及
[item]
[:en] the [+:% generation algorithm] [$\mathsf{GA}] by which an engine[=']s
state is mapped to a value of type [`result_type].
[:zh_CN] [+:% 生成算法] [$\mathsf{GA}]，通过它将引擎的状态映射为 [`result_type]
类型的值。
[list:end]

[para]
[:en] A class [`E] that meets the requirements of a uniform random bit generator
([#rand.req.urng]) also meets the requirements of a [+:% random number engine]
if the expressions shown in [#:tab rand.req.eng] are valid and have the
indicated semantics, and if [`E] also meets all other requirements of this
subclause [#rand.req.eng].
[:zh_CN] 如果 [#:tab rand.req.eng] 中给出的表达式均有效并具有所指定的语义，并且
如果 [`E] 还满足本子条款 [#rand.req.eng] 中的其他全部规定，则满足均匀随机位
生成器的规定的类 [`E] 也满足[+:% 随机数引擎]的规定。

[:en] In that Table and throughout this subclause:
[:zh_CN] 在这个表和本子条款的通篇中：

[list]
[item]
[:en] [`T] is the type named by [`E][=']s associated [`result_type];
[:zh_CN] [`T] 是 [`E] 所关联的 [`result_type] 所指名的类型；
[item]
[:en] [`e] is a value of [`E], [`v] is an lvalue of [`E], [`x] and [`y] are
(possibly [`const]) values of [`E];
[:zh_CN] [`e] 为 [`E] 的值，[`v] 为 [`E] 的左值，[`x] 和 [`y] 为 [`E] 的（可能为
[`const] 的）值；
[item]
[:en] [`s] is a value of [`T];
[:zh_CN] [`s] 为 [`T] 的值；
[item]
[:en] [`q] is an lvalue meeting the requirements of a seed sequence
([#rand.req.seedseq]);
[:zh_CN] [`q] 为满足种子序列的规定（[#rand.req.seedseq]）的左值；
[item]
[:en] [`z] is a value of type [`unsigned long long];
[:zh_CN] [`z] 为 [`unsigned long long] 类型的值；
[item]
[:en] [`os] is an lvalue of the type of some class template specialization
[`basic_ostream<charT, traits>]; and
[:zh_CN] [`os] 为某个类型为模板特例 [`basic_ostream<charT, traits>] 的左值；而
[item]
[:en] [`is] is an lvalue of the type of some class template specialization
[`basic_istream<charT, traits>];
[:zh_CN] [`is] 为某个类型为模板特例 [`basic_istream<charT, traits>] 的左值；
[list:end]
[:en] where [`charT] and [`traits] are constrained according to [#strings] and
[#input.output].
[:zh_CN] 其中 [`charT] 和 [`traits] 遵循 [#strings] 和 [#input.output] 的约束
条件。

[table:grid#rand.req.eng
    [:en] Random number engine requirements
    [:zh_CN] 随机数引擎规定
    [|@code
        [:en] Expression
        [:zh_CN] 表达式
    ]
    [|
        [:en] Return type
        [:zh_CN] 返回类型
    ]
    [|
        [:en] Pre/post-condition
        [:zh_CN] 前/后条件
    ]
    [|
        [:en] Complexity
        [:zh_CN] 复杂度
    ]
]

[:en]
[%constructor[!random number engine requirement]]
[:zh_CN]
[%构造函数[!随机数引擎规定]]
[|] E()
[|]
[|] [:en] Creates an engine with the same initial state as all other
    default-constructed engines of type [`E].
    [:zh_CN] 创建一个引擎，其初始状态与所有其他的默认构造的 [`E] 类型的引擎相同。
[|] [:en] [$[=O]](size of state)
    [:zh_CN] [$[=O]](状态的大小)
[-]

[:en]
[%copy constructor[!random number engine requirement]]
[:zh_CN]
[%复制构造函数[!随机数引擎规定]]
[|] E(x)
[|]
[|] [:en] Creates an engine that compares equal to [`x].
    [:zh_CN] 创建一个引擎，与 [`x] 比较为相等。
[|] [:en] [$[=O]](size of state)
    [:zh_CN] [$[=O]](状态的大小)
[-]

[:en]
[%constructor[!random number engine requirement]]
[:zh_CN]
[%构造函数[!随机数引擎规定]]
[|] E(s)
[|]
[|] [:en] Creates an engine with initial state determined by [`s].
    [:zh_CN] 创建一个引擎，其初始状态由 [`s] 决定。
[|] [:en] [$[=O]](size of state)
    [:zh_CN] [$[=O]](状态的大小)
[-]

[:en]
[%constructor[!random number engine requirement]]
[:zh_CN]
[%构造函数[!随机数引擎规定]]
[|] E(q)[#:note#fn:$1]

[note:foot#fn:$1]
[:en] This constructor (as well as the subsequent corresponding [`seed()]
function) may be particularly useful to applications requiring a large number of
independent random sequences.
[:zh_CN] 这个构造函数（以及下面其所对应的 [`seed()] 函数）在需要大量不相关的随机
序列的应用来说可能会特别有用。
[note:end]

[|]
[|] [:en] Creates an engine with an initial state that depends on a sequence
    produced by one call to [`q.generate].
    [:zh_CN] 创建一个引擎，其初始状态取决于对 [`q.generate] 的一次调用所产生的
    序列。
[|] [:en] same as complexity of [`q.generate] called on a sequence whose length
    is size of state
    [:zh_CN] 与对长度与状态的大小相同的一个序列调用 [`q.generate] 的复杂度相同
[-]

[:en]
[%[`seed][!random number engine requirement]]
[:zh_CN]
[%[`seed][!随机数引擎规定]]
[|] e.seed()
[|] [`void]
[|] [para:ensures]
    [:en] [`e == E()].
    [:zh_CN] [`e == E()]。
[|] [:en] same as [`E()]
    [:zh_CN] 与 [`E()] 相同
[-]

[:en]
[%[`seed][!random number engine requirement]]
[:zh_CN]
[%[`seed][!随机数引擎规定]]
[|] e.seed(s)
[|] [`void]
[|] [para:ensures]
    [:en] [`e == E(s)].
    [:zh_CN] [`e == E(s)]。
[|] [:en] same as [`E(s)]
    [:zh_CN] 与 [`E(s)] 相同
[-]

[:en]
[%[`seed][!random number engine requirement]]
[:zh_CN]
[%[`seed][!随机数引擎规定]]
[|] e.seed(q)
[|] [`void]
[|] [para:ensures]
    [:en] [`e == E(q)].
    [:zh_CN] [`e == E(q)]。
[|] [:en] same as [`E(q)]
    [:zh_CN] 与 [`E(q)] 相同
[-]

[:en]
[%[`operator()][!random number engine requirement]]
[:zh_CN]
[%[`operator()][!随机数引擎规定]]
[|] e()
[|] [`T]
[|] [:en] Advances [`e][=']s state [`e][$_i] to
    [$[`e]_{i+1} = \mathsf{TA}([`e]_i)] and returns [$\mathsf{GA}([`e]_i)].
    [:zh_CN] 推进 [`e] 的状态 [`e][_[$i]] 为
    [$[`e]_{i+1} = \mathsf{TA}([`e]_i)] 并返回 [$\mathsf{GA}([`e]_i)]。
[|] [:en] per [#rand.req.urng]
    [:zh_CN] 据 [#rand.req.urng]
[-]

[:en]
[%[`discard][!random number engine requirement]]
[:zh_CN]
[%[`discard][!随机数引擎规定]]
[|] e.discard(z)[#:note#fn:$2]

[note:foot#fn:$2]
[:en] This operation is common in user code, and can often be implemented in an
engine-specific manner so as to provide significant performance improvements
over an equivalent naive loop that makes [`z] consecutive calls [`e()].
[:zh_CN] 这个操作在用户代码中很常用，并且通常可以以引擎特有的方式予以实现，以
提供比一个等价的连续 [`z] 次调用 [`e()] 的普通循环提供显著的性能改善。
[note:end]

[|] [`void]
[|] [:en] Advances [`e][=']s state [`e][$_i] to [`e][$_{i+[`z]}] by any means
    equivalent to [`z] consecutive calls [`e()].
    [:zh_CN] 以等价于连续 [`z] 次调用 [`e()] 的任何方式推进 [`e] 的状态
    [`e][$_i] 为 [`e][$_{i+[`z]}]。
[|] [:en] no worse than the complexity of [`z] consecutive calls [`e()]
    [:zh_CN] 不差于连续 [`z] 次调用 [`e()] 的复杂度
[-]

[:en]
[%[`operator==][!random number engine requirement]]
[:zh_CN]
[%[`operator==][!随机数引擎规定]]
[|] x == y
[|] [`bool]
[|] [:en] This operator is an equivalence relation.
    [:zh_CN] 这个运算符是一种等价关系。

    [:en] With [$S_x] and [$S_y] as the infinite sequences of values that would
    be generated by repeated future calls to [`x()] and [`y()], respectively,
    returns [`true] if [$S_x = S_y]; else returns [`false].
    [:zh_CN] 令 [$S_x] 和 [$S_y] 分别为此后对 [`x()] 和 [`y()] 的重复调用将会
    产生的无穷序列，当 [$S_x = S_y] 时返回 [`true]；否则返回 [`false]。
[|] [:en] [$[=O]](size of state)
    [:zh_CN] [$[=O]](状态的大小)
[-]

[:en]
[%[`operator!=][!random number engine requirement]]
[:zh_CN]
[%[`operator!=][!随机数引擎规定]]
[|] x != y
[|] [`bool]
[|] [:en] [`!(x == y)].
    [:zh_CN] [`!(x == y)]。
[|] [:en] [$[=O]](size of state)
    [:zh_CN] [$[=O]](状态的大小)
[-]

[:en]
[%[`operator<<][!random number engine requirement]]
[:zh_CN]
[%[`operator<<][!随机数引擎规定]]
[|] os << x
[|] [:en] reference to the type of [`os]
    [:zh_CN] [`os] 的类型的引用
[|] [:en] With [`os.][$fmtflags] set to [`ios_base::dec|ios_base::left] and the
    fill character set to the space character, writes to [`os] the textual
    representation of [`x][=']s current state.
    [:zh_CN] 将 [`os.][$fmtflags] 设置为 [`ios_base::dec|ios_base::left]，并将
    填充字符设置为空格字符，将 [`x] 的当前状态的文本表示写出到 [`os]。

    [:en] In the output, adjacent numbers are separated by one or more space
    characters.
    [:zh_CN] 在输出中，相邻的数值以一个或多个空格字符分割。

    [para:ensures]
    [:en] The [`os.][$fmtflags] and fill character are unchanged.
    [:zh_CN] 不改变 [`os.][$fmtflags] 和填充字符。
[|] [:en] [$[=O]](size of state)
    [:zh_CN] [$[=O]](状态的大小)
[-]

[:en]
[%[`operator>>][!random number engine requirement]]
[:zh_CN]
[%[`operator>>][!随机数引擎规定]]
[|] is >> v
[|] [:en] reference to the type of [`is]
    [:zh_CN] [`is] 的类型的引用
[|] [:en] With [`is.fmtflags] set to [`ios_base::dec], sets [`v][=']s state as
    determined by reading its textual representation from [`is].
    [:zh_CN] 将 [`is.fmtflags] 设置为 [`ios_base::dec]，通过从 [`is] 读取其文本
    表示来决定设置 [`v] 的状态。

    [:en] If bad input is encountered, ensures that [`v][=']s state is unchanged
    by the operation and calls [`is.setstate(ios::failbit)] (which may throw
    [`ios::failure] ([#iostate.flags])).
    [:zh_CN] 当遇到无效输入时，确保该操作不改变 [`v] 的状态并调用
    [`is.setstate(ios::failbit)]（这可能会抛出 [`ios::failure]
    （[#iostate.flags]））。

    [:en] If a textual representation written via [`os << x] was subsequently
    read via [`is >> v], then [`x == v] provided that there have been no
    intervening invocations of [`x] or of [`v].
    [:zh_CN] 如果通过 [`os << x] 所写入的文本表示随后通过 [`is >> v] 进行读取，
    则有 [`x == v]，但要求其间未发生过对 [`x] 或 [`v] 的任何调用。

    [para:requires]
    [:en] [`is] provides a textual representation that was previously written
    using an output stream whose imbued locale was the same as that of [`is],
    and whose type[=']s template specialization arguments [`charT] and [`traits]
    were respectively the same as those of [`is].
    [:zh_CN] [`is] 所提供的文本表示是之前通过使用某个输出流所写入的，且后者所
    浸染的地域与 [`is] 相同，其类型的模板特例实参 [`charT] 和 [`traits] 也分别和
    [`is] 的相同。

    [para:ensures]
    [:en] The [`is.][$fmtflags] are unchanged.
    [:zh_CN] 不改变 [`is.][$fmtflags]。
[|] [:en] [$[=O]](size of state)
    [:zh_CN] [$[=O]](状态的大小)
[-]

[table:end]

[para]
[:en] [`E] shall meet the requirements of [*Cpp17CopyConstructible]
([#:tab cpp17.copyconstructible]) and [*Cpp17CopyAssignable]
([#:tab cpp17.copyassignable]) requirements.
[:zh_CN] [`E] 应当满足 [*Cpp17CopyConstructible]
（[#:tab cpp17.copyconstructible]）和 [*Cpp17CopyAssignable]
（[#:tab cpp17.copyassignable]）的规定。

[:en] These operations shall each be of complexity no worse than [$[=O]](size
of state).
[:zh_CN] 这些操作的复杂度都不能比 [$[=O]](状态的大小) 要差。

[%:end#requirements.random.number.engine]
[%:end#random.number.engine.requirements]
