[section#linalg.algs.blas3.inplacetrsm
    [:en] Solve multiple triangular linear systems in-place
    [:zh_CN] 原位求解多重三角线性系统
]

[para]
[begin:note]
[:en] These functions correspond to the BLAS function [`xTRSM][#:cite@super#blas3].
[:zh_CN] 这些函数对应于 BLAS 函数 [`xTRSM][#:cite@super#blas3]。
[end:note]

[%@lib triangular_matrix_matrix_left_solve]
[codeblock:declaration]
template<[[redoc("*:c>")]]in-matrix InMat, class Triangle, class DiagonalStorage,
         [[redoc("*:c>")]]inout-matrix InOutMat, class BinaryDivideOp>
  void triangular_matrix_matrix_left_solve(InMat A, Triangle t, DiagonalStorage d,
                                           InOutMat B, BinaryDivideOp divide);
template<class ExecutionPolicy, [[redoc("*:c>")]]in-matrix InMat, class Triangle, class DiagonalStorage,
         [[redoc("*:c>")]]inout-matrix InOutMat, class BinaryDivideOp>
  void triangular_matrix_matrix_left_solve(ExecutionPolicy&& exec,
                                           InMat A, Triangle t, DiagonalStorage d,
                                           InOutMat B, BinaryDivideOp divide);
[codeblock:end]

[div:description]
[para]
[:en] These functions perform multiple in-place matrix solves, taking into
account the [`Triangle] and [`DiagonalStorage] parameters that apply to the
triangular matrix [`A] ([#linalg.general]).
[:zh_CN] 这些函数实施原位的多重矩阵求解，其中考虑在三角矩阵 [`A] 上应用的
[`Triangle] 和 [`DiagonalStorage] 形参（[#linalg.general]）。

[para@~]
[begin:note]
[:en] This algorithm makes it possible to compute factorizations like Cholesky
and LU in place.
[:zh_CN] 此算法使得可以在原位进行如乔里斯基或 LU 分解。

[:en] Performing triangular solve in place hinders parallelization.
[:zh_CN] 原位实施三角求解会妨碍并行化。

[:en] However, other [`ExecutionPolicy] specific optimizations,
such as vectorization, are still possible.
[:zh_CN] 然而，仍可能进行其他 [`ExecutionPolicy] 专有的优化，如向量化。
[end:note]

[para:mandates]
[list]
[item]
[:en] If [`InMat] has [`layout_blas_packed] layout, then the layout[=']s
[`Triangle] template argument has the same type as the function[=']s [`Triangle]
template argument;
[:zh_CN] 如果 [`InMat] 具有 [`layout_blas_packed] 布局，则该布局的 [`Triangle]
模板实参与函数的 [`Triangle] 模板实参为相同类型。
[item]
[:en] [`[*possibly-multipliable]<InMat, InOutMat, InOutMat>()] is [`true]; and
[:zh_CN] [`[*possibly-multipliable]<InMat, InOutMat, InOutMat>()] 为 [`true]；
并且
[item]
[:en] [`[*compatible-static-extents]<InMat, InMat>(0, 1)] is [`true].
[:zh_CN] [`[*compatible-static-extents]<InMat, InMat>(0, 1)] 为 [`true]。
[list:end]

[para:expects]
[list]
[item]
[:en@~] [`[*multipliable](A, B, B)] is [`true], and
[:zh_CN@~] [`[*multipliable](A, B, B)] 等于 [`true]，并且
[item]
[:en@~] [`A.extent(0) == A.extent(1)] is [`true].
[:zh_CN@~] [`A.extent(0) == A.extent(1)] 为 [`true]。
[list:end]

[para:effects]
[:en] Computes [$X'] such that [$AX' = B], and assigns each element of [$X'] to
the corresponding element of [$B].
[:zh_CN] 计算 [$X'] 使得 [$AX' = B]，并将 [$X'] 的各个元素赋值给 [$B] 的对应元素。

[:en] If no such [$X'] exists, then the elements of [`B] are valid but
unspecified.
[:zh_CN] 若不存在这样的 [$X']，则 [`B] 的元素有效但未指明。

[para:complexity]
[:en] [?bigoh [`A.extent(0)] \times [`A.extent(1)] \times [`B.extent(1)]].
[:zh_CN] [?bigoh [`A.extent(0)] \times [`A.extent(1)] \times [`B.extent(1)]]。
[div:end]

[%@lib triangular_matrix_matrix_left_solve]
[codeblock:declaration]
template<[[redoc("*:c>")]]in-matrix InMat, class Triangle, class DiagonalStorage, [[redoc("*:c>")]]inout-matrix InOutMat>
  void triangular_matrix_matrix_left_solve(InMat A, Triangle t, DiagonalStorage d,
                                           InOutMat B);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
triangular_matrix_matrix_left_solve(A, t, d, B, divides<void>{});
[codeblock:end]
[div:end]

[%@lib triangular_matrix_matrix_left_solve]
[codeblock:declaration]
  template<class ExecutionPolicy,
           [[redoc("*:c>")]]in-matrix InMat, class Triangle, class DiagonalStorage, [[redoc("*:c>")]]inout-matrix InOutMat>
    void triangular_matrix_matrix_left_solve(ExecutionPolicy&& exec,
                                             InMat A, Triangle t, DiagonalStorage d,
                                             InOutMat B);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
triangular_matrix_matrix_left_solve(std::forward<ExecutionPolicy>(exec),
                                    A, t, d, B, divides<void>{});
[codeblock:end]
[div:end]

[%@lib triangular_matrix_matrix_right_solve]
[codeblock:declaration]
template<[[redoc("*:c>")]]in-matrix InMat, class Triangle, class DiagonalStorage,
         [[redoc("*:c>")]]inout-matrix InOutMat, class BinaryDivideOp>
  void triangular_matrix_matrix_right_solve(InMat A, Triangle t, DiagonalStorage d,
                                            InOutMat B, BinaryDivideOp divide);
template<class ExecutionPolicy, [[redoc("*:c>")]]in-matrix InMat, class Triangle, class DiagonalStorage,
         [[redoc("*:c>")]]inout-matrix InOutMat, class BinaryDivideOp>
  void triangular_matrix_matrix_right_solve(ExecutionPolicy&& exec,
                                            InMat A, Triangle t, DiagonalStorage d,
                                            InOutMat B, BinaryDivideOp divide);
[codeblock:end]

[div:description]
[para]
[:en] These functions perform multiple in-place matrix solves, taking into
account the [`Triangle] and [`DiagonalStorage] parameters that apply to the
triangular matrix [`A] ([#linalg.general]).
[:zh_CN] 这些函数实施原位的多重矩阵求解，其中考虑在三角矩阵 [`A] 上应用的
[`Triangle] 和 [`DiagonalStorage] 形参（[#linalg.general]）。

[begin:note]
[:en] This algorithm makes it possible to compute factorizations like Cholesky
and LU in place.
[:zh_CN] 此算法使得可以在原位进行如乔里斯基或 LU 分解。

[:en] Performing triangular solve in place hinders parallelization.
[:zh_CN] 原位实施三角求解会妨碍并行化。

[:en] However, other [`ExecutionPolicy] specific optimizations,
such as vectorization, are still possible.
[:zh_CN] 然而，仍可能进行其他 [`ExecutionPolicy] 专有的优化，如向量化。
[end:note]

[para:mandates]
[list]
[item]
[:en] If [`InMat] has [`layout_blas_packed] layout, then the layout[=']s
[`Triangle] template argument has the same type as the function[=']s [`Triangle]
template argument;
[:zh_CN] 如果 [`InMat] 具有 [`layout_blas_packed] 布局，则该布局的 [`Triangle]
模板实参与函数的 [`Triangle] 模板实参为相同类型。
[item]
[:en] [`[*possibly-multipliable]<InOutMat, InMat, InOutMat>()] is [`true]; and
[:zh_CN] [`[*possibly-multipliable]<InOutMat, InMat, InOutMat>()] 为 [`true]；
并且
[item]
[:en] [`[*compatible-static-extents]<InMat, InMat>(0, 1)] is [`true].
[:zh_CN] [`[*compatible-static-extents]<InMat, InMat>(0, 1)] 为 [`true]。
[list:end]

[para:expects]
[list]
[item]
[:en@~] [`[*multipliable](B, A, B)] is [`true], and
[:zh_CN@~] [`[*multipliable](B, A, B)] 等于 [`true]，并且
[item]
[:en@~] [`A.extent(0) == A.extent(1)] is [`true].
[:zh_CN@~] [`A.extent(0) == A.extent(1)] 为 [`true]。
[list:end]

[para:effects]
[:en] Computes [$X'] such that [$X'A = B], and assigns each element of [$X'] to
the corresponding element of [$B].
[:zh_CN] 计算 [$X'] 使得 [$X'A = B]，并将 [$X'] 的各个元素赋值给 [$B] 的对应元素。

[:en] If no such [$X'] exists, then the elements of [`B] are valid but
unspecified.
[:zh_CN] 若不存在这样的 [$X']，则 [`B] 的元素有效但未指明。

[para:complexity]
[:en] [?bigoh [`A.extent(0)] \times [`A.extent(1)] \times [`B.extent(1)]].
[:zh_CN] [?bigoh [`A.extent(0)] \times [`A.extent(1)] \times [`B.extent(1)]]。
[div:end]

[%@lib triangular_matrix_matrix_right_solve]
[codeblock:declaration]
template<[[redoc("*:c>")]]in-matrix InMat, class Triangle, class DiagonalStorage, [[redoc("*:c>")]]inout-matrix InOutMat>
  void triangular_matrix_matrix_right_solve(InMat A, Triangle t, DiagonalStorage d, InOutMat B);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
triangular_matrix_matrix_right_solve(A, t, d, B, divides<void>{});
[codeblock:end]
[div:end]

[%@lib triangular_matrix_matrix_right_solve]
[codeblock:declaration]
template<class ExecutionPolicy,
         [[redoc("*:c>")]]in-matrix InMat, class Triangle, class DiagonalStorage, [[redoc("*:c>")]]inout-matrix InOutMat>
  void triangular_matrix_matrix_right_solve(ExecutionPolicy&& exec,
                                            InMat A, Triangle t, DiagonalStorage d,
                                            InOutMat B);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
triangular_matrix_matrix_right_solve(std::forward<ExecutionPolicy>(exec),
                                     A, t, d, B, divides<void>{});
[codeblock:end]
[div:end]
