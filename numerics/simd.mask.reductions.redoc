[section#simd.mask.reductions
    [:en] [`basic_mask] reductions
    [:zh_CN] [`basic_mask] 归约
]

[%@lib@member all_of[!simd]]
[codeblock:declaration]
template<size_t Bytes, class Abi>
  constexpr bool all_of(const basic_mask<Bytes, Abi>& k) noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`true] if all boolean elements in [`k] are [`true], otherwise [`false].
[:zh_CN] 若 [`k] 中的所有布尔元素均为 [`true] 则返回 [`true]，否则返回 [`false]。
[div:end]

[%@lib@member any_of[!simd]]
[codeblock:declaration]
template<size_t Bytes, class Abi>
  constexpr bool any_of(const basic_mask<Bytes, Abi>& k) noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`true] if at least one boolean elements in [`k] is [`true], otherwise [`false].
[:zh_CN] 若 [`k] 中至少一个布尔元素均为 [`true] 则返回 [`true]，否则返回 [`false]。
[div:end]

[%@lib@member none_of[!simd]]
[codeblock:declaration]
template<size_t Bytes, class Abi>
  constexpr bool none_of(const basic_mask<Bytes, Abi>& k) noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`!any_of(k)].
[:zh_CN] [`!any_of(k)]。
[div:end]

[%@lib@member reduce_count[!simd]]
[codeblock:declaration]
template<size_t Bytes, class Abi>
  constexpr [[redoc("*>")]]simd-size-type reduce_count(const basic_mask<Bytes, Abi>& k) noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] The number of boolean elements in [`k] that are [`true].
[:zh_CN] [`k] 中为 [`true] 的布尔元素数量。
[div:end]

[%@lib@member reduce_min_index[!simd]]
[codeblock:declaration]
template<size_t Bytes, class Abi>
  constexpr [[redoc("*>")]]simd-size-type reduce_min_index(const basic_mask<Bytes, Abi>& k);
[codeblock:end]

[div:description]
[para:expects]
[:en] [`any_of(k)] is [`true].
[:zh_CN] [`any_of(k)] 为 [`true]。

[para:returns]
[:en] The lowest element index [$i] where [`k`[[$i]`]] is [`true].
[:zh_CN] 使得 [`k`[[$i]`]] 为 [`true] 的最小元素索引 [$i]。
[div:end]

[%@lib@member reduce_max_index[!simd]]
[codeblock:declaration]
template<size_t Bytes, class Abi>
  constexpr [[redoc("*>")]]simd-size-type reduce_max_index(const basic_mask<Bytes, Abi>& k);
[codeblock:end]

[div:description]
[para:expects]
[:en] [`any_of(k)] is [`true].
[:zh_CN] [`any_of(k)] 为 [`true]。

[para:returns]
[:en] The greatest element index [$i] where [`k`[[$i]`]] is [`true].
[:zh_CN] 使得 [`k`[[$i]`]] 为 [`true] 的最大元素索引 [$i]。
[div:end]

[%@lib@member all_of[!simd]]
[%@lib@member any_of[!simd]]
[%@lib@member reduce_count[!simd]]
[codeblock:declaration]
constexpr bool all_of([[redoc("`:c>")]]same_as<bool> auto x) noexcept;
constexpr bool any_of([[redoc("`:c>")]]same_as<bool> auto x) noexcept;
constexpr [[redoc("*>")]]simd-size-type reduce_count([[redoc("`:c>")]]same_as<bool> auto x) noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`x].
[:zh_CN] [`x]。
[div:end]

[%@lib@member none_of[!simd]]
[codeblock:declaration]
constexpr bool none_of([[redoc("`:c>")]]same_as<bool> auto x) noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`!x].
[:zh_CN] [`!x]。
[div:end]

[%@lib@member reduce_min_index[!simd]]
[%@lib@member reduce_max_index[!simd]]
[codeblock:declaration]
constexpr [[redoc("*>")]]simd-size-type reduce_min_index([[redoc("`:c>")]]same_as<bool> auto x);
constexpr [[redoc("*>")]]simd-size-type reduce_max_index([[redoc("`:c>")]]same_as<bool> auto x);
[codeblock:end]

[div:description]
[para:expects]
[:en] [`x] is [`true].
[:zh_CN] [`x] 为 [`true]。

[para:returns]
[:en] [`0].
[:zh_CN] [`0]。
[div:end]
