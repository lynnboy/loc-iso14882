[section#simd.math
    [:en] Mathematical functions
    [:zh_CN] 数学函数
]

[%@lib@member ilogb[!simd]]
[%@lib@member ldexp[!simd]]
[%@lib@member scalbn[!simd]]
[%@lib@member scalbln[!simd]]
[%@lib@member abs[!simd]]
[%@lib@member abs[!simd]]
[%@lib@member fabs[!simd]]
[%@lib@member ceil[!simd]]
[%@lib@member floor[!simd]]
[%@lib@member nearbyint[!simd]]
[%@lib@member rint[!simd]]
[%@lib@member lrint[!simd]]
[%@lib@member llrint[!simd]]
[%@lib@member round[!simd]]
[%@lib@member lround[!simd]]
[%@lib@member llround[!simd]]
[%@lib@member fmod[!simd]]
[%@lib@member trunc[!simd]]
[%@lib@member remainder[!simd]]
[%@lib@member copysign[!simd]]
[%@lib@member nextafter[!simd]]
[%@lib@member fdim[!simd]]
[%@lib@member fmax[!simd]]
[%@lib@member fmin[!simd]]
[%@lib@member fma[!simd]]
[%@lib@member fpclassify[!simd]]
[%@lib@member isfinite[!simd]]
[%@lib@member isinf[!simd]]
[%@lib@member isnan[!simd]]
[%@lib@member isnormal[!simd]]
[%@lib@member signbit[!simd]]
[%@lib@member isgreater[!simd]]
[%@lib@member isgreaterequal[!simd]]
[%@lib@member isless[!simd]]
[%@lib@member islessequal[!simd]]
[%@lib@member islessgreater[!simd]]
[%@lib@member isunordered[!simd]]
[codeblock:declaration]
template<[[redoc("*:c>")]]math-floating-point V>
  constexpr rebind_t<int, [[redoc("*>")]]deduced-vec-t<V>> ilogb(const V& x);
template<[[redoc("*:c>")]]math-floating-point V>
  constexpr [[redoc("*:c>")]]deduced-vec-t<V> ldexp(const V& x, const rebind_t<int, [[redoc("*:c>")]]deduced-vec-t<V>>& exp);
template<[[redoc("*:c>")]]math-floating-point V>
  constexpr [[redoc("*:c>")]]deduced-vec-t<V> scalbn(const V& x, const rebind_t<int, [[redoc("*:c>")]]deduced-vec-t<V>>& n);
template<[[redoc("*:c>")]]math-floating-point V>
  constexpr [[redoc("*:c>")]]deduced-vec-t<V>
    scalbln(const V& x, const rebind_t<long int, [[redoc("*>")]]deduced-vec-t<V>>& n);
template<[[redoc("`:c>")]]signed_integral T, class Abi>
  constexpr basic_vec<T, Abi> abs(const basic_vec<T, Abi>& j);
template<[[redoc("*:c>")]]math-floating-point V>
  constexpr [[redoc("*>")]]deduced-vec-t<V> abs(const V& j);
template<[[redoc("*:c>")]]math-floating-point V>
  constexpr [[redoc("*>")]]deduced-vec-t<V> fabs(const V& x);
template<[[redoc("*:c>")]]math-floating-point V>
  constexpr [[redoc("*>")]]deduced-vec-t<V> ceil(const V& x);
template<[[redoc("*:c>")]]math-floating-point V>
  constexpr [[redoc("*>")]]deduced-vec-t<V> floor(const V& x);
template<[[redoc("*:c>")]]math-floating-point V>
  [[redoc("*>")]]deduced-vec-t<V> nearbyint(const V& x);
template<[[redoc("*:c>")]]math-floating-point V>
  [[redoc("*>")]]deduced-vec-t<V> rint(const V& x);
template<[[redoc("*:c>")]]math-floating-point V>
  rebind_t<long int, [[redoc("*>")]]deduced-vec-t<V>> lrint(const V& x);
template<[[redoc("*:c>")]]math-floating-point V>
  rebind_t<long long int, [[redoc("*>")]]deduced-vec-t<V>> llrint(const V& x);
template<[[redoc("*:c>")]]math-floating-point V>
  constexpr [[redoc("*>")]]deduced-vec-t<V> round(const V& x);
template<[[redoc("*:c>")]]math-floating-point V>
  constexpr rebind_t<long int, [[redoc("*>")]]deduced-vec-t<V>> lround(const V& x);
template<[[redoc("*:c>")]]math-floating-point V>
  constexpr rebind_t<long long int, [[redoc("*>")]]deduced-vec-t<V>> llround(const V& x);
template<class V0, class V1>
  constexpr [[redoc("*>")]]math-common-simd-t<V0, V1> fmod(const V0& x, const V1& y);
template<[[redoc("*:c>")]]math-floating-point V>
  constexpr [[redoc("*>")]]deduced-vec-t<V> trunc(const V& x);
template<class V0, class V1>
  constexpr [[redoc("*>")]]math-common-simd-t<V0, V1> remainder(const V0& x, const V1& y);
template<class V0, class V1>
  constexpr [[redoc("*>")]]math-common-simd-t<V0, V1> copysign(const V0& x, const V1& y);
template<class V0, class V1>
  constexpr [[redoc("*>")]]math-common-simd-t<V0, V1> nextafter(const V0& x, const V1& y);
template<class V0, class V1>
  constexpr [[redoc("*>")]]math-common-simd-t<V0, V1> fdim(const V0& x, const V1& y);
template<class V0, class V1>
  constexpr [[redoc("*>")]]math-common-simd-t<V0, V1> fmax(const V0& x, const V1& y);
template<class V0, class V1>
  constexpr [[redoc("*>")]]math-common-simd-t<V0, V1> fmin(const V0& x, const V1& y);
template<class V0, class V1, class V2>
  constexpr [[redoc("*>")]]math-common-simd-t<V0, V1, V2> fma(const V0& x, const V1& y, const V2& z);
template<[[redoc("*:c>")]]math-floating-point V>
  constexpr rebind_t<int, [[redoc("*>")]]deduced-vec-t<V>> fpclassify(const V& x);
template<[[redoc("*:c>")]]math-floating-point V>
  constexpr typename [[redoc("*>")]]deduced-vec-t<V>::mask_type isfinite(const V& x);
template<[[redoc("*:c>")]]math-floating-point V>
  constexpr typename [[redoc("*>")]]deduced-vec-t<V>::mask_type isinf(const V& x);
template<[[redoc("*:c>")]]math-floating-point V>
  constexpr typename [[redoc("*>")]]deduced-vec-t<V>::mask_type isnan(const V& x);
template<[[redoc("*:c>")]]math-floating-point V>
  constexpr typename [[redoc("*>")]]deduced-vec-t<V>::mask_type isnormal(const V& x);
template<[[redoc("*:c>")]]math-floating-point V>
  constexpr typename [[redoc("*>")]]deduced-vec-t<V>::mask_type signbit(const V& x);
template<class V0, class V1>
  constexpr typename [[redoc("*>")]]math-common-simd-t<V0, V1>::mask_type isgreater(const V0& x, const V1& y);
template<class V0, class V1>
  constexpr typename [[redoc("*>")]]math-common-simd-t<V0, V1>::mask_type
    isgreaterequal(const V0& x, const V1& y);
template<class V0, class V1>
  constexpr typename [[redoc("*>")]]math-common-simd-t<V0, V1>::mask_type isless(const V0& x, const V1& y);
template<class V0, class V1>
  constexpr typename [[redoc("*>")]]math-common-simd-t<V0, V1>::mask_type islessequal(const V0& x, const V1& y);
template<class V0, class V1>
  constexpr typename [[redoc("*>")]]math-common-simd-t<V0, V1>::mask_type islessgreater(const V0& x, const V1& y);
template<class V0, class V1>
  constexpr typename [[redoc("*>")]]math-common-simd-t<V0, V1>::mask_type isunordered(const V0& x, const V1& y);
[codeblock:end]

[div:description]
[para]
[:en] Let [`Ret] denote the return type of the specialization of a function
template with the name [^math-func].
[:zh_CN] 令 [`Ret] 代表名为 [^math-func] 的函数模板的特例的返回值。

[:en] Let [^math-func-vec] denote:
[:zh_CN] 令 [^math-func-vec] 代表：
[codeblock]
template<class... Args>
Ret [[redoc("^>")]]math-func-vec(Args... args) {
  return Ret([&]([[redoc("*>")]]simd-size-type i) {
      [[redoc("^>")]]math-func([[redoc("*>")]]make-compatible-simd-t<Ret, Args>(args)[i]...);
  });
}
[codeblock:end]

[para:returns]
[:en] A value [`ret] of type [`Ret], that is element-wise equal to the
result of calling [^math-func-vec] with the arguments of the above functions.
[:zh_CN] [`Ret] 类型的值 [`ret]，它逐元素等于以上述函数的实参调用 [^math-func-vec] 的结果。

[:en] If in an invocation of a scalar overload of [^math-func] for index
[`i] in [^math-func-vec] a domain, pole, or range error would
occur, the value of [`ret`[i`]] is unspecified.
[:zh_CN] 如果 [^math-func-vec] 中为索引 [`i] 调用 [^math-func] 的标量重载中
会导致定义域错误、极点错误或值域错误，那么 [`ret`[i`]] 的值是未指明的。

[para:remarks]
[:en] It is unspecified whether [`errno] ([#errno]) is accessed.
[:zh_CN] 是否访问 [`errno]（[#errno]）是未指明的。
[div:end]

[%@lib@member acos[!simd]]
[%@lib@member asin[!simd]]
[%@lib@member atan[!simd]]
[%@lib@member atan2[!simd]]
[%@lib@member cos[!simd]]
[%@lib@member sin[!simd]]
[%@lib@member tan[!simd]]
[%@lib@member acosh[!simd]]
[%@lib@member asinh[!simd]]
[%@lib@member atanh[!simd]]
[%@lib@member cosh[!simd]]
[%@lib@member sinh[!simd]]
[%@lib@member tanh[!simd]]
[%@lib@member exp[!simd]]
[%@lib@member exp2[!simd]]
[%@lib@member expm1[!simd]]
[%@lib@member log[!simd]]
[%@lib@member log10[!simd]]
[%@lib@member log1p[!simd]]
[%@lib@member log2[!simd]]
[%@lib@member logb[!simd]]
[%@lib@member cbrt[!simd]]
[%@lib@member hypot[!simd]]
[%@lib@member hypot[!simd]]
[%@lib@member pow[!simd]]
[%@lib@member sqrt[!simd]]
[%@lib@member erf[!simd]]
[%@lib@member erfc[!simd]]
[%@lib@member lgamma[!simd]]
[%@lib@member tgamma[!simd]]
[%@lib@member lerp[!simd]]
[%@lib@member assoc_laguerre[!simd]]
[%@lib@member assoc_legendre[!simd]]
[%@lib@member beta[!simd]]
[%@lib@member comp_ellint_1[!simd]]
[%@lib@member comp_ellint_2[!simd]]
[%@lib@member comp_ellint_3[!simd]]
[%@lib@member cyl_bessel_i[!simd]]
[%@lib@member cyl_bessel_j[!simd]]
[%@lib@member cyl_bessel_k[!simd]]
[%@lib@member cyl_neumann[!simd]]
[%@lib@member ellint_1[!simd]]
[%@lib@member ellint_2[!simd]]
[%@lib@member ellint_3[!simd]]
[%@lib@member expint[!simd]]
[%@lib@member hermite[!simd]]
[%@lib@member laguerre[!simd]]
[%@lib@member legendre[!simd]]
[%@lib@member riemann_zeta[!simd]]
[%@lib@member sph_bessel[!simd]]
[%@lib@member sph_legendre[!simd]]
[%@lib@member sph_neumann[!simd]]
[codeblock:declaration]
template<[[redoc("*:c>")]]math-floating-point V> constexpr [[redoc("*>")]]deduced-vec-t<V> acos(const V& x);
template<[[redoc("*:c>")]]math-floating-point V> constexpr [[redoc("*>")]]deduced-vec-t<V> asin(const V& x);
template<[[redoc("*:c>")]]math-floating-point V> constexpr [[redoc("*>")]]deduced-vec-t<V> atan(const V& x);
template<class V0, class V1>
  constexpr [[redoc("*>")]]math-common-simd-t<V0, V1> atan2(const V0& y, const V1& x);
template<[[redoc("*:c>")]]math-floating-point V> constexpr [[redoc("*>")]]deduced-vec-t<V> cos(const V& x);
template<[[redoc("*:c>")]]math-floating-point V> constexpr [[redoc("*>")]]deduced-vec-t<V> sin(const V& x);
template<[[redoc("*:c>")]]math-floating-point V> constexpr [[redoc("*>")]]deduced-vec-t<V> tan(const V& x);
template<[[redoc("*:c>")]]math-floating-point V> constexpr [[redoc("*>")]]deduced-vec-t<V> acosh(const V& x);
template<[[redoc("*:c>")]]math-floating-point V> constexpr [[redoc("*>")]]deduced-vec-t<V> asinh(const V& x);
template<[[redoc("*:c>")]]math-floating-point V> constexpr [[redoc("*>")]]deduced-vec-t<V> atanh(const V& x);
template<[[redoc("*:c>")]]math-floating-point V> constexpr [[redoc("*>")]]deduced-vec-t<V> cosh(const V& x);
template<[[redoc("*:c>")]]math-floating-point V> constexpr [[redoc("*>")]]deduced-vec-t<V> sinh(const V& x);
template<[[redoc("*:c>")]]math-floating-point V> constexpr [[redoc("*>")]]deduced-vec-t<V> tanh(const V& x);
template<[[redoc("*:c>")]]math-floating-point V> constexpr [[redoc("*>")]]deduced-vec-t<V> exp(const V& x);
template<[[redoc("*:c>")]]math-floating-point V> constexpr [[redoc("*>")]]deduced-vec-t<V> exp2(const V& x);
template<[[redoc("*:c>")]]math-floating-point V> constexpr [[redoc("*>")]]deduced-vec-t<V> expm1(const V& x);
template<[[redoc("*:c>")]]math-floating-point V> constexpr [[redoc("*>")]]deduced-vec-t<V> log(const V& x);
template<[[redoc("*:c>")]]math-floating-point V> constexpr [[redoc("*>")]]deduced-vec-t<V> log10(const V& x);
template<[[redoc("*:c>")]]math-floating-point V> constexpr [[redoc("*>")]]deduced-vec-t<V> log1p(const V& x);
template<[[redoc("*:c>")]]math-floating-point V> constexpr [[redoc("*>")]]deduced-vec-t<V> log2(const V& x);
template<[[redoc("*:c>")]]math-floating-point V> constexpr [[redoc("*>")]]deduced-vec-t<V> logb(const V& x);
template<[[redoc("*:c>")]]math-floating-point V> constexpr [[redoc("*>")]]deduced-vec-t<V> cbrt(const V& x);
template<class V0, class V1>
  constexpr [[redoc("*>")]]math-common-simd-t<V0, V1> hypot(const V0& x, const V1& y);
template<class V0, class V1, class V2>
  constexpr [[redoc("*>")]]math-common-simd-t<V0, V1, V2> hypot(const V0& x, const V1& y, const V2& z);
template<class V0, class V1>
  constexpr [[redoc("*>")]]math-common-simd-t<V0, V1> pow(const V0& x, const V1& y);
template<[[redoc("*:c>")]]math-floating-point V> constexpr [[redoc("*>")]]deduced-vec-t<V> sqrt(const V& x);
template<[[redoc("*:c>")]]math-floating-point V> constexpr [[redoc("*>")]]deduced-vec-t<V> erf(const V& x);
template<[[redoc("*:c>")]]math-floating-point V> constexpr [[redoc("*>")]]deduced-vec-t<V> erfc(const V& x);
template<[[redoc("*:c>")]]math-floating-point V> constexpr [[redoc("*>")]]deduced-vec-t<V> lgamma(const V& x);
template<[[redoc("*:c>")]]math-floating-point V> constexpr [[redoc("*>")]]deduced-vec-t<V> tgamma(const V& x);
template<class V0, class V1, class V2>
  constexpr [[redoc("*>")]]math-common-simd-t<V0, V1, V2> lerp(const V0& a, const V1& b, const V2& t) noexcept;
template<[[redoc("*:c>")]]math-floating-point V>
  [[redoc("*>")]]deduced-vec-t<V> assoc_laguerre(const rebind_t<unsigned, [[redoc("*>")]]deduced-vec-t<V>>& n, const
    rebind_t<unsigned, [[redoc("*>")]]deduced-vec-t<V>>& m,
                   const V& x);
template<[[redoc("*:c>")]]math-floating-point V>
  [[redoc("*>")]]deduced-vec-t<V> assoc_legendre(const rebind_t<unsigned, [[redoc("*>")]]deduced-vec-t<V>>& l, const
    rebind_t<unsigned, [[redoc("*>")]]deduced-vec-t<V>>& m,
                   const V& x);
template<class V0, class V1>
  [[redoc("*>")]]math-common-simd-t<V0, V1> beta(const V0& x, const V1& y);
template<[[redoc("*:c>")]]math-floating-point V> [[redoc("*>")]]deduced-vec-t<V> comp_ellint_1(const V& k);
template<[[redoc("*:c>")]]math-floating-point V> [[redoc("*>")]]deduced-vec-t<V> comp_ellint_2(const V& k);
template<class V0, class V1>
  [[redoc("*>")]]math-common-simd-t<V0, V1> comp_ellint_3(const V0& k, const V1& nu);
template<class V0, class V1>
  [[redoc("*>")]]math-common-simd-t<V0, V1> cyl_bessel_i(const V0& nu, const V1& x);
template<class V0, class V1>
  [[redoc("*>")]]math-common-simd-t<V0, V1> cyl_bessel_j(const V0& nu, const V1& x);
template<class V0, class V1>
  [[redoc("*>")]]math-common-simd-t<V0, V1> cyl_bessel_k(const V0& nu, const V1& x);
template<class V0, class V1>
  [[redoc("*>")]]math-common-simd-t<V0, V1> cyl_neumann(const V0& nu, const V1& x);
template<class V0, class V1>
  [[redoc("*>")]]math-common-simd-t<V0, V1> ellint_1(const V0& k, const V1& phi);
template<class V0, class V1>
  [[redoc("*>")]]math-common-simd-t<V0, V1> ellint_2(const V0& k, const V1& phi);
template<class V0, class V1, class V2>
  [[redoc("*>")]]math-common-simd-t<V0, V1, V2> ellint_3(const V0& k, const V1& nu, const V2& phi);
template<[[redoc("*:c>")]]math-floating-point V> [[redoc("*>")]]deduced-vec-t<V> expint(const V& x);
template<[[redoc("*:c>")]]math-floating-point V> [[redoc("*>")]]deduced-vec-t<V> hermite(const rebind_t<unsigned,
[[redoc("*>")]]deduced-vec-t<V>>& n, const V& x);
template<[[redoc("*:c>")]]math-floating-point V> [[redoc("*>")]]deduced-vec-t<V> laguerre(const rebind_t<unsigned,
[[redoc("*>")]]deduced-vec-t<V>>& n, const V& x);
template<[[redoc("*:c>")]]math-floating-point V> [[redoc("*>")]]deduced-vec-t<V> legendre(const rebind_t<unsigned,
[[redoc("*>")]]deduced-vec-t<V>>& l, const V& x);
template<[[redoc("*:c>")]]math-floating-point V> [[redoc("*>")]]deduced-vec-t<V> riemann_zeta(const V& x);
template<[[redoc("*:c>")]]math-floating-point V> [[redoc("*>")]]deduced-vec-t<V> sph_bessel(const rebind_t<unsigned,
[[redoc("*>")]]deduced-vec-t<V>>& n, const V& x);
template<[[redoc("*:c>")]]math-floating-point V>
  [[redoc("*>")]]deduced-vec-t<V> sph_legendre(const rebind_t<unsigned, [[redoc("*>")]]deduced-vec-t<V>>& l,
                                 const rebind_t<unsigned, [[redoc("*>")]]deduced-vec-t<V>>& m,
                                 const V& theta);
template<[[redoc("*:c>")]]math-floating-point V> [[redoc("*>")]]deduced-vec-t<V> sph_neumann(const rebind_t<unsigned,
[[redoc("*>")]]deduced-vec-t<V>>& n, const V& x);
[codeblock:end]

[div:description]
[para]
[:en] Let [`Ret] denote the return type of the specialization of a function
template with the name [^math-func].
[:zh_CN] 令 [`Ret] 代表名为 [^math-func] 的函数模板的特例的返回值。

[:en] Let [^math-func-vec] denote:
[:zh_CN] 令 [^math-func-vec] 代表：
[codeblock]
template<class... Args>
Ret [[redoc("^>")]]math-func-vec(Args... args) {
  return Ret([&]([[redoc("*>")]]simd-size-type i) {
      [[redoc("^>")]]math-func([[redoc("*>")]]make-compatible-simd-t<Ret, Args>(args)[i]...);
  });
}
[codeblock:end]

[para:returns]
[:en] A value [`ret] of type [`Ret], that is element-wise approximately equal to
the result of calling [^math-func-vec] with the arguments of the above functions.
[:zh_CN] [`Ret] 类型的值 [`ret]，它逐元素约等于以上述函数的实参调用 [^math-func-vec] 的结果。

[:en] If in an invocation of a scalar overload of [^math-func] for index
[`i] in [^math-func-vec] a domain, pole, or range error would
occur, the value of [`ret`[i`]] is unspecified.
[:zh_CN] 如果 [^math-func-vec] 中为索引 [`i] 调用 [^math-func] 的标量重载中
会导致定义域错误、极点错误或值域错误，那么 [`ret`[i`]] 的值是未指明的。

[para:remarks]
[:en] It is unspecified whether [`errno] ([#errno]) is accessed.
[:zh_CN] 是否访问 [`errno]（[#errno]）是未指明的。
[div:end]

[%@lib@member frexp[!simd]]
[codeblock:declaration]
template<[[redoc("*:c>")]]math-floating-point V>
  constexpr [[redoc("*>")]]deduced-vec-t<V> frexp(const V& value, rebind_t<int, [[redoc("*>")]]deduced-vec-t<V>>* exp);
[codeblock:end]

[div:description]
[para]
[:en] Let [`Ret] be [`[*deduced-vec-t]<V>].
[:zh_CN] 令 [`Ret] 为 [`[*deduced-vec-t]<V>]。

[:en] Let [^frexp-vec] denote:
[:zh_CN] 令 [^frexp-vec] 代表：
[codeblock]
template<class V>
pair<Ret, rebind_t<int, Ret>> [[redoc("^>")]]frexp-vec(const V& x) {
  int r1[Ret::size()];
  Ret r0([&]([[redoc("*>")]]simd-size-type i) {
    frexp([[redoc("*>")]]make-compatible-simd-t<Ret, V>(x)[i], &r1[i]);
  });
  return {r0, rebind_t<int, Ret>(r1)};
}
[codeblock:end]

[:en] Let [`ret] be a value of type [`pair<Ret, rebind_t<int, Ret>>]
that is the same value as the result of calling [`[^frexp-vec](x)].
[:zh_CN] 令 [`ret] 为 [`pair<Ret, rebind_t<int, Ret>>] 类型的值，
它是与调用 [`[^frexp-vec](x)] 的结果相同的值。

[para:effects]
[:en] Sets [`*exp] to [`ret.second].
[:zh_CN] 设置 [`*exp] 为 [`ret.second]。

[para:returns]
[:en] [`ret.first].
[:zh_CN] [`ret.first]。
[div:end]

[%@lib@member remquo[!simd]]
[codeblock:declaration]
template<class V0, class V1>
  constexpr [[redoc("*>")]]math-common-simd-t<V0, V1> remquo(const V0& x, const V1& y,
                                              rebind_t<int, [[redoc("*>")]]math-common-simd-t<V0, V1>>* quo);
[codeblock:end]

[div:description]
[para]
[:en] Let [`Ret] be [`[*math-common-simd-t]<V0, V1>].
[:zh_CN] 令 [`Ret] 为 [`[*math-common-simd-t]<V0, V1>]。

[:en] Let [^remquo-vec] denote:
[:zh_CN] 令 [^remquo-vec] 代表：
[codeblock]
template<class V0, class V1>
pair<Ret, rebind_t<int, Ret>> [[redoc("^>")]]remquo-vec(const V0& x, const V1& y) {
  int r1[Ret::size()];
  Ret r0([&]([[redoc("*>")]]simd-size-type i) {
    remquo([[redoc("*>")]]make-compatible-simd-t<Ret, V0>(x)[i],
           [[redoc("*>")]]make-compatible-simd-t<Ret, V1>(y)[i], &r1[i]);
  });
  return {r0, rebind_t<int, Ret>(r1)};
}
[codeblock:end]
[:en] Let [`ret] be a value of type [`pair<Ret, rebind_t<int, Ret>>]
that is the same value as the result of calling [`[^remquo-vec](x, y)].
[:zh_CN] 令 [`ret] 为 [`pair<Ret, rebind_t<int, Ret>>] 类型的值，
它是与调用 [`[^remquo-vec](x, y)] 的结果相同的值。

[:en] If in an invocation of a scalar overload of [`remquo] for index [`i]
in [^remquo-vec] a domain, pole, or range error would occur, the
value of [`ret`[i`]] is unspecified.
[:zh_CN] 如果 [^remquo-vec] 中为索引 [`i] 调用 [`remquo] 的标量重载中
会导致定义域错误、极点错误或值域错误，那么 [`ret`[i`]] 的值是未指明的。

[para:effects]
[:en] Sets [`*quo] to [`ret.second].
[:zh_CN] 设置 [`*quo] 为 [`ret.second]。

[para:returns]
[:en] [`ret.first].
[:zh_CN] [`ret.first]。

[para:remarks]
[:en] It is unspecified whether [`errno] ([#errno]) is accessed.
[:zh_CN] 是否访问 [`errno]（[#errno]）是未指明的。
[div:end]

[%@lib@member modf[!simd]]
[codeblock:declaration]
template<class T, class Abi>
  constexpr basic_vec<T, Abi> modf(const type_identity_t<basic_vec<T, Abi>>& value,
                                    basic_vec<T, Abi>* iptr);
[codeblock:end]

[div:description]
[para]
[:en] Let [`V] be [`basic_vec<T, Abi>].
[:zh_CN] 令 [`V] 为 [`basic_vec<T, Abi>]。

[:en] Let [^modf-vec] denote:
[:zh_CN] 令 [^modf-vec] 代表：
[codeblock]
pair<V, V> [[redoc("^>")]]modf-vec(const V& x) {
  T r1[Ret::size()];
  V r0([&]([[redoc("*>")]]simd-size-type i) {
    modf(V(x)[i], &r1[i]);
  });
  return {r0, V(r1)};
}
[codeblock:end]
[:en] Let [`ret] be a value of type [`pair<V, V>] that is the same value as
the result of calling [`[^modf-vec](x, y)].
[:zh_CN] 令 [`ret] 为 [`pair<V, V>] 类型的值，
它是与调用 [`[^modf-vec](x, y)] 的结果相同的值。

[para:effects]
[:en] Sets [`*iptr] to [`ret.second].
[:zh_CN] 设置 [`*iptr] 为 [`ret.second]。

[para:returns]
[:en] [`ret.first].
[:zh_CN] [`ret.first]。
[div:end]
