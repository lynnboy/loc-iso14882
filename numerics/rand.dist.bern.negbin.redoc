[/
% ----------------------------------------------------------------------
% Class template negative_binomial_distribution
% ----------------------------------------------------------------------
/]

[section#rand.dist.bern.negbin
    [:en] Class template [`negative_binomial_distribution]
    [:zh_CN] 类模板 [`negative_binomial_distribution]
]

[%@lib negative_binomial_distribution]

[para]
[:en] A [`negative_binomial_distribution] random number distribution produces
random integers [$i \geq 0] distributed according to the discrete probability
function
[:zh_CN] [`negative_binomial_distribution] 随机数分布产生随机整数 [$i \geq 0]，
其分布符合离散概率函数

[math]
P(i\,|\,k,p) = \binom{k+i-1}{i} \cdot p^k \cdot (1-p)^i \text{ .}
[math:end]

[begin:note]
[:en] This implies that [$P(i\,|\,k,p)] is undefined when [`p == 1].
[:zh_CN] 这意味着当 [`p == 1] 时 [$P(i\,|\,k,p)] 没有定义。
[end:note]

[%@lib negative_binomial_distribution]
[%@lib@member result_type[!negative_binomial_distribution]]
[codeblock:synopsis]
namespace std {
  template<class IntType = int>
  class negative_binomial_distribution {
  public:
    // [:en] types \
    [:zh_CN] 类型
    using result_type = IntType;
    using param_type  = [[redoc("[=unspec]")]];

    // [:en] constructors and reset functions \
    [:zh_CN] 构造函数和重置函数
    negative_binomial_distribution() : negative_binomial_distribution(1) {}
    explicit negative_binomial_distribution(IntType k, double p = 0.5);
    explicit negative_binomial_distribution(const param_type& parm);
    void reset();

    // [:en] equality operators \
    [:zh_CN] 相等性运算符
    friend bool operator==(const negative_binomial_distribution& x,
                           const negative_binomial_distribution& y);

    // [:en] generating functions \
    [:zh_CN] 生成函数
    template<class URBG>
      result_type operator()(URBG& g);
    template<class URBG>
      result_type operator()(URBG& g, const param_type& parm);

    // [:en] property functions \
    [:zh_CN] 属性函数
    IntType k() const;
    double p() const;
    param_type param() const;
    void param(const param_type& parm);
    result_type min() const;
    result_type max() const;

    // [:en] inserters and extractors \
    [:zh_CN] 插入符和提取符
    template<class charT, class traits>
      friend basic_ostream<charT, traits>&
        operator<<(basic_ostream<charT, traits>& os, const negative_binomial_distribution& x);
    template<class charT, class traits>
      friend basic_istream<charT, traits>&
        operator>>(basic_istream<charT, traits>& is, negative_binomial_distribution& x);
  };
}
[codeblock:end]

[%@lib@ctor negative_binomial_distribution]
[codeblock:declaration]
explicit negative_binomial_distribution(IntType k, double p = 0.5);
[codeblock:end]

[div:description]
[para:expects]
[:en] [$0 < [`p] \leq 1] and [$0 < [`k]].
[:zh_CN] [$0 < [`p] \leq 1] 且 [$0 < [`k]]。

[para:remarks]
[:en] [`k] and [`p] correspond to the respective parameters of the distribution.
[:zh_CN] [`k] 和 [`p] 对应于分布的相应形参。
[div:end]

[%@lib@member k[!negative_binomial_distribution]]
[codeblock:declaration]
IntType k() const;
[codeblock:end]

[div:description]
[para:returns]
[:en] The value of the [`k] parameter with which the object was constructed.
[:zh_CN] 该对象构造时的形参 [`k] 的值。
[div:end]

[%@lib@member p[!negative_binomial_distribution]]
[codeblock:declaration]
double p() const;
[codeblock:end]

[div:description]
[para:returns]
[:en] The value of the [`p] parameter with which the object was constructed.
[:zh_CN] 该对象构造时的形参 [`p] 的值。
[div:end]
