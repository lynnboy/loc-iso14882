[section#linalg.algs.blas3.trmm
    [:en] In-place triangular matrix-matrix product
    [:zh_CN] 原位三角矩阵-矩阵相乘
]

[para]
[:en] These functions perform an in-place matrix-matrix multiply, taking into
account the [`Triangle] and [`DiagonalStorage] parameters that apply to the
triangular matrix [`A] ([#linalg.general]).
[:zh_CN] 这些函数实施原位的矩阵-矩阵相乘，其中考虑在三角矩阵 [`A] 上应用的
[`Triangle] 和 [`DiagonalStorage] 形参（[#linalg.general]）。

[begin:note]
[:en] These functions correspond to the BLAS function [`xTRMM][#:cite@super#blas3].
[:zh_CN] 这些函数对应于 BLAS 函数 [`xTRMM][#:cite@super#blas3]。
[end:note]

[codeblock:declaration]
template<[[redoc("*:c>")]]in-matrix InMat, class Triangle, class DiagonalStorage, [[redoc("*:c>")]]inout-matrix InOutMat>
  void triangular_matrix_left_product(InMat A, Triangle t, DiagonalStorage d, InOutMat C);
template<class ExecutionPolicy,
         [[redoc("*:c>")]]in-matrix InMat, class Triangle, class DiagonalStorage, [[redoc("*:c>")]]inout-matrix InOutMat>
  void triangular_matrix_left_product(ExecutionPolicy&& exec,
                                      InMat A, Triangle t, DiagonalStorage d, InOutMat C);
[codeblock:end]

[div:description]
[para:mandates]
[list]
[item]
[:en] If [`InMat] has [`layout_blas_packed] layout, then the layout[=']s
[`Triangle] template argument has the same type as the function[=']s [`Triangle]
template argument;
[:zh_CN] 如果 [`InMat] 具有 [`layout_blas_packed] 布局，则该布局的 [`Triangle]
模板实参与函数的 [`Triangle] 模板实参为相同类型；
[item]
[:en] [`[*possibly-multipliable]<InMat, InOutMat, InOutMat>()] is [`true]; and
[:zh_CN] [`[*possibly-multipliable]<InMat, InOutMat, InOutMat>()] 为 [`true]；
并且
[item]
[:en] [`[*compatible-static-extents]<InMat, InMat>(0, 1)] is [`true].
[:zh_CN] [`[*compatible-static-extents]<InMat, InMat>(0, 1)] 为 [`true]。
[list:end]

[para:expects]
[list]
[item]
[:en@~] [`[*multipliable](A, C, C)] is [`true], and
[:zh_CN@~] [`[*multipliable](A, C, C)] 为 [`true]，并且
[item]
[:en] [`A.extent(0) == A.extent(1)] is [`true].
[:zh_CN] [`A.extent(0) == A.extent(1)] 为 [`true]。
[list:end]

[para:effects]
[:en] Computes a matrix [$C'] such that [$C' = A C] and assigns each element of
[$C'] to the corresponding element of [$C].
[:zh_CN] 计算矩阵 [$C'] 使得 [$C' = A C]，并将 [$C'] 的各个元素赋值给 [$C] 的
对应元素。

[para:complexity]
[:en] [?bigoh [`A.extent(0)] \times [`A.extent(1)] \times [`C.extent(0)]].
[:zh_CN] [?bigoh [`A.extent(0)] \times [`A.extent(1)] \times [`C.extent(0)]]。
[div:end]

[codeblock:declaration]
template<[[redoc("*:c>")]]in-matrix InMat, class Triangle, class DiagonalStorage, [[redoc("*:c>")]]inout-matrix InOutMat>
  void triangular_matrix_right_product(InMat A, Triangle t, DiagonalStorage d, InOutMat C);
template<class ExecutionPolicy,
         [[redoc("*:c>")]]in-matrix InMat, class Triangle, class DiagonalStorage, [[redoc("*:c>")]]inout-matrix InOutMat>
  void triangular_matrix_right_product(ExecutionPolicy&& exec,
                                       InMat A, Triangle t, DiagonalStorage d, InOutMat C);
[codeblock:end]

[div:description]
[para:mandates]
[list]
[item]
[:en] If [`InMat] has [`layout_blas_packed] layout, then the layout[=']s
[`Triangle] template argument has the same type as the function[=']s [`Triangle]
template argument;
[:zh_CN] 如果 [`InMat] 具有 [`layout_blas_packed] 布局，则该布局的 [`Triangle]
模板实参与函数的 [`Triangle] 模板实参为相同类型；
[item]
[:en] [`[*possibly-multipliable]<InOutMat, InMat, InOutMat>()] is [`true]; and
[:zh_CN] [`[*possibly-multipliable]<InOutMat, InMat, InOutMat>()] 为 [`true]；
并且
[item]
[:en] [`[*compatible-static-extents]<InMat, InMat>(0, 1)] is [`true].
[:zh_CN] [`[*compatible-static-extents]<InMat, InMat>(0, 1)] 为 [`true]。
[list:end]

[para:expects]
[list]
[item]
[:en@~] [`[*multipliable](C, A, C)] is [`true], and
[:zh_CN@~] [`[*multipliable](C, A, C)] 为 [`true]，并且
[item]
[:en] [`A.extent(0) == A.extent(1)] is [`true].
[:zh_CN] [`A.extent(0) == A.extent(1)] 为 [`true]。
[list:end]

[para:effects]
[:en] Computes a matrix [$C'] such that [$C' = C A] and assigns each element of
[$C'] to the corresponding element of [$C].
[:zh_CN] 计算矩阵 [$C'] 使得 [$C' = C A]，并将 [$C'] 的各个元素赋值给 [$C] 的
对应元素。

[para:complexity]
[:en] [?bigoh [`A.extent(0)] \times [`A.extent(1)] \times [`C.extent(0)]].
[:zh_CN] [?bigoh [`A.extent(0)] \times [`A.extent(1)] \times [`C.extent(0)]]。
[div:end]
