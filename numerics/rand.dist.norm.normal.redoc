[/
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% normal_distribution
/]

[section#rand.dist.norm.normal
    [:en] Class template [`normal_distribution]
    [:zh_CN] 类模板 [`normal_distribution]
]

[%@lib normal_distribution]

[para]
[:en] A [`normal_distribution] random number distribution produces random
numbers [$x] distributed according to the probability density function
[:zh_CN] [`normal_distribution] 随机数分布产生随机数 [$x]，
其分布符合概率密度函数

[math]
 p(x\,|\,\mu,\sigma)
      = \frac{1}{\sigma \sqrt{2\pi}}
        \cdot
        % e^{-(x-\mu)^2 / (2\sigma^2)}
        \exp{\left(- \, \frac{(x - \mu)^2}
                             {2 \sigma^2}
             \right)
            }
  \text{ .}
[math:end]

[:en] The distribution parameters [$\mu] and [$\sigma] are also known as this
distribution[=']s [+:% mean] and [+:% standard deviation].
[:zh_CN] 分布的形参 [$\mu] 和 [$\sigma] 也被称为该分布的[+:% 均值]和[+:% 标准差]。

[%@lib normal_distribution]
[%@lib@member result_type[!normal_distribution]]
[codeblock:synopsis]
namespace std {
  template<class RealType = double>
  class normal_distribution {
  public:
    // [:en] types \
    [:zh_CN] 类型
    using result_type = RealType;
    using param_type  = [[redoc("[=unspec]")]];

    // [:en] constructors and reset functions \
    [:zh_CN] 构造函数和重置函数
    normal_distribution() : normal_distribution(0.0) {}
    explicit normal_distribution(RealType mean, RealType stddev = 1.0);
    explicit normal_distribution(const param_type& parm);
    void reset();

    // [:en] equality operators \
    [:zh_CN] 相等性运算符
    friend bool operator==(const normal_distribution& x, const normal_distribution& y);

    // [:en] generating functions \
    [:zh_CN] 生成函数
    template<class URBG>
      result_type operator()(URBG& g);
    template<class URBG>
      result_type operator()(URBG& g, const param_type& parm);

    // [:en] property functions \
    [:zh_CN] 属性函数
    RealType mean() const;
    RealType stddev() const;
    param_type param() const;
    void param(const param_type& parm);
    result_type min() const;
    result_type max() const;

    // [:en] inserters and extractors \
    [:zh_CN] 插入符和提取符
    template<class charT, class traits>
      friend basic_ostream<charT, traits>&
        operator<<(basic_ostream<charT, traits>& os, const normal_distribution& x);
    template<class charT, class traits>
      friend basic_istream<charT, traits>&
        operator>>(basic_istream<charT, traits>& is, normal_distribution& x);
  };
}
[codeblock:end]

[%@lib@ctor normal_distribution]
[codeblock:declaration]
explicit normal_distribution(RealType mean, RealType stddev = 1.0);
[codeblock:end]

[div:description]
[para:expects]
[:en] [$0 < [`stddev]].
[:zh_CN] [$0 < [`stddev]]。

[para:remarks]
[:en] [`mean] and [`stddev] correspond to the respective parameters of the
distribution.
[:zh_CN] [`mean] 和 [`stddev] 对应于分布的相应形参。
[div:end]

[%@lib@member mean[!normal_distribution]]
[codeblock:declaration]
RealType mean() const;
[codeblock:end]

[div:description]
[para:returns]
[:en] The value of the [`mean] parameter with which the object was constructed.
[:zh_CN] 该对象构造时的形参 [`mean] 的值。
[div:end]

[%@lib@member stddev[!normal_distribution]]
[codeblock:declaration]
RealType stddev() const;
[codeblock:end]

[div:description]
[para:returns]
[:en] The value of the [`stddev] parameter with which the object was constructed.
[:zh_CN] 该对象构造时的形参 [`stddev] 的值。
[div:end]
