[/
% ----------------------------------------------------------------------
% Class template piecewise_linear_distribution
% ----------------------------------------------------------------------
/]

[section#rand.dist.samp.plinear
    [:en] Class template [`piecewise_linear_distribution]
    [:zh_CN] 类模板 [`piecewise_linear_distribution]
]

[%@lib piecewise_linear_distribution]
[%[:en]random number distribution[![`piecewise_linear_distribution]]
  [:zh_CN]随机数分布[![`piecewise_linear_distribution]]]

[para]
[:en] A [`piecewise_linear_distribution] random number distribution produces
random numbers [$x], [$b_0 \leq x < b_n], distributed over each subinterval
[$`[b_i, b_{i+1})] according to the probability density function
[%probability density function[![`piecewise_linear_distribution]]]
[%[`piecewise_linear_distribution][!probability density function]]
[:zh_CN] [`piecewise_linear_distribution] 随机数分布产生随机数 [$x]，
[$b_0 \leq x < b_n]，在各个子区间 [$`[b_i, b_{i+1})] 上均匀分布，
其分布符合概率密度函数
[%概率密度函数[![`piecewise_linear_distribution]]]
[%[`piecewise_linear_distribution][!概率密度函数]]

[math]
p(x \,|\, b_0, \dotsc, b_n, \; \rho_0, \dotsc, \rho_n)
  = \rho_i     \cdot {\frac{b_{i+1} - x}{b_{i+1} - b_i}}
  + \rho_{i+1} \cdot {\frac{x - b_i}{b_{i+1} - b_i}}
  \text{[span: [:en], for [$b_i \le x < b_{i+1}]. [:zh_CN], 对于 [$b_i \le x < b_{i+1}].]}
[math:end]

[para]
[:en] The [$n + 1] distribution parameters [$b_i], also known as this
distribution[=']s [+:% interval boundaries]
[%[`piecewise_linear_distribution][!interval boundaries]]
[%interval boundaries[![`piecewise_linear_distribution]]]
, shall satisfy the relation [$b_i < b_{i+1}] for [$i = 0, \dotsc, n - 1].
[:zh_CN] 分布的 [$n + 1] 个形参 [$b_i]，也被称为该分布的[+:% 区间边界]
[%[`piecewise_linear_distribution][!区间边界]]
[%区间边界[![`piecewise_linear_distribution]]]
，应当满足关系 [$b_i < b_{i+1}]（[$i = 0, \dotsc, n - 1]）。

[:en] Unless specified otherwise, the remaining [$n + 1] distribution parameters
are calculated as [$\rho_k = {w_k / S}] for [$k = 0, \dotsc, n], in which
the values [$w_k], commonly known as the [+:% weights at boundaries]
[%[`piecewise_linear_distribution][!weights at boundaries]]
[%weights at boundaries[![`piecewise_linear_distribution]]]
, shall be non-negative, non-NaN, and non-infinity.
[:zh_CN@~] 除非特别说明，否则其余 [$n + 1] 个分布形参按如下计算：
[$\rho_k = {w_k / S}]（[$k = 0, \dotsc, n]），
其中的各个 [$w_k] 值，通常称为[+:% 边界权重]
[%[`piecewise_linear_distribution][!边界权重]]
[%边界权重[![`piecewise_linear_distribution]]]
，应当非负、非 NaN 且非无穷。

[:en] Moreover, the following relation shall hold:
[:zh_CN] 此外，应当满足如下关系：

[math]
0 < S = \frac{1}{2} \cdot \sum_{k=0}^{n-1} (w_k + w_{k+1}) \cdot (b_{k+1} - b_k) \text{ .}
[math:end]

[%@lib piecewise_linear_distribution]
[%@lib@member result_type[!piecewise_linear_distribution]]
[codeblock:synopsis]
template<class RealType = double>
  class piecewise_linear_distribution {
  public:
    // [:en] types \
       [:zh_CN] 类型
    using result_type = RealType;
    using param_type  = [[redoc("=unspec")]];

    // [:en] constructors and reset functions \
       [:zh_CN] 构造函数和重置函数
    piecewise_linear_distribution();
    template<class InputIteratorB, class InputIteratorW>
      piecewise_linear_distribution(InputIteratorB firstB, InputIteratorB lastB,
                                    InputIteratorW firstW);
    template<class UnaryOperation>
      piecewise_linear_distribution(initializer_list<RealType> bl, UnaryOperation fw);
    template<class UnaryOperation>
      piecewise_linear_distribution(size_t nw, RealType xmin, RealType xmax, UnaryOperation fw);
    explicit piecewise_linear_distribution(const param_type& parm);
    void reset();

    // [:en] generating functions \
       [:zh_CN] 生成函数
    template<class URBG>
      result_type operator()(URBG& g);
    template<class URBG>
      result_type operator()(URBG& g, const param_type& parm);

    // [:en] property functions \
       [:zh_CN] 属性函数
    vector<result_type> intervals() const;
    vector<result_type> densities() const;
    param_type param() const;
    void param(const param_type& parm);
    result_type min() const;
    result_type max() const;
  };
[codeblock:end]

[%@lib@ctor piecewise_linear_distribution]
[codeblock:declaration]
piecewise_linear_distribution();
[codeblock:end]

[div:description]
[para:effects]
[:en] Constructs a [`piecewise_linear_distribution] object with [$n = 1],
[$\rho_0 = \rho_1 = 1], [$b_0 = 0], and [$b_1 = 1].
[:zh_CN] 构造一个 [`piecewise_linear_distribution] 对象，其 [$n = 1]，
[$\rho_0 = \rho_1 = 1]，[$b_0 = 0]，以及 [$b_1 = 1]。
[div:end]

[%@lib@ctor piecewise_linear_distribution]
[codeblock:declaration]
template<class InputIteratorB, class InputIteratorW>
 piecewise_linear_distribution(InputIteratorB firstB, InputIteratorB lastB,
                               InputIteratorW firstW);
[codeblock:end]

[div:description]
[para:requires]
[:en] [`InputIteratorB] and [`InputIteratorW] shall each meet the
[^:oc InputIterator] requirements ([#input.iterators]).
[:zh_CN] [`InputIteratorB] 和 [`InputIteratorW] 都应当满足 [^:oc InputIterator]
的规定（[#input.iterators]）。

[:en] Moreover, the [~id-expression]s
[`iterator_traits<InputIteratorB>::value_type] and
[`iterator_traits<InputIteratorW>::value_type] shall each denote a type that is
convertible to [`double].
[:zh_CN] 此外，[~标识表达式] [`iterator_traits<InputIteratorB>::value_type] 和
[`iterator_traits<InputIteratorW>::value_type] 都应当各自代表某个可以转换为
[`double] 的类型。

[:en] If [`firstB == lastB] or [`++firstB == lastB], let [$n = 1],
[$\rho_0 = \rho_1 = 1], [$b_0 = 0], and [$b_1 = 1].
[:zh_CN] 若 [`firstB == lastB] 或 [`++firstB == lastB]，则令 [$n = 1]，
[$\rho_0 = \rho_1 = 1]，[$b_0 = 0]，以及 [$b_1 = 1]。

[:en] Otherwise, [$\bigl`[[`firstB], [`lastB]\bigr)] shall form a sequence [$b]
of length [$n+1], the length of the sequence [$w] starting from [`firstW] shall
be at least [$n+1], and any [$w_k] for [$k \geq n + 1] shall be ignored by the
distribution.
[:zh_CN] 否则，[$\bigl`[[`firstB], [`lastB]\bigr)] 应当构成一个长度为 [$n+1]
的序列 [$b]，以 [`firstW] 开始的序列 [$w] 的长度应当至少为 [$n+1]，并且对于
[$k \geq n + 1] 的任何 [$w_k] 均被该分布忽略。

[para:effects]
[:en] Constructs a [`piecewise_linear_distribution] object with parameters as
specified above.
[:zh_CN] 以上述各形参来构造一个 [`piecewise_linear_distribution] 对象。
[div:end]

[%@lib@ctor piecewise_linear_distribution]
[codeblock:declaration]
template<class UnaryOperation>
 piecewise_linear_distribution(initializer_list<RealType> bl, UnaryOperation fw);
[codeblock:end]

[div:description]
[para:requires]
[:en] Each instance of type [`UnaryOperation] shall be a function object
([#function.objects]) whose return type shall be convertible to [`double].
[:zh_CN] 每个 [`UnaryOperation] 类型的实例都应当为一个函数对象
（[#function.objects]），且其返回类型应当可以转换为 [`double]。

[:en] Moreover, [`double] shall be convertible to the type of
[`UnaryOperation][=']s sole parameter.
[:zh_CN] 此外，[`double] 应当可以转换为 [`UnaryOperation] 的唯一形参的类型。

[para:effects]
[:en] Constructs a [`piecewise_linear_distribution] object with parameters taken
or calculated from the following values:
[:zh_CN] 构造一个 [`piecewise_linear_distribution] 对象，其各形参采用下述各值
或计算得出：

[:en] If [$[`bl.size()] < 2], let [$n = 1], [$\rho_0 = \rho_1 = 1], [$b_0 = 0],
and [$b_1 = 1].
[:zh_CN] 若 [$[`bl.size()] < 2]，则令 [$n = 1]，[$\rho_0 = \rho_1 = 1]，
[$b_0 = 0]，以及 [$b_1 = 1]。

[:en] Otherwise, let [$\bigl`[[`bl.begin()], [`bl.end()]\bigr)] form a sequence
[$b_0, \dotsc, b_n], and let [$w_k = [`fw](b_k)] for [$k = 0, \dotsc, n].
[:zh_CN] 否则，令 [$\bigl`[[`bl.begin()], [`bl.end()]\bigr)] 构成序列
[$b_0, \dotsc, b_n]，并令 [$w_k = [`fw](b_k)]（对于 [$k = 0, \dotsc, n]）。

[para:complexity]
[:en] The number of invocations of [`fw] shall not exceed [$n+1].
[:zh_CN] 对 [`fw] 的调用次数不应超过 [$n+1]。
[div:end]


[%@lib@ctor piecewise_linear_distribution]
[codeblock:declaration]
template<class UnaryOperation>
 piecewise_linear_distribution(size_t nw, RealType xmin, RealType xmax, UnaryOperation fw);
[codeblock:end]

[div:description]
[para:requires]
[:en] Each instance of type [`UnaryOperation] shall be a function object
([#function.objects]) whose return type shall be convertible to [`double].
[:zh_CN] 每个 [`UnaryOperation] 类型的实例都应当为一个函数对象
（[#function.objects]），且其返回类型应当可以转换为 [`double]。

[:en] Moreover, [`double] shall be convertible to the type of
[`UnaryOperation][=']s sole parameter.
[:zh_CN] 此外，[`double] 应当可以转换为 [`UnaryOperation] 的唯一形参的类型。

[:en] If [$[`nw] = 0], let [$n = 1], otherwise let [$n = [`nw]].
[:zh_CN] 若 [$[`nw] = 0]，则令 [$n = 1]，否则令 [$n = [`nw]]。

[:en] The relation [$0 < \delta = ([`xmax] - [`xmin]) / n] shall hold.
[:zh_CN] 应当满足关系 [$0 < \delta = ([`xmax] - [`xmin]) / n]。

[para:effects]
[:en] Constructs a [`piecewise_linear_distribution] object with parameters taken
or calculated from the following values:
[:zh_CN] 构造一个 [`piecewise_constant_distribution] 对象，其各形参采用下述各值
或计算得出：

[:en] Let [$b_k = [`xmin] + k \cdot \delta] for [$k = 0, \dotsc, n],
and [$w_k = [`fw](b_k)] for [$k = 0, \dotsc, n].
[:zh_CN] 令 [$b_k = [`xmin] + k \cdot \delta]（[$k = 0, \dotsc, n]），
并令 [$w_k = [`fw](b_k)]（[$k = 0, \dotsc, n]）。

[para:complexity]
[:en] The number of invocations of [`fw] shall not exceed [$n+1].
[:zh_CN] 对 [`fw] 的调用次数不应超过 [$n+1]。
[div:end]

[%@lib@member intervals[!piecewise_linear_distribution]]
[codeblock:declaration]
vector<result_type> intervals() const;
[codeblock:end]

[div:description]
[para:returns]
[:en] A [`vector<result_type>] whose [`size] member returns [$n + 1] and whose
[`operator`[`]] member returns [$b_k] when invoked with argument [$k] for
[$k = 0, \dotsc, n].
[:zh_CN] 一个 [`vector<double>]，其 [`size] 成员返回 [$n + 1]，且其
[`operator`[`]] 成员当以实参 [$k]（[$k = 0, \dotsc, n]）调用时返回 [$b_k]。
[div:end]

[%@lib@member densities[!piecewise_linear_distribution]]
[codeblock:declaration]
vector<result_type> densities() const;
[codeblock:end]

[div:description]
[para:returns]
[:en] A [`vector<result_type>] whose [`size] member returns [$n] and whose
[`operator`[`]] member returns [$\rho_k] when invoked with argument [$k] for
[$k = 0, \dotsc, n].
[:zh_CN] 一个 [`vector<double>]，其 [`size] 成员返回 [$n]，且其 [`operator`[`]]
成员当以实参 [$k]（[$k = 0, \dotsc, n]）调用时返回 [$\rho_k]。
[div:end]
