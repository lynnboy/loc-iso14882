[section#linalg.conj.conjugated
    [:en] Function template [`conjugated]
    [:zh_CN] 函数模板 [`conjugated]
]

[codeblock:declaration]
  template<class ElementType, class Extents, class Layout, class Accessor>
    constexpr auto [[redoc("`:lib>")]]conjugated(mdspan<ElementType, Extents, Layout, Accessor> a);
[codeblock:end]

[div:description]
[para]
[:en] Let [`A] be
[:zh_CN] 令 [`A]
[list]
[item]
[:en@~] [`remove_cvref_t<decltype(a.accessor().nested_accessor())>]
if [`Accessor] is a specialization of [`conjugated_accessor];
[:zh_CN@~] 若 [`Accessor] 是 [`conjugated_accessor] 的特例则为
[`remove_cvref_t<decltype(a.accessor().nested_accessor())>]；
[item]
[:en@~] otherwise, [`Accessor] if [`remove_cvref_t<ElementType>] is an arithmetic type;
[:zh_CN@~] 否则，若 [`remove_cvref_t<ElementType>] 为算术类型则为 [`Accessor]；
[item]
[:en@~] otherwise, [`conjugated_accessor<Accessor>] if the expression [`conj(E)]
is valid for any subexpression [`E] whose type [`T] is [`remove_cvref_t<ElementType>]
with overload resolution performed in a context that includes the declaration
[`template<class U> U conj(const U&) = delete;];
[:zh_CN@~] 否则，若对于任意子表达式 [`E]，其类型 [`T] 在包含声明式
[`template<class T> conj(const T&) = delete;] 的语境中进行重载决议的情况下
为 [`remove_cvref_t<ElementType>]，表达式 [`conj(E)] 均无效，则为
[`conjugated_accessor<Accessor>]；
[item]
[:en@~] otherwise, [`Accessor].
[:zh_CN@~] 否则，为 [`Accessor]。
[list:end]

[para:returns]
[:en] Let [`MD] be [`mdspan<typename A::element_type, Extents, Layout, A>].
[:zh_CN] 令 [`MD] 为 [`mdspan<typename A::element_type, Extents, Layout, A>]。

[list]
[item]
[:en] [`MD(a.data_handle(), a.mapping(), a.accessor().nested_accessor())]
if [`Accessor] is a specialization of [`conjugated_accessor];
如果 [`Accessor] 是 [`conjugated_accessor] 的特例，则返回
[`MD(a.data_handle(), a.mapping(), a.accessor().nested_accessor())]；
[item]
[:en] otherwise, [`a], if [`is_same_v<A, Accessor>] is [`true];
[:zh_CN] 否则，如果 [`is_same_v<A, Accessor>] 为 [`true] 则返回 [`a]；
[item]
[:en] otherwise, [`MD(a.data_handle(), a.mapping(), conjugated_accessor(a.accessor()))].
[:zh_CN@~] 否则，返回 [`MD(a.data_handle(), a.mapping(), conjugated_accessor(a.accessor()))]。
[list:end]
[div:end]

[para]
[begin:example]
[codeblock]
void test_conjugated_complex(mdspan<complex<double>, extents<int, 10>> a) {
  auto a_conj = conjugated(a);
  for (int i = 0; i < a.extent(0); ++i) {
    assert(a_conj[i] == conj(a[i]));
  }
  auto a_conj_conj = conjugated(a_conj);
  for (int i = 0; i < a.extent(0); ++i) {
    assert(a_conj_conj[i] == a[i]);
  }
}

void test_conjugated_real(mdspan<double, extents<int, 10>> a) {
  auto a_conj = conjugated(a);
  for (int i = 0; i < a.extent(0); ++i) {
    assert(a_conj[i] == a[i]);
  }
  auto a_conj_conj = conjugated(a_conj);
  for (int i = 0; i < a.extent(0); ++i) {
    assert(a_conj_conj[i] == a[i]);
  }
}
[codeblock:end]
[end:example]
