[section#valarray.comparison
    [:en] Logical operators
    [:zh_CN] 逻辑运算符
]

[%@library operator==[!valarray]]
[%@library valarray[!operator==]]
[%@library operator!=[!valarray]]
[%@library valarray[!operator!=]]
[%@library operator<[!valarray]]
[%@library valarray[!operator<]]
[%@library operator>[!valarray]]
[%@library valarray[!operator>]]
[%@library operator<=[!valarray]]
[%@library valarray[!operator<=]]
[%@library operator>=[!valarray]]
[%@library valarray[!operator>=]]
[%@library operator&&[!valarray]]
[%@library valarray[!operator&&]]
[%@library operator||[!valarray]]
[%@library valarray[!operator||]]
[codeblock:declaration]
template<class T> valarray<bool> operator==(const valarray<T>&, const valarray<T>&);
template<class T> valarray<bool> operator!=(const valarray<T>&, const valarray<T>&);
template<class T> valarray<bool> operator< (const valarray<T>&, const valarray<T>&);
template<class T> valarray<bool> operator> (const valarray<T>&, const valarray<T>&);
template<class T> valarray<bool> operator<=(const valarray<T>&, const valarray<T>&);
template<class T> valarray<bool> operator>=(const valarray<T>&, const valarray<T>&);
template<class T> valarray<bool> operator&&(const valarray<T>&, const valarray<T>&);
template<class T> valarray<bool> operator||(const valarray<T>&, const valarray<T>&);
[codeblock:end]

[enter:description]
[para:requires]
[:en] Each of these operators may only be instantiated for a type [`T] to which
the indicated operator can be applied and for which the indicated operator
returns a value which is of type [`bool] or which can be unambiguously
implicitly converted to type [`bool].
[:zh_CN] 这些运算符的每一个，仅会对这样的类型 [`T] 予以实例化：可以对其实施相应
的运算符，指定的运算符返回的值具有类型 [`bool] 或者可以无歧义地隐式转换为类型
[`bool]。

[:en] The two array arguments have the same length.
[:zh_CN] 两个数组实参具有相同的长度。

[para:returns]
[:en] A [`valarray<bool>] whose length is equal to the length of the array
arguments.
[:zh_CN] 长度等于各数组实参的长度的 [`valarray<bool>]。

[:en] Each element of the returned array is initialized with the result of
applying the indicated operator to the corresponding elements of the argument
arrays.
[:zh_CN] 所返回的数组的各个元素，是以对各实参数组的对应元素实施所指定的运算符的
结果进行初始化的。
[exit:description]

[%@library operator==[!valarray]]
[%@library valarray[!operator==]]
[%@library operator!=[!valarray]]
[%@library valarray[!operator!=]]
[%@library operator<[!valarray]]
[%@library valarray[!operator<]]
[%@library operator>[!valarray]]
[%@library valarray[!operator>]]
[%@library operator<=[!valarray]]
[%@library valarray[!operator<=]]
[%@library operator>=[!valarray]]
[%@library valarray[!operator>=]]
[%@library operator&&[!valarray]]
[%@library valarray[!operator&&]]
[%@library operator||[!valarray]]
[%@library valarray[!operator||]]
[codeblock:declaration]
template<class T> valarray<bool> operator==(const valarray<T>&,
                                            const typename valarray<T>::value_type&);
template<class T> valarray<bool> operator==(const typename valarray<T>::value_type&,
                                            const valarray<T>&);
template<class T> valarray<bool> operator!=(const valarray<T>&,
                                            const typename valarray<T>::value_type&);
template<class T> valarray<bool> operator!=(const typename valarray<T>::value_type&,
                                            const valarray<T>&);
template<class T> valarray<bool> operator< (const valarray<T>&,
                                            const typename valarray<T>::value_type&);
template<class T> valarray<bool> operator< (const typename valarray<T>::value_type&,
                                            const valarray<T>&);
template<class T> valarray<bool> operator> (const valarray<T>&,
                                            const typename valarray<T>::value_type&);
template<class T> valarray<bool> operator> (const typename valarray<T>::value_type&,
                                            const valarray<T>&);
template<class T> valarray<bool> operator<=(const valarray<T>&,
                                            const typename valarray<T>::value_type&);
template<class T> valarray<bool> operator<=(const typename valarray<T>::value_type&,
                                            const valarray<T>&);
template<class T> valarray<bool> operator>=(const valarray<T>&,
                                            const typename valarray<T>::value_type&);
template<class T> valarray<bool> operator>=(const typename valarray<T>::value_type&,
                                            const valarray<T>&);
template<class T> valarray<bool> operator&&(const valarray<T>&,
                                            const typename valarray<T>::value_type&);
template<class T> valarray<bool> operator&&(const typename valarray<T>::value_type&,
                                            const valarray<T>&);
template<class T> valarray<bool> operator||(const valarray<T>&,
                                            const typename valarray<T>::value_type&);
template<class T> valarray<bool> operator||(const typename valarray<T>::value_type&,
                                            const valarray<T>&);
[codeblock:end]

[enter:description]
[para:requires]
[:en] Each of these operators may only be instantiated for a type [`T] to which
the indicated operator can be applied and for which the indicated operator
returns a value which is of type [`bool] or which can be unambiguously
implicitly converted to type [`bool].
[:zh_CN] 这些运算符的每一个，仅会对这样的类型 [`T] 予以实例化：可以对其实施相应
的运算符，指定的运算符返回的值具有类型 [`bool] 或者可以无歧义地隐式转换为类型
[`bool]。

[para:returns]
[:en] A [`valarray] whose length is equal to the lengths of the array argument.
[:zh_CN] 长度等于数组实参的长度的 [`valarray]。

[:en] Each element of the returned array is initialized with the result of
applying the indicated operator to the corresponding element of the array and
the non-array argument.
[:zh_CN] 所返回的数组的各个元素，是以对数组实参的对应元素和非数组实参实施所指定
的运算符的结果进行初始化的。
[exit:description]
