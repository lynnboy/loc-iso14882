[/
% ----------------------------------------------------------------------
% Class template piecewise_constant_distribution
% ----------------------------------------------------------------------
/]

[section#rand.dist.samp.pconst
    [:en] Class template [`piecewise_constant_distribution]
    [:zh_CN] 类模板 [`piecewise_constant_distribution]
]

[%@lib piecewise_constant_distribution]

[para]
[:en] A [`piecewise_constant_distribution] random number distribution produces
random numbers [$x], [$b_0 \leq x < b_n], uniformly distributed over each
subinterval [$`[b_i, b_{i+1})] according to the probability density function in
[#:eq#rand.dist.samp.pconst].
[:zh_CN] [`piecewise_constant_distribution] 随机数分布产生随机数 [$x]，
[$b_0 \leq x < b_n]，在各个子区间 [$`[b_i, b_{i+1})] 上均匀分布，
其分布符合 [#:eq#rand.dist.samp.pconst] 中的概率密度函数。

[formula#rand.dist.samp.pconst]
p(x \,|\, b_0, \dotsc, b_n, \; \rho_0, \dotsc, \rho_{n-1}) = \rho_i
\text{[span [:en], for [$b_i \le x < b_{i+1}] [:zh_CN], 对于 [$b_i \le x < b_{i+1}]]}
[formula:end]

[para]
[:en] The [$n + 1] distribution parameters [$b_i], also known as this
distribution[=']s [+:% interval boundaries], shall satisfy the relation
[$b_i < b_{i + 1}] for [$i = 0, \dotsc, n - 1].
[:zh_CN] 分布的 [$n + 1] 个形参 [$b_i]，也被称为该分布的[+:% 区间边界]，应当满足
关系 [$b_i < b_{i + 1}]（[$i = 0, \dotsc, n - 1]）。

[:en] Unless specified otherwise, the remaining [$n] distribution parameters are
calculated as:
[:zh_CN] 除非另有规定，否则其余 [$n] 个分布形参按如下计算：
[math]
\rho_k = \frac{w_k}{S \cdot (b_{k+1}-b_k)} \text{[span [:en]for [:zh_CN]对于]} k = 0, \dotsc, n - 1 \text{ ,}
[math:end]

[:en@~] in which the values [$w_k], commonly known as the [+:% weights], shall
be non-negative, non-NaN, and non-infinity.
[:zh_CN@~] 其中的各个 [$w_k] 值，通常称为[+:% 权重]，应当非负、非 NaN 且非无穷。

[:en] Moreover, the following relation shall hold: [$0 < S = w_0 + \dotsc + w_{n-1}].
[:zh_CN] 此外，应当满足如下关系： [$0 < S = w_0 + \dotsc + w_{n-1}]。

[%@lib piecewise_constant_distribution]
[%@lib@member result_type[!piecewise_constant_distribution]]
[codeblock:synopsis]
namespace std {
  template<class RealType = double>
  class piecewise_constant_distribution {
  public:
    // [:en] types \
    [:zh_CN] 类型
    using result_type = RealType;
    using param_type  = [[redoc("[=unspec]")]];

    // [:en] constructors and reset functions \
    [:zh_CN] 构造函数和重置函数
    piecewise_constant_distribution();
    template<class InputIteratorB, class InputIteratorW>
      piecewise_constant_distribution(InputIteratorB firstB, InputIteratorB lastB,
                                      InputIteratorW firstW);
    template<class UnaryOperation>
      piecewise_constant_distribution(initializer_list<RealType> bl, UnaryOperation fw);
    template<class UnaryOperation>
      piecewise_constant_distribution(size_t nw, RealType xmin, RealType xmax,
                                      UnaryOperation fw);
    explicit piecewise_constant_distribution(const param_type& parm);
    void reset();

    // [:en] equality operators \
    [:zh_CN] 相等性运算符
    friend bool operator==(const piecewise_constant_distribution& x,
                           const piecewise_constant_distribution& y);

    // [:en] generating functions \
    [:zh_CN] 生成函数
    template<class URBG>
      result_type operator()(URBG& g);
    template<class URBG>
      result_type operator()(URBG& g, const param_type& parm);

    // [:en] property functions \
    [:zh_CN] 属性函数
    vector<result_type> intervals() const;
    vector<result_type> densities() const;
    param_type param() const;
    void param(const param_type& parm);
    result_type min() const;
    result_type max() const;

    // [:en] inserters and extractors \
    [:zh_CN] 插入符和提取符
    template<class charT, class traits>
      friend basic_ostream<charT, traits>&
        operator<<(basic_ostream<charT, traits>& os, const piecewise_constant_distribution& x);
    template<class charT, class traits>
      friend basic_istream<charT, traits>&
        operator>>(basic_istream<charT, traits>& is, piecewise_constant_distribution& x);
  };
}
[codeblock:end]

[%@lib@ctor piecewise_constant_distribution]
[codeblock:declaration]
piecewise_constant_distribution();
[codeblock:end]

[div:description]
[para:effects]
[:en] Constructs a [`piecewise_constant_distribution] object with [$n = 1],
[$\rho_0 = 1], [$b_0 = 0], and [$b_1 = 1].
[:zh_CN] 构造一个 [`piecewise_constant_distribution] 对象，其 [$n = 1]，
[$\rho_0 = 1]，[$b_0 = 0]，以及 [$b_1 = 1]。
[div:end]

[%@lib@ctor piecewise_constant_distribution]
[codeblock:declaration]
template<class InputIteratorB, class InputIteratorW>
  piecewise_constant_distribution(InputIteratorB firstB, InputIteratorB lastB,
                                  InputIteratorW firstW);
[codeblock:end]

[div:description]
[para:mandates]
[:en] Both of
[:zh_CN] 以下
[list]
[item] [`is_convertible_v<iterator_traits<InputIteratorB>::value_type, double>]
[item] [`is_convertible_v<iterator_traits<InputIteratorW>::value_type, double>]
[list:end]
[:en@~] are [`true].
[:zh_CN@~] 均为 [`true]。

[para:expects]
[:en] [`InputIteratorB] and [`InputIteratorW] each meet the [^:oc InputIterator]
requirements ([#input.iterators]).
[:zh_CN] [`InputIteratorB] 和 [`InputIteratorW] 都满足 [^:oc InputIterator]
的规定（[#input.iterators]）。

[:en] If [`firstB == lastB] or [`++firstB == lastB], let [$n = 1], [$w_0 = 1],
[$b_0 = 0], and [$b_1 = 1].
[:zh_CN] 若 [`firstB == lastB] 或 [`++firstB == lastB]，则令 [$n = 1]，
[$w_0 = 1]，[$b_0 = 0]，以及 [$b_1 = 1]。

[:en] Otherwise, [$\bigl`[[`firstB], [`lastB]\bigr)] forms a sequence [$b] of
length [$n+1], the length of the sequence [$w] starting from [`firstW] is at
least [$n], and any [$w_k] for [$k \geq n] are ignored by the distribution.
[:zh_CN] 否则，[$\bigl`[[`firstB], [`lastB]\bigr)] 构成一个长度为 [$n+1] 的序列
[$b]，以 [`firstW] 开始的序列 [$w] 的长度至少为 [$n]，并且对于 [$k \geq n] 的
任何 [$w_k] 均被该分布忽略。

[para:effects]
[:en] Constructs a [`piecewise_constant_distribution] object with parameters as
specified above.
[:zh_CN] 以上述各形参来构造一个 [`piecewise_constant_distribution] 对象。
[div:end]

[%@lib@ctor piecewise_constant_distribution]
[codeblock:declaration]
template<class UnaryOperation>
  piecewise_constant_distribution(initializer_list<RealType> bl, UnaryOperation fw);
[codeblock:end]

[div:description]
[para:mandates]
[:en] [`is_invocable_r_v<double, UnaryOperation&, double>] is [`true].
[:zh_CN] [`is_invocable_r_v<double, UnaryOperation&, double>] 为 [`true]。

[para:effects]
[:en] Constructs a [`piecewise_constant_distribution] object with parameters
taken or calculated from the following values:
[:zh_CN] 构造一个 [`piecewise_constant_distribution] 对象，其各形参采用下述各值或计算得出：

[:en] If [$[`bl.size()] < 2], let [$n = 1], [$w_0 = 1], [$b_0 = 0], and [$b_1 = 1].
[:zh_CN] 若 [$[`bl.size()] < 2]，则令 [$n = 1]，[$w_0 = 1]，[$b_0 = 0]，以及 [$b_1 = 1]。

[:en] Otherwise, let [$\bigl`[[`bl.begin()], [`bl.end()]\bigr)] form a sequence
[$b_0, \dotsc, b_n], and let [$w_k = [`fw]\bigl(\bigl(b_{k+1} + b_k\bigr) / 2\bigr)]
for [$k = 0, \dotsc, n - 1].
[:zh_CN] 否则，令 [$\bigl`[[`bl.begin()], [`bl.end()]\bigr)] 构成序列 [$b_0, \ldots, b_n]，
并令 [$w_k = [`fw]\bigl(\bigl(b_{k+1} + b_k\bigr) / 2\bigr)]（对于 [$k = 0, \ldots, n - 1]）。

[para:complexity]
[:en] The number of invocations of [`fw] does not exceed [$n].
[:zh_CN] 对 [`fw] 的调用次数不超过 [$n]。
[div:end]

[%@lib@ctor piecewise_constant_distribution]
[codeblock:declaration]
template<class UnaryOperation>
  piecewise_constant_distribution(size_t nw, RealType xmin, RealType xmax, UnaryOperation fw);
[codeblock:end]

[div:description]
[para:mandates]
[:en] [`is_invocable_r_v<double, UnaryOperation&, double>] is [`true].
[:zh_CN] [`is_invocable_r_v<double, UnaryOperation&, double>] 为 [`true]。

[para:expects]
[:en] If [$[`nw] = 0], let [$n = 1], otherwise let [$n = [`nw]].
[:zh_CN] 若 [$[`nw] = 0]，则令 [$n = 1]，否则令 [$n = [`nw]]。

[:en] The relation [$0 < \delta = ([`xmax] - [`xmin]) / n] holds.
[:zh_CN] 满足关系 [$0 < \delta = ([`xmax] - [`xmin]) / n]。

[para:effects]
[:en] Constructs a [`piecewise_constant_distribution] object with parameters
taken or calculated from the following values:
[:zh_CN] 构造一个 [`piecewise_constant_distribution] 对象，其各形参采用下述各值或计算得出：

[:en] Let [$b_k = [`xmin] + k \cdot \delta] for [$k = 0, \ldots, n],
and [$w_k = [`fw](b_k + \delta / 2)] for [$k = 0, \dotsc, n - 1].
[:zh_CN] 令 [$b_k = [`xmin] + k \cdot \delta]（[$k = 0, \ldots, n]），
并令 [$w_k = [`fw](b_k + \delta / 2)]（[$k = 0, \dotsc, n - 1]）。

[para:complexity]
[:en] The number of invocations of [`fw] does not exceed [$n].
[:zh_CN] 对 [`fw] 的调用次数不超过 [$n]。
[div:end]

[%@lib@member intervals[!piecewise_constant_distribution]]
[codeblock:declaration]
vector<result_type> intervals() const;
[codeblock:end]

[div:description]
[para:returns]
[:en] A [`vector<result_type>] whose [`size] member returns [$n + 1] and whose
[`operator`[`]] member returns [$b_k] when invoked with argument [$k] for
[$k = 0, \dotsc, n].
[:zh_CN] 一个 [`vector<double>]，其 [`size] 成员返回 [$n + 1]，且其
[`operator`[`]] 成员当以实参 [$k]（[$k = 0, \dotsc, n]）调用时返回 [$b_k]。
[div:end]

[%@lib@member densities[!piecewise_constant_distribution]]
[codeblock:declaration]
vector<result_type> densities() const;
[codeblock:end]

[div:description]
[para:returns]
[:en] A [`vector<result_type>] whose [`size] member returns [$n] and whose [`operator`[`]]
member returns [$\rho_k] when invoked with argument [$k] for [$k = 0, \dotsc, n - 1].
[:zh_CN] 一个 [`vector<double>]，其 [`size] 成员返回 [$n]，且其 [`operator`[`]]
成员当以实参 [$k]（[$k = 0, \dotsc, n - 1]）调用时返回 [$\rho_k]。
[div:end]
