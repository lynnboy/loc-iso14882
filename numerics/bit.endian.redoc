[section#bit.endian
    [:en] Endian
    [:zh_CN] 端序
]

[para]
[:en] Two common methods of byte ordering in multibyte scalar types are
big-endian and little-endian in the execution environment.
[:zh_CN] 执行环境中，两种常见的多字节标量类型的字节顺序，是大端序和小端序。

[:en] Big-endian is a format for storage of binary data in which the most
significant byte is placed first, with the rest in descending order.
[:zh_CN] 大端序是一种二进制数据的存储格式，其中最高有效字节被首先放置，其余按
降序排列。

[:en] Little-endian is a format for storage of binary data in which the least
significant byte is placed first, with the rest in ascending order.
[:zh_CN] 小端序是一种二进制数据的存储格式，其中最低有效字节被首先放置，其余按
升序排列。

[:en] This subclause describes the endianness of the scalar types of the
execution environment.
[:zh_CN] 本子条款描述执行环境的标量类型的端序。

[%@lib endian]
[%@lib@member little[!endian]]
[%@lib@member big[!endian]]
[%@lib@member native[!endian]]
[codeblock:declaration]
enum class endian {
  little = [[redoc("[=seebelow]")]],
  big    = [[redoc("[=seebelow]")]],
  native = [[redoc("[=seebelow]")]]
};
[codeblock:end]

[div:description]
[para]
[:en] If all scalar types have size 1 byte, then all of [`endian::little],
[`endian::big], and [`endian::native] have the same value.
[:zh_CN] 如果所有标量类型大小都为 1 字节，则 [`endian::little]，[`endian::big]
和 [`endian::native] 的值都相同。

[:en] Otherwise, [`endian::little] is not equal to [`endian::big].
[:zh_CN] 否则，[`endian::little] 不等于 [`endian::big]。

[:en] If all scalar types are big-endian, [`endian::native] is equal to
[`endian::big].
[:zh_CN] 如果所有标量类型都为大端序，则 [`endian::native] 等于 [`endian::big]。

[:en] If all scalar types are little-endian, [`endian::native] is equal to
[`endian::little].
[:zh_CN] 如果所有标量类型都为小端序，则 [`endian::native] 等于 [`endian::little]。

[:en] Otherwise, [`endian::native] is not equal to either [`endian::big] or
[`endian::little].
[:zh_CN] 否则，[`endian::native] 既不等于 [`endian::big] 也不等于
[`endian::little]。
[div:end]
