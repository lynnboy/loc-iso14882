[section#linalg.algs.blas2.trmv
    [:en] Triangular matrix-vector product
    [:zh_CN] 三角矩阵-向量相乘
]

[para]
[begin:note]
[:en] These functions correspond to the BLAS functions [`xTRMV] and [`xTPMV]
[#:cite@super#blas2].
[:zh_CN] 这些函数对应于 BLAS 函数 [`xTRMV] 和 [`xTPMV][#:cite@super#blas2]。
[end:note]

[para]
[:en] The following elements apply to all functions in [#linalg.algs.blas2.trmv].
[:zh_CN] 下列要素适用于 [#linalg.algs.blas2.trmv] 中的所有函数。

[para:mandates]
[list]
[item]
[:en] If [`InMat] has [`layout_blas_packed] layout, then the layout[=']s
[`Triangle] template argument has the same type as the function[=']s [`Triangle]
template argument;
[:zh_CN] 如果 [`InMat] 具有 [`layout_blas_packed] 布局，则该布局的 [`Triangle]
模板实参与函数的 [`Triangle] 模板实参为相同类型。
[item]
[:en] [`[*compatible-static-extents]<decltype(A), decltype(A)>(0, 1)]
is [`true];
[:zh_CN] [`[*compatible-static-extents]<decltype(A), decltype(A)>(0, 1)]
为 [`true]；
[item]
[:en] [`[*compatible-static-extents]<decltype(A), decltype(y)>(0, 0)]
is [`true];
[:zh_CN] [`[*compatible-static-extents]<decltype(A), decltype(y)>(0, 0)]
为 [`true]；
[item]
[:en] [`[*compatible-static-extents]<decltype(A), decltype(x)>(0, 0)]
is [`true] for those overloads that take an [`x] parameter; and
[:zh_CN] 对于接受 [`x] 的那些重载，
[`[*compatible-static-extents]<decltype(A), decltype(x)>(0, 0)] 为 [`true]；并且
[item]
[:en] [`[*compatible-static-extents]<decltype(A), decltype(z)>(0, 0)]
is [`true] for those overloads that take a [`z] parameter.
[:zh_CN] 对于接受 [`z] 的那些重载，
[`[*compatible-static-extents]<decltype(A), decltype(z)>(0, 0)] 为 [`true]。
[list:end]

[para:expects]
[list]
[item]
[:en@~] [`A.extent(0)] equals [`A.extent(1)],
[:zh_CN@~] [`A.extent(0)] 等于 [`A.extent(1)]，
[item]
[:en@~] [`A.extent(0)] equals [`y.extent(0)],
[:zh_CN@~] [`A.extent(0)] 等于 [`y.extent(0)]，
[item]
[:en@~] [`A.extent(0)] equals [`x.extent(0)] for those overloads that take an
[`x] parameter, and
[:zh_CN@~] 对于接受 [`x] 形参的那些重载，[`A.extent(0)] 等于 [`x.extent(0)]，并且
[item]
[:en@~] [`A.extent(0)] equals [`z.extent(0)] for those overloads that take a
[`z] parameter.
[:zh_CN@~] 对于接受 [`z] 形参的那些重载，[`A.extent(0)] 等于 [`z.extent(0)]。
[list:end]

[codeblock:declaration]
template<[[redoc("*:c>")]]in-matrix InMat, class Triangle, class DiagonalStorage, [[redoc("*:c>")]]in-vector InVec,
         [[redoc("*:c>")]]out-vector OutVec>
  void triangular_matrix_vector_product(InMat A, Triangle t, DiagonalStorage d, InVec x, OutVec y);
template<class ExecutionPolicy,
         [[redoc("*:c>")]]in-matrix InMat, class Triangle, class DiagonalStorage, [[redoc("*:c>")]]in-vector InVec,
         [[redoc("*:c>")]]out-vector OutVec>
  void triangular_matrix_vector_product(ExecutionPolicy&& exec,
                                        InMat A, Triangle t, DiagonalStorage d, InVec x, OutVec y);
[codeblock:end]

[div:description]
[para]
[:en] These functions perform an overwriting triangular matrix-vector product,
taking into account the [`Triangle] and [`DiagonalStorage] parameters that
apply to the triangular matrix [`A] ([#linalg.general]).
[:zh_CN] 这些函数实施覆写的三角矩阵-向量相乘，其中考虑在三角矩阵 [`A] 上应用的
[`Triangle] 和 [`DiagonalStorage] 形参（[#linalg.general]）。

[para:effects]
[:en] Computes [$y = A x].
[:zh_CN] 计算 [$y = A x]。

[para:complexity]
[:en] [?bigoh [`x.extent(0)] \times [`A.extent(1)]].
[:zh_CN] [?bigoh [`x.extent(0)] \times [`A.extent(1)]]。
[div:end]

[codeblock:declaration]
template<[[redoc("*:c>")]]in-matrix InMat, class Triangle, class DiagonalStorage, [[redoc("*:c>")]]inout-vector InOutVec>
  void triangular_matrix_vector_product(InMat A, Triangle t, DiagonalStorage d, InOutVec y);
template<class ExecutionPolicy,
         [[redoc("*:c>")]]in-matrix InMat, class Triangle, class DiagonalStorage, [[redoc("*:c>")]]inout-vector InOutVec>
  void triangular_matrix_vector_product(ExecutionPolicy&& exec,
                                        InMat A, Triangle t, DiagonalStorage d, InOutVec y);
[codeblock:end]

[div:description]
[para]
[:en] These functions perform an in-place triangular matrix-vector product,
taking into account the [`Triangle] and [`DiagonalStorage] parameters that
apply to the triangular matrix [`A] ([#linalg.general]).
[:zh_CN] 这些函数实施原位的三角矩阵-向量相乘，其中考虑在三角矩阵 [`A] 上应用的
[`Triangle] 和 [`DiagonalStorage] 形参（[#linalg.general]）。

[begin:note]
[:en] Performing this operation in place hinders parallelization.
[:zh_CN] 原位实施这项运算会妨碍并行化。

[:en] However, other [`ExecutionPolicy] specific optimizations,
such as vectorization, are still possible.
[:zh_CN] 然而，仍可能进行其他 [`ExecutionPolicy] 专有的优化，如向量化。
[end:note]

[para:effects]
[:en] Computes a vector [$y'] such that [$y' = A y], and assigns each element of
[$y'] to the corresponding element of [$y].
[:zh_CN] 计算向量 [$y'] 使得 [$y' = A x]，并将 [$y'] 的各个元素赋值给 [$y] 的对应
元素。

[para:complexity]
[:en] [?bigoh [`y.extent(0)] \times [`A.extent(1)]].
[:zh_CN] [?bigoh [`y.extent(0)] \times [`A.extent(1)]]。
[div:end]

[codeblock:declaration]
template<[[redoc("*:c>")]]in-matrix InMat, class Triangle, class DiagonalStorage,
         [[redoc("*:c>")]]in-vector InVec1, [[redoc("*:c>")]]in-vector InVec2, [[redoc("*:c>")]]out-vector OutVec>
  void triangular_matrix_vector_product(InMat A, Triangle t, DiagonalStorage d,
                                        InVec1 x, InVec2 y, OutVec z);
template<class ExecutionPolicy, [[redoc("*:c>")]]in-matrix InMat, class Triangle, class DiagonalStorage,
         [[redoc("*:c>")]]in-vector InVec1, [[redoc("*:c>")]]in-vector InVec2, [[redoc("*:c>")]]out-vector OutVec>
  void triangular_matrix_vector_product(ExecutionPolicy&& exec,
                                        InMat A, Triangle t, DiagonalStorage d,
                                        InVec1 x, InVec2 y, OutVec z);
[codeblock:end]

[div:description]
[para]
[:en] These functions perform an updating triangular matrix-vector product,
taking into account the [`Triangle] and [`DiagonalStorage] parameters that
apply to the triangular matrix [`A] ([#linalg.general]).
[:zh_CN] 这些函数实施更新的三角矩阵-向量相乘，其中考虑在三角矩阵 [`A] 上应用的
[`Triangle] 和 [`DiagonalStorage] 形参（[#linalg.general]）。

[para:effects]
[:en] Computes [$z = y + A x].
[:zh_CN] 计算 [$z = y + A x]。

[para:complexity]
[:en] [?bigoh [`x.extent(0)] \times [`A.extent(1)]].
[:zh_CN] [?bigoh [`x.extent(0)] \times [`A.extent(1)]]。

[para:remarks]
[:en] [`z] may alias [`y].
[:zh_CN] [`z] 可以为 [`y] 的别名。
[div:end]
