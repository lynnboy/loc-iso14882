[section#simd.complex.math
    [:en] [`vec] complex math
    [:zh_CN] [`vec] 复数数学函数
]

[%@lib@member real[!simd]]
[%@lib@member imag[!simd]]
[%@lib@member abs[!simd]]
[%@lib@member arg[!simd]]
[%@lib@member norm[!simd]]
[%@lib@member conj[!simd]]
[%@lib@member proj[!simd]]
[%@lib@member exp[!simd]]
[%@lib@member log[!simd]]
[%@lib@member log10[!simd]]
[%@lib@member sqrt[!simd]]
[%@lib@member sin[!simd]]
[%@lib@member asin[!simd]]
[%@lib@member cos[!simd]]
[%@lib@member acos[!simd]]
[%@lib@member tan[!simd]]
[%@lib@member atan[!simd]]
[%@lib@member sinh[!simd]]
[%@lib@member asinh[!simd]]
[%@lib@member cosh[!simd]]
[%@lib@member acosh[!simd]]
[%@lib@member tanh[!simd]]
[%@lib@member atanh[!simd]]
[codeblock:declaration]
template<[[redoc("*:c>")]]simd-complex V>
  constexpr rebind_t<[[redoc("*>")]]simd-complex-value-type<V>, V> real(const V&) noexcept;
template<[[redoc("*:c>")]]simd-complex V>
  constexpr rebind_t<[[redoc("*>")]]simd-complex-value-type<V>, V> imag(const V&) noexcept;

template<[[redoc("*:c>")]]simd-complex V>
  constexpr rebind_t<[[redoc("*>")]]simd-complex-value-type<V>, V> abs(const V&);
template<[[redoc("*:c>")]]simd-complex V>
  constexpr rebind_t<[[redoc("*>")]]simd-complex-value-type<V>, V> arg(const V&);
template<[[redoc("*:c>")]]simd-complex V>
  constexpr rebind_t<[[redoc("*>")]]simd-complex-value-type<V>, V> norm(const V&);
template<[[redoc("*:c>")]]simd-complex V> constexpr V conj(const V&);
template<[[redoc("*:c>")]]simd-complex V> constexpr V proj(const V&);

template<[[redoc("*:c>")]]simd-complex V> constexpr V exp(const V& v);
template<[[redoc("*:c>")]]simd-complex V> constexpr V log(const V& v);
template<[[redoc("*:c>")]]simd-complex V> constexpr V log10(const V& v);

template<[[redoc("*:c>")]]simd-complex V> constexpr V sqrt(const V& v);
template<[[redoc("*:c>")]]simd-complex V> constexpr V sin(const V& v);
template<[[redoc("*:c>")]]simd-complex V> constexpr V asin(const V& v);
template<[[redoc("*:c>")]]simd-complex V> constexpr V cos(const V& v);
template<[[redoc("*:c>")]]simd-complex V> constexpr V acos(const V& v);
template<[[redoc("*:c>")]]simd-complex V> constexpr V tan(const V& v);
template<[[redoc("*:c>")]]simd-complex V> constexpr V atan(const V& v);
template<[[redoc("*:c>")]]simd-complex V> constexpr V sinh(const V& v);
template<[[redoc("*:c>")]]simd-complex V> constexpr V asinh(const V& v);
template<[[redoc("*:c>")]]simd-complex V> constexpr V cosh(const V& v);
template<[[redoc("*:c>")]]simd-complex V> constexpr V acosh(const V& v);
template<[[redoc("*:c>")]]simd-complex V> constexpr V tanh(const V& v);
template<[[redoc("*:c>")]]simd-complex V> constexpr V atanh(const V& v);
[codeblock:end]

[div:description]
[para:returns]
[:en] A [`basic_vec] object [`ret] where the [$i^\text{th}] element is initialized to
the result of [`[^cmplx-func](v`[[$i]`])] for all [$i] in the range [=range(0,V::size())],
where [^cmplx-func] is the corresponding function from [?libheader complex].
[:zh_CN] 一个 [`basic_vec] 对象 [`ret]，其中对于范围 [=range(0,V::size())]
中的每个 [$i]，其第 [$i] 个元素以 [`[^cmplx-func](v`[[$i]`])] 的结果初始化，
其中 [^cmplx-func] 是 [?libheader complex] 中的对应函数。

[:en] If in an invocation of [^cmplx-func] for index [$i] a domain, pole, or
range error would occur, the value of [`ret`[[$i]`]] is unspecified.
[:zh_CN] 若在为索引 [$i] 调用 [^cmplx-func] 时发生了定义域、极点或值域错误，
则未指明 [`ret`[[$i]`]] 的值。

[para:remarks]
[:en] It is unspecified whether [`errno] ([#errno]) is accessed.
[:zh_CN] 未指明是否会访问 [`errno]（[#errno]）。
[div:end]

[%@lib@member polar[!simd]]
[%@lib@member pow[!simd]]
[codeblock:declaration]
template<[[redoc("*:c>")]]simd-floating-point V>
  rebind_t<complex<typename V::value_type>, V> polar(const V& x, const V& y = {});

template<[[redoc("*:c>")]]simd-complex V> constexpr V pow(const V& x, const V& y);
[codeblock:end]

[div:description]
[para:returns]
[:en] A [`basic_vec] object [`ret] where the [$i^\text{th}] element is initialized to
the result of [`[^cmplx-func](x`[[$i]`], y`[[$i]`])] for all [$i] in the range [=range(0,V::size())],
where [^cmplx-func] is the corresponding function from [?libheader complex].
[:zh_CN] 一个 [`basic_vec] 对象 [`ret]，其中对于范围 [=range(0,V::size())] 中的每个 [$i]，
其第 [$i] 个元素以 [`[^cmplx-func](x`[[$i]`], y`[[$i]`])] 的结果初始化，
其中 [^cmplx-func] 是 [?libheader complex] 中的对应函数。

[:en] If in an invocation of [^cmplx-func] for index [$i] a domain, pole, or
range error would occur, the value of [`ret`[[$i]`]] is unspecified.
[:zh_CN] 若在为索引 [$i] 调用 [^cmplx-func] 时发生了定义域、极点或值域错误，
则未指明 [`ret`[[$i]`]] 的值。

[para:remarks]
[:en] It is unspecified whether [`errno] ([#errno]) is accessed.
[:zh_CN] 未指明是否会访问 [`errno]（[#errno]）。
[div:end]
