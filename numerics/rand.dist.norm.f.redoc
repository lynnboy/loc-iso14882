[/
% ----------------------------------------------------------------------
% Class template fisher_f_distribution
% ----------------------------------------------------------------------
/]

[section#rand.dist.norm.f
    [:en] Class template [`fisher_f_distribution]
    [:zh_CN] 类模板 [`fisher_f_distribution]
]

[%@library fisher_f_distribution]
[%[:en]random number distribution[![`fisher_f_distribution]]
  [:zh_CN]随机数分布[![`fisher_f_distribution]]]

[para]
[:en] A [`fisher_f_distribution] random number distribution produces random
numbers [$x \ge 0] distributed according to the probability density function
[%probability density function[![`fisher_f_distribution]]]
[%[`fisher_f_distribution][!probability density function]]
[:zh_CN] [`fisher_f_distribution] 随机数分布产生随机数 [$x \ge 0]，
其分布符合概率密度函数
[%概率密度函数[![`fisher_f_distribution]]]
[%[`fisher_f_distribution][!概率密度函数]]

[math]
p(x\,|\,m,n) = \frac{\Gamma\big((m+n)/2\big)}{\Gamma(m/2) \; \Gamma(n/2)}
  \cdot \left(\frac{m}{n}\right)^{m/2}
  \cdot x^{(m/2)-1}
  \cdot {\left(1 + \frac{m x}{n}\right)}^{-(m + n)/2}
  \text{ .}
[math:end]

[%@library fisher_f_distribution]
[codeblock:synopsis [special unspecified] ]
template<class RealType = double>
  class fisher_f_distribution {
  public:
    // [:en] types
    // [|:zh_CN] 类型
    using result_type = RealType;
    using param_type  = [=Unspec];

    // [:en] constructors and reset functions
    // [|:zh_CN] 构造函数和重置函数
    fisher_f_distribution() : fisher_f_distribution(1.0) {}
    explicit fisher_f_distribution(RealType m, RealType n = 1.0);
    explicit fisher_f_distribution(const param_type& parm);
    void reset();

    // [:en] generating functions
    // [|:zh_CN] 生成函数
    template<class URBG>
      result_type operator()(URBG& g);
    template<class URBG>
      result_type operator()(URBG& g, const param_type& parm);

    // [:en] property functions
    // [|:zh_CN] 属性函数
    RealType m() const;
    RealType n() const;
    param_type param() const;
    void param(const param_type& parm);
    result_type min() const;
    result_type max() const;
  };
[codeblock:end]

[%@library fisher_f_distribution[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
explicit fisher_f_distribution(RealType m, RealType n = 1);
[codeblock:end]

[begin:description]
[para:requires]
[:en] [$0 < [`m]] and [$0 < [`n]].
[:zh_CN] [$0 < [`m]] 且 [$0 < [`n]]。

[para:effects]
[:en] Constructs a [`fisher_f_distribution] object; [`m] and [`n] correspond to
the respective parameters of the distribution.
[:zh_CN] 构造一个 [`fisher_f_distribution] 对象；[`m] 和 [`n] 对应于分布的相应
形参。
[end:description]

[%@library fisher_f_distribution[!m]]
[%@library m[!fisher_f_distribution]]
[codeblock:declaration]
RealType m() const;
[codeblock:end]

[begin:description]
[para:returns]
[:en] The value of the [`m] parameter with which the object was constructed.
[:zh_CN] 该对象构造时的形参 [`m] 的值。
[end:description]

[%@library fisher_f_distribution[!n]]
[%@library n[!fisher_f_distribution]]
[codeblock:declaration]
RealType n() const;
[codeblock:end]

[begin:description]
[para:returns]
[:en] The value of the [`n] parameter with which the object was constructed.
[:zh_CN] 该对象构造时的形参 [`n] 的值。
[end:description]
