[section#linalg.reqs.alg
    [:en] Algorithm and class requirements
    [:zh_CN] 算法和类的规定
]

[para]
[:en] [#linalg.reqs.alg] lists common requirements for all algorithms and
classes in [#linalg].
[:zh_CN] [#linalg.reqs.alg] 列出对于 [#linalg] 中的所有算法和类的通用规定。

[para]
[:en] All of the following statements presume that the algorithm[=']s asymptotic
complexity requirements, if any, are satisfied.
[:zh_CN] 以下所有文字都假设已经满足了算法的渐进复杂度规定（如果有）。

[list]
[item]
[:en] The function may make arbitrarily many objects of any linear algebra value
type, value-initializing or direct-initializing them with any existing object of
that type.
[:zh_CN] 函数可以做出任何线性代数值类型的任意数量的对象，并对其进行值初始化，或
以该类型的任何现存对象进行直接初始化。

[item]
[:en] The [+:% triangular solve algorithms] in [#linalg.algs.blas2.trsv],
[#linalg.algs.blas3.trmm], [#linalg.algs.blas3.trsm], and
[#linalg.algs.blas3.inplacetrsm] either have a [`BinaryDivideOp] template
parameter (see [#linalg.algs.reqs]) and a binary function object parameter
[`divide] of that type, or they have effects equivalent to invoking such an
algorithm.
[:zh_CN] [#linalg.algs.blas2.trsv]、[#linalg.algs.blas3.trmm]、
[#linalg.algs.blas3.trsm] 和 [#linalg.algs.blas3.inplacetrsm] 中的
[+:% 三角求解算法]，要么具有一个 [`BinaryDivideOp] 模板形参
（见 [#linalg.algs.reqs]）和一个该类型的二元函数对象形参 [`divide]，要么它们具有
等价于调用这种算法的效果。

[:en] Triangular solve algorithms interpret [`divide(a, b)] as [`a] times the
multiplicative inverse of [`b].
[:zh_CN] 三角求解算法将 [`divide(a, b)] 解读为 [`a] 乘以 [`b] 的乘法逆元。

[:en] Each triangular solve algorithm uses a sequence of evaluations of
[`*], [`*=], [`divide], unary [`+], binary [`+], [`+=], unary [`-], binary [`-],
[`-=], and [`=] operators that would produce the result specified by the
algorithm[=']s [=Effects] and [=Remarks] when operating on elements of a field
with noncommutative multiplication.
[:zh_CN] 各个三角求解算法使用一系列对 [`*]、[`*=]、[`divide]、一元 [`+]、
二元 [`+]、[`+=]、一元 [`-]、二元 [`-]、[`-=] 和 [`=] 运算符的求值，当以
非交换乘法在域的元素上运算时将会产生该算法的 [=Effects] 和 [=Remarks] 所规定的
结果。

[:en] It is a precondition of the algorithm that any addend, any subtrahend,
any partial sum of addends in any order (treating any difference as a sum with
the second term negated), any factor, any partial product of factors respecting
their order, any numerator (first argument of [`divide]), any denominator
(second argument of [`divide]), and any assignment is a well-formed expression.
[:zh_CN] 算法的一项前条件为，任何加数，任何减数，各加数以任意顺序的任何部分和
（将任何差视为与第二项的相反数的和），任何乘法因数，各因数遵循顺序的任何部分积，
任何分子（[`divide] 的第一实参），任何分母（[`divide] 的第二实参），以及任何赋值，
均为良构表达式。

[item]
[:en] Each function in [#linalg.algs.blas1], [#linalg.algs.blas2], and
[#linalg.algs.blas3] that is not a triangular solve algorithm will use
a sequence of evaluations of [`*], [`*=], [`+], [`+=], and [`=] operators
that would produce the result specified by the algorithm[=']s [=Effects] and
[=Remarks] when operating on elements of a semiring with noncommutative
multiplication.
[:zh_CN] [#linalg.algs.blas1]、[#linalg.algs.blas2] 和 [#linalg.algs.blas3] 中的
每个不是三角求解算法的函数，使用一系列对 [`*]、[`*=]、[`+]、[`+=] 和 [`=] 运算符
的求值，当以非交换乘法在半环的元素上运算时将会产生该算法的 [=Effects] 和
[=Remarks] 所规定的结果。

[:en] It is a precondition of the algorithm that any addend, any partial sum of
addends in any order, any factor, any partial product of factors respecting
their order, and any assignment is a well-formed expression.
[:zh_CN] 算法的一项前条件为，任何加数，各加数以任意顺序的任何部分和，
任何乘法因数，各因数遵循顺序的任何部分积，以及任何赋值，均为良构表达式。

[item]
[:en] If the function has an output [`mdspan], then all addends, subtrahends
(for the triangular solve algorithms), or results of the [`divide] parameter on
intermediate terms (if the function takes a [`divide] parameter) are assignable
and convertible to the output [`mdspan][=']s [`value_type].
[:zh_CN] 如果函数有一个输出 [`mdspan]，则所有加数，减数（对于三角求解算法），或
[`divide] 形参在中间项上的结果（若函数接受 [`divide] 形参），都可复制并转换为
输出 [`mdspan] 的 [`value_type]。

[item]
[:en] The function may reorder addends and partial sums arbitrarily.
[:zh_CN] 函数可以任意对加数和部分和进行重排序。

[begin:note]
[:en] Factors in each product are not reordered; multiplication is not
necessarily commutative.
[:zh_CN] 每个乘积中的因数都不会重排序；乘法不必具有可交换性。
[end:note]
[list:end]

[begin:note]
[:en] The above requirements do not prohibit implementation approaches and
optimization techniques which are not user-observable.
[:zh_CN] 上述规定并不禁止采用用户不可观察的实现方法和优化技术。

[:en] In particular, if for all input and output arguments the [`value_type] is
a floating-point type, implementers are free to leverage approximations,
use arithmetic operations not explicitly listed above, and
compute floating point sums in any way that improves their accuracy.
[:zh_CN] 尤其是，如果所有输入和输出实参的 [`value_type] 均为浮点类型，那么实现者
可以自由发挥近似值的作用，使用未在上文明确列出的算术运算，以及以任何可以提升
精确性的方式计算浮点和。
[end:note]

[para]
[begin:note]
[:en] For all functions in [#linalg], suppose that all input and output [`mdspan]
have as [`value_type] a floating-point type, and any [`Scalar] template argument
has a floating-point type.
[:zh_CN] 对于 [#linalg] 中的所有函数，假设其所有输入和输出 [`mdspan] 均具有
浮点类型的 [`value_type]，且任何 [`Scalar] 模板实参也具有浮点类型。

[:en] Then, functions can do all of the following:
[:zh_CN] 那么，函数可以做出以下所有行为：
[list]
[item]
[:en] compute floating-point sums in any way that improves their accuracy for
arbitrary input;
[:zh_CN] 以对任意输入提升器精确性的方式计算浮点和；
[item]
[:en] perform additional arithmetic operations (other than those specified by
the function[=']s wording and [#linalg.reqs.alg]) in order to improve
performance or accuracy; and
[:zh_CN] 实施额外的算术运算（除了该函数措辞和 [#linalg.reqs.alg] 中指定的那些），
以提升性能或精确性；以及
[item]
[:en] use approximations (that might not be exact even if computing with real
numbers), instead of computations that would be exact if it were possible to
compute without rounding error;
[:zh_CN] 使用近似值（可能在以实数计算也不精确），而非当没有舍入误差时可能计算的
精确值进行计算；
[list:end]
[:en] as long as
[:zh_CN] 只要
[list]
[item]
[:en] the function satisfies the complexity requirements; and
[:zh_CN] 此函数满足复杂度规定；并且
[item]
[:en] the function is logarithmically stable, as defined in Demmel 2007
[#:cite@super#linalg-stable].
[:zh_CN] 此函数为对数稳定，如 Demmel 2007[#:cite@super#linalg-stable] 的定义。

[:en] Strassen[=']s algorithm for matrix-matrix multiply is an example of
a logarithmically stable algorithm.
[:zh_CN] 施特拉森的矩阵-矩阵相乘算法就是对数稳定算法的一个例子。
[list:end]
[end:note]
