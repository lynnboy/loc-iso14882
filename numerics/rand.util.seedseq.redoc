[/
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% class seed_seq:
/]

[section#rand.util.seedseq
    [:en] Class [`seed_seq]
    [:zh_CN] 类 [`seed_seq]
]

[%@lib seed_seq]
[%@lib@member result_type[!seed_seq]]
[codeblock:synopsis]
class seed_seq {
public:
  // [:en] types
  // [:zh_CN] 类型
  using result_type = uint_least32_t;

  // [:en] constructors
  // [:zh_CN] 构造函数
  seed_seq();
  template<class T>
    seed_seq(initializer_list<T> il);
  template<class InputIterator>
    seed_seq(InputIterator begin, InputIterator end);

  // [:en] generating functions
  // [:zh_CN] 生成函数
  template<class RandomAccessIterator>
    void generate(RandomAccessIterator begin, RandomAccessIterator end);

  // [:en] property functions
  // [:zh_CN] 属性函数
  size_t size() const noexcept;
  template<class OutputIterator>
    void param(OutputIterator dest) const;

  // [:en] no copy functions
  // [:zh_CN] 不提供复制函数
  seed_seq(const seed_seq&) = delete;
  void operator=(const seed_seq&) = delete;

private:
  vector<result_type> v;        // [=expos]
};
[codeblock:end]

[%@lib@ctor seed_seq]
[codeblock:declaration]
seed_seq();
[codeblock:end]

[div:description]
[para:effects]
[:en] Constructs a [`seed_seq] object as if by default-constructing its member
[`v].
[:zh_CN] 以如同默认构造其成员 [`v] 的方式构造一个 [`seed_seq] 对象。

[para:throws]
[:en] Nothing.
[:zh_CN] 无。
[div:end]

[%@lib@ctor seed_seq]
[codeblock:declaration]
template<class T>
 seed_seq(initializer_list<T> il);
[codeblock:end]

[div:description]
[para:requires]
[:en] [`T] shall be an integer type.
[:zh_CN] [`T] 应当为整数类型。

[para:effects]
[:en] Same as [`seed_seq(il.begin(), il.end())].
[:zh_CN] 等同于 [`seed_seq(il.begin(), il.end())]。
[div:end]

[%@lib@ctor seed_seq]
[codeblock:declaration]
template<class InputIterator>
  seed_seq(InputIterator begin, InputIterator end);
[codeblock:end]

[div:description]
[para:requires]
[:en] [`InputIterator] shall meet the [^:oc InputIterator] requirements
([#iterator.input.requirements]).
[:zh_CN] [`InputIterator] 应当满足 [^:oc InputIterator] 的规定（表
[#tab:iterator.input.requirements]）。

[:en] Moreover, [`iterator_traits<InputIterator>::value_type] shall denote an
integer type.
[:zh_CN] 此外，[`iterator_traits<InputIterator>::value_type] 应当代表一个整数
类型。

[para:effects]
[:en] Constructs a [`seed_seq] object by the following algorithm:
[:zh_CN] 以如下算法构造一个 [`seed_seq] 对象：

[codeblock:notation]
for (InputIterator s = begin; s != end; ++s)
 v.push_back((*s)[$\bmod 2^{32}]);
[codeblock:end]
[div:end]

[%@lib@member generate[!seed_seq]]
[codeblock:declaration]
template<class RandomAccessIterator>
  void generate(RandomAccessIterator begin, RandomAccessIterator end);
[codeblock:end]

[div:description]
[para:requires]
[:en] [`RandomAccessIterator] shall meet the [^:oc RandomAccessIterator]
requirements ([#random.access.iterators]) and the requirements of a mutable
iterator.
[:zh_CN] [`RandomAccessIterator] 应当满足 [^:oc RandomAccessIterator] 的规定
（[#random.access.iterators]）和对于可改动迭代器的规定。

[:en] Moreover, [`iterator_traits<RandomAccessIterator>::value_type] shall
denote an unsigned integer type capable of accommodating 32-bit quantities.
[:zh_CN] 此外，[`iterator_traits<RandomAccessIterator>::value_type] 应当代表一个
足以容纳 32 位的量的无符号整数类型。

[para:effects]
[:en] Does nothing if [`begin == end].
[:zh_CN] 当 [`begin == end] 时不做任何事。

[:en] Otherwise, with [$s = [`v.size()]] and [$n = [`end] - [`begin]], fills
the supplied range [$`[[`begin],[`end])] according to the following algorithm in
which each operation is to be carried out modulo [$2^{32}], each indexing
operator applied to [`begin] is to be taken modulo [$n], and [$T(x)] is defined
as [$x [=xor] (x [=rightshift] 27)]:
[:zh_CN] 否则，令 [$s = [`v.size()]] 以及 [$n = [`end] - [`begin]]，根据以下算法
对所提供的范围 [$`[[`begin],[`end])] 进行填充，其中各个操作均按 [$2^{32}] 取模，
对 [`begin] 进行的索引均按 [$n] 取模，以及 [$T(x)] 被定义为
[$x [=xor] (x [=rightshift] 27)]：

[list]
[item]
[:en] By way of initialization, set each element of the range to the value
[`0x8b8b8b8b].
[:zh_CN] 通过初始化，将范围中的各个元素设值为 [`0x8b8b8b8b]。

[:en] Additionally, for use in subsequent steps, let [$p = (n - t) / 2] and let
[$q = p + t], where
[:en] 此外，为后续步骤准备，令 [$p = (n - t) / 2] 并令 [$q = p + t]，其中

[math]
t = (n \ge 623) \mbox{ ? } 11 \mbox{ : } (n \ge 68) \mbox{ ? } 7 \mbox{ : } (n \ge 39) \mbox{ ? } 5 \mbox{ : } (n \ge 7) \mbox{ ? } 3 \mbox{ : } (n - 1)/2;
[math:end]

[item]
[:en] With [$m] as the larger of [$s + 1] and [$n], transform the elements of
the range: iteratively for [$k = 0, \dotsc, m - 1], calculate values
[:en] 设 [$m] 为 [$s + 1] 和 [$n] 的较大值，对范围中的各元素进行变换：
对于 [$k = 0, \dotsc, m - 1]，重复计算各值

[math]
\begin{eqnarray*}
 r_1 & = &
   1664525 \cdot T(    [`begin`[]k[``]]
				  [=xor] [`begin`[]k+p[``]]
				  [=xor] [`begin`[]k-1 [``]]
				  )
\\
 r_2 & = & r_1 + \left\{
   \begin{array}{cl}
	 s                                  & \mbox{,  } k = 0
	 \\
	 k \bmod n + [`v`[]k-1[``]] & \mbox{,  } 0 < k \le s
	 \\
	 k \bmod n                          & \mbox{,  } s < k
   \end{array}
 \right.
\end{eqnarray*}
[math:end]

[:en@~] and, in order, increment [`begin`[[$k+p]`]] by [$r_1], increment
[`begin`[[$k+q]`]] by [$r_2], and set [`begin`[[$k]`]] to [$r_2].
[:zh_CN@~] 并且，依次将 [`begin`[[$k+p]`]] 增加 [$r_1]，将 [`begin`[[$k+q]`]]
增加 [$r_2]，并将 [`begin`[[$k]`]] 设值为 [$r_2]。

[item]
[:en] Transform the elements of the range again, beginning where the previous
step ended: iteratively for [$k = m, \dotsc, m + n - 1], calculate values
[:zh_CN] 当上一步骤完成后，再次对范围中的各个元素进行变换：
对于 [$k = m, \dotsc, m + n - 1]，重复计算各值：

[math]
\begin{eqnarray*}
 r_3 & = &
   1566083941 \cdot T( [`begin`[]k  [``]]
					 + [`begin`[]k+p[``]]
					 + [`begin`[]k-1[``]]
					 )
 \\
 r_4 & = & r_3 - (k \bmod n)
\end{eqnarray*}
[math:end]

[:en@~] and, in order, update [`begin`[[$k+p]`]] by xoring it with [$r_3],
update [`begin`[[$k+q]`]] by xoring it with [$r_4], and set [`begin`[[$k]`]] to
[$r_4].
[:zh_CN@~] 并且，依次将 [`begin`[[$k+p]`]] 更新为与 [$r_3] 亦或的结果，将
[`begin`[[$k+q]`]] 更新为与 [$r_4] 亦或的结果，并将 [`begin`[[$k]`]] 设值为
[$r_4]。
[list:end]

[para:throws]
[:en] What and when [`RandomAccessIterator] operations of [`begin] and [`end]
throw.
[:zh_CN] 当对 [`begin] 和 [`end] 的 [`RandomAccessIterator] 操作中抛出异常时抛出
其所抛出的异常。
[div:end]

[%@li@member size[!seed_seq]]
[codeblock:declaration]
size_t size() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] The number of 32-bit units that would be returned by a call to [`param()].
[:zh_CN] 调用 [`param()] 所能返回的 32 位数据单元的书陆良。

[para:complexity]
[:en] Constant time.
[:zh_CN] 常量时间。
[div:end]

[%@lib@member param[!seed_seq]]
[codeblock:declaration]
template<class OutputIterator>
  void param(OutputIterator dest) const;
[codeblock:end]

[div:description]
[para:requires]
[:en] [`OutputIterator] shall meet the [^:oc OutputIterator] requirements
([#output.iterators]).
[:zh_CN] [`OutputIterator] 应当满足 [^:oc OutputIterator] 的规定
（[#output.iterators]）。

[:en] Moreover, the expression [`*dest = rt] shall be valid for a value [`rt] of
type [`result_type].
[:zh_CN] 此外，表达式 [`*dest = rt] 对于 [`result_type] 类型的值 [`rt] 应当有效。

[para:effects]
[:en] Copies the sequence of prepared 32-bit units to the given destination, as
if by executing the following statement:
[:zh_CN] 向给定的目标中复制所准备好的 32 位单元的序列，如同执行下列语句：

[codeblock]
copy(v.begin(), v.end(), dest);
[codeblock:end]

[para:throws]
[:en] What and when [`OutputIterator] operations of [`dest] throw.
[:zh_CN] 当 [`dest] 的 [`OutputIterator] 操作抛出异常时抛出其所抛出的异常。
[div:end]
