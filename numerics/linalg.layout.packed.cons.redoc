[section#linalg.layout.packed.cons
    [:en] Constructors
    [:zh_CN] 构造函数
]

[%@lib@ctor layout_blas_packed::mapping]
[codeblock:declaration]
constexpr mapping(const extents_type& e) noexcept;
[codeblock:end]

[div:description]
[para:expects]
[list]
[item]
[:en] Let [$N] be equal to [`e.extent(0)].
[:zh_CN] 令 [$N] 等于 [`e.extent(0)]。

[:en] Then, [$N \times (N+1)] is representable as a value of type [`index_type]
([#basic.fundamental]).
[:zh_CN] 则，[$N \times (N+1)] 可表示为 [`index_type] 类型的值
（[#basic.fundamental]）。
[item]
[:en] [`e.extent(0)] equals [`e.extent(1)].
[:zh_CN] [`e.extent(0)] 等于 [`e.extent(1)]。
[list:end]

[para:effects]
[:en] Direct-non-list-initializes [*extents_] with [`e].
[:zh_CN] 以 [`e] 直接非列表初始化 [*extents_]。
[div:end]

[%@lib@ctor layout_blas_packed::mapping]
[codeblock:declaration]
template<class OtherExtents>
  explicit(!is_convertible_v<OtherExtents, extents_type>)
    constexpr mapping(const mapping<OtherExtents>& other) noexcept;
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`is_constructible_v<extents_type, OtherExtents>] is [`true].
[:zh_CN] [`is_constructible_v<extents_type, OtherExtents>] 为 [`true]。

[para:expects]
[:en] Let [$N] be equal to [`other.extents().extent(0)].
[:zh_CN] 令 [$N] 等于 [`other.extents().extent(0)]。

[:en] Then, [$N \times (N+1)] is representable as a value of type [`index_type]
([#basic.fundamental]).
[:zh_CN] 则，[$N \times (N+1)] 可表示为 [`index_type] 类型的值
（[#basic.fundamental]）。

[para:effects]
[:en] Direct-non-list-initializes [*extents_] with [`other.extents()].
[:zh_CN] 以 [`other.extents()] 直接非列表初始化 [*extents_]。
[div:end]
