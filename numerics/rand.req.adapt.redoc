[/
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Random Number Engine Adaptor requirements:
/]

[section#rand.req.adapt
    [:en] Random number engine adaptor requirements
    [:zh_CN] 随机数引擎适配器的规定
]

[para]
[:en] A [+random number engine adaptor[%]] (commonly shortened to [+adaptor[%]])
[`a] of type [`A] is a random number engine that takes values produced by some
other random number engine, and applies an algorithm to those values in order to
deliver a sequence of values with different randomness properties.
[:zh_CN] [`A] 类型的[+随机数引擎适配器[%]]（常简称为[+适配器[%]]）[`a] 是随机数
引擎，它获得由某个别的随机数引擎所产生的值，并在这些值上实施某种算法，以提供具有
不同的随机性性质的值的序列。

[:en] An engine [`b] of type [`B] adapted in this way is termed a [+base
engine[%]] in this context.
[:zh_CN] 以这种方式所适配的 [`B] 类型的引擎 [`b]，在这种语境中被称为其[+基础
引擎[%]]。

[:en] The expression [`a.base()] shall be valid and shall return a const
reference to [`a][=']s base engine.
[:zh_CN] 表达式 [`a.base()] 应当有效，并当返回指代 [`a] 的基础引擎的 const 引用。

[para]
[:en] The requirements of a random number engine type shall be interpreted as
follows with respect to a random number engine adaptor type.
[:zh_CN] 对于随机数引擎适配器类型，随机数引擎的规定应当以如下方式解释。

[codeblock:declaration]
A::A();
[codeblock:end]

[enter:description]
[para:effects]
[:en] The base engine is initialized as if by its default constructor.
[:zh_CN] 其基础引擎如同以其默认构造函数来进行初始化。
[exit:description]

[codeblock:declaration]
bool operator==(const A& a1, const A& a2);
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`true] if [`a1][=']s base engine is equal to [`a2][=']s base engine.
[:zh_CN] 当 [`a1] 的基础引擎等于 [`a2] 的基础引擎时为 [`true]。

[:en] Otherwise returns [`false].
[:zh_CN] 否则返回 [`false]。
[exit:description]

[codeblock:declaration]
A::A(result_type s);  
[codeblock:end]

[enter:description]
[para:effects]
[:en] The base engine is initialized with [`s].
[:zh_CN] 以 [`s] 初始化其基础引擎。
[exit:description]

[codeblock:declaration]
template<class Sseq> void A::A(Sseq& q);  
[codeblock:end]

[enter:description]
[para:effects]
[:en] The base engine is initialized with [`q].
[:zh_CN] 以 [`q] 初始化其基础引擎。
[exit:description]

[codeblock:declaration]
void seed();  
[codeblock:end]

[enter:description]
[para:effects]
[:en] With [`b] as the base engine, invokes [`b.seed()].
[:zh_CN] 令 [`b] 为其基础引擎，调用 [`b.seed()]。
[exit:description]

[codeblock:declaration]
void seed(result_type s);  
[codeblock:end]

[enter:description]
[para:effects]
[:en] With [`b] as the base engine, invokes [`b.seed(s)].
[:zh_CN] 令 [`b] 为其基础引擎，调用 [`b.seed(s)]。
[exit:description]

[codeblock:declaration]
template<class Sseq> void seed(Sseq& q);  
[codeblock:end]

[enter:description]
[para:effects]
[:en] With [`b] as the base engine, invokes [`b.seed(q)].
[:zh_CN] 令 [`b] 为其基础引擎，调用 [`b.seed(q)]。
[exit:description]

[para]
[:en] [`A] shall also satisfy the following additional requirements:
[:zh_CN] [`A] 还应当符合以下的附加规定：

[list]
[item]
[:en] The complexity of each function shall not exceed the complexity of the
corresponding function applied to the base engine.
[:zh_CN] 每个函数的复杂度都应当不超过其在基础引擎上实施的对应函数的复杂度。
[item]
[:en] The state of [`A] shall include the state of its base engine.
[:zh_CN] [`A] 的状态应当包括其基础引擎的状态。

[:en] The size of [`A][=']s state shall be no less than the size of the base
engine.
[:zh_CN] [`A] 的状态的大小应当不小于其基础引擎的大小。
[item]
[:en] Copying [`A][=']s state (e.g., during copy construction or copy
assignment) shall include copying the state of the base engine of [`A].
[:zh_CN] 对[`A] 的状态的复制（比如在复制构造或复制赋值中）应当包括对 [`A] 的基础
引擎的状态的复制。
[item]
[:en] The textual representation of [`A] shall include the textual
representation of its base engine.
[:zh_CN] [`A] 的文本表示应当包含其基础引擎的文本表示。
[list:end]
