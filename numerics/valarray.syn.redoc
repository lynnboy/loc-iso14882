[section#valarray.syn
    [:en] Header [`<valarray>] synopsis
]

[%@header valarray]
[codeblock:synopsis [special unspecified1 unspecified2] ]
#include <initializer_list>

namespace std {
  template<class T> class valarray;         // [:en] An array of type [`T] \
                                               [:zh_CN] 类型 [`T] 的数组
  class slice;                              // [:en] a BLAS-like slice out of an array \
                                               [:zh_CN] BLAS 风格的数组切片
  template<class T> class slice_array;
  class gslice;                             // [:en] a generalized slice out of an array \
                                               [:zh_CN] 一般化的数组切片
  template<class T> class gslice_array;
  template<class T> class mask_array;       // [:en] a masked array \
                                               [:zh_CN] 掩码数组
  template<class T> class indirect_array;   // [:en] an indirected array \
                                               [:zh_CN] 间接数组

  template<class T> void swap(valarray<T>&, valarray<T>&) noexcept;

  template<class T> valarray<T> operator* (const valarray<T>&, const valarray<T>&);
  template<class T> valarray<T> operator* (const valarray<T>&,
                                           const typename valarray<T>::value_type&);
  template<class T> valarray<T> operator* (const typename valarray<T>::value_type&,
                                           const valarray<T>&);

  template<class T> valarray<T> operator/ (const valarray<T>&, const valarray<T>&);
  template<class T> valarray<T> operator/ (const valarray<T>&,
                                           const typename valarray<T>::value_type&);
  template<class T> valarray<T> operator/ (const typename valarray<T>::value_type&,
                                           const valarray<T>&);

  template<class T> valarray<T> operator% (const valarray<T>&, const valarray<T>&);
  template<class T> valarray<T> operator% (const valarray<T>&,
                                           const typename valarray<T>::value_type&);
  template<class T> valarray<T> operator% (const typename valarray<T>::value_type&,
                                           const valarray<T>&);

  template<class T> valarray<T> operator+ (const valarray<T>&, const valarray<T>&);
  template<class T> valarray<T> operator+ (const valarray<T>&,
                                           const typename valarray<T>::value_type&);
  template<class T> valarray<T> operator+ (const typename valarray<T>::value_type&,
                                           const valarray<T>&);

  template<class T> valarray<T> operator- (const valarray<T>&, const valarray<T>&);
  template<class T> valarray<T> operator- (const valarray<T>&,
                                           const typename valarray<T>::value_type&);
  template<class T> valarray<T> operator- (const typename valarray<T>::value_type&,
                                           const valarray<T>&);

  template<class T> valarray<T> operator^ (const valarray<T>&, const valarray<T>&);
  template<class T> valarray<T> operator^ (const valarray<T>&,
                                           const typename valarray<T>::value_type&);
  template<class T> valarray<T> operator^ (const typename valarray<T>::value_type&,
                                           const valarray<T>&);

  template<class T> valarray<T> operator& (const valarray<T>&, const valarray<T>&);
  template<class T> valarray<T> operator& (const valarray<T>&,
                                           const typename valarray<T>::value_type&);
  template<class T> valarray<T> operator& (const typename valarray<T>::value_type&,
                                           const valarray<T>&);

  template<class T> valarray<T> operator| (const valarray<T>&, const valarray<T>&);
  template<class T> valarray<T> operator| (const valarray<T>&,
                                           const typename valarray<T>::value_type&);
  template<class T> valarray<T> operator| (const typename valarray<T>::value_type&,
                                           const valarray<T>&);

  template<class T> valarray<T> operator<<(const valarray<T>&, const valarray<T>&);
  template<class T> valarray<T> operator<<(const valarray<T>&,
                                           const typename valarray<T>::value_type&);
  template<class T> valarray<T> operator<<(const typename valarray<T>::value_type&,
                                           const valarray<T>&);

  template<class T> valarray<T> operator>>(const valarray<T>&, const valarray<T>&);
  template<class T> valarray<T> operator>>(const valarray<T>&,
                                           const typename valarray<T>::value_type&);
  template<class T> valarray<T> operator>>(const typename valarray<T>::value_type&,
                                           const valarray<T>&);

  template<class T> valarray<bool> operator&&(const valarray<T>&, const valarray<T>&);
  template<class T> valarray<bool> operator&&(const valarray<T>&,
                                              const typename valarray<T>::value_type&);
  template<class T> valarray<bool> operator&&(const typename valarray<T>::value_type&,
                                              const valarray<T>&);

  template<class T> valarray<bool> operator||(const valarray<T>&, const valarray<T>&);
  template<class T> valarray<bool> operator||(const valarray<T>&,
                                              const typename valarray<T>::value_type&);
  template<class T> valarray<bool> operator||(const typename valarray<T>::value_type&,
                                              const valarray<T>&);

  template<class T> valarray<bool> operator==(const valarray<T>&, const valarray<T>&);
  template<class T> valarray<bool> operator==(const valarray<T>&,
                                              const typename valarray<T>::value_type&);
  template<class T> valarray<bool> operator==(const typename valarray<T>::value_type&,
                                              const valarray<T>&);
  template<class T> valarray<bool> operator!=(const valarray<T>&, const valarray<T>&);
  template<class T> valarray<bool> operator!=(const valarray<T>&,
                                              const typename valarray<T>::value_type&);
  template<class T> valarray<bool> operator!=(const typename valarray<T>::value_type&,
                                              const valarray<T>&);

  template<class T> valarray<bool> operator< (const valarray<T>&, const valarray<T>&);
  template<class T> valarray<bool> operator< (const valarray<T>&,
                                              const typename valarray<T>::value_type&);
  template<class T> valarray<bool> operator< (const typename valarray<T>::value_type&,
                                              const valarray<T>&);
  template<class T> valarray<bool> operator> (const valarray<T>&, const valarray<T>&);
  template<class T> valarray<bool> operator> (const valarray<T>&,
                                              const typename valarray<T>::value_type&);
  template<class T> valarray<bool> operator> (const typename valarray<T>::value_type&,
                                              const valarray<T>&);
  template<class T> valarray<bool> operator<=(const valarray<T>&, const valarray<T>&);
  template<class T> valarray<bool> operator<=(const valarray<T>&,
                                              const typename valarray<T>::value_type&);
  template<class T> valarray<bool> operator<=(const typename valarray<T>::value_type&,
                                              const valarray<T>&);
  template<class T> valarray<bool> operator>=(const valarray<T>&, const valarray<T>&);
  template<class T> valarray<bool> operator>=(const valarray<T>&,
                                              const typename valarray<T>::value_type&);
  template<class T> valarray<bool> operator>=(const typename valarray<T>::value_type&,
                                              const valarray<T>&);

  template<class T> valarray<T> abs  (const valarray<T>&);
  template<class T> valarray<T> acos (const valarray<T>&);
  template<class T> valarray<T> asin (const valarray<T>&);
  template<class T> valarray<T> atan (const valarray<T>&);

  template<class T> valarray<T> atan2(const valarray<T>&, const valarray<T>&);
  template<class T> valarray<T> atan2(const valarray<T>&,
                                      const typename valarray<T>::value_type&);
  template<class T> valarray<T> atan2(const typename valarray<T>::value_type&,
                                      const valarray<T>&);

  template<class T> valarray<T> cos  (const valarray<T>&);
  template<class T> valarray<T> cosh (const valarray<T>&);
  template<class T> valarray<T> exp  (const valarray<T>&);
  template<class T> valarray<T> log  (const valarray<T>&);
  template<class T> valarray<T> log10(const valarray<T>&);

  template<class T> valarray<T> pow(const valarray<T>&, const valarray<T>&);
  template<class T> valarray<T> pow(const valarray<T>&, const typename valarray<T>::value_type&);
  template<class T> valarray<T> pow(const typename valarray<T>::value_type&, const valarray<T>&);

  template<class T> valarray<T> sin  (const valarray<T>&);
  template<class T> valarray<T> sinh (const valarray<T>&);
  template<class T> valarray<T> sqrt (const valarray<T>&);
  template<class T> valarray<T> tan  (const valarray<T>&);
  template<class T> valarray<T> tanh (const valarray<T>&);

  template<class T> [*unspecified1] begin(valarray<T>& v);
  template<class T> [*unspecified2] begin(const valarray<T>& v);
  template<class T> [*unspecified1] end(valarray<T>& v);
  template<class T> [*unspecified2] end(const valarray<T>& v);
}
[codeblock:end]

[para]
[:en] The header [`<valarray>] defines five class templates ([`valarray],
[`slice_array], [`gslice_array], [`mask_array], and [`indirect_array]), two
classes ([`slice] and [`gslice]), and a series of related function templates
for representing and manipulating arrays of values.
[:zh_CN] 头文件 [`<valarray>] 定义了五个类模板（[`valarray]、[`slice_array]、
[`gslice_array]、[`mask_array] 和 [`indirect_array]），两个类（[`slice] 和
[`gslice]），以及一系列相关的函数模板，用于表示并操作数值的数组。

[para]
[:en] The [`valarray] array classes are defined to be free of certain forms of
aliasing, thus allowing operations on these classes to be optimized.
[:zh_CN] [`valarray] 等数组类的定义，避免了某些形式的别名化，因而允许对这些类的
操作进行一些优化。

[para]
[:en] Any function returning a [`valarray<T>] is permitted to return an object
of another type, provided all the const member functions of [`valarray<T>] are
also applicable to this type.
[:zh_CN] 所有返回 [`valarray<T>] 的函数，同样允许返回其他类型的对象，只要
[`valarray<T>] 的所有 [`const] 成员函数对这个类型均同样适用即可。

[:en] This return type shall not add more than two levels of template nesting
over the most deeply nested argument type.[#:note#fn:$1]
[:zh_CN] 这种返回类型不能在具有最深模板嵌套的实参类型基础上再添加超过两层的模板
嵌套。[#:note#fn:$1]

[note:foot#fn:$1]
[:en] [#implimits] recommends a minimum number of recursively nested template
instantiations.
[:zh_CN] [#implimits] 为递归嵌套的模板的实例化的最小层数给出了建议。

[:en] This requirement thus indirectly suggests a minimum allowable complexity
for valarray expressions.
[:zh_CN] 这项要求因而间接地给出了 [`valarray] 表达式的最小可允许的复杂度。
[note:end]

[para]
[:en] Implementations introducing such replacement types shall provide
additional functions and operators as follows:
[:zh_CN] 引入这种替代类型的实现，应当如下来提供一组额外的函数和运算符：

[list]
[item]
[:en] for every function taking a [`const valarray<T>&] other than [`begin] and
[`end] ([#valarray.range]), identical functions taking the replacement types
shall be added;
[:zh_CN] 对于每个接受一个 [`const valarray<T>&] 而不是一对 [`begin] 和 [`end]
（[#valarray.range]）的函数，应当添加接受这个替代类型的相同函数；

[item]
[:en] for every function taking two [`const valarray<T>&] arguments, identical
functions taking every combination of [`const valarray<T>&] and replacement
types shall be added.
[:zh_CN] 对于每个接受两个 [`const valarray<T>&] 实参的函数，应当为
[`const valarray<T>&] 和替代类型的每种组合都添加一个相同函数。
[list:end]

[para]
[:en] In particular, an implementation shall allow a [`valarray<T>] to be
constructed from such replacement types and shall allow assignments and computed
assignments of such types to [`valarray<T>], [`slice_array<T>],
[`gslice_array<T>], [`mask_array<T>] and [`indirect_array<T>] objects.
[:zh_CN] 特别是，实现应当允许从这种替代类型来构造一个 [`valarray<T>]，并允许从
这种类型向 [`valarray<T>]、[`slice_array<T>]、[`gslice_array<T>]、
[`mask_array<T>] 和 [`indirect_array<T>] 对象进行赋值和复合赋值。

[para]
[:en] These library functions are permitted to throw a [`bad_alloc]
([#bad.alloc]) exception if there are not sufficient resources available
to carry out the operation.
[:zh_CN] 当缺少必要的资源来完成操作时，允许这些程序库函数抛出 [`bad_alloc] 异常
（[#bad.alloc]）。

[:en] Note that the exception is not mandated.
[:zh_CN] 注意这个异常并不是强制要求的。
