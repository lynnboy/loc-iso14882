[section#simd.traits
    [:en] [`simd] type traits
    [:zh_CN] [`simd] 类型特征
]

[codeblock:declaration]
template<class T, class U = typename T::value_type> struct simd_alignment { [[redoc("[=seebelow]")]] };
[codeblock:end]

[div:description]
[para]
[:en] [`simd_alignment<T, U>] has a member [`value] if and only if
[:zh_CN] 当且仅当以下情况下，[`simd_alignment<T, U>] 具有成员 [`value]：
[list]
[item]
[:en@~] [`T] is a specialization of [`basic_simd_mask] and [`U] is [`bool], or
[:zh_CN@~] [`T] 是 [`basic_simd_mask] 的特例，且 [`U] 为 [`bool]，或者
[item]
[:en@~] [`T] is a specialization of [`basic_simd] and [`U] is a vectorizable type.
[:zh_CN@~] [`T] 是 [`basic_simd] 的特例，且 [`U] 为可向量化类型。
[list:end]

[para]
[:en] If [`value] is present, the type [`simd_alignment<T, U>] is a
[`BinaryTypeTrait] with a base characteristic of [`integral_constant<size_t, N>]
for some unspecified [`N] ([#simd.ctor], [#simd.loadstore]).
[:zh_CN] 当存在 [`value] 时，类型 [`simd_alignment<T, U>] 是 [`BinaryTypeTrait]，
它具有某个未指明 [`N] 的 [`integral_constant<size_t, N>] 的基本特征（[#simd.ctor]，
[#simd.loadstore]）。

[begin:note]
[:en] [`value] identifies the alignment restrictions on pointers used for
(converting) loads and stores for the given type [`T] on arrays of type [`U].
[:zh_CN] 对于用于在类型 [`U] 的数组上对给定类型 [`T] 进行加载和存储（转换）的指针，
[`value] 标明它的对齐限制条件。
[end:note]

[para]
[:en] The behavior of a program that adds specializations for [`simd_alignment]
is undefined.
[:zh_CN] 添加 [`simd_alignment] 特化式的程序的行为未定义。
[div:end]

[codeblock:declaration]
template<class T, class V> struct rebind_simd { using type = [[redoc("[=seebelow]", "_")]]_; };
[codeblock:end]

[div:description]
[para]
[:en] The member [`type] is present if and only if
[:zh_CN] 当且仅当以下情况下，存在成员 [`type]：
[list]
[item]
[:en@~] [`V] is a data-parallel type,
[:zh_CN@~] [`V] 为数据并行类型，
[item]
[:en@~] [`T] is a vectorizable type, and
[:zh_CN@~] [`V] 为可向量化类型，并且
[item]
[:en@~] [`[*deduce-abi-t]<T, V::size()>] has a member type [`type].
[:zh_CN@~] [`[*deduce-abi-t]<T, V::size()>] 具有成员类型 [`type]。
[list:end]

[para]
[:en] If [`V] is a specialization of [`basic_simd], let [`Abi1] denote
an ABI tag such that [`basic_simd<T, Abi1>::size()] equals [`V::size()].
[:zh_CN] 如果 [`V] 是 [`basic_simd] 的特例，令 [`Abi1] 代表使得
[`basic_simd<T, Abi1>::size()] 等于 [`V::size()] 的 ABI 标签。

[:en] If [`V] is a specialization of [`basic_simd_mask], let [`Abi1] denote an
ABI tag such that [`basic_simd_mask<sizeof(T), Abi1>::size()] equals [`V::size()].
[:zh_CN] 如果 [`V] 是 [`basic_simd_mask] 的特例，令 [`Abi1] 代表使得
[`basic_simd_mask<sizeof(T), Abi1>::size()] 等于 [`V::size()] 的 ABI 标签。

[para]
[:en] Where present, the member typedef [`type] names [`basic_simd<T, Abi1>]
if [`V] is a specialization of [`basic_simd] or [`basic_simd_mask<sizeof(T), Abi1>]
if [`V] is a specialization of [`basic_simd_mask].
[:zh_CN] 如果存在，那么成员 typedef [`type] 当 [`V] 为 [`basic_simd] 的特例时指名
[`basic_simd<T, Abi1>]，或当 [`V] 为 [`basic_simd_mask] 的特例时指名
[`basic_simd_mask<sizeof(T), Abi1>]。
[div:end]

[codeblock:declaration]
template<[[redoc("*>")]]simd-size-type N, class V> struct resize_simd { using type = [[redoc("[=seebelow]", "_")]]_; };
[codeblock:end]

[div:description]
[para]
[:en] Let [`T] denote
[:zh_CN] 令 [`T]
[list]
[item]
[:en@~] [`typename V::value_type] if [`V] is a specialization of [`basic_simd],
[:zh_CN@~] 当 [`V] 为 [`basic_simd] 的特例时代表 [`typename V::value_type]，
[item]
[:en@~] otherwise [`[*integer-from]<[*mask-element-size]<V>>] if
[`V] is a specialization of [`basic_simd_mask].
[:zh_CN@~] 否则，当 [`V] 为 [`basic_simd_mask] 的特例时代表
[`[*integer-from]<[*mask-element-size]<V>>]。
[list:end]

[para]
[:en] The member [`type] is present if and only if
[:zh_CN] 当且仅当以下情况下，存在成员 [`type]：
[list]
[item]
[:en@~] [`V] is a data-parallel type, and
[:zh_CN@~] [`V] 为数据并行类型，并且
[item]
[:en@~] [`[*deduce-abi-t]<T, N>] has a member type [`type].
[:zh_CN@~] [`[*deduce-abi-t]<T, N>] 具有成员类型 [`type]。
[list:end]

[para]
[:en] If [`V] is a specialization of [`basic_simd], let [`Abi1] denote
an ABI tag such that [`basic_simd<T, Abi1>::size()] equals [`V::size()].
[:zh_CN] 如果 [`V] 是 [`basic_simd] 的特例，令 [`Abi1] 代表使得
[`basic_simd<T, Abi1>::size()] 等于 [`V::size()] 的 ABI 标签。

[:en] If [`V] is a specialization of [`basic_simd_mask], let [`Abi1] denote an
ABI tag such that [`basic_simd_mask<sizeof(T), Abi1>::size()] equals [`V::size()].
[:zh_CN] 如果 [`V] 是 [`basic_simd_mask] 的特例，令 [`Abi1] 代表使得
[`basic_simd_mask<sizeof(T), Abi1>::size()] 等于 [`V::size()] 的 ABI 标签。

[para]
[:en] Where present, the member typedef [`type] names [`basic_simd<T, Abi1>]
if [`V] is a specialization of [`basic_simd] or [`basic_simd_mask<sizeof(T), Abi1>]
if [`V] is a specialization of [`basic_simd_mask].
[:zh_CN] 如果存在，那么成员 typedef [`type] 当 [`V] 为 [`basic_simd] 的特例时指名
[`basic_simd<T, Abi1>]，或当 [`V] 为 [`basic_simd_mask] 的特例时指名
[`basic_simd_mask<sizeof(T), Abi1>]。
[div:end]
