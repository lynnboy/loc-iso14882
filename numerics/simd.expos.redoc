[section#simd.expos
    [:en] Exposition-only types, variables, and concepts
    [:zh_CN] 仅用于阐释的类型、变量和概念
]

[codeblock:synopsis]
using [[redoc("*>")]]simd-size-type = [[redoc("[=seebelow]")]];                                    // [=expos]
template<size_t Bytes> using [[redoc("*>")]]integer-from = [[redoc("[=seebelow]")]];               // [=expos]

template<class T, class Abi>
  constexpr [[redoc("*>")]]simd-size-type [[redoc("*>")]]simd-size-v = [[redoc("[=seebelow]")]];                  // [=expos]
template<class T> constexpr size_t [[redoc("*>")]]mask-element-size = [[redoc("[=seebelow]")]];    // [=expos]

template<class T>
  concept [[redoc("*:c@def>")]]constexpr-wrapper-like =                                   // [=expos]
    [[redoc("`:c>")]]convertible_to<T, decltype(T::value)> &&
    [[redoc("`:c>")]]equality_comparable_with<T, decltype(T::value)> &&
    bool_constant<T() == T::value>::value &&
    bool_constant<static_cast<decltype(T::value)>(T()) == T::value>::value;

template<class T> using [[redoc("*>")]]deduced-vec-t = [[redoc("[=seebelow]")]];                  // [=expos]

template<class V, class T> using [[redoc("*>")]]make-compatible-simd-t = [[redoc("[=seebelow]")]]; // [=expos]

template<class V>
  concept [[redoc("*:c@def>")]]simd-vec-type =                                            // [=expos]
    [[redoc("`:c>")]]same_as<V, basic_vec<typename V::value_type, typename V::abi_type>> &&
    is_default_constructible_v<V>;

template<class V>
  concept [[redoc("*:c@def>")]]simd-mask-type =                                           // [=expos]
    [[redoc("`:c>")]]same_as<V, basic_mask<[[redoc("*>")]]mask-element-size<V>, typename V::abi_type>> &&
    is_default_constructible_v<V>;

template<class V>
  concept [[redoc("*:c@def>")]]simd-floating-point =                                      // [=expos]
    [[redoc("*:c>")]]simd-vec-type<V> && [[redoc("`:c>")]]floating_point<typename V::value_type>;

template<class V>
  concept [[redoc("*:c@def>")]]simd-integral =                                            // [=expos]
    [[redoc("*:c>")]]simd-vec-type<V> && [[redoc("`:c>")]]integral<typename V::value_type>;

template<class V>
  using [[redoc("*>")]]simd-complex-value-type = typename V::value_type::value_type; // [=expos]

template<class V>
  concept [[redoc("*:c@def>")]]simd-complex =                                             // [=expos]
    [[redoc("*:c>")]]simd-vec-type<V> && [[redoc("`:c>")]]same_as<typename V::value_type, complex<[[redoc("*>")]]simd-complex-value-type<V>>>;

template<class... Ts>
  concept [[redoc("*:c@def>")]]math-floating-point =                                      // [=expos]
    ([[redoc("*:c>")]]simd-floating-point<[[redoc("*>")]]deduced-vec-t<Ts>> || ...);

template<class... Ts>
  requires [[redoc("*:c>")]]math-floating-point<Ts...>
    using [[redoc("*>")]]math-common-simd-t = [[redoc("[=seebelow]")]];                            // [=expos]

template<class BinaryOperation, class T>
  concept [[redoc("*:c>")]]reduction-binary-operation = [[redoc("[=seebelow]")]];                    // [=expos]

// [:en] [#simd.expos.abi], [`simd] ABI tags \
[:zh_CN] [#simd.expos.abi]，[`simd] ABI 标签
template<class T> using [[redoc("*>")]]native-abi = [[redoc("[=seebelow]")]];                      // [=expos]
template<class T, [[redoc("*>")]]simd-size-type N> using [[redoc("*>")]]deduce-abi-t = [[redoc("[=seebelow]")]];  // [=expos]

// [:en] [#simd.flags], Load and store flags \
[:zh_CN] [#simd.flags]，加载与存储标签
struct [[redoc("*>")]]convert-flag;                                                 // [=expos]
struct [[redoc("*>")]]aligned-flag;                                                 // [=expos]
template<size_t N> struct [[redoc("*>")]]overaligned-flag;                          // [=expos]
[codeblock:end]

[include simd.expos.defn]

[include simd.expos.abi]
