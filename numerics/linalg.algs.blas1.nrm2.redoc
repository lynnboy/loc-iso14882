[section#linalg.algs.blas1.nrm2
    [:en] Euclidean norm of a vector
    [:zh_CN] 向量的欧式范数
]

[%@lib vector_two_norm]
[codeblock:declaration]
template<[[redoc("*:c>")]]in-vector InVec, class Scalar>
  Scalar vector_two_norm(InVec v, Scalar init);
template<class ExecutionPolicy, [[redoc("*:c>")]]in-vector InVec, class Scalar>
  Scalar vector_two_norm(ExecutionPolicy&& exec, InVec v, Scalar init);
[codeblock:end]

[div:description]
[para]
[begin:note]
[:en] These functions correspond to the BLAS function [`xNRM2][#:cite@super#blas1].
[:zh_CN] 这些函数对应于 BLAS 函数 [`xNRM2][#:cite@super#blas1]。
[end:note]

[para:mandates]
[:en] Let [`a] be [`[*abs-if-needed](declval<typename InVec::value_type>())].
[:zh_CN] 令 [`a] 为 [`[*abs-if-needed](declval<typename InVec::value_type>())]。

[:en] Then, [`decltype(init + a * a)] is convertible to [`Scalar].
[:zh_CN] 则 [`decltype(init + a * a)] 可以转换为 [`Scalar]。

[para:returns]
[:en] The square root of the sum of the square of [`init] and the squares of the
absolute values of the elements of [`v].
[:zh_CN] [*init] 的平方和 [`v] 的各元素绝对值的平方的和的平方根。

[begin:note]
[:en] For [`init] equal to zero, this is the Euclidean norm (also called 2-norm)
of the vector [`v].
[:zh_CN] 对于 [`init] 等于零的情况，此为向量 [`v] 的欧式范数（也称为 2-范数）。
[end:note]

[para:remarks]
[:en] If [`InVec::value_type], and [`Scalar] are all floating-point types or
specializations of [`complex], and if [`Scalar] has higher precision than
[`InVec::value_type], then intermediate terms in the sum use [`Scalar][=']s
precision or greater.
[:zh_CN] 如果 [`InVec::value_type] 和 [`Scalar] 均为浮点类型或 [`complex] 的特例，
则当 [`Scalar] 具有比 [`InVec::value_type] 更高的精度时，求和中的中间项使用
[`Scalar] 或更高的精度。

[begin:note]
[:en] An implementation of this function for floating-point types [`T] can use
the [`scaled_sum_of_squares] result from
[`vector_sum_of_squares(x, {.scaling_factor=1.0, .scaled_sum_of_squares=init})].
[:zh_CN] 此函数对于浮点类型 [`T] 的实现可以使用
[`vector_sum_of_squares(x, {.scaling_factor=1.0, .scaled_sum_of_squares=init})]
[`scaled_sum_of_squares] 的结果。
[end:note]
[div:end]

[%@lib vector_two_norm]
[codeblock:declaration]
template<[[redoc("*:c>")]]in-vector InVec>
  auto vector_two_norm(InVec v);
template<class ExecutionPolicy, [[redoc("*:c>")]]in-vector InVec>
  auto vector_two_norm(ExecutionPolicy&& exec, InVec v);
[codeblock:end]

[div:description]
[para:effects]
[:en] Let [`a] be [`[*abs-if-needed](declval<typename InVec::value_type>())].
[:zh_CN] 令 [`a] 为 [`[*abs-if-needed](declval<typename InVec::value_type>())]。

[:en] Let [`T] be [`decltype(a * a)].
[:zh_CN] 令 [`T] 为 [`decltype(a * a)]。

[:en] Then,
[:zh_CN] 则，
[list]
[item]
[:en@~] the one-parameter overload is equivalent to:
[:zh_CN@~] 一个形参的重载等价于：
[codeblock]
return vector_two_norm(v, T{});
[codeblock:end]
and
[item]
[:en@~] the two-parameter overload is equivalent to:
[:zh_CN@~] 两个形参的重载等价于：
[codeblock]
return vector_two_norm(std::forward<ExecutionPolicy>(exec), v, T{});
[codeblock:end]
[list:end]
[div:end]
