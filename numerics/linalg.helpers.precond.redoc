[section#linalg.helpers.precond
    [:en] Preconditions
    [:zh_CN] 前条件
]

[para]
[begin:note]
[:en] These exposition-only helper functions use the less constraining input
concepts even for the output arguments, because the additional constraint for
assignability of elements is not necessary, and they are sometimes used in a
context where the third argument is an input type too.
[:zh_CN] 这些仅用于阐释的辅助函数，（即便对输出实参）使用了更少约束的输入概念，
因为对元素可赋值性的额外约束是非必须的，而且它们有时候也用于第三个实参也是输入
类型的语境。
[end:note]

[codeblock:synopsis]
constexpr bool [[redoc("*>")]]addable(                                          // [=expos]
  const [[redoc("*:c>")]]in-vector auto& in1, const [[redoc("*:c>")]]in-vector auto& in2, const [[redoc("*:c>")]]in-vector auto& out) {
  return out.extent(0) == in1.extent(0) && out.extent(0) == in2.extent(0);
}

constexpr bool [[redoc("*>")]]addable(                                          // [=expos]
  const [[redoc("*:c>")]]in-matrix auto& in1,  const [[redoc("*:c>")]]in-matrix auto& in2, const [[redoc("*:c>")]]in-matrix auto& out) {
  return out.extent(0) == in1.extent(0) && out.extent(1) == in1.extent(1) &&
         out.extent(0) == in2.extent(0) && out.extent(1) == in2.extent(1);
}

constexpr bool [[redoc("*>")]]multipliable(                                     // [=expos]
  const [[redoc("*:c>")]]in-matrix auto& in_mat, const [[redoc("*:c>")]]in-vector auto& in_vec, const [[redoc("*:c>")]]in-vector auto& out_vec) {
  return out_vec.extent(0) == in_mat.extent(0) && in_mat.extent(1) == in_vec.extent(0);
}

constexpr bool [[redoc("*>")]]multipliable( // [=expos]
  const [[redoc("*:c>")]]in-vector auto& in_vec, const [[redoc("*:c>")]]in-matrix auto& in_mat, const [[redoc("*:c>")]]in-vector auto& out_vec) {
  return out_vec.extent(0) == in_mat.extent(1) && in_mat.extent(0) == in_vec.extent(0);
}

constexpr bool [[redoc("*>")]]multipliable(                                     // [=expos]
  const [[redoc("*:c>")]]in-matrix auto& in_mat1, const [[redoc("*:c>")]]in-matrix auto& in_mat2, const [[redoc("*:c>")]]in-matrix auto& out_mat) {
  return out_mat.extent(0) == in_mat1.extent(0) && out_mat.extent(1) == in_mat2.extent(1) &&
         in_mat1.extent(1) == in_mat2.extent(0);
}
[codeblock:end]
