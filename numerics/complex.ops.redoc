[section#complex.ops
    [:en] Non-member operations
    [:zh_CN] 非成员运算
]

[%@lib@member operator+[!complex]]
[codeblock:declaration]
template<class T> constexpr complex<T> operator+(const complex<T>& lhs);
[codeblock:end]

[div:description]
[para:returns]
[:en] [`complex<T>(lhs)].
[:zh_CN] [`complex<T>(lhs)]。

[para:remarks]
[:en] unary operator.
[:zh_CN] 一元运算符。
[div:end]

[codeblock:declaration]
template<class T> constexpr complex<T> operator+(const complex<T>& lhs, const complex<T>& rhs);
template<class T> constexpr complex<T> operator+(const complex<T>& lhs, const T& rhs);
template<class T> constexpr complex<T> operator+(const T& lhs, const complex<T>& rhs);
[codeblock:end]

[div:description]
[para:returns]
[:en] [`complex<T>(lhs) += rhs].
[:zh_CN] [`complex<T>(lhs) += rhs]。
[div:end]

[%@lib@member operator-[!complex]]
[codeblock:declaration]
template<class T> constexpr complex<T> operator-(const complex<T>& lhs);
[codeblock:end]

[div:description]
[para:returns]
[:en] [`complex<T>(-lhs.real(),-lhs.imag())].
[:zh_CN] [`complex<T>(-lhs.real(),-lhs.imag())]。

[para:remarks]
[:en] unary operator.
[:zh_CN] 一元运算符。
[div:end]

[%@lib@member operator-[!complex]]
[codeblock:declaration]
template<class T> constexpr complex<T> operator-(const complex<T>& lhs, const complex<T>& rhs);
template<class T> constexpr complex<T> operator-(const complex<T>& lhs, const T& rhs);
template<class T> constexpr complex<T> operator-(const T& lhs, const complex<T>& rhs);
[codeblock:end]

[div:description]
[para:returns]
[:en] [`complex<T>(lhs) -= rhs].
[:zh_CN] [`complex<T>(lhs) -= rhs]。
[div:end]

[%@lib@member operator*[!complex]]
[codeblock:declaration]
template<class T> constexpr complex<T> operator*(const complex<T>& lhs, const complex<T>& rhs);
template<class T> constexpr complex<T> operator*(const complex<T>& lhs, const T& rhs);
template<class T> constexpr complex<T> operator*(const T& lhs, const complex<T>& rhs);
[codeblock:end]

[div:description]
[para:returns]
[:en] [`complex<T>(lhs) *= rhs].
[:zh_CN] [`complex<T>(lhs) *= rhs]。
[div:end]

[%@lib@member operator/[!complex]]
[codeblock:declaration]
template<class T> constexpr complex<T> operator/(const complex<T>& lhs, const complex<T>& rhs);
template<class T> constexpr complex<T> operator/(const complex<T>& lhs, const T& rhs);
template<class T> constexpr complex<T> operator/(const T& lhs, const complex<T>& rhs);
[codeblock:end]

[div:description]
[para:returns]
[:en] [`complex<T>(lhs) /= rhs].
[:zh_CN] [`complex<T>(lhs) /= rhs]。
[div:end]

[%@lib@member operator==[!complex]]
[codeblock:declaration]
template<class T> constexpr bool operator==(const complex<T>& lhs, const complex<T>& rhs);
template<class T> constexpr bool operator==(const complex<T>& lhs, const T& rhs);
[codeblock:end]

[div:description]
[para:returns]
[:en] [`lhs.real() == rhs.real() && lhs.imag() == rhs.imag()].
[:zh_CN] [`lhs.real() == rhs.real() && lhs.imag() == rhs.imag()]。

[para:remarks]
[:en] The imaginary part is assumed to be [`T()], or 0.0, for the [`T]
arguments.
[:zh_CN] 对于 [`T] 实参，假定其虚部为 [`T()] 或 0.0。
[div:end]

[%@lib@member operator>>[!complex]]
[codeblock:declaration]
template<class T, class charT, class traits>
  basic_istream<charT, traits>& operator>>(basic_istream<charT, traits>& is, complex<T>& x);
[codeblock:end]

[div:description]
[para:requires]
[:en] The input values shall be convertible to [`T].
[:zh_CN] 输入值都应当可以转换为 [`T]。

[para:effects]
[:en] Extracts a complex number [`x] of the form: [`u], [`(u)], or [`(u,v)],
where [`u] is the real part and [`v] is the imaginary part
([#istream.formatted]).
[:zh_CN] 提取形式为 [`u]，[`(u)]，或者 [`(u,v)] 的复数 [`x]，其中 [`u] 为其实部
而 [`v] 为其虚部。

[para]
[:en] If bad input is encountered, calls [`is.setstate(ios_base::failbit)]
(which may throw [`ios::failure] ([#iostate.flags])).
[:zh_CN] 当遇到不良输入时，调用 [`is.setstate(ios_base::failbit)]（这可能回抛出
[`ios::failure]（[#iostate.flags]））。

[para:returns]
[:en] [`is].
[:zh_CN] [`is]。

[para:remarks]
[:en] This extraction is performed as a series of simpler extractions.
[:zh_CN] 这种提取是作为一系列简单的提取而实施的。

[:en] Therefore, the skipping of whitespace is specified to be the same for each
of the simpler extractions.
[:zh_CN] 因此，对于空白的跳过行为与每次的简单提取所指定的行为相同。
[div:end]

[%@lib@member operator<<[!complex]]
[codeblock:declaration]
template<class T, class charT, class traits>
  basic_ostream<charT, traits>& operator<<(basic_ostream<charT, traits>& o, const complex<T>& x);
[codeblock:end]

[div:description]
[para:effects]
[:en] Inserts the complex number [`x] onto the stream [`o] as if it were
implemented as follows:
[:zh_CN] 向流 [`o] 中插入复数 [`x]，如同具有如下的实现：

[codeblock:notation]
basic_ostringstream<charT, traits> s;
s.flags(o.flags());
s.imbue(o.getloc());
s.precision(o.precision());
s << '(' << x.real() << "," << x.imag() << ')';
return o << s.str();
[codeblock:end]

[para]
[begin:note]
[:en] In a locale in which comma is used as a decimal point character, the use
of comma as a field separator can be ambiguous.
[:zh_CN] 在逗号被用作小数点字符的地域中，使用逗号作为字段分隔符可能导致歧义。

[:en] Inserting [`showpoint] into the output stream forces all outputs to show
an explicit decimal point character; as a result, all inserted sequences of
complex numbers can be extracted unambiguously.
[:zh_CN] 向输出流中插入 [`showpoint] 将强行要求所有输出均显式一个明确的小数点
字符；其结果就使得所有插入的复数序列都可以无歧义地提取。
[end:note]
[div:end]
