[section#linalg.scaled.scaled
    [:en] Function template [`scaled]
    [:zh_CN] 函数模板 [`scaled]
]

[para]
[:en] The [`scaled] function template takes a scaling factor [`alpha] and an
[`mdspan] [`x], and returns a new read-only [`mdspan] with the same domain as [`x],
that represents the elementwise product of [`alpha] with each element of [`x].
[:zh_CN] 函数模板 [`scaled] 接受一个缩放因数 [`alpha] 和一个 [`mdspan] [`x]，并
返回一个与 [`x] 具有相同定义域的新的只读 [`mdspan]，它表示 [`alpha] 与 [`x] 的
每个元素的逐元素乘积。

[%@lib scaled]
[codeblock:declaration]
  template<class ScalingFactor,
           class ElementType, class Extents, class Layout, class Accessor>
    constexpr auto scaled(ScalingFactor alpha, mdspan<ElementType, Extents, Layout, Accessor> x);
[codeblock:end]

[div:description]
[para]
[:en] Let [`SA] be [`scaled_accessor<ScalingFactor, Accessor>].
[:zh_CN] 令 [`SA] 为 [`scaled_accessor<ScalingFactor, Accessor>]。

[para:returns]
[codeblock]
mdspan<typename SA::element_type, Extents, Layout, SA>(x.data_handle(), x.mapping(),
                                                       SA(alpha, x.accessor()))
[codeblock:end]
[div:end]

[para]
[begin:example]
[codeblock]
void test_scaled(mdspan<double, extents<int, 10>> x)
{
  auto x_scaled = scaled(5.0, x);
  for (int i = 0; i < x.extent(0); ++i) {
    assert(x_scaled[i] == 5.0 * x[i]);
  }
}
[codeblock:end]
[end:example]
