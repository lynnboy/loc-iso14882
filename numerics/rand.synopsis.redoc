[/
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%% Header synopsis section
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/]

[section#rand.synopsis
    [:en] Header [`<random>] synopsis
    [:zh_CN] 头文件 [`<random>] 纲要

[%:begin#random
    [`<random>][@random]
]
[%:begin@library#library.random
    <random>[@random]
]
[%:begin#random.number.generation.synopsis
    [:en] random number generation[!synopsis]
    [:zh_CN] 随机数生成[!纲要]
]
]

[codeblock:synopsis [!:mark SeeBelow] ]
#include <initializer_list>

namespace std {
  // [:en] [#rand.eng.lcong], class template [`linear_congruential_engine]
  // [|:zh_CN] [#rand.eng.lcong]，类模板 [`linear_congruential_engine]
  template<class UIntType, UIntType a, UIntType c, UIntType m>
    class linear_congruential_engine;

  // [:en] [#rand.eng.mers], class template [`mersenne_twister_engine]
  // [|:zh_CN] [#rand.eng.mers]，类模板 [`mersenne_twister_engine]
  template<class UIntType, size_t w, size_t n, size_t m, size_t r,
           UIntType a, size_t u, UIntType d, size_t s,
           UIntType b, size_t t,
           UIntType c, size_t l, UIntType f>
    class mersenne_twister_engine;

  // [:en] [#rand.eng.sub], class template [`subtract_with_carry_engine]
  // [|:zh_CN] [#rand.eng.sub]，类模板 [`subtract_with_carry_engine]
  template<class UIntType, size_t w, size_t s, size_t r>
    class subtract_with_carry_engine;

  // [:en] [#rand.adapt.disc], class template [`discard_block_engine]
  // [|:zh_CN] [#rand.adapt.disc]，类模板 [`discard_block_engine]
  template<class Engine, size_t p, size_t r>
    class discard_block_engine;

  // [:en] [#rand.adapt.ibits], class template [`independent_bits_engine]
  // [|:zh_CN] [#rand.adapt.ibits]，类模板 [`independent_bits_engine]
  template<class Engine, size_t w, class UIntType>
    class independent_bits_engine;

  // [:en] [#rand.adapt.shuf], class template [`shuffle_order_engine]
  // [|:zh_CN] [#rand.adapt.shuf]，类模板 [`shuffle_order_engine]
  template<class Engine, size_t k>
    class shuffle_order_engine;

  // [:en] [#rand.predef], engines and engine adaptors with predefined parameters
  // [|:zh_CN] [#rand.predef]，带有预定义参数的引擎和引擎适配器
  using minstd_rand0  = [=SeeBelow];
  using minstd_rand   = [=SeeBelow];
  using mt19937       = [=SeeBelow];
  using mt19937_64    = [=SeeBelow];
  using ranlux24_base = [=SeeBelow];
  using ranlux48_base = [=SeeBelow];
  using ranlux24      = [=SeeBelow];
  using ranlux48      = [=SeeBelow];
  using knuth_b       = [=SeeBelow];

  using default_random_engine = [=SeeBelow];

  // [:en] [#rand.device], class [`random_device]
  // [|:zh_CN] [#rand.device]，类 [`random_device]
  class random_device;

  // [:en] [#rand.util.seedseq], class [`seed_seq]
  // [|:zh_CN] [#rand.util.seedseq]，类 [`seed_seq]
  class seed_seq;

  // [:en] [#rand.util.canonical], function template [`generate_canonical]
  // [|:zh_CN] [#rand.util.canonical]，函数模板 [`generate_canonical]
  template<class RealType, size_t bits, class URNG>
    RealType generate_canonical(URNG& g);

  // [:en] [#rand.dist.uni.int], class template [`uniform_int_distribution]
  // [|:zh_CN] [#rand.dist.uni.int]，类模板 [`uniform_int_distribution]
  template<class IntType = int>
    class uniform_int_distribution;

  // [:en] [#rand.dist.uni.real], class template [`uniform_real_distribution]
  // [|:zh_CN] [#rand.dist.uni.real]，类模板 [`uniform_real_distribution]
  template<class RealType = double>
    class uniform_real_distribution;

  // [:en] [#rand.dist.bern.bernoulli], class [`bernoulli_distribution]
  // [|:zh_CN] [#rand.dist.bern.bernoulli]，类 [`bernoulli_distribution]
  class bernoulli_distribution;

  // [:en] [#rand.dist.bern.bin], class template [`binomial_distribution]
  // [|:zh_CN] [#rand.dist.bern.bin]，类模板 [`binomial_distribution]
  template<class IntType = int>
    class binomial_distribution;

  // [:en] [#rand.dist.bern.geo], class template [`geometric_distribution]
  // [|:zh_CN] [#rand.dist.bern.geo]，类模板 [`geometric_distribution]
  template<class IntType = int>
    class geometric_distribution;

  // [:en] [#rand.dist.bern.negbin], class template [`negative_binomial_distribution]
  // [|:zh_CN] [#rand.dist.bern.negbin]，类模板 [`negative_binomial_distribution]
  template<class IntType = int>
    class negative_binomial_distribution;

  // [:en] [#rand.dist.pois.poisson], class template [`poisson_distribution]
  // [|:zh_CN] [#rand.dist.pois.poisson]，类模板 [`poisson_distribution]
  template<class IntType = int>
    class poisson_distribution;

  // [:en] [#rand.dist.pois.exp], class template [`exponential_distribution]
  // [|:zh_CN] [#rand.dist.pois.exp]，类模板 [`exponential_distribution]
  template<class RealType = double>
    class exponential_distribution;

  // [:en] [#rand.dist.pois.gamma], class template [`gamma_distribution]
  // [|:zh_CN] [#rand.dist.pois.gamma]，类模板 [`gamma_distribution]
  template<class RealType = double>
    class gamma_distribution;

  // [:en] [#rand.dist.pois.weibull], class template [`weibull_distribution]
  // [|:zh_CN] [#rand.dist.pois.weibull]，类模板 [`weibull_distribution]
  template<class RealType = double>
    class weibull_distribution;

  // [:en] [#rand.dist.pois.extreme], class template [`extreme_value_distribution]
  // [|:zh_CN] [#rand.dist.pois.extreme]，类模板 [`extreme_value_distribution]
  template<class RealType = double>
    class extreme_value_distribution;

  // [:en] [#rand.dist.norm.normal], class template [`normal_distribution]
  // [|:zh_CN] [#rand.dist.norm.normal]，类模板 [`normal_distribution]
  template<class RealType = double>
    class normal_distribution;

  // [:en] [#rand.dist.norm.lognormal], class template [`lognormal_distribution]
  // [|:zh_CN] [#rand.dist.norm.lognormal]，类模板 [`lognormal_distribution]
  template<class RealType = double>
    class lognormal_distribution;

  // [:en] [#rand.dist.norm.chisq], class template [`chi_squared_distribution]
  // [|:zh_CN] [#rand.dist.norm.chisq]，类模板 [`chi_squared_distribution]
  template<class RealType = double>
    class chi_squared_distribution;

  // [:en] [#rand.dist.norm.cauchy], class template [`cauchy_distribution]
  // [|:zh_CN] [#rand.dist.norm.cauchy]，类模板 [`cauchy_distribution]
  template<class RealType = double>
    class cauchy_distribution;

  // [:en] [#rand.dist.norm.f], class template [`fisher_f_distribution]
  // [|:zh_CN] [#rand.dist.norm.f]，类模板 [`fisher_f_distribution]
  template<class RealType = double>
    class fisher_f_distribution;

  // [:en] [#rand.dist.norm.t], class template [`student_t_distribution]
  // [|:zh_CN] [#rand.dist.norm.t]，类模板 [`student_t_distribution]
  template<class RealType = double>
    class student_t_distribution;

  // [:en] [#rand.dist.samp.discrete], class template [`discrete_distribution]
  // [|:zh_CN] [#rand.dist.samp.discrete]，类模板 [`discrete_distribution]
  template<class IntType = int>
    class discrete_distribution;

  // [:en] [#rand.dist.samp.pconst], class template [`piecewise_constant_distribution]
  // [|:zh_CN] [#rand.dist.samp.pconst]，类模板 [`piecewise_constant_distribution]
  template<class RealType = double>
    class piecewise_constant_distribution;

  // [:en] [#rand.dist.samp.plinear], class template [`piecewise_linear_distribution]
  // [|:zh_CN] [#rand.dist.samp.plinear]，类模板 [`piecewise_linear_distribution]
  template<class RealType = double>
    class piecewise_linear_distribution;
}
[codeblock:end]

[%:end#random.number.generation.synopsis]
[%:end#library.random]
[%:end#random]
