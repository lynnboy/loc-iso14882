[section#valarray.binary
    [:en] Binary operators
    [:zh_CN] 二元运算符
]

[%@lib@member operator*[!valarray]]
[%@lib@member operator/[!valarray]]
[%@lib@member operator%[!valarray]]
[%@lib@member operator+[!valarray]]
[%@lib@member operator-[!valarray]]
[%@lib@member operator^[!valarray]]
[%@lib@member operator&[!valarray]]
[%@lib@member operator|[!valarray]]
[%@lib@member operator<<[!valarray]]
[%@lib@member operator>>[!valarray]]
[codeblock:declaration]
template<class T> valarray<T> operator* (const valarray<T>&, const valarray<T>&);
template<class T> valarray<T> operator/ (const valarray<T>&, const valarray<T>&);
template<class T> valarray<T> operator% (const valarray<T>&, const valarray<T>&);
template<class T> valarray<T> operator+ (const valarray<T>&, const valarray<T>&);
template<class T> valarray<T> operator- (const valarray<T>&, const valarray<T>&);
template<class T> valarray<T> operator^ (const valarray<T>&, const valarray<T>&);
template<class T> valarray<T> operator& (const valarray<T>&, const valarray<T>&);
template<class T> valarray<T> operator| (const valarray<T>&, const valarray<T>&);
template<class T> valarray<T> operator<<(const valarray<T>&, const valarray<T>&);
template<class T> valarray<T> operator>>(const valarray<T>&, const valarray<T>&);
[codeblock:end]

[div:description]
[para:mandates]
[:en] The indicated operator can be applied to operands of type [`T] and returns
a value of type [`T] or which can be unambiguously implicitly converted to [`T].
[:zh_CN] 可以对 [`T] 类型的操作数实施指定的运算符，并返回类型 [`T] 或可以无歧义
地隐式转换为类型 [`T] 的值。

[para:expects]
[:en] The argument arrays have the same length.
[:zh_CN] 各个实参数组具有相同的长度。

[para:returns]
[:en] A [`valarray] whose length is equal to the lengths of the argument arrays.
[:zh_CN] 长度等于各实参数组的长度的 [`valarray]。

[:en] Each element of the returned array is initialized with the result of
applying the indicated operator to the corresponding elements of the argument
arrays.
[:zh_CN] 所返回的数组的各个元素，是以对各实参数组的对应元素实施所指定的运算符的
结果进行初始化的。
[div:end]

[%@lib@member operator*[!valarray]]
[%@lib@member operator/[!valarray]]
[%@lib@member operator%[!valarray]]
[%@lib@member operator+[!valarray]]
[%@lib@member operator-[!valarray]]
[%@lib@member operator^[!valarray]]
[%@lib@member operator&[!valarray]]
[%@lib@member operator|[!valarray]]
[%@lib@member operator<<[!valarray]]
[%@lib@member operator>>[!valarray]]
[codeblock:declaration]
template<class T> valarray<T> operator* (const valarray<T>&,
                                         const typename valarray<T>::value_type&);
template<class T> valarray<T> operator* (const typename valarray<T>::value_type&,
                                         const valarray<T>&);
template<class T> valarray<T> operator/ (const valarray<T>&,
                                         const typename valarray<T>::value_type&);
template<class T> valarray<T> operator/ (const typename valarray<T>::value_type&,
                                         const valarray<T>&);
template<class T> valarray<T> operator% (const valarray<T>&,
                                         const typename valarray<T>::value_type&);
template<class T> valarray<T> operator% (const typename valarray<T>::value_type&,
                                         const valarray<T>&);
template<class T> valarray<T> operator+ (const valarray<T>&,
                                         const typename valarray<T>::value_type&);
template<class T> valarray<T> operator+ (const typename valarray<T>::value_type&,
                                         const valarray<T>&);
template<class T> valarray<T> operator- (const valarray<T>&,
                                         const typename valarray<T>::value_type&);
template<class T> valarray<T> operator- (const typename valarray<T>::value_type&,
                                         const valarray<T>&);
template<class T> valarray<T> operator^ (const valarray<T>&,
                                         const typename valarray<T>::value_type&);
template<class T> valarray<T> operator^ (const typename valarray<T>::value_type&,
                                         const valarray<T>&);
template<class T> valarray<T> operator& (const valarray<T>&,
                                         const typename valarray<T>::value_type&);
template<class T> valarray<T> operator& (const typename valarray<T>::value_type&,
                                         const valarray<T>&);
template<class T> valarray<T> operator| (const valarray<T>&,
                                         const typename valarray<T>::value_type&);
template<class T> valarray<T> operator| (const typename valarray<T>::value_type&,
                                         const valarray<T>&);
template<class T> valarray<T> operator<<(const valarray<T>&,
                                         const typename valarray<T>::value_type&);
template<class T> valarray<T> operator<<(const typename valarray<T>::value_type&,
                                         const valarray<T>&);
template<class T> valarray<T> operator>>(const valarray<T>&,
                                         const typename valarray<T>::value_type&);
template<class T> valarray<T> operator>>(const typename valarray<T>::value_type&,
                                         const valarray<T>&);
[codeblock:end]

[div:description]
[para:mandates]
[:en] The indicated operator can be applied to operands of type [`T] and returns
a value of type [`T] or which can be unambiguously implicitly converted to [`T].
[:zh_CN] 可以对 [`T] 类型的操作数实施指定的运算符，并返回类型 [`T] 或可以无歧义
地隐式转换为类型 [`T] 的值。

[para:returns]
[:en] A [`valarray] whose length is equal to the lengths of the array argument.
[:zh_CN] 长度等于数组实参的长度的 [`valarray]。

[:en] Each element of the returned array is initialized with the result of
applying the indicated operator to the corresponding element of the array
argument and the non-array argument.
[:zh_CN] 所返回的数组的各个元素，是以对数组实参的对应元素和非数组实参实施所指定
的运算符的结果进行初始化的。
[div:end]
