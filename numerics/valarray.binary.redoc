[section#valarray.binary
    [:en] Binary operators
    [:zh_CN] 二元运算符
]

[%@library operator*[!valarray]]
[%@library valarray[!operator*]]
[%@library operator/[!valarray]]
[%@library valarray[!operator/]]
[%@library operator%[!valarray]]
[%@library valarray[!operator%]]
[%@library operator+[!valarray]]
[%@library valarray[!operator+]]
[%@library operator-[!valarray]]
[%@library valarray[!operator-]]
[%@library operator^[!valarray]]
[%@library valarray[!operator^]]
[%@library operator&[!valarray]]
[%@library valarray[!operator&]]
[%@library operator|[!valarray]]
[%@library valarray[!operator|]]
[%@library operator<<[!valarray]]
[%@library valarray[!operator<<]]
[%@library operator>>[!valarray]]
[%@library valarray[!operator>>]]
[codeblock:declaration]
template<class T> valarray<T> operator* (const valarray<T>&, const valarray<T>&);
template<class T> valarray<T> operator/ (const valarray<T>&, const valarray<T>&);
template<class T> valarray<T> operator% (const valarray<T>&, const valarray<T>&);
template<class T> valarray<T> operator+ (const valarray<T>&, const valarray<T>&);
template<class T> valarray<T> operator- (const valarray<T>&, const valarray<T>&);
template<class T> valarray<T> operator^ (const valarray<T>&, const valarray<T>&);
template<class T> valarray<T> operator& (const valarray<T>&, const valarray<T>&);
template<class T> valarray<T> operator| (const valarray<T>&, const valarray<T>&);
template<class T> valarray<T> operator<<(const valarray<T>&, const valarray<T>&);
template<class T> valarray<T> operator>>(const valarray<T>&, const valarray<T>&);
[codeblock:end]

[enter:description]
[para:requires]
[:en] Each of these operators may only be instantiated for a type [`T] to which
the indicated operator can be applied and for which the indicated operator
returns a value which is of type [`T] or which can be unambiguously implicitly
converted to type [`T].
[:zh_CN] 这些运算符的每一个，仅会对这样的类型 [`T] 予以实例化：可以对其实施相应
的运算符，指定的运算符返回的值具有类型 [`T] 或者可以无歧义地隐式转换为类型 [`T]。

[:en] The argument arrays have the same length.
[:zh_CN] 各个实参数组具有相同的长度。

[para:returns]
[:en] A [`valarray] whose length is equal to the lengths of the argument arrays.
[:zh_CN] 长度等于各实参数组的长度的 [`valarray]。

[:en] Each element of the returned array is initialized with the result of
applying the indicated operator to the corresponding elements of the argument
arrays.
[:zh_CN] 所返回的数组的各个元素，是以对各实参数组的对应元素实施所指定的运算符的
结果进行初始化的。
[exit:description]

[%@library operator*[!valarray]]
[%@library valarray[!operator*]]
[%@library operator/[!valarray]]
[%@library valarray[!operator/]]
[%@library operator%[!valarray]]
[%@library valarray[!operator%]]
[%@library operator+[!valarray]]
[%@library valarray[!operator+]]
[%@library operator-[!valarray]]
[%@library valarray[!operator-]]
[%@library operator^[!valarray]]
[%@library valarray[!operator^]]
[%@library operator&[!valarray]]
[%@library valarray[!operator&]]
[%@library operator|[!valarray]]
[%@library valarray[!operator|]]
[%@library operator<<[!valarray]]
[%@library valarray[!operator<<]]
[%@library operator>>[!valarray]]
[%@library valarray[!operator>>]]
[codeblock:declaration]
template<class T> valarray<T> operator* (const valarray<T>&,
                                         const typename valarray<T>::value_type&);
template<class T> valarray<T> operator* (const typename valarray<T>::value_type&,
                                         const valarray<T>&);
template<class T> valarray<T> operator/ (const valarray<T>&,
                                         const typename valarray<T>::value_type&);
template<class T> valarray<T> operator/ (const typename valarray<T>::value_type&,
                                         const valarray<T>&);
template<class T> valarray<T> operator% (const valarray<T>&,
                                         const typename valarray<T>::value_type&);
template<class T> valarray<T> operator% (const typename valarray<T>::value_type&,
                                         const valarray<T>&);
template<class T> valarray<T> operator+ (const valarray<T>&,
                                         const typename valarray<T>::value_type&);
template<class T> valarray<T> operator+ (const typename valarray<T>::value_type&,
                                         const valarray<T>&);
template<class T> valarray<T> operator- (const valarray<T>&,
                                         const typename valarray<T>::value_type&);
template<class T> valarray<T> operator- (const typename valarray<T>::value_type&,
                                         const valarray<T>&);
template<class T> valarray<T> operator^ (const valarray<T>&,
                                         const typename valarray<T>::value_type&);
template<class T> valarray<T> operator^ (const typename valarray<T>::value_type&,
                                         const valarray<T>&);
template<class T> valarray<T> operator& (const valarray<T>&,
                                         const typename valarray<T>::value_type&);
template<class T> valarray<T> operator& (const typename valarray<T>::value_type&,
                                         const valarray<T>&);
template<class T> valarray<T> operator| (const valarray<T>&,
                                         const typename valarray<T>::value_type&);
template<class T> valarray<T> operator| (const typename valarray<T>::value_type&,
                                         const valarray<T>&);
template<class T> valarray<T> operator<<(const valarray<T>&,
                                         const typename valarray<T>::value_type&);
template<class T> valarray<T> operator<<(const typename valarray<T>::value_type&,
                                         const valarray<T>&);
template<class T> valarray<T> operator>>(const valarray<T>&,
                                         const typename valarray<T>::value_type&);
template<class T> valarray<T> operator>>(const typename valarray<T>::value_type&,
                                         const valarray<T>&);
[codeblock:end]

[enter:description]
[para:requires]
[:en] Each of these operators may only be instantiated for a type [`T] to which
the indicated operator can be applied and for which the indicated operator
returns a value which is of type [`T] or which can be unambiguously implicitly
converted to type [`T].
[:zh_CN] 这些运算符的每一个，仅会对这样的类型 [`T] 予以实例化：可以对其实施相应
的运算符，指定的运算符返回的值具有类型 [`T] 或者可以无歧义地隐式转换为类型 [`T]。

[para:returns]
[:en] A [`valarray] whose length is equal to the lengths of the array argument.
[:zh_CN] 长度等于数组实参的长度的 [`valarray]。

[:en] Each element of the returned array is initialized with the result of
applying the indicated operator to the corresponding element of the array
argument and the non-array argument.
[:zh_CN] 所返回的数组的各个元素，是以对数组实参的对应元素和非数组实参实施所指定
的运算符的结果进行初始化的。
[exit:description]
