[section#numeric.ops.overview
    [:en] Header [`<numeric>] synopsis
    [:zh_CN] 头文件 [`<numeric>] 纲要
]

[% [`<numeric>] [sortas numeric]]
[%@library <numeric> [sortas numeric]]
[codeblock:synopsis]
namespace std {
  // [:en] [#accumulate], accumulate
  // [|:zh_CN] [#accumulate]，累加（accumulate）
  template <class InputIterator, class T>
    T accumulate(InputIterator first, InputIterator last, T init);
  template <class InputIterator, class T, class BinaryOperation>
    T accumulate(InputIterator first, InputIterator last, T init,
                 BinaryOperation binary_op);

  // [:en] [#reduce], reduce
  // [|:zh_CN] [#reduce]，归约（reduce）
  template<class InputIterator>
    typename iterator_traits<InputIterator>::value_type
      reduce(InputIterator first, InputIterator last);
  template<class InputIterator, class T>
    T reduce(InputIterator first, InputIterator last, T init);
  template<class InputIterator, class T, class BinaryOperation>
    T reduce(InputIterator first, InputIterator last, T init,
             BinaryOperation binary_op);
  template<class ExecutionPolicy, class ForwardIterator>
    typename iterator_traits<ForwardIterator>::value_type
      reduce(ExecutionPolicy&& exec, // [:en] see [#algorithms.parallel.overloads]
                                     // [|:zh_CN] 参见 [#algorithms.parallel.overloads]
             ForwardIterator first, ForwardIterator last);
  template<class ExecutionPolicy, class ForwardIterator, class T>
    T reduce(ExecutionPolicy&& exec, // [:en] see [#algorithms.parallel.overloads]
                                     // [|:zh_CN] 参见 [#algorithms.parallel.overloads]
             ForwardIterator first, ForwardIterator last, T init);
  template<class ExecutionPolicy, class ForwardIterator, class T, class BinaryOperation>
    T reduce(ExecutionPolicy&& exec, // [:en] see [#algorithms.parallel.overloads]
                                     // [|:zh_CN] 参见 [#algorithms.parallel.overloads]
             ForwardIterator first, ForwardIterator last, T init,
             BinaryOperation binary_op);

  // [:en] [#inner.product], inner product
  // [|:zh_CN] [#inner.product]，内积
  template <class InputIterator1, class InputIterator2, class T>
    T inner_product(InputIterator1 first1, InputIterator1 last1,
                    InputIterator2 first2, T init);
  template <class InputIterator1, class InputIterator2, class T,
            class BinaryOperation1, class BinaryOperation2>
    T inner_product(InputIterator1 first1, InputIterator1 last1,
                    InputIterator2 first2, T init,
                    BinaryOperation1 binary_op1,
                    BinaryOperation2 binary_op2);

  // [:en] [#transform.reduce], transform reduce
  // [|:zh_CN] [#transform.reduce]，变换归约
  template<class InputIterator1, class InputIterator2, class T>
    T transform_reduce(InputIterator1 first1, InputIterator1 last1,
                       InputIterator2 first2,
                       T init);
  template<class InputIterator1, class InputIterator2, class T,
           class BinaryOperation1, class BinaryOperation2>
    T transform_reduce(InputIterator1 first1, InputIterator1 last1,
                       InputIterator2 first2,
                       T init,
                       BinaryOperation1 binary_op1,
                       BinaryOperation2 binary_op2);
  template<class InputIterator, class T,
           class BinaryOperation, class UnaryOperation>
    T transform_reduce(InputIterator first, InputIterator last,
                       T init,
                       BinaryOperation binary_op, UnaryOperation unary_op);
  template<class ExecutionPolicy,
           class ForwardIterator1, class ForwardIterator2, class T>
    T transform_reduce(ExecutionPolicy&& exec, // [:en] see [#algorithms.parallel.overloads]
                                               // [|:zh_CN] 参见 [#algorithms.parallel.overloads]
                       ForwardIterator1 first1, ForwardIterator1 last1,
                       ForwardIterator2 first2,
                       T init);
  template<class ExecutionPolicy,
           class ForwardIterator1, class ForwardIterator2, class T,
           class BinaryOperation1, class BinaryOperation2>
    T transform_reduce(ExecutionPolicy&& exec, // [:en] see [#algorithms.parallel.overloads]
                                               // [|:zh_CN] 参见 [#algorithms.parallel.overloads]
                       ForwardIterator1 first1, ForwardIterator1 last1,
                       ForwardIterator2 first2,
                       T init,
                       BinaryOperation1 binary_op1,
                       BinaryOperation2 binary_op2);
  template<class ExecutionPolicy,
           class ForwardIterator, class T,
           class BinaryOperation, class UnaryOperation>
    T transform_reduce(ExecutionPolicy&& exec, // [:en] see [#algorithms.parallel.overloads]
                                               // [|:zh_CN] 参见 [#algorithms.parallel.overloads]
                       ForwardIterator first, ForwardIterator last,
                       T init,
                       BinaryOperation binary_op, UnaryOperation unary_op);

  // [:en] [#partial.sum], partial sum
  // [|:zh_CN] [#partial.sum]，部分和
  template <class InputIterator, class OutputIterator>
    OutputIterator partial_sum(InputIterator first,
                               InputIterator last,
                               OutputIterator result);
  template <class InputIterator, class OutputIterator, class BinaryOperation>
    OutputIterator partial_sum(InputIterator first,
                               InputIterator last,
                               OutputIterator result,
                               BinaryOperation binary_op);

  // [:en] [#exclusive.scan], exclusive scan
  // [|:zh_CN] [#exclusive.scan]，排除扫描
  template<class InputIterator, class OutputIterator, class T>
    OutputIterator exclusive_scan(InputIterator first, InputIterator last,
                                  OutputIterator result,
                                  T init);
  template<class InputIterator, class OutputIterator, class T, class BinaryOperation>
    OutputIterator exclusive_scan(InputIterator first, InputIterator last,
                                  OutputIterator result,
                                  T init, BinaryOperation binary_op);
  template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2, class T>
    ForwardIterator2 exclusive_scan(ExecutionPolicy&& exec, // [:en] see [#algorithms.parallel.overloads]
                                                            // [|:zh_CN] 参见 [#algorithms.parallel.overloads]
                                    ForwardIterator1 first, ForwardIterator1 last,
                                    ForwardIterator2 result,
                                    T init);
  template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2, class T,
           class BinaryOperation>
    ForwardIterator2 exclusive_scan(ExecutionPolicy&& exec, // [:en] see [#algorithms.parallel.overloads]
                                                            // [|:zh_CN] 参见 [#algorithms.parallel.overloads]
                                    ForwardIterator1 first, ForwardIterator1 last,
                                    ForwardIterator2 result,
                                    T init, BinaryOperation binary_op);

  // [:en] [#inclusive.scan], inclusive scan
  // [|:zh_CN] [#inclusive.scan]，内含扫描
  template<class InputIterator, class OutputIterator>
    OutputIterator inclusive_scan(InputIterator first, InputIterator last,
                                  OutputIterator result);
  template<class InputIterator, class OutputIterator, class BinaryOperation>
    OutputIterator inclusive_scan(InputIterator first, InputIterator last,
                                  OutputIterator result,
                                  BinaryOperation binary_op);
  template<class InputIterator, class OutputIterator, class BinaryOperation, class T>
    OutputIterator inclusive_scan(InputIterator first, InputIterator last,
                                  OutputIterator result,
                                  BinaryOperation binary_op, T init);
  template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2>
    ForwardIterator2 inclusive_scan(ExecutionPolicy&& exec, // [:en] see [#algorithms.parallel.overloads]
                                                            // [|:zh_CN] 参见 [#algorithms.parallel.overloads]
                                    ForwardIterator1 first, ForwardIterator1 last,
                                    ForwardIterator2 result);
  template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2,
           class BinaryOperation>
    ForwardIterator2 inclusive_scan(ExecutionPolicy&& exec, // [:en] see [#algorithms.parallel.overloads]
                                                            // [|:zh_CN] 参见 [#algorithms.parallel.overloads]
                                    ForwardIterator1 first, ForwardIterator1 last,
                                    ForwardIterator2 result,
                                    BinaryOperation binary_op);
  template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2,
           class BinaryOperation, class T>
    ForwardIterator2 inclusive_scan(ExecutionPolicy&& exec, // [:en] see [#algorithms.parallel.overloads]
                                                            // [|:zh_CN] 参见 [#algorithms.parallel.overloads]
                                    ForwardIterator1 first, ForwardIterator1 last,
                                    ForwardIterator2 result,
                                    BinaryOperation binary_op, T init);

  // [:en] [#transform.exclusive.scan], transform exclusive scan
  // [|:zh_CN] [#transform.exclusive.scan]，变换排除扫描
  template<class InputIterator, class OutputIterator, class T,
           class BinaryOperation, class UnaryOperation>
    OutputIterator transform_exclusive_scan(InputIterator first, InputIterator last,
                                            OutputIterator result,
                                            T init,
                                            BinaryOperation binary_op,
                                            UnaryOperation unary_op);
  template<class ExecutionPolicy,
           class ForwardIterator1, class ForwardIterator2, class T,
           class BinaryOperation, class UnaryOperation>
    ForwardIterator2 transform_exclusive_scan(ExecutionPolicy&& exec, // [:en] see [#algorithms.parallel.overloads]
                                                                      // [|:zh_CN] 参见 [#algorithms.parallel.overloads]
                                              ForwardIterator1 first, ForwardIterator1 last,
                                              ForwardIterator2 result,
                                              T init,
                                              BinaryOperation binary_op,
                                              UnaryOperation unary_op);

  // [:en] [#transform.inclusive.scan], transform inclusive scan
  // [|:zh_CN] [#transform.inclusive.scan]，变换内含扫描
  template<class InputIterator, class OutputIterator,
           class BinaryOperation, class UnaryOperation>
    OutputIterator transform_inclusive_scan(InputIterator first, InputIterator last,
                                            OutputIterator result,
                                            BinaryOperation binary_op,
                                            UnaryOperation unary_op);
  template<class InputIterator, class OutputIterator,
           class BinaryOperation, class UnaryOperation, class T>
    OutputIterator transform_inclusive_scan(InputIterator first, InputIterator last,
                                            OutputIterator result,
                                            BinaryOperation binary_op,
                                            UnaryOperation unary_op,
                                            T init);
  template<class ExecutionPolicy,
           class ForwardIterator1, class ForwardIterator2,
           class BinaryOperation, class UnaryOperation>
    ForwardIterator2 transform_inclusive_scan(ExecutionPolicy&& exec, // [:en] see [#algorithms.parallel.overloads]
                                                                      // [|:zh_CN] 参见 [#algorithms.parallel.overloads]
                                              ForwardIterator1 first, ForwardIterator1 last,
                                              ForwardIterator2 result,
                                              BinaryOperation binary_op,
                                              UnaryOperation unary_op);
  template<class ExecutionPolicy,
           class ForwardIterator1, class ForwardIterator2,
           class BinaryOperation, class UnaryOperation, class T>
    ForwardIterator2 transform_inclusive_scan(ExecutionPolicy&& exec, // [:en] see [#algorithms.parallel.overloads]
                                                                      // [|:zh_CN] 参见 [#algorithms.parallel.overloads]
                                              ForwardIterator1 first, ForwardIterator1 last,
                                              ForwardIterator2 result,
                                              BinaryOperation binary_op,
                                              UnaryOperation unary_op,
                                              T init);

  // [:en] [#adjacent.difference], adjacent difference
  // [|:zh_CN] [#adjacent.difference]，临差
  template <class InputIterator, class OutputIterator>
    OutputIterator adjacent_difference(InputIterator first,
                                       InputIterator last,
                                       OutputIterator result);
  template <class InputIterator, class OutputIterator, class BinaryOperation>
    OutputIterator adjacent_difference(InputIterator first,
                                       InputIterator last,
                                       OutputIterator result,
                                       BinaryOperation binary_op);
  template <class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2>
    ForwardIterator2 adjacent_difference(ExecutionPolicy&& exec, // [:en] see [#algorithms.parallel.overloads]
                                                                 // [|:zh_CN] 参见 [#algorithms.parallel.overloads]
                                         ForwardIterator1 first,
                                         ForwardIterator1 last,
                                         ForwardIterator2 result);
  template <class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2,
            class BinaryOperation>
    ForwardIterator2 adjacent_difference(ExecutionPolicy&& exec, // [:en] see [#algorithms.parallel.overloads]
                                                                 // [|:zh_CN] 参见 [#algorithms.parallel.overloads]
                                         ForwardIterator1 first,
                                         ForwardIterator1 last,
                                         ForwardIterator2 result,
                                         BinaryOperation binary_op);

  // [:en] [#numeric.iota], iota
  // [|:zh_CN] [#numeric.iota]，iota
  template <class ForwardIterator, class T>
    void iota(ForwardIterator first, ForwardIterator last, T value);

  // [:en] [#numeric.ops.gcd], greatest common divisor
  // [|:zh_CN] [#numeric.ops.gcd]，最大公约数
  template <class M, class N>
    constexpr common_type_t<M,N> gcd(M m, N n);

  // [:en] [#numeric.ops.lcm], least common multiple
  // [|:zh_CN] [#numeric.ops.lcm]，最小公倍数
  template <class M, class N>
    constexpr common_type_t<M,N> lcm(M m, N n);
}
[codeblock:end]

[para]
[:en] The requirements on the types of algorithms[='] arguments that are
described in the introduction to Clause [#algorithms] also apply to the
following algorithms.
[:zh_CN] 在第 [#algorithms] 章的介绍部分中所描述的对各算法实参的类型的规定，同样
适用于以下各算法。

[para]
[:en] Throughout this subclause, the parameters [`UnaryOperation],
[`BinaryOperation], [`BinaryOperation1], and [`BinaryOperation2] are used
whenever an algorithm expects a function object ([#function.objects]).
[:zh_CN] 本子条款全篇中，每当某个算法预期函数对象（[#function.objects]）时，就
使用形参 [`UnaryOperation]，[`BinaryOperation]，[`BinaryOperation1] 和
[`BinaryOperation2]。

[para]
[enter:note]
[:en] The use of closed ranges as well as semi-open ranges to specify
requirements throughout this subclause is intentional.
[:zh_CN] 文中特意使用闭合范围和半开范围来给出某些要求。
[exit:note]

