[section#simd.mask.binary
    [:en] [`basic_mask] binary operators
    [:zh_CN] [`basic_mask] 二元运算符
]
[%@lib@member operator&&[!basic_mask]]
[%@lib@member operator||[!basic_mask]]
[%@lib@member operator&[!basic_mask]]
[%@lib@member operator|[!basic_mask]]
[%@lib@member operator^[!basic_mask]]
[codeblock:declaration]
friend constexpr basic_mask
  operator&&(const basic_mask& lhs, const basic_mask& rhs) noexcept;
friend constexpr basic_mask
  operator||(const basic_mask& lhs, const basic_mask& rhs) noexcept;
friend constexpr basic_mask
  operator& (const basic_mask& lhs, const basic_mask& rhs) noexcept;
friend constexpr basic_mask
  operator| (const basic_mask& lhs, const basic_mask& rhs) noexcept;
friend constexpr basic_mask
  operator^ (const basic_mask& lhs, const basic_mask& rhs) noexcept;
[codeblock:end]

[div:description]
[para]
[:en] Let [^op] be the operator.
[:zh_CN] 令 [^op] 为运算符。

[para:returns]
[:en] A [`basic_mask] object initialized with the results of applying
[^op] to [`lhs] and [`rhs] as a binary element-wise operation.
[:zh_CN] 一个 [`basic_mask] 对象，以按二元逐元素运算对 [`lhs] 和 [`rhs] 实施
[^op] 的结果初始化。
[div:end]
