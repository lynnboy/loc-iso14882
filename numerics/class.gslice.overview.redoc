[section#class.gslice.overview
    [:en] Overview
    [:zh_CN] 概述
]

[%@library gslice]
[codeblock:synopsis]
namespace std {
  class gslice {
  public:
    gslice();
    gslice(size_t s, const valarray<size_t>& l, const valarray<size_t>& d);

    size_t           start() const;
    valarray<size_t> size() const;
    valarray<size_t> stride() const;
  };
}
[codeblock:end]

[para]
[:en] This class represents a generalized slice out of an array.
[:zh_CN] 这个类表示对数组进行一种泛化的切片。

[:en] A [`gslice] is defined by a starting offset ([$s]), a set of lengths
([$l_j]), and a set of strides ([$d_j]).
[:zh_CN] [`gslice] 被定义为一个起始索引（[$s]），一组长度（[$l_j]），以及一组
步长（[$d_j]）。

[:en] The number of lengths shall equal the number of strides.
[:zh_CN] 长度的数量应当等于步长的数量。

[para]
[:en] A [`gslice] represents a mapping from a set of indices ([$i_j]), equal
in number to the number of strides, to a single index [$k].
[:zh_CN] [`gslice] 代表从一组索引（[$i_j]）（其个数与步长的个数相同）到单个索引
[$k] 的一种映射。

[:en] It is useful for building multidimensional array classes using the
[`valarray] template, which is one-dimensional.
[:zh_CN] 它可以用于利用（一维的）[`valarray] 模板来构建多维的数组类。

[:en] The set of one-dimensional index values specified by a [`gslice] are
[:zh_CN] 由一个 [`gslice] 所指定的一维索引值的集合为

[math]
k = s + \sum_j i_j d_j
[math:end]

[:en@~] where the multidimensional indices [$i_j] range in value from
0 to [$l_{ij} - 1].
[:zh_CN@~] 其中，多维索引 [$i_j] 的取值范围为从 0 到 [$l_{ij} - 1]。

[para]
[begin:example]
[:en] The [`gslice] specification
[:zh_CN] [`gslice] 的说明

[codeblock:notation]
start  = 3
length = {2, 4, 3}
stride = {19, 4, 1}
[codeblock:end]

[:en@~] yields the sequence of one-dimensional indices
[:zh_CN@~] 所产生的一维索引序列为

[math]
k = 3 + (0, 1) \times 19 + (0, 1, 2, 3) \times 4 + (0, 1, 2) \times 1
[math:end]

[:en@~] which are ordered as shown in the following table:
[:zh_CN@~] 下表依序列出：

[math@aligned]
(i_0, i_1, i_2, k) = [br]
    (0,  0,  0,  3), [br]
    (0,  0,  1,  4), [br]
    (0,  0,  2,  5), [br]
    (0,  1,  0,  7), [br]
    (0,  1,  1,  8), [br]
    (0,  1,  2,  9), [br]
    (0,  2,  0, 11), [br]
    (0,  2,  1, 12), [br]
    (0,  2,  2, 13), [br]
    (0,  3,  0, 15), [br]
    (0,  3,  1, 16), [br]
    (0,  3,  2, 17), [br]
    (1,  0,  0, 22), [br]
    (1,  0,  1, 23), [br]
    \ldots [br]
    (1,  3,  2, 36)
[math:end]

[:en] That is, the highest-ordered index turns fastest.
[:zh_CN] 亦即，最高序位的索引变化最快。
[end:example]

[para]
[:en] It is possible to have degenerate generalized slices in which an address
is repeated.
[:zh_CN] 可能出现退化的泛化切片，其中某个地址可多次出现。

[para]
[begin:example]
[:en] If the stride parameters in the previous example are changed to {1, 1, 1},
the first few elements of the resulting sequence of indices will be
[:zh_CN] 如果将上例中的步长参数改为 {1, 1, 1}，则其结果索引序列的前面几个元素为

[math@aligned]
    (0,  0,  0,  3), [br]
    (0,  0,  1,  4), [br]
    (0,  0,  2,  5), [br]
    (0,  1,  0,  4), [br]
    (0,  1,  1,  5), [br]
    (0,  1,  2,  6), [br]
    \ldots
[math:end]
[end:example]

[para]
[:en] If a degenerate slice is used as the argument to the non-[`const] version
of [`operator`[`](const gslice&)], the behavior is [%undefined] undefined.
[:zh_CN] 如果使用了退化的切片作为非 [`const] 版本的
[`operator`[`](const gslice&)] 的实参，则其行为是[%未定义]未定义的。
