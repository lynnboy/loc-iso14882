[section#linalg.algs.blas2.hemv
    [:en] Hermitian matrix-vector product
    [:zh_CN] 厄米共轭矩阵-向量相乘
]

[para]
[begin:note]
[:en] These functions correspond to the BLAS functions [`xHEMV] and [`xHPMV]
[#:cite@super#blas2].
[:zh_CN] 这些函数对应于 BLAS 函数 [`xHEMV] 和 [`xHPMV][#:cite@super#blas2]。
[end:note]

[para]
[:en] The following elements apply to all functions in [#linalg.algs.blas2.hemv].
[:zh_CN] 下列要素适用于 [#linalg.algs.blas2.hemv] 中的所有函数。

[para:mandates]
[list]
[item]
[:en] If [`InMat] has [`layout_blas_packed] layout, then the layout[=']s
[`Triangle] template argument has the same type as the function[=']s [`Triangle]
template argument;
[:zh_CN] 如果 [`InMat] 具有 [`layout_blas_packed] 布局，则该布局的 [`Triangle]
模板实参与函数的 [`Triangle] 模板实参为相同类型；
[item]
[:en] [`[*compatible-static-extents]<decltype(A), decltype(A)>(0, 1)]
is [`true];
[:zh_CN] [`[*compatible-static-extents]<decltype(A), decltype(A)>(0, 1)]
为 [`true]；
[item]
[:en] [`[*possibly-multipliable]<decltype(A), decltype(x), decltype(y)>()]
is [`true]; and
[:zh_CN] [`[*possibly-multipliable]<decltype(A), decltype(x), decltype(y)>()]
为 [`true]；并且
[item]
[:en] [`[*possibly-addable]<decltype(x), decltype(y), decltype(z)>()]
is [`true] for those overloads that take a [`z] parameter.
[:zh_CN] 对于接受 [`z] 形参的那些重载。
[`[*possibly-addable]<decltype(x), decltype(y), decltype(z)>()] 为 [`true]。
[list:end]

[para:expects]
[list]
[item]
[:en@~] [`A.extent(0)] equals [`A.extent(1)],
[:zh_CN@~] [`A.extent(0)] 等于 [`A.extent(1)]，
[item]
[:en@~] [`[*multipliable](A, x, y)] is [`true], and
[:zh_CN@~] [`[*multipliable](A, x, y)] 为 [`true]，并且
[item]
[:en@~] [`[*addable](x, y, z)] is [`true] for those overloads that take a [`z]
parameter.
[:zh_CN@~] 对于接受 [`z] 形参的那些重载，[`[*addable](x, y, z)] 为 [`true]。
[list:end]

[para:complexity]
[:en] [?bigoh [`x.extent(0)] \times [`A.extent(1)]].
[:zh_CN] [?bigoh [`x.extent(0)] \times [`A.extent(1)]]。

[codeblock:declaration]
template<[[redoc("*:c>")]]in-matrix InMat, class Triangle, [[redoc("*:c>")]]in-vector InVec, [[redoc("*:c>")]]out-vector OutVec>
  void hermitian_matrix_vector_product(InMat A, Triangle t, InVec x, OutVec y);
template<class ExecutionPolicy,
         [[redoc("*:c>")]]in-matrix InMat, class Triangle, [[redoc("*:c>")]]in-vector InVec, [[redoc("*:c>")]]out-vector OutVec>
  void hermitian_matrix_vector_product(ExecutionPolicy&& exec,
                                       InMat A, Triangle t, InVec x, OutVec y);
[codeblock:end]

[div:description]
[para]
[:en] These functions perform an overwriting Hermitian matrix-vector product,
taking into account the [`Triangle] parameter that applies to the Hermitian
matrix [`A] ([#linalg.general]).
[:zh_CN] 这些函数实施覆写的厄米共轭矩阵-向量相乘，其中考虑在厄米共轭矩阵 [`A] 上
应用的 [`Triangle] 形参（[#linalg.general]）。

[para:effects]
[:en] Computes [$y = A x].
[:zh_CN] 计算 [$y = A x]。
[div:end]

[codeblock:declaration]
template<[[redoc("*:c>")]]in-matrix InMat, class Triangle, [[redoc("*:c>")]]in-vector InVec1, [[redoc("*:c>")]]in-vector InVec2, [[redoc("*:c>")]]out-vector OutVec>
  void hermitian_matrix_vector_product(InMat A, Triangle t, InVec1 x, InVec2 y, OutVec z);
template<class ExecutionPolicy,
         [[redoc("*:c>")]]in-matrix InMat, class Triangle, [[redoc("*:c>")]]in-vector InVec1, [[redoc("*:c>")]]in-vector InVec2, [[redoc("*:c>")]]out-vector OutVec>
  void hermitian_matrix_vector_product(ExecutionPolicy&& exec,
                                       InMat A, Triangle t, InVec1 x, InVec2 y, OutVec z);
[codeblock:end]

[div:description]
[para]
[:en] These functions perform an updating Hermitian matrix-vector product,
taking into account the [`Triangle] parameter that applies to the Hermitian
matrix [`A] ([#linalg.general]).
[:zh_CN] 这些函数实施更新的厄米共轭矩阵-向量相乘，其中考虑在厄米共轭矩阵 [`A] 上
应用的 [`Triangle] 形参（[#linalg.general]）。

[para:effects]
[:en] Computes [$z = y + A x].
[:zh_CN] 计算 [$z = y + A x]。

[para:remarks]
[:en] [`z] may alias [`y].
[:zh_CN] [`z] 可以为 [`y] 的别名。
[div:end]
