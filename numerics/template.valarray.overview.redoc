[section#template.valarray.overview
    [:en] Overview
    [:zh_CN] 概述
]

[%@library valarray]
[codeblock:synopsis]
namespace std {
  template<class T> class valarray {
  public:
    using value_type = T;

    // [:en] [#valarray.cons], construct/destroy
    // [|:zh_CN] [#valarray.cons]，构造/销毁
    valarray();
    explicit valarray(size_t);
    valarray(const T&, size_t);
    valarray(const T*, size_t);
    valarray(const valarray&);
    valarray(valarray&&) noexcept;
    valarray(const slice_array<T>&);
    valarray(const gslice_array<T>&);
    valarray(const mask_array<T>&);
    valarray(const indirect_array<T>&);
    valarray(initializer_list<T>);
    ~valarray();

    // [:en] [#valarray.assign], assignment
    // [|:zh_CN] [#valarray.assign]，赋值
    valarray& operator=(const valarray&);
    valarray& operator=(valarray&&) noexcept;
    valarray& operator=(initializer_list<T>);
    valarray& operator=(const T&);
    valarray& operator=(const slice_array<T>&);
    valarray& operator=(const gslice_array<T>&);
    valarray& operator=(const mask_array<T>&);
    valarray& operator=(const indirect_array<T>&);

    // [:en] [#valarray.access], element access
    // [|:zh_CN] [#valarray.access]，元素访问
    const T&          operator[](size_t) const;
    T&                operator[](size_t);

    // [:en] [#valarray.sub], subset operations
    // [|:zh_CN] [#valarray.sub]，子集运算
    valarray          operator[](slice) const;
    slice_array<T>    operator[](slice);
    valarray          operator[](const gslice&) const;
    gslice_array<T>   operator[](const gslice&);
    valarray          operator[](const valarray<bool>&) const;
    mask_array<T>     operator[](const valarray<bool>&);
    valarray          operator[](const valarray<size_t>&) const;
    indirect_array<T> operator[](const valarray<size_t>&);

    // [:en] [#valarray.unary], unary operators
    // [|:zh_CN] [#valarray.unary]，一元运算符
    valarray operator+() const;
    valarray operator-() const;
    valarray operator~() const;
    valarray<bool> operator!() const;

    // [:en] [#valarray.cassign], compound assignment
    // [:zh_CN] [#valarray.cassign]，组合赋值
    valarray& operator*= (const T&);
    valarray& operator/= (const T&);
    valarray& operator%= (const T&);
    valarray& operator+= (const T&);
    valarray& operator-= (const T&);
    valarray& operator^= (const T&);
    valarray& operator&= (const T&);
    valarray& operator|= (const T&);
    valarray& operator<<=(const T&);
    valarray& operator>>=(const T&);

    valarray& operator*= (const valarray&);
    valarray& operator/= (const valarray&);
    valarray& operator%= (const valarray&);
    valarray& operator+= (const valarray&);
    valarray& operator-= (const valarray&);
    valarray& operator^= (const valarray&);
    valarray& operator|= (const valarray&);
    valarray& operator&= (const valarray&);
    valarray& operator<<=(const valarray&);
    valarray& operator>>=(const valarray&);

    // [:en] [#valarray.members], member functions
    // [:zh_CN] [#valarray.members]，成员函数
    void swap(valarray&) noexcept;

    size_t size() const;

    T sum() const;
    T min() const;
    T max() const;

    valarray shift (int) const;
    valarray cshift(int) const;
    valarray apply(T func(T)) const;
    valarray apply(T func(const T&)) const;
    void resize(size_t sz, T c = T());
  };

  template<class T, size_t cnt> valarray(const T(&)[cnt], size_t) -> valarray<T>;
}
[codeblock:end]

[para]
[:en] The class template [`valarray<T>] is a one-dimensional smart array, with
elements numbered sequentially from zero.
[:zh_CN] 类模板 [`valarray<T>] 是一种一维智能数组，其元素从零开始依序排列。

[:en] It is a representation of the mathematical concept of an ordered set of
values.
[:zh_CN] 它是对数值的有序集合的数学概念的一种表示。

[:en] For convenience, an object of type [`valarray<T>] is referred to as an
["array] throughout the remainder of [#numarray].
[:zh_CN] 为便于讨论，[#numarray] 的余下部分中都将称 [`valarray<T>] 类型的对象为
“数组”。

[:en] The illusion of higher dimensionality may be produced by the familiar
idiom of computed indices, together with the powerful subsetting capabilities
provided by the generalized subscript operators.[#:note#fn:$1]
[:zh_CN] 更高维度的效果，可以采用众所周知的计算索引的手法来产生，同时可以在
一般化的下标运算符上获得强大的子集化运算能力。[#:note#fn:$1]

[note:foot#fn:$1]
[:en] The intent is to specify an array template that has the minimum
functionality necessary to address aliasing ambiguities and the proliferation of
temporaries.
[:zh_CN] 这里的意图，是要指定一种数组模板，使其具有足以处理别名歧义问题和临时
对象增生问题的最小功能。

[:en] Thus, the [`valarray] template is neither a matrix class nor a field
class.
[:zh_CN] 因此，[`valarray] 模板既不是矩阵类，也不是数值场类，

[:en] However, it is a very useful building block for designing such classes.
[:zh_CN] 不过在设计这些类时，它是一种非常有用的构建块。
[note:end]
