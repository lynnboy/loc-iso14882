[/
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% shuffle_order_engine engine adaptor:
/]

[section#rand.adapt.shuf
    [:en] Class template [`shuffle_order_engine]
    [:zh_CN] 类模板 [`shuffle_order_engine]
]

[%@lib shuffle_order_engine]

[para]
[:en] A [`shuffle_order_engine] random number engine adaptor produces the same
random numbers that are produced by some base engine [$e], but delivers them in
a different sequence.
[:zh_CN] [`shuffle_order_engine] 随机数引擎适配器产生的随机数与基础引擎 [$e] 所
产生的随机数相同，但以不同的顺序提供。

[:en] The state [=state x,i] of a [`shuffle_order_engine] engine adaptor object
[`x] consists of the state [=state e,i] of its base engine [`e], an additional
value [$Y] of the type delivered by [`e], and an additional sequence [$V] of [$k]
values also of the type delivered by [`e].
[:zh_CN] [`shuffle_order_engine] 引擎适配器对象 [`x] 的状态 [=state x,i] 由其
基础引擎 [`e] 的状态 [=state e,i]，一个 [`e] 所提供类型的额外的值 [$Y]，以及
一个额外的也为 [`e] 所提供类型的 [$k] 个值的序列 [$V] 所构成。

[:en] The size of the state is the size of [$e][=']s state plus [$k + 1].
[:zh_CN] 其状态的大小为 [$e] 的状态的大小加上 [$k + 1]。

[para]
[:en] The transition algorithm permutes the values produced by [$e].
[:zh_CN] 其转移算法对 [$e] 所产生的值进行排列。

[:en] The state transition is performed as follows:
[:zh_CN] 状态转移按如下进行：
[list]
[item]
[:en] Calculate an integer
[:zh_CN] 计算一个整数
[math]
j = \left\lfloor \frac{k \cdot (Y - e_{\min})}
                      {e_{\max} - e_{\min} +1}
    \right\rfloor
[math:end]
[:en@~].
[:zh_CN@~]。
[item]
[:en] Set [$Y] to [$V_j] and then set [$V_j] to [`e()].
[:zh_CN] 将 [$Y] 设值为 [$V_j]，再将 [$V_j] 设值为 [`e()]。
[list:end]

[para]
[:en] The generation algorithm yields the last value of [`Y] produced while
advancing [`e][=']s state as described above.
[:zh_CN] 其生成算法产生当按上述对 [`e] 的状态进行推进时所产生的最后的 [`Y] 值。

[%@lib shuffle_order_engine]
[%@lib@member result_type[!shuffle_order_engine]]
[codeblock:synopsis]
namespace std {
  template<class Engine, size_t k>
  class shuffle_order_engine {
  public:
    // [:en] types \
    [:zh_CN] 类型
    using result_type = typename Engine::result_type;

    // [:en] engine characteristics \
    [:zh_CN] 引擎的特性
    static constexpr size_t table_size = k;
    static constexpr result_type min() { return Engine::min(); }
    static constexpr result_type max() { return Engine::max(); }

    // [:en] constructors and seeding functions \
    [:zh_CN] 构造函数和播种函数
    shuffle_order_engine();
    explicit shuffle_order_engine(const Engine& e);
    explicit shuffle_order_engine(Engine&& e);
    explicit shuffle_order_engine(result_type s);
    template<class Sseq> explicit shuffle_order_engine(Sseq& q);
    void seed();
    void seed(result_type s);
    template<class Sseq> void seed(Sseq& q);

    // [:en] equality operators \
    [:zh_CN] 相等性运算符
    friend bool operator==(const shuffle_order_engine& x, const shuffle_order_engine& y);

    // [:en] generating functions \
    [:zh_CN] 生成函数
    result_type operator()();
    void discard(unsigned long long z);

    // [:en] property functions \
    [:zh_CN] 属性函数
    const Engine& base() const noexcept { return e; }

    // [:en] inserters and extractors \
    [:zh_CN] 插入符和提取符
    template<class charT, class traits>
      friend basic_ostream<charT, traits>&
        operator<<(basic_ostream<charT, traits>& os, const shuffle_order_engine& x);
    template<class charT, class traits>
      friend basic_istream<charT, traits>&
        operator>>(basic_istream<charT, traits>& is, shuffle_order_engine& x);

  private:
    Engine e;           // [=expos]
    result_type Y;      // [=expos]
    result_type V[k];   // [=expos]
  };
}
[codeblock:end]

[para]
[:en] The following relation shall hold: [`0 < k].
[:zh_CN] 应当满足如下关系：[`0 < k]。

[para]
[:en] The textual representation consists of the textual representation of [`e],
followed by the [`k] values of [$V], followed by the value of [$Y].
[:zh_CN] 其文本表示由 [`e] 的文本表示，跟着 [$V] 的 [`k] 个值，跟着 [$Y] 的值所
构成。

[para]
[%@lib@ctor shuffle_order_engine]
[:en] In addition to its behavior pursuant to subclause [#rand.req.adapt], each
constructor that is not a copy constructor initializes [$[`V`[0`]], \dotsc, [`V`[k - 1`]]]
and [$Y], in that order, with values returned by successive invocations of [`e()].
[:zh_CN] 除了子条款 [#rand.req.adapt] 中所述的行为之外，各个并非复制构造函数的
构造函数还以对 [`e()] 的连续调用所返回的值对 [$[`V`[0`]], \dotsc, [`V`[k - 1`]]]
和 [$Y] 依次进行初始化。
