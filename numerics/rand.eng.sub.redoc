[/
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subtract_with_carry_engine engine:
/]

[section#rand.eng.sub
    [:en] Class template [`subtract_with_carry_engine]
    [:zh_CN] 类模板 [`subtract_with_carry_engine]
]

[%@lib subtract_with_carry_engine]
[para]
[:en] A [`subtract_with_carry_engine] random number engine produces unsigned
integer random numbers.
[:zh_CN] [`subtract_with_carry_engine] 随机数引擎产生无符号整数的随机数。

[para]
[:en] The state [=state x,i] of a [`subtract_with_carry_engine] object [`x] is
of size [?bigoh r], and consists of a sequence [$X] of [$r] integer values
[$0 \leq X_i < m \,= 2^w]; all subscripts applied to [$X] are to be taken modulo
[$r].
[:zh_CN] [`subtract_with_carry_engine] 对象 [`x] 的状态 [=state x,i] 的大小为
[?bigoh r]，并由 [$r] 个整数值的序列 [$X] 构成，其中 [$0 \leq X_i < m \,= 2^w]；
对 [$x] 进行的所有下标操作均按 [$r] 取模。

[:en] The state [=state x,i] additionally consists of an integer [$c] (known as
the [+:% carry]) whose value is either 0 or 1.
[:zh_CN] 状态 [=state x,i] 还包括一个整数 [$c]（称为其[+:% 借位]），其值为 0 或 1。

[para]
[:en] The state transition is performed as follows:
[:zh_CN] 按如下进行状态转移：

[list]
[item]
[:en] Let [$ Y = X_{i-s} - X_{i-r} - c].
[:zh_CN] 令 [$ Y = X_{i-s} - X_{i-r} - c]。
[item]
[:en] Set [$X_i] to [$y = Y \bmod m].
[:zh_CN] 将 [$X_i] 设值为 [$y = Y \bmod m]。

[:en] Set [$c] to 1 if [$Y < 0], otherwise set [$c] to 0.
[:zh_CN] 当 [$Y < 0] 时将 [$c] 设值为 1，否则将 [$c] 设值为 0。
[list:end]

[begin:note]
[:en] This algorithm corresponds to a modular linear function of the form
[$\mathsf{TA}([=state x,i]) = (a \cdot [=state x,i]) \bmod b], where [$b] is of
the form [$m^r - m^s + 1] and [$a = b - (b - 1) / m].
[:zh_CN] 该算法对应于一个形式为
[$\mathsf{TA}([=state x,i]) = (a \cdot [=state x,i]) \bmod b] 的模线性函数，其中
[$b] 的形式为 [$m^r - m^s + 1] 且有 [$a = b - (b - 1) / m]。
[end:note]

[para]
[:en] The generation algorithm is given by [$\mathsf{GA}([=state x,i]) = y],
where [$y] is the value produced as a result of advancing the engine[=']s state
as described above.
[:zh_CN] 其生成算法以 [$\mathsf{GA}([=state x,i]) = y] 给出，其中 [$y] 为对引擎
的状态依前文所述推进的结果所产生的值。

[%@lib subtract_with_carry_engine]
[%@lib@member result_type[!subtract_with_carry_engine]]
[codeblock:synopsis]
namespace std {
  template<class UIntType, size_t w, size_t s, size_t r>
  class subtract_with_carry_engine {
  public:
    // [:en] types \
    [:zh_CN] 类型
    using result_type = UIntType;

    // [:en] engine characteristics \
    [:zh_CN] 引擎的特性
    static constexpr size_t word_size = w;
    static constexpr size_t short_lag = s;
    static constexpr size_t long_lag = r;
    static constexpr result_type min() { return 0; }
    static constexpr result_type max() { return [[redoc("[$m - 1]")]]; }
    static constexpr uint_least32_t default_seed = 19780503u;

    // [:en] constructors and seeding functions \
    [:zh_CN] 构造函数和播种函数
    subtract_with_carry_engine() : subtract_with_carry_engine(0u) {}
    explicit subtract_with_carry_engine(result_type value);
    template<class Sseq> explicit subtract_with_carry_engine(Sseq& q);
    void seed(result_type value = 0u);
    template<class Sseq> void seed(Sseq& q);

    // [:en] equality operators \
    [:zh_CN] 相等性运算符
    friend bool operator==(const subtract_with_carry_engine& x,
                           const subtract_with_carry_engine& y);

    // [:en] generating functions \
    [:zh_CN] 生成函数
    result_type operator()();
    void discard(unsigned long long z);

    // [:en] inserters and extractors \
    [:zh_CN] 插入符和提取符
    template<class charT, class traits>
      friend basic_ostream<charT, traits>&
        operator<<(basic_ostream<charT, traits>& os, const subtract_with_carry_engine& x);
    template<class charT, class traits>
      friend basic_istream<charT, traits>&
        operator>>(basic_istream<charT, traits>& is, subtract_with_carry_engine& x);
  };
}
[codeblock:end]

[para]
[:en] The following relations shall hold: [`0u < s], [`s < r], [`0 < w], and
[`w <= numeric_limits<UIntType>::digits].
[:zh_CN] 应当满足下列各关系：[`0u < s]，[`s < r]，[`0 < w]，并且
[`w <= numeric_limits<UIntType>::digits]。

[para]
[:en] The textual representation consists of the values of
[$X_{i-r}, \dotsc, X_{i-1}], in that order, followed by [$c].
[:zh_CN] 其文本表示由 [$X_{i-r}, \dotsc, X_{i-1}] 的各值依序构成，后面跟着 [$c]。

[%@lib@ctor subtract_with_carry_engine]
[codeblock:declaration]
explicit subtract_with_carry_engine(result_type value);
[codeblock:end]

[div:description]
[para:effects]
[:en] Sets the values of [$X_{-r}, \dotsc, X_{-1}], in that order, as
specified below.
[:zh_CN] 以下述方式依序设置 [$X_{-r}, \dotsc, X_{-1}] 的值。

[:en] If [$X_{-1}] is then [$0], sets [$c] to [$1]; otherwise sets [$c] to [$0].
[:zh_CN] 若 [$X_{-1}] 变为 [$0]，则设值 [$c] 为 [$1]；否则设值 [$c] 为 [$0].

[para:~]
[:en] To set the values [$X_k], first construct [`e], a
[`linear_congruential_engine] object, as if by the following definition:
[:zh_CN] 为设值 [$X_k] 的值，首先以如同下述定义构造一个
[`linear_congruential_engine] 对象 [`e]：

[codeblock]
linear_congruential_engine<uint_least32_t,
                          40014u,0u,2147483563u> e(value == 0u ? default_seed : value);
[codeblock:end]

[:en] Then, to set each [$X_k], obtain new values [$z_0, \dotsc, z_{n-1}] from
[$n = \lceil w/32 \rceil] successive invocations of [`e].
[:zh_CN] 然后，为了对各个 [$X_k] 设值，对 [`e] 进行 [$n = \lceil w/32 \rceil] 次
连续调用取得一组新的值 [$z_0, \dotsc, z_{n-1}]。

[:en] Set [$X_k] to [$\left( \sum_{j=0}^{n-1} z_j \cdot 2^{32j}\right) \bmod m].
[:zh_CN] 将 [$X_k] 设值为
[$\left( \sum_{j=0}^{n-1} z_j \cdot 2^{32j}\right) \bmod m]。

[para:complexity]
[:en] Exactly [$n \cdot [`r]] invocations of [`e].
[:zh_CN] 恰好 [$n \cdot [`r]] 次调用 [`e]。
[div:end]

[%@lib@ctor subtract_with_carry_engine]
[codeblock:declaration]
template<class Sseq> explicit subtract_with_carry_engine(Sseq& q);
[codeblock:end]

[div:description]
[para:effects]
[:en] With [$k = \left\lceil w / 32 \right\rceil] and [$a] an array (or
equivalent) of length [$r \cdot k], invokes
[`q.generate([$a + 0], [$a + r \cdot k])] and then, iteratively for
[$i = -r, \dotsc, -1], sets [$X_i] to
[$\left(\sum_{j=0}^{k-1}a_{k(i+r)+j} \cdot 2^{32j} \right) \bmod m].
[:zh_CN] 设 [$k = \left\lceil w / 32 \right\rceil] 且 [$a] 为长度为 [$n \cdot k]
的数组（或等价物），其将调用
[`q.generate([$a + 0], [$a + n \cdot k])]，并随后对每个 [$i = -r, \dotsc, -1]，
将 [$X_i] 设值为
[$\left(\sum_{j=0}^{k-1}a_{k(i+r)+j} \cdot 2^{32j} \right) \bmod m]。

[:en] If [$X_{-1}] is then 0, sets [$c] to 1; otherwise sets [$c] to 0.
[:zh_CN] 若 [$X_{-1}] 变为 0，将 [$c] 设值为 1；否则将 [$c] 设值为 0。
[div:end]
