[/
% ----------------------------------------------------------------------
% Class template student_t_distribution
% ----------------------------------------------------------------------
/]

[section#rand.dist.norm.t
    [:en] Class template [`student_t_distribution]
    [:zh_CN] 类模板 [`student_t_distribution]
]

[%@library student_t_distribution]
[%[:en]random number distribution[![`student_t_distribution]]
  [:zh_CN]随机数分布[![`student_t_distribution]]]

[para]
[:en] A [`student_t_distribution] random number distribution produces random
numbers [$x] distributed according to the probability density function
[%probability density function[![`student_t_distribution]]]
[%[`student_t_distribution][!probability density function]]
[:zh_CN] [`student_t_distribution] 随机数分布产生随机数 [$x]，
其分布符合概率密度函数
[%概率密度函数[![`student_t_distribution]]]
[%[`student_t_distribution][!概率密度函数]]

[math]
p(x\,|\,n) = \frac{1}{\sqrt{n \pi}}
  \cdot \frac{\Gamma\big((n+1)/2\big)}{\Gamma(n/2)}
  \cdot \left(1 + \frac{x^2}{n} \right)^{-(n+1)/2}
  \text{ .}
[math:end]

[%@library student_t_distribution]
[codeblock:synopsis [special unspecified] ]
template<class RealType = double>
  class student_t_distribution {
  public:
    // [:en] types
    // [|:zh_CN] 类型
    using result_type = RealType;
    using param_type  = [=Unspec];

    // [:en] constructors and reset functions
    // [|:zh_CN] 构造函数和重置函数
    student_t_distribution() : student_t_distribution(1.0) {}
    explicit student_t_distribution(RealType n);
    explicit student_t_distribution(const param_type& parm);
    void reset();

    // [:en] generating functions
    // [|:zh_CN] 生成函数
    template<class URBG>
      result_type operator()(URBG& g);
    template<class URBG>
      result_type operator()(URBG& g, const param_type& parm);

    // [:en] property functions
    // [|:zh_CN] 属性函数
    RealType n() const;
    param_type param() const;
    void param(const param_type& parm);
    result_type min() const;
    result_type max() const;
  };
[codeblock:end]

[%@library student_t_distribution[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
explicit student_t_distribution(RealType n);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [$0 < [`n]].
[:zh_CN] [$0 < [`n]]。

[para:effects]
[:en] Constructs a [`student_t_distribution] object; [`n] corresponds to the
parameter of the distribution.
[:zh_CN] 构造一个 [`student_t_distribution] 对象；[`n] 对应于分布的形参。
[exit:description]

[%@library student_t_distribution[!mean]]
[%@library mean[!student_t_distribution]]
[codeblock:declaration]
RealType n() const;
[codeblock:end]

[enter:description]
[para:returns]
[:en] The value of the [`n] parameter with which the object was constructed.
[:zh_CN] 该对象构造时的形参 [`n] 的值。
[exit:description]
