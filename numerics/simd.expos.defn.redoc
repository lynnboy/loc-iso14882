[section#simd.expos.defn
    [:en] Exposition-only helpers
    [:zh_CN] 仅用于阐释的辅助项
]

[codeblock:declaration]
using [[redoc("*>")]]simd-size-type = [[redoc("[=seebelow]")]];
[codeblock:end]

[div:description]
[para]
[:en] [*simd-size-type] is an alias for a signed integer type.
[:zh_CN] [*simd-size-type] 是有符号整数类型的别名。
[div:end]

[codeblock:declaration]
template<size_t Bytes> using [[redoc("*>")]]integer-from = [[redoc("[=seebelow]")]];
[codeblock:end]

[div:description]
[para]
[:en] [`[*integer-from]<Bytes>] is an alias for a signed integer type [`T]
such that [`sizeof(T)] equals [`Bytes].
[:zh_CN] [`[*integer-from]<Bytes>] 是某个有符号整数类型 [`T] 的别名，
使得 [`sizeof(T)] 等于 [`Bytes]。
[div:end]

[codeblock:declaration]
template<class T, class Abi>
  constexpr [[redoc("*>")]]simd-size-type [[redoc("*>")]]simd-size-v = [[redoc("[=seebelow]")]];
[codeblock:end]

[div:description]
[para]
[:en] [`[*simd-size-v]<T, Abi>] denotes the width of [`basic_simd<T, Abi>] if
the specialization [`basic_simd<T, Abi>] is enabled, or [`0] otherwise.
[:zh_CN] 当 [`basic_simd<T, Abi>] 被启用时 [`[*simd-size-v]<T, Abi>] 代表
[`basic_simd<T, Abi>]，否则为 [`0]。
[div:end]

[codeblock:declaration]
template<class T> constexpr size_t [[redoc("*>")]]mask-element-size = [[redoc("[=seebelow]")]];
[codeblock:end]

[div:description]
[para]
[:en] [`[*mask-element-size]<basic_simd_mask<Bytes, Abi>>] has the value [`Bytes].
[:zh_CN] [`[*mask-element-size]<basic_simd_mask<Bytes, Abi>>] 的值为 [`Bytes]。
[div:end]

[codeblock:declaration]
template<class T> using [[redoc("*>")]]deduced-simd-t = [[redoc("[=seebelow]")]];
[codeblock:end]

[div:description]
[para]
[:en] Let [`x] denote an lvalue of type [`const T].
[:zh_CN] 令 [`x] 代表 [`const T] 类型的左值。

[para]
[:en] [`[*deduced-simd-t]<T>] is an alias for
[:zh_CN] [`[*deduced-simd-t]<T>] 是以下类型的别名
[list]
[item]
[:en@~] [`decltype(x + x)], if the type of [`x + x] is an enabled specialization
of [`basic_simd]; otherwise
[:zh_CN@~] 若 [`x + x] 的类型是 [`basic_simd] 的已启用特例则为 [`decltype(x + x)]；否则
 [item]
[:en@~] [`void].
[:zh_CN@~] 为 [`void]。
[list:end]
[div:end]

[codeblock:declaration]
template<class V, class T> using [[redoc("*>")]]make-compatible-simd-t = [[redoc("[=seebelow]")]];
[codeblock:end]

[div:description]
[para]
[:en] Let [`x] denote an lvalue of type [`const T].
[:zh_CN] 令 [`x] 代表 [`const T] 类型的左值。

[para]
[:en] [`[*make-compatible-simd-t]<V, T>] is an alias for
[:zh_CN] [`[*make-compatible-simd-t]<V, T>] 是以下类型的别名
[list]
[item]
[:en@~] [`[*deduced-simd-t]<T>], if the type is not [`void], otherwise
[:zh_CN@~] 若 [`[*deduced-simd-t]<T>] 不是 [`void] 则为该类型，否则
 [item]
[:en@~] [`simd<decltype(x + x), V::size()>].
[:zh_CN@~] 为 [`simd<decltype(x + x), V::size()>]。
[list:end]
[div:end]

[codeblock:declaration]
template<class... Ts>
  requires [[redoc("*:c>")]]math-floating-point<Ts...>
    using [[redoc("*>")]]math-common-simd-t = [[redoc("[=seebelow]")]];
[codeblock:end]

[div:description]
[para]
[:en] Let [`T0] denote [`Ts...`[0`]].
[:zh_CN] 令 [`T0] 代表 [`Ts...`[0`]]。

[:en] Let [`T1] denote [`Ts...`[1`]].
[:zh_CN] 令 [`T1] 代表 [`Ts...`[1`]]。

[:en] Let [`TRest] denote a pack such that [`T0, T1, TRest...] is equivalent
to [`Ts...].
[:zh_CN] 令 [`TRest] 代表一个包组，使得 [`T0, T1, TRest...] 等价于 [`Ts...]。

[para]
[:en] Let [`[*math-common-simd-t]<Ts...>] be an alias for
[:zh_CN] 令 [`[*math-common-simd-t]<V, T>] 为以下类型的别名
[list]
[item]
[:en@~] [`[*deduced-simd-t]<T0>], if [`sizeof...(Ts)] equals [$1]; otherwise
[:zh_CN@~] 若 [`sizeof...(Ts)] 等于 [$1] 则为 [`[*deduced-simd-t]<T0>]；否则
[item]
[:en@~] [`common_type_t<[*deduced-simd-t]<T0>, [*deduced-simd-t]<T1>>],
if [`sizeof...(Ts)] equals [$2] and
[`[*:c math-floating-point]<T0> && [*:c math-floating-point]<T1>] is [`true];
otherwise
[:zh_CN@~] 若 [`sizeof...(Ts)] 等于 [$2] 且
[`[*:c math-floating-point]<T0> && [*:c math-floating-point]<T1>] 为 [`true]
则为 [`common_type_t<[*deduced-simd-t]<T0>, [*deduced-simd-t]<T1>>]；否则
[item]
[:en@~] [`common_type_t<[*deduced-simd-t]<T0>, T1>], if [`sizeof...(Ts)] equals
[$2] and [`[*:c math-floating-point]math-floating-point<T0>] is [`true]; otherwise
[:zh_CN@~] 若 [`sizeof...(Ts)] 等于 [$2] 且
[`[*:c math-floating-point]math-floating-point<T0>] 为 [`true]
则为 [`common_type_t<[*deduced-simd-t]<T0>, T1>]；否则
[item]
[:en@~] [`common_type_t<T0, [*deduced-simd-t]<T1>>], if [`sizeof...(Ts)] equals
[$2]; otherwise
[:zh_CN] 若 [`sizeof...(Ts)] 等于 [$2] 则为
[`common_type_t<T0, [*deduced-simd-t]<T1>>]；否则
[item]
[:en@~] [`common_type_t<[*math-common-simd-t]<T0, T1>, TRest...>], if
[`[*math-common-simd-t]<T0, T1>] is valid and denotes a type; otherwise
[:zh_CN@~] 若 [`[*math-common-simd-t]<T0, T1>] 有效并代表类型，则为
[`common_type_t<[*math-common-simd-t]<T0, T1>, TRest...>]；否则
[item]
[:en@~] [`common_type_t<[*math-common-simd-t]<TRest...>, T0, T1>].
[:zh_CN@~] 为 [`common_type_t<[*math-common-simd-t]<TRest...>, T0, T1>]。
[list:end]
[div:end]

[codeblock:declaration]
template<class BinaryOperation, class T>
  concept [[redoc("*:c@def>")]]reduction-binary-operation =
    requires (const BinaryOperation binary_op, const simd<T, 1> v) {
      { binary_op(v, v) } -> same_as<simd<T, 1>>;
    };
[codeblock:end]

[div:description]
[para]
[:en] Types [`BinaryOperation] and [`T] model
[`[*:c reduction-binary-operation]<BinaryOperation, T>] only if:
[:zh_CN] 仅当以下情况下，类型 [`BinaryOperation] 和 [`T] 构成
[`[*:c reduction-binary-operation]<BinaryOperation, T>]：

[list]
[item]
[:en@~] [`BinaryOperation] is a binary element-wise operation and the
operation is commutative.
[:zh_CN@~] [`BinaryOperation] 是二元逐元素运算且该运算具有交换性。

[item]
[:en@~] An object of type [`BinaryOperation] can be invoked with two arguments
of type [`basic_simd<T, Abi>], with unspecified ABI tag [`Abi], returning
a [`basic_simd<T, Abi>].
[:en@~] [`BinaryOperation] 类型的对象可以用两个 [`basic_simd<T, Abi>] 类型的实参，
和一个未指明的 ABI 标签 [`Abi] 调用，并返回 [`basic_simd<T, Abi>]。
[list:end]
[div:end]
