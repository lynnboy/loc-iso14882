[section#cmath.syn
    [:en] Header [`<cmath>] synopsis
    [:zh_CN] 头文件 [`<cmath>] 纲要
]

[%@library cmath]
[%@library FP_FAST_FMA]
[%@library FP_FAST_FMAF]
[%@library FP_FAST_FMAL]
[%@library FP_ILOGB0]
[%@library FP_ILOGBNAN]
[%@library FP_INFINITE]
[%@library FP_NAN]
[%@library FP_NORMAL]
[%@library FP_SUBNORMAL]
[%@library FP_ZERO]
[%@library HUGE_VAL]
[%@library HUGE_VALF]
[%@library HUGE_VALL]
[%@library INFINITY]
[%@library MATH_ERREXCEPT]
[%@library MATH_ERRNO]
[%@library NAN]
[%@library abs]
[%@library acos]
[%@library acosf]
[%@library acosh]
[%@library acoshf]
[%@library acoshl]
[%@library acosl]
[%@library asin]
[%@library asinf]
[%@library asinh]
[%@library asinhf]
[%@library asinhl]
[%@library asinl]
[%@library atan]
[%@library atan2]
[%@library atan2f]
[%@library atan2l]
[%@library atanf]
[%@library atanh]
[%@library atanhf]
[%@library atanhl]
[%@library atanl]
[%@library cbrt]
[%@library cbrtf]
[%@library cbrtl]
[%@library ceil]
[%@library ceilf]
[%@library ceill]
[%@library copysign]
[%@library copysignf]
[%@library copysignl]
[%@library cos]
[%@library cosf]
[%@library cosh]
[%@library coshf]
[%@library coshl]
[%@library cosl]
[%@library double_t]
[%@library erf]
[%@library erfc]
[%@library erfcf]
[%@library erfcl]
[%@library erff]
[%@library erfl]
[%@library exp]
[%@library exp2]
[%@library exp2f]
[%@library exp2l]
[%@library expf]
[%@library expl]
[%@library expm1]
[%@library expm1f]
[%@library expm1l]
[%@library fabs]
[%@library fabsf]
[%@library fabsl]
[%@library fdim]
[%@library fdimf]
[%@library fdiml]
[%@library float_t]
[%@library floor]
[%@library floorf]
[%@library floorl]
[%@library fma]
[%@library fmaf]
[%@library fmal]
[%@library fmax]
[%@library fmaxf]
[%@library fmaxl]
[%@library fmin]
[%@library fminf]
[%@library fminl]
[%@library fmod]
[%@library fmodf]
[%@library fmodl]
[%@library fpclassify]
[%@library frexp]
[%@library frexpf]
[%@library frexpl]
[%@library hypot]
[%@library hypotf]
[%@library hypotl]
[%@library ilogb]
[%@library ilogbf]
[%@library ilogbl]
[%@library isfinite]
[%@library isgreater]
[%@library isgreaterequal]
[%@library isinf]
[%@library isless]
[%@library islessequal]
[%@library islessgreater]
[%@library isnan]
[%@library isnormal]
[%@library isunordered]
[%@library ldexp]
[%@library ldexpf]
[%@library ldexpl]
[%@library lgamma]
[%@library lgammaf]
[%@library lgammal]
[%@library llrint]
[%@library llrintf]
[%@library llrintl]
[%@library llround]
[%@library llroundf]
[%@library llroundl]
[%@library log]
[%@library log10]
[%@library log10f]
[%@library log10l]
[%@library log1p]
[%@library log1pf]
[%@library log1pl]
[%@library log2]
[%@library log2f]
[%@library log2l]
[%@library logb]
[%@library logbf]
[%@library logbl]
[%@library logf]
[%@library logl]
[%@library lrint]
[%@library lrintf]
[%@library lrintl]
[%@library lround]
[%@library lroundf]
[%@library lroundl]
[%@library math_errhandling]
[%@library modf]
[%@library modff]
[%@library modfl]
[%@library nan]
[%@library nanf]
[%@library nanl]
[%@library nearbyint]
[%@library nearbyintf]
[%@library nearbyintl]
[%@library nextafter]
[%@library nextafterf]
[%@library nextafterl]
[%@library nexttoward]
[%@library nexttowardf]
[%@library nexttowardl]
[%@library pow]
[%@library powf]
[%@library powl]
[%@library remainder]
[%@library remainderf]
[%@library remainderl]
[%@library remquo]
[%@library remquof]
[%@library remquol]
[%@library rint]
[%@library rintf]
[%@library rintl]
[%@library round]
[%@library roundf]
[%@library roundl]
[%@library scalbin]
[%@library scalbinf]
[%@library scalbinl]
[%@library scalbn]
[%@library scalbnf]
[%@library scalbnl]
[%@library signbit]
[%@library sin]
[%@library sinf]
[%@library sinh]
[%@library sinhf]
[%@library sinhl]
[%@library sinl]
[%@library sqrt]
[%@library sqrtf]
[%@library sqrtl]
[%@library tan]
[%@library tanf]
[%@library tanh]
[%@library tanhf]
[%@library tanhl]
[%@library tanl]
[%@library tgamma]
[%@library tgammaf]
[%@library tgammal]
[%@library trunc]
[%@library truncf]
[%@library truncl]
[codeblock:synopsis [!:mark SeeBelow] ]
namespace std {
  using float_t = [=SeeBelow];
  using double_t = [=SeeBelow];
}

#define HUGE_VAL [=SeeBelow]
#define HUGE_VALF [=SeeBelow]
#define HUGE_VALL [=SeeBelow]
#define INFINITY [=SeeBelow]
#define NAN [=SeeBelow]
#define FP_INFINITE [=SeeBelow]
#define FP_NAN [=SeeBelow]
#define FP_NORMAL [=SeeBelow]
#define FP_SUBNORMAL [=SeeBelow]
#define FP_ZERO [=SeeBelow]
#define FP_FAST_FMA [=SeeBelow]
#define FP_FAST_FMAF [=SeeBelow]
#define FP_FAST_FMAL [=SeeBelow]
#define FP_ILOGB0 [=SeeBelow]
#define FP_ILOGBNAN [=SeeBelow]
#define MATH_ERRNO [=SeeBelow]
#define MATH_ERREXCEPT [=SeeBelow]

#define math_errhandling [=SeeBelow]

namespace std {
  float acos(float x);  // [:en] see [#library.c]
                        // [|:zh_CN] 参见 [#library.c]
  double acos(double x);
  long double acos(long double x);  // [:en] see [#library.c]
                                    // [|:zh_CN] 参见 [#library.c]
  float acosf(float x);
  long double acosl(long double x);

  float asin(float x);  // [:en] see [#library.c]
                        // [|:zh_CN] 参见 [#library.c]
  double asin(double x);
  long double asin(long double x);  // [:en] see [#library.c]
                                    // [|:zh_CN] 参见 [#library.c]
  float asinf(float x);
  long double asinl(long double x);

  float atan(float x);  // [:en] see [#library.c]
                        // [|:zh_CN] 参见 [#library.c]
  double atan(double x);
  long double atan(long double x);  // [:en] see [#library.c]
                                    // [|:zh_CN] 参见 [#library.c]
  float atanf(float x);
  long double atanl(long double x);

  float atan2(float y, float x);  // [:en] see [#library.c]
                                  // [|:zh_CN] 参见 [#library.c]
  double atan2(double y, double x);
  long double atan2(long double y, long double x);  // [:en] see [#library.c]
                                                    // [|:zh_CN] 参见 [#library.c]
  float atan2f(float y, float x);
  long double atan2l(long double y, long double x);

  float cos(float x);  // [:en] see [#library.c]
                       // [|:zh_CN] 参见 [#library.c]
  double cos(double x);
  long double cos(long double x);  // [:en] see [#library.c]
                                   // [|:zh_CN] 参见 [#library.c]
  float cosf(float x);
  long double cosl(long double x);

  float sin(float x);  // [:en] see [#library.c]
                       // [|:zh_CN] 参见 [#library.c]
  double sin(double x);
  long double sin(long double x);  // [:en] see [#library.c]
                                   // [|:zh_CN] 参见 [#library.c]
  float sinf(float x);
  long double sinl(long double x);

  float tan(float x);  // [:en] see [#library.c]
                       // [|:zh_CN] 参见 [#library.c]
  double tan(double x);
  long double tan(long double x);  // [:en] see [#library.c]
                                   // [|:zh_CN] 参见 [#library.c]
  float tanf(float x);
  long double tanl(long double x);

  float acosh(float x);  // [:en] see [#library.c]
                         // [|:zh_CN] 参见 [#library.c]
  double acosh(double x);
  long double acosh(long double x);  // [:en] see [#library.c]
                                     // [|:zh_CN] 参见 [#library.c]
  float acoshf(float x);
  long double acoshl(long double x);

  float asinh(float x);  // [:en] see [#library.c]
                         // [|:zh_CN] 参见 [#library.c]
  double asinh(double x);
  long double asinh(long double x);  // [:en] see [#library.c]
                                     // [|:zh_CN] 参见 [#library.c]
  float asinhf(float x);
  long double asinhl(long double x);

  float atanh(float x);  // [:en] see [#library.c]
                         // [|:zh_CN] 参见 [#library.c]
  double atanh(double x);
  long double atanh(long double x);  // [:en] see [#library.c]
                                     // [|:zh_CN] 参见 [#library.c]
  float atanhf(float x);
  long double atanhl(long double x);

  float cosh(float x);  // [:en] see [#library.c]
                        // [|:zh_CN] 参见 [#library.c]
  double cosh(double x);
  long double cosh(long double x);  // [:en] see [#library.c]
                                    // [|:zh_CN] 参见 [#library.c]
  float coshf(float x);
  long double coshl(long double x);

  float sinh(float x);  // [:en] see [#library.c]
                        // [|:zh_CN] 参见 [#library.c]
  double sinh(double x);
  long double sinh(long double x);  // [:en] see [#library.c]
                                    // [|:zh_CN] 参见 [#library.c]
  float sinhf(float x);
  long double sinhl(long double x);

  float tanh(float x);  // [:en] see [#library.c]
                        // [|:zh_CN] 参见 [#library.c]
  double tanh(double x);
  long double tanh(long double x);  // [:en] see [#library.c]
                                    // [|:zh_CN] 参见 [#library.c]
  float tanhf(float x);
  long double tanhl(long double x);

  float exp(float x);  // [:en] see [#library.c]
                       // [|:zh_CN] 参见 [#library.c]
  double exp(double x);
  long double exp(long double x);  // [:en] see [#library.c]
                                   // [|:zh_CN] 参见 [#library.c]
  float expf(float x);
  long double expl(long double x);

  float exp2(float x);  // [:en] see [#library.c]
                        // [|:zh_CN] 参见 [#library.c]
  double exp2(double x);
  long double exp2(long double x);  // [:en] see [#library.c]
                                    // [|:zh_CN] 参见 [#library.c]
  float exp2f(float x);
  long double exp2l(long double x);

  float expm1(float x);  // [:en] see [#library.c]
                         // [|:zh_CN] 参见 [#library.c]
  double expm1(double x);
  long double expm1(long double x);  // [:en] see [#library.c]
                                     // [|:zh_CN] 参见 [#library.c]
  float expm1f(float x);
  long double expm1l(long double x);

  float frexp(float value, int* exp);  // [:en] see [#library.c]
                                       // [|:zh_CN] 参见 [#library.c]
  double frexp(double value, int* exp);
  long double frexp(long double value, int* exp);  // [:en] see [#library.c]
                                                   // [|:zh_CN] 参见 [#library.c]
  float frexpf(float value, int* exp);
  long double frexpl(long double value, int* exp);

  int ilogb(float x);  // [:en] see [#library.c]
                       // [|:zh_CN] 参见 [#library.c]
  int ilogb(double x);
  int ilogb(long double x);  // [:en] see [#library.c]
                             // [|:zh_CN] 参见 [#library.c]
  int ilogbf(float x);
  int ilogbl(long double x);

  float ldexp(float x, int exp);  // [:en] see [#library.c]
                                  // [|:zh_CN] 参见 [#library.c]
  double ldexp(double x, int exp);
  long double ldexp(long double x, int exp);  // [:en] see [#library.c]
                                              // [|:zh_CN] 参见 [#library.c]
  float ldexpf(float x, int exp);
  long double ldexpl(long double x, int exp);

  float log(float x);  // [:en] see [#library.c]
                       // [|:zh_CN] 参见 [#library.c]
  double log(double x);
  long double log(long double x);  // [:en] see [#library.c]
                                   // [|:zh_CN] 参见 [#library.c]
  float logf(float x);
  long double logl(long double x);

  float log10(float x);  // [:en] see [#library.c]
                         // [|:zh_CN] 参见 [#library.c]
  double log10(double x);
  long double log10(long double x);  // [:en] see [#library.c]
                                     // [|:zh_CN] 参见 [#library.c]
  float log10f(float x);
  long double log10l(long double x);

  float log1p(float x);  // [:en] see [#library.c]
                         // [|:zh_CN] 参见 [#library.c]
  double log1p(double x);
  long double log1p(long double x);  // [:en] see [#library.c]
                                     // [|:zh_CN] 参见 [#library.c]
  float log1pf(float x);
  long double log1pl(long double x);

  float log2(float x);  // [:en] see [#library.c]
                        // [|:zh_CN] 参见 [#library.c]
  double log2(double x);
  long double log2(long double x);  // [:en] see [#library.c]
                                    // [|:zh_CN] 参见 [#library.c]
  float log2f(float x);
  long double log2l(long double x);

  float logb(float x);  // [:en] see [#library.c]
                        // [|:zh_CN] 参见 [#library.c]
  double logb(double x);
  long double logb(long double x);  // [:en] see [#library.c]
                                    // [|:zh_CN] 参见 [#library.c]
  float logbf(float x);
  long double logbl(long double x);

  float modf(float value, float* iptr);  // [:en] see [#library.c]
                                         // [|:zh_CN] 参见 [#library.c]
  double modf(double value, double* iptr);
  long double modf(long double value, long double* iptr);  // [:en] see [#library.c]
                                                           // [|:zh_CN] 参见 [#library.c]
  float modff(float value, float* iptr);
  long double modfl(long double value, long double* iptr);

  float scalbn(float x, int n);  // [:en] see [#library.c]
                                 // [|:zh_CN] 参见 [#library.c]
  double scalbn(double x, int n);
  long double scalbn(long double x, int n);  // [:en] see [#library.c]
                                             // [|:zh_CN] 参见 [#library.c]
  float scalbnf(float x, int n);
  long double scalbnl(long double x, int n);

  float scalbln(float x, long int n);  // [:en] see [#library.c]
                                       // [|:zh_CN] 参见 [#library.c]
  double scalbln(double x, long int n);
  long double scalbln(long double x, long int n);  // [:en] see [#library.c]
                                                   // [|:zh_CN] 参见 [#library.c]
  float scalblnf(float x, long int n);
  long double scalblnl(long double x, long int n);

  float cbrt(float x);  // [:en] see [#library.c]
                        // [|:zh_CN] 参见 [#library.c]
  double cbrt(double x);
  long double cbrt(long double x);  // [:en] see [#library.c]
                                    // [|:zh_CN] 参见 [#library.c]
  float cbrtf(float x);
  long double cbrtl(long double x);

  // [:en] [#c.math.abs], absolute values
  // [|:zh_CN] [#c.math.abs]，绝对值
  int abs(int j);
  long int abs(long int j);
  long long int abs(long long int j);
  float abs(float j);
  double abs(double j);
  long double abs(long double j);

  float fabs(float x);  // [:en] see [#library.c]
                        // [|:zh_CN] 参见 [#library.c]
  double fabs(double x);
  long double fabs(long double x);  // [:en] see [#library.c]
                                    // [|:zh_CN] 参见 [#library.c]
  float fabsf(float x);
  long double fabsl(long double x);

  float hypot(float x, float y);  // [:en] see [#library.c]
                                  // [|:zh_CN] 参见 [#library.c]
  double hypot(double x, double y);
  long double hypot(long double x, long double y);  // [:en] see [#library.c]
                                                    // [|:zh_CN] 参见 [#library.c]
  float hypotf(float x, float y);
  long double hypotl(long double x, long double y);

  // [:en] [#c.math.hypot3], three-dimensional hypotenuse
  // [|:zh_CN] [#c.math.hypot3]，三维斜边长
  float hypot(float x, float y, float z);
  double hypot(double x, double y, double z);
  long double hypot(long double x, long double y, long double z);

  float pow(float x, float y);  // [:en] see [#library.c]
                                // [|:zh_CN] 参见 [#library.c]
  double pow(double x, double y);
  long double pow(long double x, long double y);  // [:en] see [#library.c]
                                                  // [|:zh_CN] 参见 [#library.c]
  float powf(float x, float y);
  long double powl(long double x, long double y);

  float sqrt(float x);  // [:en] see [#library.c]
                        // [|:zh_CN] 参见 [#library.c]
  double sqrt(double x);
  long double sqrt(long double x);  // [:en] see [#library.c]
                                    // [|:zh_CN] 参见 [#library.c]
  float sqrtf(float x);
  long double sqrtl(long double x);

  float erf(float x);  // [:en] see [#library.c]
                       // [|:zh_CN] 参见 [#library.c]
  double erf(double x);
  long double erf(long double x);  // [:en] see [#library.c]
                                   // [|:zh_CN] 参见 [#library.c]
  float erff(float x);
  long double erfl(long double x);

  float erfc(float x);  // [:en] see [#library.c]
                        // [|:zh_CN] 参见 [#library.c]
  double erfc(double x);
  long double erfc(long double x);  // [:en] see [#library.c]
                                    // [|:zh_CN] 参见 [#library.c]
  float erfcf(float x);
  long double erfcl(long double x);

  float lgamma(float x);  // [:en] see [#library.c]
                          // [|:zh_CN] 参见 [#library.c]
  double lgamma(double x);
  long double lgamma(long double x);  // [:en] see [#library.c]
                                      // [|:zh_CN] 参见 [#library.c]
  float lgammaf(float x);
  long double lgammal(long double x);

  float tgamma(float x);  // [:en] see [#library.c]
                          // [|:zh_CN] 参见 [#library.c]
  double tgamma(double x);
  long double tgamma(long double x);  // [:en] see [#library.c]
                                      // [|:zh_CN] 参见 [#library.c]
  float tgammaf(float x);
  long double tgammal(long double x);

  float ceil(float x);  // [:en] see [#library.c]
                        // [|:zh_CN] 参见 [#library.c]
  double ceil(double x);
  long double ceil(long double x);  // [:en] see [#library.c]
                                    // [|:zh_CN] 参见 [#library.c]
  float ceilf(float x);
  long double ceill(long double x);

  float floor(float x);  // [:en] see [#library.c]
                         // [|:zh_CN] 参见 [#library.c]
  double floor(double x);
  long double floor(long double x);  // [:en] see [#library.c]
                                     // [|:zh_CN] 参见 [#library.c]
  float floorf(float x);
  long double floorl(long double x);

  float nearbyint(float x);  // [:en] see [#library.c]
                             // [|:zh_CN] 参见 [#library.c]
  double nearbyint(double x);
  long double nearbyint(long double x);  // [:en] see [#library.c]
                                         // [|:zh_CN] 参见 [#library.c]
  float nearbyintf(float x);
  long double nearbyintl(long double x);

  float rint(float x);  // [:en] see [#library.c]
                        // [|:zh_CN] 参见 [#library.c]
  double rint(double x);
  long double rint(long double x);  // [:en] see [#library.c]
                                    // [|:zh_CN] 参见 [#library.c]
  float rintf(float x);
  long double rintl(long double x);

  long int lrint(float x);  // [:en] see [#library.c]
                            // [|:zh_CN] 参见 [#library.c]
  long int lrint(double x);
  long int lrint(long double x);  // [:en] see [#library.c]
                                  // [|:zh_CN] 参见 [#library.c]
  long int lrintf(float x);
  long int lrintl(long double x);

  long long int llrint(float x);  // [:en] see [#library.c]
                                  // [|:zh_CN] 参见 [#library.c]
  long long int llrint(double x);
  long long int llrint(long double x);  // [:en] see [#library.c]
                                        // [|:zh_CN] 参见 [#library.c]
  long long int llrintf(float x);
  long long int llrintl(long double x);

  float round(float x);  // [:en] see [#library.c]
                         // [|:zh_CN] 参见 [#library.c]
  double round(double x);
  long double round(long double x);  // [:en] see [#library.c]
                                     // [|:zh_CN] 参见 [#library.c]
  float roundf(float x);
  long double roundl(long double x);

  long int lround(float x);  // [:en] see [#library.c]
                             // [|:zh_CN] 参见 [#library.c]
  long int lround(double x);
  long int lround(long double x);  // [:en] see [#library.c]
                                   // [|:zh_CN] 参见 [#library.c]
  long int lroundf(float x);
  long int lroundl(long double x);

  long long int llround(float x);  // [:en] see [#library.c]
                                   // [|:zh_CN] 参见 [#library.c]
  long long int llround(double x);
  long long int llround(long double x);  // [:en] see [#library.c]
                                         // [|:zh_CN] 参见 [#library.c]
  long long int llroundf(float x);
  long long int llroundl(long double x);

  float trunc(float x);  // [:en] see [#library.c]
                         // [|:zh_CN] 参见 [#library.c]
  double trunc(double x);
  long double trunc(long double x);  // [:en] see [#library.c]
                                     // [|:zh_CN] 参见 [#library.c]
  float truncf(float x);
  long double truncl(long double x);

  float fmod(float x, float y);  // [:en] see [#library.c]
                                 // [|:zh_CN] 参见 [#library.c]
  double fmod(double x, double y);
  long double fmod(long double x, long double y);  // [:en] see [#library.c]
                                                   // [|:zh_CN] 参见 [#library.c]
  float fmodf(float x, float y);
  long double fmodl(long double x, long double y);

  float remainder(float x, float y);  // [:en] see [#library.c]
                                      // [|:zh_CN] 参见 [#library.c]
  double remainder(double x, double y);
  long double remainder(long double x, long double y);  // [:en] see [#library.c]
                                                        // [|:zh_CN] 参见 [#library.c]
  float remainderf(float x, float y);
  long double remainderl(long double x, long double y);

  float remquo(float x, float y, int* quo);  // [:en] see [#library.c]
                                             // [|:zh_CN] 参见 [#library.c]
  double remquo(double x, double y, int* quo);
  long double remquo(long double x, long double y, int* quo);  // [:en] see [#library.c]
                                                               // [|:zh_CN] 参见 [#library.c]
  float remquof(float x, float y, int* quo);
  long double remquol(long double x, long double y, int* quo);

  float copysign(float x, float y);  // [:en] see [#library.c]
                                     // [|:zh_CN] 参见 [#library.c]
  double copysign(double x, double y);
  long double copysign(long double x, long double y);  // [:en] see [#library.c]
                                                       // [|:zh_CN] 参见 [#library.c]
  float copysignf(float x, float y);
  long double copysignl(long double x, long double y);

  double nan(const char* tagp);
  float nanf(const char* tagp);
  long double nanl(const char* tagp);

  float nextafter(float x, float y);  // [:en] see [#library.c]
                                      // [|:zh_CN] 参见 [#library.c]
  double nextafter(double x, double y);
  long double nextafter(long double x, long double y);  // [:en] see [#library.c]
                                                        // [|:zh_CN] 参见 [#library.c]
  float nextafterf(float x, float y);
  long double nextafterl(long double x, long double y);

  float nexttoward(float x, long double y);  // [:en] see [#library.c]
                                             // [|:zh_CN] 参见 [#library.c]
  double nexttoward(double x, long double y);
  long double nexttoward(long double x, long double y);  // [:en] see [#library.c]
                                                         // [|:zh_CN] 参见 [#library.c]
  float nexttowardf(float x, long double y);
  long double nexttowardl(long double x, long double y);

  float fdim(float x, float y);  // [:en] see [#library.c]
                                 // [|:zh_CN] 参见 [#library.c]
  double fdim(double x, double y);
  long double fdim(long double x, long double y);  // [:en] see [#library.c]
                                                   // [|:zh_CN] 参见 [#library.c]
  float fdimf(float x, float y);
  long double fdiml(long double x, long double y);

  float fmax(float x, float y);  // [:en] see [#library.c]
                                 // [|:zh_CN] 参见 [#library.c]
  double fmax(double x, double y);
  long double fmax(long double x, long double y);  // [:en] see [#library.c]
                                                   // [|:zh_CN] 参见 [#library.c]
  float fmaxf(float x, float y);
  long double fmaxl(long double x, long double y);

  float fmin(float x, float y);  // [:en] see [#library.c]
                                 // [|:zh_CN] 参见 [#library.c]
  double fmin(double x, double y);
  long double fmin(long double x, long double y);  // [:en] see [#library.c]
                                                   // [|:zh_CN] 参见 [#library.c]
  float fminf(float x, float y);
  long double fminl(long double x, long double y);

  float fma(float x, float y, float z);  // [:en] see [#library.c]
                                         // [|:zh_CN] 参见 [#library.c]
  double fma(double x, double y, double z);
  long double fma(long double x, long double y, long double z);  // [:en] see [#library.c]
                                                                 // [|:zh_CN] 参见 [#library.c]
  float fmaf(float x, float y, float z);
  long double fmal(long double x, long double y, long double z);

  // [:en] [#c.math.fpclass], classification / comparison functions
  // [|:zh_CN] [#c.math.fpclass]，分类/比较函数
  int fpclassify(float x);
  int fpclassify(double x);
  int fpclassify(long double x);

  int isfinite(float x);
  int isfinite(double x);
  int isfinite(long double x);

  int isinf(float x);
  int isinf(double x);
  int isinf(long double x);

  int isnan(float x);
  int isnan(double x);
  int isnan(long double x);

  int isnormal(float x);
  int isnormal(double x);
  int isnormal(long double x);

  int signbit(float x);
  int signbit(double x);
  int signbit(long double x);

  int isgreater(float x, float y);
  int isgreater(double x, double y);
  int isgreater(long double x, long double y);

  int isgreaterequal(float x, float y);
  int isgreaterequal(double x, double y);
  int isgreaterequal(long double x, long double y);

  int isless(float x, float y);
  int isless(double x, double y);
  int isless(long double x, long double y);

  int islessequal(float x, float y);
  int islessequal(double x, double y);
  int islessequal(long double x, long double y);

  int islessgreater(float x, float y);
  int islessgreater(double x, double y);
  int islessgreater(long double x, long double y);

  int isunordered(float x, float y);
  int isunordered(double x, double y);
  int isunordered(long double x, long double y);

  // [:en] [#sf.cmath], mathematical special functions
  // [|:zh_CN] [#sf.cmath]，数学特殊函数

  // [:en] [#sf.cmath.assoc_laguerre], associated Laguerre polynomials
  // [|:zh_CN] [#sf.cmath.assoc_laguerre]，连带拉盖尔多项式
  double       assoc_laguerre(unsigned n, unsigned m, double x);
  float        assoc_laguerref(unsigned n, unsigned m, float x);
  long double  assoc_laguerrel(unsigned n, unsigned m, long double x);

  // [:en] [#sf.cmath.assoc_legendre], associated Legendre functions
  // [|:zh_CN] [#sf.cmath.assoc_legendre]，连带勒让德函数
  double       assoc_legendre(unsigned l, unsigned m, double x);
  float        assoc_legendref(unsigned l, unsigned m, float x);
  long double  assoc_legendrel(unsigned l, unsigned m, long double x);

  // [:en] [#sf.cmath.beta], beta function
  // [|:zh_CN] [#sf.cmath.beta]，贝塔函数
  double       beta(double x, double y);
  float        betaf(float x, float y);
  long double  betal(long double x, long double y);

  // [:en] [#sf.cmath.comp_ellint_1], complete elliptic integral of the first kind
  // [|:zh_CN] [#sf.cmath.comp_ellint_1]，第一类完全椭圆积分
  double       comp_ellint_1(double k);
  float        comp_ellint_1f(float k);
  long double  comp_ellint_1l(long double k);

  // [:en] [#sf.cmath.comp_ellint_2], complete elliptic integral of the second kind
  // [|:zh_CN] [#sf.cmath.comp_ellint_2]，第二类完全椭圆积分
  double       comp_ellint_2(double k);
  float        comp_ellint_2f(float k);
  long double  comp_ellint_2l(long double k);

  // [:en] [#sf.cmath.comp_ellint_3], complete elliptic integral of the third kind
  // [|:zh_CN] [#sf.cmath.comp_ellint_3]，第三类完全椭圆积分
  double       comp_ellint_3(double k, double nu);
  float        comp_ellint_3f(float k, float nu);
  long double  comp_ellint_3l(long double k, long double nu);

  // [:en] [#sf.cmath.cyl_bessel_i], regular modified cylindrical Bessel functions
  // [|:zh_CN] [#sf.cmath.cyl_bessel_i]，规则变形圆柱贝塞尔函数
  double       cyl_bessel_i(double nu, double x);
  float        cyl_bessel_if(float nu, float x);
  long double  cyl_bessel_il(long double nu, long double x);

  // [:en] [#sf.cmath.cyl_bessel_j], cylindrical Bessel functions of the first kind
  // [|:zh_CN] [#sf.cmath.cyl_bessel_j]，第一类圆柱贝塞尔函数
  double       cyl_bessel_j(double nu, double x);
  float        cyl_bessel_jf(float nu, float x);
  long double  cyl_bessel_jl(long double nu, long double x);

  // [:en] [#sf.cmath.cyl_bessel_k], irregular modified cylindrical Bessel functions
  // [|:zh_CN] [#sf.cmath.cyl_bessel_k]，不规则变形圆柱贝塞尔函数
  double       cyl_bessel_k(double nu, double x);
  float        cyl_bessel_kf(float nu, float x);
  long double  cyl_bessel_kl(long double nu, long double x);

  // [:en] [#sf.cmath.cyl_neumann], cylindrical Neumann functions;
  // [|:zh_CN] [#sf.cmath.cyl_neumann]，圆柱诺依曼函数；
  // [:en@~] cylindrical Bessel functions of the second kind
  // [|:zh_CN@~] 第二类圆柱贝塞尔函数
  double       cyl_neumann(double nu, double x);
  float        cyl_neumannf(float nu, float x);
  long double  cyl_neumannl(long double nu, long double x);

  // [:en] [#sf.cmath.ellint_1], incomplete elliptic integral of the first kind
  // [|:zh_CN] [#sf.cmath.ellint_1]，第一类不完全椭圆积分
  double       ellint_1(double k, double phi);
  float        ellint_1f(float k, float phi);
  long double  ellint_1l(long double k, long double phi);

  // [:en] [#sf.cmath.ellint_2], incomplete elliptic integral of the second kind
  // [|:zh_CN] [#sf.cmath.ellint_2]，第二类不完全椭圆积分
  double       ellint_2(double k, double phi);
  float        ellint_2f(float k, float phi);
  long double  ellint_2l(long double k, long double phi);

  // [:en] [#sf.cmath.ellint_3], incomplete elliptic integral of the third kind
  // [|:zh_CN] [#sf.cmath.ellint_3]，第三类不完全椭圆积分
  double       ellint_3(double k, double nu, double phi);
  float        ellint_3f(float k, float nu, float phi);
  long double  ellint_3l(long double k, long double nu, long double phi);

  // [:en] [#sf.cmath.expint], exponential integral
  // [|:zh_CN] [#sf.cmath.expint]，指数积分
  double       expint(double x);
  float        expintf(float x);
  long double  expintl(long double x);

  // [:en] [#sf.cmath.hermite], Hermite polynomials
  // [|:zh_CN] [#sf.cmath.hermite]，埃尔米特多项式
  double       hermite(unsigned n, double x);
  float        hermitef(unsigned n, float x);
  long double  hermitel(unsigned n, long double x);

  // [:en] [#sf.cmath.laguerre], Laguerre polynomials
  // [|:zh_CN] [#sf.cmath.laguerre]，拉盖尔多项式
  double       laguerre(unsigned n, double x);
  float        laguerref(unsigned n, float x);
  long double  laguerrel(unsigned n, long double x);

  // [:en] [#sf.cmath.legendre], Legendre polynomials
  // [|:zh_CN] [#sf.cmath.legendre]，勒让德多项式
  double       legendre(unsigned l, double x);
  float        legendref(unsigned l, float x);
  long double  legendrel(unsigned l, long double x);

  // [:en] [#sf.cmath.riemann_zeta], Riemann zeta function
  // [|:zh_CN] [#sf.cmath.riemann_zeta]，黎曼 zeta 函数
  double       riemann_zeta(double x);
  float        riemann_zetaf(float x);
  long double  riemann_zetal(long double x);

  // [:en] [#sf.cmath.sph_bessel], spherical Bessel functions of the first kind
  // [|:zh_CN] [#sf.cmath.sph_bessel]，第一类球面贝塞尔函数
  double       sph_bessel(unsigned n, double x);
  float        sph_besself(unsigned n, float x);
  long double  sph_bessell(unsigned n, long double x);

  // [:en] [#sf.cmath.sph_legendre], spherical associated Legendre functions
  // [|:zh_CN] [#sf.cmath.sph_legendre]，球面连带勒让德函数
  double       sph_legendre(unsigned l, unsigned m, double theta);
  float        sph_legendref(unsigned l, unsigned m, float theta);
  long double  sph_legendrel(unsigned l, unsigned m, long double theta);

  // [:en] [#sf.cmath.sph_neumann], spherical Neumann functions;
  // [|:zh_CN] [#sf.cmath.sph_neumann]，球面诺依曼函数；
  // [:en@~] spherical Bessel functions of the second kind
  // [:zh_CN@~] 第二类球面贝塞尔函数
  double       sph_neumann(unsigned n, double x);
  float        sph_neumannf(unsigned n, float x);
  long double  sph_neumannl(unsigned n, long double x);
}
[codeblock:end]

[para]
[:en] The contents and meaning of the header [`<cmath>] are the same as the
C standard library header [`<math.h>], with the addition of a three-dimensional
hypotenuse function ([#c.math.hypot3]) and the mathematical special functions
described in [#sf.cmath].
[:zh_CN] 头文件 [`<cmath>] 的内容和含义与 C 标准程序库头文件 [`<math.h>] 相同，
但添加了三维斜边函数（[#c.math.hypot3]）和 [#sf.cmath] 中所述的各数学特殊函数。

[enter:note]
[:en] Several functions have additional overloads in this document, but they
have the same behavior as in the C standard library ([#library.c]).
[:zh_CN] 一些函数在本文档中有额外的重载，但它们的行为与 C 标准程序库中的相同
（[#library.c]）。
[exit:note]

[para]
[:en] For each set of overloaded functions within [`<cmath>], with the exception
of [`abs], there shall be additional overloads sufficient to ensure:
[:zh_CN] 对于 [`<cmath>] 中（除 [`abs] 以外）的每一组重载函数，应当提供足够的
额外重载以确保：

[list]
[item]
[:en] If any argument of arithmetic type corresponding to a [`double] parameter
has type [`long double], then all arguments of arithmetic type
([#basic.fundamental]) corresponding to [`double] parameters are effectively
cast to [`long double].
[:zh_CN] 如果有任何具有对应于某个 [`double] 形参的算术类型实参的类型为
[`long double]，则所有对应于 [`double] 形参的算术类型实参
（[#basic.fundamental]），都应当实际上强制转换为 [`long double]。

[item]
[:en] Otherwise, if any argument of arithmetic type corresponding to a [`double]
parameter has type [`double] or an integer type, then all arguments of
arithmetic type corresponding to [`double] parameters are effectively cast to
[`double].
[:zh_CN] 如果有任何具有对应于某个 [`double] 形参的算术类型实参的类型为 [`double]
或某个整数类型，则所有对应于 [`double] 形参的算术类型实参，都应当实际上强制转换
为 [`double]。

[item]
[:en] Otherwise, all arguments of arithmetic type corresponding to [`double]
parameters have type [`float].
[:zh_CN] 否则，所有对应于 [`double] 形参的算术类型实参都具有类型 [`float]。
[list:end]

[enter:note]
[:en] [`abs] is exempted from these rules in order to stay compatible with C.
[:zh_CN] 从这些规则中豁免 [`abs] 是为了与 C 保持兼容。
[exit:note]

[para:xref]
[:] ISO C 7.12
