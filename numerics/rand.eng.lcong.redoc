[/
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% linear_congruential_engine engine:
/]

[section#rand.eng.lcong
    [:en] Class template [`linear_congruential_engine]
    [:zh_CN] 类模板 [`linear_congruential_engine]
]

[%@library linear_congruential_engine]
[%[:en] random number engine[![`linear_congruential_engine]]
  [:zh_CN] 随机数引擎[![`linear_congruential_engine]] ]

[para]
[:en] A [`linear_congruential_engine] random number engine produces unsigned
integer random numbers.
[:zh_CN] [`linear_congruential_engine] 随机数引擎产生无符号整数的随机数。

[:en] The state
[%[`linear_congruential_engine][!state]]
[%state[![`linear_congruential_engine]]]
[=state x,i] of a [`linear_congruential_engine] object [`x] is of size [$1] and
consists of a single integer.
[:zh_CN] [`linear_congruential_engine] 对象 [`x] 的状态
[%[`linear_congruential_engine][!状态]]
[%状态[![`linear_congruential_engine]]]
[=state x,i] 的大小为 [$1] 并由单个整数构成。

[:en] The transition algorithm
[%[`linear_congruential_engine][!transition algorithm]]
[%transition algorithm[![`linear_congruential_engine]]]
is a modular linear function of the form
[$\mathsf{TA}([=state x,i]) = (a \cdot [=state x,i] + c) [=mod] m];
the generation algorithm
[%[`linear_congruential_engine][!generation algorithm]]
[%generation algorithm[![`linear_congruential_engine]]]
is [$\mathsf{GA}([=state x,i]) = [=state x,i+1]].
[:zh_CN] 其转移算法
[%[`linear_congruential_engine][!转移算法]]
[%转移算法[![`linear_congruential_engine]]]
是形式为
[$\mathsf{TA}([=state x,i]) = (a \cdot [=state x,i] + c) [=mod] m] 的模线性函数；
其生成算法
[%[`linear_congruential_engine][!生成算法]]
[%生成算法[![`linear_congruential_engine]]]
为 [$\mathsf{GA}([=state x,i]) = [=state x,i+1]]。

[codeblock:synopsis]
template<class UIntType, UIntType a, UIntType c, UIntType m>
  class linear_congruential_engine {
  public:
    // [:en] types \
       [:zh_CN] 类型
    using result_type = UIntType;

    // [:en] engine characteristics \
       [:zh_CN] 引擎的特性
    static constexpr result_type multiplier = a;
    static constexpr result_type increment = c;
    static constexpr result_type modulus = m;
    static constexpr result_type min() { return c == 0u ? 1u: 0u; }
    static constexpr result_type max() { return m - 1u; }
    static constexpr result_type default_seed = 1u;

    // [:en] constructors and seeding functions \
       [:zh_CN] 构造函数和播种函数
    linear_congruential_engine() : linear_congruential_engine(default_seed) {}
    explicit linear_congruential_engine(result_type s);
    template<class Sseq> explicit linear_congruential_engine(Sseq& q);
    void seed(result_type s = default_seed);
    template<class Sseq> void seed(Sseq& q);

    // [:en] generating functions \
       [:zh_CN] 生成函数
    result_type operator()();
    void discard(unsigned long long z);
  };
[codeblock:end]

[para]
[:en] If the template parameter [`m] is 0, the modulus [$m] used throughout this
subclause [#rand.eng.lcong] [%[`linear_congruential_engine][!modulus]]
is [`numeric_limits<result_type>::max()] plus 1.
[:zh_CN] 当模板形参 [`m] 为 0 时，本子条款 [#rand.eng.lcong] 中所用到的模 [$m]
[%[`linear_congruential_engine][!模]]
为 [`numeric_limits<result_type>::max()] 加 1。

[begin:note]
[:en] [$m] need not be representable as a value of type [`result_type].
[:zh_CN] [$m] 并不需要可表示为 [`result_type] 类型的值。
[end:note]

[para]
[:en] If the template parameter [`m] is not 0, the following relations shall
hold: [`a < m] and [`c < m].
[:zh_CN] 当模板形参 [`m] 非 0 时，应当遵守以下关系：[`a < m] 且 [`c < m]。

[para]
[:en] The textual representation
[%[`linear_congruential_engine][!textual representation]]
consists of the value of [=state x,i].
[:zh_CN] 其文本表示
[%[`linear_congruential_engine][!文本表示]]
由各 [=state x,i] 的值所组成。

[%@library linear_congruential_engine[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
explicit linear_congruential_engine(result_type s);
[codeblock:end]

[begin:description]
[para:effects]
[:en] Constructs a [`linear_congruential_engine] object.
[:zh_CN] 构造一个 [`linear_congruential_engine] 对象。

[:en] If [$c] mod [$m] is 0 and [`s] mod [$m] is 0, sets the engine[=']s state
to 1, otherwise sets the engine[=']s state to [`s] mod [$m].
[:zh_CN] 当 [$c] mod [$m] 为 0 且 [`s] mod [$m] 为 0 时，将引擎的状态设置为 1，
否则将引擎的状态设置为 [`s] mod [$m]。
[end:description]

[%@library linear_congruential_engine[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
template<class Sseq> explicit linear_congruential_engine(Sseq& q);
[codeblock:end]

[begin:description]
[para:effects]
[:en] Constructs a [`linear_congruential_engine] object.
[:zh_CN] 构造一个 [`linear_congruential_engine] 对象。

[:en] With [$k = \left\lceil \frac{\log_2 m}{32} \right\rceil] and [$a] an
array (or equivalent) of length [$k + 3], invokes
[`q.generate([$a + 0], [$a + k + 3])] and then computes
[$S = \left(\sum_{j = 0}^{k - 1}a_{j + 3} \cdot 2^{32j} \right) \bmod m].
[:zh_CN] 设 [$k = \left\lceil \frac{\log_2 m}{32} \right\rceil] 且 [$a] 为长度
为 [$k + 3] 的数组（或等价物），其将调用 [`q.generate([$a + 0], [$a + k + 3])]
并随后计算
[$S = \left(\sum_{j = 0}^{k - 1}a_{j + 3} \cdot 2^{32j} \right) \bmod m]。

[:en] If [$c \bmod m] is 0 and [$S] is 0, sets the engine[=']s state to 1, else
sets the engine[=']s state to [$S].
[:zh_CN] 当 [$c \bmod m] 为 0 且 [$S] 为 0 时，将引擎的状态设置为 1，否则将引擎
的状态设置为 [$S]。
[end:description]
