[section#simd.alg
    [:en] Algorithms
    [:zh_CN] 算法
]

[codeblock:declaration]
template<class T, class Abi>
  constexpr basic_simd<T, Abi> min(const basic_simd<T, Abi>& a,
                                   const basic_simd<T, Abi>& b) noexcept;
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`T] models [`totally_ordered].
[:zh_CN] [`T] 构成 [`totally_ordered]。

[para:returns]
[:en] The result of the element-wise application of [`min(a`[[$i]`], b`[[$i]`])]
for all [$i] in the range of [=range(0,basic_simd<T, Abi>::size())].
[:zh_CN] 对于范围 [=range(0,basic_simd<T, Abi>::size())] 中的所有 [$i] 逐元素实施
[`min(a`[[$i]`], b`[[$i]`])] 的结果。
[div:end]

[codeblock:declaration]
template<class T, class Abi>
  constexpr basic_simd<T, Abi> max(const basic_simd<T, Abi>& a,
                                   const basic_simd<T, Abi>& b) noexcept;
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`T] models [`totally_ordered].
[:zh_CN] [`T] 构成 [`totally_ordered]。

[para:returns]
[:en] The result of the element-wise application of [`max(a`[[$i]`], b`[[$i]`])]
for all [$i] in the range of [=range(0,basic_simd<T, Abi>::size())].
[:zh_CN] 对于范围 [=range(0,basic_simd<T, Abi>::size())] 中的所有 [$i] 逐元素实施
[`max(a`[[$i]`], b`[[$i]`])] 的结果。
[div:end]

[codeblock:declaration]
template<class T, class Abi>
  constexpr pair<basic_simd<T, Abi>, basic_simd<T, Abi>>
  minmax(const basic_simd<T, Abi>& a, const basic_simd<T, Abi>& b) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return pair{min(a, b), max(a, b)};]
[:zh_CN] 等价于：[`return pair{min(a, b), max(a, b)};]
[div:end]

[codeblock:declaration]
template<class T, class Abi>
  constexpr basic_simd<T, Abi> clamp(
    const basic_simd<T, Abi>& v, const basic_simd<T, Abi>& lo, const basic_simd<T, Abi>& hi);
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`T] models [`totally_ordered].
[:zh_CN] [`T] 构成 [`totally_ordered]。

[para:expects]
[:en] No element in [`lo] shall be greater than the corresponding element in [`hi].
[:zh_CN] [`lo] 中不存在大于 [`hi] 中对应元素的元素。

[para:returns]
[:en] The result of the element-wise application of
[`clamp(v`[[$i]`], lo`[[$i]`], hi`[[$i]`])] for all [$i] in the range of
[=range(0,basic_simd<T, Abi>::size())].
[:zh_CN] 对于范围 [=range(0,basic_simd<T, Abi>::size())] 中的所有 [$i] 逐元素实施
[`clamp(v`[[$i]`], lo`[[$i]`], hi`[[$i]`])] 的结果。
[div:end]

[codeblock:declaration]
template<class T, class U>
  constexpr auto simd_select(bool c, const T& a, const U& b)
  -> remove_cvref_t<decltype(c ? a : b)>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return c ? a : b;]
[:zh_CN] 等价于：[`return c ? a : b;]
[div:end]

[codeblock:declaration]
template<size_t Bytes, class Abi, class T, class U>
  constexpr auto simd_select(const basic_simd_mask<Bytes, Abi>& c, const T& a, const U& b)
  noexcept -> decltype([[redoc("*>")]]simd-select-impl(c, a, b));
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return [[redoc("*>")]]simd-select-impl(c, a, b);
[codeblock:end]
[:en@~] where [*simd-select-impl] is found by argument-dependent lookup
([#basic.lookup.argdep]) contrary to [#contents].
[:zh_CN@~] 其中用实参依赖查找（[#basic.lookup.argdep]）来查找 [*simd-select-impl]，
这与 [#contents] 所述不同。
[div:end]
