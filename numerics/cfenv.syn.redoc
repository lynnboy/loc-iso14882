[section#cfenv.syn
    [:en] Header [`<cfenv>] synopsis
    [:zh_CN] 头文件 [`<cfenv>] 纲要
]

[%@hdr@def cfenv]

[%@lib fenv_t]
[%@lib fexcept_t]
[%@lib feclearexcept]
[%@lib fegetexceptflag]
[%@lib feraiseexcept]
[%@lib fesetexceptflag]
[%@lib fetestexcept]
[%@lib fegetround]
[%@lib fesetround]
[%@lib fegetenv]
[%@lib feholdexcept]
[%@lib fesetenv]
[%@lib feupdateenv]
[codeblock:synopsis]
#define FE_ALL_EXCEPT[[redoc("`:m<")]] [[redoc("[=seebelow]")]]
#define FE_DIVBYZERO[[redoc("`:m<")]] [[redoc("[=seebelow]")]]    // [=optional]
#define FE_INEXACT[[redoc("`:m<")]] [[redoc("[=seebelow]")]]      // [=optional]
#define FE_INVALID[[redoc("`:m<")]] [[redoc("[=seebelow]")]]      // [=optional]
#define FE_OVERFLOW[[redoc("`:m<")]] [[redoc("[=seebelow]")]]     // [=optional]
#define FE_UNDERFLOW[[redoc("`:m<")]] [[redoc("[=seebelow]")]]    // [=optional]

#define FE_DOWNWARD[[redoc("`:m<")]] [[redoc("[=seebelow]")]]     // [=optional]
#define FE_TONEAREST[[redoc("`:m<")]] [[redoc("[=seebelow]")]]    // [=optional]
#define FE_TOWARDZERO[[redoc("`:m<")]] [[redoc("[=seebelow]")]]   // [=optional]
#define FE_UPWARD[[redoc("`:m<")]] [[redoc("[=seebelow]")]]       // [=optional]

#define FE_DFL_ENV[[redoc("`:m<")]] [[redoc("[=seebelow]")]]

namespace std {
  // [:en] types \
  [:zh_CN] 类型
  using fenv_t    = [[redoc("[span:em [:en] object type [:zh_CN] 对象类型]")]];
  using fexcept_t = [[redoc("[span:em [:en] object type [:zh_CN] 对象类型]")]];

  // [:en] functions \
  [:zh_CN] 函数
  int feclearexcept(int except);
  int fegetexceptflag(fexcept_t* pflag, int except);
  int feraiseexcept(int except);
  int fesetexceptflag(const fexcept_t* pflag, int except);
  int fetestexcept(int except);

  int fegetround();
  int fesetround(int mode);

  int fegetenv(fenv_t* penv);
  int feholdexcept(fenv_t* penv);
  int fesetenv(const fenv_t* penv);
  int feupdateenv(const fenv_t* penv);
}
[codeblock:end]

[para]
[:en] The contents and meaning of the header [?libheader cfenv] are the same as
the C standard library header [?libheader fenv.h].
[:zh_CN] 头文件 [?libheader cfenv] 的内容和含义与 C 标准程序库头文件
[?libheader fenv.h] 相同。

[begin:note]
[:en] This document does not require an implementation to support the
[`FENV_ACCESS] pragma; it is [?impldef whether pragma [`FENV_ACCESS] is
supported] ([#cpp.pragma]) whether the pragma is supported.
[:zh_CN] 本文档并不要求实现支持 [`FENV_ACCESS] 编译指示指令；是否支持这个编译
指示是[?impldef 是否支持 [`FENV_ACCESS] 编译指示]（[#cpp.pragma]）。

[:en] As a consequence, it is [?impldef whether [`<cfenv>] functions can be
used to manage floating-point status] whether these functions can be used to
test floating-point status flags, set floating-point control modes, or run under
non-default mode settings.
[:zh_CN] 其结果为，这些函数是否可以用于测试浮点状态标记，设置浮点控制模式，或者
在非默认的浮点模式设定之下运行都是[?impldef [`<cfenv>] 的函数是否可以用于管理浮点状态]。

[:en] If the pragma is used to enable control over the floating-point
environment, this document does not specify the effect on floating-point
evaluation in constant expressions.
[:zh_CN] 如果该编译指示指令被用于启用对浮点环境的控制，本文档并不指定在常量
表达式中所进行的浮点求值的效果。
[end:note]

[para:xref@c] 7.6
