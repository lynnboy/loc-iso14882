[section#cfenv.syn
    [:en] Header [`<cfenv>] synopsis
    [:zh_CN] 头文件 [`<cfenv>] 纲要
]

[%@header cfenv]

[%@library fenv_t]
[%@library fexcept_t]
[%@library feclearexcept]
[%@library fegetexceptflag]
[%@library feraiseexcept]
[%@library fesetexceptflag]
[%@library fetestexcept]
[%@library fegetround]
[%@library fesetround]
[%@library fegetenv]
[%@library feholdexcept]
[%@library fesetenv]
[%@library feupdateenv]
[%@library FE_ALL_EXCEPT]
[%@library FE_DIVBYZERO]
[%@library FE_INEXACT]
[%@library FE_INVALID]
[%@library FE_OVERFLOW]
[%@library FE_UNDERFLOW]
[%@library FE_DOWNWARD]
[%@library FE_TONEAREST]
[%@library FE_TOWARDZERO]
[%@library FE_UPWARD]
[%@library FE_DFL_ENV]
[codeblock:synopsis [!:mark SeeBelow] [!:note] ]
#define FE_ALL_EXCEPT [=SeeBelow]
#define FE_DIVBYZERO [=SeeBelow]    // [:en] optional \
                                       [:zh_CN] 可选
#define FE_INEXACT [=SeeBelow]      // [:en] optional \
                                       [:zh_CN] 可选
#define FE_INVALID [=SeeBelow]      // [:en] optional \
                                       [:zh_CN] 可选
#define FE_OVERFLOW [=SeeBelow]     // [:en] optional \
                                       [:zh_CN] 可选
#define FE_UNDERFLOW [=SeeBelow]    // [:en] optional \
                                       [:zh_CN] 可选

#define FE_DOWNWARD [=SeeBelow]     // [:en] optional \
                                       [:zh_CN] 可选
#define FE_TONEAREST [=SeeBelow]    // [:en] optional \
                                       [:zh_CN] 可选
#define FE_TOWARDZERO [=SeeBelow]   // [:en] optional \
                                       [:zh_CN] 可选
#define FE_UPWARD [=SeeBelow]       // [:en] optional \
                                       [:zh_CN] 可选

#define FE_DFL_ENV [=SeeBelow]

namespace std {
  // [:en] types \
     [:zh_CN] 类型
  using fenv_t    = [$:note [:en] object type [:zh_CN] 对象类型];
  using fexcept_t = [$:note [:en] integer type [:zh_CN] 整数类型];

  // [:en] functions \
     [:zh_CN] 函数
  int feclearexcept(int except);
  int fegetexceptflag(fexcept_t* pflag, int except);
  int feraiseexcept(int except);
  int fesetexceptflag(const fexcept_t* pflag, int except);
  int fetestexcept(int except);

  int fegetround();
  int fesetround(int mode);

  int fegetenv(fenv_t* penv);
  int feholdexcept(fenv_t* penv);
  int fesetenv(const fenv_t* penv);
  int feupdateenv(const fenv_t* penv);
}
[codeblock:end]

[para]
[:en] The contents and meaning of the header [`<cfenv>] are the same as the
C standard library header [`<fenv.h>].
[:zh_CN] 头文件 [`<cfenv>] 的内容和含义与 C 标准程序库头文件 [`<fenv.h>] 相同。

[begin:note]
[:en] This document does not require an implementation to support the
[`FENV_ACCESS] pragma; it is [%@impldef whether pragma [`FENV_ACCESS] is
supported] implementation-defined ([#cpp.pragma]) whether the pragma is
supported.
[:zh_CN] 本文档并不要求实现支持 [`FENV_ACCESS] 编译指示指令；是否支持这个编译
指示是[%@impldef 是否支持 [`FENV_ACCESS] 编译指示]由实现定义的（[#cpp.pragma]）。

[:en] As a consequence, it is [%@impldef whether [`<cfenv>] functions can be
used to manage floating-point status] implementation-defined whether these
functions can be used to test floating-point status flags, set floating-point
control modes, or run under non-default mode settings.
[:zh_CN] 其结果为，这些函数是否可以用于测试浮点状态标记，设置浮点控制模式，或者
在非默认的浮点模式设定之下运行都是[%@impldef [`<cfenv>] 的函数是否可以用于管理
浮点状态]由实现定义的。

[:en] If the pragma is used to enable control over the floating-point
environment, this document does not specify the effect on floating-point
evaluation in constant expressions.
[:zh_CN] 如果该编译指示指令被用于启用对浮点环境的控制，本文档并不指定在常量
表达式中所进行的浮点求值的效果。
[end:note]

[para]
[:en] The floating-point environment has thread storage duration
([#basic.stc.thread]).
[:zh_CN] 浮点环境具有线程存储期（[#basic.stc.thread]）。

[:en] The initial state for a thread[=']s floating-point environment is the
state of the floating-point environment of the thread that constructs the
corresponding [`thread] object ([#thread.thread.class]) or [`jthread] object
([#thread.jthread.class]) at the time it constructed the object.
[:zh_CN] 线程的浮点环境的初始状态，是构造了其所对应的 [`thread] 对象
（[#thread.thread.class]）或 [`jthread] 对象（[#thread.jthread.class]）的线程当
构造这个对象时的浮点环境的状态。

[begin:note]
[:en] That is, the child thread gets the floating-point state of the parent
thread at the time of the child[=']s creation.
[:zh_CN] 就是说，子线程获得父线程在创建子线程时的浮点状态。
[end:note]

[para]
[:en] A separate floating-point environment shall be maintained for each thread.
[:zh_CN] 每个线程都应当维护一个独立的浮点环境。

[:en] Each function accesses the environment corresponding to its calling
thread.
[:zh_CN] 每个函数都访问对应于调用它的线程的环境。

[para:xref]
ISO C 7.6
