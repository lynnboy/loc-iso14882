[/
% ----------------------------------------------------------------------
% Class template weibull_distribution
% ----------------------------------------------------------------------
/]

[section#rand.dist.pois.weibull
    [:en] Class template [`weibull_distribution]
    [:zh_CN] 类模板 [`weibull_distribution]
]

[%@lib weibull_distribution]

[para]
[:en] A [`weibull_distribution] random number distribution produces random
numbers [$x \geq 0] distributed according to the probability density function
[:zh_CN] [`weibull_distribution] 随机数分布产生随机数 [$x \geq 0]，
其分布符合概率密度函数

[math]
p(x\,|\,a,b) = \frac{a}{b}
  \cdot \left(\frac{x}{b}\right)^{a-1}
  \cdot \, \exp\left( -\left(\frac{x}{b}\right)^a\right)
  \text{ .}
[math:end]

[%@lib weibull_distribution]
[%@lib@member result_type[!weibull_distribution]]
[codeblock:synopsis]
template<class RealType = double>
  class weibull_distribution {
  public:
    // [:en] types \
    [:zh_CN] 类型
    using result_type = RealType;
    using param_type  = [[redoc("[=unspec]")]];

    // [:en] constructors and reset functions \
    [:zh_CN] 构造函数和重置函数
    weibull_distribution() : weibull_distribution(1.0) {}
    explicit weibull_distribution(RealType a, RealType b = 1.0);
    explicit weibull_distribution(const param_type& parm);
    void reset();

    // [:en] equality operators \
    [:zh_CN] 相等性运算符
    friend bool operator==(const weibull_distribution& x, const weibull_distribution& y);

    // [:en] generating functions \
    [:zh_CN] 生成函数
    template<class URBG>
      result_type operator()(URBG& g);
    template<class URBG>
      result_type operator()(URBG& g, const param_type& parm);

    // [:en] property functions \
    [:zh_CN] 属性函数
    RealType a() const;
    RealType b() const;
    param_type param() const;
    void param(const param_type& parm);
    result_type min() const;
    result_type max() const;

    // [:en] inserters and extractors \
    [:zh_CN] 插入符和提取符
    template<class charT, class traits>
      friend basic_ostream<charT, traits>&
        operator<<(basic_ostream<charT, traits>& os, const weibull_distribution& x);
    template<class charT, class traits>
      friend basic_istream<charT, traits>&
        operator>>(basic_istream<charT, traits>& is, weibull_distribution& x);
  };
[codeblock:end]

[%@lib@ctor weibull_distribution]
[codeblock:declaration]
explicit weibull_distribution(RealType a, RealType b = 1.0);
[codeblock:end]

[div:description]
[para:expects]
[:en] [$0 < [`a]] and [$0 < [`b]].
[:zh_CN] [$0 < [`a]] 且 [$0 < [`b]]。

[para:remarks]
[:en] [`a] and [`b] correspond to the respective parameters of the distribution.
[:zh_CN] [`a] 和 [`b] 对应于分布的相应形参。
[div:end]

[%@lib@member a[!weibull_distribution]]
[codeblock:declaration]
RealType a() const;
[codeblock:end]

[div:description]
[para:returns]
[:en] The value of the [`a] parameter with which the object was constructed.
[:zh_CN] 该对象构造时的形参 [`a] 的值。
[div:end]

[%@lib@member b[!weibull_distribution]]
[codeblock:declaration]
RealType b() const;
[codeblock:end]

[div:description]
[para:returns]
[:en] The value of the [`b] parameter with which the object was constructed.
[:zh_CN] 该对象构造时的形参 [`b] 的值。
[div:end]
