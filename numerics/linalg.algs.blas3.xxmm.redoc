[section#linalg.algs.blas3.xxmm
    [:en] Symmetric, Hermitian, and triangular matrix-matrix product
    [:zh_CN] 对称、厄米共轭和三角矩阵-矩阵相乘
]

[para]
[begin:note]
[:en] These functions correspond to the BLAS functions [`xSYMM], [`xHEMM], and
[`xTRMM][#:cite@super#blas3].
[:zh_CN] 这些函数对应于 BLAS 函数 [`xGEMM]、[`xHEMM] 和 [`xTRMM][#:cite@super#blas3]。
[end:note]

[para]
[:en] The following elements apply to all functions in [#linalg.algs.blas3.xxmm]
in addition to function-specific elements.
[:zh_CN] 除了函数专有的要素外，下列要素适用于 [#linalg.algs.blas3.xxmm] 中的所有
函数。

[para:mandates]
[list]
[item]
[:en] [`[*possibly-multipliable]<decltype(A), decltype(B), decltype(C)>()]
is [`true]; and
[:zh_CN] [`[*possibly-multipliable]<decltype(A), decltype(B), decltype(C)>()]
为 [`true]；并且
[item]
[:en] [`[*possibly-addable]<decltype(E), decltype(E), decltype(C)>()]
is [`true] for those overloads that take an [`E] parameter.
[:zh_CN] 对于接受 [`E] 形参的那些重载，
[`[*possibly-addable]<decltype(E), decltype(E), decltype(C)>()] 为 [`true]。
[list:end]

[para:expects]
[list]
[item]
[:en@~] [`[*multipliable](A, B, C)] is [`true], and
[:zh_CN@~] [`[*multipliable](A, B, C)] 为 [`true]，并且
[item]
[:en@~] [`[*addable](E, E, C)] is [`true] for those overloads that take an [`E]
parameter.
[:zh_CN@~] 对于接受 [`E] 形参的那些重载，[`[*addable](E, E, C)] 为 [`true]。
[list:end]

[para:complexity]
[:en] [?bigoh [`A.extent(0)] \times [`A.extent(1)] \times [`B.extent(1)]].
[:zh_CN] [?bigoh [`A.extent(0)] \times [`A.extent(1)] \times [`B.extent(1)]]。

[%@lib symmetric_matrix_product]
[codeblock:declaration]
template<[[redoc("*:c>")]]in-matrix InMat1, class Triangle, [[redoc("*:c>")]]in-matrix InMat2, [[redoc("*:c>")]]out-matrix OutMat>
  void symmetric_matrix_product(InMat1 A, Triangle t, InMat2 B, OutMat C);
template<class ExecutionPolicy,
         [[redoc("*:c>")]]in-matrix InMat1, class Triangle, [[redoc("*:c>")]]in-matrix InMat2, [[redoc("*:c>")]]out-matrix OutMat>
  void symmetric_matrix_product(ExecutionPolicy&& exec, InMat1 A, Triangle t, InMat2 B, OutMat C);

template<[[redoc("*:c>")]]in-matrix InMat1, class Triangle, [[redoc("*:c>")]]in-matrix InMat2, [[redoc("*:c>")]]out-matrix OutMat>
  void hermitian_matrix_product(InMat1 A, Triangle t, InMat2 B, OutMat C);
template<class ExecutionPolicy,
         [[redoc("*:c>")]]in-matrix InMat1, class Triangle, [[redoc("*:c>")]]in-matrix InMat2, [[redoc("*:c>")]]out-matrix OutMat>
  void hermitian_matrix_product(ExecutionPolicy&& exec, InMat1 A, Triangle t, InMat2 B, OutMat C);

template<[[redoc("*:c>")]]in-matrix InMat1, class Triangle, class DiagonalStorage,
         [[redoc("*:c>")]]in-matrix InMat2, [[redoc("*:c>")]]out-matrix OutMat>
  void triangular_matrix_product(InMat1 A, Triangle t, DiagonalStorage d, InMat2 B, OutMat C);
template<class ExecutionPolicy, [[redoc("*:c>")]]in-matrix InMat1, class Triangle, class DiagonalStorage,
         [[redoc("*:c>")]]in-matrix InMat2, [[redoc("*:c>")]]out-matrix OutMat>
  void triangular_matrix_product(ExecutionPolicy&& exec,
                                 InMat1 A, Triangle t, DiagonalStorage d, InMat2 B, OutMat C);
[codeblock:end]

[div:description]
[para]
[:en] These functions perform a matrix-matrix multiply, taking into account the
[`Triangle] and [`DiagonalStorage] (if applicable) parameters that apply to the
symmetric, Hermitian, or triangular (respectively) matrix [`A] ([#linalg.general]).
[:zh_CN] 这些函数实施矩阵-矩阵相乘，其中（分别）考虑在对称、厄米共轭或三角矩阵
[`A] 上应用的 [`Triangle] 和 [`DiagonalStorage] 形参（[#linalg.general]）。

[para:mandates]
[list]
[item]
[:en] If [`InMat1] has [`layout_blas_packed] layout, then the layout[=']s
[`Triangle] template argument has the same type as the function[=']s [`Triangle]
template argument; and
[:zh_CN] 如果 [`InMat1] 具有 [`layout_blas_packed] 布局，则该布局的 [`Triangle]
模板实参与函数的 [`Triangle] 模板实参为相同类型；并且
[item]
[:en] [`[*compatible-static-extents]<InMat1, InMat1>(0, 1)] is [`true].
[:zh_CN] [`[*compatible-static-extents]<InMat1, InMat1>(0, 1)] 为 [`true]。
[list:end]

[para:expects]
[:en] [`A.extent(0) == A.extent(1)] is [`true].
[:zh_CN] [`A.extent(0) == A.extent(1)] 为 [`true]。

[para:effects]
[:en] Computes [$C = A B].
[:zh_CN] 计算 [$C = A B]。
[div:end]

[%@lib symmetric_matrix_product]
[codeblock:declaration]
  template<[[redoc("*:c>")]]in-matrix InMat1, [[redoc("*:c>")]]in-matrix InMat2, class Triangle, [[redoc("*:c>")]]out-matrix OutMat>
    void symmetric_matrix_product(InMat1 A, InMat2 B, Triangle t, OutMat C);
  template<class ExecutionPolicy,
           [[redoc("*:c>")]]in-matrix InMat1, [[redoc("*:c>")]]in-matrix InMat2, class Triangle, [[redoc("*:c>")]]out-matrix OutMat>
    void symmetric_matrix_product(ExecutionPolicy&& exec,
                                  InMat1 A, InMat2 B, Triangle t, OutMat C);

  template<[[redoc("*:c>")]]in-matrix InMat1, [[redoc("*:c>")]]in-matrix InMat2, class Triangle, [[redoc("*:c>")]]out-matrix OutMat>
    void hermitian_matrix_product(InMat1 A, InMat2 B, Triangle t, OutMat C);
  template<class ExecutionPolicy,
           [[redoc("*:c>")]]in-matrix InMat1, [[redoc("*:c>")]]in-matrix InMat2, class Triangle, [[redoc("*:c>")]]out-matrix OutMat>
    void hermitian_matrix_product(ExecutionPolicy&& exec,
                                  InMat1 A, InMat2 B, Triangle t, OutMat C);

  template<[[redoc("*:c>")]]in-matrix InMat1, [[redoc("*:c>")]]in-matrix InMat2, class Triangle, class DiagonalStorage,
           [[redoc("*:c>")]]out-matrix OutMat>
    void triangular_matrix_product(InMat1 A, InMat2 B, Triangle t, DiagonalStorage d, OutMat C);
  template<class ExecutionPolicy,
           [[redoc("*:c>")]]in-matrix InMat1, [[redoc("*:c>")]]in-matrix InMat2, class Triangle, class DiagonalStorage,
           [[redoc("*:c>")]]out-matrix OutMat>
    void triangular_matrix_product(ExecutionPolicy&& exec,
                                   InMat1 A, InMat2 B, Triangle t, DiagonalStorage d, OutMat C);
[codeblock:end]

[div:description]
[para]
[:en] These functions perform a matrix-matrix multiply, taking into account the
[`Triangle] and [`DiagonalStorage] (if applicable) parameters that apply to the
symmetric, Hermitian, or triangular (respectively) matrix [`B] ([#linalg.general]).
[:zh_CN] 这些函数实施矩阵-矩阵相乘，其中（分别）考虑在对称、厄米共轭或三角矩阵
[`B] 上应用的 [`Triangle] 和 [`DiagonalStorage] 形参（[#linalg.general]）。

[para:mandates]
[list]
[item]
[:en] If [`InMat2] has [`layout_blas_packed] layout, then the layout[=']s
[`Triangle] template argument has the same type as the function[=']s [`Triangle]
template argument; and
[:zh_CN] 如果 [`InMat2] 具有 [`layout_blas_packed] 布局，则该布局的 [`Triangle]
模板实参与函数的 [`Triangle] 模板实参为相同类型；并且
[item]
[:en] [`[*compatible-static-extents]<InMat2, InMat2>(0, 1)] is [`true].
[:zh_CN] [`[*compatible-static-extents]<InMat2, InMat2>(0, 1)] 为 [`true]。
[list:end]

[para:expects]
[:en] [`B.extent(0) == B.extent(1)] is [`true].
[:zh_CN] [`B.extent(0) == B.extent(1)] 为 [`true]。

[para:effects]
[:en] Computes [$C = A B].
[:zh_CN] 计算 [$C = A B]。
[div:end]

[%@lib symmetric_matrix_product]
[codeblock:declaration]
template<[[redoc("*:c>")]]in-matrix InMat1, class Triangle, [[redoc("*:c>")]]in-matrix InMat2, [[redoc("*:c>")]]in-matrix InMat3,
         [[redoc("*:c>")]]out-matrix OutMat>
  void symmetric_matrix_product(InMat1 A, Triangle t, InMat2 B, InMat3 E, OutMat C);
template<class ExecutionPolicy,
         [[redoc("*:c>")]]in-matrix InMat1, class Triangle, [[redoc("*:c>")]]in-matrix InMat2, [[redoc("*:c>")]]in-matrix InMat3,
         [[redoc("*:c>")]]out-matrix OutMat>
  void symmetric_matrix_product(ExecutionPolicy&& exec,
                                InMat1 A, Triangle t, InMat2 B, InMat3 E, OutMat C);

template<[[redoc("*:c>")]]in-matrix InMat1, class Triangle, [[redoc("*:c>")]]in-matrix InMat2, [[redoc("*:c>")]]in-matrix InMat3,
         [[redoc("*:c>")]]out-matrix OutMat>
  void hermitian_matrix_product(InMat1 A, Triangle t, InMat2 B, InMat3 E, OutMat C);
template<class ExecutionPolicy,
         [[redoc("*:c>")]]in-matrix InMat1, class Triangle, [[redoc("*:c>")]]in-matrix InMat2, [[redoc("*:c>")]]in-matrix InMat3,
         [[redoc("*:c>")]]out-matrix OutMat>
  void hermitian_matrix_product(ExecutionPolicy&& exec,
                                InMat1 A, Triangle t, InMat2 B, InMat3 E, OutMat C);

template<[[redoc("*:c>")]]in-matrix InMat1, class Triangle, class DiagonalStorage,
         [[redoc("*:c>")]]in-matrix InMat2, [[redoc("*:c>")]]in-matrix InMat3, [[redoc("*:c>")]]out-matrix OutMat>
  void triangular_matrix_product(InMat1 A, Triangle t, DiagonalStorage d, InMat2 B, InMat3 E,
                                 OutMat C);
template<class ExecutionPolicy,
         [[redoc("*:c>")]]in-matrix InMat1, class Triangle, class DiagonalStorage,
         [[redoc("*:c>")]]in-matrix InMat2, [[redoc("*:c>")]]in-matrix InMat3, [[redoc("*:c>")]]out-matrix OutMat>
  void triangular_matrix_product(ExecutionPolicy&& exec,
                                 InMat1 A, Triangle t, DiagonalStorage d, InMat2 B, InMat3 E,
                                 OutMat C);
[codeblock:end]

[div:description]
[para]
[:en] These functions perform a potentially overwriting matrix-matrix
multiply-add, taking into account the [`Triangle] and [`DiagonalStorage]
(if applicable) parameters that apply to the symmetric, Hermitian, or triangular
(respectively) matrix [`A] ([#linalg.general]).
[:zh_CN] 这些函数实施潜在覆写的矩阵-矩阵乘加运算，其中（分别）考虑在对称、
厄米共轭或三角矩阵 [`A] 上应用的 [`Triangle] 和 [`DiagonalStorage] 形参
（[#linalg.general]）。

[para:mandates]
[list]
[item]
[:en] If [`InMat1] has [`layout_blas_packed] layout, then the layout[=']s
[`Triangle] template argument has the same type as the function[=']s [`Triangle]
template argument; and
[:zh_CN] 如果 [`InMat1] 具有 [`layout_blas_packed] 布局，则该布局的 [`Triangle]
模板实参与函数的 [`Triangle] 模板实参为相同类型；并且
[item]
[:en] [`[*compatible-static-extents]<InMat1, InMat1>(0, 1)] is [`true].
[:zh_CN] [`[*compatible-static-extents]<InMat1, InMat1>(0, 1)] 为 [`true]。
[list:end]

[para:expects]
[:en] [`A.extent(0) == A.extent(1)] is [`true].
[:zh_CN] [`A.extent(0) == A.extent(1)] 为 [`true]。

[para:effects]
[:en] Computes [$C = E + A B].
[:zh_CN] 计算 [$C = E + A B]。

[para:remarks]
[:en] [`C] may alias [`E].
[:zh_CN] [`C] 可以为 [`E] 的别名。
[div:end]

[%@lib symmetric_matrix_product]
[codeblock:declaration]
template<[[redoc("*:c>")]]in-matrix InMat1, [[redoc("*:c>")]]in-matrix InMat2, class Triangle, [[redoc("*:c>")]]in-matrix InMat3,
         [[redoc("*:c>")]]out-matrix OutMat>
  void symmetric_matrix_product(InMat1 A, InMat2 B, Triangle t, InMat3 E, OutMat C);
template<class ExecutionPolicy,
         [[redoc("*:c>")]]in-matrix InMat1, [[redoc("*:c>")]]in-matrix InMat2, class Triangle, [[redoc("*:c>")]]in-matrix InMat3,
         [[redoc("*:c>")]]out-matrix OutMat>
  void symmetric_matrix_product(ExecutionPolicy&& exec,
                                InMat1 A, InMat2 B, Triangle t, InMat3 E, OutMat C);

template<[[redoc("*:c>")]]in-matrix InMat1, [[redoc("*:c>")]]in-matrix InMat2, class Triangle, [[redoc("*:c>")]]in-matrix InMat3,
         [[redoc("*:c>")]]out-matrix OutMat>
  void hermitian_matrix_product(InMat1 A, InMat2 B, Triangle t, InMat3 E, OutMat C);
template<class ExecutionPolicy,
         [[redoc("*:c>")]]in-matrix InMat1, [[redoc("*:c>")]]in-matrix InMat2, class Triangle, [[redoc("*:c>")]]in-matrix InMat3,
         [[redoc("*:c>")]]out-matrix OutMat>
  void hermitian_matrix_product(ExecutionPolicy&& exec,
                                InMat1 A, InMat2 B, Triangle t, InMat3 E, OutMat C);

template<[[redoc("*:c>")]]in-matrix InMat1, [[redoc("*:c>")]]in-matrix InMat2, class Triangle, class DiagonalStorage,
         [[redoc("*:c>")]]in-matrix InMat3, [[redoc("*:c>")]]out-matrix OutMat>
  void triangular_matrix_product(InMat1 A, InMat2 B, Triangle t, DiagonalStorage d, InMat3 E,
                                 OutMat C);
template<class ExecutionPolicy,
         [[redoc("*:c>")]]in-matrix InMat1, [[redoc("*:c>")]]in-matrix InMat2, class Triangle, class DiagonalStorage,
         [[redoc("*:c>")]]in-matrix InMat3, [[redoc("*:c>")]]out-matrix OutMat>
  void triangular_matrix_product(ExecutionPolicy&& exec,
                                 InMat1 A, InMat2 B, Triangle t, DiagonalStorage d, InMat3 E,
                                 OutMat C);
[codeblock:end]

[div:description]
[para]
[:en] These functions perform a potentially overwriting matrix-matrix
multiply-add, taking into account the [`Triangle] and [`DiagonalStorage]
(if applicable) parameters that apply to the symmetric, Hermitian, or triangular
(respectively) matrix [`B] ([#linalg.general]).
[:zh_CN] 这些函数实施潜在覆写的矩阵-矩阵乘加运算，其中（分别）考虑在对称、
厄米共轭或三角矩阵 [`B] 上应用的 [`Triangle] 和 [`DiagonalStorage] 形参
（[#linalg.general]）。

[para:mandates]
[list]
[item]
[:en] If [`InMat2] has [`layout_blas_packed] layout, then the layout[=']s
[`Triangle] template argument has the same type as the function[=']s [`Triangle]
template argument; and
[:zh_CN] 如果 [`InMat2] 具有 [`layout_blas_packed] 布局，则该布局的 [`Triangle]
模板实参与函数的 [`Triangle] 模板实参为相同类型；并且
[item]
[:en] [`[*compatible-static-extents]<InMat2, InMat2>(0, 1)] is [`true].
[:zh_CN] [`[*compatible-static-extents]<InMat2, InMat2>(0, 1)] 为 [`true]。
[list:end]

[para:expects]
[:en] [`B.extent(0) == B.extent(1)] is [`true].
[:zh_CN] [`B.extent(0) == B.extent(1)] 为 [`true]。

[para:effects]
[:en] Computes [$C = E + A B].
[:zh_CN] 计算 [$C = E + A B]。

[para:remarks]
[:en] [`C] may alias [`E].
[:zh_CN] [`C] 可以为 [`E] 的别名。
[div:end]
