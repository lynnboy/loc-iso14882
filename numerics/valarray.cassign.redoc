[section#valarray.cassign
    [:en] Computed assignment
    [:zh_CN] 复合赋值
]

[%@lib@member operator*=[!valarray]]
[%@lib@member operator/=[!valarray]]
[%@lib@member operator%=[!valarray]]
[%@lib@member operator+=[!valarray]]
[%@lib@member operator-=[!valarray]]
[%@lib@member operator^=[!valarray]]
[%@lib@member operator&=[!valarray]]
[%@lib@member operator|=[!valarray]]
[%@lib@member operator<<=[!valarray]]
[%@lib@member operator>>=[!valarray]]
[codeblock:declaration]
valarray& operator*= (const valarray& v);
valarray& operator/= (const valarray& v);
valarray& operator%= (const valarray& v);
valarray& operator+= (const valarray& v);
valarray& operator-= (const valarray& v);
valarray& operator^= (const valarray& v);
valarray& operator&= (const valarray& v);
valarray& operator|= (const valarray& v);
valarray& operator<<=(const valarray& v);
valarray& operator>>=(const valarray& v);
[codeblock:end]

[div:description]
[para:mandates]
[:en] The indicated operator can be applied to two operands of type [`T].
[:zh_CN] 可以对 [`T] 类型的两个操作数实施指定的运算符。

[para:expects]
[:en] [`size() == v.size()] is [`true].
[:zh_CN] [`size() == v.size()] 为 [`true]。

[:en] The value of an element in the left-hand side of a valarray compound assignment
operator does not depend on the value of another element in that left hand side.
[:zh_CN] [`valarray] 复合赋值运算符的左侧中的元素的值，不依赖于左侧的其他元素的值。

[para:effects]
[:en] Each of these operators performs the indicated operation on each of the
elements of [`*this] and the corresponding element of [`v].
[:zh_CN] 这些运算符的每一个，对 [`*this] 的每个元素和 [`v] 的对应元素实施所指定的运算。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。

[para:remarks]
[:en] The appearance of an array on the left-hand side of a computed assignment
does not invalidate references or pointers.
[:zh_CN] 一个数组出现在复合赋值的左侧，并不会造成引用或指针失效。
[div:end]

[%@lib@member operator*=[!valarray]]
[%@lib@member operator/=[!valarray]]
[%@lib@member operator%=[!valarray]]
[%@lib@member operator+=[!valarray]]
[%@lib@member operator-=[!valarray]]
[%@lib@member operator^=[!valarray]]
[%@lib@member operator&=[!valarray]]
[%@lib@member operator|=[!valarray]]
[%@lib@member operator<<=[!valarray]]
[%@lib@member operator>>=[!valarray]]
[codeblock:declaration]
valarray& operator*= (const T& v);
valarray& operator/= (const T& v);
valarray& operator%= (const T& v);
valarray& operator+= (const T& v);
valarray& operator-= (const T& v);
valarray& operator^= (const T& v);
valarray& operator&= (const T& v);
valarray& operator|= (const T& v);
valarray& operator<<=(const T& v);
valarray& operator>>=(const T& v);
[codeblock:end]

[div:description]
[para:mandates]
[:en] The indicated operator can be applied to two operands of type [`T].
[:zh_CN] 可以对 [`T] 类型的两个操作数实施指定的运算符。

[para:effects]
[:en] Each of these operators applies the indicated operation to each element of
[`*this] and [`v].
[:zh_CN] 这些运算符的每一个，对 [`*this] 的每个元素和 [`v] 实施所指定的运算。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。

[para:remarks]
[:en] The appearance of an array on the left-hand side of a computed assignment
does not invalidate references or pointers to the elements of the array.
[:zh_CN] 一个数组出现在复合赋值的左侧，并不会造成指代该数组的元素的引用或指针失效。
[div:end]
