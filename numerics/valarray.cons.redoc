[section#valarray.cons
    [:en] Constructors
    [:zh_CN] 构造函数
]

[%@library valarray[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
valarray();
[codeblock:end]

[enter:description]
[para:effects]
[:en] Constructs a [`valarray] that has zero length.[#:note#fn:$1]
[:zh_CN] 构造一个长度为零的 [`valarray]。[#:note#fn:$1]

[note:foot#fn:$1]
[:en] This default constructor is essential, since arrays of [`valarray] may be
useful.
[:zh_CN] 这个默认构造函数是基础的，因为可能使用到 [`valarray] 的数组。

[:en] After initialization, the length of an empty array can be increased with
the [`resize] member function.
[:zh_CN] 初始化之后，可以使用成员函数 [`resize] 来增加空数组的长度。
[note:end]
[exit:description]

[%@library valarray[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
explicit valarray(size_t n);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Constructs a [`valarray] that has length [`n].
[:zh_CN] 构造一个长度为 [`n] 的 [`valarray]。

[:en] Each element of the array is value-initialized ([#dcl.init]).
[:zh_CN] 数组的各个元素均进行值初始化（[#dcl.init]）。
[exit:description]

[%@library valarray[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
valarray(const T& v, size_t n);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Constructs a [`valarray] that has length [`n].
[:zh_CN] 构造一个长度为 [`n] 的 [`valarray]。

[:en] Each element of the array is initialized with [`v].
[:zh_CN] 数组的各个元素均以 [`v] 进行初始化。
[exit:description]

[%@library valarray[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
valarray(const T* p, size_t n);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`p] points to an array ([#dcl.array]) of at least [`n] elements.
[:zh_CN] [`p] 指向至少有 [`n] 个元素的数组（[#dcl.array]）。

[para:effects]
[:en] Constructs a [`valarray] that has length [`n].
[:zh_CN] 构造一个长度为 [`n] 的 [`valarray]。

[:en] The values of the elements of the array are initialized with the first
[`n] values pointed to by the first argument.[#:note#fn:$2]
[:zh_CN] 数组的各个元素的值均以由其第一个实参所指向的前 [`n] 个值进行初始化。
[#:note#fn:$2]

[note:foot#fn:$2]
[:en] This constructor is the preferred method for converting a C array to a
[`valarray] object.
[:zh_CN] 这个构造函数是将 C 数组转换为 [`valarray] 对象的推荐方法。
[note:end]
[exit:description]

[%@library valarray[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
valarray(const valarray& v);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Constructs a [`valarray] that has the same length as [`v].
[:zh_CN] 构造一个长度与 [`v] 相同的 [`valarray]。

[:en] The elements are initialized with the values of the corresponding elements
of [`v].[#:note#fn:$3]
[:zh_CN] 数组的各个元素均以 [`v] 的对应元素的值进行初始化。[#:note#fn:$3]

[note:foot#fn:$3]
[:en] This copy constructor creates a distinct array rather than an alias.
[:zero] 这个复制构造函数创建独立的数组而不会产生别名化。

[:en] Implementations in which arrays share storage are permitted, but they
would implement a copy-on-reference mechanism to ensure that arrays are
conceptually distinct.
[:zh_CN] 允许实现共享数组存储，但可以实现一种“访问时复制”的机制，以保证数组在
概念上是各自独立的。
[note:end]
[exit:description]

[%@library valarray[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
valarray(valarray&& v) noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Constructs a [`valarray] that has the same length as [`v].
[:zh_CN] 构造一个长度与 [`v] 相同的 [`valarray]。

[:en] The elements are initialized with the values of the corresponding elements
of [`v].
[:zh_CN] 数组的各个元素均以 [`v] 的对应元素的值进行初始化。

[para:complexity]
[:en] Constant.
[:zh_CN] 常量。
[exit:description]

[%@library valarray[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
valarray(initializer_list<T> il);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to [`valarray(il.begin(), il.size())].
[:zh_CN] 等价于 [`valarray(il.begin(), il.size())]。
[exit:description]

[%@library valarray[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
valarray(const slice_array<T>&);
valarray(const gslice_array<T>&);
valarray(const mask_array<T>&);
valarray(const indirect_array<T>&);
[codeblock:end]

[enter:description]
[para]
[:en] These conversion constructors convert one of the four reference templates
to a [`valarray].
[:zh_CN] 这些转换构造函数各自将四种引用模板之一转换为一个 [`valarray]。
[exit:description]

[%@library valarray[![:en]destructor[:zh_CN]析构函数]]
[codeblock:declaration]
~valarray();
[codeblock:end]

[enter:description]
[para:effects]
[:en] The destructor is applied to every element of [`*this]; an implementation
may return all allocated memory.
[:zh_CN] 对 [`*this] 的每个元素调用析构函数；实现可能会回收所有已分配的内存。
[exit:description]
