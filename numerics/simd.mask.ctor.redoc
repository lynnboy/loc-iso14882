[section#simd.mask.ctor
    [:en] [`basic_simd_mask] constructors
    [:zh_CN] [`basic_simd_mask] 构造函数
]

[codeblock:declaration]
constexpr explicit basic_simd_mask(value_type x) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes each element with [`x].
[:zh_CN] 以 [`x] 初始化各个元素。
[div:end]

[codeblock:declaration]
template<size_t UBytes, class UAbi>
  constexpr explicit basic_simd_mask(const basic_simd_mask<UBytes, UAbi>& x) noexcept;
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`basic_simd_mask<UBytes, UAbi> == size()] is [`true].
[:zh_CN] [`basic_simd_mask<UBytes, UAbi> == size()] 为 [`true]。

[para:effects]
[:en] Initializes the [$i^\text{th}] element with [`x`[[$i]`]] for all [$i]
in the range of [=range(0,size())].
[:zh_CN] 对于范围 [=range(0,size())] 中的每个 [$i]，以 [`x[[$i]`]] 初始化第 [$i] 个元素。
[div:end]

[codeblock:declaration]
template<class G> constexpr explicit basic_simd_mask(G&& gen);
[codeblock:end]

[div:description]
[para:constraints]
[:en] The expression [`gen(integral_constant<[*simd-size-type], i>())] is
well-formed and its type is [`bool] for all [$i] in the range of [=range(0,size())].
[:zh_CN] 对于范围 [=range(0,size())] 中的每个 [$i]，表达式
[`gen(integral_constant<[*simd-size-type], i>())] 良构且类型为 [`bool]。

[para:effects]
[:en] Initializes the [$i^\text{th}] element with
[`gen(integral_constant<[*simd-size-type], i>())]
for all [$i] in the range of [=range(0,size())].
[:zh_CN] 对于范围 [=range(0,size())] 中的所有 [$i]，以
[`gen(integral_constant<[*simd-size-type], i>())] 初始化第 [$i] 个元素。

[para:remarks]
[:en] [`gen] is invoked exactly once for each [$i], in increasing order of [$i].
[:zh_CN] 按 [$i] 的增长顺序，对于每个 [$i] 都恰好调用一次 [`gen]。
[div:end]
