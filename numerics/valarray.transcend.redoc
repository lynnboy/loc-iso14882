[section#valarray.transcend
    [:en] Transcendentals
    [:zh_CN] 超越函数
]

[%@lib@member abs[!valarray]]
[%@lib@member acos[!valarray]]
[%@lib@member asin[!valarray]]
[%@lib@member atan[!valarray]]
[%@lib@member atan2[!valarray]]
[%@lib@member cos[!valarray]]
[%@lib@member cosh[!valarray]]
[%@lib@member exp[!valarray]]
[%@lib@member log[!valarray]]
[%@lib@member log10[!valarray]]
[%@lib@member pow[!valarray]]
[%@lib@member sin[!valarray]]
[%@lib@member sinh[!valarray]]
[%@lib@member sqrt[!valarray]]
[%@lib@member tan[!valarray]]
[%@lib@member tanh[!valarray]]
[codeblock:declaration]
template<class T> valarray<T> abs  (const valarray<T>&);
template<class T> valarray<T> acos (const valarray<T>&);
template<class T> valarray<T> asin (const valarray<T>&);
template<class T> valarray<T> atan (const valarray<T>&);
template<class T> valarray<T> atan2(const valarray<T>&, const valarray<T>&);
template<class T> valarray<T> atan2(const valarray<T>&, const typename valarray<T>::value_type&);
template<class T> valarray<T> atan2(const typename valarray<T>::value_type&, const valarray<T>&);
template<class T> valarray<T> cos  (const valarray<T>&);
template<class T> valarray<T> cosh (const valarray<T>&);
template<class T> valarray<T> exp  (const valarray<T>&);
template<class T> valarray<T> log  (const valarray<T>&);
template<class T> valarray<T> log10(const valarray<T>&);
template<class T> valarray<T> pow  (const valarray<T>&, const valarray<T>&);
template<class T> valarray<T> pow  (const valarray<T>&, const typename valarray<T>::value_type&);
template<class T> valarray<T> pow  (const typename valarray<T>::value_type&, const valarray<T>&);
template<class T> valarray<T> sin  (const valarray<T>&);
template<class T> valarray<T> sinh (const valarray<T>&);
template<class T> valarray<T> sqrt (const valarray<T>&);
template<class T> valarray<T> tan  (const valarray<T>&);
template<class T> valarray<T> tanh (const valarray<T>&);
[codeblock:end]

[div:description]
[para:mandates]
[:en] A unique function with the indicated name can be applied (unqualified) to
an operand of type [`T].
[:zh_CN] 存在具有指定名字的可以（无限定地）对 [`T] 类型的操作数实施的唯一函数。

[:en] This function returns a value of type [`T] or which can be unambiguously
implicitly converted to type [`T].
[:zh_CN] 该函数返回类型 [`T] 或者可以无歧义地隐式转换为类型 [`T] 的值。
[div:end]
