[section#valarray.transcend
    [:en] [`valarray] transcendentals
]

[%@library abs[!valarray]]
[%@library acos[!valarray]]
[%@library asin[!valarray]]
[%@library atan[!valarray]]
[%@library atan2[!valarray]]
[%@library cos[!valarray]]
[%@library cosh[!valarray]]
[%@library exp[!valarray]]
[%@library log[!valarray]]
[%@library log10[!valarray]]
[%@library pow[!valarray]]
[%@library sin[!valarray]]
[%@library sinh[!valarray]]
[%@library sqrt[!valarray]]
[%@library tan[!valarray]]
[%@library tanh[!valarray]]
[codeblock:declaration]
template<class T> valarray<T> abs  (const valarray<T>&);
template<class T> valarray<T> acos (const valarray<T>&);
template<class T> valarray<T> asin (const valarray<T>&);
template<class T> valarray<T> atan (const valarray<T>&);
template<class T> valarray<T> atan2(const valarray<T>&, const valarray<T>&);
template<class T> valarray<T> atan2(const valarray<T>&, const typename valarray<T>::value_type&);
template<class T> valarray<T> atan2(const typename valarray<T>::value_type&, const valarray<T>&);
template<class T> valarray<T> cos  (const valarray<T>&);
template<class T> valarray<T> cosh (const valarray<T>&);
template<class T> valarray<T> exp  (const valarray<T>&);
template<class T> valarray<T> log  (const valarray<T>&);
template<class T> valarray<T> log10(const valarray<T>&);
template<class T> valarray<T> pow  (const valarray<T>&, const valarray<T>&);
template<class T> valarray<T> pow  (const valarray<T>&, const typename valarray<T>::value_type&);
template<class T> valarray<T> pow  (const typename valarray<T>::value_type&, const valarray<T>&);
template<class T> valarray<T> sin  (const valarray<T>&);
template<class T> valarray<T> sinh (const valarray<T>&);
template<class T> valarray<T> sqrt (const valarray<T>&);
template<class T> valarray<T> tan  (const valarray<T>&);
template<class T> valarray<T> tanh (const valarray<T>&);
[codeblock:end]

[enter:description]
[para]
[:en] Each of these functions may only be instantiated for a type [`T] to which
a unique function with the indicated name can be applied (unqualified).
[:zh_CN] 这些函数的每一个，仅会对这样的类型 [`T] 予以实例化：存在可以（无限定地）
对其实施的具有指定名字的唯一函数。

[:en] This function shall return a value which is of type [`T] or which can be
unambiguously implicitly converted to type [`T].
[:zh_CN] 该函数所返回的值应当具有类型 [`T] 或者可以无歧义地隐式转换为类型 [`T]。
[exit:description]
