[/
% ----------------------------------------------------------------------
% Class template discrete_distribution
% ----------------------------------------------------------------------
/]

[section#rand.dist.samp.discrete
    [:en] Class template [`discrete_distribution]
    [:zh_CN] 类模板 [`discrete_distribution]
]

[%@library discrete_distribution]
[%[:en]random number distribution [![`discrete_distribution]]
  [:zh_CN]随机数分布 [![`discrete_distribution]]]

[para]
[:en] A [`discrete_distribution] random number distribution produces random
integers [$i], [$0 \leq i < n], distributed according to the discrete
probability function
[%discrete probability function[![`discrete_distribution]]]
[%[`discrete_distribution][!discrete probability function]]
[:zh_CN] [`discrete_distribution] 随机数分布产生随机整数 [$i]，[$0 \leq i < n]，
其分布符合离散概率函数
[%离散概率函数[![`discrete_distribution]]]
[%[`discrete_distribution][!离散概率函数]]

[math]
P(i \,|\, p_0, \dotsc, p_{n-1}) = p_i \text{ .}
[math:end]

[para]
[:en] Unless specified otherwise, the distribution parameters are calculated as:
[$p_k = w_k / S] for [$k = 0, \dotsc, n - 1], in which the values [$w_k],
commonly known as the [+weights]
[%[`discrete_distribution][!weights]]
[%weights[![`discrete_distribution]]]
, shall be non-negative, non-NaN, and non-infinity.
[:zh_CN] 除非特别说明，分布的形参的计算都为：
[$p_k = w_k / S] 对于 [$k = 0, \dotsc, n - 1]，其中的各个 [$w_k] 值，通常被
称为其[+权重]
[%[`discrete_distribution][!权重]]
[%权重[![`discrete_distribution]]]
，应当非负、非 NaN 且非无穷。

[:en] Moreover, the following relation shall hold:
[$0 < S = w_0 + \dotsb + w_{n - 1}].
[:zh_CN] 此外，还应当满足如下关系：
[$0 < S = w_0 + \dotsb + w_{n - 1}]。

[%@library discrete_distribution]
[codeblock:synopsis [special unspecified] ]
template<class IntType = int>
  class discrete_distribution {
  public:
    // [:en] types
    // [|:zh_CN] 类型
    using result_type = IntType;
    using param_type  = [=Unspec];

    // [:en] constructors and reset functions
    // [|:zh_CN] 构造函数和重置函数
    discrete_distribution();
    template<class InputIterator>
      discrete_distribution(InputIterator firstW, InputIterator lastW);
    discrete_distribution(initializer_list<double> wl);
    template<class UnaryOperation>
      discrete_distribution(size_t nw, double xmin, double xmax, UnaryOperation fw);
    explicit discrete_distribution(const param_type& parm);
    void reset();

    // [:en] generating functions
    // [|:zh_CN] 生成函数
    template<class URBG>
      result_type operator()(URBG& g);
    template<class URBG>
      result_type operator()(URBG& g, const param_type& parm);

    // [:en] property functions
    // [|:zh_CN] 属性函数
    vector<double> probabilities() const;
    param_type param() const;
    void param(const param_type& parm);
    result_type min() const;
    result_type max() const;
  };
[codeblock:end]

[%@library discrete_distribution[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
discrete_distribution();
[codeblock:end]

[enter:description]
[para:effects]
[:en] Constructs a [`discrete_distribution] object with [$n = 1] and
[$p_0 = 1].
[:zh_CN] 构造一个 [`discrete_distribution] 对象，其 [$n = 1] 且 [$p_0 = 1]。

[enter:note]
[:en] Such an object will always deliver the value 0.
[:zh_CN] 这样的对象将总是递交 0 值。
[exit:note]
[exit:description]

[%@library discrete_distribution[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
template<class InputIterator>
  discrete_distribution(InputIterator firstW, InputIterator lastW);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`InputIterator] shall satisfy the requirements of an input iterator
([#input.iterators]).
[:zh_CN] [`InputIterator] 应当满足对输入迭代器的要求（[#input.iterators]）。

[:en] Moreover, [`iterator_traits<InputIterator>::value_type] shall denote a
type that is convertible to [`double].
[:zh_CN] 此外，[`iterator_traits<InputIterator>::value_type] 应当代表某个可以
转换为 [`double] 的类型。

[:en] If [`firstW == lastW], let [$n = 1] and [$w_0 = 1].
[:zh_CN] 若 [`firstW == lastW]，则设 [$n = 1] 且 [$w_0 = 1]。

[:en] Otherwise, [$\bigl`[[`firstW], [`lastW]\bigr)] shall form a sequence [$w]
of length [$n > 0].
[:zh_CN] 否则，[$\bigl`[[`firstW], [`lastW]\bigr)] 应当构成一个长度为 [$n > 0]
的序列 [$w]。

[para:effects]
[:en] Constructs a [`discrete_distribution] object with probabilities given by
the formula above.
[:zh_CN] 构造一个 [`discrete_distribution] 对象，其概率由上述公式给出。
[exit:description]

[%@library discrete_distribution[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
discrete_distribution(initializer_list<double> wl);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Same as [`discrete_distribution(wl.begin(), wl.end())].
[:zh_CN] 等同于 [`discrete_distribution(wl.begin(), wl.end())]。
[exit:description]

[%@library discrete_distribution[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
template<class UnaryOperation>
  discrete_distribution(size_t nw, double xmin, double xmax, UnaryOperation fw);
[codeblock:end]

[enter:description]
[para:requires]
[:en] Each instance of type [`UnaryOperation] shall be a function object
([#function.objects]) whose return type shall be convertible to [`double].
[:zh_CN] 每个 [`UnaryOperation] 类型的实例都应当为一个函数对象
（[#function.objects]），且其返回类型应当可以转换为 [`double]。

[:en] Moreover, [`double] shall be convertible to the type of
[`UnaryOperation][=']s sole parameter.
[:zh_CN] 此外，[`double] 应当可以转换为 [`UnaryOperation] 的唯一形参的类型。

[:en] If [$[`nw] = 0], let [$n = 1], otherwise let [$n = [`nw]].
[:zh_CN] 若 [$[`nw] = 0]，则令 [$n = 1]，否则令 [$n = [`nw]]。

[:en] The relation [$0 < \delta = ([`xmax] - [`xmin]) / n] shall hold.
[:zh_CN] 应当满足关系 [$0 < \delta = ([`xmax] - [`xmin]) / n]。

[para:effects]
[:en] Constructs a [`discrete_distribution] object with probabilities given by
the formula above, using the following values:
[:zh_CN] 构造一个 [`discrete_distribution] 对象，其概率由上述公式基于以下各值
给出。

[:en] If [$[`nw] = 0], let [$w_0 = 1].
[:zh_CN] 若 [$[`nw] = 0]，则令 [$w_0 = 1]。

[:en] Otherwise, let [$w_k = [`fw]([`xmin] + k \cdot \delta + \delta / 2)]
for [$k = 0, \dotsc, n - 1].
[:zh_CN] 否则，令 [$w_k = [`fw]([`xmin] + k \cdot \delta + \delta / 2)]
（对于 [$k = 0, \dotsc, n - 1]）。

[para:complexity]
[:en] The number of invocations of [`fw] shall not exceed [$n].
[:zh_CN] 对 [`fw] 的调用次数不应超过 [$n]。
[exit:description]

[%@library discrete_distribution[!probabilities]]
[%@library probabilities[!discrete_distribution]]
[codeblock:declaration]
vector<double> probabilities() const;
[codeblock:end]

[enter:description]
[para:returns]
[:en] A [`vector<double>] whose [`size] member returns [$n] and whose
[`operator`[`]] member returns [$p_k] when invoked with argument [$k] for
[$k = 0, \dotsc, n - 1].
[:zh_CN] 一个 [`vector<double>]，其 [`size] 成员返回 [$n]，且其 [`operator`[`]]
成员当以实参 [$k]（[$k = 0, \dotsc, n - 1]）调用时返回 [$p_k]。
[exit:description]
