[/
% ----------------------------------------------------------------------
% Class template discrete_distribution
% ----------------------------------------------------------------------
/]

[section#rand.dist.samp.discrete
    [:en] Class template [`discrete_distribution]
    [:zh_CN] 类模板 [`discrete_distribution]
]

[%@lib discrete_distribution]

[para]
[:en] A [`discrete_distribution] random number distribution produces random
integers [$i], [$0 \leq i < n], distributed according to the discrete
probability function
[:zh_CN] [`discrete_distribution] 随机数分布产生随机整数 [$i]，[$0 \leq i < n]，
其分布符合离散概率函数

[math]
P(i \,|\, p_0, \dotsc, p_{n-1}) = p_i \text{ .}
[math:end]

[para]
[:en] Unless specified otherwise, the distribution parameters are calculated as:
[$p_k = w_k / S] for [$k = 0, \dotsc, n - 1], in which the values [$w_k],
commonly known as the [+:% weights], shall be non-negative, non-NaN, and
non-infinity.
[:zh_CN] 除非特别说明，分布的形参的计算都为：
[$p_k = w_k / S] 对于 [$k = 0, \dotsc, n - 1]，其中的各个 [$w_k] 值，通常被
称为其[+:% 权重]，应当非负、非 NaN 且非无穷。

[:en] Moreover, the following relation shall hold:
[$0 < S = w_0 + \dotsb + w_{n - 1}].
[:zh_CN] 此外，还应当满足如下关系：
[$0 < S = w_0 + \dotsb + w_{n - 1}]。

[%@lib discrete_distribution]
[%@lib@member result_type[!discrete_distribution]]
[codeblock:synopsis]
template<class IntType = int>
  class discrete_distribution {
  public:
    // [:en] types \
       [:zh_CN] 类型
    using result_type = IntType;
    using param_type  = [[redoc("[=unspec]")]];

    // [:en] constructors and reset functions \
       [:zh_CN] 构造函数和重置函数
    discrete_distribution();
    template<class InputIterator>
      discrete_distribution(InputIterator firstW, InputIterator lastW);
    discrete_distribution(initializer_list<double> wl);
    template<class UnaryOperation>
      discrete_distribution(size_t nw, double xmin, double xmax, UnaryOperation fw);
    explicit discrete_distribution(const param_type& parm);
    void reset();

    // [:en] equality operators \
       [:zh_CN] 相等性运算符
    friend bool operator==(const discrete_distribution& x, const discrete_distribution& y);

    // [:en] generating functions \
       [:zh_CN] 生成函数
    template<class URBG>
      result_type operator()(URBG& g);
    template<class URBG>
      result_type operator()(URBG& g, const param_type& parm);

    // [:en] property functions \
       [:zh_CN] 属性函数
    vector<double> probabilities() const;
    param_type param() const;
    void param(const param_type& parm);
    result_type min() const;
    result_type max() const;

    // [:en] inserters and extractors \
       [:zh_CN] 插入符和提取符
    template<class charT, class traits>
      friend basic_ostream<charT, traits>&
        operator<<(basic_ostream<charT, traits>& os, const discrete_distribution& x);
    template<class charT, class traits>
      friend basic_istream<charT, traits>&
        operator>>(basic_istream<charT, traits>& is, discrete_distribution& x);
  };
[codeblock:end]

[%@lib@ctor discrete_distribution]
[codeblock:declaration]
discrete_distribution();
[codeblock:end]

[div:description]
[para:effects]
[:en] Constructs a [`discrete_distribution] object with [$n = 1] and [$p_0 = 1].
[:zh_CN] 构造一个 [`discrete_distribution] 对象，其 [$n = 1] 且 [$p_0 = 1]。

[begin:note]
[:en] Such an object will always deliver the value 0.
[:zh_CN] 这样的对象将总是递交 0 值。
[end:note]
[div:end]

[%@lib@ctor discrete_distribution]
[codeblock:declaration]
template<class InputIterator>
  discrete_distribution(InputIterator firstW, InputIterator lastW);
[codeblock:end]

[div:description]
[para:mandates]
[:en] [`is_convertible_v<iterator_traits<InputIterator>::value_type, double>] is
[`true].
[:zh_CN] [`is_convertible_v<iterator_traits<InputIterator>::value_type, double>]
为 [`true]。

[para:expects]
[:en] [`InputIterator] meets the [^:oc InputIterator] requirements
([#input.iterators]).
[:zh_CN] [`InputIterator] 满足 [^:oc InputIterator] 的规定（[#input.iterators]）。

[:en] If [`firstW == lastW], let [$n = 1] and [$w_0 = 1].
[:zh_CN] 若 [`firstW == lastW]，则设 [$n = 1] 且 [$w_0 = 1]。

[:en] Otherwise, [$\bigl`[[`firstW], [`lastW]\bigr)] forms a sequence [$w] of
length [$n > 0].
[:zh_CN] 否则，[$\bigl`[[`firstW], [`lastW]\bigr)] 构成一个长度为 [$n > 0] 的
序列 [$w]。

[para:effects]
[:en] Constructs a [`discrete_distribution] object with probabilities given by
the formula above.
[:zh_CN] 构造一个 [`discrete_distribution] 对象，其概率由上述公式给出。
[div:end]

[%@lib@ctor discrete_distribution]
[codeblock:declaration]
discrete_distribution(initializer_list<double> wl);
[codeblock:end]

[div:description]
[para:effects]
[:en] Same as [`discrete_distribution(wl.begin(), wl.end())].
[:zh_CN] 等同于 [`discrete_distribution(wl.begin(), wl.end())]。
[div:end]

[%@lib@ctor discrete_distribution]
[codeblock:declaration]
template<class UnaryOperation>
  discrete_distribution(size_t nw, double xmin, double xmax, UnaryOperation fw);
[codeblock:end]

[div:description]
[para:mandates]
[:en] [`is_invocable_r_v<double, UnaryOperation&, double>] is [`true].
[:zh_CN] [`is_invocable_r_v<double, UnaryOperation&, double>] 为 [`true]。

[para:expects]
[:en] If [$[`nw] = 0], let [$n = 1], otherwise let [$n = [`nw]].
[:zh_CN] 若 [$[`nw] = 0]，则令 [$n = 1]，否则令 [$n = [`nw]]。

[:en] The relation [$0 < \delta = ([`xmax] - [`xmin]) / n] holds.
[:zh_CN] 满足关系 [$0 < \delta = ([`xmax] - [`xmin]) / n]。

[para:effects]
[:en] Constructs a [`discrete_distribution] object with probabilities given by
the formula above, using the following values:
[:zh_CN] 构造一个 [`discrete_distribution] 对象，其概率由上述公式基于以下各值
给出。

[:en] If [$[`nw] = 0], let [$w_0 = 1].
[:zh_CN] 若 [$[`nw] = 0]，则令 [$w_0 = 1]。

[:en] Otherwise, let [$w_k = [`fw]([`xmin] + k \cdot \delta + \delta / 2)]
for [$k = 0, \dotsc, n - 1].
[:zh_CN] 否则，令 [$w_k = [`fw]([`xmin] + k \cdot \delta + \delta / 2)]
（对于 [$k = 0, \dotsc, n - 1]）。

[para:complexity]
[:en] The number of invocations of [`fw] does not exceed [$n].
[:zh_CN] 对 [`fw] 的调用次数不超过 [$n]。
[div:end]

[%@lib@member probabilities[!discrete_distribution]]
[codeblock:declaration]
vector<double> probabilities() const;
[codeblock:end]

[div:description]
[para:returns]
[:en] A [`vector<double>] whose [`size] member returns [$n] and whose
[`operator`[`]] member returns [$p_k] when invoked with argument [$k] for
[$k = 0, \dotsc, n - 1].
[:zh_CN] 一个 [`vector<double>]，其 [`size] 成员返回 [$n]，且其 [`operator`[`]]
成员当以实参 [$k]（[$k = 0, \dotsc, n - 1]）调用时返回 [$p_k]。
[div:end]
