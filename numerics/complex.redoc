[section#complex
    [:en] Class template [`complex]
    [:zh_CN] 类模板 [`complex]
]

[%@lib complex]
[%@lib@member value_type[!complex]]
[codeblock:synopsis]
namespace std {
  template<class T> class complex {
  public:
    using value_type = T;

    constexpr complex(const T& re = T(), const T& im = T());
    constexpr complex(const complex&);
    template<class X> constexpr complex(const complex<X>&);

    constexpr T real() const;
    constexpr void real(T);
    constexpr T imag() const;
    constexpr void imag(T);

    constexpr complex<T>& operator= (const T&);
    constexpr complex<T>& operator+=(const T&);
    constexpr complex<T>& operator-=(const T&);
    constexpr complex<T>& operator*=(const T&);
    constexpr complex<T>& operator/=(const T&);

    complexconstexpr & operator=(const complex&);
    template<class X> constexpr complex<T>& operator= (const complex<X>&);
    template<class X> constexpr complex<T>& operator+=(const complex<X>&);
    template<class X> constexpr complex<T>& operator-=(const complex<X>&);
    template<class X> constexpr complex<T>& operator*=(const complex<X>&);
    template<class X> constexpr complex<T>& operator/=(const complex<X>&);
  };
}
[codeblock:end]

[para]
[:en] The class [`complex] describes an object that can store the Cartesian
components, [`real()] and [`imag()], of a complex number.
[:zh_CN] 类模板 [`complex] 描述一种对象，可以存储复数的笛卡尔分量 [`real()] 和
[`imag()]。
