[section#linalg.algs.blas1.matfrobnorm
    [:en] Frobenius norm of a matrix
    [:zh_CN] 矩阵的弗罗贝尼乌斯范数
]

[para]
[begin:note]
[:en] These functions exist in the BLAS standard[#:cite@super#blas-std]
but are not part of the reference implementation.
[:zh_CN] 这些函数存在于 BLAS 标准[#:cite@super#blas-std] 中，但并非参考实现的
一部分。
[end:note]

[%@lib matrix_frob_norm]
[codeblock:declaration]
template<[[redoc("*:c>")]]in-matrix InMat, class Scalar>
  Scalar matrix_frob_norm(InMat A, Scalar init);
template<class ExecutionPolicy, [[redoc("*:c>")]]in-matrix InMat, class Scalar>
  Scalar matrix_frob_norm(ExecutionPolicy&& exec, InMat A, Scalar init);
[codeblock:end]

[div:description]
[para:mandates]
[:en] Let [`a] be [`[*abs-if-needed](declval<typename InMat::value_type>())].
[:zh_CN] 令 [`a] 为 [`[*abs-if-needed](declval<typename InMat::value_type>())]。

[:en] Then, [`decltype(init + a * a)] is convertible to [`Scalar].
[:zh_CN] 则，[`decltype(init + a * a)] 可以转换为 [`Scalar]。

[para:returns]
[:en] The square root of the sum of squares of [`init] and the absolute values
of the elements of [`A].
[:zh_CN] [`init] 和 [`A] 的个元素的绝对值的平方和的平方根。

[begin:note]
[:en] For [`init] equal to zero, this is the Frobenius norm of the matrix [`A].
[:zh_CN] 对于 [`init] 等于零的情况，此为矩阵 [`A] 的弗罗贝尼乌斯范数。
[end:note]

[para:remarks]
[:en] If [`InMat::value_type] and [`Scalar] are all floating-point types or
specializations of [`complex], and if [`Scalar] has higher precision than
[`InMat::value_type], then intermediate terms in the sum use [`Scalar][=']s
precision or greater.
[:zh_CN] 如果 [`InMat::value_type] 和 [`Scalar] 均为浮点类型或 [`complex] 的特例，
则当 [`Scalar] 具有比 [`InMat::value_type] 更高的精度时，求和中的中间项使用
[`Scalar] 或更高的精度。
[div:end]

[%@lib matrix_frob_norm]
[codeblock:declaration]
template<[[redoc("*:c>")]]in-matrix InMat>
  auto matrix_frob_norm(InMat A);
template<class ExecutionPolicy, [[redoc("*:c>")]]in-matrix InMat>
  auto matrix_frob_norm(ExecutionPolicy&& exec, InMat A);
[codeblock:end]

[div:description]
[para:effects]
[:en] Let [`a] be [`[*abs-if-needed](declval<typename InMat::value_type>())].
[:zh_CN] 令 [`a] 为 [`[*abs-if-needed](declval<typename InMat::value_type>())]。

[:en] Let [`T] be [`decltype(a * a)].
[:zh_CN] 令 [`T] 为 [`decltype(a * a)]。

[:en] Then,
[:zh_CN] 则，
[list]
[item]
[:en@~] the one-parameter overload is equivalent to:
[:zh_CN@~] 一个形参的重载等价于：
[codeblock]
return matrix_frob_norm(A, T{});
[codeblock:end]
[:en@~] and
[:zh_CN@~] 而
[item]
[:en@~] the two-parameter overload is equivalent to:
[:zh_CN@~] 两个形参的重载等价于：
[codeblock]
return matrix_frob_norm(std::forward<ExecutionPolicy>(exec), A, T{});
[codeblock:end]
[list:end]
[div:end]
