[/
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% bernoulli_distribution
/]

[section#rand.dist.bern.bernoulli
    [:en] Class [`bernoulli_distribution]
    [:zh_CN] 类 [`bernoulli_distribution]
]

[%@lib bernoulli_distribution]

[para]
[:en] A [`bernoulli_distribution] random number distribution produces [`bool]
values [$b] distributed according to the discrete probability function in
[#:eq#rand.dist.bern.bernoulli].
[:zh_CN] [`bernoulli_distribution] 随机数分布产生 [`bool] 值 [$i]，
其分布符合 [#:eq#rand.dist.bern.bernoulli] 中的离散概率函数。

[formula#rand.dist.bern.bernoulli]
P(b\,|\,p) = \left\{ \begin{array}{ll}
                     p     & \text{[span [:en]if [$b = [`true]] [:zh_CN]当 [$b = [`true]]]} \\
                     1 - p & \text{[span [:en]if [$b = [`false]] [:zh_CN]当 [$b = [`false]]]}
                     \end{array}\right.
[formula:end]

[%@lib bernoulli_distribution]
[%@lib@member result_type[!bernoulli_distribution]]
[codeblock:synopsis]
namespace std {
  class bernoulli_distribution {
  public:
    // [:en] types \
    [:zh_CN] 类型
    using result_type = bool;
    using param_type  = [[redoc("[=unspec]")]];

    // [:en] constructors and reset functions \
    [:zh_CN] 构造函数和重置函数
    bernoulli_distribution() : bernoulli_distribution(0.5) {}
    explicit bernoulli_distribution(double p);
    explicit bernoulli_distribution(const param_type& parm);
    void reset();

    // [:en] equality operators \
    [:zh_CN] 相等性运算符
    friend bool operator==(const bernoulli_distribution& x, const bernoulli_distribution& y);

    // [:en] generating functions \
    [:zh_CN] 生成函数
    template<class URNG>
      result_type operator()(URNG& g);
    template<class URNG>
      result_type operator()(URNG& g, const param_type& parm);

    // [:en] property functions \
    [:zh_CN] 属性函数
    double p() const;
    param_type param() const;
    void param(const param_type& parm);
    result_type min() const;
    result_type max() const;

    // [:en] inserters and extractors \
    [:zh_CN] 插入符和提取符
    template<class charT, class traits>
      friend basic_ostream<charT, traits>&
        operator<<(basic_ostream<charT, traits>& os, const bernoulli_distribution& x);
    template<class charT, class traits>
      friend basic_istream<charT, traits>&
        operator>>(basic_istream<charT, traits>& is, bernoulli_distribution& x);
  };
}
[codeblock:end]

[%@lib@ctor bernoulli_distribution]
[codeblock:declaration]
explicit bernoulli_distribution(double p);
[codeblock:end]

[div:description]
[para:expects]
[:en] [$0 \leq [`p] \leq 1].
[:zh_CN] [$0 \leq [`p] \leq 1]。

[para:remarks]
[:en] [`p] corresponds to the parameter of the distribution.
[:zh_CN] [`p] 对应于分布的形参。
[div:end]

[%@lib@member p[!bernoulli_distribution]]
[codeblock:declaration]
double p() const;
[codeblock:end]

[div:description]
[para:returns]
[:en] The value of the [`p] parameter with which the object was constructed.
[:zh_CN] 该对象构造时的形参 [`p] 的值。
[div:end]
