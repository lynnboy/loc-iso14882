[section#simd.loadstore
    [:en] [`basic_vec] load and store functions
    [:zh_CN] [`basic_vec] 加载与存储函数
]

[%@lib@member unchecked_load[!simd]]
[codeblock:declaration]
template<class V = [[redoc("[=seebelow]")]], ranges::[[redoc("`:c>")]]contiguous_range R, class... Flags>
  requires ranges::[[redoc("`:c>")]]sized_range<R>
  constexpr V unchecked_load(R&& r, flags<Flags...> f = {});
template<class V = [[redoc("[=seebelow]")]], ranges::[[redoc("`:c>")]]contiguous_range R, class... Flags>
  requires ranges::[[redoc("`:c>")]]sized_range<R>
  constexpr V unchecked_load(R&& r, const typename V::mask_type& mask, flags<Flags...> f = {});
template<class V = [[redoc("[=seebelow]")]], [[redoc("`:c>")]]contiguous_iterator I, class... Flags>
  constexpr V unchecked_load(I first, iter_difference_t<I> n, flags<Flags...> f = {});
template<class V = [[redoc("[=seebelow]")]], [[redoc("`:c>")]]contiguous_iterator I, class... Flags>
  constexpr V unchecked_load(I first, iter_difference_t<I> n, const typename V::mask_type& mask,
                             flags<Flags...> f = {});
template<class V = [[redoc("[=seebelow]")]], [[redoc("`:c>")]]contiguous_iterator I, [[redoc("`:c>")]]sized_sentinel_for<I> S, class... Flags>
  constexpr V unchecked_load(I first, S last, flags<Flags...> f = {});
template<class V = [[redoc("[=seebelow]")]], [[redoc("`:c>")]]contiguous_iterator I, [[redoc("`:c>")]]sized_sentinel_for<I> S, class... Flags>
  constexpr V unchecked_load(I first, S last, const typename V::mask_type& mask,
                             flags<Flags...> f = {});
[codeblock:end]

[div:description]
[para]
[:en] Let
[:zh_CN] 令
[list]
[item]
[:en@~] [`mask] be [`V::mask_type(true)] for the overloads with no [`mask] parameter;
[:zh_CN@~] [`mask] 对于没有形参 [`mask] 的重载为 [`V::mask_type(true)]；
[item]
[:en@~] [`R] be [`span<const iter_value_t<I>>] for the overloads with no
template parameter [`R];
[:zh_CN@~] [`R] 对于没有形参 [`R] 的重载为 [`span<const iter_value_t<I>>]；
[item]
[:en@~] [`r] be [`R(first, n)] for the overloads with an [`n] parameter and
[`R(first, last)] for the overloads with a [`last] parameter.
[:zh_CN@~] [`r] 对于带有形参 [`n] 的重载为 [`R(first, n)]，而对于带有形参 [`last]
的重载为 [`R(first, last)]。
[list:end]

[para:mandates]
[:en] If [`ranges::size(r)] is a constant expression then [`ranges::size(r)] [$\ge] [`V::size()].
[:zh_CN] 如果 [`ranges::size(r)] 是常量表达式，则 [`ranges::size(r)] [$\ge] [`V::size()]。

[para:expects]
[list]
[item]
[:en] [=range(first,first + n)] is a valid range for the overloads with an [`n] parameter.
[:zh_CN] [=range(first,first + n)] 对于带有形参 [`n] 的重载是有效范围。
[item]
[:en] [=range(first,last)] is a valid range for the overloads with a [`last] parameter.
[:zh_CN] [=range(first,last)] 对于带有形参 [`last] 的重载是有效范围。
[item]
[:] [`ranges::size(r)] [$\ge] [`V::size()]
[list:end]

[para:effects]
[:en] Equivalent to: [`return partial_load<V>(r, mask, f);]
[:zh_CN] 等价于：[`return partial_load<V>(r, mask, f);]

[para:remarks]
[:en] The default argument for template parameter [`V] is
[`basic_vec<ranges::range_value_t<R>>].
[:zh_CN] 模板形参 [`V] 的默认实参为 [`basic_vec<ranges::range_value_t<R>>]。
[div:end]

[%@lib@member partial_load[!simd]]
[codeblock:declaration]
template<class V = [[redoc("[=seebelow]")]], ranges::[[redoc("`:c>")]]contiguous_range R, class... Flags>
  requires ranges::[[redoc("`:c>")]]sized_range<R>
  constexpr V partial_load(R&& r, flags<Flags...> f = {});
template<class V = [[redoc("[=seebelow]")]], ranges::[[redoc("`:c>")]]contiguous_range R, class... Flags>
  requires ranges::[[redoc("`:c>")]]sized_range<R>
  constexpr V partial_load(R&& r, const typename V::mask_type& mask, flags<Flags...> f = {});
template<class V = [[redoc("[=seebelow]")]], [[redoc("`:c>")]]contiguous_iterator I, class... Flags>
  constexpr V partial_load(I first, iter_difference_t<I> n, flags<Flags...> f = {});
template<class V = [[redoc("[=seebelow]")]], [[redoc("`:c>")]]contiguous_iterator I, class... Flags>
  constexpr V partial_load(I first, iter_difference_t<I> n, const typename V::mask_type& mask,
                           flags<Flags...> f = {});
template<class V = [[redoc("[=seebelow]")]], [[redoc("`:c>")]]contiguous_iterator I, [[redoc("`:c>")]]sized_sentinel_for<I> S, class... Flags>
  constexpr V partial_load(I first, S last, flags<Flags...> f = {});
template<class V = [[redoc("[=seebelow]")]], [[redoc("`:c>")]]contiguous_iterator I, [[redoc("`:c>")]]sized_sentinel_for<I> S, class... Flags>
  constexpr V partial_load(I first, S last, const typename V::mask_type& mask,
                           flags<Flags...> f = {});
[codeblock:end]

[div:description]
[para]
[:en] Let
[:zh_CN] 令
[list]
[item]
[:en@~] [`mask] be [`V::mask_type(true)] for the overloads with no [`mask] parameter;
[:zh_CN@~] [`mask] 对于没有形参 [`mask] 的重载为 [`V::mask_type(true)]；
[item]
[:en@~] [`R] be [`span<const iter_value_t<I>>] for the overloads with no
template parameter [`R];
[:zh_CN@~] [`R] 对于没有形参 [`R] 的重载为 [`span<const iter_value_t<I>>]；
[item]
[:en@~] [`r] be [`R(first, n)] for the overloads with an [`n] parameter and
[`R(first, last)] for the overloads with a [`last] parameter.
[:zh_CN@~] [`r] 对于带有形参 [`n] 的重载为 [`R(first, n)]，而对于带有形参 [`last]
的重载为 [`R(first, last)]。
[list:end]

[para:mandates]
[list]
[item]
[:en] [`ranges::range_value_t<R>] is a vectorizable type,
[:zh_CN] [`ranges::range_value_t<R>] 是可向量化类型，
[item]
[:en] [`same_as<remove_cvref_t<V>, V>] is [`true],
[:zh_CN] [`same_as<remove_cvref_t<V>, V>] 为 [`true]，
[item]
[:en] [`V] is an enabled specialization of [`basic_vec], and
[:zh_CN] [`V] 为 [`basic_vec] 的被启用特例，并且
[item]
[:en] if the template parameter pack [`Flags] does not contain [*convert-flag], then
the conversion from [`ranges::range_value_t<R>] to [`V::value_type] is value-preserving.
[:zh_CN] 如果模板形参包组 [`Flags] 中不包含 [*convert-flag]，那么从
[`ranges::range_value_t<R>] 向 [`V::value_type] 的转换是保留值的。
[list:end]

[para:expects]
[list]
[item]
[:en] [=range(first,first + n)] is a valid range for the overloads with an [`n] parameter.
[:zh_CN] [=range(first,first + n)] 对于带有形参 [`n] 的重载是有效范围。
[item]
[:en] [=range(first,last)] is a valid range for the overloads with a [`last] parameter.
[:zh_CN] [=range(first,last)] 对于带有形参 [`last] 的重载是有效范围。
[item]
[:en] If the template parameter pack [`Flags] contains [*aligned-flag],
[`ranges::data(r)] points to storage aligned by [`alignment_v<V, ranges::range_value_t<R>>].
[:zh_CN] 如果模板形参包组 [`Flags] 中包含 [*aligned-flag]，那么 [`ranges::data(r)]
指向按 [`alignment_v<V, ranges::range_value_t<R>>] 对齐的存储。
[item]
[:en] If the template parameter pack [`Flags] contains [`[*overaligned-flag]<N>],
[`ranges::data(r)] points to storage aligned by [`N].
[:zh_CN] 如果模板形参包组 [`Flags] 中包含 [`[*overaligned-flag]<N>]，那么
[`ranges::data(r)] 指向按 [`N] 对齐的存储。
[list:end]

[para:effects]
[:en] Initializes the [$i^\text{th}] element with
[`mask`[[$i]`] && [$i] < ranges::size(r) ? static_cast<T>(ranges::data(r)`[[$i]`]) : T()]
for all [$i] in the range of [=range(0,V::size())].
[:zh_CN] 对于范围 [=range(0,V::size())] 中的所有 [$i]，以
[`mask`[[$i]`] && [$i] < ranges::size(r) ? static_cast<T>(ranges::data(r)`[[$i]`]) : T()]
初始化第 [$i] 个元素。

[para:remarks]
[:en] The default argument for template parameter [`V] is
[`basic_vec<ranges::range_value_t<R>>].
[:zh_CN] 模板形参 [`V] 的默认实参为 [`basic_vec<ranges::range_value_t<R>>]。
[div:end]

[%@lib@member unchecked_store[!simd]]
[codeblock:declaration]
template<class T, class Abi, ranges::[[redoc("`:c>")]]contiguous_range R, class... Flags>
  requires ranges::[[redoc("`:c>")]]sized_range<R> && [[redoc("`:c>")]]indirectly_writable<ranges::iterator_t<R>, T>
  constexpr void unchecked_store(const basic_vec<T, Abi>& v, R&& r, flags<Flags...> f = {});
template<class T, class Abi, ranges::[[redoc("`:c>")]]contiguous_range R, class... Flags>
  requires ranges::[[redoc("`:c>")]]sized_range<R> && [[redoc("`:c>")]]indirectly_writable<ranges::iterator_t<R>, T>
  constexpr void unchecked_store(const basic_vec<T, Abi>& v, R&& r,
    const typename basic_vec<T, Abi>::mask_type& mask, flags<Flags...> f = {});
template<class T, class Abi, [[redoc("`:c>")]]contiguous_iterator I, class... Flags>
  requires [[redoc("`:c>")]]indirectly_writable<I, T>
  constexpr void unchecked_store(const basic_vec<T, Abi>& v, I first, iter_difference_t<I> n,
                                 flags<Flags...> f = {});
template<class T, class Abi, [[redoc("`:c>")]]contiguous_iterator I, class... Flags>
  requires [[redoc("`:c>")]]indirectly_writable<I, T>
  constexpr void unchecked_store(const basic_vec<T, Abi>& v, I first, iter_difference_t<I> n,
    const typename basic_vec<T, Abi>::mask_type& mask, flags<Flags...> f = {});
template<class T, class Abi, [[redoc("`:c>")]]contiguous_iterator I, [[redoc("`:c>")]]sized_sentinel_for<I> S, class... Flags>
  requires [[redoc("`:c>")]]indirectly_writable<I, T>
  constexpr void unchecked_store(const basic_vec<T, Abi>& v, I first, S last,
                                 flags<Flags...> f = {});
template<class T, class Abi, [[redoc("`:c>")]]contiguous_iterator I, [[redoc("`:c>")]]sized_sentinel_for<I> S, class... Flags>
  requires [[redoc("`:c>")]]indirectly_writable<I, T>
  constexpr void unchecked_store(const basic_vec<T, Abi>& v, I first, S last,
    const typename basic_vec<T, Abi>::mask_type& mask, flags<Flags...> f = {});
[codeblock:end]

[div:description]
[para]
[:en] Let
[:zh_CN] 令
[list]
[item]
[:en@~] [`mask] be [`basic_vec<T, Abi>::mask_type(true)] for the overloads with
no [`mask] parameter;
[:zh_CN@~] [`mask] 对于没有形参 [`mask] 的重载为 [`basic_vec<T, Abi>::mask_type(true)]；
[item]
[:en@~] [`R] be [`span<iter_value_t<I>>] for the overloads with no template parameter [`R];
[:zh_CN@~] [`R] 对于没有形参 [`R] 的重载为 [`span<iter_value_t<I>>]；
[item]
[:en@~] [`r] be [`R(first, n)] for the overloads with an [`n] parameter and
[`R(first, last)] for the overloads with a [`last] parameter.
[:zh_CN@~] [`r] 对于带有形参 [`n] 的重载为 [`R(first, n)]，而对于带有形参 [`last]
的重载为 [`R(first, last)]。
[list:end]

[para:mandates]
[:en] If [`ranges::size(r)] is a constant expression then
[`ranges::size(r)] [$\ge] [`[*simd-size-v]<T, Abi>].
[:zh_CN] 如果 [`ranges::size(r)] 是常量表达式，则
[`ranges::size(r)] [$\ge] [`[*simd-size-v]<T, Abi>]。

[para:expects]
[list]
[item]
[:en] [=range(first,first + n)] is a valid range for the overloads with an [`n] parameter.
[:zh_CN] [=range(first,first + n)] 对于带有形参 [`n] 的重载是有效范围。
[item]
[:en] [=range(first,last)] is a valid range for the overloads with a [`last] parameter.
[:zh_CN] [=range(first,last)] 对于带有形参 [`last] 的重载是有效范围。
[item]
[:] [`ranges::size(r)] [$\ge] [`[*simd-size-v]<T, Abi>]
[list:end]

[para:effects]
[:en] Equivalent to: [`partial_store(v, r, mask, f)].
[:zh_CN] 等价于：[`partial_store(v, r, mask, f)]。
[div:end]

[%@lib@member partial_store[!simd]]
[codeblock:declaration]
template<class T, class Abi, ranges::[[redoc("`:c>")]]contiguous_range R, class... Flags>
  requires ranges::[[redoc("`:c>")]]sized_range<R> && [[redoc("`:c>")]]indirectly_writable<ranges::iterator_t<R>, T>
  constexpr void partial_store(const basic_vec<T, Abi>& v, R&& r, flags<Flags...> f = {});
template<class T, class Abi, ranges::[[redoc("`:c>")]]contiguous_range R, class... Flags>
  requires ranges::[[redoc("`:c>")]]sized_range<R> && [[redoc("`:c>")]]indirectly_writable<ranges::iterator_t<R>, T>
  constexpr void partial_store(const basic_vec<T, Abi>& v, R&& r,
    const typename basic_vec<T, Abi>::mask_type& mask, flags<Flags...> f = {});
template<class T, class Abi, [[redoc("`:c>")]]contiguous_iterator I, class... Flags>
  requires [[redoc("`:c>")]]indirectly_writable<I, T>
  constexpr void partial_store(const basic_vec<T, Abi>& v, I first, iter_difference_t<I> n,
                               flags<Flags...> f = {});
template<class T, class Abi, [[redoc("`:c>")]]contiguous_iterator I, class... Flags>
  requires [[redoc("`:c>")]]indirectly_writable<I, T>
  constexpr void partial_store(const basic_vec<T, Abi>& v, I first, iter_difference_t<I> n,
    const typename basic_vec<T, Abi>::mask_type& mask, flags<Flags...> f = {});
template<class T, class Abi, [[redoc("`:c>")]]contiguous_iterator I, [[redoc("`:c>")]]sized_sentinel_for<I> S, class... Flags>
  requires [[redoc("`:c>")]]indirectly_writable<I, T>
  constexpr void partial_store(const basic_vec<T, Abi>& v, I first, S last,
                               flags<Flags...> f = {});
template<class T, class Abi, [[redoc("`:c>")]]contiguous_iterator I, [[redoc("`:c>")]]sized_sentinel_for<I> S, class... Flags>
  requires [[redoc("`:c>")]]indirectly_writable<I, T>
  constexpr void partial_store(const basic_vec<T, Abi>& v, I first, S last,
    const typename basic_vec<T, Abi>::mask_type& mask, flags<Flags...> f = {});
[codeblock:end]

[div:description]
[para]
[:en] Let
[:zh_CN] 令
[list]
[item]
[:en@~] [`mask] be [`basic_vec<T, Abi>::mask_type(true)] for the overloads with
no [`mask] parameter;
[:zh_CN@~] [`mask] 对于没有形参 [`mask] 的重载为 [`basic_vec<T, Abi>::mask_type(true)]；
[item]
[:en@~] [`R] be [`span<iter_value_t<I>>] for the overloads with no template parameter [`R];
[:zh_CN@~] [`R] 对于没有形参 [`R] 的重载为 [`span<iter_value_t<I>>]；
[item]
[:en@~] [`r] be [`R(first, n)] for the overloads with an [`n] parameter and
[`R(first, last)] for the overloads with a [`last] parameter.
[:zh_CN@~] [`r] 对于带有形参 [`n] 的重载为 [`R(first, n)]，而对于带有形参 [`last]
的重载为 [`R(first, last)]。
[list:end]

[para:mandates]
[list]
[item]
[:en] [`ranges::range_value_t<R>] is a vectorizable type, and
[:zh_CN] [`ranges::range_value_t<R>] 是可向量化类型，并且
[item]
[:en] if the template parameter pack [`Flags] does not contain [*convert-flag],
then the conversion from [`T] to [`ranges::range_value_t<R>] is value-preserving.
[:zh_CN] 如果模板形参包组 [`Flags] 中不包含 [*convert-flag]，那么从
[`T] 向 [`ranges::range_value_t<R>] 的转换是保留值的。
[list:end]

[para:expects]
[list]
[item]
[:en] [=range(first,first + n)] is a valid range for the overloads with an [`n] parameter.
[:zh_CN] [=range(first,first + n)] 对于带有形参 [`n] 的重载是有效范围。
[item]
[:en] [=range(first,last)] is a valid range for the overloads with a [`last] parameter.
[:zh_CN] [=range(first,last)] 对于带有形参 [`last] 的重载是有效范围。
[item]
[:en] If the template parameter pack [`Flags] contains [*aligned-flag],
[`ranges::data(r)] points to storage aligned by
[`alignment_v<basic_vec<T, Abi>, ranges::range_value_t<R>>].
[:zh_CN] 如果模板形参包组 [`Flags] 中包含 [*aligned-flag]，那么 [`ranges::data(r)]
指向按 [`alignment_v<basic_vec<T, Abi>, ranges::range_value_t<R>>] 对齐的存储。
[item]
[:en] If the template parameter pack [`Flags] contains [`[*overaligned-flag]<N>],
[`ranges::data(r)] points to storage aligned by [`N].
[:zh_CN] 如果模板形参包组 [`Flags] 中包含 [`[*overaligned-flag]<N>]，那么
[`ranges::data(r)] 指向按 [`N] 对齐的存储。
[list:end]

[para:effects]
[:en] For all [$i] in the range of [=range(0,basic_vec<T, Abi>::size())], if
[`mask`[[$i]`] && [$i] < ranges::size(r)] is [`true], evaluates
[`ranges::data(r)`[[$i]`] = v`[[$i]`]].
[:zh_CN] 对于范围 [=range(0,basic_vec<T, Abi>::size())] 中的所有 [$i]，如果
[`mask`[[$i]`] && [$i] < ranges::size(r)] 为 [`true]，则求值
[`ranges::data(r)`[[$i]`] = v`[[$i]`]]。
[div:end]
