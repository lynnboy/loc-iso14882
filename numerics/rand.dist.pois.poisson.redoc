[/
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% poisson_distribution
/]

[section#rand.dist.pois.poisson
    [:en] Class template [`poisson_distribution]
    [:zh_CN] 类模板 [`poisson_distribution]
]

[%@lib poisson_distribution]

[para]
[:en] A [`poisson_distribution] random number distribution produces integer
values [$i \geq 0] distributed according to the discrete probability function
[:zh_CN] [`poisson_distribution] 随机数分布产生整数值 [$i \geq 0]，
其分布符合离散概率函数

[math]
P(i\,|\,\mu) = \frac{e^{-\mu} \mu^{i}}{i\,!} \text{ .}
[math:end]

[:en] The distribution parameter [$\mu] is also known as this distribution[=']s
[+:% mean].
[:zh_CN] 分布的形参 [$\mu] 也被称为该分布的[+:% 均值]。

[%@lib poisson_distribution]
[%@lib result_type[!poisson_distribution]]
[codeblock:synopsis]
namespace std {
  template<class IntType = int>
  class poisson_distribution
  {
  public:
    // [:en] types \
    [:zh_CN] 类型
    using result_type = IntType;
    using param_type  = [[redoc("[=unspec]")]];

    // [:en] constructors and reset functions \
    [:zh_CN] 构造函数和重置函数
    poisson_distribution() : poisson_distribution(1.0) {}
    explicit poisson_distribution(double mean);
    explicit poisson_distribution(const param_type& parm);
    void reset();

    // [:en] equality operators \
    [:zh_CN] 相等性运算符
    friend bool operator==(const poisson_distribution& x, const poisson_distribution& y);

    // [:en] generating functions \
    [:zh_CN] 生成函数
    template<class URBG>
      result_type operator()(URBG& g);
    template<class URBG>
      result_type operator()(URBG& g, const param_type& parm);

    // [:en] property functions \
    [:zh_CN] 属性函数
    double mean() const;
    param_type param() const;
    void param(const param_type& parm);
    result_type min() const;
    result_type max() const;

    // [:en] inserters and extractors \
    [:zh_CN] 插入符和提取符
    template<class charT, class traits>
      friend basic_ostream<charT, traits>&
        operator<<(basic_ostream<charT, traits>& os, const poisson_distribution& x);
    template<class charT, class traits>
      friend basic_istream<charT, traits>&
        operator>>(basic_istream<charT, traits>& is, poisson_distribution& x);
  };
}
[codeblock:end]

[%@lib@ctor poisson_distribution]
[codeblock:declaration]
explicit poisson_distribution(double mean);
[codeblock:end]

[div:description]
[para:expects]
[:en] [$0 < [`mean]].
[:zh_CN] [$0 < [`mean]]。

[para:remarks]
[:en] [`mean] corresponds to the parameter of the distribution.
[:zh_CN] [`mean] 对应于分布的形参。
[div:end]

[%@lib@member mean[!poisson_distribution]]
[codeblock:declaration]
double mean() const;
[codeblock:end]

[div:description]
[para:returns]
[:en] The value of the [`mean] parameter with which the object was constructed.
[:zh_CN] 该对象构造时的形参 [`mean] 的值。
[div:end]
