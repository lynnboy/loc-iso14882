[/
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% exponential_distribution
/]

[section#rand.dist.pois.exp
    [:en] Class template [`exponential_distribution]
    [:zh_CN] 类模板 [`exponential_distribution]
]

[%@lib exponential_distribution]
[%[:en]random number distribution[![`exponential_distribution]]
[:zh_CN]随机数分布[![`exponential_distribution]]]

[para]
[:en] An [`exponential_distribution] random number distribution produces random
numbers [$x > 0] distributed according to the probability density function
[%probability density function[![`exponential_distribution]]]
[%[`exponential_distribution][!probability density function]]
[:zh_CN] [`exponential_distribution] 随机数分布产生随机数 [$x > 0]，
其分布符合概率密度函数
[%概率密度函数[![`exponential_distribution]]]
[%[`exponential_distribution][!概率密度函数]]

[math]
p(x\,|\,\lambda) = \lambda e^{-\lambda x} \text{ .}
[math:end]

[%@lib exponential_distribution]
[%@lib result_type[!exponential_distribution]]
[codeblock:synopsis]
template<class RealType = double>
  class exponential_distribution {
  public:
    // [:en] types \
       [:zh_CN] 类型
    using result_type = RealType;
    using param_type  = [[redoc("=unspec")]];

    // [:en] constructors and reset functions \
       [:zh_CN] 构造函数和重置函数
    exponential_distribution() : exponential_distribution(1.0) {}
    explicit exponential_distribution(RealType lambda);
    explicit exponential_distribution(const param_type& parm);
    void reset();

    // [:en] generating functions \
       [:zh_CN] 生成函数
    template<class URBG>
      result_type operator()(URBG& g);
    template<class URBG>
      result_type operator()(URBG& g, const param_type& parm);

    // [:en] property functions \
       [:zh_CN] 属性函数
    RealType lambda() const;
    param_type param() const;
    void param(const param_type& parm);
    result_type min() const;
    result_type max() const;
  };
[codeblock:end]

[%@lib@ctor exponential_distribution]
[codeblock:declaration]
explicit exponential_distribution(RealType lambda);
[codeblock:end]

[div:description]
[para:requires]
[:en] [$0 < [`lambda]].
[:zh_CN] [$0 < [`lambda]]。

[para:effects]
[:en] Constructs a [`exponential_distribution] object; [`lambda] corresponds to
the parameter of the distribution.
[:zh_CN] 构造一个 [`exponential_distribution] 对象；[`lambda] 对应于分布的形参。
[div:end]

[%@lib@member lambda[!exponential_distribution]]
[codeblock:declaration]
RealType lambda() const;
[codeblock:end]

[div:description]
[para:returns]
[:en] The value of the [`lambda] parameter with which the object was constructed.
[:zh_CN] 该对象构造时的形参 [`lambda] 的值。
[div:end]
