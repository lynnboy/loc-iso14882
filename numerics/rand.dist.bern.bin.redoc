[/
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% binomial_distribution
/]

[section#rand.dist.bern.bin
    [:en] Class template [`binomial_distribution]
    [:zh_CN] 类模板 [`binomial_distribution]
]

[%@library binomial_distribution]
[%[:en]random number distribution[![`binomial_distribution]]
  [:zh_CN]随机数分布[![`binomial_distribution]]]

[para]
[:en] A [`binomial_distribution] random number distribution produces integer
values [$i \geq 0] distributed according to the discrete probability function
[%discrete probability function[![`binomial_distribution]]]
[%[`binomial_distribution][!discrete probability function]]
[:zh_CN] [`binomial_distribution] 随机数分布产生整数值 [$i \geq 0]，
其分布符合离散概率函数
[%概率密度函数 [![`binomial_distribution]]]
[%[`binomial_distribution][!概率密度函数]]

[math]
 P(i\,|\,t,p)
      = \binom{t}{i} \cdot p^i \cdot (1-p)^{t-i}
\; \mbox{.}
[math:end]

[%@library binomial_distribution]
[codeblock:synopsis [special unspecified] ]
template<class IntType = int>
  class binomial_distribution {
  public:
    // [:en] types
    // [|:zh_CN] 类型
    using result_type = IntType;
    using param_type  = [=Unspec];

    // [:en] constructors and reset functions
    // [|:zh_CN] 构造函数和重置函数
    explicit binomial_distribution(IntType t = 1, double p = 0.5);
    explicit binomial_distribution(const param_type& parm);
    void reset();

    // [:en] generating functions
    // [|:zh_CN] 生成函数
    template<class URBG>
      result_type operator()(URBG& g);
    template<class URBG>
      result_type operator()(URBG& g, const param_type& parm);

    // [:en] property functions
    // [|:zh_CN] 属性函数
    IntType t() const;
    double p() const;
    param_type param() const;
    void param(const param_type& parm);
    result_type min() const;
    result_type max() const;
  };
[codeblock:end]

[%@library binomial_distribution[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
explicit binomial_distribution(IntType t = 1, double p = 0.5);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [$0 \leq \tcode{p} \leq 1] and [$0 \leq \tcode{t}].
[:zh_CN] [$0 \leq \tcode{p} \leq 1] 而且 [$0 \leq \tcode{t}]。

[para:effects]
[:en] Constructs a [`binomial_distribution] object; [`t] and [`p] correspond to
the respective parameters of the distribution.
[:zh_CN] 构造一个 [`binomial_distribution] 对象；[`t] 和 [`p] 对应于分布的相应
形参。
[exit:description]

[%@library binomial_distribution[!t]]
[%@library t[!binomial_distribution]]
[codeblock:declaration]
IntType t() const;
[codeblock:end]%

[enter:description]
[para:returns]
[:en] The value of the [`t] parameter with which the object was constructed.
[:zh_CN] 该对象构造时的形参 [`t] 的值。
[exit:description]

[%@library binomial_distribution[!p]]
[%@library p[!binomial_distribution]]
[codeblock:declaration]
double p() const;
[codeblock:end]

[enter:description]
[para:returns]
[:en] The value of the [`p] parameter with which the object was constructed.
[:zh_CN] 该对象构造时的形参 [`p] 的值。
[exit:description]
