[/
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% binomial_distribution
/]

[section#rand.dist.bern.bin
    [:en] Class template [`binomial_distribution]
    [:zh_CN] 类模板 [`binomial_distribution]
]

[%@lib binomial_distribution]
[%[:en]random number distribution[![`binomial_distribution]]
  [:zh_CN]随机数分布[![`binomial_distribution]]]

[para]
[:en] A [`binomial_distribution] random number distribution produces integer
values [$i \geq 0] distributed according to the discrete probability function
[%discrete probability function[![`binomial_distribution]]]
[%[`binomial_distribution][!discrete probability function]]
[:zh_CN] [`binomial_distribution] 随机数分布产生整数值 [$i \geq 0]，
其分布符合离散概率函数
[%概率密度函数 [![`binomial_distribution]]]
[%[`binomial_distribution][!概率密度函数]]

[math]
P(i\,|\,t,p) = \binom{t}{i} \cdot p^i \cdot (1-p)^{t-i} \text{ .}
[math:end]

[%@lib binomial_distribution]
[%@lib@member result_type[!binomial_distribution]]
[codeblock:synopsis]
template<class IntType = int>
  class binomial_distribution {
  public:
    // [:en] types \
       [:zh_CN] 类型
    using result_type = IntType;
    using param_type  = [[redoc("[=unspec]")]];

    // [:en] constructors and reset functions \
       [:zh_CN] 构造函数和重置函数
    binomial_distribution() : binomial_distribution(1) {}
    explicit binomial_distribution(IntType t, double p = 0.5);
    explicit binomial_distribution(const param_type& parm);
    void reset();

    // [:en] generating functions \
       [:zh_CN] 生成函数
    template<class URBG>
      result_type operator()(URBG& g);
    template<class URBG>
      result_type operator()(URBG& g, const param_type& parm);

    // [:en] property functions \
       [:zh_CN] 属性函数
    IntType t() const;
    double p() const;
    param_type param() const;
    void param(const param_type& parm);
    result_type min() const;
    result_type max() const;
  };
[codeblock:end]

[%@lib@ctor binomial_distribution]
[codeblock:declaration]
explicit binomial_distribution(IntType t, double p = 0.5);
[codeblock:end]

[div:description]
[para:expects]
[:en] [$0 \leq [`p] \leq 1] and [$0 \leq [`t]].
[:zh_CN] [$0 \leq [`p] \leq 1] 而且 [$0 \leq [`t]]。

[para:remarks]
[:en] [`t] and [`p] correspond to the respective parameters of the distribution.
[:zh_CN] [`t] 和 [`p] 对应于分布的相应形参。
[div:end]

[%@lib@member t[!binomial_distribution]]
[codeblock:declaration]
IntType t() const;
[codeblock:end]%

[div:description]
[para:returns]
[:en] The value of the [`t] parameter with which the object was constructed.
[:zh_CN] 该对象构造时的形参 [`t] 的值。
[div:end]

[%@lib@member p[!binomial_distribution]]
[codeblock:declaration]
double p() const;
[codeblock:end]

[div:description]
[para:returns]
[:en] The value of the [`p] parameter with which the object was constructed.
[:zh_CN] 该对象构造时的形参 [`p] 的值。
[div:end]
