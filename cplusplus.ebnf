/* comment */
// #region A.2 Keywords
typedef_name ::=
    identifier
  | simple_template_id
namespace_name ::=
    identifier
  | namespace_alias
namespace_alias ::=
    identifier
class_name ::=
    identifier
  | simple_template_id
enum_name ::=
    identifier
template_name ::=
    identifier
// #endregion

// #region A.3 Lexical conventions
hex_quad ::=
    hexadecimal_digit hexadecimal_digit hexadecimal_digit hexadecimal_digit
universal_character_name ::=
    '\u' hex_quad
  | '\U' hex_quad hex_quad
preprocessing_token ::=
    header_name
  | import_keyword
  | module_keyword
  | export_keyword
  | identifier
  | pp_number
  | character_literal
  | user_defined_character_literal
  | string_literal
  | user_defined_string_literal
  | preprocessing_op_or_punc
  | universal_character_name [wfc: cannot be one of above]
  | non_whitespace [wfc: cannot be one of above]
token ::=
    identifier
  | keyword
  | literal
  | operator_or_punctuator
header_name ::=
    '<' h_char_sequence '>'
  | '"' q_char_sequence '"'
h_char_sequence ::=
    h_char
  | h_char_sequence h_char
h_char ::=
    source_character_set - '>' - #xA
q_char_sequence ::=
    q_char
  | q_char_sequence q_char
q_char ::=
    source_character_set - '"' - #xA
pp_number ::=
    digit
  | '.' digit
  | pp_number identifier_continue
  | pp_number "'" digit
  | pp_number "'" nondigit
  | pp_number 'e' sign
  | pp_number 'E' sign
  | pp_number 'p' sign
  | pp_number 'P' sign
  | pp_number '.'
identifier ::=
    identifier_start
  | identifier identifier_continue
identifier_start ::=
    nondigit
  | universal_character_name [wfc: of class XID_Start]
identifier_continue ::=
    digit
  | nondigit
  | universal_character_name [wfc: of class XID_Continue]
nondigit ::=
    [a-zA-Z_]
digit ::=
    [0-9]
keyword_in_table ::=
    'alignas' | 'alignof' | 'asm' | 'auto' | 'bool' | 'break' | 'case' | 'catch'
  | 'char' | 'char8_t' | 'char16_t' | 'char32_t' | 'class' | 'concept' | 'const'
  | 'consteval' | 'constexpr' | 'constinit' | 'const_cast' | 'continue'
  | 'co_await' | 'co_return' | 'co_yield' | 'decltype' | 'default' | 'delete'
  | 'do' | 'double' | 'dynamic_cast' | 'else' | 'enum' | 'explicit' | 'export'
  | 'extern' | 'false' | 'float' | 'for' | 'friend' | 'goto' | 'if' | 'inline'
  | 'int' | 'long' | 'mutable' | 'namespace' | 'new' | 'noexcept' | 'nullptr'
  | 'operator' | 'private' | 'protected' | 'public' | 'register' | 'reinterpret_cast'
  | 'requires' | 'return' | 'short' | 'signed' | 'sizeof' | 'static' | 'static_assert'
  | 'static_cast' | 'struct' | 'switch' | 'template' | 'this' | 'thread_local'
  | 'throw' | 'true' | 'try' | 'typedef' | 'typeid' | 'typename' | 'union'
  | 'unsigned' | 'using' | 'virtual' | 'void' | 'volatile' | 'wchar_t' | 'while'
keyword ::=
    keyword_in_table
  | import_keyword
  | module_keyword
  | export_keyword
preprocessing_op_or_punc ::=
    preprocessing_operator
  | operator_or_punctuator
preprocessing_operator ::=
    '#' | '##' | '%:' | '%:%:'
operator_or_punctuator ::=
    '{'  | '}'  | '['   | ']'   | '('  | ')'
  | '<:' | ':>' | '<%'  | '%>'  | ';'  | ':'   | '...'
  | '?'  | '::' | '.'   | '.*'  | '->' | '->*' | '~'
  | '!'  | '+'  | '-'   | '*'   | '/'  | '%'   | '^'   | '&'  | '|'
  | '='  | '+=' | '-='  | '*='  | '/=' | '%='  | '^='  | '&=' | '|='
  | '==' | '!=' | '<'   | '>'   | '<=' | '>='  | '<=>' | '&&' | '||'
  | '<<' | '>>' | '<<=' | '>>=' | '++' | '--'  | ','
  | 'and' | 'or' | 'xor' | 'not' | 'bitand' | 'bitor' | 'compl'
  | 'and_eq' | 'or_eq' | 'xor_eq' | 'not_eq'
literal ::=
    integer_literal
  | character_literal
  | floating_point_literal
  | string_literal
  | boolean_literal
  | pointer_literal
  | user_defined_literal
integer_literal ::=
    binary_literal integer_suffix?
  | octal_literal integer_suffix?
  | decimal_literal integer_suffix?
  | hexadecimal_literal integer_suffix?
binary_literal ::=
    '0b' binary_digit
  | '0B' binary_digit
  | binary_literal "'"? binary_digit
octal_literal ::=
    '0'
  | octal_literal "'"? octal_digit
decimal_literal ::=
    nonzero_digit
  | decimal_literal "'"? digit
hexadecimal_literal ::=
    hexadecimal_prefix hexadecimal_digit_sequence
binary_digit ::=
    [01]
octal_digit ::=
    [0-7]
nonzero_digit ::=
    [1-9]
hexadecimal_prefix ::=
    '0x' | '0X'
hexadecimal_digit_sequence ::=
    hexadecimal_digit
  | hexadecimal_digit_sequence "'"? hexadecimal_digit
hexadecimal_digit ::=
    [0-9a-fA-F]
integer_suffix ::=
    unsigned_suffix long_suffix?
  | unsigned_suffix long_long_suffix?
  | unsigned_suffix size_suffix?
  | long_suffix unsigned_suffix?
  | long_long_suffix unsigned_suffix?
  | size_suffix unsigned_suffix?
unsigned_suffix ::=
    [uU]
long_suffix ::=
    [lL]
long_long_suffix ::=
    'll' | 'LL'
size_suffix ::=
    [zZ]
character_literal ::=
    encoding_prefix? "'" c_char_sequence "'"
encoding_prefix ::=
    'u8' | 'u' | 'U' | 'L'
c_char_sequence ::=
    c_char
  | c_char_sequence c_char
c_char ::=
    basic_c_char
  | escape_sequence
  | universal_character_name
basic_c_char ::=
    basic_source_character_set - ( "'" | '\' | new_line )
escape_sequence ::=
    simple_escape_sequence
  | numeric_escape_sequence
  | conditional_escape_sequence
simple_escape_sequence ::=
    '\' simple_escape_sequence_char
simple_escape_sequence_char ::=
    ['"?\abfnrtv]
numeric_escape_sequence ::=
    octal_escape_sequence
  | hexadecimal_escape_sequence
octal_escape_sequence ::=
    '\' octal_digit
  | '\' octal_digit octal_digit
  | '\' octal_digit octal_digit octal_digit
hexadecimal_escape_sequence ::=
    '\x' hexadecimal_digit
  | hexadecimal_escape_sequence hexadecimal_digit
conditional_escape_sequence ::=
    '\' conditional_escape_sequence_char
conditional_escape_sequence_char ::=
    basic_source_character_set - (octal_digit | simple_escape_sequence_char | [uUx])
floating_point_literal ::=
    decimal_floating_point_literal
  | hexadecimal_floating_point_literal
decimal_floating_point_literal ::=
    fractional_constant exponent_part? floating_point_suffix?
  | digit_sequence exponent_part floating_point_suffix?
hexadecimal_floating_point_literal ::=
    hexadecimal_prefix hexadecimal_fractional_constant binary_exponent_part floating_point_suffix?
  | hexadecimal_prefix hexadecimal_digit_sequence binary_exponent_part floating_point_suffix?
fractional_constant ::=
    digit_sequence? '.' digit_sequence
  | digit_sequence '.'
hexadecimal_fractional_constant ::=
    hexadecimal_digit_sequence? '.' hexadecimal_digit_sequence
  | hexadecimal_digit_sequence '.'
exponent_part ::=
    'e' sign? digit_sequence
  | 'E' sign? digit_sequence
binary_exponent_part ::=
    'p' sign? digit_sequence
  | 'P' sign? digit_sequence
sign ::=
    [+-]
digit_sequence ::=
    digit
  | digit_sequence "'"? digit
floating_point_suffix ::=
    [flFL]
string_literal ::=
    encoding_prefix? '"' s_char_sequence? '"'
  | encoding_prefix? 'R' raw_string
s_char_sequence ::=
    s_char
  | s_char_sequence s_char
s_char ::=
    basic_s_char
  | escape_sequence
  | universal_character_name
basic_s_char ::=
    basic_source_character_set - ( '"' | '\' | new_line )
raw_string ::=
    '"' d_char_sequence? '(' r_char_sequence? ')' d_char_sequence? '"' [wfc: d_char_sequence must match]
r_char_sequence ::=
    r_char
  | r_char_sequence r_char
r_char ::=
    source_character_set - ( ')' d_char_sequence '"') [wfc: d_char_sequence must match]
d_char_sequence ::=
    d_char
  | d_char_sequence d_char
d_char ::=
    basic_source_character_set - ( whitespace | '(' | ')' | '\' )
boolean_literal ::=
    'false'
  | 'true'
pointer_literal ::=
    'nullptr'
user_defined_literal ::=
    user_defined_integer_literal
  | user_defined_floating_point_literal
  | user_defined_string_literal
  | user_defined_character_literal
user_defined_integer_literal ::=
    decimal_literal ud_suffix
  | octal_literal ud_suffix
  | hexadecimal_literal ud_suffix
  | binary_literal ud_suffix
user_defined_floating_point_literal ::=
    fractional_constant exponent_part? ud_suffix
  | digit_sequence exponent_part ud_suffix
  | hexadecimal_prefix hexadecimal_fractional_constant binary_exponent_part ud_suffix
  | hexadecimal_prefix hexadecimal_digit_sequence binary_exponent_part ud_suffix
user_defined_string_literal ::=
    string_literal ud_suffix
user_defined_character_literal ::=
    character_literal ud_suffix
ud_suffix ::=
    identifier
// #endregion

// #region A.4 Basic
translation_unit ::=
    declaration_seq?
  | global_module_fragment? module_declaration declaration_seq? private_module_fragment?
// #endregion

// #region Misc
new_line ::= #xA
basic_source_character_set ::= [a-zA-Z0-9_{}#()<>%:;.?*+/^&|~!=,\"'-] | '[' | ']' | whitespace // 96 in total
source_character_set ::= [ ] | [^ ] // TODO
whitespace ::= [#x20#x9#xA#xB#xC] // space, h tab, nl, v tab, ff (no cr after phase 1)
non_whitespace ::= [^#x20#x9#xA#xB#xC#xD]

// #endregion