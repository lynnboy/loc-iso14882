[section#thread.lock.unique.general
    [:en] General
    [:zh_CN] 概述
]

[%@lib unique_lock]
[codeblock:synopsis]
namespace std {
  template<class Mutex>
  class unique_lock {
  public:
    using mutex_type = Mutex;

    // [:en] [#thread.lock.unique.cons], construct/copy/destroy \
    [:zh_CN] [#thread.lock.unique.cons]，构造/复制/销毁
    unique_lock() noexcept;
    explicit unique_lock(mutex_type& m);
    unique_lock(mutex_type& m, defer_lock_t) noexcept;
    unique_lock(mutex_type& m, try_to_lock_t);
    unique_lock(mutex_type& m, adopt_lock_t);
    template<class Clock, class Duration>
      unique_lock(mutex_type& m, const chrono::time_point<Clock, Duration>& abs_time);
    template<class Rep, class Period>
      unique_lock(mutex_type& m, const chrono::duration<Rep, Period>& rel_time);
    ~unique_lock();

    unique_lock(const unique_lock&) = delete;
    unique_lock& operator=(const unique_lock&) = delete;

    unique_lock(unique_lock&& u) noexcept;
    unique_lock& operator=(unique_lock&& u);

    // [:en] [#thread.lock.unique.locking], locking \
    [:zh_CN] [#thread.lock.unique.locking]，锁定
    void lock();
    bool try_lock();

    template<class Rep, class Period>
      bool try_lock_for(const chrono::duration<Rep, Period>& rel_time);
    template<class Clock, class Duration>
      bool try_lock_until(const chrono::time_point<Clock, Duration>& abs_time);

    void unlock();

    // [:en] [#thread.lock.unique.mod], modifiers \
    [:zh_CN] [#thread.lock.unique.mod]，改动函数
    void swap(unique_lock& u) noexcept;
    mutex_type* release() noexcept;

    // [:en] [#thread.lock.unique.obs], observers \
    [:zh_CN] [#thread.lock.unique.obs]，探查函数
    bool owns_lock() const noexcept;
    explicit operator bool () const noexcept;
    mutex_type* mutex() const noexcept;

  private:
    mutex_type* pm;             // [=expos]
    bool owns;                  // [=expos]
  };
}
[codeblock:end]

[para]
[:en] An object of type [`unique_lock] controls the ownership of a lockable
object within a scope.
[:zh_CN] [`unique_lock] 类型的对象在一个作用域中控制一个可锁定对象的所有权。

[:en] Ownership of the lockable object may be acquired at construction or after
construction, and may be transferred, after acquisition, to another
[`unique_lock] object.
[:zh_CN] 可锁定对象的所有权，可以在构造时或者构造之后获得，并且可以在获得之后被
转移给其他的 [`unique_lock] 对象。

[:en] Objects of type [`unique_lock] are not copyable but are movable.
[:zh_CN] [`unique_lock] 类型的对象不可复制但可移动。

[:en] The behavior of a program is undefined if the contained pointer [`pm] is
not null and the lockable object pointed to by [`pm] does not exist for the
entire remaining lifetime ([#basic.life]) of the [`unique_lock] object.
[:zh_CN] 如果所包含的指针 [`pm] 非空值且由 [`pm] 所指向的可锁定对象不在
[`unique_lock] 的整个生存期（[#basic.life]）中存在，则程序的行为是未定义的。

[:en] The supplied [`Mutex] type shall meet the [^:oc BasicLockable]
requirements ([#thread.req.lockable.basic]).
[:zh_CN] 所提供的 [`Mutex] 类型应当满足 [^:oc BasicLockable] 规定
（[#thread.req.lockable.basic]）。

[para]
[begin:note]
[:en] [`unique_lock<Mutex>] meets the [^:oc BasicLockable] requirements.
[:zh_CN] [`unique_lock<Mutex>] 满足 [^:oc BasicLockable] 规定。

[:en] If [`Mutex] meets the [^:oc Lockable] requirements
([#thread.req.lockable.req]), [`unique_lock<Mutex>] also meets the
[^:oc Lockable] requirements; if [`Mutex] meets the [^:oc TimedLockable]
requirements ([#thread.req.lockable.timed]), [`unique_lock<Mutex>] also meets
the [^:oc TimedLockable] requirements.
[:zh_CN] 如果 [`Mutex] 满足 [^:oc Lockable] 规定（[#thread.req.lockable.req]），
则 [`unique_lock<Mutex>] 也满足 [^:oc Lockable] 规定；如果 [`Mutex] 满足
[^:oc TimedLockable] 规定（[#thread.req.lockable.timed]），则
[`unique_lock<Mutex>] 也满足 [^:oc TimedLockable] 规定。
[end:note]
