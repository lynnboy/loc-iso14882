[section#thread.jthread.class
    [:en] Class [`jthread]
    [:zh_CN] 类 [`jthread]
]

[para]
[:en] The class [`jthread] provides a mechanism to create a new thread of
execution.
[:zh_CN] 类 [`jthread] 提供一种机制来创建新的执行线程。

[:en] The functionality is the same as for class [`thread]
([#thread.thread.class]) with the additional abilities to provide a [`stop_token]
([#thread.stoptokene] to the new thread of execution, make stop requests, and
automatically join.
[:zh_CN] 其功能与类 [`thread]（[#thread.thread.class]）相同，但添加了向新执行
线程提供一个 [`stop_token]（[#thread.stoptokene]），做出停止请求，和自动合并线程
的能力。

[%@library jthread]
[codeblock:synopsis [!:mark ImpDef] ]
namespace std {
  class jthread {
  public:
    // [:en] types \
       [:zh_CN] 类型
    class id;
    using native_handle_type = thread::native_handle_type;

    // [:en] [#thread.jthread.cons], constructors, move, and assignment \
       [:zh_CN] [#thread.jthread.cons]，构造函数，移动和赋值
    jthread() noexcept;
    template<class F, class... Args> explicit jthread(F&& f, Args&&... args);
    ~jthread();
    jthread(const jthread&) = delete;
    jthread(jthread&&) noexcept;
    jthread& operator=(const jthread&) = delete;
    jthread& operator=(jthread&&) noexcept;

    // [:en] [#thread.jthread.mem], members \
       [:zh_CN] [#thread.jthread.mem]，成员
    void swap(jthread&) noexcept;
    [[nodiscard]] bool joinable() const noexcept;
    void join();
    void detach();
    [[nodiscard]] id get_id() const noexcept;
    [[nodiscard]] native_handle_type native_handle();   // [:en] see [#thread.req.native] \
                                                           [:zh_CN] 参见 [#thread.req.native]

    // [:en] [#thread.jthread.stop], stop token handling \
       [:zh_CN] [#thread.jthread.stop]，停止令牌的处理
    [[nodiscard]] stop_source get_stop_source() noexcept;
    [[nodiscard]] stop_token get_stop_token() const noexcept;
    bool request_stop() noexcept;

    // [:en] [#thread.jthread.special], specialized algorithms \
       [:zh_CN] [#thread.jthread.special]，特化的算法
    friend void swap(jthread& lhs, jthread& rhs) noexcept;

    // [:en] [#thread.jthread.static], static members \
       [:zh_CN] [#thread.jthread.static]，静态成员
    [[nodiscard]] static unsigned int hardware_concurrency() noexcept;

  private:
    stop_source ssource;        // [=Expos]
  };
[codeblock:end]

[include thread.jthread.cons]

[include thread.jthread.mem]

[include thread.jthread.stop]

[include thread.jthread.special]

[include thread.jthread.static]
