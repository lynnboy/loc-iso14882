[section#thread.condition.condvarany
    [:en] Class [`condition_variable_any]
    [:zh_CN] 类 [`condition_variable_any]
]

[para]
[:en] A [`Lock] type shall meet the [*Cpp17BasicLockable] requirements
([#thread.req.lockable.basic]).
[:zh_CN] [`Lock] 类型应当满足 [*Cpp17BasicLockable] 规定
（[#thread.req.lockable.basic]）。

[enter:note]
[:en] All of the standard mutex types meet this requirement.
[:zh_CN] 所有的标准互斥体类型都满足这个规定。

[:en] If a [`Lock] type other than one of the standard mutex types or a
[`unique_lock] wrapper for a standard mutex type is used with
[`condition_variable_any], the user should ensure that any necessary
synchronization is in place with respect to the predicate associated with the
[`condition_variable_any] instance.
[:zh_CN] 如果用不是标准互斥体类型之一且不是标准互斥体类型的 [`unique_lock] 包装
的某个 [`Lock] 类型，和 [`condition_variable_any] 一起使用，则用户最好确保与同
[`condition_variable_any] 实例相关联的谓词之间进行必要的同步。
[exit:note]

[%@library condition_variable_any]
[codeblock:synopsis [!:mark ImpDef] ]
namespace std {
  class condition_variable_any {
  public:
    condition_variable_any();
    ~condition_variable_any();

    condition_variable_any(const condition_variable_any&) = delete;
    condition_variable_any& operator=(const condition_variable_any&) = delete;

    void notify_one() noexcept;
    void notify_all() noexcept;

    // [:en] [#thread.condvarany.wait], noninterruptible waits
    // [|:zh_CN] [#thread.condvarany.wait]，不可中断等待
    template<class Lock>
      void wait(Lock& lock);
    template<class Lock, class Predicate>
      void wait(Lock& lock, Predicate pred);

    template<class Lock, class Clock, class Duration>
      cv_status wait_until(Lock& lock, const chrono::time_point<Clock, Duration>& abs_time);
    template<class Lock, class Clock, class Duration, class Predicate>
      bool wait_until(Lock& lock, const chrono::time_point<Clock, Duration>& abs_time,
                      Predicate pred);
    template<class Lock, class Rep, class Period>
      cv_status wait_for(Lock& lock, const chrono::duration<Rep, Period>& rel_time);
    template<class Lock, class Rep, class Period, class Predicate>
      bool wait_for(Lock& lock, const chrono::duration<Rep, Period>& rel_time, Predicate pred);

    // [:en] [#thread.condvarany.intwait], interruptible waits
    // [|:zh_CN] [#thread.condvarany.intwait]，可中断等待
    template<class Lock, class Predicate>
      bool wait_until(Lock& lock, Predicate pred, stop_token stoken);
    template<class Lock, class Clock, class Duration, class Predicate>
      bool wait_until(Lock& lock, const chrono::time_point<Clock, Duration>& abs_time
                      Predicate pred, stop_token stoken);
    template<class Lock, class Rep, class Period, class Predicate>
      bool wait_for(Lock& lock, const chrono::duration<Rep, Period>& rel_time,
                    Predicate pred, stop_token stoken);
  };
}
[codeblock:end]

[%@library condition_variable_any[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
condition_variable_any();
[codeblock:end]

[enter:description]
[para:effects]
[:en] Constructs an object of type [`condition_variable_any].
[:zh_CN] 构造 [`condition_variable_any] 类型的对象。

[para:throws]
[:en] [`bad_alloc] or [`system_error] when an exception is required
([#thread.req.exception]).
[:zh_CN] [`bad_alloc]，或者当需要异常时（[#thread.req.exception]）抛出
[`system_error]。

[para:errors]
[list]
[item]
[:en] [`resource_unavailable_try_again] [=--] if some non-memory resource
limitation prevents initialization.
[:zh_CN] [`resource_unavailable_try_again] [=--] 某种非内存的资源限额妨碍了
初始化。

[item]
[:en] [`operation_not_permitted] [=--] if the thread does not have the
privilege to perform the operation.
[:zh_CN] [`operation_not_permitted] [=--] 线程缺少实施操作的权限。
[list:end]
[exit:description]

[%@library condition_variable_any[![:en]destructor[:zh_CN]析构函数]]
[codeblock:declaration]
~condition_variable_any();
[codeblock:end]

[enter:description]
[para:requires]
[:en] There shall be no thread blocked on [`*this].

[enter:note]
[:en] That is, all threads shall have been notified; they may subsequently block
on the lock specified in the wait.
[:zh_CN] 就是说，所有线程都已经被通知；但它们可能会随后在等待中所指定的锁上阻塞。

[:en] This relaxes the usual rules, which would have required all wait calls to
happen before destruction.
[:zh_CN] 这样就放宽了一般的规则，其中会要求所有的等待调用都发生早于其销毁。

[:en] Only the notification to unblock the wait needs to happen before
destruction.
[:zh_CN] 只有对等待解除阻塞的通知需要发生早于销毁。

[:en] The user should take care to ensure that no threads wait on [`*this] once
the destructor has been started, especially when the waiting threads are calling
the wait functions in a loop or using the overloads of [`wait], [`wait_for], or
[`wait_until] that take a predicate.
[:zh_CN] 用户最好更加小心以确保，一旦析构函数已经开始，就没有任何线程在 [`*this]
上等待，尤其是在等待线程是在循环中调用的等待函数，或者使用的是接受一个谓词的
[`wait]、[`wait_for] 或 [`wait_until] 的重载的情况中。
[exit:note]

[para:effects]
[:en] Destroys the object.
[:zh_CN] 销毁对象。
[exit:description]

[%@library notify_one[!condition_variable_any]]
[%@library condition_variable_any[!notify_one]]
[codeblock:declaration]
void notify_one() noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en] If any threads are blocked waiting for [`*this], unblocks one of those
threads.
[:zh_CN] 如果有任何阻塞等待 [`*this] 的线程，则对其中之一的线程解除阻塞。
[exit:description]

[%@library notify_all[!condition_variable_any]]
[%@library condition_variable_any[!notify_all]]
[codeblock:declaration]
void notify_all() noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Unblocks all threads that are blocked waiting for [`*this].
[:zh_CN] 对阻塞等待 [`*this] 的所有线程解除阻塞。
[exit:description]

[include thread.condvarany.wait]

[include thread.condvarany.intwait]
