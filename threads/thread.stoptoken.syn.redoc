[section#thread.stoptoken.syn
    [:en] Header [`<stop_token>] synopsis
    [:zh_CN] 头文件 [`<stop_token>] 纲要
]

[%@hdr@def stop_token]
[codeblock:synopsis]
namespace std {
  // [:en] [#stoptoken.concepts], stop token concepts \
  [:zh_CN] [#stoptoken.concepts]，停止令牌概念
  template<class CallbackFn, class Token, class Initializer = CallbackFn>
    concept [[redoc("*:c>")]]stoppable-callback-for = [[redoc("[=seebelow]")]];           // [=expos]

  template<class Token>
    concept [[redoc("`:c>")]]stoppable_token = [[redoc("[=seebelow]")]];

  template<class Token>
    concept [[redoc("`:c>")]]unstoppable_token = [[redoc("[=seebelow]")]];

  template<class Source>
    concept [[redoc("*:c>")]]stoppable-source = [[redoc("[=seebelow]")]];                 // [=expos]

  // [:en] [#stoptoken], class [`stop_token] \
  [:zh_CN] [#stoptoken]，类 [`stop_token]
  class stop_token;

  // [:en] [#stopsource], class [`stop_source] \
  [:zh_CN] [#stopsource]，类 [`stop_source]
  class stop_source;

  // [:en] no-shared-stop-state indicator \
  [:zh_CN] 无共享停止状态指示器
  struct nostopstate_t {
    explicit nostopstate_t() = default;
  };
  inline constexpr nostopstate_t nostopstate{};

  // [:en] [#stopcallback], class template [`stop_callback] \
  [:zh_CN] [#stopcallback]，类模板 [`stop_callback]
  template<class Callback>
    class stop_callback;

  // [:en] [#stoptoken.never], class [`never_stop_token] \
  [:zh_CN] [#stoptoken.never]，类 [`never_stop_token]
  class never_stop_token;

  // [:en] [#stoptoken.inplace], class [`inplace_stop_token] \
  [:zh_CN] [#stoptoken.inplace]，类 [`inplace_stop_token]
  class inplace_stop_token;

  // [:en] [#stopsource.inplace], class [`inplace_stop_source] \
  [:zh_CN] [#stopsource.inplace]，类 [`inplace_stop_source]
  class inplace_stop_source;

  // [:en] [#stopcallback.inplace], class template [`inplace_stop_callback] \
  [:zh_CN] [#stopcallback.inplace]，类模板 [`inplace_stop_callback]
  template<class CallbackFn>
    class inplace_stop_callback;

  template<class T, class CallbackFn>
    using stop_callback_for_t = T::template callback_type<CallbackFn>;
}
[codeblock:end]
