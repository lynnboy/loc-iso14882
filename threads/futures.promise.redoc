[section#futures.promise
    [:en] Class template [`promise]
    [:zh_CN] 类模板 [`promise]
]

[%@lib promise]
[codeblock:synopsis]
namespace std {
  template<class R>
  class promise {
  public:
    promise();
    template<class Allocator>
      promise(allocator_arg_t, const Allocator& a);
    promise(promise&& rhs) noexcept;
    promise(const promise&) = delete;
    ~promise();

    // [:en] assignment \
       [:zh_CN] 赋值
    promise& operator=(promise&& rhs) noexcept;
    promise& operator=(const promise&) = delete;
    void swap(promise& other) noexcept;

    // [:en] retrieving the result \
       [:zh_CN] 获取结果
    future<R> get_future();

    // [:en] setting the result \
       [:zh_CN] 设置结果
    void set_value([[redoc("[=seebelow]")]]);
    void set_exception(exception_ptr p);

    // [:en] setting the result with deferred notification \
       [:zh_CN] 设置结果并带有延迟通知
    void set_value_at_thread_exit([[redoc("[=seebelow]")]]);
    void set_exception_at_thread_exit(exception_ptr p);
  };

  template<class R, class Alloc>
    struct uses_allocator<promise<R>, Alloc>;
}
[codeblock:end]

[para]
[:en]
For the primary template, [`R] shall be an object type that meets the
[^:oc Destructible] requirements.
[:zh_CN]
对于主模板，[`R] 应当为满足 [^:oc Destructible] 规定的对象类型。

[para]
[:en] The implementation provides the template [`promise] and two
specializations, [`promise<R&>] and [`promise<void>].
[:zh_CN] 实现提供模板 [`promise] 及其两个特化式 [`promise<R&>] 和
[`promise<void>]。

[:en] These differ only in the argument type of the member functions [`set_value]
and [`set_value_at_thread_exit], as set out in their descriptions, below.
[:zh_CN] 它们仅在成员函数 [`set_value] 和 [`set_value_at_thread_exit] 的实参类型
上有所区别，如下文中各自说明所示。

[para]
[:en] The [`set_value], [`set_exception], [`set_value_at_thread_exit], and
[`set_exception_at_thread_exit] member functions behave as though they acquire a
single mutex associated with the promise object while updating the promise
object.
[:zh_CN] 成员函数 [`set_value]、[`set_exception]、[`set_value_at_thread_exit] 和
[`set_exception_at_thread_exit] 的行为，如同在更新 [`promise] 对象时获得了与该
[`promise] 对象关联的一个互斥体之后再进行。

[%@lib@member uses_allocator[!promise]]
[codeblock:declaration]
template<class R, class Alloc>
  struct uses_allocator<promise<R>, Alloc>
    : true_type { };
[codeblock:end]

[div:description]
[para:expects]
[:en] [`Alloc] meets the [^:oc Allocator] requirements ([#:tab#cpp17.allocator]).
[:zh_CN] [`Alloc] 满足 [^:oc Allocator] 的规定（[#:tab#cpp17.allocator]）。
[div:end]

[%@lib@ctor promise]
[codeblock:declaration]
promise();
template<class Allocator>
  promise(allocator_arg_t, const Allocator& a);
[codeblock:end]

[div:description]
[para:effects]
[:en] Creates a shared state.
[:zh_CN] 创建一个共享状态。

[:en] The second constructor uses the allocator [`a] to allocate memory for the
shared state.
[:zh_CN] 第二种构造函数使用分配器 [`a] 为共享状态分配内存。
[div:end]

[%@lib@ctor promise]
[codeblock:declaration]
promise(promise&& rhs) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Transfers ownership of the shared state of [`rhs] (if any) to the
newly-constructed object.
[:zh_CN] 将 [`rhs] 的共享状态（如果有）的所有权转移到新构造的对象中。

[para:ensures]
[:en] [`rhs] has no shared state.
[:zh_CN] [`rhs] 没有共享状态。
[div:end]

[%@lib@dtor promise]
[codeblock:declaration]
~promise();
[codeblock:end]

[div:description]
[para:effects]
[:en] Abandons any shared state ([#futures.state]).
[:zh_CN] 放弃任何共享状态（[#futures.state]）。
[div:end]

[%@lib@member operator=[!promise]]
[codeblock:declaration]
promise& operator=(promise&& rhs) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Abandons any shared state ([#futures.state]) and then as if
[`promise(std::move(rhs)).swap(*this)].
[:zh_CN] 放弃任何共享状态（[#futures.state]）然后如同执行
[`promise(std::move(rhs)).swap(*this)]。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@lib@member swap[!promise]]
[codeblock:declaration]
void swap(promise& other) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Exchanges the shared state of [`*this] and [`other].
[:zh_CN] 交换 [`*this] 和 [`other] 的共享状态。

[para:ensures]
[:en] [`*this] has the shared state (if any) that [`other] had prior to the call
to [`swap].
[:zh_CN] [`*this] 具有调用 [`swap] 之前 [`other] 曾具有的共享状态（如果有）。

[:en] [`other] has the shared state (if any) that [`*this] had prior to the call
to [`swap].
[:zh_CN] [`other] 具有调用 [`swap] 之前 [`*this] 曾具有的共享状态（如果有）。
[div:end]

[%@lib@member get_future[!promise]]
[codeblock:declaration]
future<R> get_future();
[codeblock:end]

[div:description]
[para:returns]
[:en] A [`future<R>] object with the same shared state as [`*this].
[:zh_CN] 一个与 [`*this] 具有相同共享状态的 [`future<R>] 对象。

[para:sync]
[:en] Calls to this function do not introduce data races ([#intro.multithread])
with calls to [`set_value], [`set_exception], [`set_value_at_thread_exit], or
[`set_exception_at_thread_exit].
[:zh_CN] 对这个函数的调用不会导致与对 [`set_value]，[`set_exception]，
[`set_value_at_thread_exit]，或 [`set_exception_at_thread_exit] 的调用之间产生
数据竞争（[#intro.multithread]）。

[begin:note]
[:en] Such calls need not synchronize with each other.
[:zh_CN] 这些调用互相之间不需要进行同步。
[end:note]

[para:throws]
[:en] [`future_error] if [`*this] has no shared state or if [`get_future] has
already been called on a [`promise] with the same shared state as [`*this].
[:zh_CN] 如果 [`*this] 没有共享状态或者已经对某个与 [`*this] 带有相同共享状态的
[`promise] 调用过了 [`get_future]，则抛出 [`future_error]。

[para:errors]
[list]
[item]
[:en] [`future_already_retrieved] if [`get_future] has already been called on a
[`promise] with the same shared state as [`*this].
[:zh_CN] [`future_already_retrieved]，已经对某个与 [`*this] 带有相同共享状态的
[`promise] 调用过了 [`get_future]。

[item]
[:en] [`no_state] if [`*this] has no shared state.
[:zh_CN] [`no_state]，[`*this] 没有共享状态。
[list:end]
[div:end]

[%@lib@member set_value[!promise]]
[codeblock:declaration]
void promise::set_value(const R& r);
void promise::set_value(R&& r);
void promise<R&>::set_value(R& r);
void promise<void>::set_value();
[codeblock:end]

[div:description]
[para:effects]
[:en] Atomically stores the value [`r] in the shared state and makes that state
ready ([#futures.state]).
[:zh_CN] 原子地将值 [`r] 存储到共享状态中并设置该状态就绪（[#futures.state]）。

[para:throws]
[list]
[item]
[:en] [`future_error] if its shared state already has a stored value or
exception, or
[:zh_CN] 如果共享状态已经存储了值或异常则抛出 [`future_error]，或者
[item]
[:en] for the first version, any exception thrown by the constructor selected to
copy an object of [`R], or
[:zh_CN] 对于第一种版本，任何由被选择来复制 [`R] 的对象的构造函数所抛出的异常，
或者
[item]
[:en] for the second version, any exception thrown by the constructor selected
to move an object of [`R].
[:zh_CN] 对于第二种版本，任何由被选择来移动 [`R] 的对象的构造函数所抛出的异常。
[list:end]

[para:errors]
[list]
[item]
[:en] [`promise_already_satisfied] if its shared state already has a stored
value or exception.
[:zh_CN] [`promise_already_satisfied]，共享状态已经存储了值或异常。

[item]
[:en] [`no_state] if [`*this] has no shared state.
[:zh_CN] [`no_state]，[`*this] 没有共享状态。
[list:end]
[div:end]

[%@lib@member set_exception[!promise]]
[codeblock:declaration]
void set_exception(exception_ptr p);
[codeblock:end]

[div:description]
[para:expects]
[:en] [`p] is not null.
[:zh_CN] [`p] 不为空值。

[para:effects]
[:en] Atomically stores the exception pointer [`p] in the shared state and makes
that state ready ([#futures.state]).
[:zh_CN] 原子地将异常指针 [`p] 存储到共享状态中并设置该状态就绪（[#futures.state]）。

[para:throws]
[:en] [`future_error] if its shared state already has a stored value or
exception.
[:zh_CN] 如果共享状态已经存储了值或异常则抛出 [`future_error]。

[para:errors]
[list]
[item]
[:en] [`promise_already_satisfied] if its shared state already has a stored
value or exception.
[:zh_CN] [`promise_already_satisfied]，共享状态已经存储了值或异常。

[item]
[:en] [`no_state] if [`*this] has no shared state.
[:zh_CN] [`no_state]，[`*this] 没有共享状态。
[list:end]
[div:end]

[%@lib@member set_value_at_thread_exit[!promise]]
[codeblock:declaration]
void promise::set_value_at_thread_exit(const R& r);
void promise::set_value_at_thread_exit(R&& r);
void promise<R&>::set_value_at_thread_exit(R& r);
void promise<void>::set_value_at_thread_exit();
[codeblock:end]

[div:description]
[para:effects]
[:en] Stores the value [`r] in the shared state without making that state ready
immediately.
[:zh_CN] 将值 [`r] 存储到共享状态中但并不立即设置该状态就绪。

[:en] Schedules that state to be made ready when the current thread exits, after
all objects of thread storage duration associated with the current thread have
been destroyed.
[:zh_CN] 调度于当前线程退出时，与当前线程关联的所有具有线程存储期的对象销毁之后，
将该状态设置为就绪。

[para:throws]
[list]
[item]
[:en] [`future_error] if its shared state already has a stored value or
exception, or
[:zh_CN] 如果共享状态已经存储了值或异常则抛出 [`future_error]，或者
[item]
[:en] for the first version, any exception thrown by the constructor selected to
copy an object of [`R], or
[:zh_CN] 对于第一种版本，任何由被选择来复制 [`R] 的对象的构造函数所抛出的异常，
或者
[item]
[:en] for the second version, any exception thrown by the constructor selected
to move an object of [`R].
[:zh_CN] 对于第二种版本，任何由被选择来移动 [`R] 的对象的构造函数所抛出的异常。
[list:end]

[para:errors]
[list]
[item]
[:en] [`promise_already_satisfied] if its shared state already has a stored
value or exception.
[:zh_CN] [`promise_already_satisfied]，共享状态已经存储了值或异常。

[item]
[:en] [`no_state] if [`*this] has no shared state.
[:zh_CN] [`no_state]，[`*this] 没有共享状态。
[list:end]
[div:end]

[%@lib@member set_exception_at_thread_exit[!promise]]
[codeblock:declaration]
void set_exception_at_thread_exit(exception_ptr p);
[codeblock:end]

[div:description]
[para:expects]
[:en] [`p] is not null.
[:zh_CN] [`p] 不为空值。

[para:effects]
[:en] Stores the exception pointer [`p] in the shared state without making that
state ready immediately.
[:zh_CN] 将异常指针 [`p] 存储到共享状态中但并不立即设置该状态就绪。

[:en] Schedules that state to be made ready when the current thread exits, after
all objects of thread storage duration associated with the current thread have
been destroyed.
[:zh_CN] 调度于当前线程退出时，与当前线程关联的所有具有线程存储期的对象销毁之后，
将该状态设置为就绪。

[para:throws]
[:en] [`future_error] if an error condition occurs.
[:zh_CN] 当遇到错误条件时抛出 [`future_error]。

[para:errors]
[list]
[item]
[:en] [`promise_already_satisfied] if its shared state already has a stored
value or exception.
[:zh_CN] [`promise_already_satisfied]，共享状态已经存储了值或异常。

[item]
[:en] [`no_state] if [`*this] has no shared state.
[:zh_CN] [`no_state]，[`*this] 没有共享状态。
[list:end]
[div:end]

[%@lib@member swap[!promise]]
[codeblock:declaration]
template<class R>
  void swap(promise<R>& x, promise<R>& y) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] As if by [`x.swap(y)].
[:zh_CN] 如同执行 [`x.swap(y)]。
[div:end]
