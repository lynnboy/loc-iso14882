[section#stopcallback.cons
    [:en] Constructors and destructor
    [:zh_CN] 构造函数和析构函数
]

[%@lib@ctor stop_callback]
[codeblock:declaration]
template<class Initializer>
  explicit stop_callback(const stop_token& st, Initializer&& init)
    noexcept(is_nothrow_constructible_v<CallbackFn, Initializer>);

template<class Initializer>
  explicit stop_callback(stop_token&& st, Initializer&& init)
    noexcept(is_nothrow_constructible_v<CallbackFn, Initializer>);
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`CallbackFn] and [`Initializer] satisfy
[`[`:c constructible_from]<CallbackFn, Initializer>].
[:zh_CN] [`CallbackFn] 和 [`Initializer] 符合
[`[`:c constructible_from]<CallbackFn, Initializer>]。

[para:effects]
[:en] Initializes [*callback-fn] with [`std::forward<Initializer>(init)] and
executes a stoppable callback registration ([#stoptoken.concepts]).
[:zh_CN] 以 [`std::forward<Initializer>(init)] 初始化 [*callback-fn] 并执行一次
可停止回调注册（[#stoptoken.concepts]）。

[:en] If a callback is registered with [`st][=']s shared stop state,
then [`*this] acquires shared ownership of that stop state.
[:zh_CN] 如果在 [`st] 的共享停止状态上注册了回调，那么 [`*this] 会的该停止状态的
共享所有权。
[div:end]

[%@lib@dtor stop_callback]
[codeblock:declaration]
~stop_callback();
[codeblock:end]

[div:description]
[para:effects]
[:en] Executes a stoppable callback deregistration ([#stoptoken.concepts]) and
releases ownership of the stop state, if any.
[:zh_CN] 执行一次可停止回调注销（[#stoptoken.concepts]）并释放停止状态（如果有）的所有权。
[div:end]
