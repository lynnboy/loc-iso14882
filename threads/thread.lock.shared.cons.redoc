[section#thread.lock.shared.cons
    [:en] Constructors, destructor, and assignment
    [:zh_CN] 构造函数，析构函数和赋值
]

[%@library shared_lock[![:en]constructors[:zh_CN]构造函数]]
[codeblock:declaration]
shared_lock() noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Constructs an object of type [`shared_lock].
[:zh_CN] 构造 [`shared_lock] 类型的对象。

[para:ensures]
[:en] [`pm == nullptr] and [`owns == false].
[:zh_CN] [`pm == nullptr] 且 [`owns == false]。
[div:end]

[%@library shared_lock[![:en]constructors[:zh_CN]构造函数]]
[codeblock:declaration]
explicit shared_lock(mutex_type& m);
[codeblock:end]

[div:description]
[para:requires]
[:en] The calling thread does not own the mutex for any ownership mode.
[:zh_CN] 调用方线程不能在任何所有权模式拥有该互斥体。

[para:effects]
[:en] Constructs an object of type [`shared_lock] and calls [`m.lock_shared()].
[:zh_CN] 构造 [`shared_lock] 类型的对象并调用 [`m.lock_shared()]。

[para:ensures]
[:en] [`pm == addressof(m)] and [`owns == true].
[:zh_CN] [`pm == addressof(m)] 且 [`owns == true]。
[div:end]

[%@library shared_lock[![:en]constructors[:zh_CN]构造函数]]
[codeblock:declaration]
shared_lock(mutex_type& m, defer_lock_t) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Constructs an object of type [`shared_lock].
[:zh_CN] 构造 [`shared_lock] 类型的对象。

[para:ensures]
[:en] [`pm == addressof(m)] and [`owns == false].
[:zh_CN] [`pm == addressof(m)] 且 [`owns == false]。
[div:end]

[%@library shared_lock[![:en]constructors[:zh_CN]构造函数]]
[codeblock:declaration]
shared_lock(mutex_type& m, try_to_lock_t);
[codeblock:end]

[div:description]
[para:requires]
[:en] The calling thread does not own the mutex for any ownership mode.
[:zh_CN] 调用方线程不能在任何所有权模式拥有该互斥体。

[para:effects]
[:en] Constructs an object of type [`shared_lock] and calls
[`m.try_lock_shared()].
[:zh_CN] 构造 [`shared_lock] 类型的对象并调用 [`m.try_lock_shared()]。

[para:ensures]
[:en] [`pm == addressof(m)] and [`owns == res], where [`res] is the value
returned by the call to [`m.try_lock_shared()].
[:zh_CN] [`pm == addressof(m)] 且 [`owns == res]，其中 [`res] 是对
[`m.try_lock_shared()] 的调用所返回的值。
[div:end]

[%@library shared_lock[![:en]constructors[:zh_CN]构造函数]]
[codeblock:declaration]
shared_lock(mutex_type& m, adopt_lock_t);
[codeblock:end]

[div:description]
[para:requires]
[:en] The calling thread has shared ownership of the mutex.
[:zh_CN] 调用方线程拥有该互斥体的共享所有权。

[para:effects]
[:en] Constructs an object of type [`shared_lock].
[:zh_CN] 构造 [`shared_lock] 类型的对象。

[para:ensures]
[:en] [`pm == addressof(m)] and [`owns == true].
[:zh_CN] [`pm == addressof(m)] 且 [`owns == true]。
[div:end]

[%@library shared_lock[![:en]constructors[:zh_CN]构造函数]]
[codeblock:declaration]
template<class Clock, class Duration>
  shared_lock(mutex_type& m,
              const chrono::time_point<Clock, Duration>& abs_time);
[codeblock:end]

[div:description]
[para:requires]
[:en] The calling thread does not own the mutex for any ownership mode.
[:zh_CN] 调用方线程不能在任何所有权模式拥有该互斥体。

[para:effects]
[:en] Constructs an object of type [`shared_lock] and calls
[`m.try_lock_shared_until(abs_time)].
[:zh_CN] 构造 [`shared_lock] 类型的对象并调用
[`m.try_lock_shared_until(abs_time)]。

[para:ensures]
[:en] [`pm == addressof(m)] and [`owns == res], where [`res] is the value
returned by the call to [`m.try_lock_shared_until(abs_time)].
[:zh_CN] [`pm == addressof(m)] 且 [`owns == res]，其中 [`res] 是对
[`m.try_lock_shared_until(abs_time)] 的调用所返回的值。
[div:end]

[%@library shared_lock[![:en]constructors[:zh_CN]构造函数]]
[codeblock:declaration]
template<class Rep, class Period>
  shared_lock(mutex_type& m,
              const chrono::duration<Rep, Period>& rel_time);
[codeblock:end]

[div:description]
[para:requires]
[:en] The calling thread does not own the mutex for any ownership mode.
[:zh_CN] 调用方线程不能在任何所有权模式拥有该互斥体。

[para:effects]
[:en] Constructs an object of type [`shared_lock] and calls
[`m.try_lock_shared_for(rel_time)].
[:zh_CN] 构造 [`shared_lock] 类型的对象并调用
[`m.try_lock_shared_for(rel_time)]。

[para:ensures]
[:en] [`pm == addressof(m)] and [`owns == res], where [`res] is the value
returned by the call to [`m.try_lock_shared_for(rel_time)].
[:zh_CN] [`pm == addressof(m)] 且 [`owns == res]，其中 [`res] 是对
[`m.try_lock_shared_for(rel_time)] 的调用所返回的值。
[div:end]

[%@library shared_lock[![:en]destructor[:zh_CN]析构函数]]
[codeblock:declaration]
~shared_lock();
[codeblock:end]

[div:description]
[para:effects]
[:en] If [`owns] calls [`pm->unlock_shared()].
[:zh_CN] 如果 [`owns] 则调用 [`pm->unlock_shared()]。
[div:end]

[%@library shared_lock[![:en]constructors[:zh_CN]构造函数]]
[codeblock:declaration]
shared_lock(shared_lock&& sl) noexcept;
[codeblock:end]

[div:description]
[para:ensures]
[:en] [`pm == sl_p.pm] and [`owns == sl_p.owns] (where [`sl_p] is the state of
[`sl] just prior to this construction), [`sl.pm == nullptr] and
[`sl.owns == false].
[:zh_CN] [`pm == sl_p.pm] 且 [`owns == sl_p.owns]（其中 [`sl_p] 为 [`sl] 紧跟
这次构造之前的状态），[`sl.pm == nullptr]，且 [`sl.owns == false]。
[div:end]

[%@library operator=[!shared_lock]]
[%@library shared_lock[!operator=]]
[codeblock:declaration]
shared_lock& operator=(shared_lock&& sl) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] If [`owns] calls [`pm->unlock_shared()].
[:zh_CN] 如果 [`owns] 则调用 [`pm->unlock_shared()]。

[para:ensures]
[:en] [`pm == sl_p.pm] and [`owns == sl_p.owns] (where [`sl_p] is the state of
[`sl] just prior to this assignment), [`sl.pm == nullptr] and
[`sl.owns == false].
[:zh_CN] [`pm == sl_p.pm] 且 [`owns == sl_p.owns]（其中 [`sl_p] 为 [`sl] 紧跟
这次赋值之前的状态），[`sl.pm == nullptr]，且 [`sl.owns == false]。
[div:end]
