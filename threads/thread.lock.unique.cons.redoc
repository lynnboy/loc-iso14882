[section#thread.lock.unique.cons
    [:en] Constructors, destructor, and assignment
    [:zh_CN] 构造函数，析构函数和赋值
]

[%@library unique_lock[![:en]constructors[:zh_CN]构造函数]]
[codeblock:declaration]
unique_lock() noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Constructs an object of type [`unique_lock].
[:zh_CN] 构造 [`unique_lock] 类型的对象。

[para:ensures]
[:en] [`pm == 0] and [`owns == false].
[:zh_CN] [`pm == 0] 且 [`owns == false]。
[exit:description]

[%@library unique_lock[![:en]constructors[:zh_CN]构造函数]]
[codeblock:declaration]
explicit unique_lock(mutex_type& m);
[codeblock:end]

[enter:description]
[para:requires]
[:en] If [`mutex_type] is not a recursive mutex the calling thread does not own
the mutex.
[:zh_CN] 如果 [`mutex_type] 不是递归互斥体，则调用方线程不能拥有该互斥体。

[para:effects]
[:en] Constructs an object of type [`unique_lock] and calls [`m.lock()].
[:zh_CN] 构造 [`unique_lock] 类型的对象并调用 [`m.lock()]。

[para:ensures]
[:en] [`pm == addressof(m)] and [`owns == true].
[:zh_CN] [`pm == addressof(m)] 且 [`owns == true]。
[exit:description]

[%@library unique_lock[![:en]constructors[:zh_CN]构造函数]]
[codeblock:declaration]
unique_lock(mutex_type& m, defer_lock_t) noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Constructs an object of type [`unique_lock].
[:zh_CN] 构造 [`unique_lock] 类型的对象。

[para:ensures]
[:en] [`pm == addressof(m)] and [`owns == false].
[:zh_CN] [`pm == addressof(m)] 且 [`owns == false]。
[exit:description]

[%@library unique_lock[![:en]constructors[:zh_CN]构造函数]]
[codeblock:declaration]
unique_lock(mutex_type& m, try_to_lock_t);
[codeblock:end]

[enter:description]
[para:requires]
[:en] The supplied [`Mutex] type shall satisfy the [*Cpp17Lockable] requirements
([#thread.req.lockable.req]).
[:zh_CN] 所提供的 [`Mutex] 类型应当满足 [*Cpp17Lockable] 规定
（[#thread.req.lockable.req]）。

[:en] If [`mutex_type] is not a recursive mutex the calling thread does not own
the mutex.
[:zh_CN] 如果 [`mutex_type] 不是递归互斥体，则调用方线程不能拥有该互斥体。

[para:effects]
[:en] Constructs an object of type [`unique_lock] and calls [`m.try_lock()].
[:zh_CN] 构造 [`unique_lock] 类型的对象并调用 [`m.try_lock()]。

[para:ensures]
[:en] [`pm == addressof(m)] and [`owns == res], where [`res] is the value
returned by the call to [`m.try_lock()].
[:zh_CN] [`pm == addressof(m)] 且 [`owns == res]，其中 [`res] 是对
[`m.try_lock()] 的调用所返回的值。
[exit:description]

[%@library unique_lock[![:en]constructors[:zh_CN]构造函数]]
[codeblock:declaration]
unique_lock(mutex_type& m, adopt_lock_t);
[codeblock:end]

[enter:description]
[para:requires]
[:en] The calling thread owns the mutex.
[:zh_CN] 调用方线程拥有该互斥体。

[para:effects]
[:en] Constructs an object of type [`unique_lock].
[:zh_CN] 构造 [`unique_lock] 类型的对象。

[para:ensures]
[:en] [`pm == addressof(m)] and [`owns == true].
[:zh_CN] [`pm == addressof(m)] 且 [`owns == true]。

[para:throws]
[:en] Nothing.
[:zh_CN] 无。
[exit:description]

[%@library unique_lock[![:en]constructors[:zh_CN]构造函数]]
[codeblock:declaration]
template<class Clock, class Duration>
  unique_lock(mutex_type& m, const chrono::time_point<Clock, Duration>& abs_time);
[codeblock:end]

[enter:description]
[para:requires]
[:en] If [`mutex_type] is not a recursive mutex the calling thread does not own
the mutex.
[:zh_CN] 如果 [`mutex_type] 不是递归互斥体，则调用方线程不能拥有该互斥体。

[:en] The supplied [`Mutex] type shall satisfy the [*Cpp17TimedLockable]
requirements ([#thread.req.lockable.timed]).
[:zh_CN] 所提供的 [`Mutex] 类型应当满足 [*Cpp17TimedLockable] 规定
（[#thread.req.lockable.timed]）。

[para:effects]
[:en] Constructs an object of type [`unique_lock] and calls
[`m.try_lock_until(abs_time)].
[:zh_CN] 构造 [`unique_lock] 类型的对象并调用 [`m.try_lock_until(abs_time)]。

[para:ensures]
[:en] [`pm == addressof(m)] and [`owns == res], where [`res] is the value
returned by the call to [`m.try_lock_until(abs_time)].
[:zh_CN] [`pm == addressof(m)] 且 [`owns == res]，其中 [`res] 是对
[`m.try_lock_until(abs_time)] 的调用所返回的值。
[exit:description]

[%@library unique_lock[![:en]constructors[:zh_CN]构造函数]]
[codeblock:declaration]
template<class Rep, class Period>
  unique_lock(mutex_type& m, const chrono::duration<Rep, Period>& rel_time);
[codeblock:end]

[enter:description]
[para:requires]
[:en] If [`mutex_type] is not a recursive mutex the calling thread does not own
the mutex.
[:zh_CN] 如果 [`mutex_type] 不是递归互斥体，则调用方线程不能拥有该互斥体。

[:en] The supplied [`Mutex] type shall satisfy the [*Cpp17TimedLockable]
requirements ([#thread.req.lockable.timed]).
[:zh_CN] 所提供的 [`Mutex] 类型应当满足 [*Cpp17TimedLockable] 规定
（[#thread.req.lockable.timed]）。

[para:effects]
[:en] Constructs an object of type [`unique_lock] and calls
[`m.try_lock_for(rel_time)].
[:zh_CN] 构造 [`unique_lock] 类型的对象并调用 [`m.try_lock_for(rel_time)]。

[para:ensures]
[:en] [`pm == addressof(m)] and [`owns == res], where [`res] is the value
returned by the call to [`m.try_lock_for(rel_time)].
[:zh_CN] [`pm == addressof(m)] 且 [`owns == res]，其中 [`res] 是对
[`m.try_lock_for(rel_time)] 的调用所返回的值。
[exit:description]

[%@library unique_lock[![:en]constructors[:zh_CN]构造函数]]
[codeblock:declaration]
unique_lock(unique_lock&& u) noexcept;
[codeblock:end]

[enter:description]
[para:ensures]
[:en] [`pm == u_p.pm] and [`owns == u_p.owns] (where [`u_p] is the state of [`u]
just prior to this construction), [`u.pm == 0] and [`u.owns == false].
[:zh_CN] [`pm == u_p.pm] 且 [`owns == u_p.owns]（其中 [`u_p] 为 [`u] 紧跟这次
构造之前的状态），[`u.pm == 0]，且 [`u.owns == false]。
[exit:description]

[%@library operator=[!unique_lock]]
[%@library unique_lock[!operator=]]
[codeblock:declaration]
unique_lock& operator=(unique_lock&& u);
[codeblock:end]

[enter:description]
[para:effects]
[:en] If [`owns] calls [`pm->unlock()].
[:zh_CN] 如果 [`owns] 则调用 [`pm->unlock()]。

[para:ensures]
[:en] [`pm == u_p.pm] and [`owns == u_p.owns] (where [`u_p] is the state of [`u]
just prior to this construction), [`u.pm == 0] and [`u.owns == false].
[:zh_CN] [`pm == u_p.pm] 且 [`owns == u_p.owns]（其中 [`u_p] 为 [`u] 紧跟这次
构造之前的状态），[`u.pm == 0]，且 [`u.owns == false]。

[para]
[enter:note]
[:en] With a recursive mutex it is possible for both [`*this] and [`u] to own
the same mutex before the assignment.
[:zh_CN] 对于递归互斥体，[`*this] 和 [`u] 在赋值之前可能都拥有同一个互斥体。

[:en] In this case, [`this] will own the mutex after the assignment and [`u]
will not.
[:zh_CN] 这种情况下，[`this] 将在赋值之后拥有该互斥体，而 [`u] 将不会。
[exit:note]

[para:throws]
[:en] Nothing.
[:zh_CN] 无。
[exit:description]

[%@library unique_lock[![:en]destructor[:zh_CN]析构函数]]
[codeblock:declaration]
~unique_lock();
[codeblock:end]

[enter:description]
[para:effects]
[:en] If [`owns] calls [`pm->unlock()].
[:zh_CN] 如果 [`owns] 则调用 [`pm->unlock()]。
[exit:description]
