[section#thread.condvarany.intwait
    [:en] Interruptible waits
    [:zh_CN] 可中断等待
]

[para]
[:en] The following wait functions will be notified when there is a stop request
on the passed [`stop_token].
[:zh_CN] 以下各等待函数，当所传递的 [`stop_token] 上出现停止请求时将会得到通知。

[:en] In that case the functions return immediately, returning [`false] if the
predicate evaluates to [`false].
[:zh_CN] 这种情况下函数会立即返回，当其谓词求值为 [`false] 时返回 [`false]。

[codeblock:declaration]
template<class Lock, class Predicate>
  bool wait(Lock& lock, stop_token stoken, Predicate pred);
[codeblock:end]

[div:description]
[para:effects]
[:en] Registers for the duration of this call [`*this] to get notified on a stop
request on [`stoken] during this call and then equivalent to:
[:zh_CN] 在本次调用时间内将 [`*this] 注册为当 [`stoken] 在本次调用中出现停止请求
时得到通知，然后等价于：
[codeblock]
while (!stoken.stop_requested()) {
  if (pred())
    return true;
  wait(lock);
}
return pred();
[codeblock:end]

[para]
[begin:note]
[:en] The returned value indicates whether the predicate evaluated to [`true]
regardless of whether there was a stop request.
[:zh_CN] 无论是否出现停止请求，返回值均指出谓词是否求值为 [`true]。
[end:note]

[para:ensures]
[:en] [`lock] is locked by the calling thread.
[:zh_CN] [`lock] 被调用方线程锁定。

[para:remarks]
[:en] If the function fails to meet the postcondition, [`terminate()] is called
([#except.terminate]).
[:zh_CN] 当函数无法达成其后条件时，调用 [`terminate()]（[#except.terminate]）。

[begin:note]
[:en] This can happen if the re-locking of the mutex throws an exception.
[:zh_CN] 这可能发生于对互斥体的重新锁定抛出了异常的情况。
[end:note]

[para:throws]
[:en] Any exception thrown by [`pred].
[:zh_CN] 由 [`pred] 抛出的任何异常。
[div:end]

[codeblock:declaration]
template<class Lock, class Clock, class Duration, class Predicate>
  bool wait_until(Lock& lock, stop_token stoken,
                  const chrono::time_point<Clock, Duration>& abs_time, Predicate pred);
[codeblock:end]

[div:description]
[para:effects]
[:en] Registers for the duration of this call [`*this] to get notified on a stop
request on [`stoken] during this call and then equivalent to:
[:zh_CN] 在本次调用时间内将 [`*this] 注册为当 [`stoken] 在本次调用中出现停止请求
时得到通知，然后等价于：
[codeblock]
while (!stoken.stop_requested()) {
  if (pred())
    return true;
  if (cv.wait_until(lock, abs_time) == cv_status::timeout)
    return pred();
}
return pred();
[codeblock:end]

[para]
[begin:note]
[:en] There is no blocking if [`pred()] is initially [`true],
[`stoken.stop_requested()] was already [`true] or the timeout has already
expired.
[:zh_CN] 若 [`pred()] 开始就为 [`true]，[`stoken.stop_requested()] 已经为 [`true]，
或者超时已经到期，则不会发生阻塞。
[end:note]

[para]
[begin:note]
[:en] The returned value indicates whether the predicate evaluated to [`true]
regardless of whether the timeout was triggered or a stop request was made.
[:zh_CN] 无论是否已经触发超时或已经做出停止请求，返回值均指出谓词是否求值为
[`true]。
[end:note]

[para:ensures]
[:en] [`lock] is locked by the calling thread.
[:zh_CN] [`lock] 被调用方线程锁定。

[para:remarks]
[:en] If the function fails to meet the postcondition, [`terminate()] is called
([#except.terminate]).
[:zh_CN] 当函数无法达成其后条件时，调用 [`terminate()]（[#except.terminate]）。

[begin:note]
[:en] This can happen if the re-locking of the mutex throws an exception.
[:zh_CN] 这可能发生于对互斥体的重新锁定抛出了异常的情况。
[end:note]

[para:throws]
[:en] Timeout-related exceptions ([#thread.req.timing]), or any exception thrown
by [`pred].
[:zh_CN] 超时相关异常（[#thread.req.timing]），或由 [`pred] 抛出的任何异常。
[div:end]

[codeblock:declaration]
template<class Lock, class Rep, class Period, class Predicate>
  bool wait_for(Lock& lock, stop_token stoken,
                const chrono::duration<Rep, Period>& rel_time, Predicate pred);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return wait_until(lock, chrono::steady_clock::now() + rel_time, std::move(pred),
                  std::move(stoken));
[codeblock:end]
[div:end]
