[section#stoptoken
    [:en] Class [`stop_token]
    [:zh_CN] 类 [`stop_token]
[:][%@lib stop_token]
]

[%@lib stop_token]
[para]
[:en] The class [`stop_token] provides an interface for querying whether a stop
request has been made ([`stop_requested]) or can ever be made ([`stop_possible])
using an associated [`stop_source] object ([#stopsource]).
[:zh_CN] 类 [`stop_token] 提供一套接口，用于查询是否通过某个关联的 [`stop_source] 
对象（[#stopsource]）做出了停止请求（[`stop_requested]）或可以做出请求
（[`stop_possible]）。

[:en] A [`stop_token] can also be passed to a [`stop_callback] ([#stopcallback])
constructor to register a callback to be called when a stop request has been
made from an associated [`stop_source].
[:zh_CN] [`stop_token] 还可以传递给 [`stop_callback]（[#stopcallback]）的构造
函数，以将一个回调注册为当在某个关联的 [`stop_source] 上做出停止请求时被调用。

[codeblock:synopsis]
namespace std {
  class stop_token {
  public:
    // [:en] [#stoptoken.cons], constructors, copy, and assignment \
       [:zh_CN] [#stoptoken.cons]，构造函数，复制和赋值
    stop_token() noexcept;

    stop_token(const stop_token&) noexcept;
    stop_token(stop_token&&) noexcept;
    stop_token& operator=(const stop_token&) noexcept;
    stop_token& operator=(stop_token&&) noexcept;
    ~stop_token();
    void swap(stop_token&) noexcept;

    // [:en] [#stoptoken.mem], stop handling \
       [:zh_CN] [#stoptoken.mem]，停止处理
    [[nodiscard]] bool stop_requested() const noexcept;
    [[nodiscard]] bool stop_possible() const noexcept;

    [[nodiscard]] friend bool operator==(const stop_token& lhs, const stop_token& rhs) noexcept;
    [[nodiscard]] friend bool operator!=(const stop_token& lhs, const stop_token& rhs) noexcept;
    friend void swap(stop_token& lhs, stop_token& rhs) noexcept;
  };
}
[codeblock:end]

[include stoptoken.cons]

[include stoptoken.mem]

[include stoptoken.cmp]

[include stoptoken.special]
