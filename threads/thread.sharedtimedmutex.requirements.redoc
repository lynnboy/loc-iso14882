[section#thread.sharedtimedmutex.requirements
    [:en] Shared timed mutex types
    [:zh_CN] 共享定时互斥体类型
]

[para]
[:en] The standard library type [`shared_timed_mutex] is a [+shared timed mutex
type].
[:zh_CN] 标准库类型 [`shared_timed_mutex] 是一种[+共享定时互斥体类型]。

[:en] Shared timed mutex types shall satisfy the requirements of timed mutex
types ([#thread.timedmutex.requirements]), shared mutex types
([#thread.sharedmutex.requirements]), and additionally shall satisfy the
requirements set out below.
[:zh_CN] 共享定时互斥体类型应当满足定时互斥体类型的规定
（[#thread.timedmutex.requirements]），共享互斥体类型的规定
（[#thread.sharedmutex.requirements]），且还应当满足下文所设立的规定。

[:en] In this description, [`m] denotes an object of a shared timed mutex type,
[`rel_type] denotes an object of an instantiation of [`duration]
([#time.duration]), and [`abs_time] denotes an object of an instantiation of
[`time_point] ([#time.point]).
[:zh_CN] 这里的描述中，[`m] 代表某种共享定时互斥体类型的对象，[`rel_time] 代表
[`duration] 的某个实例的对象（[#time.duration]），而 [`abs_time] 代表
[`time_point] 的某个实例的对象（[#time.point]）。

[para]
[:en] The expression [`m.try_lock_shared_for(rel_time)] shall be well-formed and
have the following semantics:
[:zh_CN] 表达式 [`m.try_lock_shared_for(rel_time)] 应当良构并具有下列语义：

[enter:description]
[para:requires]
[:en] The calling thread has no ownership of the mutex.
[:zh_CN] 调用方线程没有该互斥体的任何所有权。

[para:effects]
[:en] Attempts to obtain shared lock ownership for the calling thread within the
relative timeout ([#thread.req.timing]) specified by [`rel_time].
[:zh_CN] 尝试在由 [`rel_time] 所指定的相对超时（[#thread.req.timing]）之内获取
共享所有权。

[:en] If the time specified by [`rel_time] is less than or equal to
[`rel_time.zero()], the function attempts to obtain ownership without blocking
(as if by calling [`try_lock_shared()]).
[:zh_CN] 如果由 [`rel_time] 所指定的时间小于或等于 [`rel_time.zero()]，则该函数
尝试获取所有权而不造成阻塞（如同调用 [`try_lock_shared()]）。

[:en] The function shall return within the timeout specified by [`rel_time] only
if it has obtained shared ownership of the mutex object.
[:zh_CN] 仅当函数已经获取到互斥体对象的共享所有权时，它才能在由 [`rel_time] 所
指定的超时之内返回。

[enter:note]
[:en] As with [`try_lock()], there is no guarantee that ownership will be
obtained if the lock is available, but implementations are expected to make a
strong effort to do so.
[:zh_CN] 与 [`try_lock()] 相同，不保证在可以锁定时能够获得所有权，但期待各实现
尽其所能做到如此。
[exit:note]

[:en] If an exception is thrown then a shared lock shall not have been acquired
for the current thread.
[:zh_CN] 当抛出了异常时，不能为当前线程获取共享锁。

[para:returntype]
[:en] [`bool].
[:zh_CN] [`bool]。

[para:returns]
[:en] [`true] if the shared lock was acquired, [`false] otherwise.
[:zh_CN] 如果获取到了共享锁则返回 [`true]，否则返回 [`false]。

[para:sync]
[:en] If [`try_lock_shared_for()] returns [`true], prior [`unlock()] operations
on the same object synchronize with ([#intro.multithread]) this operation.
[:zh_CN] 如果 [`try_lock_shared_for()] 返回了 [`true]，则之前在同一个对象上的
[`unlock()] 操作应当同步于（[#intro.multithread]）这个操作。

[para:throws]
[:en] Timeout-related exceptions ([#thread.req.timing]).
[:zh_CN] 超时相关异常（[#thread.req.timing]）。
[exit:description]

[para]
[:en] The expression [`m.try_lock_shared_until(abs_time)] shall be well-formed
and have the following semantics:
[:zh_CN] 表达式 [`m.try_lock_shared_until(abs_time)] 应当良构并具有下列语义：

[enter:description]
[para:requires]
[:en] The calling thread has no ownership of the mutex.
[:zh_CN] 调用方线程没有该互斥体的任何所有权。

[para:effects]
[:en] The function attempts to obtain shared ownership of the mutex.
[:zh_CN] 该函数尝试获取该互斥体的共享所有权。

[:en] If [`abs_time] has already passed, the function attempts to obtain shared
ownership without blocking (as if by calling [`try_lock_shared()]).
[:zh_CN] 如果已经超过了 [`abs_time]，则该函数尝试获取共享所有权而不造成阻塞
（如同调用 [`try_lock_shared()]）。

[:en] The function shall return before the absolute timeout
([#thread.req.timing]) specified by [`abs_time] only if it has obtained shared
ownership of the mutex object.
[:zh_CN] 仅当函数已经获取到互斥体对象的共享所有权时，它才能在由 [`abs_time] 所
指定的绝对超时（[#thread.req.timing]）之前返回。

[enter:note]
[:en] As with [`try_lock()], there is no guarantee that ownership will be
obtained if the lock is available, but implementations are expected to make a
strong effort to do so.
[:zh_CN] 与 [`try_lock()] 相同，不保证在可以锁定时能够获得所有权，但期待各实现
尽其所能做到如此。
[exit:note]

[:en] If an exception is thrown then a shared lock shall not have been acquired
for the current thread.
[:zh_CN] 当抛出了异常时，不能为当前线程获取共享锁。

[para:returntype]
[:en] [`bool].
[:zh_CN] [`bool]。

[para:returns]
[:en] [`true] if the shared lock was acquired, [`false] otherwise.
[:zh_CN] 如果获取到了共享锁则返回 [`true]，否则返回 [`false]。

[para:sync]
[:en] If [`try_lock_shared_until()] returns [`true], prior [`unlock()]
operations on the same object synchronize with ([#intro.multithread]) this
operation.
[:zh_CN] 如果 [`try_lock_shared_until()] 返回了 [`true]，则之前在同一个对象上的
[`unlock()] 操作应当同步于（[#intro.multithread]）这个操作。

[para:throws]
[:en] Timeout-related exceptions ([#thread.req.timing]).
[:zh_CN] 超时相关异常（[#thread.req.timing]）。
[exit:description]

[include thread.sharedtimedmutex.class]
