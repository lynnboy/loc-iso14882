[section#atomics.ref.int
    [:en] Specializations for integral types
    [:zh_CN] 针对整型类型的特化式
]

[%@lib@raw [`atomic_ref<[^integral-type]>]]
[para]
[:en] There are specializations of the [`atomic_ref] class template for all
integral types except [=cv] [`bool].
[:zh_CN] [`atomic_ref] 类模板对除了 [=cv] [`bool] 之外的所有整型类型进行了特化。

[:en] For each such type [`[^integral-type]], the specialization
[`atomic_ref<[^integral-type]>] provides additional atomic operations
appropriate to integral types.
[:zh_CN] 对于每个这样的类型 [`[^integral-type]]，特例
[`atomic_ref<[^integral-type]>] 提供了适用于该整型类型的额外的原子性操作。

[begin:note]
[:en] The specialization [`atomic_ref<bool>] uses the primary template
([#atomics.ref.generic]).
[:zh_CN] 特例 [`atomic_ref<bool>] 使用主模板（[#atomics.ref.generic]）。
[end:note]

[para]
[:en] The program is ill-formed if [`is_always_lock_free] is [`false] and
[`is_volatile_v<T>] is [`true].
[:zh_CN] 如果 [`is_always_lock_free] 为 [`false] 且 [`is_volatile_v<T>] 为 [`true]，
那么程序非良构。

[codeblock:synopsis]
namespace std {
  template<> struct atomic_ref<[[redoc("^>")]]integral-type> {
  private:
    [[redoc("^>")]]integral-type* ptr;         // [=expos]
  public:
    using value_type = remove_cv_t<[[redoc("^>")]]integral-type>;
    using difference_type = value_type;
    static constexpr size_t required_alignment = [[redoc("[?impdefx"
        "[:en] required alignment for [`atomic_ref] type[=']s operations"
        "[:zh_CN] [`atomic_ref] 类型的操作所需的对齐]")]];

    static constexpr bool is_always_lock_free = [[redoc("[?impdefx"
        "[:en] whether a given [`atomic_ref] type[=']s operations are always lock free"
        "[:zh_CN] 给定 [`atomic_ref] 类型的操作是否总是免锁的]")]];
    bool is_lock_free() const noexcept;

    constexpr explicit atomic_ref([[redoc("^>")]]integral-type&);
    constexpr atomic_ref(const atomic_ref&) noexcept;
    atomic_ref& operator=(const atomic_ref&) = delete;

    constexpr void store(value_type, memory_order = memory_order::seq_cst) const noexcept;
    constexpr value_type operator=(value_type) const noexcept;
    constexpr value_type load(memory_order = memory_order::seq_cst) const noexcept;
    constexpr operator value_type() const noexcept;

    constexpr value_type exchange(value_type,
                                  memory_order = memory_order::seq_cst) const noexcept;
    constexpr bool compare_exchange_weak(value_type&, value_type,
                                         memory_order, memory_order) const noexcept;
    constexpr bool compare_exchange_strong(value_type&, value_type,
                                           memory_order, memory_order) const noexcept;
    constexpr bool compare_exchange_weak(value_type&, value_type,
                                         memory_order = memory_order::seq_cst) const noexcept;
    constexpr bool compare_exchange_strong(value_type&, value_type,
                                           memory_order = memory_order::seq_cst) const noexcept;

    constexpr value_type fetch_add(value_type,
                                   memory_order = memory_order::seq_cst) const noexcept;
    constexpr value_type fetch_sub(value_type,
                                   memory_order = memory_order::seq_cst) const noexcept;
    constexpr value_type fetch_and(value_type,
                                   memory_order = memory_order::seq_cst) const noexcept;
    constexpr value_type fetch_or(value_type,
                                  memory_order = memory_order::seq_cst) const noexcept;
    constexpr value_type fetch_xor(value_type,
                                   memory_order = memory_order::seq_cst) const noexcept;
    constexpr value_type fetch_max(value_type,
                                   memory_order = memory_order::seq_cst) const noexcept;
    constexpr value_type fetch_min(value_type,
                                   memory_order = memory_order::seq_cst) const noexcept;

    constexpr void store_add(value_type,
                             memory_order = memory_order::seq_cst) const noexcept;
    constexpr void store_sub(value_type,
                             memory_order = memory_order::seq_cst) const noexcept;
    constexpr void store_and(value_type,
                             memory_order = memory_order::seq_cst) const noexcept;
    constexpr void store_or(value_type,
                            memory_order = memory_order::seq_cst) const noexcept;
    constexpr void store_xor(value_type,
                             memory_order = memory_order::seq_cst) const noexcept;
    constexpr void store_max(value_type,
                             memory_order = memory_order::seq_cst) const noexcept;
    constexpr void store_min(value_type,
                             memory_order = memory_order::seq_cst) const noexcept;

    constexpr value_type operator++(int) const noexcept;
    constexpr value_type operator--(int) const noexcept;
    constexpr value_type operator++() const noexcept;
    constexpr value_type operator--() const noexcept;
    constexpr value_type operator+=(value_type) const noexcept;
    constexpr value_type operator-=(value_type) const noexcept;
    constexpr value_type operator&=(value_type) const noexcept;
    constexpr value_type operator|=(value_type) const noexcept;
    constexpr value_type operator^=(value_type) const noexcept;

    constexpr void wait(value_type, memory_order = memory_order::seq_cst) const noexcept;
    constexpr void notify_one() const noexcept;
    constexpr void notify_all() const noexcept;
    constexpr [[redoc("^>")]]integral-type* address() const noexcept;
  };
}
[codeblock:end]

[para]
[:en] Descriptions are provided below only for members that differ from the
primary template.
[:zh_CN] 下文仅为与主模板不同的成员提供描述。

[para]
[:en] The following operations perform arithmetic computations.
[:zh_CN] 以下各操作实施算术运算。

[:en] The correspondence among key, operator, and computation is specified in
[#:tab#atomic.types.int.comp].
[:zh_CN] [#:tab#atomic.types.int.comp] 给出关键词、运算符和运算之间的对应关系。

[%@lib@member fetch_add[!atomic_ref<[^integral-type]>]]
[%@lib@member fetch_and[!atomic_ref<[^integral-type]>]]
[%@lib@member fetch_max[!atomic_ref<[^integral-type]>]]
[%@lib@member fetch_min[!atomic_ref<[^integral-type]>]]
[%@lib@member fetch_or [!atomic_ref<[^integral-type]>]]
[%@lib@member fetch_sub[!atomic_ref<[^integral-type]>]]
[%@lib@member fetch_xor[!atomic_ref<[^integral-type]>]]
[codeblock:declaration]
constexpr value_type fetch_key[[redoc("^<3c")]](value_type operand,
  memory_order order = memory_order::seq_cst) const noexcept;
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`is_const_v<[^integral-type]>] is [`false].
[:zh_CN] [`is_const_v<[^integral-type]>] 为 [`false]。

[para:effects]
[:en] Atomically replaces the value referenced by [`*ptr] with the result of the
computation applied to the value referenced by [`*ptr] and the given [`operand].
[:zh_CN] 原子地将由 [`*ptr] 所引用的值替换为对由 [`*ptr] 所引用的值和给定的
[`operand] 实施运算的结果。

[:en] Memory is affected according to the value of [`order].
[:zh_CN] 根据 [`order] 的值影响内存。

[:en] These operations are atomic read-modify-write operations ([#intro.races]).
[:zh_CN] 这些操作是原子性读-改-写操作（[#intro.races]）。

[para:returns]
[:en] Atomically, the value referenced by [`*ptr] immediately before the effects.
[:zh_CN] 原子地返回紧接其效果生效前 [`*ptr] 所引用的值。

[para:remarks]
[:en] [%signed integer representation[!two[=']s complement]]
Except for [`fetch_max] and [`fetch_min], for signed integer types, the result
is as if the object value and parameters were converted to their corresponding
unsigned types, the computation performed on those types, and the result
converted back to the signed type.
[:zh_CN] [%有符号整数表示[!二的补码]]
除了 [`fetch_max] 和 [`fetch_min] 之外，对有符号整数类型，其结果如同将对象值和
各形参转换为它们的对应无符号类型，在这些类型上实施运算，然后将其结果转换回有符号类型。

[begin:note]
[:en] There are no undefined results arising from the computation.
[:zh_CN] 这项运算中不会产生未定义的结果。
[end:note]

[para]
[:en] For [`fetch_max] and [`fetch_min], the maximum and minimum computation is
performed as if by [`max] and [`min] algorithms ([#alg.min.max]), respectively,
with the object value and the first parameter as the arguments.
[:zh_CN] [`fetch_max] 和 [`fetch_min] 分别如同以对象的值和第一个形参作为实参，
通过 [`max] 和 [`min] 算法（[#alg.min.max]）实施最大值和最小值运算。
[div:end]

[%@lib@member store_add[!atomic_ref<[^integral-type]>]]
[%@lib@member store_and[!atomic_ref<[^integral-type]>]]
[%@lib@member store_max[!atomic_ref<[^integral-type]>]]
[%@lib@member store_min[!atomic_ref<[^integral-type]>]]
[%@lib@member store_or [!atomic_ref<[^integral-type]>]]
[%@lib@member store_sub[!atomic_ref<[^integral-type]>]]
[codeblock:declaration]
constexpr void store_key[[redoc("^<3c")]](value_type operand,
                         memory_order order = memory_order::seq_cst) const noexcept;
[codeblock:end]

[div:description]
[para:expects]
[:en] [`order] is [`memory_order::relaxed], [`memory_order::release], or [`memory_order::seq_cst].
[:zh_CN] [`order] 为 [`memory_order::relaxed]、[`memory_order::release] 或 [`memory_order::seq_cst].

[para:effects]
[:en] Atomically replaces the value referenced by [`*ptr] with the result of the
computation applied to the value referenced by [`*ptr] and the given [`operand].
[:zh_CN] 原子地将由 [`*ptr] 所引用的值替换为对由 [`*ptr] 所引用的值和给定的
[`operand] 实施运算的结果。

[:en] Memory is affected according to the value of [`order].
[:zh_CN] 根据 [`order] 的值影响内存。

[:en] These operations are atomic modify-write operations ([#atomics.order]).
[:zh_CN] 这些操作是原子性改-写操作（[#atomics.order]）。

[para:remarks]
[:en] Except for [`store_max] and [`store_min], for signed integer types, the
result is as if [`*ptr] and parameters were converted to their corresponding
unsigned types, the computation performed on those types, and the result
converted back to the signed type.
[:zh_CN] 除了 [`store_max] 和 [`store_min] 之外，对有符号整数类型，其结果如同将 [*ptr]
和各形参转换为它们的对应无符号类型，在这些类型上实施运算，然后将其结果转换回有符号类型。

[begin:note]
[:en] There are no undefined results arising from the computation.
[:zh_CN] 这项运算中不会产生未定义的结果。
[end:note]

[:en] For [`store_max] and [`store_min], the maximum and minimum computation is
performed as if by [`max] and [`min] algorithms ([#alg.min.max]), respectively,
with [*ptr] and the first parameter as the arguments.
[:zh_CN] [`store_max] 和 [`store_min] 分别如同以 [*ptr] 和第一个形参作为实参，
通过 [`max] 和 [`min] 算法（[#alg.min.max]）实施最大值和最小值运算。
[div:end]

[%@lib@member operator+=[!atomic_ref<[^integral-type]>]]
[%@lib@member operator-=[!atomic_ref<[^integral-type]>]]
[%@lib@member operator&=[!atomic_ref<[^integral-type]>]]
[%@lib@member operator|=[!atomic_ref<[^integral-type]>]]
[%@lib@member operator^=[!atomic_ref<[^integral-type]>]]
[codeblock:declaration]
constexpr value_type operator [[redoc("^>")]]op=(value_type operand) const noexcept;
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`is_const_v<[^integral-type]>] is [`false].
[:zh_CN] [`is_const_v<[^integral-type]>] 为 [`false]。

[para:effects]
[:en] Equivalent to: [`return fetch_[^key](operand) [^op] operand;]
[:zh_CN] 等价于：[`return fetch_[^key](operand) [^op] operand;]
[div:end]
