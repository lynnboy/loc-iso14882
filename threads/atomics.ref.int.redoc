[section#atomics.ref.int
    [:en] Specializations for integral types
    [:zh_CN] 针对整型类型的特化式
]

[%@lib@raw [`atomic_ref<[^integral-type]>]]
[para]
[:en] There are specializations of the [`atomic_ref] class template for the
integral types [`char], [`signed char], [`unsigned char], [`short],
[`unsigned short], [`int], [`unsigned int], [`long], [`unsigned long],
[`long long], [`unsigned long long], [`:key char8_t], [`:key char16_t],
[`:key char32_t], [`:key wchar_t], and any other types needed by the typedefs in
the header [?libheader@ref cstdint].
[:zh_CN] [`atomic_ref] 类模板对整型类型 [`char]、[`signed char]、
[`unsigned char]、[`short]、[`unsigned short]、[`int]、[`unsigned int]、[`long]、
[`unsigned long]、[`long long]、[`unsigned long long]、[`:key char8_t]、
[`:key char16_t]、[`:key char32_t]、[`:key wchar_t]，以及头文件
[?libheader@ref cstdint] 中的各 typedef 所需的任何其他类型，进行了特化。

[:en] For each such type [`[^integral-type]], the specialization
[`atomic_ref<[^integral-type]>] provides additional atomic operations
appropriate to integral types.
[:zh_CN] 对于每个这样的类型 [`[^integral-type]]，特例
[`atomic_ref<[^integral-type]>] 提供了适用于该整型类型的额外的原子性操作。

[begin:note]
[:en] The specialization [`atomic_ref<bool>] uses the primary template
([#atomics.ref.generic]).
[:zh_CN] 特例 [`atomic_ref<bool>] 使用主模板（[#atomics.ref.generic]）。
[end:note]

[codeblock:synopsis]
namespace std {
  template<> struct atomic_ref<[[redoc("^>")]]integral-type> {
  private:
    [[redoc("^>")]]integral-type* ptr;         // [=expos]
  public:
    using value_type = [[redoc("^>")]]integral-type;
    using difference_type = value_type;
    static constexpr size_t required_alignment = [[redoc("[?impdefx"
        "[:en] required alignment for [`atomic_ref] type[=']s operations"
        "[:zh_CN] [`atomic_ref] 类型的操作所需的对齐]")]];

    static constexpr bool is_always_lock_free = [[redoc("[?impdefx"
        "[:en] whether a given [`atomic_ref] type[=']s operations are always lock free"
        "[:zh_CN] 给定 [`atomic_ref] 类型的操作是否总是免锁的]")]];
    bool is_lock_free() const noexcept;

    explicit atomic_ref([[redoc("^>")]]integral-type&);
    atomic_ref(const atomic_ref&) noexcept;
    atomic_ref& operator=(const atomic_ref&) = delete;

    void store([[redoc("^>")]]integral-type, memory_order = memory_order::seq_cst) const noexcept;
    [[redoc("^>")]]integral-type operator=([[redoc("^>")]]integral-type) const noexcept;
    [[redoc("^>")]]integral-type load(memory_order = memory_order::seq_cst) const noexcept;
    operator [[redoc("^>")]]integral-type() const noexcept;

    [[redoc("^>")]]integral-type exchange([[redoc("^>")]]integral-type,
                      memory_order = memory_order::seq_cst) const noexcept;
    bool compare_exchange_weak([[redoc("^>")]]integral-type&, [[redoc("^>")]]integral-type,
                               memory_order, memory_order) const noexcept;
    bool compare_exchange_strong([[redoc("^>")]]integral-type&, [[redoc("^>")]]integral-type,
                                 memory_order, memory_order) const noexcept;
    bool compare_exchange_weak([[redoc("^>")]]integral-type&, [[redoc("^>")]]integral-type,
                               memory_order = memory_order::seq_cst) const noexcept;
    bool compare_exchange_strong([[redoc("^>")]]integral-type&, [[redoc("^>")]]integral-type,
                                 memory_order = memory_order::seq_cst) const noexcept;

    [[redoc("^>")]]integral-type fetch_add([[redoc("^>")]]integral-type,
                       memory_order = memory_order::seq_cst) const noexcept;
    [[redoc("^>")]]integral-type fetch_sub([[redoc("^>")]]integral-type,
                       memory_order = memory_order::seq_cst) const noexcept;
    [[redoc("^>")]]integral-type fetch_and([[redoc("^>")]]integral-type,
                       memory_order = memory_order::seq_cst) const noexcept;
    [[redoc("^>")]]integral-type fetch_or([[redoc("^>")]]integral-type,
                       memory_order = memory_order::seq_cst) const noexcept;
    [[redoc("^>")]]integral-type fetch_xor([[redoc("^>")]]integral-type,
                       memory_order = memory_order::seq_cst) const noexcept;
    [[redoc("^>")]]integral-type fetch_max([[redoc("^>")]]integral-type,
                       memory_order = memory_order::seq_cst) const noexcept;
    [[redoc("^>")]]integral-type fetch_min([[redoc("^>")]]integral-type,
                       memory_order = memory_order::seq_cst) const noexcept;

    [[redoc("^>")]]integral-type operator++(int) const noexcept;
    [[redoc("^>")]]integral-type operator--(int) const noexcept;
    [[redoc("^>")]]integral-type operator++() const noexcept;
    [[redoc("^>")]]integral-type operator--() const noexcept;
    [[redoc("^>")]]integral-type operator+=([[redoc("^>")]]integral-type) const noexcept;
    [[redoc("^>")]]integral-type operator-=([[redoc("^>")]]integral-type) const noexcept;
    [[redoc("^>")]]integral-type operator&=([[redoc("^>")]]integral-type) const noexcept;
    [[redoc("^>")]]integral-type operator|=([[redoc("^>")]]integral-type) const noexcept;
    [[redoc("^>")]]integral-type operator^=([[redoc("^>")]]integral-type) const noexcept;

    void wait([[redoc("^>")]]integral-type, memory_order = memory_order::seq_cst) const noexcept;
    void notify_one() const noexcept;
    void notify_all() const noexcept;
  };
}
[codeblock:end]

[para]
[:en] Descriptions are provided below only for members that differ from the
primary template.
[:zh_CN] 下文仅为与主模板不同的成员提供描述。

[para]
[:en] The following operations perform arithmetic computations.
[:zh_CN] 以下各操作实施算术运算。

[:en] The correspondence among key, operator, and computation is specified in
[#:tab#atomic.types.int.comp].
[:zh_CN] [#:tab#atomic.types.int.comp] 给出关键词、运算符和运算之间的对应关系。

[%@lib@member fetch_add[!atomic_ref<[^integral-type]>]]
[%@lib@member fetch_and[!atomic_ref<[^integral-type]>]]
[%@lib@member fetch_max[!atomic_ref<[^integral-type]>]]
[%@lib@member fetch_min[!atomic_ref<[^integral-type]>]]
[%@lib@member fetch_or [!atomic_ref<[^integral-type]>]]
[%@lib@member fetch_sub[!atomic_ref<[^integral-type]>]]
[%@lib@member fetch_xor[!atomic_ref<[^integral-type]>]]
[codeblock:declaration]
[[redoc("^>")]]integral-type fetch_key[[redoc("^<3c")]]([[redoc("^>")]]integral-type operand,
  memory_order order = memory_order::seq_cst) const noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Atomically replaces the value referenced by [`*ptr] with the result of the
computation applied to the value referenced by [`*ptr] and the given [`operand].
[:zh_CN] 原子地将由 [`*ptr] 所引用的值替换为对由 [`*ptr] 所引用的值和给定的
[`operand] 实施运算的结果。

[:en] Memory is affected according to the value of [`order].
[:zh_CN] 根据 [`order] 的值影响内存。

[:en] These operations are atomic read-modify-write operations ([#intro.races]).
[:zh_CN] 这些操作是原子性读-改-写操作（[#intro.races]）。

[para:returns]
[:en] Atomically, the value referenced by [`*ptr] immediately before the effects.
[:zh_CN] 原子地返回紧接其效果生效前 [`*ptr] 所引用的值。

[para:remarks]
[:en]
[%signed integer representation[!two[=']s complement]]
Except for [`fetch_max] and [`fetch_min], for signed integer types, the result
is as if the object value and parameters were converted to their corresponding
unsigned types, the computation performed on those types, and the result
converted back to the signed type.
[:zh_CN]
[%有符号整数表示[!二的补码]]
除了 [`fetch_max] 和 [`fetch_min] 之外，对有符号整数类型，其结果如同将对象值和
各形参转换为它们的对应无符号类型，在这些类型上实施运算，然后将其结果转换回
有符号类型。

[begin:note]
[:en] There are no undefined results arising from the computation.
[:zh_CN] 这项运算中不会产生未定义的结果。
[end:note]

[para]
[:en] For [`fetch_max] and [`fetch_min], the maximum and minimum computation is
performed as if by [`max] and [`min] algorithms ([#alg.min.max]), respectively,
with the object value and the first parameter as the arguments.
[:zh_CN] [`fetch_max] 和 [`fetch_min] 分别如同以对象的值和第一个形参作为实参，
通过 [`max] 和 [`min] 算法（[#alg.min.max]）实施最大值和最小值运算。
[div:end]

[%@lib@member operator+=[!atomic_ref<[^integral-type]>]]
[%@lib@member operator-=[!atomic_ref<[^integral-type]>]]
[%@lib@member operator&=[!atomic_ref<[^integral-type]>]]
[%@lib@member operator|=[!atomic_ref<[^integral-type]>]]
[%@lib@member operator^=[!atomic_ref<[^integral-type]>]]
[codeblock:declaration]
[[redoc("^>")]]integral-type operator [[redoc("^>")]]op=([[redoc("^>")]]integral-type operand) const noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return fetch_[^key](operand) [^op] operand;]
[:zh_CN] 等价于：[`return fetch_[^key](operand) [^op] operand;]
[div:end]
