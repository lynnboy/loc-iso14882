[section#thread.sharedmutex.requirements
    [:en] Shared mutex types
    [:zh_CN] 共享互斥体类型
]

[para]
[:en] The standard library types [`shared_mutex] and [`shared_timed_mutex] are
[+shared mutex types].
[:zh_CN] 标准库类型 [`shared_mutex] 和 [`shared_timed_mutex] 是[+共享互斥体类型]
。

[:en] Shared mutex types shall satisfy the requirements of mutex types
([#thread.mutex.requirements.mutex]), and additionally shall satisfy the
requirements set out below.
[:zh_CN] 共享互斥体类型应当满足互斥体类型的规定
（[#thread.mutex.requirements.mutex]），且还应当满足下文所设立的规定。

[:en] In this description, [`m] denotes an object of a shared mutex type.
[:zh_CN] 这里的描述中，[`m] 代表某种共享互斥体类型的对象。

[para]
[:en] In addition to the exclusive lock ownership mode specified in
[#thread.mutex.requirements.mutex], shared mutex types provide a [+shared lock]
ownership mode.
[:zh_CN] 除了在 [#thread.mutex.requirements.mutex] 中所指定的互斥锁所有权模式
之外，共享互斥体类型还提供一种[+共享锁]所有权模式。

[:en] Multiple execution agents can simultaneously hold a shared lock ownership
of a shared mutex type.
[:zh_CN] 多个执行代理可以同时持有共享互斥体类型的共享锁所有权。

[:en] But no execution agent shall hold a shared lock while another execution
agent holds an exclusive lock on the same shared mutex type, and vice-versa.
[:zh_CN] 但当存在其他执行代理持有同一个共享互斥体类型的互斥锁时，任何执行代理都
不能持有共享锁，反之亦然。

[:en] The maximum number of execution agents which can share a shared lock on a
single shared mutex type is unspecified, but shall be at least 10000.
[:zh_CN] 可以共享单个共享互斥体类型的共享锁的执行代理的最大数量是未指明的，但
应当至少为 10000。

[:en] If more than the maximum number of execution agents attempt to obtain a
shared lock, the excess execution agents shall block until the number of shared
locks are reduced below the maximum amount by other execution agents releasing
their shared lock.
[:zh_CN] 如果超过最大数量的执行代理尝试获取共享锁，则超过部分的执行代理应当阻塞
直到由于其他执行代理释放其共享锁而导致共享锁的数量减少到少于最大数量。

[para]
[:en] The expression [`m.lock_shared()] shall be well-formed and have the
following semantics:
[:zh_CN] 表达式 [`m.lock_shared()] 应当良构并具有下列语义：

[enter:description]
[para:requires]
[:en] The calling thread has no ownership of the mutex.
[:zh_CN] 调用方线程没有该互斥体的任何所有权。

[para:effects]
[:en] Blocks the calling thread until shared ownership of the mutex can be
obtained for the calling thread.
[:zh_CN] 阻塞调用方线程直到可以为调用方线程获得该互斥体的共享所有权。

[:en] If an exception is thrown then a shared lock shall not have been acquired
for the current thread.
[:zh_CN] 当抛出了异常时，不应当为当前线程获取共享锁。

[para:ensures]
[:en] The calling thread has a shared lock on the mutex.
[:zh_CN] 调用方线程具有该互斥体的一个共享锁。

[para:returntype]
[:en] [`void].
[:zh_CN] [`void]。

[para:sync]
[:en] Prior [`unlock()] operations on the same object shall synchronize with
([#intro.multithread]) this operation.
[:zh_CN] 之前在相同对象上的 [`unlock()] 操作应当同步于（[#intro.multithread]）
这个操作。

[para:throws]
[:en] [`system_error] when an exception is required ([#thread.req.exception]).
[:zh_CN] 当需要时抛出 [`system_error]（[#thread.req.exception]）。

[para:errors]
[list]
[item]
[:en] [`operation_not_permitted] [=--] if the thread does not have the privilege
to perform the operation.
[:zh_CN] [`operation_not_permitted] [=--] 该线程没有实施该操作的权限。

[item]
[:en] [`resource_deadlock_would_occur] [=--] if the implementation detects that
a deadlock would occur.
[:zh_CN] [`resource_deadlock_would_occur] [=--] 实现检测到可能发生了死锁。
[list:end]
[exit:description]

[para]
[:en] The expression [`m.unlock_shared()] shall be well-formed and have the
following semantics:
[:zh_CN] 表达式 [`m.unlock_shared()] 应当良构并具有下列语义：

[enter:description]
[para:requires]
[:en] The calling thread shall hold a shared lock on the mutex.
[:zh_CN] 调用方线程应当持有该互斥体的一个共享锁。

[para:effects]
[:en] Releases a shared lock on the mutex held by the calling thread.
[:zh_CN] 释放调用方线程所持有的一个该互斥体的共享锁。

[para:returntype]
[:en] [`void].
[:zh_CN] [`void]。

[para:sync]
[:en] This operation synchronizes with ([#intro.multithread]) subsequent [`lock]
operations that obtain ownership on the same object.
[:zh_CN] 该操作同步于（[#intro.multithread]）其后在相同对象上获取所有权的
[`lock] 操作。

[para:throws]
[:en] Nothing.
[:zh_CN] 无。
[exit:description]

[para]
[:en] The expression [`m.try_lock_shared()] shall be well-formed and have the
following semantics:
[:zh_CN] 表达式 [`m.try_lock_shared()] 应当良构并具有下列语义：

[enter:description]
[para:requires]
[:en] The calling thread has no ownership of the mutex.
[:zh_CN] 调用方线程没有该互斥体的任何所有权。

[para:effects]
[:en] Attempts to obtain shared ownership of the mutex for the calling thread
without blocking.
[:zh_CN] 尝试为调用方线程获取该互斥体的共享所有权而不发生阻塞。

[:en] If shared ownership is not obtained, there is no effect and
[`try_lock_shared()] immediately returns.
[:zh_CN] 如果未能获取共享所有权，则没有效果，且 [`try_lock_shared()] 立即返回。

[:en] An implementation may fail to obtain the lock even if it is not held by
any other thread.
[:zh_CN] 即便没有被其他线程持有，实现也可能在获取锁时失败。

[para:returntype]
[:en] [`bool].
[:zh_CN] [`bool]。

[para:returns]
[:en] [`true] if the shared ownership lock was acquired, [`false] otherwise.
[:zh_CN] 如果获取到了共享所有权的锁则返回 [`true]，否则返回 [`false]。

[para:sync]
[:en] If [`try_lock_shared()] returns [`true], prior [`unlock()] operations on
the same object synchronize with ([#intro.multithread]) this operation.
[:zh_CN] 如果 [`try_lock_shared()] 返回了 [`true]，则之前在同一个对象上的
[`unlock()] 操作应当同步于（[#intro.multithread]）这个操作。

[para:throws]
[:en] Nothing.
[:zh_CN] 无。
[exit:description]

[include thread.sharedmutex.class]
