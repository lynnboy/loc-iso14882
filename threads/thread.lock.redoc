[section#thread.lock
    [:en] Locks
    [:zh_CN] 锁
]

[para]
[:en] A [+lock[%]] is an object that holds a reference to a lockable object and
may unlock the lockable object during the lock[=']s destruction (such as when
leaving block scope).
[:zh_CN] [+锁[%]]是持有到某个可锁定对象的引用的对象，且在这个锁的销毁过程中
（比如当离开块作用域时）可能会解锁这个可锁定对象）。

[:en] An execution agent may use a lock to aid in managing ownership of a
lockable object in an exception safe manner.
[:zh_CN] 执行代理可以使用一个锁来以异常安全的方式辅助管理可锁定对象的所有权。

[:en] A lock is said to [+own[%]] a lockable object if it is currently managing
the ownership of that lockable object for an execution agent.
[:zh_CN] 如果一个锁当前正在为某个执行代理管理某个可锁定对象，则称该锁[+拥有[%]]
这个可锁定对象。

[:en] A lock does not manage the lifetime of the lockable object it references.
[:zh_CN] 锁并不管理其所引用的可锁定对象的生存期。

[enter:note]
[:en] Locks are intended to ease the burden of unlocking the lockable object
under both normal and exceptional circumstances.
[:zh_CN] 提供锁的目的是为了处理同时要在正常和异常情况下对可锁定对象解锁的麻烦。
[exit:note]

[para]
[:en] Some lock constructors take tag types which describe what should be done
with the lockable object during the lock[=']s construction.
[:zh_CN] 一些锁构造函数接受标签类型用以描述在锁的构造过程中应当对可锁定对象做
什么。

[%@library defer_lock_t]
[%@library try_to_lock_t]
[%@library adopt_lock_t]
[%@library defer_lock]
[%@library try_to_lock]
[%@library adopt_lock]
[codeblock:synopsis]
namespace std {
  struct defer_lock_t  { };     // [:en] do not acquire ownership of the mutex
                                // [|:zh_CN] 不获取互斥体的所有权
  struct try_to_lock_t { };     // [:en] try to acquire ownership of the mutex
                                // [|:zh_CN] 尝试获取互斥体的所有权
                                // [:en@~] without blocking
                                // [|:zh_CN@~] 而不阻塞
  struct adopt_lock_t  { };     // [:en] assume the calling thread has already
                                // [|:zh_CN] 假定调用方线程已经
                                // [:en@~] obtained mutex ownership and manage it
                                // [|:zh_CN] 获取了互斥体的所有权再予以管理

  inline constexpr defer_lock_t   defer_lock { };
  inline constexpr try_to_lock_t  try_to_lock { };
  inline constexpr adopt_lock_t   adopt_lock { };
}
[codeblock:end]

[include thread.lock.guard]

[include thread.lock.scoped]

[include thread.lock.unique]

[include thread.lock.shared]
