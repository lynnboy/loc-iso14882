[section#futures.task.general
    [:en] General
    [:zh_CN] 概述
]

[para]
[:en] The class template [`packaged_task] defines a type for wrapping a function
or callable object so that the return value of the function or callable object
is stored in a future when it is invoked.
[:zh_CN] 类模板 [`packaged_task] 定义了一种包装一个函数或可调用对象的类型，使
其被调用时，将该函数或可调用对象的返回值存储到一个 [`future] 之中。

[para]
[:en] When the [`packaged_task] object is invoked, its stored task is invoked
and the result (whether normal or exceptional) stored in the shared state.
[:zh_CN] 当调用 [`packaged_task] 对象时，调用其所存储的任务，并将其（正常或异常）
结果存储到共享状态中。

[:en] Any futures that share the shared state will then be able to access the
stored result.
[:zh_CN] 随后，共享这个共享对象的任何 [`future] 都可以用于访问所存储的结果。

[%@lib packaged_task]
[codeblock:synopsis]
namespace std {
  template<class> class packaged_task;  // [=notdef]

  template<class R, class... ArgTypes>
  class packaged_task<R(ArgTypes...)> {
  public:
    // [:en] construction and destruction \
       [:zh_CN] 构造和销毁
    packaged_task() noexcept;
    template<class F>
      explicit packaged_task(F&& f);
    ~packaged_task();

    // [:en] no copy \
       [:zh_CN] 不支持复制
    packaged_task(const packaged_task&) = delete;
    packaged_task& operator=(const packaged_task&) = delete;

    // [:en] move support \
       [:zh_CN] 移动支持
    packaged_task(packaged_task&& rhs) noexcept;
    packaged_task& operator=(packaged_task&& rhs) noexcept;
    void swap(packaged_task& other) noexcept;

    bool valid() const noexcept;

    // [:en] result retrieval \
       [:zh_CN] 结果获取
    future<R> get_future();

    // [:en] execution \
       [:zh_CN] 执行
    void operator()(ArgTypes... );
    void make_ready_at_thread_exit(ArgTypes...);

    void reset();
  };

  template<class R, class... ArgTypes>
    packaged_task(R (*)(ArgTypes...)) -> packaged_task<R(ArgTypes...)>;

  template<class F> packaged_task(F) -> packaged_task<[[redoc("[=seebelow]")]]>;
}
[codeblock:end]
