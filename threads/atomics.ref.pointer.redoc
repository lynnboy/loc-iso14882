[section#atomics.ref.pointer
    [:en] Partial specialization for pointers
    [:zh_CN] 针对指针的部分特化式
]

[%@lib atomic_ref<T*>]
[para]
[:en] There are specializations of the [`atomic_ref] class template for all
pointer-to-object types.
[:zh_CN] [`atomic_ref] 类模板对所有对象指针类型进行了特化。

[:en] For each such type [`[^pointer-type]], the specialization
[`atomic_ref<[^pointer-type]>] provides additional atomic operations
appropriate to pointer types.
[:zh_CN] 对于每个这样的类型 [`[^pointer-type]]，特例 [`atomic_ref<[^pointer-type]>]
提供了适用于该指针类型的额外的原子性操作。

[para]
[:en] The program is ill-formed if [`is_always_lock_free] is [`false] and
[`is_volatile_v<T>] is [`true].
[:zh_CN] 如果 [`is_always_lock_free] 为 [`false] 且 [`is_volatile_v<T>] 为 [`true]，
那么程序非良构。

[codeblock:synopsis]
namespace std {
  template<class T> struct atomic_ref<[[redoc("^>")]]pointer-type> {
  private:
    [[redoc("^>")]]pointer-type* ptr;        // [=expos]

  public:
    using value_type = remove_cv_t<[[redoc("^>")]]pointer-type>;
    using difference_type = ptrdiff_t;
    static constexpr size_t required_alignment = [[redoc("[?impdefx"
        "[:en] required alignment for [`atomic_ref] type[=']s operations"
        "[:zh_CN] [`atomic_ref] 类型的操作所需的对齐]")]];

    static constexpr bool is_always_lock_free = [[redoc("[?impdefx"
        "[:en] whether a given [`atomic_ref] type[=']s operations are always lock free"
        "[:zh_CN] 给定 [`atomic_ref] 类型的操作是否总是免锁的]")]];
    bool is_lock_free() const noexcept;

    constexpr explicit atomic_ref([[redoc("^>")]]pointer-type&);
    constexpr atomic_ref(const atomic_ref&) noexcept;
    atomic_ref& operator=(const atomic_ref&) = delete;

    constexpr void store(value_type, memory_order = memory_order::seq_cst) const noexcept;
    constexpr value_type operator=(value_type) const noexcept;
    constexpr value_type load(memory_order = memory_order::seq_cst) const noexcept;
    constexpr operator value_type() const noexcept;

    constexpr value_type exchange(value_type,
                                  memory_order = memory_order::seq_cst) const noexcept;
    constexpr bool compare_exchange_weak(value_type&, value_type,
                                         memory_order, memory_order) const noexcept;
    constexpr bool compare_exchange_strong(value_type&, value_type,
                                           memory_order, memory_order) const noexcept;
    constexpr bool compare_exchange_weak(value_type&, value_type,
                                         memory_order = memory_order::seq_cst) const noexcept;
    constexpr bool compare_exchange_strong(value_type&, value_type,
                                           memory_order = memory_order::seq_cst) const noexcept;

    constexpr value_type fetch_add(difference_type,
                                   memory_order = memory_order::seq_cst) const noexcept;
    constexpr value_type fetch_sub(difference_type,
                                   memory_order = memory_order::seq_cst) const noexcept;
    constexpr value_type fetch_max(value_type,
                                   memory_order = memory_order::seq_cst) const noexcept;
    constexpr value_type fetch_min(value_type,
                                   memory_order = memory_order::seq_cst) const noexcept;

    constexpr void store_add(difference_type,
                             memory_order = memory_order::seq_cst) const noexcept;
    constexpr void store_sub(difference_type,
                             memory_order = memory_order::seq_cst) const noexcept;
    constexpr void store_max(value_type,
                             memory_order = memory_order::seq_cst) const noexcept;
    constexpr void store_min(value_type,
                             memory_order = memory_order::seq_cst) const noexcept;

    constexpr value_type operator++(int) const noexcept;
    constexpr value_type operator--(int) const noexcept;
    constexpr value_type operator++() const noexcept;
    constexpr value_type operator--() const noexcept;
    constexpr value_type operator+=(difference_type) const noexcept;
    constexpr value_type operator-=(difference_type) const noexcept;

    constexpr void wait(value_type, memory_order = memory_order::seq_cst) const noexcept;
    constexpr void notify_one() const noexcept;
    constexpr void notify_all() const noexcept;
    constexpr [[redoc("^>")]]pointer-type* address() const noexcept;
  };
}
[codeblock:end]

[para]
[:en] Descriptions are provided below only for members that differ from the
primary template.
[:zh_CN] 下文仅为与主模板不同的成员提供描述。

[para]
[:en] The following operations perform arithmetic computations.
[:zh_CN] 以下各操作实施算术运算。

[:en] The correspondence among key, operator, and computation is specified in
[#:tab#atomic.types.pointer.comp].
[:zh_CN] [#:tab#atomic.types.pointer.comp] 给出关键词、运算符和运算之间的对应关系。

[%@lib@member fetch_add[!atomic_ref<T*>]]
[%@lib@member fetch_sub[!atomic_ref<T*>]]
[%@lib@member fetch_max[!atomic_ref<T*>]]
[%@lib@member fetch_min[!atomic_ref<T*>]]
[codeblock:declaration]
constexpr value_type fetch_key[[redoc("^<3c")]](difference_type operand,
                     memory_order order = memory_order::seq_cst) const noexcept;
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`is_const_v<[^pointer-type]>] is [`false].
[:zh_CN] [`is_const_v<[^pointer-type]>] 为 [`false]。

[para:mandates]
[:en] [`remove_pointer_t<[^pointer-type]>] is a complete object type.
[:zh_CN] [`remove_pointer_t<[^pointer-type]>] 为完整对象类型。

[para:effects]
[:en] Atomically replaces the value referenced by [`*ptr] with the result of the
computation applied to the value referenced by [`*ptr] and the given [`operand].
[:zh_CN] 原子地将由 [`*ptr] 所引用的值替换为对由 [`*ptr] 所引用的值和给定的
[`operand] 实施运算的结果。

[:en] Memory is affected according to the value of [`order].
[:zh_CN] 根据 [`order] 的值影响内存。

[:en] These operations are atomic read-modify-write operations ([#intro.races]).
[:zh_CN] 这些操作是原子性读-改-写操作（[#intro.races]）。

[para:returns]
[:en] Atomically, the value referenced by [`*ptr] immediately before the effects.
[:zh_CN] 原子地返回紧接其效果生效前 [`*ptr] 所引用的值。

[para:remarks]
[:en] The result may be an undefined address, but the operations otherwise have
no undefined behavior.
[:zh_CN] 结果可能是未定义的地址，但除此之外该操作没有未定义的行为。

[para]
[:en] For [`fetch_max] and [`fetch_min], the maximum and minimum computation is
performed as if by [`max] and [`min] algorithms ([#alg.min.max]), respectively,
with the object value and the first parameter as the arguments.
[:zh_CN] [`fetch_max] 和 [`fetch_min] 分别如同以对象的值和第一个形参作为实参，
通过 [`max] 和 [`min] 算法（[#alg.min.max]）实施最大值和最小值运算。

[begin:note]
[:en] If the pointers point to different complete objects (or subobjects thereof),
the [`<] operator does not establish a strict weak ordering
([#:tab#cpp17.lessthancomparable], [#expr.rel]).
[:zh_CN] 当指针指向不同的完整对象（或其子对象）时，[`<] 运算符并不设立严格弱序
（[#:tab#cpp17.lessthancomparable]，[#expr.rel]）。
[end:note]
[div:end]

[%@lib@member store_add[!atomic_ref<T*>]]
[%@lib@member store_sub[!atomic_ref<T*>]]
[%@lib@member store_max[!atomic_ref<T*>]]
[%@lib@member store_min[!atomic_ref<T*>]]
[codeblock:declaration]
constexpr void store_key[[redoc("^<3c")]]([[redoc("[=seeabove]")]] operand,
                     memory_order order = memory_order::seq_cst) const noexcept;
[codeblock:end]

[div:description]
[para:mandates]
[:en] [`T] is a complete object type.
[:zh_CN] [`T] 为完整对象类型。

[para:expects]
[:en] [`order] is [`memory_order::relaxed], [`memory_order::release], or [`memory_order::seq_cst].
[:zh_CN] [`order] 为 [`memory_order::relaxed]、[`memory_order::release] 或 [`memory_order::seq_cst].

[para:effects]
[:en] Atomically replaces the value referenced by [`*ptr] with the result of the
computation applied to the value referenced by [`*ptr] and the given [`operand].
[:zh_CN] 原子地将由 [`*ptr] 所引用的值替换为对由 [`*ptr] 所引用的值和给定的
[`operand] 实施运算的结果。

[:en] Memory is affected according to the value of [`order].
[:zh_CN] 根据 [`order] 的值影响内存。

[:en] These operations are atomic modify-write operations ([#atomics.order]).
[:zh_CN] 这些操作是原子性改-写操作（[#atomics.order]）。

[para:remarks]
[:en] The result may be an undefined address, but the operations otherwise have
no undefined behavior.
[:zh_CN] 结果可能是未定义的地址，但除此之外该操作没有未定义的行为。

[para]
[:en] For [`store_max] and [`store_min], the maximum and minimum computation is
performed as if by [`max] and [`min] algorithms ([#alg.min.max]), respectively,
with [`*ptr] and the first parameter as the arguments.
[:zh_CN] [`store_max] 和 [`store_min] 分别如同以 [`*ptr] 和第一个形参作为实参，
通过 [`max] 和 [`min] 算法（[#alg.min.max]）实施最大值和最小值运算。

[begin:note]
[:en] If the pointers point to different complete objects (or subobjects thereof),
the [`<] operator does not establish a strict weak ordering
([#:tab#cpp17.lessthancomparable], [#expr.rel]).
[:zh_CN] 当指针指向不同的完整对象（或其子对象）时，[`<] 运算符并不设立严格弱序
（[#:tab#cpp17.lessthancomparable]，[#expr.rel]）。
[end:note]
[div:end]

[%@lib@member operator+=[!atomic_ref<T*>]]
[%@lib@member operator-=[!atomic_ref<T*>]]
[codeblock:declaration]
constexpr value_type operator [[redoc("^>")]]op=(difference_type operand) const noexcept;
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`is_const_v<[^pointer-type]>] is [`false].
[:zh_CN] [`is_const_v<[^pointer-type]>] 为 [`false]。

[para:effects]
[:en] Equivalent to: [`return fetch_[^key](operand) [^op] operand;]
[:zh_CN] 等价于：[`return fetch_[^key](operand) [^op] operand;]
[div:end]
