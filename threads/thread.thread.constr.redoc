[section#thread.thread.constr
    [:en] [`thread] constructors
    [:zh_CN] [`thread] 构造函数
]

[%@library thread[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
thread() noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Constructs a [`thread] object that does not represent a thread of
execution.
[:zh_CN] 构造并不代表执行线程的 [`thread] 对象。

[para:postconditions]
[:en] [`get_id() == id()].
[:zh_CN] [`get_id() == id()]。
[exit:description]

[%@library thread[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
template <class F, class... Args> explicit thread(F&& f, Args&&... args);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`F] and each [`Ti] in [`Args] shall satisfy the [`MoveConstructible]
requirements.
[:zh_CN] [`F] 和 [`Args] 中的每个 [`Ti] 都应当满足 [`MoveConstructible] 规定。

[:en]
[`[*INVOKE]([*DECAY_COPY](std::forward<F>(f)), [*DECAY_COPY](std::forward<Args>(args))...)]
([#func.require]) shall be a valid expression.
[:zh_CN]
[`[*INVOKE]([*DECAY_COPY](std::forward<F>(f)), [*DECAY_COPY](std::forward<Args>(args))...)]
（[#func.require]）应当是有效表达式。

[para:remarks]
[:en] This constructor shall not participate in overload resolution if
[`decay_t<F>] is the same type as [`std::thread].
[:zh_CN] 当 [`decay_t<F>] 是与 [`std::thread] 相同的类型时，这个构造函数不能参与
重载决议。

[para:effects]
[:en] Constructs an object of type [`thread].
[:zh_CN] 构造 [`thread] 类型的对象。

[:en] The new thread of execution executes
[`[*INVOKE]([*DECAY_COPY](std::forward<F>(f)), [*DECAY_COPY](std::forward<Args>(args))...)]
with the calls to [`[*DECAY_COPY]] being evaluated in the constructing thread.
[:zh_CN] 新的执行线程执行
[`[*INVOKE]([*DECAY_COPY](std::forward<F>(f)), [*DECAY_COPY](std::forward<Args>(args))...)]
，其中对 [`[*DECAY_COPY]] 的调用在进行构造的线程中求值。

[:en] Any return value from this invocation is ignored.
[:zh_CN] 这次调用的任何返回值都被忽略。

[enter:note]
[:en] This implies that any exceptions not thrown from the invocation of the
copy of [`f] will be thrown in the constructing thread, not the new thread.
[:zh_CN] 这意味着不是由对 [`f] 的副本的调用苏哦跑出的任何异常，都是在进行构造的
线程中抛出，而非在新线程中抛出的。
[exit:note]

[:en] If the invocation of
[`[*INVOKE]([*DECAY_COPY](std::forward<F>(f)), [*DECAY_COPY](std::forward<Args>(args))...)]
terminates with an uncaught exception, [`terminate] shall be called.
[:zh_CN] 如果对
[`[*INVOKE]([*DECAY_COPY](std::forward<F>(f)), [*DECAY_COPY](std::forward<Args>(args))...)]
的调用以未捕获的异常终止，则应当调用 [`terminate]。

[para:sync]
[:en] The completion of the invocation of the constructor synchronizes with the
beginning of the invocation of the copy of [`f].
[:zh_CN] 对构造函数调用的完成，同步于对 [`f] 的副本的调用的开始。

[para:postconditions]
[:en] [`get_id() != id()].
[:zh_CN] [`get_id() != id()]。

[:en] [`*this] represents the newly started thread.
[:zh_CN] [`*this] 代表新开始的线程。

[para:throws]
[:en] [`system_error] if unable to start the new thread.
[:zh_CN] 若无法启动新线程则抛出 [`system_error]。

[para:errors]
[list]
[item]
[:en] [`resource_unavailable_try_again] [=--] the system lacked the necessary
resources to create another thread, or the system-imposed limit on the number of
threads in a process would be exceeded.
[:zh_CN] [`resource_unavailable_try_again] [=--] 系统缺乏必要的资源以创建另一个
线程，或者超过了系统所施加的进程中的线程数的限额。
[list:end]
[exit:description]

[%@library thread[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
thread(thread&& x) noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Constructs an object of type [`thread] from [`x], and sets [`x] to a
default constructed state.
[:zh_CN] 从 [`x] 构造 [`thread] 类型的对象，并将 [`x] 设置为默认构造的状态。

[para:postconditions]
[:en] [`x.get_id() == id()] and [`get_id()] returns the value of [`x.get_id()]
prior to the start of construction.
[:zh_CN] [`x.get_id() == id()]，且 [`get_id()] 返回开始构造之前的 [`x.get_id()]
值。
[exit:description]
