[section#thread.thread.constr
    [:en] Constructors
    [:zh_CN] 构造函数
]

[%@lib@ctor thread]
[codeblock:declaration]
thread() noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] The object does not represent a thread of execution.
[:zh_CN] 该对象不代表执行线程。

[para:ensures]
[:en] [`get_id() == id()].
[:zh_CN] [`get_id() == id()]。
[div:end]

[%@lib@ctor thread]
[codeblock:declaration]
template<class F, class... Args> explicit thread(F&& f, Args&&... args);
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`remove_cvref_t<F>] is not the same type as [`thread].
[:zh_CN] [`remove_cvref_t<F>] 与 [`thread] 不是相同的类型。

[para:mandates]
[:en] The following are all [`true]:
[:zh_CN] 以下各项均为 [`true]：
[list]
[item]
[:en@~] [`is_constructible_v<decay_t<F>, F>],
[:zh_CN@~] [`is_constructible_v<decay_t<F>, F>]，
[item]
[:en@~] [`(is_constructible_v<decay_t<Args>, Args> && ...)],
[:zh_CN@~] [`(is_constructible_v<decay_t<Args>, Args> && ...)]，
[item]
[:en@~] [`is_move_constructible_v<decay_t<F>>],
[:zh_CN@~] [`is_move_constructible_v<decay_t<F>>]，
[item]
[:en@~] [`(is_move_constructible_v<decay_t<Args>> && ...)], and
[:zh_CN@~] [`(is_move_constructible_v<decay_t<Args>> && ...)]，以及
[item]
[:en@~] [`is_invocable_v<decay_t<F>, decay_t<Args>...>].
[:zh_CN@~] [`is_invocable_v<decay_t<F>, decay_t<Args>...>]。
[list:end]

[para:expects]
[:en] [`decay_t<F>] and each type in [`decay_t<Args>] meet the
[^:oc MoveConstructible] requirements.
[:zh_CN] [`decay_t<F>] 和 [`decay_t<Args>] 中的每个类型都满足
[^:oc MoveConstructible] 的规定。

[para:effects]
[:en] The new thread of execution executes
[:zh_CN] 新的执行线程执行
[codeblock:notation]
invoke([^decay-copy](std::forward<F>(f)), [^decay-copy](std::forward<Args>(args))...)
[codeblock:end]
[:en@~] with the calls to [`[^decay-copy]] being evaluated in the constructing
thread.
[:zh_CN@~] 其中对 [`[^decay-copy]] 的调用在进行构造的线程中求值。

[:en] Any return value from this invocation is ignored.
[:zh_CN] 这次调用的任何返回值都被忽略。

[begin:note]
[:en] This implies that any exceptions not thrown from the invocation of the
copy of [`f] will be thrown in the constructing thread, not the new thread.
[:zh_CN] 这意味着不是由对 [`f] 的副本的调用苏哦跑出的任何异常，都是在进行构造的
线程中抛出，而非在新线程中抛出的。
[end:note]

[:en] If the invocation of [`invoke] terminates with an uncaught exception,
[`terminate] is called.
[:zh_CN] 如果对 [`invoke] 的调用以未捕获的异常终止，则调用 [`terminate]。

[para:sync]
[:en] The completion of the invocation of the constructor synchronizes with the
beginning of the invocation of the copy of [`f].
[:zh_CN] 对构造函数调用的完成，同步于对 [`f] 的副本的调用的开始。

[para:ensures]
[:en] [`get_id() != id()].
[:zh_CN] [`get_id() != id()]。

[:en] [`*this] represents the newly started thread.
[:zh_CN] [`*this] 代表新开始的线程。

[para:throws]
[:en] [`system_error] if unable to start the new thread.
[:zh_CN] 若无法启动新线程则抛出 [`system_error]。

[para:errors]
[list]
[item]
[:en] [`resource_unavailable_try_again] [=--] the system lacked the necessary
resources to create another thread, or the system-imposed limit on the number of
threads in a process would be exceeded.
[:zh_CN] [`resource_unavailable_try_again] [=--] 系统缺乏必要的资源以创建另一个
线程，或者超过了系统所施加的进程中的线程数的限额。
[list:end]
[div:end]

[%@lib@ctor thread]
[codeblock:declaration]
thread(thread&& x) noexcept;
[codeblock:end]

[div:description]
[para:ensures]
[:en] [`x.get_id() == id()] and [`get_id()] returns the value of [`x.get_id()]
prior to the start of construction.
[:zh_CN] [`x.get_id() == id()]，且 [`get_id()] 返回开始构造之前的 [`x.get_id()]
值。
[div:end]
