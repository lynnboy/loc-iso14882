[section#thread.condvarany.wait
    [:en] Noninterruptible waits
    [:zh_CN] 不可中断等待
]

[%@lib@member wait[!condition_variable_any]]
[codeblock:declaration]
template<class Lock>
  void wait(Lock& lock);
[codeblock:end]

[div:description]
[para:effects]
[list]
[item]
[:en] Atomically calls [`lock.unlock()] and blocks on [`*this].
[:zh_CN] 原子地调用 [`lock.unblock()] 并在 [`*this] 上阻塞。

[item]
[:en] When unblocked, calls [`lock.lock()] (possibly blocking on the lock) and
returns.
[:zh_CN] 当解除阻塞时，调用 [`lock.lock()]（可能在锁上阻塞），然后返回。

[item]
[:en] The function will unblock when signaled by a call to [`notify_one()], a
call to [`notify_all()], or spuriously.
[:zh_CN] 该函数将于某次调用 [`notify_one()] 或调用 [`notify_all()] 而被通知时
解除阻塞，或者假性地解除阻塞。
[list:end]

[para:remarks]
[:en] If the function fails to meet the postcondition, [`terminate()] shall be
called ([#except.terminate]).
[:zh_CN] 如果函数无法达成其后条件，则应当调用 [`terminate()]
（[#except.terminate]）。

[begin:note]
[:en] This can happen if the re-locking of the mutex throws an exception.
[:zh_CN] 这可能发生于对互斥体的重新锁定抛出了异常的情况。
[end:note]

[para:ensures]
[:en] [`lock] is locked by the calling thread.
[:zh_CN] [`lock] 被调用方线程锁定。

[para:throws]
[:en] Nothing.
[:zh_CN] 无。
[div:end]

[%@lib@member wait[!condition_variable_any]]
[codeblock:declaration]
template<class Lock, class Predicate>
  void wait(Lock& lock, Predicate pred);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：

[codeblock:notation]
while (!pred())
  wait(lock);
[codeblock:end]
[div:end]

[%@lib@member wait_until[!condition_variable_any]]
[codeblock:declaration]
template<class Lock, class Clock, class Duration>
  cv_status wait_until(Lock& lock, const chrono::time_point<Clock, Duration>& abs_time);
[codeblock:end]

[div:description]
[para:effects]
[list]
[item]
[:en] Atomically calls [`lock.unlock()] and blocks on [`*this].
[:zh_CN] 原子地调用 [`lock.unblock()] 并在 [`*this] 上阻塞。

[item]
[:en] When unblocked, calls [`lock.lock()] (possibly blocking on the lock) and
returns.
[:zh_CN] 当解除阻塞时，调用 [`lock.lock()]（可能在锁上阻塞），然后返回。

[item]
[:en] The function will unblock when signaled by a call to [`notify_one()], a
call to [`notify_all()], expiration of the absolute timeout
([#thread.req.timing]) specified by [`abs_time], or spuriously.
[:zh_CN] 该函数将于某次调用 [`notify_one()]，调用 [`notify_all()]，或者超过由
[`abs_time] 所指定的绝对超时（[#thread.req.timing]）而被通知时解除阻塞，或者假性
地解除阻塞。

[item]
[:en] If the function exits via an exception, [`lock.lock()] shall be called
prior to exiting the function.
[:zh_CN] 如果函数以抛出异常退出，则应该在退出函数之前调用 [`lock.lock()]。
[list:end]

[para:remarks]
[:en] If the function fails to meet the postcondition, [`terminate()] shall be
called ([#except.terminate]).
[:zh_CN] 如果函数无法达成其后条件，则应当调用 [`terminate()]
（[#except.terminate]）。

[begin:note]
[:en] This can happen if the re-locking of the mutex throws an exception.
[:zh_CN] 这可能发生于对互斥体的重新锁定抛出了异常的情况。
[end:note]

[para:ensures]
[:en] [`lock] is locked by the calling thread.
[:zh_CN] [`lock] 被调用方线程锁定。

[para:returns]
[:en] [`cv_status::timeout] if the absolute timeout ([#thread.req.timing])
specified by [`abs_time] expired, otherwise [`cv_status::no_timeout].
[:zh_CN] 当超过由 [`abs_time] 所指定的绝对超时（[#thread.req.timing]）时返回
[`cv_status::timeout]，否则返回 [`cv_status::no_timeout]。

[para:throws]
[:en] Timeout-related exceptions ([#thread.req.timing]).
[:zh_CN] 超时相关异常（[#thread.req.timing]）。
[div:end]

[%@lib@member wait_for[!condition_variable_any]]
[codeblock:declaration]
template<class Lock, class Rep, class Period>
  cv_status wait_for(Lock& lock, const chrono::duration<Rep, Period>& rel_time);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：

[codeblock:notation]
return wait_until(lock, chrono::steady_clock::now() + rel_time);
[codeblock:end]

[para:returns]
[:en] [`cv_status::timeout] if the relative timeout ([#thread.req.timing])
specified by [`rel_time] expired, otherwise [`cv_status::no_timeout].
[:zh_CN] 当超过由 [`rel_time] 所指定的相对超时（[#thread.req.timing]）时返回
[`cv_status::timeout]，否则返回 [`cv_status::no_timeout]。

[para:remarks]
[:en] If the function fails to meet the postcondition, [`terminate()] shall be
called ([#except.terminate]).
[:zh_CN] 如果函数无法达成其后条件，则应当调用 [`terminate()]
（[#except.terminate]）。

[begin:note]
[:en] This can happen if the re-locking of the mutex throws an exception.
[:zh_CN] 这可能发生于对互斥体的重新锁定抛出了异常的情况。
[end:note]

[para:ensures]
[:en] [`lock] is locked by the calling thread.
[:zh_CN] [`lock] 被调用方线程锁定。

[para:throws]
[:en] Timeout-related exceptions ([#thread.req.timing]).
[:zh_CN] 超时相关异常（[#thread.req.timing]）。
[div:end]

[%@lib@member wait_until[!condition_variable_any]]
[codeblock:declaration]
template<class Lock, class Clock, class Duration, class Predicate>
  bool wait_until(Lock& lock, const chrono::time_point<Clock, Duration>& abs_time, Predicate pred);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：

[codeblock:notation]
while (!pred())
  if (wait_until(lock, abs_time) == cv_status::timeout)
    return pred();
return true;
[codeblock:end]

[para]
[begin:note]
[:en] There is no blocking if [`pred()] is initially [`true], or if the timeout
has already expired.
[:zh_CN] 若 [`pred()] 开始时为 [`true]，或者已经超时，则不会发生阻塞。
[end:note]

[para]
[begin:note]
[:en] The returned value indicates whether the predicate evaluated to
[`true] regardless of whether the timeout was triggered.
[:zh_CN] 无论是否引发了超时，其返回值都标明了断言是否求值为 [`true]。
[end:note]
[div:end]

[%@lib@member wait_for[!condition_variable_any]]
[codeblock:declaration]
template<class Lock, class Rep, class Period, class Predicate>
  bool wait_for(Lock& lock, const chrono::duration<Rep, Period>& rel_time, Predicate pred);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：

[codeblock:notation]
return wait_until(lock, chrono::steady_clock::now() + rel_time, std::move(pred));
[codeblock:end]
[div:end]
