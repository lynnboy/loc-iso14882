[section#stopcallback.inplace.general
    [:en] General
    [:zh_CN] 概述
]

[codeblock:synopsis]
namespace std {
  template<class CallbackFn>
  class inplace_stop_callback {
  public:
    using callback_type = CallbackFn;

    // [:en] [#stopcallback.inplace.cons], constructors and destructor \
    [:zh_CN] [#stopcallback.inplace.cons]，构造函数和析构函数
    template<class Initializer>
      explicit inplace_stop_callback(inplace_stop_token st, Initializer&& init)
        noexcept(is_nothrow_constructible_v<CallbackFn, Initializer>);
    ~inplace_stop_callback();

    inplace_stop_callback(inplace_stop_callback&&) = delete;
    inplace_stop_callback(const inplace_stop_callback&) = delete;
    inplace_stop_callback& operator=(inplace_stop_callback&&) = delete;
    inplace_stop_callback& operator=(const inplace_stop_callback&) = delete;

  private:
    CallbackFn [[redoc("*>")]]callback-fn;                                     // [=expos]
  };

  template<class CallbackFn>
    inplace_stop_callback(inplace_stop_token, CallbackFn)
      -> inplace_stop_callback<CallbackFn>;
}
[codeblock:end]

[para:mandates]
[:en] [`CallbackFn] satisfies both [`:c invocable] and [`:c destructible].
[:zh_CN] [`CallbackFn] 同时满足 [`:c invocable] 和 [`:c destructible]。

[para:remarks]
[:en] For a type [`Initializer], if
[:zh_CN] 对于类型 [`Initializer]，如果满足了
[codeblock]
[[redoc("*:c>")]]stoppable-callback-for<CallbackFn, inplace_stop_token, Initializer>
[codeblock:end]
[:en@~] is satisfied, then
[:zh_CN@~] 那么就构成
[codeblock]
[[redoc("*:c>")]]stoppable-callback-for<CallbackFn, inplace_stop_token, Initializer>
[codeblock:end]
[:en@~] is modeled.
[:zh_CN@~] 。

[:en] For an [`inplace_stop_callback<CallbackFn>] object, the exposition-only
[*callback-fn] member is its associated callback function ([#stoptoken.concepts]).
[:zh_CN] 对于 [`inplace_stop_callback<CallbackFn>] 对象，仅用于阐释的成员
[*callback-fn] 是其关联回调函数（[#stoptoken.concepts]）。
