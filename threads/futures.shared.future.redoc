[section#futures.shared.future
    [:en] Class template [`shared_future]
    [:zh_CN] 类模板 [`shared_future]
]

[para]
[:en] The class template [`shared_future] defines a type for asynchronous return
objects which may share their shared state with other asynchronous return
objects.
[:zh_CN] 类模板 [`shared_future] 为异步返回对象定义了一种类型，它可与其他异步
返回对象共享其共享状态。

[:en] A default-constructed [`shared_future] object has no shared state.
[:zh_CN] 默认构造的 [`shared_future] 对象没有共享状态。

[:en] A [`shared_future] object with shared state can be created by conversion
from a [`future] object and shares its shared state with the original
asynchronous provider ([#futures.state]) of the shared state.
[:zh_CN] 带有共享状态的 [`shared_future] 对象，可通过从 [`future] 对象进行转换并
来创建，共享原来的异步提供者（[#futures.state]）的共享状态。

[:en] The result (value or exception) of a [`shared_future] object can be set by
calling a respective function on an object that shares the same shared state.
[:zh_CN] [`shared_future] 对象的结果（值或异常）可以通过在共享相同的共享状态的
对象上调用相应的函数来进行设置。

[para]
[begin:note]
[:en] Member functions of [`shared_future] do not synchronize with themselves,
but they synchronize with the shared state..
[:zh_CN] [`shared_future] 的各成员函数各自互相之间并不进行同步，但与共享状态之间
同步。
[end:note]

[para]
[:en] The effect of calling any member function other than the destructor, the
move-assignment operator, the copy-assignment operator, or [`valid] on a
[`shared_future] object for which [`valid() == false] is undefined.
[:zh_CN] 对于 [`valid() == false] 的 [`shared_future] 对象，调用除了析构函数、
移动赋值运算符、复制赋值运算符或 [`valid] 之外的任何成员函数的效果是未定义的。

[begin:note]
[:en] It is valid to copy or move from a [`shared_future] object for which
[`valid() == false].
[:zh_CN] 从 [`valid() == false] 的 [`shared_future] 对象进行复制或移动是有效的。
[end:note]

[begin:note]
[:en] Implementations should detect this case and throw an object of type
[`future_error] with an error condition of [`future_errc::no_state].
[:zh_CN] 各实现最好检查这种情况，并抛出带有 [`future_errc::no_state] 错误条件的
[`future_error] 类型的对象；
[end:note]

[%@library shared_future]
[codeblock:synopsis]
namespace std {
  template<class R>
  class shared_future {
  public:
    shared_future() noexcept;
    shared_future(const shared_future& rhs) noexcept;
    shared_future(future<R>&&) noexcept;
    shared_future(shared_future&& rhs) noexcept;
    ~shared_future();
    shared_future& operator=(const shared_future& rhs) noexcept;
    shared_future& operator=(shared_future&& rhs) noexcept;

    // [:en] retrieving the value \
       [:zh_CN] 获取值
    [[redoc("=seebelow")]] get() const;

    // [:en] functions to check state \
       [:zh_CN] 检查状态的函数
    bool valid() const noexcept;

    void wait() const;
    template<class Rep, class Period>
      future_status wait_for(const chrono::duration<Rep, Period>& rel_time) const;
    template<class Clock, class Duration>
      future_status wait_until(const chrono::time_point<Clock, Duration>& abs_time) const;
  };
}
[codeblock:end]

[para]
[:en] The implementation shall provide the template [`shared_future] and two
specializations, [`shared_future<R&>] and [`shared_future<void>].
[:zh_CN] 实现应当提供模板 [`shared_future] 及其两个特化式 [`shared_future<R&>]
和 [`shared_future<void>]。

[:en] These differ only in the return type and return value of the member
function [`get], as set out in its description, below.
[:zh_CN] 它们仅在成员函数 [`get] 的返回类型和返回值上有所区别，如下文中它的说明
所示。

[%@library shared_future[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
shared_future() noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Constructs an [+empty[%empty [`shared_future] object]] [`shared_future]
object that does not refer to a shared state.
[:zh_CN] 构造一个[+空[%空 [`shared_future] 对象]] [`shared_future] 对象，它不
指代任何共享状态。

[para:ensures]
[:en] [`valid() == false].
[:zh_CN] [`valid() == false]。
[div:end]

[%@library shared_future[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
shared_future(const shared_future& rhs) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Constructs a [`shared_future] object that refers to the same shared state
as [`rhs] (if any).
[:zh_CN] 构造一个 [`shared_future] 对象，使其指代与 [`rhs] 相同的共享状态
（如果有）。

[para:ensures]
[:en] [`valid()] returns the same value as [`rhs.valid()].
[:zh_CN] [`valid()] 返回与 [`rhs.valid()] 相同的值。
[div:end]

[%@library shared_future[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
shared_future(future<R>&& rhs) noexcept;
shared_future(shared_future&& rhs) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Move constructs a [`shared_future] object that refers to the shared state
that was originally referred to by [`rhs] (if any).
[:zh_CN] 移动构造一个 [`shared_future] 对象，使其指代由 [`rhs] 原来所指代的共享
状态（如果有）。

[para:ensures]
[list]
[item]
[:en] [`valid()] returns the same value as [`rhs.valid()] prior to the
constructor invocation.
[:zh_CN] [`valid()] 返回 [`rhs.valid()] 在构造函数调用前的值。
[item]
[:en] [`rhs.valid() == false].
[:zh_CN] [`rhs.valid() == false]。
[list:end]
[div:end]

[%@library shared_future[![:en]destructor[:zh_CN]析构函数]]
[codeblock:declaration]
~shared_future();
[codeblock:end]

[div:description]
[para:effects]
[list]
[item]
[:en] Releases any shared state ([#futures.state]);
[:zh_CN] 释放任何共享状态（[#futures.state]）；
[item]
[:en] destroys [`*this].
[:zh_CN] 销毁 [`*this]。
[list:end]
[div:end]

[%@library operator=[!shared_future]]
[%@library shared_future[!operator=]]
[codeblock:declaration]
shared_future& operator=(shared_future&& rhs) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[list]
[item]
[:en] Releases any shared state ([#futures.state]);
[:zh_CN] 释放任何共享状态（[#futures.state]）；
[item]
[:en] move assigns the contents of [`rhs] to [`*this].
[:zh_CN] 将 [`rhs] 的内容移动赋值给 [`*this]。
[list:end]

[para:ensures]
[list]
[item]
[:en] [`valid()] returns the same value as [`rhs.valid()] prior to the
assignment.
[:zh_CN] [`valid()] 返回 [`rhs.valid()] 在赋值前的值。
[item]
[:en] [`rhs.valid() == false].
[:zh_CN] [`rhs.valid() == false]。
[list:end]
[div:end]

[%@library operator=[!shared_future]]
[%@library shared_future[!operator=]]
[codeblock:declaration]
shared_future& operator=(const shared_future& rhs) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[list]
[item]
[:en] Releases any shared state ([#futures.state]);
[:zh_CN] 释放任何共享状态（[#futures.state]）；
[item]
[:en] assigns the contents of [`rhs] to [`*this].
[:zh_CN] 将 [`rhs] 的内容移动赋值给 [`*this]。

[begin:note]
[:en] As a result, [`*this] refers to the same shared state as [`rhs] (if any).
[:zh_CN] 其结果是 [`*this] 指代与 [`rhs] 相同的共享状态（如果有）。
[list:end]

[para:ensures]
[:en] [`valid() == rhs.valid()].
[:zh_CN] [`valid() == rhs.valid()]。
[div:end]

[%@library get[!shared_future]]
[%@library shared_future[!get]]
[codeblock:declaration]
const R& shared_future::get() const;
R& shared_future<R&>::get() const;
void shared_future<void>::get() const;
[codeblock:end]

[div:description]
[para]
[begin:note]
[:en] As described above, the template and its two required specializations
differ only in the return type and return value of the member function [`get].
[:zh_CN] 如上所述，该模板及其两个要求的特化式仅在成员函数 [`get] 的返回类型和
返回值上有所区别。
[end:note]

[para]
[begin:note]
[:en] Access to a value object stored in the shared state is unsynchronized, so
programmers should apply only those operations on [`R] that do not introduce a
data race ([#intro.multithread]).
[:zh_CN] 访问共享状态中存储的值对象是没有同步的，因此程序员应当仅在 [`R] 上进行
不会引入数据竞争（[#intro.multithread]）的操作。
[end:note]

[para:effects]
[:en] [`wait()]s until the shared state is ready, then retrieves the value
stored in the shared state;
[:zh_CN] [`wait()] 等待直到共享状态就绪，然后获取共享状态中所存储的值；

[para:returns]
[list]
[item]
[:en] [`shared_future::get()] returns a const reference to the value stored in
the object[=']s shared state.
[:zh_CN] [`shared_future::get()] 返回指代对象的共享状态中所存储的值的 [`const]
引用。

[begin:note]
[:en] Access through that reference after the shared state has been destroyed
produces undefined behavior; this can be avoided by not storing the reference in
any storage with a greater lifetime than the [`shared_future] object that
returned the reference.
[:zh_CN] 在共享状态已经销毁后通过这个引用进行访问将产生未定义的行为；可以通过
不将这个引用存储到任何具有比返回该引用的 [`shared_future] 对象具有更长生存期的
存储中予以避免。
[end:note]

[item]
[:en] [`shared_future<R&>::get()] returns the reference stored as value in the
object[=']s shared state.
[:zh_CN] [`shared_future<R&>::get()] 返回对象的共享状态中以值的形式所存储的引用。

[item]
[:en] [`shared_future<void>::get()] returns nothing.
[:zh_CN] [`shared_future<void>::get()] 不返回值。
[list:end]

[para:throws]
[:en] The stored exception, if an exception was stored in the shared state.
[:zh_CN] 如果共享状态中存储了异常，则抛出所存储的异常。
[div:end]

[%@library valid[!shared_future]]
[%@library shared_future[!valid]]
[codeblock:declaration]
bool valid() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`true] only if [`*this] refers to a shared state.
[:zh_CN] 仅当 [`*this] 指代了共享状态时返回 [`true]。
[div:end]

[%@library wait[!shared_future]]
[%@library shared_future[!wait]]
[codeblock:declaration]
void wait() const;
[codeblock:end]

[div:description]
[para:effects]
[:en] Blocks until the shared state is ready.
[:zh_CN] 阻塞直到共享状态就绪。
[div:end]

[%@library wait_for[!shared_future]]
[%@library shared_future[!wait_for]]
[codeblock:declaration]
template<class Rep, class Period>
  future_status wait_for(const chrono::duration<Rep, Period>& rel_time) const;
[codeblock:end]

[div:description]
[para:effects]
[:en] None if the shared state contains a deferred function ([#futures.async]),
otherwise blocks until the shared state is ready or until the relative timeout
([#thread.req.timing]) specified by [`rel_time] has expired.
[:zh_CN] 如果共享状态中存储了延迟函数（[#futures.async]）则没有效果，否则阻塞
直到共享状态就绪或者直到超过由 [`rel_time] 所指定的相对超时
（[#thread.req.timing]）。

[para:returns]
[list]
[item]
[:en] [`future_status::deferred] if the shared state contains a deferred
function.
[:zh_CN] 如果共享状态中存储了延迟函数则返回 [`future_status::deferred]。

[item]
[:en] [`future_status::ready] if the shared state is ready.
[:zh_CN] 如果共享状态就绪则返回 [`future_status::ready]。

[item]
[:en] [`future_status::timeout] if the function is returning because the
relative timeout ([#thread.req.timing]) specified by [`rel_time] has expired.
[:zh_CN] 如果函数由于超过由 [`rel_time] 所指定的相对超时（[#thread.req.timing]）
而返回，则返回 [`future_status::timeout]。
[list:end]

[para:throws]
[:en] timeout-related exceptions ([#thread.req.timing]).
[:zh_CN] 超时相关异常（[#thread.req.timing]）。
[div:end]

[%@library wait_until[!shared_future]]
[%@library shared_future[!wait_until]]
[codeblock:declaration]
template<class Clock, class Duration>
  future_status wait_until(const chrono::time_point<Clock, Duration>& abs_time) const;
[codeblock:end]

[div:description]
[para:effects]
[:en] None if the shared state contains a deferred function ([#futures.async]),
otherwise blocks until the shared state is ready or until the absolute timeout
([#thread.req.timing]) specified by [`abs_time] has expired.
[:zh_CN] 如果共享状态中存储了延迟函数（[#futures.async]）则没有效果，否则阻塞
直到共享状态就绪或者直到超过由 [`abs_time] 所指定的绝对超时
（[#thread.req.timing]）。

[para:returns]
[list]
[item]
[:en] [`future_status::deferred] if the shared state contains a deferred
function.
[:zh_CN] 如果共享状态中存储了延迟函数则返回 [`future_status::deferred]。

[item]
[:en] [`future_status::ready] if the shared state is ready.
[:zh_CN] 如果共享状态就绪则返回 [`future_status::ready]。

[item]
[:en] [`future_status::timeout] if the function is returning because the
absolute timeout ([#thread.req.timing]) specified by [`abs_time] has expired.
[:zh_CN] 如果函数由于超过由 [`abs_time] 所指定的绝对超时（[#thread.req.timing]）
而返回，则返回 [`future_status::timeout]。
[list:end]

[para:throws]
[:en] timeout-related exceptions ([#thread.req.timing]).
[:zh_CN] 超时相关异常（[#thread.req.timing]）。
[div:end]
