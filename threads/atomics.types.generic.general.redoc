[section#atomics.types.generic.general
    [:en] General
    [:zh_CN] 概述
]

[%@lib atomic]
[%@lib@member value_type[!atomic]]
[codeblock:synopsis]
namespace std {
  template<class T> struct atomic {
    using value_type = T;

    static constexpr bool is_always_lock_free = [[redoc("[?impdefx"
        "[:en] whether a given [`atomic] type[=']s operations are always lock free"
        "[:zh_CN] 给定 [`atomic] 类型的操作是否总是免锁的]")]];
    bool is_lock_free() const volatile noexcept;
    bool is_lock_free() const noexcept;

    // [:en] [#atomics.types.operations], operations on atomic types \
    [:zh_CN] [#atomics.types.operations]，原子性类型上的操作
    constexpr atomic() noexcept(is_nothrow_default_constructible_v<T>);
    constexpr atomic(T) noexcept;
    atomic(const atomic&) = delete;
    atomic& operator=(const atomic&) = delete;
    atomic& operator=(const atomic&) volatile = delete;

    T load(memory_order = memory_order::seq_cst) const volatile noexcept;
    constexpr T load(memory_order = memory_order::seq_cst) const noexcept;
    operator T() const volatile noexcept;
    constexpr operator T() const noexcept;
    void store(T, memory_order = memory_order::seq_cst) volatile noexcept;
    constexpr void store(T, memory_order = memory_order::seq_cst) noexcept;
    T operator=(T) volatile noexcept;
    constexpr T operator=(T) noexcept;

    T exchange(T, memory_order = memory_order::seq_cst) volatile noexcept;
    constexpr T exchange(T, memory_order = memory_order::seq_cst) noexcept;
    bool compare_exchange_weak(T&, T, memory_order, memory_order) volatile noexcept;
    constexpr bool compare_exchange_weak(T&, T, memory_order, memory_order) noexcept;
    bool compare_exchange_strong(T&, T, memory_order, memory_order) volatile noexcept;
    constexpr bool compare_exchange_strong(T&, T, memory_order, memory_order) noexcept;
    bool compare_exchange_weak(T&, T, memory_order = memory_order::seq_cst) volatile noexcept;
    constexpr bool compare_exchange_weak(T&, T, memory_order = memory_order::seq_cst) noexcept;
    bool compare_exchange_strong(T&, T, memory_order = memory_order::seq_cst) volatile noexcept;
    constexpr bool compare_exchange_strong(T&, T, memory_order = memory_order::seq_cst) noexcept;

    void wait(T, memory_order = memory_order::seq_cst) const volatile noexcept;
    constexpr void wait(T, memory_order = memory_order::seq_cst) const noexcept;
    void notify_one() volatile noexcept;
    constexpr void notify_one() noexcept;
    void notify_all() volatile noexcept;
    constexpr void notify_all() noexcept;
  };
}
[codeblock:end]

[%@lib atomic]
[para]
[:en] The template argument for [`T] shall meet the [^:oc CopyConstructible] and
[^:oc CopyAssignable] requirements.
[:zh_CN] 作为 [`T] 的模板实参应当满足 [^:oc CopyConstructible] 和
[^:oc CopyAssignable] 的规定。

[:en] The program is ill-formed if any of
[:zh_CN] 当以下任一：

[list]
[item]
[:en@~] [`is_trivially_copyable_v<T>],
[:zh_CN@~] [`is_trivially_copyable_v<T>]，
[item]
[:en@~] [`is_copy_constructible_v<T>],
[:zh_CN@~] [`is_copy_constructible_v<T>]，
[item]
[:en@~] [`is_move_constructible_v<T>],
[:zh_CN@~] [`is_move_constructible_v<T>]，
[item]
[:en@~] [`is_copy_assignable_v<T>],
[:zh_CN@~] [`is_copy_assignable_v<T>]，
[item]
[:en@~] [`is_move_assignable_v<T>], or
[:zh_CN@~] [`is_move_assignable_v<T>]，或
[item]
[:en@~] [`same_as<T, remove_cv_t<T>>],
[:zh_CN@~] [`same_as<T, remove_cv_t<T>>]，
[list:end]

[:en@~] is [`false].
[:zh_CN@~] 为 [`false] 时，程序非良构。

[begin:note]
[:en] Type arguments that are not also statically initializable can be difficult
to use.
[:zh_CN] 并非同时为可静态初始化的类型实参会难于使用。
[end:note]

[para]
[:en] The specialization [`atomic<bool>] is a standard-layout struct.
[:zh_CN] 特例 [`atomic<bool>] 是标准布局结构体。

[:en] It has a trivial destructor.
[:zh_CN] 它有一个平凡析构函数。

[para]
[begin:note]
[:en] The representation of an atomic specialization need not have the same size
and alignment requirement as its corresponding argument type.
[:zh_CN] [`atomic] 的特例的表示并不需要与其对应实参类型具有相同大小和对齐要求。
[end:note]
