[section#atomics.lockfree
    [:en] Lock-free property
    [:zh_CN] 免锁性质
]

[%@lib ATOMIC_BOOL_LOCK_FREE]
[%@lib ATOMIC_CHAR_LOCK_FREE]
[%@lib ATOMIC_CHAR8_T_LOCK_FREE]
[%@lib ATOMIC_CHAR16_T_LOCK_FREE]
[%@lib ATOMIC_CHAR32_T_LOCK_FREE]
[%@lib ATOMIC_WCHAR_T_LOCK_FREE]
[%@lib ATOMIC_SHORT_LOCK_FREE]
[%@lib ATOMIC_INT_LOCK_FREE]
[%@lib ATOMIC_LONG_LOCK_FREE]
[%@lib ATOMIC_LLONG_LOCK_FREE]
[%@lib ATOMIC_POINTER_LOCK_FREE]
[%@impldef [:en] values of various [`ATOMIC_..._LOCK_FREE] macros
        [:zh_CN] 各个 [`ATOMIC_..._LOCK_FREE] 宏的值 ]
[codeblock:synopsis]
#define ATOMIC_BOOL_LOCK_FREE [[redoc("[=unspec]")]]
#define ATOMIC_CHAR_LOCK_FREE [[redoc("[=unspec]")]]
#define ATOMIC_CHAR8_T_LOCK_FREE [[redoc("[=unspec]")]]
#define ATOMIC_CHAR16_T_LOCK_FREE [[redoc("[=unspec]")]]
#define ATOMIC_CHAR32_T_LOCK_FREE [[redoc("[=unspec]")]]
#define ATOMIC_WCHAR_T_LOCK_FREE [[redoc("[=unspec]")]]
#define ATOMIC_SHORT_LOCK_FREE [[redoc("[=unspec]")]]
#define ATOMIC_INT_LOCK_FREE [[redoc("[=unspec]")]]
#define ATOMIC_LONG_LOCK_FREE [[redoc("[=unspec]")]]
#define ATOMIC_LLONG_LOCK_FREE [[redoc("[=unspec]")]]
#define ATOMIC_POINTER_LOCK_FREE [[redoc("[=unspec]")]]
[codeblock:end]

[para]
[:en] The [`ATOMIC_..._LOCK_FREE] macros indicate the lock-free property of the
corresponding atomic types, with the signed and unsigned variants grouped
together.
[:zh_CN] 各个 [`ATOMIC_..._LOCK_FREE] 宏标明对应原子性类型的免锁性质，有符号和
无符号变种被组合到一起。

[:en] The properties also apply to the corresponding (partial) specializations
of the [`atomic] template.
[:zh_CN] 这些性质也适用于 [`atomic] 模板的对应（部分）特例。

[:en] A value of 0 indicates that the types are never lock-free.
[:zh_CN] 值为 0 表示该类型永远不是免锁的。

[:en] A value of 1 indicates that the types are sometimes lock-free.
[:zh_CN] 值为 1 表示该类型有时是免锁的。

[:en] A value of 2 indicates that the types are always lock-free.
[:zh_CN] 值为 2 表示该类型总是免锁的。

[para]
[:en] At least one signed integral specialization of the [`atomic] template,
along with the specialization for the corresponding unsigned type
([#basic.fundamental]), is always lock-free.
[:zh_CN] 至少有一个 [`atomic] 模板的有符号整型特例，以及其对应无符号类型
（[#basic.fundamental]）的特例，总是免锁的。

[begin:note]
[:en] [%implementation[!freestanding]]
This requirement is optional in freestanding implementations ([#compliance]).
[:zh_CN] [%实现[!自立式]]
这项要求在自立式实现中是可选的（[#compliance]）。
[end:note]

[para]
[:en] The function [`atomic<T>::is_lock_free] and [`atomic_is_lock_free]
([#atomics.types.operations]) indicates whether the object is lock-free.
[:zh_CN] 函数 [`atomic<T>::is_lock_free] 和 [`atomic_is_lock_free]
（[#atomics.types.operations]）标明对象是否是免锁的。

[:en] In any given program execution, the result of the lock-free query is the
same for all atomic objects of the same type.
[:zh_CN] 在任意给定的程序执行中，对相同类型的所有原子性对象查询免锁性质的结果都
相同。

[para]
[:en] Atomic operations that are not lock-free are considered to potentially
block ([#intro.progress]).
[:zh_CN] 并非免锁的原子性操作，被认为潜在会发生阻塞（[#intro.progress]）。

[para:recommended]
[:en] Operations that are lock-free should also be address-free.[#:fn]
[:zh_CN] 免锁的操作应当也是地址自由的[#:fn]。

[note:foot]
[:en] That is, atomic operations on the same memory location via two different
addresses will communicate atomically.
[:zh_CN] 就是说，通过两个不同地址对相同内存位置进行的原子性操作，将会原子性地
互相通信。
[note:end]

[:en] The implementation of these operations should not depend on any
per-process state.
[:zh_CN] 这些操作的实现不能依赖于任何进程自有状态。

[begin:note]
[:en] This restriction enables communication by memory that is mapped into a
process more than once and by memory that is shared between two processes.
[:zh_CN] 这条限制允许通过将内存多次映射到进程中进行通信，以及通过在两个进程中
共享内存来进行通信。
[end:note]
