[section#stopcallback.general
    [:en] General
    [:zh_CN] 概述
]

[para]
[%@lib stop_callback]
[codeblock:synopsis]
namespace std {
  template<class CallbackFn>
  class stop_callback {
  public:
    using callback_type = CallbackFn;

    // [:en] [#stopcallback.cons], constructors and destructor \
    [:zh_CN] [#stopcallback.cons]，构造函数和析构函数
    template<class Initializer>
      explicit stop_callback(const stop_token& st, Initializer&& init)
        noexcept(is_nothrow_constructible_v<CallbackFn, Initializer>);
    template<class Initializer>
      explicit stop_callback(stop_token&& st, Initializer&& init)
        noexcept(is_nothrow_constructible_v<CallbackFn, Initializer>);
    ~stop_callback();

    stop_callback(const stop_callback&) = delete;
    stop_callback(stop_callback&&) = delete;
    stop_callback& operator=(const stop_callback&) = delete;
    stop_callback& operator=(stop_callback&&) = delete;

  private:
    CallbackFn [[redoc("*>")]]callback-fn;                                     // [=expos]
  };

  template<class CallbackFn>
    stop_callback(stop_token, CallbackFn) -> stop_callback<CallbackFn>;
}
[codeblock:end]

[para:mandates]
[:en] [`stop_callback] is instantiated with an argument for the template
parameter [`CallbackFn] that satisfies both [`:c invocable] and [`:c destructible].
[:zh_CN] [`stop_callback] 实例化时为模板形参 [`CallbackFn] 提供的实参同时满足
[`:c invocable] 和 [`:c destructible]。

[para:remarks]
[:en] For a type [`Initializer], if
[`[*stoppable-callback-for]<CallbackFn, stop_token, Initializer>] is satisfied,
then [`[*stoppable-callback-for]<CallbackFn, stop_token, Initializer>] is modeled.
[:zh_CN] 对于类型 [`Initializer]，如果满足了
[`[*stoppable-callback-for]<CallbackFn, stop_token, Initializer>]，那么就构成
[`[*stoppable-callback-for]<CallbackFn, stop_token, Initializer>]。

[:en] The exposition-only [*callback-fn] member is the associated callback
function ([#stoptoken.concepts]) of [`stop_callback<CallbackFn>] objects.
[:zh_CN] 仅用于阐释的成员 [*callback-fn] 是 [`stop_callback<CallbackFn>] 对象的
关联回调函数（[#stoptoken.concepts]）。
