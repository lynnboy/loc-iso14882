[section#thread.thread.member
    [:en] Members
    [:zh_CN] 成员
]

[%@library swap[!thread]]
[%@library thread[!swap]]
[codeblock:declaration]
void swap(thread& x) noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Swaps the state of [`*this] and [`x].
[:zh_CN] 交换 [`*this] 和 [`x] 的状态。
[exit:description]

[%@library joinable[!thread]]
[%@library thread[!joinable]]
[codeblock:declaration]
bool joinable() const noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`get_id() != id()].
[:zh_CN] [`get_id() != id()]。
[exit:description]

[%@library join[!thread]]
[%@library thread[!join]]
[codeblock:declaration]
void join();
[codeblock:end]

[enter:description]
[para:effects]
[:en] Blocks until the thread represented by [`*this] has completed.
[:zh_CN] 阻塞直到由 [`*this] 所表示的线程完成。

[para:sync]
[:en] The completion of the thread represented by [`*this] synchronizes with
([#intro.multithread]) the corresponding successful [`join()] return.
[:zh_CN] 由 [`*this] 所表示的线程的完成，同步于（[#intro.multithread]）对应的
[`join()] 成功返回。

[enter:note]
[:en] Operations on [`*this] are not synchronized.
[:zh_CN] 在 [`*this] 上的操作并未同步。
[exit:note]

[para:ensures]
[:en] The thread represented by [`*this] has completed.
[:zh_CN] 由 [`*this] 所表示的线程已完成。

[:en] [`get_id() == id()].
[:zh_CN] [`get_id() == id()]。

[para:throws]
[:en] [`system_error] when an exception is required ([#thread.req.exception]).
[:zh_CN] 当需要异常时抛出 [`system_error]（[#thread.req.exception]）。

[para:errors]
[list]
[item]
[:en] [`resource_deadlock_would_occur] [=--] if deadlock is detected or
[`get_id() == this_thread::get_id()].
[:zh_CN] [`resource_deadlock_would_occur] [=--] 检测到了死锁或者
[`get_id() == this_thread::get_id()]。

[item]
[:en] [`no_such_process] [=--] if the thread is not valid.
[:zh_CN] [`no_such_process] [=--] 线程无效。

[item]
[:en] [`invalid_argument] [=--] if the thread is not joinable.
[:zh_CN] [`invalid_argument] [=--] 线程不可合并。
[list:end]
[exit:description]

[%@library detach[!thread]]
[%@library thread[!detach]]
[codeblock:declaration]
void detach();
[codeblock:end]

[enter:description]
[para:effects]
[:en] The thread represented by [`*this] continues execution without the calling
thread blocking.
[:zh_CN] 由 [`*this] 表示的线程将继续执行而不会使调用方线程阻塞。

[:en] When [`detach()] returns, [`*this] no longer represents the possibly
continuing thread of execution.
[:zh_CN] 当 [`detach()] 返回后，[`*this] 不再表示这个可能正在继续的执行线程。

[:en] When the thread previously represented by [`*this] ends execution, the
implementation shall release any owned resources.
[:zh_CN] 当 [`*this] 之前曾表示的线程结束执行后，实现应当释放其所拥有的所有资源。

[para:ensures]
[:en] [`get_id() == id()].
[:zh_CN] [`get_id() == id()]。

[para:throws]
[:en] [`system_error] when an exception is required ([#thread.req.exception]).
[:zh_CN] 当需要异常时抛出 [`system_error]（[#thread.req.exception]）。

[para:errors]
[list]
[item]
[:en] [`no_such_process] [=--] if the thread is not valid.
[:zh_CN] [`no_such_process] [=--] 线程无效。

[item]
[:en] [`invalid_argument] [=--] if the thread is not joinable.
[:zh_CN] [`invalid_argument] [=--] 线程不可合并。
[list:end]
[exit:description]

[%@library get_id[!thread]]
[%@library thread[!get_id]]
[codeblock:declaration]
id get_id() const noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] A default constructed [`id] object if [`*this] does not represent a thread,
otherwise [`this_thread::get_id()] for the thread of execution represented by
[`*this].
[:zh_CN] 如果 [`*this] 不表示任何线程则返回默认构造的 [`id] 对象，否则返回由
[`*this] 表示的执行线程的 [`this_thread::get_id()] 值。
[exit:description]
