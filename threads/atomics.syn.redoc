[section#atomics.syn
    [:en] Header [`<atomic>] synopsis
    [:zh_CN] 头文件 [`<atomic>] 纲要
]

[%@hdr@def atomic]
[codeblock:synopsis]
namespace std {
  // [:en] [#atomics.order], order and consistency \
  [:zh_CN] [#atomics.order]，顺序与一致性
  enum class memory_order : [[redoc("[=unspec]")]];                                            // [=freestanding]
  inline constexpr memory_order memory_order_relaxed = memory_order::relaxed;       // [=freestanding]
  inline constexpr memory_order memory_order_acquire = memory_order::acquire;       // [=freestanding]
  inline constexpr memory_order memory_order_release = memory_order::release;       // [=freestanding]
  inline constexpr memory_order memory_order_acq_rel = memory_order::acq_rel;       // [=freestanding]
  inline constexpr memory_order memory_order_seq_cst = memory_order::seq_cst;       // [=freestanding]
}

// [:en] [#atomics.lockfree], lock-free property \
[:zh_CN] [#atomics.lockfree]，免锁性质
#define ATOMIC_BOOL_LOCK_FREE[[redoc("`:m<")]] [[redoc("[=unspec]")]]                                           // [=freestanding]
#define ATOMIC_CHAR_LOCK_FREE[[redoc("`:m<")]] [[redoc("[=unspec]")]]                                           // [=freestanding]
#define ATOMIC_CHAR8_T_LOCK_FREE[[redoc("`:m<")]] [[redoc("[=unspec]")]]                                        // [=freestanding]
#define ATOMIC_CHAR16_T_LOCK_FREE[[redoc("`:m<")]] [[redoc("[=unspec]")]]                                       // [=freestanding]
#define ATOMIC_CHAR32_T_LOCK_FREE[[redoc("`:m<")]] [[redoc("[=unspec]")]]                                       // [=freestanding]
#define ATOMIC_WCHAR_T_LOCK_FREE[[redoc("`:m<")]] [[redoc("[=unspec]")]]                                        // [=freestanding]
#define ATOMIC_SHORT_LOCK_FREE[[redoc("`:m<")]] [[redoc("[=unspec]")]]                                          // [=freestanding]
#define ATOMIC_INT_LOCK_FREE[[redoc("`:m<")]] [[redoc("[=unspec]")]]                                            // [=freestanding]
#define ATOMIC_LONG_LOCK_FREE[[redoc("`:m<")]] [[redoc("[=unspec]")]]                                           // [=freestanding]
#define ATOMIC_LLONG_LOCK_FREE[[redoc("`:m<")]] [[redoc("[=unspec]")]]                                          // [=freestanding]
#define ATOMIC_POINTER_LOCK_FREE[[redoc("`:m<")]] [[redoc("[=unspec]")]]                                        // [=freestanding]

namespace std {
  // [:en] [#atomics.ref.generic], class template [`atomic_ref] \
  [:zh_CN] [#atomics.ref.generic]，类模板 [`atomic_ref]
  template<class T> struct atomic_ref;                                              // [=freestanding]
  // [:en] [#atomics.ref.pointer], partial specialization for pointers \
  [:zh_CN] [#atomics.ref.pointer]，针对指针的部分特化式
  template<class T> struct atomic_ref<T*>;                                          // [=freestanding]

  // [:en] [#atomics.types.generic], class template [`atomic] \
    [:zh_CN] [#atomics.types.generic]，类模板 [`atomic]
  template<class T> struct atomic;                                                  // [=freestanding]
  // [:en] [#atomics.types.pointer], partial specialization for pointers \
  [:zh_CN] [#atomics.types.pointer]，针对指针的部分特化式
  template<class T> struct atomic<T*>;                                              // [=freestanding]

  // [:en] [#atomics.nonmembers], non-member functions \
  [:zh_CN] [#atomics.nonmembers]，非成员函数
  template<class T>
    bool atomic_is_lock_free(const volatile atomic<T>*) noexcept;                   // [=freestanding]
  template<class T>
    bool atomic_is_lock_free(const atomic<T>*) noexcept;                            // [=freestanding]
  template<class T>
    void atomic_store(volatile atomic<T>*,                                          // [=freestanding]
                      typename atomic<T>::value_type) noexcept;
  template<class T>
    constexpr void atomic_store(atomic<T>*,                                         // [=freestanding]
                                typename atomic<T>::value_type) noexcept;
  template<class T>
    void atomic_store_explicit(volatile atomic<T>*,                                 // [=freestanding]
                               typename atomic<T>::value_type, memory_order) noexcept;
  template<class T>
    constexpr void atomic_store_explicit(atomic<T>*,                                // [=freestanding]
                                         typename atomic<T>::value_type, memory_order) noexcept;
  template<class T>
    T atomic_load(const volatile atomic<T>*) noexcept;                              // [=freestanding]
  template<class T>
    constexpr T atomic_load(const atomic<T>*) noexcept;                             // [=freestanding]
  template<class T>
    T atomic_load_explicit(const volatile atomic<T>*, memory_order) noexcept;       // [=freestanding]
  template<class T>
    constexpr T atomic_load_explicit(const atomic<T>*, memory_order) noexcept;      // [=freestanding]
  template<class T>
    T atomic_exchange(volatile atomic<T>*,                                          // [=freestanding]
                      typename atomic<T>::value_type) noexcept;
  template<class T>
    constexpr T atomic_exchange(atomic<T>*,                                         // [=freestanding]
                                typename atomic<T>::value_type) noexcept;
  template<class T>
    T atomic_exchange_explicit(volatile atomic<T>*,                                 // [=freestanding]
                               typename atomic<T>::value_type, memory_order) noexcept;
  template<class T>
    constexpr T atomic_exchange_explicit(atomic<T>*,                                // [=freestanding]
                                         typename atomic<T>::value_type,
                                         memory_order) noexcept;
  template<class T>
    bool atomic_compare_exchange_weak(volatile atomic<T>*,                          // [=freestanding]
                                      typename atomic<T>::value_type*,
                                      typename atomic<T>::value_type) noexcept;
  template<class T>
    constexpr bool atomic_compare_exchange_weak(atomic<T>*,                         // [=freestanding]
                                                typename atomic<T>::value_type*,
                                                typename atomic<T>::value_type) noexcept;
  template<class T>
    bool atomic_compare_exchange_strong(volatile atomic<T>*,                        // [=freestanding]
                                        typename atomic<T>::value_type*,
                                        typename atomic<T>::value_type) noexcept;
  template<class T>
    constexpr bool atomic_compare_exchange_strong(atomic<T>*,                       // [=freestanding]
                                                  typename atomic<T>::value_type*,
                                                  typename atomic<T>::value_type) noexcept;
  template<class T>
    bool atomic_compare_exchange_weak_explicit(volatile atomic<T>*,                 // [=freestanding]
                                               typename atomic<T>::value_type*,
                                               typename atomic<T>::value_type,
                                               memory_order, memory_order) noexcept;
  template<class T>
    constexpr bool atomic_compare_exchange_weak_explicit(atomic<T>*,                // [=freestanding]
                                               typename atomic<T>::value_type*,
                                               typename atomic<T>::value_type,
                                               memory_order, memory_order) noexcept;
  template<class T>
    bool atomic_compare_exchange_strong_explicit(volatile atomic<T>*,               // [=freestanding]
                                                 typename atomic<T>::value_type*,
                                                 typename atomic<T>::value_type,
                                                 memory_order, memory_order) noexcept;
  template<class T>
    constexpr bool atomic_compare_exchange_strong_explicit(atomic<T>*,              // [=freestanding]
                                                 typename atomic<T>::value_type*,
                                                 typename atomic<T>::value_type,
                                                 memory_order, memory_order) noexcept;

  template<class T>
    T atomic_fetch_add(volatile atomic<T>*,                                         // [=freestanding]
                       typename atomic<T>::difference_type) noexcept;
  template<class T>
    constexpr T atomic_fetch_add(atomic<T>*,                                        // [=freestanding]
                                 typename atomic<T>::difference_type) noexcept;
  template<class T>
    T atomic_fetch_add_explicit(volatile atomic<T>*,                                // [=freestanding]
                                typename atomic<T>::difference_type,
                                memory_order) noexcept;
  template<class T>
    constexpr T atomic_fetch_add_explicit(atomic<T>*,                               // [=freestanding]
                                          typename atomic<T>::difference_type,
                                          memory_order) noexcept;
  template<class T>
    T atomic_fetch_sub(volatile atomic<T>*,                                         // [=freestanding]
                       typename atomic<T>::difference_type) noexcept;
  template<class T>
    constexpr T atomic_fetch_sub(atomic<T>*,                                        // [=freestanding]
                                 typename atomic<T>::difference_type) noexcept;
  template<class T>
    T atomic_fetch_sub_explicit(volatile atomic<T>*,                                // [=freestanding]
                                typename atomic<T>::difference_type,
                                memory_order) noexcept;
  template<class T>
    constexpr T atomic_fetch_sub_explicit(atomic<T>*,                               // [=freestanding]
                                          typename atomic<T>::difference_type,
                                          memory_order) noexcept;
  template<class T>
    T atomic_fetch_and(volatile atomic<T>*,                                         // [=freestanding]
                       typename atomic<T>::value_type) noexcept;
  template<class T>
    constexpr T atomic_fetch_and(atomic<T>*,                                        // [=freestanding]
                                 typename atomic<T>::value_type) noexcept;
  template<class T>
    T atomic_fetch_and_explicit(volatile atomic<T>*,                                // [=freestanding]
                                typename atomic<T>::value_type,
                                memory_order) noexcept;
  template<class T>
    constexpr T atomic_fetch_and_explicit(atomic<T>*,                               // [=freestanding]
                                          typename atomic<T>::value_type,
                                          memory_order) noexcept;
  template<class T>
    T atomic_fetch_or(volatile atomic<T>*,                                          // [=freestanding]
                      typename atomic<T>::value_type) noexcept;
  template<class T>
    constexpr T atomic_fetch_or(atomic<T>*,                                         // [=freestanding]
                                typename atomic<T>::value_type) noexcept;
  template<class T>
    T atomic_fetch_or_explicit(volatile atomic<T>*,                                 // [=freestanding]
                               typename atomic<T>::value_type,
                               memory_order) noexcept;
  template<class T>
    constexpr T atomic_fetch_or_explicit(atomic<T>*,                                // [=freestanding]
                                         typename atomic<T>::value_type,
                                         memory_order) noexcept;
  template<class T>
    T atomic_fetch_xor(volatile atomic<T>*,                                         // [=freestanding]
                       typename atomic<T>::value_type) noexcept;
  template<class T>
    constexpr T atomic_fetch_xor(atomic<T>*,                                        // [=freestanding]
                                 typename atomic<T>::value_type) noexcept;
  template<class T>
    T atomic_fetch_xor_explicit(volatile atomic<T>*,                                // [=freestanding]
                                typename atomic<T>::value_type,
                                memory_order) noexcept;
  template<class T>
    constexpr T atomic_fetch_xor_explicit(atomic<T>*,                               // [=freestanding]
                                          typename atomic<T>::value_type,
                                          memory_order) noexcept;
  template<class T>
    T atomic_fetch_max(volatile atomic<T>*,                                         // [=freestanding]
                       typename atomic<T>::value_type) noexcept;
  template<class T>
    constexpr T atomic_fetch_max(atomic<T>*,                                        // [=freestanding]
                       typename atomic<T>::value_type) noexcept;
  template<class T>
    T atomic_fetch_max_explicit(volatile atomic<T>*,                                // [=freestanding]
                                typename atomic<T>::value_type,
                                memory_order) noexcept;
  template<class T>
    constexpr T atomic_fetch_max_explicit(atomic<T>*,                               // [=freestanding]
                                typename atomic<T>::value_type,
                                memory_order) noexcept;
  template<class T>
    T atomic_fetch_min(volatile atomic<T>*,                                         // [=freestanding]
                       typename atomic<T>::value_type) noexcept;
  template<class T>
    constexpr T atomic_fetch_min(atomic<T>*,                                        // [=freestanding]
                       typename atomic<T>::value_type) noexcept;
  template<class T>
    T atomic_fetch_min_explicit(volatile atomic<T>*,                                // [=freestanding]
                                typename atomic<T>::value_type,
                                memory_order) noexcept;
  template<class T>
    constexpr T atomic_fetch_min_explicit(atomic<T>*,                               // [=freestanding]
                                typename atomic<T>::value_type,
                                memory_order) noexcept;
  template<class T>
    void atomic_wait(const volatile atomic<T>*,                                     // [=freestanding]
	             typename atomic<T>::value_type) noexcept;
  template<class T>
    constexpr void atomic_wait(const atomic<T>*,                                    // [=freestanding]
                               typename atomic<T>::value_type) noexcept;
  template<class T>
    void atomic_wait_explicit(const volatile atomic<T>*,                            // [=freestanding]
                              typename atomic<T>::value_type,
                              memory_order) noexcept;
  template<class T>
    constexpr void atomic_wait_explicit(const atomic<T>*,                           // [=freestanding]
                                        typename atomic<T>::value_type,
                                        memory_order) noexcept;
  template<class T>
    void atomic_notify_one(volatile atomic<T>*) noexcept;                           // [=freestanding]
  template<class T>
    constexpr void atomic_notify_one(atomic<T>*) noexcept;                          // [=freestanding]
  template<class T>
    void atomic_notify_all(volatile atomic<T>*) noexcept;                           // [=freestanding]
  template<class T>
    constexpr void atomic_notify_all(atomic<T>*) noexcept;                          // [=freestanding]

  // [:en] [#atomics.alias], type aliases \
  [:zh_CN] [#atomics.alias]，类型别名
  using atomic_bool           = atomic<bool>;                                       // [=freestanding]
  using atomic_char           = atomic<char>;                                       // [=freestanding]
  using atomic_schar          = atomic<signed char>;                                // [=freestanding]
  using atomic_uchar          = atomic<unsigned char>;                              // [=freestanding]
  using atomic_short          = atomic<short>;                                      // [=freestanding]
  using atomic_ushort         = atomic<unsigned short>;                             // [=freestanding]
  using atomic_int            = atomic<int>;                                        // [=freestanding]
  using atomic_uint           = atomic<unsigned int>;                               // [=freestanding]
  using atomic_long           = atomic<long>;                                       // [=freestanding]
  using atomic_ulong          = atomic<unsigned long>;                              // [=freestanding]
  using atomic_llong          = atomic<long long>;                                  // [=freestanding]
  using atomic_ullong         = atomic<unsigned long long>;                         // [=freestanding]
  using atomic_char8_t        = atomic<char8_t>;                                    // [=freestanding]
  using atomic_char16_t       = atomic<char16_t>;                                   // [=freestanding]
  using atomic_char32_t       = atomic<char32_t>;                                   // [=freestanding]
  using atomic_wchar_t        = atomic<wchar_t>;                                    // [=freestanding]

  using atomic_int8_t         = atomic<int8_t>;                                     // [=freestanding]
  using atomic_uint8_t        = atomic<uint8_t>;                                    // [=freestanding]
  using atomic_int16_t        = atomic<int16_t>;                                    // [=freestanding]
  using atomic_uint16_t       = atomic<uint16_t>;                                   // [=freestanding]
  using atomic_int32_t        = atomic<int32_t>;                                    // [=freestanding]
  using atomic_uint32_t       = atomic<uint32_t>;                                   // [=freestanding]
  using atomic_int64_t        = atomic<int64_t>;                                    // [=freestanding]
  using atomic_uint64_t       = atomic<uint64_t>;                                   // [=freestanding]

  using atomic_int_least8_t   = atomic<int_least8_t>;                               // [=freestanding]
  using atomic_uint_least8_t  = atomic<uint_least8_t>;                              // [=freestanding]
  using atomic_int_least16_t  = atomic<int_least16_t>;                              // [=freestanding]
  using atomic_uint_least16_t = atomic<uint_least16_t>;                             // [=freestanding]
  using atomic_int_least32_t  = atomic<int_least32_t>;                              // [=freestanding]
  using atomic_uint_least32_t = atomic<uint_least32_t>;                             // [=freestanding]
  using atomic_int_least64_t  = atomic<int_least64_t>;                              // [=freestanding]
  using atomic_uint_least64_t = atomic<uint_least64_t>;                             // [=freestanding]

  using atomic_int_fast8_t    = atomic<int_fast8_t>;                                // [=freestanding]
  using atomic_uint_fast8_t   = atomic<uint_fast8_t>;                               // [=freestanding]
  using atomic_int_fast16_t   = atomic<int_fast16_t>;                               // [=freestanding]
  using atomic_uint_fast16_t  = atomic<uint_fast16_t>;                              // [=freestanding]
  using atomic_int_fast32_t   = atomic<int_fast32_t>;                               // [=freestanding]
  using atomic_uint_fast32_t  = atomic<uint_fast32_t>;                              // [=freestanding]
  using atomic_int_fast64_t   = atomic<int_fast64_t>;                               // [=freestanding]
  using atomic_uint_fast64_t  = atomic<uint_fast64_t>;                              // [=freestanding]

  using atomic_intptr_t       = atomic<intptr_t>;                                   // [=freestanding]
  using atomic_uintptr_t      = atomic<uintptr_t>;                                  // [=freestanding]
  using atomic_size_t         = atomic<size_t>;                                     // [=freestanding]
  using atomic_ptrdiff_t      = atomic<ptrdiff_t>;                                  // [=freestanding]
  using atomic_intmax_t       = atomic<intmax_t>;                                   // [=freestanding]
  using atomic_uintmax_t      = atomic<uintmax_t>;                                  // [=freestanding]

  using atomic_signed_lock_free   = [[redoc("[=seebelow]")]];
  using atomic_unsigned_lock_free = [[redoc("[=seebelow]")]];

  // [:en] [#atomics.flag], flag type and operations \
  [:zh_CN] [#atomics.flag]，标记类型及其操作
  struct atomic_flag;                                                               // [=freestanding]

  bool atomic_flag_test(const volatile atomic_flag*) noexcept;                      // [=freestanding]
  constexpr bool atomic_flag_test(const atomic_flag*) noexcept;                     // [=freestanding]
  bool atomic_flag_test_explicit(const volatile atomic_flag*,                       // [=freestanding]
                                 memory_order) noexcept;
  constexpr bool atomic_flag_test_explicit(const atomic_flag*,                      // [=freestanding]
                                           memory_order) noexcept;
  bool atomic_flag_test_and_set(volatile atomic_flag*) noexcept;                    // [=freestanding]
  constexpr bool atomic_flag_test_and_set(atomic_flag*) noexcept;                   // [=freestanding]
  bool atomic_flag_test_and_set_explicit(volatile atomic_flag*,                     // [=freestanding]
                                         memory_order) noexcept;
  constexpr bool atomic_flag_test_and_set_explicit(atomic_flag*,                    // [=freestanding]
                                                   memory_order) noexcept;
  void atomic_flag_clear(volatile atomic_flag*) noexcept;                           // [=freestanding]
  constexpr void atomic_flag_clear(atomic_flag*) noexcept;                          // [=freestanding]
  void atomic_flag_clear_explicit(volatile atomic_flag*, memory_order) noexcept;    // [=freestanding]
  constexpr void atomic_flag_clear_explicit(atomic_flag*, memory_order) noexcept;   // [=freestanding]

  void atomic_flag_wait(const volatile atomic_flag*, bool) noexcept;                // [=freestanding]
  constexpr void atomic_flag_wait(const atomic_flag*, bool) noexcept;               // [=freestanding]
  void atomic_flag_wait_explicit(const volatile atomic_flag*,                       // [=freestanding]
                                 bool, memory_order) noexcept;
  constexpr void atomic_flag_wait_explicit(const atomic_flag*,                      // [=freestanding]
                                 bool, memory_order) noexcept;
  void atomic_flag_notify_one(volatile atomic_flag*) noexcept;                      // [=freestanding]
  constexpr void atomic_flag_notify_one(atomic_flag*) noexcept;                     // [=freestanding]
  void atomic_flag_notify_all(volatile atomic_flag*) noexcept;                      // [=freestanding]
  constexpr void atomic_flag_notify_all(atomic_flag*) noexcept;                     // [=freestanding]
  #define ATOMIC_FLAG_INIT[[redoc("`:m<")]] [[redoc("[=seebelow]")]]                                                // [=freestanding]

  // [:en] [#atomics.fences], fences \
  [:zh_CN] [#atomics.fences]，屏障
  extern "C" constexpr void atomic_thread_fence(memory_order) noexcept;             // [=freestanding]
  extern "C" constexpr void atomic_signal_fence(memory_order) noexcept;             // [=freestanding]
}
[codeblock:end]
