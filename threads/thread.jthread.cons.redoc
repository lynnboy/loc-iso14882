[section#thread.jthread.cons
    [:en] Constructors, move, and assignment
    [:zh_CN] 构造函数，移动和赋值
]

[%@lib@ctor jthread]
[codeblock:declaration]
jthread() noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Constructs a [`jthread] object that does not represent a thread of
execution.
[:zh_CN] 构造并不代表执行线程的 [`jthread] 对象。

[para:ensures]
[:en] [`get_id() == id()] is [`true] and [`ssource.stop_possible()] is [`false].
[:zh_CN] [`get_id() == id()] 为 [`true] 且 [`ssource.stop_possible()] 为 [`false]。
[div:end]

[%@lib@ctor jthread]
[codeblock:declaration]
template<class F, class... Args> explicit jthread(F&& f, Args&&... args);
[codeblock:end]

[div:description]
[para:requires]
[:en] [`F] and each [$[`T]_i] in [`Args] shall meet the [^:oc MoveConstructible]
requirements.
[:zh_CN] [`F] 和 [`Args] 中的每个 [$[`T]_i] 都应当满足 [^:oc MoveConstructible]
的规定。

[:en] Either
[:zh_CN] 要么
[codeblock:notation]
[^INVOKE]([^decay-copy](std::forward<F>(f)), get_stop_token(),
       [^decay-copy](std::forward<Args>(args))...)
[codeblock:end]
[:en@~] is a valid expression or
[:zh_CN@~] 是有效表达式，要么
[codeblock:notation]
[^INVOKE]([^decay-copy](std::forward<F>(f)), [^decay-copy](std::forward<Args>(args))...)
[codeblock:end]
[:en@~] is a valid expression.
[:zh_CN@~] 是有效表达式。

[para:constraints]
[:en] [`remove_cvref_t<F>] is not the same type as [`jthread].
[:zh_CN] [`remove_cvref_t<F>] 与 [`jthread] 不是相同的类型。

[para:effects]
[:en] Initializes [`ssource] and constructs an object of type [`jthread].
[:zh_CN] 初始化 [`ssource] 并构造 [`jthread] 类型的对象。

[:en] The new thread of execution executes
[:zh_CN] 若表达式
[codeblock:notation]
[^INVOKE]([^decay-copy](std::forward<F>(f)), get_stop_token(),
       [^decay-copy](std::forward<Args>(args))...)
[codeblock:end]
[:en@~] if that expression is well-formed, otherwise
[:zh_CN@~] 良构则新的执行线程执行该表达式，否则执行
[codeblock:notation]
[^INVOKE]([^decay-copy](std::forward<F>(f)), [^decay-copy](std::forward<Args>(args))...)
[codeblock:end]
[:en@~] with the calls to [`[^decay-copy]] being evaluated in the constructing
thread.
[:zh_CN@~] 其中对 [`[^decay-copy]] 的调用在进行构造的线程中求值。

[:en] Any return value from this invocation is ignored.
[:zh_CN] 这次调用的任何返回值都被忽略。

[begin:note]
[:en] This implies that any exceptions not thrown from the invocation of the
copy of [`f] will be thrown in the constructing thread, not the new thread.
[:zh_CN] 这意味着不是由对 [`f] 的副本的调用苏哦跑出的任何异常，都是在进行构造的
线程中抛出，而非在新线程中抛出的。
[end:note]

[:en] If the [`[^INVOKE]] expression exits via an exception, [`terminate] is
called.
[:zh_CN] 当 [`[^INVOKE]] 表达式以异常退出时，调用 [`terminate]。

[para:sync]
[:en] The completion of the invocation of the constructor synchronizes with the
beginning of the invocation of the copy of [`f].
[:zh_CN] 对构造函数调用的完成，同步于对 [`f] 的副本的调用的开始。

[para:ensures]
[:en] [`get_id() != id()] is [`true] and [`ssource.stop_possible()] is [`true]
and [`*this] represents the newly started thread.
[:zh_CN] [`get_id() != id()] 为 [`true] 且 [`ssource.stop_possible()] 为 [`true]
且 [`*this] 代表新开始的线程。

[begin:note]
[:en] The calling thread can make a stop request only once, because it cannot
replace this stop token.
[:zh_CN] 调用方线程仅可以做出一次停止请求，这是因为它无法替换这个停止令牌。
[end:note]

[para:throws]
[:en] [`system_error] if unable to start the new thread.
[:zh_CN] 若无法启动新线程则抛出 [`system_error]。

[para:errors]
[list]
[item]
[:en] [`resource_unavailable_try_again] [=--] the system lacked the necessary
resources to create another thread, or the system-imposed limit on the number of
threads in a process would be exceeded.
[:zh_CN] [`resource_unavailable_try_again] [=--] 系统缺乏必要的资源以创建另一个
线程，或者超过了系统所施加的进程中的线程数的限额。
[list:end]
[div:end]

[%@lib@ctor jthread]
[codeblock:declaration]
jthread(jthread&& x) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Constructs an object of type [`jthread] from [`x], and sets [`x] to a
default constructed state.
[:zh_CN] 从 [`x] 构造 [`jthread] 类型的对象，并将 [`x] 设置为默认构造的状态。

[para:ensures]
[:en] [`x.get_id() == id()] and [`get_id()] returns the value of [`x.get_id()]
prior to the start of construction.
[:zh_CN] [`x.get_id() == id()]，且 [`get_id()] 返回开始构造之前的 [`x.get_id()]
值。

[:en] [`ssource] has the value of [`x.ssource] prior to the start of
construction and [`x.ssource.stop_possible()] is [`false].
[:zh_CN] [`ssource] 具有构造开始前 [`x.ssource] 的值，且
[`x.ssource.stop_possible()] 为 [`false]。
[div:end]

[%@lib@dtor jthread]
[codeblock:declaration]
~jthread();
[codeblock:end]

[div:description]
[para:effects]
[:en] If [`joinable()] is [`true], calls [`request_stop()] and then [`join()].
[:zh_CN] 若 [`joinable()] 为 [`true] 则调用 [`request_stop()] 然后调用 [`join()]。

[begin:note]
[:en] Operations on [`*this] are not synchronized.
[:zh_CN] [`*this] 上的操作并未同步。
[end:note]
[div:end]

[%@lib@member operator=[!jthread]]
[codeblock:declaration]
jthread& operator=(jthread&& x) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] If [`joinable()] is [`true], calls [`request_stop()] and then [`join()].
[:zh_CN] 若 [`joinable()] 为 [`true] 则调用 [`request_stop()] 然后调用 [`join()]。

[:en] Assigns the state of [`x] to [`*this] and sets [`x] to a default
constructed state.
[:zh_CN] 将 [`x] 的状态赋值给 [`*this]，并将 [`x] 设置为默认构造的状态。

[para:ensures]
[:en] [`x.get_id() == id()] and [`get_id()] returns the value of [`x.get_id()]
prior to the assignment.
[:zh_CN] [`x.get_id() == id()] 且 [`get_id()] 返回 [`x.get_id()] 在赋值之前的值。

[:en] [`ssource] has the value of [`x.ssource] prior to the assignment and
[`x.ssource.stop_possible()] is [`false].
[:zh_CN] [`ssource] 具有赋值之前 [`x.ssource] 的值，且
[`x.ssource.stop_possible()] 为 [`false]。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]
