[section#atomics.types.int
    [:en] Specializations for integers
    [:zh_CN] 针对整数的特化式
]

[%@lib@raw [`atomic<[^integral-type]>]]
[para]
[:en] There are specializations of the [`atomic] class template for the integral
types [`char], [`signed char], [`unsigned char], [`short], [`unsigned short],
[`int], [`unsigned int], [`long], [`unsigned long], [`long long],
[`unsigned long long], [`:key char8_t], [`:key char16_t], [`:key char32_t],
[`:key wchar_t], and any other types needed by the typedefs in the header
[?libheader@ref cstdint].
[:zh_CN] [`atomic] 类模板对整型类型 [`char]、[`signed char]、[`unsigned char]、
[`short]、[`unsigned short]、[`int]、[`unsigned int]、[`long]、[`unsigned long]、
[`long long]、[`unsigned long long]、[`:key char8_t]、[`:key char16_t]、
[`:key char32_t]、[`:key wchar_t]，以及头文件 [?libheader@ref cstdint] 中的各
typedef 所需的任何其他类型，进行了特化。

[:en] For each such type [`[^integral-type]], the specialization
[`atomic<[^integral-type]>] provides additional atomic operations appropriate to
integral types.
[:zh_CN] 对于每个这样的类型 [`[^integral-type]]，特例 [`atomic<[^integral-type]>]
提供了适用于该整型类型的额外的原子性操作。

[begin:note]
[:en] The specialization [`atomic<bool>] uses the primary template
([#atomics.types.generic]).
[:zh_CN] 特例 [`atomic<bool>] 使用主模板（[#atomics.types.generic]）。
[end:note]

[codeblock:synopsis]
namespace std {
  template<> struct atomic<[[redoc("^>")]]integral-type> {
    using value_type = [[redoc("^>")]]integral-type;
    using difference_type = value_type;

    static constexpr bool is_always_lock_free = [[redoc("[?impdefx"
        "[:en] whether a given [`atomic] type[=']s operations are always lock free"
        "[:zh_CN] 给定 [`atomic] 类型的操作是否总是免锁的]")]];
    bool is_lock_free() const volatile noexcept;
    bool is_lock_free() const noexcept;

    constexpr atomic() noexcept;
    constexpr atomic([[redoc("^>")]]integral-type) noexcept;
    atomic(const atomic&) = delete;
    atomic& operator=(const atomic&) = delete;
    atomic& operator=(const atomic&) volatile = delete;

    void store([[redoc("^>")]]integral-type, memory_order = memory_order::seq_cst) volatile noexcept;
    constexpr void store([[redoc("^>")]]integral-type, memory_order = memory_order::seq_cst) noexcept;
    [[redoc("^>")]]integral-type operator=([[redoc("^>")]]integral-type) volatile noexcept;
    constexpr [[redoc("^>")]]integral-type operator=([[redoc("^>")]]integral-type) noexcept;
    [[redoc("^>")]]integral-type load(memory_order = memory_order::seq_cst) const volatile noexcept;
    constexpr [[redoc("^>")]]integral-type load(memory_order = memory_order::seq_cst) const noexcept;
    operator [[redoc("^>")]]integral-type() const volatile noexcept;
    constexpr operator [[redoc("^>")]]integral-type() const noexcept;

    [[redoc("^>")]]integral-type exchange([[redoc("^>")]]integral-type,
                           memory_order = memory_order::seq_cst) volatile noexcept;
    constexpr [[redoc("^>")]]integral-type exchange([[redoc("^>")]]integral-type,
                           memory_order = memory_order::seq_cst) noexcept;
    bool compare_exchange_weak([[redoc("^>")]]integral-type&, [[redoc("^>")]]integral-type,
                               memory_order, memory_order) volatile noexcept;
    constexpr bool compare_exchange_weak([[redoc("^>")]]integral-type&, [[redoc("^>")]]integral-type,
                               memory_order, memory_order) noexcept;
    bool compare_exchange_strong([[redoc("^>")]]integral-type&, [[redoc("^>")]]integral-type,
                                 memory_order, memory_order) volatile noexcept;
    constexpr bool compare_exchange_strong([[redoc("^>")]]integral-type&, [[redoc("^>")]]integral-type,
                                 memory_order, memory_order) noexcept;
    bool compare_exchange_weak([[redoc("^>")]]integral-type&, [[redoc("^>")]]integral-type,
                               memory_order = memory_order::seq_cst) volatile noexcept;
    constexpr bool compare_exchange_weak([[redoc("^>")]]integral-type&, [[redoc("^>")]]integral-type,
                               memory_order = memory_order::seq_cst) noexcept;
    bool compare_exchange_strong([[redoc("^>")]]integral-type&, [[redoc("^>")]]integral-type,
                                 memory_order = memory_order::seq_cst) volatile noexcept;
    constexpr bool compare_exchange_strong([[redoc("^>")]]integral-type&, [[redoc("^>")]]integral-type,
                                 memory_order = memory_order::seq_cst) noexcept;

    [[redoc("^>")]]integral-type fetch_add([[redoc("^>")]]integral-type,
                            memory_order = memory_order::seq_cst) volatile noexcept;
    constexpr [[redoc("^>")]]integral-type fetch_add([[redoc("^>")]]integral-type,
                            memory_order = memory_order::seq_cst) noexcept;
    [[redoc("^>")]]integral-type fetch_sub([[redoc("^>")]]integral-type,
                            memory_order = memory_order::seq_cst) volatile noexcept;
    constexpr [[redoc("^>")]]integral-type fetch_sub([[redoc("^>")]]integral-type,
                            memory_order = memory_order::seq_cst) noexcept;
    [[redoc("^>")]]integral-type fetch_and([[redoc("^>")]]integral-type,
                            memory_order = memory_order::seq_cst) volatile noexcept;
    constexpr [[redoc("^>")]]integral-type fetch_and([[redoc("^>")]]integral-type,
                            memory_order = memory_order::seq_cst) noexcept;
    [[redoc("^>")]]integral-type fetch_or([[redoc("^>")]]integral-type,
                            memory_order = memory_order::seq_cst) volatile noexcept;
    constexpr [[redoc("^>")]]integral-type fetch_or([[redoc("^>")]]integral-type,
                            memory_order = memory_order::seq_cst) noexcept;
    [[redoc("^>")]]integral-type fetch_xor([[redoc("^>")]]integral-type,
                            memory_order = memory_order::seq_cst) volatile noexcept;
    constexpr [[redoc("^>")]]integral-type fetch_xor([[redoc("^>")]]integral-type,
                            memory_order = memory_order::seq_cst) noexcept;
    [[redoc("^>")]]integral-type fetch_max([[redoc("^>")]]integral-type,
                            memory_order = memory_order::seq_cst) volatile noexcept;
    constexpr [[redoc("^>")]]integral-type fetch_max([[redoc("^>")]]integral-type,
                            memory_order = memory_order::seq_cst) noexcept;
    [[redoc("^>")]]integral-type fetch_min([[redoc("^>")]]integral-type,
                            memory_order = memory_order::seq_cst) volatile noexcept;
    constexpr [[redoc("^>")]]integral-type fetch_min([[redoc("^>")]]integral-type,
                            memory_order = memory_order::seq_cst) noexcept;

    [[redoc("^>")]]integral-type operator++(int) volatile noexcept;
    constexpr [[redoc("^>")]]integral-type operator++(int) noexcept;
    [[redoc("^>")]]integral-type operator--(int) volatile noexcept;
    constexpr [[redoc("^>")]]integral-type operator--(int) noexcept;
    [[redoc("^>")]]integral-type operator++() volatile noexcept;
    constexpr [[redoc("^>")]]integral-type operator++() noexcept;
    [[redoc("^>")]]integral-type operator--() volatile noexcept;
    constexpr [[redoc("^>")]]integral-type operator--() noexcept;
    [[redoc("^>")]]integral-type operator+=([[redoc("^>")]]integral-type) volatile noexcept;
    constexpr [[redoc("^>")]]integral-type operator+=([[redoc("^>")]]integral-type) noexcept;
    [[redoc("^>")]]integral-type operator-=([[redoc("^>")]]integral-type) volatile noexcept;
    constexpr [[redoc("^>")]]integral-type operator-=([[redoc("^>")]]integral-type) noexcept;
    [[redoc("^>")]]integral-type operator&=([[redoc("^>")]]integral-type) volatile noexcept;
    constexpr [[redoc("^>")]]integral-type operator&=([[redoc("^>")]]integral-type) noexcept;
    [[redoc("^>")]]integral-type operator|=([[redoc("^>")]]integral-type) volatile noexcept;
    constexpr [[redoc("^>")]]integral-type operator|=([[redoc("^>")]]integral-type) noexcept;
    [[redoc("^>")]]integral-type operator^=([[redoc("^>")]]integral-type) volatile noexcept;
    constexpr [[redoc("^>")]]integral-type operator^=([[redoc("^>")]]integral-type) noexcept;

    void wait([[redoc("^>")]]integral-type, memory_order = memory_order::seq_cst) const volatile noexcept;
    constexpr void wait([[redoc("^>")]]integral-type, memory_order = memory_order::seq_cst) const noexcept;
    void notify_one() volatile noexcept;
    constexpr void notify_one() noexcept;
    void notify_all() volatile noexcept;
    constexpr void notify_all() noexcept;
  };
}
[codeblock:end]

[para]
[:en] The atomic integral specializations are standard-layout structs.
[:zh_CN] [`atomic] 的整型特例是标准布局结构体。

[:en] They each have a trivial destructor.
[:zh_CN] 它们都具有平凡的析构函数。

[para]
[:en] Descriptions are provided below only for members that differ from the
primary template.
[:zh_CN] 下文仅为与主模板不同的成员提供描述。

[para]
[:en] The following operations perform arithmetic computations.
[:zh_CN] 以下各操作实施算术运算。

[:en] The correspondence among key, operator, and computation is specified in
[#:tab#atomic.types.int.comp].
[:zh_CN] [#:tab#atomic.types.int.comp] 给出关键词、运算符和运算之间的对应关系。

[table:listing@shape=?x2@fill=column#atomic.types.int.comp
    [:en] Atomic arithmetic computations
    [:zh_CN] 原子性算术运算
    [|@code [`[^key]] ]
    [|@code [:en] Op [:zh_CN] op ]
    [| [:en] Computation [:zh_CN] 运算 ]
]
[|] add [|] + [|] [:en] addition [:zh_CN] 加
[|] and [|] & [|] [:en] bitwise and [:zh_CN] 按位与
[|] sub [|] - [|] [:en] subtraction [:zh_CN] 减
[|] or  [|] | [|] [:en] bitwise inclusive or [:zh_CN] 按位或
[|] max [|]   [|] [:en] maximum [:zh_CN] 最大值
[|] xor [|] ^ [|] [:en] bitwise exclusive or [:zh_CN] 按位异或
[|] min [|]   [|] [:en] minimum [:zh_CN] 最小值
[table:end]

[%@lib atomic_fetch_add]
[%@lib atomic_fetch_and]
[%@lib atomic_fetch_max]
[%@lib atomic_fetch_min]
[%@lib atomic_fetch_or]
[%@lib atomic_fetch_sub]
[%@lib atomic_fetch_xor]
[%@lib atomic_fetch_add_explicit]
[%@lib atomic_fetch_and_explicit]
[%@lib atomic_fetch_max_explicit]
[%@lib atomic_fetch_min_explicit]
[%@lib atomic_fetch_or_explicit]
[%@lib atomic_fetch_sub_explicit]
[%@lib atomic_fetch_xor_explicit]
[%@lib@member fetch_add[!atomic<[^integral-type]>]]
[%@lib@member fetch_and[!atomic<[^integral-type]>]]
[%@lib@member fetch_max[!atomic<[^integral-type]>]]
[%@lib@member fetch_min[!atomic<[^integral-type]>]]
[%@lib@member fetch_or [!atomic<[^integral-type]>]]
[%@lib@member fetch_sub[!atomic<[^integral-type]>]]
[%@lib@member fetch_xor[!atomic<[^integral-type]>]]
[codeblock:declaration]
T fetch_key[[redoc("^<3c")]](T operand, memory_order order = memory_order::seq_cst) volatile noexcept;
constexpr T fetch_key[[redoc("^<3c")]](T operand, memory_order order = memory_order::seq_cst) noexcept;
[codeblock:end]

[div:description]
[para:constraints]
[:en] For the [`volatile] overload of this function, [`is_always_lock_free] is [`true].
[:zh_CN] 对于本函数的 [`volatile] 重载，[`is_always_lock_free] 为 [`true]。

[para:effects]
[:en] Atomically replaces the value pointed to by [`:key this] with the result
of the computation applied to the value pointed to by [`:key this] and the given
[`operand].
[:zh_CN] 原子地将由 [`:key this] 所指向的值替换为对由 [`:key this] 所指向的值和
给定的 [`operand] 实施运算的结果。

[:en] Memory is affected according to the value of [`order].
[:zh_CN] 根据 [`order] 的值影响内存。

[:en] These operations are atomic read-modify-write operations ([#intro.multithread]).
[:zh_CN] 这些操作是原子性读-改-写操作（[#intro.multithread]）。

[para:returns]
[:en] Atomically, the value pointed to by [`:key this] immediately before the effects.
[:zh_CN] 原子地返回紧接其效果生效前 [`:key this] 所指向的值。

[para:remarks]
[:en] [%signed integer representation[!two[=']s complement]]
Except for [`fetch_max] and [`fetch_min], for signed integer types, the result
is as if the object value and parameters were converted to their corresponding
unsigned types, the computation performed on those types, and the result
converted back to the signed type.
[:zh_CN] [%有符号整数表示[!二的补码]]
除了 [`fetch_max] 和 [`fetch_min] 之外，对有符号整数类型，其结果如同将对象值和
各形参转换为它们的对应无符号类型，在这些类型上实施运算，然后将其结果转换回有符号类型。

[begin:note]
[:en] There are no undefined results arising from the computation.
[:zh_CN] 这项运算中不会产生未定义的结果。
[end:note]

[para]
[:en] For [`fetch_max] and [`fetch_min], the maximum and minimum computation is
performed as if by [`max] and [`min] algorithms ([#alg.min.max]), respectively,
with the object value and the first parameter as the arguments.
[:zh_CN] [`fetch_max] 和 [`fetch_min] 分别如同以对象的值和第一个形参作为实参，
通过 [`max] 和 [`min] 算法（[#alg.min.max]）实施最大值和最小值运算。
[div:end]

[%@lib@member operator+=[!atomic<T*>]]
[%@lib@member operator-=[!atomic<T*>]]
[%@lib@member operator+=[!atomic<[^integral-type]>]]
[%@lib@member operator-=[!atomic<[^integral-type]>]]
[%@lib@member operator&=[!atomic<[^integral-type]>]]
[%@lib@member operator|=[!atomic<[^integral-type]>]]
[%@lib@member operator^=[!atomic<[^integral-type]>]]
[codeblock:declaration]
T operator [[redoc("^>")]]op=(T operand) volatile noexcept;
constexpr T operator [[redoc("^>")]]op=(T operand) noexcept;
[codeblock:end]

[div:description]
[para:constraints]
[:en] For the [`volatile] overload of this function, [`is_always_lock_free] is [`true].
[:zh_CN] 对于本函数的 [`volatile] 重载，[`is_always_lock_free] 为 [`true]。

[para:effects]
[:en] Equivalent to: [`return fetch_[^key](operand) [^op] operand;]
[:zh_CN] 等价于：[`return fetch_[^key](operand) [^op] operand;]
[div:end]
