[section#thread.thread.this
    [:en] Namespace [`this_thread]
    [:zh_CN] 命名空间 [`this_thread]
]

[codeblock:synopsis]
namespace std::this_thread {
  thread::id get_id() noexcept;

  void yield() noexcept;
  template<class Clock, class Duration>
    void sleep_until(const chrono::time_point<Clock, Duration>& abs_time);
  template<class Rep, class Period>
    void sleep_for(const chrono::duration<Rep, Period>& rel_time);
}
[codeblock:end]

[%@library get_id[!this_thread]]
[%@library this_thread[!get_id]]
[codeblock:declaration]
thread::id this_thread::get_id() noexcept;
[codeblock:end]

[begin:description]
[para:returns]
[:en] An object of type [`thread::id] that uniquely identifies the current
thread of execution.
[:zh_CN] 唯一标识当前执行线程的 [`thread::id] 类型的对象。

[:en] No other thread of execution shall have this id and this thread of
execution shall always have this id.
[:zh_CN] 任何其他执行线程都不能具有这个 id，且这个执行线程应当总是具有这个 id。

[:en] The object returned shall not compare equal to a default constructed
[`thread::id].
[:zh_CN] 所返回的对象与默认构造的 [`thread::id] 相比较不能相等。
[end:description]

[%@library yield[!this_thread]]
[%@library this_thread[!yield]]
[codeblock:declaration]
void this_thread::yield() noexcept;
[codeblock:end]

[begin:description]
[para:effects]
[:en] Offers the implementation the opportunity to reschedule.
[:zh_CN] 提供实现进行重新调度的机会。

[para:sync]
[:en] None.
[:zh_CN] 无。
[end:description]

[%@library sleep_until[!this_thread]]
[%@library this_thread[!sleep_until]]
[codeblock:declaration]
template<class Clock, class Duration>
  void sleep_until(const chrono::time_point<Clock, Duration>& abs_time);
[codeblock:end]

[begin:description]
[para:effects]
[:en] Blocks the calling thread for the absolute timeout ([#thread.req.timing])
specified by [`abs_time].
[:zh_CN] 阻塞调用方线程直到由 [`abs_time] 所指定的绝对超时
（[#thread.req.timing]）。

[para:sync]
[:en] None.
[:zh_CN] 无。

[para:throws]
[:en] Timeout-related exceptions ([#thread.req.timing]).
[:zh_CN] 超时相关异常（[#thread.req.timing]）。
[end:description]

[%@library sleep_for[!this_thread]]
[%@library this_thread[!sleep_for]]
[codeblock:declaration]
template<class Rep, class Period>
  void sleep_for(const chrono::duration<Rep, Period>& rel_time);
[codeblock:end]

[begin:description]
[para:effects]
[:en] Blocks the calling thread for the relative timeout ([#thread.req.timing])
specified by [`rel_time].
[:zh_CN] 阻塞调用方线程直到由 [`rel_time] 所指定的相对超时
（[#thread.req.timing]）。

[para:sync]
[:en] None.
[:zh_CN] 无。

[para:throws]
[:en] Timeout-related exceptions ([#thread.req.timing]).
[:zh_CN] 超时相关异常（[#thread.req.timing]）。
[end:description]
