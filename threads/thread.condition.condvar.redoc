[section#thread.condition.condvar
    [:en] Class [`condition_variable]
    [:zh_CN] 类 [`condition_variable]
]

[%@library condition_variable]
[codeblock:synopsis]
namespace std {
  class condition_variable {
  public:
    condition_variable();
    ~condition_variable();

    condition_variable(const condition_variable&) = delete;
    condition_variable& operator=(const condition_variable&) = delete;

    void notify_one() noexcept;
    void notify_all() noexcept;
    void wait(unique_lock<mutex>& lock);
    template<class Predicate>
      void wait(unique_lock<mutex>& lock, Predicate pred);
    template<class Clock, class Duration>
      cv_status wait_until(unique_lock<mutex>& lock,
                           const chrono::time_point<Clock, Duration>& abs_time);
    template<class Clock, class Duration, class Predicate>
      bool wait_until(unique_lock<mutex>& lock,
                      const chrono::time_point<Clock, Duration>& abs_time,
                      Predicate pred);
    template<class Rep, class Period>
      cv_status wait_for(unique_lock<mutex>& lock,
                         const chrono::duration<Rep, Period>& rel_time);
    template<class Rep, class Period, class Predicate>
      bool wait_for(unique_lock<mutex>& lock,
                    const chrono::duration<Rep, Period>& rel_time,
                    Predicate pred);

    using native_handle_type = [[redoc("=impdef")]]_;          // [:en] See [#thread.req.native] \
                                                                  [:zh_CN] 参见 [#thread.req.native]
    native_handle_type native_handle();                         // [:en] See [#thread.req.native] \
                                                                   [:zh_CN] 参见 [#thread.req.native]
  };
}
[codeblock:end]

[para]
[:en] The class [`condition_variable] shall be a standard-layout class
([#class.prop]).
[:zh_CN] 类 [`condition_variable] 应当是标准布局类（[#class.prop]）。

[%@library condition_variable[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
condition_variable();
[codeblock:end]

[begin:description]
[para:effects]
[:en] Constructs an object of type [`condition_variable].
[:zh_CN] 构造 [`condition_variable] 类型的对象。

[para:throws]
[:en] [`system_error] when an exception is required ([#thread.req.exception]).
[:zh_CN] 当需要异常时（[#thread.req.exception]）抛出 [`system_error]。

[para:errors]
[list]
[item]
[:en] [`resource_unavailable_try_again] [=--] if some non-memory resource
limitation prevents initialization.
[:zh_CN] [`resource_unavailable_try_again] [=--] 某种非内存的资源限额妨碍了
初始化。
[list:end]
[end:description]

[%@library condition_variable[![:en]destructor[:zh_CN]析构函数]]
[codeblock:declaration]
~condition_variable();
[codeblock:end]

[begin:description]
[para:requires]
[:en] There shall be no thread blocked on [`*this].
[:zh_CN] 不能有任何线程在 [`*this] 上阻塞。

[begin:note]
[:en] That is, all threads shall have been notified; they may subsequently block
on the lock specified in the wait.
[:zh_CN] 就是说，所有线程都已经被通知；但它们可能会随后在等待中所指定的锁上阻塞。

[:en] This relaxes the usual rules, which would have required all wait calls to
happen before destruction.
[:zh_CN] 这样就放宽了一般的规则，其中会要求所有的等待调用都发生早于其销毁。

[:en] Only the notification to unblock the wait needs to happen before
destruction.
[:zh_CN] 只有对等待解除阻塞的通知需要发生早于销毁。

[:en] The user should take care to ensure that no threads wait on [`*this] once
the destructor has been started, especially when the waiting threads are calling
the wait functions in a loop or using the overloads of [`wait], [`wait_for], or
[`wait_until] that take a predicate.
[:zh_CN] 用户最好更加小心以确保，一旦析构函数已经开始，就没有任何线程在 [`*this]
上等待，尤其是在等待线程是在循环中调用的等待函数，或者使用的是接受一个谓词的
[`wait]、[`wait_for] 或 [`wait_until] 的重载的情况中。
[end:note]

[para:effects]
[:en] Destroys the object.
[:zh_CN] 销毁对象。
[end:description]

[%@library notify_one[!condition_variable]]
[%@library condition_variable[!notify_one]]
[codeblock:declaration]
void notify_one() noexcept;
[codeblock:end]

[begin:description]
[para:effects]
[:en] If any threads are blocked waiting for [`*this], unblocks one of those
threads.
[:zh_CN] 如果有任何阻塞等待 [`*this] 的线程，则对其中之一的线程解除阻塞。
[end:description]

[%@library notify_all[!condition_variable]]
[%@library condition_variable[!notify_all]]
[codeblock:declaration]
void notify_all() noexcept;
[codeblock:end]

[begin:description]
[para:effects]
[:en] Unblocks all threads that are blocked waiting for [`*this].
[:zh_CN] 对阻塞等待 [`*this] 的所有线程解除阻塞。
[end:description]

[%@library wait[!condition_variable]]
[%@library condition_variable[!wait]]
[codeblock:declaration]
void wait(unique_lock<mutex>& lock);
[codeblock:end]

[begin:description]
[para:requires]
[:en] [`lock.owns_lock()] is [`true] and [`lock.mutex()] is locked by the
calling thread, and either
[:zh_CN] [`lock.owns_lock()] 为 [`true]，且 [`lock.mutex()] 被调用方线程锁定，
并且

[list]
[item]
[:en] no other thread is waiting on this [`condition_variable] object or
[:zh_CN] 没有其他等待这个 [`condition_variable] 对象的线程，或者

[item]
[:en] [`lock.mutex()] returns the same value for each of the [`lock] arguments
supplied by all concurrently waiting (via [`wait], [`wait_for], or
[`wait_until]) threads.
[:zh_CN] [`lock.mutex()] 返回的值对于由每个（通过 [`wait]、[`wait_for] 或
[`wait_until]）进行并发等待的线程所提供的锁实参，都是相同的值。
[list:end]

[para:effects]
[list]
[item]
[:en] Atomically calls [`lock.unlock()] and blocks on [`*this].
[:zh_CN] 原子地调用 [`lock.unblock()] 并在 [`*this] 上阻塞。

[item]
[:en] When unblocked, calls [`lock.lock()] (possibly blocking on the lock), then
returns.
[:zh_CN] 当解除阻塞时，调用 [`lock.lock()]（可能在锁上阻塞），然后返回。

[item]
[:en] The function will unblock when signaled by a call to [`notify_one()] or a
call to [`notify_all()], or spuriously.
[:zh_CN] 该函数将于某次调用 [`notify_one()] 或调用 [`notify_all()] 而被通知时
解除阻塞，或者假性地解除阻塞。
[list:end]

[para:remarks]
[:en] If the function fails to meet the postcondition, [`terminate()] shall be
called ([#except.terminate]).
[:zh_CN] 如果函数无法达成其后条件，则应当调用 [`terminate()]
（[#except.terminate]）。

[begin:note]
[:en] This can happen if the re-locking of the mutex throws an exception.
[:zh_CN] 这可能发生于对互斥体的重新锁定抛出了异常的情况。
[end:note]

[para:ensures]
[:en] [`lock.owns_lock()] is [`true] and [`lock.mutex()] is locked by the
calling thread.
[:zh_CN] [`lock.owns_lock()] 为 [`true]，并且 [`lock.mutex()] 被调用方线程锁定。

[para:throws]
[:en] Nothing.
[:zh_CN] 无。
[end:description]

[%@library wait[!condition_variable]]
[%@library condition_variable[!wait]]
[codeblock:declaration]
template<class Predicate>
  void wait(unique_lock<mutex>& lock, Predicate pred);
[codeblock:end]

[begin:description]
[para:requires]
[:en] [`lock.owns_lock()] is [`true] and [`lock.mutex()] is locked by the
calling thread, and either
[:zh_CN] [`lock.owns_lock()] 为 [`true]，且 [`lock.mutex()] 被调用方线程锁定，
并且

[list]
[item]
[:en] no other thread is waiting on this [`condition_variable] object or
[:zh_CN] 没有其他等待这个 [`condition_variable] 对象的线程，或者

[item]
[:en] [`lock.mutex()] returns the same value for each of the [`lock] arguments
supplied by all concurrently waiting (via [`wait], [`wait_for], or
[`wait_until]) threads.
[:zh_CN] [`lock.mutex()] 返回的值对于由每个（通过 [`wait]、[`wait_for] 或
[`wait_until]）进行并发等待的线程所提供的锁实参，都是相同的值。
[list:end]

[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：

[codeblock:notation]
while (!pred())
  wait(lock);
[codeblock:end]

[para:remarks]
[:en] If the function fails to meet the postcondition, [`terminate()] shall be
called ([#except.terminate]).
[:zh_CN] 如果函数无法达成其后条件，则应当调用 [`terminate()]
（[#except.terminate]）。

[begin:note]
[:en] This can happen if the re-locking of the mutex throws an exception.
[:zh_CN] 这可能发生于对互斥体的重新锁定抛出了异常的情况。
[end:note]

[para:ensures]
[:en] [`lock.owns_lock()] is [`true] and [`lock.mutex()] is locked by the
calling thread.
[:zh_CN] [`lock.owns_lock()] 为 [`true]，并且 [`lock.mutex()] 被调用方线程锁定。

[para:throws]
[:en] Any exception thrown by [`pred].
[:zh_CN] 由 [`pred] 所抛出的任何异常。
[end:description]

[%@library wait_until[!condition_variable]]
[%@library condition_variable[!wait_until]]
[codeblock:declaration]
template<class Clock, class Duration>
  cv_status wait_until(unique_lock<mutex>& lock,
                       const chrono::time_point<Clock, Duration>& abs_time);
[codeblock:end]

[begin:description]
[para:requires]
[:en] [`lock.owns_lock()] is [`true] and [`lock.mutex()] is locked by the
calling thread, and either
[:zh_CN] [`lock.owns_lock()] 为 [`true]，且 [`lock.mutex()] 被调用方线程锁定，
并且

[list]
[item]
[:en] no other thread is waiting on this [`condition_variable] object or
[:zh_CN] 没有其他等待这个 [`condition_variable] 对象的线程，或者

[item]
[:en] [`lock.mutex()] returns the same value for each of the [`lock] arguments
supplied by all concurrently waiting (via [`wait], [`wait_for], or
[`wait_until]) threads.
[:zh_CN] [`lock.mutex()] 返回的值对于由每个（通过 [`wait]、[`wait_for] 或
[`wait_until]）进行并发等待的线程所提供的锁实参，都是相同的值。
[list:end]

[para:effects]
[list]
[item]
[:en] Atomically calls [`lock.unlock()] and blocks on [`*this].
[:zh_CN] 原子地调用 [`lock.unblock()] 并在 [`*this] 上阻塞。

[item]
[:en] When unblocked, calls [`lock.lock()] (possibly blocking on the lock), then
returns.
[:zh_CN] 当解除阻塞时，调用 [`lock.lock()]（可能在锁上阻塞），然后返回。

[item]
[:en] The function will unblock when signaled by a call to [`notify_one()], a
call to [`notify_all()], expiration of the absolute timeout
([#thread.req.timing]) specified by [`abs_time], or spuriously.
[:zh_CN] 该函数将于某次调用 [`notify_one()]，调用 [`notify_all()]，或者超过由
[`abs_time] 所指定的绝对超时（[#thread.req.timing]）而被通知时解除阻塞，或者假性
地解除阻塞。

[item]
[:en] If the function exits via an exception, [`lock.lock()] shall be called
prior to exiting the function.
[:zh_CN] 如果函数以抛出异常退出，则应该在退出函数之前调用 [`lock.lock()]。
[list:end]

[para:remarks]
[:en] If the function fails to meet the postcondition, [`terminate()] shall be
called ([#except.terminate]).
[:zh_CN] 如果函数无法达成其后条件，则应当调用 [`terminate()]
（[#except.terminate]）。

[begin:note]
[:en] This can happen if the re-locking of the mutex throws an exception.
[:zh_CN] 这可能发生于对互斥体的重新锁定抛出了异常的情况。
[end:note]

[para:ensures]
[:en] [`lock.owns_lock()] is [`true] and [`lock.mutex()] is locked by the
calling thread.
[:zh_CN] [`lock.owns_lock()] 为 [`true]，并且 [`lock.mutex()] 被调用方线程锁定。

[para:returns]
[:en] [`cv_status::timeout] if the absolute timeout ([#thread.req.timing])
specified by [`abs_time] expired, otherwise [`cv_status::no_timeout].
[:zh_CN] 当超过由 [`abs_time] 所指定的绝对超时（[#thread.req.timing]）时返回
[`cv_status::timeout]，否则返回 [`cv_status::no_timeout]。

[para:throws]
[:en] Timeout-related exceptions ([#thread.req.timing]).
[:zh_CN] 超时相关异常（[#thread.req.timing]）。
[end:description]

[%@library wait_for[!condition_variable]]
[%@library condition_variable[!wait_for]]
[codeblock:declaration]
template<class Rep, class Period>
  cv_status wait_for(unique_lock<mutex>& lock,
                     const chrono::duration<Rep, Period>& rel_time);
[codeblock:end]

[begin:description]
[para:requires]
[:en] [`lock.owns_lock()] is [`true] and [`lock.mutex()] is locked by the
calling thread, and either
[:zh_CN] [`lock.owns_lock()] 为 [`true]，且 [`lock.mutex()] 被调用方线程锁定，
并且

[list]
[item]
[:en] no other thread is waiting on this [`condition_variable] object or
[:zh_CN] 没有其他等待这个 [`condition_variable] 对象的线程，或者

[item]
[:en] [`lock.mutex()] returns the same value for each of the [`lock] arguments
supplied by all concurrently waiting (via [`wait], [`wait_for], or
[`wait_until]) threads.
[:zh_CN] [`lock.mutex()] 返回的值对于由每个（通过 [`wait]、[`wait_for] 或
[`wait_until]）进行并发等待的线程所提供的锁实参，都是相同的值。
[list:end]

[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：

[codeblock:notation]
return wait_until(lock, chrono::steady_clock::now() + rel_time);
[codeblock:end]

[para:returns]
[:en] [`cv_status::timeout] if the relative timeout ([#thread.req.timing])
specified by [`rel_time] expired, otherwise [`cv_status::no_timeout].
[:zh_CN] 当超过由 [`rel_time] 所指定的相对超时（[#thread.req.timing]）时返回
[`cv_status::timeout]，否则返回 [`cv_status::no_timeout]。

[para:remarks]
[:en] If the function fails to meet the postcondition, [`terminate()] shall be
called ([#except.terminate]).
[:zh_CN] 如果函数无法达成其后条件，则应当调用 [`terminate()]
（[#except.terminate]）。

[begin:note]
[:en] This can happen if the re-locking of the mutex throws an exception.
[:zh_CN] 这可能发生于对互斥体的重新锁定抛出了异常的情况。
[end:note]

[para:ensures]
[:en] [`lock.owns_lock()] is [`true] and [`lock.mutex()] is locked by the
calling thread.
[:zh_CN] [`lock.owns_lock()] 为 [`true]，并且 [`lock.mutex()] 被调用方线程锁定。

[para:throws]
[:en] Timeout-related exceptions ([#thread.req.timing]).
[:zh_CN] 超时相关异常（[#thread.req.timing]）。
[end:description]

[%@library wait_until[!condition_variable]]
[%@library condition_variable[!wait_until]]
[codeblock:declaration]
template<class Clock, class Duration, class Predicate>
  bool wait_until(unique_lock<mutex>& lock,
                  const chrono::time_point<Clock, Duration>& abs_time,
                  Predicate pred);
[codeblock:end]

[begin:description]
[para:requires]
[:en] [`lock.owns_lock()] is [`true] and [`lock.mutex()] is locked by the
calling thread, and either
[:zh_CN] [`lock.owns_lock()] 为 [`true]，且 [`lock.mutex()] 被调用方线程锁定，
并且

[list]
[item]
[:en] no other thread is waiting on this [`condition_variable] object or
[:zh_CN] 没有其他等待这个 [`condition_variable] 对象的线程，或者

[item]
[:en] [`lock.mutex()] returns the same value for each of the [`lock] arguments
supplied by all concurrently waiting (via [`wait], [`wait_for], or
[`wait_until]) threads.
[:zh_CN] [`lock.mutex()] 返回的值对于由每个（通过 [`wait]、[`wait_for] 或
[`wait_until]）进行并发等待的线程所提供的锁实参，都是相同的值。
[list:end]

[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：

[codeblock:notation]
while (!pred())
  if (wait_until(lock, abs_time) == cv_status::timeout)
    return pred();
return true;
[codeblock:end]

[para:remarks]
[:en] If the function fails to meet the postcondition, [`terminate()] shall be
called ([#except.terminate]).
[:zh_CN] 如果函数无法达成其后条件，则应当调用 [`terminate()]
（[#except.terminate]）。

[begin:note]
[:en] This can happen if the re-locking of the mutex throws an exception.
[:zh_CN] 这可能发生于对互斥体的重新锁定抛出了异常的情况。
[end:note]

[para:ensures]
[:en] [`lock.owns_lock()] is [`true] and [`lock.mutex()] is locked by the
calling thread.
[:zh_CN] [`lock.owns_lock()] 为 [`true]，并且 [`lock.mutex()] 被调用方线程锁定。

[para]
[begin:note]
[:en] The returned value indicates whether the predicate evaluated to
[`true] regardless of whether the timeout was triggered.
[:zh_CN] 无论是否引发了超时，其返回值都标明了断言是否求值为 [`true]。
[end:note]

[para:throws]
[:en] Timeout-related exceptions ([#thread.req.timing]) or any exception thrown
by [`pred].
[:zh_CN] 超时相关异常（[#thread.req.timing]），或者由 [`pred] 抛出的任何异常。
[end:description]

[%@library wait_for[!condition_variable]]
[%@library condition_variable[!wait_for]]
[codeblock:declaration]
template<class Rep, class Period, class Predicate>
  bool wait_for(unique_lock<mutex>& lock,
                const chrono::duration<Rep, Period>& rel_time,
                Predicate pred);
[codeblock:end]

[begin:description]
[para:requires]
[:en] [`lock.owns_lock()] is [`true] and [`lock.mutex()] is locked by the
calling thread, and either
[:zh_CN] [`lock.owns_lock()] 为 [`true]，且 [`lock.mutex()] 被调用方线程锁定，
并且

[list]
[item]
[:en] no other thread is waiting on this [`condition_variable] object or
[:zh_CN] 没有其他等待这个 [`condition_variable] 对象的线程，或者

[item]
[:en] [`lock.mutex()] returns the same value for each of the [`lock] arguments
supplied by all concurrently waiting (via [`wait], [`wait_for], or
[`wait_until]) threads.
[:zh_CN] [`lock.mutex()] 返回的值对于由每个（通过 [`wait]、[`wait_for] 或
[`wait_until]）进行并发等待的线程所提供的锁实参，都是相同的值。
[list:end]

[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：

[codeblock:notation]
return wait_until(lock, chrono::steady_clock::now() + rel_time, std::move(pred));
[codeblock:end]

[para]
[begin:note]
[:en] There is no blocking if [`pred()] is initially [`true], even if the
timeout has already expired.
[:zh_CN] 若 [`pred()] 开始时为 [`true] 则不会发生阻塞，即便已经超时也是如此。
[end:note]

[para:remarks]
[:en] If the function fails to meet the postcondition, [`terminate()] shall be
called ([#except.terminate]).
[:zh_CN] 如果函数无法达成其后条件，则应当调用 [`terminate()]
（[#except.terminate]）。

[begin:note]
[:en] This can happen if the re-locking of the mutex throws an exception.
[:zh_CN] 这可能发生于对互斥体的重新锁定抛出了异常的情况。
[end:note]

[para:ensures]
[:en] [`lock.owns_lock()] is [`true] and [`lock.mutex()] is locked by the
calling thread.
[:zh_CN] [`lock.owns_lock()] 为 [`true]，并且 [`lock.mutex()] 被调用方线程锁定。

[para]
[begin:note]
[:en] The returned value indicates whether the predicate evaluated to
[`true] regardless of whether the timeout was triggered.
[:zh_CN] 无论是否引发了超时，其返回值都标明了断言是否求值为 [`true]。
[end:note]

[para:throws]
[:en] Timeout-related exceptions ([#thread.req.timing]) or any exception thrown
by [`pred].
[:zh_CN] 超时相关异常（[#thread.req.timing]），或者由 [`pred] 抛出的任何异常。
[end:description]
