[section#thread.thread.class
    [:en] Class [`thread]
    [:zh_CN] 类 [`thread]
]

[para]
[:en] The class [`thread] provides a mechanism to create a new thread of
execution, to join with a thread (i.e., wait for a thread to complete), and to
perform other operations that manage and query the state of a thread.
[:zh_CN] 类 [`thread] 提供一种机制来创建新的执行线程，合并一个线程（即等待线程
完成），以及实施管理和查询线程的状态的其他操作。

[:en] A [`thread] object uniquely represents a particular thread of execution.
[:zh_CN] 一个 [`thread] 对象唯一表示一个特定的执行线程。

[:en] That representation may be transferred to other [`thread] objects in such
a way that no two [`thread] objects simultaneously represent the same thread of
execution.
[:zh_CN] 这种表示可以被传递给其他 [`thread] 对象，但其方式保证没有两个 [`thread]
对象同时表示同一个执行线程。

[:en] A thread of execution is [+detached[%]] when no [`thread] object
represents that thread.
[:zh_CN] 当没有 [`thread] 对象表示一个执行线程时，称它[+已分离[%]]。

[:en] Objects of class [`thread] can be in a state that does not represent a
thread of execution.
[:zh_CN] 类 [`thread] 的对象可以处于某种并不表示任何执行线程的状态。

[enter:note]
[:en] A [`thread] object does not represent a thread of execution after default
construction, after being moved from, or after a successful call to [`detach] or
[`join].
[:zh_CN] [`thread] 对象，在进行默认构造之后，被移动走之后，或者在对 [`detach] 或
[`join] 成功进行调用之后，不表示任何执行线程。
[exit:note]

[%@library thread]
[codeblock:synopsis [!:mark ImpDef] ]
namespace std {
  class thread {
  public:
    // [:en] types:
    // [|:zh_CN] 类型：
    class id;
    using native_handle_type = [=ImpDef]; // [:en] See [#thread.req.native]
                                          // [|:zh_CN] 参见 [#thread.req.native]

    // [:en] construct/copy/destroy:
    // [|:zh_CN] 构造/复制/销毁：
    thread() noexcept;
    template <class F, class... Args> explicit thread(F&& f, Args&&... args);
    ~thread();
    thread(const thread&) = delete;
    thread(thread&&) noexcept;
    thread& operator=(const thread&) = delete;
    thread& operator=(thread&&) noexcept;

    // [:en] members:
    // [|:zh_CN] 成员：
    void swap(thread&) noexcept;
    bool joinable() const noexcept;
    void join();
    void detach();
    id get_id() const noexcept;
    native_handle_type native_handle(); // [:en] See [#thread.req.native]
                                        // [|:zh_CN] 参见 [#thread.req.native]

    // [:en] static members:
    // [|:zh_CN] 静态成员：
    static unsigned hardware_concurrency() noexcept;
  };
}
[codeblock:end]

[include thread.thread.id]

[include thread.thread.constr]

[include thread.thread.destr]

[include thread.thread.assign]

[include thread.thread.member]

[include thread.thread.static]

[include thread.thread.algorithm]
