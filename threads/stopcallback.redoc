[section#stopcallback
    [:en] Class template [`stop_callback]
    [:zh_CN] 类模板 [`stop_callback]
[:][%@lib stop_callback]
]

[para]
[%@lib stop_callback]
[codeblock:synopsis]
namespace std {
  template<class Callback>
  class stop_callback {
  public:
    using callback_type = Callback;

    // [:en] [#stopcallback.cons], constructors and destructor \
       [:zh_CN] [#stopcallback.cons]，构造函数和析构函数
    template<class C>
    explicit stop_callback(const stop_token& st, C&& cb)
        noexcept(is_nothrow_constructible_v<Callback, C>);
    template<class C>
    explicit stop_callback(stop_token&& st, C&& cb)
        noexcept(is_nothrow_constructible_v<Callback, C>);
    ~stop_callback();

    stop_callback(const stop_callback&) = delete;
    stop_callback(stop_callback&&) = delete;
    stop_callback& operator=(const stop_callback&) = delete;
    stop_callback& operator=(stop_callback&&) = delete;

  private:
    Callback callback;      // [=expos]
  };

  template<class Callback>
  stop_callback(stop_token, Callback) -> stop_callback<Callback>;
}
[codeblock:end]

[para:mandates]
[:en] [`stop_callback] is instantiated with an argument for the template
parameter [`Callback] that satisfies both [`invocable] and [`destructible].
[:zh_CN] [`stop_callback] 实例化时为模板形参 [`Callback] 提供的实参同时满足
[`invocable] 和 [`destructible]。

[para:expects]
[:en] [`stop_callback] is instantiated with an argument for the template
parameter [`Callback] that models both [`invocable] and [`destructible].
[:zh_CN] [`stop_callback] 实例化时为模板形参 [`Callback] 提供的实参同时构成
[`invocable] 和 [`destructible]。

[include stopcallback.cons]
