[section#thread.timedmutex.class
    [:en] Class [`timed_mutex]
    [:zh_CN] 类 [`timed_mutex]
]

[%@lib timed_mutex]
[codeblock:synopsis]
namespace std {
  class timed_mutex {
  public:
    timed_mutex();
    ~timed_mutex();

    timed_mutex(const timed_mutex&) = delete;
    timed_mutex& operator=(const timed_mutex&) = delete;

    void lock();    // [:en] blocking \
                       [:zh_CN] 阻塞
    bool try_lock();
    template<class Rep, class Period>
      bool try_lock_for(const chrono::duration<Rep, Period>& rel_time);
    template<class Clock, class Duration>
      bool try_lock_until(const chrono::time_point<Clock, Duration>& abs_time);
    void unlock();

    using native_handle_type = [[redoc("[=impdef]", "_")]]_;          // [:en] See [#thread.req.native] \
                                                                      [:zh_CN] 参见 [#thread.req.native]
    native_handle_type native_handle();                         // [:en] See [#thread.req.native] \
                                                                [:zh_CN] 参见 [#thread.req.native]
  };
}
[codeblock:end]

[para]
[:en] The class [`timed_mutex] provides a non-recursive mutex with exclusive
ownership semantics.
[:zh_CN] 类 [`timed_mutex] 提供一种带有互斥所有权语义的非递归互斥体。

[:en] If one thread owns a [`timed_mutex] object, attempts by another thread
to acquire ownership of that object will fail (for [`try_lock()]) or block
(for [`lock()], [`try_lock_for()], and [`try_lock_until()]) until the owning
thread has released ownership with a call to [`unlock()] or the call to
[`try_lock_for()] or [`try_lock_until()] times out (having failed to obtain
ownership).
[:zh_CN] 当一个线程拥有一个 [`timed_mutex] 对象时，其他线程尝试获取该对象的
所有权将会失败（对于 [`try_lock()]），或者阻塞直到拥有方线程以对 [`unlock()] 的
一次调用来释放所有权（对于 [`lock()]、[`try_lock_for()] 和 [`try_lock_until()]），
或者对 [`try_lock_for()] 或 [`try_lock_until()] 的调用超时（且获取所有权失败）。

[para]
[:en] The class [`timed_mutex] shall meet all of the timed mutex requirements
([#thread.timedmutex.requirements]).
[:zh_CN] 类 [`timed_mutex] 应当满足所有的定时互斥体规定
（[#thread.timedmutex.requirements]）。

[:en] It shall be a standard-layout class ([#class.prop]).
[:zh_CN] 它应当是标准布局类（[#class.prop]）。

[para]
[:en] The behavior of a program is undefined if:
[:zh_CN] 以下情况下程序的行为未定义：

[list]
[item]
[:en] it destroys a [`timed_mutex] object owned by any thread,
[:zh_CN] 销毁某个被任何线程拥有的 [`timed_mutex] 对象，
[item]
[:en] a thread that owns a [`timed_mutex] object calls [`lock()], [`try_lock()],
[`try_lock_for()], or [`try_lock_until()] on that object, or
[:zh_CN] 拥有某个 [`timed_mutex] 对象的线程在该对象上调用了 [`lock()]、
[`try_lock()]、[`try_lock_for()] 或 [`try_lock_until()]，或者
[item]
[:en] a thread terminates while owning a [`timed_mutex] object.
[:zh_CN] 线程在拥有某个 [`timed_mutex] 对象时终止。
[list:end]
