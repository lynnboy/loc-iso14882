[section#saferecl.hp.holder.general
    [:en] General
    [:zh_CN] 概述
]

[codeblock:synopsis]
namespace std {
  class hazard_pointer {
  public:
    hazard_pointer() noexcept;
    hazard_pointer(hazard_pointer&&) noexcept;
    hazard_pointer& operator=(hazard_pointer&&) noexcept;
    ~hazard_pointer();

    bool empty() const noexcept;
    template<class T> T* protect(const atomic<T*>& src) noexcept;
    template<class T> bool try_protect(T*& ptr, const atomic<T*>& src) noexcept;
    template<class T> void reset_protection(const T* ptr) noexcept;
    void reset_protection(nullptr_t = nullptr) noexcept;
    void swap(hazard_pointer&) noexcept;
  };
}
[codeblock:end]

[para]
[:en] An object of type [`hazard_pointer] is either empty or [+owns[%owning
[!hazard pointer]]] a hazard pointer.
[:zh_CN] [`hazard_pointer] 类型的对象，要么为空，要么[+拥有[%拥有[!涉险指针]]]
一个涉险指针。

[:en] Each hazard pointer is owned by exactly one object of type [`hazard_pointer].
[:zh_CN] 每个涉险指针均被恰好一个 [`hazard_pointer] 类型的对象拥有。

[begin:note]
[:en] An empty [`hazard_pointer] object is different from a [`hazard_pointer]
object that owns an unassociated hazard pointer.
[:zh_CN] 空 [`hazard_pointer] 对象与拥有一个无关联涉险指针的 [`hazard_pointer]
对象是不同的。

[para]
[:en] An empty [`hazard_pointer] object does not own any hazard pointers.
[:zh_CN] 空 [`hazard_pointer] 对象不拥有任何涉险指针。
[end:note]
