[section#thread.mutex.recursive
    [:en] Class [`recursive_mutex]
    [:zh_CN] 类 [`recursive_mutex]
]

[%@library recursive_mutex]
[codeblock:synopsis [!:mark ImpDef] ]
namespace std {
  class recursive_mutex {
  public:
    recursive_mutex();
    ~recursive_mutex();

    recursive_mutex(const recursive_mutex&) = delete;
    recursive_mutex& operator=(const recursive_mutex&) = delete;

    void lock();
    bool try_lock() noexcept;
    void unlock();

    using native_handle_type = [=ImpDef];          // [:en] See [#thread.req.native]
                                                   // [|:zh_CN] 参见 [#thread.req.native]
    native_handle_type native_handle();                         // [:en] See [#thread.req.native]
                                                                // [|:zh_CN] 参见 [#thread.req.native]
  };
}
[codeblock:end]

[para]
[:en] The class [`recursive_mutex] provides a recursive mutex with exclusive
ownership semantics.
[:zh_CN] 类 [`recursive_mutex] 提供一种带有互斥所有权语义的递归互斥体。

[:en] If one thread owns a [`recursive_mutex] object, attempts by another thread
to acquire ownership of that object will fail (for [`try_lock()]) or block
(for [`lock()]) until the first thread has completely released ownership.
[:zh_CN] 当一个线程拥有一个 [`recursive_mutex] 对象时，其他线程尝试获取该对象的
所有权将会失败（对于 [`try_lock()]），或者阻塞直到拥有方线程完全释放了所有权
（对于 [`lock()]）。

[para]
[:en] The class [`recursive_mutex] shall meet all of the mutex requirements
([#thread.mutex.requirements]).
[:zh_CN] 类 [`recursive_mutex] 应当满足所有的互斥体规定
（[#thread.mutex.requirements]）。

[:en] It shall be a standard-layout class ([#class.prop]).
[:zh_CN] 它应当是标准布局类（[#class.prop]）。

[para]
[:en] A thread that owns a [`recursive_mutex] object may acquire additional
levels of ownership by calling [`lock()] or [`try_lock()] on that object.
[:zh_CN] 拥有某个 [`recursive_mutex] 对象的线程，可以通过在该对象上调用
[`lock()] 或 [`try_lock()] 来获得额外级别的所有权。

[:en] It is unspecified how many levels of ownership may be acquired by a single
thread.
[:zh_CN] 一个线程可以获取多少级别的所有权是未指明的。

[:en] If a thread has already acquired the maximum level of ownership for a
[`recursive_mutex] object, additional calls to [`try_lock()] shall fail, and
additional calls to [`lock()] shall throw an exception of type [`system_error].
[:zh_CN] 如果线程已经获取了一个 [`recursive_mutex] 对象的最大级别的所有权，则
再次调用 [`try_lock()] 应当失败，而再次调用 [`lock()] 应当抛出 [`system_error]
类型的异常。

[:en] A thread shall call [`unlock()] once for each level of ownership acquired
by calls to [`lock()] and [`try_lock()].
[:zh_CN] 线程应当为通过 [`lock()] 和 [`try_lock()] 所获取的每个级别的所有权都
进行一次 [`unlock()] 调用。

[:en] Only when all levels of ownership have been released may ownership be
acquired by another thread.
[:zh_CN] 只有当所有级别的所有权都被释放后，其他线程才能获得其所有权。

[para]
[:en] The behavior of a program is undefined if:
[:zh_CN] 以下情况下程序的行为未定义：

[list]
[item]
[:en] it destroys a [`recursive_mutex] object owned by any thread or
[:zh_CN] 销毁某个被任何线程拥有的 [`recursive_mutex] 对象，或者
[item]
[:en] a thread terminates while owning a [`recursive_mutex] object.
[:zh_CN] 线程在拥有某个 [`recursive_mutex] 对象时终止。
[list:end]
