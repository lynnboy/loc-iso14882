[section#expr.prim.req
    [:en] Requires expression
    [:zh_CN] requires 表达式

[%:begin#expression.requires
    [:en] expression [!requires]
	[:zh_CN] 表达式[!requires] ]
]

[para]
[:en]
A [~requires-expression] provides a concise way to express requirements on
template arguments that can be checked by name lookup ([#basic.lookup])
or by checking properties of types and expressions.
[:zh_CN]
[~requires-表达式]提供一种精确的方式来表达对模板实参实施可以由名字查找
（[#basic.lookup]）或者通过检查类型和表达式的性质而施加的要求规定。

[syntax]
[rule requires-expression [:zh_CN] requires-表达式 ]
    [| [`requires] [~:opt requirement-parameter-list] requirement-body ]
[rule:end]

[rule requirement-parameter-list [:zh_CN] 要求参数列表 ]
    [| [`(] [~:opt parameter-declaration-clause] [`)] ]
[rule:end]

[rule requirement-body [:zh_CN] 要求体 ]
    [| [`{] requirement-seq [`}] ]
[rule:end]

[rule requirement-seq [:zh_CN] 要求序列 ]
    [| requirement ]
    [| requirement-seq requirement ]
[rule:end]

[rule requirement [:zh_CN] 要求 ]
    [| simple-requirement ]
    [| type-requirement ]
    [| compound-requirement ]
    [| nested-requirement ]
[rule:end]
[syntax:end]

[para]
[:en]
A [~requires-expression] is a prvalue of type [`bool] whose value is described
below.
[:zh_CN] [~requires-表达式] 是 [`bool] 类型的纯右值，其值在下文中描述。

[:en]
Expressions appearing within a [~requirement-body] are unevaluated operands
([#expr.prop]).
[:zh_CN]
出现于[~要求体]重的表达式是免求值操作数（[#expr.prop]）。

[para]
[enter:example]
[:en]
A common use of [~requires-expression]s is to define requirements in concepts
such as the one below:
[:zh_CN]
[~requires-表达式]的常见用法是以概念来定义要求，比如以下代码：

[codeblock]
template<typename T>
  concept R = requires (T i) {
    typename T::type;
    {*i} -> const typename T::type&;
  };
[codeblock:end]

[:en]
A [~requires-expression] can also be used in a [~requires-clause] ([#temp]) as a
way of writing ad hoc constraints on template arguments such as the one below:
[:zh_CN]
[~requires-表达式]还可以用在[~requires-子句]（[#temp]）中，作为一种针对模板实参
编写专门约束的方式，比如以下代码：

[codeblock]
template<typename T>
  requires requires (T x) { x + x; }
    T add(T a, T b) { return a + b; }
[codeblock:end]

[:en]
The first [`requires] introduces the [~requires-clause], and the second
introduces the [~requires-expression].
[:zh_CN]
第一个 [`requires] 引入 [~requires-子句]，而第二个引入 [~requires-表达式]。
[exit:example]

[para]
[:en]
A [~requires-expression] may introduce local parameters using a
[~parameter-declaration-clause] ([#dcl.fct]).
[:zh_CN]
[~requires-表达式]可以使用[~形参声明式子句]（[#dcl.fct]）来引入局部形参。

[:en]
A local parameter of a [~requires-expression] shall not have a default argument.
[:zh_CN]
[~requires-表达式]的局部形参不能带有默认实参。

[:en]
Each name introduced by a local parameter is in scope from the point of its
declaration until the closing brace of the [~requirement-body].
[:zh_CN]
由局部形参所引入的名字，从其声明点直到[~要求体]的闭合花括号之前都处于作用域中。

[:en]
These parameters have no linkage, storage, or lifetime; they are only used
as notation for the purpose of defining [~requirement]s.
[:zh_CN]
这些形参没有连接、存储或生存期；它们仅用作定义[~要求]的语法记号。

[:en]
The [~parameter-declaration-clause] of a [~requirement-parameter-list] shall not
terminate with an ellipsis.
[:zh_CN]
[~要求形参列表]的[~形参声明式子句]不能以省略号结尾。

[enter:example]
[codeblock]
template<typename T>
concept C = requires(T t, ...) {    // [:en] error: terminates with an ellipsis
                                    // [|:zh_CN] 错误：以省略号结尾
  t;
};
[codeblock:end]
[exit:example]

[para]
[:en]
[%requirement]
The [~requirement-body] contains a sequence of [~requirement]s.
[:zh_CN]
[%要求]
[~要求体]包含一系列[~要求]。

[:en]
These [~requirement]s may refer to local parameters, template parameters, and
any other declarations visible from the enclosing context.
[:zh_CN]
这些[~要求]可以涉指局部形参、模板形参，以及其外围语境中可见的任何其他声明式。

[para]
[:en]
The substitution of template arguments into a [~requires-expression] may result
in the formation of invalid types or expressions in its requirements or the
violation of the semantic constraints of those requirements.
[:zh_CN]
将模板实参替换到[~requires-表达式]中时可能导致在其要求中出现无效的类型或表达式的
形式，或者违反对这些要求的语义约束。

[:en]
In such cases, the [~requires-expression] evaluates to [`false]; it does not
cause the program to be ill-formed.
[:zh_CN]
这种情况下，[~requires-表达式]求值为 [`false]；它并不会导致程序非良构。

[:en]
The substitution and semantic constraint checking proceeds in lexical order and
stops when a condition that determines the result of the [~requires-expression]
is encountered.
[:zh_CN]
以词法顺序进行实参替换和语义约束检查，当遇到可以确定该 [~requires-表达式]的结果
的条件时停止。

[:en]
If substitution (if any) and semantic constraint checking succeed, the
[~requires-expression] evaluates to [`true].
[:zh_CN]
如果实参替换（如果有）和语义约束检查均成功，则该 [~requires-表达式]求值为
[`true]。

[enter:note]
[:en]
If a [~requires-expression] contains invalid types or expressions in its
requirements, and it does not appear within the declaration of a templated
entity, then the program is ill-formed.
[:zh_CN]
如果 [~requires-表达式]在其要求中包含无效类型或表达式，并且它并非在模板化的实体
声明式之中，则程序非良构。
[exit:note]

[:en]
If the substitution of template arguments into a [~requirement] would always
result in a substitution failure, the program is ill-formed; no diagnostic
required.
[:zh_CN]
如果将模板实参替换到某个[~要求]中总是造成替换失败，则程序非良构；无须诊断。

[enter:example]
[codeblock]
template<typename T> concept C =
requires {
  new int[-(int)sizeof(T)]; // [:en] ill-formed, no diagnostic required
                            // [|:zh_CN] 非良构，无须诊断
};
[codeblock:end]
[exit:example]

[include expr.prim.req.simple]

[include expr.prim.req.type]

[include expr.prim.req.compound]

[include expr.prim.req.nested]

[%:end#expression.requires]