[section#expr.rel
    [:en] Relational operators
    [:zh_CN] 关系运算符

[%  [:en] expression[!relational operators]
    [:zh_CN] 表达式[!关系运算符～] ]
[%  [:en] operator[!relational]
    [:zh_CN] 运算符[!关系～] ]
]

[para]
[:en]
The relational operators group left-to-right.
[:zh_CN]
关系运算符按从左向右组合。

[begin:example]
[:en]
[`a<b<c] means [`(a<b)<c] and [em not] [`(a<b)&&(b<c)].
[:zh_CN]
[`a<b<c] 意为 [`(a<b)<c] 而[em 不]是 [`(a<b)&&(b<c)]。
[end:example]

[:en]
[%operator[!less than]]
[%[`<][%operator[!less than]]]
[%operator[!greater than]]
[%[`>][%operator[!greater than]]]
[%operator[!less than or equal to]]
[%[`<=][%operator[!less than or equal to]]]
[%operator[!greater than or equal to]]
[%[`>=][%operator[!greater than or equal to]]]
[:zh_CN]
[%运算符[!小于～]]
[%[`<][%运算符[!小于～]]]
[%运算符[!大于～]]
[%[`>][%运算符[!大于～]]]
[%运算符[!小于或等于～]]
[%[`<=][%运算符[!小于或等于～]]]
[%运算符[!大于或等于～]]
[%[`>=][%运算符[!大于或等于～]]]

[syntax]
[rule relational-expression [:zh_CN] 关系表达式 ]
    [| compare-expression ]
    [| relational-expression [`<] compare-expression ]
    [| relational-expression [`>] compare-expression ]
    [| relational-expression [`<=] compare-expression ]
    [| relational-expression [`>=] compare-expression ]
[rule:end]
[syntax:end]

[:en]
The lvalue-to-rvalue ([#conv.lval]), array-to-pointer ([#conv.array]), and
function-to-pointer ([#conv.func]) standard conversions are performed on the
operands.
[:zh_CN]
对操作数实施左值向右值（[#conv.lval]），数组向指针（[#conv.array]），和函数向
指针（[#conv.func]）标准转换。

[:en]
The comparison is deprecated if both operands were of array type prior to these
conversions ([#depr.array.comp]).
[:zh_CN]
如果两个操作数在进行这些转换之前都为数组类型，则这种比较被摒弃
（[#depr.array.comp]）。

[para]
[:en]
The converted operands shall have arithmetic, enumeration, or pointer type.
[:zh_CN]
转换后的操作数应当具有算术、枚举或指针类型。

[:en]
The operators [`<] (less than), [`>] (greater than), [`<=] (less than or equal
to), and [`>=] (greater than or equal to) all yield [`:key false] or [`:key true].
[:zh_CN]
运算符 [`<]（小于）、[`>]（大于）、[`<=]（小于等于）和 [`>=]（大于等于）都产生
[`:key false] 或 [`:key true]。

[:en]
The type of the result is [`:key bool].
[:zh_CN]
其结果的类型为 [`:key bool]。

[para]
[:en]
The usual arithmetic conversions ([#expr.arith.conv]) are performed on operands
of arithmetic or enumeration type.
[:zh_CN]
对算术或枚举类型的操作数实施一般算术转换（[#expr.arith.conv]）。

[:en]
If both operands are pointers, pointer conversions ([#conv.ptr]) and
qualification conversions ([#conv.qual]) are performed to bring them to their
composite pointer type ([#expr.type]).
[:zh_CN]
若两个操作数均为指针，则实施指针转换（[#conv.ptr]）和限定转换（[#conv.qual]）
以将它们变为它们的合成指针类型（[#expr.type]）。

[:en]
After conversions, the operands shall have the same type.
[:zh_CN]
在转换之后，两个操作数应当具有相同类型。

[para]
[:en]
The result of comparing unequal pointers to objects[#:fn] is defined in terms
of a partial order consistent with the following rules:
[:zh_CN]
比较两个不相等的对象指针[#:fn]的结果是依据与如下规则相一致的部分排序所定义的：

[note:foot]
[:en]
As specified in [#basic.compound], an object that is not an array element is
considered to belong to a single-element array for this purpose and a pointer
past the last element of an array of [$n] elements is considered to be
equivalent to a pointer to a hypothetical array element [$n] for this purpose.
[:zh_CN]
如 [#basic.compound] 所指定，为进行指针算术，不是数组元素的对象被当作属于一个
单元素数组，而为进行指针算术，越过某个 [$n] 元数组的最后一个元素的指针，被当做
等价于指向虚构的数组元素 [$n]。
[note:end]

[list]
[item]
[:en]
If two pointers point to different elements of the same array, or to subobjects
thereof, the pointer to the element with the higher subscript is required to
compare greater.
[:zh_CN]
若两个指针指向同一个数组的不同元素或其子对象，则指向带有更大下标的元素的指针要求
在比较中较大。

[item]
[:en]
If two pointers point to different non-static data members of the same object,
or to subobjects of such members, recursively, the pointer to the later declared
member is required to compare greater provided neither member is a subobject of
zero size and their class is not a union.
[:zh_CN]
若两个指针指向同一个对象的不同非静态数据成员，或分别指向这些成员的子对象，则当
没有任何一个成员是大小为零的子对象，且它们所在类不是联合体时，指向更晚声明的成员
的指针要求在比较中更大。

[item]
[:en]
Otherwise, neither pointer is required to compare greater than the other.
[:zh_CN]
否则，各个指针都不要求比另一个更大。
[list:end]

[para]
[:en]
If two operands [`p] and [`q] compare equal ([#expr.eq]), [`p<=q] and [`p>=q]
both yield [`:key true] and [`p<q] and [`p>q] both yield [`:key false].
[:zh_CN]
若两个操作数 [`p] 和 [`q] 比较为相等（[#expr.eq]），则 [`p<=q] 和 [`p>=q] 都产生
[`:key true] 且 [`p<q] 和 [`p>q] 都产生 [`:key false]。

[:en]
Otherwise, if a pointer [`p] compares greater than a pointer [`q], [`p>=q],
[`p>q], [`q<=p], and [`q<p] all yield [`:key true] and [`p<=q], [`p<q], [`q>=p],
and [`q>p] all yield [`:key false].
[:zh_CN]
否则，若指针 [`p] 与 [`q] 比较更大，则 [`p>=q]、[`p>q]、[`q<=p] 和 [`q<p] 都将
产生 [`:key true] 而 [`p<=q]、[`p<q]、[`q>=p] 和 [`q>p] 都将产生 [`:key false]。

[:en]
Otherwise, the result of each of the operators is unspecified.
[:zh_CN]
否则，这些运算符的结果是未指明的。

[para]
[:en]
If both operands (after conversions) are of arithmetic or enumeration type, each
of the operators shall yield [`:key true] if the specified relationship is true
and [`:key false] if it is false.
[:zh_CN]
如果两个操作数（在转换之后）都是算术或枚举类型，则各个运算符所指定的关系为真时
应当产生 [`:key true]，为假时产生 [`:key false]。
