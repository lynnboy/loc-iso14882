[section#expr.type.conv
    [:en] Explicit type conversion (functional notation)
    [:zh_CN] 显式类型转换（函数式记法）
]

[para]
[:en]
[%expression[!cast]]
[%explicit type conversion[% casting]]
[%type conversion[!explicit][% casting]]
[%conversion explicit type[% casting]]
[%casting]
A [~simple-type-specifier] ([#dcl.type.simple]) or [~typename-specifier]
([#temp.res]) followed by a parenthesized optional [~expression-list] or by a
[~braced-init-list] (the initializer) constructs a value of the specified type
given the initializer.
[:zh_CN]
[%表达式[!转型～]]
[%显式类型转换[%转型]]
[%类型转换[!显式～][%转型]]
[%转换[!显式类型～][%转型]]
[%转型]
后面跟着一个带括号的可选的[~表达式列表]或一个[~花括号初始化列表]（其初始化式）的
[~简单类型说明符]（[#dcl.type.simple]）或[~typename-说明符]（[#temp.res]），利用
这个初始化式构造一个所指定类型的值。

[:en]
[%deduction[!class template arguments]]
If the type is a placeholder for a deduced class type, it is replaced by the
return type of the function selected by overload resolution for class template
deduction ([#over.match.class.deduct]) for the remainder of this subclause.
[:zh_CN]
[%推断[!类模板实参]]
如果类型是某个被推断类类型的占位符，则在本子条款的余下部分中，它被替换为由
类模板推断（[#over.match.class.deduct]）所进行的重载决议所选择的函数的返回类型。

[para]
[:en]
Otherwise, if the type contains a placeholder type, it is replaced by the type
determined by placeholder type deduction ([#dcl.type.auto.deduct]).
[:zh_CN]
否则，如果类型包含占位符类型，则它被替换为占位符类型推断（[#dcl.type.auto.deduct]）
所确定的类型。

[begin:example]
[codeblock]
struct A {};
void f(A&);             // #1
void f(A&&);            // #2
A& g();
void h() {
  f(g());               // [:en] calls #1 \
                        [:zh_CN] 调用 #1
  f(A(g()));            // [:en] calls #2 with a temporary object \
                        [:zh_CN] 以临时对象调用 #2
  f(auto(g()));         // [:en] calls #2 with a temporary object \
                        [:zh_CN] 以临时对象调用 #2
}
[codeblock:end]
[end:example]

[para]
[:en]
If the initializer is a parenthesized single expression, the type conversion
expression is equivalent to the corresponding cast expression ([#expr.cast]).
[:zh_CN]
如果其初始化式是带有括号的单个表达式，则类型转换表达式等价于其所对应的转型表达式
（[#expr.cast]）。

[:en]
[%type[!incomplete]]
Otherwise, if the type is [=cv] [`:key void] and the initializer is [`()] or
[`{}] (after pack expansion, if any), the expression is a prvalue of type
[`:key void] that performs no initialization.
[:zh_CN]
[%类型[!不完整～]]
否则，如果类型是 [=cv] [`:key void]，且其初始化式（进行包组展开之后，如果有）为
[`()] 或 [`{}]，则表达式为 [`:key void] 类型的纯右值且并不进行初始化。

[:en]
Otherwise, the expression is a prvalue of the specified type whose result object
is direct-initialized ([#dcl.init]) with the initializer.
[:zh_CN]
否则，该表达式就是所指定类型的纯右值，其结果对象以该初始化式进行直接初始化
（[#dcl.init]）。

[:en]
If the initializer is a parenthesized optional [~expression-list], the specified
type shall not be an array type.
[:zh_CN]
如果初始化式是带括号的可选的[~表达式列表]，则所指定的类型不能是数组类型。
