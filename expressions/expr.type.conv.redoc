[section#expr.type.conv
    [:en] Explicit type conversion (functional notation)
    [:zh_CN] 显式类型转换（函数式记法）
]

[para]
[:en]
[%expression[!cast]]
[%explicit type conversion[% casting]]
[%type conversion[!explicit][% casting]]
[%conversion explicit type[% casting]]
[%casting]
A [~simple-type-specifier] ([#dcl.type.simple]) or [~typename-specifier]
([#temp.res]) followed by a parenthesized optional [~expression-list] or by a
[~braced-init-list] (the initializer) constructs a value of the specified type
given the initializer.
[:zh_CN]
[%表达式[!强制转换～]]
[%显式类型转换[% 强制转换]]
[%类型转换[!显式～][% 强制转换]]
[%转换[!显式类型～][% 强制转换]]
[%强制转换]
后面跟着一个带括号的可选的[~表达式列表]或一个[~花括号初始化列表]（其初始化式）的
[~简单类型说明符]（[#dcl.type.simple]）或[~typename-说明符]（[#temp.res]），利用
这个初始化式构造一个所指定类型的值。

[:en]
[%deduction[!class template arguments]]
If the type is a placeholder for a deduced class type, it is replaced by the
return type of the function selected by overload resolution for class template
deduction ([#over.match.class.deduct]) for the remainder of this subclause.
[:zh_CN]
[%推断[!类模板实参]]
如果其类型是某个被推断的类类型的占位符，则在本子条款的余下部分中，被替换为由
类模板推断（[#over.match.class.deduct]）所进行的重载决议所选择的函数的返回类型。

[para]
[:en]
If the initializer is a parenthesized single expression, the type conversion
expression is equivalent to the corresponding cast expression ([#expr.cast]).
[:zh_CN]
若该初始化式是带有括号的单个表达式，则类型转换表达式等价于其所对应的强制转换
表达式（[#expr.cast]）。

[:en]
[%type[!incomplete]]
Otherwise, if the type is [$cv] [`void] and the initializer is [`()], the
expression is a prvalue of the specified type that performs no initialization.
[:zh_CN]
[%类型[!不完整～]]
否则，若其类型是 [$cv] [`void] 且其初始化式为 [`()]，则表达式为所指定的类型的
纯右值且并不进行初始化。

[:en]
Otherwise, the expression is a prvalue of the specified type whose result object
is direct-initialized ([#dcl.init]) with the initializer.
[:zh_CN]
否则，该表达式就是所指定类型的纯右值，其结果对象以该初始化式进行直接初始化
（[#dcl.init]）。

[:en]
For an expression of the form [`T()], [`T] shall not be an array type.
[:zh_CN]
对于形式为 [`T()] 的表达式，[`T] 不能是数组类型。
