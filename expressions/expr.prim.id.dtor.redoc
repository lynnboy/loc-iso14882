[section#expr.prim.id.dtor
    [:en] Destruction
    [:zh_CN] 析构
]

[para]
[:en]
[%expression[!destructor call]]
[%expression[!pseudo-destructor call]]
An [~id-expression] that denotes the destructor of a type [`T] names the
destructor of [`T] if [`T] is a class type ([#class.dtor]), otherwise the
[~id-expression] is said to name a [+pseudo-destructor].
[:zh_CN]
[%表达式[!析构函数调用～]]
[%表达式[!伪析构函数调用～]]
代表类型 [`T] 的析构函数的[~标识表达式]，当 [`T] 为类类型时指名的是 [`T] 的析构
函数（[#class.dtor]），否则称该[~标识表达式]指名了一个[~伪析构函数]。

[para]
[:en]
If the [~id-expression] names a pseudo-destructor, [`T] shall be a scalar type
and the [~id-expression] shall appear as the right operand of a class member
access ([#expr.ref]) that forms the [~postfix-expression] of a function call
([#expr.call]).
[:zh_CN]
如果[~标识表达式]指名的是伪析构函数，则 [`T] 应当为标量类型，并且该[~标识表达式]
应当作为构成函数调用的[~后缀表达式]（[#expr.call]）的类成员访问（[#expr.ref]）的
右操作数。

[begin:note]
[:en]
Such a call has no effect.
[:zh_CN]
这样的调用没有效果。
[end:note]

[para]
[begin:example]
[codeblock]
struct C { };
void f() {
  C * pc = new C;
  using C2 = C;
  pc->C::~C2();     // [:en] OK, destroys [`*pc]
                    // [|:zh_CN] OK，销毁 [`*pc]
  C().C::~C();      // [:en] undefined behavior: temporary of type [`C] destroyed twice
                    // [|:zh_CN] 未定义行为：两次销毁了 [`C] 类型的临时对象
  using T = int;
  0 .T::~T();       // [:en] OK, no effect
                    // [|:zh_CN] OK，没有效果
  0.T::~T();        // [:en] error: [`0.T] is a [~user-defined-floating-point-literal] ([#lex.ext])
                    // [|:zh_CN] 错误：[`0.T] 是[~用户定义浮点字面量]（[#lex.ext]）
}
[codeblock:end]
[end:example]
