[section#expr.sub
    [:en] Subscripting
    [:zh_CN] 下标
]

[para]
[:en] [%operator[!subscripting]] [%[``[`]][% operator [!subscripting]]]
A [+:adj subscript[!expresion]] is a postfix expression followed by square
brackets containing a possibly empty, comma-separated list of
[~initializer-clause]s that constitute the arguments to the subscript operator.
[:zh_CN] [%运算符[!下标～]] [%[``[`]][% 运算符[!下标～]]]
[+:adj 下标[!表达式]]是后缀表达式后面跟着方括号，其中包含可能为空的
[~初始化式子句]的逗号分隔列表，它构成下标运算符的各个实参。

[:en] The [~postfix-expression] and the initialization of the object parameter ([#dcl.fct])
of any applicable subscript operator function ([#over.sub]) is sequenced before
each expression in the [~expression-list] and also before any default argument ([#dcl.fct.default]).
[:zh_CN] [~后缀表达式]和任何适用的下标运算符函数（[#over.sub]）的对象形参（[#dcl.fct]）
的初始化，按顺序早于[~表达式列表]中的各个表达式，也早于任何默认实参（[#dcl.fct.default]）。

[:en] The initialization of a non-object parameter of a subscript operator function [`S],
including every associated value computation and side effect, is indeterminately
sequenced with respect to that of any other non-object parameter of [`S].
[:zh_CN] 下标运算符函数 [`S] 的非对象形参的初始化，包括其关联的每项值计算和副作用，
与 [`S] 的任何其他非对象形参的初始化之间是顺序不确定的。

[para]
[:en] With the built-in subscript operator, an [~expression-list] shall be present,
consisting of a single [~assignment-expression].
[:zh_CN] 对于内建下标运算符，应当出现由单个[~赋值表达式]构成的[~表达式列表]。

[:en] One of the expressions shall be a glvalue of type [=lq]array of [`T][=rq] or a
prvalue of type [=lq]pointer to [`T][=rq] and the other shall be a prvalue of
unscoped enumeration or integral type.
[:zh_CN] 其中的两个表达式之一应当是“[`T] 的数组”类型的泛左值或“[`T] 的指针”类型
的纯右值，而另一个应当是无作用域枚举或整型类型的纯右值。

[:en] The result is of type [=lq][`T][=rq].
[:zh_CN] 其结果类型为“[`T]”。

[:en] [%type[!incomplete]]
The type [=lq][`T][=rq] shall be a completely-defined object type.[#:fn]
[:zh_CN] [%类型[!不完整～]]
类型“[`T]”应当是完整定义的对象类型[#:fn]。

[note:foot]
[:en] This is true even if the subscript operator is used in the following common
idiom: [`&x`[0`]].
[:zh_CN] 即使是以下这种常见用法中使用的下标运算符也是如此：[`&x`[0`]]。
[note:end]

[:en] The expression [`E1`[E2`]] is identical (by definition) to [`*((E1)+(E2))],
except that in the case of an array operand, the result is an lvalue if that
operand is an lvalue and an xvalue otherwise.
[:zh_CN] 表达式 [`E1`[E2`]]（被定义为）等价于 [`*((E1)+(E2))]，但对于数组操作数，
当该操作数是左值时其结果为左值，否则为临限值。

[para]
[begin:note]
[:en] Despite its asymmetric appearance, subscripting is a commutative operation
except for sequencing.
[:zh_CN] 不管它表现出来的非对称性，除了顺序性之外，下标是可交换的运算。

[:en] See [#expr.unary] and [#expr.add] for details of [`*] and [`+] and [#dcl.array]
for details of array types.
[:zh_CN] 有关 [`*] 和 [`+] 的细节参见 [#expr.unary] 和 [#expr.add]，有关数组类型
的细节参见 [#dcl.array]。
[end:note]
