[section#expr.pre
    [:en] Preamble
    [:zh_CN] 导言
]

[para]
[begin:note]
[:en]
[#expr] defines the syntax, order of evaluation, and meaning of expressions.[#:fn]
[:zh_CN]
[#expr] 定义了表达式的语法、求值顺序及其含义[#:fn]。

[note:foot]
[:en]
The precedence of operators is not directly specified, but it can be derived
from the syntax.
[:zh_CN]
各运算符的优先级并未直接指定，但可以从其语法中推导出来。
[note:end]

[:en]
An expression is a sequence of operators and operands that specifies a
computation.
[:zh_CN]
表达式是用以指定某项计算的一系列运算符和操作数。

[:en]
An expression can result in a value and can cause side effects.
[:zh_CN]
表达式可以产生值也可以造成副作用。
[end:note]

[para]
[begin:note]
[:en]
[%operator[!overloaded]]
Operators can be overloaded, that is, given meaning when applied to expressions
of class type ([#class]) or enumeration type ([#dcl.enum]).
[:zh_CN]
[%运算符[!重载～]]
可以对运算符进行重载，这是指，指定它在应用于类类型（[#class]）或枚举类型
（[#dcl.enum]）的表达式上时的含义。

[:en]
Uses of overloaded operators are transformed into function calls as described in
[#over.oper].
[:zh_CN]
对重载运算符的使用，将按照 [#over.oper] 所述转换为函数调用。

[:en]
Overloaded operators obey the rules for syntax and evaluation order specified in
[#expr.compound], but the requirements of operand type and value category are
replaced by the rules for function call.
[:zh_CN]
重载运算符遵循在 [#expr.compound] 中指定的语法和求值顺序规则，但关于操作数类型和
值类别的规定，则替换为针对函数调用的规则。

[:en]
Relations between operators, such as [`++a] meaning [`a+=1], are not guaranteed
for overloaded operators ([#over.oper]).
[:zh_CN]
运算符之间的关系，如 [`++a] 意为 [`a+=1]，不保证在重载运算符（[#over.oper]）上
仍然保持。
[end:note]

[para]
[:en]
Subclause [#expr.compound] defines the effects of operators when applied to
types for which they have not been overloaded.
[:zh_CN]
子条款 [#expr.compound] 中定义了将运算符施加于并未对其进行重载的类型上时的效果。

[:en]
Operator overloading shall not modify the rules for the
[+:adj built-in[!operators]], that is, for operators applied to types for which
they are defined by this Standard.
[:zh_CN]
运算符重载不应当改变[+:adj 内建[!运算符]]（就是说，施加于由本标准所定义的类型上
的运算符）的规则。

[:en]
However, these built-in operators participate in overload resolution, and as
part of that process user-defined conversions will be considered where necessary
to convert the operands to types appropriate for the built-in operator.
[:zh_CN]
然而，这些内建运算符参与重载决议，而且作为这个过程中的一部分，在须要把操作数转换
为适用于内建运算符的类型时，还要考察用户定义转换。

[:en]
If a built-in operator is selected, such conversions will be applied to the
operands before the operation is considered further according to the rules in
subclause [#expr.compound]; see [#over.match.oper], [#over.built].
[:zh_CN]
如果选取了内建运算符，则将在按照子条款 [#expr.compound] 的规则进一步考察其操作
之前，对操作数实施这些转换；参见 [#over.match.oper]，[#over.built]。

[para]
[:en]
[%exception[!arithmetic]]
[%exception[!undefined arithmetic]]
[%overflow[!undefined]]
[%zero[!division by undefined]]
[%zero[!remainder undefined]]
If during the evaluation of an expression, the result is not mathematically
defined or not in the range of representable values for its type, the behavior
is undefined.
[:zh_CN]
[%异常[!算术～]]
[%异常[!未定义的算术～]]
[%溢出[!未定义的]]
[%零[!未定义的除以～]]
[%零[!未定义的余数]]
对表达式进行求值时，如果其结果在数学上无定义，或不在其类型的可表示的值的范围内，
则其行为是未定义的。

[begin:note]
[:en]
[%overflow]
Treatment of division by zero, forming a remainder using a zero divisor, and all
floating-point exceptions varies among machines, and is sometimes adjustable by
a library function.
[:zh_CN]
[%溢出]
对于被零除，用零除数获取余数，以及所有的浮点异常的处理，不同机器之间都有所不同，
且有时可以通过库函数来进行调整。
[end:note]

[para]
[:en]
[%operator [!precedence of]]
[%expression [!order of evaluation of]]
[:zh_CN]
[%运算符 [!～优先级]]
[%表达式 [!～求值顺序]]

[begin:note]
[:en]
The implementation can regroup operators according to the usual mathematical
rules only where the operators really are associative or commutative.[#:fn]
[:zh_CN]
仅当运算符在该处确实具有结合性或交换性时，实现才能根据常规的数学规则对它们进行
重新组合[#:fn]。

[note:foot]
[:en]
Overloaded operators are never assumed to be associative or commutative.
[:zh_CN]
重载运算符从不假定具有结合性或交换性。
[note:end]

[:en]
For example, in the following fragment
[:zh_CN]
例如，在如下片段中
[codeblock]
int a, b;
/* ... */
a = a + 32760 + b + 5;
[codeblock:end]
[:en@~]
the expression statement behaves exactly the same as
[:zh_CN@~]
根据运算符的结合性和优先级，该表达式与
[codeblock]
a = (((a + 32760) + b) + 5);
[codeblock:end]
[:en@~]
due to the associativity and precedence of these operators.
[:zh_CN@~]
具有完全相同的行为。

[:en]
Thus, the result of the sum [`(a + 32760)] is next added to [`b], and that
result is then added to 5 which results in the value assigned to [`a].
[:zh_CN]
按此，求和 [`(a + 32760)] 的结果接着与 [`b] 相加，然后对其结果加上 5，所得的值
被赋值给 [`a]。

[:en]
On a machine in which overflows produce an exception and in which the range of
values representable by an [`int] is [=crange(-32768,+32767)], the
implementation cannot rewrite this expression as
[:zh_CN]
在溢出产生异常且 [`int] 能够表示的值的范围是 [=crange(-32768,+32767)] 的机器上，
实现不能把该表达式重写为
[codeblock]
a = ((a + b) + 32765);
[codeblock:end]
[:en@~]
since if the values for [`a] and [`b] were, respectively, -32754 and -15, the
sum [`a + b] would produce an exception while the original expression would not;
[:zh_CN@~]
因为若 [`a] 和 [`b] 的值分别为 -32754 和 -15，则 [`a + b] 的和就会导致异常，
而原来的表达式却不会；

[:en@~]
nor can the expression be rewritten as either
[:zh_CN@~]
该表达式也不能重写为
[codeblock]
a = ((a + 32765) + b);
[codeblock:end]
[:en@~]
or
[:zh_CN@~]
或
[codeblock]
a = (a + (b + 32765));
[codeblock:end]
[:en@~]
since the values for [`a] and [`b] might have been, respectively, 4 and -8 or
-17 and 12.
[:zh_CN@~]
因为 [`a] 和 [`b] 的值可能分别是 4 和 -8，或 -17 和 12。

[:en]
However on a machine in which overflows do not produce an exception and in which
the results of overflows are reversible, the above expression statement can be
rewritten by the implementation in any of the above ways because the same result
will occur.
[:zh_CN]
然而在溢出不导致异常且溢出结果可逆的机器上，上面的表达式语句就可以被实现以上述
任意方式重写，因为它们所产生的结果相同。
[end:note]

[para]
[:en]
The values of the floating-point operands and the results of floating-point
expressions may be represented in greater precision and range than that required
by the type; the types are not changed thereby.[#:fn]
[:zh_CN]
浮点操作数的值和浮点表达式的结果，可用比其类型所需更大的精度和范围来表示；但这并
不会改变它的类型[#:fn]。

[note:foot]
[:en]
The cast and assignment operators must still perform their specific conversions
as described in [#expr.type.conv], [#expr.cast], [#expr.static.cast] and
[#expr.ass].
[:zh_CN]
转型和赋值运算符必须仍然如 [#expr.type.conv]，[#expr.cast]，[#expr.static.cast]
和 [#expr.ass] 中所述实施它们的特定转换。
[note:end]
