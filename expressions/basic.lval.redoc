[section#basic.lval
    [:en] Lvalues and rvalues
    [:zh_CN] 左值和右值
]

[para]
[:en] Expressions are categorized according to the taxonomy in [#:fig#basic.lval].
[:zh_CN] 表达式按照 [#:fig#baisc.lval] 中的分类法进行归类。

[figure:dot#basic.lval
    [:en] Expression category taxonomy
    [:zh_CN] 表达式类别分类法
]
digraph categories {
    graph [nodesep=.75];

    expression [label="[span[:en]expression[:zh_CN]表达式]", shape=plaintext, height=.1, fontsize=24];
    glvalue [label="[span[:en]glvalue[:zh_CN]泛左值（glvalue）]", shape=plaintext, height=.1, fontsize=24];
    lvalue [label="[span[:en]lvalue[:zh_CN]左值（lvalue）]", shape=plaintext, height=.1, fontsize=24];
    xvalue [label="[span[:en]xvalue[:zh_CN]临限值（xvalue）]", shape=plaintext, height=.1, fontsize=24];
    rvalue [label="[span[:en]rvalue[:zh_CN]右值（rvalue）]", shape=plaintext, height=.1, fontsize=24];
    prvalue [label="[span[:en]prvalue[:zh_CN]纯右值（prvalue）]", shape=plaintext, height=.1, fontsize=24];

    expression -> glvalue;
    glvalue -> lvalue;
    glvalue -> xvalue;
    expression -> rvalue;
    rvalue -> xvalue;
    rvalue -> prvalue;
}
[figure:end]

[list]
[item]
[:en] A [+glvalue] is an expression whose evaluation determines the identity of
an object, function, or non-static data member.
[:zh_CN] [+泛左值]（glvalue）是其求值确定某个对象、函数或非静态数据成员的识别性的表达式。
[item]
[:en] A [+prvalue] is an expression whose evaluation initializes an object, or
computes the value of an operand of an operator, as specified by the context in
which it appears, or an expression that has type [=cv] [`:key void].
[:zh_CN] [+纯右值]（prvalue）是其求值根据其所在语境的要求，对对象进行初始化，
或者为运算符的操作数计算其值的表达式，或者类型为 [=cv] [`:key void] 的表达式。
[item]
[:en] An [+xvalue] is a glvalue that denotes an object whose resources can be
reused (usually because it is near the end of its lifetime).
[:zh_CN] [+临限值]（xvalue）是一种泛左值，其所代表的对象的资源可以被重用（通常是
由于临近该对象的生存期结束）。
[item]
[:en] An [+lvalue] is a glvalue that is not an xvalue.
[:zh_CN] [+左值]（lvalue）是并非临限值的泛左值。
[item]
[:en] An [+rvalue] is a prvalue or an xvalue.
[:zh_CN] [+右值]（rvalue）是纯右值或临限值。
[list:end]

[para]
[:en] Every expression belongs to exactly one of the fundamental categories in
this taxonomy: lvalue, xvalue, or prvalue.
[:zh_CN] 每个表达式都属于这种分类法中的恰好一种基础类别：左值、临限值或纯右值。

[:en] This property of an expression is called its [+value category].
[:zh_CN] 表达式的这项性质被称为它的[+值类别]。

[begin:note]
[:en] The discussion of each built-in operator in [#expr.compound] indicates the
category of the value it yields and the value categories of the operands it expects.
[:zh_CN] [#expr.compound] 中针对每个内建运算符的讨论中，均指出了其所产生的值类别
以及它所要求的操作数的值类别。

[:en] For example, the built-in assignment operators expect that the left operand
is an lvalue and that the right operand is a prvalue and yield an lvalue as the result.
[:zh_CN] 例如，内建赋值运算符都要求其左操作数为左值，而其右操作数是纯右值，且其产生
的结果为左值。

[:en] User-defined operators are functions, and the categories of values they
expect and yield are determined by their parameter and return types.
[:zh_CN] 用户定义运算符是函数，它们所要求的和所产生的值的类别都由它们的形参和返回类型来决定。
[end:note]

[para]
[begin:note]
[:en] Historically, lvalues and rvalues were so-called because they could appear
on the left- and right-hand side of an assignment (although this is no longer
generally true); glvalues are [=lq]generalized[=rq] lvalues, prvalues are
[=lq]pure[=rq] rvalues, and xvalues are [=lq]eXpiring[=rq] lvalues.
[:zh_CN] 历史上，左值和右值曾经被这样称呼，是由于它们可以作为赋值的左右两边（虽然
已经不再总是这样了）；泛左值是“泛化的（Generalized）”左值，纯右值是“纯的（Pure）”
右值，而临限值是“临近期限（eXpiring）的”左值。

[:en] Despite their names, these terms apply to expressions, not values.
[:zh_CN] 尽管其命名如此，但这些术语适用于表达式而并非值。
[end:note]

[para]
[:en] [%expression[!rvalue reference]]
[:zh_CN] [%表达式[!右值引用]]
[begin:note]
[:en] An expression is an xvalue if it is:
[:zh_CN] 符合以下条件的表达式是临限值：

[list]
[item]
[:en] a move-eligible [~id-expression] ([#expr.prim.id.unqual]) or
[~splice-expression] ([#expr.prim.splice]),
[:zh_CN] 有意动资格的[~标识表达式]（[#expr.prim.id.unqual]）或[~拼接表达式]（[#expr.prim.splice]），

[item]
[:en] the result of calling a function, whether implicitly or explicitly, whose
return type is an rvalue reference to object type ([#expr.call]),
[:zh_CN] 函数调用的结果，无论隐式还是显式调用，且其返回类型是对象类型的右值引用（[#expr.call]），

[item]
[:en] a cast to an rvalue reference to object type ([#expr.type.conv], [#expr.dynamic.cast],
[#expr.static.cast], [#expr.reinterpret.cast], [#expr.const.cast], [#expr.cast]),
[:zh_CN] 转型为对象类型的右值引用（[#expr.type.conv]，[#expr.dynamic.cast]，
[#expr.static.cast]，[#expr.reinterpret.cast]，[#expr.const.cast]，[#expr.cast]），

[item]
[:en] a subscripting operation with an xvalue array operand ([#expr.sub]),
[:zh_CN] 带有临限值数组操作数的下标运算（[#expr.sub]），

[item]
[:en] a class member access expression designating a non-static data member of
non-reference type in which the object expression is an xvalue ([#expr.ref]), or
[:zh_CN] 代表某个具有非引用类型的非静态数据成员的类成员访问表达式，其对象表达式
是临限值（[#expr.ref]），或者

[item]
[:en] a [`.*] pointer-to-member expression in which the first operand is an
xvalue and the second operand is a pointer to data member ([#expr.mptr.oper]).
[:zh_CN] [`.*] 成员指针表达式，其第一个操作数时临限值且其第二个操作数是指向数据
成员的指针（[#expr.mptr.oper]）。
[list:end]

[:en] In general, the effect of this rule is that named rvalue references are
treated as lvalues and unnamed rvalue references to objects are treated as xvalues;
rvalue references to functions are treated as lvalues whether named or not.
[:zh_CN] 一般来说，这条规则的效果是使具名的右值引用被当做左值，而指代对象的无名的
右值引用则被当做临限值；指代函数的右值引用无论是否具名都被当做左值。
[end:note]

[begin:example]
[codeblock]
struct A {
  int m;
};
A&& operator+(A, A);
A&& f();

A a;
A&& ar = static_cast<A&&>(a);
[codeblock:end]

[:en] The expressions [`f()], [`f().m], [`[`:key static_cast]<A&&>(a)], and
[`a + a] are xvalues.
[:zh_CN] 表达式 [`f()]，[`f().m]，[`[`:key static_cast]<A&&>(a)]，和 [`a + a] 都是临限值。

[:en] The expression [`ar] is an lvalue.
[:zh_CN] 表达式 [`ar] 是左值。
[end:example]

[para]
[:en] The [+result[%result[!glvalue]]] of a glvalue is the entity denoted by the expression.
[:zh_CN] 泛左值的[+结果[%结果[!泛左值]]]是表达式所代表的实体。

[:en] The [+result[%result[!prvalue]]] of a prvalue is the value that the expression
stores into its context; a prvalue that has type [=cv] [`:key void] has no result.
[:zh_CN] 纯右值的[+结果[%结果[!纯右值]]]是表达式向其语境中所存储的值；
[=cv] [`:key void] 类型的纯右值没有结果。

[:en] A prvalue whose result is the value [^V] is sometimes said to have or name the value [^V].
[:zh_CN] 结果为值 [^V] 的纯右值有时候被称为具有或指名了值 [^V]。

[:en] The [+result object] of a prvalue is the object initialized by the prvalue;
a prvalue that has type [=cv] [`:key void] has no result object.
[:zh_CN] 纯右值的[+结果对象]是由该纯右值所初始化的对象；
类型为 [=cv] [`:key void] 的纯右值没有结果对象。

[begin:note]
[:en] Except when the prvalue is the operand of a [~decltype-specifier],
a prvalue of object type always has a result object.
[:zh_CN] 除了纯右值是 [~decltype-说明符]的操作数的情况外，对象类型的纯右值总有结果对象。

[:en] For a discarded prvalue that has type other than [=cv] [`:key void],
a temporary object is materialized; see [#expr.context].
[:zh_CN] 非 [=cv] [`:key void] 类型的弃值的纯右值将实质化临时对象；参见 [#expr.context]。
[end:note]

[para]
[:en] Whenever a glvalue appears as an operand of an operator that requires a
prvalue for that operand, the lvalue-to-rvalue ([#conv.lval]), array-to-pointer
([#conv.array]), or function-to-pointer ([#conv.func]) standard conversions are
applied to convert the expression to a prvalue.
[:zh_CN] 一旦将泛左值作为操作数，而运算符要求其操作数为纯右值时，就对该表达式实施
左值向右值（[#conv.lval]）、数组向指针（[#conv.array]）或函数向指针（[#conv.func]）
标准转换，将其转换为纯右值。

[begin:note]
[:en] An attempt to bind an rvalue reference to an lvalue is not such a context; see [#dcl.init.ref].
[:zh_CN] 试图向左值绑定右值引用不属于这种语境；参见 [#dcl.init.ref]。
[end:note]

[begin:note]
[:en] Because cv-qualifiers are removed from the type of an expression of
non-class type when the expression is converted to a prvalue, an lvalue of type
[`[`:key const] [`:key int]] can, for example, be used where a prvalue of type
[`:key int] is required.
[:zh_CN] 因为非类类型的表达式在向纯右值转换时要移除其 cv 限定符，因此，如类型
[`[`:key const] [`:key int]] 这样的左值，可以用在需要类型 [`:key int] 的纯右值之处。
[end:note]

[begin:note]
[:en] There are no prvalue bit-fields; if a bit-field is converted to a prvalue ([#conv.lval]),
a prvalue of the type of the bit-field is created, which might then be promoted ([#conv.prom]).
[:zh_CN] 不存在位字段纯右值；当位字段被转换为纯右值（[#conv.lval]）时，将创建一个
该位字段的类型的纯右值，并可能随即被提升（[#conv.prom]）。
[end:note]

[para]
[:en] Unless otherwise specified ([#expr.reinterpret.cast], [#expr.const.cast]),
whenever a prvalue that is not the result of the lvalue-to-rvalue conversion ([#conv.lval])
appears as an operand of an operator, the temporary materialization conversion ([#conv.rval])
is applied to convert the expression to an xvalue.
[:zh_CN] 除非另有规定（[#expr.reinterpret.cast]，[#expr.const.cast]），
一旦将并非左值向右值转换（[#conv.lval]）结果的纯右值作为运算符的操作数，
就实施临时对象实质化转换（[#conv.rval]）以将该表达式转换为临限值。

[para]
[begin:note]
[:en] The discussion of reference initialization in [#dcl.init.ref] and of
temporaries in [#class.temporary] indicates the behavior of lvalues and rvalues
in other significant contexts.
[:zh_CN] [#dcl.init.ref] 中关于引用初始化，以及 [#class.temporary] 中关于
临时对象的讨论，指出了左值和右值在其他重要的语境中的行为。
[end:note]

[para]
[:en] Unless otherwise indicated ([#dcl.type.decltype]), a prvalue shall always
have complete type or the [`:key void] type; if it has a class type or (possibly
multidimensional) array of class type, that class shall not be an abstract class ([#class.abstract]).
[:zh_CN] 除非另行指定（[#dcl.type.decltype]），纯右值应当总是具有完整类型或 [`:key void] 类型；
如果它具有类类型或类类型的（可能多维的）数组，则这个类不能是抽象类（[#class.abstract]）。

[:en] A glvalue shall not have type [=cv] [`:key void].
[:zh_CN] 泛左值的类型不能为 [=cv] [`:key void]。

[begin:note]
[:en] A glvalue can have complete or incomplete non-[`:key void] type.
[:zh_CN] 泛左值可以具有非 [`:key void] 的完整或不完整类型。

[:en] Class and array prvalues can have cv-qualified types; other prvalues
always have cv-unqualified types.
[:zh_CN] 类和数组的纯右值可以具有 cv 限定的类型；其他纯右值总是具有无 cv 限定的类型。

[:en] See [#expr.type].
[:zh_CN] 参见 [#expr.type]。
[end:note]

[para]
[:en] An lvalue is [+modifiable] unless its type is const-qualified or is a function type.
[:zh_CN] 除非左值的类型是被 const 限定的，或者是函数类型，否则都是[+可改变的]。

[begin:note]
[:en] A program that attempts to modify an object through a nonmodifiable lvalue or
through an rvalue is ill-formed ([#expr.assign], [#expr.post.incr], [#expr.pre.incr]).
[:zh_CN] 试图通过不可改变的左值或通过右值改变对象的程序是非良构的（[#expr.assign]，
[#expr.post.incr]，[#expr.pre.incr]）。
[end:note]

[para]
[:en] An object of dynamic type [$[`T]_\text{obj}] is [+type-accessible] through
a glvalue of type [$[`T]_\text{ref}] if [$[`T]_\text{ref}] is similar ([#conv.qual]) to:
[:zh_CN] 如果 [$[`T]_\text{ref}] 与以下类型相似（[#conv.qual]），则动态类型为
[$[`T]_\text{obj}] 的对象通过 [$[`T]_\text{ref}] 类型的泛左值[+可类型访问]：

[list]
[item]
[:en@~] [$[`T]_\text{obj}],
[:zh_CN@~] [$[`T]_\text{obj}]，
[item]
[:en@~] a type that is the signed or unsigned type corresponding to [$[`T]_\text{obj}], or
[:zh_CN@~] 对应于 [$[`T]_\text{obj}] 的有符号或无符号类型，或者
[item]
[:en@~] a [`:key char], [`[`:key unsigned] [`:key char]], or [`std::byte] type.
[:zh_CN@~] 类型 [`:key char]、[`[`:key unsigned] [`:key char]] 或 [`std::byte]。
[list:end]

[:en] If a program attempts to access ([#defns.access]) the stored value of an object
through a glvalue through which it is not type-accessible, the behavior is undefined:[#:fn]
[:zh_CN] 若程序试图通过一个泛左值来访问（[#defns.access]）对象中保存的值，而通过
该泛左值它并非可类型访问的，则其行为未定义[#:fn]：

[note:foot]
[:en] The intent of this list is to specify those circumstances in which an
object can or cannot be aliased.
[:zh_CN] 此列表的目的是用以指出可以或不可以使用对象别名的情况。
[note:end]

[:en] If a program invokes a defaulted copy/move constructor or copy/move
assignment operator for a union of type [`U] with a glvalue argument that does
not denote an object of type [=cv] [`U] within its lifetime, the behavior is undefined.
[:zh_CN] 如果程序以某个并不代表处于生存期内的 [=cv] [`U] 类型的对象的泛左值实参，为某个
[`U] 类型的联合体调用预置的复制/移动构造函数或者复制/移动赋值运算符，则其行为未定义。

[begin:note]
[:en] In C, an entire object of structure type can be accessed, e.g., using assignment.
[:zh_CN] 在 C 中，结构体类型的整个对象，都可以通过比如赋值来访问。

[:en] By contrast, [=Cpp] has no notion of accessing an object of class type
through an lvalue of class type.
[:zh_CN] 相对来说，[=Cpp] 则没有通过类类型的左值来访问类类型对象的方法。
[end:note]
