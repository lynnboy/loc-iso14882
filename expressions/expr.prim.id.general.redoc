[section#expr.prim.id.general
    [:en] General
    [:zh_CN] 概述
]

[syntax]
[rule id-expression [:zh_CN] 标识表达式 ]
    [| unqualified-id ]
    [| qualified-id ]
[rule:end]
[syntax:end]

[para]
[:en]
[%name] [%id-expression]
An [~id-expression] is a restricted form of a [~primary-expression].
[:zh_CN]
[%名字] [%标识表达式]
[~标识表达式]是[~初等表达式]的一种受限形式。

[begin:note]
[:en]
An [~id-expression] can appear after [`.] and [`->] operators ([#expr.ref]).
[:zh_CN]
[~标识表达式]可处于 [`.] 和 [`->] 运算符（[#expr.ref]）之后。
[end:note]

[para]
[:en]
If an [~id-expression] [$E] denotes a member [$M] of an anonymous union
([#class.union.anon]) [$U]:
[:zh_CN]
如果[~标识表达式] [$E] 代表某个匿名联合体（[#class.union.anon]）[$U] 的成员 [$M]：

[list]
[item]
[:en]
If [$U] is a non-static data member, [$E] refers to [$M] as a member of the
lookup context of the terminal name of [$E] (after any transformation to
a class member access expression ([#class.mfct.non-static])).
[:zh_CN]
当 [$U] 为非静态数据成员时，[$E] 将 [$M] 作为 [$E] 的终端名的查找语境的一个名字
进行涉指（经过任何到类成员访问表达式的变换之后（[#class.mfct.non-static]））。

[begin:example]
[:en]
[`o.x] is interpreted as [`o.[$u].x], where [$u] names the anonymous union member.
[:zh_CN]
[`o.x] 被判读为 [`o.[$u].x]，其中 [$u] 指名匿名联合体成员。
[end:example]

[item]
[:en]
Otherwise, [$E] is interpreted as a class member access ([#expr.ref]) that
designates the member subobject [$M] of the anonymous union variable for [$U].
[:zh_CN]
否则，[$E] 被判读为代表匿名联合体变量 [$U] 的成员子对象 [$M] 的类成员访问
（[#expr.ref]）。

[begin:note]
[:en]
Under this interpretation, [$E] no longer denotes a non-static data member.
[:zh_CN]
这种判读中，[$E] 不再代表非静态数据成员。
[end:note]

[begin:example]
[:en]
[`N::x] is interpreted as [`N::[$u].x], where [$u] names the anonymous union
variable.
[:zh_CN]
[`N::x] 被判读为 [`N::[$u].x]，其中 [$u] 指名匿名联合体变量。
[end:example]
[list:end]

[para]
[:en]
An [~id-expression] that denotes a non-static data member or non-static member
function of a class can only be used:
[:zh_CN]
代表类的非静态数据成员或非静态成员函数的[~标识表达式]，仅可按如下方式使用：

[list]
[item]
[:en]
as part of a class member access ([#expr.ref]) in which the object expression
refers to the member[=']s class[#:note#fn:$1] or a class derived from that
class, or
[:zh_CN]
作为类成员访问（[#expr.ref]）的一部分，其中的对象表达式涉指该成员所在类
[#:note#fn:$1]或从这个类派生的类，或者

[note:foot#fn:$1]
[:en]
This also applies when the object expression is an implicit [`(*[`:key this])]
([#class.mfct.non-static]).
[:zh_CN]
这在以隐含的 [`(*[`:key this])] 作为对象表达式（[#class.mfct.non-static]）时同样
适用。
[note:end]

[item]
[:en]
to form a pointer to member ([#expr.unary.op]), or
[:zh_CN]
用以构成成员指针（[#expr.unary.op]），或者

[item]
[:en]
if that [~id-expression] denotes a non-static data member and it appears in an
unevaluated operand.
[:zh_CN]
该[~标识表达式]代表某个非静态数据成员，并且它出现于某个免求值操作数之中。

[begin:example]
[codeblock]
struct S {
  int m;
};
int i = sizeof(S::m);           // OK
int j = sizeof(S::m + 42);      // OK
[codeblock:end]
[end:example]
[list:end]

[para]
[:en]
A potentially-evaluated [~id-expression] that denotes an immediate function
([#dcl.constexpr]) shall appear only
[:zh_CN]
代表某个直接函数（[#dcl.constexpr]）的潜在求值[~标识表达式]，只能
[list]
[item]
[:en@~] as a subexpression of an immediate invocation, or
[:zh_CN@~] 作为一次直接调用中的子表达式，或者
[item]
[:en@~] in an immediate function context ([#expr.const]).
[:zh_CN@~] 出现于直接函数的语境中（[#expr.const]）。
[list:end]

[para]
[:en]
For an [~id-expression] that denotes an overload set, overload resolution is
performed to select a unique function ([#over.match], [#over.over]).
[:zh_CN]
对于代表某个重载集合的[~标识表达式]，实施重载决议以选出唯一的函数（[#over.match]，
[#over.over]）。

[begin:note]
[:en]
A program cannot refer to a function with a trailing [~requires-clause] whose
[~constraint-expression] is not satisfied, because such functions are never
selected by overload resolution.
[:zh_CN]
程序不能涉指带有尾部 [~requires-子句]且其[~约束表达式]未能满足的函数，因为这种
函数永不会被重载决议所选择。

[begin:example]
[codeblock]
template<typename T> struct A {
  static void f(int) requires false;
};

void g() {
  A<int>::f(0);                         // [:en] error: cannot call [`f] \
                                        [:zh_CN] 错误：不能调用 [`f]
  void (*p1)(int) = A<int>::f;          // [:en] error: cannot take the address of [`f] \
                                        [:zh_CN] 错误：不能获取 [`f] 的地址
  decltype(A<int>::f)* p2 = nullptr;    // [:en] error: the type [`decltype(A<int>::f)] is invalid \
                                        [:zh_CN] 错误：类型 [`decltype(A<int>::f)] 无效
}
[codeblock:end]

[:en]
In each case, the constraints of [`f] are not satisfied.
[:zh_CN]
以上任何情况中，[`f] 的约束都未满足。

[:en]
In the declaration of [`p2], those constraints are required to be satisfied
even though [`f] is an unevaluated operand ([#expr.prop]).
[:zh_CN]
在 [`p2] 的声明式中，即便 [`f] 是免求值操作数（[#expr.prop]），仍要求其约束被
满足。
[end:example]
[end:note]
