[section#expr.prim.req.simple
    [:en] Simple requirements
    [:zh_CN] 简单规定

[%  [:en] requirement [!simple]
	[:zh_CN] 规定[!简单～] ]
]

[syntax]
[rule simple-requirement [:zh_CN] 简单规定 ]
    [| expression [`;] ]
[rule:end]
[syntax:end]

[para]
[:en]
A [~simple-requirement] asserts the validity of an [~expression].
[:zh_CN]
[~简单规定]断言一个[~表达式]的有效性。

[begin:note]
[:en]
The enclosing [~requires-expression] will evaluate to [`:key false] if
substitution of template arguments into the [~expression] fails.
[:zh_CN]
当将模板实参替换到[~表达式]中失败时，其外围 [~requires-表达式]求值为
[`:key false]。

[:en]
The [~expression] is an unevaluated operand ([#expr.prop]).
[:zh_CN]
[~表达式]是免求值操作数（[#expr.prop]）。
[end:note]

[begin:example]
[codeblock]
template<typename T> concept C =
  requires (T a, T b) {
    a + b;          // [:en] [`C<T>] is [`true] if [`a + b] is a valid expression \
                       [:zh_CN] 当 [`a + b] 是有效表达式时 [`C<T>] 为 [`true]
  };
[codeblock:end]
[end:example]

[para]
[:en]
A [~requirement] that starts with a [`:key requires] token is never interpreted
as a [~simple-requirement].
[:zh_CN]
以一个 [`:key requires] 记号开头的[~规定]决不会被判读为[~简单规定]。

[begin:note]
[:en]
This simplifies distinguishing between a [~simple-requirement] and a
[~nested-requirement].
[:zh_CN]
这样简化了在[~简单规定]和[~嵌套规定]之间的歧义消解。
[end:note]
