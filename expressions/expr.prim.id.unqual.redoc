[section#expr.prim.id.unqual
    [:en] Unqualified names
    [:zh_CN] 未限定的名字
]

[syntax]
[rule unqualified-id [:zh_CN] 未限定标识 ]
    [| identifier ]
    [| operator-function-id ]
    [| conversion-function-id ]
    [| literal-operator-id ]
    [| [`~] class-name ]
    [| [`~] decltype-specifier ]
    [| template-id ]
[rule:end]
[syntax:end]

[para]
[:en]
[%identifier]
An [~identifier] is an [~id-expression] provided it has been suitably declared
([#dcl.dcl]).
[:zh_CN]
[%标识符]
[~标识符]是[~标识表达式]，只要其已经进行过适当声明（[#dcl.dcl]）。

[enter:note]
[:en]
For [~operator-function-id]s, see [#over.oper]; for [~conversion-function-id]s,
see [#class.conv.fct]; for [~literal-operator-id]s, see [#over.literal]; for
[~template-id]s, see [#temp.names].
[:zh_CN]
对于[~运算符函数标识]，参见 [#over.oper]；对于[~转换函数标识]，参见
[#class.conv.fct]；对于[~字面量运算符标识]，参见 [#over.literal]；对于
[~模板标识]，参见 [#temp.names]。

[:en]
A [~class-name] or [~decltype-specifier] prefixed by [`~] denotes a destructor;
see [#class.dtor].
[:zh_CN]
带 [`~] 前缀的[~类名]或者 [~decltype-说明符]代表析构函数；见 [#class.dtor]。

[:en]
Within the definition of a non-static member function, an [~identifier] that
names a non-static member is transformed to a class member access expression
([#class.mfct.non-static]).
[:zh_CN]
在非静态成员函数的定义式之中，指名非静态成员的[~标识符]被变换为类成员访问表达式
（[#class.mfct.non-static]）。
[exit:note]

[:en]
The type of the expression is the type of the [~identifier].
[:zh_CN]
表达式的类型为该[~标识符]的类型。

[:en]
The result is the entity denoted by the identifier.
[:zh_CN]
其结果为由该标识符所代表的实体。

[:en]
The expression is an lvalue if the entity is a function, variable, or data
member and a prvalue otherwise; it is a bit-field if the identifier designates
a bit-field ([#dcl.struct.bind]).
[:zh_CN]
如果此实体是函数、变量或数据成员，则表达式是左值，否则就是纯右值；若标识符所代表
的是位字段则它是位字段（[#dcl.struct.bind]）。
