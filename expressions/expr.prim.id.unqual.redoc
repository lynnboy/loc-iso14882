[section#expr.prim.id.unqual
    [:en] Unqualified names
    [:zh_CN] 未限定的名字
]

[syntax]
[rule unqualified-id [:zh_CN] 未限定标识 ]
    [| identifier ]
    [| operator-function-id ]
    [| conversion-function-id ]
    [| literal-operator-id ]
    [| [`~] class-name ]
    [| [`~] decltype-specifier ]
    [| template-id ]
[rule:end]
[syntax:end]

[para]
[:en]
[%identifier]
An [~identifier] is only an [~id-expression] if it has been suitably declared
([#dcl.dcl]) or if it appears as part of a [~declarator-id] ([#dcl.decl]).
[:zh_CN]
[%标识符]
仅当[~标识符]已经进行过适当声明（[#dcl.dcl]），或者其作为[~声明符标识]的一部分
出现（[#dcl.decl]），它才[~标识表达式]。

[enter:note]
[:en]
For [~operator-function-id]s, see [#over.oper]; for [~conversion-function-id]s,
see [#class.conv.fct]; for [~literal-operator-id]s, see [#over.literal]; for
[~template-id]s, see [#temp.names].
[:zh_CN]
对于[~运算符函数标识]，参见 [#over.oper]；对于[~转换函数标识]，参见
[#class.conv.fct]；对于[~字面量运算符标识]，参见 [#over.literal]；对于
[~模板标识]，参见 [#temp.names]。

[:en]
A [~class-name] or [~decltype-specifier] prefixed by [`~] denotes a destructor;
see [#class.dtor].
[:zh_CN]
带 [`~] 前缀的[~类名]或者 [~decltype-说明符]代表析构函数；见 [#class.dtor]。

[:en]
Within the definition of a non-static member function, an [~identifier] that
names a non-static member is transformed to a class member access expression
([#class.mfct.non-static]).
[:zh_CN]
在非静态成员函数的定义式之中，指名非静态成员的[~标识符]被变换为类成员访问表达式
（[#class.mfct.non-static]）。
[exit:note]

[para]
[:en]
The result is the entity denoted by the identifier.
[:zh_CN]
其结果为由该标识符所代表的实体。

[:en]
If the entity is a local entity and naming it from outside of an unevaluated
operand within the declarative region where the [~unqualified-id] appears would
result in some intervening [~lambda-expression] capturing it by copy
([#expr.prim.lambda.capture]), the type of the expression is the type of a class
member access expression ([#expr.ref]) naming the non-static data member that
would be declared for such a capture in the closure object of the innermost such
intervening [~lambda-expression].
[:zh_CN]
如果该实体是局部实体，而且在出现该[~未限定标识]的声明区中的免求值操作数之外对其
进行指名时，会导致某个介入的 [~lambda-表达式]对它按复制捕获
（[#expr.prim.lambda.capture]），则该表达式的类型为，对于作为最内层的介入的
[~lambda-表达式]的闭包对象中的这个捕获而声明的非静态数据成员，指名该成员的类成员
访问表达式（[#expr.ref]）的类型。

[enter:note]
[:en]
If that [~lambda-expression] is not declared [`mutable], the type of such an
identifier will typically be [`const] qualified.
[:zh_CN]
如果该 [~lambda-表达式] 并未声明为 [`mutable]，则这个标识符的类型通常是 [`const]
限定的。
[exit:note]

[:en]
If the entity is a template parameter object for a template parameter of type
[`T] ([#temp.param]), the type of the expression is [`const T].
[:zh_CN]
如果该实体是为 [`T] 类型的模板形参所提供的模板形参对象（[#temp.param]），则
表达式的类型为 [`const T]。

[:en]
Otherwise, the type of the expression is the type of the result.
[:zh_CN]
否则，该表达式的类型就是其结果的类型。

[enter:note]
[:en]
The type will be adjusted as described in [#expr.type] if it is cv-qualified or
is a reference type.
[:zh_CN]
如果该类型是被 cv 限定的，或者是引用类型，则它将按照 [#expr.type] 中所述进行调整
。
[exit:note]

[:en]
The expression is an lvalue if the entity is a function, variable, structured
binding ([#dcl.struct.bind]), data member, or template parameter object and a
prvalue otherwise ([#basic.lval]); it is a bit-field if the identifier
designates a bit-field.
[:zh_CN]
如果该实体是函数、变量、结构化绑定（[#dcl.struct.bind]）、数据成员或模板形参对象，
则表达式是左值，否则是纯右值（[#basic.lval]）；如果该标识符代表的是位字段则它也
是位字段。

[enter:example]
[codeblock]
void f() {
  float x, &r = x;
  [=] {
    decltype(x) y1;             // [:en] [`y1] has type [`float]
                                // [|:zh_CN] [`y1] 类型为 [`float]
    decltype((x)) y2 = y1;      // [:en] [`y2] has type [`float const&] because this lambda
                                // [|:zh_CN] [`y2] 类型为 [`float const&]，因为这个 lambda
                                // [:en@~] is not [`mutable] and [`x] is an lvalue
                                // [|:zh_CN@~] 并非 [`mutable] 且 [`x] 为左值
    decltype(r) r1 = y1;        // [:en] [`r1] has type [`float&]
                                // [|:zh_CN] [`r1] 类型为 [`float&]
    decltype((r)) r2 = y2;      // [:en] [`r2] has type [`float const&]
                                // [|:zh_CN] [`r2] 类型为 [`float const&]
  };
}
[codeblock:end]
[exit:example]
