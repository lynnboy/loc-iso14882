[section#expr.prim.id.unqual
    [:en] Unqualified names
    [:zh_CN] 无限定的名字
]

[syntax]
[rule unqualified-id [:zh_CN] 无限定标识 ]
    [| identifier ]
    [| operator-function-id ]
    [| conversion-function-id ]
    [| literal-operator-id ]
    [| [`~] type-name ]
    [| [`~] computed-type-specifier ]
    [| template-id ]
[rule:end]
[syntax:end]

[para]
[:en] [%identifier]
An [~identifier] is only an [~id-expression] if it has been suitably declared
([#dcl]) or if it appears as part of a [~declarator-id] ([#dcl.decl]).
[:zh_CN] [%标识符]
仅当[~标识符]已经进行过适当声明（[#dcl]），或者其作为[~声明符标识]的一部分出现（[#dcl.decl]）
时，它才是[~标识表达式]。

[begin:note]
[:en] For [~operator-function-id]s, see [#over.oper]; for
[~conversion-function-id]s, see [#class.conv.fct]; for [~literal-operator-id]s,
see [#over.literal]; for [~template-id]s, see [#temp.names].
[:zh_CN] 对于[~运算符函数标识]，参见 [#over.oper]；对于[~转换函数标识]，参见
[#class.conv.fct]；对于[~字面量运算符标识]，参见 [#over.literal]；对于
[~模板标识]，参见 [#temp.names]。

[:en] A [~type-name] or [~computed-type-specifier] prefixed by [`~] denotes the
destructor of the type so named; see [#expr.prim.id.dtor].
[:zh_CN] 带 [`~] 前缀的[~类型名]或者 [~计算类型说明符]，代表由其所指名的类型的
析构函数；见 [#expr.prim.id.dtor]。
[end:note]

[para]
[:en] A [+component name] of an [~unqualified-id] [$U] is
[:zh_CN] [~无限定标识] [$U] 的[+成分名]，
[list]
[item]
[:en@~] [$U] if it is a name or
[:zh_CN@~] 当 [$U] 是一个名字时则为 [$U]，或者
[item]
[:en@~] the component name of the [~template-id] or [~type-name] of [$U], if any.
[:zh_CN@~] 是 [$U] 的[~模板标识]或[~类型名]的成分名，如果有。
[list:end]

[begin:note]
[:en] Other constructs that contain names to look up can have several component
names ([#expr.prim.id.qual], [#dcl.type.simple], [#dcl.type.elab], [#dcl.mptr],
[#namespace.udecl], [#temp.param], [#temp.names], [#temp.res]).
[:zh_CN] 其他包含需要查找的名字的语言构造中可以具有多个成分名（[#expr.prim.id.qual]，
[#dcl.type.simple]，[#dcl.type.elab]，[#dcl.mptr]，[#namespace.udecl]，
[#temp.param]，[#temp.names]，[#temp.res]）。
[end:note]

[:en] The [+:adj terminal[!name]] of a construct is the component name of that
construct that appears lexically last.
[:zh_CN] 一个语言构造的[+:adj 终端[!名]]，是该语言构造的词法上最后出现的成分名。

[para]
[:en] The result is the entity denoted by the [~unqualified-id] ([#basic.lookup.unqual]).
[:zh_CN] 其结果为由该[~无限定标识]（[#basic.lookup.unqual]）所代表的实体。

[para]
[:en] If
[:zh_CN] 如果
[list]
[item]
[:en@~] the [~unqualified-id] appears in a [~lambda-expression] at program point [$P],
[:zh_CN@~] 该[~无限定标识]出现于程序位置点 [$P] 的某个 [~lambda-表达式]中，
[item]
[:en@~] the entity is a local entity ([#basic.pre]) or a variable declared by an
[~init-capture] ([#expr.prim.lambda.capture]),
[:zh_CN@~] 该实体是局部实体（[#basic.pre]）或者是由[~带初始化捕获符]（[#expr.prim.lambda.capture]）
声明的变量，
[item]
[:en@~] naming the entity within the [~compound-statement] of the innermost
enclosing [~lambda-expression] of [$P], but not in an unevaluated operand, would
refer to an entity captured by copy in some intervening [~lambda-expressions], and
[:zh_CN@~] 在 [$P] 的最内层外围 [~lambda-表达式]的[~复合语句]中指名该实体（但不在
免求值操作数中），将指代某个介入的 [~lambda-表达式]按复制俘获的实体，并且
[item]
[:en@~] [$P] is in the function parameter scope, but not the
[~parameter-declaration-clause], of the innermost such [~lambda-expression] [$E],
[:zh_CN@~] [$P] 位于最内层这种 [~lambda-表达式] [$E] 的函数形参作用域，但非其
[~形参声明式子句]中，
[list:end]
[:en@~] then the type of the expression is the type of a class member access expression
([#expr.ref]) naming the non-static data member that would be declared for such
a capture in the object parameter ([#dcl.fct]) of the function call operator of [$E].
[:zh_CN@~] 则该表达式的类型为，[$E] 的函数调用运算符的对象形参（[#dcl.fct]）中，
为这种俘获所声明的非静态数据成员，指名该成员的类成员访问表达式（[#expr.ref]）的类型。

[begin:note]
[:en] If [$E] is not declared [`:key mutable], the type of such
an identifier will typically be [`:key const] qualified.
[:zh_CN] 如果 [$E] 并未声明为 [`:key mutable]，则这个标识符的类型通常是 [`:key const] 限定的。
[end:note]

[para]
[:en] Otherwise, if the [~unqualified-id] names a coroutine parameter,
the type of the expression is that of the copy of the parameter ([#dcl.fct.def.coroutine]),
and the result is that copy.
[:zh_CN] 否则，如果[~无限定标识]指名了一个协程形参，则表达式的类型为该形参的副本
的类型（[#dcl.fct.def.coroutine]），且其结果为该副本。

[para]
[:en] Otherwise, if the [~unqualified-id] names a result binding ([#dcl.contract.res])
attached to a function [^f] with return type [`U],
[:zh_CN] 否则，如果[~无限定标识]指名了附属于返回类型为 [`U] 的函数 [^f] 的
某个结果绑定（[#dcl.contract.res]），那么
[list]
[item]
[:en@~] if [`U] is [=lq]reference to [`T][=rq], then the type of the expression is [`const T];
[:zh_CN@~] 如果 [`U] 是“[`T] 的引用”，则表达式的类型为 [`const T]；
[item]
[:en@~] otherwise, the type of the expression is [`const U].
[:zh_CN@~] 否则，表达式的类型为 [`const U]。
[list:end]

[para]
[:en] Otherwise, if the [~unqualified-id] appears in the predicate of a contract
assertion [$C] ([#basic.contract]) and the entity is
[:zh_CN] 否则，如果[~无限定标识]出现于契约断言 [$C] 的谓词中（[#basic.contract]），
且该实体是
[list]
[item]
[:en@~] a variable declared outside of [$C] of object type [`T],
[:zh_CN@~] 在 [$C] 之外声明的对象类型 [`T] 的变量，
[item]
[:en@~] a variable or template parameter declared outside of [$C]
of type [=lq]reference to [`T][=rq], or
[:zh_CN@~] 在 [$C] 之外声明的“[`T] 的引用”类型的变量或模板形参，或
[item]
[:en@~] a structured binding of type [`T] whose corresponding variable
is declared outside of [$C],
[:zh_CN@~] [`T] 类型的结构化绑定，其对应的变量在 [$C] 之外声明，
[list:end]
[:en@~] then the type of the expression is [`:key const] [`T].
[:zh_CN@~] 则表达式的类型为 [`:key const] [`T]。

[para]
[begin:example]
[codeblock]
int n = 0;
struct X { bool m(); };

struct Y {
  int z = 0;

  void f(int i, int* p, int& r, X x, X* px)
    pre (++n)       // [:en] error: attempting to modify const lvalue [:zh_CN] 错误：试图修改 const 左值
    pre (++i)       // [:en] error: attempting to modify const lvalue [:zh_CN] 错误：试图修改 const 左值
    pre (++(*p))    // OK
    pre (++r)       // [:en] error: attempting to modify const lvalue [:zh_CN] 错误：试图修改 const 左值
    pre (x.m())     // [:en] error: calling non-const member function [:zh_CN] 错误：调用非 const 成员函数
    pre (px->m())   // OK
    pre ([=,&i,*this] mutable {
      ++n;          // [:en] error: attempting to modify const lvalue [:zh_CN] 错误：试图修改 const 左值
      ++i;          // [:en] error: attempting to modify const lvalue [:zh_CN] 错误：试图修改 const 左值
      ++p;          // [:en] OK, refers to member of closure type [:zh_CN] OK，指代闭包类型的成员
      ++r;          // [:en] OK, refers to non-reference member of closure type [:zh_CN] OK，指代闭包类型的非引用成员
      ++this->z;    // [:en] OK, captured [`*[`:key this]] [:zh_CN] OK，捕获 [`*[`:key this]]
      ++z;          // [:en] OK, captured [`*[`:key this]] [:zh_CN] OK，捕获 [`*[`:key this]]
      int j = 17;
      [&]{
        int k = 34;
        ++i;    // [:en] error: attempting to modify const lvalue [:zh_CN] 错误：试图修改 const 左值
        ++j;    // OK
        ++k;    // OK
      }();
      return true;
    }());

  template <int N, int& R, int* P>
  void g()
    pre(++N)        // [:en] error: attempting to modify prvalue [:zh_CN] 错误：试图修改纯右值
    pre(++R)        // [:en] error: attempting to modify const lvalue [:zh_CN] 错误：试图修改 const 左值
    pre(++(*P));    // OK

  int h()
    post(r : ++r)   // [:en] error: attempting to modify const lvalue [:zh_CN] 错误：试图修改 const 左值
    post(r: [=] mutable {
       ++r;         // [:en] OK, refers to member of closure type [:zh_CN] OK，指代闭包类型的成员
       return true;
     }());

  int& k()
    post(r : ++r);  // [:en] error: attempting to modify const lvalue [:zh_CN] 错误：试图修改 const 左值
};
[codeblock:end]
[end:example]

[para]
[:en] Otherwise, if the entity is a template parameter object for a template
parameter of type [`T] ([#temp.param]), the type of the expression is [`const T].
[:zh_CN] 否则，如果该实体是为 [`T] 类型的模板形参所提供的模板形参对象（[#temp.param]），
则表达式的类型为 [`const T]。

[para]
[:en] In all other cases, the type of the expression is the type of the entity.
[:zh_CN] 其他所有情况中，表达式的类型就是该实体的类型。

[para]
[begin:note]
[:en] The type will be adjusted as described in [#expr.type] if it is cv-qualified
or is a reference type.
[:zh_CN] 如果该类型是被 cv 限定的，或者是引用类型，则它将按照 [#expr.type] 中所述进行调整。
[end:note]

[para]
[:en] The expression is an xvalue if it is move-eligible (see below); an lvalue
if the entity is a function, variable, structured binding ([#dcl.struct.bind]),
result binding ([#dcl.contract.res]), data member, or template parameter object
and a prvalue otherwise ([#basic.lval]);
it is a bit-field if the identifier designates a bit-field.
[:zh_CN] 如果该表达式有移动资格（见下文）则其为临限值；如果该实体是函数、变量、
结构化绑定（[#dcl.struct.bind]）、结果绑定（[#dcl.contract.res]）、数据成员或
模板形参对象，则表达式是左值，否则是纯右值（[#basic.lval]）；如果该标识符代表的是
位字段则它也是位字段。

[para]
[:en] If an [~id-expression] [$E] appears in the predicate of a function
contract assertion attached to a function [^f] and denotes a function parameter
of [^f] and the implementation introduces any temporary objects
to hold the value of that parameter as specified in [#class.temporary],
[:zh_CN] 如果出现于附属于函数 [^f] 的函数契约断言的谓词中的[~标识表达式] [$E]
指名 [^f] 的某个函数形参，并且实现如 [#class.temporary] 的规定引入了任何临时对象
来保存该形参的值，那么
[list]
[item]
[:en@~] if the contract assertion is a precondition assertion and the evaluation
of the precondition assertion is sequenced before the initialization of the parameter
object, [$E] refers to the most recently initialized such temporary object, and
[:zh_CN@~] 若该契约断言是前条件断言，并且前条件断言的评估按顺序早于形参对象的
初始化，则 [$E] 指代最近初始化的这种临时对象，并且
[item]
[:en@~] if the contract assertion is a postcondition assertion, it is unspecified
whether [$E] refers to one of the temporary objects or the parameter object;
the choice is consistent within a single evaluation of a postcondition assertion.
[:zh_CN@~] 若该契约断言是后条件断言，则未指明 [$E] 是指代临时对象还是形参对象；
这个选择在单次后条件断言的评估之内是一致的。
[list:end]

[para]
[:en] If an [~id-expression] [$E] names a result binding in a postcondition
assertion and the implementation introduces any temporary objects to hold the
result object as specified in [#class.temporary], and the postcondition assertion
is sequenced before the initialization of the result object ([#expr.call]),
[$E] refers to the most recently initialized such temporary object.
[:zh_CN] 如果[~标识表达式] [$E] 指名了后条件断言中的一个结果绑定，并且实现如
[#class.temporary] 的规定引入了任何临时对象来保存结果对象，并且后条件断言
按顺序早于结果对象的初始化（[#expr.call]），那么 [$E] 指代最近初始化的这种临时对象。

[begin:example]
[codeblock]
void f() {
  float x, &r = x;

  [=]() -> decltype((x)) {      // [:en] lambda returns [`float const&] because this lambda is not [`mutable] and \
                                [:zh_CN] lambda 返回 [`float const&]，因为这个 lambda 并非 [`mutable] 且
                                // [:en@~] [`x] is an lvalue [:zh_CN@~] [`x] 是左值
    decltype(x) y1;             // [:en] [`y1] has type [`float] [:zh_CN] [`y1] 类型为 [`float]
    decltype((x)) y2 = y1;      // [:en] [`y1] has type [`float const&] [:zh_CN] [`y1] 类型为 [`float const&]
    decltype(r) r1 = y1;        // [:en] [`r1] has type [`float&] [:zh_CN] [`r1] 类型为 [`float&]
    decltype((r)) r2 = y2;      // [:en] [`r2] has type [`float const&] [:zh_CN] [`r2] 类型为 [`float const&]
    return y2;
  };

  [=](decltype((x)) y) {
    decltype((x)) z = x;        // [:en] OK, [`y] has type [`float&], [`z] has type [`float const&] \
                                [:zh_CN] OK，[`y] 的类型为 [`float&]，[`z] 的类型为 [`float const&]
  };

  [=] {
    [](decltype((x)) y) {};     // [:en] OK, lambda takes a parameter of type [`float const&] \
                                [:zh_CN] OK，lambda 接受一个 [`float const&] 类型的形参

    [x=1](decltype((x)) y) {
      decltype((x)) z = x;      // [:en] OK, [`y] has type [`int&], [z] has type [`int const&] \
                                [:zh_CN] OK，[`y] 的类型为 [`int&]，[`z] 的类型为 [`int const&]
    };
  };
}
[codeblock:end]
[end:example]

[para]
[:en] An [+:adj implicitly movable[!entity]] is a variable with automatic storage
duration that is either a non-volatile object or an rvalue reference to a
non-volatile object type.
[:zh_CN] [+:adj 隐式可移动[!实体]]是具有自动存储期的变量，或者是非 volatile 对象，
或者是到非 volatile 对象类型的右值引用。

[:en] An [~id-expression] or [~splice-expression] ([#expr.prim.splice]) is
[+move-eligible] if
[:zh_CN] 以下情况下，[~标识表达式]或[~拼接表达式]（[#expr.prim.splice]）[+有移动资格]：
[list]
[item]
[:en@~] it designates an implicitly movable entity,
[:zh_CN@~] 它指名的是隐式可移动实体，
[item]
[:en@~] it is the (possibly parenthesized) operand of a [`return] ([#stmt.return])
or [`:key co_return] ([#stmt.return.coroutine]) statement or
of a [~throw-expression] ([#expr.throw]), and
[:zh_CN@~] 它是 [`return]（[#stmt.return]）或 [`:key co_return]（[#stmt.return.coroutine]）
语句，或者是 [~throw-expression]（[#expr.throw]）的（可能带括号的）操作数，并且
[item]
[:en@~] each intervening scope between the declaration of the entity and the
innermost enclosing scope of the expression is a block scope and, for a
[~throw-expression], is not the block scope of a [~try-block] or [~function-try-block].
[:zh_CN@~] 该实体的声明式和该表达式的最内层外围作用域之间的每个介入作用域都是
块作用域，并且对于 [~throw-表达式]，不是 [~try-块]或[~函数-try-块]的块作用域。
[list:end]
