[section#expr.prim.id.unqual
    [:en] Unqualified names
    [:zh_CN] 无限定的名字
]

[syntax]
[rule unqualified-id [:zh_CN] 无限定标识 ]
    [| identifier ]
    [| operator-function-id ]
    [| conversion-function-id ]
    [| literal-operator-id ]
    [| [`~] type-name ]
    [| [`~] decltype-specifier ]
    [| template-id ]
[rule:end]
[syntax:end]

[para]
[:en]
[%identifier]
An [~identifier] is only an [~id-expression] if it has been suitably declared
([#dcl.dcl]) or if it appears as part of a [~declarator-id] ([#dcl.decl]).
[:zh_CN]
[%标识符]
仅当[~标识符]已经进行过适当声明（[#dcl.dcl]），或者其作为[~声明符标识]的一部分
出现（[#dcl.decl]）时，它才是[~标识表达式]。

[:en]
An [~identifier] that names a coroutine parameter refers to the copy of the
parameter ([#dcl.fct.def.coroutine]).
[:zh_CN]
指名某个协程形参的[~标识符]指代该形参的副本（[#dcl.fct.def.coroutine]）。

[begin:note]
[:en]
For [~operator-function-id]s, see [#over.oper]; for [~conversion-function-id]s,
see [#class.conv.fct]; for [~literal-operator-id]s, see [#over.literal]; for
[~template-id]s, see [#temp.names].
[:zh_CN]
对于[~运算符函数标识]，参见 [#over.oper]；对于[~转换函数标识]，参见
[#class.conv.fct]；对于[~字面量运算符标识]，参见 [#over.literal]；对于
[~模板标识]，参见 [#temp.names]。

[:en]
A [~type-name] or [~decltype-specifier] prefixed by [`~] denotes the destructor
of the type so named; see [#expr.prim.id.dtor].
[:zh_CN]
带 [`~] 前缀的[~类型名]或者 [~decltype-说明符]，代表由其所指名的类型的析构函数；
见 [#expr.prim.id.dtor]。

[:en]
Within the definition of a non-static member function, an [~identifier] that
names a non-static member is transformed to a class member access expression
([#class.mfct.non-static]).
[:zh_CN]
在非静态成员函数的定义式之中，指名非静态成员的[~标识符]被变换为类成员访问表达式
（[#class.mfct.non-static]）。
[end:note]

[para]
[:en]
A [+component name] of an [~unqualified-id] [$U] is
[:zh_CN]
[~无限定标识] [$U] 的[+成分名]，
[list]
[item]
[:en@~]
[$U] if it is a name or
[:zh_CN@~]
当 [$U] 是一个名字时则为 [$U]，或者
[item]
[:en@~]
the component name of the [~template-id] or [~type-name] of [$U], if any.
[:zh_CN@~]
是 [$U] 的[~模板标识]或[~类型名]的成分名，如果有。
[list:end]

[begin:note]
[:en]
Other constructs that contain names to look up can have several component names
([#expr.prim.id.qual], [#dcl.type.simple], [#dcl.type.elab], [#dcl.mptr],
[#namespace.udecl], [#temp.param], [#temp.names], [#temp.res]).
[:zh_CN]
其他包含需要查找的名字的语言构造中可以具有多个成分名（[#expr.prim.id.qual]，
[#dcl.type.simple]，[#dcl.type.elab]，[#dcl.mptr]，[#namespace.udecl]，
[#temp.param]，[#temp.names]，[#temp.res]）。
[end:note]

[:en]
The [+:adj terminal[!name]] of a construct is the component name of that
construct that appears lexically last.
[:zh_CN]
一个语言构造的[+:adj 终端[!名]]，是该语言构造的词法上最后出现的成分名。

[para]
[:en]
The result is the entity denoted by the [~unqualified-id] ([#basic.lookup.unqual]).
[:zh_CN]
其结果为由该[~无限定标识]（[#basic.lookup.unqual]）所代表的实体。

[:en]
If the [~unqualified-id] appears in a [~lambda-expression] at program point [$P]
and the entity is a local entity ([#basic.pre]) or a variable declared by an
[~init-capture] ([#expr.prim.lambda.capture]), then let [$S] be the
[~compound-expression] of the innermost enclosing [~lambda-expression] of [$P].
[:zh_CN]
如果该[~无限定标识]出现于程序位置点 [$P] 的某个 [~lambda-表达式]中，且该实体是
一个局部实体（[#basic.pre]）或以某个[~带初始化俘获符]所声明的变量，则令 [$S] 为
[$P] 点的最内层外围 [~lambda-表达式]的[~复合语句]。

[:en]
If naming the entity from outside of an unevaluated operand within [$S] would
refer to an entity captured by copy in some intervening [~lambda-expression],
then let [$E] be the innermost such [~lambda-expression], and:
[:zh_CN]
如果在 [$S] 中，于免求值操作数之外指名该实体时，指代的是某个介入的
[~lambda-表达式]按复制俘获的实体，则令 [$E] 为最内层的这种 [~lambda-表达式]，以及：

[list]
[item]
[:en]
If [$P] is in [$S][=']s function parameter scope but not its
[~parameter-declaration-clause], then the type of the expression is the type of
a class member access expression ([#expr.ref]) naming the non-static data member
that would be declared for such a capture in the object parameter ([#dcl.fct])
of the function call operator of [$E].
[:zh_CN]
如果 [$P] 位于 [$S] 的函数形参作用域而非其[~形参声明式子句]中，则该表达式的类型
为，[$E] 的函数调用运算符的对象形参（[#dcl.fct]）中，为这种俘获所声明的非静态
数据成员，指名该成员的类成员访问表达式（[#expr.ref]）的类型。

[begin:note]
[:en]
If [$E] is not declared [`:key mutable], the type of such
an identifier will typically be [`:key const] qualified.
[:zh_CN]
如果 [$E] 并未声明为 [`:key mutable]，则这个标识符的类型通常是 [`:key const]
限定的。
[end:note]

[item]
[:en]
Otherwise (if [$P] either precedes [$E][=']s function parameter scope or
is in [$E][=']s [~parameter-declaration-clause]), the program is ill-formed.
[:zh_CN]
否则（或者 [$P] 在 [$E] 的函数形参作用域之前，或者在 [$E] 的[~形参声明式子句]中），
程序非良构。
[list:end]

[:en]
Otherwise, the type of the expression is the type of the result.
[:zh_CN]
否则，表达式的类型就是该结果的类型。

[begin:note]
[:en]
If the entity is a template parameter object for a template parameter of type
[`T] ([#temp.param]), the type of the expression is [`const T].
[:zh_CN]
如果该实体是为 [`T] 类型的模板形参所提供的模板形参对象（[#temp.param]），则
表达式的类型为 [`const T]。
[end:note]

[begin:note]
[:en]
The type will be adjusted as described in [#expr.type] if it is cv-qualified or
is a reference type.
[:zh_CN]
如果该类型是被 cv 限定的，或者是引用类型，则它将按照 [#expr.type] 中所述进行调整。
[end:note]

[:en]
The expression is an lvalue if the entity is a function, variable, structured
binding ([#dcl.struct.bind]), data member, or template parameter object and a
prvalue otherwise ([#basic.lval]); it is a bit-field if the identifier
designates a bit-field.
[:zh_CN]
如果该实体是函数、变量、结构化绑定（[#dcl.struct.bind]）、数据成员或模板形参对象，
则表达式是左值，否则是纯右值（[#basic.lval]）；如果该标识符代表的是位字段则它也
是位字段。

[begin:example]
[codeblock]
void f() {
  float x, &r = x;
  [=]() -> decltype((x)) {      // [:en] lambda returns [`float const&] because this lambda is not [`mutable] and \
                                [:zh_CN] lambda 返回 [`float const&]，因为这个 lambda 并非 [`mutable] 且
                                // [:en@~] [`x] is an lvalue \
                                [:zh_CN@~] [`x] 是左值
    decltype(x) y1;             // [:en] [`y1] has type [`float] \
                                [:zh_CN] [`y1] 类型为 [`float]
    decltype((x)) y2 = y1;      // [:en] [`y1] has type [`float const&] \
                                [:zh_CN] [`y1] 类型为 [`float const&]
    decltype(r) r1 = y1;        // [:en] [`r1] has type [`float&] \
                                [:zh_CN] [`r1] 类型为 [`float&]
    decltype((r)) r2 = y2;      // [:en] [`r2] has type [`float const&] \
                                [:zh_CN] [`r2] 类型为 [`float const&]
    return y2;
  };

  [=]<decltype(x) P>{};         // [:en] error: [`x] refers to local entity but precedes the \
                                [:zh_CN] 错误：[`x] 指代局部实体，但这早于
                                // [:en@~] lambda[=']s function parameter scope \
                                [:zh_CN@~] lambda 的函数形参作用域
  [=](decltype((x)) y){};       // [:en] error: [`x] refers to local entity but is in the lambda[=']s \
                                [:zh_CN] 错误：[`x] 指代局部实体，但这位于 lambda 的
                                // [:en@~] [~parameter-declaration-clause] \
                                [:zh_CN@~] [~形参声明式子句]之内
  [=]{
      []<decltype(x) P>{};      // [:en] OK, [`x] is in the outer lambda[=']s function parameter scope \
                                [:zh_CN] OK：[`x] 位于外围 lambda 的函数形参作用域中
      [](decltype((x)) y){};    // [:en] OK, lambda takes a parameter of type [`float const&] \
                                [:zh_CN] OK：lambda 接受一个 [`float const&] 类型的形参
      [x=1](decltype((x)) z){}; // [:en] error: [`x] refers to [~init-capture] but is in the lambda[=']s \
                                [:zh_CN] 错误：[`x] 指代[~带初始化俘获符]，但这位于 lambda 的
                                // [:en@~] [~parameter-declaration-clause] \
                                [:zh_CN@~] [~形参声明式子句]之内
  };
}
[codeblock:end]
[end:example]
