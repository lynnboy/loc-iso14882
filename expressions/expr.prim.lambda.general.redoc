[section#expr.prim.lambda.general
    [:en] General
    [:zh_CN] 概述
]

[syntax]
[rule lambda-expression [:zh_CN] lambda-表达式 ]
    [| lambda-introducer [~:opt attribute-specifier-seq] lambda-declarator compound-statement ]
    [| lambda-introducer [`<] template-parameter-list [`>] [~:opt requires-clause] [~:opt attribute-specifier-seq]
            lambda-declarator compound-statement ]
[rule:end]

[rule lambda-introducer [:zh_CN] lambda-引导符 ]
    [| [``[] [~:opt lambda-capture] [``]] ]
[rule:end]

[rule lambda-declarator [:zh_CN] lambda-声明符 ]
    [| lambda-specifier-seq [~:opt noexcept-specifier] [~:opt attribute-specifier-seq] [~:opt trailing-return-type] ]
    [| noexcept-specifier [~:opt attribute-specifier-seq] [~:opt trailing-return-type] ]
    [| [~:opt trailing-return-type] ]
    [| [`(] parameter-declaration-clause [`)] [~:opt lambda-specifier-seq] [~:opt noexcept-specifier] [~:opt attribute-specifier-seq]
            [~:opt trailing-return-type] [~:opt requires-clause] ]
[rule:end]

[rule lambda-specifier [:zh_CN] lambda-说明符 ]
    [| [`:key consteval] ]
    [| [`:key constexpr] ]
    [| [`:key mutable] ]
[rule:end]

[rule lambda-specifier-seqs [:zh_CN] lambda-说明符序列 ]
    [| lambda-specifier ]
    [| lambda-specifier lambda-specifier-seq ]
[rule:end]
[syntax:end]

[para]
[:en]
A [~lambda-expression] provides a concise way to create a simple function object.
[:zh_CN]
[~lambda-表达式]提供了创建简单函数对象的一种简洁方式。

[begin:example]
[codeblock]
#include <algorithm>
#include <cmath>
void abssort(float* x, unsigned N) {
  std::sort(x, x + N, [](float a, float b) { return std::abs(a) < std::abs(b); });
}
[codeblock:end]
[end:example]

[para]
[:en]
A [~lambda-expression] is a prvalue whose result object is called the
[+closure object].
[:zh_CN]
[~lambda-表达式]是纯左值，其结果对象被称为[+闭包对象]。

[begin:note]
[:en]
A closure object behaves like a function object ([#function.objects]).
[:zh_CN]
闭包对象的行为类似于函数对象（[#function.objects]）。
[end:note]

[para]
[:en]
An ambiguity can arise because a [~requires-clause] can end in an
[~attribute-specifier-seq], which collides with the [~attribute-specifier-seq]
in [~lambda-expression].
[:zh_CN]
由于[~requires-子句]可以以[~属性说明符序列]结尾，它与 [~lambda-表达式]中的
[~属性说明符序列]冲突，这会发生一种歧义。

[:en]
In such cases, any attributes are treated as [~attribute-specifier-seq] in
[~lambda-expression].
[:zh_CN]
这种情况下，任何属性都被当成是 [~lambda-表达式]中的[~属性说明符序列]。

[begin:note]
[:en]
Such ambiguous cases cannot have valid semantics
because the constraint expression would not have type [`:key bool].
[:zh_CN]
这种歧义情形是无法具有合法语义的，这是因为约束表达式无法具有 [`:key bool] 类型。
[end:note]

[para]
[:en]
A [~lambda-specifier-seq] shall contain at most one of each [~lambda-specifier]
and shall not contain both [`:key constexpr] and [`:key consteval].
[:zh_CN]
[~lambda-说明符序列]中每种 [~lambda-说明符]最多包含一次，并且不能同时包含
[`:key constexpr] 和 [`:key consteval]。

[:en]
If the [~lambda-declarator] contains an explicit object parameter ([#dcl.fct]),
then no [~lambda-specifier] in the [~lambda-specifier-seq] shall be [`:key mutable].
[:zh_CN]
如果 [~lambda-说明符]包含显式对象形参（[#dcl.fct]），则[~lambda-说明符序列]中
不能有 [~lambda-说明符] [`:key mutable]。

[begin:note]
[:en]
The trailing [~requires-clause] is described in [#dcl.decl].
[:zh_CN]
尾部 [~requires-子句]在 [#dcl.decl] 中描述。
[end:note]

[para]
[:en]
If a [~lambda-declarator] does not include a [~parameter-declaration-clause], it
is as if [`()] were inserted at the start of the [~lambda-declarator].
[:zh_CN]
如果 [~lambda-声明符]并不包含[~形参声明子句]，则如同在其 [~lambda-声明符]开头
插入了 [`()]。

[:en]
If the [~lambda-declarator] does not include a [~trailing-return-type],
the lambda return type is [`:key auto], which is deduced from [`:key return]
statements as described in [#dcl.spec.auto].
[:zh_CN]
如果 [~lambda-声明符]并不包含[~尾部返回类型]，则 lambda 的返回类型为 [`:key auto]，
并根据 [#dcl.spec.auto] 的说明从 [`return] 语句进行推断。

[begin:example]
[codeblock]
auto x1 = [](int i) { return i; };      // [:en] OK, return type is [`int] \
                                        [:zh_CN] OK，返回类型为 [`int]
auto x2 = []{ return { 1, 2 }; };       // [:en] error: deducing return type from [~braced-init-list] \
                                        [:zh_CN] 错误：从[~花括号初始化列表]推断返回类型
int j;
auto x3 = []()->auto&& { return j; };   // [:en] OK, return type is [`int&] \
                                        [:zh_CN] OK，返回类型为 [`int&]
[codeblock:end]
[end:example]

[para]
[:en]
A lambda is a [+generic lambda] if the [~lambda-expression] has any generic
parameter type placeholders ([#dcl.spec.auto]), or if the lambda has a
[~template-parameter-list].
[:zh_CN]
如果 [~lambda-表达式]带有任何泛型形参类型占位符（[#dcl.spec.auto]），或者如果
lambda 具有[~模板形参列表]，则该 lambda 是[+泛型 lambda]。

[begin:example]
[codeblock]
int i = [](int i, auto a) { return i; }(3, 4);                  // [:en] OK, a generic lambda \
                                                                [:zh_CN] OK，泛型 lambda
int j = []<class T>(T t, int i) { return i; }(3, 4);            // [:en] OK, a generic lambda \
                                                                [:zh_CN] OK，泛型 lambda
[codeblock:end]
[end:example]
