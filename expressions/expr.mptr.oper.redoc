[section#expr.mptr.oper
    [:en] Pointer-to-member operators
    [:zh_CN] 成员指针运算符
]

[para]
[:en]
[%expression[!pointer-to-member]] [%pointer to member]
[%operator[!pointer to member]] [%[`.*][%operator[!pointer to member]]]
[%operator[!pointer to member]] [%[`->*][%operator[!pointer to member]]]
The pointer-to-member operators [`->*] and [`.*] group left-to-right.
[:zh_CN]
[%表达式[!成员指针～]] [%成员指针]
[%运算符[!成员指针～]] [%[`.*][%运算符[!成员指针～]]]
[%运算符[!成员指针～]] [%[`->*][%运算符[!成员指针～]]]
成员指针运算符 [`->*] 和 [`.*] 按从左向右组合。

[syntax]
[rule pm-expression [:zh_CN] pm-表达式 ]
    [| cast-expression ]
    [| pm-expression [`.*] cast-expression ]
    [| pm-expression [`->*] cast-expression ]
[rule:end]
[syntax:end]

[para]
[:en]
The binary operator [`.*] binds its second operand, which shall be of type
[=lq]pointer to member of [`T][=rq] to its first operand, which shall be a
glvalue of class [`T] or of a class of which [`T] is an unambiguous and
accessible base class.
[:zh_CN]
二元运算符 [`.*] 向其第一个操作数（应当为类 [`T] 或者以 [`T] 为无歧义可访问基类
的类的泛左值）绑定其第二个操作数（类型应当为“[`T] 的成员指针”）。

[:en]
The result is an object or a function of the type specified by the second
operand.
[:zh_CN]
其结果为由第二个操作数指定其类型的对象或函数。

[para]
[:en]
The binary operator [`->*] binds its second operand, which shall be of type
[=lq]pointer to member of [`T][=rq] to its first operand, which shall be of type
[=lq]pointer to [`U][=rq] where [`U] is either [`T] or a class of which [`T] is
an unambiguous and accessible base class.
[:zh_CN]
二元运算符 [`->*] 向其第一个操作数（类型应当为“[`U] 的指针”，其中 [`U] 为 [`T]，
或者以 [`T] 为无歧义可访问基类的类）绑定其第二个操作数（类型应当为“[`T] 的成员
指针”）。

[:en]
The expression [`E1->*E2] is converted into the equivalent form [`(*(E1)).*E2].
[:zh_CN]
表达式 [`E1->*E2] 被转换为其等价形式 [`(*(E1)).*E2]。

[para]
[:en]
Abbreviating [~pm-expression][`.*][~cast-expression] as [`E1.*E2], [`E1] is
called the [+object expression].
[:zh_CN]
将[~pm-表达式][`.*][~强制转换表达式]简记为 [`E1.*E2]，[`E1]被称为其[+对象表达式]。

[:en]
If the dynamic type of [`E1] does not contain the member to which [`E2] refers,
the behavior is undefined.
[:zh_CN]
若 [`E1] 的动态类型并不包含 [`E2] 所指代的成员，则其行为是未定义的。

[:en]
Otherwise, the expression [`E1] is sequenced before the expression [`E2].
[:zh_CN]
否则，表达式 [`E1] 按顺序早于表达式 [`E2]。

[para]
[:en]
The restrictions on cv-qualification, and the manner in which the cv-qualifiers
of the operands are combined to produce the cv-qualifiers of the result, are the
same as the rules for [`E1.E2] given in [#expr.ref].
[:zh_CN]
对 cv 限定的限制，以及对操作数的 cv 限定符进行组合以产生其结果的 cv 限定符的
方式，与在 [#expr.ref] 中给出的针对 [`E1.E2] 的规则相同。

[begin:note]
[:en]
It is not possible to use a pointer to member that refers to a [`:key mutable]
member to modify a const class object.
[:zh_CN]
不可能使用指代 [`:key mutable] 成员的成员指针来改动 const 类对象。

[:en]
For example,
[:zh_CN]
例如，

[codeblock]
struct S {
  S() : i(0) { }
  mutable int i;
};
void f()
{
const S cs;
int S::* pm = &S::i;            // [:en] [`pm] refers to [`:key mutable] member [`S::i] \
                                   [:zh_CN] [`pm] 指代 [`:key mutable] 成员 [`S::i]
cs.*pm = 88;                    // [:en] error: [`cs] is a const object \
                                   [:zh_CN] 错误：[`cs] 是 const 对象
}
[codeblock:end]
[end:note]

[para]
[:en]
[%function[!pointer to member]]
If the result of [`.*] or [`->*] is a function, then that result can be used
only as the operand for the function call operator [`()].
[:zh_CN]
[%函数[!成员～指针]]
若 [`.*] 或 [`->*] 的结果是函数，则其结果只能用作函数调用运算符 [`()] 的操作数。

[begin:example]
[codeblock]
(ptr_to_obj->*ptr_to_mfct)(10);
[codeblock:end]

[:en] calls the member function denoted by [`ptr_to_mfct] for the object
pointed to by [`ptr_to_obj].
[:zh_CN] 对 [`ptr_to_obj] 所指向的对象调用由 [`ptr_to_mfct] 指代的成员函数。
[end:example]

[:en]
In a [`.*] expression whose object expression is an rvalue, the program is
ill-formed if the second operand is a pointer to member function whose
[~ref-qualifier] is [`&], unless its [~cv-qualifier-seq] is [`:key const].
[:zh_CN]
在对象表达式为右值的 [`.*] 表达式中，如果其第二个操作数是[~引用限定符]为 [`&]
的成员函数指针，除非其 [~cv-限定符序列]为 [`:key const]，否则程序非良构。

[:en]
In a [`.*] expression whose object expression is an lvalue, the program is
ill-formed if the second operand is a pointer to member function whose
[~ref-qualifier] is [`&&].
[:zh_CN]
在对象表达式是左值的 [`.*] 表达式中，如果其第二个操作数是[~引用限定符]为 [`&&]
的成员函数指针，则程序非良构。

[:en]
The result of a [`.*] expression whose second operand is a pointer to a data
member is an lvalue if the first operand is an lvalue and an xvalue otherwise.
[:zh_CN]
第二个操作数为指向数据成员的指针的 [`.*] 表达式的结果，当第一个操作数是左值时为
左值，否则是临限值。

[:en]
The result of a [`.*] expression whose second operand is a pointer to a member
function is a prvalue.
[:zh_CN]
第二个操作数为指向成员函数的指针的 [`.*] 表达式的结果是纯右值。

[:en]
If the second operand is the null member pointer value ([#conv.mem]), the
behavior is undefined.
[:zh_CN]
若第二个操作数是空成员指针值（[#conv.mem]），则其行为是未定义的。
