[section#expr.const.cast
    [:en] Const cast
    [:zh_CN] Const 转型
]

[para]
[:en] [%expression[!const cast]] [%cast[!const]]
The result of the expression [`[`:key const_cast]<T>(v)] is of type [`T].
[:zh_CN] [%表达式[!const 转型～]] [%转型[!const～]]
表达式 [`[`:key const_cast]<T>(v)] 的结果为类型 [`T]。

[:en] If [`T] is an lvalue reference to object type, the result is an lvalue;
if [`T] is an rvalue reference to object type, the result is an xvalue;
otherwise, the result is a prvalue and the lvalue-to-rvalue ([#conv.lval]),
array-to-pointer ([#conv.array]), and function-to-pointer ([#conv.func])
standard conversions are performed on the expression [`v].
[:zh_CN] 若 [`T] 为对象左值引用类型，则其结果是左值；若 [`T] 为对象右值引用类型，
则其结果是临限值；否则其结果是纯右值，并对表达式 [`v] 实施左值向右值（[#conv.lval]）、
数组向指针（[#conv.array]）和函数向指针（[#conv.func]）标准转换。

[:en] The temporary materialization conversion ([#conv.rval]) is not
performed on [`v], other than as specified below.
[:zh_CN] 除了下文规定之外，不对 [`v] 实施临时对象实质化转换（[#conv.rval]）。

[:en] Conversions that can be performed explicitly using [`:key const_cast] are
listed below.
[:zh_CN] 可显式使用 [`:key const_cast] 实施的转换列出如下。

[:en] No other conversion shall be performed explicitly using [`:key const_cast].
[:zh_CN] 不存在可以显式使用 [`:key const_cast] 实施的其他转换。

[para]
[begin:note]
[:en] Subject to the restrictions in this subclause, an expression can be cast
to its own type using a [`:key const_cast] operator.
[:zh_CN] 在本子条款中的限制下，表达式可用 [`:key const_cast] 运算符转型为其自身的类型。
[end:note]

[para]
[:en] For two similar object pointer or pointer to data member types [`T1] and [`T2]
([#conv.qual]), a prvalue of type [`T1] can be explicitly converted to the type
[`T2] using a [`:key const_cast] if, considering the qualification-decompositions
of both types, each [$P^1_i] is the same as [$P^2_i] for all [$i].
[:zh_CN] 对于两个相似对象指针或数据成员指针类型 [`T1] 和 [`T2]（[#conv.qual]），
考虑两个类型的限定分解，若对于每个 [$i]，[$P^1_i] 都与 [$P^2_i] 相同，则 [`T1] 类型
的纯右值可以用 [`:key const_cast] 显式转换为类型 [`T2]。

[:en] If [`v] is a null pointer or null member pointer,
the result is a null pointer or null member pointer, respectively.
[:zh_CN] 如果 [`v] 是空指针或空成员指针，那么结果分别为空指针或空成员指针。

[:en] Otherwise, the result points to or past the end of the same object, or
points to the same member, respectively, as [`v].
[:zh_CN] 否则，结果分别与 [`v] 指向相同对象或越过相同对象末尾，或者指向相同成员。

[para]
[:en] For two object types [`T1] and [`T2], if a pointer to [`T1] can be
explicitly converted to the type [=rq]pointer to [`T2][=rq] using
a [`:key const_cast], then the following conversions can also be made:
[:zh_CN] 对于两个对象类型 [`T1] 和 [`T2]，如果 [`T1] 的指针可以用 [`:key const_cast]
显式转换为“[`T2] 的指针”，则下列转换也可以进行：

[list]
[item]
[:en] an lvalue of type [`T1] can be explicitly converted to an lvalue of
type [`T2] using the cast [`[`:key const_cast]<T2&>];
[:zh_CN] 类型 [`T1] 的左值可以用转型 [`[`:key const_cast]<T2&>] 显式转换为
类型 [`T2] 的左值；

[item]
[:en] a glvalue of type [`T1] can be explicitly converted to an xvalue of
type [`T2] using the cast [`[`:key const_cast]<T2&&>]; and
[:zh_CN] 类型 [`T1] 的泛左值可以用转型 [`[`:key const_cast]<T2&&>] 显式转换为
类型 [`T2] 的临限值；并且

[item]
[:en] if [`T1] is a class or array type, a prvalue of type [`T1] can be
explicitly converted to an xvalue of type [`T2] using the cast
[`[`:key const_cast]<T2&&>].
[:zh_CN] 若 [`T1] 为类或数组类型，则类型 [`T1] 的纯右值可以用转型
[`[`:key const_cast]<T2&&>] 显式转换为类型 [`T2] 的临限值。

[:en] The temporary materialization conversion is performed on [`v].
[:zh_CN] 对 [`v] 实施临时对象实质化转换。
[list:end]

[:en] The result refers to the same object as the (possibly converted) operand.
[:zh_CN] 结果与（可能转换后的）操作数指代相同对象。

[begin:example]
[codeblock]
typedef int *A[3];                  // [:en] array of 3 pointer to [`int] [:zh_CN] [`int] 指针的 3 元数组
typedef const int *const CA[3];     // [:en] array of 3 const pointer to [`const int] [:zh_CN] [`const int] 常量指针的 3 元数组

auto &&r2 = const_cast<A&&>(CA{});  // [:en] OK, temporary materialization conversion is performed \
                                    [:zh_CN] OK，实施临时对象实质化转换
[codeblock:end]
[end:example]

[para]
[begin:note]
[:en] Depending on the type of the object, a write operation through the pointer,
lvalue or pointer to data member resulting from a [`:key const_cast] that casts
away a const-qualifier[#:fn] can produce undefined behavior ([#dcl.type.cv]).
[:zh_CN] 依赖于对象的类型，通过用 [`:key const_cast] 强制移除 const 限定符[#:fn]
产生的指针、左值或数据成员指针进行写操作，可能产生未定义的行为（[#dcl.type.cv]）。
[end:note]

[note:foot]
[:en] [`:key const_cast] is not limited to conversions that cast away a
const-qualifier.
[:zh_CN] [`:key const_cast] 并不仅用于强制移除 const 限定符的转换。
[note:end]

[para]
[:en] [%[`const][!cast away]]
A conversion from a type [`T1] to a type [`T2] [+casts away constness [%casting
away constness]] if [`T1] and [`T2] are different, there is a
qualification-decomposition ([#conv.qual]) of [`T1] yielding [^n] such that [`T2]
has a qualification-decomposition of the form
[:zh_CN] [%[`const][!强制移除～]]
将类型 [`T1] 转换为 [`T2]，符合以下条件时称其[+强制移除常量性]：如果 [`T1] 和
[`T2] 不同，并存在 [`T1] 的限定分解（[#conv.qual]）能够有某个 [^n]，使得 [`T2]
具有如下形式的限定分解

[syntax:explanation]
[$[=cv]_0^2] [$P_0^2] [$[=cv]_1^2] [$P_1^2] [$\cdots] [$[=cv]_{n-1}^2] [$P_{n-1}^2] [$[=cv]_n^2] [$[`U]_2],
[syntax:end]

[:en@~] and there is no qualification conversion that converts [`T1] to
[:zh_CN@~] 并且不存在将 [`T1] 转换为以下形式的限定转换

[syntax:explanation]
[$[=cv]_0^2] [$P_0^1] [$[=cv]_1^2] [$P_1^1] [$\cdots] [$[=cv]_{n-1}^2] [$P_{n-1}^1] [$[=cv]_n^2] [$[`U]_1].
[syntax:end]

[para]
[:en] Casting from an lvalue of type [`T1] to an lvalue of type [`T2] using an
lvalue reference cast or casting from an expression of type [`T1] to an xvalue
of type [`T2] using an rvalue reference cast casts away constness if a cast from
a prvalue of type [=lq]pointer to [`T1][=rq] to the type [=lq]pointer to [`T2][=rq]
casts away constness.
[:zh_CN] 如果从“[`T1] 的指针”类型的纯右值向类型“[`T2] 的指针”的转型中强制移除常量性，
则用左值引用转型将 [`T1] 类型的左值转型为类型 [`T2] 的左值时，或者用右值引用转型将
[`T1] 类型的表达式转型为类型 [`T2] 的临限值时，将强制移除常量性。

[para]
[begin:note]
[:en] Some conversions which involve only changes in cv-qualification cannot be
done using [`:key const_cast].
[:zh_CN] 某些只涉及 cv 限定中的改变的转换并不能用 [`:key const_cast] 完成。

[:en] For instance, conversions between pointers to functions are not covered
because such conversions lead to values whose use causes undefined behavior.
[:zh_CN] 例如，它并不涵盖函数指针之间的转换，因为这些转换会产生使用时导致未定义行为的值。

[:en] For the same reasons, conversions between pointers to member functions,
and in particular, the conversion from a pointer to a const member function to a
pointer to a non-const member function, are not covered.
[:zh_CN] 由于相同的原因，它也不涵盖成员函数指针之间的转换，尤其是从指向 const 成员函数的
指针向指向非 const 成员函数的指针的转换。
[end:note]
