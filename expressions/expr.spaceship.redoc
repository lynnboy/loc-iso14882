[section#expr.spaceship
    [:en] Three-way comparison operator
    [:zh_CN] 三路比较运算符
]

[:en]
[%expression[!three-way comparison]]
[%expression[!spaceship]]
[:zh_CN]
[%表达式[!三路比较～]]
[%表达式[!飞船～]]

[para]
[:en]
The three-way comparison operator groups left-to-right.
[:zh_CN]
三路比较运算符从左向右分组。

[:en]
[%[`<=>][%[operator[!three-way comparison]]]
[%operator[!three-way comparison]]
[%operator[!spaceship]]
[:zh_CN]
[%[`<=>][%运算符[!三路比较～]]]
[%运算符[!三路比较～]]
[%运算符[!飞船～]]

[syntax]
[rule compare-expression [:zh_CN] 比较表达式 ]
    [| shift-expression ]
    [| compare-expression [`<=>] shift-expression ]
[rule:end]
[syntax:end]

[para]
[:en]
The expression [`p <=> q] is a prvalue indicating whether [`p] is less than,
equal to, greater than, or incomparable with [`q].
[:zh_CN]
表达式 [`p <=> q] 是纯右值，标明 [`p] 是否小于、等于、大于 [`q] 或无法比较。

[para]
[:en]
If one of the operands is of type [`:key bool] and the other is not, the program
is ill-formed.
[:zh_CN]
如果这些操作数之一的类型为 [`:key bool] 而另一个不是，则程序非良构。

[para]
[:en]
If both operands have arithmetic types, or one operand has integral type and the
other operand has unscoped enumeration type, the usual arithmetic conversions
([#expr.arith.conv]) are applied to the operands.
[:zh_CN]
如果两个操作数都为算术类型，或者一个操作数具有整型类型而另一个操作数具有无作用域
枚举类型，则对这些操作数进行一般算术转换（[#expr.arith.conv]）。

[:en]
Then:
[:zh_CN]
然后：

[list]
[item]
[:en]
If a narrowing conversion ([#dcl.init.list]) is required, other than from an
integral type to a floating-point type, the program is ill-formed.
[:zh_CN]
如果需要进行除了从整型类型到浮点类型之外的窄化转换（[#dcl.init.list]），则程序
非良构。

[item]
[:en]
Otherwise, if the operands have integral type, the result is of type
[`std::strong_ordering].
[:zh_CN]
否则，如果操作数具有整型类型，则结果类型为 [`std::strong_ordering]。

[:en]
The result is [`std::strong_ordering::equal] if both operands are arithmetically
equal, [`std::strong_ordering::less] if the first operand is arithmetically less
than the second operand, and [`std::strong_ordering::greater] otherwise.
[:zh_CN]
当两个操作数算术相等时结果为 [`std::strong_ordering::equal]，当第一个操作数算术
小于第二个操作数时结果为 [`std::strong_ordering::less]，否则结果为
[`std::strong_ordering::greater]。

[item]
[:en]
Otherwise, the operands have floating-point type, and the result is of type
[`std::partial_ordering].
[:zh_CN]
否则，操作数具有浮点类型，结果类型为 [`std::partial_ordering]。

[:en]
The expression [`a <=> b] yields [`std::partial_ordering::less] if [`a] is less
than [`b], [`std::partial_ordering::greater] if [`a] is greater than [`b],
[`std::partial_ordering::equivalent] if [`a] is equivalent to [`b], and
[`std::partial_ordering::unordered] otherwise.
[:zh_CN]
对于表达式 [`a <=> b]，当 [`a] 小于 [`b] 时产生 [`std::partial_ordering::less]，
当 [`a] 大于 [`b] 时产生 [`std::partial_ordering::greater]，当 [`a] 与 [`b] 等价
时产生 [`std::partial_ordering::equivalent]，否则产生
[`std::partial_ordering::unordered]。
[list:end]

[para]
[:en]
If both operands have the same enumeration type [`E], the operator yields the
result of converting the operands to the underlying type of [`E] and applying
[`<=>] to the converted operands.
[:zh_CN]
如果两个操作数都具有相同的枚举类型 [`E]，则该运算符产生的结果是将两个操作数转换
为 [`E] 的底层类型后再对转换后的操作数应用 [`<=>] 的结果。

[para]
[:en]
If at least one of the operands is of object pointer type and the other operand
is of object pointer or array type, array-to-pointer conversions ([#conv.array]),
pointer conversions ([#conv.ptr]), and qualification conversions ([#conv.qual])
are performed on both operands to bring them to their composite pointer type
([#expr.type]).
[:zh_CN]
如果至少一个操作数具有对象指针类型且另一个操作数具有对象指针或数组类型，则对两个
操作数都实施数组向指针转换（[#conv.array]），指针转换（[#conv.ptr]），和限定转换
（[#conv.qual]），以将它们变为它们的合成指针类型（[#expr.type]）。

[:en]
After the conversions, the operands shall have the same type.
[:zh_CN]
经过转换之后，两个操作数应当具有相同的类型。

[begin:note]
[:en]
If both of the operands are arrays, array-to-pointer conversions ([#conv.array])
are not applied.
[:zh_CN]
如果两个操作数都是数组，则不实施数组向指针转换（[#conv.array]）。
[end:note]

[:en]
In this case, [`p <=> q] is of type [`std::strong_ordering] and the result is
defined by the following rules:
[:zh_CN]
这种情况下，[`p <=> q] 的类型为 [`std::strong_ordering]，而其结果由以下规则定义：

[list]
[item]
[:en]
If two pointer operands [`p] and [`q] compare equal ([#expr.eq]), [`p <=> q]
yields [`std::strong_ordering::equal];
[:zh_CN]
如果两个指针操作数 [`p] 和 [`q] 比较相等（[#expr.eq]），则 [`p <=> q] 产生
[`std::strong_ordering::equal]；

[item]
[:en]
otherwise, if [`p] and [`q] compare unequal, [`p <=> q] yields
[`std::strong_ordering::less] if [`q] compares greater than [`p] and
[`std::strong_ordering::greater] if [`p] compares greater than [`q] ([#expr.rel]);
[:zh_CN]
否则，如果 [`p] 和 [`q] 比较不相等，则当 [`q] 比较大于 [`p] 时 [`p <=> q] 产生
[`std::strong_ordering::less]，而当 [`p] 比较大于 [`q] 时产生
[`std::strong_ordering::greater]（[#expr.rel]）；
[item]
[:en]
otherwise, the result is unspecified.
[:zh_CN]
否则，其结果是未指明的。
[list:end]

[para]
[:en]
Otherwise, the program is ill-formed.
[:zh_CN]
否则，程序非良构。

[para]
[:en]
The three comparison category types ([#cmp.categories]) (the types
[`std::strong_ordering], [`std::weak_ordering], and [`std::partial_ordering])
are not predefined; if the header [?libheader@ref compare] is not imported or
included prior to a use of such a class type [=-] even an implicit use in which
the type is not named (e.g., via the [`:key auto] specifier ([#dcl.spec.auto])
in a defaulted three-way comparison ([#class.spaceship]) or use of the built-in
operator) [=-] the program is ill-formed.
[:zh_CN]
三个比较类别类型（[#cmp.categories]）（类型 [`std::strong_ordering]、
[`std::weak_ordering] 和 [`std::partial_ordering]）并非是预定义的；如果在使用
这些类类型之前——即便是并未指名类型的隐式使用，比如在预置的三路比较
（[#class.spaceship]）中通过 [`:key auto] 说明符（[#dcl.spec.auto]），或者使用
内建的运算符——并未导入或包含头文件 [?libheader@ref compare]，则程序非良构。
