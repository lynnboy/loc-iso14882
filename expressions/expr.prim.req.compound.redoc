[section#expr.prim.req.compound
    [:en] Compound requirements
    [:zh_CN] 复合规定

[%  [:en] requirement [!compound]
	[:zh_CN] 规定[!复合～] ]
]

[syntax]
[rule compound-requirement [:zh_CN] 复合规定 ]
    [| [`{] expression [`}] [`:opt noexcept] [~:opt return-type-requirement] [`;] ]
[rule:end]

[rule return-type-requirement [:zh_CN] 返回类型规定 ]
    [| [`->] type-constraint ]
[rule:end]
[syntax:end]

[para]
[:en]
A [~compound-requirement] asserts properties of the [~expression] [`E].
[:zh_CN]
[~复合规定]断言[~表达式] [`E] 的各项性质。

[:en]
Substitution of template arguments (if any) and verification of semantic
properties proceed in the following order:
[:zh_CN]
模板实参（如果有）的替换和对语义性质的验证以如下顺序进行：

[list]
[item]
[:en] Substitution of template arguments (if any) into the [~expression] is
performed.
[:zh_CN] 实施模板实参（如果有）向[~表达式]中的替换。

[item]
[:en] If the [`noexcept] specifier is present, [`E] shall not be a
potentially-throwing expression ([#except.spec]).
[:zh_CN] 如果出现 [`noexcept] 说明符，则 [`E] 不能为潜在抛出的表达式
（[#except.spec]）。

[item]
[:en] If the [~return-type-requirement] is present, then:
[:zh_CN] 如果出现[~返回类型规定]，则：

[list]
[item]
[:en] Substitution of template arguments (if any) into the
[~return-type-requirement] is performed.
[:zh_CN] 实施模板实参（如果有）向[~返回类型规定]中的替换。

[item]
[:en] The contextually-determined type being constrained by the
[~type-constraint] is [`decltype((E))].
[:zh_CN] 由该[~类型约束]所约束的按语境确定的类型为 [`decltype((E))]。

[:en] The immediately-declared constraint ([#temp]) of [`decltype((E))] shall be
satisfied.
[:zh_CN] [`decltype((E))] 的直接声明的约束（[#temp]）应当得以满足。

[enter:example]
[:en] Given concepts [`C] and [`D],
[:zh_CN] 给定概念 [`C] 和 [`D]，

[codeblock]
requires {
  { E1 } -> C;
  { E2 } -> D<A[$_1], [$\cdots], A[$_n]>;
};
[codeblock:end]

[:en@~] is equivalent to
[:zh_CN@~] 等价于

[codeblock]
requires {
  E1; requires C<decltype((E1))>;
  E2; requires D<decltype((E2)), A[$_1], [$\cdots], A[$_n]>;
};
[codeblock:end]

[:en@~] (including in the case where [$n] is zero).
[:zh_CN@~] （包括 [$n] 为零的情况）。
[exit:example]
[list:end]
[list:end]

[para]
[enter:example]
[codeblock]
template<typename T> concept C1 = requires(T x) {
  {x++};
};
[codeblock:end]

[:en]
The [~compound-requirement] in [`C1] requires that [`x++] is a valid expression.
[:zh_CN]
[`C1] 中的[~复合规定]要求 [`x++] 是有效表达式。

[:en]
It is equivalent to the [~simple-requirement] with the same [~expression]
[`x++;].
[:zh_CN]
它等价于具有相同[~表达式]的[~简单规定] [`x++;]。

[codeblock]
template<typename T> concept C2 = requires(T x) {
  {*x} -> same_as<typename T::inner>;
};
[codeblock:end]

[:en]
The [~compound-requirement] in [`C2] requires that [`*x] is a valid expression,
that [`typename T::inner] is a valid type, and that
[`same_as<decltype((*x)), typename T::inner>] is satisfied.
[:zh_CN]
[`C2] 中的[~复合规定]要求 [`*x] 为有效表达式，[`typename T::inner] 为有效类型，
并且满足 [`same_as<decltype((*x)), typename T::inner>]。

[codeblock]
template<typename T> concept C3 =
  requires(T x) {
    {g(x)} noexcept;
  };
[codeblock:end]

[:en]
The [~compound-requirement] in [`C3] requires that [`g(x)] is a valid expression
and that [`g(x)] is non-throwing.
[:zh_CN]
[`C3] 中的[~复合规定]要求 [`g(x)] 是有效表达式，且 [`g(x)] 不会抛出异常。
[exit:example]
