[section#conv.qual
    [:en] Qualification conversions
    [:zh_CN] 限定转换
]

[%:begin#conversion.qualification
    [:en] conversion [!qualification]
    [:zh_CN] 转换 [!限定～]
]

[para]
[:en]
A [+qualification-decomposition] of a type [`T] is a sequence of [$[=cv]_i] and
[$P_i] such that [`T] is
[:zh_CN]
类型 [`T] 的[+限定分解]，是一系列 [$[=cv]_i] 和 [$P_i]，使得 [`T] 为

[syntax:explanation]
[:en@~]
[=lq][$[=cv]_0] [$P_0] [$[=cv]_1] [$P_1] [$\cdots] [$[=cv]_{n-1}] [$P_{n-1}] [$[=cv]_n] [`U][=rq] for [$n \geq 0],
[:zh_CN@~]
对于 [$n \geq 0] 有“[$[=cv]_0] [$P_0] [$[=cv]_1] [$P_1] [$\cdots] [$[=cv]_{n-1}] [$P_{n-1}] [$[=cv]_n] [`U]”，
[syntax:end]

[:en@~]
where each [$[=cv]_i] is a set of cv-qualifiers ([#basic.type.qualifier]), and
each [$P_i] is [=lq]pointer to[=rq] ([#dcl.ptr]),
[=lq]pointer to member of class [$C_i] of type[=rq] ([#dcl.mptr]),
[=lq]array of [$N_i][=rq], or [=lq]array of unknown bound of[=rq] ([#dcl.array]).
[:zh_CN@~]
其中各个 [$cv_i] 是一组 cv 限定符（[#basic.type.qualifier]），而各个 [$P_i] 为
“～的指针”（[#dcl.ptr]），“～类型的类 [$C_i] 的成员指针”（[#dcl.mptr]），
“～的 [$N_i] 元数组”，或“～的边界未知数组”（[#dcl.array]）。

[:en]
If [$P_i] designates an array, the cv-qualifiers [$[=cv]_{i+1}] on the element
type are also taken as the cv-qualifiers [$[=cv]_i] of the array.
[:zh_CN]
若 [$P_i] 代表数组，则元素类型上的 cv 限定符 [$[=cv]_{i+1}] 也作为该数组的
cv 限定符 [$[=cv]_i]。

[begin:example]
[:en]
The type denoted by the [~type-id] [`const int **] has three
qualification-decompositions, taking [`U] as [=lq][`:key int][=rq], as
[=lq]pointer to [`[`:key const] [`:key int]][=rq], and as [=lq]pointer to
pointer to [`[`:key const] [`:key int]][=rq].
[:zh_CN]
[~类型标识] [`const int **] 所代表的类型有三个限定分解，其 [`U] 分别为
“[`:key int]”，“[`[`:key const] [`:key int]] 的指针”，和
“[`[`:key const] [`:key int]] 的指针的指针”。
[end:example]

[:en]
The [$n]-tuple of cv-qualifiers after the first one in the longest
qualification-decomposition of [`T], that is,
[$[=cv]_1, [=cv]_2, \dotsc, [=cv]_n], is called the [+cv-qualification signature]
of [`T].
[:zh_CN]
[`T] 的最长限定分解中，第一个之后的 cv 限定符的 [$n] 元组（即为
[$[=cv]_1, [=cv]_2, \dotsc, [=cv]_n]），被称作 [`T] 的 [+cv 限定签名]。

[para]
[:en]
[%type[!similar][%similar types]]
Two types [`T1] and [`T2] are [+similar [%similar types]] if they have
qualification-decompositions with the same [$n] such that corresponding [$P_i]
components are either the same or one is [=lq]array of [$N_i][=rq] and the other
is [=lq]array of unknown bound of[=rq], and the types denoted by [`U] are the
same.
[:zh_CN]
[%类型[!相似～][%相似类型]]
如果两个类型 [`T1] 和 [`T2] 具有 [$n] 相同的限定分解，使得其对应的 [$P_i] 要么
成分相同，要么其一为“～的 [$N_i] 元数组”而另一为“～的未知边界的数组”，且 [`U] 所
代表的类型也相同，则它们[+相似[%相似类型]]。

[para]
[:en]
The [+:adj qualification-combined type[%type[!cv-combined]]] of two types [`T1]
and [`T2] is the type [`T3] similar to [`T1] whose qualification-decomposition
is such that:
[:zh_CN]
两个类型 [`T1] 和 [`T2] 的 [+:adj 限定合并类型[%类型[!cv 合并～]]] [`T3] 与 [`T1]
相似，其限定分解满足一下条件：

[list]
[item]
[:en@~]
for every [$i > 0], [$[=cv]^3_i] is the union of [$[=cv]^1_i] and [$[=cv]^2_i],
[:zh_CN@~]
对于每个 [$i > 0]，[$[=cv]^3_i] 为 [$[=cv]^1_i] 和 [$[=cv]^2_i] 的并集，

[item]
[:en@~]
if either [$P^1_i] or [$P^2_i] is [=lq]array of unknown bound of[=rq], [$P^3_i]
is [=lq]array of unknown bound of[=rq], otherwise it is [$P^1_i], and
[:zh_CN@~]
若 [$P^1_i] 或 [$P^2_i] 任一者为“～的未知边界的数组”，则 [$P^3_i]为“～的未知边界
的数组”，否则其为 [$P^1_i]，并且

[item]
[:en@~]
if the resulting [$[=cv]^3_i] is different from [$[=cv]^1_i] or [$[=cv]^2_i], or
the resulting [$P^3_i] is different from [$P^1_i] or [$P^2_i], then [`:key const]
is added to every [$[=cv]^3_k] for [$0 < k < i],
[:zh_CN@~]
若所得的 [$[=cv]^3_i] 与 [$[=cv]^1_i] 或 [$[=cv]^2_i] 不同，或者所得的 [$P^3_i]
与 [$P^1_i] 或 [$P^2_i] 不同，则对 [$0 < k < i] 的每个 [$[=cv]^3_k] 向其添加
[`:key const]，
[list:end]

[:en@~]
where [$[=cv]^j_i] and [$P^j_i] are the components of the
qualification-decomposition of [`T][$j].
[:zh_CN@~]
其中 [$[=cv]^j_i] 和 [$P^j_i] 为 [`T][$j] 的限定分解中的成分。

[:en]
A prvalue of type [`T1] can be converted to type [`T2] if the
qualification-combined type of [`T1] and [`T2] is [`T2].
[:zh_CN]
当 [`T1] 和 [`T2] 的限定合并类型为 [`T2] 时，[`T1] 类型的纯右值可以被转换为类型
[`T2]。

[begin:note]
[:en]
If a program could assign a pointer of type [`T**] to a pointer of type
[`:key const] [`T**] (that is, if line #1 below were allowed), a program could
inadvertently modify a const object (as it is done on line #2).
[:zh_CN]
如果程序能够把类型 [`T**] 的指针转换为类型 [`:key const] [`T**] 的指针（就是说，
如果允许下面的行 #1），程序就可能不慎地改动 const 对象（如行 #2 所作）。

[:en]
For example,
[:zh_CN]
例如，

[codeblock]
int main() {
  const char c = 'c';
  char* pc;
  const char** pcc = &pc;       // [:en] #1: not allowed \
                                   [:zh_CN] #1：不允许这样
  *pcc = &c;
  *pc = 'C';                    // [:en] #2: modifies a const object \
                                   [:zh_CN] #2：改动了 const 对象
}
[codeblock:end]
[end:note]

[begin:note]
[:en]
Given similar types [`T1] and [`T2], this construction ensures that both can be
converted to the qualification-combined type of [`T1] and [`T2].
[:zh_CN]
给定相似类型 [`T1] 和 [`T2]，这种构造保证它们均可以转换为 [`T1] 和 [`T2] 的
限定合并类型。
[end:note]

[para]
[begin:note]
[:en]
A prvalue of type [=lq]pointer to [=cv cv1] [`T][=rq] can be converted to a
prvalue of type [=lq]pointer to [=cv cv2] [`T][=rq] if [=lq][=cv cv2] [`T][=rq]
is more cv-qualified than [=lq][=cv cv1] [`T][=rq].
[:zh_CN]
如果“[=cv cv2] [`T]”是比“[=cv cv1] [`T]”更加 cv 限定的，那么类型“[=cv cv1] [`T]
的指针”的纯右值可以被转换为类型“[=cv cv2] [`T] 的指针”的纯右值。

[:en]
A prvalue of type [=lq]pointer to member of [`X] of type [=cv cv1] [`T][=rq] can
be converted to a prvalue of type [=lq]pointer to member of [`X] of type
[=cv cv2] [`T][=rq] if [=lq][=cv cv2] [`T][=rq] is more cv-qualified than
[=lq][=cv cv1] [`T][=rq].
[:zh_CN]
如果“[=cv cv2] [`T]”是比“[=cv cv1] [`T]”更加 cv 限定的，那么类型“[=cv cv1] [`T]
类型的 [`X] 的成员指针”的纯右值可以被转换为类型“[=cv cv2] [`T] 类型的 [`X] 的
成员指针”的纯右值。
[end:note]

[para]
[begin:note]
[:en]
Function types (including those used in pointer-to-member-function types) are
never cv-qualified ([#dcl.fct]).
[:zh_CN]
函数类型（包括成员函数指针类型中所使用的函数类型）总不是 cv 限定的（[#dcl.fct]）。
[end:note]

[%:end#conversion.qualification]
