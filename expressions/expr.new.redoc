[section#expr.new
    [:en] New
    [:zh_CN] new
]

[para]
[:en]
[%expression[![`new]]]
[%free store[%[`new]][%[`delete]]]
[%memory management[%[`new]][%[`delete]]]
[%storage management[%[`new]][%[`delete]]]
[%[`new]]
The [~new-expression] attempts to create an object of the [~type-id]
([#dcl.name]) or [~new-type-id] to which it is applied.
[:zh_CN]
[%表达式[![`new]]]
[%自由存储[%[`new]][%[`delete]]]
[%内存管理[%[`new]][% [`delete]]]
[%存储管理[%[`new]][%[`delete]]]
[%[`new]]
[~new-表达式]试图创建类型为其所涉及的[~类型标识]（[#dcl.name]）或 [~new-类型
标识]的对象。

[:en]
The type of that object is the [+allocated type[%type[!allocated]]].
[:zh_CN]
此对象的类型是[+被分配类型[%类型[!被分配～]]]。

[:en]
[%type[!incomplete]]
This type shall be a complete object type, but not an abstract class type or
array thereof ([#intro.object], [#basic.types], [#class.abstract]).
[:zh_CN]
[%类型[!不完整～]]
这个类型应当是完整的对象类型，但不能是抽象类类型或其数组（[#intro.object]，
[#basic.types]，[#class.abstract]）。

[enter:note]
[:en]
Because references are not objects, references cannot be created by
[~new-expression]s.
[:zh_CN]
由于引用不是对象，故不能通过 [~new-表达式]创建引用。
[exit:note]

[enter:note]
[:en]
The [~type-id] may be a cv-qualified type, in which case the object created by
the [~new-expression] has a cv-qualified type.
[:zh_CN]
[~类型标识]可以是 cv 限定的类型，这种情况下由 [~new-表达式]所创建的对象就具有
cv 限定的类型。
[exit:note]

[syntax]
[rule new-expression [:zh_CN] new-表达式 ]
    [| [`:opt ::] [`new] [~:opt new-placement] new-type-id
        [~:opt new-initializer] ]
    [| [`:opt ::] [`new] [~:opt new-placement] [`(] type-id [`)]
        [~:opt new-initializer] ]
[rule:end]

[%  [:en] [`new] [! storage allocation]
    [:zh_CN] [`new] [! 存储分配] ]

[rule new-placement [:zh_CN] new-放置 ]
    [| [`(] expression-list [`)] ]
[rule:end]

[rule new-type-id [:zh_CN] new-类型标识 ]
    [| type-specifier-seq [~:opt new-declarator] ]
[rule:end]

[rule new-declarator [:zh_CN] new-声明符 ]
    [| ptr-operator [~:opt new-declarator] ]
    [| noptr-new-declarator ]
[rule:end]

[rule noptr-new-declarator [:zh_CN] 非指针-new-声明符 ]
    [| [``[] expression [``]] [~:opt attribute-specifier-seq] ]
    [| noptr-new-declarator [``[] constant-expression [``]]
        [~:opt attribute-specifier-seq] ]
[rule:end]

[rule new-initializer [:zh_CN] new-初始化式 ]
    [| [`(] [~:opt expression-list] [`)] ]
    [| braced-init-list ]
[rule:end]
[syntax:end]

[:en]
[%storage duration[!dynamic]]
Entities created by a [~new-expression] have dynamic storage duration
([#basic.stc.dynamic]).
[:zh_CN]
[%存储期[!动态～]]
由 [~new-表达式]创建的实体具有动态存储期（[#basic.stc.dynamic]）。

[enter:note]
[:en]
[%[`new][!scoping and]]
The lifetime of such an entity is not necessarily restricted to the scope in
which it is created.
[:zh_CN]
[%[`new][!作用域与～]]
此种实体的生存期并不受限于创建它的作用域之内。
[exit:note]

[:en]
If the entity is a non-array object, the result of the [~new-expression] is a
pointer to the object created.
[:zh_CN]
若该实体是非数组对象，则该 [~new-表达式]的结果是指向其所创建的对象的指针。

[:en]
If it is an array, the result of the [~new-expression] is a pointer to the
initial element of the array.
[:zh_CN]
若它是数组，则该 [~new-表达式]的结果是指向该数组的开头元素的指针。

[para]
[:en]
If a placeholder type ([#dcl.spec.auto]) appears in the [~type-specifier-seq] of
a [~new-type-id] or [~type-id] of a [~new-expression], allocated type is deduced
as follows:
[:zh_CN]
若在 [~new-表达式]的 [~new-类型标识]或[~类型标识]中的[~类型说明符序列]中，出现了
占位符类型（[#dcl.spec.auto]），则其被分配类型如下推断：

[:en]
Let [$init] be the [~new-initializer], if any, and [`T] be the [~new-type-id] or
[~type-id] of the [~new-expression], then the allocated type is the type deduced
for the variable [`x] in the invented declaration ([#dcl.spec.auto]):
[:zh_CN]
令 [$init] 为 [~new-初始化式]（如果有），并令 [`T] 为该 [~new-表达式]的 [~new-类
型标识]或[~类型标识]，则其被分配类型就是对如下虚构的声明式中的变量 [`x] 所推断出
的类型（[#dcl.spec.auto]）：

[codeblock:notation [!:var init]]
T x init ;
[codeblock:end]

[enter:example]
[codeblock]
new auto(1);                    // [:en] allocated type is [`int]
                                // [|:zh_CN] 分配类型为 [`int]
auto x = new auto('a');         // [:en] allocated type is [`char], [`x] is of type [`char*]
                                // [|:zh_CN] 分配类型为 [`char]，[`x] 的类型为 [`char*]

template<class T> struct A { A(T, T); };
auto y = new A{1, 2};           // [:en] allocated type is [`A<int>]
                                // [|:zh_CN] 分配类型为 [`A<int>]
[codeblock:end]
[exit:example]

[para]
[:en]
The [~new-type-id] in a [~new-expression] is the longest possible sequence of
[~new-declarator]s.
[:zh_CN]
[~new-表达式]中的 [~new-类型标识]是 [~new-声明符]的最长可能序列。

[enter:note]
[:en]
This prevents ambiguities between the declarator operators [`&], [`&&], [`*],
and [``[`]] and their expression counterparts.
[:zh_CN]
这防止了在声明符运算符 [`&]，[`&&]，[`*] 和 [``[`]]，同它们的表达式对应物间产生
歧义。
[exit:note]

[enter:example]
[codeblock]
new int * i;                    // [:en] syntax error: parsed as [`(new int*) i], not as [`(new int)*i]
                                // [|:zh_CN] 语法错误：解析为 [`(new int*) i]，而不是 [`(new int)*i]
[codeblock:end]

[:en]
The [`*] is the pointer declarator and not the multiplication operator.
[:zh_CN]
这个 [`*] 是指针声明符而不是乘法运算符。
[exit:example]

[para]
[enter:note]
[:en]
[%ambiguity[!parentheses and]]
Parentheses in a [~new-type-id] of a [~new-expression] can have surprising
effects.
[:zh_CN]
[%歧义[!括号与～]]
[~new-表达式]的[~new-类型标识]中的括号可能产生奇怪的效果。

[enter:example]
[codeblock]
new int(*[10])();               // [:en] error
                                // [|:zh_CN] 错误
[codeblock:end]

[:en]
is ill-formed because the binding is
[:zh_CN]
是非良构的，这是因为其绑定是

[codeblock]
(new int) (*[10])();            // [:en] error
                                // [|:zh_CN] 错误
[codeblock:end]

[:en]
Instead, the explicitly parenthesized version of the [`new] operator can be used
to create objects of compound types ([#basic.compound]):
[:zh_CN]
可以用被明确带有括号的 [`new] 运算符版本代替它来创建组合类型
（[#basic.compound]）的对象：

[codeblock]
new (int (*[10])());
[codeblock:end]

[:en]
allocates an array of [`10] pointers to functions (taking no argument and
returning [`int].
[:zh_CN]
分配了 [`10] 个（不带实参并返回 [`int] 的）函数指针的数组。
[exit:example]
[exit:note]

[para]
[:en]
[%array[![`new]]]
When the allocated object is an array (that is, the [~noptr-new-declarator]
syntax is used or the [~new-type-id] or [~type-id] denotes an array type), the
[~new-expression] yields a pointer to the initial element (if any) of the array.
[:zh_CN]
[%数组[![`new]]]
当被分配的对象是数组（就是说，使用了[~非指针-new-声明符]语法，或者其 [~new-类型
标识]或[~类型标识]代表数组类型）时，该 [~new-表达式]产生指向数组的开头元素（如果
有）的指针。

[enter:note]
[:en]
Both [`new int] and [`new int`[10`]] have type [`int*] and the type of [`new
int`[i`]`[10`]] is [`int (*)`[10`]]
[:zh_CN]
[`new int] 和 [`new int`[10`]] 的类型都为 [`int*]，而 [`new int`[i`]`[10`]] 的
类型为 [`int (*)`[10`]]。
[exit:note]

[:en]
The [~attribute-specifier-seq] in a [~noptr-new-declarator] appertains to the
associated array type.
[:zh_CN]
[~非指针-new-声明符]中的[~特性说明符序列]属于其所关联的数组类型。

[para]
[:en]
Every [~constant-expression] in a [~noptr-new-declarator] shall be a converted
constant expression ([#expr.const]) of type [`std::size_t] and shall evaluate to
a strictly positive value.
[:zh_CN]
[~非指针-new-声明符]中的每个[~常量表达式]都应当是 [`std::size_t] 类型的经转换
常量表达式（[#expr.const]）且求值应当严格为正数。

[:en]
[%[`new]]
The [~expression] in a [~noptr-new-declarator] is implicitly converted to
[`std::size_t].
[:zh_CN]
[%[`new]]
[~非指针-new-声明符]中的[~表达式]被隐式转换为 [`std::size_t]。

[enter:example]
[:en]
Given the definition [`int n = 42], [`new float`[n`]`[5`]] is well-formed
(because [`n] is the [~expression] of a [~noptr-new-declarator]), but [`new
float`[5`]`[n`]] is ill-formed (because [`n] is not a constant expression).
[:zh_CN]
给定定义式 [`int n = 42]，则 [`new float`[n`]`[5`]] 是良构的（因为 [`n] 是
[~非指针-new-声明符]的[~表达式]），但 [`new float`[5`]`[n`]] 是非良构的（因为
[`n] 不是常量表达式）。
[exit:example]

[para]
[:en]
[%function[!allocation]]
The [~expression] in a [~noptr-new-declarator] is erroneous if:
[:zh_CN]
[%函数[!分配～]]
以下情况下[~非指针-new-声明符]中的[~表达式]是错误的：

[list]
[item]
[:en]
the expression is of non-class type and its value before converting to
[`std::size_t] is less than zero;
[:zh_CN]
该表达式是非类类型，且其转换为 [`std::size_t] 之前的值小于零；

[item]
[:en]
the expression is of class type and its value before application of the second
standard conversion ([#over.ics.user])[#:note#fn:$section.1] is less than zero;
[:zh_CN]
该表达式是类类型，且其实施第二个标准转换（[#over.ics.user]）之前的值
[#:note#fn:$section.1] 小于零；

[note:foot#fn:$section.1]
[:en]
If the conversion function returns a signed integer type, the second standard
conversion converts to the unsigned type [`std::size_t] and thus thwarts any
attempt to detect a negative value afterwards.
[:zh_CN]
若转换函数返回有符号整数类型，而第二个标准转换将其转换为无符号类型
[`std::size_t]，这样会阻碍任何检测负值的尝试。
[note:end]

[item]
[:en]
its value is such that the size of the allocated object would exceed the
[%@impldef maximum size of an allocated object] implementation-defined limit
([#implimits]); or
[:zh_CN]
若其值使得所分配的对象的大小超过[%@impldef 所分配的对象的最大大小]由实现定义的
限制（[#implimits]）；或者

[item]
[:en]
the [~new-initializer] is a [~braced-init-list] and the number of array elements
for which initializers are provided (including the terminating [`'\0'] in a
string literal ([#lex.string])) exceeds the number of elements to initialize.
[:zh_CN]
其 [~new-初始化式]是个[~花括号初始化列表]，且带有初始化式的数组元素（包括字符串
字面量中的终结 [`'\0']（[#lex.string]））的数量超过其所初始化的元素的数量。
[list:end]

[:en]
If the [~expression] is erroneous after converting to [`std::size_t]:
[:zh_CN]
若该[~表达式]转换为 [`std::size_t] 之后是错误的：

[list]
[item]
[:en]
if the [~expression] is a core constant expression, the program is ill-formed;
[:zh_CN]
当该[~表达式]是个核心常量表达式时，程序非良构；

[item]
[:en]
otherwise, an allocation function is not called; instead
[:zh_CN]
否则，不调用回收函数；而是

[list]
[item]
[:en]
if the allocation function that would have been called has a non-throwing
exception specification ([#except.spec]), the value of the [~new-expression]
is the null pointer value of the required result type;
[:zh_CN]
如果本要调用的分配函数带有无抛出异常说明（[#except.spec]），则 [~new-表达式]的值
即为所需结果类型的空指针值；

[item]
[:en]
otherwise, the [~new-expression] terminates by throwing an exception of a type
that would match a handler ([#except.handle]) of type
[`std::bad_array_new_length] ([#new.badlength]).
[:zh_CN]
否则该 [~new-表达式]就通过抛出一个能够与 [`std::bad_array_new_length]
（[#new.badlength]）类型的处理器（[#except.handle]）相匹配的异常而终止。
[list:end]
[list:end]

[:en]
When the value of the [~expression] is zero, the allocation function is called
to allocate an array with no elements.
[:zh_CN]
若该[~表达式]的值为零，则调用分配函数以分配一个没有元素的数组。

[para]
[:en]
A [~new-expression] may obtain storage for the object by calling an [+allocation
function] ([#basic.stc.dynamic.allocation]).
[:zh_CN]
[~new-表达式]通过调用[+分配函数]（[#basic.stc.dynamic.allocation]）获取对象的
存储。

[:en]
If the [~new-expression] terminates by throwing an exception, it may release
storage by calling a deallocation function ([#basic.stc.dynamic.deallocation]).
[:zh_CN]
若 [~new-表达式]以抛出异常终止，则它可通过调用回收函数
（[#basic.stc.dynamic.deallocation]）释放存储。

[:en]
If the allocated type is a non-array type, the allocation function[=']s name is
[%[`operator new]] [%[`operator delete]]
[`operator new] and the deallocation function[=']s name is [`operator delete].
[:zh_CN]
若被分配类型为非数组类型，则分配函数的名字为
[%[`operator new]] [%[`operator delete]]
[`operator new] 而回收函数的名字为 [`operator delete]。

[:en]
If the allocated type is an array type, the allocation function[=']s name is
[%[`operator new]] [%[`operator delete]]
[`operator new`[`]] and the deallocation function[=']s name is
[`operator delete`[`]].
[:zh_CN]
若被分配类型为数组类型，则分配函数的名字为
[%[`operator new]] [%[`operator delete]]
[`operator new`[`]] 而回收函数的名字为 [`operator delete`[`]]。

[enter:note]
[:en]
An implementation shall provide default definitions for the global allocation
functions ([#basic.stc.dynamic], [#new.delete.single], [#new.delete.array]).
[:zh_CN]
实现应当提供全局分配函数的缺省实现（[#basic.stc.dynamic]，[#new.delete.single]，
[#new.delete.array]）。

[:en]
A [=Cpp] program can provide alternative definitions of these functions
([#replacement.functions]) and/or class-specific versions ([#class.free]).
[:zh_CN]
[=Cpp] 程序可以提供这些函数的替代定义（[#replacement.functions]）和/或特定于类的
版本（[#class.free]）。

[:en]
The set of allocation and deallocation functions that may be called by a
[~new-expression] may include functions that do not perform allocation or
deallocation; for example, see [#new.delete.placement].
[:zh_CN]
可能会被 [~new-表达式]所调用的分配和回收函数的集合可能包含并不进行分配或回收的
函数；具体的例子，参见 [#new.delete.placement]。
[exit:note]

[para]
[:en]
[%operator[!scope resolution]]
If the [~new-expression] begins with a unary [`::] operator, the allocation
function[=']s name is looked up in the global scope.
[:zh_CN]
[%运算符[!作用域解析～]]
若 [~new-表达式]由一元 [`::] 运算符开始，则分配函数的名字就在全局作用域中查找。

[:en]
Otherwise, if the allocated type is a class type [`T] or array thereof, the
allocation function[=']s name is looked up in the scope of [`T].
[:zh_CN]
否则，若被分配类型为类类型 [`T] 或其数组，则分配函数的名字就在 [`T] 的作用域中
查找。

[:en]
If this lookup fails to find the name, or if the allocated type is not a class
type, the allocation function[=']s name is looked up in the global scope.
[:zh_CN]
若此查找无法找到此名字，或若被分配类型不是类类型，则分配函数的名字在全局作用域中
查找。

[para]
[:en]
An implementation is allowed to omit a call to a replaceable global allocation
function ([#new.delete.single], [#new.delete.array]).
[:zh_CN]
允许实现省略对可替换全局分配函数的调用（[#new.delete.single]，
[#new.delete.array]）

[:en]
When it does so, the storage is instead provided by the implementation or
provided by extending the allocation of another [~new-expression].
[:zh_CN]
若其进行省略，其存储由该实现提供，或者通过扩展另一个 [~new-表达式]的分配来提供。

[:en]
The implementation may extend the allocation of a [~new-expression] [`e1] to
provide storage for a [~new-expression] [`e2] if the following would be true
were the allocation not extended:
[:zh_CN]
实现可以扩展 [~new-表达式] [`e1] 的分配以为 [~new-表达式] [`e2] 提供存储，只要
当不进行扩展时以下各项为真：

[list]
[item]
[:en]
the evaluation of [`e1] is sequenced before the evaluation of [`e2], and
[:zh_CN]
[`e1] 的求值按顺序早于 [`e2] 的求值，且

[item]
[:en]
[`e2] is evaluated whenever [`e1] obtains storage, and
[:zh_CN]
[`e2] 的求值发生于 [`e1] 获得存储时，且

[item]
[:en]
both [`e1] and [`e2] invoke the same replaceable global allocation function, and
[:zh_CN]
[`e1] 和 [`e2] 调用同一个可替换全局分配函数，且

[item]
[:en]
if the allocation function invoked by [`e1] and [`e2] is throwing, any
exceptions thrown in the evaluation of either [`e1] or [`e2] would be first
caught in the same handler, and
[:zh_CN]
若由 [`e1] 和 [`e2] 调用的分配函数抛出异常，则对 [`e1] 或 [`e2] 的求值所抛出的
任何异常都将由同一个处理器首先捕获，且

[item]
[:en]
the pointer values produced by [`e1] and [`e2] are operands to evaluated
[~delete-expression]s, and
[:zh_CN]
由 [`e1] 和 [`e2] 所产生的指针值是 [~delete-表达式]的操作数，且

[item]
[:en]
the evaluation of [`e2] is sequenced before the evaluation of the
[~delete-expression] whose operand is the pointer value produced by [`e1].
[:zh_CN]
[`e2] 的求值按顺序早于以 [`e1] 所产生的指针值为操作数的 [~delete-表达式]的求值。
[list:end]

[enter:example]
[codeblock]
  void mergeable(int x) {
    // [:en] These allocations are safe for merging:
    // [|:zh_CN] 这些分配可以被安全地合并：
    std::unique_ptr<char[]> a{new (std::nothrow) char[8]};
    std::unique_ptr<char[]> b{new (std::nothrow) char[8]};
    std::unique_ptr<char[]> c{new (std::nothrow) char[x]};

    g(a.get(), b.get(), c.get());
  }

  void unmergeable(int x) {
    std::unique_ptr<char[]> a{new char[8]};
    try {
      // [:en] Merging this allocation would change its catch handler.
      // [|:zh_CN] 将这个分配进行合并将会导致改变其 catch 处理器。
      std::unique_ptr<char[]> b{new char[x]};
    } catch (const std::bad_alloc& e) {
      std::cerr << "Allocation failed: " << e.what() << std::endl;
      throw;
    }
  }
[codeblock:end]
[exit:example]

[para]
[:en]
When a [~new-expression] calls an allocation function and that allocation has
not been extended, the [~new-expression] passes the amount of space requested to
the allocation function as the first argument of type [`std::size_t].
[:zh_CN]
当 [~new-表达式]调用分配函数而该分配未被扩展时，[~new-表达式]把所请求的空间数量
作为类型为 [`std::size_t] 的第一个实参传给该分配函数。

[:en]
That argument shall be no less than the size of the object being created; it may
be greater than the size of the object being created only if the object is an
array.
[:zh_CN]
此实参应当不小于所要创建的对象的大小；仅当要创建的对象为数组时，它才可以大于该
对象的大小。

[:en]
For arrays of [`char], [`unsigned char], and [`std::byte], the difference
between the result of the [~new-expression] and the address returned by the
allocation function shall be an integral multiple of the strictest fundamental
alignment requirement ([#basic.align]) of any object type whose size is no
greater than the size of the array being created.
[:zh_CN]
对于 [`char]，[`unsigned char] 和 [`std::byte] 的数组，[~new-表达式]的结果和分配
函数所返回的地址之间的差，应当是其大小不大于所要创建的数组的大小的任意对象类型的
最严格的基础对齐要求（[#basic.align]）的整数倍。

[enter:note]
[:en]
[%allocation[!alignment storage]]
Because allocation functions are assumed to return pointers to storage that is
appropriately aligned for objects of any type with fundamental alignment, this
constraint on array allocation overhead permits the common idiom of allocating
character arrays into which objects of other types will later be placed.
[:zh_CN]
[%分配[!对齐存储]]
由于假设分配函数所返回的指针，指向对带有基础对齐的任意类型的对象都恰当对齐的存储
，此条关于数组分配开销的约束，允许采用一种分配字符数组并在其中放置其他类型的对象
的习惯用法。
[exit:note]

[para]
[:en]
When a [~new-expression] calls an allocation function and that allocation has
been extended, the size argument to the allocation call shall be no greater than
the sum of the sizes for the omitted calls as specified above, plus the size for
the extended call had it not been extended, plus any padding necessary to align
the allocated objects within the allocated memory.
[:zh_CN]
当 [~new-表达式]调用分配函数而该分配被扩展时，其分配调用的大小实参应当不大于上述
省略的调用的大小的和，加上被扩展的调用当未扩展时的大小，再加上任何用以在所分配的
内存中对齐分配的对象所需要的填充。

[para]
[:en]
[%placement [~new-expression][%[~new-expression][!placement]]]
The [~new-placement] syntax is used to supply additional arguments to an
allocation function; such an expression is called a [+placement
[~new-expression][%[~new-expression][!placement]]].
[:zh_CN]
[%放置式 [~new-表达式][%[~new-表达式][!放置式～]]]
[~new-放置]的语法用于向分配函数提供额外实参；这种表达式被称为[+放置式
[~new-表达式][%[~new-表达式][!放置式～]]]。

[para]
[:en]
Overload resolution is performed on a function call created by assembling an
argument list.
[:zh_CN]
对一次函数调用进行的重载决议是通过合成一个实参列表来进行的。

[:en]
The first argument is the amount of space requested, and has type
[`std::size_t].
[:zh_CN]
其第一个实参是所请求的空间大小，并具有类型 [`std::size_t]。

[:en]
If the type of the allocated object has new-extended alignment, the next
argument is the type[=']s alignment, and has type [`std::align_val_t].
[:zh_CN]
如果所分配对象的类型具有 new 扩充对齐，则其下一个实参就是该类型的对齐，并具有
类型 [`std::align_val_t]。

[:en]
If the [~new-placement] syntax is used, the [~initializer-clause]s in its
[~expression-list] are the succeeding arguments.
[:zh_CN]
当使用了 [~new-放置]的语法时，以[~表达式列表]中的各个[~初始化式子句]作为后续的
实参。

[:en]
If no matching function is found and the allocated object type has new-extended
alignment, the alignment argument is removed from the argument list, and
overload resolution is performed again.
[:zh_CN]
如果没有找到匹配的函数，且所分配的对象类型带有 new 扩充对齐，则将对齐实参从实参
列表中移除，再进行一次重载决议。

[para]
[enter:example]

[list]
[item]
[:en]
[`new T] results in one of the following calls:
[:zh_CN]
[`new T] 产生以下调用之一：

[codeblock]
operator new(sizeof(T))
operator new(sizeof(T), std::align_val_t(alignof(T)))
[codeblock:end]

[item]
[:en]
[`new(2,f) T] results in one of the following calls:
[:zh_CN]
[`new(2,f) T] 产生以下调用之一：

[codeblock]
operator new(sizeof(T), 2, f)
operator new(sizeof(T), std::align_val_t(alignof(T)), 2, f)
[codeblock:end]

[item]
[:en]
[`new T`[5`]] results in one of the following calls:
[:zh_CN]
[`new T`[5`]] 产生以下调用之一：

[codeblock]
operator new[](sizeof(T) * 5 + x)
operator new[](sizeof(T) * 5 + x, std::align_val_t(alignof(T)))
[codeblock:end]

[item]
[:en]
[`new(2,f) T`[5`]] results in one of the following calls:
[:zh_CN]
[`new(2,f) T`[5`]] 产生以下调用之一：

[codeblock]
operator new[](sizeof(T) * 5 + x, 2, f)
operator new[](sizeof(T) * 5 + x, std::align_val_t(alignof(T)), 2, f)
[codeblock:end]
[list:end]

[:en]
Here, each instance of [`x] is a non-negative unspecified value representing
array allocation overhead; the result of the [~new-expression] will be offset by
this amount from the value returned by [`operator new`[`]].
[:zh_CN]
此处，[`x] 的每个实例都是某个未指明的表示数组分配开销的非负数；[~new-表达式] 的
结果将把从 [`operator new`[`]] 返回的结果按此数量进行偏移。

[:en]
This overhead may be applied in all array [~new-expression]s, including those
referencing the library function [`operator new`[`](std::size_t, void*)] and
other placement allocation functions.
[:zh_CN]
此开销可能会施加于所有数组 [~new-表达式]上，包括涉及库函数
[`operator new`[`](std::size_t, void*)] 以及其他放置式分配函数。

[:en]
The amount of overhead may vary from one invocation of [`new] to another.
[:zh_CN]
其开销量可能因不同的 [`new] 调用而不同。
[exit:example]

[para]
[enter:note]
[:en]
Unless an allocation function has a non-throwing exception specification
([#except.spec]), it indicates failure to allocate storage by throwing a
[%[`bad_alloc]] [%@library bad_alloc] [`std::bad_alloc] exception
([#basic.stc.dynamic.allocation], [#except], [#bad.alloc]); it returns a
non-null pointer otherwise.
[:zh_CN]
除非分配函数被声明为带有无抛出异常说明（[#except.spec]），否则在分配存储失败时将
通过抛出 [%[`bad_alloc]] [%@library bad_alloc] [`std::bad_alloc] 异常
（[#basic.stc.dynamic.allocation]，[#except]，[#bad.alloc]）来表明分配存储失败；
反之则返回非空指针。

[:en]
If the allocation function has a non-throwing exception specification, it
returns null to indicate failure to allocate storage and a non-null pointer
otherwise.
[:zh_CN]
若分配函数被声明为带有无抛出异常说明，则它返回空值来表明分配存储失败，反之则返回
非空指针。
[exit:note]

[:en]
If the allocation function is a non-allocating form ([#new.delete.placement])
that returns null, the behavior is undefined.
[:zh_CN]
若分配函数具有返回空值的非分配形式（[#new.delete.placement]），则其行为未定义。

[:en]
Otherwise, if the allocation function returns null, initialization shall not be
done, the deallocation function shall not be called, and the value of the
[~new-expression] shall be null.
[:zh_CN]
否则，若分配函数返回空值，则不会进行初始化，不会调用回收函数，且 [~new-表达式]的
值为空值。

[para]
[enter:note]
[:en]
When the allocation function returns a value other than null, it must be a
pointer to a block of storage in which space for the object has been reserved.
[:zh_CN]
当分配函数返回非空值时，它应当是指向为该对象保留空间的存储块的指针。

[:en]
The block of storage is assumed to be appropriately aligned and of the requested
size.
[:zh_CN]
该存储块假设为已经恰当对齐且具有所请求的大小。

[:en]
The address of the created object will not necessarily be the same as that of
the block if the object is an array.
[:zh_CN]
若所创建的对象是数组，则对象的地址与存储块的地址不必相同。
[exit:note]

[para]
[:en]
[%[`new][!array of class objects and]]
[%[`new][!initialization and]]
[%[`new][!constructor and]]
[%[`new][!default constructor and]]
[%default constructor[%constructor[!default]]]
[%trivial type]
[%trivial class type]
A [~new-expression] that creates an object of type [`T] initializes that object
as follows:
[:zh_CN]
[%[`new][!类对象数组与～]]
[%[`new][!初始化与～]]
[%[`new][!构造函数与～]]
[%[`new][!默认构造函数与～]]
[%默认构造函数[%构造函数[!默认～]]]
[%平凡类型]
[%平凡类类型]
创建类型 [`T] 的对象的 [~new-表达式]按如下方式初始化该对象：

[list]
[item]
[:en]
If the [~new-initializer] is omitted, the object is default-initialized
([#dcl.init]).
[:zh_CN]
若省略了[~new-初始化式]，则该对象进行默认初始化（[#dcl.init]）。

[enter:note]
[:en]
If no initialization is performed, the object has an indeterminate value.
[:zh_CN]
若初始化并未实施，则该对象具有不确定的值。
[exit:note]

[item]
[:en]
Otherwise, the [~new-initializer] is interpreted according to the initialization
rules of [#dcl.init] for direct-initialization.
[:zh_CN]
否则，根据 [#dcl.init] 中针对直接初始化的初始化规则，处理其 [~new-初始化式]。
[list:end]

[para]
[:en]
[%[`new][!unspecified order of evaluation]]
[%[`new][!unspecified constructor and]]
The invocation of the allocation function is sequenced before the evaluations of
expressions in the [~new-initializer].
[:zh_CN]
[%[`new][!未指明的求值顺序]]
[%[`new][!未指明的构造函数与～]]
分配函数的调用按顺序早于 [~new-初始化式]中的表达式的求值。

[:en]
Initialization of the allocated object is sequenced before the [%value
computation] value computation of the [~new-expression].
[:zh_CN]
被分配的对象的初始化按顺序早于 [~new-表达式]的[%值计算]值计算。

[para]
[:en]
If the [~new-expression] creates an object or an array of objects of class type,
access and ambiguity control are done for the allocation function, the
deallocation function ([#class.free]), and the constructor ([#class.ctor]).
[:zh_CN]
若 [~new-表达式]创建类类型的对象或对象数组，则对分配函数、回收函数
（[#class.free]）和构造函数（[#class.ctor]）进行访问控制和歧义控制。

[:en]
If the [~new-expression] creates an array of objects of class type, the
destructor is potentially invoked ([#class.dtor]).
[:zh_CN]
若 [~new-表达式]创建类类型的数组，则潜在对其析构函数（[#class.dtor]）进行调用。

[para]
[:en]
[%[`new][!exception and]]
If any part of the object initialization described above
[#:note#fn:$section.2] terminates by throwing an exception and a suitable
deallocation function can be found, the deallocation function is called to free
the memory in which the object was being constructed, after which the exception
continues to propagate in the context of the [~new-expression].
[:zh_CN]
[%[`new][!异常与～]]
如果上述对象初始化中的任何部分[#:note#fn:$section.2] 以抛出异常终止，并且能够
找到合适的回收函数，则调用该回收函数来释放用于构造此对象的内存，其后再继续在
[~new-表达式]的语境中传播这个异常。

[note:foot#fn:$section.2]
[:en]
This may include evaluating a [~new-initializer] and/or calling a constructor.
[:zh_CN]
这可能包括对 [~new-初始化式]的求值和/或调用构造函数。
[note:end]

[:en]
If no unambiguous matching deallocation function can be found, propagating the
exception does not cause the object[=']s memory to be freed.
[:zh_CN]
若无法找到无歧义的匹配回收函数，则异常传播不会导致释放该对象的内存。

[enter:note]
[:en]
This is appropriate when the called allocation function does not allocate
memory; otherwise, it is likely to result in a memory leak.
[:zh_CN]
当所调用的分配函数并不分配内存的时候这样是合适的；否则就很可能会造成内存泄露。
[exit:note]

[para]
[:en]
If the [~new-expression] begins with a unary [`::] operator, the deallocation
function[=']s name is looked up in the global scope.
[:zh_CN]
若 [~new-表达式]由一元 [`::] 运算符开始，则回收函数的名字就在全局作用域中查找。

[:en]
Otherwise, if the allocated type is a class type [`T] or an array thereof, the
deallocation function[=']s name is looked up in the scope of [`T].
[:zh_CN]
否则，若被分配类型为类类型 [`T] 或其数组，则回收函数的名字就在 [`T] 的作用域中
查找。

[:en]
If this lookup fails to find the name, or if the allocated type is not a class
type or array thereof, the deallocation function[=']s name is looked up in the
global scope.
[:zh_CN]
若此查找过程无法找到此名字，或者若被分配类型不是类类型或其数组，则回收函数的名字
在全局作用域中查找。

[para]
[:en]
A declaration of a placement deallocation function matches the declaration of a
placement allocation function if it has the same number of parameters and, after
parameter transformations ([#dcl.fct]), all parameter types except the first are
identical.
[:zh_CN]
若放置式回收函数的声明式与放置式分配函数的声明式形参数量相同，且在形参变换
（[#dcl.fct]）之后，除第一个形参之外的所有形参的类型都一致，则它们相匹配。

[:en]
If the lookup finds a single matching deallocation function, that function will
be called; otherwise, no deallocation function will be called.
[:zh_CN]
若在查找过程中找到了单个匹配的回收函数，则调用该函数；否则，不调用回收函数。

[:en]
If the lookup finds a usual deallocation function with a parameter of type
[`std::size_t] ([#basic.stc.dynamic.deallocation]) and that function, considered
as a placement deallocation function, would have been selected as a match for
the allocation function, the program is ill-formed.
[:zh_CN]
若在查找过程中找到了带有一个 [`std::size_t] 类型的形参的常规回收函数
（[#basic.stc.dynamic.deallocation]），且当此函数被看作放置式回收函数时，与分配
函数相匹配并且将会被选取，则程序非良构。

[:en]
For a non-placement allocation function, the normal deallocation function lookup
is used to find the matching deallocation function ([#expr.delete])
[:zh_CN]
对于非放置式分配函数，使用普通的回收函数查找规则来查找其匹配的回收函数
（[#expr.delete]）。

[enter:example]
[codeblock]
struct S {
  // [:en] Placement allocation function:
  // [|:zh_CN] 放置式分配函数：
  static void* operator new(std::size_t, std::size_t);

  // [:en] Usual (non-placement) deallocation function:
  // [|:zh_CN] 常规（非放置式）回收函数：
  static void operator delete(void*, std::size_t);
};

S* p = new (0) S;   // [:en] ill-formed: non-placement deallocation function matches
                    // [|:zh_CN] 非良构：非放置式回收函数与
                    // [:en@~] placement allocation function
                    // [|:zh_CN@~] 放置式分配函数相匹配
[codeblock:end]
[exit:example]

[para]
[:en]
If a [~new-expression] calls a deallocation function, it passes the value
returned from the allocation function call as the first argument of type
[`void*].
[:zh_CN]
若 [~new-表达式]调用了回收函数，则把分配函数调用的返回值作为 [`void*] 类型的第一
个实参传递给它。

[:en]
If a placement deallocation function is called, it is passed the same additional
arguments as were passed to the placement allocation function, that is, the same
arguments as those specified with the [~new-placement] syntax.
[:zh_CN]
若调用了放置式回收函数，则把传递给放置式分配函数的附加实参（亦即与在 [~new-放置]
语法所指定的实参相同的实参）同样传递给它。

[:en]
If the implementation is allowed to introduce a temporary object or make a copy
of any argument as part of the call to the allocation function, it is
unspecified whether the same object is used in the call to both the allocation
and deallocation functions.
[:zh_CN]
若实现允许作为分配函数调用的一部分而引入临时对象或产生任何实参的副本，则是否在对
分配和回收函数的调用中使用的是同一个对象则是未指明的。
