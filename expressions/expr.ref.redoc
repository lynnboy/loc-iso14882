[section#expr.ref
    [:en] Class member access
    [:zh_CN] 类成员访问
]

[para]
[:en]
[%expression[!class member access]]
[%access control[!class member]]
[%syntax[!class member]]
[%semantics[!class member]]
[%operator[!class member access]]
[%[`.][%operator [!class member access]]]
[%dot operator[%operator [!class member access]]]
[%operator[!class member access]]
[%[`->][%operator [!class member access]]]
[%arrow operator[%operator [!class member access]]]
A postfix expression followed by a dot [`.] or an arrow [`->], optionally
followed by the keyword [`:key template], and then followed by an
[~id-expression], is a postfix expression.
[:zh_CN]
[%表达式[!类成员访问～]]
[%访问控制[!类成员]]
[%语法[!类成员]]
[%语义[!类成员]]
[%运算符[!类成员访问～]]
[%[`.][%运算符 [!类成员访问～]]]
[%点运算符[%运算符 [!类成员访问～]]]
[%运算符[!类成员访问～]]
[%[`->][%运算符 [!类成员访问～]]]
[%箭头运算符[%运算符 [!类成员访问～]]]
后缀表达式后面跟着点 [`.] 或箭头 [`->]，可选地跟着关键字 [`:key template]，
再跟着[~标识表达式]，是后缀表达式。

[:en]
The postfix expression before the dot or arrow is evaluated;[#:fn#]
[:zh_CN]
对点和箭头之前的后缀表达式进行求值；[#:fn#]

[note:foot]
[:en]
If the class member access expression is evaluated, the subexpression evaluation
happens even if the result is unnecessary to determine the value of the entire
postfix expression, for example if the [~id-expression] denotes a static member.
[:zh_CN]
如果对类成员访问表达式进行求值，则即使子表达式的结果对于确定整个后缀表达式的值
不是必要的，也会对其进行求值，例如当[~标识表达式]代表静态成员时。
[note:end]

[:en@~]
the result of that evaluation, together with the [~id-expression], determines
the result of the entire postfix expression.
[:zh_CN@~]
此求值的结果，和[~标识表达式]一起，决定了整个后缀表达式的结果。

[begin:note]
[:en]
If the keyword [`:key template] is used, the following unqualified name
is considered to refer to a template ([#temp.names]).
[:zh_CN]
如果使用了 [`:key template] 关键字，则其后的未限定名被认为指代一个模板
（[#temp.names]）。

[:en]
If a [~simple-template-id] results and is followed by a [`::],
the [~id-expression] is a [~qualified-id].
[:zh_CN]
如果结果为[~简单模板标识]且跟着一个 [`::]，则[~标识表达式]为[~限定标识]。
[end:note]

[para]
[:en]
[%type[!incomplete]]
For the first option (dot) the first expression shall be a glvalue.
[:zh_CN]
[%类型[!不完整～]]
第一种情况（点）中，第一个表达式应当为泛左值。

[:en]
For the second option (arrow) the first expression shall be a prvalue having
pointer type.
[:zh_CN]
第二种情况（箭头）中，第一个表达式应当为具有指针类型的纯右值。

[:en]
The expression [`E1->E2] is converted to the equivalent form [`(*(E1)).E2]; the
remainder of [#expr.ref] will address only the first option (dot).[#:fn#]
[:zh_CN]
表达式 [`E1->E2] 被转换为其等价形式 [`(*(E1)).E2]；[#expr.ref] 的余下部分仅仅
关注第一种情况（点）。[#:fn#]

[note:foot]
[:en]
Note that [`(*(E1))] is an lvalue.
[:zh_CN]
注意 [`(*(E1))] 是左值。
[note:end]

[para]
[:en]
Abbreviating [~postfix-expression][`.][~id-expression] as [`E1.E2], [`E1] is
called the [+object expression].
[:zh_CN]
将“[~后缀表达式][`.][~标识表达式]”简记为 [`E1.E2]，[`E1] 称为[+对象表达式]。

[:en]
If the object expression is of scalar type, [`E2] shall name the
pseudo-destructor of that same type (ignoring cv-qualifications) and [`E1.E2] is
an lvalue of type [=lq]function of () returning [`:key void][=rq].
[:zh_CN]
如果对象表达式为标量类型，则 [`E2] 应当指名相同类型（忽略 cv 限定）的伪析构函数，
且 [`E1.E2] 为类型“返回 [`:key void] 的 () 函数”的左值。

[begin:note]
[:en]
This value can only be used for a notional function call ([#expr.prim.id.dtor]).
[:zh_CN]
这个值只能用于进行概念上的函数调用（[#expr.prim.id.dtor]）。
[end:note]

[para]
[:en]
Otherwise, the object expression shall be of class type.
[:zh_CN]
否则，对象表达式应当为类类型。

[:en]
The class type shall be complete unless the class member access appears in the
definition of that class.
[:zh_CN]
除非类成员访问是出现于该类之中，否则类类型都应当是完整的。

[begin:note]
[:en]
The program is ill-formed if the result differs from that when the class is
complete ([#class.member.lookup]).
[:zh_CN]
如果结果与当类完整时的结果不同（[#class.member.lookup]），则程序非良构。
[end:note]

[begin:note]
[:en]
[#basic.lookup.qual] describes how names are looked up after the [`.] and [`->]
operators.
[:zh_CN]
[#basic.lookup.qual] 说明 [`.] 和 [`->] 运算符之后的名字如何进行查找。
[end:note]

[para]
[:en]
If [`E2] is a bit-field, [`E1.E2] is a bit-field. 
[:zh_CN]
若 [`E2] 是位字段，[`E1.E2] 就是位字段。

[:en]
The type and value category of [`E1.E2] are determined as follows.
[:zh_CN]
[`E1.E2] 的类型和值类别确定如下。

[:en]
In the remainder of [#expr.ref], [=cv cq] represents either [`:key const] or the
absence of [`:key const] and [=cv vq] represents either [`:key volatile] or the
absence of [`:key volatile].
[:zh_CN]
在 [#expr.ref] 的余下部分中，[=cv cq] 表示 [`:key const] 或没有 [`:key const]；
而 [=cv vq] 表示 [`:key volatile] 或没有 [`:key volatile]。

[:en]
[=cv] represents an arbitrary set of cv-qualifiers, as defined in
[#basic.type.qualifier].
[:zh_CN]
[=cv] 表示 cv 限定符的任意集合，正如 [#basic.type.qualifier] 中的定义。

[para]
[:en]
If [`E2] is declared to have type [=lq]reference to [`T][=rq], then [`E1.E2] is
an lvalue; the type of [`E1.E2] is [`T].
[:zh_CN]
若声明 [`E2] 的类型为“[`T] 的引用”，则 [`E1.E2] 是左值；[`E1.E2] 的类型为 [`T]。

[:en]
Otherwise, one of the following rules applies.
[:zh_CN]
否则，就采用如下规则之一。

[list]
[item]
[:en]
If [`E2] is a static data member and the type of [`E2] is [`T], then [`E1.E2] is
an lvalue; the expression designates the named member of the class.
[:zh_CN]
若 [`E2] 是静态数据成员，而 [`E2] 的类型为 [`T]，则 [`E1.E2] 是左值；该表达式
代表该类的被指名的成员。

[:en]
The type of [`E1.E2] is [`T].
[:zh_CN]
[`E1.E2] 的类型是 [`T]。

[item]
[:en]
If [`E2] is a non-static data member and the type of [`E1] is [=lq][=cv cq1 vq1]
[`X][=rq], and the type of [`E2] is [=lq][=cv cq2 vq2] [`T][=rq], the expression
designates the ocrresponding member subobject of the object designated by the
first expression.
[:zh_CN]
若 [`E2] 是非静态数据成员，而 [`E1] 的类型是“[=cv cq1 vq1] [`X]”，且 [`E2] 的
类型是“[=cv cq2 vq2] [`T]”，则该表达式代表由第一个表达式所代表的对象的对应成员
子对象。

[:en]
If [`E1] is an lvalue, then [`E1.E2] is an lvalue; otherwise [`E1.E2] is an
xvalue.
[:zh_CN]
若 [`E1] 是左值，则 [`E1.E2] 是左值；否则 [`E1.E2] 是临限值。

[:en]
Let the notation [=cv vq12] stand for the [=lq]union[=rq] of [=cv vq1] and
[=cv vq2]; that is, if [=cv vq1] or [=cv vq2] is [`volatile], then [=cv vq12] is
[`:key volatile].
[:zh_CN]
令记号 [=cv vq12] 代表 [=cv vq1] 和 [=cv vq2] 的“并”；就是说，若 [=cv vq1] 或
[=cv vq2] 是 [`volatile]，则 [=cv vq12] 是 [`:key volatile]。

[:en]
Similarly, let the notation [=cv cq12] stand for the [=lq]union[=rq] of [=cv cq1]
and [=cv cq2]; that is, if [=cv cq1] or [=cv cq2] is [`:key const], then
[=cv cq12] is [`:key const].
[:zh_CN]
相似地，令记号 [=cv cq12] 代表 [=cv cq1] 和 [=cv cq2] 的“并”；就是说，若
[=cv cq1] 或 [=cv cq2] 是 [`:key const]，则 [=cv cq12] 是 [`:key const]。

[:en]
If [`E2] is declared to be a [`:key mutable] member, then the type of [`E1.E2]
is [=lq][=cv vq12] [`T][=rq].
[:zh_CN]
若声明 [`E2] 为 [`:key mutable] 成员，则 [`E1.E2] 的类型为“[=cv vq12] [`T]”。

[:en]
If [`E2] is not declared to be a [`:key mutable] member, then the type of
[`E1.E2] is [=lq][=cv cq12] [=cv vq12] [`T][=rq].
[:zh_CN]
若 [`E2] 未被声明为 [`:key mutable] 成员，则 [`E1.E2] 的类型为
“[=cv cq12] [=cv vq12] [`T]”。

[item]
[:en]
If [`E2] is an overload set, function overload resolution ([#over.match]) is
used to select the function to which [`E2] refers.
[:zh_CN]
若 [`E2] 为重载集合，则使用函数重载决议（[#over.match]）来选择 [`E2] 所代表的
函数。

[:en]
The type of [`E1.E2] is the type of [`E2] and [`E1.E2] refers to the function
referred to by [`E2].
[:zh_CN]
[`E1.E2] 的类型为 [`E2] 的类型，且 [`E1.E2] 代表 [`E2] 所代表的函数。

[list]
[item]
[:en]
If [`E2] refers to a static member function, [`E1.E2] is an lvalue.
[:zh_CN]
若 [`E2] 代表静态成员函数，则 [`E1.E2] 是左值。

[item]
[:en]
Otherwise (when [`E1.E2] refers to a non-static member function), [`E1.E2] is a
prvalue.
[:zh_CN]
否则（[`E1.E2] 代表非静态成员函数），[`E1.E2] 是纯右值。

[:en]
The expression can be used only as the left-hand operand of a member function
call ([#class.mfct]).
[:zh_CN]
此表达式只能用作成员函数调用（[#class.mfct]）的左操作数。

[begin:note]
[:en]
Any redundant set of parentheses surrounding the expression is ignored
([#expr.prim.paren]).
[:zh_CN]
忽略包围该表达式的任何多余括号组（[#expr.prim.paren]）。
[end:note]
[list:end]

[item]
[:en]
If [`E2] is a nested type, the expression [`E1.E2] is ill-formed.
[:zh_CN]
若 [`E2] 为嵌套类型，则表达式 [`E1.E2] 非良构。

[item]
[:en]
If [`E2] is a member enumerator and the type of [`E2] is [`T], the expression
[`E1.E2] is a prvalue.
[:zh_CN]
若 [`E2] 为成员枚举符，且 [`E2] 的类型为 [`T]，则表达式 [`E1.E2] 是纯右值。

[:en]
The type of [`E1.E2] is [`T].
[:zh_CN]
[`E1.E2] 的类型为 [`T]。
[list:end]

[para]
[:en]
If [`E2] is a non-static data member or a non-static member function, the
program is ill-formed if the class of which [`E2] is directly a member is an
ambiguous base ([#class.member.lookup]) of the naming class ([#class.access.base])
of [`E2].
[:zh_CN]
若 [`E2] 为非静态数据成员或非静态成员函数，则当以 [`E2] 作为直接成员的类是指名
[`E2] 的类（[#class.access.base]）的有歧义基类（[#class.member.lookup]）时，程序
非良构。

[begin:note]
[:en]
The program is also ill-formed if the naming class is an ambiguous base of the
class type of the object expression; see [#class.access.base].
[:zh_CN]
如果所指明的类是对象表达式的类类型的一个有歧义基类，程序也是非良构的；参见
[#class.access.base]。
[end:note]
