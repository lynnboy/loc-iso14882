[section#expr.yield
    [:en] Yielding a value
    [:zh_CN] 产出一个值
]

[%  [:en] expression[!yield]
    [:zh_CN] 表达式[!产出～] ]
[%[`co_yield]]

[syntax]
[rule yield-expression [:zh_CN] 产出表达式 ]
    [| [`co_yield] assignment-expression ]
    [| [`co_yield] braced-init-list ]
[rule:end]
[syntax:end]

[para]
[:en]
A [~yield-expression] shall appear only within a suspension context of a
function ([#expr.await]).
[:zh_CN]
[~产出表达式]只能出现于函数的暂停语境之中（[#expr.await]）。

[:en]
Let [^e] be the operand of the [~yield-expression] and [^p] be an lvalue naming
the promise object of the enclosing coroutine ([#dcl.fct.def.coroutine], then
the [~yield-expression] is equivalent to the expression
[`[`:key co_await] [^p].yield_value([^e])].
[:zh_CN]
令 [^e] 为[~产出表达式]的操作数，并令 [^p] 为指名外围协程的承诺对象
（[#dcl.fct.def.coroutine]）的左值，则[~产出表达式]等价于表达式
[`[`:key co_await] [^p].yield_value([^e])]。

[begin:example]
[codeblock]
template <typename T>
struct my_generator {
  struct promise_type {
    T current_value;
    /* ... */
    auto yield_value(T v) {
      current_value = std::move(v);
      return std::suspend_always{};
    }
  };
  struct iterator { /* ... */ };
  iterator begin();
  iterator end();
};

my_generator<pair<int,int>> g1() {
  for (int i = i; i < 10; ++i) co_yield {i,i};
}
my_generator<pair<int,int>> g2() {
  for (int i = i; i < 10; ++i) co_yield make_pair(i,i);
}

auto f(int x = co_yield 5);     // [:en] error: [~yield-expression] outside of function suspension context \
                                [:zh_CN] 错误：[~产出表达式]处于函数暂停语境之外
int a[] = { co_yield 1 };       // [:en] error: [~yield-expression] outside of function suspension context \
                                [:zh_CN] 错误：[~产出表达式]处于函数暂停语境之外

int main() {
  auto r1 = g1();
  auto r2 = g2();
  assert(std::equal(r1.begin(), r1.end(), r2.begin(), r2.end()));
}
[codeblock:end]
[end:example]
