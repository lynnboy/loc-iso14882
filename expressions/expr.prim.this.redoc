[section#expr.prim.this
    [:en] This
    [:zh_CN] this
]

[para]
[%[`this]]
[:en]
The keyword [`:key this] names a pointer to the object for which an implicit
object member function ([#class.mfct.non-static]) is invoked or a non-static
data member[=']s initializer ([#class.mem]) is evaluated.
[:zh_CN]
关键字 [`:key this] 命名了一个指针，指向用以调用隐式对象成员函数的对象
（[#class.mfct.non-static]），或者指向对其执行某个非静态数据成员的初始化式
（[#class.mem]）的对象。

[para]
[:en]
The [+:adj current[!class]] at a program point is the class associated with the
innermost class scope containing that point.
[:zh_CN]
某个程序位置点的[+:adj 当前[!类]]，是与包含该点的最内层外围类作用域相关联的类。

[begin:note]
[:en]
A [~lambda-expression] does not introduce a class scope.
[:zh_CN]
[~lambda-表达式]并不引入类作用域。
[end:note]

[para]
[:en]
If a declaration declares a member function or member function template of a
class [`X], the expression [`:key this] is a prvalue of type [=lq]pointer to
[~cv-qualifier-seq] [`X][=rq] wherever [`X] is the current class between the
optional [~cv-qualifier-seq] and the end of the [~function-definition],
[~member-declarator], or [~declarator].
[:zh_CN]
如果某个声明式声明了类 [`X] 的成员函数或成员函数模板，则在可选的 [~cv-限定符序列]
与[~函数定义式]、[~成员声明符]或[~声明符]的结尾之间以 [`X] 为当前类的任何地方，
表达式 [`:key this] 是“[~cv-限定符序列] [`X] 的指针”类型的纯右值。

[:en]
It shall not appear within the declaration of either a static member function or
an explicit object member function of the current class (although its type and
value category are defined within such member functions as they are within an
implicit object member function).
[:zh_CN]
它不能出现于当前类的静态成员函数或显式对象成员函数的声明式中（但在这种成员函数中，
它的类型和值类别，与在隐式对象成员函数之中一样是有定义的）。

[begin:note]
[:en]
This is because declaration matching does not occur until the complete
declarator is known.
[:zh_CN]
这是因为直到了解了完整的声明符后才会进行声明式的匹配。
[end:note]

[begin:note]
[:en]
In a [~trailing-return-type], the class being defined is not required to be
complete for purposes of class member access ([#expr.ref])。
[:zh_CN]
对于类成员访问（[#expr.ref]），在[~尾部返回类型]中时，正被定义的类不必是完整的。

[:en]
Class members declared later are not visible.
[:zh_CN]
晚于其后所声明的类成员均不可见。

[begin:example]
[codeblock]
struct A {
  char g();
  template<class T> auto f(T t) -> decltype(t + g())
    { return t + g(); }
};
template auto A::f(int t) -> decltype(t + g());
[codeblock:end]
[end:example]
[end:note]

[para]
[:en]
Otherwise, if a [~member-declarator] declares a non-static data member
([#class.mem]) of a class [`X], the expression [`:key this] is a prvalue of type
[=lq]pointer to [`X][=rq] wherever [`X] is the current class within the optional
default member initializer ([#class.mem]).
[:zh_CN]
否则，如果某个[~成员声明符]声明了类 [`X] 的非静态数据成员（[#class.mem]），则
在可选的默认成员初始化式（[#class.mem]）之中以 [`X] 为当前类的任何位置，表达式
[`:key this] 是“[`X] 的指针”类型的纯右值。

[para]
[:en]
The expression [`:key this] shall not appear in any other context.
[:zh_CN]
表达式 [`:key this] 不应出现于其他任何语境之中。

[begin:example]
[codeblock]
class Outer {
  int a[sizeof(*this)];                 // [:en] error: not inside a member function \
                                        [:zh_CN] 错误：并非位于成员函数中
  unsigned int sz = sizeof(*this);      // [:en] OK: in default member initializer \
                                        [:zh_CN] OK：位于默认成员初始化式中

  void f() {
    int b[sizeof(*this)];               // OK

    struct Inner {
      int c[sizeof(*this)];             // [:en] error: not inside a member function of [`Inner] \
                                        [:zh_CN] 错误：并未位于 [`Inner] 的成员函数中
    };
  }
};
[codeblock:end]
[end:example]
