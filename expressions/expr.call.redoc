[section#expr.call
    [:en] Function call
    [:zh_CN] 函数调用
]

[para]
[:en] [%expression[!function call]] [%operator[!function call]] [%[`()][%operator [!function call]]]
A function call is a postfix expression followed by parentheses containing a
possibly empty, comma-separated list of [~initializer-clause]s which constitute
the arguments to the function.
[:zh_CN] [%表达式[!函数调用～]] [%运算符[!函数调用～]] [%[`()][%运算符 [!函数调用～]]]
函数调用是后缀表达式后面跟着括号，其中包含可能为空的，用逗号分隔的
[~初始化式子句]的列表，以构成传给函数的实参。

[begin:note]
[:en] If the postfix expression is a function or member function name, the
appropriate function and the validity of the call are determined according to
the rules in [#over.match].
[:zh_CN] 如果后缀表达式是函数或成员函数名，则根据 [#over.match] 中的规则来确定
适当的函数以及调用的有效性。
[end:note]

[:en] The postfix expression shall have function type or function pointer type.
[:zh_CN] 该后缀表达式应当具有函数类型或函数指针类型。

[:en] For a call to a non-member function or to a static member function, the
postfix expression shall be either an lvalue that refers to a function (in which
case the function-to-pointer standard conversion ([#conv.func]) is suppressed on
the postfix expression), or a prvalue of function pointer type.
[:zh_CN] 对于非成员函数或静态成员函数的调用，其后缀表达式要么是指代函数的左值（这种
情况下抑制了该后缀表达式上的函数向指针标准转换（[#conv.func]）），要么为函数指针类型的纯右值。

[para]
[:en] If the selected function is non-virtual, or if the [~id-expression] in the
class member access expression is a [~qualified-id], that function is called.
[:zh_CN] 如果所选择的函数是非虚的，或者如果类成员访问表达式中的[~标识表达式]是个
[~限定标识]，则调用该函数。

[:en] Otherwise, its final overrider ([#class.virtual]) in the dynamic type of
the object expression is called; such a call is referred to as a
[+virtual function call[%function[!virtual function call]]].
[:zh_CN] 否则，调用它在对象表达式的动态类型中的最终覆盖函数（[#class.virtual]）；
这种调用被称为[+虚函数调用[%函数[!虚函数调用]]]。

[begin:note]
[:en] The dynamic type is the type of the object referred to by the current
value of the object expression.
[:zh_CN] 动态类型是由该对象表达式的当前值所代表的对象的类型。

[:en] [#class.cdtor] describes the behavior of virtual function calls when the
object expression refers to an object under construction or destruction.
[:zh_CN] [#class.cdtor] 说明当对象表达式指代处于构造或析构之中的对象时进行虚函数调用的行为。
[end:note]

[para]
[begin:note]
[:en] If a function or member function name is used, and name lookup ([#basic.lookup])
does not find a declaration of that name, the program is ill-formed.
[:zh_CN] 若使用了某函数或成员函数的名字，而名字查找（[#basic.lookup]）并未找到
该名字的声明式，则程序非良构。

[:en] No function is implicitly declared by such a call.
[:zh_CN] 此种调用不会隐式声明函数。
[end:note]

[para]
[:en] If the [~postfix-expression] names a destructor or pseudo-destructor
([#expr.prim.id.dtor]), the type of the function call expression is [`:key void];
otherwise, the type of the function call expression is the return type of the
statically chosen function (i.e., ignoring the [`:key virtual] keyword), even if
the type of the function actually called is different.
[:zh_CN] 若[~后缀表达式]指名的是析构函数或伪析构函数（[#expr.prim.id.dtor]），则
函数调用表达式的类型是 [`:key void]；否则，函数调用表达式的类型是其静态地（即忽略
[`:key virtual] 关键词）选取的函数的返回类型，而不管实际调用的函数的类型是否有所不同。

[:en][%type[!incomplete]]
[:zh_CN][%类型[!不完整～]]

[:en] If the [~postfix-expression] names a pseudo-destructor (in which case the
[~postfix-expression] is a possibly-parenthesized class member access), the
function call destroys the object of scalar type denoted by the object
expression of the class member access ([#expr.ref], [#basic.life]).
[:zh_CN] 若[~后缀表达式]指名的是伪析构函数（这种情况下该[~后缀表达式]为可能带有括号的
类成员访问），则函数调用销毁由类成员访问的对象表达式所代表的标量类型的对象（[#expr.ref]，[#basic.life]）。

[para]
[:en] A type [$[`T]_\text{call}] is [+call-compatible] with a function type
[$[`T]_\text{func}] if [$[`T]_\text{call}] is the same type as [$[`T]_\text{func}]
or if the type [=lq]pointer to [$[`T]_\text{func}][=rq] can be converted to type
[=lq]pointer to [$[`T]_\text{call}][=rq] via a function pointer conversion ([#conv.fctptr]).
[:zh_CN] 如果类型 [$[`T]_\text{call}] 与函数类型 [$[`T]_\text{func}] 是同一类型，
或者如果类型“[$[`T]_\text{func}] 的指针”可以通过函数指针转换（[#conv.fctptr]）
转换为类型“[$[`T]_\text{call}] 的指针”，则类型 [$[`T]_\text{call}] 与函数类型
[$[`T]_\text{func}] [+调用兼容]。

[:en] Calling a function through an expression whose function type is not
call-compatible with the type of the called function[=']s definition results in
undefined behavior.
[:zh_CN] 通过具有与被调用函数的定义式的类型并非调用兼容的类型的表达式调用函数，
将导致未定义行为。

[begin:note]
[:en] This requirement allows the case when the expression has the type of a
potentially-throwing function, but the called function has a non-throwing
exception specification, and the function types are otherwise the same.
[:zh_CN] 这项规定允许当表达式具有潜在抛出函数的类型，但被调用函数具有无抛出
异常说明，而函数类型中其余均相同的情况。
[end:note]

[para]
[:en] [%function argument[%argument]] [%function parameter[%parameter]] [%initialization[!parameter]]
When a function is called, each parameter ([#dcl.fct]) is initialized
([#dcl.init], [#class.copy.ctor]) with its corresponding argument, and each
precondition assertion of the function is evaluated ([#dcl.contract.func]).
[:zh_CN] [%函数实参[%实参]] [%函数形参[%形参]] [%初始化[!形参的～]]
当调用函数时，每个形参（[#dcl.fct]）都由其所对应的实参来初始化（[#dcl.init]，[#class.copy.ctor]）,
并评估函数的每条前条件断言（[#dcl.contract.func]）。

[:en] If the function is an explicit object member function and there is an
implied object argument ([#over.call.func]), the list of provided arguments is
preceded by the implied object argument for the purposes of this correspondence.
[:zh_CN] 如果函数为显式对象成员函数且纯正隐含对象实参（[#over.call.func]），则对于
此种对应关系，所提供的实参列表前添加隐含对象实参。

[:en] If there is no corresponding argument, the default argument for the parameter is used.
[:zh_CN] 如果没有对应的实参，则使用该形参的默认实参。

[begin:example]
[codeblock]
template<typename ...T> int f(int n = 0, T ...t);
int x = f<int>();               // [:en] error: no argument for second function parameter \
                                [:zh_CN] 错误：没有为第二个函数形参提供实参
[codeblock:end]
[end:example]

[:en] If the function is an implicit object member function, the object
expression of the class member access shall be a glvalue and the implicit object
parameter of the function ([#over.match.funcs]) is initialized with that glvalue,
converted as if by an explicit type conversion ([#expr.cast]).
[:zh_CN] 如果该函数是隐式对象成员函数，则类成员访问的对象表达式应当是泛左值，且函数的
隐式对象形参（[#over.match.funcs]）由此泛左值初始化，并如同进行了显式类型转换（[#expr.cast]）。

[begin:note]
[:en] There is no access or ambiguity checking on this conversion; the access
checking and disambiguation are done as part of the (possibly implicit) class
member access operator.
[:zh_CN] 此转换并不进行访问或歧义检查；访问检查和歧义消解是作为（可能隐式的）
类成员访问运算符的一部分完成的。

[:en] See [#class.member.lookup], [#class.access.base], and [#expr.ref].
[:zh_CN] 参见 [#class.member.lookup]，[#class.access.base] 和 [#expr.ref]。
[end:note]

[:en] When a function is called, the type of any parameter shall not be a class
type that is either incomplete or abstract.
[:zh_CN] 当调用函数时，任何形参的类型都不能是不完整或抽象的类类型。

[begin:note]
[:en] This still allows a parameter to be a pointer or reference to such a type.
[:zh_CN] 仍然允许形参是指向这样的类型的指针或引用。

[:en] However, it prevents a passed-by-value parameter to have an incomplete or
abstract class type.
[:zh_CN] 不过，这防止了按值传递的形参具有不完整或抽象的类类型。
[end:note]

[:en] It is [?impldef whether a parameter is destroyed when the function exits
or at the end of the enclosing full-expression] whether a parameter is destroyed
when the function in which it is defined exits ([#stmt.return], [#except.ctor], [#expr.await])
or at the end of the enclosing full-expression; parameters are always destroyed
in the reverse order of their construction.
[:zh_CN] 形参销毁于定义它的函数退出（[#stmt.return]，[#except.ctor]，[#expr.await]）
之时还是其外围全表达式结束之时，是[?impldef 形参销毁于函数退出之时还是其外围全表达式结束之时]；
总是以形参构造的相反顺序销毁它们。

[:en] The initialization and destruction of each parameter occurs within the
context of the full-expression ([#intro.execution]) where the function call appears.
[:zh_CN] 每个形参的初始化和销毁都在函数调用所在的全表达式（[#intro.execution]）的语境之中进行。

[begin:example]
[:en] The access ([#class.access.general]) of the constructor, conversion
functions or destructor is checked at the point of call.
[:zh_CN] 对构造函数、转换函数或析构函数的访问检查（[#class.access.general]），
是在调用点处进行的。

[:en] If a constructor or destructor for a function parameter throws an
exception, any [~function-try-block] ([#except.pre]) of the called function with
a handler that can handle the exception is not considered.
[:zh_CN] 若某个函数形参的构造函数或析构函数抛出异常，则并不会考虑被调函数中带有
能够处理该异常的处理器的任何[~函数-try-块]（[#except.pre]）。
[end:example]

[para]
[:en]
[%evaluation[!order of argument]]
[%evaluation[!unspecified order of function call]]
[%evaluation[!unspecified order of argument]]
The [~postfix-expression] is sequenced before each [~expression] in the
[~expression-list] and any default argument.
[:zh_CN]
[%求值[!实参的～顺序]]
[%求值[!未指明的函数调用的～顺序]]
[%求值[!未指明的实参的～顺序]]
[~后缀表达式]按顺序早于[~表达式列表]中的每个[~表达式]和任何默认实参。

[:en] The initialization of a parameter or, if the implementation introduces any
temporary objects to hold the values of function parameters ([#class.temporary]),
the initialization of those temporaries, including every associated value
computation and side effect, is indeterminately sequenced with respect to that
of any other parameter.
[:zh_CN] 一个形参的初始化，或者如果实现引入了任何临时对象来保持函数形参的值
（[#class.temporary]），则这些临时对象的初始化，包括其所关联的任何值计算和副作用，
与任何其他形参的初始化之间是未定顺序的。

[:en] These evaluations are sequenced before the evaluation of the precondition
assertions of the function, which are evaluated in sequence ([#dcl.contract.func]).
[:zh_CN] 这些求值按顺序早于函数的前条件断言的评估，这些断言是按顺序求值的（[#dcl.contract.func]）。

[:en] For any temporaries introduced to hold the values of function parameters,
the initialization of the parameter objects from those temporaries
is indeterminately sequenced with respect to
the evaluation of each precondition assertion.
[:zh_CN] 对于为保持函数形参的值引入的任何临时对象，从这些临时对象初始化形参对象
与每个前条件断言的评估之间是未定顺序的。

[begin:note]
[:en] All side effects of argument evaluations are sequenced before the function
is entered (see [#intro.execution]).
[:zh_CN] 实参求值的所有副作用都按顺序早于函数的进入（参见 [#intro.execution]）。
[end:note]

[begin:example]
[codeblock]
void f() {
  std::string s = "but I have heard it works even if you don't believe in it";
  s.replace(0, 4, "").replace(s.find("even"), 4, "only").replace(s.find(" don't"), 6, "");
  assert(s == "I have heard it works only if you believe in it");       // OK
}
[codeblock:end]
[end:example]

[begin:note]
[:en] If an operator function is invoked using operator notation, argument
evaluation is sequenced as specified for the built-in operator; see [#over.match.oper].
[:zh_CN] 当使用运算符写法调用运算符函数时，实参的求值根据内建运算符所指定的顺序进行；
参见 [#over.match.oper]。
[end:note]

[begin:example]
[codeblock]
struct S {
  S(int);
};
int operator<<(S, int);
int i, j;
int x = S(i=1) << (i=2);
int y = operator<<(S(j=1), j=2);
[codeblock:end]

[:en] After performing the initializations, the value of [`i] is 2 (see [#expr.shift]),
but it is unspecified whether the value of [`j] is 1 or 2.
[:zh_CN] 初始化实施之后，[`i] 的值为 2（参见 [#expr.shift]），但 [`j] 的值是 1
还是 2 则是未指明的。
[end:example]

[para]
[:en] The result of a function call is the result of the possibly-converted
operand of the [`:key return] statement ([#stmt.return]) that transferred control
out of the called function (if any), except in a virtual function call if the
return type of the final overrider is different from the return type of the
statically chosen function, the value returned from the final overrider is
converted to the return type of the statically chosen function.
[:zh_CN] 函数调用的结果是将控制从被调函数中转移出来的 [`:key return] 语句（[#stmt.return]）
的可能经转换的操作数的结果，此外在虚函数调用中，当最终覆盖函数的返回类型与静态
选取的函数的返回类型不同时，从最终覆盖函数返回的值要转换为静态选取的函数的返回类型。

[para]
[:en] When the called function exits normally ([#stmt.return], [#expr.await]),
all postcondition assertions of the function are evaluated in sequence ([#dcl.contract.func]).
[:zh_CN] 当被调函数正常退出（[#stmt.return]，[#expr.await]）时，按顺序评估函数的
所有后条件断言（[#dcl.contract.func]）。

[:en] If the implementation introduces any temporary objects to hold the result
value as specified in [#class.temporary], the evaluation of each postcondition
assertion is indeterminately sequenced with respect to the initialization of any
of those temporaries or the result object.
[:zh_CN] 如果实现按 [#class.temporary] 所指定引入了任何临时对象来保持结果值，
则每个后条件断言的评估与这些临时对象或结果对象的初始化之间是未定顺序的。

[:en] These evaluations, in turn, are sequenced before
the destruction of any function parameters.
[:zh_CN] 进而，这些评估按顺序早于任何函数形参的析构。

[para]
[begin:note]
[:en]
[%type checking[!argument]] [%function call] [%argument passing]
[%value[!call by]] [%reference[!call by]] [%argument[!reference]]
A function can change the values of its non-const parameters, but these changes
cannot affect the values of the arguments except where a parameter is of a
reference type ([#dcl.ref]); if the reference is to a const-qualified type,
[`:key const_cast] needs to be used to cast away the constness in order to
modify the argument[=']s value.
[:zh_CN]
[%类型检查[!实参]] [%函数调用] [%实参传递]
[%值[!按～调用]] [%引用[!按～调用]] [%实参[!引用～]]
函数可以改变其非 const 形参的值，但除非形参为引用类型（[#dcl.ref]），否则这些
改变无法影响实参的值；若此引用指代了被 const 限定的类型，则需要用
[`:key const_cast] 强制移除其常量性才能改变实参的值。

[:en] Where a parameter is of [`:key const] reference type a temporary object is
introduced if needed ([#dcl.type], [#lex.literal], [#lex.string], [#dcl.array], [#class.temporary]).
[:zh_CN] 当形参是 [`:key const] 引用类型时，根据需要会引入一个临时对象（[#dcl.type]，
[#lex.literal]，[#lex.string]，[#dcl.array]，[#class.temporary]）。

[:en] In addition, it is possible to modify the values of non-constant objects
through pointer parameters.
[:zh_CN] 另外，通过指针形参改动非常量对象的值也是可行的。
[end:note]

[para]
[:en] [%declaration[!ellipsis in function]] [%parameter list[!variable]]
A function can be declared to accept fewer arguments (by declaring default
arguments ([#dcl.fct.default])) or more arguments (by using the ellipsis, [`...],
or a function parameter pack ([#dcl.fct])) than the number of parameters in the
function definition ([#dcl.fct.def]).
[:zh_CN] [%声明式[!函数～中的省略号]] [%形参列表[!可变的～]]
可以将函数声明为接受比在函数定义式（[#dcl.fct.def]）中的形参数量更少的实参（通过
声明默认实参（[#dcl.fct.default]））或更多的实参（通过使用省略号 [`...]，或者
函数形参包组（[#dcl.fct]））。

[begin:note]
[:en] This implies that, except where the ellipsis ([`...]) or a function
parameter pack is used, a parameter is available for each argument.
[:zh_CN] 这意味着，除了使用省略号（[`...]）或函数形参包组的情况外，每个实参对应一个形参。
[end:note]

[para]
[:en] [%ellipsis[!conversion sequence]]
When there is no parameter for a given argument, the argument is passed in such
a way that the receiving function can obtain the value of the argument by
invoking [`:m va_arg] ([#support.runtime]).
[:zh_CN] [%省略号[!～转换序列]]
当给定实参没有对应的形参时，该实参的传递方式为，接受它的函数可通过调用 [`:m va_arg]
（[#support.runtime]）来获取该实参的值。

[begin:note]
[:en] This paragraph does not apply to arguments passed to a function parameter pack.
[:zh_CN] 本段并不适用于向函数形参包组所传递的实参。

[:en] Function parameter packs are expanded during template instantiation
([#temp.variadic]), thus each such argument has a corresponding parameter when a
function template specialization is actually called.
[:zh_CN] 函数形参包组在模板实例化中进行了展开（[#temp.variadic]），因而当实际调用一个
函数模板的特例时，每个这种实参均有一个与其对应的形参。
[end:note]

[:en] The lvalue-to-rvalue ([#conv.lval]), array-to-pointer ([#conv.array]), and
function-to-pointer ([#conv.func]) standard conversions are performed on the
argument expression.
[:zh_CN] 对实参实施左值向右值（[#conv.lval]）、数组向指针（[#conv.array]）和
函数向指针（[#conv.func]）标准转换。

[:en] An argument that has type [=cv] [`std::nullptr_t] is converted to type
[`[`:key void]*] ([#conv.ptr]).
[:zh_CN] [=cv] [`std::nullptr_t] 类型的实参被转换为 [`[`:key void]*] 类型（[#conv.ptr]）。

[:en] After these conversions, if the argument does not have arithmetic,
enumeration, pointer, pointer-to-member, or class type, the program is ill-formed.
[:zh_CN] 经这些转换之后，若该实参不具有算术、枚举、指针、成员指针或类类型，则程序非良构。

[:en] Passing a potentially-evaluated argument of a scoped enumeration type
([#dcl.enum]) or of a class type ([#class]) having an eligible non-trivial copy
constructor ([#special], [#class.copy.ctor]), an eligible non-trivial move
constructor, or a non-trivial destructor ([#class.dtor]),
with no corresponding parameter, is conditionally-supported with [?impldef
passing argument of class type through ellipsis] semantics.
[:zh_CN] 对潜在求值的带有合格的非平凡复制构造函数（[#special], [#class.copy.ctor]），
合格的非平凡移动构造函数，或非平凡析构函数（[#class.dtor]）的有作用域枚举类型
（[#dcl.enum]）或者类类型（[#class]）的实参，进行没有对应形参的传递，是有条件
支持的，并具有[?impldef 通过省略号传递类类型的实参]语义。

[:en] If the argument has integral or enumeration type that is subject to the
integral promotions ([#conv.prom]), or a floating-point type that is subject to
the floating-point promotion ([#conv.fpprom]), the value of the argument is
converted to the promoted type before the call.
[:zh_CN] 若实参具有符合整型提升（[#conv.prom]）的整型或枚举类型，或符合浮点提升
（[#conv.fpprom]）的浮点类型，则实参的值就在进行调用之前转换为所提升的类型。

[:en] These promotions are referred to as the [+default argument promotions
[%promotion[!default argument promotion]]].
[:zh_CN] 这些提升被称为[+默认实参提升[%提升[!默认实参提升]]]。

[para]
[:en] [%function call[!recursive]]
Recursive calls are permitted, except to the [`main] function ([#basic.start.main]).
[:zh_CN] [%函数调用[!递归～]]
除了 [`main] 函数（[#basic.start.main]）之外，允许函数的递归调用。

[para]
[:en] A function call is an lvalue if the result type is an lvalue reference
type or an rvalue reference to function type, an xvalue if the result type is an
rvalue reference to object type, and a prvalue otherwise.
[:zh_CN] 若函数的结果类型是左值引用类型或指代函数的右值引用类型，函数调用是左值，
若其结果类型是指代对象的右值引用类型，则它是临限值，否则就是纯右值。

[:en] If it is a non-void prvalue, the type of the function call expression
shall be complete, except as specified in [#dcl.type.decltype].
[:zh_CN] 除了 [#dcl.type.decltype] 中规定之外，如果结果为非 void 的纯右值，
则函数调用表达式的类型应当是完整的。
