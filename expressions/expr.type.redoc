[section#expr.type
    [:en] Type
    [:zh_CN] 类型
]

[para]
[:en]
[%expression[!reference]]
If an expression initially has the type ["reference to [`T]] ([#dcl.ref],
[#dcl.init.ref]), the type is adjusted to [`T] prior to any further analysis.
[:zh_CN]
[%表达式[!引用～]]
如果某表达式起初具有类型“[`T] 的引用”（[#dcl.ref]，[#dcl.init.ref]），则该类型在
进行任何进一步分析之前被调整为 [`T]。

[:en]
The expression designates the object or function denoted by the reference, and
the expression is an lvalue or an xvalue, depending on the expression.
[:zh_CN]
该表达式代表由此引用所指代的对象或函数，且该表达式是一个左值或一个临限值（依赖于
表达式）。

[begin:note]
[:en]
Before the lifetime of the reference has started or after it has ended,
the behavior is undefined (see [#basic.life]).
[:zh_CN]
在引用的生存期开始之前或结束之后，其行为是未定义的（参见 [#basic.life]）。
[end:note]

[para]
[:en]
If a prvalue initially has the type ["[$cv] [`T]], where [`T] is a
cv-unqualified non-class, non-array type, the type of the expression is adjusted
to [`T] prior to any further analysis.
[:zh_CN]
如果纯右值起初具有类型“[$cv] [`T]”，其中 [`T] 为 cv 未限定的非类非数组类型，则
表达式的类型在进行任何进一步分析之前被调整为 [`T]。

[para]
[:en]
[%pointer[!composite pointer type]]
The [+composite pointer type] of two operands [`p1] and [`p2] having types [`T1]
and [`T2], respectively, where at least one is a pointer or pointer-to-member
type or [`std::nullptr_t], is:
[:zh_CN]
[%指针[!组合指针类型]]
两个分别具有类型 [`T1] 和 [`T2]（其中至少一个是指针或成员指针类型或者
[`std::nullptr_t]）的操作数 [`p1] 和 [`p2] 的[+组合指针类型]是：

[list]
[item]
[:en]
if both [`p1] and [`p2] are null pointer constants, [`std::nullptr_t];
[:zh_CN]
当 [`p1] 和 [`p2] 都是空指针常量时，为 [`std::nullptr_t]；

[item]
[:en]
if either [`p1] or [`p2] is a null pointer constant, [`T2] or [`T1],
respectively;
[:zh_CN]
当 [`p1] 或 [`p2] 是空指针常量时，分别是 [`T2] 或 [`T1]；

[item]
[:en]
if [`T1] or [`T2] is ["pointer to [$cv1] [`void]] and the other type is
["pointer to [$cv2] [`T]], where [`T] is an object type or [`void], ["pointer to
[$cv12] [`void]], where [$cv12] is the union of [$cv1] and [$cv2];
[:zh_CN]
当 [`T1] 或 [`T2] 是 “[$cv1] [`void] 指针”且另一个类型为“[$cv2] [`T] 的指针”
（其中 [`T] 为对象类型或 [`void]）时，为“[$cv12] [`void] 指针”，其中 [$cv12] 为
[$cv1] 和 [$cv2] 的并集；

[item]
[:en]
if [`T1] or [`T2] is ["pointer to [`noexcept] function] and the other type is
["pointer to function], where the function types are otherwise the same,
["pointer to function];
[:zh_CN]
当 [`T1] 或 [`T2] 是 “[`noexcept] 函数的指针”且另一个类型为“函数的指针”时，其中
的函数类型除此之外都相同，则为“函数的指针”；

[item]
[:en]
if [`T1] is ["pointer to [$cv1] [`C1]] and [`T2] is ["pointer to [$cv2] [`C2]],
where [`C1] is reference-related to [`C2] or [`C2] is reference-related to [`C1]
([#dcl.init.ref]), the cv-combined type of [`T1] and [`T2] or the cv-combined
type of [`T2] and [`T1], respectively;
[:zh_CN]
当 [`T1] 是“[$cv1] [`C1] 的指针”且 [`T2] 是“[$cv2] [`C2] 的指针”，其中 [`C1] 与
[`C2] 引用相关或者 [`C2] 与 [`C1] 引用相关（[#dcl.init.ref]）时，分别为 [`T1] 和
[`T2] 的 cv 合并类型或者 [`T2] 与 [`T1] 的 cv 合并类型；

[item]
[:en]
if [`T1] or [`T2] is ["pointer to member of [`C1] of type function], the other
type is ["pointer to member of [`C2] of type [`noexcept] function], and [`C1] is
reference-related to [`C1] or [`C2] is reference-related to [`C1]
([#dcl.init.ref]), where the function types are otherwise the same, ["pointer to
member of [`C2] of type function] or ["pointer to member of [`C1] of type
function], respectively;
[:zh_CN]
当 [`T1] 或 [`T2] 为“函数类型的 [`C1] 的成员指针”，另一个类型为“[`noexcept] 函数
类型的 [`C2] 的成员指针”，并且 [`C1] 与 [`C2] 引用相关或者 [`C2] 与 [`C1]
引用相关（[#dcl.init.ref]），其中的函数类型除此之外相同时，分别为“函数类型的
[`C2] 的成员指针”或者“函数类型的 [`C1] 的成员指针”。

[item]
[:en]
if [`T1] is ["pointer to member of [`C1] of type [$cv1] [`U]] and [`T2] is
["pointer to member of [`C2] of type [$cv2] [`U]], for some non-function type
[`U], where [`C1] is reference-related to [`C2] or [`C2] is reference-related
to [`C1] ([#dcl.init.ref]), the cv-combined type of [`T2] and [`T1] or the
cv-combined type of [`T1] and [`T2], respectively;
[:zh_CN]
当对于某个非函数类型 [`U]，[`T1] 是“[$cv1] [`U] 类型的 [`C1] 的成员指针”且 [`T2]
是“[$cv2] [`U] 类型的 [`C2] 的成员指针”，其中 [`C1] 与 [`C2] 引用相关或者 [`C2]
与 [`C1] 引用相关（[#dcl.init.ref]）时，分别为 [`T2] 和 [`T1] 的 cv 合并类型或者
[`T1] 与 [`T2] 的 cv 合并类型；

[item]
[:en]
if [`T1] and [`T2] are similar types ([#conv.qual]), the cv-combined type of
[`T1] and [`T2];
[:zh_CN]
当 [`T1] 和 [`T2] 是相似类型（[#conv.qual]）时，则为 [`T1] 和 [`T2] 的 cv 合并
类型；

[item]
[:en]
otherwise, a program that necessitates the determination of a composite pointer
type is ill-formed.
[:zh_CN]
否则，需要确定其组合指针类型的程序是非良构的。
[list:end]

[begin:example]
[codeblock]
typedef void *p;
typedef const int *q;
typedef int **pi;
typedef const int **pci;
[codeblock:end]

[:en]
The composite pointer type of [`p] and [`q] is ["pointer to [`const void]]; the
composite pointer type of [`pi] and [`pci] is ["pointer to [`const] pointer to
[`const int]].
[:zh_CN]
[`p] 和 [`q] 的组合指针类型为“[`const void] 的指针”；[`pi] 和 [`pci] 的组合指针
类型为“[`const int] 的 [`const] 指针的指针”。
[end:example]
