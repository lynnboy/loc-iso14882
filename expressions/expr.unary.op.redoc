[section#expr.unary.op
    [:en] Unary operators
    [:zh_CN] 一元运算符
]

[para]
[:en] [%expression[!unary operator]] [%operator[!unary]]
The unary [`*] operator performs [+indirection].
[:zh_CN] [%表达式[!一元运算符～]] [%运算符[!一元～]]
一元 [`*] 运算符实施[+间接]。

[:en] [%dereferencing[%indirection]]
Its operand shall be a prvalue of type [=lq]pointer to [`T][=rq], where [`T] is
an object or function type.
[:zh_CN] [%解引用[%间接]]
其操作数应当为“[`T] 的指针”类型的纯右值，其中 [`T] 为对象或函数类型。

[:en] The operator yields an lvalue of type [`T].
[:zh_CN] 运算符产生 [`T] 类型的左值。

[:en] If the operand points to an object or function, the result denotes that object
or function; otherwise, the behavior is undefined except as specified in [#expr.typeid].
[:zh_CN] 如果操作数指向某个对象或函数，则其结果指代该对象或函数；否则，除了
[#expr.typeid] 中规定之外，其行为未定义。

[begin:note]
[:en] Indirection through a pointer to an out-of-lifetime object is valid ([#basic.life]).
[:zh_CN] 通过指向生命期外对象进行间接是无效的（[#basic.life]）。
[end:note]

[begin:note]
[:en] [%type[!incomplete]]
Indirection through a pointer to an incomplete type (other than
[=cv] [`:key void]) is valid.
[:zh_CN] [%类型[!不完整～]]
可以通过指向不完整类型（除了 [=cv] [`:key void]）的指针进行间接。

[:en] The lvalue thus obtained can be used in limited ways (to initialize a reference,
for example); this lvalue must not be converted to a prvalue, see [#conv.lval].
[:zh_CN] 所获得的左值可以被以有限的方式使用（如用以初始化引用）；此左值不能转换为纯右值，见 [#conv.lval]。
[end:note]

[para]
[:en] Each of the following unary operators yields a prvalue.
[:zh_CN] 下述每种一元运算符的均产生纯右值。

[para]
[:en] [%name[!address of cv-qualified]] [%expression[!pointer-to-member constant]]
The operand of the unary [`&] operator shall be an lvalue of some type [`T].
[:zh_CN] [%名字[!cv 限定的～的地址]] [%表达式[!成员指针常量～]]
一元 [`&] 运算符的操作数应当为某个类型 [`T] 的左值。

[list]
[item]
[:en] If the operand is a [~qualified-id] or [~splice-expression] designating
a non-static member [`m], other than an explicit object member function,
[`m] shall be a direct member of some class [`C] that is not an anonymous union.
[:zh_CN] 若其操作数是指名了某个类 [`C] 的除显式对象成员函数以外的非静态成员 [`m]
的[~限定标识]或[~拼接表达式]，则 [`m] 应当是某个并非匿名联合体的类 [`C] 的直接成员。

[:en] The result has type [=lq]pointer to member of class [`C] of type [`T][=rq]
and designates [`C::m].
[:zh_CN] 其结果的类型为“[`T] 类型的 [`C] 的成员指针”，且代表 [`C::m]。

[begin:note]
[:en] A [~qualified-id] that names a member of a namespace-scope anonymous union
is considered to be a class member access expression ([#expr.prim.id.general])
and cannot be used to form a pointer to member.
[:zh_CN] 指名命名空间作用域的匿名联合体的成员的[~限定标识]，被当做类成员访问表达式（[#expr.prim.id.general]），
且不能用于构成成员指针。
[end:note]

[item]
[:en] Otherwise, the result has type [=lq]pointer to [`T][=rq] and points to the
designated object ([#intro.memory]) or function ([#basic.compound]).
[:zh_CN] 否则，结果的类型为“[`T] 的指针”，并指向其所代表的对象（[#intro.memory]）
或函数（[#basic.compound]）。

[:en] If the operand designates an explicit object member function ([#dcl.fct]),
the operand shall be a [~qualified-id] or a [~splice-expression].
[:zh_CN] 如果操作数指名的是某个显式对象成员函数（[#dcl.fct]），则操作数应当为
[~限定标识]或者[~拼接表达式]。

[begin:note]
[:en] In particular, taking the address of a variable of type [=lq][=cv] [`T][=rq]
yields a pointer of type [=lq]pointer to [=cv] [`T][=rq].
[:zh_CN] 特别是，取“[=cv] [`T]”类型的变量的地址，得到的是“[=cv] [`T] 的指针”类型的指针。
[end:note]
[list:end]

[begin:example]
[codeblock]
struct A { int i; };
struct B : A { };
... &B::i ...       // [:en] has type [`int A::*] [:zh_CN] 类型为 [`int A::*]
int a;
int* p1 = &a;
int* p2 = p1 + 1;   // [:en] defined behavior [:zh_CN] 有定义行为
bool b = p2 > p1;   // [:en] defined behavior, with value [`true] [:zh_CN] 有定义行为，值为 [`true]
[codeblock:end]
[end:example]

[begin:note]
[:en] A pointer to member formed from a [`:key mutable] non-static data member
([#dcl.stc]) does not reflect the [`:key mutable] specifier associated with the
non-static data member.
[:zh_CN] 由 [`:key mutable] 非静态数据成员（[#dcl.stc]）构成的成员指针，并不反映
与该非静态数据成员关联的 [`:key mutable] 说明符。
[end:note]

[para]
[:en] A pointer to member is only formed when an explicit [`&] is used and its
operand is a [~qualified-id] or [~splice-expression] not enclosed in parentheses.
[:zh_CN] 仅当显式使用 [`&] 且其操作数为未被括号包围的[~限定标识]或者[~拼接表达式]
时才可构成成员指针。

[begin:note]
[:en] That is, the expression [`&(qualified-id)], where the [~qualified-id] is
enclosed in parentheses, does not form an expression of type [=lq]pointer to member[=rq].
[:zh_CN] 就是说，表达式 [`&(qualified-id)]，其中[~限定标识]被括号包围，并不构成
类型“成员指针”的表达式。

[:en] Neither does [`qualified-id], because there is no implicit conversion from a
[~qualified-id] for a non-static member function to the type [=lq]pointer to
member function[=rq] as there is from an lvalue of function type to the type
[=lq]pointer to function[=rq] ([#conv.func]).
[:zh_CN] [`qualified-id] 也不行，因为不存在如同从函数类型的左值向类型“函数指针”
（[#conv.func]）那样的，从非静态成员函数的[~限定标识]向类型“成员函数指针”的隐式转换。

[:en] Nor is [`&unqualified-id] a pointer to member, even within the scope of the
[~unqualified-id][=']s class.
[:zh_CN] 即使处于[~无限定标识]的类的作用域中，[`&unqualified-id] 也不是成员指针。
[end:note]

[para]
[:en] If [`&] is applied to an lvalue of incomplete class type and the complete type
declares [`[`:key operator]&()], it is unspecified whether the operator has the
built-in meaning or the operator function is called.
[:zh_CN] 若对不完整类类型的左值应用 [`&]，但其完整类型声明了 [`[`:key operator]&()]，
则该运算符具有内建含义还是调用运算符函数是未指明的。

[:en] The operand of [`&] shall not be a bit-field.
[:zh_CN] [`&] 的操作数不能是位字段。

[para]
[begin:note]
[:en] [%overloaded function[!address of]]
The address of an overload set ([#over]) can be taken only in a context that
uniquely determines which function is referred to (see [#over.over]).
[:zh_CN] [%重载函数[!～的地址]]
仅在可以唯一确定涉指哪个函数的语境中（参见 [#over.over]），才可取得重载集合（[#over]）的地址。

[:en] Since the context can affect whether the operand is a static or non-static
member function, the context can also affect whether the expression has type
[=lq]pointer to function[=rq] or [=lq]pointer to member function[=rq].
[:zh_CN] 由于语境可以影响其操作数是静态还是非静态成员函数，故该语境也会影响
该表达式所具有的类型是“函数指针”还是“成员函数指针”。
[end:note]

[para]
[:en] [%operator[!unary plus]]
The operand of the unary [`+] operator shall be a prvalue of arithmetic,
unscoped enumeration, or pointer type and the result is the value of the argument.
[:zh_CN] [%运算符[!一元加～]]
一元 [`+] 运算符的操作数应当为算术、无作用域枚举或指针类型的纯右值，且其结果为其实参的值。

[:en] Integral promotion is performed on integral or enumeration operands.
[:zh_CN] 对整型或枚举操作数实施整型提升。

[:en] The type of the result is the type of the promoted operand.
[:zh_CN] 其结果的类型为操作数提升后的类型。

[para]
[:en] [%operator[!unary minus]]
The operand of the unary [`-] operator shall be a prvalue of arithmetic or
unscoped enumeration type and the result is the negative of its operand.
[:zh_CN] [%运算符[!一元减～]]
一元 [`-] 运算符的操作数应当为算术或无作用域枚举类型的纯右值，且其结果为其操作数的相反数。

[:en] Integral promotion is performed on integral or enumeration operands.
[:zh_CN] 对整型或枚举操作数实施整型提升。

[:en] The negative of an unsigned quantity is computed by subtracting its value
from [$2^n], where [$n] is the number of bits in the promoted operand.
[:zh_CN] 无符号量的相反数按照用 [$2^n] 减去其值求得，其中 [$n] 为被提升的操作数的位数。

[:en] The type of the result is the type of the promoted operand.
[:zh_CN] 其结果的类型为操作数提升后的类型。

[begin:note]
[:en] The result is the two[=']s complement of the operand
(where operand and result are considered as unsigned).
[:zh_CN] 结果为操作数的二的补码（将操作数和结果视为无符号）。
[end:note]

[para]
[:en] [%operator[!logical negation]]
The operand of the logical negation operator [`!] is contextually converted to
[`:key bool] ([#conv]); its value is [`:key true] if the converted operand is
[`:key false] and [`:key false] otherwise.
[:zh_CN] [%运算符[!逻辑非～]]
逻辑非运算符 [`|] 的操作数被按语境转换为 [`:key bool]（[#conv]）；若被转换的
操作数为 [`:key false] 则其值为 [`:key true]，否则为 [`:key false]。

[:en] The type of the result is [`:key bool].
[:zh_CN] 其结果的类型为 [`:key bool]。

[para]
[:en] [%operator[!ones[='] complement]]
The operand of the [`~] operator shall be a prvalue of integral or unscoped enumeration type.
[:zh_CN] [%运算符[!一的补码～]]
[`~] 运算符的操作数应当为整型或无作用域枚举类型的纯右值。

[:en] Integral promotions are performed.
[:zh_CN] 对其实施整型提升。

[:en] The type of the result is the type of the promoted operand.
[:zh_CN] 其结果的类型为操作数提升后的类型。

[:en] Given the coefficients [$[`x]_i] of the base-2 representation ([#basic.fundamental])
of the promoted operand [`x], the coefficient [$[`r]_i] of the base-2 representation
of the result [`r] is 1 if [$[`x]_i] is 0, and 0 otherwise.
[:zh_CN] 给定提升后操作数 [`x] 的以 2 为基的表示（[#basic.fundamental]）的各项系数
[$[`x]_i]，如果 [$[`x]_i] 为 0，则结果 [`r] 的以 2 为基的表示的系数 [$[`r]_i] 为 1，否则为 0.

[begin:note]
[:en] The result is the ones[='] complement of the operand (where operand and result
are considered as unsigned).
[:zh_CN] 其结果为其操作数的一的补码（将操作数和结果视为无符号）。
[end:note]

[:en] There is an ambiguity in the grammer when [`~] is followed by a [~type-name] or
[~computed-type-specifier].
[:zh_CN] 当 [`~] 后面跟着[~类型名]或[~计算类型说明符]时，在文法中存在歧义。

[:en] The ambiguity is resolved by treating [`~] as the operator rather than as the
start of an [~unqualified-id] naming a destructor.
[:zh_CN] 此歧义通过将 [`~] 当作运算符而不是当作指名某个析构函数的[~无限定名]而得到解决。

[begin:note]
[:en] Because the grammar does not permit an operator to follow the [`.], [`->], or
[`::] tokens, a [`~] followed by a [~type-name] or [~computed-type-specifier] in a
member access expression or [~qualified-id] is unambiguously parsed as a
destructor name.
[:zh_CN] 因为文法中并不允许在 [`.]、[`->] 或 [`::] 记号后面跟着运算符，所以
成员访问表达式或[~限定标识]中的一个 [`~] 后面跟着一个[~类型名]或[~计算类型说明符]，
无歧义地解析为一个析构函数名。
[end:note]
