[section#expr.add
    [:en] Additive operators
    [:zh_CN] 加性运算符
]

[:en]
[%expression[!additive operators]] [%operator[!additive]]
[:zh_CN]
[%表达式[!加性运算符～]] [%运算符[!加性～]]

[para]
[:en]
The additive operators [`+] and [`-] group left-to-right.
[:zh_CN]
加性运算符 [`+] 和 [`-] 按从左向右组合。

[:en]
The usual arithmetic conversions ([#expr.arith.conv]) are performed for operands
of arithmetic or enumeration type.
[:zh_CN]
对算术或枚举类型的操作数实施一般算术转换（[#expr.arith.conv]）。

[:en]
[%operator[!addition]]
[%addition operator[%operator[!addition]]]
[%[`+][%operator[!addition]]]
[%operator[!subtraction]]
[%subtraction operator[%operator[!subtraction]]]
[%[`-][%operator[!subtraction]]]
[:zh_CN]
[%运算符[!加法～]]
[%加法运算符[%运算符[!加法～]]]
[%[`+][%运算符[!加法～]]]
[%运算符[!减法～]]
[%减法运算符[%运算符[!减法～]]]
[%[`-][%运算符[!减法～]]]

[syntax]
[rule additive-expression [:zh_CN] 加性运算符 ]
    [| multiplicative-expression ]
    [| additive-expression [`+] multiplicative-expression ]
    [| additive-expression [`-] multiplicative-expression ]
[rule:end]
[syntax:end]

[:en]
[%incomplete]
For addition, either both operands shall have arithmetic or unscoped enumeration
type, or one operand shall be a pointer to a completely-defined object type and
the other shall have integral or unscoped enumeration type.
[:zh_CN]
[%不完整]
对于加法，两个操作数应当都具有算术或无作用域枚举类型，或者一个操作数应当是指向
完整定义的对象类型的指针，而另一个为整型或无作用域枚举类型。

[para]
[:en]
For subtraction, one of the following shall hold:
[:zh_CN]
对于减法，应符合下列情况之一：

[list]
[item]
[:en]
both operands have arithmetic or unscoped enumeration type; or
[:zh_CN]
两个操作数都具有算术或无作用域枚举类型；或

[item]
[:en]
[%arithmetic[!pointer]]
both operands are pointers to cv-qualified or cv-unqualified versions of the
same completely-defined object type; or
[:zh_CN]
[%算术[!指针～]]
两个操作数都是指向相同的完整定义的对象类型的，同样被 cv 限定或 cv 未限定的版本的
指针；或

[item]
[:en]
the left operand is a pointer to a completely-defined object type and the right
operand has integral or unscoped enumeration type.
[:zh_CN]
左操作数是指向完整定义的对象类型的指针，而右操作数具有整型或无作用域枚举类型。
[list:end]

[para]
[:en]
The result of the binary [`+] operator is the sum of the operands.
[:zh_CN]
二元 [`+] 运算符的结果为其操作数的和。

[:en]
The result of the binary [`-] operator is the difference resulting from the
subtraction of the second operand from the first.
[:zh_CN]
二元 [`-] 运算符的结果为用第一个操作数减去第二个的差。

[para]
[:en]
[%arithmetic[!pointer]]
When an expression [`J] that has integral type is added to or subtracted from an
expression [`P] of pointer type, the result has the type of [`P].
[:zh_CN]
[%算术[!指针～]]
当向指针类型的表达式 [`P] 加上或减去具有整型类型的表达式 [`J] 时，其结果具有
[`P] 的类型。

[list]
[item]
[:en]
If [`P] evaluates to a null pointer value and [`J] evaluates to 0, the result is
a null pointer value.
[:zh_CN]
若 [`P] 求值为空指针值且 [`J] 求值为零，则其结果为空指针值。

[item]
[:en]
Otherwise, if [`P] points to an array element [$i] of an array object [`x] with
[$n] elements ([#dcl.array]),[#:note#fn:$1] the expressions [`P + J] and
[`J + P] (where [`J] has the value [$j]) point to the (possibly-hypothetical)
array element [$i + j] of [`x] if [$0 \le i + j \le n] and the expression
[`P - J] points to the (possibly-hypothetical) array element [$i - j] of [`x] if
[$0 \le i - j \le n].
[:zh_CN]
否则，若 [`P] 指向某个具有 [$n] 个元素的数组对象 [`x] 的元素 [$i]（[#dcl.array]）
[#:note#fn:$1]，则当 [$0 \le i + j \le n] 时，表达式 [`P + J] 和 [`J + P]（其中
[`J] 的值为 [$j]）指向 [`x] 的（可能为虚构的）数组元素 [$i + j]，并且当
[$0 \le i - j \le n] 时，表达式 [`P - J] 指向 [`x] 的（可能为虚构的）数组元素
[$i - j]。

[note:foot#fn:$1]
[:en]
As specified in [#basic.compound], an object that is not an array element is
considered to belong to a single-element array for this purpose and a pointer
past the last element of an array of [$n] elements is considered to be
equivalent to a pointer to a hypothetical array element [$n] for this purpose.
[:zh_CN]
如 [#basic.compound] 所指定，为进行指针算术，不是数组元素的对象被当作属于一个
单元素数组，而为进行指针算术，越过某个 [$n] 元数组的最后一个元素的指针，被当做
等价于指向虚构的数组元素 [$n]。
[note:end]

[item]
[:en]
Otherwise, the behavior is undefined.
[:zh_CN]
否则，其行为是未定义的。
[list:end]

[para]
[:en]
[%[`ptrdiff_t][!implementation defined type of]]
[%subtraction[!implementation defined pointer]]
[%[`ptrdiff_t]] [%@header cstddef]
[%comparison[!undefined pointer]]
When two pointer expressions [`P] and [`Q] are subtracted, the type of the
result is an [?impldef type of [`ptrdiff_t]] signed integral type; this type
shall be the same type that is defined as [`std::ptrdiff_t] in the
[?libheader cstddef] header ([#support.types.layout]).
[:zh_CN]
[%[`ptrdiff_t][!由实现定义的～类型]]
[%减法[!由实现定义的指针～]]
[%[`ptrdiff_t]] [%@header cstddef]
[%比较[!未定义的指针～]]
当两个指针 [`P] 和 [`Q] 相减时，其结果的类型是[?impldef [`ptrdiff_t] 的类型]
有符号整型类型；此类型应当与头文件 [?libheader cstddef]（[#support.types.layout]）
中所定义的 [`std::ptrdiff_t] 为相同类型。

[list]
[item]
[:en]
If [`P] and [`Q] both evaluate to null pointer values, the result is 0.
[:zh_CN]
如果 [`P] 和 [`Q] 均求值为空指针值，则其结果为 0。

[item]
[:en]
Otherwise, if [`P] and [`Q] point to, respectively, array elements [$i] and [$j]
of the same array object [`x], the expression [`P - Q] has the value [$i - j].
[:zh_CN]
否则，如果 [`P] 和 [`Q] 分别指向同一个数组对象 [`x] 的数组元素 [$i] 和 [$j]，则
表达式 [`P - Q] 的值为 [$i - j]。

[item]
[:en]
Otherwise, the behavior is undefined.
[:zh_CN]
否则，其行为是未定义的。

[begin:note]
[:en]
If the value [$i - j] is not in the range of representable values of type
[`std::ptrdiff_t], the behavior is undefined.
[:zh_CN]
若值 [$i - j] 并不处于类型 [`std::ptrdiff_t] 的可表示的值的范围之中，则其行为
未定义。
[end:note]
[list:end]

[para]
[:en]
For addition or subtraction, if the expressions [`P] or [`Q] have type
[=lq]pointer to [=cv] [`T][=rq], where [`T] and the array element type are not
similar ([#conv.qual]), the behavior is undefined.
[:zh_CN]
对于加法或减法，若表达式 [`P] 或 [`Q] 类型为“指向 [=cv] [`T] 的指针”，其中 [`T]
与数组元素类型不相似（[#conv.qual]），则其行为是未定义的。

[begin:note]
[:en]
In particular, a pointer to a base class cannot be used for pointer arithmetic
when the array contains objects of a derived class type.
[:zh_CN]
特别是，当数组包含派生类类型的对象时，不能用指向基类的指针进行指针算术。
[end:note]
