[section#expr.context
    [:en] Context dependence
    [:zh_CN] 语境依赖
]

[para]
[:en]
In some contexts, [+unevaluated operands [%unevaluated operand]] appear
([#expr.prim.req], [#expr.typeid], [#expr.sizeof], [#expr.unary.noexcept],
[#dcl.type.simple], [#temp]).
[:zh_CN]
一些语境中将出现[+免求值操作数]（[#expr.prim.req]，[#expr.typeid]，
[#expr.sizeof]，[#expr.unary.noexcept]，[#dcl.type.simple]，[#temp]）。

[:en]
An unevaluated operand is not evaluated.
[:zh_CN]
免求值操作数不被求值。

[begin:note]
[:en]
In an unevaluated operand, a non-static class member may be named
([#expr.prim.id]) and naming of objects or functions does not, by itself,
require that a definition be provided ([#basic.def.odr]).
[:zh_CN]
在免求值操作数中，可以指名非静态类成员（[#expr.prim.id]），而对对象或函数提及
名字本身，并不需要对其提供定义（[#basic.def.odr]）。

[:en]
An unevaluated operand is considered a full-expression ([#intro.execution]).
[:zh_CN]
免求值操作数被当做全表达式（[#intro.execution]）。
[end:note]

[para]
[:en]
In some contexts, an expression only appears for its side effects.
[:zh_CN]
在某些语境中出现的表达式，只会发生副作用。

[:en]
Such an expression is called a [+discarded-value expression].
[:zh_CN]
这种表达式被称为[+弃值表达式]。

[:en]
The array-to-pointer ([#conv.array]) and function-to-pointer ([#conv.func])
standard conversions are not applied.
[:zh_CN]
不对其实施数组向指针（[#conv.array]）和函数向指针（[#conv.func]）标准转换。

[:en]
The lvalue-to-rvalue conversion ([#conv.lval]) is applied if and only if the
expression is a glvalue of volatile-qualified type and it is one of the
following:
[:zh_CN]
仅当表达式是由 volatile 限定的类型的左值，且具有下列形式之一时，才对其实施左值向
右值转换（[#conv.lval]）：

[list]
[item]
[:en@~]
[`(] [~expression] [`)], where [~expression] is one of these expressions,
[:zh_CN@~]
[`(] [~表达式] [`)]，其中[~表达式]也是这些表达式之一，

[item]
[:en@~]
[~id-expression] ([#expr.prim.id]),
[:zh_CN@~]
[~标识表达式]（[#expr.prim.id]，

[item]
[:en@~]
subscripting ([#expr.sub]),
[:zh_CN@~]
下标（[#expr.sub]），

[item]
[:en@~]
class member access ([#expr.ref]),
[:zh_CN@~]
类成员访问（[#expr.ref]），

[item]
[:en@~]
indirection ([#expr.unary.op]),
[:zh_CN@~]
间接（[#expr.unary.op]），

[item]
[:en@~]
pointer-to-member operation ([#expr.mptr.oper]),
[:zh_CN@~]
成员指针操作（[#expr.mptr.oper]），

[item]
[:en@~]
conditional expression ([#expr.cond]) where both the second and the third
operands are one of these expressions, or
[:zh_CN@~]
第二个和第三个操作数均为以上之一的条件表达式（[#expr.cond]，或者

[item]
[:en@~]
comma expression ([#expr.comma]) where the right operand is one of these
expressions.
[:zh_CN@~]
右操作数为以上之一的逗号表达式（[#expr.comma]）。
[list:end]

[begin:note]
[:en]
Using an overloaded operator causes a function call; the above covers only
operators with built-in meaning.
[:zh_CN]
重载运算符的使用导致函数调用；以上仅覆盖内建运算符的情况。
[end:note]

[:en]
If the (possibly converted) expression is a prvalue, the temporary
materialization conversion ([#conv.rval]) is applied.
[:zh_CN]
如果（可能经过转换的）表达式是一个纯右值，则实施临时对象实质化转换
（[#conv.rval]）。

[begin:note]
[:en]
If the expression is an lvalue of class type, it must have a volatile copy
constructor to initialize the temporary object that is the result of the
lvalue-to-rvalue conversion.
[:zh_CN]
如果表达式是具有类类型的左值，则它必须具有一个 volatile 复制构造函数以对作为左值
向右值转换的结果的临时对象进行初始化。
[end:note]

[:en]
The glvalue expression is evaluated and its value is discarded.
[:zh_CN]
这个泛左值表达式被求值，而其值则被丢弃。
