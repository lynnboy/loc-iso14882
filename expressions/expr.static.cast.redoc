[section#expr.static.cast
    [:en] Static cast
    [:zh_CN] 静态转型
]

[para]
[:en]
[%expression[!static cast]] [%cast[!static]]
The result of the expression [`[`:key static_cast]<T>(v)] is the result of
converting the expression [`v] to type [`T].
[:zh_CN]
[%表达式[!静态转型～]] [%转型[!静态～]]
表达式 [`[`:key static_cast]<T>(v)] 的结果是把表达式 [`v] 转换为类型 [`T]。

[:en]
[%cast[!static[!lvalue]]] [%cast[!lvalue]]
If [`T] is an lvalue reference type or an rvalue reference to function type, the
result is an lvalue; if [`T] is an rvalue reference to object type, the result
is an xvalue; otherwise, the result is a prvalue.
[:zh_CN]
[%转型[!静态～[!左值]]] [%转型[!左值]]
若 [`T] 为左值引用类型或者函数类型的右值引用，则结果是左值；若 [`T] 为对象类型的
右值引用类型，则结果是临限值；否则结果是纯右值。

[:en]
The [`:key static_cast] operator shall not cast away constness
([#expr.const.cast]).
[:zh_CN]
[`:key static_cast] 运算符不能强制移除常量性（[#expr.const.cast]）。

[para]
[:en]
[%cast[!static[!reference]]] [%cast[!reference]]
An lvalue of type [=lq][=cv cv1] [`B][=rq], where [`B] is a class type, can be
cast to type [=lq]reference to [=cv cv2] [`D][=rq], where [`D] is a class
derived ([#class.derived]) from [`B], if [=cv cv2] is the same cv-qualification
as, or greater cv-qualification than, [=cv cv1].
[:zh_CN]
[%转型[!静态～[!引用]]] [%转型[!引用]]
当 [=cv cv2] 具有与 [=cv cv1] 相同的 cv 限定，或更强的 cv 限定时，“[=cv cv1] [`B]”
类型的左值（其中 [`B] 为类类型），可被转型为类型“[=cv cv2] [`D] 的引用”（其中
[`D] 为派生（[#class.derived]）于 [`B] 的类）。

[:en]
If [`B] is a virtual base class of [`D] or a base class of a virtual base class
of [`D], or if no valid standard conversion from [=lq]pointer to [`D][=rq] to
[=lq]pointer to [`B][=rq] exists ([#conv.ptr]), the program is ill-formed.
[:zh_CN]
如果 [`B] 是 [`D] 的虚基类或者 [`D] 的某个虚基类的基类，或者不存在从“[`D] 的指针”
向“[`B] 的指针”的有效标准转换（[#conv.ptr]），则程序非良构。

[:en]
An xvalue of type [=lq][=cv cv1] [`B][=rq] can be cast to type [=lq]rvalue
reference to [=cv cv2] [`D][=rq] with the same constraints as for an lvalue of
type [=lq][=cv cv1] [`B][=rq].
[:zh_CN]
“[=cv cv1] [`B]”类型的临限值可被转型为类型“[=cv cv2] [`D] 的右值引用”，其中所受
约束与“[=cv cv1] [`B]”类型的左值相同。

[:en]
If the object of type [=lq][=cv cv1] [`B][=rq] is actually a base class subobject
of an object of type [`D], the result refers to the enclosing object of type [`D].
[:zh_CN]
若“[=cv cv1] [`B]”类型的对象实际上是类型 [`D] 的对象的基类子对象，则其结果指代
这个外围的 [`D] 类型的对象。

[:en]
Otherwise, the behavior is undefined.
[:zh_CN]
否则，其行为是未定义的。

[begin:example]
[codeblock]
struct B { };
struct D : public B { };
D d;
B &br = d;

static_cast<D&>(br);            // [:en] produces lvalue denoting the original [`d] object \
                                [:zh_CN] 产生代表原 [`d] 对象的左值
[codeblock:end]
[end:example]

[para]
[:en]
An lvalue of type [`T1] can be cast to type [=lq]rvalue reference to [`T2][=rq]
if [`T2] is reference-compatible with [`T1] ([#dcl.init.ref]).
[:zh_CN]
如果 [`T2] 与 [`T1] 引用兼容（[#dcl.init.ref]），则 [`T1] 类型的左值可以被转型为
类型“[`T2] 的右值引用”。

[:en]
If the value is not a bit-field, the result refers to the object or the
specified base class subobject thereof; otherwise, the lvalue-to-rvalue
conversion ([#conv.lval]) is applied to the bit-field and the resulting prvalue
is used as the operand of the [`:key static_cast] for the remainder of
this subclause.
[:zh_CN]
若该值不是位字段，则其结果指代该对象或其指定的基类子对象；否则，对位字段实施左值
向右值转换（[#conv.lval]），并将产生的纯右值用作 [`:key static_cast]的操作数
再考察本子条款的余下部分。

[:en]
If [`T2] is an inaccessible ([#class.access]) or ambiguous
([#class.member.lookup]) base class of [`T1], a program that necessitates such a
cast is ill-formed.
[:zh_CN]
如果 [`T2] 是 [`T1] 的不可访问的（[#class.access]）或有歧义的
（[#class.member.lookup]）基类，则需要进行这种转型的程序是非良构的。

[para]
[:en]
An expression [$E] can be explicitly converted to a type [`T] if there is an
implicit conversion sequence ([#over.best.ics]) from [$E] to [`T], if
overload resolution for a direct-initialization ([#dcl.init]) of an object or
reference of type [`T] from [$E] would find at least one viable function
([#over.match.viable]), or if [`T] is an aggregate type ([#dcl.init.aggr])
having a first element [`x] and there is an implicit conversion sequence from
[$E] to the type of [`x].
[:zh_CN]
如果存在从表达式 [$E] 向类型 [`T] 的隐式转换序列（[#over.best.ics]），如果对于以
[$E] 对 [`T] 类型的对象或引用进行的直接初始化（[#dcl.init]）进行的重载决议能够
找到至少一个可行函数（[#over.match.viable]），或者如果 [`T] 为以 [`x] 为首个元素
的聚合类型（[#dcl.init.aggr]）且存在从 [$E] 向 [`x] 的类型的隐式转换序列，
则 [$E] 可以被显式转换为 [`T]。

[:en]
If [`T] is a reference type, the effect is the same as performing the
declaration and initialization
[:zh_CN]
如果 [`T] 是引用类型，则其效果与针对某个虚构的临时变量 [`t] 进行的以下声明和
初始化（[#dcl.init]）

[codeblock:notation]
T t([$E]);
[codeblock:end]

[:en@~]
for some invented temporary variable [`t] ([#dcl.init]) and then using the
temporary variable as the result of the conversion.
[:zh_CN@~]
并使用该临时变量作为转换的结果相同。

[:en]
Otherwise, the result object is direct-initialized from [$E].
[:zh_CN]
否则，其结果对象以 [$E] 进行直接初始化。

[begin:note]
[:en]
The conversion is ill-formed when attempting to convert an expression of class
type to an inaccessible or ambiguous base class.
[:zh_CN]
如果试图将类类型的表达式转换为不可访问或有歧义的基类，则转换是非良构的。
[end:note]

[begin:note]
[:en]
If [`T] is [=lq]array of unknown bound of [`U][=rq], this direct-initialization
defines the type of the expression as [`U`[1`]].
[:zh_CN]
若 [`T] 为“[`U] 的未知边界数组”，则这个直接初始化将表达式的类型定义为 [`U`[1`]]。
[end:note]

[para]
[:en]
Otherwise, the [`:key static_cast] shall perform one of the conversions listed
below.
[:zh_CN]
否则，[`:key static_cast] 应当实施下列转换之一。

[:en]
No other conversion shall be performed explicitly using a [`:key static_cast].
[:zh_CN]
不存在可以显式使用 [`:key static_cast] 实施的其他转换。

[para]
[:en]
Any expression can be explicitly converted to type [=cv] [`:key void], in which
case the operand is a discarded-value expression ([#expr.prop]).
[:zh_CN]
任何表达式都能显式转换为类型 [=cv] [`:key void]，此时该操作数为弃值表达式
（[#expr.prop]）。

[begin:note]
[:en]
Such a [`:key static_cast] has no result as it is a prvalue of type [`:key void];
see [#basic.lval].
[:zh_CN]
这种 [`:key static_cast] 没有结果，因为它是 [`:key void] 类型的纯右值；参见
[#basic.lval]。
[end:note]

[begin:note]
[:en]
However, if the value is in a temporary object ([#class.temporary]), the
destructor for that object is not executed until the usual time, and the value
of the object is preserved for the purpose of executing the destructor.
[:zh_CN]
然而，若该值存于临时对象（[#class.temporary]）中，则此对象的析构函数，直到通常会
执行的时刻才执行，并且其间为执行析构函数而保持该对象的值。
[end:note]

[para]
[:en]
The inverse of any standard conversion sequence ([#conv]) not containing
an lvalue-to-rvalue ([#conv.lval]), array-to-pointer ([#conv.array]),
function-to-pointer ([#conv.func]), null pointer ([#conv.ptr]), null member
pointer ([#conv.mem]), boolean ([#conv.bool]), or function pointer
([#conv.fctptr]) conversion, can be performed explicitly using
[`:key static_cast].
[:zh_CN]
不含有左值向右值（[#conv.lval]），数组向指针（[#conv.array]），函数向指针
（[#conv.func]），空指针（[#conv.ptr]），空成员指针（[#conv.mem]），布尔
（[#conv.bool]），以及函数指针（[#conv.fctptr]）转换的标准转换序列（[#conv]）的
逆向转换，都可以通过使用 [`:key static_cast] 来显式实施。

[:en]
A program is ill-formed if it uses [`:key static_cast] to perform the inverse of
an ill-formed standard conversion sequence.
[:zh_CN]
若程序使用 [`:key static_cast] 来实施非良构的标准转换序列的逆向转换，则它是
非良构的。

[begin:example]
[codeblock]
struct B { };
struct D : private B { };
void f() {
  static_cast<D*>((B*)0);               // [:en] Error: [`B] is a private base of [`D]. \
                                        [:zh_CN] 错误：[`B] 是 [`D] 的私有基类
  static_cast<int B::*>((int D::*)0);   // [:en] Error: [`B] is a private base of [`D]. \
                                        [:zh_CN] 错误：[`B] 是 [`D] 的私有基类
}
[codeblock:end]
[end:example]

[para]
[:en]
The lvalue-to-rvalue ([#conv.lval]), array-to-pointer ([#conv.array]), and
function-to-pointer ([#conv.func]) conversions are applied to the operand.
[:zh_CN]
对操作数实施左值向右值（[#conv.lval]）、数组向指针（[#conv.array]）和函数向指针
（[#conv.func]）转换。

[:en]
Such a [`:key static_cast] is subject to the restriction that the explicit
conversion does not cast away constness ([#expr.const.cast]), and the following
additional rules for specific cases:
[:zh_CN]
此种 [`:key static_cast] 受到显式转换不能强制移除常量性（[#expr.const.cast]）的
限制，且在特定情况下还有如下规则：

[para]
[:en]
A value of a scoped enumeration type ([#dcl.enum]) can be explicitly converted
to an integral type; the result is the same as that of converting to the
enumeration[=']s underlying type and then to the destination type.
[:zh_CN]
有作用域枚举类型（[#dcl.enum]）的值可被显式转换为整型类型；其结果与将其转换为该
枚举的底层类型然后再转换到目标类型的结果相同。

[:en]
A value of a scoped enumeration type can also be explicitly converted to a
floating-point type; the result is the same as that of converting from the
original value to the floating-point type.
[:zh_CN]
有作用域枚举类型的值还可以被显式转换为浮点类型；其结果与将其原始值转换为浮点类型
的结果相同。

[para]
[:en]
[%enumeration type[!conversion to]]
[%enumeration type[![`static_cast][!conversion to]]]
A value of integral or enumeration type can be explicitly converted to a
complete enumeration type.
[:zh_CN]
[%枚举类型[!转换为～]]
[%枚举类型[![`static_cast][!转换为～]]]
整型或枚举类型的值可被显式转换为完整的枚举类型。

[:en]
If the enumeration type has a fixed underlying type, the value is first
converted to that type by integral promotion ([#conv.prom]) or integral
conversion ([#conv.integral]), if necessary, and then to the enumeration type.
[:zh_CN]
如果枚举类型具有固定的底层类型，则如果需要就首先将其值以整形提升（[#conv.prom]）
或整型转换（[#conv.integral]）转换为这个类型，然后转换为该枚举类型。

[:en]
If the enumeration type does not have a fixed underlying type, the value is
unchanged if the original value is within the range of the enumeration values
([#dcl.enum]), and otherwise, the behavior is undefined.
[:zh_CN]
如果枚举类型没有固定的底层类型，则当原值处于此枚举‌值范围内时，该值保持不变
（[#dcl.enum]），否则其行为是未定义的。

[:en]
A value of floating-point type can also be explicitly converted to an
enumeration type.
[:zh_CN]
浮点类型的值也可被转换为枚举类型。

[:en]
The resulting value is the same as converting the original value to the
underlying type of the enumeration ([#conv.fpint]), and subsequently to the
enumeration type.
[:zh_CN]
其结果值与将原始值转换为这个枚举的底层类型（[#conv.fpint]），然后转换为该枚举
类型的结果相同。

[para]
[:en]
[%cast[!base class]] [%cast[!derived class]]
A prvalue of type [=lq]pointer to [=cv cv1] [`B][=rq], where [`B] is a class
type, can be converted to a prvalue of type [=lq]pointer to [=cv cv2] [`D][=rq],
where [`D] is a complete class derived ([#class.derived]) from [`B], if [=cv cv2]
is the same cv-qualification as, or greater cv-qualification than, [=cv cv1].
[:zh_CN]
[%转型[!基类]] [%转型[!派生类]]
当 [=cv cv2] 具有与 [=cv cv1] 相同的 cv 限定，或更强的 cv 限定时，“[=cv cv1] [`B]
的指针”类型的纯右值（其中 [`B] 为类类型），可被转换为类型“[=cv cv2] [`D] 的指针”
的纯右值（其中 [`D] 为派生（[#class.derived]）于 [`B] 的完整类）。

[:en]
If [`B] is a virtual base class of [`D] or a base class of a virtual base class
of [`D], or if no valid standard conversion from [=lq]pointer to [`D][=rq] to
[=lq]pointer to [`B][=rq] exists ([#conv.ptr]), the program is ill-formed. 
[:zh_CN]
如果 [`B] 是 [`D] 的虚基类或者 [`D] 的某个虚基类的基类，或者不存在从“[`D] 的指针”
向“[`B] 的指针”的合法标准转换（[#conv.ptr]），则程序非良构。

[:en]
The null pointer value ([#basic.compound]) is converted to the null pointer
value of the destination type.
[:zh_CN]
空指针值（[#basic.compound]）转换为目标类型的空指针值。

[:en]
If the prvalue of type [=lq]pointer to [=cv cv1] [`B][=rq] points to a [`B] that
is actually a base class subobject of an object of type [`D], the resulting
pointer points to the enclosing object of type [`D].
[:zh_CN]
若“[=cv cv1] [`B] 的指针”类型的纯右值所指的 [`B] 对象实际上是 [`D] 类型对象的
基类子对象，则结果指针指向这个外围的 [`D] 类型对象。

[:en]
Otherwise, the behavior is undefined.
[:zh_CN]
否则，其行为是未定义的。

[para]
[:en]
[%cast[!pointer-to-member]]
A prvalue of type [=lq]pointer to member of [`D] of type [=cv cv1] [`T][=rq] can
be converted to a prvalue of type [=lq]pointer to member of [`B] of type
[=cv cv2] [`T][=rq], where [`D] is a complete class type and [`B] is a base
class ([#class.derived]) of [`D], if [=cv cv2] is the same cv-qualification as,
or greater cv-qualification than, [=cv cv1].
[:zh_CN]
[%转型[!成员指针]]
当 [=cv cv2] 具有与 [=cv cv1] 相同的 cv 限定，或更强的 cv 限定时，“[=cv cv1] [`T]
类型的 [`D] 的成员指针”类型的纯右值可被转换为“[=cv cv2] [`T] 类型的 [`B] 的成员
指针”类型的纯右值（其中 [`D] 为完整类类型且 [`B] 为 [`D] 的基类（[#class.derived]））。

[begin:note]
[:en]
Function types (including those used in pointer-to-member-function types) are
never cv-qualified; see [#dcl.fct].
[:zh_CN]
函数类型（包括成员函数指针类型中的函数类型）总不是被 cv 限定的；参见 [#dcl.fct]。
[end:note]

[:en]
If no valid standard conversion from [=lq]pointer to member of [`B] of type
[`T][=rq] to [=lq]pointer to member of [`D] of type [`T][=rq] exists
([#conv.mem]), the program is ill-formed.
[:zh_CN]
当不存在从“[`T] 类型的 [`B] 的成员指针”到“[`T] 类型的 [`D] 的成员指针”的合法标准
转换（[#conv.mem]）时，程序非良构。

[:en]
The null member pointer value ([#conv.mem]) is converted to the null member
pointer value of the destination type.
[:zh_CN]
空成员指针值（[#conv.mem]）转换为目标类型的空成员指针值。

[:en]
If class [`B] contains the original member, or is a base or derived class of the
class containing the original member, the resulting pointer to member points to
the original member.
[:zh_CN]
若类 [`B] 包含原成员，或它是包含原成员的类的基类或派生类，则结果成员指针指向这个
原成员。

[:en]
Otherwise, the behavior is undefined.
[:zh_CN]
否则，其行为是未定义的。

[begin:note]
[:en]
Although class [`B] need not contain the original member, the dynamic type of
the object with which indirection through the pointer to member is performed
must contain the original member; see [#expr.mptr.oper].
[:zh_CN]
虽然类 [`B] 不必包含原成员，但用以对该成员指针进行间接的对象的动态类型必须包含此
原成员；参见 [#expr.mptr.oper]。
[end:note]

[para]
[:en]
A prvalue of type [=lq]pointer to [=cv cv1] [`:key void][=rq] can be converted
to a prvalue of type [=lq]pointer to [=cv cv2] [`T][=rq], where [`T] is an
object type and [=cv cv2] is the same cv-qualification as, or greater
cv-qualification than, [=cv cv1].
[:zh_CN]
“[=cv cv1] [`:key void] 的指针”类型的纯右值可被转换为类型“[=cv cv2] [`T] 的指针”
的纯右值，其中 [`T] 为对象类型且 [=cv cv2] 具有与 [=cv cv1] 相同的 cv 限定或更强
的 cv 限定。

[:en]
If the original pointer value represents the address [`A] of a byte in memory
and [`A] does not satisfy the alignment requirement of [`T], then the resulting
pointer value is unspecified.
[:zh_CN]
若原指针值表示内存中的某个字节地址 [`A]，且 [`A] 不符合 [`T] 的对齐要求，则其
结果指针值是未指明的。

[:en]
Otherwise, if the original pointer value points to an object [^a], and there is
an object [^b] of type [`T] (ignoring cv-qualification) that is
pointer-interconvertible ([#basic.compound]) with [^a], the result is a pointer
to [^b].
[:zh_CN]
否则，若原指针值指向某个对象 [^a]，而存在某个 [`T] 类型（忽略 cv 限定）的对象
[^b] 与 [^a] 指针可相互转换（[#basic.compound]），则其结果是指向 [^b] 的指针。

[:en]
Otherwise, the pointer value is unchanged by the conversion. 
[:zh_CN]
否则，该转换不改动指针的值。

[begin:example]
[codeblock]
T* p1 = new T;
const T* p2 = static_cast<const T*>(static_cast<void*>(p1));
bool b = p1 == p2;  // [:en] [`b] will have the value [`true]. \
                    [:zh_CN] [`b] 的值将为 [`true]。
[codeblock:end]
[end:example]
