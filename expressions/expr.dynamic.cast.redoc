[section#expr.dynamic.cast
    [:en] Dynamic cast
    [:zh_CN] 动态转型
]

[para]
[:en]
[%expression[!dynamic cast]] [%cast[!dynamic]]
The result of the expression [`[`:key dynamic_cast]<T>(v)] is the result of
converting the expression [`v] to type [`T].
[:zh_CN]
[%表达式[!动态转型～]] [%转型[!动态～]]
表达式 [`[`:key dynamic_cast]<T>(v)] 的结果是把表达式 [`v] 转换为类型 [`T]。

[:en]
[%type[!incomplete]]
[`T] shall be a pointer or reference to a complete class type, or [=lq]pointer
to [=cv] [`:key void][=rq].
[:zh_CN]
[%类型[!不完整～]]
[`T] 应当是指向完整的类类型的指针或引用，或是“[=cv] [`:key void] 的指针”。

[:en] The [`:key dynamic_cast] operator shall not cast away constness
([#expr.const.cast]).
[:zh_CN] [`:key dynamic_cast] 运算符不能强制移除常量性（[#expr.const.cast]）。

[para]
[:en] If [`T] is a pointer type, [`v] shall be a prvalue of a pointer to
complete class type, and the result is a prvalue of type [`T].
[:zh_CN] 若 [`T] 为指针类型，则 [`v] 应当是指向完整的类类型的指针的纯右值，而其
结果则为类型 [`T] 的纯右值。

[:en] If [`T] is an lvalue reference type, [`v] shall be an lvalue of a complete
class type, and the result is an lvalue of the type referred to by [`T].
[:zh_CN] 若 [`T] 为左值引用类型，则 [`v] 应当是完整的类类型的左值，而其结果则为
由 [`T] 所指代的类型的左值。

[:en] If [`T] is an rvalue reference type, [`v] shall be a glvalue having a
complete class type, and the result is an xvalue of the type referred to by [`T].
[:zh_CN] 若 [`T] 为右值引用类型，则 [`v] 应当是具有完整的类类型的泛左值，而其结果
则为由 [`T] 所指代的类型的临限值。

[para]
[:en] If the type of [`v] is the same as [`T] (ignoring cv-qualification), the
result is [`v] (converted if necessary).
[:zh_CN] 若 [`v] 的类型与 [`T] 相同（忽略 cv 限定），则其结果为 [`v]（并进行必要的转换）。

[para]
[:en] If [`T] is [=lq]pointer to [=cv cv1] [`B][=rq] and [`v] has type
[=lq]pointer to [=cv cv2] [`D][=rq] such that [`B] is a base class of [`D], the
result is a pointer to the unique [`B] subobject of the [`D] object pointed to
by [`v], or a null pointer value if [`v] is a null pointer value.
[:zh_CN] 若 [`T] 为“[=cv cv1] [`B] 的指针”而 [`v] 具有类型“[=cv cv2] [`D] 的指针”，
其中 [`B] 为 [`D] 的基类，则其结果为指向由 [`v] 所指的 [`D] 对象的唯一 [`B] 子对象的
指针，或当 [`v] 为空指针值时也为空指针值。

[:en] Similarly, if [`T] is [=lq]reference to [=cv cv1] [`B][=rq] and [`v] has
type [=cv cv2] [`D] such that [`B] is a base class of [`D], the result is the
unique [`B] subobject of the [`D] object referred to by [`v].[#:fn]
[:zh_CN] 相似地，若 [`T] 为“[=cv cv1] [`B] 的引用”而 [`v] 具有类型 [=cv cv2] [`D]，
其中 [`B] 为 [`D] 的基类，则其结果为由 [`v] 所指代的 [`D] 对象的唯一 [`B] 子对象[#:fn]。

[note:foot]
[:en] The most derived object ([#intro.object]) pointed or referred to by [`v]
can contain other [`B] objects as base classes, but these are ignored.
[:zh_CN] 由 [`v] 所指向或指代的全派生对象（[#intro.object]）可包含作为基类的其他 [`B]
对象，但它们被忽略。
[note:end]

[:en] In both the pointer and reference cases, the program is ill-formed if [`B]
is an inaccessible or ambiguous base class of [`D].
[:zh_CN] 在指针和引用这两种情况中，若 [`B] 是 [`D] 的不可访问的或有歧义的基类，
则程序非良构。

[begin:example]
[codeblock]
struct B { };
struct D : B { };
void foo(D* dp) {
  B*  bp = dynamic_cast<B*>(dp);    // [:en] equivalent to [`B* bp = dp;] \
                                    [:zh_CN] 等价于 [`B* bp = dp;]
}
[codeblock:end]
[end:example]

[para]
[:en] Otherwise, [`v] shall be a pointer to or a glvalue of a polymorphic type
([#class.virtual]).
[:zh_CN] 否则，[`v] 应当是指向多态类型（[#class.virtual]）的指针或者是多态类型的泛左值。

[para]
[:en] If [`v] is a null pointer value, the result is a null pointer value.
[:zh_CN] 若 [`v] 为空指针值，则其结果为空指针值。

[para]
[:en] If [`v] has type [=lq]pointer to [=cv] [`U][=rq] and [`v] does not point
to an object whose type is similar ([#conv.qual]) to [`U] and that is within its
lifetime or within its period of construction or destruction ([#class.cdtor]),
the behavior is undefined.
[:zh_CN] 如果 [`v] 的类型为“[=cv] [`U] 的指针”并且 [`v] 并未指向类型与 [`U] 相似（[#conv.qual]）
且处于其生存期之内或者处于构造或销毁阶段之中（[#class.cdtor]）的对象，则其行为未定义。

[:en] If [`v] is a glvalue of type [`U] and [`v] does not refer to an object
whose type is similar to [`U] and that is within its lifetime or within its
period of construction or destruction, the behavior is undefined.
[:zh_CN] 如果 [`v] 是 [`U] 类型的泛左值并且 [`v] 并未指代类型与 [`U] 相似
且处于其生存期之内或者处于构造或销毁阶段之中的对象，则其行为未定义。

[para]
[:en] If [`T] is [=lq]pointer to [=cv] [`:key void][=rq], then the result is a
pointer to the most derived object pointed to by [`v].
[:zh_CN] 若 [`T] 为“[=cv] [`:key void] 的指针”，则其结果为指向由 [`v] 所指的
最终派生对象的指针。

[:en] Otherwise, a runtime check is applied to see if the object pointed or
referred to by [`v] can be converted to the type pointed or referred to by [`T].
[:zh_CN] 否则，实施运行时检查以获知由 [`v] 所指向或指代的对象是否可以转换为
由 [`T] 所指向或指代的类型。

[para]
[:en] Let [`C] be the class type to which [`T] points or refers.
[:zh_CN] 令 [`C] 为 [`T] 所指向或指代的类类型。

[:en] The runtime check logically executes as follows:
[:zh_CN] 逻辑上运行时检查的执行如下进行：

[list]
[item]
[:en] If, in the most derived object pointed (referred) to by [`v], [`v] points
(refers) to a public base class subobject of a [`C] object, and if only one
object of type [`C] is derived from the subobject pointed (referred) to by [`v],
the result points (refers) to that [`C] object.
[:zh_CN] 如果，在由 [`v] 所指向（指代）的全派生对象中，[`v] 指向（指代）了 [`C]
对象的公开基类子对象，且若仅有一个类型 [`C] 的对象派生自由 [`v] 所指向（指代）的
子对象，则其结果指向（指代）该 [`C] 对象。

[item]
[:en] Otherwise, if [`v] points (refers) to a public base class subobject of the
most derived object, and the type of the most derived object has a base class,
of type [`C], that is unambiguous and public, the result points (refers) to the
[`C] subobject of the most derived object.
[:zh_CN] 否则，若 [`v] 指向（指代）全派生对象的公开基类子对象，且全派生对象的
类型具有类型为 [`C] 的无歧义公开基类，则其结果指向（指代）全派生对象的 [`C]
子对象。

[item]
[:en] Otherwise, the runtime check [+:% fails].
[:zh_CN] 否则，运行时检查[+:% 失败]。
[list:end]

[para]
[:en] The value of a failed cast to pointer type is the null pointer value of
the required result type.
[:zh_CN] 向指针类型所进行的失败的转型的值，为所求结果类型的空指针值。

[:en] A failed cast to reference type throws an exception ([#except.throw]) of
a type that would match a handler ([#except.handle]) of type [`std::bad_cast]
([#bad.cast]).
[:zh_CN] 向引用类型所进行的失败的转型，将抛出（[#except.throw]）其类型能够与类型
[`std::bad_cast]（[#bad.cast]）的处理器相匹配（[#except.handle]）的异常。

[para:~]
[%[`bad_cast]]
[%@lib bad_cast]
[begin:example]
[codeblock]
class A { virtual void f(); };
class B { virtual void g(); };
class D : public virtual A, private B { };
void g() {
  D   d;
  B*  bp = (B*)&d;                  // [:en] cast needed to break protection [:zh_CN] 需要转型以打破保护
  A*  ap = &d;                      // [:en] public derivation, no cast needed [:zh_CN] 公开派生，无须转型
  D&  dr = dynamic_cast<D&>(*bp);   // [:en] fails [:zh_CN] 失败
  ap = dynamic_cast<A*>(bp);        // [:en] fails [:zh_CN] 失败
  bp = dynamic_cast<B*>(ap);        // [:en] fails [:zh_CN] 失败
  ap = dynamic_cast<A*>(&d);        // [:en] succeeds [:zh_CN] 成功
  bp = dynamic_cast<B*>(&d);        // [:en] ill-formed (not a run-time check) [:zh_CN] 非良构（不是运行时检查）
}

class E : public D, public B { };
class F : public E, public D { };
void h() {
  F   f;
  A*  ap  = &f;                     // [:en] succeeds: finds unique [`A] [:zh_CN] 成功：找到了唯一的 [`A]
  D*  dp  = dynamic_cast<D*>(ap);   // [:en] fails: yields null; [`f] has two [`D] subobjects \
                                    [:zh_CN] 失败：产生空指针；[`f] 具有两个 [`D] 子对象
  E*  ep  = (E*)ap;                 // [:en] error: cast from virtual base [:zh_CN] 错误：从虚基类进行转型
  E*  ep1 = dynamic_cast<E*>(ap);   // [:en] succeeds [:zh_CN] 成功
}
[codeblock:end]
[end:example]

[begin:note]
[:en] Subclause [#class.cdtor] describes the behavior of a [`:key dynamic_cast]
applied to an object under construction or destruction.
[:zh_CN] 子条款 [#class.cdtor] 说明对处于构造或析构之中的对象实施
[`:key dynamic_cast] 时的行为。
[end:note]
