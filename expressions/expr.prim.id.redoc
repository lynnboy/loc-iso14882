[section#expr.prim.id
    [:en] Names
    [:zh_CN] 名字
]

[syntax]
[rule id-expression [:zh_CN] 标识表达式 ]
    [| unqualified-id ]
    [| qualified-id ]
[rule:end]
[syntax:end]

[para]
[:en]
[%name] [%id-expression]
An [~id-expression] is a restricted form of a [~primary-expression].
[:zh_CN]
[%名字] [%标识表达式]
[~标识表达式]是[~初等表达式]的一种受限形式。

[begin:note]
[:en]
An [~id-expression] can appear after [`.] and [`->] operators ([#expr.ref]).
[:zh_CN]
[~标识表达式]可处于 [`.] 和 [`->] 运算符（[#expr.ref]）之后。
[end:note]

[para]
[:en]
An [~id-expression] that denotes a non-static data member or non-static member
function of a class can only be used:
[:zh_CN]
代表类的非静态数据成员或非静态成员函数的[~标识表达式]，仅可按如下方式使用：

[list]
[item]
[:en]
as part of a class member access ([#expr.ref]) in which the object expression
refers to the member[=']s class[#:note#fn:$1] or a class derived from that
class, or
[:zh_CN]
作为类成员访问（[#expr.ref]）的一部分，其中的对象表达式涉指该成员所在类
[#:note#fn:$1]或从这个类派生的类，或者

[note:foot#fn:$1]
[:en]
This also applies when the object expression is an implicit [`(*this)]
([#class.mfct.non-static]).
[:zh_CN]
这在以隐含的 [`(*this)] 作为对象表达式（[#class.mfct.non-static]）时同样适用。
[note:end]

[item]
[:en]
to form a pointer to member ([#expr.unary.op]), or
[:zh_CN]
用以构成成员指针（[#expr.unary.op]），或者

[item]
[:en]
if that [~id-expression] denotes a non-static data member and it appears in an
unevaluated operand.
[:zh_CN]
该[~标识表达式]代表某个非静态数据成员，并且它出现于某个免求值操作数之中。

[begin:example]
[codeblock]
struct S {
  int m;
};
int i = sizeof(S::m);           // OK
int j = sizeof(S::m + 42);      // OK
[codeblock:end]
[end:example]
[list:end]

[para]
[:en]
An [~id-expression] that denotes an immediate function ([#dcl.constexpr]) shall
appear only
[:zh_CN]
代表某个直接函数（[#dcl.constexpr]）的[~标识表达式]，只能
[list]
[item]
[:en@~] as a subexpression of an immediate invocation, or
[:zh_CN@~] 作为一次直接调用中的子表达式，或者
[item]
[:en@~] in an immediate function context ([#expr.const]).
[:zh_CN@~] 出现于直接函数的语境中（[#expr.const]）。
[list:end]

[para]
[:en]
An [~id-expression] that denotes the specialization of a concept
([#temp.concept]) results in a prvalue of type [`bool].
[:zh_CN]
代表某个概念（[#temp.concept]）的特例的[~标识表达式]的结果为 [`bool] 类型的
纯右值。

[:en]
The expression is [`true] if the concept[=']s normalized
[~constraint-expression] ([#temp.constr.decl]) is satisfied
([#temp.constr.constr]) by the specified template arguments and [`false]
otherwise.
[:zh_CN]
如果该概念的正规化的[~约束表达式]（[#temp.constr.decl]）被给定的模板实参所满足
（[#temp.constr.constr]），则表达式为 [`true]，否则为 [`false]。

[begin:example]
[codeblock]
template<typename T> concept C = true;
static_assert(C<int>);          // OK
[codeblock:end]
[end:example]

[begin:note]
[:en]
A concept[=']s constraints are also considered when using a template name
([#temp.names]) and during overload resolution ([#over]), and they are compared
during the partial ordering of constraints ([#temp.constr.order]).
[:zh_CN]
使用模板名（[#temp.names]）时，以及在重载决议（[#over]）过程中，同样要考察概念的
约束，在对约束的部分排序（[#temp.constr.order]）中也要对它们进行比较。
[end:note]

[para]
[:en]
A program that refers explicitly or implicitly to a function with a trailing
[~requires-clause] whose [~constraint-expression] is not satisfied, other than
to declare it, is ill-formed.
[:zh_CN]
如果程序显式或隐式涉指了某个带有尾部 [~requires-子句]的函数，其[~约束表达式]未能
满足，且并非是对它的声明，则该程序非良构。

[begin:example]
[codeblock]
void f(int) requires false;

void g() {
  f(0);                         // [:en] error: cannot call [`f] \
                                   [:zh_CN] 错误：不能调用 [`f]
  void (*p1)(int) = f;          // [:en] error: cannot take the address of [`f] \
                                   [:zh_CN] 错误：不能获取 [`f] 的地址
  decltype(f)* p2 = nullptr;    // [:en] error: the type [`decltype(f)] is invalid \
                                   [:zh_CN] 错误：类型 [`decltype(f)] 无效
}
[codeblock:end]

[:en]
In each case, the constraints of [`f] are not satisfied.
[:zh_CN]
以上任何情况中，[`f] 的约束都未满足。

[:en]
In the declaration of [`p2], those constraints are required to be satisfied
even though [`f] is an unevaluated operand ([#expr.prop]).
[:zh_CN]
在 [`p2] 的声明式中，即便 [`f] 是免求值操作数（[#expr.prop]），仍要求其约束被
满足。
[end:example]

[include expr.prim.id.unqual]

[include expr.prim.id.qual]

[include expr.prim.id.dtor]
