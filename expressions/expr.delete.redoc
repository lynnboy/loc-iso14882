[section#expr.delete
    [:en] Delete
    [:zh_CN] delete
]

[para]
[:en]
[%expression[![`delete]]] [%[`delete]]
The [~delete-expression] operator destroys a most derived object
([#intro.object]) or array created by a [~new-expression].
[:zh_CN]
[%表达式[![`delete]]] [%[`delete]]
[~delete-表达式]运算符销毁由 [~new-表达式]所创建的全派生对象（[#intro.object]）
或数组。

[syntax]
[rule delete-expression [:zh_CN] delete-表达式 ]
    [| [`:opt ::] [`delete] cast-expression ]
    [| [`:opt ::] [`delete] [``[] [``]] cast-expression ]
[rule:end]
[syntax:end]

[:en]
The first alternative is a [+single-object delete expression[%delete
[!single-object]]], and the second is an [+array delete expression[%delete
[!array]]].
[:zh_CN]
第一种是[+单对象 delete 表达式[%delete[!单对象]]]，第二种是[+数组 delete 表达式
[%delete[!数组]]]。

[:en]
Whenever the [`delete] keyword is immediately followed by empty square brackets,
it shall be interpreted as the second alternative.[#:note#fn:$section.1]
[:zh_CN]
当 [`delete] 关键字后面紧跟空的方括号时，应当将它判读为第二种方式。
[#:note#fn:$section.1]

[note:foot#fn:$section.1]
[:en]
A lambda expression with a [~lambda-introducer] that consists of empty square
brackets can follow the [`delete] keyword if the lambda expression is enclosed
in parentheses.
[:zh_CN]
带有由空方括号构成的 [~lambda-引导符]的 lambda 表达式，在由括号括起来后可以跟在
[`delete] 关键字后面。
[note:end]

[:en]
The operand shall be of pointer to object type or of class type.
[:zh_CN]
其操作数的应当为对象指针类型或类类型。

[:en]
If of class type, the operand is contextually implicitly converted ([#conv]) to
a pointer to object type.[#:note#fn:$section.2]
[:zh_CN]
若其为类类型，则其操作数被按语境隐式转换（[#conv]）为对象指针类型。
[#:note#fn:$section.2]

[note:foot#fn:$section.2]
[:en]
This implies that an object cannot be deleted using a pointer of type [`void*]
because [`void] is not an object type.
[:zh_CN]
这意味着由于 [`void] 不是对象类型，所以不能使用 [`void*] 类型的指针删除对象。
[note:end]

[:en]
The [~delete-expression][=']s result has type [`void].
[:zh_CN]
[~delete-表达式]的结果类型为 [`void]。

[para]
[:en]
[%[`delete][!single-object]]
If the operand has a class type, the operand is converted to a pointer type by
calling the above-mentioned conversion function, and the converted operand is
used in place of the original operand for the remainder of this subclause.
[:zh_CN]
[%[`delete][!单对象]]
若操作数具有类类型，则该操作数通过调用前面提到的转换函数转换为指针类型，且在本
子条款的剩余部分中使用这个经转换的操作数替代原操作数。

[:en]
In a single-object delete expression, the value of the operand of [`delete] may
be a null pointer value, a pointer to a non-array object created by a previous
[~new-expression], or a pointer to a subobject ([#intro.object]) representing a
base class of such an object ([#class.derived]).
[:zh_CN]
在单对象 delete 表达式中，[`delete] 的操作数的值应当是空指针值，指向由之前的
[~new-表达式]所创建的非数组对象的指针，或者指向代表这个类对象的某个基类
（[#class.derived]）的子对象（[#intro.object]）的指针。

[:en]
If not, the behavior is undefined.
[:zh_CN]
否则，其行为就是未定义的。

[:en]
[%array[![`delete]]]
In an array delete expression, the value of the operand of [`delete] may be a
null pointer value or a pointer value that resulted from a previous array
[~new-expression].[#:note#fn:$section.3]
[:zh_CN]
[%数组[![`delete]]]
在数组 delete 表达式中，[`delete] 的操作数的值可以为空指针值，或某个早前的数组
[~new-表达式]所产生的指针值。[#:note#fn:$section.3]

[note:foot#fn:$section.3]
[:en]
For nonzero-length arrays, this is the same as a pointer to the first element
of the array created by that [~new-expression].
[:zh_CN]
对于非零长数组，这与指向由该 [~new-表达式]创建的数组的第一个元素的指针相同。

[:en]
Zero-length arrays do not have a first element.
[:zh_CN]
零长数组没有第一个元素。
[note:end]

[:en]
If not, the behavior is undefined.
[:zh_CN]
否则，其行为就是未定义的。

[enter:note]
[:en]
This means that the syntax of the [~delete-expression] must match the type of
the object allocated by [`new], not the syntax of the [~new-expression].
[:zh_CN]
这意味着 [~delete-表达式]的语法必须与被 [`new] 分配的对象的类型相匹配，而不是与
[~new-表达式]的语法相匹配。
[exit:note]

[enter:note]
[:en]
A pointer to a [`const] type can be the operand of a [~delete-expression]; it is
not necessary to cast away the constness ([#expr.const.cast]) of the pointer
expression before it is used as the operand of the [~delete-expression].
[:zh_CN]
指向 [`const] 类型的指针可作为 [~delete-表达式]的操作数；在将该指针表达式用作
[~delete-表达式]的操作数前，不必强制移除它的常量性（[#expr.const.cast]）。
[exit:note]

[para]
[:en]
[%[`delete][!undefined]]
In a single-object delete expression, if the static type of the object to be
deleted is different from its dynamic type, the static type shall be a base
class of the dynamic type of the object to be deleted and the static type shall
have a virtual destructor or the behavior is undefined.
[:zh_CN]
[%[`delete][!未定义的]]
在单对象 delete 表达式中，若所要删除的对象的静态类型与其动态类型不同，则其
静态类型应当是所要删除的对象的动态类型的基类，且这个静态类型应当带有虚析构函数，
否则其行为是未定义的。

[:en]
In an array delete expression, if the dynamic type of the object to be deleted
differs from its static type, the behavior is undefined.
[:zh_CN]
在数组 delete 表达式中，若所要删除的对象的动态类型与其静态类型不同，则其行为是
未定义的。

[para]
[:en]
The [~cast-expression] in a [~delete-expression] shall be evaluated exactly
once.
[:zh_CN]
[~delete-表达式]中的[~强制转换表达式]应当恰好进行一次求值。

[para]
[:en]
[%type[!incomplete]]
If the object being deleted has incomplete class type at the point of deletion
and the complete class has a non-trivial destructor or a deallocation function,
the behavior is undefined.
[:zh_CN]
[%类型[!不完整～]]
若将要删除的对象在删除点具有不完整类类型，而其完整类带有非平凡的析构函数或回收
函数，则其行为是未定义的。

[para]
[:en]
[%[`delete][!destructor and]]
If the value of the operand of the [~delete-expression] is not a null pointer
value, the [~delete-expression] will invoke the destructor (if any) for the
object or the elements of the array being deleted.
[:zh_CN]
[%[`delete][!析构函数与～]]
若 [~delete-表达式]的操作数的值不是空指针值，则该 [~delete-表达式]将调用所要删除
的对象或数组元素的析构函数（如果有）。

[:en]
In the case of an array, the elements will be destroyed in order of decreasing
address (that is, in reverse order of the completion of their constructor; see
[#class.base.init]).
[:zh_CN]
在数组的情况中，其元素将按地址下降顺序（即与它们的构造函数的完成顺序相反；参见
[#class.base.init]）进行销毁。

[para]
[:en]
If the value of the operand of the [~delete-expression] is not a null pointer
value, then:
[:zh_CN]
若 [~delete-表达式]的操作数的值不是空指针值，则有：

[list]
[item]
[:en]
If the allocation call for the [~new-expression] for the object to be deleted
was not omitted and the allocation was not extended ([#expr.new]), the
[~delete-expression] shall call a deallocation function
([#basic.stc.dynamic.deallocation]).
[:zh_CN]
若所删除对象的 [~new-表达式]所调用的分配函数并未被省略且其分配未被扩展
（[#expr.new]），则该 [~delete-表达式]应当调用回收函数
（[#basic.stc.dynamic.deallocation]）。

[:en]
The value returned from the allocation call of the [~new-expression] shall be
passed as the first argument to the deallocation function.
[:zh_CN]
其 [~new-表达式]的分配调用所返回的值应当作为第一个实参传递给回收函数。

[item]
[:en]
Otherwise, if the allocation was extended or was provided by extending the
allocation of another [~new-expression], and the [~delete-expression] for every
other pointer value produced by a [~new-expression] that had storage provided by
the extended [~new-expression] has been evaluated, the [~delete-expression]
shall call a deallocation function.
[:zh_CN]
否则，若其分配被扩展或者由另一个 [~new-表达式]的分配所提供，且由被扩展的
[~new-表达式]提供存储的所有其他 [~new-表达式]产生的指针值的 [~delete-表达式]都
已经进行了求值，则该 [~delete-表达式]应当调用回收函数。

[:en]
The value returned from the allocation call of the extended [~new-expression]
shall be passed as the first argument to the deallocation function.
[:zh_CN]
由被扩展的 [~new-表达式]的分配调用所返回的值应当作为第一个实参传递给分配函数。

[item]
[:en]
Otherwise, the [~delete-expression] will not call a deallocation function.
[:zh_CN]
否则，该 [~delete-表达式] 不会调用回收函数。
[list:end]

[enter:note]
[:en]
The deallocation function is called regardless of whether the destructor for the
object or some element of the array throws an exception.
[:zh_CN]
无论是否在对象或数组的某些元素的析构函数中抛出异常，都将调用回收函数。
[exit:note]

[:en]
If the value of the operand of the [~delete-expression] is a null pointer value,
it is unspecified whether a deallocation function will be called as described
above.
[:zh_CN]
如果 [~delete-表达式]的操作数的值是空指针值，则是否会如上所述调用回收函数是未
指明的。

[para]
[enter:note]
[:en]
[%operator [%[`delete]]] [%[`operator delete]]
An implementation provides default definitions of the global deallocation
functions [`operator delete] for non-arrays ([#new.delete.single]) and
[`operator delete`[`]] for arrays ([#new.delete.array]).
[:zh_CN]
[%运算符 [%[`delete]]] [%[`operator delete]]
实现提供全局回收函数 [`operator delete]（非数组，[#new.delete.single]）和
[`operator delete`[`]]（数组，[#new.delete.array]）的缺省定义。

[:en]
A [=Cpp] program can provide alternative definitions of these functions
([#replacement.functions]), and/or class-specific versions ([#class.free]).
[:zh_CN]
[=Cpp] 程序可以提供这些函数的替代定义（[#replacement.functions]），和/或特定于类
的版本（[#class.free]）。
[exit:note]

[para]
[:en]
When the keyword [`delete] in a [~delete-expression] is preceded by the unary
[`::] operator, the deallocation function[=']s name is looked up in global
scope.
[:zh_CN]
若 [~delete-表达式]中的关键字 [`delete] 之前有一元 [`::] 运算符，则在全局作用域
中查找回收函数的名字。

[:en]
Otherwise, the lookup considers class-specific deallocation functions
([#class.free]).
[:zh_CN]
否则，其查找考察特定于类的回收函数（[#class.free]）。

[:en]
If no class-specific deallocation function is found, the deallocation
function[=']s name is looked up in global scope.
[:zh_CN]
如果没有找到特定于类的回收函数，则在全局作用域中查找回收函数的名字。

[para]
[:en]
If deallocation function lookup finds more than one usual deallocation function,
the function to be called is selected as follows:
[:zh_CN]
如果回收函数的查找找到了多个常规回收函数，则如下进行对所调用的函数的选择：

[list]
[item]
[:en]
If the type has new-extended alignment, a function with a parameter of type
[`std::align_val_t] is preferred; otherwise a function without such a parameter
is preferred.
[:zh_CN]
若类型带有 new 扩充对齐，则优先选择带有 [`std::align_val_t] 类型形参的函数；否则
就优先选择不带有这种形参的函数。

[:en]
If exactly one preferred function is found, that function is selected and the
selection process terminates.
[:zh_CN]
如果恰好找到一个优先函数，则选择这个函数，选择过程终止。

[:en]
If more than one preferred function is found, all non-preferred functions are
eliminated from further consideration.
[:zh_CN]
如果找到了多个优先函数，则所有非优先的函数在进一步考察中都被忽略。

[item]
[:en]
If the deallocation functions have class scope, the one without a parameter of
type [`std::size_t] is selected.
[:zh_CN]
如果回收函数具有类作用域，则选择没有 [`std::size_t] 类型形参的函数。

[item]
[:en]
If the type is complete and if, for the second alternative (delete array) only,
the operand is a pointer to a class type with a non-trivial destructor or a
(possibly multi-dimensional) array thereof, the function with a parameter of
type [`std::size_t] is selected.
[:zh_CN]
若其为完整类型，且（仅对于第二种情况，删除数组）若其操作数是指向带有非平凡析构
函数的类类型或其（可能多维的）数组的指针，则选择带有 [`std::size_t] 类型形参的
函数。

[item]
[:en]
Otherwise, it is unspecified whether a deallocation functions with a parameter
of type [`std::size_t] is selected.
[:zh_CN]
否则，是否选择带有 [`std::size_t] 类型形参的回收函数是未指明的。
[list:end]

[para]
[:en]
When a [~delete-expression] is executed, the selected deallocation function
shall be called with the address of the most-derived object in a single-object
delete expression, or the address of the object suitably adjusted for the array
allocation overhead ([#expr.new]) in an array delete expression, as its first
argument.
[:zh_CN]
当执行 [~delete-表达式]时，在单对象 delete 表达式中，应当以全派生对象的地址作为
第一个实参，而在数组 delete 表达式中，应当以为数组分配开销经过适当调整的对象的
地址作为第一个实参，调用所选择的回收函数。

[:en]
If a deallocation function with a parameter of type [`std::align_val_t] is used,
the alignment of the type of the object to be deleted is passed as the
corresponding argument.
[:zh_CN]
当使用带有 [`std::align_val_t] 类型形参的回收函数时，应当将所删除对象的类型的
对齐作为相应的实参进行传递。

[:en]
If a deallocation function with a parameter of type [`std::size_t] is used, the
size of the most-derived type, or of the array plus allocation overhead,
respectively, is passed as the corresponding argument.[#:note#fn:$section.4]
[:zh_CN]
当使用带有 [`std::size_t] 类型形参的回收函数时，应当分别将全派生类型的大小，或
数组加上分配开销的大小，作为相应的实参进行传递。[#:note#fn:$section.4]

[note:foot#fn:$section.4]
[:en]
If the static type of the object to be deleted is complete and is different from
the dynamic type, and the destructor is not virtual, the size might be
incorrect, but that case is already undefined, as stated above.
[:zh_CN]
若所删除对象的静态类型完整且与其静态类型不同，并且其析构函数不是虚函数，则其大小
可能不正确，但这种情况下已经如上文所述是未定义的。
[note:end]

[enter:note]
[:en]
If this results in a call to a usual deallocation function, and either the first
argument was not the result of a prior call to a usual allocation function or
the second argument was not the corresponding argument in said call, the
behavior is undefined ([#new.delete.single], [#new.delete.array]).
[:zh_CN]
如果这导致了对常规回收函数的调用，而要么其第一个实参并非此前对常规分配函数的调用
结果，要么第二个实参并非该调用中的对应实参，则其行为未定义
（[#new.delete.single]，[#new.delete.array]）。
[exit:note]

[para]
[:en]
Access and ambiguity control are done for both the deallocation function and the
destructor ([#class.dtor], [#class.free]).
[:zh_CN]
对回收函数和析构函数（[#class.dtor]，[#class.free]）都进行访问控制和歧义控制。
