[section#expr.delete
    [:en] Delete
    [:zh_CN] delete
]

[para]
[:en]
[%expression[![`delete]]] [%[`delete]]
The [~delete-expression] operator destroys a most derived object
([#intro.object]) or array created by a [~new-expression].
[:zh_CN]
[%表达式[![`delete]]] [%[`delete]]
[~delete-表达式]运算符销毁由 [~new-表达式]所创建的全派生对象（[#intro.object]）
或数组。

[syntax]
[rule delete-expression [:zh_CN] delete-表达式 ]
    [| [`:opt ::] [`:key delete] cast-expression ]
    [| [`:opt ::] [`:key delete] [``[] [``]] cast-expression ]
[rule:end]
[syntax:end]

[:en]
The first alternative is a [+single-object delete expression
[%delete[!single-object]]], and the second is an [+array delete expression
[%delete[!array]]].
[:zh_CN]
第一种是[+单对象 delete 表达式[%delete[!单对象]]]，第二种是[+数组 delete 表达式
[%delete[!数组]]]。

[:en]
Whenever the [`:key delete] keyword is immediately followed by empty square
brackets, it shall be interpreted as the second alternative.[#:fn]
[:zh_CN]
当 [`:key delete] 关键字后面紧跟空的方括号时，应当将它判读为第二种方式[#:fn]。

[note:foot]
[:en]
A [~lambda-expression] with a [~lambda-introducer] that consists of empty square
brackets can follow the [`:key delete] keyword if the [~lambda-expression] is
enclosed in parentheses.
[:zh_CN]
带有由空方括号构成的 [~lambda-引导符]的 [~lambda-表达式]，在由括号括起来后可以
跟在 [`:key delete] 关键字后面。
[note:end]

[:en]
The operand shall be of pointer to object type or of class type.
[:zh_CN]
其操作数的应当为对象指针类型或类类型。

[:en]
If of class type, the operand is contextually implicitly converted ([#conv]) to
a pointer to object type.[#:fn]
[:zh_CN]
若其为类类型，则其操作数被按语境隐式转换（[#conv]）为对象指针类型[#:fn]。

[note:foot]
[:en]
This implies that an object cannot be deleted using a pointer of type
[`[`:key void]*] because [`:key void] is not an object type.
[:zh_CN]
这意味着由于 [`:key void] 不是对象类型，所以不能使用 [`[`:key void]*] 类型的指针
删除对象。
[note:end]

[:en]
The [~delete-expression][=']s result has type [`:key void].
[:zh_CN]
[~delete-表达式]的结果类型为 [`:key void]。

[para]
[:en]
[%[`delete][!single-object]]
If the operand has a class type, the operand is converted to a pointer type by
calling the above-mentioned conversion function, and the converted operand is
used in place of the original operand for the remainder of this subclause.
[:zh_CN]
[%[`delete][!单对象]]
若操作数具有类类型，则该操作数通过调用前面提到的转换函数转换为指针类型，且在本
子条款的剩余部分中使用这个经转换的操作数替代原操作数。

[:en]
In a single-object delete expression, the value of the operand of [`:key delete]
may be a null pointer value, a pointer to a non-array object created by a
previous [~new-expression], or a pointer to a subobject ([#intro.object])
representing a base class of such an object ([#class.derived]).
[:zh_CN]
在单对象 delete 表达式中，[`:key delete] 的操作数的值应当是空指针值，指向由之前
的 [~new-表达式]所创建的非数组对象的指针，或者指向代表这个类对象的某个基类
（[#class.derived]）的子对象（[#intro.object]）的指针。

[:en]
If not, the behavior is undefined.
[:zh_CN]
否则，其行为就是未定义的。

[:en]
[%array[![`delete]]]
In an array delete expression, the value of the operand of [`:key delete] may be
a null pointer value or a pointer value that resulted from a previous array
[~new-expression].[#:fn]
[:zh_CN]
[%数组[![`delete]]]
在数组 delete 表达式中，[`:key delete] 的操作数的值可以为空指针值，或某个早前的
数组 [~new-表达式]所产生的指针值[#:fn]。

[note:foot]
[:en]
For nonzero-length arrays, this is the same as a pointer to the first element
of the array created by that [~new-expression].
[:zh_CN]
对于非零长数组，这与指向由该 [~new-表达式]创建的数组的第一个元素的指针相同。

[:en]
Zero-length arrays do not have a first element.
[:zh_CN]
零长数组没有第一个元素。
[note:end]

[:en]
If not, the behavior is undefined.
[:zh_CN]
否则，其行为就是未定义的。

[begin:note]
[:en]
This means that the syntax of the [~delete-expression] must match the type of
the object allocated by [`:key new], not the syntax of the [~new-expression].
[:zh_CN]
这意味着 [~delete-表达式]的语法必须与被 [`:key new] 分配的对象的类型相匹配，而
不是与 [~new-表达式]的语法相匹配。
[end:note]

[begin:note]
[:en]
A pointer to a [`:key const] type can be the operand of a [~delete-expression];
it is not necessary to cast away the constness ([#expr.const.cast]) of the
pointer expression before it is used as the operand of the [~delete-expression].
[:zh_CN]
指向 [`:key const] 类型的指针可作为 [~delete-表达式]的操作数；在将该指针表达式
用作 [~delete-表达式]的操作数前，不必强制移除它的常量性（[#expr.const.cast]）。
[end:note]

[para]
[:en]
[%[`delete][!undefined]]
In a single-object delete expression, if the static type of the object to be
deleted is not similar ([#conv.qual]) to its dynamic type and the selected
deallocation function (see below) is not a destroying operator delete, the
static type shall be a base class of the dynamic type of the object to be
deleted and the static type shall have a virtual destructor or the behavior is
undefined.
[:zh_CN]
[%[`delete][!未定义的]]
在单对象 delete 表达式中，若所要删除的对象的静态类型与其动态类型不相似
（[#conv.qual]），并且所选择的回收函数（见下文）不是销毁用 delete 运算符，则其
静态类型应当是所要删除的对象的动态类型的基类，且这个静态类型应当带有虚析构函数，
否则其行为是未定义的。

[:en]
In an array delete expression, if the dynamic type of the object to be deleted
is not similar to its static type, the behavior is undefined.
[:zh_CN]
在数组 delete 表达式中，若所要删除的对象的动态类型与其静态类型不相似，则其行为是
未定义的。

[para]
[:en]
The [~cast-expression] in a [~delete-expression] shall be evaluated exactly once.
[:zh_CN]
[~delete-表达式]中的[~转型表达式]应当恰好进行一次求值。

[para]
[:en]
[%type[!incomplete]]
If the object being deleted has incomplete class type at the point of deletion
and the complete class has a non-trivial destructor or a deallocation function,
the behavior is undefined.
[:zh_CN]
[%类型[!不完整～]]
若将要删除的对象在删除点具有不完整类类型，而其完整类带有非平凡的析构函数或回收
函数，则其行为是未定义的。

[para]
[:en]
[%[`delete][!destructor and]]
If the value of the operand of the [~delete-expression] is not a null pointer
value and the selected deallocation function (see below) is not a destroying
operator delete, the [~delete-expression] will invoke the destructor (if any)
for the object or the elements of the array being deleted.
[:zh_CN]
[%[`delete][!析构函数与～]]
若 [~delete-表达式]的操作数的值不是空指针值，且所选择的回收函数（见下文）不是
销毁用 delete 运算符，则该 [~delete-表达式]将调用所要删除的对象或数组元素的析构
函数（如果有）。

[:en]
In the case of an array, the elements will be destroyed in order of decreasing
address (that is, in reverse order of the completion of their constructor; see
[#class.base.init]).
[:zh_CN]
在数组的情况中，其元素将按地址下降顺序（即与它们的构造函数的完成顺序相反；参见
[#class.base.init]）进行销毁。

[para]
[:en]
If the value of the operand of the [~delete-expression] is not a null pointer
value, then:
[:zh_CN]
若 [~delete-表达式]的操作数的值不是空指针值，则有：

[list]
[item]
[:en]
If the allocation call for the [~new-expression] for the object to be deleted
was not omitted and the allocation was not extended ([#expr.new]), the
[~delete-expression] shall call a deallocation function
([#basic.stc.dynamic.deallocation]).
[:zh_CN]
若所删除对象的 [~new-表达式]所调用的分配函数并未被省略且其分配未被扩展
（[#expr.new]），则该 [~delete-表达式]应当调用回收函数
（[#basic.stc.dynamic.deallocation]）。

[:en]
The value returned from the allocation call of the [~new-expression] shall be
passed as the first argument to the deallocation function.
[:zh_CN]
其 [~new-表达式]的分配调用所返回的值应当作为第一个实参传递给回收函数。

[item]
[:en]
Otherwise, if the allocation was extended or was provided by extending the
allocation of another [~new-expression], and the [~delete-expression] for every
other pointer value produced by a [~new-expression] that had storage provided by
the extended [~new-expression] has been evaluated, the [~delete-expression]
shall call a deallocation function.
[:zh_CN]
否则，若其分配被扩展或者由另一个 [~new-表达式]的分配所提供，且由被扩展的
[~new-表达式]提供存储的所有其他 [~new-表达式]产生的指针值的 [~delete-表达式]都
已经进行了求值，则该 [~delete-表达式]应当调用回收函数。

[:en]
The value returned from the allocation call of the extended [~new-expression]
shall be passed as the first argument to the deallocation function.
[:zh_CN]
由被扩展的 [~new-表达式]的分配调用所返回的值应当作为第一个实参传递给分配函数。

[item]
[:en]
Otherwise, the [~delete-expression] will not call a deallocation function.
[:zh_CN]
否则，该 [~delete-表达式] 不会调用回收函数。
[list:end]

[begin:note]
[:en]
The deallocation function is called regardless of whether the destructor for the
object or some element of the array throws an exception.
[:zh_CN]
无论是否在对象或数组的某些元素的析构函数中抛出异常，都将调用回收函数。
[end:note]

[:en]
If the value of the operand of the [~delete-expression] is a null pointer value,
it is unspecified whether a deallocation function will be called as described
above.
[:zh_CN]
如果 [~delete-表达式]的操作数的值是空指针值，则是否会如上所述调用回收函数是未
指明的。

[para]
[:en]
If a deallocation function is called, it is [`[`:key operator] [`:key delete]]
for a single-object delete expression or [`[`:key operator] [`:key delete]`[`]]
for an array delete expression.
[:zh_CN]
若调用回收函数，则对于单对象 delete 表达式，它是
[`[`:key operator] [`:key delete]]，而对于数组 delete 表达式，它是
[`[`:key operator] [`:key delete]`[`]]。

[begin:note]
[%[`operator delete]]
[:en]
An implementation provides default definitions of the global deallocation
functions ([#new.delete.single], [#new.delete.array]).
[:zh_CN]
实现提供全局回收函数的缺省定义（[#new.delete.single]，[#new.delete.array]）。

[:en]
A [=Cpp] program can provide alternative definitions of these functions
([#replacement.functions]), and/or class-specific versions ([#class.free]).
[:zh_CN]
[=Cpp] 程序可以提供这些函数的替代定义（[#replacement.functions]），和/或类特有
的版本（[#class.free]）。
[end:note]

[para]
[:en]
If the keyword [`:key delete] in a [~delete-expression] is not preceded by the
unary [`::] operator and the type of the operand is a pointer to a (possibly
cv-qualified) class type [`T]:
[:zh_CN]
若 [~delete-表达式]中的关键字 [`:key delete] 之前没有一元 [`::] 运算符，并且
操作数的类型为指向（可能被 cv 限定的）类类型 [`T] 的指针：

[list]
[item]
[:en]
If [`T] has a virtual destructor, the deallocation function is the one selected
at the point of definition of the dynamic type[=']s virtual destructor
([#class.dtor]).
[:zh_CN]
如果 [`T] 带有虚析构函数，则分配函数为在动态类型的虚析构函数的定义点处选择的那个
（[#class.dtor]）。

[item]
[:en]
Otherwise, a search is performed for the deallocation function[=']s name
in the scope of [`T].
[:zh_CN]
否则，在 [`T] 的作用域中实施针对回收函数的名字的搜索。
[list:end]

[:en]
Otherwise, or if nothing is found, the deallocation function[=']s name is looked
up by searching for it in the global scope.
[:zh_CN]
否则，或若未找到任何东西，则通过在全局作用域中搜索函数函数的名字来查找它。

[:en]
In any case, any declarations other than of usual deallocation functions
([#basic.stc.dynamic.deallocation]) are discarded.
[:zh_CN]
任何情况下，都丢弃除了常规回收函数（[#basic.stc.dynamic.deallocation]）之外的
任何声明式。

[begin:note]
[:en]
If only a placement deallocation function is found in a class,
the program is ill-formed because the lookup set is empty ([#basic.lookup]).
[:zh_CN]
如果在类中只找到一个放置式回收函数，则因为查找集合为空（[#basic.lookup]），程序
非良构。
[end:note]

[para]
[:en]
If more than one usual deallocation function is found, the function to be called
is selected as follows:
[:zh_CN]
如果找到了多个常规回收函数，则如下进行对所调用的函数的选择：

[list]
[item]
[:en]
If any of the deallocation functions is a destroying operator delete, all
deallocation functions that are not destroying operator deletes are eliminated
from further consideration.
[:zh_CN]
如果有任何回收函数时销毁用 delete 运算符，则所有并非销毁用 delete 运算符的回收
函数在进一步考察中都被忽略。

[item]
[:en]
If the type has new-extended alignment, a function with a parameter of type
[`std::align_val_t] is preferred; otherwise a function without such a parameter
is preferred.
[:zh_CN]
若类型带有 new 扩充对齐，则优先选择带有 [`std::align_val_t] 类型形参的函数；否则
就优先选择不带有这种形参的函数。

[:en]
If any preferred functions are found, all non-preferred functions are eliminated
from further consideration.
[:zh_CN]
如果找到了任何优先函数，则所有非优先的函数在进一步考察中都被忽略。

[para]
[:en]
If exactly one function remains, that function is selected and the selection
process terminates.
[:zh_CN]
如果恰好剩余一个函数，则选择这个函数，选择过程终止。

[item]
[:en]
If the deallocation functions belong to a class scope, the one without a
parameter of type [`std::size_t] is selected.
[:zh_CN]
如果回收函数属于某个类作用域，则选择没有 [`std::size_t] 类型形参的函数。

[item]
[:en]
If the type is complete and if, for an array delete expression only, the operand
is a pointer to a class type with a non-trivial destructor or a (possibly
multi-dimensional) array thereof, the function with a parameter of type
[`std::size_t] is selected.
[:zh_CN]
若其为完整类型，仅对于数组删除表达式，若其操作数是指向带有非平凡析构函数的类类型
或其（可能多维的）数组的指针，则选择带有 [`std::size_t] 类型形参的函数。

[item]
[:en]
Otherwise, it is unspecified whether a deallocation function with a parameter of
type [`std::size_t] is selected.
[:zh_CN]
否则，是否选择带有 [`std::size_t] 类型形参的回收函数是未指明的。
[list:end]

[para]
[:en]
For a single-object delete expression, the deleted object is the object denoted
by the operand if its static type does not have a virtual destructor, and its
most-derived object otherwise.
[:zh_CN]
对于单对象 delete 表达式，当其操作数的静态类型不带有虚析构函数时，被删除对象是该
操作数所代表的对象，否则为其全派生对象。

[begin:note]
[:en]
If the deallocation function is not a destroying operator delete and the deleted
object is not the most derived object in the former case, the behavior is
undefined, as stated above.
[:zh_CN]
如果回收函数并非销毁用 delete 运算符，且被删除的对象并非前一种情况中的全派生对象，
则其行为是未定义的，如上文所述。
[end:note]

[:en]
For an array delete expression, the deleted object is the array object.
[:zh_CN]
对于数组 delete 表达式，被删除对象就是该数组对象。

[:en]
When a [~delete-expression] is executed, the selected deallocation function
shall be called with the address of the deleted object in a single-object delete
expression, or the address of the deleted object suitably adjusted for the array
allocation overhead ([#expr.new]) in an array delete expression, as its first
argument.
[:zh_CN]
当执行 [~delete-表达式]时，在单对象 delete 表达式中，应当以被删除对象的地址作为
第一个实参，而在数组 delete 表达式中，应当以为数组分配开销（[#expr.new]）经过
适当调整的被删除对象的地址作为第一个实参，调用所选择的回收函数。

[begin:note]
[:en]
Any cv-qualifiers in the type of the deleted object are ignored when forming
this argument.
[:zh_CN]
在构成这个实参时，被删除对象的类型中的任何 cv 限定符都被忽略。
[end:note]

[:en]
If a destroying operator delete is used, an unspecified value is passed as the
argument corresponding to the parameter of type [`std::destroying_delete_t].
[:zh_CN]
如果使用的是销毁用 delete 运算符，则以一个未指明的值传递作为对应于
[`std::destroying_delete_t] 类型的形参的实参。

[:en]
If a deallocation function with a parameter of type [`std::align_val_t] is used,
the alignment of the type of the deleted object is passed as the corresponding
argument.
[:zh_CN]
当使用带有 [`std::align_val_t] 类型形参的回收函数时，应当将被删除对象的类型的
对齐作为相应的实参进行传递。

[:en]
If a deallocation function with a parameter of type [`std::size_t] is used, the
size of the deleted object in a single-object delete expression, or of the array
plus allocation overhead in an array delete expression, is passed as the
corresponding argument.
[:zh_CN]
当使用带有 [`std::size_t] 类型形参的回收函数时，在单对象 delete 表达式中，应当将
被删除对象的大小，而在数组 delete 表达式中，应当将数组大小加上分配开销，作为相应
的实参进行传递。

[begin:note]
[:en]
If this results in a call to a replaceable deallocation function, and either
the first argument was not the result of a prior call to a replaceable
allocation function or the second or third argument was not the corresponding
argument in said call, the behavior is undefined ([#new.delete.single],
[#new.delete.array]).
[:zh_CN]
如果这导致了对某个可替换回收函数的调用，而要么其第一个实参并非此前对某个可替换
分配函数的调用结果，要么第二或第三个实参并非该调用中的对应实参，则其行为未定义
（[#new.delete.single]，[#new.delete.array]）。
[end:note]

[para]
[:en]
Access and ambiguity control are done for both the deallocation function and the
destructor ([#class.dtor], [#class.free]).
[:zh_CN]
对回收函数和析构函数（[#class.dtor]，[#class.free]）都进行访问控制和歧义控制。
