[section#expr.prim.lambda.closure
    [:en] Closure types
    [:zh_CN] 闭包类型
]

[para]
[:en]
The type of a [~lambda-expression] (which is also the type of the closure
object) is a unique, unnamed non-union class type, called the [+closure type],
whose properties are described below.
[:zh_CN]
[~lambda-表达式]的类型（同样也是闭包对象的类型），是唯一的、无名的非联合的类类型
，称之为[+闭包类型]，下文对其性质进行了描述。

[para]
[:en]
The closure type is declared in the smallest block scope, class scope, or
namespace scope that contains the corresponding [~lambda-expression].
[:zh_CN]
闭包类型是在包含其对应的 [~lambda-表达式]的最小的块作用域、类作用域或命名空间
作用域之中声明的。

[enter:note]
[:en]
This determines the set of namespaces and classes associated with the closure
type ([#basic.lookup.argdep]).
[:zh_CN]
这决定了闭包类型所关联的命名空间和类的集合（[#basic.lookup.argdep]）。

[:en]
The parameter types of a [~lambda-declarator] do not affect these associated
namespaces and classes.
[:zh_CN]
[~lambda-声明符]中的形参类型对这些关联的命名空间和类没有影响。
[exit:note]

[:en]
The closure type is not an aggregate type ([#dcl.init.aggr]).
[:zh_CN]
闭包类型不是聚合类型（[#dcl.init.aggr]）。

[:en]
An implementation may define the closure type differently from what is described
below provided this does not alter the observable behavior of the program other
than by changing:
[:zh_CN]
实现可以对闭包类型进行与下文的描述不同的定义，但要求这不能改变除以下各项之外的
程序的可观察行为：

[list]
[item]
[:en@~]
the size and/or alignment of the closure type,
[:zh_CN@~]
闭包类型的大小和/或对齐，

[item]
[:en@~]
whether the closure type is trivially copyable ([#class.prop]), or
[:zh_CN@~]
闭包类型是否是可平凡复制的（[#class.prop]），或者

[item]
[:en@~]
whether the closure type is a standard-layout class ([#class.prop]).
[:zh_CN@~]
闭包类型是否是标准布局类（[#class.prop]）。
[list:end]

[:en]
An implementation shall not add members of rvalue reference type to the closure
type.
[:zh_CN]
实现不应向闭包类型添加右值引用类型的成员。

[para]
[:en]
The closure type for a non-generic [~lambda-expression] has a public inline
function call operator ([#over.call]) whose parameters and return type are
described by the [~lambda-expression][=']s [~parameter-declaration-clause] and
[~trailing-return-type] respectively.
[:zh_CN]
非泛型[~lambda-表达式]的闭包类型具有一个公开的内联函数调用运算符（[#over.call]）
，其形参和返回类型分别由该 [~lambda-表达式]的[~形参声明子句]和[~尾部返回类型]
说明。

[:en]
For a generic lambda, the closure type has a public inline function call
operator member template ([#temp.mem]) whose [~template-parameter-list] consists
of the specified [~template-parameter-list], if any, to which is appended one
invented type [~template-parameter] for each occurrence of [`auto] in the
lambda[=']s [~parameter-declaration-clause], in order of appearance.
[:zh_CN]
对于泛型 lambda，其闭包类型具有一个公开的内联函数调用运算符成员模板
（[#temp.mem]），其[~模板形参列表]由该 lambda 所指定的[~模板形参列表]（如果有），
并为该 lambda 的[~形参声明子句]中出现的每个 [`auto]，按照出现顺序向其添加一个
虚构的类型[~模板形参]所构成。

[:en]
The invented type [~template-parameter] is a template parameter pack if the
corresponding [~parameter-declaration] declares a function parameter pack
([#dcl.fct]).
[:zh_CN]
如果的[~形参声明式]声明了函数形参包组，则对应的虚构的类型[~模板形参]是模板形参
包组（[#dcl.fct]）。

[:en]
The return type and function parameters of the function call operator template
are derived from the [~lambda-expression][=']s [~trailing-return-type] and
[~parameter-declaration-clause] by replacing each occurrence of [`auto] in the
[~decl-specifier]s of the [~parameter-declaration-clause] with the name of the
corresponding invented [~template-parameter].
[:zh_CN]
函数调用运算符模板的返回类型和函数形参，从该[~lambda-表达式]的[~尾部返回类型]和
[~形参声明子句]，通过将[~形参声明子句]的[~声明说明符]中的每个 [`auto]，替换为
其对应的虚构[~模板形参]的名字而衍生出来。

[:en]
The [~requires-clause] of the function call operator template is the
[~requires-clause] immediately following [`<] [~template-parameter-list] [`>],
if any.
[:zh_CN]
函数调用运算符模板的 [~requires-子句]是紧跟在“[`<] [~模板形参列表] [`>]”之后的
[~requires-子句]（如果有）。

[:en]
The trailing [~requires-clause] of the function call operator or operator
template is the [~requires-clause] following the [~lambda-declarator], if any.
[:zh_CN]
函数调用运算符或运算符模板的尾部 [~requires-子句]是跟在 [~lambda-声明符]后面的
[~requires-子句]（如果有）。

[enter:example]
[codeblock]
auto glambda = [](auto a, auto&& b) { return a < b; };
bool b = glambda(3, 3.14);                             // OK

auto vglambda = [](auto printer) {
  return [=](auto&& ... ts) {                          // [:en] OK: [`ts] is a function parameter pack
                                                       // [|:zh_CN] OK：[`ts] 是函数形参包组
    printer(std::forward<decltype(ts)>(ts)...);

    return [=]() {
      printer(ts ...);
    };
  };
};
auto p = vglambda( [](auto v1, auto v2, auto v3)
                   { std::cout << v1 << v2 << v3; } );
auto q = p(1, 'a', 3.14);                              // [:en] OK: outputs [`1a3.14]
                                                       // [|:zh_CN] OK：输出 [`1a3.14]
q();                                                   // [:en] OK: outputs [`1a3.14]
                                                       // [|:zh_CN] OK：输出 [`1a3.14]
[codeblock:end]
[exit:example]

[para]
[:en]
The function call operator or operator template is declared [`const]
([#class.mfct.non-static]) if and only if the [~lambda-expression][=']s
[~parameter-declaration-clause] is not followed by [`mutable].
[:zh_CN]
函数调用运算符和运算符模板，当且仅当 [~lambda-表达式]的[~形参声明子句]不跟着
[`mutable] 时，被声明为 [`const]（[#class.mfct.non-static]）。

[:en]
It is neither virtual nor declared [`volatile].
[:zh_CN]
它既不是虚函数，也不被声明为 [`volatile]。

[:en]
Any [~noexcept-specifier] specified on a [~lambda-expression] applies to
the corresponding function call operator or operator template.
[:zh_CN]
[~lambda-表达式]中给出的[~noexcept-说明符]应用于函数调用运算符或运算符模板。

[:en]
An [~attribute-specifier-seq] in a [~lambda-declarator] appertains to the type
of the corresponding function call operator or operator template.
[:zh_CN]
[~lambda-声明符]中的[~特性说明符序列]属于函数调用运算符或运算符模板的类型。

[:en]
The function call operator or any given operator template specialization is a
constexpr function if either the corresponding [~lambda-expression][=']s
[~parameter-declaration-clause] is followed by [`constexpr], or it satisfies the
requirements for a constexpr function ([#dcl.constexpr]).
[:zh_CN]
函数调用运算符或给定的任何运算符模板特例，当其对应的[~lambda-表达式]的[~形参声明
子句]之后跟着 [`constexpt]，或者它满足对 constexpr 函数的要求
（[#dcl.constexpr]）时，就是 constexpr 函数。

[enter:note]
[:en]
Names referenced in the [~lambda-declarator] are looked up in the context in
which the [~lambda-expression] appears.
[:zh_CN]
[~lambda-声明符]中所引用的名字，是在出现该[~lambda-表达式]的语境中进行查找的。
[exit:note]

[enter:example]
[codeblock]
auto ID = [](auto a) { return a; };
static_assert(ID(3) == 3); // OK

struct NonLiteral {
  NonLiteral(int n) : n(n) { }
  int n;
};
static_assert(ID(NonLiteral{3}).n == 3); // [:en] ill-formed
                                         // [|:zh_CN] 非良构
[codeblock:end]
[exit:example]

[para]
[enter:example]
[codeblock]
auto monoid = [](auto v) { return [=] { return v; }; };
auto add = [](auto m1) constexpr {
  auto ret = m1();
  return [=](auto m2) mutable {
    auto m1val = m1();
    auto plus = [=](auto m2val) mutable constexpr
                   { return m1val += m2val; };
    ret = plus(m2());
    return monoid(ret);
  };
};
constexpr auto zero = monoid(0);
constexpr auto one = monoid(1);
static_assert(add(one)(zero)() == one()); // OK

// [:en] Since [`two] below is not declared [`constexpr], an evaluation of its [`constexpr] member function call operator
// [|:zh_CN] 由于下面的 [`two] 并未声明为 [`constexpr]，对其 [`constexpr] 成员函数调用运算符的求值，
// [:en@~] cannot perform an lvalue-to-rvalue conversion on one of its subobjects (that represents its capture)
// [|:zh_CN@~] 无法在常量表达式之中对它的子对象之一（用以表示其捕获）
// [:en@~] in a constant expression.
// [|:zh_CN@~] 实施左值向右值转换。
auto two = monoid(2);
assert(two() == 2); // [:en] OK, not a constant expression.
                    // [|:zh_CN] OK，不是常量表达式。
static_assert(add(one)(one)() == two()); // [:en] ill-formed: [`two()] is not a constant expression
                                         // [|:zh_CN] 非良构：[`two()] 不是常量表达式
static_assert(add(one)(one)() == monoid(2)()); // OK
[codeblock:end]
[exit:example]

[para]
[:en]
The function call operator or operator template may be constrained
([#temp.constr.decl]) by a [~constrained-parameter] ([#temp.param]),
a [~requires-clause] ([#temp]), or a trailing [~requires-clause] ([#dcl.decl]).
[:zh_CN]
函数调用运算符或运算符模板可以通过[~受约束形参]（[#temp.param]，
[#temp.constr.decl]），[~requires-子句]（[#temp]），或者尾部 [~requires-子句]
（[#dcl.decl]）来进行约束（[#temp.constr.decl]）。

[enter:example]
[codeblock]
template <typename T> concept C1 = /* ... */;
template <std::size_t N> concept C2 = /* ... */;
template <typename A, typename B> concept C3 = /* ... */;

auto f = []<typename T1, C1 T2> requires C2<sizeof(T1) + sizeof(T2)>
         (T1 a1, T1 b1, T2 a2, auto a3, auto a4) requires C3<decltype(a4), T2> {
  // [:en] [`T2] is a constrained parameter,
  // [|:zh_CN] [`T2] 是受约束形参，
  // [:en@~] [`T1] and [`T2] are constrained by a [~requires-clause], and
  // [|:zh_CN@~] [`T1] 和 [`T2] 被 [~requires-子句]约束，而
  // [:en@~] [`T2] and the type of [`a4] are constrained by a trailing [~requires-clause].
  // [|:zh_CN@~] [`T2] 和 [`a4] 的类型则被尾部 [~requires-子句]约束。
};
[codeblock:end]
[exit:example]

[para]
[:en]
The closure type for a non-generic [~lambda-expression] with no
[~lambda-capture] whose constraints (if any) are satisfied has a conversion
function to pointer to function with [=Cpp] language linkage ([#dcl.link])
having the same parameter and return types as the closure type[=']s function
call operator.
[:zh_CN]
没有 [~lambda-捕获式]的非泛型 [~lambda-表达式]（其约束（如果有）均得以满足）的
闭包类型，具有一个转换函数，转换为指向具有同其闭包类型的函数调用运算符相同的形参
和返回类型，并具有 [=Cpp] 语言连接（[#dcl.link]）的函数的指针。

[:en]
The conversion is to ["pointer to [`noexcept] function] if the function call
operator has a non-throwing exception specification.
[:zh_CN]
如果函数调用运算符带有无抛出异常说明，则它转换为“[`noexcept] 函数的指针”。

[:en]
The value returned by this conversion function is the address of a function [`F]
that, when invoked, has the same effect as invoking the closure type[=']s
function call operator.
[:zh_CN]
这个转换函数返回的值为某个函数 [`F] 的地址，当调用它时，与调用闭包类型的函数调用
运算符具有相同的效果。

[:en]
[`F] is a constexpr function if the function call operator is a constexpr
function.
[:zh_CN]
当函数调用运算符是 constexpr 函数时，[`F] 也是 constexpr 函数。

[:en]
For a generic lambda with no [~lambda-capture], the closure type has a
conversion function template to pointer to function.
[:zh_CN]
没有 [~lambda-捕获式]的泛型 lambda 的闭包类型，具有一个转换为函数指针的转换函数
模板。

[:en]
The conversion function template has the same invented template parameter list,
and the pointer to function has the same parameter types, as the function call
operator template.
[:zh_CN]
该转换函数模板带有相同的虚构的模板形参列表，而该函数指针与其函数调用运算符模板
具有相同的形参类型。

[:en]
The return type of the pointer to function shall behave as if it were a
[~decltype-specifier] denoting the return type of the corresponding function
call operator template specialization.
[:zh_CN]
该函数指针的返回类型，应当表现为如同它是代表其所对应的函数调用运算符模板的特例的
返回类型的[~decltype-说明符]。

[para]
[enter:note]
[:en]
If the generic lambda has no [~trailing-return-type] or the
[~trailing-return-type] contains a placeholder type, return type deduction of
the corresponding function call operator template specialization has to be done.
[:zh_CN]
如果泛型 lambda 没有[~尾部返回类型]或其[~尾部返回类型]包含占位类型，则必须对其所
对应的函数调用运算符模板的特例进行返回类型推断。

[:en]
The corresponding specialization is that instantiation of the function call
operator template with the same template arguments as those deduced for the
conversion function template.
[:zh_CN]
所对应的特例，就是与转换函数模板所推断的相同模板实参，进行的函数调用运算符模板
实例化。

[:en]
Consider the following:
[:zh_CN]
考虑：

[codeblock]
auto glambda = [](auto a) { return a; };
int (*fp)(int) = glambda;
[codeblock:end]

[:en]
The behavior of the conversion function of [`glambda] above is like
that of the following conversion function:
[:zh_CN]
上述 [`glambda] 的转换函数的行为与以下转换函数相似：

[codeblock]
struct Closure {
  template<class T> auto operator()(T t) const { /* ... */ }
  template<class T> static auto lambda_call_operator_invoker(T a) {
    // [:en] forwards execution to [`operator()(a)] and therefore has
    // [|:zh_CN] 转发执行给 [`operator()(a)]，且
    // [:en@~] the same return type deduced
    // [|:zh_CN@~] 与其推断的返回类型相同
    /* ... */
  }
  template<class T> using fptr_t =
     decltype(lambda_call_operator_invoker(declval<T>())) (*)(T);

  template<class T> operator fptr_t<T>() const
    { return &lambda_call_operator_invoker; }
};
[codeblock:end]
[exit:note]

[enter:example]
[codeblock]
void f1(int (*)(int))   { }
void f2(char (*)(int))  { }

void g(int (*)(int))    { }  // #1
void g(char (*)(char))  { }  // #2

void h(int (*)(int))    { }  // #3
void h(char (*)(int))   { }  // #4

auto glambda = [](auto a) { return a; };
f1(glambda);  // OK
f2(glambda);  // [:en] error: ID is not convertible
              // [|:zh_CN] 错误：ID 不能进行转换
g(glambda);   // [:en] error: ambiguous
              // [|:zh_CN] 错误：由歧义
h(glambda);   // [:en] OK: calls #3 since it is convertible from ID
              // [|:zh_CN] OK：调用 #3，由于可以从 ID 进行转换
int& (*fpi)(int*) = [](auto* a) -> auto& { return *a; }; // OK
[codeblock:end]
[exit:example]

[para]
[:en]
The value returned by any given specialization of this conversion function
template is the address of a function [`F] that, when invoked, has the same
effect as invoking the generic lambda[=']s corresponding function call operator
template specialization.
[:zh_CN]
该转换函数模板的任何给定特例所返回的值，都应当为某个函数的地址，当调用它时，与
调用该泛型 lambda 的对应函数调用运算符模板特例具有相同的效果。

[:en]
[`F] is a constexpr function if the corresponding specialization is a constexpr
function.
[:zh_CN]
当对应的特例是 constexpr 函数时，[`F] 也是 constexpr 函数。

[enter:note]
[:en]
This will result in the implicit instantiation of the generic lambda[=']s body.
[:zh_CN]
这将导致该泛型 lambda 的函数体进行隐式的实例化。

[:en]
The instantiated generic lambda[=']s return type and parameter types shall match
the return type and parameter types of the pointer to function.
[:zh_CN]
所实例化的泛型 lambda 的返回类型和形参类型，应当与该函数指针的返回类型和形参类型
相匹配。
[exit:note]

[enter:example]
[codeblock]
auto GL = [](auto a) { std::cout << a; return a; };
int (*GL_int)(int) = GL;  // [:en] OK: through conversion function template
                          // [|:zh_CN] OK：通过转换函数模板
GL_int(3);                // [:en] OK: same as [`GL(3)]
                          // [|:zh_CN] OK：与 [`GL(3)] 相同
[codeblock:end]
[exit:example]

[para]
[:en]
The conversion function or conversion function template is public, constexpr,
non-virtual, non-explicit, const, and has a non-throwing exception specification
([#except.spec]).
[:zh_CN]
转换函数或转换函数模板是公用的，constexpr，非虚的，非 explicit 的成员，且带有
无抛出异常说明（[#except.spec]）。

[enter:example]
[codeblock]
auto Fwd = [](int (*fp)(int), auto a) { return fp(a); };
auto C = [](auto a) { return a; };

static_assert(Fwd(C,3) == 3); // OK

// [:en] No specialization of the function call operator template can be constexpr (due to the local static).
// [|:zh_CN] 函数调用运算符模板的特例都不是 constexpr（由于其局部静态变量）
auto NC = [](auto a) { static int s; return a; };
static_assert(Fwd(NC,3) == 3); // [:en] ill-formed
                               // [|:zh_CN] 非良构
[codeblock:end]
[exit:example]

[para]
[:en]
The [~lambda-expression][=']s [~compound-statement] yields the [~function-body]
([#dcl.fct.def]) of the function call operator, but for purposes of name lookup
([#basic.lookup]), determining the type and value of [`this] ([#class.this]) and
transforming [~id-expression]s referring to non-static class members into class
member access expressions using [`(*this)] ([#class.mfct.non-static]), the
[~compound-statement] is considered in the context of the [~lambda-expression].
[:zh_CN]
由[~lambda-表达式]的[~组合语句]生成函数调用运算符的[~函数体]（[#dcl.fct.def]），
但在进行名字查找时（[#basic.lookup]），当确定 [`this] 的类型和值
（[#class.this]），以及使用 [`(*this)] 将指代非静态类成员的[~标识表达式]变形为
类成员访问表达式（[#class.mfct.non-static]）时，将[~组合语句]当作处于该
[~lambda-表达式]所在的语境之中进行。

[enter:example]
[codeblock]
struct S1 {
  int x, y;
  int operator()(int);
  void f() {
    [=]()->int {
      return operator()(this->x + y); // [:en] equivalent to [`S1::operator()(this->x + (*this).y)]
                                      // [|:zh_CN] 等价于 [`S1::operator()(this->x + (*this).y)]
                                      // [:en@~] [`this] has type [`S1*]
                                      // [|:zh_CN@~] [`this] 类型为 [`S1*]
    };
  }
};
[codeblock:end]
[exit:example]

[:en]
Further, a variable [`__func__] is implicitly defined at the beginning of the
[~compound-statement] of the [~lambda-expression], with semantics as described
in [#dcl.fct.def.general].
[:zh_CN]
此外，变量 [`__func__] 在 [~lambda-表达式]的[~组合语句]的开头被隐含地定义，并
具有如 [#dcl.fct.def.general] 所说明的语义。

[para]
[:en]
The closure type associated with a [~lambda-expression] has no default
constructor if the [~lambda-expression] has a [~lambda-capture] and a defaulted
default constructor otherwise.
[:zh_CN]
如果 [~lambda-表达式]带有 [~lambda-捕获式]，则该 [~lambda-表达式]所关联的闭包
类型没有默认构造函数，否则它有预置的默认构造函数。

[:en]
It has a defaulted copy constructor and a defaulted move constructor
([#class.copy.ctor]).
[:zh_CN]
它带有预置的复制构造函数和预置的移动构造函数（[#class.copy.ctor]）。

[:en]
It has a deleted copy assignment operator if the [~lambda-expression] has a
[~lambda-capture] and defaulted copy and move assignment operators otherwise
([#class.copy.assign]).
[:zh_CN]
如果该 [~lambda-表达式]带有 [~lambda-捕获式]，则它带有一个弃置的复制赋值运算符，
否则它带有预置的复制和移动赋值运算符（[#class.copy.assign]）。

[enter:note]
[:en]
These special member functions are implicitly defined as usual, and might
therefore be defined as deleted.
[:zh_CN]
这些特殊成员函数以常规方式进行隐式定义，并可能因此被定义为弃置的。
[exit:note]

[para]
[:en]
The closure type associated with a [~lambda-expression] has an
implicitly-declared destructor ([#class.dtor]).
[:zh_CN]
与 [~lambda-表达式]相关联的闭包类型，具有隐式声明的析构函数（[#class.dtor]）。

[para]
[:en]
A member of a closure type shall not be explicitly instantiated
([#temp.explicit]), explicitly specialized ([#temp.expl.spec]), or named in a
friend declaration ([#class.friend]).
[:zh_CN]
闭包类型的成员不能被显式实例化（[#temp.explicit]），显式特化（[#temp.expl.spec]）
，或者在友元声明式中被指名（[#class.friend]）。
