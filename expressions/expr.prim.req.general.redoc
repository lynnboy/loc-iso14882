[section#expr.prim.req.general
    [:en] General
    [:zh_CN] 概述
]

[para]
[:en]
A [~requires-expression] provides a concise way to express requirements on
template arguments that can be checked by name lookup ([#basic.lookup])
or by checking properties of types and expressions.
[:zh_CN]
[~requires-表达式]提供一种简洁的方式来表达对模板实参所实施的规定，它们可以由
名字查找（[#basic.lookup]）或者通过检查类型和表达式的性质而予以检查。

[syntax]
[rule requires-expression [:zh_CN] requires-表达式 ]
    [| [`:key requires] [~:opt requirement-parameter-list] requirement-body ]
[rule:end]

[rule requirement-parameter-list [:zh_CN] 规定形参列表 ]
    [| [`(] parameter-declaration-clause [`)] ]
[rule:end]

[rule requirement-body [:zh_CN] 规定体 ]
    [| [`{] requirement-seq [`}] ]
[rule:end]

[rule requirement-seq [:zh_CN] 规定序列 ]
    [| requirement ]
    [| requirement requirement-seq ]
[rule:end]

[rule requirement [:zh_CN] 规定 ]
    [| simple-requirement ]
    [| type-requirement ]
    [| compound-requirement ]
    [| nested-requirement ]
[rule:end]
[syntax:end]

[para]
[:en]
A [~requires-expression] is a prvalue of type [`bool] whose value is described
below.
[:zh_CN]
[~requires-表达式] 是 [`bool] 类型的纯右值，其值在下文中描述。

[:en]
Expressions appearing within a [~requirement-body] are unevaluated operands
([#term.unevaluated.operand]).
[:zh_CN]
出现于[~规定体]中的表达式是免求值操作数（[#term.unevaluated.operand]）。

[para]
[begin:example]
[:en]
A common use of [~requires-expression]s is to define requirements in concepts
such as the one below:
[:zh_CN]
[~requires-表达式]的常见用法是用来定义概念中的规定，比如以下代码：

[codeblock]
template<typename T>
  concept R = requires (T i) {
    typename T::type;
    {*i} -> std::[[redoc("`:c>")]]convertible_to<const typename T::type&>;
  };
[codeblock:end]

[:en]
A [~requires-expression] can also be used in a [~requires-clause] ([#temp.pre])
as a way of writing ad hoc constraints on template arguments such as the one
below:
[:zh_CN]
[~requires-表达式]还可以用在[~requires-子句]（[#temp.pre]）中，作为一种针对
模板实参编写专门约束的方式，比如以下代码：

[codeblock]
template<typename T>
  requires requires (T x) { x + x; }
    T add(T a, T b) { return a + b; }
[codeblock:end]

[:en]
The first [`:key requires] introduces the [~requires-clause], and the second
introduces the [~requires-expression].
[:zh_CN]
第一个 [`:key requires] 引入 [~requires-子句]，而第二个引入 [~requires-表达式]。
[end:example]

[para]
[:en]
A [~requires-expression] may introduce local parameters using a
[~parameter-declaration-clause] ([#dcl.fct]).
[:zh_CN]
[~requires-表达式]可以使用[~形参声明子句]（[#dcl.fct]）来引入局部形参。

[:en]
A local parameter of a [~requires-expression] shall not have a default argument.
[:zh_CN]
[~requires-表达式]的局部形参不能带有默认实参。

[:en]
These parameters have no linkage, storage, or lifetime; they are only used
as notation for the purpose of defining [~requirement]s.
[:zh_CN]
这些形参没有连接、存储或生存期；它们仅用作定义[~规定]的语法记号。

[:en]
The [~parameter-declaration-clause] of a [~requirement-parameter-list] shall not
terminate with an ellipsis.
[:zh_CN]
[~规定形参列表]的[~形参声明子句]不能以省略号结尾。

[begin:example]
[codeblock]
template<typename T>
concept C = requires(T t, ...) {    // [:en] error: terminates with an ellipsis \
                                    [:zh_CN] 错误：以省略号结尾
  t;
};
[codeblock:end]
[end:example]

[para]
[:en] The substitution of template arguments into a [~requires-expression] can
result in the formation of invalid types or expressions in the immediate context
of its [~requirement]s ([#temp.deduct.general]) or the violation of the semantic
constraints of those [~requirement]s.
[:zh_CN] 将模板实参代换到[~requires-表达式]中时可能导致在其[~规定]的直接语境中
形成无效的类型或表达式，或者违反对这些[~规定]的语义约束。

[:en]
In such cases, the [~requires-expression] evaluates to [`:key false]; it does
not cause the program to be ill-formed.
[:zh_CN]
这种情况下，[~requires-表达式]求值为 [`:key false]；它并不会导致程序非良构。

[:en]
The substitution and semantic constraint checking proceeds in lexical order and
stops when a condition that determines the result of the [~requires-expression]
is encountered.
[:zh_CN]
以词法顺序进行实参代换和语义约束检查，当遇到可以确定该 [~requires-表达式]的结果
的条件时停止。

[:en]
If substitution (if any) and semantic constraint checking succeed, the
[~requires-expression] evaluates to [`:key true].
[:zh_CN]
如果实参代换（如果有）和语义约束检查均成功，则该 [~requires-表达式]求值为
[`:key true]。

[begin:note]
[:en]
If a [~requires-expression] contains invalid types or expressions in its
[~requirement]s, and it does not appear within the declaration of a templated
entity, then the program is ill-formed.
[:zh_CN]
如果 [~requires-表达式]在其[~规定]中包含无效类型或表达式，并且它并非出现于模板化
的实体声明式之中，则程序非良构。
[end:note]

[:en]
If the substitution of template arguments into a [~requirement] would always
result in a substitution failure, the program is ill-formed; no diagnostic
required.
[:zh_CN]
如果向某个[~规定]中进行模板实参代换的结果总是代换失败，则程序非良构；无须诊断。

[begin:example]
[codeblock]
template<typename T> concept C =
requires {
  new decltype((void)T{});      // [:en] ill-formed, no diagnostic required \
                                [:zh_CN] 非良构，无须诊断
};
[codeblock:end]
[end:example]
