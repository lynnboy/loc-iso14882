[section#conv.ptr
    [:en] Pointer conversions
    [:zh_CN] 指针转换
]

[para]
[:en]
[%conversion[!pointer]]
[%null pointer conversion[%conversion[!null pointer]]]
[%pointer[!zero][%value[!null pointer]]]
[%value[!null pointer]]
A [+null pointer constant [%constant[!null pointer]]] is an integer literal
([#lex.icon]) with value zero or a prvalue of type [`std::nullptr_t].
[:zh_CN]
[%转换[!指针～]]
[%空指针转换[%转换[!空指针～]]]
[%指针[!零][%值[!空指针～]]]
[%值[!空指针～]]
[+空指针常量 [%常量[!空指针～]]]是值为零的整数字面量（[#lex.icon]）或
[`std::nullptr_t] 类型的纯右值。

[:en] A null pointer constant can be converted to a pointer type; the result is
the null pointer value of that type ([#basic.compound]) and is distinguishable
from every other value of object pointer or function pointer type.
[:zh_CN] 空指针常量可以转换为指针类型；其结果为该类型的空指针值（[#basic.compound]），
并且与任何其他对象指针或函数指针类型的值都不相同。

[:en] Such a conversion is called a [+null pointer conversion[%conversion
[!null pointer]]].
[:zh_CN] 这种转换被称为[+空指针转换[%转换[!空指针～]]]。

[:en] The conversion of a null pointer constant to a pointer to cv-qualified
type is a single conversion, and not the sequence of a pointer conversion
followed by a qualification conversion ([#conv.qual]).
[:zh_CN] 把空指针常量转换为指向 cv 限定的类型的指针是单个转换，而不是指针转换跟着
限定转换（[#conv.qual]）的序列。

[:en] A null pointer constant of integral type can be converted to a prvalue of
type [`std::nullptr_t].
[:zh_CN] 整型类型的空指针常量可以转换为类型 [`std::nullptr_t] 的纯右值。

[begin:note]
[:en] The resulting prvalue is not a null pointer value.
[:zh_CN] 所产生的纯右值不是空指针值。
[end:note]

[para]
[:en] A prvalue of type [=lq]pointer to [=cv] [`T][=rq], where [`T] is an object
type, can be converted to a prvalue of type [=lq]pointer to [=cv] [`:key void][=rq].
[:zh_CN] “[=cv] [`T] 的指针”类型的纯右值，其中 [`T] 为对象类型，可以转换为
“[=cv] [`:key void] 的指针”类型的纯右值。

[:en] The pointer value ([#basic.compound]) is unchanged by this conversion.
[:zh_CN] 这种转换不改变指针的值（[#basic.compound]）。

[para]
[:en] A prvalue [`v] of type [=lq]pointer to [=cv] [`D][=rq], where [`D] is a
complete class type, can be converted to a prvalue of type [=lq]pointer to
[=cv] [`B][=rq], where [`B] is a base class ([#class.derived]) of [`D].
[:zh_CN] “[=cv] [`D] 的指针”类型的纯右值 [`v]，其中 [`D] 为完整的类类型，可以转换为
“[=cv] [`B] 的指针”类型的纯右值，其中 [`B] 是 [`D] 的基类（[#class.derived]）。

[:en] If [`B] is an inaccessible ([#class.access]) or ambiguous ([#class.member.lookup])
base class of [`D], a program that necessitates this conversion is ill-formed.
[:zh_CN] 如果 [`B] 是 [`D] 的不可访问的（[#class.access]）或有歧义的
（[#class.member.lookup]）基类，则要求进行这种转换的程序是非良构的。

[:en] If [`v] is a null pointer value, the result is a null pointer value.
[:zh_CN] 如果 [`v] 是空指针值，则结果是空指针值。

[:en] Otherwise, if [`B] is a virtual base class of [`D] and [`v] does not point
to an object whose type is similar ([#conv.qual]) to [`D] and that is within its
lifetime or within its period of construction or destruction ([#class.cdtor]),
the behavior is undefined.
[:zh_CN] 否则，如果 [`B] 是 [`D] 的虚基类，且 [`v] 并不指向类型与 [`D] 相似（[#conv.qual]）
且处于生存期之内或在构造或销毁阶段之中（[#class.cdtor]）的对象，则其行为未定义。

[:en] Otherwise, the result is a pointer to the base class subobject of
the derived class object.
[:zh_CN] 否则，其结果为指向派生类对象的基类子对象的指针。
