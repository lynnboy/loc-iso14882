[section#expr.cond
    [:en] Conditional operator
    [:zh_CN] 条件运算符

[:en]
[%expression[!conditional operator]]
[%operator[!conditional expression]]
[%[`?:][%operator[!conditional expression]]]
[:zh_CN]
[%表达式[!条件运算符～]]
[%运算符[!条件表达式～]]
[%[`?:][%运算符[!条件表达式～]]]
]

[syntax]
[rule conditional-expression [:zh_CN] 条件表达式 ]
    [| logical-or-expression ]
    [| logical-or-expression [`?] expression [`:] assignment-expression ]
[rule:end]
[syntax:end]

[para]
[:en]
Conditional expressions group right-to-left.
[:zh_CN]
条件表达式按从右向左分组。

[:en]
The first expression is contextually converted to [`bool] (Clause [#conv]).
[:zh_CN]
第一个表达式被按语境转换为 [`bool]（第 [#conv] 章）。

[:en]
It is evaluated and if it is [`true], the result of the conditional expression
is the value of the second expression, otherwise that of the third expression.
[:zh_CN]
对它求值，若它为 [`true] 则条件表达式的结果为第二个表达式的值，否则就是第三个
表达式的值。

[:en]
Only one of the second and third expressions is evaluated.
[:zh_CN]
第二个和第三个表达式之中只有一个被求值。

[:en]
Every [%value computation] value computation and side effect associated with the
first expression is sequenced before every value computation and side effect
associated with the second or third expression.
[:zh_CN]
任何与第一个表达式相关联的[%值计算]值计算和副作用都按顺序早于任何与第二个或第三
个表达式相关联的值计算和副作用。

[para]
[:en]
If either the second or the third operand has type [`void], one of the following
shall hold:
[:zh_CN]
若第二个或第三个操作数具有类型 [`void]，则应满足如下之一：

[list]
[:en]
[%conditional-expression[!throw-expression in]]
[:zh_CN]
[%条件表达式[!～中的 throw-表达式]]
[item]
[:en]
The second or the third operand (but not both) is a (possibly parenthesized)
[~throw-expression] ([#expr.throw]); the result is of the type and value
category of the other.
[:zh_CN]
第二个或第三个操作数（但不同时）是（可能带有括号的）[~throw-表达式]
（[#except.throw]）；其结果具有另一个操作数的类型和值类别。

[:en]
The [~conditional-expression] is a bit-field if that operand is a bit-field.
[:zh_CN]
若该操作数是位字段则该[~条件表达式]是位字段。

[item]
[:en]
Both the second and the third operands have type [`void]; the result is of type
[`void] and is a prvalue.
[:zh_CN]
第二个和第三个操作数都具有类型 [`void]；其结果类型为 [`void] 且为纯右值。

[enter:note]
[:en]
This includes the case where both operands are [~throw-expression]s.
[:zh_CN]
这包括两个操作数都是 [~throw-表达式]的情况。
[exit:note]
[list:end]

[para]
[:en]
Otherwise, if the second and third operand are glvalue bit-fields of the same
value category and of types [$cv1] [`T] and [$cv2] [`T], respectively, the
operands are considered to be of type [$cv] [`T] for the remainder of this
section, where [$cv] is the union of [$cv1] and [$cv2].
[:zh_CN]
否则，若第二个或第三个操作数均为具有相同值类别的泛左值位字段，并分别具有类型
[$cv1] [`T] 和 [$cv2] [`T]，则在本节的余下部分中，将两个操作数当成具有类型 [$cv]
[`T]，其中 [$cv] 为 [$cv1] 和 [$cv2] 的合并。

[para]
[:en]
Otherwise, if the second and third operand have different types and either has
(possibly cv-qualified) class type, or if both are glvalues of the same value
category and the same type except for cv-qualification, an attempt is made to
form an implicit conversion sequence ([#over.best.ics]) from each of those
operands to the type of the other.
[:zh_CN]
否则，若第二个或第三个操作数具有不同类型，且其中任何一个具有（可能被 cv 限定的）
类类型，或者若二者均为具有相同的值类别的泛左值，且除了 cv 限定性之外具有相同的
类型，则尝试构成将其中每一个操作数转换为另一个操作数的类型的隐式转换序列
（[#over.best.ics]）。

[enter:note]
[:en]
Properties such as access, whether an operand is a bit-field, or whether
a conversion function is deleted are ignored for that determination.
[:zh_CN]
诸如可访问性，操作数是否是位字段，或者转换函数是否被弃置这样的性质，在这个确定
过程中被忽略。
[exit:note]

[:en]
Attempts are made to form an implicit conversion sequence from an operand
expression [`E1] of type [`T1] to a target type related to the type [`T2] of the
operand expression [`E2] as follows:
[:zh_CN]
尝试确定构成将类型为 [`T1] 的操作数表达式 [`E1] 转换为与操作数表达式 [`E2] 的
类型 [`T2] 相关的目标类型的隐式转换序列的过程如下：

[list]
[item]
[:en]
If [`E2] is an lvalue, the target type is ["lvalue reference to [`T2]], subject
to the constraint that in the conversion the reference must bind directly
([#dcl.init.ref]) to an lvalue.
[:zh_CN]
若 [`E2] 为左值，则目标类型为“[`T2] 的左值引用”，并遵循在转换中引用必须与某个左值
直接绑定（[#dcl.init.ref]）的约束。

[item]
[:en]
If [`E2] is an xvalue, the target type is ["rvalue reference to [`T2]], subject
to the constraint that the reference must bind directly.
[:zh_CN]
若 [`E2] 为临限值，则目标类型为“[`T2] 的右值引用”，并遵循在转换中引用必须直接
绑定的约束。

[item]
[:en]
If [`E2] is a prvalue or if neither of the conversion sequences above can be
formed and at least one of the operands has (possibly cv-qualified) class type:
[:zh_CN]
若 [`E1] 为纯右值，或上述转换序列均无法构成，而至少一个操作数具有（可能被 cv
限定的）类类型时：

[list]
[item]
[:en]
if [`E1] and [`E2] are the same class type (ignoring cv-qualification), or one
is a base class of the other, and [`T2] is at least as cv-qualified as [`T1],
the target type is [`T2].
[:zh_CN]
若 [`E1] 和 [`E2] 具有相同的类类型（忽略其 cv 限定性）或其中之一是另一个的基类，
且 [`T2] 具有至少与 [`T1] 一样的 cv 限定性，则目标类型为 [`T2]。

[item]
[:en]
otherwise, the target type is the type that [`E2] would have after applying the
lvalue-to-rvalue ([#conv.lval]), array-to-pointer ([#conv.array]), and
function-to-pointer ([#conv.func]) standard conversions.
[:zh_CN]
否则，目标类型就是当 [`E2] 实施左值向右值（[#conv.lval]）、数组向指针
（[#conv.array]）和函数向指针（[#conv.func]）标准转换后所具有的类型。
[list:end]
[list:end]

[:en]
Using this process, it is determined whether an implicit conversion sequence can
be formed from the second operand to the target type determined for the third
operand, and vice versa.
[:zh_CN]
通过这个过程，就确定了是否可以构成一个从第二个操作数到由第三个操作数所确定的
目标类型的隐式转换序列，反之亦然。

[:en]
If both sequences can be formed, or one can be formed but it is the ambiguous
conversion sequence, the program is ill-formed.
[:zh_CN]
若两个序列都可以被构成，或其中一个可以构成但它是有歧义的转换序列，则程序非良构。

[:en]
If no conversion sequence can be formed, the operands are left unchanged and
further checking is performed as described below.
[:zh_CN]
若不能构成任何转换序列，则操作数保持不变并进行下文所述的进一步检查。

[:en]
Otherwise, if exactly one conversion sequence can be formed, that conversion is
applied to the chosen operand and the converted operand is used in place of the
original operand for the remainder of this section.
[:zh_CN]
否则，若恰好能构成一个转换序列，则对被选的操作数实施转换，且在本节的余下部分中用
转换后的操作数替代原操作数。

[enter:note]
[:en]
The conversion might be ill-formed even if an implicit conversion sequence could
be formed.
[:zh_CN]
即便可以构成隐式转换序列，这种转换可能仍是非良构的。
[exit:note]

[para]
[:en]
If the second and third operands are glvalues of the same value category and
have the same type, the result is of that type and value category and it is a
bit-field if the second or the third operand is a bit-field, or if both are
bit-fields.
[:zh_CN]
若第二个和第三个操作数是相同值类别的泛左值且具有相同类型，则其结果为该类型和该值
类别，且若第二个或第三个操作数是位字段或都是位字段，则其结果为位字段。

[para]
[:en]
Otherwise, the result is a prvalue.
[:zh_CN]
否则，其结果为纯右值。

[:en]
If the second and third operands do not have the same type, and either has
(possibly cv-qualified) class type, overload resolution is used to determine the
conversions (if any) to be applied to the operands ([#over.match.oper],
[#over.built]).
[:zh_CN]
若第二个和第三个操作数类型不同，且其中有（可能被 cv 限定的）类类型，则使用重载
决议以确定用以应用到操作数上的转换（如果有）（[#over.match.oper]，
[#over.built]）。

[:en]
If the overload resolution fails, the program is ill-formed.
[:zh_CN]
如果此重载决议失败，则程序非良构。

[:en]
Otherwise, the conversions thus determined are applied, and the converted
operands are used in place of the original operands for the remainder of this
section.
[:zh_CN]
否则，实施其所确定的转换，在本节的余下部分中用经过转换的操作数替代原操作数。

[para]
[:en]
Lvalue-to-rvalue ([#conv.lval]), array-to-pointer ([#conv.array]), and
function-to-pointer ([#conv.func]) standard conversions are performed on the
second and third operands.
[:zh_CN]
对第二个和第三个操作数实施左值向右值（[#conv.lval]）、数组向指针
（[#conv.array]）和函数向指针（[#conv.func]）标准转换。

[:en]
After those conversions, one of the following shall hold:
[:zh_CN]
在这些转换之后，应该符合如下情况之一：

[list]
[item]
[:en]
The second and third operands have the same type; the result is of that type and
the result object is initialized using the selected operand.
[:zh_CN]
第二个和第三个操作数具有相同类型；其结果为该类型，且以所选择的操作数对结果对象
进行初始化。

[item]
[:en]
The second and third operands have arithmetic or enumeration type; the usual
arithmetic conversions are performed to bring them to a common type, and the
result is of that type.
[:zh_CN]
第二个和第三个操作数具有算术或枚举类型；对其实施一般算术转换以将它们变为某个公共
类型，而其结果为该类型。

[item]
[:en]
One or both of the second and third operands have pointer type; pointer
conversions ([#conv.ptr]), function pointer conversions ([#conv.fctptr]), and
qualification conversions ([#conv.qual]) are performed to bring them to their
composite pointer type (Clause [#expr]).
[:zh_CN]
第二个和第三个操作数之一或都具有指针类型；实施指针转换（[#conv.ptr]），函数指针
转换（[#conv.fctptr]），和限定性转换（[#conv.qual]）以将它们变为它们的合成指针
类型（第 [#expr] 章）。

[:en]
The result is of the composite pointer type.
[:zh_CN]
其结果为该合成指针类型。

[item]
[:en]
One or both of the second and third operands have pointer to member type;
pointer to member conversions ([#conv.mem]) and qualification conversions
([#conv.qual]) are performed to bring them to their composite pointer type
(Clause [#expr]).
[:zh_CN]
第二个和第三个操作数之一或都具有成员指针类型；实施成员指针转换（[#conv.ptr]）和
限定性转换（[#conv.qual]）以将它们变为它们的合成指针类型（第 [#expr] 章）。

[:en]
The result is of the composite pointer type.
[:zh_CN]
其结果为该合成指针类型。

[item]
[:en]
Both the second and third operands have type [`std::nullptr_t] or one has that
type and the other is a null pointer constant.
[:zh_CN]
第二个和第三个操作数均具有类型 [`std::nullptr_t]，或其中之一具有该类型而另一个
为空指针常量。

[:en]
The result is of type [`std::nullptr_t].
[:zh_CN]
其结果具有类型 [`std::nullptr_t]。

[list:end]
