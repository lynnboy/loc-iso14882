[section#conv.lval
    [:en] Lvalue-to-rvalue conversion
    [:zh_CN] 左值向右值转换
]

[para]
[:en] [%conversion[!lvalue-to-rvalue]] [%type[!incomplete]]
A glvalue ([#basic.lval]) of a non-function, non-array type [`T] can be
converted to a prvalue.[#:fn]
[:zh_CN] [%转换[!左值向右值～]] [%类型[!不完整～]]
非函数且非数组的类型 [`T] 的泛左值（[#basic.lval]）可被转换为纯右值[#:fn]。

[note:foot]
[:en] For historical reasons, this conversion is called the
[=lq]lvalue-to-rvalue[=rq] conversion, even though that name does not accurately
reflect the taxonomy of expressions described in [#basic.lval].
[:zh_CN] 由于历史原因，这种转换被称为“左值向右值”转换，虽然这个名字并不能精确
反映在 [#basic.lval] 中所描述的表达式分类法。
[note:end]

[:en] If [`T] is an incomplete type, a program that necessitates this conversion is ill-formed.
[:zh_CN] 若 [`T] 是不完整类型，则需要进行这种转换的程序是非良构的。

[:en] If [`T] is a non-class type, the type of the prvalue is the cv-unqualified version of [`T].
[:zh_CN] 若 [`T] 不是类类型，则其纯右值的类型是 [`T] 的无 cv 限定的版本。

[:en] Otherwise, the type of the prvalue is [`T].[#:fn]
[:zh_CN] 否则，该纯右值的类型是 [`T][#:fn]。

[note:foot]
[:en] In [=Cpp] class and array prvalues can have cv-qualified types.
[:zh_CN] 在 [=Cpp] 中，类和数组的纯右值可以具有 cv 限定的类型。

[:en] This differs from C, in which non-lvalues never have cv-qualified types.
[:zh_CN] 这与 C 中非左值不会有 cv 限定的类型是不同的。
[note:end]

[para]
[:en] When an lvalue-to-rvalue conversion is applied to an expression [$E], and either
[:zh_CN] 对表达式 [$E] 实施左值向右值转换时，如果要么

[list]
[item]
[:en@~] [$E] is not potentially evaluated, or
[:zh_CN@~] [$E] 未被潜在求值，要么
[item]
[:en@~] the evaluation of [$E] results in the evaluation of a member [$E_[`x]]
of the set of potential results of [$E], and [$E_[`x]] names a variable [`x]
that is not odr-used by [$E_[`x]] ([#basic.def.odr]),
[:zh_CN@~] [$E] 的求值导致对 [$E] 的潜在结果集合中的成员 [$E_[`x]] 的求值，而
[$E_[`x]] 指名的变量 [`x] 未被 [$E_[`x]] ODR 式使用（[#basic.def.odr]），
[list:end]

[:en@~] the value contained in the referenced object is not accessed.
[:zh_CN@~] 则不会访问所引用的对象中的值。

[begin:example]
[codeblock]
struct S { int n; };
auto f() {
  S x { 1 };
  constexpr S y { 2 };
  return [&](bool b) { return (b ? y : x).n; };
}
auto g = f();
int m = g(false);   // [:en] undefined behavior: access of [`x.n] outside its lifetime \
                    [:zh_CN] 未定义行为：对 [`x.n] 的访问超出其生存期
int n = g(true);    // [:en] OK, does not access [`y.n] [:zh_CN] OK，并未访问 [`y.n]
[codeblock:end]
[end:example]

[:en] The result of the conversion is determined according to the following rules:
[:zh_CN] 根据如下规则来确定转换的结果：

[list]
[item]
[:en] If [`T] is [=cv] [`std::nullptr_t], the result is a null pointer constant ([#conv.ptr]).
[:zh_CN] 若 [`T] 是 [=cv] [`std::nullptr_t]，则其纯右值结果是空指针常量（[#conv.ptr]）。

[begin:note]
[:en] Since the conversion does not access the object to which the glvalue refers,
there is no side effect even if [`T] is volatile-qualified ([#intro.execution]),
and the glvalue can refer to an inactive member of a union ([#class.union]).
[:zh_CN] 由于转换时并未访问泛左值所指代的对象，即便 [`T] 是带有 volatile 限定的（[#intro.execution]）
也不会发生任何副作用，而且也允许该泛左值指代联合体的非活跃成员（[#class.union]）。
[end:note]

[item]
[:en] Otherwise, if [`T] has a class type, the conversion copy-initializes the
result object from the glvalue.
[:zh_CN] 否则，若 [`T] 为类类型，则该转换以该泛左值来复制初始化其结果对象。

[item]
[:en] Otherwise, if the object to which the glvalue refers contains an invalid
pointer value ([#basic.compound]), the behavior is [?impldef
lvalue-to-rvalue conversion of an invalid pointer value].
[:zh_CN] 否则，若该泛左值所指代的对象包含无效指针值（[#basic.compound]），
则其行为是[?impldef 对无效指针值进行左值向右值转换]。

[item]
[:en] Otherwise, if the bits in the value representation of the object to which
the glvalue refers are not valid for the object[=']s type, the behavior is undefined.
[:zh_CN] 否则，若该泛左值所指代的对象的值表示中的各个位对于该对象的类型非法，则其行为未定义。

[begin:example]
[codeblock]
bool f() {
  bool b = true;
  char c = 42;
  memcpy(&b, &c, 1);
  return b;         // [:en] undefined behavior if [`42] is not a valid value representation for [`:key bool] \
                    [:zh_CN] 如果 [`42] 不是 [`:key bool] 的合法值表示，则为未定义行为
}
[codeblock:end]
[end:example]

[item]
[:en] Otherwise, the object indicated by the glvalue is read ([#defns.access]),
[:zh_CN] 否则，读取该泛左值指定的对象（[#defns.access]）。

[:en] Let [`V] be the value contained in the object.
[:zh_CN] 令 [`V] 为对象中所包含的值。

[:en] If [`T] is an integer type, the prvalue result is the value of type [`T]
congruent ([#basic.fundamental]) to [`V], and [`V] otherwise.
[:zh_CN] 如果 [`T] 是整数类型，则纯右值结果为与 [`V] 同余的 [`T] 类型的值
（[#basic.fundamental]），否则为 [`V]。
[list:end]

[para]
[begin:note]
[:en] See also [#basic.lval].
[:zh_CN] 另见 [#basic.lval]。
[end:note]
