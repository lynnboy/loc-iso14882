[section#expr.log.or
    [:en] Logical OR operator
    [:zh_CN] 逻辑或运算符

[:en]
[%expression[!logical OR]]
[%operator[!logical OR]]
[%[`||][%operator[!logical OR]]]
[:zh_CN]
[%表达式[!逻辑或～]]
[%运算符[!逻辑或～]]
[%[`||][%运算符[!逻辑或～]]]
]

[syntax]
[rule logical-or-expression [:zh_CN] 逻辑或表达式 ]
    [| logical-and-expression ]
    [| logical-or-expression [`||] logical-and-expression ]
[rule:end]
[syntax:end]

[para]
[:en]
The [`||] operator groups left-to-right.
[:zh_CN]
[`||] 运算符按从左向右分组。

[:en]
The operands are both contextually converted to [`bool] ([#conv]).
[:zh_CN]
其操作数都按语境转换为 [`bool]（[#conv]）。

[:en]
The result is [`true] if either of its operands is [`true], and [`false]
otherwise.
[:zh_CN]
若有任何操作数为 [`true] 则其结果为 [`true]，相反则为 [`false]。

[:en]
Unlike [`|], [`||] guarantees left-to-right evaluation; moreover, the second
operand is not evaluated if the first operand evaluates to [`true].
[:zh_CN]
与 [`|] 不同，[`||] 保证从左向右进行求值；此外，若第一个操作数为 [`true] 则第二
个操作数就不求值。

[para]
[:en]
The result is a [`bool].
[:zh_CN]
其结果为 [`bool]。

[:en]
[%operator[!side effects and logical OR]]
If the second expression is evaluated, the first expression is sequenced before
the second expression ([#intro.execution]).
[:zh_CN]
[%运算符[!副作用和逻辑或～]]
若第二个表达式被求值，则第一个表达式按顺序早于第二个表达式（[#intro.execution]）。
