[section#util.smartptr.shared.cast
    [:en] Casts
    [:zh_CN] 转型
]

[%@lib@member static_pointer_cast[!shared_ptr]]
[codeblock:declaration]
template<class T, class U>
  shared_ptr<T> static_pointer_cast(const shared_ptr<U>& r) noexcept;
template<class T, class U>
  shared_ptr<T> static_pointer_cast(shared_ptr<U>&& r) noexcept;
[codeblock:end]

[div:description]
[para:mandates]
[:en] The expression [`static_cast<T*>((U*)nullptr)] is well-formed.
[:zh_CN] 表达式 [`static_cast<T*>((U*)nullptr)] 良构。

[para:returns]
[codeblock]
shared_ptr<T>([[redoc("^>")]]R, static_cast<typename shared_ptr<T>::element_type*>(r.get()))
[codeblock:end]
[:en] where [`[^R]] is [`r] for the first overload, and [`std::move(r)] for the
second.
[:zh_CN] 其中 [`[^R]] 对于第一个重载为 [`r]，而对于第二个则为 [`std::move(r)]。

[para]
[begin:note]
[:en] The seemingly equivalent expression
[`shared_ptr<T>(static_cast<T*>(r.get()))] can result in undefined behavior,
attempting to delete the same object twice.
[:zh_CN] 看起来等价的表达式 [`shared_ptr<T>(static_cast<T*>(r.get()))] 可以
导致未定义行为，因为其试图两次删除相同的对象。
[end:note]
[div:end]

[%@lib@member dynamic_pointer_cast[!shared_ptr]]
[codeblock:declaration]
template<class T, class U>
  shared_ptr<T> dynamic_pointer_cast(const shared_ptr<U>& r) noexcept;
template<class T, class U>
  shared_ptr<T> dynamic_pointer_cast(shared_ptr<U>&& r) noexcept;
[codeblock:end]

[div:description]
[para:mandates]
[:en] The expression [`dynamic_cast<T*>((U*)nullptr)] is well-formed。
[:zh_CN] 表达式 [`dynamic_cast<T*>((U*)nullptr)] 良构。

[:en] The expression
[`dynamic_cast<typename shared_ptr<T>::element_type*>(r.get())] is well-formed.
[:zh_CN] 表达式 [`dynamic_cast<typename shared_ptr<T>::element_type*>(r.get())]
良构。

[para:expects]
[:en] The expression
[`dynamic_cast<typename shared_ptr<T>::element_type*>(r.get())] has well-defined
behavior.
[:zh_CN] 表达式 [`dynamic_cast<typename shared_ptr<T>::element_type*>(r.get())]
具有恰当定义的行为。

[para:returns]
[list]
[item]
[:en] When [`dynamic_cast<typename shared_ptr<T>::element_type*>(r.get())]
returns a nonzero value [`p], a [`shared_ptr<T>([^R], p)], where [`[^R]] is [`r]
for the first overload, and [`std::move(r)] for the second.
[:zh_CN] 当 [`dynamic_cast<typename shared_ptr<T>::element_type*>(r.get())] 返回
非零值 [`p] 时返回 [`shared_ptr<T>([^R], p)]，其中 [`[^R]] 对于第一个重载为 [`r]，
而对于第二个则为 [`std::move(r)]。

[item]
[:en] Otherwise, [`shared_ptr<T>()].
[:zh_CN] 否则，返回 [`shared_ptr<T>]。
[list:end]

[para]
[begin:note]
[:en] The seemingly equivalent expression
[`shared_ptr<T>(dynamic_cast<T*>(r.get()))] can result in undefined
behavior, attempting to delete the same object twice.
[:zh_CN] 看起来等价的表达式 [`shared_ptr<T>(dynamic_cast<T*>(r.get()))] 可以
导致未定义行为，因为其试图两次删除相同的对象。
[end:note]
[div:end]

[%@lib@member const_pointer_cast[!shared_ptr]]
[codeblock:declaration]
template<class T, class U>
  shared_ptr<T> const_pointer_cast(const shared_ptr<U>& r) noexcept;
template<class T, class U>
  shared_ptr<T> const_pointer_cast(shared_ptr<U>&& r) noexcept;
[codeblock:end]

[div:description]
[para:mandates]
[:en] The expression [`const_cast<T*>((U*)nullptr)] is well-formed.
[:zh_CN] 表达式 [`const_cast<T*>((U*)nullptr)] 良构。

[para:returns]
[codeblock]
shared_ptr<T>([[redoc("^>")]]R, const_cast<typename shared_ptr<T>::element_type*>(r.get()))
[codeblock:end]
[:en] where [`[^R]] is [`r] for the first overload, and [`std::move(r)] for the
second.
[:zh_CN] 其中 [`[^R]] 对于第一个重载为 [`r]，而对于第二个则为 [`std::move(r)]。

[para]
[begin:note]
[:en] The seemingly equivalent expression
[`shared_ptr<T>(const_cast<T*>(r.get()))] can result in undefined behavior,
attempting to delete the same object twice.
[:zh_CN] 看起来等价的表达式 [`shared_ptr<T>(const_cast<T*>(r.get()))] 可以
导致未定义行为，因为其试图两次删除相同的对象。
[end:note]
[div:end]

[%@lib@member reinterpret_pointer_cast[!shared_ptr]]
[codeblock:declaration]
template<class T, class U>
  shared_ptr<T> reinterpret_pointer_cast(const shared_ptr<U>& r) noexcept;
template<class T, class U>
  shared_ptr<T> reinterpret_pointer_cast(shared_ptr<U>&& r) noexcept;
[codeblock:end]

[div:description]
[para:manage]
[:en] The expression [`reinterpret_cast<T*>((U*)nullptr)] is well-formed.
[:zh_CN] 表达式 [`reinterpret_cast<T*>((U*)nullptr)] 良构。

[para:returns]
[codeblock]
shared_ptr<T>([[redoc("^>")]]R, reinterpret_cast<typename shared_ptr<T>::element_type*>(r.get()))
[codeblock:end]
[:en] where [`[^R]] is [`r] for the first overload, and [`std::move(r)] for the
second.
[:zh_CN] 其中 [`[^R]] 对于第一个重载为 [`r]，而对于第二个则为 [`std::move(r)]。

[para]
[begin:note]
[:en] The seemingly equivalent expression
[`shared_ptr<T>(reinterpret_cast<T*>(r.get()))] can result in undefined behavior,
attempting to delete the same object twice.
[:zh_CN] 看起来等价的表达式 [`shared_ptr<T>(reinterpret_cast<T*>(r.get()))] 可以
导致未定义行为，因为其试图两次删除相同的对象。
[end:note]
[div:end]
