[section#allocator.traits.general
    [:en] General
    [:zh_CN] 概述
]

[para]
[:en] The class template [`allocator_traits] supplies a uniform interface to all
allocator types.
[:zh_CN] 类模板 [`allocator_traits] 为所有分配器类型提供一种统一的接口。

[:en] An allocator cannot be a non-class type, however, even if
[`allocator_traits] supplies the entire required interface.
[:zh_CN] 分配器不能是非类类型，即使以 [`allocator_traits] 提供其所需的完整接口也不行。

[begin:note]
[:en] Thus, it is always possible to create a derived class from an allocator.
[:zh_CN] 因此，总是可以从分配器创建派生类。
[end:note]

[:en] If a program declares an explicit or partial specialization of
[`allocator_traits], the program is ill-formed, no diagnostic required.
[:zh_CN] 如果程序声明 [`allocator_traits] 的显式或部分特化式，则程序非良构，无须诊断。

[%@lib allocator_traits]
[codeblock:synopsis]
namespace std {
  template<class Alloc> struct allocator_traits {
    using allocator_type     = Alloc;

    using value_type         = typename Alloc::value_type;

    using pointer            = [[redoc("[=seebelow]")]];
    using const_pointer      = [[redoc("[=seebelow]")]];
    using void_pointer       = [[redoc("[=seebelow]")]];
    using const_void_pointer = [[redoc("[=seebelow]")]];

    using difference_type    = [[redoc("[=seebelow]")]];
    using size_type          = [[redoc("[=seebelow]")]];

    using propagate_on_container_copy_assignment = [[redoc("[=seebelow]")]];
    using propagate_on_container_move_assignment = [[redoc("[=seebelow]")]];
    using propagate_on_container_swap            = [[redoc("[=seebelow]")]];
    using is_always_equal                        = [[redoc("[=seebelow]")]];

    template<class T> using rebind_alloc = [[redoc("[=seebelow]")]];
    template<class T> using rebind_traits = allocator_traits<rebind_alloc<T>>;

    static constexpr pointer allocate(Alloc& a, size_type n);
    static constexpr pointer allocate(Alloc& a, size_type n, const_void_pointer hint);
    static constexpr allocation_result<pointer, size_type>
      allocate_at_least(Alloc& a, size_type n);

    static constexpr void deallocate(Alloc& a, pointer p, size_type n);

    template<class T, class... Args>
      static constexpr void construct(Alloc& a, T* p, Args&&... args);

    template<class T>
      static constexpr void destroy(Alloc& a, T* p);

    static constexpr size_type max_size(const Alloc& a) noexcept;

    static constexpr Alloc select_on_container_copy_construction(const Alloc& rhs);
  };
}
[codeblock:end]
