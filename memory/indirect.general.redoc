[section#indirect.general
    [:en] General
    [:zh_CN] 概述
]

[para]
[:en] An indirect object manages the lifetime of an owned object.
[:zh_CN] 间接对象管理所拥有对象的生存期。

[:en] An indirect object is [+valueless[%valueless[!indirect object]]] if it has
no owned object.
[:zh_CN] 若不拥有对象，则间接对象[+无值[%无值[!间接对象]]]。

[:en] An indirect object may become valueless only after it has been moved from.
[:zh_CN] 间接对象只有在被移动后才可能变得无值。

[para]
[:en] In every specialization [`indirect<T, Allocator>], if the type
[`allocator_traits<Allocator>::value_type] is not the same type as [`T],
the program is ill-formed.
[:zh_CN] 在每个特例 [`indirect<T, Allocator>] 中，若类型
[`allocator_traits<Allocator>::value_type] 与 [`T] 不是相同类型，则程序非良构。

[:en] Every object of type [`indirect<T, Allocator>] uses an object of type
[`Allocator] to allocate and free storage for the owned object as needed.
[:zh_CN] 每个类型为 [`indirect<T, Allocator>] 的对象都使用一个类型为
[`Allocator] 的对象来根据需要为所拥有对象分配和释放存储空间。

[para]
[:en] Constructing an owned object with [`args...] using the allocator [`a]
means calling [`allocator_traits<Allocator>::construct(a, [*p], args...)] where
[`args] is an expression pack, [`a] is an allocator, and [*p] is a pointer
obtained by calling [`allocator_traits<Allocator>::allocate].
[:zh_CN] 使用分配器 [`a] 用 [`args...] 构造所拥有对象，意思是调用
[`allocator_traits<Allocator>::construct(a, [*p], args...)]，其中 [`args] 为表达式包组，
[`a] 为分配器，而 [*p] 是通过调用 [`allocator_traits<Allocator>::allocate] 获得的指针。

[para]
[:en] The member [*alloc] is used for any memory allocation and element construction
performed by member functions during the lifetime of each indirect object.
[:zh_CN] 在每个间接对象的生存期内，成员函数执行的任何内存分配和元素构造都使用 [*alloc] 成员进行。

[:en] The allocator [*alloc] may be replaced only via assignment or [`swap()].
[:zh_CN] 分配器 [*alloc] 只能通过赋值或 [`swap()] 进行替换。

[:en] [`Allocator] replacement is performed by copy assignment, move assignment,
or swapping of the allocator only if ([#container.reqmts]):
[:zh_CN] 仅当
[list]
[item]
[:en@~] [`allocator_traits<Allocator>::propagate_on_container_copy_assignment::value], or
[:zh_CN@~] [`allocator_traits<Allocator>::propagate_on_container_copy_assignment::value]，或
[item]
[:en@~] [`allocator_traits<Allocator>::propagate_on_container_move_assignment::value], or
[:zh_CN@~] [`allocator_traits<Allocator>::propagate_on_container_move_assignment::value]，或
[item] [`allocator_traits<Allocator>::propagate_on_container_swap::value]
[list:end]
[:en@~] is [`true] within the implementation of the corresponding [`indirect] operation.
[:zh_CN@~] 在 [`indirect] 的相应操作的实现中为 [`true] 时（[#container.reqmts]），
才会分别由分配器的复制赋值、移动赋值或交换操作进行 [`Allocator] 的替换。

[para]
[:en] A program that instantiates the definition of the template
[`indirect<T, Allocator>] with a type for the [`T] parameter that is
a non-object type, an array type, [`in_place_t], a specialization of [`in_place_type_t],
or a cv-qualified type is ill-formed.
[:zh_CN] 若程序以非对象类型、数组类型、[`in_place_t]、[`in_place_type_t] 的特例或者 cv
限定类型作为 [`T] 形参的类型来实例化模板 [`indirect<T, Allocator>] 的定义式，则其非良构。

[para]
[:en] The template parameter [`T] of [`indirect] may be an incomplete type.
[:zh_CN] [`indirect] 的模板形参 [`T] 可以是不完整类型。

[para]
[:en] The template parameter [`Allocator] of [`indirect]
shall meet the [^:oc Allocator] requirements.
[:zh_CN] [`indirect] 的模板形参 [`Allocator] 应当满足 [^:oc Allocator] 的规定。

[para]
[:en] If a program declares an explicit or partial specialization of [`indirect],
the behavior is undefined.
[:zh_CN] 如果程序声明了 [`indirect] 的显式或部分特化式，则其行为未定义。
