[section#indirect.ctor
    [:en] Constructors
    [:zh_CN] 构造函数
]

[para]
[:en] The following element applies to all functions in [#indirect.ctor]:
[:zh_CN] 下列各项要素适用于 [#indirect.ctor] 中的所有函数：

[div:description]
[para:throws]
[:en] Nothing unless [`allocator_traits<Allocator>::allocate] or
[`allocator_traits<Allocator>::construct] throws.
[:zh_CN] 除非 [`allocator_traits<Allocator>::allocate] 或
[`allocator_traits<Allocator>::construct] 抛出异常，否则无抛出。
[div:end]

[%@lib@ctor indirect]
[codeblock:declaration]
constexpr explicit indirect();
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`is_default_constructible_v<Allocator>] is [`true].
[:zh_CN] [`is_default_constructible_v<Allocator>] 为 [`true]。

[para:mandates]
[:en] [`is_default_constructible_v<T>] is [`true].
[:zh_CN] [`is_default_constructible_v<T>] 为 [`true]。

[para:effects]
[:en] Constructs an owned object of type [`T] with an empty argument list,
using the allocator [*alloc].
[:zh_CN] 使用分配器 [*alloc]，以空实参列表构造所拥有的 [`T] 类型对象。
[div:end]

[%@lib@ctor indirect]
[codeblock:declaration]
constexpr explicit indirect(allocator_arg_t, const Allocator& a);
[codeblock:end]

[div:description]
[para:mandates]
[:en] [`is_default_constructible_v<T>] is [`true].
[:zh_CN] [`is_default_constructible_v<T>] 为 [`true]。

[para:effects]
[:en] [*alloc] is direct-non-list-initialized with [`a].
[:zh_CN] 以 [`a] 直接非列表初始化 [*alloc]。

[:en] Constructs an owned object of type [`T] with an empty argument list,
using the allocator [*alloc].
[:zh_CN] 使用分配器 [*alloc]，以空实参列表构造所拥有的 [`T] 类型对象。
[div:end]

[%@lib@ctor indirect]
[codeblock:declaration]
constexpr indirect(const indirect& other);
[codeblock:end]

[div:description]
[para:mandates]
[:en] [`is_copy_constructible_v<T>] is [`true].
[:zh_CN] [`is_copy_constructible_v<T>] 为 [`true]。

[para:effects]
[:en] [*alloc] is direct-non-list-initialized with
[`allocator_traits<Allocator>::select_on_container_copy_construction(other.[*alloc])].
[:zh_CN] 以 [`allocator_traits<Allocator>::select_on_container_copy_construction(other.[*alloc])]
直接非列表初始化 [*alloc]。

[:en] If [`other] is valueless, [`*this] is valueless.
[:zh_CN] 如果 [`other] 无值，那么 [*this] 无值。

[:en] Otherwise, constructs an owned object of type [`T] with [`*other],
using the allocator [*alloc].
[:zh_CN] 否则，使用分配器 [*alloc]，以 [`*other] 构造所拥有的 [`T] 类型对象。
[div:end]

[%@lib@ctor indirect]
[codeblock:declaration]
constexpr indirect(allocator_arg_t, const Allocator& a, const indirect& other);
[codeblock:end]

[div:description]
[para:mandates]
[:en] [`is_copy_constructible_v<T>] is [`true].
[:zh_CN] [`is_copy_constructible_v<T>] 为 [`true]。

[para:effects]
[:en] [*alloc] is direct-non-list-initialized with [`a].
[:zh_CN] 以 [`a] 直接非列表初始化 [*alloc]。

[:en] If [`other] is valueless, [`*this] is valueless.
[:zh_CN] 如果 [`other] 无值，那么 [*this] 无值。

[:en] Otherwise, constructs an owned object of type [`T] with [`*other],
using the allocator [*alloc].
[:zh_CN] 否则，使用分配器 [*alloc]，以 [`*other] 构造所拥有的 [`T] 类型对象。
[div:end]

[%@lib@ctor indirect]
[codeblock:declaration]
constexpr indirect(indirect&& other) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] [*alloc] is direct-non-list-initialized from [`std::move(other.[*alloc])].
[:zh_CN] 以 [`std::move(other.[*alloc])] 直接非列表初始化 [*alloc]。

[:en] If [`other] is valueless, [`*this] is valueless.
[:zh_CN] 如果 [`other] 无值，那么 [*this] 无值。

[:en] Otherwise, [`*this] takes ownership of the owned object of [`other].
[:zh_CN] 否则，[`*this] 接过 [`other] 所拥有对象的所有权。

[para:ensures]
[:en] [`other] is valueless.
[:zh_CN] [`other] 无值。
[div:end]

[%@lib@ctor indirect]
[codeblock:declaration]
constexpr indirect(allocator_arg_t, const Allocator& a, indirect&& other)
  noexcept(allocator_traits<Allocator>::is_always_equal::value);
[codeblock:end]

[div:description]
[para:mandates]
[:en] If [`allocator_traits<Allocator>::is_always_equal::value] is [`false]
then [`T] is a complete type.
[:zh_CN] 如果 [`allocator_traits<Allocator>::is_always_equal::value] 为 [`false]，
那么 [`T] 为完整类型。

[para:effects]
[:en] [*alloc] is direct-non-list-initialized with [`a].
[:zh_CN] 以 [`a] 直接非列表初始化 [*alloc]。

[:en] If [`other] is valueless, [`*this] is valueless.
[:zh_CN] 如果 [`other] 无值，那么 [*this] 无值。

[:en] Otherwise, if [`[*alloc] == other.[*alloc]] is [`true], constructs an
object of type [`indirect] that takes ownership of the owned object of [`other].
[:zh_CN] 否则，如果 [`[*alloc] == other.[*alloc]] 为 [`true]，那么构造一个
[`indirect] 类型的对象，并接过 [`other] 所拥有对象的所有权。

[:en] Otherwise, constructs an owned object of type [`T] with [`*std::move(other)],
using the allocator [*alloc].
[:zh_CN] 否则，使用分配器 [*alloc]，以 [`*std::move(other)] 构造所拥有的 [`T] 类型对象。

[para:ensures]
[:en] [`other] is valueless.
[:zh_CN] [`other] 无值。
[div:end]

[%@lib@ctor indirect]
[codeblock:declaration]
template<class U = T>
  constexpr explicit indirect(U&& u);
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en] [`is_same_v<remove_cvref_t<U>, indirect>] is [`false],
[:zh_CN] [`is_same_v<remove_cvref_t<U>, indirect>] 为 [`false]，
[item]
[:en] [`is_same_v<remove_cvref_t<U>, in_place_t>] is [`false],
[:zh_CN] [`is_same_v<remove_cvref_t<U>, in_place_t>] 为 [`false]，
[item]
[:en] [`is_constructible_v<T, U>] is [`true], and
[:zh_CN] [`is_constructible_v<T, U>] 为 [`true]，并且
[item]
[:en] [`is_default_constructible_v<Allocator>] is [`true].
[:zh_CN] [`is_default_constructible_v<Allocator>] 为 [`true]。
[list:end]

[para:effects]
[:en] Constructs an owned object of type [`T] with [`std::forward<U>(u)],
using the allocator [*alloc].
[:zh_CN] 使用分配器 [*alloc]，以 [`std::forward<U>(u)] 构造所拥有的 [`T] 类型对象。
[div:end]

[%@lib@ctor indirect]
[codeblock:declaration]
template<class U = T>
  constexpr explicit indirect(allocator_arg_t, const Allocator& a, U&& u);
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en] [`is_same_v<remove_cvref_t<U>, indirect>] is [`false],
[:zh_CN] [`is_same_v<remove_cvref_t<U>, indirect>] 为 [`false]，
[item]
[:en] [`is_same_v<remove_cvref_t<U>, in_place_t>] is [`false], and
[:zh_CN] [`is_same_v<remove_cvref_t<U>, in_place_t>] 为 [`false]，并且
[item]
[:en] [`is_constructible_v<T, U>] is [`true].
[:zh_CN] [`is_constructible_v<T, U>] 为 [`true]。
[list:end]

[para:effects]
[:en] [*alloc] is direct-non-list-initialized with [`a].
[:zh_CN] 以 [`a] 直接非列表初始化 [*alloc]。

[:en] Constructs an owned object of type [`T] with [`std::forward<U>(u)],
using the allocator [*alloc].
[:zh_CN] 使用分配器 [*alloc]，以 [`std::forward<U>(u)] 构造所拥有的 [`T] 类型对象。
[div:end]

[%@lib@ctor indirect]
[codeblock:declaration]
template<class... Us>
  constexpr explicit indirect(in_place_t, Us&&... us);
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en] [`is_constructible_v<T, Us...>] is [`true], and
[:zh_CN] [`is_constructible_v<T, Us...>] 为 [`true]，并且
[item]
[:en] [`is_default_constructible_v<Allocator>] is [`true].
[:zh_CN] [`is_default_constructible_v<Allocator>] 为 [`true]。
[list:end]

[para:effects]
[:en] Constructs an owned object of type [`T] with [`std::forward<Us>(us)...],
using the allocator [*alloc].
[:zh_CN] 使用分配器 [*alloc]，以 [`std::forward<Us>(us)...] 构造所拥有的 [`T] 类型对象。
[div:end]

[%@lib@ctor indirect]
[codeblock:declaration]
template<class... Us>
  constexpr explicit indirect(allocator_arg_t, const Allocator& a,
                              in_place_t, Us&& ...us);
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`is_constructible_v<T, Us...>] is [`true].
[:zh_CN] [`is_constructible_v<T, Us...>] 为 [`true]。

[para:effects]
[:en] [*alloc] is direct-non-list-initialized with [`a].
[:zh_CN] 以 [`a] 直接非列表初始化 [*alloc]。

[:en] Constructs an owned object of type [`T] with [`std::forward<Us>(us)...],
using the allocator [*alloc].
[:zh_CN] 使用分配器 [*alloc]，以 [`std::forward<Us>(us)...] 构造所拥有的 [`T] 类型对象。
[div:end]

[%@lib@ctor indirect]
[codeblock:declaration]
template<class I, class... Us>
  constexpr explicit indirect(in_place_t, initializer_list<I> ilist, Us&&... us);
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en] [`is_constructible_v<T, initializer_list<I>&, Us...>] is [`true], and
[:zh_CN] [`is_constructible_v<T, initializer_list<I>&, Us...>] 为 [`true]，并且
[item]
[:en] [`is_default_constructible_v<Allocator>] is [`true].
[:zh_CN] [`is_default_constructible_v<Allocator>] 为 [`true]。
[list:end]

[para:effects]
[:en] Constructs an owned object of type [`T] with the arguments
[`ilist, std::forward<Us>(us)...], using the allocator [*alloc].
[:zh_CN] 使用分配器 [*alloc]，以实参 [`ilist, std::forward<Us>(us)...]
构造所拥有的 [`T] 类型对象。
[div:end]

[%@lib@ctor indirect]
[codeblock:declaration]
template<class I, class... Us>
  constexpr explicit indirect(allocator_arg_t, const Allocator& a,
                              in_place_t, initializer_list<I> ilist, Us&&... us);
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`is_constructible_v<T, initializer_list<I>&, Us...>] is [`true].
[:zh_CN] [`is_constructible_v<T, initializer_list<I>&, Us...>] 为 [`true]。

[para:effects]
[:en] [*alloc] is direct-non-list-initialized with [`a].
[:zh_CN] 以 [`a] 直接非列表初始化 [*alloc]。

[:en] Constructs an owned object of type [`T] with the arguments
[`ilist, std::forward<Us>(us)...], using the allocator [*alloc].
[:zh_CN] 使用分配器 [*alloc]，以实参 [`ilist, std::forward<Us>(us)...]
构造所拥有的 [`T] 类型对象。
[div:end]
