[section#util.smartptr.weak.const
    [:en] Constructors
    [:zh_CN] 构造函数
]

[%@lib@ctor weak_ptr]
[codeblock:declaration]
constexpr weak_ptr() noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Constructs an empty [`weak_ptr] object that stores a null pointer value.
[:zh_CN] 构造一个存储空指针值的空 [`weak_ptr] 对象。

[para:ensures]
[:en] [`use_count() == 0].
[:zh_CN] [`use_count() == 0]。
[div:end]

[%@lib@ctor weak_ptr]
[codeblock:declaration]
constexpr weak_ptr(const weak_ptr& r) noexcept;
template<class Y> constexpr weak_ptr(const weak_ptr<Y>& r) noexcept;
template<class Y> constexpr weak_ptr(const shared_ptr<Y>& r) noexcept;
[codeblock:end]

[div:description]
[para:constraints]
[:en] For the second and third constructors, [`Y*] is compatible with [`T*].
[:zh_CN] 对于第二和第三个构造函数，[`Y*] 与 [`T*] 兼容。

[para:effects]
[:en] If [`r] is empty, constructs an empty [`weak_ptr] object that stores a
null pointer value; otherwise, constructs a [`weak_ptr] object that shares
ownership with [`r] and stores a copy of the pointer stored in [`r].
[:zh_CN] 如果 [`r] 为空，则构造一个存储空指针值的空 [`weak_ptr] 对象；否则构造
一个与 [`r] 共享所有权并存储 [`r] 所存储的指针的一个副本的 [`weak_ptr] 对象。

[para:ensures]
[:en] [`use_count() == r.use_count()].
[:zh_CN] [`use_count() == r.use_count()]。
[div:end]

[%@lib@ctor weak_ptr]
[codeblock:declaration]
constexpr weak_ptr(weak_ptr&& r) noexcept;
template<class Y> constexpr weak_ptr(weak_ptr<Y>&& r) noexcept;
[codeblock:end]

[div:description]
[para:constraints]
[:en] For the second constructor, [`Y*] is compatible with [`T*].
[:zh_CN] 对于第二个构造函数，[`Y*] 与 [`T*] 兼容。

[para:effects]
[:en] Move-constructs a [`weak_ptr] instance from [`r].
[:zh_CN] 以 [`r] 移动构造一个 [`weak_ptr] 实例。

[para:ensures]
[:en] [`*this] contains the old value of [`r].
[:zh_CN] [`*this] 包含 [`r] 的原值。

[:en] [`r] is empty, stores a null pointer value, and [`r.use_count() == 0].
[:zh_CN] [`r] 为空，存储空指针值，且 [`r.use_count() == 0]。

[:en] [`r.use_count() == 0].
[:zh_CN] [`r.use_count() == 0]。
[div:end]
