[section#util.smartptr.weak.general
    [:en] General
    [:zh_CN] 概述
]

[para]
[%@lib weak_ptr]
[:en]
The [`weak_ptr] class template stores a weak reference to an object that is
already managed by a [`shared_ptr].
[:zh_CN]
[`weak_ptr] 类模板存储一个指代已经由某个 [`shared_ptr] 所管理的对象的弱引用。

[:en]
To access the object, a [`weak_ptr] can be converted to a [`shared_ptr] using
the member function [`lock].
[:zh_CN]
要访问此对象，可以用成员函数 [`lock] 将 [`weak_ptr] 转换为一个 [`shared_ptr]。

[codeblock:synopsis]
namespace std {
  template<class T> class weak_ptr {
  public:
    using element_type = remove_extent_t<T>;

    // [:en] [#util.smartptr.weak.const], constructors \
    [:zh_CN] [#util.smartptr.weak.const]，构造函数
    constexpr weak_ptr() noexcept;
    template<class Y>
      constexpr weak_ptr(const shared_ptr<Y>& r) noexcept;
    constexpr weak_ptr(const weak_ptr& r) noexcept;
    template<class Y>
      constexpr weak_ptr(const weak_ptr<Y>& r) noexcept;
    constexpr weak_ptr(weak_ptr&& r) noexcept;
    template<class Y>
      constexpr weak_ptr(weak_ptr<Y>&& r) noexcept;

    // [:en] [#util.smartptr.weak.dest], destructor \
    [:zh_CN] [#util.smartptr.weak.dest]，析构函数
    constexpr ~weak_ptr();

    // [:en] [#util.smartptr.weak.assign], assignment \
    [:zh_CN] [#util.smartptr.weak.assign]，赋值
    constexpr weak_ptr& operator=(const weak_ptr& r) noexcept;
    template<class Y>
      constexpr weak_ptr& operator=(const weak_ptr<Y>& r) noexcept;
    template<class Y>
      constexpr weak_ptr& operator=(const shared_ptr<Y>& r) noexcept;
    constexpr weak_ptr& operator=(weak_ptr&& r) noexcept;
    template<class Y>
      constexpr weak_ptr& operator=(weak_ptr<Y>&& r) noexcept;

    // [:en] [#util.smartptr.weak.mod], modifiers \
    [:zh_CN] [#util.smartptr.weak.mod]，改动函数
    constexpr void swap(weak_ptr& r) noexcept;
    constexpr void reset() noexcept;

    // [:en] [#util.smartptr.weak.obs], observers \
    [:zh_CN] [#util.smartptr.weak.obs]，探察函数
    constexpr long use_count() const noexcept;
    constexpr bool expired() const noexcept;
    constexpr shared_ptr<T> lock() const noexcept;
    template<class U>
      constexpr bool owner_before(const shared_ptr<U>& b) const noexcept;
    template<class U>
      constexpr bool owner_before(const weak_ptr<U>& b) const noexcept;
    size_t owner_hash() const noexcept;
    template<class U>
      constexpr bool owner_equal(const shared_ptr<U>& b) const noexcept;
    template<class U>
      constexpr bool owner_equal(const weak_ptr<U>& b) const noexcept;
  };

  template<class T>
    weak_ptr(shared_ptr<T>) -> weak_ptr<T>;
}
[codeblock:end]

[para]
[:en] Specializations of [`weak_ptr] shall be [^:oc CopyConstructible] and
[^:oc CopyAssignable], allowing their use in standard containers.
[:zh_CN] [`weak_ptr] 的特例应当为 [^:oc CopyConstructible] 和 [^:oc CopyAssignable]，
使它们能用在标准容器中。

[:en] The template parameter [`T] of [`weak_ptr] may be an incomplete type.
[:zh_CN] [`weak_ptr] 的模板形参 [`T] 可以是不完整类型。
