[section#obj.lifetime
    [:en] Explicit lifetime management
    [:zh_CN] 显式生存期管理
]

[%@lib start_lifetime_as]
[codeblock:declaration]
template<class T>
  T* start_lifetime_as(void* p) noexcept;
template<class T>
  const T* start_lifetime_as(const void* p) noexcept;
template<class T>
  volatile T* start_lifetime_as(volatile void* p) noexcept;
template<class T>
  const volatile T* start_lifetime_as(const volatile void* p) noexcept;
[codeblock:end]

[div:description]
[para:mandates]
[:en] [`T] is an implicit-lifetime type ([#term.implicit.lifetime.type]) and not
an incomplete type ([#term.incomplete.type]).
[:zh_CN] [`T] 为隐式生存期类型（[#term.implicit.lifetime.type]），且不是不完整类型（[#term.incomplete.type]）。

[para:expects]
[:en] [=range(p,(char*)p + sizeof(T))] denotes a region of allocated storage
that is a subset of the region of storage reachable through ([#basic.compound])
[`p] and suitably aligned for the type [`T].
[:zh_CN] [=range(p,(char*)p + sizeof(T))] 代表一个已分配存储区域，它是通过 [`p]
可达的存储区域（[#basic.compound]）的子集，且已为类型 [`T] 适当对齐。

[para:effects]
[:en] Implicitly creates objects ([#intro.object]) within the denoted region
consisting of an object [^a] of type [`T] whose address is [`p], and objects
nested within [^a], as follows:
[:zh_CN] 在所代表的区域中隐式创建一组对象（[#intro.object]），包括一个地址为 [`p]
的 [`T] 类型的对象 [^a]，以及 [^a] 中嵌套的对象，方式如下：

[:en] The object representation of [^a] is the contents of the storage prior to
the call to [`start_lifetime_as].
[:zh_CN] [^a] 的对象表示就是调用 [`start_lifetime_as] 之前的存储内容。

[:en] The value of each created object [^o] of trivially copyable type
([#term.trivially.copyable.type]) [`U] is determined in the same manner as for
a call to [`bit_cast<U>(E)] ([#bit.cast]), where [`E] is an lvalue of type [`U]
denoting [^o], except that the storage is not accessed.
[:zh_CN] 所创建的每个可平凡复制类型（[#term.trivially.copyable.type]）[`U] 的
对象 [^o] 的值，以和调用 [`bit_cast<U>(E)]（[#bit.cast]）相同的方式确定，其中
[`E] 为代表 [^o] 的 [`U] 类型的左值，但并不访问存储。

[:en] The value of any other created object is unspecified.
[:zh_CN] 所创建的其他任何对象的值均是未指明的。

[begin:note]
[:en] The unspecified value can be indeterminate.
[:zh_CN] 未指明的值可以是不确定值。
[end:note]

[para:returns]
[:en] A pointer to the [^a] defined in the [=Effects] paragraph.
[:zh_CN] 指向 [=Effects] 段落中定义的 [^a] 的指针。
[div:end]

[%@lib start_lifetime_as_array]
[codeblock:declaration]
template<class T>
  T* start_lifetime_as_array(void* p, size_t n) noexcept;
template<class T>
  const T* start_lifetime_as_array(const void* p, size_t n) noexcept;
template<class T>
  volatile T* start_lifetime_as_array(volatile void* p, size_t n) noexcept;
template<class T>
  const volatile T* start_lifetime_as_array(const volatile void* p, size_t n) noexcept;
[codeblock:end]

[div:description]
[para:mandates]
[:en] [`T] is a complete type.
[:zh_CN] [`T] 是完整类型。

[para:expects]
[:en] [`p] is suitably aligned for an array of [`T] or is null.
[:zh_CN] [`p] 为针对 [`T] 的数组适当对齐，或者为空。

[:en] [`n <= size_t(-1) / sizeof(T)] is [`true].
[:zh_CN] [`n <= size_t(-1) / sizeof(T)] 为 [`true]。

[:en] If [`n > 0] is [`true], [=range((char*)p,(char*)p + (n * sizeof(T)))]
denotes a region of allocated storage that is a subset of the region of storage
reachable through ([#basic.compound]) [`p].
[:zh_CN] 若 [`n > 0] 为 [`true]，则 [=range((char*)p,(char*)p + (n * sizeof(T)))]
代表一个已分配存储区域，它是通过 [`p] 可达的存储区域（[#basic.compound]）的子集。

[para:effects]
[:en] If [`n > 0] is [`true], equivalent to [`start_lifetime_as<U>(p)] where [`U]
is the type [=lq]array of [`n] [`T][=rq].
[:zh_CN] 若 [`n > 0] 为 [`true]，则等价于：[`start_lifetime_as<U>(p)]，其中 [`U]
为类型“[`n] 个 [`T] 的数组”。

[:en] Otherwise, there are no effects.
[:zh_CN] 否则，没有效果。

[para:returns]
[:en] A pointer to the first element of the created array, if any; otherwise,
a pointer that compares equal to [`p] ([#expr.eq]).
[:zh_CN] 指向所创建数组第一个元素的指针，如果有；否则返回与 [`p] 比较为相等的指针（[#expr.eq]）。
[div:end]

[%@lib trivially_relocate]
[codeblock:declaration]
template<class T>
  T* trivially_relocate(T* first, T* last, T* result);
[codeblock:end]

[div:description]
[para:mandates]
[:en] [`is_trivially_relocatable_v<T> && !is_const_v<T>] is [`true].
[:zh_CN] [`is_trivially_relocatable_v<T> && !is_const_v<T>] 为 [`true]。

[:en] [`T] is not an array of unknown bound.
[:zh_CN] [`T] 不是未知边界的数组。

[para:expects]
[list]
[item]
[:en] [=range(first,last)] is a valid range.
[:zh_CN] [=range(first,last)] 为有效范围。
[item]
[:en] [=range(result,result + (last - first))] denotes a region of storage that
is a subset of the region reachable through [`result] ([#basic.compound]) and
suitably aligned for the type [`T].
[:zh_CN] [=range(result,result + (last - first))] 代表一个存储区域，它是通过 [`result]
可达的存储区域（[#basic.compound]）的子集，且已为类型 [`T] 适当对齐。
[item]
[:en] No element in the range [=range(first,last)] is a potentially-overlapping subobject.
[:zh_CN] 范围 [=range(first,last)] 中的任何元素都不是潜在重叠子对象。
[list:end]

[para:ensures]
[:en] No effect if [`result == first] is [`true].
[:zh_CN] 若 [`result == first] 为 [`true]，则没有效果。

[:en] Otherwise, the range denoted by [=range(result,result + (last - first))]
contains objects (including subobjects) whose lifetime has begun and whose
object representations are the original object representations of the
corresponding objects in the source range [=range(first,last)] except
for any parts of the object representations used by the implementation to
represent type information ([#intro.object]).
[:zh_CN] 否则，由 [=range(result,result + (last - first))] 代表的范围包含已开始生存期
的对象（包括子对象），其对象表示是源范围 [=range(first,last)] 中对应对象的原始对象表示，
但不包括用于表示类型信息的对象表示的任何部分（[#intro.object]）。

[:en] If any of the objects has union type, its active member is the same as
that of the corresponding object in the source range.
[:zh_CN] 如果任何对象具有联合体类型，那么它与源范围中对应对象具有相同的活跃成员。

[:en] If any of the aforementioned objects has a non-static data member of
reference type, that reference refers to the same entity as
does the corresponding reference in the source range.
[:zh_CN] 如果任何上述对象具有引用类型的非静态数据成员，那么该引用与源范围中对应引用指代相同的实体。

[:en] The lifetimes of the original objects in the source range have ended.
[:zh_CN] 源范围中原始对象的生存期已结束。

[para:returns]
[:en] [`result + (last - first)].
[:zh_CN] [`result + (last - first)]。

[para:throws]
[:en] Nothing.
[:zh_CN] 无。

[para:complexity]
[:en] Linear in the length of the source range.
[:zh_CN] 与源范围的长度成线性。

[para:remarks]
[:en] The destination region of storage is considered reused ([#basic.life]).
[:zh_CN] 目标存储区域被视为重用（[#basic.life]）。

[:en] No constructors or destructors are invoked.
[:zh_CN] 不会调用构造函数或析构函数。

[begin:note]
[:en] Overlapping ranges are supported.
[:zh_CN] 支持重叠范围。
[end:note]
[div:end]

[%@lib relocate]
[codeblock:declaration]
template<class T>
  constexpr T* relocate(T* first, T* last, T* result);
[codeblock:end]

[div:description]
[para:mandates]
[:en] [`is_nothrow_relocatable_v<T> && !is_const_v<T>] is [`true].
[:zh_CN] [`is_nothrow_relocatable_v<T> && !is_const_v<T>] 为 [`true]。

[:en] [`T] is not an array of unknown bound.
[:zh_CN] [`T] 不是未知边界的数组。

[para:expects]
[list]
[item]
[:en] [=range(first,last)] is a valid range.
[:zh_CN] [=range(first,last)] 为有效范围。
[item]
[:en] [=range(result,result + (last - first))] denotes a region of storage that
is a subset of the region reachable through [`result] ([#basic.compound]) and
suitably aligned for the type [`T].
[:zh_CN] [=range(result,result + (last - first))] 代表一个存储区域，它是通过 [`result]
可达的存储区域（[#basic.compound]）的子集，且已为类型 [`T] 适当对齐。
[item]
[:en] No element in the range [=range(first,last)] is a potentially-overlapping subobject.
[:zh_CN] 范围 [=range(first,last)] 中的任何元素都不是潜在重叠子对象。
[list:end]

[para:effects]
[list]
[item]
[:en] If [`result == first] is [`true], no effect;
[:zh_CN] 若 [`result == first] 为 [`true]，则没有效果；

[item]
[:en] otherwise, if not called during constant evaluation and
[`is_trivially_relocatable_v<T>] is [`true], then has effects equivalent to:
[`trivially_relocate(first, last, result);]
[:zh_CN] 否则，如果并非在常量求值期间调用且 [`is_trivially_relocatable_v<T>] 为 [`true]，
则其效果等价于：[`trivially_relocate(first, last, result);]

[item]
[:en] otherwise, for each integer [`i] in  [=range(0,last - first)],
[:zh_CN] 否则，对于范围 [=range(0,last - first)] 中的每个整数 [`i]，
[list]
[item]
[:en] if [`T] is an array type, equivalent to:
[`relocate(begin(first`[i`]), end(first`[i`]), *start_lifetime_as<T>(result + i));]
[:zh_CN] 如果 [`T] 为数组类型，则等价于：
[`relocate(begin(first`[i`]), end(first`[i`]), *start_lifetime_as<T>(result + i));]
[item]
[:en] otherwise, equivalent to:
[`construct_at(result + i, std::move(first`[i`])); destroy_at(first + i);]
[:zh_CN] 否则，等价于：
[`construct_at(result + i, std::move(first`[i`])); destroy_at(first + i);]
[list:end]
[list:end]

[para:returns]
[:en] [`result + (last - first)].
[:zh_CN] [`result + (last - first)]。

[para:throws]
[:en] Nothing.
[:zh_CN] 无。

[begin:note]
[:en] Overlapping ranges are supported.
[:zh_CN] 支持重叠范围。
[end:note]
[div:end]
