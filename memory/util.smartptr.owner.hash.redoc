[section#util.smartptr.owner.hash
    [:en] Struct [`owner_hash]
    [:zh_CN] 结构体 [`owner_hash]
]

[para]
[:en] The class [`owner_hash] provides ownership-based hashing.
[:zh_CN] 类 [`owner_hash] 提供基于所有权的散列计算。

[%@lib owner_hash]
[codeblock:synopsis]
namespace std {
  struct owner_hash {
    template<class T>
      size_t operator()(const shared_ptr<T>&) const noexcept;

    template<class T>
      size_t operator()(const weak_ptr<T>&) const noexcept;

    using is_transparent = [[redoc("[=unspec]")]];
  };
}
[codeblock:end]

[%@lib@member operator()[!owner_hash]]
[codeblock:declaration]
template<class T>
  size_t operator()(const shared_ptr<T>& x) const noexcept;
template<class T>
  size_t operator()(const weak_ptr<T>& x) const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`x.owner_hash()].
[:zh_CN] [`x.owner_hash()]。

[para]
[begin:note]
[:en] For any object [`y] where [`x.owner_equal(y)] is [`true],
[`x.owner_hash() == y.owner_hash()] is [`true].
[:zh_CN] 对于任何使得 [`x.owner_equal(y)] 为 [`true] 的对象 [`y]，
[`x.owner_hash() == y.owner_hash()] 为 [`true]。
[end:note]
[div:end]
