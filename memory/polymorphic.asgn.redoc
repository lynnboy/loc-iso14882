[section#polymorphic.asgn
    [:en] Assignment
    [:zh_CN] 赋值
]

[%@lib@member operator=[!polymorphic]]
[codeblock:declaration]
constexpr polymorphic& operator=(const polymorphic& other);
[codeblock:end]

[div:description]
[para:mandates]
[:en] [`T] is a complete type.
[:zh_CN] [`T] 为完整类型。

[para:effects]
[:en] If [`addressof(other) == this] is [`true], there are no effects.
[:zh_CN] 如果 [`addressof(other) == this] 为 [`true]，则没有效果。

[:en] Otherwise:
[:zh_CN] 否则：
[list]
[item]
[:en] The allocator needs updating if
[`allocator_traits<Allocator>::propagate_on_container_copy_assignment::value] is [`true].
[:zh_CN] 若 [`allocator_traits<Allocator>::propagate_on_container_copy_assignment::value]
为 [`true] 则需要更新分配器。

[item]
[:en] If [`other] is not valueless, a new owned object is constructed in [`*this]
using [`allocator_traits<Allocator>::construct] with the owned object from [`other]
as the argument, using either the allocator in [`*this] or
the allocator in [`other] if the allocator needs updating.
[:zh_CN] 如果 [`other] 并非无值，那么使用 [`allocator_traits<Allocator>::construct]，
以 [`other] 中所拥有的对象为实参，构造 [`*this] 中新拥有的对象，或者使用 [`*this] 中的分配器，
或者当分配器需要更新时使用 [`other] 中的分配器。

[item]
[:en] The previously owned object in [`*this], if any, is destroyed using
[`allocator_traits<Allocator>::destroy] and then the storage is deallocated.
[:zh_CN] 使用 [`allocator_traits<Allocator>::destroy] 销毁 [`*this] 中之前拥有的对象
（如果有），再回收其存储。

[item]
[:en] If the allocator needs updating, the allocator in [`*this] is replaced with
a copy of the allocator in [`other].
[:zh_CN] 如果分配器需要更新，则 [`*this] 中的分配器被替换为 [`other] 中分配器的副本。
[list:end]

[para:returns]
[:en] A reference to [`*this].
[:zh_CN] 到 [`*this] 的引用。

[para:remarks]
[:en] If any exception is thrown, there are no effects on [`*this].
[:zh_CN] 如果抛出了任何异常，那么对 [`*this] 没有效果。
[div:end]

[%@lib@member operator=[!polymorphic]]
[codeblock:declaration]
constexpr polymorphic& operator=(polymorphic&& other)
  noexcept(allocator_traits<Allocator>::propagate_on_container_move_assignment::value ||
           allocator_traits<Allocator>::is_always_equal::value);
[codeblock:end]

[div:description]
[para:mandates]
[:en] If [`allocator_traits<Allocator>::is_always_equal::value>] is [`false],
[`T] is a complete type.
[:zh_CN] 如果 [`allocator_traits<Allocator>::is_always_equal::value>] 为 [`false]，
则 [`T] 为完整类型。

[para:effects]
[:en] If [`addressof(other) == this] is [`true], there are no effects.
[:zh_CN] 如果 [`addressof(other) == this] 为 [`true]，则没有效果。

[:en] Otherwise:
[:zh_CN] 否则：
[list]
[item]
[:en] The allocator needs updating if
[`allocator_traits<Allocator>::propagate_on_container_move_assignment::value] is [`true].
[:zh_CN] 若 [`allocator_traits<Allocator>::propagate_on_container_move_assignment::value]
为 [`true] 则需要更新分配器。

[item]
[:en] If [`[*alloc] == other.[*alloc]] is [`true], swaps the owned objects
in [`*this] and [`other]; the owned object in [`other], if any, is then destroyed
using [`allocator_traits<Allocator>::destroy] and then the storage is deallocated.
[:zh_CN] 如果 [`[*alloc] == other.[*alloc]] 为 [`true]，则交换 [`*this] 和 [`other]
所拥有的对象；然后使用 [`allocator_traits<Allocator>::destroy] 销毁 [`other] 中拥有的
对象（如果有），再回收其存储。

[item]
[:en] Otherwise, if [`[*alloc] != other.[*alloc]] is [`true]; if [`other] is not
valueless, a new owned object is constructed in [`*this] using 
[`allocator_traits<Allocator>::construct] with the owned object from [`other] as
the argument as an rvalue, using either the allocator in [`*this] or
the allocator in [`other] if the allocator needs updating.
[:zh_CN] 否则，如果 [`[*alloc] != other.[*alloc]] 为 [`true]；若 [`other] 并非无值，
则使用 [`allocator_traits<Allocator>::construct]，以 [`other] 中所拥有
的对象为实参右值，构造 [`*this] 中新拥有的对象，或者使用 [`*this] 中的分配器，或者当分配器
需要更新时使用 [`other] 中的分配器。

[item]
[:en] The previously owned object in [`*this], if any, is destroyed using
[`allocator_traits<Allocator>::destroy] and then the storage is deallocated.
[:zh_CN] 使用 [`allocator_traits<Allocator>::destroy] 销毁 [`*this] 中之前拥有的对象
（如果有），再回收其存储。

[item]
[:en] If the allocator needs updating, the allocator in [`*this] is replaced with
a copy of the allocator in [`other].
[:zh_CN] 如果分配器需要更新，则 [`*this] 中的分配器被替换为 [`other] 中分配器的副本。
[list:end]

[para:returns]
[:en] A reference to [`*this].
[:zh_CN] 到 [`*this] 的引用。

[para:remarks]
[:en] If any exception is thrown, there are no effects on [`*this] or [`other].
[:zh_CN] 如果抛出了任何异常，那么对 [`*this] 或 [`other] 没有效果。
[div:end]
