[section#polymorphic.general
    [:en] General
    [:zh_CN] 概述
]

[para]
[:en] A polymorphic object manages the lifetime of an owned object.
[:zh_CN] 多态对象管理所拥有对象的生存期。

[:en] A polymorphic object may own objects of different types at different points in its lifetime.
[:zh_CN] 多态对象在其生存期的不同时刻可能拥有不同类型的对象。

[:en] A polymorphic object is [+valueless[%valueless[!polymorphic object]]] if
it has no owned object.
[:zh_CN] 若不拥有对象，则间接对象[+无值[%无值[!对台对象]]]。

[:en] A polymorphic object may become valueless only after it has been moved from.
[:zh_CN] 多态对象只有在被移动后才可能变得无值。

[para]
[:en] In every specialization [`polymorphic<T, Allocator>], if the type
[`allocator_traits<Allocator>::value_type] is not the same type as [`T],
the program is ill-formed.
[:zh_CN] 在每个特例 [`polymorphic<T, Allocator>] 中，若类型
[`allocator_traits<Allocator>::value_type] 与 [`T] 不是相同类型，则程序非良构。

[:en] Every object of type [`polymorphic<T, Allocator>] uses an object of type
[`Allocator] to allocate and free storage for the owned object as needed.
[:zh_CN] 每个类型为 [`polymorphic<T, Allocator>] 的对象都使用一个类型为
[`Allocator] 的对象来根据需要为所拥有对象分配和释放存储空间。

[para]
[:en] Constructing an owned object of type [`U] with [`args...] using the allocator [`a]
means calling [`allocator_traits<Allocator>::construct(a, [*p], args...)] where
[`args] is an expression pack, [`a] is an allocator, and [*p] points to storage
suitable for an owned object of type [`U].
[:zh_CN] 使用分配器 [`a] 用 [`args...] 构造所拥有的 [`U] 类型对象，意思是调用
[`allocator_traits<Allocator>::construct(a, [*p], args...)]，其中 [`args] 为表达式包组，
[`a] 为分配器，而 [*p] 指向为 [`U] 类型的所拥有对象适当对齐的存储。

[para]
[:en] The member [*alloc] is used for any memory allocation and element construction
performed by member functions during the lifetime of each polymorphic value object,
or until the allocator is replaced.
[:zh_CN] 在每个多态值对象的生存期内，或直到其分配器被替换前，成员函数执行的任何内存分配和
元素构造都使用 [*alloc] 成员进行。

[:en] The allocator may be replaced only via assignment or [`swap()].
[:zh_CN] 分配器只能通过赋值或 [`swap()] 进行替换。

[:en] [`Allocator] replacement is performed by copy assignment, move assignment,
or swapping of the allocator only if ([#container.reqmts]):
[:zh_CN] 仅当
[list]
[item]
[:en@~] [`allocator_traits<Allocator>::propagate_on_container_copy_assignment::value], or
[:zh_CN@~] [`allocator_traits<Allocator>::propagate_on_container_copy_assignment::value]，或
[item]
[:en@~] [`allocator_traits<Allocator>::propagate_on_container_move_assignment::value], or
[:zh_CN@~] [`allocator_traits<Allocator>::propagate_on_container_move_assignment::value]，或
[item] [`allocator_traits<Allocator>::propagate_on_container_swap::value]
[list:end]
[:en@~] is [`true] within the implementation of the corresponding [`polymorphic] operation.
[:zh_CN@~] 在 [`polymorphic] 的相应操作的实现中为 [`true] 时（[#container.reqmts]），
才会分别由分配器的复制赋值、移动赋值或交换操作进行 [`Allocator] 的替换。

[para]
[:en] A program that instantiates the definition of [`polymorphic] for
a non-object type, an array type, [`in_place_t], a specialization of [`in_place_type_t],
or a cv-qualified type is ill-formed.
[:zh_CN] 若程序以非对象类型、数组类型、[`in_place_t]、[`in_place_type_t] 的特例或者 cv
限定类型实例化 [`polymorphic] 的定义式，则其非良构。

[para]
[:en] The template parameter [`T] of [`polymorphic] may be an incomplete type.
[:zh_CN] [`polymorphic] 的模板形参 [`T] 可以是不完整类型。

[para]
[:en] The template parameter [`Allocator] of [`polymorphic]
shall meet the [^:oc Allocator] requirements.
[:zh_CN] [`polymorphic] 的模板形参 [`Allocator] 应当满足 [^:oc Allocator] 的规定。

[para]
[:en] If a program declares an explicit or partial specialization of [`polymorphic],
the behavior is undefined.
[:zh_CN] 如果程序声明了 [`polymorphic] 的显式或部分特化式，则其行为未定义。
