[section#allocator.traits.members
    [:en] Static member functions
    [:zh_CN] 静态成员函数
]

[%@lib@member allocate[!allocator_traits]]
[codeblock:declaration]
[[nodiscard]] static constexpr pointer allocate(Alloc& a, size_type n);
[codeblock:end]

[div:description]
[para:returns]
[:en] [`a.allocate(n)].
[:zh_CN] [`a.allocate(n)]。
[div:end]

[%@lib@member allocate[!allocator_traits]]
[codeblock:declaration]
[[nodiscard]] static constexpr pointer allocate(Alloc& a, size_type n, const_void_pointer hint);
[codeblock:end]

[div:description]
[para:returns]
[:en] [`a.allocate(n, hint)] if that expression is well-formed; otherwise,
[`a.allocate(n)].
[:zh_CN] 如果表达式 [`a.allocate(n, hint)] 良构则为该表达式；否则返回
[`a.allocate(n)]。
[div:end]

[%@lib@member allocate_at_least[!allocator_traits]]
[codeblock:declaration]
[[nodiscard]] static constexpr allocation_result<pointer, size_type>
  allocate_at_least(Alloc& a, size_type n);
[codeblock:end]

[div:description]
[para:returns]
[:en] [`a.allocate_at_least(n)] if that expression is well-formed; otherwise,
[`{a.allocate(n), n}].
[:zh_CN] 如果表达式 [`a.allocate_at_least(n)] 良构则为该表达式；否则返回
[`{a.allocate(n), n}]。
[div:end]

[%@lib@member deallocate[!allocator_traits]]
[codeblock:declaration]
static constexpr void deallocate(Alloc& a, pointer p, size_type n);
[codeblock:end]

[div:description]
[para:effects]
[:en] Calls [`a.deallocate(p, n)].
[:zh_CN] 调用 [`a.deallocate(p, n)]。

[para:throws]
[:en] Nothing.
[:zh_CN] 无。
[div:end]

[%@lib@member construct[!allocator_traits]]
[codeblock:declaration]
template<class T, class... Args>
  static constexpr void construct(Alloc& a, T* p, Args&&... args);
[codeblock:end]

[div:description]
[para:effects]
[:en] Calls [`a.construct(p, std::forward<Args>(args)...)] if that call is
well-formed; otherwise, invokes [`construct_at(p, std::forward<Args>(args)...)].
[:zh_CN] 如果调用 [`a.construct(p, std::forward<Args>(args)...)] 良构，则进行该
调用；否则调用 [`construct_at(p, std::forward<Args>(args)...)]。
[div:end]

[%@lib@member destroy[!allocator_traits]]
[codeblock:declaration]
template<class T>
  static constexpr void destroy(Alloc& a, T* p);
[codeblock:end]

[div:description]
[para:effects]
[:en] Calls [`a.destroy(p)] if that call is well-formed; otherwise, invokes
[`destroy_at(p)].
[:zh_CN] 如果调用 [`a.destroy(p)] 良构，则进行该调用；否则调用 [`destroy_at(p)]。
[div:end]

[%@lib@member max_size[!allocator_traits]]
[codeblock:declaration]
static constexpr size_type max_size(const Alloc& a) noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`a.max_size()] if that expression is well-formed; otherwise,
[`numeric_limits<size_type>::max()/sizeof(value_type)].
[:zh_CN] 如果表达式 [`a.max_size()] 良构则为该表达式；否则返回
[`numeric_limits<size_type>::max()/sizeof(value_type)]。
[div:end]

[%@lib@member select_on_container_copy_construction[!allocator_traits]]
[codeblock:declaration]
static constexpr Alloc select_on_container_copy_construction(const Alloc& rhs);
[codeblock:end]

[div:description]
[para:returns]
[:en] [`rhs.select_on_container_copy_construction()] if that expression is
well-formed; otherwise, [`rhs].
[:zh_CN] 如果表达式 [`rhs.select_on_container_copy_construction()] 良构则为该
表达式；否则返回 [`rhs]。
[div:end]
