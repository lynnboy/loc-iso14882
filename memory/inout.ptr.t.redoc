[section#inout.ptr.t
    [:en] Class template [`inout_ptr_t]
    [:zh_CN] 类模板 [`inout_ptr_t]
]

[para]
[:en]
[`inout_ptr_t] is a class template used to adapt types such as smart pointers
([#smartptr]) for functions that use output pointer parameters whose
dereferenced values may first be deleted before being set to another allocated
value.
[:zh_CN]
[`inout_ptr_t] 是一种用于为诸如智能指针（[#smartptr]）之类的类型进行适配的类模板，
用于使用输出指针形参的函数，它被设置为另一个分配的值之前可首先删除其解引用的值。

[para]
[begin:example]
[codeblock]
#include <memory>

struct star_fish* star_fish_alloc();
int star_fish_populate(struct star_fish** ps, const char* description);

struct star_fish_deleter {
  void operator() (struct star_fish* c) const noexcept;
};

using star_fish_ptr = std::unique_ptr<star_fish, star_fish_deleter>;

int main(int, char*[]) {
  star_fish_ptr peach(star_fish_alloc());
  // ...
  // [:en] used, need to re-make \
  [:zh_CN] 已被使用，需要重新制作
  int err = star_fish_populate(std::inout_ptr(peach), "caring clown-fish liker");
  return err;
}
[codeblock:end]

[:en]
A [`unique_ptr] can be used with [`inout_ptr] to be passed into an output
pointer-style function.
[:zh_CN]
[`unique_ptr] 可以和 [`inout_ptr] 一起使用来传递给使用输出指针的函数。

[:en]
The original value will be properly deleted according to the function it is used
with and a new value reset in its place.
[:zh_CN]
根据使用它的函数，其原值会被正确删除，并会在其位置重置一个新值。
[end:example]

[%@lib inout_ptr_t]
[codeblock:synopsis]
namespace std {
  template<class Smart, class Pointer, class... Args>
  class inout_ptr_t {
  public:
    explicit inout_ptr_t(Smart&, Args...);
    inout_ptr_t(const inout_ptr_t&) = delete;

    ~inout_ptr_t();

    operator Pointer*() const noexcept;
    operator void**() const noexcept;

  private:
    Smart& s;                   // [=expos]
    tuple<Args...> a;           // [=expos]
    Pointer p;                  // [=expos]
  };
}
[codeblock:end]

[para]
[:en]
[`Pointer] shall meet the [^:oc NullablePointer] requirements.
[:zh_CN]
[`Pointer] 应当满足 [^:oc NullablePointer] 的规定。

[:en]
If [`Smart] is a specialization of [`shared_ptr], the program is ill-formed.
[:zh_CN]
若 [`Smart] 是 [`shared_ptr] 的特例，则程序非良构。

[begin:note]
[:en]
It is impossible to properly acquire unique ownership of the managed resource
from a [`shared_ptr] given its shared ownership model.
[:zh_CN]
由于 [`shared_ptr] 的所有权模型，不可能正确地从它获得所管理资源的独占所有权。
[end:note]

[para]
[:en]
Program-defined specializations of [`inout_ptr_t] that depend on at least 
program-defined type need not meet the requirements for the primary template.
[:zh_CN]
程序定义的 [`inout_ptr_t] 的特化式，若依赖于至少一个程序定义类型的，则不必满足
针对主模板的规定。

[para]
[:en]
Evaluations of the conversion functions on the same object may conflict
([#intro.races]).
[:zh_CN]
在相同对象上的转换函数求值可能互相冲突（[#intro.races]）。

[%@lib@ctor inout_ptr_t]
[codeblock:declaration]
explicit inout_ptr_t(Smart& smart, Args... args);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [`s] with [`smart], [`a] with [`std::forward<Args>(args)...],
and [`p] to either
[:zh_CN] 以 [`smart] 初始化 [`s]，以 [`std::forward<Args>(args)...] 初始化 [`a]，
并将 [`p] 初始化为：
[list]
[item]
[:en@~] [`smart] if [`is_point_v<Smart>] is [`true],
[:zh_CN@~] 当 [`is_point_v<Smart>] 为 [`true] 时，为 [`smart]，
[item]
[:en@~] otherwise, [`smart.get()].
[:zh_CN@~] 否则，为 [`smart.get()]。
[list:end]

[para:remarks]
[:en] An implementation can call [`s.release()].
[:zh_CN] 实现可以调用 [`s.release()]。

[para]
[begin:note]
[:en]
The constructor is not [`noexcept] to allow for a variety of non-terminating and
safe implementation strategies.
[:zh_CN]
构造函数并非 [`noexcept]，以允许多种不终止的以及安全的实现策略。

[:en]
For example, an intrusive pointer implementation with a control block can
allocate in the constructor and safely fail with an exception.
[:zh_CN]
例如，带有控制块的侵入式指针实现可以在构造函数中进行分配并安全地以异常失败。
[end:note]
[div:end]

[%@lib@dtor inout_ptr_t]
[codeblock:declaration]
~inout_ptr_t();
[codeblock:end]

[div:description]
[para]
[:en] Let [`SP] be [`[*POINTER_OF_OR](Smart, Pointer)] ([#memory.general]).
[:zh_CN] 令 [`SP] 为 [`[*POINTER_OF_OR](Smart, Pointer)]（[#memory.general]）。

[para]
[:en] Let [*release-statement] be [`s.release();] if an implementation does not
call [`s.release()] in the constructor.
[:zh_CN] 令 [*release-statement] 当实现并不在构造函数中调用 [`s.release()] 时为
[`s.release()]。

[:en] Otherwise, it is empty.
[:zh_CN] 否则，它为空。

[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：

[list]
[item]
[:zh_CN] 如果 [`is_pointer_v<Smart>] 为 [`true]，则为
[codeblock]
if (p) {
  apply([&](auto&&... args) {
    s = Smart( static_cast<SP>(p), std::forward<Args>(args)...); }, std::move(a));
}
[codeblock:end]
[:en] if [`is_pointer_v<Smart>] is [`true];

[item]
[:en] otherwise,
[:zh_CN] 否则，如果表达式
[`s.reset(static_cast<SP>(p), std::forward<Args>(args)...)] 良构，则为
[codeblock]
[[redoc("*>")]]release-statement;
if (p) {
  apply([&](auto&&... args) {
    s.reset(static_cast<SP>(p), std::forward<Args>(args)...); }, std::move(a));
}
[codeblock:end]
[:en] if the expression
[`s.reset(static_cast<SP>(p), std::forward<Args>(args)...)] is well-formed;

[item]
[:en] otherwise,
[:zh_CN] 否则，如果 [`is_constructible_v<Smart, SP, Args...>] 为 [`true]，则为
[codeblock]
[[redoc("*>")]]release-statement;
if (p) {
  apply([&](auto&&... args) {
    s = Smart(static_cast<SP>(p), std::forward<Args>(args)...); }, std::move(a));
}
[codeblock:end]
[:en] if [`is_constructible_v<Smart, SP, Args...>] is [`true];

[item]
[:en] otherwise, the program is ill-formed.
[:zh_CN] 否则，程序非良构。
[list:end]
[div:end]

[codeblock:declaration]
operator Pointer*() const noexcept;
[codeblock:end]

[div:description]
[para:expects]
[:en] [`operator void**()] has not been called on [`*this].
[:zh_CN] 尚未在 [`*this] 上调用 [`operator void**()]。

[para:returns]
[:en] [`addressof(const_cast<Pointer&>(p))].
[:zh_CN] [`addressof(const_cast<Pointer&>(p))]。
[div:end]

[codeblock:declaration]
operator void**() const noexcept;
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`is_same_v<Pointer, void*>] is [`false].
[:zh_CN] [`is_same_v<Pointer, void*>] 为 [`false]。

[para:mandates]
[:en] [`is_pointer_v<Pointer>] is [`true].
[:zh_CN] [`is_point_v<Pointer>] 为 [`true]。

[para:expects]
[:en] [`operator Pointer*()] has not been called on [`*this].
[:zh_CN] 尚未在 [`*this] 上调用 [`operator Pointer*()]。

[para:returns]
[:en] A pointer value [`v] such that:
[:zh_CN] 使如下各项成立的指针值 [`v]：
[list]
[item]
[:en@~] the initial value [`*v] is equivalent to [`static_cast<void*>(p)] and
[:zh_CN@~] [`*v] 的初始值等价于 [`static_cast<void*>(p)]，并且
[item]
[:en@~] any modification of [`*v] that is not followed by a subsequent
modification of [`*this] affects the value of [`p] during the destruction of
[`*this], such that [`static_cast<void*>(p) == *v].
[:zh_CN@~] 任何对 [`*v] 的改动，若其后未跟着后续对 [`*this] 的改动，则会影响
[`*this] 的销毁过程中的 [`p] 的值，如 [`static_cast<void*>(p) == *v]。
[list:end]

[para:remarks]
[:en] Accessing [`*v] outside the lifetime of [`*this] has undefined behavior.
[:zh_CN] 在 [`*this] 的生存期之外访问 [`*v] 是未定义行为。

[para]
[begin:note]
[:en] [`reinterpret_cast<void**>(static_cast<Pointer*>(*this))] can be a viable
implementation strategy for some implementations.
[:zh_CN] 对于一些实现，[`reinterpret_cast<void**>(static_cast<Pointer*>(*this))]
可以是一种可行的实现策略。
[end:note]
[div:end]
