[section#allocator.traits.types
    [:en] Member types
    [:zh_CN] 成员类型
]

[%@lib@member pointer[!allocator_traits]]
[codeblock:declaration]
using pointer = [[redoc("[=seebelow]")]];
[codeblock:end]

[div:description]
[para:ctype]
[:en] [`Alloc::pointer] if the [~qualified-id] [`Alloc::pointer] is valid and
denotes a type ([#temp.deduct]); otherwise, [`value_type*].
[:zh_CN] 如果[~限定标识] [`Alloc::pointer] 有效并且代表某个类型（[#temp.deduct]），
则为 [`Alloc::pointer]；否则为 [`value_type*]。
[div:end]

[%@lib@member const_pointer[!allocator_traits]]
[codeblock:declaration]
using const_pointer = [[redoc("[=seebelow]")]];
[codeblock:end]

[div:description]
[para:ctype]
[:en] [`Alloc::const_pointer] if the [~qualified-id] [`Alloc::const_pointer] is
valid and denotes a type ([#temp.deduct]); otherwise,
[`pointer_traits<pointer>::rebind<const value_type>].
[:zh_CN] 如果[~限定标识] [`Alloc::const_pointer] 有效并且代表某个类型
（[#temp.deduct]），则为 [`Alloc::const_pointer]；否则为
[`pointer_traits<pointer>::rebind<const value_type>]。
[div:end]

[%@lib@member void_pointer[!allocator_traits]]
[codeblock:declaration]
using void_pointer = [[redoc("[=seebelow]")]];
[codeblock:end]

[div:description]
[para:ctype]
[:en] [`Alloc::void_pointer] if the [~qualified-id] [`Alloc::void_pointer] is
valid and denotes a type ([#temp.deduct]); otherwise,
[`pointer_traits<pointer>::rebind<void>].
[:zh_CN] 如果[~限定标识] [`Alloc::void_pointer] 有效并且代表某个类型
（[#temp.deduct]），则为 [`Alloc::void_pointer]；否则为
[`pointer_traits<pointer>::rebind<void>]。
[div:end]

[%@lib@member const_void_pointer[!allocator_traits]]
[codeblock:declaration]
using const_void_pointer = [[redoc("[=seebelow]")]];
[codeblock:end]

[div:description]
[para:ctype]
[:en] [`Alloc::const_void_pointer] if the [~qualified-id]
[`Alloc::const_void_pointer] is valid and denotes a type ([#temp.deduct]);
otherwise, [`pointer_traits<pointer>::rebind<const void>].
[:zh_CN] 如果[~限定标识] [`Alloc::const_void_pointer] 有效并且代表某个类型
（[#temp.deduct]），则为 [`Alloc::const_void_pointer]；否则为
[`pointer_traits<pointer>::rebind<const void>]。
[div:end]

[%@lib@member difference_type[!allocator_traits]]
[codeblock:declaration]
using difference_type = [[redoc("[=seebelow]")]];
[codeblock:end]

[div:description]
[para:ctype]
[:en] [`Alloc::difference_type] if the [~qualified-id] [`Alloc::difference_type]
is valid and denotes a type ([#temp.deduct]); otherwise,
[`pointer_traits<pointer>::difference_type].
[:zh_CN] 如果[~限定标识] [`Alloc::difference_type] 有效并且代表某个类型
（[#temp.deduct]），则为 [`Alloc::difference_type]；否则为
[`pointer_traits<pointer>::difference_type]。
[div:end]

[%@lib@member size_type[!allocator_traits]]
[codeblock:declaration]
using size_type = [[redoc("[=seebelow]")]];
[codeblock:end]

[div:description]
[para:ctype]
[:en] [`Alloc::size_type] if the [~qualified-id] [`Alloc::size_type] is valid
and denotes a type ([#temp.deduct]); otherwise,
[`make_unsigned_t<difference_type>].
[:zh_CN] 如果[~限定标识] [`Alloc::size_type] 有效并且代表某个类型
（[#temp.deduct]），则为 [`Alloc::size_type]；否则为
[`make_unsigned_t<difference_type>]。
[div:end]

[%@lib@member propagate_on_container_copy_assignment[!allocator_traits]]
[codeblock:declaration]
using propagate_on_container_copy_assignment = [[redoc("[=seebelow]")]];
[codeblock:end]

[div:description]
[para:ctype]
[:en] [`Alloc::propagate_on_container_copy_assignment] if the [~qualified-id]
[`Alloc::propagate_on_container_copy_assignment] is valid and denotes a type
([#temp.deduct]); otherwise [`false_type].
[:zh_CN] 如果[~限定标识] [`Alloc::propagate_on_container_copy_assignment] 有效
并且代表某个类型（[#temp.deduct]），则为
[`Alloc::propagate_on_container_copy_assignment]；否则为 [`false_type]。
[div:end]

[%@lib@member propagate_on_container_move_assignment[!allocator_traits]]
[codeblock:declaration]
using propagate_on_container_move_assignment = [[redoc("[=seebelow]")]];
[codeblock:end]

[div:description]
[para:ctype]
[:en] [`Alloc::propagate_on_container_move_assignment] if the [~qualified-id]
[`Alloc::propagate_on_container_move_assignment] is valid and denotes a type
([#temp.deduct]); otherwise [`false_type].
[:zh_CN] 如果[~限定标识] [`Alloc::propagate_on_container_move_assignment] 有效
并且代表某个类型（[#temp.deduct]），则为
[`Alloc::propagate_on_container_move_assignment]；否则为 [`false_type]。
[div:end]

[%@lib@member propagate_on_container_swap[!allocator_traits]]
[codeblock:declaration]
using propagate_on_container_swap = [[redoc("[=seebelow]")]];
[codeblock:end]

[div:description]
[para:ctype]
[:en] [`Alloc::propagate_on_container_swap] if the [~qualified-id]
[`Alloc::propagate_on_container_swap] is valid and denotes a type ([#temp.deduct]);
otherwise [`false_type].
[:zh_CN] 如果[~限定标识] [`Alloc::propagate_on_container_swap] 有效并且代表某个
类型（[#temp.deduct]），则为 [`Alloc::propagate_on_container_swap]；否则为
[`false_type]。
[div:end]

[%@lib@member is_always_equal[!allocator_traits]]
[codeblock:declaration]
using is_always_equal = [[redoc("[=seebelow]")]];
[codeblock:end]

[div:description]
[para:ctype]
[:en] [`Alloc::is_always_equal] if the [~qualified-id] [`Alloc::is_always_equal]
is valid and denotes a type ([#temp.deduct]); otherwise [`is_empty<Alloc>::type].
[:zh_CN] 如果[~限定标识] [`Alloc::is_always_equal] 有效并且代表某个类型
（[#temp.deduct]），则为 [`Alloc::is_always_equal]；否则为
[`is_empty<Alloc>::type]。
[div:end]

[%@lib@member rebind_alloc[!allocator_traits]]
[codeblock:declaration]
template<class T> using rebind_alloc = [[redoc("[=seebelow]")]];
[codeblock:end]

[div:description]
[para:templalias]
[:en] [`Alloc::rebind<T>::other] if the [~qualified-id]
[`Alloc::rebind<T>::other] is valid and denotes a type ([#temp.deduct]);
otherwise, [`Alloc<T, Args>] if [`Alloc] is a class template instantiation of
the form [`Alloc<U, Args>], where [`Args] is zero or more type arguments;
otherwise, the instantiation of [`rebind_alloc] is ill-formed.
[:zh_CN] 如果[~限定标识] [`Alloc::rebind<T>::other] 有效并且代表某个类型
（[#temp.deduct]），则为 [`Alloc::rebind<T>::other]；否则如果 [`Alloc] 是形式为
[`Alloc<U, Args>] 的模板实例化，其中 [`Args] 为零或多个类型实参，则为
[`Alloc<T, Args>]；否则，对 [`rebind_alloc] 的实例化非良构。
[div:end]
