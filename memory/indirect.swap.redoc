[section#indirect.swap
    [:en] Swap
    [:zh_CN] 交换
]

[%@lib@member swap[!indirect]]
[codeblock:declaration]
constexpr void swap(indirect& other)
  noexcept(allocator_traits<Allocator>::propagate_on_container_swap::value ||
           allocator_traits<Allocator>::is_always_equal::value);
[codeblock:end]

[div:description]
[para:expects]
[:en] If [`allocator_traits<Allocator>::propagate_on_container_swap::value]
is [`true], then [`Allocator] meets the [^:oc Swappable] requirements.
[:zh_CN] 如果 [`allocator_traits<Allocator>::propagate_on_container_swap::value]
为 [`true]，那么 [`Allocator] 满足 [^:oc Swappable] 的规定。

[:en] Otherwise [`get_allocator() == other.get_allocator()] is [`true].
[:zh_CN] 否则，[`get_allocator() == other.get_allocator()] 为 [`true]。

[para:effects]
[:en] Swaps the states of [`*this] and [`other], exchanging owned objects or valueless states.
[:zh_CN] 交换 [`*this] 和 [`other] 的状态，互换其所拥有的对象或无值状态。

[:en] If [`allocator_traits<Allocator>::propagate_on_container_swap::value]
is [`true], then the allocators of [`*this] and [`other] are exchanged by calling
[`swap] as described in [#swappable.requirements].
[:zh_CN] 如果 [`allocator_traits<Allocator>::propagate_on_container_swap::value] 为 [`true]，
那么如 [#swappable.requirements] 所述，通过调用 [`swap] 互换 [`*this] 和 [`other] 的分配器。

[:en] Otherwise, the allocators are not swapped.
[:zh_CN] 否则，不交换分配器。

[begin:note]
[:en] Does not call [`swap] on the owned objects directly.
[:zh_CN] 不会对所拥有对象直接调用 [`swap]。
[end:note]
[div:end]

[%@lib@member swap[!indirect]]
[codeblock:declaration]
constexpr void swap(indirect& lhs, indirect& rhs) noexcept(noexcept(lhs.swap(rhs)));
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to [`lhs.swap(rhs)].
[:zh_CN] 等价于 [`lhs.swap(rhs)]。
[div:end]
