[section#inout.ptr
    [:en] Function template [`inout_ptr]
    [:zh_CN] 函数模板 [`inout_ptr]
]

[%@lib out_ptr]
[codeblock:declaration]
template<class Pointer = void, class Smart, class... Args>
  constexpr auto inout_ptr(Smart& s, Args&&... args);
[codeblock:end]

[div:description]
[para]
[:en] Let [`P] be [`Pointer] if [`is_void_v<Pointer>] is [`false], otherwise
[`[*POINTER_OF](Smart)].
[:zh_CN] 令 [`P] 当 [`is_void_v<Pointer>] 为 [`false] 时为 [`Pointer]，否则为
[`[*POINTER_OF](Smart)]。

[para:returns]
[:en] [`inout_ptr_t<Smart, P, Args&&...>(s, std::forward<Args>(args)...)].
[:zh_CN] [`inout_ptr_t<Smart, P, Args&&...>(s, std::forward<Args>(args)...)]。
[div:end]
