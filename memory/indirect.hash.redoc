[section#indirect.hash
    [:en] Hash support
    [:zh_CN] 散列支持
]

[%@lib@member hash[!indirect]]
[codeblock:declaration]
template<class T, class Allocator>
struct hash<indirect<T, Allocator>>;
[codeblock:end]

[div:description]
[para]
[:en] The specialization [`hash<indirect<T, Allocator>>] is enabled ([#unord.hash])
if and only if [`hash<T>] is enabled.
[:zh_CN] 当且仅当 [`hash<T>] 被启用时，特例 [`hash<indirect<T, Allocator>>] 被启用（[#unord.hash]）。

[:en] When enabled for an object [`i] of type [`indirect<T, Allocator>],
[`hash<indirect<T, Allocator>>()(i)] evaluates to either the same value as [`hash<T>()(*i)],
if [`i] is not valueless; otherwise to an [?impldef result of evaluating
[`hash<indirect<T, Allocator>>()(i)] if [`i] is valueless] value.
[:zh_CN] 若对于 [`indirect<T, Allocator>] 类型的对象 [`i] 启用，则
[`hash<indirect<T, Allocator>>()(i)] 的求值要么当 [`i] 无值时与 [`hash<T>()(*i)] 的值相同；
要么为某个[?impldef 当 [`i] 无值时[`hash<indirect<T, Allocator>>()(i)] 的求值结果]值。

[:en] The member functions are not guaranteed to be [`noexcept].
[:zh_CN] 各成员函数不保证为 [`noexcept]。
[div:end]
