[section#polymorphic.ctor
    [:en] Constructors
    [:zh_CN] 构造函数
]

[para]
[:en] The following element applies to all functions in [#polymorphic.ctor]:
[:zh_CN] 下列各项要素适用于 [#polymorphic.ctor] 中的所有函数：

[div:description]
[para:throws]
[:en] Nothing unless [`allocator_traits<Allocator>::allocate] or
[`allocator_traits<Allocator>::construct] throws.
[:zh_CN] 除非 [`allocator_traits<Allocator>::allocate] 或
[`allocator_traits<Allocator>::construct] 抛出异常，否则无抛出。
[div:end]

[%@lib@ctor polymorphic]
[codeblock:declaration]
constexpr explicit polymorphic();
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`is_default_constructible_v<Allocator>] is [`true].
[:zh_CN] [`is_default_constructible_v<Allocator>] 为 [`true]。

[para:mandates]
[list]
[item]
[:en] [`is_default_constructible_v<T>] is [`true], and
[:zh_CN] [`is_default_constructible_v<T>] 为 [`true]，并且
[item]
[:en] [`is_copy_constructible_v<T>] is [`true].
[:zh_CN] [`is_copy_constructible_v<T>] 为 [`true]。
[list:end]

[para:effects]
[:en] Constructs an owned object of type [`T] with an empty argument list,
using the allocator [*alloc].
[:zh_CN] 使用分配器 [*alloc]，以空实参列表构造所拥有的 [`T] 类型对象。
[div:end]

[%@lib@ctor polymorphic]
[codeblock:declaration]
constexpr explicit polymorphic(allocator_arg_t, const Allocator& a);
[codeblock:end]

[div:description]
[para:mandates]
[list]
[item]
[:en] [`is_default_constructible_v<T>] is [`true], and
[:zh_CN] [`is_default_constructible_v<T>] 为 [`true]，并且
[item]
[:en] [`is_copy_constructible_v<T>] is [`true].
[:zh_CN] [`is_copy_constructible_v<T>] 为 [`true]。
[list:end]

[para:effects]
[:en] [*alloc] is direct-non-list-initialized with [`a].
[:zh_CN] 以 [`a] 直接非列表初始化 [*alloc]。

[:en] Constructs an owned object of type [`T] with an empty argument list,
using the allocator [*alloc].
[:zh_CN] 使用分配器 [*alloc]，以空实参列表构造所拥有的 [`T] 类型对象。
[div:end]

[%@lib@ctor polymorphic]
[codeblock:declaration]
constexpr polymorphic(const polymorphic& other);
[codeblock:end]

[div:description]
[para:effects]
[:en] [*alloc] is direct-non-list-initialized with
[`allocator_traits<Allocator>::select_on_container_copy_construction(other.[*alloc])].
[:zh_CN] 以 [`allocator_traits<Allocator>::select_on_container_copy_construction(other.[*alloc])]
直接非列表初始化 [*alloc]。

[:en] If [`other] is valueless, [`*this] is valueless.
[:zh_CN] 如果 [`other] 无值，那么 [*this] 无值。

[:en] Otherwise, constructs an owned object of type [`U], where [`U] is the type of the
owned object in [`other], with the owned object in [`other] using the allocator [*alloc].
[:zh_CN] 否则，使用分配器 [*alloc]，以 [`other] 中所拥有的对象构造所拥有的 [`U] 类型对象，
其中 [`U] 为 [`other] 中所拥有对象的类型 [`U]。
[div:end]

[%@lib@ctor polymorphic]
[codeblock:declaration]
constexpr polymorphic(allocator_arg_t, const Allocator& a, const polymorphic& other);
[codeblock:end]

[div:description]
[para:effects]
[:en] [*alloc] is direct-non-list-initialized with [`a].
[:zh_CN] 以 [`a] 直接非列表初始化 [*alloc]。

[:en] If [`other] is valueless, [`*this] is valueless.
[:zh_CN] 如果 [`other] 无值，那么 [*this] 无值。

[:en] Otherwise, constructs an owned object of type [`U], where [`U] is the type of the
owned object in [`other], with the owned object in [`other] using the allocator [*alloc].
[:zh_CN] 否则，使用分配器 [*alloc]，以 [`other] 中所拥有的对象构造所拥有的 [`U] 类型对象，
其中 [`U] 为 [`other] 中所拥有对象的类型 [`U]。
[div:end]

[%@lib@ctor polymorphic]
[codeblock:declaration]
constexpr polymorphic(polymorphic&& other) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] [*alloc] is direct-non-list-initialized from [`std::move(other.[*alloc])].
[:zh_CN] 以 [`std::move(other.[*alloc])] 直接非列表初始化 [*alloc]。

[:en] If [`other] is valueless, [`*this] is valueless.
[:zh_CN] 如果 [`other] 无值，那么 [*this] 无值。

[:en] Otherwise, either [`*this] takes ownership of the owned object of [`other] or,
owns an object of the same type constructed from the owned object of [`other]
considering that owned object as an rvalue, using the allocator [*alloc].
[:zh_CN] 否则，或者 [`*this] 接过 [`other] 所拥有对象的所有权，或者拥有一个相同类型的对象，
它使用分配器 [*alloc]，从 [`other] 所拥有的对象（并将之作为右值）构造而来。
[div:end]

[%@lib@ctor polymorphic]
[codeblock:declaration]
constexpr polymorphic(allocator_arg_t, const Allocator& a, polymorphic&& other)
  noexcept(allocator_traits<Allocator>::is_always_equal::value);
[codeblock:end]

[div:description]
[para:effects]
[:en] [*alloc] is direct-non-list-initialized with [`a].
[:zh_CN] 以 [`a] 直接非列表初始化 [*alloc]。

[:en] If [`other] is valueless, [`*this] is valueless.
[:zh_CN] 如果 [`other] 无值，那么 [*this] 无值。

[:en] Otherwise, if [`[*alloc] == other.[*alloc]] is [`true], either constructs an
object of type [`polymorphic] that owns the owned object of [`other], making
[`other] valueless; or, owns an object of the same type constructed from the
owned object of [`other] considering that owned object as an rvalue.
[:zh_CN] 否则，如果 [`[*alloc] == other.[*alloc]] 为 [`true]，那么或者构造一个
[`polymorphic] 类型的对象，并拥有 [`other] 所拥有的对象；或者拥有一个相同类型的对象，
它从 [`other] 所拥有的对象（并将之作为右值）构造而来。

[:en] Otherwise, if [`[*alloc] != other.[*alloc]] is [`true], constructs an
object of type [`polymorphic], considering the owned object in [`other] as an
rvalue, using the allocator [*alloc].
[:zh_CN] 否则，如果 [`[*alloc] != other.[*alloc]] 为 [`true]，那么使用分配器 [*alloc]，
将 [`other] 所拥有的对象作为右值，构造一个 [`polymorphic] 类型的对象。
[div:end]

[%@lib@ctor polymorphic]
[codeblock:declaration]
template<class U = T>
  constexpr explicit polymorphic(U&& u);
[codeblock:end]

[div:description]
[para:constraints]
[:en] Where [`UU] is [`remove_cvref_t<U>],
[:zh_CN] 令 [`UU] 为 [`remove_cvref_t<U>]，
[list]
[item]
[:en] [`is_same_v<UU, polymorphic>] is [`false],
[:zh_CN] [`is_same_v<UU, polymorphic>] 为 [`false]，
[item]
[:en] [`derived_from<UU, T>] is [`true],
[:zh_CN] [`derived_from<UU, T>] 为 [`true]，
[item]
[:en] [`is_constructible_v<UU, U>] is [`true],
[:zh_CN] [`is_constructible_v<UU, U>] 为 [`true]，
[item]
[:en] [`is_copy_constructible_v<UU>] is [`true],
[:zh_CN] [`is_copy_constructible_v<UU>] 为 [`true]，
[item]
[:en] [`UU] is not a specialization of [`in_place_type_t], and
[:zh_CN] [`UU] 不是 [`in_place_type_t] 的特例，并且
[item]
[:en] [`is_default_constructible_v<Allocator>] is [`true].
[:zh_CN] [`is_default_constructible_v<Allocator>] 为 [`true]。
[list:end]

[para:effects]
[:en] Constructs an owned object of type [`U] with [`std::forward<U>(u)],
using the allocator [*alloc].
[:zh_CN] 使用分配器 [*alloc]，以 [`std::forward<U>(u)] 构造所拥有的 [`U] 类型对象。
[div:end]

[%@lib@ctor polymorphic]
[codeblock:declaration]
template<class U = T>
  constexpr explicit polymorphic(allocator_arg_t, const Allocator& a, U&& u);
[codeblock:end]

[div:description]
[para:constraints]
[:en] Where [`UU] is [`remove_cvref_t<U>],
[:zh_CN] 令 [`UU] 为 [`remove_cvref_t<U>]，
[list]
[item]
[:en] [`is_same_v<UU, polymorphic>] is [`false],
[:zh_CN] [`is_same_v<UU, polymorphic>] 为 [`false]，
[item]
[:en] [`derived_from<UU, T>] is [`true],
[:zh_CN] [`derived_from<UU, T>] 为 [`true]，
[item]
[:en] [`is_constructible_v<UU, U>] is [`true],
[:zh_CN] [`is_constructible_v<UU, U>] 为 [`true]，
[item]
[:en] [`is_copy_constructible_v<UU>] is [`true], and
[:zh_CN] [`is_copy_constructible_v<UU>] 为 [`true]，并且
[item]
[:en] [`UU] is not a specialization of [`in_place_type_t].
[:zh_CN] [`UU] 不是 [`in_place_type_t] 的特例。
[list:end]

[para:effects]
[:en] [*alloc] is direct-non-list-initialized with [`a].
[:zh_CN] 以 [`a] 直接非列表初始化 [*alloc]。

[:en] Constructs an owned object of type [`T] with [`std::forward<U>(u)]
using the allocator [*alloc].
[:zh_CN] 使用分配器 [*alloc]，以 [`std::forward<U>(u)] 构造所拥有的 [`T] 类型对象。
[div:end]

[%@lib@ctor polymorphic]
[codeblock:declaration]
template<class U, class... Ts>
  constexpr explicit polymorphic(in_place_type_t<U>, Ts&&... ts);
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en] [`is_same_v<remove_cvref_t<U>, U>] is [`true],
[:zh_CN] [`is_same_v<remove_cvref_t<U>, U>] 为 [`true]，
[item]
[:en] [`derived_from<U, T>] is [`true],
[:zh_CN] [`derived_from<U, T>] 为 [`true]，
[item]
[:en] [`is_constructible_v<U, Ts...>] is [`true],
[:zh_CN] [`is_constructible_v<U, Ts...>] 为 [`true]，
[item]
[:en] [`is_copy_constructible_v<U>] is [`true], and
[:zh_CN] [`is_copy_constructible_v<U>] 为 [`true]，并且
[item]
[:en] [`is_default_constructible_v<Allocator>] is [`true].
[:zh_CN] [`is_default_constructible_v<Allocator>] 为 [`true]。
[list:end]

[para:effects]
[:en] Constructs an owned object of type [`U] with [`std::forward<Ts>(ts)...],
using the allocator [*alloc].
[:zh_CN] 使用分配器 [*alloc]，以 [`std::forward<Ts>(ts)...] 构造所拥有的 [`U] 类型对象。
[div:end]

[%@lib@ctor polymorphic]
[codeblock:declaration]
template<class U, class... Ts>
  constexpr explicit polymorphic(allocator_arg_t, const Allocator& a,
                                 in_place_type_t<U>, Ts&&... ts);
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en] [`is_same_v<remove_cvref_t<U>, U>] is [`true],
[:zh_CN] [`is_same_v<remove_cvref_t<U>, U>] 为 [`true]，
[item]
[:en] [`derived_from<U, T>] is [`true],
[:zh_CN] [`derived_from<U, T>] 为 [`true]，
[item]
[:en] [`is_constructible_v<U, Ts...>] is [`true], and
[:zh_CN] [`is_constructible_v<U, Ts...>] 为 [`true]，并且
[item]
[:en] [`is_copy_constructible_v<U>] is [`true],
[:zh_CN] [`is_copy_constructible_v<U>] 为 [`true]。
[list:end]

[para:effects]
[:en] [*alloc] is direct-non-list-initialized with [`a].
[:zh_CN] 以 [`a] 直接非列表初始化 [*alloc]。

[:en] Constructs an owned object of type [`U] with [`std::forward<Ts>(ts)...],
using the allocator [*alloc].
[:zh_CN] 使用分配器 [*alloc]，以 [`std::forward<Ts>(ts)...] 构造所拥有的 [`U] 类型对象。
[div:end]

[%@lib@ctor polymorphic]
[codeblock:declaration]
template<class U, class I, class... Us>
  constexpr explicit polymorphic(in_place_type_t<U>, initializer_list<I> ilist, Us&&... us);
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en] [`is_same_v<remove_cvref_t<U>, U>] is [`true],
[:zh_CN] [`is_same_v<remove_cvref_t<U>, U>] 为 [`true]，
[item]
[:en] [`derived_from<U, T>] is [`true],
[:zh_CN] [`derived_from<U, T>] 为 [`true]，
[item]
[:en] [`is_constructible_v<U, initializer_list<I>&, Us...>] is [`true],
[:zh_CN] [`is_constructible_v<U, initializer_list<I>&, Us...>] 为 [`true]，
[item]
[:en] [`is_copy_constructible_v<U>] is [`true], and
[:zh_CN] [`is_copy_constructible_v<U>] 为 [`true]，并且
[item]
[:en] [`is_default_constructible_v<Allocator>] is [`true].
[:zh_CN] [`is_default_constructible_v<Allocator>] 为 [`true]。
[list:end]

[para:effects]
[:en] Constructs an owned object of type [`T] with the arguments
[`ilist, std::forward<Us>(us)...], using the allocator [*alloc].
[:zh_CN] 使用分配器 [*alloc]，以实参 [`ilist, std::forward<Us>(us)...]
构造所拥有的 [`T] 类型对象。
[div:end]

[%@lib@ctor polymorphic]
[codeblock:declaration]
template<class U, class I, class... Us>
  constexpr explicit polymorphic(allocator_arg_t, const Allocator& a,
                                 in_place_type_t<U>, initializer_list<I> ilist, Us&&... us);
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en] [`is_same_v<remove_cvref_t<U>, U>] is [`true],
[:zh_CN] [`is_same_v<remove_cvref_t<U>, U>] 为 [`true]，
[item]
[:en] [`derived_from<U, T>] is [`true],
[:zh_CN] [`derived_from<U, T>] 为 [`true]，
[item]
[:en] [`is_constructible_v<U, initializer_list<I>&, Us...>] is [`true], and
[:zh_CN] [`is_constructible_v<U, initializer_list<I>&, Us...>] 为 [`true]，并且
[item]
[:en] [`is_copy_constructible_v<U>] is [`true].
[:zh_CN] [`is_copy_constructible_v<U>] 为 [`true]。
[list:end]

[para:effects]
[:en] [*alloc] is direct-non-list-initialized with [`a].
[:zh_CN] 以 [`a] 直接非列表初始化 [*alloc]。

[:en] Constructs an owned object of type [`U] with the arguments
[`ilist, std::forward<Us>(us)...], using the allocator [*alloc].
[:zh_CN] 使用分配器 [*alloc]，以实参 [`ilist, std::forward<Us>(us)...]
构造所拥有的 [`U] 类型对象。
[div:end]
