[section#pointer.traits.types
    [:en] Member types
    [:zh_CN] 成员类型
]

[para]
[:en] The definitions in this subclause make use of the following
exposition-only class template and concept:
[:zh_CN] 本子条款中的各定义式使用以下仅用于阐释的类模板和概念：

[codeblock]
template<class T>
struct [[redoc("*>")]]ptr-traits-elem          // [=expos]
{ };

template<class T> requires requires { typename T::element_type; }
struct [[redoc("*>")]]ptr-traits-elem<T>
{ using type = typename T::element_type; };

template<template<class...> class SomePointer, class T, class... Args>
  requires (!requires { typename SomePointer<T, Args...>::element_type; })
struct [[redoc("*>")]]ptr-traits-elem<SomePointer<T, Args...>>
{ using type = T; };

template<class Ptr>
  concept [[redoc("*:c@def>")]]has-elem-type =       // [=expos]
    requires { typename [[redoc("*>")]]ptr-traits-elem<Ptr>::type; }
[codeblock:end]

[para]
[:en] If [`Ptr] satisfies [*:c has-elem-type], a specialization
[`pointer_traits<Ptr>] generated from the [`pointer_traits] primary template
has the following members as well as those described in
[#pointer.traits.functions]; otherwise, such a specialization has no members by
any of those names.
[:zh_CN] 如果 [`Ptr] 满足 [*:c has-elem-type]，则从 [`pointer_traits] 主模板生成
的特例 [`pointer_traits<Ptr>] 具有以下各成员，以及 [#pointer.traits.functions]
中所述的成员；否则，这种特例不包含任何这些名字的成员。


[%@lib@member pointer[!pointer_traits]]
[codeblock:declaration]
using pointer = [[redoc("[=seebelow]")]];
[codeblock:end]

[div:description]
[para:ctype]
[:en] [`Ptr].
[:zh_CN] [`Ptr]。
[div:end]

[%@lib@member element_type[!pointer_traits]]
[codeblock:declaration]
using element_type = [[redoc("[=seebelow]")]];
[codeblock:end]

[div:description]
[para:ctype]
[:en] [`Ptr::element_type] if the [~qualified-id] [`Ptr::element_type] is valid
and denotes a type ([#temp.deduct]); otherwise, [`T] if [`Ptr] is a class
template instantiation of the form [`SomePointer<T, Args>], where [`Args] is
zero or more type arguments; otherwise, the specialization is ill-formed.
[:zh_CN] 如果[~限定标识] [`Ptr::element_type] 有效且代表某个类型（[#temp.deduct]），
则为 [`Ptr::element_type]；否则若 [`Ptr] 是形式为 [`SomePointer<T, Args>] 的
类模板实例，其中 [`Args] 为零或多个类型实参，则为 [`T]；否则该特例非良构。
[div:end]

[%@lib@member difference_type[!pointer_traits]]
[codeblock:declaration]
using difference_type = [[redoc("[=seebelow]")]];
[codeblock:end]

[div:description]
[para:ctype]
[:en] [`Ptr::difference_type] if the [~qualified-id] [`Ptr::difference_type] is
valid and denotes a type ([#temp.deduct]); otherwise, [`ptrdiff_t].
[:zh_CN] 如果[~限定标识] [`Ptr::difference_type] 有效且代表某个类型
（[#temp.deduct]），则为 [`Ptr::difference_type]；否则为 [`ptrdiff_t] 。
[div:end]

[%@lib@member rebind[!pointer_traits]]
[codeblock:declaration]
template<class U> using rebind = [[redoc("[=seebelow]")]];
[codeblock:end]

[div:description]
[para:templalias]
[:en] [`Ptr::rebind<U>] if the [~qualified-id] [`Ptr::rebind<U>] is valid and
denotes a type ([#temp.deduct]); otherwise, [`SomePointer<U, Args>] if [`Ptr] is
a class template instantiation of the form [`SomePointer<T, Args>], where
[`Args] is zero or more type arguments; otherwise, the instantiation of
[`rebind] is ill-formed.
[:zh_CN] 如果[~限定标识] [`Ptr::rebind<U>] 有效且代表某个类型（[#temp.deduct]），
则为 [`Ptr::rebind<U>]；否则若 [`Ptr] 是形式为 [`SomePointer<T, Args>] 的类模板
实例，其中 [`Args] 为零或多个类型实参，则为 [`SomePointer<U, Args>]；否则对
[`rebind] 的实例化非良构。
[div:end]
