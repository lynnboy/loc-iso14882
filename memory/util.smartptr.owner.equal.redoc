[section#util.smartptr.owner.equal
    [:en] Struct [`owner_equal]
    [:zh_CN] 结构体 [`owner_equal]
]

[para]
[:en] The class [`owner_equal] provides ownership-based mixed equality
comparisons of shared and weak pointers.
[:zh_CN] 类 [`owner_equal] 提供基于所有权的共享指针和弱指针的混合相等性比较。

[%@lib owner_equal]
[codeblock:synopsis]
namespace std {
  struct owner_equal {
    template<class T, class U>
      constexpr bool operator()(const shared_ptr<T>&, const shared_ptr<U>&) const noexcept;
    template<class T, class U>
      constexpr bool operator()(const shared_ptr<T>&, const weak_ptr<U>&) const noexcept;
    template<class T, class U>
      constexpr bool operator()(const weak_ptr<T>&, const shared_ptr<U>&) const noexcept;
    template<class T, class U>
      constexpr bool operator()(const weak_ptr<T>&, const weak_ptr<U>&) const noexcept;

    using is_transparent = [[redoc("[=unspec]")]];
  };
}
[codeblock:end]

[%@lib@member operator()[!owner_equal]]
[codeblock:declaration]
template<class T, class U>
  constexpr bool operator()(const shared_ptr<T>& x, const shared_ptr<U>& y) const noexcept;
template<class T, class U>
  constexpr bool operator()(const shared_ptr<T>& x, const weak_ptr<U>& y) const noexcept;
template<class T, class U>
  constexpr bool operator()(const weak_ptr<T>& x, const shared_ptr<U>& y) const noexcept;
template<class T, class U>
  constexpr bool operator()(const weak_ptr<T>& x, const weak_ptr<U>& y) const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`x.owner_equal(y)].
[:zh_CN] [`x.owner_equal(y)]。

[para]
[begin:note]
[:en] [`x.owner_equal(y)] is [`true] if and only if [`x] and [`y] share
ownership or are both empty.
[:zh_CN] 当且仅当 [`x] 和 [`y] 共享所有权或均为空时，[`x.owner_equal(y)] 为 [`true]。
[end:note]
[div:end]
