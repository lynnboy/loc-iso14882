[section#default.allocator.general
    [:en] General
    [:zh_CN] 概述
]

[para]
[:en] All specializations of the default allocator meet the allocator
completeness requirements ([#allocator.requirements.completeness]).
[:zh_CN] 默认分配器的所有特例都满足迭代器完整性的规定
（[#allocator.requirements.completeness]）。

[%@lib allocator]
[%@lib@member value_type[!allocator]]
[%@lib@member size_type[!allocator]]
[%@lib@member difference_type[!allocator]]
[%@lib@member propagate_on_container_move_assignment[!allocator]]
[%@lib@member operator=[!allocator]]
[codeblock:synopsis]
namespace std {
  template<class T> class allocator {
   public:
    using value_type                             = T;
    using size_type                              = size_t;
    using difference_type                        = ptrdiff_t;
    using propagate_on_container_move_assignment = true_type;

    constexpr allocator() noexcept;
    constexpr allocator(const allocator&) noexcept;
    template<class U> constexpr allocator(const allocator<U>&) noexcept;
    constexpr ~allocator();
    constexpr allocator& operator=(const allocator&) = default;

    [[nodiscard]] constexpr T* allocate(size_t n);
    [[nodiscard]] constexpr allocation_result<T*> allocate_at_least(size_t n);
    constexpr void deallocate(T* p, size_t n);
  };
}
[codeblock:end]

[para]
[:en]
[`allocator_traits<allocator<T>>::is_always_equal::value] is [`true] for any [`T].
[:zh_CN]
[`allocator_traits<allocator<T>>::is_always_equal::value] 对任何 [`T] 均为 [`true]。
