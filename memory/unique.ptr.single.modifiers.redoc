[section#unique.ptr.single.modifiers
    [:en] Modifiers
    [:zh_CN] 改动函数
]

[%@lib@member release[!unique_ptr]]
[codeblock:declaration]
constexpr pointer release() noexcept;
[codeblock:end]

[div:description]
[para:ensures]
[:en] [`get() == nullptr].
[:zh_CN] [`get() == nullptr]。

[para:returns]
[:en] The value [`get()] had at the start of the call to [`release].
[:zh_CN] 在开始调用 [`release] 时 [`get()] 的值。
[div:end]

[%@lib@member reset[!unique_ptr]]
[codeblock:declaration]
constexpr void reset(pointer p = pointer()) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Assigns [`p] to the stored pointer, and then, with the old value of the
stored pointer, [`old_p], evaluates [`if (old_p) get_deleter()(old_p);]
[:zh_CN] 以 [`p] 对所存储的指针赋值，然后对原值 [`old_p] 执行
[`if (old_p) get_deleter()(old_p);]

[begin:note]
[:en] The order of these operations is significant because the call to
[`get_deleter()] might destroy [`*this].
[:zh_CN] 这些操作的顺序是重要的，因为对 [`get_deleter()] 的调用可能会销毁
[`*this]。
[end:note]

[para:ensures]
[:en] [`get() == p].
[:zh_CN] [`get() == p]。

[begin:note]
[:en] The postcondition does not hold if the call to [`get_deleter()] destroys
[`*this] since [`this->get()] is no longer a valid expression.
[:zh_CN] 若对 [`get_deleter()] 的调用销毁了 [`*this]，则该后条件并不会保持，这是
由于 [`this->get()] 不再是有效的表达式。
[end:note]

[para:remarks]
[:en] The behavior is undefined if the evaluation of [`get_deleter()(old_p)]
throws an exception.
[:zh_CN] 如果 [`get_deleter()(old_p)] 的求值抛出了异常，则其行为未定义。
[div:end]

[%@lib@member swap[!unique_ptr]]
[codeblock:declaration]
constexpr void swap(unique_ptr& u) noexcept;
[codeblock:end]

[div:description]
[para:expects]
[:en] [`get_deleter()] is swappable ([#swappable.requirements]) and does not
throw an exception under [`swap].
[:zh_CN] [`get_deleter()] 是可交换的（[#swappable.requirements]），并且不会在
[`swap] 中抛出异常。

[para:effects]
[:en] Invokes [`swap] on the stored pointers and on the stored deleters of
[`*this] and [`u].
[:zh_CN] 对 [`*this] 和 [`u] 所存储的指针和所存储的删除器调用 [`swap]。
[div:end]
