[section#polymorphic.syn
    [:en] Synopsis
    [:zh_CN] 纲要
]

[%@hdr@def polymorphic]
[codeblock:synopsis]
namespace std {
  template<class T, class Allocator = allocator<T>>
  class polymorphic {
  public:
    using value_type = T;
    using allocator_type = Allocator;
    using pointer = typename allocator_traits<Allocator>::pointer;
    using const_pointer = typename allocator_traits<Allocator>::const_pointer;

    // [:en] [#polymorphic.ctor], constructors [:zh_CN] [#polymorphic.ctor]，构造函数
    constexpr explicit polymorphic();
    constexpr explicit polymorphic(allocator_arg_t, const Allocator& a);
    constexpr polymorphic(const polymorphic& other);
    constexpr polymorphic(allocator_arg_t, const Allocator& a, const polymorphic& other);
    constexpr polymorphic(polymorphic&& other) noexcept;
    constexpr polymorphic(allocator_arg_t, const Allocator& a, polymorphic&& other)
      noexcept(@\seebelow@);
    template<class U = T>
      constexpr explicit polymorphic(U&& u);
    template<class U = T>
      constexpr explicit polymorphic(allocator_arg_t, const Allocator& a, U&& u);
    template<class U, class... Ts>
      constexpr explicit polymorphic(in_place_type_t<U>, Ts&&... ts);
    template<class U, class... Ts>
      constexpr explicit polymorphic(allocator_arg_t, const Allocator& a,
                                     in_place_type_t<U>, Ts&&... ts);
    template<class U, class I, class... Us>
      constexpr explicit polymorphic(in_place_type_t<U>, initializer_list<I> ilist, Us&&... us);
    template<class U, class I, class... Us>
      constexpr explicit polymorphic(allocator_arg_t, const Allocator& a,
                                     in_place_type_t<U>, initializer_list<I> ilist, Us&&... us);

    // [:en] [#polymorphic.dtor], destructor [:zh_CN] [#polymorphic.dtor]，析构函数
    constexpr ~polymorphic();

    // [:en] [#polymorphic.asgn], assignment [:zh_CN] [#polymorphic.asgn]，赋值
    constexpr polymorphic& operator=(const polymorphic& other);
    constexpr polymorphic& operator=(polymorphic&& other) noexcept(@\seebelow@);

    // [:en] [#polymorphic.obs], observers [:zh_CN] [#polymorphic.obs]，探察函数
    constexpr const T& operator*() const noexcept;
    constexpr T& operator*() noexcept;
    constexpr const_pointer operator->() const noexcept;
    constexpr pointer operator->() noexcept;
    constexpr bool valueless_after_move() const noexcept;
    constexpr allocator_type get_allocator() const noexcept;

    // [:en] [#polymorphic.swap], swap [:zh_CN] [#polymorphic.swap]，交换
    constexpr void swap(polymorphic& other) noexcept([[redoc("[=seebelow]")]]);
    friend constexpr void swap(polymorphic& lhs, polymorphic& rhs) noexcept([[redoc("[=seebelow]")]]);

  private:
    Allocator [[redoc("*>")]]alloc = Allocator();      // [=expos]
  };
}
[codeblock:end]
