[section#unique.ptr.single.asgn
    [:en] Assignment
    [:zh_CN] 赋值
]

[%@lib@member operator=[!unique_ptr]]
[codeblock:declaration]
constexpr unique_ptr& operator=(unique_ptr&& u) noexcept;
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`is_move_assignable_v<D>] is [`true].
[:zh_CN] [`is_move_assignable_v<D>] 为 [`true]。

[para:expects]
[:en] If [`D] is not a reference type, [`D] meets the [^:oc MoveAssignable]
requirements ([#:tab#cpp17.moveassignable]) and assignment of the deleter from
an rvalue of type [`D] does not throw an exception.
[:zh_CN] 若 [`D] 不是引用类型，则 [`D] 满足 [^:oc MoveAssignable] 的规定
（[#:tab#cpp17.moveassignable]），并且以类型 [`D] 的右值向删除器赋值时不抛出异常。

[:en] Otherwise, [`D] is a reference type; [`remove_reference_t<D>] meets the
[^:oc CopyAssignable] requirements and assignment of the deleter from an lvalue
of type [`D] does not throw an exception.
[:zh_CN] 否则，[`D] 为引用类型；[`remove_reference_t<D>] 满足
[^:oc CopyAssignable] 的规定，并且以类型 [`D] 的左值向删除器赋值时不抛出异常。

[para:effects]
[:en] Calls [`reset(u.release())] followed by
[`get_deleter() = std::forward<D>(u.get_deleter())].
[:zh_CN] 调用 [`reset(u.release())] 之后再跟着
[`get_deleter() = std::forward<D>(u.get_deleter())]。

[para:ensures]
[:en] If [`this != addressof(u)], [`u.get() == nullptr], otherwise [`u.get()] is
unchanged.
[:zh_CN] 当 [`this != addressof(u)] 时，[`u.get() == nullptr]，否则不改变
[`u.get()]。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@lib@member operator=[!unique_ptr]]
[codeblock:declaration]
template<class U, class E> constexpr unique_ptr& operator=(unique_ptr<U, E>&& u) noexcept;
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en] [`unique_ptr<U, E>::pointer] is implicitly convertible to [`pointer], and
[:zh_CN] [`unique_ptr<U, E>::pointer] 可以隐式转换为 [`pointer]，并且
[item]
[:en] [`U] is not an array type, and
[:zh_CN] [`U] 不是数组类型，并且
[item]
[:en] [`is_assignable_v<D&, E&&>] is [`true].
[:zh_CN] [`is_assignable_v<D&, E&&>] 为 [`true]。
[list:end]

[para:expects]
[:en] If [`E] is not a reference type, assignment of the deleter from an rvalue
of type [`E] is well-formed and does not throw an exception.
[:zh_CN] 若 [`E] 不是引用类型，则以类型 [`E] 的右值向删除器赋值良构且不抛出异常。

[:en] Otherwise, [`E] is a reference type and assignment of the deleter from an
lvalue of type [`E] is well-formed and does not throw an exception.
[:zh_CN] 否则，[`E] 为引用类型，且以类型 [`E] 的左值向删除器赋值良构且不抛出异常。

[para:effects]
[:en] Calls [`reset(u.release())] followed by
[`get_deleter() = std::forward<E>(u.get_deleter())].
[:zh_CN] 调用 [`reset(u.release())] 之后再跟着
[`get_deleter() = std::forward<E>(u.get_deleter())]。

[para:ensures]
[:en] [`u.get() == nullptr].
[:zh_CN] [`u.get() == nullptr].

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@lib@member operator=[!unique_ptr]]
[codeblock:declaration]
constexpr unique_ptr& operator=(nullptr_t) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] As if by [`reset()].
[:zh_CN] 如同执行 [`reset()]。

[para:ensures]
[:en] [`get() == nullptr].
[:zh_CN] [`get() == nullptr]。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]
