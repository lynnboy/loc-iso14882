[section#class.access.general
    [:en] General
    [:zh_CN] 概述
]

[:en]
[%protection[%access control]]
[%[`private][%access control[![`private]]]]
[%[`protected][%access control[![`protected]]]]
[%[`public][%access control[! [`public]]]]
[:zh_CN]
[%保护[%访问控制]]
[%[`private][%访问控制[![`private]]]]
[%[`protected][%访问控制[![`protected]]]]
[%[`public][%访问控制[! [`public]]]]

[para]
[:en]
A member of a class can be
[:zh_CN]
类的成员可以为

[list]
[item]
[:en@~]
[%access control[![`private]]]
private, that is, it can be named only by members and friends of the class in
which it is declared;
[:zh_CN@~]
[%访问控制[![`private]]]
私有（private），就是说，它只能被声明了它的类的成员和友元所指名；

[item]
[:en@~]
[%access control[![`protected]]]
protected, that is, it can be named only by members and friends of the
class in which it is declared, by classes derived from that class, and by their
friends (see [#class.protected]); or
[:zh_CN@~]
[%访问控制[![`protected]]]
受保护（protected），就是说，它只能被声明了它的类的成员和友元，派生自该类的类，
以及它们的友元所指名（参见 [#class.protected]）；或者

[item]
[:en@~]
[%access control[![`public]]]
public, that is, it can be named anywhere without access restriction.
[:zh_CN@~]
[%访问控制[![`public]]]
公开（public），就是说，它可以到处被指名而没有访问限制。
[list:end]

[begin:note]
[:en]
A constructor or destructor can be named by an expression ([#basic.def.odr])
even though it has no name.
[:zh_CN]
虽然构造函数和析构函数没有名字，它们也可被表达式指名（[#basic.def.odr]）。
[end:note]

[para]
[:en]
A member of a class can also access all the members to which the class has access.
[:zh_CN]
类的成员也可以访问这个类具有访问权的全部成员。

[:en]
A local class of a member function may access the same members that the member
function itself may access.[#:note#fn:$1]
[:zh_CN]
成员函数的局部类可以访问该成员函数自身可以访问的相同成员。[#:note#fn:$1]

[note:foot#fn:$1]
[:en]
Access permissions are thus transitive and cumulative to nested and local
classes.
[:zh_CN]
访问许可因此对嵌套类和局部类是可传递和可累积的。
[note:end]

[para]
[:en]
[%access control[!member name]]
[%default access control[% access control [!default]]]
[%access control[!default]]
Members of a class defined with the keyword [`class] are [`private] by default.
[:zh_CN]
[%访问控制[!成员名]]
[%默认访问控制[% 访问控制[!默认]]]
[%访问控制[!默认]]
以 [`class] 关键字定义的类的成员默认为 [`private]。

[:en]
Members of a class defined with the keywords [`struct] or [`union] are public
by default.
[:zh_CN]
以 [`struct] 或 [`union] 关键字定义的类的成员默认为公开的。

[begin:example]
[codeblock]
class X {
  int a;            // [:en] [`X::a] is private by default \
                       [:zh_CN] [`X::a] 默认为私有的
};

struct S {
  int a;            // [:en] [`S::a] is public by default \
                       [:zh_CN] [`S::a] 默认为公用的
};
[codeblock:end]
[end:example]

[para]
[:en]
Access control is applied uniformly to all declarations and expressions.
[:zh_CN]
访问控制一致地施加于所有声明式和表达式之上。

[begin:note]
[:en]
Access control applies to members nominated by friend declarations
([#class.friend]) and [~using-declaration]s ([#namespace.udecl]).
[:zh_CN]
访问控制施加于由友元声明式（[#class.friend]）和 [~using-声明式]
（[#namespace.udecl]）所提名的成员上。
[end:note]

[:en]
When a [~using-declarator] is named, access control is applied to it, not to the
declarations that replace it.
[:zh_CN]
当指名某个 [~using-声明符]时，访问控制施加于它之上，而非替换它的声明式之上。

[:en]
For an overload set, access control is applied only to the function selected by
overload resolution.
[:zh_CN]
对于重载集合，访问控制仅施加于被重载决议所选取的函数上。

[begin:note]
[:en]
Because access control applies to the declarations named, if access control is
applied to a typedef name, only the accessibility of the typedef name itself is
considered.
[:zh_CN]
因为访问控制施加于所指名的声明式上，故当访问控制施加于 typedef 名时，则仅考察该
typedef 名自身的可访问性。

[:en]
The accessibility of the entity referred to by the typedef is not considered.
[:zh_CN]
由该 typedef 名所指代的实体的可访问性不被考察。

[:en]
For example,
[:zh_CN]
例如，

[codeblock]
class A {
  class B { };
public:
  typedef B BB;
};

void f() {
  A::BB x;          // [:en] OK, typedef name [`A::BB] is public \
                       [:zh_CN] OK，typedef 名 [`A::BB] 是公用的
  A::B y;           // [:en] access error, [`A::B] is private \
                       [:zh_CN] 访问错误，[`A::B] 是私有的
}
[codeblock:end]
[end:note]

[para]
[begin:note]
[:en]
Access control does not prevent member from being found by name lookup or
implicit conversions to base classes from being considered.
[:zh_CN]
访问控制并不会防止成员被名字查找所找到或防止在转换为基类的隐式转换中被考虑到。
[end:note]

[:en]
The interpretation of a given construct is established without regard to access
control.
[:zh_CN]
为一个给定的构造所建立的解释与访问控制无关。

[:en]
If the interpretation established makes use of inaccessible members or base
classes, the construct is ill-formed.
[:zh_CN]
若所建立的解释利用了成员或基类的不可访问性，则该构造是非良构的。

[para]
[:en]
All access controls in [#class.access] affect the ability to name a class member
from the declaration of a particular entity, including parts of the declaration
preceding the name of the entity being declared and, if the entity is a class,
the definitions of members of the class appearing outside the class[=']s
[~member-specification].
[:zh_CN]
[#class.access] 中的所有访问控制都影响在某个特定实体的声明式中对某个类成员的指名
能力，其中也包括声明式中处于所声明的实体的名字前面的部分，以及当该实体是一个类时，
处于这个类的[~成员说明]之外的类成员的定义式中的情况。

[begin:note]
[:en]
This access also applies to implicit references to constructors, conversion
functions, and destructors.
[:zh_CN]
这种访问控制同样适用于隐式涉及的构造函数、转换函数和析构函数。
[end:note]

[para]
[begin:example]
[codeblock]
class A {
  typedef int I;    // [:en] private member \
                       [:zh_CN] 私有成员
  I f();
  friend I g(I);
  static I x;
  template<int> struct Q;
  template<int> friend struct R;
protected:
    struct B { };
};

A::I A::f() { return 0; }
A::I g(A::I p = A::x);
A::I g(A::I p) { return 0; }
A::I A::x = 0;
template<A::I> struct A::Q { };
template<A::I> struct R { };

struct D: A::B, A { };
[codeblock:end]

[:en]
Here, all the uses of [`A::I] are well-formed because [`A::f], [`A::x], and
[`A::Q] are members of class [`A] and [`g] and [`R] are friends of class [`A].
[:zh_CN]
此处，[`A::I] 的所有使用都是良构的，因为 [`A::f]、[`A::x] 和 [`A::Q] 是类 [`A]
的成员而 [`g] 和 [`R] 是类 [`A] 的友元。

[:en]
This implies, for example, that access checking on the first use of [`A::I] must
be deferred until it is determined that this use of [`A::I] is as the return
type of a member of class [`A].
[:zh_CN]
这暗示了，例如，对 [`A::I] 的第一次使用的访问检查必须推迟到能够确定 [`A::I] 的
该次使用是作为类 [`A] 的某个成员的返回类型之时。

[:en]
Similarly, the use of [`A::B] as a [~base-specifier] is well-formed because [`D]
is derived from [`A], so checking of [~base-specifier]s must be deferred until
the entire [~base-specifier-list] has been seen.
[:zh_CN]
相似地，[`A::B] 用作[~基说明符]是良构的，因为 [`D] 派生自 [`A]，故对[~基说明符]
的检查必须推迟到整个[~基说明符列表]可见之时。
[end:example]

[para]
[:en]
[%argument[!access checking and default]]
[%access control[!default argument]]
Access is checked for a default argument ([#dcl.fct.default]) at the point of
declaration, rather than at any points of use of the default argument.
[:zh_CN]
[%实参[!访问检查与默认～]]
[%访问控制[!默认实参]]
访问检查是在默认实参（[#dcl.fct.default]）的声明点进行，而不是在任何使用该默认
实参之处进行的。

[:en]
Access checking for default arguments in function templates and in member
functions of class templates is performed as described in [#temp.inst].
[:zh_CN]
对函数模板和类模板的成员函数中的默认实参进行的访问检查根据 [#temp.inst] 所述进行。

[para]
[:en]
Access for a default [~template-argument] ([#temp.param]) is checked in the
context in which it appears rather than at any points of use of it.
[:zh_CN]
默认[~模板实参]（[#temp.param]）的访问检查，在包含它们的语境中进行，而不是任何它
的使用点处进行。

[begin:example]
[codeblock]
class B { };
template <class T> class C {
protected:
  typedef T TT;
};

template <class U, class V = typename U::TT>
class D : public U { };

D <C<B> >* d;       // [:en] access error, [`C::TT] is protected \
                       [:zh_CN] 访问错误，[`C::TT] 是受保护的
[codeblock:end]
[end:example]
