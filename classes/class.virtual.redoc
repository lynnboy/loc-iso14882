[section#class.virtual
    [:en] Virtual functions
    [:zh_CN]
[%:begin#virtual.function
    [:en] function[!virtual]
    [:zh_CN] 函数[!虚～]
]
[%  [:en] type[!polymorphic]
    [:zh_CN] 类型[!多态～] ]
]

[para]
[:en]
A non-static member function is a [+:adj virtual function[%function[!virtual]]]
if it is first declared with the keyword [`virtual] or if it overrides a virtual
member function declared in a base class (see below).[#:note#fn:$1]
[:zh_CN]
如果某个非静态成员函数，它首先被以关键字 [`virtual] 进行声明，或者它覆盖了声明于
某个基类中的虚成员函数（见下文），则它是[+:adj 虚函数[%函数[!虚～]]]。[#:note#fn:$1]

[note:foot#fn:$1]
[:en]
The use of the [`virtual] specifier in the declaration of an overriding function
is valid but redundant (has empty semantics).
[:zh_CN]
在覆盖函数的声明式中使用 [`virtual] 说明符合法但冗余（具有空语义）。
[note:end]

[begin:note]
[:en]
Virtual functions support dynamic binding and object-oriented programming.
[:zh_CN]
虚函数支持动态绑定和面向对象程序设计。
[end:note]

[:en]
A class that declares or inherits a virtual function is called a
[+:adj polymorphic class [%class[!polymorphic]]].[#:note#fn:$2]
[:zh_CN]
声明或继承了虚函数的类称为[+:adj 多态类[%类[!多态～]]]。[#:note#fn:$2]

[note:foot#fn:$2]
[:en]
If all virtual functions are immediate functions, the class is still polymorphic
even though its internal representation might not otherwise require any
additions for that polymorphic behavior.
[:zh_CN]
当类的所有虚函数都是直接函数时，即便其内部表示并不需要为其多态行为添加任何额外的
东西，这个类仍是多态的。
[note:end]

[para]
[:en]
If a virtual member function [`vf] is declared in a class [`Base] and in a class
[`Derived], derived directly or indirectly from [`Base], a member function [`vf]
with the same name, parameter-type-list ([#dcl.fct]), cv-qualification, and
ref-qualifier (or absence of same) as [`Base::vf] is declared, then
[`Derived::vf] [+:% overrides][#:note#fn:$3] [`Base::vf].
[:zh_CN]
若在类 [`Base] 中声明了虚成员函数 [`vf]，且在直接或间接派生自 [`Base] 的类
[`Derived] 中，声明了与 [`Base::vf] 带有相同名字、形参类型列表（[#dcl.fct]）、
cv-限定以及引用限定符（或者同样不带有它们）的成员函数 [`vf]，则 [`Derived::vf]
[+:% 覆盖][#:note#fn:$3]了 [`Base::vf]。

[note:foot#fn:$3]
[:en]
A function with the same name but a different parameter list ([#over]) as
a virtual function is not necessarily virtual and does not override.
[:zh_CN]
与某个虚函数具有相同名字但形参列表不同（[#over]）的函数不必是虚的而且并不覆盖它。

[:en]
Access control ([#class.access]) is not considered in determining overriding.
[:zh_CN]
在确定覆盖函数时并不考察访问控制（第 [#class.access] 章）。
[note:end]

[:en]
For convenience we say that any virtual function overrides itself.
[:zh_CN]
为方便起见我们称任意虚函数都覆盖其自身。

[:en]
[%overrider[!final]]
A virtual member function [`C::vf] of a class object [`S] is a [+final overrider]
unless the most derived class ([#intro.object]) of which [`S] is a base class
subobject (if any) declares or inherits another member function that overrides
[`vf].
[:zh_CN]
[%覆盖函数[!最终～]]
类对象 [`S] 的虚成员函数 [`C::vf] 是[+最终覆盖函数]，除非以 [`S] 为基类子对象
的全派生类（[#intro.object]）（如果有），声明或继承了另一个覆盖了 [`vf] 的成员
函数。

[:en]
In a derived class, if a virtual member function of a base class subobject has
more than one final overrider the program is ill-formed.
[:zh_CN]
如果一个派生类中某个基类子对象的虚成员函数具有多个最终覆盖函数，则程序非良构。

[begin:example]
[codeblock]
struct A {
  virtual void f();
};
struct B : virtual A {
  virtual void f();
};
struct C : B , virtual A {
  using A::f;
};

void foo() {
  C c;
  c.f();                // [:en] calls [`B::f], the final overrider\
                           [:zh_CN] 调用了最终覆盖函数 [`B::f]
  c.C::f();             // [:en] calls [`A::f] because of the [~using-declaration] \
                           [:zh_CN] 由于 [~using-声明式]而调用了 [`A::f]
}
[codeblock:end]
[end:example]

[para:~]
[begin:example]
[codeblock]
struct A { virtual void f(); };
struct B : A { };
struct C : A { void f(); };
struct D : B, C { };            // [:en] OK: [`A::f] and [`C::f] are the final overriders \
                                   [:zh_CN] OK：[`A::f] 和 [`C::f] 分别是
                                // [:en@~] for the [`B] and [`C] subobjects, respectively \
                                   [:zh_CN@~] [`B] 和 [`C] 子对象的最终覆盖函数
[codeblock:end]
[end:example]

[para]
[begin:note]
[:en]
A virtual member function does not have to be visible to be overridden,
for example,
[:zh_CN]
要覆盖的虚成员函数不必是可见的，例如，

[codeblock]
struct B {
  virtual void f();
};
struct D : B {
  void f(int);
};
struct D2 : D {
  void f();
};
[codeblock:end]

[:en@~]
the function [`f(int)] in class [`D] hides the virtual function [`f()] in its
base class [`B]; [`D::f(int)] is not a virtual function.
[:zh_CN@~]
类 [`D] 中的函数 [`f(int)] 隐藏了其基类 [`B] 中的虚函数 [`f()]；[`D::f(int)]
不是虚函数。

[:en]
However, [`f()] declared in class [`D2] has the same name and the same parameter
list as [`B::f()], and therefore is a virtual function that overrides the
function [`B::f()] even though [`B::f()] is not visible in class [`D2].
[:zh_CN]
然而，类 [`D2] 中所声明的 [`f()] 与 [`B::f()] 具有相同名字和相同形参列表，且因此
是覆盖了函数 [`B::f()] 的虚函数，即便 [`B::f()] 在类 [`D2] 中并不可见。
[end:note]

[para]
[:en]
If a virtual function [`f] in some class [`B] is marked with the
[~virt-specifier] [`final] and in a class [`D] derived from [`B] a function
[`D::f] overrides [`B::f], the program is ill-formed.
[:zh_CN]
如果某个类 [`B] 中的一个虚函数 [`f] 被标以[~虚说明符] [`final]，而某个派生自
[`B] 的类 [`D] 中的一个函数 [`D::f] 覆盖了 [`B::f]，则程序非良构。

[begin:example]
[codeblock]
struct B {
  virtual void f() const final;
};

struct D : B {
  void f() const;   // [:en] error: [`D::f] attempts to override [`final B::f] \
                       [:zh_CN] 错误：[`D::f] 试图覆盖 [`final B::f]
};
[codeblock:end]
[end:example]

[para]
[:en]
If a virtual function is marked with the [~virt-specifier] [`override] and
does not override a member function of a base class, the program is ill-formed.
[:zh_CN]
如果一个虚函数被标以[~虚说明符] [`override]，而它并未覆盖某个基类成员函数，则
程序非良构。

[begin:example]
[codeblock]
struct B {
  virtual void f(int);
};

struct D : B {
  virtual void f(long) override;        // [:en] error: wrong signature overriding [`B::f] \
                                           [:zh_CN] 错误：覆盖 [`B::f] 的签名错误
  virtual void f(int) override;         // OK
};
[codeblock:end]
[end:example]

[para]
[:en]
A virtual function shall not have a trailing [~requires-clause] ([#dcl.decl]).
[:zh_CN]
虚函数不能有尾部 [~requires-子句]（[#dcl.decl]）。

[begin:example]
[codeblock]
struct A {
  virtual void f() requires true;       // [:en] error: virtual function cannot be constrained ([#temp.constr.decl]) \
                                           [:zh_CN] 错误：虚函数不能被约束（[#temp.constr.decl]）
};
[codeblock:end]
[end:example]

[para]
[:en]
Even though destructors are not inherited, a destructor in a derived class
overrides a base class destructor declared virtual; see [#class.dtor] and
[#class.free].
[:zh_CN]
即使析构函数无法继承，派生类中的析构函数仍覆盖声明为虚的基类析构函数；参见
[#class.dtor] 和 [#class.free]。

[para]
[:en]
The return type of an overriding function shall be either identical to the
return type of the overridden function or [+covariant[%return type[!covariant]]]
with the classes of the functions.
[:zh_CN]
覆盖函数的返回类型应当要么与其所覆盖的函数的返回类型一致，要么与这些函数的类之间
[+协变[%返回类型[!协变]]]。

[:en]
If a function [`D::f] overrides a function [`B::f], the return types of the
functions are covariant if they satisfy the following criteria:
[:zh_CN]
若函数 [`D::f] 覆盖了函数 [`B::f]，则如果这些函数的返回类型满足下列准则它们就是
协变的：

[list]
[item]
[:en] both are pointers to classes, both are lvalue references to classes, or
both are rvalue references to classes[#:note#fn:$4]
[:zh_CN] 它们均为指向类的指针，均为指代类的左值引用，或均为指代类的右值引用
[#:note#fn:$4]

[note:foot#fn:$4]
[:en]
Multi-level pointers to classes or references to multi-level pointers to classes
are not allowed.
[:zh_CN]
不允许指向类的多级指针，或指代指向类的多级指针的引用。
[note:end]

[item]
[:en] the class in the return type of [`B::f] is the same class as the class in
the return type of [`D::f], or is an unambiguous and accessible direct or
indirect base class of the class in the return type of [`D::f]
[:zh_CN] [`B::f] 的返回类型中的类与 [`D::f] 的返回类型中的类是相同的类，或者是
[`D::f] 的返回类型中的类的某个非歧义且可访问的直接或间接基类

[item]
[:en] both pointers or references have the same cv-qualification and the class
type in the return type of [`D::f] has the same cv-qualification as or less
cv-qualification than the class type in the return type of [`B::f].
[:zh_CN] 两个指针或引用带有相同的 cv 限定，并且 [`D::f] 的返回类型中的类类型与
[`B::f] 的返回类型中的类类型具有相同的 cv 限定或者更弱的 cv 限定。
[list:end]

[para]
[:en]
If the class type in the covariant return type of [`D::f] differs from that of
[`B::f], the class type in the return type of [`D::f] shall be complete at the
point of declaration of [`D::f] or shall be the class type [`D].
[:zh_CN]
若 [`D::f] 的协变返回类型中的类类型与 [`B::f] 的返回类型不同，则 [`D::f] 的返回
类型中的类类型在 [`D::f] 的声明点处应当是完整的，或应当为类类型 [`D]。

[:en]
When the overriding function is called as the final overrider of the overridden
function, its result is converted to the type returned by the (statically chosen)
overridden function ([#expr.call]).
[:zh_CN]
当覆盖函数作为被覆盖函数的最终覆盖函数被调用时，其结果被转换为（静态选择的）被
覆盖函数的返回类型（[#expr.call]）。

[begin:example]
[codeblock]
class B { };
class D : private B { friend class Derived; };
struct Base {
  virtual void vf1();
  virtual void vf2();
  virtual void vf3();
  virtual B*   vf4();
  virtual B*   vf5();
  void f();
};

struct No_good : public Base {
  D*  vf4();        // [:en] error: [`B] (base class of [`D]) inaccessible \
                       [:zh_CN] 错误：[`B]（[`D] 的基类）不可访问
};

class A;
struct Derived : public Base {
    void vf1();     // [:en] virtual and overrides [`Base::vf1()] \
                       [:zh_CN] 虚函数且覆盖了 [`Base::vf1()]
    void vf2(int);  // [:en] not virtual, hides [`Base::vf2()] \
                       [:zh_CN] 非虚函数，隐藏了 [`Base::vf2()]
    char vf3();     // [:en] error: invalid difference in return type only \
                       [:zh_CN] 错误：仅有返回类型不同是无效的
    D*   vf4();     // [:en] OK: returns pointer to derived class \
                       [:zh_CN] OK：返回指向派生类的指针
    A*   vf5();     // [:en] error: returns pointer to incomplete class \
                       [:zh_CN] 错误：返回了指向不完整类的指针
    void f();
};

void g() {
  Derived d;
  Base* bp = &d;                // [:en] standard conversion: \
                                   [:zh_CN] 标准转换：
                                // [:en@~] [`Derived*] to [`Base*] \
                                   [:zh_CN@~] [`Derived*] 向 [`Base*]
  bp->vf1();                    // [:en] calls [`Derived::vf1()] \
                                   [:zh_CN] 调用了 [`Derived::vf1()]
  bp->vf2();                    // [:en] calls [`Base::vf2()] \
                                   [:zh_CN] 调用了 [`Base::vf2()]
  bp->f();                      // [:en] calls [`Base::f()] (not virtual) \
                                   [:zh_CN] 调用了（非虚函数） [`Base::f()]
  B*  p = bp->vf4();            // [:en] calls [`Derived::vf4()] and converts the \
                                   [:zh_CN] 调用了 [`Derived::vf4()] 且将其结果
                                // [:en@~] result to [`B*] \
                                   [:zh_CN@~] 转换为 [`B*]
  Derived*  dp = &d;
  D*  q = dp->vf4();            // [:en] calls [`Derived::vf4()] and does not \
                                   [:zh_CN] 调用了 [`Derived::vf4()] 而并不转换
                                // [:en@~] convert the result to [`B*] \
                                   [:zh_CN@~] 其结果为 [`B*]
  dp->vf2();                    // [:en] error: argument mismatch \
                                   [:zh_CN] 错误：实参不匹配
}
[codeblock:end]
[end:example]

[para]
[begin:note]
[:en]
The interpretation of the call of a virtual function depends on the type of the
object for which it is called (the dynamic type), whereas the interpretation of
a call of a non-virtual member function depends only on the type of the pointer
or reference denoting that object (the static type) ([#expr.call]).
[:zh_CN]
对虚函数调用的解释依赖于被调用的对象的类型（其动态类型），反之对非虚成员函数的
调用的解释仅依赖于代表了对象的指针或引用的类型（其静态类型）（[#expr.call]）。
[end:note]

[para]
[begin:note]
[:en]
The [`virtual] specifier implies membership, so a virtual function cannot be a
non-member ([#dcl.fct.spec]) function.
[:zh_CN]
[`virtual] 说明符隐含了成员性，故虚函数不能为非成员（[#dcl.fct.spec]）函数。

[:en]
Nor can a virtual function be a static member, since a virtual function call
relies on a specific object for determining which function to invoke.
[:zh_CN]
虚函数也不能为静态成员，这是由于虚函数调用依赖于某个特定的对象以确定其所调用的
函数。

[:en]
[%friend[![`virtual] and]]
A virtual function declared in one class can be declared a friend
([#class.friend]) in another class.
[:zh_CN]
[%友元[![`virtual] 与～]]
在一个类中声明的虚函数可以在其他类中被声明为友元（[#class.friend]）。
[end:note]

[para]
[:en]
[%definition[!virtual function]]
A virtual function declared in a class shall be defined, or declared pure
([#class.abstract]) in that class, or both; no diagnostic is required
([#basic.def.odr]).
[:zh_CN]
[%定义[!虚函数]]
某个类中所声明的虚函数应当要么被定义，要么在该类中被声明为纯虚函数
（[#class.abstract]），或者二者同时具备；无须诊断（[#basic.def.odr]）。

[%  [:en] multiple inheritance[![`virtual] and]
    [:zh_CN] 多重继承[![`virtual] 与～] ]

[para]
[begin:example]
[:en]
Here are some uses of virtual functions with multiple base classes:
[:zh_CN]
这是多基类的虚函数的一些用例：

[%[:en] example[!virtual function]
  [:zh_CN] 示例[!虚函数] ]
[codeblock]
struct A {
  virtual void f();
};

struct B1 : A {                 // [:en] note non-virtual derivation \
                                   [:zh_CN] 注意，非虚派生
  void f();
};

struct B2 : A {
  void f();
};

struct D : B1, B2 {             // [:en] [`D] has two separate [`A] subobjects \
                                   [:zh_CN] [`D] 带有两个独立的 [`A] 子对象
};

void foo() {
  D   d;
//[`  A*  ap = &d;                ]// [:en] would be ill-formed: ambiguous \
                                      [:zh_CN] 应当为非良构的：有歧义
  B1*  b1p = &d;
  A*   ap = b1p;
  D*   dp = &d;
  ap->f();                      // [:en] calls [`D::B1::f] \
                                   [:zh_CN] 调用 [`D::B1::f]
  dp->f();                      // [:en] error: ambiguous \
                                   [:zh_CN] 错误：有歧义
}
[codeblock:end]

[:en]
In class [`D] above there are two occurrences of class [`A] and hence two
occurrences of the virtual member function [`A::f].
[:zh_CN]
在上述类 [`D] 中出现了两次类 [`A]，且由此出现了两个虚成员函数 [`A::f]。

[:en]
The final overrider of [`B1::A::f] is [`B1::f] and the final overrider of
[`B2::A::f] is [`B2::f].
[:zh_CN]
[`B1::A::f] 的最终覆盖函数为 [`B1::f] 而 [`B2::A::f] 的最终覆盖函数为 [`B2::f]。
[end:example]

[para]
[begin:example]
[:en]
The following example shows a function that does not have a unique final
overrider:
[:zh_CN]
如下示例显示了没有唯一的最终覆盖函数的函数：

[codeblock]
struct A {
  virtual void f();
};

struct VB1 : virtual A {        // [:en] note virtual derivation \
                                   [:zh_CN] 注意：虚派生
  void f();
};

struct VB2 : virtual A {
  void f();
};

struct Error : VB1, VB2 {       // [:en] error \
                                   [:zh_CN] 错误
};

struct Okay : VB1, VB2 {
  void f();
};
[codeblock:end]

[:en]
Both [`VB1::f] and [`VB2::f] override [`A::f] but there is no overrider of both
of them in class [`Error].
[:zh_CN]
[`VB1::f] 和 [`VB2::f] 都覆盖了 [`A::f]，但在类 [`Error] 中它们都没有覆盖函数。

[:en]
This example is therefore ill-formed.
[:zh_CN]
这个示例因此是非良构的。

[:en]
Class [`Okay] is well-formed, however, because [`Okay::f] is a final overrider.
[:zh_CN]
然而，类 [`Okay] 是良构的，因为 [`Okay::f] 是一个最终覆盖函数。
[end:example]

[para]
[begin:example]
[:en]
The following example uses the well-formed classes from above.
[:zh_CN]
如下示例使用了上面的良构的类。

[codeblock]
struct VB1a : virtual A {       // [:en] does not declare [`f] \
                                   [:zh_CN] 并未声明 [`f]
};

struct Da : VB1a, VB2 {
};

void foe() {
  VB1a*  vb1ap = new Da;
  vb1ap->f();                   // [:en] calls [`VB2::f] \
                                   [:zh_CN] 调用 [`VB2::f]
}
[codeblock:end]
[end:example]

[para]
[:en]
[%operator[!scope resolution]]
[%virtual function call]
Explicit qualification with the scope operator ([#expr.prim.id.qual]) suppresses
the virtual call mechanism.
[:zh_CN]
[%运算符[!作用域解析～]]
[%虚函数调用]
用作用域运算符（[#expr.prim.id.qual]）进行显式限定将抑制虚函数调用机制。

[begin:example]
[codeblock]
class B { public: virtual void f(); };
class D : public B { public: void f(); };

void D::f() { /* ... */ B::f(); }
[codeblock:end]

[:en]
Here, the function call in [`D::f] really does call [`B::f] and not [`D::f].
[:zh_CN]
此处，[`D::f] 中的函数调用其实调用了 [`B::f] 而不是 [`D::f]。
[end:example]

[para]
[:en]
A function with a deleted definition ([#dcl.fct.def]) shall not override a
function that does not have a deleted definition.
[:zh_CN]
带有弃置定义式（[#dcl.fct.def]）的函数不能覆盖没有弃置定义式的函数。

[:en]
Likewise, a function that does not have a deleted definition shall not override
a function with a deleted definition.
[:zh_CN]
相似地，没有弃置定义式的函数也不能覆盖带有弃置定义式的函数。

[%:end#virtual.function]

[para]
[:en]
A [`consteval] virtual function shall not override a virtual function that is
not [`consteval].
[:zh_CN]
[`consteval] 虚函数不能覆盖并非 [`consteval] 的虚函数。

[:en]
A [`consteval] virtual function shall not be overridden by a virtual function
that is not [`consteval].
[:zh_CN]
[`consteval] 虚函数不能被并非 [`consteval] 的虚函数所覆盖。
