[section#class.pre
    [:en] Preamble
    [:zh_CN] 导言
]

[para]
[:en]
[%[`{}][!class declaration]]
[%[`{}][!class definition]]
[%type[!class and]]
[%object[!class][%class object]]
A class is a type.
[:zh_CN]
[%[`{}][!类声明式]]
[%[`{}][!类定义式]]
[%类型[!类和～]]
[%对象[!类～][%类对象]]
类是类型。

[:en]
[%name [!class][%class name]]
Its name becomes a [~class-name] ([#class.name]) within its scope.
[:zh_CN]
[%名字 [!类][%类名]]
它的名字在其作用域中称为一个[~类名]（[#class.name]）。

[syntax]
[rule class-name [:zh_CN] 类名 ]
    [| identifier ]
    [| simple-template-id ]
[rule:end]
[syntax:end]

[:en]
A [~class-specifier] or an [~elaborated-type-specifier]s ([#dcl.type.elab]) is
used to make a [~class-name].
[:zh_CN]
[~类名]是由[~类说明符]和[~详述类型说明符]（[#dcl.type.elab]）产生的。

[:en]
An object of a class consists of a (possibly empty) sequence of members and base
class objects.
[:zh_CN]
类的对象是由其成员和基类对象的（可能为空的）序列构成的。

[syntax]
[rule class-specifier [:zh_CN] 类说明符 ]
    [| class-head [`{] [~:opt member-specification] [`}] ]
[rule:end]

[rule class-head [:zh_CN] 类头 ]
    [| class-key [~:opt attribute-specifier-seq] class-head-name
        [~:opt class-virt-specifier] [~:opt base-clause] ]
    [| class-key [~:opt attribute-specifier-seq] [~:opt base-clause] ]
[rule:end]

[rule class-head-name [:zh_CN] 类头名 ]
    [| [~:opt nested-name-specifier] class-name ]
[rule:end]

[rule class-virt-specifier [:zh_CN] 类虚说明符 ]
    [| [`:key final] ]
[rule:end]

[rule class-key [:zh_CN] 类关键字 ]
    [| [`:key class] ]
    [| [`:key struct] ]
    [| [`:key union] ]
[rule:end]
[syntax:end]

[:en]
A class declaration where the [~class-name] in the [~class-head-name] is a
[~simple-template-id] shall be an explicit specialization ([#temp.expl.spec]) or
a partial specialization ([#temp.class.spec]).
[:zh_CN]
[~类头名]中的[~类名]是个[~简单模板标识]的类声明式，应当是显式特化式
（[#temp.expl.spec]）或者部分特化式（[#temp.class.spec]）。

[:en]
A [~class-specifier] whose [~class-head] omits the [~class-head-name] defines an
unnamed class.
[:zh_CN]
在[~类头]中省略了[~类头名]的[~类说明符]，定义无名类。

[begin:note]
[:en]
An unnamed class thus can[=']t be [`final].
[:zh_CN]
因此无名类不能为 [`final]。
[end:note]

[para]
[:en]
A [~class-name] is inserted into the scope in which it is declared immediately
after the [~class-name] is seen.
[:zh_CN]
紧跟[~类名]出现之后，该[~类名]就被插入到声明它的作用域之中。

[:en]
The [~class-name] is also inserted into the scope of the class itself; this is
known as the [+injected-class-name].
[:zh_CN]
[~类名]也被插入到该类自身的作用域之中；这被称为[+注入类名]。

[:en]
For purposes of access checking, the injected-class-name is treated as if it
were a public member name.
[:zh_CN]
当进行访问检查时，注入类名被当作如同是个公用成员名。

[:en]
A [~class-specifier] is commonly referred to as a [+class definition[%definition
[!class]]].
[:zh_CN]
[~类说明符]通常称为[+类定义式[%定义式[!类～]]]。

[:en]
A class is considered defined after the closing brace of its [~class-specifier]
has been seen even though its member functions are in general not yet defined.
[:zh_CN]
在一个类的[~类说明符]的闭花括号出现之后，即使其成员函数一般还未被定义，这个类也
被认为是已定义的。

[:en]
The optional [~attribute-specifier-seq] appertains to the class; the attributes
in the [~attribute-specifier-seq] are thereafter considered attributes of the
class whenever it is named.
[:zh_CN]
可选的[~特性说明符序列]属于该类；随即一旦指名该类，[~特性说明符序列]中的特性标注
就被当作是该类的特性。

[para]
[:en]
If a [~class-head-name] contains a [~nested-name-specifier], the
[~class-specifier] shall refer to a class that was previously declared directly
in the class or namespace to which the [~nested-name-specifier] refers, or in an
element of the inline namespace set ([#namespace.def]) of that namespace (i.e.,
not merely inherited or introduced by a [~using-declaration]), and the
[~class-specifier] shall appear in a namespace enclosing the previous
declaration.
[:zh_CN]
若[~类头名]包含[~嵌套名说明符]，则该[~类说明符]应当涉指在由该[~嵌套名说明符]所
涉指的类或命名空间中，或者在这个命名空间的内联命名空间集合（[#namespace.def]）的
某个元素之中，某个曾经直接声明过的类（就是说，并非继承来的或通过 [~using-声明式]
所引入的），并且该[~类说明符]应当出现在一个包围这个先前的声明式的命名空间中。

[:en]
In such cases, the [~nested-name-specifier] of the [~class-head-name] of the
definition shall not begin with a [~decltype-specifier].
[:zh_CN]
这些情况中，该定义式的[~类头名]的[~嵌套名说明符]不能以 [~decltype-说明符]开始。

[para]
[begin:note]
[:en]
The [~class-key] determines whether the class is a union ([#class.union]) and
whether access is public or private by default ([#class.access]).
[:zh_CN]
[~类关键字]决定了类是否是联合体（[#class.union]）以及默认访问是公开还是私有
（[#class.access]）。

[:en]
A union holds the value of at most one data member at a time.
[:zh_CN]
联合体同时仅持有最多一个数据成员的值。
[end:note]

[para]
[:en]
If a class is marked with the [~class-virt-specifier] [`final] and it appears
as a [~class-or-decltype] in a [~base-clause] ([#class.derived]), the program is
ill-formed.
[:zh_CN]
如果一个类标有[~类虚说明符] [`final]，而它被用作[~基子句]中的一个
[~类或-decltype]（[#class.derived]），则程序非良构。

[:en]
Whenever a [~class-key] is followed by a [~class-head-name], the [~identifier]
[`final], and a colon or left brace, [`final] is interpreted as a
[~class-virt-specifier].
[:zh_CN]
一旦一个[~类关键字]后面跟着一个[~类头名]，[~标识符] [`final]，和一个冒号或者
左花括号，则 [`final] 即被解释为[~类虚说明符]。

[begin:example]
[codeblock]
struct A;
struct A final {};      // [:en] OK: definition of [`struct A], \
                           [:zh_CN] OK：[`struct A] 的定义式
                        // [:en@~] not value-initialization of variable [`final] \
                           [:zh_CN@~] 而不是变量 [`final] 的值初始化

struct X {
 struct C { constexpr operator int() { return 5; } };
 struct B final : C{};  // [:en] OK: definition of nested class [`B], \
                           [:zh_CN] OK：嵌套类 [`B] 的定义式，
                        // [:en@~] not declaration of a bit-field member [`final] \
                           [:zh_CN@~] 而不是位字段成员 [`final] 的声明式
};
[codeblock:end]
[end:example]

[para]
[begin:note]
[:en]
Complete objects of class type have nonzero size.
[:zh_CN]
类类型的完整对象具有非零大小。

[:en]
Base class subobjects and members declared with the [`no_unique_address]
attribute ([#dcl.attr.nouniqueaddr]) are not so constrained.
[:zh_CN]
基类子对象和以 [`no_unique_address] 特性标注（[#dcl.attr.nouniqueaddr]）声明的
成员则没有这种限制。
[end:note]

[para]
[begin:note]
[:en]
Class objects can be assigned ([#expr.ass], [#over.ass], [#class.copy.assign]),
passed as arguments to functions ([#dcl.init], [#class.copy.ctor]), and returned
by functions (except objects of classes for which copying or moving has been
restricted; see [#dcl.fct.def.delete] and [#class.access]).
[:zh_CN]
类对象可以被赋值（[#expr.ass]，[#over.ass]，[#class.copy.assign]），作为实参传递
给函数（[#dcl.init]，[#class.copy.ctor]），或者由函数返回（但不包括限制了复制或
移动操作的类对象；参见 [#dcl.fct.def.delete] 和 [#class.access]）。

[:en]
Other plausible operators, such as equality comparison, can be defined by the
user; see [#over.oper].
[:zh_CN]
其他貌似合理的运算符，如相等性比较，可以由用户进行定义；参见 [#over.oper]。
[end:note]
