[section#class.pre
    [:en] Preamble
    [:zh_CN] 导言
]

[para]
[:en]
[%[`{}][!class declaration]]
[%[`{}][!class definition]]
[%type[!class and]]
[%object[!class][%class object]]
A class is a type.
[:zh_CN]
[%[`{}][!类声明式]]
[%[`{}][!类定义式]]
[%类型[!类和～]]
[%对象[!类～][%类对象]]
类是一种类型。

[:en] [%name [!class][%class name]]
Its name becomes a [~class-name] ([#class.name]) within its scope.
[:zh_CN] [%名字 [!类][%类名]]
它的名字在其作用域中称为一个[~类名]（[#class.name]）。

[syntax]
[rule class-name [:zh_CN] 类名 ]
    [| identifier ]
    [| simple-template-id ]
[rule:end]
[syntax:end]

[:en] A [~class-specifier] or an [~elaborated-type-specifier]s ([#dcl.type.elab])
is used to make a [~class-name].
[:zh_CN] [~类名]是由[~类说明符]和[~详述类型说明符]（[#dcl.type.elab]）产生的。

[:en] An object of a class consists of a (possibly empty) sequence of members
and base class objects.
[:zh_CN] 类的对象是由其成员和基类对象的（可能为空的）序列构成的。

[syntax]
[rule class-specifier [:zh_CN] 类说明符 ]
    [| class-head [`{] [~:opt member-specification] [`}] ]
[rule:end]

[rule class-head [:zh_CN] 类头 ]
    [| class-key [~:opt attribute-specifier-seq] class-head-name
        [~:opt class-property-specifier-seq] [~:opt base-clause] ]
    [| class-key [~:opt attribute-specifier-seq] [~:opt base-clause] ]
[rule:end]

[rule class-head-name [:zh_CN] 类头名 ]
    [| [~:opt nested-name-specifier] class-name ]
[rule:end]

[rule class-property-specifier-seq [:zh_CN] 类性质说明符序列 ]
    [| class-property-specifier [~:opt class-property-specifier-seq] ]
[rule:end]

[rule class-property-specifier [:zh_CN] 类性质说明符 ]
    [| [`:key final] ]
    [| [`:key trivially_relocatable_if_eligible] ]
    [| [`:key replaceable_if_eligible] ]
[rule:end]

[rule class-key [:zh_CN] 类关键词 ]
    [| [`:key class] ]
    [| [`:key struct] ]
    [| [`:key union] ]
[rule:end]
[syntax:end]

[:en] A class declaration where the [~class-name] in the [~class-head-name] is a
[~simple-template-id] shall be an explicit specialization ([#temp.expl.spec]) or
a partial specialization ([#temp.spec.partial]).
[:zh_CN] [~类头名]中的[~类名]是个[~简单模板标识]的类声明式，应当是显式特化式
（[#temp.expl.spec]）或者部分特化式（[#temp.spec.partial]）。

[:en] A [~class-specifier] whose [~class-head] omits the [~class-head-name]
defines an [+:adj unnamed[!class]].
[:zh_CN] 在[~类头]中省略了[~类头名]的[~类说明符]，定义[+:adj 无名[!类]]。

[begin:note]
[:en] An unnamed class thus can[=']t be [`final].
[:zh_CN] 因此无名类不能为 [`final]。
[end:note]

[:en] Otherwise, the [~class-name] is an [~identifier]; it is not looked up, and
the [~class-specifier] introduces it.
[:zh_CN] 否则，该[~类名]为[~标识符]；不对其进行查找，而该[~类说明符]引入了它。

[para]
[:en] The [%component name]component name of the [~class-name] is also bound in
the scope of the class (template) itself; this is known as the [+injected-class-name].
[:zh_CN] [~类名]的成分名[%成分名]也在该类（模板）自身的作用域之中绑定；这被称为[+注入类名]。

[:en] For purposes of access checking, the injected-class-name is treated as if
it were a public member name.
[:zh_CN] 当进行访问检查时，注入类名被当作如同公开成员名。

[:en] A [~class-specifier] is commonly referred to as a [+class definition
[%definition[!class]]].
[:zh_CN] [~类说明符]通常称为[+类定义式[%定义式[!类～]]]。

[:en] A class is considered defined after the closing brace of its [~class-specifier]
has been seen even though its member functions are in general not yet defined.
[:zh_CN] 在一个类的[~类说明符]的闭花括号出现之后，即使通常其成员函数还未被定义，这个类也
被认为是已定义的。

[:en] The optional [~attribute-specifier-seq] appertains to the class; the
attributes in the [~attribute-specifier-seq] are thereafter considered attributes
of the class whenever it is named.
[:zh_CN] 可选的[~属性说明符序列]属于该类；随即一旦指名该类，[~属性说明符序列]中的属性
就被当作是该类的属性。

[para]
[:en] If a [~class-head-name] contains a [~nested-name-specifier], the
[~class-specifier] shall not inhabit a class scope.
[:zh_CN] 若[~类头名]包含[~嵌套名说明符]，则该[~类说明符]不能居于某个类作用域。

[:en] If its [~class-name] is an [~identifier], the [~class-specifier] shall
correspond to one or more declarations nominable in the class, class template, or
namespace to which the [~nested-name-specifier] refers; they shall all have the
same target scope, and the target scope of the [~class-specifier] is that scope.
[:zh_CN] 如果其[~类名]是一个[~标识符]，则该[~类说明符]应当对应于由该[~嵌套名说明符]所
涉指的类、类模板或命名空间中可提名的一个或多个声明式；它们应当全部具有相同的目标作用域，
且该[~类说明符]的目标作用域即为这个作用域。

[begin:example]
[codeblock]
namespace N {
  template<class>
  struct A {
    struct B;
  };
}
using N::A;
template<class T> struct A<T>::B {};    // OK
template<> struct A<void> {};           // OK
[codeblock:end]
[end:example]

[para]
[begin:note]
[:en] The [~class-key] determines whether the class is a union ([#class.union])
and whether access is public or private by default ([#class.access]).
[:zh_CN] [~类关键词]决定了类是否是联合体（[#class.union]）以及默认访问是公开还是私有
（[#class.access]）。

[:en] A union holds the value of at most one data member at a time.
[:zh_CN] 联合体同时仅持有最多一个数据成员的值。
[end:note]

[para]
[:en] Each [~class-property-specifier] shall appear at most once
withina single [~class-property-specifier-seq].
[:zh_CN] 每个[~类性质说明符]在单个[~类性质说明符序列]中应最多出现一次。

[:en] Whenever a [~class-key] is followed by a [~class-head-name], the [~identifier]
[`final], [`trivially_relocatable_if_eligible], or [`replaceable_if_eligible],
and a colon or left brace, the identifier is interpreted as a
[~class-property-specifier].
[:zh_CN] 一旦一个[~类关键词]后面跟着一个[~类头名]，[~标识符] [`final]、
[`trivially_relocatable_if_eligible] 或 [`replaceable_if_eligible]，和一个冒号或者
左花括号，则该标识符即被解释为[~类性质说明符]。

[begin:example]
[codeblock]
struct A;
struct A final {};      // [:en] OK, definition of [`struct A], \
                        [:zh_CN] OK，[`struct A] 的定义式
                        // [:en@~] not value-initialization of variable [`final] \
                        [:zh_CN@~] 而不是变量 [`final] 的值初始化

struct X {
 struct C { constexpr operator int() { return 5; } };
 struct B trivially_relocatable_if_eligible : C{};
                        // [:en] OK, definition of nested class [`B], \
                        [:zh_CN] OK，嵌套类 [`B] 的定义式，
                        // [:en@~] not declaration of a bit-field member \
                        [:zh_CN@~] 而不是位字段成员
                        // [:en@~] [`trivially_relocatable_if_eligible] \
                        [:zh_CN@~] [`trivially_relocatable_if_eligible] 的声明式
};
[codeblock:end]
[end:example]

[para]
[:en] If a class is marked with the [~class-property-specifier] [`final] and
that class appears as a [~class-or-decltype] in a [~base-clause] ([#class.derived]),
the program is ill-formed.
[:zh_CN] 如果一个类标有[~类性质说明符] [`final]，而该类被用作[~基子句]中的一个
[~类或-decltype]（[#class.derived]），则程序非良构。

[para]
[begin:note]
[:en] Complete objects of class type have nonzero size.
[:zh_CN] 类类型的完整对象具有非零大小。

[:en] Base class subobjects and members declared with the [`no_unique_address]
attribute ([#dcl.attr.nouniqueaddr]) are not so constrained.
[:zh_CN] 基类子对象和以 [`no_unique_address] 属性（[#dcl.attr.nouniqueaddr]）声明
的成员则没有这种限制。
[end:note]

[para]
[begin:note]
[:en] Class objects can be assigned ([#over.assign], [#class.copy.assign]),
passed as arguments to functions ([#dcl.init], [#class.copy.ctor]), and returned
by functions (except objects of classes for which copying or moving has been
restricted; see [#dcl.fct.def.delete] and [#class.access]).
[:zh_CN] 类对象可以被赋值（[#over.assign]，[#class.copy.assign]），作为实参传递给函数
（[#dcl.init]，[#class.copy.ctor]），或者由函数返回（但不包括限制了复制或移动操作的类对象；
参见 [#dcl.fct.def.delete] 和 [#class.access]）。

[:en] Other plausible operators, such as equality comparison, can be defined by
the user; see [#over.oper].
[:zh_CN] 其他貌似合理的运算符，如相等性比较，可以由用户进行定义；参见 [#over.oper]。
[end:note]
