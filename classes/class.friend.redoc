[section#class.friend
    [:en] Friends
    [:zh_CN] 友元

[:en]
[%friend function[!access and]]
[%access control[!friend function]]
[:zh_CN]
[%友元函数[!访问与～]]
[%访问控制[!友元函数]]
]

[para]
[:en]
A friend of a class is a function or class that is given permission to name the
private and protected members of the class.
[:zh_CN]
类的友元是被授予了对该类的私有和受保护成员进行指名的许可的函数和类。

[:en]
A class specifies its friends, if any, by way of friend declarations.
[:zh_CN]
类通过友元声明式指定其友元（如果有）。

[:en]
Such declarations give special access rights to the friends, but they do not
make the nominated friends members of the befriending class.
[:zh_CN]
此种声明式向友元授予特殊访问权，但它们并不把所提名的友元变为视之为友元的类的成员。

[begin:example]
[:en]
The following example illustrates the differences between members and friends:
[:zh_CN]
如下示例演示了成员和友元之间的区别：

[:en]
[%friend function[!member function and]]
[:zh_CN]
[%友元函数[!成员函数与～]]

[codeblock]
class X {
  int a;
  friend void friend_set(X*, int);
public:
  void member_set(int);
};

void friend_set(X* p, int i) { p->a = i; }
void X::member_set(int i) { a = i; }

void f() {
  X obj;
  friend_set(&obj,10);
  obj.member_set(10);
}
[codeblock:end]
[end:example]

[para]
[:en]
[%friend[!class access and]]
Declaring a class to be a friend implies that private and protected members of
the class granting friendship can be named in the [~base-specifier]s and member
declarations of the befriended class.
[:zh_CN]
[%友元[!类访问与～]]
将类声明为友元，意味着在被视为友元的类的[~基说明符]和成员的声明式中，可以指名
授予友元关系的类的私有和受保护成员。

[begin:example]
[codeblock]
class A {
  class B { };
  friend class X;
};

struct X : A::B {               // [:en] OK: [`A::B] accessible to friend \
                                [:zh_CN] OK：[`A::B] 对于友元是可访问的
  A::B mx;                      // [:en] OK: [`A::B] accessible to member of friend \
                                [:zh_CN] OK：[`A::B] 对于友元的成员是可访问的
  class Y {
    A::B my;                    // [:en] OK: [`A::B] accessible to nested member of friend \
                                [:zh_CN] OK：[`A::B] 对于友元的嵌套成员是可访问的
  };
};
[codeblock:end]
[end:example]

[begin:example]
[codeblock]
class X {
  enum { a=100 };
  friend class Y;
};

class Y {
  int v[X::a];                  // [:en] OK, [`Y] is a friend of [`X] \
                                [:zh_CN] OK，[`Y] 是 [`X] 的友元
};

class Z {
  int v[X::a];                  // [:en] error: [`X::a] is private \
                                [:zh_CN] 错误：[`X::a] 是私有的
};
[codeblock:end]
[end:example]

[para]
[:en]
A friend declaration that does not declare a function shall have one of the
following forms:
[:zh_CN]
不声明函数的友元声明式应当具有如下形式之一：

[syntax:explanation]
[| [`:key friend] [~elaborated-type-specifier] [`;] ]
[| [`:key friend] [~simple-type-specifier] [`;] ]
[| [`:key friend] [~typename-specifier] [`;] ]
[syntax:end]

[begin:note]
[:en]
A friend declaration can be the [~declaration] in a [~template-declaration]
([#temp.pre], [#temp.friend]).
[:zh_CN]
友元声明式可以是[~模板声明式]之中的[~声明式]（[#temp.pre]，[#temp.friend]）。
[end:note]

[:en]
If the type specifier in a [`:key friend] declaration designates a (possibly
cv-qualified) class type, that class is declared as a friend; otherwise, the
friend declaration is ignored.
[:zh_CN]
若 [`:key friend] 声明式中的类型说明符代表了某个（可能被 cv 限定的）类类型，则
该类被声明为友元；否则，该友元声明式就被忽略。

[begin:example]
[codeblock]
class C;
typedef C Ct;

class X1 {
  friend C;                     // [:en] OK: [`class C] is a friend \
                                [:zh_CN] OK：[`class C] 为友元
};

class X2 {
  friend Ct;                    // [:en] OK: [`class C] is a friend \
                                [:zh_CN] OK：[`class C] 为友元
  friend D;                     // [:en] error: [`D] not found \
                                [:zh_CN] 错误：[`D] 未找到
  friend class D;               // [:en] OK: [~elaborated-type-specifier] declares new class \
                                [:zh_CN] OK：[~详述类型说明符]声明了新的类
};

template <typename T> class R {
  friend T;
};

R<C> rc;                        // [:en] [`class C] is a friend of [`R<C>] \
                                [:zh_CN] [`class C] 是 [`R<C>] 的友元
R<int> Ri;                      // [:en] OK: [`"friend int;"] is ignored \
                                [:zh_CN] OK：[`"friend int;"] 被忽略
[codeblock:end]
[end:example]

[para]
[:en]
[%friend function[!linkage of]]
A function first declared in a friend declaration has the linkage of the
namespace of which it is a member ([#basic.link]).
[:zh_CN]
[%友元函数[!～的连接]]
在友元声明式中被首次声明的函数具有外部连接（[#basic.link]）。

[:en]
Otherwise, the function retains its previous linkage ([#dcl.stc]).
[:zh_CN]
否则，该函数维持其之前的连接（[#dcl.stc]）。

[para]
[begin:note]
[:en]
[%declaration[!overloaded name and [`friend]]]
A friend declaration refers to an entity, not (all overloads of) a name.
[:zh_CN]
[%声明式[!重载的名字与 [`friend]～]]
友元声明式所涉指的是一个实体，而非某个名字（的所有重载）。

[:en]
[%member function[!friend]]
A member function of a class [`X] can be a friend of a class [`Y].
[:zh_CN]
[%成员函数[!友元] ]
类 [`X] 的成员函数可以成为类 [`Y] 的友元。

[begin:example]
[codeblock]
class Y {
  friend char* X::foo(int);
  friend X::X(char);            // [:en] constructors can be friends \
                                [:zh_CN] 构造函数可以成为友元
  friend X::~X();               // [:en] destructors can be friends \
                                [:zh_CN] 析构函数可以成为友元
};
[codeblock:end]
[end:example]
[end:note]

[para]
[:en]
[%friend function[!inline]]
A function may be defined in a friend declaration of a class if and only if the
class is a non-local class ([#class.local]) and the function name is unqualified.
[:zh_CN]
[%友元函数[!内联～]]
当且仅当类为非局部类（[#class.local]）且函数名未被限定时，类的友元声明式中可以
定义函数。

[begin:example]
[codeblock]
class M {
  friend void f() { }           // [:en] definition of global [`f], a friend of [`M], \
                                [:zh_CN] 全局的 [`f] 的定义式，[`M] 的友元，
                                // [:en@~] not the definition of a member function \
                                [:zh_CN@~] 而不是成员函数的定义式
};
[codeblock:end]
[end:example]

[para]
[:en]
Such a function is implicitly an inline ([#dcl.inline]) function if it is
attached to the global module.
[:zh_CN]
当此函数附属于全局模块时，它隐含地为内联（[#dcl.inline]）函数。

[begin:note]
[:en]
If a friend function is defined outside a class, it is not in the scope of the
class.
[:zh_CN]
如果由于函数在类之外定义，则它不处于类的作用域中。
[end:note]

[para]
[:en]
No [~storage-class-specifier] shall appear in the [~decl-specifier-seq] of a
friend declaration.
[:zh_CN]
友元声明式的[~声明说明符序列]中不能含有[~存储类说明符]。

[para]
[:en]
[%friend[!access specifier and]]
A member nominated by a friend declaration shall be accessible in the class
containing the friend declaration.
[:zh_CN]
[%友元[!访问说明符与～]]
被友元声明式所提名的成员，应该在包含该友元声明式的类中是可访问的。

[:en]
The meaning of the friend declaration is the same whether the friend declaration
appears in the private, protected or public ([#class.mem]) portion of the class
[~member-specification].
[:zh_CN]
无论友元声明式出现在类的[~成员说明]的私有、受保护或公开（[#class.mem]）的哪个
区段中，友元声明式的含义均相同。

[para]
[:en]
[%friend[!inheritance and]]
Friendship is neither inherited nor transitive.
[:zh_CN]
[%友元[!继承与～]]
友元既不可继承也不可传递。

[begin:example]
[codeblock]
class A {
  friend class B;
  int a;
};

class B {
  friend class C;
};

class C  {
  void f(A* p) {
    p->a++;         // [:en] error: [`C] is not a friend of [`A] despite being a friend of a friend \
                    [:zh_CN] 错误：[`C] 不是 [`A] 的友元，尽管它是友元的友元
  }
};

class D : public B  {
  void f(A* p) {
    p->a++;         // [:en] error: [`D] is not a friend of [`A] despite being derived from a friend \
                    [:zh_CN] 错误：[`D] 不是 [`A] 的友元，尽管它派生自友元
  }
};
[codeblock:end]
[end:example]

[para]
[begin:note]
[:en]
[%local class[!friend]]
[%friend[!local class and]]
A friend declaration never binds any names ([#dcl.meaning], [#dcl.type.elab]).
[:zh_CN]
[%局部类[!友元]]
[%友元[!局部类与～]]
友元声明式从不会绑定任何名字（[#dcl.meaning]，[#dcl.type.elab]）。
[end:note]

[begin:example]
[codeblock]
// [:en] Assume [`f] and [`g] have not yet been declared. \
[:zh_CN] 假设 [`f] 和 [`g] 尚未被声明。
void h(int);
template <class T> void f2(T);
namespace A {
  class X {
    friend void f(X);           // [:en] [`A::f(X)] is a friend \
                                [:zh_CN] 以 [`A::f(X)] 为友元
    class Y {
      friend void g();          // [`A::g] is a friend \
                                [:zh_CN] 以 [`A::g] 为友元
      friend void h(int);       // [`A::h] is a friend \
                                [:zh_CN] 以 [`A::h] 为友元
                                // [`::h] not considered \
                                [:zh_CN] 未考虑 [`::h]
      friend void f2<>(int);    // [:en] [`::f2<>(int)] is a friend \
                                [:zh_CN] 以 [`::f2<>(int)] 为友元
    };
  };

  // [:en] [`A::f], [`A::g] and [`A::h] are not visible here \
  [:zh_CN] [`A::f]、[`A::g] 和 [`A::h] 此处不可见
  X x;
  void g() { f(x); }            // [:en] definition of [`A::g] \
                                [:zh_CN] [`A::g] 的定义式
  void f(X) { /* ... */ }       // [:en] definition of [`A::f] \
                                [:zh_CN] [`A::f] 的定义式
  void h(int) { /* ... */ }     // [:en] definition of [`A::h] \
                                [:zh_CN] [`A::h] 的定义式
  // [:en] [`A::f], [`A::g] and [`A::h] are visible here and known to be friends \
  [:zh_CN] [`A::f]、[`A::g] 和 [`A::h] 此处可见并已知为友元
}

using A::x;

void h() {
  A::f(x);
  A::X::f(x);                   // [:en] error: [`f] is not a member of [`A::X] \
                                [:zh_CN] 错误：[`f] 不是 [`A::X] 的成员
  A::X::Y::g();                 // [:en] error: [`g] is not a member of [`A::X::Y] \
                                [:zh_CN] 错误：[`g] 不是 [`A::X::Y] 的成员
}
[codeblock:end]
[end:example]

[begin:example]
[codeblock]
class X;
void a();
void f() {
  class Y;
  extern void b();
  class A {
  friend class X;   // [:en] OK, but [`X] is a local class, not [`::X] \
                    [:zh_CN] OK，但 [`X] 是局部类，而不是 [`::X]
  friend class Y;   // OK
  friend class Z;   // [:en] OK, introduces local class [`Z] \
                    [:zh_CN] OK，引入了局部类 [`Z]
  friend void a();  // [:en] error, [`::a] is not considered \
                    [:zh_CN] 错误，[`::a] 不被考虑
  friend void b();  // OK
  friend void c();  // [:en] error \
                    [:zh_CN] 错误
  };
  X* px;            // [:en] OK, but [`::X] is found \
                    [:zh_CN] OK，但找到了 [`::X]
  Z* pz;            // [:en] error: no [`Z] is found \
                    [:zh_CN] 错误：无法找到 [`Z]
}
[codeblock:end]
[end:example]
