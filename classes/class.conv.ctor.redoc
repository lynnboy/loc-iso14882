[section#class.conv.ctor
    [:en] Conversion by constructor
    [:zh_CN] 由构造函数转换

[%[:en] conversion[!user-defined]
  [:zh_CN] 转换[!用户定义～] ]
]

[para]
[:en]
A constructor that is not explicit ([#dcl.fct.spec]) specifies a conversion from
the types of its parameters (if any) to the type of its class.
[:zh_CN]
非显式的构造函数（[#dcl.fct.spec]），指定了从其形参（如果有）的类型到其类的类型
的转换。

[:en]
Such a constructor is called a [+:adj converting[!constructor]].
[:zh_CN]
此种构造函数被称为[+:adj 转换[!构造函数]]。

[begin:example]
[%Jessie]
[codeblock]
struct X {
    X(int);
    X(const char*, int = 0);
    X(int, int);
};

void f(X arg) {
  X a = 1;          // [`a = X(1)]
  X b = "Jessie";   // [`b = X("Jessie",0)]
  a = 2;            // [`a = X(2)]
  f(3);             // [`f(X(3))]
  f({1, 2});        // [`f(X(1,2))]
}
[codeblock:end]
[end:example]

[para]
[begin:note]
[:en]
An explicit constructor constructs objects just like non-explicit constructors,
but does so only where the direct-initialization syntax ([#dcl.init]) or where
casts ([#expr.static.cast], [#expr.cast]) are explicitly used; see also
[#over.match.copy].
[:zh_CN]
显式构造函数与非显式构造函数一样用于构造对象，但只用在直接初始化语法
（[#dcl.init]），或明确使用转型（[#expr.static.cast]，[#expr.cast]）时；
另见 [#over.match.copy]。

[:en]
A default constructor can be an explicit constructor; such a constructor will be
used to perform default-initialization or value-initialization ([#dcl.init]).
[:zh_CN]
默认构造函数可以是显式构造函数；此种构造函数用于实施默认初始化或值初始化
（[#dcl.init]）。

[begin:example]
[codeblock]
struct Z {
  explicit Z();
  explicit Z(int);
  explicit Z(int, int);
};

Z a;                            // [:en] OK, default-initialization performed \
                                [:zh_CN] OK，实施默认初始化
Z b{};                          // [:en] OK, direct initialization syntax used \
                                [:zh_CN] OK，使用了直接初始化语法
Z c = {};                       // [:en] error: copy-list-initialization \
                                [:zh_CN] 错误：复制列表初始化
Z a1 = 1;                       // [:en] error: no implicit conversion \
                                [:zh_CN] 错误：不能隐式转换
Z a3 = Z(1);                    // [:en] OK, direct initialization syntax used \
                                [:zh_CN] OK，使用了直接初始化语法
Z a2(1);                        // [:en] OK, direct initialization syntax used \
                                [:zh_CN] OK，使用了直接初始化语法
Z* p = new Z(1);                // [:en] OK, direct initialization syntax used \
                                [:zh_CN] OK，使用了直接初始化语法
Z a4 = (Z)1;                    // [:en] OK, explicit cast used \
                                [:zh_CN] OK，使用了显式转型
Z a5 = static_cast<Z>(1);       // [:en] OK, explicit cast used \
                                [:zh_CN] OK，使用了显式转型
Z a6 = { 3, 4 };                // [:en] error: no implicit conversion \
                                [:zh_CN] 错误：不能隐式转换
[codeblock:end]
[end:example]
[end:note]

[para]
[:en]
A non-explicit copy/move constructor ([#class.copy.ctor]) is a converting
constructor.
[:zh_CN]
非显式复制/移动构造函数（[#class.copy.ctor]）是转换构造函数。

[begin:note]
[:en]
An implicitly-declared copy/move constructor is not an explicit constructor;
it can be called for implicit type conversions.
[:zh_CN]
隐式声明的复制/移动构造函数不是显式构造函数；它可在隐式类型转换中调用。
[end:note]
