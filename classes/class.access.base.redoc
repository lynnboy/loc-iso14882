[section#class.access.base
    [:en] Accessibility of base classes and base class members
    [:zh_CN] 基类和基类成员的可访问性

[:en]
[%access control[!base class]]
[%access specifier]
[%base class[![`private]]]
[%base class[![`protected]]]
[%base class[![`public]]]
[:zh_CN]
[%访问控制[!基类]]
[%访问说明符]
[%基类[![`private]]]
[%基类[![`protected]]]
[%基类[![`public]]]
]

[para]
[:en]
If a class is declared to be a base class ([#class.derived]) for another class
using the [`:key public] access specifier, the public members of the base class
are accessible as public members of the derived class and protected members of
the base class are accessible as protected members of the derived class.
[:zh_CN]
若将某个类用 [`:key public] 访问说明符声明为其他类的基类（[#class.derived]），则
该基类的公开成员的访问将同派生类的公开成员相同，而该基类的受保护成员的访问将同
派生类的受保护成员相同。

[:en]
If a class is declared to be a base class for another class using the
[`:key protected] access specifier, the public and protected members of the base
class are accessible as protected members of the derived class.
[:zh_CN]
若将某个类用 [`:key protected] 访问说明符声明为其他类的基类，则该基类的公开和
受保护成员的访问将同派生类的受保护成员相同。

[:en]
If a class is declared to be a base class for another class using the
[`:key private] access specifier, the public and protected members of the base
class are accessible as private members of the derived class.[#:fn#]
[:zh_CN]
若将某个类用 [`:key private] 访问说明符声明为其他类的基类，则该基类的公开和
受保护成员的访问将同派生类的私有成员相同。[#:fn#]

[note:foot]
[:en]
As specified previously in [#class.access], private members of a base class
remain inaccessible even to derived classes unless friend declarations within
the base class definition are used to grant access explicitly.
[:zh_CN]
如在 [#class.access] 前文所指出的，基类的私有成员即便对派生类也仍然是不可访问的，
除非在基类声明式中使用友元声明式明确授予了访问权。
[note:end]

[para]
[:en]
In the absence of an [~access-specifier] for a base class, [`:key public] is
assumed when the derived class is defined with the [~class-key] [`:key struct]
and [`:key private] is assumed when the class is defined with the [~class-key]
[`:key class].
[:zh_CN]
若没有为基类给出[~访问说明符]，则当派生类以[~类关键字] [`:key struct] 定义时假定
为 [`:key public]，而当该类以[~类关键字] [`:key class] 定义时假定为
[`:key private]。

[begin:example]
[codeblock]
class B { /* ... */ };
class D1 : private B { /* ... */ };
class D2 : public B { /* ... */ };
class D3 : B { /* ... */ };     // [:en] [`B] private by default \
                                   [:zh_CN] [`B] 默认为私有的
struct D4 : public B { /* ... */ };
struct D5 : private B { /* ... */ };
struct D6 : B { /* ... */ };    // [:en] [`B] public by default \
                                   [:zh_CN] [`B] 默认为公用的
class D7 : protected B { /* ... */ };
struct D8 : protected B { /* ... */ };
[codeblock:end]

[:en]
Here [`B] is a public base of [`D2], [`D4], and [`D6], a private base of [`D1],
[`D3], and [`D5], and a protected base of [`D7] and [`D8].
[:zh_CN]
此处 [`B] 是 [`D2]、[`D4] 和 [`D6] 的公用基类，[`D1]、[`D3] 和 [`D5] 的私有基类，
以及 [`D7] 和 [`D8<] 的受保护基类。
[end:example]

[para]
[begin:note]
[:en]
A member of a private base class can be inaccessible as inherited, but
accessible directly.
[:zh_CN]
私有基类的成员作为继承成员时可以不可访问，但却可以直接访问。

[:en]
Because of the rules on pointer conversions ([#conv.ptr]) and explicit casts
([#expr.type.conv], [#expr.static.cast], [#expr.cast]), a conversion from a
pointer to a derived class to a pointer to an inaccessible base class can be
ill-formed if an implicit conversion is used, but well-formed if an explicit
cast is used.
[:zh_CN]
根据指针转换（[#conv.ptr]）和显式强制转换（[#expr.type.conv]，[#expr.static.cast]，
[#expr.cast]）的规则，从指向派生类的指针向指向某个不可访问的基类的指针的转换，在
使用隐式转换时可以是非良构的，但使用显式转换时却是良构的。

[:en]
For example,
[:zh_CN]
例如，

[codeblock]
class B {
public:
  int mi;                       // [:en] non-static member \
                                   [:zh_CN] 非静态成员
  static int si;                // [:en] static member \
                                   [:zh_CN] 静态成员
};
class D : private B {
};
class DD : public D {
  void f();
};

void DD::f() {
  mi = 3;                       // [:en] error: [`mi] is private in [`D] \
                                   [:zh_CN] 错误：[`mi] 在 [`D] 中是私有的
  si = 3;                       // [:en] error: [`si] is private in [`D] \
                                   [:zh_CN] 错误：[`si] 在 [`D] 中是私有的
  ::B  b;
  b.mi = 3;                     // [:en] OK ([`b.mi] is different from [`this->mi]) \
                                   [:zh_CN] OK（[`b.mi] 与 [`this->mi] 不同）
  b.si = 3;                     // [:en] OK ([`b.si] is different from [`this->si]) \
                                   [:zh_CN] OK（[`b.si] 与 [`this->si] 不同）
  ::B::si = 3;                  // OK
  ::B* bp1 = this;              // [:en] error: [`B] is a private base class \
                                   [:zh_CN] 错误：[`B] 是私有基类
  ::B* bp2 = (::B*)this;        // [:en] OK with cast \
                                   [:zh_CN] OK：带有强制转换
  bp2->mi = 3;                  // [:en] OK: access through a pointer to [`B]. \
                                   [:zh_CN] OK：通过指向 [`B] 的指针进行访问。
}
[codeblock:end]
[end:note]

[para]
[:en]
A base class [`B] of [`N] is [+accessible] at [^R], if
[:zh_CN]
如下情况下 [`N] 的基类 [`B] 在 [^R] 处[+可访问]：

[list]
[item]
[:en]
an invented public member of [`B] would be a public member of [`N], or
[:zh_CN]
[`B] 的某个虚构的公用成员能够成为 [`N<] 的公用成员，或者

[item]
[:en]
[^R] occurs in a direct member or friend of class [`N], and an invented public
member of [`B] would be a private or protected member of [`N], or
[:zh_CN]
[^R] 发生于类 [`N] 的直接成员或友元之中，而 [`B] 的某个虚构的公开成员能够成为
[`N] 的私有或受保护成员，或者

[item]
[:en]
[^R] occurs in a direct member or friend of a class [`P] derived from [`N], and
an invented public member of [`B] would be a private or protected member of [`P],
or
[:zh_CN]
[^R] 发生于派生自 [`N] 的类 [`P] 的直接成员或友元之中，而 [`B] 的某个虚构的公开
成员能够成为 [`P] 的私有或受保护成员，或者

[item]
[:en]
there exists a class [`S] such that [`B] is a base class of [`S] accessible at
[^R] and [`S] is a base class of [`N] accessible at [^R].
[:zh_CN]
[list:end]
存在类 [`S] 使得 [`B] 为 [`S] 在 [^R] 处可访问的基类而 [`S] 为 [`N] 在 [^R] 处可
访问的基类。

[begin:example]
[codeblock]
class B {
public:
  int m;
};

class S: private B {
  friend class N;
};

class N: private S {
  void f() {
    B* p = this;    // [:en] OK because class [`S] satisfies the fourth condition above: [`B] is a base class of [`N] \
                       [:zh_CN] OK，因为类 [`S] 满足了上述第四个条件：[`B] 为 [`N] 在 [`f()] 处
                    // [:en@~] accessible in [`f()] because [`B] is an accessible base class of [`S] and [`S] is an accessible \
                       [:zh_CN@~] 可访问的基类，因为 [`B] 为 [`S] 的可访问基类而 [`S] 为 [`N] 的
                    // [:en@~] base class of [`N]. \
                       [:zh_CN@~] 可访问基类。
  }
};
[codeblock:end]
[end:example]

[para]
[:en]
If a base class is accessible, one can implicitly convert a pointer to a derived
class to a pointer to that base class ([#conv.ptr], [#conv.mem]).
[:zh_CN]
若某个基类是可访问的，则指向派生类的指针可被隐式转换为指向该基类的指针
（[#conv.ptr]，[#conv.mem]）。

[begin:note]
[:en]
It follows that members and friends of a class [`X] can implicitly convert an
[`X*] to a pointer to a private or protected immediate base class of [`X].
[:zh_CN]
因而类 [`X] 的成员和友元可以将 [`X*] 隐式转换为指向类 [`X] 的某个私有或受保护的
直接基类的指针。
[end:note]

[:en]
The access to a member is affected by the class in which the member is named.
[:zh_CN]
对成员进行指名的类将影响对该成员的访问。

[:en]
This naming class is the class in whose scope name lookup performed a search
that found the member.
[:zh_CN]
这个进行指名的类即是在其作用域中的名字查找进行的搜索找到了该成员的类。

[begin:note]
[:en]
This class can be explicit, e.g., when a [~qualified-id] is used, or implicit,
e.g., when a class member access operator ([#expr.ref]) is used (including cases
where an implicit [=lq][`this->][=rq] is added).
[:zh_CN]
此类可以是明确的，比如当使用[~限定标识]时，或者为隐含的，比如使用类成员访问
运算符（[#expr.ref]）（包括隐含地添加“[`this->]”的情况）。

[:en]
If both a class member access operator and a [~qualified-id] are used to name
the member (as in [`p->T::m]), the class naming the member is the class denoted
by the [~nested-name-specifier] of the [~qualified-id] (that is, [`T]).
[:zh_CN]
若类成员访问运算符和[~限定标识]同时使用以指名一个成员（如在 [`p->T::m] 中），则
指名该成员的类即为由[~限定标识]的[~嵌套名说明符]所代表的类（就是 [`T]）。
[end:note]

[:en]
A member [`m] is accessible at the point [^R] when named in class [`N] if
[:zh_CN]
如下情况使得在 [^R] 处指名类 [`N] 中的成员 [`m] 时它是可访问的：

[list]
[item]
[:en]
[`m] as a member of [`N] is public, or
[:zh_CN]
[`m] 作为 [`N] 的成员时是公用的，或者

[item]
[:en]
[`m] as a member of [`N] is private, and [^R] occurs in a direct member or
friend of class [`N], or
[:zh_CN]
[`m] 作为 [`N] 的成员时是私有的，且 [^R] 发生于类 [`N] 的直接成员或友元中，或者

[item]
[:en]
[`m] as a member of [`N] is protected, and [^R] occurs in a direct member or
friend of class [`N], or in a member of a class [`P] derived from [`N], where
[`m] as a member of [`P] is public, private, or protected, or
[:zh_CN]
[`m] 作为 [`N] 的成员是受保护的，且 [^R] 发生于类 [`N] 的直接成员或友元中，或者
派生自 [`N] 的类 [`P] 的成员中，其中 [`m] 作为 [`P] 的成员时是公用的，私有的，
或受保护的，或者

[item]
[:en]
there exists a base class [`B] of [`N] that is accessible at [^R], and [`m] is
accessible at [^R] when named in class [`B].
[:zh_CN]
存在在 [^R] 处可访问的 [`N] 的基类 [`B]，且在 [^R] 处在 [`B] 中指名 [`m] 是可
访问的。

[begin:example]
[codeblock]
class B;
class A {
private:
  int i;
  friend void f(B*);
};
class B : public A { };
void f(B* p) {
  p->i = 1;         // [:en] OK: [`B*] can be implicitly converted to [`A*], and [`f] has access to [`i] in [`A] \
                       [:zh_CN] OK：[`B*] 可以隐式转换为 [`A*]，而 [`f] 可以访问 [`A] 中的 [`i]
}
[codeblock:end]
[end:example]
[list:end]

[para]
[:en]
If a class member access operator, including an implicit [=lq][`this->][=rq], is
used to access a non-static data member or non-static member function, the
reference is ill-formed if the left operand (considered as a pointer in the
[=lq][`.][=rq] operator case) cannot be implicitly converted to a pointer to the
naming class of the right operand.
[:zh_CN]
若类成员访问运算符，包括隐含的“[`this->]”，用于访问非静态数据成员或非静态成员
函数，则当其左操作数（在“[`.]”运算符情况中考虑为指针）无法被隐式转换为指向其
右操作数的进行指名的类的指针时，该涉指即为非良构的。

[begin:note]
[:en]
This requirement is in addition to the requirement that the member be accessible
as named.
[:zh_CN]
这是对该成员被指名时，除了其可访问性的规定之外的附加的规定。
[end:note]
