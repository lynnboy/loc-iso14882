[section#class.derived.general
    [:en] General
    [:zh_CN] 概述
]

[/
\gramSec[gram.derived]{Derived classes}
/]

[:en]
[%virtual base class[%base class[!virtual]]]
[%virtual function[%function[!virtual]]]
[%dynamic binding[%function[!virtual]]]
[:zh_CN]
[%虚基类[%基类[!虚～]]]
[%虚函数[%函数[!虚～]]]
[%动态绑定[%函数[!虚～]]]

[para]
[:en]
[%base class]
[%inheritance]
[%multiple inheritance]
A list of base classes can be specified in a class definition using the
notation:
[:zh_CN]
[%基类]
[%继承]
[%多继承]
在类定义式中可以以如下记法指定一系列基类：

[syntax]
[rule base-clause [:zh_CN] 基子句 ]
    [| [`:] base-specifier-list ]
[rule:end]

[rule base-specifier-list [:zh_CN] 基说明符列表 ]
    [| base-specifier [`:opt ...] ]
    [| base-specifier-list [`,] base-specifier [`:opt ...] ]
[rule:end]

[rule base-specifier [:zh_CN] 基说明符 ]
    [| [~:opt attribute-specifier-seq] class-or-decltype ]
    [| [~:opt attribute-specifier-seq] [`:key virtual] [~:opt access-specifier]
        class-or-decltype ]
    [| [~:opt attribute-specifier-seq] access-specifier [`:opt:key virtual]
        class-or-decltype ]
[rule:end]

[rule class-or-decltype [:zh_CN] 类或-decltype ]
    [| [~:opt nested-name-specifier] type-name ]
    [| [~nested-name-specifier] [`:key template] simple-template-id ]
    [| computed-type-specifier ]
[rule:end]

[%  [:en] specifier[!access][%access specifier]
    [:zh_CN] 说明符[!访问][%访问说明符] ]
[rule access-specifier [:zh_CN] 访问说明符 ]
    [| [`:key private] ]
    [| [`:key protected] ]
    [| [`:key public] ]
[rule:end]
[syntax:end]

[:en]
The optional [~attribute-specifier-seq] appertains to the [~base-specifier].
[:zh_CN]
可选的[~属性说明符序列]属于[~基说明符]。

[para]
[:en]
[%component name]
The component name of a [~class-or-decltype] are those of its
[~nested-name-specifier], [~type-name], and/or [~simple-template-id].
[:zh_CN]
[%成分名]
[~类或-decltype] 的成分名为其[~嵌套名说明符]，[~类型名]，以及[~简单模板标识]的
成分名。

[:en]
[%type[!incomplete]]
A [~class-or-decltype] shall denote a (possibly cv-qualified) class type that is
not an incompletely defined class ([#class]); any cv-qualifiers are ignored.
[:zh_CN]
[%类型[!不完整～]]
[~类或-decltype]应当代表某个（可能被 cv 限定的）并非不完整定义的类（[#class]）的
类类型；其任何 cv 限定符均被忽略。

[:en]
The class denoted by the [~class-or-decltype] of a [~base-specifier] is called a
[+:adj direct[!base class]] for the class being defined.
[:zh_CN]
由[~基类说明符]的[~类或-decltype] 所代表的类被称为所定义的类的[+:adj 直接[!基类]]。

[:en]
[%base class] [%derivation[%inheritance]]
The lookup for the component name of the [~type-name] or [~simple-template-id]
is type-only ([#basic.lookup]).
[:zh_CN]
[%基类] [%派生[%继承]]
对[~类型名]或[~简单模板标识]的成分名的查找是仅限类型的（[#basic.lookup]）。

[:en]
A class [`B] is a base class of a class [`D] if it is a direct base class of
[`D] or a direct base class of one of [`D][=']s base classes.
[:zh_CN]
若类 [`B] 是类 [`D] 的直接基类或 [`D] 的基类之一的直接基类，则它是类 [`D] 的基类。

[:en]
A class is an [+:adj indirect[!base class]] of another if it is a base class but
not a direct base class.
[:zh_CN]
若某类是另一个类的基类但不是直接基类，则它是[+:adj 间接[!基类]]。

[:en]
A class is said to be (directly or indirectly) [+:% derived] from its (direct or
indirect) base classes.
[:zh_CN]
称类（直接或间接）[+:% 派生]自其（直接或间接）基类。

[begin:note]
[:en]
See [#class.access] for the meaning of [~access-specifier].
[:zh_CN]
[~访问说明符]的含义见 [#class.access]。
[end:note]

[:en]
[%access control[!base class member]]
Members of a base class are also members of the derived class.
[:zh_CN]
[%访问控制[!基类成员]]
基类的成员也是派生类的成员。

[begin:note]
[:en]
Constructors of a base class can be explicitly inherited ([#namespace.udecl]).
[:zh_CN]
基类的构造函数可以被显式继承（[#namespace.udecl]）。

[:en]
Base class members can be referred to in expressions in the same manner as other
members of the derived class, unless their names are hidden or ambiguous
([#class.member.lookup]).
[:zh_CN]
除非基类成员的名字被隐藏或者有歧义（[#class.member.lookup]），否则在表达式中就
可以用和派生类的其他成员相同的方式涉指它们。

[:en]
[%operator[!scope resolution]]
The scope resolution operator [`::] ([#expr.prim.id.qual]) can be used to refer
to a direct or indirect base member explicitly, even if it is hidden in the
derived class.
[:zh_CN]
[%运算符[!作用域解析～]]
作用域解析运算符 [`::]（[#expr.prim.id.qual]）可以用于明确涉指某个直接或间接基类
的成员，即使它在派生类中被隐藏。

[:en]
A derived class can itself serve as a base class subject to access control; see
[#class.access.base].
[:zh_CN]
对于访问控制来说，派生类自身可被当作基类；参见 [#class.access.base]。

[:en]
A pointer to a derived class can be implicitly converted to a pointer to an
accessible unambiguous base class ([#conv.ptr]).
[:zh_CN]
指向派生类的指针可被隐式转换为指向某个可访问的无歧义基类的指针（[#conv.ptr]）。

[:en]
An lvalue of a derived class type can be bound to a reference to an accessible
unambiguous base class ([#dcl.init.ref]).
[:zh_CN]
派生类类型的左值可被绑定到指代某个可访问的无歧义基类的引用上（[#dcl.init.ref]）。
[end:note]

[para]
[:en]
The [~base-specifier-list] specifies the type of the [+:% base class subobjects]
contained in an object of the derived class type.
[:zh_CN]
[~基说明符列表]指定了在派生类类型的对象中包含的[+:% 基类子对象]的类型。

[begin:example]
[codeblock]
struct Base {
  int a, b, c;
};

struct Derived : Base {
  int b;
};

struct Derived2 : Derived {
  int c;
};
[codeblock:end]

[:en]
Here, an object of class [`Derived2] will have a subobject of class [`Derived]
which in turn will have a subobject of class [`Base].
[:zh_CN]
此处，类 [`Derived2] 的对象将带有一个类 [`Derived] 的子对象，它又将带有一个类
[`Base] 的子对象。
[end:example]

[para]
[:en]
A [~base-specifier] followed by an ellipsis is a pack expansion ([#temp.variadic]).
[:zh_CN]
后面跟着省略号的[~基说明符]是包组展开式（[#temp.variadic]）。

[para]
[:en]
The order in which the base class subobjects are allocated in the most derived
object ([#intro.object]) is unspecified.
[:zh_CN]
全派生对象（[#intro.object]）中基类子对象的分配顺序是未指明的。

[begin:note]
[:en]
[%directed acyclic graph[%DAG]]
[%lattice[%DAG]] [%lattice[%subobject]]
A derived class and its base class subobjects can be represented by a directed
acyclic graph (DAG) where an arrow means [=lq]directly derived from[=rq]
(see [#:fig#class.dag]).
[:zh_CN]
[%有向无环图[%DAG]]
[%晶格[%DAG]][%晶格[%子对象]]
派生类及其基类子对象可用有向无环图（DAG）来表示，其中的箭头代表“直接派生自～”
（参见 [#:fig#class.dag]）。

[:en]
An arrow need not have a physical representation in memory.
[:zh_CN]
不需要在内存中进行箭头的物理表示。

[:en]
A DAG of subobjects is often referred to as a [=lq]subobject lattice[=rq].
[:zh_CN]
子对象的 DAG 通常被称为“子对象晶格”。
[end:note]

[figure:dot#class.dag
    [:en] Directed acyclic graph
    [:zh_CN] 有向无环图
]
digraph dag {
    graph [nodesep=1.5, rankdir=BT];

    Base [shape=plaintext, height=.1, fontsize=24];
    Derived1 [shape=plaintext, height=.1, fontsize=24];
    Derived2 [shape=plaintext, height=.1, fontsize=24];

    Derived2 -> Derived1;
    Derived1 -> Base;
}
[figure:end]

[para]
[begin:note]
[:en]
Initialization of objects representing base classes can be specified in
constructors; see [#class.base.init].
[:zh_CN]
用以表示基类的对象所进行的初始化可以在构造函数中指定；参见 [#class.base.init]。
[end:note]

[para]
[begin:note]
[:en]
A base class subobject can have a layout different from the layout of a most
derived object of the same type.
[:zh_CN]
基类子对象的布局与相同类型的全派生对象的布局可以不同。

[:en]
A base class subobject can have a polymorphic behavior ([#class.cdtor])
different from the polymorphic behavior of a most derived object of the same
type.
[:zh_CN]
基类子对象所具有的多态行为（[#class.cdtor]）和相同类型的全派生对象的多态行为可以
不同。

[:en]
A base class subobject can be of zero size; however, two subobjects that have
the same class type and that belong to the same most derived object cannot be
allocated at the same address ([#intro.object]).
[:zh_CN]
基类子对象的大小可以为零；然而，具有相同类类型并且属于相同的全派生对象的两个
子对象不能被分配到相同的地址上（[#intro.object]）。
[end:note]
