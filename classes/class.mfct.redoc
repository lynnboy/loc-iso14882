[section#class.mfct
    [:en] Member functions
    [:zh_CN]

[%  [:en] member function[!class]
    [:zh_CN] 成员函数[!类] ]
]

[para]
[:en]
[%member function[!inline]]
[%definition[!member function]]
If a member function is attached to the global module and is defined
([#dcl.fct.def]) in its class definition, it is inline ([#dcl.inline]).
[:zh_CN]
[%成员函数[!内联～]]
[%定义式[!成员函数～]]
如果成员函数附属于全局模块且在它的类定义式之中定义（[#dcl.fct.def]），则它是
内联的（[#dcl.inline]）。

[begin:note]
[:en]
A member function is also inline if it is declared [`:key inline],
[`:key constexpr], or [`:key consteval].
[:zh_CN]
如果成员函数被声明为 [`:key inline]，[`:key constexpr]，或 [`:key consteval]，则
它也是内联的。
[end:note]

[para]
[:en]
[%operator[!scope resolution]]
[:zh_CN]
[%运算符[!作用域解析～]]
[begin:example]
[codeblock]
struct X {
  typedef int T;
  static T count;
  void f(T);
};
void X::f(T t = count) { }
[codeblock:end]

[:en]
The definition of the member function [`f] of class [`X] inhabits the global
scope; the notation [`X::f] indicates that the function [`f] is a member of
class [`X] and in the scope of class [`X].
[:zh_CN]
类 [`X] 的成员函数 [`f] 的定义式居于全局作用域；记法 [`X::f] 指明了函数 [`f] 是
类 [`X] 的一个成员函数并处于类 [`X] 的作用域之中。

[:en]
In the function definition, the parameter type [`T] refers to the typedef member
[`T] declared in class [`X] and the default argument [`count] refers to the
static data member [`count] declared in class [`X].
[:zh_CN]
在其函数定义式中，形参类型 [`T] 涉指在类 [`X] 中声明的 typedef 成员 [`T]，而其
默认实参 [`count] 涉指在类 [`X] 中声明的静态数据成员 [`count]。
[end:example]

[para]
[:en]
[%local class[!member function in]]
Member functions of a local class shall be defined inline in their class
definition, if they are defined at all.
[:zh_CN]
[%局部类[!～中的成员函数]]
如果确实要定义局部类的成员函数的话，就应当在其类定义式之中定义为内联的。

[para]
[begin:note]
[:en]
A member function can be declared (but not defined) using a typedef for a
function type.
[:zh_CN]
成员函数可以使用某个函数类型的 typedef 来进行声明（但不能进行定义）。

[:en]
The resulting member function has exactly the same type as it would have if the
function declarator were provided explicitly, see [#dcl.fct].
[:zh_CN]
所产生的成员函数的类型与显式提供其函数声明符时所能产生的完全相同，参见 [#dcl.fct]。

[:en]
For example,
[:zh_CN]
例如，

[codeblock]
typedef void fv(void);
typedef void fvc(void) const;
struct S {
  fv memfunc1;      // [:en] equivalent to: [`void memfunc1(void);] \
                       [:zh_CN] 等价于：[`void memfunc1(void);]
  void memfunc2();
  fvc memfunc3;     // [:en] equivalent to: [`void memfunc3(void) const;] \
                       [:zh_CN] 等价于：[`void memfunc3(void) const;]
};
fv  S::* pmfv1 = &S::memfunc1;
fv  S::* pmfv2 = &S::memfunc2;
fvc S::* pmfv3 = &S::memfunc3;
[codeblock:end]

[:en]
Also see [#temp.arg].
[:zh_CN]
另见 [#temp.arg]。
[end:note]
