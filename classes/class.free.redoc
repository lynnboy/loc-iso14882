[section#class.free
    [:en] Free store
    [:zh_CN] 自由存储

[% [:en] free store
   [:zh_CN] 自由存储 ]
]

[para]
[:en]
[%[`new][!type of]]
Any allocation function for a class [`T] is a static member (even if not
explicitly declared [`static]).
[:zh_CN]
[%[`new][!～的类型]]
类 [`T] 的任何分配函数都是静态成员（即使并未明确声明为 [`static]）。

[para]
[begin:example]
[codeblock]
class Arena;
struct B {
  void* operator new(std::size_t, Arena*);
};
struct D1 : B {
};

Arena*  ap;
void foo(int i) {
  new (ap) D1;      // [:en] calls [`B::operator new(std::size_t, Arena*)] \
                       [:zh_CN] 调用 [`B::operator new(std::size_t, Arena*)]
  new D1[i];        // [:en] calls [`::operator new`[`](std::size_t)] \
                       [:zh_CN] 调用 [`::operator new`[`](std::size_t)]
  new D1;           // [:en] error: [`::operator new(std::size_t)] hidden \
                       [:zh_CN] 错误：[`::operator new(std::size_t)] 被隐藏
}
[codeblock:end]
[end:example]

[para]
[:en]
[%[`delete][!type of]]
Any deallocation function for a class [`X] is a static member (even if not
explicitly declared [`static]).
[:zh_CN]
[%[`delete][!～的类型]]
类 [`X] 的任何回收函数都是静态成员（即使并未明确声明为 [`static]）。

[begin:example]
[codeblock]
class X {
  void operator delete(void*);
  void operator delete[](void*, std::size_t);
};

class Y {
  void operator delete(void*, std::size_t);
  void operator delete[](void*);
};
[codeblock:end]
[end:example]

[para]
[:en]
Since member allocation and deallocation functions are [`static] they cannot be
virtual.
[:zh_CN]
由于成员分配和回收函数都为 [`static]，故它们不能为虚函数。

[begin:note]
[:en]
However, when the [~cast-expression] of a [~delete-expression] refers to an
object of class type with a virtual destructor, because the deallocation
function is chosen by the destructor of the dynamic type of the object,
the effect is the same in that case.
[:zh_CN]
然而，当 [~delete-表达式]的[~强制转换表达式]指代某个具有虚析构函数的类类型的对象
时，由于回收函数是由该对象的动态类型所选择的，此种情况下其效果实际上是相同的。

[:en]
For example,
[:zh_CN]
例如，

[codeblock]
struct B {
  virtual ~B();
  void operator delete(void*, std::size_t);
};

struct D : B {
  void operator delete(void*);
};

struct E : B {
  void log_deletion();
  void operator delete(E *p, std::destroying_delete_t) {
    p->log_deletion();
    p->~E();
    ::operator delete(p);
  }
};

void f() {
  B* bp = new D;
  delete bp;        // [:en] 1: uses [`D::operator delete(void*)] \
                       [:zh_CN] 1：使用 [`D::operator delete(void*)]
  bp = new E;
  delete bp;        // [:en] 2: uses [`E::operator delete(E*, std::destroying_delete_t)] \
                       [:zh_CN] 2：使用 [`E::operator delete(E*, std::destroying_delete_t)]
}
[codeblock:end]

[:en]
Here, storage for the object of class [`D] is deallocated by
[`D::operator delete()], and the object of class [`E] is destroyed and its
storage is deallocated by [`E::operator delete()], due to the virtual destructor.
[:zh_CN]
此处，由于虚析构函数，类 [`D] 的对象的存储是由 [`D::operator delete()] 进行回收
的，而类 [`E] 的对象被销毁，且其存储是由 [`E::operator delete()] 进行回收的。
[end:note]

[begin:note]
[:en]
Virtual destructors have no effect on the deallocation function actually called
when the [~cast-expression] of a [~delete-expression] refers to an array of
objects of class type.
[:zh_CN]
当 [~delete-表达式]的[~强制转换表达式]指代类类型的对象的数组时，虚析构函数对实际
调用的回收函数没有影响。

[:en]
For example,
[:zh_CN]
例如，

[codeblock]
struct B {
  virtual ~B();
  void operator delete[](void*, std::size_t);
};

struct D : B {
  void operator delete[](void*, std::size_t);
};

void f(int i) {
  D* dp = new D[i];
  delete [] dp;     // [:en] uses [`D::operator delete`[`](void*, std::size_t)] \
                       [:zh_CN] 使用 [`D::operator delete`[`](void*, std::size_t)]
  B* bp = new D[i];
  delete[] bp;      // [:en] undefined behavior \
                       [:zh_CN] 未定义行为
}
[codeblock:end]
[end:note]

[para]
[:en]
Access to the deallocation function is checked statically, even if a different
one is actually executed.
[:zh_CN]
对回收函数的访问检查是静态进行的，即便实际执行的是另一个也是如此。

[begin:example]
[:en]
For the call on line [=lq]// 1[=rq] above, if [`B::operator delete()] had been
private, the delete expression would have been ill-formed.
[:zh_CN]
对于上面行“// 1”中的调用，若 [`B::operator delete()] 为私有的，则该 delete
表达式将为非良构的。
[end:example]

[para]
[begin:note]
[:en]
If a deallocation function has no explicit [~noexcept-specifier], it has a
non-throwing exception specification ([#except.spec]).
[:zh_CN]
如果回收函数不带有显式的 [~noexcept-说明符]，则它带有无抛出异常说明
（[#except.spec]）。
[end:note]
