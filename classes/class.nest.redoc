[section#class.nest
    [:en] Nested class declarations
    [:zh_CN] 嵌套类的声明

[:en]
[%definition[!nested class]]
[:zh_CN]
[%定义式[!嵌套类]]
]

[para]
[:en]
A class can be declared within another class.
[:zh_CN]
可以在一个类中声明另一个类。

[:en]
A class declared within another is called a [+:adj nested[!class]].
[:zh_CN]
声明于其它类中的类称为[+:adj 嵌套[!类]]。

[begin:note]
[:en]
See [#expr.prim.id] for restrictions on the use of non-static data members and
non-static member functions.
[:zh_CN]
关于非静态数据成员和非静态成员函数的使用限制，参见 [#expr.prim.id]。
[end:note]

[para:~]
[begin:example]
[codeblock]
int x;
int y;

struct enclose {
  int x;
  static int s;

  struct inner {
    void f(int i) {
      int a = sizeof(x);        // [:en] OK: operand of [`sizeof] is an unevaluated operand \
                                   [:zh_CN] OK：[`sizeof] 的操作数是免值的操作数
      x = i;                    // [:en] error: assign to [`enclose::x] \
                                   [:zh_CN] 错误：指代了 [`enclose::x]
      s = i;                    // [:en] OK: assign to [`enclose::s] \
                                   [:zh_CN] OK：向 [`enclose::s] 赋值
      ::x = i;                  // [:en] OK: assign to global [`x] \
                                   [:zh_CN] OK：向全局 [`x] 赋值
      y = i;                    // [:en] OK: assign to global [`y] \
                                   [:zh_CN] OK：向全局 [`y] 赋值
    }
    void g(enclose* p, int i) {
      p->x = i;                 // [:en] OK: assign to [`enclose::x] \
                                   [:zh_CN] OK：向 [`enclose::x] 赋值
    }
  };
};

inner* p = 0;                   // [:en] error: [`inner] not found \
                                   [:zh_CN] 错误：[`inner] 未找到
[codeblock:end]
[end:example]

[para]
[begin:note]
[:en]
Nested classes can be defined either in the enclosing class or in an enclosing
namespace; member functions and static data members of a nested class can be
defined either in the nested class or in an enclosing namespace scope.
[:zh_CN]
嵌套类可以在其外围类中定义，也可以再某个外围命名空间中定义；嵌套类的成员函数和
静态数据成员，可在该嵌套类中定义，也可以在某个外围命名空间作用域中定义。

[begin:example]
[codeblock]
struct enclose {
  struct inner {
    static int x;
    void f(int i);
  };
};

int enclose::inner::x = 1;

void enclose::inner::f(int i) { /* ... */ }

class E {
  class I1;                     // [:en] forward declaration of nested class \
                                   [:zh_CN] 嵌套类的前置声明式
  class I2;
  class I1 { };                 // [:en] definition of nested class \
                                   [:zh_CN] 嵌套类的定义式
};
class E::I2 { };                // [:en] definition of nested class \
                                   [:zh_CN] 嵌套类的定义式
[codeblock:end]
[end:example]
[end:note]

[para]
[:en]
[%friend function[!nested class]]
A friend function ([#class.friend]) defined within a nested class has no special
access rights to members of an enclosing class.
[:zh_CN]
[%友元函数[!嵌套类]]
在嵌套类中定义的友元函数（[#class.friend]）对其外围类的成员没有特殊访问权。
