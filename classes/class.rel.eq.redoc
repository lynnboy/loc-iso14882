[section#class.rel.eq
    [:en] Other comparison operators
    [:zh_CN] 其他比较运算符
]
[:en]
[%operator[!relational[!defaulted]]]
[%operator[!equality[!defaulted]]]
[%operator[!inequality[!defaulted]]]
[:zh_CN]
[%运算符[!关系～[!预置的]]]
[%运算符[!相等～[!预置的]]]
[%运算符[!不相等～[!预置的]]]

[para]
[:en]
A defaulted relational ([#expr.rel]) or equality ([#expr.eq]) operator function
for some operator [`@] shall have a declared return type [`bool].
[:zh_CN]
对某个运算符 [`@] 的预置的关系（[#expr.rel]）或相等性（[#expr.eq]）运算符函数
应当声明具有返回类型 [`bool]。

[para]
[:en]
The operator function with parameters [`x] and [`y] is defined as deleted if
[:zh_CN]
以下情况下将具有形参 [`x] 和 [`y] 的运算符函数定义为弃置的：

[list]
[item]
[:en]
overload resolution ([#over.match]), as applied to [`x <=> y] (also considering
synthesized candidates with reversed order of parameters ([#over.match.oper])),
results in an ambiguity or a function that is deleted or inaccessible from the
operator function, or
[:zh_CN]
如同对 [`x <=> y] 所实施的重载决议（[#over.match]）（同样考虑带有相反顺序形参的
合成候选函数（[#over.match.oper]））造成歧义，或者某个被弃置或从该运算符函数中
无法访问的函数，或者

[item]
[:en]
the operator [`@] cannot be applied to the return type of [`x <=> y] or
[`y <=> x].
[:zh_CN]
无法对 [`x <=> y] 或 [`y <=> x] 的结果类型运用运算符 [`@]。
[list:end]

[:en]
Otherwise, the operator function yields [`x <=> y @ 0] if an [`operator<=>]
with the original order of parameters was selected, or [`0 @ y <=> x] otherwise.
[:zh_CN]
否则，当选择了具有原来顺序的 [`operator<=>] 时，该运算符函数产生 [`x <=> y @ 0]，
否则产生 [`0 @ y <=> x]。

[para]
[enter:example]
[codeblock]
struct C {
  friend std::strong_equality operator<=>(const C&, const C&);
  friend bool operator==(const C&, const C&) = default; // [:en] OK, returns [`x <=> y == 0]
                                                        // [|:zh_CN] OK，返回 [`x <=> y == 0]
  bool operator<(const C&) const = default;             // [:en] OK, function is deleted
                                                        // [|:zh_CN] OK，函数被弃置
};
[codeblock:end]
[exit:example]
