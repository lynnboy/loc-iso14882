[section#class.union
    [:en] Anonymous unions
    [:zh_CN] 匿名联合体

[:en]
[%[`union][!anonymous]]
[:zh_CN]
[%[`union][!匿名～]]
]

[para]
[:en]
A union of the form
[:zh_CN]
形式为

[syntax:explanation]
[`:key union] [`{] [~member-specification] [`}] [`;]
[syntax:end]

[:en@~]
is called an [+anonymous union]; it defines an unnamed type and an unnamed
object of that type called an [+anonymous union object].
[:zh_CN@~]
的联合体被称为[+匿名联合体]，它定义了一个无名类型，以及一个该类型的无名对象，被
称为[+匿名联合体对象]。

[:en]
[%access control[!anonymous [`union]]] [%restriction[!anonymous [`union]]]
Each [~member-declaration] in the [~member-specification] of an anonymous union
shall either define a public non-static data member or be a
[~static_assert-declaration].
[:zh_CN]
[%访问控制[!匿名 [`union]]] [%限制[!匿名 [`union]]]
匿名联合体的[~成员说明]中的[~成员声明式]，应当要么定义公开的非静态数据成员，要么
是 [~static_assert-声明式]。

[:en]
Nested types, anonymous unions, and functions shall not be declared within an
anonymous union.
[:zh_CN]
不能在匿名联合体中声明嵌套类型、匿名联合体和函数。

[:en]
The names of the members of an anonymous union shall be distinct from the names
of any other entity in the scope in which the anonymous union is declared.
[:zh_CN]
匿名联合体的成员的名字应该区别于声明了该匿名联合体的作用域中的任何其它实体的名字。

[:en]
For the purpose of name lookup, after the anonymous union definition, the
members of the anonymous union are considered to have been defined in the scope
in which the anonymous union is declared.
[:zh_CN]
对于名字查找来说，匿名联合体的定义式之后，匿名联合体的成员就被当作是定义于声明了
该匿名联合体的作用域之中。

[begin:example]
[codeblock]
void f() {
  union { int a; const char* p; };
  a = 1;
  p = "Jennifer";
}
[codeblock:end]

[:en]
Here [`a] and [`p] are used like ordinary (non-member) variables, but since they
are union members they have the same address.
[:zh_CN]
此处 [`a] 和 [`p] 就像普通（非成员）变量一样使用，但它们是联合体成员，使它们具有
相同的地址。
[end:example]

[para]
[:en]
[%[`union][!global anonymous]] [%scope[!anonymous [`union] at namespace]]
Anonymous unions declared in a named namespace or in the global namespace shall
be declared [`static].
[:zh_CN]
[%[`union][!全局匿名～]] [%作用域[!命名空间～的匿名 [`union]]]
在具名命名空间或全局命名空间中声明的匿名联合体，应当声明为 [`static]。

[:en]
Anonymous unions declared at block scope shall be declared with any storage
class allowed for a block-scope variable, or with no storage class.
[:zh_CN]
在块作用域中声明的匿名联合体，应当以块作用域变量所允许的任意存储类，或者不带
存储类来进行声明。

[:en]
A storage class is not allowed in a declaration of an anonymous union in a class
scope.
[:zh_CN]
类作用域中的匿名联合体的声明式中不允许使用存储类。

[para]
[begin:note]
[:en]
A union for which objects, pointers, or references are declared is not an
anonymous union.
[:zh_CN]
声明了对象、指针或引用的联合体并不是匿名联合体。

[begin:example]
[codeblock]
void f() {
  union { int aa; char* p; } obj, *ptr = &obj;
  aa = 1;           // [:en] error \
                       [:zh_CN] 错误
  ptr->aa = 1;      // OK
}
[codeblock:end]

[:en]
The assignment to plain [`aa] is ill-formed since the member name is not visible
outside the union, and even if it were visible, it is not associated with any
particular object.
[:zh_CN]
对普通 [`aa] 的赋值是非良构的，这是由于在联合体之外该成员名并不可见，而即使它
可见，它也并未与任何特定的对象相关联。
[end:example]
[end:note]

[begin:note]
[:en]
Initialization of unions with no user-declared constructors is described in
[#dcl.init.aggr].
[:zh_CN]
不带有用户定义的构造函数的联合体的初始化在 [#dcl.init.aggr] 中说明。
[end:note]

[para]
[:en]
[%class[!variant member of]]
A [+:adj union-like class[%union-like [!class]]] is a union or a class that has
an anonymous union as a direct member.
[:zh_CN]
[%类[!～的可变成员]]
[+:adj 类似联合体的类[%类似联合体的[!类]]]为联合体或以匿名联合体为直接成员的类。

[:en]
A union-like class [`X] has a set of [+variant members[%variant member]].
[:zh_CN]
类似联合体的类 [`X] 具有一组[+可变成员]。

[:en]
If [`X] is a union, a non-static data member of [`X] that is not an anonymous
union is a variant member of [`X].
[:zh_CN]
若 [`X] 为联合体则其不是匿名联合体的非静态数据成员是其可变成员。

[:en]
In addition, a non-static data member of an anonymous union that is a member of
[`X] is also a variant member of [`X].
[:zh_CN]
此外，作为 [`X] 的成员的匿名联合体的非静态数据成员也是 [`X] 的可变成员。

[:en]
At most one variant member of a union may have a default member initializer.
[:zh_CN]
联合体的可变成员中最多有一个可以具有默认成员初始化式。

[begin:example]
[codeblock]
union U {
  int x = 0;
  union { };
  union {
    int z;
    int y = 1;      // [:en] error: initialization for second variant member of [`U] \
                       [:zh_CN] 错误：初始化 [`U] 的第二个可变成员
  };
};
[codeblock:end]
[end:example]
