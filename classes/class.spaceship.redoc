[section#class.spaceship
    [:en] Three-way comparison
    [:zh_CN] 三路比较
]

[:en]
[%operator[!three-way comparison[!defaulted]]]
[:zh_CN]
[%运算符[!三路比较～[!预置的]]]

[para]
[:en]
Given an expanded list of subobjects for an object [`x] of type [`C], the type
of the expression [`x][$_i] [`<=>] [`x][$_i] is denoted by [`R][$_i].
[:zh_CN]
给定类型 [`C] 的对象 [`x] 的子对象展开列表，以 [`R][$_i] 代表表达式
“[`x][$_i] [`<=>] [`x][$_i]”的类型。

[:en]
If the declared return type of a defaulted three-way comparison operator
function is [`auto], then the return type is deduced as the common comparison
type (see below) of [`R][$_0], [`R][$_1], [$\cdots], [`R][$_{n-1}].
[:zh_CN]
如果预置三路比较运算符函数所声明的返回类型为 [`auto]，则将其返回类型推断为
[`R][$_0], [`R][$_1], [$\cdots], [`R][$_{n-1}] 的一般比较类型（见下文）。

[enter:note]
[:en]
Otherwise, the program will be ill-formed if the expression
[`x][$_i] [`<=>] [`x][$_i] is not implicitly convertible to the declared return
type for any [$i].
[:zh_CN]
否则，如果对于任何 [$i]，表达式 [`x][$_i] [`<=>] [`x][$_i] 无法隐式转换为所声明
的返回类型，则程序非良构。
[exit:note]

[:en]
If the return type is deduced as [`void], the operator function is defined as
deleted.
[:zh_CN]
如果返回类型被推断为 [`void]，则将该运算符函数定义为弃置的。

[para]
[:en]
The return value [`V] of type [`R] of the defaulted three-way comparison
operator function with parameters [`x] and [`y] of the same type is determined
by comparing corresponding elements [`x][$_i] and [`y][$_i] in the expanded
lists of subobjects for [`x] and [`y] (in increasing index order) until the
first index [$i] where [`x][$_i] [`<=>] [`y][$_i] yields a result value
[`v][$_i] where [`v[$_i] != 0], contextually converted to [`bool], yields
[`true]; [`V] is [`v][$_i] converted to [`R].
[:zh_CN]
带有两个相同类型的形参 [`x] 和 [`y] 的预置三路比较运算符函数的类型为 [`R] 的
返回值 [`V]，其确定方式是对 [`x] 和 [`y] 的展开后的子对象列表中的对应元素
[`x][$_i] 和 [`y][$_i]（按索引增序）进行比较，直到遇到第一个使得
[`x][$_i] [`<=>] [`y][$_i] 所产生的结果值 [`v][$_i] 满足 [`v[$_i] != 0] 被按语境
转换为 [`bool] 时产生 [`true] 的索引 [$i]；则 [`V] 即为 [`v][$_i] 转换为 [`R] 的
结果。

[:en]
If no such index exists, [`V] is [`std::strong_ordering::equal] converted to
[`R].
[:zh_CN]
如果没有这样的索引，则 [`V] 为 [`std::strong_ordering::equal] 转换为 [`R] 的
结果。

[para]
[:en]
The [+common comparison type] [`U] of a possibly-empty list of [$n] types
[`T][$_0], [`T][$_1], [$\cdots], [`T][$_{n-1}] is defined as follows:
[:zh_CN]
可能为空的 [$n] 个类型的列表 [`T][$_0], [`T][$_1], [$\cdots], [`T][$_{n-1}] 的
[+一般转换类型]定义如下：

[list]
[item]
[:en]
If any [`T][$_i] is not a comparison category type ([#cmp.categories]), [`U] is
[`void].
[:zh_CN]
如果有任何 [`T][$_i] 不是比较类别类型（[#cmp.categories]），则 [`U] 为 [`void]。

[item]
[:en]
Otherwise, if at least one [`T][$_i] is [`std::weak_equality], or at least one
[`T][$_i] is [`std::strong_equality] and at least one [`T][$_j] is
[`std::partial_ordering] or [`std::weak_ordering], [`U] is [`std::weak_equality]
([#cmp.weakeq]).
[:zh_CN]
否则，如果有至少一个 [`T][$_i] 为 [`std::weak_equality]，或者至少一个 [`T][$_i]
为 [`std::strong_equality] 且至少一个 [`T][$_j] 为 [`std::partial_ordering] 或
[`std::weak_ordering]，则 [`U] 为 [`std::weak_equality]（[#cmp.weakeq]）。

[item]
[:en]
Otherwise, if at least one [`T][$_i] is [`std::strong_equality], [`U] is
[`std::strong_equality] ([#cmp.strongeq]).
[:zh_CN]
否则，如果有至少一个 [`T][$_i] 为 [`std::strong_equality]，则 [`U] 为
[`std::strong_equality]（[#cmp.strongeq]）。

[item]
[:en]
Otherwise, if at least one [`T][$_i] is [`std::partial_ordering], [`U] is
[`std::partial_ordering] ([#cmp.partialord]).
[:zh_CN]
否则，如果有至少一个 [`T][$_i] 为 [`std::partial_ordering]，则 [`U] 为
[`std::partial_ordering]（[#cmp.partialord]）。

[item]
[:en]
Otherwise, if at least one [`T][$_i] is [`std::weak_ordering], [`U] is
[`std::weak_ordering] ([#cmp.weakord]).
[:zh_CN]
否则，如果有至少一个 [`T][$_i] 为 [`std::weak_ordering]，则 [`U] 为
[`std::weak_ordering]（[#cmp.weakord]）。

[item]
[:en]
Otherwise, [`U] is [`std::strong_ordering] ([#cmp.strongord]).
[:zh_CN]
否则，[`U] 为 [`std::strong_ordering]（[#cmp.strongord]）。

[enter:note]
[:en]
In particular, this is the result when [$n] is 0.
[:zh_CN]
特别地，当 [$n] 为 0 时是这个结果。
[exit:note]
[list:end]
