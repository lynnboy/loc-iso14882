[section#class.conv.fct
    [:en] Conversion functions
    [:zh_CN] 转换函数

[:en]
[%function[!conversion]]
[%fundamental type conversion[%conversion[!user-defined]]]
[%conversion[!user-defined]]
[:zh_CN]
[%函数[!转换～]]
[%基础类型转换[%转换[!用户定义～]]]
[%转换[!用户定义～]]
]

[syntax]
[rule conversion-function-id [:zh_CN] 转换函数标识 ]
    [| [`:key operator] conversion-type-id ]
[rule:end]

[rule conversion-type-id [:zh_CN] 转换类型标识 ]
    [| type-specifier-seq [~:opt conversion-declarator] ]
[rule:end]

[rule conversion-declarator [:zh_CN] 转换声明符 ]
    [| ptr-operator [~:opt conversion-declarator] ]
[rule:end]
[syntax:end]

[para]
[:en] A declaration whose [~declarator-id] has an [~unqualified-id] that is a
[~conversion-function-id] declares a [+:adj conversion[!function]];
its [~declarator] shall be a function declarator ([#dcl.fct]) of the form
[:zh_CN] 若声明式的[~声明符标识]具有一个[~未限定标识]且其为[~转换函数标识]，则它
声明一个[+:adj 转换[!函数]]；其[~声明符]应当为以下形式的函数声明符（[#dcl.fct]）：

[syntax:explanation]
[~ptr-declarator] [`(] [~parameter-declaration-clause] [`)] [~:opt cv-qualifier-seq] [br]
    [~:opt ref-qualifier-seq] [~:opt noexcept-specifier] [~:opt attribute-specifier-seq]
[syntax:end]

[:en@~] where the [~ptr-declarator] consists solely of an [~id-expression],
an optional [~attribute-specifier-seq], and optional surrounding parentheses, and
the [~id-expression] has one of the following forms:
[:zh_CN@~] 其中的[~指针声明符]仅由一个[~标识表达式]，一个可选的[~属性说明符序列]，
一个可选的外围括号构成，且该[~标识表达式]具有以下形式之一：

[list]
[item]
[:en] in a [~member-declaration] that belongs to the [~member-specification] of
a class or class template but is not a friend declaration ([#class.friend]),
the [~id-expression] is a [~conversion-function-id];
[:zh_CN] 在属于类或类模板的[~成员说明]但并非友元声明式（[#class.friend]）的某个
[~成员声明式]中，其[~标识表达式]是一个[~转换函数标识]；
[item]
[:en] otherwise, the [~id-expression] is a [~qualified-id]
whose [~unqualified-id] is a [~conversion-function-id].
[:zh_CN] 否则，其[~标识表达式]为一个[~限定标识]，其中的[~无限定标识]是一个
[~转换函数标识]。
[list:end]

[para]
[:en]
A conversion function shall have no non-object parameters and shall be a
non-static member function of a class or class template [`X]; it specifies a
conversion from [`X] to the type specified by the [~conversion-type-id],
interpreted as a [~type-id] ([#dcl.name]).
[:zh_CN]
转换函数应当没有非对象形参，且应当是某个类或类模板 [`X] 的非静态成员函数；它指定
了从 [`X] 向由[~转换类型标识]（被判读为一个[~类型标识]（[#dcl.name]））所指定的
类型的转换。

[:en]
A [~decl-specifier] in the [~decl-specifier-seq] of a conversion function (if
any) shall not be a [~defining-type-specifier].
[:zh_CN]
转换函数的[~声明说明符序列]中的[~声明说明符]（如果有）不能为[~定义类型说明符]。

[para]
[:en]
[%conversion[!type of]]
The type of the conversion function is [=lq][`noexcept] function taking no
parameter [~:opt cv-qualifier-seq] [~:opt ref-qualifier] returning
[~conversion-type-id][=rq].
[:zh_CN]
[%转换[!～的类型]]
转换函数的类型为“[~转换类型标识]为返回类型的 [~:opt cv-限定符序列]
[~:opt 引用限定符] 没有形参的 [`noexcept] 函数”。

[para]
[begin:note]
[:en]
A conversion function is never invoked for implicit or explicit conversions of
an object to the same object type (or a reference to it), to a base class of
that type (or a reference to it), or to [=cv] [`:key void].
[:zh_CN]
从来不会调用转换函数用于把一个对象转换为相同对象类型（或其引用），转换为该类型的
某个基类（或其引用），或转换为 [=cv] [`:key void]。

[:en]
Even though never directly called to perform a conversion, such conversion
functions can be declared and can potentially be reached through a call to a
virtual conversion function in a base class.
[:zh_CN]
即使从来不直接调用这种转换函数来实施转换，也可以声明它们并且可以潜在地通过调用
基类的虚转换函数而到达它们。
[end:note]

[begin:example]
[codeblock]
struct X {
  operator int();
  operator auto() -> short;     // [:en] error: trailing return type \
                                [:zh_CN] 错误：尾部返回类型
};

void f(X a) {
  int i = int(a);
  i = (int)a;
  i = a;
}
[codeblock:end]

[:en]
In all three cases the value assigned will be converted by [`X::operator int()].
[:zh_CN]
所有三种情况中所赋的值均由 [`X::operator int()] 转换。
[end:example]

[para]
[:en]
A conversion function may be explicit ([#dcl.fct.spec]), in which case it is
only considered as a user-defined conversion for direct-initialization
([#dcl.init]).
[:zh_CN]
转换函数可以是显式的（[#dcl.fct.spec]），这种情况下它只会被当作用于进行直接初始
化的用户定义转换（[#dcl.init]）。

[:en]
Otherwise, user-defined conversions are not restricted to use in assignments and
initializations.
[:zh_CN]
否则，用户定义转换并不限于在赋值和初始化中使用。

[begin:example]
[codeblock]
class Y { };
struct Z {
  explicit operator Y() const;
};

void h(Z z) {
  Y y1(z);          // [:en] OK, direct-initialization \
                    [:zh_CN] OK，直接初始化
  Y y2 = z;         // [:en] error: no conversion function candidate for copy-initialization \
                    [:zh_CN] 错误：没有针对复制初始化的转换函数候选
  Y y3 = (Y)z;      // [:en] OK, cast notation \
                    [:zh_CN] OK，转型记法
}

void g(X a, X b) {
  int i = (a) ? 1+a : 0;
  int j = (a&&b) ? a+b : i;
  if (a) {
  }
}
[codeblock:end]
[end:example]

[para]
[:en]
The [~conversion-type-id] shall not represent a function type nor an array type.
[:zh_CN]
[~转换类型标识]不能表示函数类型或数组类型。

[:en]
The [~conversion-type-id] in a [~conversion-function-id] is the longest sequence
of tokens that could possibly form a [~conversion-type-id].
[:zh_CN]
[~转换函数标识]中的[~转换类型标识]是可能构成一个[~转换类型标识]的记号的最长序列。

[begin:note]
[:en]
This prevents ambiguities between the declarator operator [`*] and its
expression counterparts.
[:zh_CN]
这防止了在声明符运算符 [`*] 和其表达式对应物之间的歧义。
[begin:example]

[codeblock]
&ac.operator int*i; // [:en] syntax error: \
                    [:zh_CN] 语法错误：
                    // [:en@~] parsed as: [`&(ac.operator int *)i] \
                    [:zh_CN@~] 被解析为：[`&(ac.operator int *)i]
                    // [:en@~] not as: [`&(ac.operator int)*i] \
                    [:zh_CN@~] 而不是：[`&(ac.operator int)*i]
[codeblock:end]

[:en]
The [`*] is the pointer declarator and not the multiplication operator.
[:zh_CN]
其中的 [`*] 是指针声明符而不是乘法运算符。
[end:example]

[:en]
This rule also prevents ambiguities for attributes.
[:zh_CN]
这条规则同样避免了属性的歧义。

[begin:example]
[codeblock]
operator int [[noreturn]] ();   // [:en] error: [`noreturn] attribute applied to a type \
                                [:zh_CN] 错误：对类型施加 [`noreturn] 属性
[codeblock:end]
[end:example]
[end:note]

[para]
[begin:note]
[:en]
[%conversion[!inheritance of user-defined]]
A conversion function in a derived class hides only
conversion functions in base classes that convert to the same type.
[:zh_CN]
[%转换[!用户定义～的继承]]
派生类中的转换函数仅会隐藏基类中转换为相同类型的转换函数。

[:en]
A conversion function template with a dependent return type hides only
templates in base classes that correspond to it ([#class.member.lookup]);
otherwise, it hides and is hidden as a non-template function.
[:zh_CN]
带有待决返回类型的转换函数模板仅会隐藏基类中与其对应（[#class.member.lookup]）的
模板；否则，它将作为非模板函数而参与隐藏和被隐藏。

[:en]
Function overload resolution ([#over.match.best]) selects
the best conversion function to perform the conversion.
[:zh_CN]
函数重载决议（[#over.match.best]）选择最佳的转换函数来实施转换。

[begin:example]
[codeblock]
struct X {
  operator int();
};

struct Y : X {
    operator char();
};

void f(Y& a) {
  if (a) {          // [:en] error: ambiguous between [`X::operator int()] and [`Y::operator char()] \
                    [:zh_CN] 错误：[`X::operator int()] 和 [`Y::operator char()] 之间有歧义
  }
}
[codeblock:end]
[end:example]
[end:note]

[para]
[:en]
[%conversion[!virtual user-defined]]
Conversion functions can be virtual.
[:zh_CN]
[%转换[!虚用户定义～]]
转换函数可为虚函数。

[para]
[:en]
[%conversion[!deduced return type of user-defined]]
A conversion function template shall not have a deduced return type
([#dcl.spec.auto]).
[:zh_CN]
[%转换[!用户定义～推断的返回类型]]
转换函数模板不能具有推断的返回类型（[#dcl.spec.auto]）。

[begin:example]
[codeblock]
struct S {
  operator auto() const { return 10; }      // OK
  template<class T>
  operator auto() const { return 1.2; }     // [:en] error: conversion function template \
                                            [:zh_CN] 错误：转换函数模板
};
[codeblock:end]
[end:example]
