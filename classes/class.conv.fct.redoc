[section#class.conv.fct
    [:en] Conversion functions
    [:zh_CN] 转换函数

[:en]
[%function[!conversion]]
[%fundamental type conversion[%conversion[!user-defined]]]
[%conversion[!user-defined]]
[%conversion operator[%conversion[!user defined]]]
[:zh_CN]
[%函数[!转换～]]
[%基础类型转换[%转换[!用户定义～]]]
[%转换[!用户定义～]]
[%转换运算符[%转换[!用户定义～]]]
]

[para]
[:en]
A member function of a class [`X] having no parameters with a name of the form
[:zh_CN]
类 [`X] 中，没有形参且名字具有如下形式的成员函数

[syntax]
[rule conversion-function-id [:zh_CN] 转换函数标识 ]
    [| [`operator] conversion-type-id ]
[rule:end]

[rule conversion-type-id [:zh_CN] 转换类型标识 ]
    [| type-specifier-seq [~:opt conversion-declarator] ]
[rule:end]

[rule conversion-declarator [:zh_CN] 转换声明符 ]
    [| ptr-operator [~:opt conversion-declarator] ]
[rule:end]
[syntax:end]

[:en@~]
specifies a conversion from [`X] to the type specified by the
[~conversion-type-id].
[:zh_CN@~]
指定了从 [`X] 向由[~转换类型标识]所指定的类型的转换。

[:en]
Such functions are called [+conversion functions[%conversion function]].
[:zh_CN]
此种函数被称为[+转换函数]。

[:en]
A [~decl-specifier] in the [~decl-specifier-seq] of a conversion function (if
any) shall be neither a [~defining-type-specifier] nor [`static].
[:zh_CN]
转换函数的[~声明说明符序列]中的[~声明说明符]（如果有）既不能为[~定义类型说明符]
也不能为 [`static]。

[:en]
[%conversion[!type of]]
The type of the conversion function ([#dcl.fct]) is ["function taking no
parameter returning [~conversion-type-id]].
[:zh_CN]
[%转换[!～的类型]]
转换函数的类型（[#dcl.fct]）为“[~转换类型标识]为返回类型的没有形参的函数”。

[:en]
A conversion function is never used to convert a (possibly cv-qualified) object
to the (possibly cv-qualified) same object type (or a reference to it),
to a (possibly cv-qualified) base class of that type (or a reference to it),
or to (possibly cv-qualified) [`void].[#:note#fn:$1]
[:zh_CN]
转换函数不能用于把（可能被 cv-限定的）对象转换为（可能被 cv-限定的）相同对象类型
（或其引用），转换为该类型的（可能被 cv-限定的）某个基类（或其引用），或转换为
（可能被 cv-限定的）[`void]。[#:note#fn:$1]

[note:foot#fn:$1]
[:en]
These conversions are considered as standard conversions for the purposes of
overload resolution ([#over.best.ics], [#over.ics.ref]) and therefore
initialization ([#dcl.init]) and explicit casts ([#expr.static.cast]).
[:zh_CN]
在进行重载决议（[#over.best.ics], [#over.ics.ref]）时，这些转换被当作标准转换，
因此可用于初始化（[#dcl.init]）和显式强制转换（[#expr.static.cast]）。

[:en]
A conversion to [`void] does not invoke any conversion function
([#expr.static.cast]).
[:zh_CN]
向 [`void] 进行的转换不会调用任何转换函数（[#expr.static.cast]）。

[:en]
Even though never directly called to perform a conversion, such conversion
functions can be declared and can potentially be reached through a call to a
virtual conversion function in a base class.
[:zh_CN]
即使从来不直接调用这种转换函数来实施转换，也可以声明它们并且可以潜在地通过调用
基类的虚转换函数而到达它们。
[note:end]

[begin:example]
[codeblock]
struct X {
  operator int();
  operator auto() -> short;     // [:en] error: trailing return type
                                // [|:zh_CN] 错误：尾部返回类型
};

void f(X a) {
  int i = int(a);
  i = (int)a;
  i = a;
}
[codeblock:end]

[:en]
In all three cases the value assigned will be converted by [`X::operator int()].
[:zh_CN]
所有三种情况中所赋的值均由 [`X::operator int()] 转换。
[end:example]

[para]
[:en]
A conversion function may be explicit ([#dcl.fct.spec]), in which case it is
only considered as a user-defined conversion for direct-initialization
([#dcl.init]).
[:zh_CN]
转换函数可以是显式的（[#dcl.fct.spec]），这种情况下它只会被当作用于进行直接初始
化的用户定义转换（[#dcl.init]）。

[:en]
Otherwise, user-defined conversions are not restricted to use in assignments and
initializations.
[:zh_CN]
否则，用户定义转换并不限于在赋值和初始化中使用。

[begin:example]
[codeblock]
class Y { };
struct Z {
  explicit operator Y() const;
};

void h(Z z) {
  Y y1(z);          // [:en] OK: direct-initialization
                    // [|:zh_CN] OK：直接初始化
  Y y2 = z;         // [:en] ill-formed: copy-initialization
                    // [|:zh_CN] 非良构：复制初始化
  Y y3 = (Y)z;      // [:en] OK: cast notation
                    // [|:zh_CN] OK：强制转换记法
}

void g(X a, X b) {
  int i = (a) ? 1+a : 0;
  int j = (a&&b) ? a+b : i;
  if (a) {
  }
}
[codeblock:end]
[end:example]

[para]
[:en]
The [~conversion-type-id] shall not represent a function type nor an array type.
[:zh_CN]
[~转换类型标识]不能表示函数类型或数组类型。

[:en]
The [~conversion-type-id] in a [~conversion-function-id] is the longest sequence
of tokens that could possibly form a [~conversion-type-id].
[:zh_CN]
[~转换函数标识]中的[~转换类型标识]是可能构成一个[~转换类型标识]的记号的最长序列。

[begin:note]
[:en]
This prevents ambiguities between the declarator operator [`*] and its
expression counterparts.
[:zh_CN]
这防止了在声明符运算符 [`*] 和其表达式对应物之间的歧义。
[begin:example]

[codeblock]
&ac.operator int*i; // [:en] syntax error:
                    // [|:zh_CN] 语法错误：
                    // [:en@~] parsed as: [`&(ac.operator int *)i]
                    // [|:zh_CN@~] 被解析为：[`&(ac.operator int *)i]
                    // [:en@~] not as: [`&(ac.operator int)*i]
                    // [|:zh_CN@~] 而不是：[`&(ac.operator int)*i]
[codeblock:end]

[:en]
The [`*] is the pointer declarator and not the multiplication operator.
[:zh_CN]
其中的 [`*] 是指针声明符而不是乘法运算符。
[end:example]

[:en]
This rule also prevents ambiguities for attributes.
[:zh_CN]
这条规则同样避免了特性标注的歧义。

[begin:example]
[codeblock]
operator int [[noreturn]] ();   // [:en] error: [`noreturn] attribute applied to a type
                                // [|:zh_CN] 错误：对类型施加 [`noreturn] 特性标注
[codeblock:end]
[end:example]
[end:note]

[para]
[:en]
[%conversion[!inheritance of user-defined]]
Conversion functions are inherited.
[:zh_CN]
[%转换[!用户定义～的继承]]
转换函数可被继承。

[para]
[:en]
[%conversion[!virtual user-defined]]
Conversion functions can be virtual.
[:zh_CN]
[%转换[!虚用户定义～]]
转换函数可为虚函数。

[para]
[:en]
[%conversion[!deduced return type of user-defined]]
A conversion function template shall not have a deduced return type
([#dcl.spec.auto]).
[:zh_CN]
[%转换[!用户定义～推断的返回类型]]
转换函数模板不能具有推断的返回类型（[#dcl.spec.auto]）。

[begin:example]
[codeblock]
struct S {
  operator auto() const { return 10; }      // OK
  template<class T>
  operator auto() const { return 1.2; }     // [:en] error: conversion function template
                                            // [|:zh_CN] 错误：转换函数模板
};
[codeblock:end]
[end:example]
