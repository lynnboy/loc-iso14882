[section#class.ctor.general
    [:en] General
    [:zh_CN] 概述

[:en]
[%constructor]
[%special member function[%constructor]]
[:zh_CN]
[%构造函数]
[%特殊成员函数[%构造函数]]
]

[para]
[:en]
A [~declarator] declares a [+constructor] if it is a function declarator
([#dcl.fct]) of the form
[:zh_CN]
如果[~声明符]为以下形式的函数声明符

[syntax:explanation]
[~ptr-declarator] [`(] [~parameter-declaration-clause] [`)]
    [~:opt noexcept-specifier] [~:opt attribute-specifier-seq]
[syntax:end]

[:en@~]
where the [~ptr-declarator] consists solely of an [~id-expression], an optional
[~attribute-specifier-seq], and optional surrounding parentheses, and the
[~id-expression] has one of the following forms:
[:zh_CN@~]
则它声明[+构造函数]，其中的[~指针声明符]仅由一个[~标识表达式]，可选的
[~属性说明符序列]，以及可选的外围括号构成，且其[~标识表达式]具有以下形式之一：

[list]
[item]
[:en]
in a friend declaration ([#class.friend]), the [~id-expression] is a
[~qualified-id] that names a constructor ([#class.qual]);
[:zh_CN]
处于某个友元声明式（[#class.friend]）中，其[~标识表达式]是指名了构造函数的
[~限定标识]（[#class.qual]）；

[item]
[:en]
otherwise, in a [~member-declaration] that belongs to the [~member-specification]
of a class or class template, the [~id-expression] is the injected-class-name
([#class.pre]) of the immediately-enclosing entity;
[:zh_CN]
否则，处于属于某个类或类模板的[~成员说明]的[~成员声明式]中，该[~标识表达式]是其
直接外围实体的注入类名（[#class.pre]）；

[item]
[:en]
otherwise, the [~id-expression] is a [~qualified-id] whose [~unqualified-id] is
the injected-class-name of its lookup context.
[:zh_CN]
否则，该[~标识表达式]是其[~无限定标识]为其查找语境中的注入类名的[~限定标识]。
[list:end]

[:en]
Constructors do not have names.
[:zh_CN]
构造函数没有名字。

[:en]
In a constructor declaration, each [~decl-specifier] in the optional
[~decl-specifier-seq] shall be [`:key friend], [`:key inline], [`:key constexpr],
[`:key consteval], or an [~explicit-specifier].
[:zh_CN]
构造函数声明式中，可选的[~声明说明符序列]中的各[~声明说明符]应当为 [`:key friend]，
[`:key inline]，[`:key constexpr]，[`:key consteval]，或者 [~explicit-说明符]。

[begin:example]
[codeblock]
struct S {
  S();              // [:en] declares the constructor \
                    [:zh_CN] 声明构造函数
};

S::S() { }          // [:en] defines the constructor \
                    [:zh_CN] 定义构造函数
[codeblock:end]
[end:example]

[para]
[:en]
[%constructor[!explicit call]]
A constructor is used to initialize objects of its class type.
[:zh_CN]
[%构造函数[!显式调用～]]
构造函数用于初始化其类类型的对象。

[begin:note]
[:en]
Because constructors do not have names, they are never found during unqualified
name lookup; however an explicit type conversion using the functional notation
([#expr.type.conv]) will cause a constructor to be called to initialize an
object.
[:zh_CN]
由于构造函数没有名字，故无限定名字查找无法找到它们；然而使用函数式记法的显式
类型转换（[#expr.type.conv]）将会导致对构造函数的调用以初始化某个对象。

[:en]
The syntax looks like an explicit call of the constructor.
[:zh_CN]
其语法看似对构造函数的显式调用。
[end:note]

[begin:example]
[codeblock]
complex zz = complex(1,2.3);
cprint( complex(7.8,1.2) );
[codeblock:end]
[end:example]

[begin:note]
[:en]
For initialization of objects of class type see [#class.init].
[:zh_CN]
关于类类型的对象的初始化，参见 [#class.init]。
[end:note]

[para]
[:en]
[%object[!unnamed]]
An object created in this way is unnamed.
[:zh_CN]
[%对象[!无名～]]
这种方式所创建的对象是无名的。

[begin:note]
[:en]
[#class.temporary] describes the lifetime of temporary objects.
[:zh_CN]
[#class.temporary] 说明临时对象的生存期。
[end:note]

[begin:note]
[:en]
Explicit constructor calls do not yield lvalues, see [#basic.lval].
[:zh_CN]
显式构造函数调用并不产生左值，参见 [#basic.lval]。
[end:note]

[para]
[begin:note]
[:en]
[%member function[!constructor and]]
Some language constructs have special semantics when used during construction;
see [#class.base.init] and [#class.cdtor].
[:zh_CN]
[%成员函数[!构造函数与～]]
某些语言构造，在构造过程中使用时将具有特殊语义；参见 [#class.base.init] 和
[#class.cdtor]。
[end:note]

[para]
[:en]
[%[`const][!constructor and]]
[%[`volatile][!constructor and]]
A constructor can be invoked for a [`:key const], [`:key volatile] or
[`:key const] [`:key volatile] object.
[:zh_CN]
[%[`const][!构造函数与～]]
[%[`volatile][!构造函数与～]]
可以为 [`:key const]，[`:key volatile] 或 [`:key const] [`:key volatile] 对象
调用构造函数。

[:en]
[%restriction[!constructor]]
[`:key const] and [`:key volatile] semantics ([#dcl.type.cv]) are not applied on
an object under construction.
[:zh_CN]
[%限制[!构造函数]]
[`:key const] 和 [`:key volatile] 语义（[#dcl.type.cv]）对于正在构造中的对象
不适用。

[:en]
They come into effect when the constructor for the most derived object
([#intro.object]) ends.
[:zh_CN]
当全派生对象（[#intro.object]）的构造函数结束时，它们才生效。

[para]
[:en]
[%constructor[!address of]]
The address of a constructor shall not be taken.
[:zh_CN]
[%构造函数[!～的地址]]
不能获得构造函数的地址。

[%restriction[!constructor]]
[:en]
A [`return] statement in the body of a constructor cannot specify a return
value ([#stmt.return]).
[:zh_CN]
[%限制[!构造函数]]
构造函数体中的 [`return] 语句不能指定返回值（[#stmt.return]）。

[para]
[:en]
A constructor shall not be a coroutine.
[:zh_CN]
构造函数不能是协程。
