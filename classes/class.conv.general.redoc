[section#class.conv.general
    [:en] General
    [:zh_CN] 概述
]

[para]
[:en]
[%conversion[!class]]
[%constructor[! conversion by][%conversion[! user-defined]]]
[%conversion function[%conversion[! user-defined]]]
[%conversion[!implicit]]
Type conversions of class objects can be specified by constructors and
by conversion functions.
[:zh_CN]
[%转换[!类]]
[%构造函数[!通过～转换][%转换[!用户定义～]]]
[%转换函数[%转换[!用户定义～]]]
[%转换[!隐式～]]
可以通过构造函数和转换函数来指定对类对象进行的类型转换。

[:en]
These conversions are called [+user-defined conversions
[%conversion[!user-defined]]] and are used for implicit type conversions ([#conv]),
for initialization ([#dcl.init]), and for explicit type conversions
([#expr.type.conv], [#expr.cast], [#expr.static.cast]).
[:zh_CN]
这些转换被称为[+用户定义转换[%转换[!用户定义～]]]，并且用于进行隐式类型转换
（[#conv]）、初始化（[#dcl.init]）和显式类型转换（[#expr.type.conv]，[#expr.cast]，
[#expr.static.cast]）。

[para]
[:en]
User-defined conversions are applied only where they are unambiguous
([#class.member.lookup], [#class.conv.fct]).
[:zh_CN]
用户定义转换只有在没有歧义时才能实施（[#class.member.lookup]，
[#class.conv.fct]）。

[:en]
Conversions obey the access control rules ([#class.access]).
[:zh_CN]
转换遵循访问控制规则（[#class.access]）。

[:en]
Access control is applied after ambiguity resolution ([#basic.lookup]).
[:zh_CN]
访问控制在歧义消解（[#basic.lookup]）之后实施。

[para]
[begin:note]
[:en]
See [#over.match] for a discussion of the use of conversions in function calls
as well as examples below.
[:zh_CN]
对于在函数调用中使用转换的探讨，参见 [#over.match]，示例见下文。
[end:note]

[para]
[:en]
[%conversion[!implicit user-defined]]
At most one user-defined conversion (constructor or conversion function)
is implicitly applied to a single value.
[:zh_CN]
[%转换[!隐式用户定义～]]
对单个值最多能隐式实施一个用户定义转换（构造函数或转换函数）。

[begin:example]
[codeblock]
struct X {
  operator int();
};

struct Y {
  operator X();
};

Y a;
int b = a;          // [:en] error: no viable conversion ([`a.operator X().operator int()] not considered) \
                    [:zh_CN] 错误：没有可行转换（不考虑 [`a.operator X().operator int()]）
int c = X(a);       // [:en] OK: [`a.operator X().operator int()] \
                    [:zh_CN] OK：[`a.operator X().operator int()]
[codeblock:end]
[end:example]
