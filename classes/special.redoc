[section#special
    [:en] Special member functions
    [:zh_CN] 特殊成员函数
]
[/
\gramSec[gram.special]{Special member functions}
/]

[:en]
[%[`~][%destructor]]
[%assignment[!copy][%assignment operator [!copy]]]
[%assignment[!move][%assignment operator [!move]]]
[%implicitly-declared default constructor[%constructor [!default]]]
[:zh_CN]
[%[`~][%析构函数]]
[%赋值[!复制～][%赋值运算符[!复制～]]]
[%赋值[!移动～][%赋值运算符[!移动～]]]
[%隐式声明的默认构造函数[%构造函数[!默认～]]]

[para]
[:en]
[%constructor[!default]] [%constructor[!copy]] [%constructor[!move]]
[%assignment operator[!copy]] [%assignment operator[!move]]
Default constructors ([#class.default.ctor]), copy constructors, move
constructors ([#class.copy.ctor]), copy assignment operators, move assignment
operators ([#class.copy.assign]), and prospective destructors ([#class.dtor])
are [+:% special member functions].
[:zh_CN]
[%构造函数[!默认～]] [%构造函数[!复制～]] [%构造函数[!移动～]]
[%赋值运算符[!复制～]] [%赋值运算符[!移动～]]
默认构造函数（[#class.default.ctor]），复制构造函数，移动构造函数
（[#class.copy.ctor]），复制赋值运算符，移动赋值运算符（[#class.copy.assign]），
以及预期的析构函数（[#class.dtor]），是[+:% 特殊成员函数]。

[begin:note]
[:en]
The implementation will implicitly declare these member functions for some class
types when the program does not explicitly declare them.
[:zh_CN]
如果程序没有为类类型明确声明这些成员函数，实现将隐式声明它们。

[:en]
The implementation will implicitly define them if they are odr-used
([#basic.def.odr]) or needed for constant evaluation ([#expr.const]).
[:zh_CN]
当它们被 ODR 式使用（[#basic.def.odr]）或被常量求值所需要（[#expr.const]）时，
实现还将对它们进行隐式定义。
[end:note]

[:en]
An implicitly-declared special member function is declared at the closing [`}]
of the [~class-specifier].
[:zh_CN]
隐式声明的特殊成员函数被声明于[~类说明符]的闭合 [`}] 处。

[:en]
Programs shall not define implicitly-declared special member functions.
[:zh_CN]
程序不能对隐式声明的特殊成员函数进行定义。

[para]
[:en]
Programs may explicitly refer to implicitly-declared special member functions.
[:zh_CN]
程序可以明确地涉指隐式声明的特殊成员函数。

[begin:example]
[:en]
A program may explicitly call or form a pointer to member to an
implicitly-declared special member function.
[:zh_CN]
程序可以对隐式声明的特殊成员函数进行显式调用或者构成指向它的成员指针。

[codeblock]
struct A { };                   // [:en] implicitly declared [`A::operator=] \
                                   [:zh_CN] 隐式声明了 [`A::opterator=]
struct B : A {
  B& operator=(const B &);
};
B& B::operator=(const B& s) {
  this->A::operator=(s);        // [:en] well-formed \
                                   [:zh_CN] 良构
  return *this;
}
[codeblock:end]
[end:example]

[para]
[begin:note]
[:en]
The special member functions affect the way objects of class type are created,
copied, moved, and destroyed, and how values can be converted to values of other
types.
[:zh_CN]
特殊成员函数影响类类型的对象的创建、复制、移动和销毁方式，以及如何将值转换为其他
类型的值。

[:en]
Often such special member functions are called implicitly.
[:zh_CN]
通常这些特殊成员函数是被隐式调用的。
[end:note]

[para]
[:en]
[%access control[!member function and]]
Special member functions obey the usual access rules ([#class.access]).
[:zh_CN]
[%访问控制[!成员函数与～]]
特殊成员函数遵循常规的访问规则（[#class.access]）。

[begin:example]
[:en]
Declaring a constructor protected ensures that only derived classes and friends
can create objects using it.
[:zh_CN]
将构造函数声明为受保护的保证了只有派生类和友元可以用它创建对象。
[end:example]

[para]
[:en]
Two special member functions are of the same kind if:
[:zh_CN]
以下情况下，两个特殊成员函数属于同一种类：

[list]
[item]
[:en@~] they are both default constructors,
[:zh_CN@~] 它们都是默认构造函数，
[item]
[:en@~] they are both copy or move constructors with the same first parameter
type, or
[:zh_CN@~] 它们都是具有相同首个形参类型的复制或移动构造函数，或者
[item]
[:en@~] they are both copy or move assignment operators with the same first
parameter type and the same [~cv-qualifier]s and [~ref-qualifier], if any.
[:zh_CN@~] 它们都是具有相同首个形参类型，以及相同 [~cv-限定符]和[~引用限定符]
（如果有）的复制或移动赋值运算符。
[list:end]

[para]
[:en]
An [+:adj eligible[!special member function]] is a special member function for
which:
[:zh_CN]
[+:adj 合格的[!特殊成员函数]]是符合如下条件的特殊成员函数：

[list]
[item]
[:en@~] the function is not deleted,
[:zh_CN@~] 该函数未被弃置，
[item]
[:en@~] the associated constraints ([#temp.constr]), if any, are satisfied, and
[:zh_CN@~] 其关联约束（[#temp.constr]）（如果有）均被满足，并且
[item]
[:en@~] no special member function of the same kind is more constrained
([#temp.constr.order]).
[:zh_CN@~] 不存在比之更受约束（[#temp.constr.order]）的相同种类的特殊成员函数。
[list:end]

[para]
[:en]
For a class, its non-static data members, its non-virtual direct base classes,
and, if the class is not abstract ([#class.abstract]), its virtual base classes
are called its [+:% potentially constructed subobjects].
[:zh_CN]
对于一个类来说，其非静态数据成员，非虚直接基类，以及当该类不为抽象类
（[#class.abstract]）时它的虚基类，被称为它的[+:% 潜在构造的子对象]。

[para]
[:en]
A defaulted special member function is
[%member function[!constexpr-compatible]]
[+constexpr-compatible[%constexpr-compatible[!defaulted special member function]]]
if the corresponding implicitly-declared special member function would be a
constexpr function.
[:zh_CN]
如果预置的特殊成员函数所对应的隐式声明的特殊成员函数会是 constexpr 函数，则它是
[%成员函数[!constexpr 兼容]]
[+constexpr 兼容[%constexpr 兼容[!预置特殊成员函数]]]的。
