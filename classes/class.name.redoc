[section#class.name
    [:en] Class names
    [:zh_CN] 类名

[:en]
[%definition[!class name as type]]
[%structure tag[%class name]]
[%equivalence[!type]]
[:zh_CN]
[%定义[!类名作为类型]]
[%结构体标记[%类名]]
[%等价[!类型～]]
]

[para]
[:en]
A class definition introduces a new type.
[:zh_CN]
类定义式引入新的类型。

[begin:example]
[codeblock]
struct X { int a; };
struct Y { int a; };
X a1;
Y a2;
int a3;
[codeblock:end]

[:en]
declares three variables of three different types.
[:zh_CN]
声明了三个不同类型的三个变量。

[:en]
This implies that
[:zh_CN]
这意味着

[codeblock]
a1 = a2;                        // [:en] error: [`Y] assigned to [`X] \
                                [:zh_CN] 错误：[`Y] 向 [`X] 赋值
a1 = a3;                        // [:en] error: [`int] assigned to [`X] \
                                [:zh_CN] 错误：[`int] 向 [`X] 赋值
[codeblock:end]

[:en@~]
are type mismatches, and that
[:zh_CN@~]
的类型不匹配，而

[codeblock]
int f(X);
int f(Y);
[codeblock:end]

[:en@~]
[%overloading]
declare overloads ([#over]) named [`f] and not simply a single function [`f]
twice.
[:zh_CN@~]
[%重载]
声明了名为 [`f] 的重载（[#over]）而不仅是单个函数 [`f] 声明两次。

[:en]
For the same reason,
[:zh_CN]
由于同样原因，

[codeblock]
struct S { int a; };
struct S { int a; };            // [:en] error: double definition \
                                [:zh_CN] 错误：两个定义式
[codeblock:end]

[:en@~]
is ill-formed because it defines [`S] twice.
[:zh_CN@~]
因为 [`S] 定义了两次，所以是非良构的。
[end:example]

[para]
[begin:note]
[:en]
[%definition[!scope of class]]
It can be necessary to use an [~elaborated-type-specifier] to refer to a class
that belongs to a scope in which its name is also bound to a variable, function,
or enumerator ([#basic.lookup.elab]).
[:zh_CN]
[%定义式[!类～的作用域]]
有必要使用[~详述类型说明符]来提及属于某个作用域的类，其中它的名字也被绑定到某个
变量、函数或枚举符（[#basic.lookup.elab]）。

[begin:example]
[codeblock]
struct stat {
  // ...
};

stat gstat;                     // [:en] use plain [`stat] to define variable \
                                [:zh_CN] 使用普通的 [`stat] 来定义变量

int stat(struct stat*);         // [:en] [`stat] now also names a function \
                                [:zh_CN] [`stat] 现在也指名一个函数

void f() {
  struct stat* ps;              // [:en] [`:key struct] prefix needed to name [`struct stat] \
                                [:zh_CN] 需要 [`:key struct] 前缀以指明 [`struct stat]
  stat(ps);                     // [:en] call [`stat] function \
                                [:zh_CN] 调用了 [`stat] 函数
}
[codeblock:end]
[end:example]

[:en]
[%class name[!elaborated]] [%declaration[!forward class]]
An [~elaborated-type-specifier] can also be used to declare an [~identifier] as
a [~class-name].
[:zh_CN]
[%类名[!详细的～]] [%声明式[!前向类～]]
[~详述类型说明符]还可用于将[~标识符]声明为[~类名]。

[:en]
It introduces the class name into the current scope.
[:zh_CN]
它向当前作用域中引入这个类名。

[begin:example]
[codeblock]
struct s { int a; };

void g() {
  struct s;                     // [:en] hide global [`struct s] with a block-scope declaration \
                                [:zh_CN] 用局部的声明式隐藏了全局的 [`struct s]
  s* p;                         // [:en] refer to local [`struct s] \
                                [:zh_CN] 涉指局部的 [`struct s]
  struct s { char* p; };        // [:en] define local [`struct s] \
                                [:zh_CN] 定义了局部的 [`struct s]
  struct s;                     // [:en] redeclaration, has no effect \
                                [:zh_CN] 重复声明，没有效果
}
[codeblock:end]
[end:example]

[:en]
Such declarations allow definition of classes that refer to each other.
[:zh_CN]
用这种声明式可以定义一些互相有所涉指的类。

[begin:example]
[codeblock]
class Vector;

class Matrix {
  // ...
  friend Vector operator*(const Matrix&, const Vector&);
};

class Vector {
  // ...
  friend Vector operator*(const Matrix&, const Vector&);
};
[codeblock:end]

[:en]
Declaration of friends is described in [#class.friend], operator functions in
[#over.oper].
[:zh_CN]
友元的声明式在 [#class.friend] 中说明，运算符函数在 [#over.oper] 中说明。
[end:example]
[end:note]

[para]
[:en]
[%class name[!elaborated]]
[%elaborated type specifier[%class name[!elaborated]]]
[:zh_CN]
[%类名[!详细的～]]
[%详述类型说明符[%类名[!详细的～]]]

[begin:note]
[:en]
An [~elaborated-type-specifier] ([#dcl.type.elab]) can also be used as a
[~type-specifier] as part of a declaration.
[:zh_CN]
[~详述类型说明符]（[#dcl.type.elab]）还可以作为声明式的一部分而用作[~类型说明符]。

[:en]
It differs from a class declaration in that it can refer to an existing class of
the given name.
[:zh_CN]
它与类声明式的不同之处在于，它可以涉指某个现存的具有给定名字的类。
[end:note]

[begin:example]
[codeblock]
struct s { int a; };

void g(int s) {
  struct s* p = new struct s;   // [:en] global [`s] [:zh_CN] 全局的 [`s]
  p->a = s;                     // [:en] parameter [`s] [:zh_CN] 形参 [`s]
}
[codeblock:end]
[end:example]

[para]
[%  [:en] class name[!point of declaration]
    [:zh_CN] 类名[!声明点] ]
[begin:note]
[:en] The declaration of a class name takes effect immediately after the
[~identifier] is seen in the class definition or [~elaborated-type-specifier].
[:zh_CN] 对类名的声明，紧跟其[~标识符]在类定义式或[~详述类型说明符]中出现之后即生效。

[begin:example]
[codeblock]
class A * A;
[codeblock:end]

[:en@~] first specifies [`A] to be the name of a class and then redefines it as
the name of a pointer to an object of that class.
[:zh_CN@~] 首先指定 [`A] 为类的名字，然后将其重新定义为指向这个类的对象的指针。

[:en] This means that the elaborated form [`:key class] [`A] must be used to
refer to the class.
[:zh_CN] 这意味着必须使用详述形式 [`:key class] [`A] 来涉指此类。

[:en] Such artistry with names can be confusing and is best avoided.
[:zh_CN] 这样的名字花招会造成混乱，因此最好避免之。
[end:example]
[end:note]

[para]
[:en]
[%class name[![`typedef]]]
A [~simple-template-id] is only a [~class-name] if its [~template-name] names a
class template.
[:zh_CN]
[%类名[![`typedef]]]
如果[~简单模板标识]的[~模板名]所指名的是某个类模板，那么它只是一个[~类名]。
