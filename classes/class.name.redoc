[section#class.name
    [:en] Class names
    [:zh_CN] 类名

[:en]
[%definition[!class name as type]]
[%structure tag[%class name]]
[%equivalence[!type]]
[:zh_CN]
[%定义[!类名作为类型]]
[%结构标记[%类名]]
[%等价[!类型～]]
]

[para]
[:en]
A class definition introduces a new type.
[:zh_CN]
类定义式引入新的类型。

[enter:example]
[codeblock]
struct X { int a; };
struct Y { int a; };
X a1;
Y a2;
int a3;
[codeblock:end]

[:en]
declares three variables of three different types.
[:zh_CN]
声明了三个不同类型的三个变量。

[:en]
This implies that
[:zh_CN]
这意味着

[codeblock]
a1 = a2;                        // [:en] error: [`Y] assigned to [`X]
                                // [|:zh_CN] 错误：[`Y] 向 [`X] 赋值
a1 = a3;                        // [:en] error: [`int] assigned to [`X]
                                // [|:zh_CN] 错误：[`int] 向 [`X] 赋值
[codeblock:end]

[:en@~]
are type mismatches, and that
[:zh_CN@~]
的类型不匹配，而

[codeblock]
int f(X);
int f(Y);
[codeblock:end]

[:en@~]
[%overloading]
declare an overloaded ([#over]) function [`f()] and not simply a single function
[`f()] twice.
[:zh_CN@~]
[%重载]
声明了重载的（[#over]）函数 [`f()] 而不仅是单个函数 [`f()] 声明两次。

[:en]
For the same reason,
[:zh_CN]
由于同样原因，

[codeblock]
struct S { int a; };
struct S { int a; };            // [:en] error, double definition
                                // [|:zh_CN] 错误，两个定义式
[codeblock:end]

[:en@~]
is ill-formed because it defines [`S] twice.
[:zh_CN@~]
因为 [`S] 定义了两次所以是非良构的。
[exit:example]

[para]
[:en]
[%definition[!scope of class]] [%class name[!scope of]]
[%name hiding[!class definition]]
A class declaration introduces the class name into the scope where
it is declared and hides any class, variable, function, or other declaration of
that name in an enclosing scope ([#basic.scope]).
[:zh_CN]
[%定义式[!类～的作用域]] [%类名[!～的作用域]]
[%名字隐藏[!类定义式]]
类声明式向声明了它的作用域中引入类名，并且隐藏了其外围作用域中具有这个名字的任何
类、变量、函数或者其他声明式（[#basic.scope]）。

[:en]
If a class name is declared in a scope where a variable, function, or enumerator
of the same name is also declared, then when both declarations are in scope, the
class can be referred to only using an [~elaborated-type-specifier]
([#basic.lookup.elab]).
[:zh_CN]
如果一个类名是在已经声明了相同名字的变量、函数或枚举符的作用域中声明的，则两个
声明式均处于作用域中，该类只能通过使用[~详述类型说明符]（[#basic.lookup.elab]）
来提及。

[enter:example]
[codeblock]
struct stat {
  // ...
};

stat gstat;                     // [:en] use plain [`stat] to define variable
                                // [|:zh_CN] 使用普通的 [`stat] 来定义变量

int stat(struct stat*);         // [:en] redeclare [`stat] as function
                                // [|:zh_CN] 将 [`stat] 重新声明为函数

void f() {
  struct stat* ps;              // [:en] [`struct] prefix needed to name [`struct stat]
                                // [|:zh_CN] 需要 [`struct] 前缀以指明 [`struct stat]
  stat(ps);                     // [:en] call [`stat()]
                                // [|:zh_CN] 调用了 [`stat()]
}
[codeblock:end]
[exit:example]

[:en]
[%class name[!elaborated]] [%declaration[!forward class]]
A [~declaration] consisting solely of [~class-key] [~identifier][`;] is either a
redeclaration of the name in the current scope or a forward declaration of the
identifier as a class name.
[:zh_CN]
[%类名[!详细的～]] [%声明式[!前向类～]]
仅由“[~类关键字] [~标识符][`;]”构成的[~声明式]，要么是对当前作用域中的名字进行
重复声明，要么是以其标识符作为类名的前向声明。

[:en]
It introduces the class name into the current scope.
[:zh_CN]
它向当前作用域中引入这个类名。

[enter:example]
[codeblock]
struct s { int a; };

void g() {
  struct s;                     // [:en] hide global [`struct s] with a block-scope declaration
                                // [|:zh_CN] 用局部的声明式隐藏了全局的 [`struct s]
  s* p;                         // [:en] refer to local [`struct s]
                                // [|:zh_CN] 涉指局部的 [`struct s]
  struct s { char* p; };        // [:en] define local [`struct s]
                                // [|:zh_CN] 定义了局部的 [`struct s]
  struct s;                     // [:en] redeclaration, has no effect
                                // [|:zh_CN] 重复声明，没有效果
}
[codeblock:end]
[exit:example]

[enter:note]
[:en]
Such declarations allow definition of classes that refer to each other.
[:zh_CN]
用这种声明式可以定义一些互相有所涉指的类。

[enter:example]
[codeblock]
class Vector;

class Matrix {
  // ...
  friend Vector operator*(const Matrix&, const Vector&);
};

class Vector {
  // ...
  friend Vector operator*(const Matrix&, const Vector&);
};
[codeblock:end]

[:en]
Declaration of friends is described in [#class.friend], operator functions in
[#over.oper].
[:zh_CN]
友元的声明式在 [#class.friend] 中说明，运算符函数在 [#over.oper] 中说明。
[exit:example]
[exit:note]

[para]
[:en]
[%class name[!elaborated]]
[%elaborated type specifier[%class name[!elaborated]]]
[:zh_CN]
[%类名[!详细的～]]
[%详述类型说明符[%类名[!详细的～]]]

[enter:note]
[:en]
An [~elaborated-type-specifier] ([#dcl.type.elab]) can also be used as a
[~type-specifier] as part of a declaration.
[:zh_CN]
[~详述类型说明符]（[#dcl.type.elab]）还可以作为声明式的一部分而用作[~类型说明符]
。

[:en]
It differs from a class declaration in that if a class of the elaborated name is
in scope the elaborated name will refer to it.
[:zh_CN]
它与类声明式的不同之处在于，如果某个具有所详述的名字的类处于作用域中，则这个详述
的名字即涉指它。
[exit:note]

[enter:example]
[codeblock]
struct s { int a; };

void g(int s) {
  struct s* p = new struct s;   // [:en] global [`s]
                                // [|:zh_CN] 全局的 [`s]
  p->a = s;                     // [:en] parameter [`s]
                                // [|:zh_CN] 形参 [`s]
}
[codeblock:end]
[exit:example]

[para]
[%  [:en] class name[!point of declaration]
    [:zh_CN] 类名[!声明点] ]
[enter:note]
[:en]
The declaration of a class name takes effect immediately after the [~identifier]
is seen in the class definition or [~elaborated-type-specifier].
[:zh_CN]
对类名的声明，紧跟其[~标识符]在类定义式或[~详述类型说明符]中出现之后即生效。

[:en]
For example,
[:zh_CN]
例如，

[codeblock]
class A * A;
[codeblock:end]

[:en@~]
first specifies [`A] to be the name of a class and then redefines it as the name
of a pointer to an object of that class.
[:zh_CN@~]
首先指定 [`A] 为某类的名字，然后将其重新定义为指向这个类的对象的一个指针。

[:en]
This means that the elaborated form [`class A] must be used to refer to the
class.
[:zh_CN]
这意味着必须使用详述形式 [`class A] 来涉指此类。

[:en]
Such artistry with names can be confusing and is best avoided.
[:zh_CN]
这样的名字花招会造成混乱，因此最好避免这样使用。
[exit:note]

[para]
[:en]
[%class name[![`typedef]]]
A [~simple-template-id] is only a [~class-name] if its [~template-name] names a
class template.
[:zh_CN]
[%类名[![`typedef]]]
如果[~简单模板标识]的[~模板名]所指名的是某个类模板，那么它只是一个[~类名]。
