[section#class.union.general
    [:en] General
    [:zh_CN] 概述

[:] [%[`union]]
]

[para]
[:en]
A [+union] is a class defined with the [~class-key] [`:key union].
[:zh_CN]
[+联合体]是用[~类关键字] [`:key union] 定义的类。

[para]
[:en]
In a union, a non-static data member is [+active[%active[!union member]]] if its
name refers to an object whose lifetime has begun and has not ended
([#basic.life]).
[:zh_CN]
在一个联合体中，当非静态数据成员的名字指代了生存期已经开始且仍未结束的对象时
（[#basic.life]），它是[+活跃[%活跃[!联合体成员]]]的。

[:en]
At most one of the non-static data members of an object of union type can be
active at any time, that is, the value of at most one of the non-static data
members can be stored in a union at any time.
[:zh_CN]
联合体类型的一个对象中，任意时刻至多只有一个非静态数据成员是活跃的，就是说，任意
时刻在一个联合体中可以存储至多一个非静态数据成员的值。

[begin:note]
[:en]
One special guarantee is made in order to simplify the use of unions:
[:zh_CN]
一条特殊的保证用以简化对联合体的使用：

[:en]
If a standard-layout union contains several standard-layout structs that share a
common initial sequence ([#class.mem]), and if a non-static data member of an
object of this standard-layout union type is active and is one of the
standard-layout structs, it is permitted to inspect the common initial sequence
of any of the standard-layout struct members; see [#class.mem].
[:zh_CN]
若一个标准布局联合体包含几个共享了共同初始序列（[#class.mem]）的标准布局结构体，
且若该标准布局联合体类型的对象的某个非静态数据成员活跃并具有这些标准布局结构体
之一类型，则允许探察这些标准布局结构体成员中的任意一个的共同初始序列部分；参见
[#class.mem]。
[end:note]

[:en]
The size of a union is sufficient to contain the largest of its non-static data
members.
[:zh_CN]
联合体的大小足够包含其最大的非静态数据成员。

[:en]
Each non-static data member is allocated as if it were the sole member of a
non-union class.
[:zh_CN]
对每个非静态数据成员所进行的分配都如同它是某个非联合体类的唯一成员一样。

[begin:note]
[:en]
A union object and its non-static data members are pointer-interconvertible
([#basic.compound], [#expr.static.cast]).
[:zh_CN]
联合体对象及其非静态数据成员是指针可相互转换的（[#basic.compound]，
[#expr.static.cast]）。

[:en]
As a consequence, all non-static data members of a
union object have the same address.
[:zh_CN]
其结果是，一个联合体对象的所有非静态数据成员都具有相同的地址。
[end:note]

[para]
[:en]
[%member function[![`union]]] [%constructor[![`union]]] [%destructor[![`union]]]
A union can have member functions (including constructors and destructors),
[%restriction[![`union]]] but it shall not have virtual ([#class.virtual])
functions.
[:zh_CN]
[%成员函数[![`union]]] [%构造函数[![`union]]] [%析构函数[![`union]]]
联合体可以具有成员函数（包括构造函数和析构函数），[%限制[![`union]]] 但不能有
虚（[#class.virtual]）函数。

[:en]
A union shall not have base classes.
[:zh_CN]
联合体不能有基类。

[:en]
A union shall not be used as a base class.
[:zh_CN]
联合体不能用作基类。

[:en]
[%restriction[![`union]]]
If a union contains a non-static data member of reference type the program is
ill-formed.
[:zh_CN]
[%限制[![`union]]]
如果某个联合体中含有引用类型的非静态数据成员，则程序非良构。

[begin:note]
[:en]
Absent default member initializers ([#class.mem]), if any non-static data member
of a union has a non-trivial default constructor ([#class.default.ctor]), copy
constructor, move constructor ([#class.copy.ctor]), copy assignment operator,
move assignment operator ([#class.copy.assign]), or destructor ([#class.dtor]),
the corresponding member function of the union must be user-provided or it will
be implicitly deleted ([#dcl.fct.def.delete]) for the union.
[:zh_CN]
当没有默认成员初始化式（[#class.mem]）时，若某个联合体的任何非静态数据成员具有
非平凡的默认构造函数（[#class.default.ctor]）、复制构造函数、移动构造函数
（[#class.copy.ctor]）、复制赋值运算符、移动赋值运算符（[#class.copy.assign]）
或析构函数（[#class.dtor]），则该联合体的对应成员函数必须是用户提供的，否则它在
该联合体中就是隐式弃置的（[#dcl.fct.def.delete]）。

[para]
[begin:example]
[:en]
Consider the following union:
[:zh_CN]
考虑如下联合体：

[codeblock]
union U {
  int i;
  float f;
  std::string s;
};
[codeblock:end]

[:en]
Since [`std::string] ([#string.classes]) declares non-trivial versions of all of
the special member functions, [`U] will have an implicitly deleted default
constructor, copy/move constructor, copy/move assignment operator, and
destructor.
[:zh_CN]
因为 [`std::string]（[#string.classes]）声明了所有特殊成员函数的非平凡版本，所以
[`U] 将带有隐式弃置的默认构造函数、复制/移动构造函数、复制/移动赋值运算符以及
析构函数。

[:en]
To use [`U], some or all of these member functions must be user-provided.
[:zh_CN]
要使用 [`U]，这些成员函数中的一些或者全部必须是由用户提供的。
[end:example]
[end:note]

[para]
[:en]
When the left operand of an assignment operator involves a member access
expression ([#expr.ref]) that nominates a union member, it may begin the
lifetime of that union member, as described below.
[:zh_CN]
当赋值运算符的左操作数涉及某个指名了联合体成员的成员访问表达式（[#expr.ref]）时，
它将开始这个联合体成员的生存期，如下文所述。

[:en]
For an expression [`E], define the set [$S([`E])] of subexpressions of [`E] as
follows:
[:zh_CN]
对于表达式 [`E]，为 [`E] 的子表达式定义一个集合 [$S([`E])] 如下：

[list]
[item]
[:en]
If [`E] is of the form [`A.B], [$S([`E])] contains the elements of [$S([`A])],
and also contains [`A.B] if [`B] names a union member of a non-class, non-array
type, or of a class type with a trivial default constructor that is not deleted,
or an array of such types.
[:zh_CN]
若 [`E] 的形式为 [`A.B]，则 [$S([`E])] 包含 [$S([`A])] 的成员，当 [`B] 所指名的
是具有非类非数组类型，或者具有带有未弃置的平凡默认构造函数的类类型，或者这些类型
的数组的联合体成员时，还包含 [`A.B]。

[item]
[:en]
If [`E] is of the form [`A`[B`]] and is interpreted as a built-in array
subscripting operator, [$S([`E])] is [$S([`A])] if [`A] is of array type,
[$S([`B])] if [`B] is of array type, and empty otherwise.
[:zh_CN]
若 [`E] 的形式为 [`A`[B`]] 且被解释为内建的数组下标运算符，则当 [`A] 为数组类型
时 [$S([`E])] 为 [$S([`A])]，当 [`B] 为数组类型时为 [$S([`B])]，否则就为空。

[item]
[:en]
Otherwise, [$S([`E])] is empty.
[:zh_CN]
否则，[$S([`E])] 为空。
[list:end]

[:en]
In an assignment expression of the form [`E1 = E2] that uses either the built-in
assignment operator ([#expr.ass]) or a trivial assignment operator
([#class.copy.assign]), for each element [`X] of [$S([`E1])] and each anonymous
union member [`X] ([#class.union.anon]) that is a member of a union and has such
an element as an immediate subobject (recursively), if modification of
[`X] would have undefined behavior under [#basic.life], an object of the type of
[`X] is implicitly created in the nominated storage; no initialization is
performed and the beginning of its lifetime is sequenced after the value
computation of the left and right operands and before the assignment.
[:zh_CN]
对于形式为 [`E1 = E2] 的赋值表达式，且其使用的是内建赋值运算符（[#expr.ass]），
或者是平凡赋值运算符（[#class.copy.assign]），则对于 [$S([`E1])] 的每个元素 [`X]，
和每个匿名联合体成员 [`X]（[#class.union.anon]）（它（递归地）是联合体的成员且以
这种元素为其直接子对象），如果对 [`X] 进行的改动根据 [#basic.life] 具有未定义的
行为，则在所指定的存储上隐式创建 [`X] 的类型的一个对象；不需要进行初始化，其
生存期按顺序晚于左右操作数的值计算并晚于赋值操作。

[begin:note]
[:en]
This ends the lifetime of the previously-active member of the union, if any
([#basic.life]).
[:zh_CN]
这将会终止这个联合体之前活跃的成员的生存期（如果有）（[#basic.life]）。
[end:note]

[begin:example]
[codeblock]
union A { int x; int y[4]; };
struct B { A a; };
union C { B b; int k; };
int f() {
  C c;                  // [:en] does not start lifetime of any union member \
                        [:zh_CN] 并未开始任何联合体成员的生存期
  c.b.a.y[3] = 4;       // [:en] OK, [$S([`c.b.a.y`[3`]])] contains [`c.b] and [`c.b.a.y]; \
                        [:zh_CN] OK，[$S([`c.b.a.y`[3`]])] 包含 [`c.b] 和 [`c.b.a.y]；
                        // [:en@~] creates objects to hold union members [`c.b] and [`c.b.a.y] \
                        [:zh_CN@~] 创建对象以持有联合体成员 [`c.b] 和 [`c.b.a.y]
  return c.b.a.y[3];    // [:en] OK, [`c.b.a.y] refers to newly created object (see [#basic.life]) \
                        [:zh_CN] OK，[`c.b.a.y] 指代新创建的对象（参见 [#basic.life]）
}

struct X { const int a; int b; };
union Y { X x; int k; };
void g() {
  Y y = { { 1, 2 } };   // [:en] OK, [`y.x] is active union member ([#class.mem]) \
                        [:zh_CN] OK，[`y.x] 是活跃的联合体成员（[#class.mem]）
  int n = y.x.a;
  y.k = 4;              // [:en] OK, ends lifetime of [`y.x], [`y.k] is active member of union \
                        [:zh_CN] OK，终止了 [`y.x] 的生存期，[`y.k] 成为联合体的活跃成员
  y.x.b = n;            // [:en] undefined behavior: [`y.x.b] modified outside its lifetime, \
                        [:zh_CN] 未定义的行为：[`y.x.b] 在其生存期之外发生改动
                        // [:en@~] [$S([`y.x.b])] is empty because [`X][=']s default constructor is deleted, \
                        [:zh_CN@~] 由于 [`X] 的默认构造函数被弃置，因而 [$S([`y.x.b])] 为空，
                        // [:en@~] so union member [`y.x][=']s lifetime does not implicitly start \
                        [:zh_CN@~] 所以联合体成员 [`y.x] 的生存期并未隐式地启动
}
[codeblock:end]
[end:example]

[para]
[begin:note]
[:en]
In cases where the above rule does not apply, the active member of a union can
only be changed by the use of a placement [~new-expression].
[:zh_CN]
在不适用上述规则的情况下，只能使用放置式[~new-表达式]来改换联合体的活跃成员。
[end:note]

[begin:example]
[:en]
Consider an object [`u] of a [`:key union] type [`U] having non-static data
members [`m] of type [`M] and [`n] of type [`N].
[:zh_CN]
考虑带有 [`M] 类型的非静态数据成员 [`m] 和 [`N] 类型的非静态数据成员 [`n] 的
[`:key union] 类型 [`U] 的某个对象 [`u]。

[:en]
If [`M] has a non-trivial destructor and [`N] has a non-trivial constructor (for
instance, if they declare or inherit virtual functions), the active member of
[`u] can be safely switched from [`m] to [`n] using the destructor and placement
[~new-expression] as follows:
[:zh_CN]
若 [`M] 带有非平凡析构函数，且 [`N] 带有非平凡构造函数（例如，当它们声明或继承了
虚函数时），则 [`u] 的活跃成员，就可以通过如下析构函数和放置式 [~new-表达式]，
安全地由 [`m] 切换为 [`n]：

[codeblock]
u.m.~M();
new (&u.n) N;
[codeblock:end]
[end:example]
