[section#class.abstract
    [:en] Abstract classes
    [:zh_CN] 抽象类
]

[para]
[begin:note]
[:en]
The abstract class mechanism supports the notion of a general concept, such as a
[`shape], of which only more concrete variants, such as [`circle] and [`square],
can actually be used.
[:zh_CN]
抽象类机制支持对类似 [`shape] 这样的一般性概念的描述，它们只有更加具体的变体，如
[`circle] 和 [`square]，才能实际使用。

[:en]
An abstract class can also be used to define an interface for which derived
classes provide a variety of implementations.
[:zh_CN]
抽象类还可用于定义接口，它的不同派生类可以为其提供不同的实现。
[end:note]

[para]
[:en]
A virtual function is specified as a [+pure virtual function[%function[!virtual
[!pure]]]] by using a [~pure-specifier] ([#class.mem]) in the function
declaration in the class definition.
[:zh_CN]
虚函数通过其在类声明式中的函数声明式中使用[~纯说明符]（[#class.mem]），而被指定
为[+纯虚函数[%函数[!虚～[!纯～]]]]。

[begin:note]
[:en]
Such a function might be inherited: see below.
[:zh_CN]
此种函数可被继承；见下文。
[end:note]

[:en]
A class is an [+:adj abstract class[%class[!abstract]]] if it has at least one
pure virtual function.
[:zh_CN]
若某个类具有至少一个纯虚函数，则它就是[+:adj 抽象类[%类[!抽象～]]]。

[begin:note]
An abstract class can be used only as a base class of some other class; no
objects of an abstract class can be created except as subobjects of a class
derived from it ([#basic.def], [#class.mem]).
[:zh_CN]
抽象类只能用作某些其他类的基类；除了作为派生自它的类的子对象外不能创建抽象类的
对象（[#basic.def]，[#class.mem]）。
[end:note]

[:en]
[%definition[!pure virtual function]]
A pure virtual function need be defined only if called with, or as if with
([#class.dtor]), the [~qualified-id] syntax ([#expr.prim.id.qual]).
[:zh_CN]
[%定义式[!纯虚函数]]
纯虚函数只有当被以[~限定标识]语法（[#expr.prim.id.qual]）进行调用，或者如同进行
这样的调用（[#class.dtor]）时才需要进行定义。

[begin:example]
[codeblock]
class point { /* ... */ };
class shape {                   // [:en] abstract class \
                                   [:zh_CN] 抽象类
  point center;
public:
  point where() { return center; }
  void move(point p) { center=p; draw(); }
  virtual void rotate(int) = 0; // [:en] pure virtual \
                                   [:zh_CN] 纯虚函数
  virtual void draw() = 0;      // [:en] pure virtual \
                                   [:zh_CN] 纯虚函数
};
[codeblock:end]
[end:example]

[begin:note]
[:en]
A function declaration cannot provide both a [~pure-specifier] and a definition
[:zh_CN]
函数声明式中不能同时提供[~纯说明符]和定义式
[end:note]

[begin:example]
[codeblock]
struct C {
  virtual void f() = 0 { };     // [:en] ill-formed \
                                   [:zh_CN] 非良构
};
[codeblock:end]
[end:example]

[para]
[:en]
[begin:note]
An abstract class type cannot be used as a parameter or return type of a
function being defined ([#dcl.fct]) or called ([#expr.call]), except as
specified in [#dcl.type.simple].
[:zh_CN]
除了 [#dcl.type.simple] 中指定的例外，抽象类不能被用作被定义（[#dcl.fct]）或调用
（[#expr.call]）的函数的形参或返回类型。

[:en]
Further, an abstract class type cannot be used as the type of an explicit type
conversion ([#expr.static.cast], [#expr.reinterpret.cast], [#expr.const.cast]),
because the resulting prvalue would be of abstract class type ([#basic.lval]).
[:zh_CN]
此外，抽象类类型不能被用作显式类型转换（[#expr.static.cast]，
[#expr.reinterpret.cast]，[#expr.const.cast]）的类型，因为其结果纯右值将会具有
抽象类类型（[#basic.lval]）。

[:en]
However, pointers and references to abstract class types can appear in such
contexts.
[:zh_CN]
否则，这些语境中可以出现指向抽象类类型的指针或引用。
[end:note]

[begin:example]
[codeblock]
shape x;                        // [:en] error: object of abstract class \
                                   [:zh_CN] 错误：抽象类的对象
shape* p;                       // OK
shape f();                      // [:en] error \
                                   [:zh_CN] 错误
void g(shape);                  // [:en] error \
                                   [:zh_CN] 错误
shape& h(shape&);               // OK
[codeblock:end]
[end:example]

[para]
[:en]
[%function[!virtual[!pure]]]
A class is abstract if it contains or inherits at least one pure virtual
function for which the final overrider is pure virtual.
[:zh_CN]
[%函数[!虚～[!纯～]]]
如果一个类包含或继承了至少一个纯虚函数，且其最终覆盖函数为纯虚函数，则它是抽象的
。

[begin:example]
[codeblock]
class ab_circle : public shape {
  int radius;
public:
  void rotate(int) { }
  // [:en] [`ab_circle::draw()] is a pure virtual \
     [:zh_CN] [`ab_circle::draw()] 是纯虚函数
};
[codeblock:end]

[:en]
Since [`shape::draw()] is a pure virtual function [`ab_circle::draw()] is a pure
virtual by default.
[:zh_CN]
由于 [`shape::draw()] 为纯虚函数，这使得 [`ab_circle::draw()] 默认为纯虚函数。

[:en]
The alternative declaration,
[:zh_CN]
而另一种声明，

[codeblock]
class circle : public shape {
  int radius;
public:
  void rotate(int) { }
  void draw();                  // [:en] a definition is required somewhere \
                                   [:zh_CN] 需要别处进行定义
};
[codeblock:end]

[:en@~]
would make class [`circle] non-abstract and a definition of [`circle::draw()]
must be provided.
[:zh_CN@~]
将使 [`circle] 成为非抽象的且必须为 [`circle::draw()] 提供定义式。
[end:example]

[para]
[begin:note]
[:en]
An abstract class can be derived from a class that is not abstract, and a pure
virtual function may override a virtual function which is not pure.
[:zh_CN]
抽象类可以派生自非抽象的类，而纯虚函数可以覆盖并不是纯的虚函数。
[end:note]

[para]
[:en]
[%class[!constructor and abstract]]
Member functions can be called from a constructor (or destructor) of an abstract
class;
[:zh_CN]
[%类[!构造函数与抽象～]]
抽象类的构造函数（或析构函数）中可以调用成员函数；

[:en]
[%virtual function call[!undefined pure]]
the effect of making a virtual call ([#class.virtual]) to a pure virtual
function directly or indirectly for the object being created (or destroyed) from
such a constructor (or destructor) is undefined.
[:zh_CN]
[%虚函数调用[!未定义的纯～]]
在这种构造函数（或析构函数）中对被创建（或销毁）的对象的纯虚函数进行直接或间接的
虚函数调用（[#class.virtual]）的效果是未定义的。
