[section#class.mfct.non-static
    [:en] Nonstatic member functions
    [:zh_CN] 非静态成员函数

[%  [:en] member function[!non-static]
    [:zh_CN] 成员函数[!非静态～] ]
]

[para]
[:en]
A non-static member function may be called for an object of its class type,
or for an object of a class derived ([#class.derived]) from its class type,
using the class member access syntax ([#expr.ref], [#over.match.call]).
[:zh_CN]
可以对类类型的对象，或者对其类的派生类类型（[#class.derived]）的对象使用类成员
访问语法（[#expr.ref]，[#over.match.call]）来调用其非静态成员函数。

[:en]
A non-static member function may also be called directly using the function call
syntax ([#expr.call], [#over.match.call]) from within the body of a member
function of its class or of a class derived from its class.
[:zh_CN]
在其类或其类的派生类的成员函数的函数体中，非静态成员函数还可以直接使用函数调用
语法（[#expr.call]，[#over.match.call]）进行调用。

[para]
[:en]
[%member function[!call undefined]]
If a non-static member function of a class [`X] is called for an object that is
not of type [`X], or of a type derived from [`X], the behavior is undefined.
[:zh_CN]
[%成员函数[!未定义的～调用]]
若对不是类型 [`X] 或派生自 [`X] 的类型的对象调用了类 [`X] 的非静态成员函数，则其
行为是未定义的。

[para]
[:en]
When an [~id-expression] ([#expr.prim.id]) that is not part of a class member
access syntax ([#expr.ref]) and not used to form a pointer to member
([#expr.unary.op]) is used in a member of class [`X] in a context where [`this]
can be used ([#expr.prim.this]), if name lookup ([#basic.lookup]) resolves the
name in the [~id-expression] to a non-static non-type member of some class [`C],
and if either the [~id-expression] is potentially evaluated or [`C] is [`X] or
a base class of [`X], the [~id-expression] is transformed into a class member
access expression ([#expr.ref]) using [`(*this)] ([#class.this]) as the
[~postfix-expression] to the left of the [`.] operator.
[:zh_CN]
当在类 [`X] 的某个成员中可以使用 [`this] 的语境之中（[#expr.prim.this]），使用了
并不是类成员访问语法（[#expr.ref]），且并不用于构成指向成员的指针
（[#expr.unary.op]）的某个[~标识表达式]（[#expr.prim.id]）时，如果名字查找
（[#basic.lookup.unqual]）将该[~标识表达式]中的名字决议为某个类 [`C] 的非静态
非类型成员，并且要么这个[~标识表达式]是潜在求值的，要么 [`C] 为 [`X] 或者 [`X]
的某个基类，则就以 [`(*this)]（[#class.this]）作为 [`.] 运算符左边的
[~后缀表达式]而把该[~标识表达式]转换为类成员访问表达式（[#expr.ref]）。

[begin:note]
[:en]
If [`C] is not [`X] or a base class of [`X], the class member access expression
is ill-formed.
[:zh_CN]
若 [`C] 既不是 [`X] 也不是 [`X] 的基类，则该类成员访问表达式是非良构的。
[end:note]

[:en]
Similarly during name lookup, when an [~unqualified-id] ([#expr.prim.id.unqual])
used in the definition of a member function for class [`X] resolves to a static
member, an enumerator or a nested type of class [`X] or of a base class of [`X],
the [~unqualified-id] is transformed into a [~qualified-id] ([#expr.prim.id.qual])
in which the [~nested-name-specifier] names the class of the member function.
[:zh_CN]
相似地，在名字查找中，当类 [`X] 的成员函数的定义式中所使用的某个[~未限定标识]
（[#expr.prim.id.unqual]）被决议为类 [`X] 或 [`X] 的基类的静态成员、枚举符或嵌套
类型时，该[~未限定标识]即被转换为一个[~限定标识]（[#expr.prim.id.qual]），其中的
[~嵌套名说明符]指名此成员函数的类。

[:en]
These transformations do not apply in the template definition context
([#temp.dep.type]).
[:zh_CN]
模板定义式（[#temp.dep.type]）的语境下并不适用这些变换。

[begin:example]
[codeblock]
struct tnode {
  char tword[20];
  int count;
  tnode* left;
  tnode* right;
  void set(const char*, tnode* l, tnode* r);
};

void tnode::set(const char* w, tnode* l, tnode* r) {
  count = strlen(w)+1;
  if (sizeof(tword)<=count)
      perror("tnode string too long");
  strcpy(tword,w);
  left = l;
  right = r;
}

void f(tnode n1, tnode n2) {
  n1.set("abc",&n2,0);
  n2.set("def",0,0);
}
[codeblock:end]

[:en]
In the body of the member function [`tnode::set], the member names [`tword],
[`count], [`left], and [`right] refer to members of the object for which the
function is called.
[:zh_CN]
在成员函数 [`tnode::set] 的函数体中，成员名 [`tword]、[`count]、[`left] 和
[`right] 指代被调用了函数的对象的成员。

[:en]
Thus, in the call [`n1.set("abc",&n2,0)], [`tword] refers to [`n1.tword], and in
the call [`n2.set("def",0,0)], it refers to [`n2.tword].
[:zh_CN]
因此，在调用 [`n1.set("abc",&n2,0)] 中，[`tword] 指代 [`n1.tword]，而在调用
[`n2.set("def",0,0)] 中，它指代 [`n2.tword]。

[:en]
The functions [`strlen], [`perror], and [`strcpy] are not members of the class
[`tnode] and should be declared elsewhere.[#:note#fn:$1]
[:zh_CN]
函数 [`strlen]、[`perror] 和 [`strcpy] 不是类 [`tnode] 的成员且应当在他处进行
声明。[#:note#fn:$1]

[note:foot#fn:$1]
[:en]
See, for example, [?libheader@ref cstring].
[:zh_CN]
参见（例如）[?libheader@ref cstring]。
[note:end]
[end:example]

[para]
[:en]
[%member function[!const]]
[%member function[!volatile]]
[%member function[!const volatile]]
A non-static member function may be declared [`const], [`volatile], or
[`const volatile].
[:zh_CN]
[%成员函数[!const]]
[%成员函数[!volatile]]
[%成员函数[!const volatile]]
非静态成员函数可被声明为 [`const]、[`volatile] 或 [`const volatile]。

[:en]
These [~cv-qualifier]s affect the type of the [`this] pointer ([#class.this]).
[:zh_CN]
这些 [~cv-限定符]影响 [`this] 指针的类型（[#class.this]）。

[:en]
They also affect the function type ([#dcl.fct]) of the member function; a member
function declared [`const] is a [+const member function], a member function
declared [`volatile] is a [+volatile member function] and a member function
declared [`const volatile] is a [+const volatile member function].
[:zh_CN]
它们还影响成员函数的函数类型（[#dcl.fct]）；被声明为 [`const] 的成员函数是
[+const 成员函数]，被声明为 [`volatile] 的成员函数是 [+volatile 成员函数]，
而被声明为 [`const volatile] 的成员函数是 [+const volatile 成员函数]。

[begin:example]
[codeblock]
struct X {
  void g() const;
  void h() const volatile;
};
[codeblock:end]

[:en]
[`X::g] is a const member function and [`X::h] is a const volatile member
function.
[:zh_CN]
[`X::g] 是 const 成员函数而 [`X::h] 是 const volatile 成员函数。
[end:example]

[para]
[:en]
A non-static member function may be declared with a [~ref-qualifier] ([#dcl.fct]);
see [#over.match.funcs].
[:zh_CN]
声明非静态成员函数时可以带有[~引用限定符]（[#dcl.fct]）；参见 [#over.match.funcs]。

[para]
[:en]
A non-static member function may be declared virtual ([#class.virtual]) or
pure virtual ([#class.abstract]).
[:zh_CN]
非静态成员函数可被声明为虚函数（[#class.virtual]）或纯虚函数（[#class.abstract]）。

[include class.this]
