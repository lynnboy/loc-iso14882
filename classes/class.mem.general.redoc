[section#class.mem.general
    [:en] General
    [:zh_CN] 概述
]

[syntax]
[rule member-specification [:zh_CN] 成员说明 ]
    [| member-declaration [~:opt member-specification] ]
    [| access-specifier [`:] [~:opt member-specification] ]
[rule:end]

[rule member-declaration [:zh_CN] 成员声明式 ]
    [| [~:opt attribute-specifier-seq] [~:opt decl-specifier-seq]
        [~:opt member-declarator-list] [`;] ]
    [| function-definition ]
    [| using-declaration ]
    [| using-enum-declaration ]
    [| static_assert-declaration ]
    [| template-declaration ]
    [| explicit-specialization ]
    [| deduction-guide ]
    [| alias-declaration ]
    [| opaque-enum-declaration ]
    [| empty-declaration ]
[rule:end]

[rule member-declarator-list [:zh_CN] 成员声明符列表 ]
    [| member-declarator ]
    [| member-declarator-list [`,] member-declarator ]
[rule:end]

[rule member-declarator [:zh_CN] 成员声明符 ]
    [| declarator [~:opt virt-specifier-seq] [~:opt pure-specifier] ]
    [| declarator requires-clause ]
    [| declarator [~:opt brace-or-equal-initializer] ]
    [| [~:opt identifier] [~:opt attribute-specifier-seq]
        [`:] constant-expression [~:opt brace-or-equal-initializer] ]
[rule:end]

[rule virt-specifier-seq [:zh_CN] 虚说明符序列 ]
    [| virt-specifier ]
    [| virt-specifier-seq virt-specifier ]
[rule:end]

[rule virt-specifier [:zh_CN] 虚说明符 ]
    [| [`:key override] ]
    [| [`:key final] ]
[rule:end]

[rule pure-specifier [:zh_CN] 纯说明符 ]
    [| [`=] [`0] ]
[rule:end]
[syntax:end]

[para]
[:en]
[%definition[!class]]
The [~member-specification] in a class definition declares the full set of
members of the class; no member can be added elsewhere.
[:zh_CN]
[%定义式[!类～]]
类定义式中的[~成员说明]声明了该类的成员的全集；无法在别处增加成员。

[:en]
A [+:adj direct[!member]] of a class [`X] is a member of [`X] that was first
declared within the [~member-specification] of [`X], including anonymous union
members ([#class.union.anon]) and direct members thereof.
[:zh_CN]
类 [`X] 的[+:adj 直接[!成员]]，是在 [`X] 的[~成员说明]中所首次声明的 [`X] 的成员，
包括匿名联合体成员（[#class.union.anon]）及其直接成员。

[:en]
Members of a class are data members, member functions ([#class.mfct]), nested
types, enumerators, and member templates ([#temp.mem]) and specializations
thereof.
[:zh_CN]
类的成员包括数据成员，成员函数（[#class.mfct]），嵌套的类型，枚举符，以及成员
模板（[#temp.mem]）及其特例。

[begin:note]
[:en]
A specialization of a static data member template is a static data member.
[:zh_CN]
静态数据成员模板的特例是静态数据成员。
[:en]
A specialization of a member function template is a member function.
[:zh_CN]
成员函数模板的特例是成员函数。
[:en]
A specialization of a member class template is a nested class.
[:zh_CN]
成员类模板的特例是嵌套类。
[end:note]

[para]
[:en]
A [~member-declaration] does not declare new members of the class if it is
[:zh_CN]
以下[~成员声明式]并不声明类的新成员：

[list]
[item]
[:en@~] a friend declaration ([#class.friend]),
[:zh_CN@~] 友元声明式（[#class.friend]），
[item]
[:en@~] a [~deduction-guide] ([#temp.deduct.guide]),
[:zh_CN@~] [~推断导引]（[#temp.deduct.guide]），
[item]
[:en@~] a [~template-declaration] whose [~declaration] is one of the above,
[:zh_CN@~] [~声明式]为以上之一的[~模板声明式]，
[item]
[:en@~] a [~static_assert-declaration],
[:zh_CN@~] [~static_assert-声明式]，
[item]
[:en@~] a [~using-declaration] ([#namespace.udecl]), or
[:zh_CN@~] [~using-声明式]（[#namespace.udecl]），或者
[item]
[:en@~] an [~empty-declaration].
[:zh_CN@~] [~空声明式]。
[list:end]

[:en]
For any other [~member-declaration], each declared entity that is not an unnamed
bit-field ([#class.bit]) is a member of the class, and each such
[~member-declaration] shall either declare at least one member name of the class
or declare at least one unnamed bit-field.
[:zh_CN]
对于任何其他的[~成员声明式]，其所声明的除了无名位字段（[#class.bit]）之外的每个
实体都是类的一个成员，并且每个这种[~成员声明式]都应当要么声明该类的至少一个成员
名，要么声明至少一个无名位字段。

[para]
[:en]
A [+data member] is a non-function member introduced by a [~member-declarator].
[:zh_CN]
[+数据成员]是由[~成员声明符]所引入的非函数成员。

[:en]
A [+member function] is a member that is a function.
[:zh_CN]
[+成员函数]是函数成员。

[:en]
Nested types are classes ([#class.name], [#class.nest]) and enumerations
([#dcl.enum]) declared in the class and arbitrary types declared as members by
use of a typedef declaration ([#dcl.typedef]) or [~alias-declaration].
[:zh_CN]
嵌套类型是在类中所声明的类（[#class.name]，[#class.nest]）和枚举（[#dcl.enum]），
以及通过使用 typedef 声明式（[#dcl.typedef]）或者[~别名声明式]声明为成员的任意
类型。

[:en]
The enumerators of an unscoped enumeration ([#dcl.enum]) defined in the class
are members of the class.
[:zh_CN]
在类中所定义的无作用域枚举（[#dcl.enum]）的枚举符也是该类的成员。

[para]
[:en]
A data member or member function may be declared [`:key static] in its
[~member-declaration], in which case it is a [+:adj static[!member]] (see
[#class.static]) (a [+:adj static[!data member]] ([#class.static.data]) or
[+:adj static[!member function]] ([#class.static.mfct]), respectively) of the
class.
[:zh_CN]
数据成员或成员函数可以在其[~成员声明式]中被声明为 [`:key static]，此时它是该类的
[+:adj 静态[!成员]]（参见 [#class.static]）（分别是其 [+:adj 静态[!数据成员]]
（[#class.static.data]）和 [+:adj 静态[!成员函数]]（[#class.static.mfct]））。

[:en]
Any other data member or member function is a [+:adj non-static[!member]]
(a [+:adj non-static[!data member]] or [+:adj non-static[!member function]]
([#class.mfct.non-static]), respectively).
[:zh_CN]
其他的任何数据成员或成员函数都是[+:adj 非静态[!成员]]（分别是
[+:adj 非静态[!数据成员]]和[+:adj 非静态[!成员函数]]（[#class.mfct.non-static]））。

[begin:note]
[:en]
A non-static data member of non-reference type is a member subobject of a class
object ([#intro.object]).
[:zh_CN]
非引用类型的非静态数据成员是类对象的成员子对象（[#intro.object]）。
[end:note]

[para]
[:en]
A member shall not be declared twice in the [~member-specification], except that
[:zh_CN]
除了以下情况外，[~成员说明]中不能对一个成员声明两次：

[list]
[item]
[:en@~] a nested class or member class template can be declared and then later
defined, and
[:zh_CN@~] 嵌套类或成员类模板可以先声明稍候再进行定义，以及

[item]
[:en@~] an enumeration can be introduced with an [~opaque-enum-declaration] and
later redeclared with an [~enum-specifier].
[:zh_CN@~] 枚举可以先由[~笼统枚举声明式]引入稍后再以[~枚举说明符]重新声明。
[list:end]

[begin:note]
[:en]
A single name can denote several function members provided their types are
sufficiently different ([#basic.scope.scope]).
[:zh_CN]
一个名字可以代表多个函数成员，只要它们的类型有足够的区别（[#basic.scope.scope]）。
[end:note]

[para]
[:en]
A redeclaration of a class member outside its class definition shall be
a definition, an explicit specialization, or an explicit instantiation
([#temp.expl.spec], [#temp.explicit]).
[:zh_CN]
类成员在其类定义式之外的重复声明式应当是定义式，显式特化式，或者显式实例化式
（[#temp.expl.spec]，[#temp.explicit]）。

[:en]
The member shall not be a non-static data member.
[:zh_CN]
该成员不能是非静态数据成员。

[para]
[:en]
[%completely defined]
A [+complete-class context] of a class (template) is a
[:zh_CN]
[%完整定义]
某个类（模板）的[+完整类语境]包括该类或类模板的[~成员说明]之中的

[list]
[item]
[:en@~] function body ([#dcl.fct.def.general]),
[:zh_CN@~] 函数体（[#dcl.fct.def.general]），
[item]
[:en@~] default argument ([#dcl.fct.default]),
[:zh_CN@~] 默认实参（[#dcl.fct.default]），
[item]
[:en@~] default template argument ([#temp.param]),
[:zh_CN@~] 默认模板实参（[#temp.param]），
[item]
[:en@~] [~noexcept-specifier] ([#except.spec]), or
[:zh_CN@~] [~noexcept-说明符]（[#except.spec]），或者
[item]
[:en@~] default member initializer
[:zh_CN@~] 默认成员初始化式
[list:end]
[:en@~] within the [~member-specification] of the class.
[:zh_CN@~] 。

[begin:note]
[:en]
A complete-class context of a nested class is also a complete-class context of
any enclosing class, if the nested class is defined within the
[~member-specification] of the enclosing class.
[:zh_CN]
如果嵌套类是在外围类的[~成员说明]之中定义的，则嵌套类的完整类语境也是其任何
外围类的完整类语境。
[end:note]

[para]
[:en]
A class [`C] is complete at a program point [$P] if the definition of [`C] is
reachable from [$P] ([#module.reach]) or if [$P] is in a complete-class context
of [`C].
[:zh_CN]
如果类 [`C] 的定义式从程序位置点 [$P] 可达（[#module.reach]），或者如果 [$P]
处于 [`C] 的完整类语境中，则类 [`C] 在 [$P] 处完整。

[:en]
Otherwise, [`C] is incomplete at [$P].
[:zh_CN]
否则，[`C] 在 [$P] 处不完整。

[para]
[:en]
In a [~member-declarator], an [`=] immediately following the [~declarator] is
interpreted as introducing a [~pure-specifier] if the [~declarator-id] has
function type, otherwise it is interpreted as introducing a
[~brace-or-equal-initializer].
[:zh_CN]
在[~成员声明符]中，如果其[~声明符标识]具有函数类型，则紧跟在其[~声明符]后面的
[`=] 被解释为引入一个[~纯说明符]，否则它就被解释为引入一个[~花括号或等号初始化式]。

[begin:example]
[codeblock]
struct S {
  using T = void();
  T * p = 0;        // [:en] OK, [~brace-or-equal-initializer] \
                    [:zh_CN] OK，[~花括号或等号初始化式]
  virtual T f = 0;  // [:en] OK, [~pure-specifier] \
                    [:zh_CN] OK，[~纯说明符]
};
[codeblock:end]
[end:example]

[para]
[:en]
In a [~member-declarator] for a bit-field, the [~constant-expression] is parsed
as the longest sequence of tokens that could syntactically form a
[~constant-expression].
[:zh_CN]
在位字段的[~成员声明符]中，其[~常量表达式]按照可以在语法上构成一个[~常量表达式]
的最长记号序列进行解析。

[begin:example]
[codeblock]
int a;
const int b = 0;
struct S {
  int x1 : 8 = 42;              // [:en] OK, [`"= 42"] is [~brace-or-equal-initializer] \
                                [:zh_CN] OK，[`"= 42"] 是[~花括号或等号初始化式]
  int x2 : 8 { 42 };            // [:en] OK, [`"{ 42 }"] is [~brace-or-equal-initializer] \
                                [:zh_CN] OK，[`"{ 42 }"] 是[~花括号或等号初始化式]
  int y1 : true ? 8 : a = 42;   // [:en] OK, [~brace-or-equal-initializer] is absent \
                                [:zh_CN] OK，没有[~花括号或等号初始化式]
  int y2 : true ? 8 : b = 42;   // [:en] error: cannot assign to [`const int] \
                                [:zh_CN] 错误：无法向 [`const int] 赋值
  int y3 : (true ? 8 : b) = 42; // [:en] OK, [`"= 42"] is [~brace-or-equal-initializer] \
                                [:zh_CN] OK，[`"= 42"] 是[~花括号或等号初始化式]
  int z : 1 || new int { 0 };   // [:en] OK, [~brace-or-equal-initializer] is absent \
                                [:zh_CN] OK，没有[~花括号或等号初始化式]
};
[codeblock:end]
[end:example]

[para]
[:en]
A [~brace-or-equal-initializer] shall appear only in the declaration of a data
member.
[:zh_CN]
[~花括号或等号初始化式]只能出现于数据成员的声明式中。

[:en]
(For static data members, see [#class.static.data]; for non-static data members,
see [#class.base.init] and [#dcl.init.aggr]).
[:zh_CN]
（对于静态数据成员，参见 [#class.static.data]；对于非静态数据成员，参见
[#class.base.init] 和 [#dcl.init.aggr]）。

[:en]
[%member[!default initializer]]
A [~brace-or-equal-initializer] for a non-static data member specifies a
[+default member initializer] for the member, and shall not directly
or indirectly cause the implicit definition of a defaulted default constructor
for the enclosing class or the exception specification of that constructor.
[:zh_CN]
[%成员[!默认～初始化式]]
非静态数据成员的[~花括号或等号初始化式]为该成员指定[+默认成员初始化式]，并且它
不能直接或间接导致对其外围类的预置的默认构造函数或者该函数的异常说明的隐式定义。

[:en]
An immediate invocation ([#expr.const]) that is a potentially-evaluated
subexpression ([#intro.execution]) of a default member initializer is neither
evaluated nor checked for whether it is a constant expression at the point where
the subexpression appears.
[:zh_CN]
作为默认成员初始化式的潜在求值子表达式（[#intro.execution]）的直接调用
（[#expr.const]），既不求值，也不检查在该子表达式出现之处其是否是常量表达式。

[para]
[:en]
A member shall not be declared with the [`:key extern] [~storage-class-specifier].
[:zh_CN]
不能用[~存储类说明符] [`:key extern] 来声明成员。

[:en]
Within a class definition, a member shall not be declared with the
[`:key thread_local] [~storage-class-specifier] unless also declared
[`:key static].
[:zh_CN]
在类定义式中，除非同时声明为 [`:key static]，否则不能用[~存储类说明符]
[`:key thread_local] 来声明成员。

[para]
[:en]
The [~decl-specifier-seq] may be omitted in constructor, destructor, and
conversion function declarations only; when declaring another kind of member the
[~decl-specifier-seq] shall contain a [~type-specifier] that is not a
[~cv-qualifier].
[:zh_CN]
只有在构造函数、析构函数以及转换函数的声明式之中才可以省略[~声明说明符序列]；当
声明其他种类的成员时，其[~声明说明符序列]应当包含一个并非 [~cv-限定符]的
[~类型说明符]。

[:en]
The [~member-declarator-list] can be omitted only after a [~class-specifier] or
an [~enum-specifier] or in a friend declaration ([#class.friend]).
[:zh_CN]
只有在[~类说明符]或[~枚举说明符]之后，或者在友元声明式（[#class.friend]）之中，
才能省略[~成员声明符列表]。

[:en]
A [~pure-specifier] shall be used only in the declaration of a virtual function
([#class.virtual]) that is not a friend declaration.
[:zh_CN]
[~纯说明符]只能用在并非友元声明式的虚函数（[#class.virtual]）的声明式中。

[para]
[:en]
The optional [~attribute-specifier-seq] in a [~member-declaration] appertains to
each of the entities declared by the [~member-declarator]s; it shall not appear
if the optional [~member-declarator-list] is omitted.
[:zh_CN]
[~成员声明式]中可选的[~属性说明符序列]属于每一个[~成员声明符]所声明的实体；当
可选的[~成员声明符列表]被省略时则不能出现它。

[para]
[:en]
A [~virt-specifier-seq] shall contain at most one of each [~virt-specifier].
[:zh_CN]
[~虚说明符序列]中，每种[~虚说明符]应当最多出现一次。

[:en]
A [~virt-specifier-seq] shall appear only in the first declaration of a virtual
member function ([#class.virtual]).
[:zh_CN]
[~虚说明符序列]只能出现于虚成员函数（[#class.virtual]）的首个声明式中。

[para]
[:en]
[%class object[!member]]
The type of a non-static data member shall not be an incomplete type
([#term.incomplete.type]), an abstract class type ([#class.abstract]), or a
(possibly multidimensional) array thereof.
[:zh_CN]
[%类对象[!成员]]
非静态数据成员的类型不能是不完整类型（[#term.incomplete.type]），抽象类类型
（[#class.abstract]），或者其（可能多维的）数组。

[begin:note]
[:en]
In particular, a class [`C] cannot contain a non-static member of class [`C],
but it can contain a pointer or reference to an object of class [`C].
[:zh_CN]
特别地，类 [`C] 中不能包含类 [`C] 的非静态成员，但它可以包含指向类 [`C] 的对象的
指针或引用。
[end:note]

[para]
[begin:note]
[:en]
See [#expr.prim.id] for restrictions on the use of non-static data members and
non-static member functions.
[:zh_CN]
对非静态数据成员和非静态成员函数的使用限制，参见 [#expr.prim.id]。
[end:note]

[para]
[begin:note]
[:en]
The type of a non-static member function is an ordinary function type, and the
type of a non-static data member is an ordinary object type.
[:zh_CN]
非静态成员函数的类型是常规的函数类型，而非静态数据成员的类型是常规的对象类型。

[:en]
There are no special member function types or data member types.
[:zh_CN]
不存在专门的成员函数类型或数据成员类型。
[end:note]

[para]
[begin:example]
[:en]
A simple example of a class definition is
[:zh_CN]
一个类定义式的简单例子为

[codeblock]
struct tnode {
  char tword[20];
  int count;
  tnode* left;
  tnode* right;
};
[codeblock:end]

[:en@~]
which contains an array of twenty characters, an integer, and two pointers to
objects of the same type.
[:zh_CN@~]
其中包含了一个二十个字符的数组，一个整数，以及两个指向相同类型的对象的指针。

[:en]
Once this definition has been given, the declaration
[:zh_CN]
一旦给定了这个定义式，声明式

[codeblock]
tnode s, *sp;
[codeblock:end]

[:en@~]
declares [`s] to be a [`tnode] and [`sp] to be a pointer to a [`tnode].
[:zh_CN@~]
即把 [`s] 声明为 [`tnode] 而把 [`sp] 声明为指向 [`tnode] 的指针。

[:en]
With these declarations, [`sp->count] refers to the [`count] member of the
object to which [`sp] points; [`s.left] refers to the [`left] subtree pointer of
the object [`s]; and [`s.right->tword`[0`]] refers to the initial character of
the [`tword] member of the [`right] subtree of [`s].
[:zh_CN]
按这些声明式，[`sp->count] 代表 [`sp] 所指向的对象的 [`count] 成员；[`s.left]
代表对象 [`s] 的 [`left] 子树指针；而 [`s.right->tword`[0`]] 代表 [`s] 的
[`right] 子树的 [`tword] 成员的初始字符。
[end:example]

[para]
[begin:note]
[:en]
[%layout[!class object]]
Non-variant non-static data members of non-zero size ([#intro.object]) are
allocated so that later members have higher addresses within a class object
([#expr.rel]).
[:zh_CN]
[%布局[!类对象]]
非零大小（[#intro.object]）的非可变非静态数据成员所进行的分配，使得在一个类对象
之中，处于后面的成员具有更高地址（[#expr.rel]）。

[:en]
Implementation alignment requirements can cause two adjacent members not to be
allocated immediately after each other; so can requirements for space for
managing virtual functions ([#class.virtual]) and virtual base classes
([#class.mi]).
[:zh_CN]
实现的对齐要求可以造成两个相邻的成员的分配并不紧紧相连；用于管理虚函数
（[#class.virtual]）和虚基类（[#class.mi]）的空间要求也能造成这样的结果。
[end:note]

[para]
[:en]
If [`T] is the name of a class, then each of the following shall
have a name different from [`T]:
[:zh_CN]
若 [`T] 为某个类的名字，则如下每个都需要一个与 [`T] 不同的名字：

[list]
[item]
[:en] every static data member of class [`T];
[:zh_CN] 类 [`T] 的每个静态数据成员；

[item]
[:en] every member function of class [`T];
[:zh_CN] 类 [`T] 的每个成员函数；

[begin:note]
[:en]
This restriction does not apply to constructors, which do not have names
([#class.ctor])
[:zh_CN]
这条限制并不适用于构造函数，它们并没有名字（[#class.ctor]）
[end:note]

[item]
[:en] every member of class [`T] that is itself a type;
[:zh_CN] 类 [`T] 的每个类型成员；

[item]
[:en] every member template of class [`T];
[:zh_CN] 类 [`T] 的每个成员模板；

[item]
[:en] every enumerator of every member of class [`T] that is an unscoped
enumeration type; and
[:zh_CN] 类 [`T] 的每个无作用域枚举类型的枚举符；以及

[item]
[:en] every member of every anonymous union that is a member of class [`T].
[:zh_CN] 类 [`T] 的每个匿名联合体成员的每个成员。
[list:end]

[para]
[:en]
In addition, if class [`T] has a user-declared constructor ([#class.ctor]),
every non-static data member of class [`T] shall have a name different from [`T].
[:zh_CN]
此外，若类 [`T] 带有用户声明的构造函数（[#class.ctor]），则类 [`T] 的每个非静态
数据成员应具有一个与 [`T] 不同的名字。

[para]
[:en]
The [+common initial sequence] of two standard-layout struct ([#class.prop])
types is the longest sequence of non-static data members and bit-fields in
declaration order, starting with the first such entity in each of the structs,
such that
[:zh_CN]
两个标准布局结构体（[#class.prop]）类型类型的[+共同起始序列]，是非静态数据成员和
位字段依照声明顺序的最长序列，开始于每个结构体中的第一个这种实体，使得
[list]
[item]
[:en@~] corresponding entities have layout-compatible types ([#basic.types]),
[:zh_CN@~] 对应的实体具有布局兼容的类型（[#basic.types]），
[item]
[:en@~] corresponding entities have the same alignment requirements
([#basic.align]),
[:zh_CN@~] 对应的实体具有相同的对齐要求（[#basic.align]），
[item]
[:en@~] if a [~has-attribute-expression] ([#cpp.cond]) is not [`0] for the
[`no_unique_address] attribute, then neither entity is declared with the
[`no_unique_address] attribute ([#dcl.attr.nouniqueaddr]), and
[:zh_CN@~] 若 [~属性查询表达式] ([#cpp.cond]) 对 [`no_unique_address] 属性不为
[`0]，则两个实体都未以 [`no_unique_address] 属性（[#dcl.attr.nouniqueaddr]）
所声明，并且
[item]
[:en@~] either both entities are bit-fields with the same width or neither is a
bit-field.
[:zh_CN@~] 要么两个实体都是具有相同宽度的位字段要么都不是位字段。
[list:end]

[begin:example]
[codeblock]
struct A { int a; char b; };
struct B { const int b1; volatile char b2; };
struct C { int c; unsigned : 0; char b; };
struct D { int d; char b : 4; };
struct E { unsigned int e; char b; };
[codeblock:end]

[:en]
The common initial sequence of [`A] and [`B] comprises all members of either
class.
[:zh_CN]
[`A] 和 [`B] 的共同起始序列由两个类的所有成员构成。

[:en]
The common initial sequence of [`A] and [`C] and of [`A] and [`D] comprises the
first member in each case.
[:zh_CN]
[`A] 和 [`C] 以及 [`A] 和 [`D] 的共同起始序列都由第一个成员构成。

[:en]
The common initial sequence of [`A] and [`E] is empty.
[:zh_CN]
[`A] 和 [`E] 的共同起始序列为空。
[end:example]

[para]
[:en]
Two standard-layout struct ([#class.prop]) types are [+layout-compatible classes
[%layout-compatible[!class]]] if their common initial sequence comprises all
members and bit-fields of both classes ([#basic.types]).
[:zh_CN]
当两个标准布局结构体（[#class.prop]）类型的共同起始序列包含两个类的所有成员和
位字段时，它们为[+布局兼容的类[%布局兼容[!～的类]]]（[#basic.types]）。

[para]
[:en]
Two standard-layout unions are layout-compatible if they have the same number of
non-static data members and corresponding non-static data members (in any order)
have layout-compatible types ([#term.layout.compatible.type]).
[:zh_CN]
当两个标准布局联合体具有相同数量的非静态数据成员，且对应的非静态数据成员（任意
顺序）均具有布局兼容的类型时，它们为布局兼容的（[#term.layout.compatible.type]）。

[para]
[:en]
In a standard-layout union with an active member ([#class.union]) of struct type
[`T1], it is permitted to read a non-static data member [`m] of another union
member of struct type [`T2] provided [`m] is part of the common initial sequence
of [`T1] and [`T2]; the behavior is as if the corresponding member of [`T1] were
nominated.
[:zh_CN]
在具有结构体类型 [`T1] 的活跃成员（[#class.union]）的标准布局联合体中，允许读取
具有结构体类型 [`T2] 的另一个联合体成员的非静态数据成员 [`m]，只要 [`m] 属于
[`T] 和 [`T2] 的共同起始序列的一部分即可；其行为如同 [`T1] 的响应成员被提名一样。

[begin:example]
[codeblock]
struct T1 { int a, b; };
struct T2 { int c; double d; };
union U { T1 t1; T2 t2; };
int f() {
  U u = { { 1, 2 } };   // [:en] active member is [`t1] \
                        [:zh_CN] 活跃成员是 [`t1]
  return u.t2.c;        // [:en] OK, as if [`u.t1.a] were nominated \
                        [:zh_CN] OK，如同提名的是 [`u.t1.a] 一样
}
[codeblock:end]
[end:example]

[begin:note]
[:en]
Reading a volatile object through a glvalue of non-volatile type has undefined
behavior ([#dcl.type.cv]).
[:zh_CN]
通过非 volatile 类型的泛左值读取 volatile 对象具有未定义行为（[#dcl.type.cv]）。
[end:note]

[para]
[:en]
If a standard-layout class object has any non-static data members, its address
is the same as the address of its first non-static data member if that member is
not a bit-fiend.
[:zh_CN]
若标准布局类对象带有任何非静态数据成员，则当其第一个非静态数据成员不是位字段时，
其地址与该成员的地址相同。

[:en]
Its address is also the same as the address of each of its base class subobjects.
[:zh_CN]
其地址同样与其任何基类子对象的地址相同。

[begin:note]
[:en]
There can therefore be unnamed padding within a standard-layout struct object
inserted by an implementation, but not at its beginning, as necessary to achieve
appropriate alignment.
[:zh_CN]
为获得适当的对齐，标准布局结构体对象之内可以存在由实现所插入的无名的填充空间，但
并不会出现于其起始处。
[end:note]

[begin:note]
[:en]
The object and its first subobject are pointer-interconvertible
([#basic.compound], [#expr.static.cast]).
[:zh_CN]
对象及其第一个子对象是指针可相互转换的（[#basic.compound]，[#expr.static.cast]）。
[end:note]
