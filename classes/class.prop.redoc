[section#class.prop
    [:en] Properties of classes
    [:zh_CN] 类的性质
]

[para]
[:en]
[%trivially copyable class[%class[!trivially copyable]]]
A [+trivially copyable class[%class[!trivially copyable]]] is a class that:
[:zh_CN]
[%可平凡复制的类[%类[!可平凡复制的]]]
[+可平凡复制的类[%类[!可平凡复制的]]]是如下的类：

[list]
[item]
[:en]
that has at least one eligible copy constructor, move constructor, copy
assignment operator, or move assignment operator ([#special], [#class.copy.ctor],
[#class.copy.assign]),
[:zh_CN]
具有至少一个合格的复制构造函数，移动构造函数，复制赋值运算符，或者移动赋值运算符
（[#special]，[#class.copy.ctor]，[#class.copy.assign]），

[item]
[:en]
where each eligible copy constructor, move constructor, copy assignment operator,
and move assignment operator is trivial, and
[:zh_CN]
其各个合格的复制构造函数，移动构造函数，复制赋值运算符，和移动赋值运算符均为
平凡的，并且

[item]
[:en]
that has a trivial, non-deleted destructor ([#class.dtor]).
[:zh_CN]
具有平凡且非弃置的析构函数（[#over.dtor]）。
[list:end]

[para]
[:en]
A [+trivial class[%class[!trivial]]][%trivial class[%class[!trivial]]] is a
class that is trivially copyable and has one or more eligible default
constructors ([#class.default.ctor]), all of which are trivial.
[:zh_CN]
[+平凡类[%类[!平凡～]]][%平凡类[%类[!平凡～]]]是可平凡复制的类，且具有一个或
更多合格的默认构造函数（[#class.default.ctor]），它们均为平凡的。

[enter:note]
[:en]
In particular, a trivially copyable or trivial class does not have virtual
functions or virtual base classes.
[:zh_CN]
尤其是，可平凡复制的或平凡类不能有虚函数或虚基类。
[exit:note]

[para]
[:en]
[%standard-layout class[%class[!standard-layout]]]
A class [`S] is a [+standard-layout class[%class[!standard-layout]]] if it:
[:zh_CN]
[%标准布局类[%类[!标准布局～]]]
如果类 [`S] 满足如下条件，则它是[+标准布局类[%类[!标准布局～]]]：

[list]
[item]
[:en] has no non-static data members of type non-standard-layout class (or
array of such types) or reference,
[:zh_CN] 没有非标准布局类（或这种类型的数组）或引用类型的非静态数据成员，

[item]
[:en] has no virtual functions ([#class.virtual]) and no virtual base classes
([#class.mi]),
[:zh_CN] 没有虚函数（[#class.virtual]），且没有虚基类（[#class.mi]），

[item]
[:en] has the same access control ([#class.access]) for all non-static data
members,
[:zh_CN] 所有非静态数据成员具有相同的访问控制（[#class.access]），

[item]
[:en] has no non-standard-layout base classes,
[:zh_CN] 没有非标准布局的基类，

[item]
[:en] has at most one base class subobject of any given type,
[:zh_CN] 最多有一个任意给定类型的基类子对象

[item]
[:en] has all non-static data members and bit-fields in the class and its base
classes first declared in the same class, and
[:zh_CN] 其类中以及任何基类中的全部非静态数据成员和位字段都首先声明与相同的类中
，以及

[item]
[:en] has no element of the set [$M([`S])] of types as a base class, where for
any type [`X], [$M([`X])] is defined as follows.[#:note#fn:$1]
[:zh_CN] 没有基类是类型集合 [$M([`S])] 的成员，其中对于类型 [`X]，[$M([`X])] 的
定义如下。[#:note#fn:$1]

[note:foot#fn:$1]
[:en]
This ensures that two subobjects that have the same class type and that belong
to the same most derived object are not allocated at the same address
([#expr.eq]).
[:zh_CN]
这保证了具有相同类型并属于相同的全派生对象的两个子对象，不会被分配到同一个地址上
（[#expr.eq]）。
[note:end]

[enter:note]
[:en]
[$M([`X])] is the set of the types of all non-base-class subobjects that may be
at a zero offset in [`X].
[:zh_CN]
[$M([`X])] 是在 [`X] 中具有零偏移量的所有非基类子对象的类型的集合。
[exit:note]

[list]
[item]
[:en]
If [`X] is a non-union class type with no (possibly inherited
([#class.derived])) non-static data members, the set [$M([`X])] is empty.
[:zh_CN]
若 [`X] 为没有（可能继承来的（[#class.derived]））非静态数据成员的非联合体类类型，
则集合 [$M([`X])] 为空。

[item]
[:en]
If [`X] is a non-union class type with a non-static data member of type
[$[`X]_0] that is either of zero size or is the first non-static data member of
[`X] (where said member may be an anonymous union), the set [$M([`X])]
consists of [$[`X]_0] and the elements of [$M([`X]_0)].
[:zh_CN]
若 [`X] 为带有一个类型为 [$[`X]_0] 的非静态数据成员的非联合体类类型，且该成员
要么大小为零要么为 [`X] 的第一个非静态数据成员的类型为 [$[`X]_0]（所述成员可能
是匿名联合体），则集合 [$M([`X])] 由 [$[`X]_0] 和 [$M([`X]_0)] 的元素所构成。

[item]
[:en]
If [`X] is a union type, the set [$M([`X])] is the union of all [$M([`U]_i)] and
the set containing all [$[`U]_i], where each [$[`U]_i] is the type of the [$i]th
non-static data member of [`X].
[:zh_CN]
若 [`X] 为联合体类型，则集合 [$M([`X])] 为所有 [$M([`U]_i)]，以及包含所有
[$[`U]_i] 的集合的并集，其中每个 [$[`U]_i] 为 [`X] 的第 [$i] 个非静态数据成员的
类型。

[item]
[:en]
If [`X] is an array type with element type [$[`X]_e], the set [$M([`X])]
consists of [$[`X]_e] and the elements of [$M([`X]_e)].
[:zh_CN]
若 [`X] 为元素类型为 [$[`X]_e] 的数组类型，则集合 [$M([`X])] 由 [$[`X]_e] 和
[$M([`X]_e)] 的元素所构成。

[item]
[:en]
If [`X] is a non-class, non-array type, the set [$M([`X])] is empty.
[:zh_CN]
若 [`X] 为非类非数组类型，则集合 [$M([`X])] 为空。
[list:end]
[list:end]

[para]
[enter:example]
[codeblock]
   struct B { int i; };         // [:en] standard-layout class
                                // [|:zh_CN] 标准布局类
   struct C : B { };            // [:en] standard-layout class
                                // [|:zh_CN] 标准布局类
   struct D : C { };            // [:en] standard-layout class
                                // [|:zh_CN] 标准布局类
   struct E : D { char : 4; };  // [:en] not a standard-layout class
                                // [|:zh_CN] 不是标准布局类

   struct Q {};
   struct S : Q { };
   struct T : Q { };
   struct U : S, T { };         // [:en] not a standard-layout class
                                // [|:zh_CN] 不是标准布局类
[codeblock:end]
[exit:example]

[para]
[:en]
A [+standard-layout struct[%struct[!standard-layout]]][%standard-layout struct
[%struct[!standard-layout]]] is a standard-layout class defined with the
[~class-key] [`struct] or the [~class-key] [`class].
[:zh_CN]
[+标准布局结构体[%结构体[!标准布局～]]][%标准布局结构体[%结构体[!标准布局～]]]是
[~类关键字] [`struct] 或者[~类关键字] [`class] 定义的标准布局类。

[:en]
A [+standard-layout union[%union[!standard-layout]]][%standard-layout union
[%union[!standard-layout]]] is a standard-layout class defined with the
[~class-key] [`union].
[:zh_CN]
[+标准布局联合体[%联合体[!标准布局～]]][%标准布局联合体[%联合体[!标准布局～]]]
是以[~类关键字] [`union] 定义的标准布局类。

[para]
[enter:note]
[:en]
Standard-layout classes are useful for communicating with code written in other
programming languages.
[:zh_CN]
标准布局类可用于与其它程序设计语言所写的代码进行通信。

[:en]
Their layout is specified in [#class.mem].
[:zh_CN]
[#class.mem] 中指定了它们的布局。
[exit:note]

[para]
[enter:example]
[codeblock]
struct N {          // [:en] neither trivial nor standard-layout
                    // [|:zh_CN] 既不是平凡的也不是标准布局的
  int i;
  int j;
  virtual ~N();
};

struct T {          // [:en] trivial but not standard-layout
                    // [|:zh_CN] 平凡的但不是标准布局的
  int i;
private: 
  int j;
};

struct SL {         // [:en] standard-layout but not trivial
                    // [|:zh_CN] 标准布局的但不是平凡的
  int i;
  int j;
  ~SL();
};

struct POD {        // [:en] both trivial and standard-layout
                    // [|:zh_CN] 既是平凡的也是标准布局的
  int i;
  int j;
};
[codeblock:end]
[exit:example]
