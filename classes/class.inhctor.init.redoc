[section#class.inhctor.init
    [:en] Initialization by inherited constructor
    [:zh_CN] 由继承的构造函数进行初始化

[%  [:en] initialization[!by inherited constructor]
    [:zh_CN] 初始化[!由继承的构造函数～] ]
]

[para]
[:en]
When a constructor for type [`B] is invoked to initialize an object of a
different type [`D] (that is, when the constructor was inherited
([#namespace.udecl])), initialization proceeds as if a defaulted default
constructor were used to initialize the [`D] object and each base class
subobject from which the constructor was inherited, except that the [`B]
subobject is initialized by the inherited constructor if the base class
subobject were to be initialized as part of the [`D] object ([#class.base.init]).
[:zh_CN]
当使用类型 [`B] 的构造函数来初始化另一个类型 [`D] 的对象时（亦即当构造函数为继承
的（[#namespace.udecl]）），所进行的初始化如同是以预置的默认构造函数来初始化这个
[`D] 对象和该构造函数从之继承的类的每个基类子对象一样，但若基类子对象要作为 [`D]
对象的一部分被初始化（[#basic.base.init]），则 [`B] 子对象则以所继承的构造函数
进行初始化。

[:en] The invocation of the inherited constructor, including the evaluation of
any arguments, is omitted if the [`B] subobject is not to be initialized
as part of the [`D] object.
[:zh_CN] 如果 [`B] 子对象并不作为 [`D] 对象的一部分被初始化，则对继承的构造函数
的调用，包括对任何实参的求值，均被省略。

[:en] The complete initialization is considered to be a single function call;
in particular, unless omitted, the initialization of the inherited
constructor[=']s parameters is sequenced before the initialization of any part
of the [`D] object.
[:zh_CN] 完整的初始化被当作是单个的函数调用；特别是，除非被省略，对继承的
构造函数的形参的初始化，按顺序早于 [`D] 对象的任何部分的初始化。

[begin:example]
[codeblock]
struct B1 {
  B1(int, ...) { }
};

struct B2 {
  B2(double) { }
};

int get();

struct D1 : B1 {
  using B1::B1;     // [:en] inherits [`B1(int, ...)] \
                    [:zh_CN] 继承了 [`B1(int, ...)]
  int x;
  int y = get();
};

void test() {
  D1 d(2, 3, 4);    // [:en] OK, [`B1] is initialized by calling [`B1(2, 3, 4)], \
                    [:zh_CN] OK，[`B1] 通过调用 [`B1(2, 3, 4)] 进行初始化，
                    // [:en@~] then [`d.x] is default-initialized (no initialization is performed), \
                    [:zh_CN@~] 然后 [`d.x] 被默认初始化（并未实施初始化操作），
                    // [:en@~] then [`d.y] is initialized by calling [`get()] \
                    [:zh_CN@~] 然后 [`d.y] 通过调用 [`get()] 进行初始化
  D1 e;             // [:en] error: [`D1] has no default constructor \
                    [:zh_CN] 错误：[`D1] 没有默认构造函数
}

struct D2 : B2 {
  using B2::B2;
  B1 b;
};

D2 f(1.0);          // [:en] error: [`B1] has no default constructor \
                    [:zh_CN] 错误：[`B1] 没有默认构造函数

struct W { W(int); };
struct X : virtual W { using W::W; X() = delete; };
struct Y : X { using X::X; };
struct Z : Y, virtual W { using Y::Y; };
Z z(0);             // [:en] OK, initialization of [`Y] does not invoke default constructor of [`X] \
                    [:zh_CN] OK，[`Y] 的初始化并不会调用 [`X] 的默认构造函数

template<class T> struct Log : T {
  using T::T;       // [:en] inherits all constructors from class [`T] \
                    [:zh_CN] 从 [`T] 继承其全部构造函数
  ~Log() { std::clog << "Destroying wrapper" << std::endl; }
};
[codeblock:end]

[:en]
Class template [`Log] wraps any class and forwards all of its constructors,
while writing a message to the standard log whenever an object of class [`Log]
is destroyed.
[:zh_CN]
类模板 [`Log] 包装任意类型并转发其所有构造函数，而一旦有 [`Log] 类的对象销毁时，
就会向标准日志写入一条消息。
[end:example]

[para:~]
[begin:example]
[codeblock]
struct V { V() = default; V(int); };
struct Q { Q(); };
struct A : virtual V, Q {
  using V::V;
  A() = delete;
};
int bar() { return 42; }
struct B : A {
  B() : A(bar()) {} // OK
};
struct C : B {};
void foo() { C c; } // [:en] [`bar] is not invoked, because the [`V] subobject is not initialized as part of [`B] \
                    [:zh_CN] 未调用 [`bar]，因为 [`V] 子对象并未作为 [`B] 的一部分初始化
[codeblock:end]
[end:example]

[para]
[:en]
If the constructor was inherited from multiple base class subobjects of type
[`B], the program is ill-formed.
[:zh_CN]
如果一个构造函数继承于多个 [`B] 类型的基类子对象，则程序非良构。

[begin:example]
[codeblock]
struct A { A(int); };
struct B : A { using A::A; };

struct C1 : B { using B::B; };
struct C2 : B { using B::B; };

struct D1 : C1, C2 {
  using C1::C1;
  using C2::C2;
};

struct V1 : virtual B { using B::B; };
struct V2 : virtual B { using B::B; };

struct D2 : V1, V2 {
  using V1::V1;
  using V2::V2;
};

D1 d1(0);           // [:en] error: ambiguous \
                    [:zh_CN] 错误：歧义
D2 d2(0);           // [:en] OK, initializes virtual [`B] base class, which initializes the [`A] base class \
                    [:zh_CN] OK，初始化了虚的 [`B] 基类，它初始化了其 [`A] 基类
                    // [:en@~] then initializes the [`V1] and [`V2] base classes as if by a defaulted default constructor \
                    [:zh_CN@~] 然后如同通过预置默认构造函数对 [`V1] 和 [`V2] 进行了初始化

struct M { M(); M(int); };
struct N : M { using M::M; };
struct O : M {};
struct P : N, O { using N::N; using O::O; };
P p(0);             // [:en] OK, use [`M(0)] to initialize [`N][=']s base class, \
                    [:zh_CN] OK，使用 [`M(0)] 初始化 [`N] 的基类，
                    // [:en@~] use [`M()] to initialize [`O][=']s base class \
                    [:zh_CN@~] 使用 [`M()] 初始化了 [`O] 的基类
[codeblock:end]
[end:example]

[para]
[:en]
When an object is initialized by an inherited constructor, initialization of the
object is complete when the initialization of all subobjects is complete.
[:zh_CN]
当以继承的构造函数初始化对象时，该对象的初始化在其所有子对象的初始化完成时完成。
