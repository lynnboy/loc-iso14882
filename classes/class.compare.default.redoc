[section#class.compare.default
    [:en] Defaulted comparison operator functions
    [:zh_CN] 预置比较运算符函数
]

[para]
[:en]
A defaulted comparison operator function ([#over.binary]) for some class [`C]
shall be a non-template function declared in the [~member-specification] of [`C]
that is
[:zh_CN]
对于类 [`C] 预置的比较运算符函数（[#over.binary]）应当是在 [`C] 的[~成员说明]中
所声明的非模板函数，为

[list]
[item]
[:en] a non-static const member of [`C] having one parameter of type [`const C&], or
[:zh_CN] 带有一个 [`const C&] 类型的形参的 [`C] 的非静态 const 成员，或者为
[item]
[:en] a friend of [`C] having either two parameters of type [`const C&] or two
parameters of type [`C].
[:zh_CN] 带有两个 [`const C&] 类型的形参或两个 [`C] 类型的形参的 [`C] 的友元。
[list:end]

[para]
[:en]
A defaulted comparison operator function for class [`C] is defined as deleted if
any non-static data member of [`C] is of reference type or [`C] is a union-like
class ([#class.union.anon]).
[:zh_CN]
为类 [`C] 预置的比较运算符函数，当 [`C] 的任何非静态数据成员具有引用类型，或 [`C]
是类似联合的类时，被定义为弃置的。

[para]
[:en]
If the class definition does not explicitly declare an [`==] operator function,
but declares a defaulted three-way comparison operator function, an [`==]
operator function is declared implicitly with the same access as the three-way
comparison operator function.
[:zh_CN]
如果类定义式中并未显式声明 [`==] 运算符函数，但声明了预置的三路比较运算符函数，
则隐式声明一个与该三路比较运算符函数具有相同访问的 [`==] 运算符函数。

[:en]
The implicitly-declared [`==] operator for a class [`X] is an inline member and
is defined as defaulted in the definition of [`X].
[:zh_CN]
为类 [`X] 所隐式声明的 [`==] 运算符是内联成员，并且在 [`X] 的定义式中定义为预置
的。

[:en]
If the three-way comparison operator function is declared as a non-static const
member, the implicitly-declared [`==] operator function is a member of the form
[:zh_CN]
如果三路比较运算符函数被声明为非静态 const 成员，则所隐式声明的 [`==] 运算符函数
是以下形式的成员：

[codeblock]
bool X::operator==(const X&) const;
[codeblock:end]

[:en]
Otherwise, the implicitly-declared [`==] operator function is of the form
[:zh_CN]
否则，所隐式声明的 [`==] 运算符函数的形式为：

[codeblock]
friend bool operator==(const X&, const X&);
[codeblock:end]

[begin:note]
[:en]
Such a friend function is visible to argument-dependent lookup
([#basic.lookup.argdep]) only ([#namespace.memdef]).
[:zh_CN]
这样的友元函数仅对依赖于实参的查找（[#basic.lookup.argdep]）可见
（[#namespace.memdef]）。
[end:note]

[:en]
The operator is a [`constexpr] function if its definition would satisfy the
requirements for a [`constexpr] function.
[:zh_CN]
如果该运算符的定义式能够满足对 [`constexpr] 函数的规定，则它是 [`constexpr] 函数。

[begin:note]
[:en]
The [`==] operator function is declared implicitly even if the defaulted
three-way comparison operator function is defined as deleted.
[:zh_CN]
即便预置的三路比较运算符函数被定义为弃置的，也会隐式声明 [`==] 运算符函数。
[end:note]

[para]
[:en]
The direct base class subobjects of [`C], in the order of their declaration in
the [~base-specifier-list] of [`C], followed by the non-static data members of
[`C], in the order of their declaration in the [~member-specification] of [`C],
form a list of subobjects.
[:zh_CN]
[`C] 的各直接基类子对象，以它们在 [`C] 的[~基说明符列表]中的声明顺序，跟着 [`C]
的各非静态数据成员，以它们在 [`C] 的[~成员说明]中的声明顺序，构成一个子对象列表。

[:en]
In that list, any subobject of array type is recursively expanded to the
sequence of its elements, in the order of increasing subscript.
[:zh_CN]
这个列表中，递归地将任何数组类型的子对象以其下标递增顺序展开为其元素的序列。

[:en]
Let [$[`x]_i] be an lvalue denoting the [$i^\text{th}] element in the expanded
list of subobjects for an object [`x] (of length [$n]), where [$[`x]_i] is
formed by a sequence of derived-to-base conversions ([#over.best.ics]), class
member access expressions ([#expr.ref]), and array subscript expressions
([#expr.sub]) applied to [`x].
[:zh_CN]
令 [$[`x]_i] 为代表对象 [`x] 的展开后的子对象列表（长度为 [$n]）中的第 [$i] 个
元素的左值，其中 [$[`x]_i] 由对 [`x] 实施一系列的派生类向基类转换
（[#over.best.ics]）、类成员访问表达式（[#expr.ref]）和数组下标表达式
（[#expr.sub]）所构成。

[:en]
It is unspecified whether virtual base class subobjects appear more than once in
the expanded list of subobjects.
[:zh_CN]
虚基类子对象是否会在子对象的展开列表中多次出现是未指明的。
