[section:annex@informative#implimits
    [:en] Implementation quantities
    [:zh_CN] 实现限额
]

[para]
[:en] Implementations can exhibit limitations for various quantities;
some possibilities are presented in the following list.
[:zh_CN] 实现可以展现出各种数量限制；以下列表给出了一些可能性。

[:en] The bracketed number following each quantity is a potential minimum value
for that quantity.
[:zh_CN] 每条数量之后方括号中的数值是这种数量潜在的最小值。

[list]
[item]
[:en] Nesting levels of compound statements ([#stmt.block]), iteration control
structures ([#stmt.iter]), and selection control structures ([#stmt.select])
`[256`].
[:zh_CN] 复合语句（[#stmt.block]）、循环控制结构（[#stmt.iter]）和选择控制结构
（[#stmt.select]）的嵌套层数 `[256`]。
[item]
[:en] Nesting levels of conditional inclusion ([#cpp.cond]) `[256`].
[:zh_CN] 条件包含（[#cpp.cond]）的嵌套层数 `[256`]。
[item]
[:en] Pointer ([#dcl.ptr]), pointer-to-member ([#dcl.mptr]), array ([#dcl.array]),
and function ([#dcl.fct]) declarators (in any combination) modifying a class,
arithmetic, or incomplete type in a declaration `[256`].
[:zh_CN] 在声明式中修饰某个类、算术或不完整类型的指针（[#dcl.ptr]）、成员指针
（[#dcl.mptr]）、数组（[#dcl.array]）和函数（[#dcl.fct]）声明符（以任意组合） `[256`]。
[item]
[:en] Nesting levels of parenthesized expressions ([#expr.prim.paren]) within a
full-expression `[256`].
[:zh_CN] 全表达式中的括号表达式（[#expr.prim.paren]）的嵌套层数 `[256`]。
[item]
[:en] Number of characters in an internal identifier ([#lex.name]) or macro name
 ([#cpp.replace]) `[1[=,]024`].
[:zh_CN] 内部标识符（[#lex.name]）或宏名（[#cpp.replace]）中的字符数 `[1[=,]024`]。
[item]
[:en] Number of characters in an external identifier ([#lex.name], [#basic.link])
`[1[=,]024`].
[:zh_CN] 外部标识符（[#lex.name]，[#basic.link]）中的字符数 `[1[=,]024`]。
[item]
[:en] External identifiers ([#basic.link]) in one translation unit `[65[=,]536`].
[:zh_CN] 一个翻译单元中的外部标识符（[#basic.link]）数 `[65[=,]536`]。
[item]
[:en] Identifiers with block scope declared in one block ([#basic.scope.block])
`[1[=,]024`].
[:zh_CN] 一个块（[#basic.scope.block]）中所声明的块作用域标识符 `[1[=,]024`]。
[item]
[:en] Structured bindings ([#dcl.struct.bind]) introduced in one declaration
`[256`].
[:zh_CN] 一个声明式中引入的结构化绑定（[#dcl.struct.bind]）数 `[256`]。
[item]
[:en] Macro identifiers ([#cpp.replace]) simultaneously defined in one
translation unit `[65[=,]536`].
[:zh_CN] 一个翻译单元中同时定义的宏标识符（[#cpp.replace]） `[65[=,]536`]。
[item]
[:en] Parameters in one function definition ([#dcl.fct.def.general]) `[256`].
[:zh_CN] 一个函数定义中的形参（[#dcl.fct.def.general]） `[256`]。
[item]
[:en] Arguments in one function call ([#expr.call]) `[256`].
[:zh_CN] 一个函数调用中的实参（[#expr.call]） `[256`]。
[item]
[:en] Parameters in one macro definition ([#cpp.replace]) `[256`].
[:zh_CN] 一个宏定义中的形参（[#cpp.replace]） `[256`]。
[item]
[:en] Arguments in one macro invocation ([#cpp.replace]) `[256`].
[:zh_CN] 一个宏调用中的实参（[#cpp.replace]） `[256`]。
[item]
[:en] Characters in one logical source line ([#lex.phases]) `[65[=,]536`].
[:zh_CN] 一个逻辑代码行（[#lex.phases]）中的字符数 `[65[=,]536`]。
[item]
[:en] Characters in a [~string-literal] ([#lex.string]) (after concatenation
([#lex.phases])) `[65[=,]536`].
[:zh_CN] 一个[~字符串字面量]（[#lex.string]）（经过拼接（[#lex.phases]）之后）的
字符数 `[65[=,]536`]。
[item]
[:en] Size of an object ([#intro.object]) `[262[=,]144`].
[:zh_CN] 对象的大小（[#intro.object]） `[262[=,]144`]。
[item]
[:en] Nesting levels for [`#include] files ([#cpp.include]) `[256`].
[:zh_CN] [`#include] 文件（[#cpp.include]）的嵌套层数 `[256`]。
[item]
[:en] Case labels for a [`:key switch] statement ([#stmt.switch]) (excluding
those for any nested [`:key switch] statements) `[16[=,]384`].
[:zh_CN] 一个 [`:key switch] 语句（[#stmt.switch]）中的 [`case] 标签数（排除嵌套
的 [`:key switch] 语句） `[16[=,]384`]。
[item]
[:en] Non-static data members (including inherited ones) in a single class
([#class.mem]) `[16[=,]384`].
[:zh_CN] 一个类中的非静态数据成员（包括继承来的）（[#class.mem]） `[16[=,]386`]。
[item]
[:en] Lambda-captures in one [~lambda-expression] ([#expr.prim.lambda.capture])
`[256`].
[:zh_CN] 一个 [~lambda-表达式] 中的 lambda-俘获数（[#expr.prim.lambda.capture]）
`[256`]。
[item]
[:en] Enumeration constants in a single enumeration ([#dcl.enum]) `[4[=,]096`].
[:zh_CN] 一个枚举中的枚举常量（[#dcl.enum]） `[4[=,]096`]。
[item]
[:en] Levels of nested class definitions ([#class.nest]) in a single
[~member-specification] `[256`].
[:zh_CN] 一个[~成员说明]中的嵌套类定义层数（[#class.nest]） `[256`]。
[item]
[:en] Functions registered by [`atexit()] ([#support.start.term]) `[32`].
[:zh_CN] 由 [`atexit()] 所注册的函数（[#support.start.term]） `[32`]。
[item]
[:en] Functions registered by [`at_quick_exit()] ([#support.start.term]) `[32`].
[:zh_CN] 由 [`at_quick_exit()] 所注册的函数（[#support.start.term]） `[32`]。
[item]
[:en] Direct and indirect base classes ([#class.derived]) `[16[=,]384`].
[:zh_CN] 直接和间接基类（[#class.derived]） `[16[=,]384`]。
[item]
[:en] Direct base classes for a single class ([#class.derived]) `[1[=,]024`].
[:zh_CN] 一个类的直接基类（[#class.derived]） `[1[=,]024`]。
[item]
[:en] Class members declared in a single [~member-specification] (including
member functions) ([#class.mem]) `[4[=,]096`].
[:zh_CN] 一个[~成员说明]中声明的成员（包括成员函数）（[#class.mem]） `[4[=,]096`]。
[item]
[:en] Final overriding virtual functions in a class, accessible or not
([#class.virtual]) `[16[=,]384`].
[:zh_CN] 一个类中的最终覆盖虚函数，无论是否可访问（[#class.virtual]）
`[16[=,]384`]。
[item]
[:en] Direct and indirect virtual bases of a class ([#class.mi]) `[1[=,]024`].
[:zh_CN] 一个类的直接和间接虚基类（[#class.mi]） `[1[=,]024`]。
[item]
[:en] Static data members of a class ([#class.static.data]) `[1[=,]024`].
[:zh_CN] 一个类的静态数据成员（[#class.static.data]） `[1[=,]024`]。
[item]
[:en] Friend declarations in a class ([#class.friend]) `[4[=,]096`].
[:zh_CN] 一个类中的友元声明（[#class.friend]） `[4[=,]096`]。
[item]
[:en] Access control declarations in a class ([#class.access.spec]) `[4[=,]096`].
[:zh_CN] 一个类中的访问控制声明（[#class.access.spec]） `[4[=,]096`]。
[item]
[:en] Member initializers in a constructor definition ([#class.base.init])
`[6[=,]144`].
[:zh_CN] 一个构造函数定义中的成员初始化式（[#class.base.init]） `[6[=,]144`]。
[item]
[:en] [~initializer-clause]s in one [~braced-init-list] ([#dcl.init])
`[16[=,]384`].
[:zh_CN] 一个[~花括号初始化列表]中的[~初始化式子句]（[#dcl.init]） `[16[=,]384`]。
[item]
[:en] Scope qualifications of one identifier ([#expr.prim.id.qual]) `[256`].
[:zh_CN] 一个标识符上的作用域限定（[#expr.prim.id.qual]） `[256`]。
[item]
[:en] Nested [~linkage-specification]s ([#dcl.link]) `[1[=,]024`].
[:zh_CN] 嵌套的[~连接说明]（[#dcl.link]） `[1[=,]024`]。
[item]
[:en] Recursive constexpr function invocations ([#dcl.constexpr]) `[512`].
[:zh_CN] 递归的 constexpr 函数调用（[#dcl.constexpr]） `[512`]。
[item]
[:en] Full-expressions evaluated within a core constant expression ([#expr.const])
`[1[=,]048[=,]576`].
[:zh_CN] 在一个核心常量表达式中求值的全表达式（[#expr.const]） `[1[=,]048[=,]576`]。
[item]
[:en] Template parameters in a template declaration ([#temp.param]) `[1[=,]024`].
[:zh_CN] 一个模板声明中的模板形参（[#temp.param]） `[1[=,]024`]。
[item]
[:en] Recursively nested template instantiations ([#temp.inst]), including
substitution during template argument deduction ([#temp.deduct]) `[1[=,]024`].
[:zh_CN] 递归嵌套模板实例化（[#temp.inst]），包括在模板实参推断中的代换
（[#temp.deduct]） `[1[=,]024`]。
[item]
[:en] Handlers per try block ([#except.handle]) `[256`].
[:zh_CN] 每个 [`try] 块的处理器数（[#except.handle]） `[256`]。
[item]
[:en] Number of placeholders ([#func.bind.place]) `[10`].
[:zh_CN] 占位符的数量（[#func.bind.place]）`[10`]。
[item]
[:en] Number of hazard-protectable possibly-reclaimable objects
([#saferecl.hp.general]) `[256`].
[:zh_CN] 可涉险保护的可能可回收对象的数量（[#saferecl.hp.general]）`[256`]。
[list:end]
