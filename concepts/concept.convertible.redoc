[section#concept.convertible
    [:en] Concept [`:cname convertible_to]
    [:zh_CN] 概念 [`:cname convertible_to]
]

[para]
[:en] Given types [`From] and [`To] and an expression [`E] whose type and value
category are the same as those of [`declval<From>()],
[`[`:c convertible_to]<From, To>] requires [`E] to be both implicitly and
explicitly convertible to type [`To].
[:zh_CN] 给定类型 [`From] 和 [`To] 以及表达式 [`E] 使得其类型和值类别与
[`declval<From>()] 的相同，[`[`:c convertible_to]<From, To>] 要求 [`E] 既可隐式
也可显式转换为类型 [`To]。

[:en] The implicit and explicit conversions are required to produce equal
results.
[:zh_CN] 要求隐式和显式的转换产生相等的结果。

[codeblock:declaration]
template<class From, class To>
  concept [[redoc("`:c@def>")]]convertible_to =
    is_convertible_v<From, To> &&
    requires(add_rvalue_reference_t<From> (&f)()) {
      static_cast<To>(f());
    };
[codeblock:end]

[div:description]
[para]
[:en] Let [`FromR] be [`add_rvalue_reference_t<From>] and [`test] be the
invented function:
[:zh_CN] 令 [`FromR] 为 [`add_rvalue_reference_t<From>]，[`test] 为某个虚构函数：

[codeblock]
To test(FromR (&f)()) {
  return f();
}
[codeblock:end]

[:en@~] and let [`f] be a function with no arguments and return type [`FromR]
such that [`f()] is equality-preserving.
[:zh_CN@~] 并令 [`f] 为不接受实参且返回类型为 [`FromR] 的函数，并使得 [`f()]
维持相等性。

[:en] Types [`From] and [`To] model [`[`:c convertible_to]<From, To>] only if:
[:zh_CN] 仅当符合以下条件时，类型 [`From] 和 [`To] 构成
[`[`:c convertible_to]<From, To>]：

[list]
[item]
[:en] [`To] is not an object or reference-to-object type, or
[`static_cast<To>(f())] is equal to [`test(f)].
[:zh_CN] [`To] 并非对象或对象引用类型，或者 [`static_cast<To>(f())] 等于
[`test(f)]。

[item]
[:en] [`FromR] is not a reference-to-object type, or
[:zh_CN] [`FromR] 并非对象引用类型，或者

[list]
[item]
[:en] If [`FromR] is an rvalue reference to a non const-qualified type, the
resulting state of the object referenced by [`f()] after either above
expression is valid but unspecified ([#lib.types.movedfrom]).
[:zh_CN] 如果 [`FromR] 是到非 const 限定的类型的右值引用，则经过以上任何表达式
之后 [`f()] 所指代的对象的结果状态，是有效但未指明的（[#lib.types.movedfrom]）。

[item]
[:en] Otherwise, the object referred to by [`f()] is not modified by either
above expression.
[:zh_CN] 否则，以上任何表达式都不改动 [`f()] 所指代的对象。
[list:end]
[list:end]
[div:end]
