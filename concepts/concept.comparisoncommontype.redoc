[section#concept.comparisoncommontype
    [:en] Comparison common types
    [:zh_CN] 比较公共类型
]

[codeblock:declaration]
template<class T, class U, class C = common_reference_t<const T&, const U&>>
  concept [[redoc("*:c@def>")]]comparison-common-type-with-impl =   // [=expos]
    [[redoc("`:c>")]]same_as<common_reference_t<const T&, const U&>,
            common_reference_t<const U&, const T&>> &&
    requires {
      requires [[redoc("`:c>")]]convertible_to<const T&, const C&> || [[redoc("`:c>")]]convertible_to<T, const C&>;
      requires [[redoc("`:c>")]]convertible_to<const U&, const C&> || [[redoc("`:c>")]]convertible_to<U, const C&>;
    };

template<class T, class U>
  concept [[redoc("*:c@def>")]]comparison-common-type-with =   // [=expos]
    [[redoc("*:c>")]]comparison-common-type-with-impl<remove_cvref_t<T>, remove_cvref_t<U>>;
[codeblock:end]

[div:description]
[para]
[:en] Let [`C] be [`common_reference_t<const T&, const U&>].
[:zh_CN] 令 [`C] 为 [`common_reference_t<const T&, const U&>]。

[:en] Let [`t1] and [`t2] be equality-preserving expressions that are lvalues of
type [`remove_cvref_t<T>], and let [`u1] and [`u2] be equality-preserving
expressions that are lvalues of type [`remove_cvref_t<U>].
[:zh_CN] 令 [`t1] 和 [`t2] 为维持相等性表达式且为 [`remove_cvref_t<T>] 类型的左值，
并令 [`u1] 和 [`u2] 为维持相等性表达式且为 [`remove_cvref_t<U>] 类型的左值。

[:en] [`T] and [`U] model [`[^comparison-common-type-with]<T, U>] only if:
[:zh_CN] 仅当符合以下条件时，[`T] 和 [`U] 构成
[`[^comparison-common-type-with]<T, U>]：

[list]
[item]
[:en] [`[*CONVERT_TO_LVALUE]<C>(t1)] equals [`[*CONVERT_TO_LVALUE]<C>(t2)]
if and only if [`t1] equals [`t2], and
[:zh_CN] 当且仅当 [`t1] 等于 [`t2] 时 [`[*CONVERT_TO_LVALUE]<C>(t1)] 等于
[`[*CONVERT_TO_LVALUE]<C>(t2)]，并且
[item]
[:en] [`[*CONVERT_TO_LVALUE]<C>(u1)] equals [`[*CONVERT_TO_LVALUE]<C>(u2)]
if and only if [`u1] equals [`u2].
[:zh_CN] 当且仅当 [`u1] 等于 [`u2] 时 [`[*CONVERT_TO_LVALUE]<C>(u1)] 等于
[`[*CONVERT_TO_LVALUE]<C>(u2)]。
[list:end]
[div:end]
