[section#concepts.syn
    [:en] Header [`<concepts>] synopsis
    [:zh_CN] 头文件 [`<concepts>] 纲要
]

[%@hdr@def concepts]
[codeblock:synopsis [!:mark SeeBelow UnSpec] ]
namespace std {
  // [:en] [#concepts.lang], language-related concepts \
     [:zh_CN] [#concepts.lang]，语言相关概念
  // [:en] [#concept.same], concept [`same_as] \
     [:zh_CN] [#concept.same]，概念 [`same_as]
  template<class T, class U>
    concept same_as = [=SeeBelow];

  // [:en] [#concept.derived], concept [`derived_from] \
     [:zh_CN] [#concept.derived]，概念 [`derived_from]
  template<class Derived, class Base>
    concept derived_from = [=SeeBelow];

  // [:en] [#concept.convertible], concept [`convertible_to] \
     [:zh_CN] [#concept.convertible]，概念 [`convertible_to]
  template<class From, class To>
    concept convertible_to = [=SeeBelow];

  // [:en] [#concept.commonref], concept [`common_reference_with] \
     [:zh_CN] [#concept.commonref]，概念 [`common_reference_with]
  template<class T, class U>
    concept common_reference_with = [=SeeBelow];

  // [:en] [#concept.common], concept [`common_with] \
     [:zh_CN] [#concept.common]，概念 [`common_with]
  template<class T, class U>
    concept common_with = [=SeeBelow];

  // [:en] [#concepts.arithmetic], arithmetic concepts \
     [:zh_CN] [#concept.arithmetic]，算术概念
  template<class T>
    concept integral = [=SeeBelow];
  template<class T>
    concept signed_integral = [=SeeBelow];
  template<class T>
    concept unsigned_integral = [=SeeBelow];
  template<class T>
    concept floating_point = [=SeeBelow];

  // [:en] [#concept.assignable], concept [`assignable_from] \
     [:zh_CN] [#concept.assignable]，概念 [`assignable_from]
  template<class LHS, class RHS>
    concept assignable_from = [=SeeBelow];

  // [:en] [#concept.swappable], concept [`swappable] \
     [:zh_CN] [#concept.swappable]，概念 [`swappable]
  namespace ranges {
    inline namespace [=UnSpec] {
      inline constexpr [=UnSpec] swap = [=UnSpec];
    }
  }
  template<class T>
    concept swappable = [=SeeBelow];
  template<class T, class U>
    concept swappable_with = [=SeeBelow];

  // [:en] [#concept.destructible], concept [`destructible] \
     [:zh_CN] [#concept.destructible]，概念 [`destructible]
  template<class T>
    concept destructible = [=SeeBelow];

  // [:en] [#concept.constructible], concept [`constructible_from] \
     [:zh_CN] [#concept.constructible]，概念 [`constructible_from]
  template<class T, class... Args>
    concept constructible_from = [=SeeBelow];

  // [:en] [#concept.defaultconstructible], concept [`default_constructible] \
     [:zh_CN] [#concept.defaultconstructible]，概念 [`default_constructible]
  template<class T>
    concept default_constructible = [=SeeBelow];

  // [:en] [#concept.moveconstructible], concept [`move_constructible] \
     [:zh_CN] [#concept.moveconstructible]，概念 [`move_constructible]
  template<class T>
    concept move_constructible = [=SeeBelow];

  // [:en] [#concept.copyconstructible], concept [`copy_constructible] \
     [:zh_CN] [#concept.copyconstructible]，概念 [`copy_constructible]
  template<class T>
    concept copy_constructible = [=SeeBelow];

  // [:en] [#concepts.compare], comparison concepts \
     [:zh_CN] [#concept.compare]，比较概念
  // [:en] [#concept.boolean], concept [`boolean] \
     [:zh_CN] [#concept.boolean]，概念 [`boolean]
  template<class B>
    concept boolean = [=SeeBelow];

  // [:en] [#concept.equalitycomparable], concept [`equality_comparable] \
     [:zh_CN] [#concept.equalitycomparable]，概念 [`equality_comparable]
  template<class T>
    concept equality_comparable = [=SeeBelow];
  template<class T, class U>
    concept equality_comparable_with = [=SeeBelow];

  // [:en] [#concept.totallyordered], concept [`totally_ordered] \
     [:zh_CN] [#concept.totallyordered]，概念 [`totally_ordered]
  template<class T>
    concept totally_ordered = [=SeeBelow];
  template<class T, class U>
    concept totally_ordered_with = [=SeeBelow];

  // [:en] [#concepts.object], object concepts \
     [:zh_CN] [#concept.object]，对象概念
  template<class T>
    concept movable = [=SeeBelow];

  template<class T>
    concept copyable = [=SeeBelow];

  template<class T>
    concept semiregular = [=SeeBelow];

  template<class T>
    concept regular = [=SeeBelow];

  // [:en] [#concepts.callable], callable concepts \
     [:zh_CN] [#concept.callable]，可调用概念
  // [:en] [#concept.invocable], concept [`invocable] \
     [:zh_CN] [#concept.invocable]，概念 [`invocable]
  template<class F, class... Args>
    concept invocable = [=SeeBelow];

  // [:en] [#concept.regularinvocable], concept [`regular_invocable] \
     [:zh_CN] [#concept.regularinvocable]，概念 [`regular_invocable]
  template<class F, class... Args>
    concept regular_invocable = [=SeeBelow];

  // [:en] [#concept.predicate], concept [`predicate] \
     [:zh_CN] [#concept.predicate]，概念 [`predicate]
  template<class F, class... Args>
    concept predicate = [=SeeBelow];

  // [:en] [#concept.relation], concept [`relation] \
     [:zh_CN] [#concept.relation]，概念 [`relation]
  template<class R, class T, class U>
    concept relation = [=SeeBelow];

  // [:en] [#concept.strictweakorder], concept [`strict_weak_order] \
     [:zh_CN] [#concept.strictweakorder]，概念 [`strict_weak_order]
  template<class R, class T, class U>
    concept strict_weak_order = [=SeeBelow];
}
[codeblock:end]
