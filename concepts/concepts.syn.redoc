[section#concepts.syn
    [:en] Header [`<concepts>] synopsis
    [:zh_CN] 头文件 [`<concepts>] 纲要
]

[%@header concepts]
[codeblock:synopsis [!:mark SeeBelow] ]
namespace std {
  // [:en] [#concepts.lang], language-related concepts
  // [|:zh_CN] [#concepts.lang]，语言相关概念
  // [:en] [#concept.same], concept [`Same]
  // [|:zh_CN] [#concept.same]，概念 [`Same]
  template<class T, class U>
    concept Same = [=SeeBelow];

  // [:en] [#concept.derivedfrom], concept [`DerivedFrom]
  // [|:zh_CN] [#concept.derivedfrom]，概念 [`DerivedFrom]
  template<class Derived, class Base>
    concept DerivedFrom = [=SeeBelow];

  // [:en] [#concept.convertibleto], concept [`ConvertibleTo]
  // [|:zh_CN] [#concept.convertibleto]，概念 [`ConvertibleTo]
  template<class From, class To>
    concept ConvertibleTo = [=SeeBelow];

  // [:en] [#concept.commonref], concept [`CommonReference]
  // [|:zh_CN] [#concept.commonref]，概念 [`CommonReference]
  template<class T, class U>
    concept CommonReference = [=SeeBelow];

  // [:en] [#concept.common], concept [`Common]
  // [|:zh_CN] [#concept.common]，概念 [`Common]
  template<class T, class U>
    concept Common = [=SeeBelow];

  // [:en] [#concepts.integral], integral concepts
  // [|:zh_CN] [#concept.integral]，整型概念
  template<class T>
    concept Integral = [=SeeBelow];
  template<class T>
    concept SignedIntegral = [=SeeBelow];
  template<class T>
    concept UnsignedIntegral = [=SeeBelow];

  // [:en] [#concept.assignable], concept [`Assignable]
  // [|:zh_CN] [#concept.assignable]，概念 [`Assignable]
  template<class LHS, class RHS>
    concept Assignable = [=SeeBelow];

  // [:en] [#concept.swappable], concept [`Swappable]
  // [|:zh_CN] [#concept.swappable]，概念 [`Swappable]
  template<class T>
    concept Swappable = [=SeeBelow];
  template<class T, class U>
    concept SwappableWith = [=SeeBelow];

  // [:en] [#concept.destructible], concept [`Destructible]
  // [|:zh_CN] [#concept.destructible]，概念 [`Destructible]
  template<class T>
    concept Destructible = [=SeeBelow];

  // [:en] [#concept.constructible], concept [`Constructible]
  // [|:zh_CN] [#concept.constructible]，概念 [`Constructible]
  template<class T, class... Args>
    concept Constructible = [=SeeBelow];

  // [:en] [#concept.defaultconstructible], concept [`DefaultConstructible]
  // [|:zh_CN] [#concept.defaultconstructible]，概念 [`DefaultConstructible]
  template<class T>
    concept DefaultConstructible = [=SeeBelow];

  // [:en] [#concept.moveconstructible], concept [`MoveConstructible]
  // [|:zh_CN] [#concept.moveconstructible]，概念 [`MoveConstructible]
  template<class T>
    concept MoveConstructible = [=SeeBelow];

  // [:en] [#concept.copyconstructible], concept [`CopyConstructible]
  // [|:zh_CN] [#concept.copyconstructible]，概念 [`CopyConstructible]
  template<class T>
    concept CopyConstructible = [=SeeBelow];

  // [:en] [#concepts.compare], comparison concepts
  // [|:zh_CN] [#concept.compare]，比较概念
  // [:en] [#concept.boolean], concept [`Boolean]
  // [|:zh_CN] [#concept.boolean]，概念 [`Boolean]
  template<class B>
    concept Boolean = [=SeeBelow];

  // [:en] [#concept.equalitycomparable], concept [`EqualityComparable]
  // [|:zh_CN] [#concept.equalitycomparable]，概念 [`EqualityComparable]
  template<class T>
    concept EqualityComparable = [=SeeBelow];
  template<class T, class U>
    concept EqualityComparableWith = [=SeeBelow];

  // [:en] [#concept.stricttotallyordered], concept [`StrictTotallyOrdered]
  // [|:zh_CN] [#concept.stricttotallyordered]，概念 [`StrictTotallyOrdered]
  template<class T>
    concept StrictTotallyOrdered = [=SeeBelow];
  template<class T, class U>
    concept StrictTotallyOrderedWith = [=SeeBelow];

  // [:en] [#concepts.object], object concepts
  // [|:zh_CN] [#concept.object]，对象概念
  template<class T>
    concept Movable = [=SeeBelow];

  template<class T>
    concept Copyable = [=SeeBelow];

  template<class T>
    concept Semiregular = [=SeeBelow];

  template<class T>
    concept Regular = [=SeeBelow];

  // [:en] [#concepts.callable], callable concepts
  // [|:zh_CN] [#concept.callable]，可调用概念
  // [:en] [#concept.invocable], concept [`Invocable]
  // [|:zh_CN] [#concept.invocable]，概念 [`Invocable]
  template<class F, class... Args>
    concept Invocable = [=SeeBelow];

  // [:en] [#concept.regularinvocable], concept [`RegularInvocable]
  // [|:zh_CN] [#concept.regularinvocable]，概念 [`RegularInvocable]
  template<class F, class... Args>
    concept RegularInvocable = [=SeeBelow];

  // [:en] [#concept.predicate], concept [`Predicate]
  // [|:zh_CN] [#concept.predicate]，概念 [`Predicate]
  template<class F, class... Args>
    concept Predicate = [=SeeBelow];

  // [:en] [#concept.relation], concept [`Relation]
  // [|:zh_CN] [#concept.relation]，概念 [`Relation]
  template<class R, class T, class U>
    concept Relation = [=SeeBelow];

  // [:en] [#concept.strictweakorder], concept [`StrictWeakOrder]
  // [|:zh_CN] [#concept.strictweakorder]，概念 [`StrictWeakOrder]
  template<class R, class T, class U>
    concept StrictWeakOrder = [=SeeBelow];
}
[codeblock:end]
