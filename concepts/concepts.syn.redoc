[section#concepts.syn
    [:en] Header [`<concepts>] synopsis
    [:zh_CN] 头文件 [`<concepts>] 纲要
]

[%@hdr@def concepts]
[codeblock:synopsis]
namespace std {
  // [:en] [#concepts.lang], language-related concepts \
     [:zh_CN] [#concepts.lang]，语言相关概念
  // [:en] [#concept.same], concept [`:c same_as] \
     [:zh_CN] [#concept.same]，概念 [`:c same_as]
  template<class T, class U>
    concept same_as = [[redoc("[=seebelow]")]];

  // [:en] [#concept.derived], concept [`:c derived_from] \
     [:zh_CN] [#concept.derived]，概念 [`:c derived_from]
  template<class Derived, class Base>
    concept derived_from = [[redoc("[=seebelow]")]];

  // [:en] [#concept.convertible], concept [`:c convertible_to] \
     [:zh_CN] [#concept.convertible]，概念 [`:c convertible_to]
  template<class From, class To>
    concept convertible_to = [[redoc("[=seebelow]")]];

  // [:en] [#concept.commonref], concept [`:c common_reference_with] \
     [:zh_CN] [#concept.commonref]，概念 [`:c common_reference_with]
  template<class T, class U>
    concept common_reference_with = [[redoc("[=seebelow]")]];

  // [:en] [#concept.common], concept [`:c common_with] \
     [:zh_CN] [#concept.common]，概念 [`:c common_with]
  template<class T, class U>
    concept common_with = [[redoc("[=seebelow]")]];

  // [:en] [#concepts.arithmetic], arithmetic concepts \
     [:zh_CN] [#concept.arithmetic]，算术概念
  template<class T>
    concept integral = [[redoc("[=seebelow]")]];
  template<class T>
    concept signed_integral = [[redoc("[=seebelow]")]];
  template<class T>
    concept unsigned_integral = [[redoc("[=seebelow]")]];
  template<class T>
    concept floating_point = [[redoc("[=seebelow]")]];

  // [:en] [#concept.assignable], concept [`:c assignable_from] \
     [:zh_CN] [#concept.assignable]，概念 [`:c assignable_from]
  template<class LHS, class RHS>
    concept assignable_from = [[redoc("[=seebelow]")]];

  // [:en] [#concept.swappable], concept [`:c swappable] \
     [:zh_CN] [#concept.swappable]，概念 [`:c swappable]
  namespace ranges {
    inline namespace [[redoc("[=unspec]")]] {
      inline constexpr [[redoc("[=unspec]")]] swap = [[redoc("[=unspec]")]];
    }
  }
  template<class T>
    concept swappable = [[redoc("[=seebelow]")]];
  template<class T, class U>
    concept swappable_with = [[redoc("[=seebelow]")]];

  // [:en] [#concept.destructible], concept [`:c destructible] \
     [:zh_CN] [#concept.destructible]，概念 [`:c destructible]
  template<class T>
    concept destructible = [[redoc("[=seebelow]")]];

  // [:en] [#concept.constructible], concept [`:c constructible_from] \
     [:zh_CN] [#concept.constructible]，概念 [`:c constructible_from]
  template<class T, class... Args>
    concept constructible_from = [[redoc("[=seebelow]")]];

  // [:en] [#concept.defaultconstructible], concept [`:c default_constructible] \
     [:zh_CN] [#concept.defaultconstructible]，概念 [`:c default_constructible]
  template<class T>
    concept default_constructible = [[redoc("[=seebelow]")]];

  // [:en] [#concept.moveconstructible], concept [`:c move_constructible] \
     [:zh_CN] [#concept.moveconstructible]，概念 [`:c move_constructible]
  template<class T>
    concept move_constructible = [[redoc("[=seebelow]")]];

  // [:en] [#concept.copyconstructible], concept [`:c copy_constructible] \
     [:zh_CN] [#concept.copyconstructible]，概念 [`:c copy_constructible]
  template<class T>
    concept copy_constructible = [[redoc("[=seebelow]")]];

  // [:en] [#concepts.compare], comparison concepts \
     [:zh_CN] [#concept.compare]，比较概念
  // [:en] [#concept.boolean], concept [`:c boolean] \
     [:zh_CN] [#concept.boolean]，概念 [`:c boolean]
  template<class B>
    concept boolean = [[redoc("[=seebelow]")]];

  // [:en] [#concept.equalitycomparable], concept [`:c equality_comparable] \
     [:zh_CN] [#concept.equalitycomparable]，概念 [`:c equality_comparable]
  template<class T>
    concept equality_comparable = [[redoc("[=seebelow]")]];
  template<class T, class U>
    concept equality_comparable_with = [[redoc("[=seebelow]")]];

  // [:en] [#concept.totallyordered], concept [`:c totally_ordered] \
     [:zh_CN] [#concept.totallyordered]，概念 [`:c totally_ordered]
  template<class T>
    concept totally_ordered = [[redoc("[=seebelow]")]];
  template<class T, class U>
    concept totally_ordered_with = [[redoc("[=seebelow]")]];

  // [:en] [#concepts.object], object concepts \
     [:zh_CN] [#concept.object]，对象概念
  template<class T>
    concept movable = [[redoc("[=seebelow]")]];
  template<class T>
    concept copyable = [[redoc("[=seebelow]")]];
  template<class T>
    concept semiregular = [[redoc("[=seebelow]")]];
  template<class T>
    concept regular = [[redoc("[=seebelow]")]];

  // [:en] [#concepts.callable], callable concepts \
     [:zh_CN] [#concept.callable]，可调用概念
  // [:en] [#concept.invocable], concept [`:c invocable] \
     [:zh_CN] [#concept.invocable]，概念 [`:c invocable]
  template<class F, class... Args>
    concept invocable = [[redoc("[=seebelow]")]];

  // [:en] [#concept.regularinvocable], concept [`:c regular_invocable] \
     [:zh_CN] [#concept.regularinvocable]，概念 [`:c regular_invocable]
  template<class F, class... Args>
    concept regular_invocable = [[redoc("[=seebelow]")]];

  // [:en] [#concept.predicate], concept [`:c predicate] \
     [:zh_CN] [#concept.predicate]，概念 [`:c predicate]
  template<class F, class... Args>
    concept predicate = [[redoc("[=seebelow]")]];

  // [:en] [#concept.relation], concept [`:c relation] \
     [:zh_CN] [#concept.relation]，概念 [`:c relation]
  template<class R, class T, class U>
    concept relation = [[redoc("[=seebelow]")]];

  // [:en] [#concept.equiv], concept [`:c equivalence_relation] \
     [:zh_CN] [#concept.equiv]，概念 [`:c equivalence_relation]
  template<class R, class T, class U>
    concept equivalence_relation = [[redoc("[=seebelow]")]];

  // [:en] [#concept.strictweakorder], concept [`:c strict_weak_order] \
     [:zh_CN] [#concept.strictweakorder]，概念 [`:c strict_weak_order]
  template<class R, class T, class U>
    concept strict_weak_order = [[redoc("[=seebelow]")]];
}
[codeblock:end]
