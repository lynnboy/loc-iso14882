[section#concept.swappable
    [:en] Concept [`:cname swappable]
    [:zh_CN] 概念 [`:cname swappable]
]

[para]
[:en] Let [`t1] and [`t2] be equiality-preserving expressions that denote
distinct equal objects of type [`T], and let [`u1] and [`u2] similarly denote
distinct equal objects of type [`U].
[:zh_CN] 令 [`t1] 和 [`t2] 为维持相等性表达式并代表 [`T] 类型的不同但相等的对象，
类似地令 [`u1] 和 [`u2] 代表 [`U] 类型的不同但相等的对象。

[begin:note]
[:en] [`t1] and [`u1] can denote distinct objects, or the same object.
[:zh_CN] [`t1] 和 [`u1] 可以代表不同的对象，也可以代表相同的对象。
[end:note]

[:en] An operation [+:% exchanges the values] denoted by [`t1] and [`u1] if and
only if the operation modifies neither [`t2] nor [`u2] and:
[:zh_CN] 当且仅当某个操作并不修改 [`t2] 或 [`u2]，并满足下列条件时，该操作
[+:% 交换]由 [`t1] 和 [`u1] 所代表的值：

[list]
[item]
[:en] If [`T] and [`U] are the same type, the result of the operation is that
[`t1] equals [`u2] and [`u1] equals [`t2].
[:zh_CN] 若 [`T] 和 [`U] 为相同类型，则操作的结果为 [`t1] 等于 [`u2] 且 [`u1]
等于 [`t2]。

[item]
[:en] If [`T] and [`U] are different types and
[`[`:c common_reference_with]<decltype((t1)), decltype((u1))>] is modeled, the
result of the operation is that [`C(t1)] equals [`C(u2)] and [`C(u1)] equals
[`C(t2)] where [`C] is [`common_reference_t<decltype((t1)), decltype((u1))>].
[:zh_CN] 若 [`T] 和 [`U] 为不同类型，且已构成
[`[`:c common_reference_with]<decltype((t1)), decltype((u1))>]，则操作的结果为
[`C(t1)] 等于 [`C(u2)] 且 [`C(u1)] 等于 [`C(t2)]，其中 [`C] 为
[`common_reference_t<decltype((t1)), decltype((u1))>]。
[list:end]

[para]
[%@lib swap]
[:en] The name [`ranges::swap] denotes a customization point object
([#customization.point.object]).
[:zh_CN] 名字 [`ranges::swap] 代表一个定制化点对象（[#customization.point.object]）。

[:en] The expression [`ranges::swap(E1, E2)] for subexpressions [`E1] and [`E2]
is expression-equivalent to an expression [`S] determined as follows:
[:zh_CN] 对于子表达式 [`E1] 和 [`E2]，表达式 [`ranges::swap(E1, E2)] 与如下确定
的一个表达式 [`S] 之间按表达式等价：

[list]
[item]
[:en] [`S] is [`(void)swap(E1, E2)][#:note#fn.$1] if [`E1] or [`E2] has class or
enumeration type ([#basic.compound]) and that expression is valid, with overload
resolution performed in a context that includes the declaration
[:zh_CN] 如果 [`E1] 或 [`E2] 具有类或者枚举类型（[#basic.compound]），且表达式
[`(void)swap(E1, E2)][#:note#fn.$1] 在包含如下声明式

[codeblock]
template<class T>
  void swap(T&, T&) = delete;
[codeblock:end]

[:en@~] and does not include a declaration of [`ranges::swap].
[:zh_CN@~] 且并不包含 [`ranges::swap] 的声明式的语境中实施重载决议时是有效的，则
[`S] 为 [`(void)swap(E1, E2)]。

[note:foot#fn:$1]
[:en] The name [`swap] is used here unqualified.
[:zh_CN] 这里未限定地使用名字 [`swap]。
[note:end]

[:en] If the function selected by overload resolution does not exchange the
values denoted by [`E1] and [`E2], the program is ill-formed, no diagnostic
required.
[:zh_CN] 如果重载决议所选出的函数并不会交换由 [`E1] 和 [`E1] 所代表的值，则程序
非良构，无须诊断。

[item]
[:en] Otherwise, if [`E1] and [`E2] are lvalues of array types ([#basi.compound])
with equal extent and [`ranges::swap(*E1, *E2)] is a valid expression, [`S] is
[`(void)ranges::swap_ranges(E1, E2)], except that [`noexcept(S)] is equal to
[`noexcept(ranges::swap(*E1, *E2))].
[:zh_CN] 否则，如果 [`E1] 和 [`E2] 为具有相等的界的数组类型（[#basic.compound]）
的，并且 [`ranges::swap(*E1, *E2)] 是有效表达式，则 [`S] 为
[`(void)ranges::swap_ranges(E1, E2)]，但有 [`noexcept(S)] 为
[`noexcept(ranges::swap(*E1, *E2))]。

[item]
[:en] Otherwise, if [`E1] and [`E2] are lvalues of the same type [`T] that
models [`[`:c move_constructible]<T>] and [`[`:c assignable_from]T&, T>], [`S]
is an expression that exchanges the denoted values.
[:zh_CN] 否则，如果 [`E1] 和 [`E2] 为相同类型 [`T] 的左值，且 [`T] 构成了
[`[`:c move_constructible]<T>] 和 [`[`:c assignable_from]<T&, T>]，则 [`S] 为
一个交换它们所代表的值的表达式。

[:en] [`S] is a constant expression if
[:zh_CN] 以下情况下 [`S] 是常量表达式：

[list]
[item]
[:en@~] [`T] is a literal type ([#basic.types]),
[:zh_CN@~] [`T] 为字面类型（[#basic.types]），
[item]
[:en@~] both [`E1 = std::move(E2)] and [`E2 = std::move(E1)] are constant
subexpressions ([#defns.const.subexpr]), and
[:zh_CN@~] [`E1 = std::move(E2)] 和 [`E2 = std::move(E1)] 均为常量子表达式
（[#defns.const.subexpr]），并且
[item]
[:en@~] the full-expressions of the initializers in the declarations
[:zh_CN@~] 以下声明式中

[codeblock]
T t1(std::move(E1));
T t2(std::move(E2));
[codeblock:end]

[:en@~] are constant subexpressions.
[:zh_CN@~] 各初始化式的全表达式均为常量子表达式。
[list:end]

[:en] [`noexcept(S)] is equal to
[`is_nothrow_move_constructible_v<T> && is_nothrow_move_assignable_v<T>].
[:zh_CN] [`noexcept(S)] 等于
[`is_nothrow_move_constructible_v<T> && is_nothrow_move_assignable_v<T>]。

[item]
[:en] Otherwise, [`ranges::swap(E1, E2)] is ill-formed.
[:zh_CN] 否则，[`ranges::swap(E1, E2)] 非良构。

[begin:note]
[:en] This case can result in substitution failure when [`ranges::swap(E1, E2)]
appears in the immediate context of a template instantiation.
[:zh_CN] 当 [`ranges::swap(E1, E2)] 出现于模板实例化的直接语境中时，这种情况下
将会导致替换失败。
[end:note]
[list:end]

[para]
[begin:note]
[:en] Whenever [`ranges::swap(E1, E2)] is a valid expression, it exchanges the
values denoted by [`E1] and [`E2] and has type [`void].
[:zh_CN] 只要 [`ranges::swap(E1, E2)] 是有效表达式，则它交换由 [`E1] 和 [`E2] 所
代表的值，并具有类型 [`void]。
[end:note]

[codeblock:declaration]
template<class T>
  concept [[redoc("`:c@def>")]]swappable = requires(T& a, T& b) { ranges::swap(a, b); };
[codeblock:end]

[codeblock:declaration]
template<class T, class U>
  concept [[redoc("`:c@def>")]]swappable_with =
    common_reference_with<T, U> &&
    requires(T&& t, U&& u) {
      ranges::swap(std::forward<T>(t), std::forward<T>(t));
      ranges::swap(std::forward<U>(u), std::forward<U>(u));
      ranges::swap(std::forward<T>(t), std::forward<U>(u));
      ranges::swap(std::forward<U>(u), std::forward<T>(t));
    };
[codeblock:end]

[para]
[begin:note]
[:en] The semantics of the [`:c swappable] and [`:c swappable_with] concepts are
fully defined by the [`ranges::swap] customization point object.
[:zh_CN] 概念 [`:c swappable] 和 [`:c swappable_with] 的语义完全由定制化点对象
[`ranges::swap] 所定义。
[end:note]

[para]
[begin:example]
[:en] User code can ensure that the evaluation of [`swap] calls is performed in
an appropriate context under the various conditions as follows:
[:zh_CN] 用户可以用如下方式来保证对 [`swap] 调用在不同条件下都在适当的语境中进行
求值：

[codeblock]
#include <cassert>
#include <concepts>
#include <utility>

namespace ranges = std::ranges;

template<class T, std::[[redoc("`:c>")]swappable_with<T> U>
void value_swap(T&& t, U&& u) {
  ranges::swap(std::forward<T>(t), std::forward<U>(u));
}

template<std::swappable T>
void lv_swap(T& t1, T& t2) {
  ranges::swap(t1, t2);
}

namespace N {
  struct A { int m; };
  struct Proxy {
    A* a;
    Proxy(A& a) : a{&a} {}
    friend void swap(Proxy x, Proxy y) {
      ranges::swap(*x.a, *y.a);
    }
  };
  Proxy proxy(A& a) { return Proxy{ a }; }
}

int main() {
  int i = 1, j = 2;
  lv_swap(i, j);
  assert(i == 2 && j == 1);

  N::A a1 = { 5 }, a2 = { -5 };
  value_swap(a1, proxy(a2));
  assert(a1.m == -5 && a2.m == 5);
}
[codeblock:end]
[end:example]
