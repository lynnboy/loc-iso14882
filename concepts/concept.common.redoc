[section#concept.common
    [:en] Concept [`Common]
    [:zh_CN] 概念 [`Common]
]

[para]
[:en] If [`T] and [`U] can both be explicitly converted to some third type,
[`C], then [`T] and [`U] share a [+common type[%]], [`C].
[:zh_CN] 如果 [`T] 和 [`U] 都可以显式转换为第三个类型 [`C]，则 [`T] 和 [`U] 共享
[+公共类型[%]] [`C]。

[enter:note]
[:en] [`C] could be the same as [`T], or [`U], or it could be a different type.
[:zh_CN] [`C] 可以和 [`T] 或 [`U] 相同，或者它也可以是一个不同的类型。

[:en] [`C] might not be unique.
[:zh_CN] [`C] 可能不是唯一的。
[exit:note]

[%@library Common]
[codeblock:declaration]
template<class T, class U>
  concept Common =
    Same<common_type_t<T, U>, common_type_t<U, T>> &&
    ConvertibleTo<T, common_type_t<T, U>> &&
    ConvertibleTo<U, common_type_t<T, U>> &&
    CommonReference<
      add_lvalue_reference_t<const T>,
      add_lvalue_reference_t<const U>> &&
    CommonReference<
      add_lvalue_reference_t<common_type_t<T, U>>,
      common_reference_t<
        add_lvalue_reference_t<const T>,
        add_lvalue_reference_t<const U>>>;
[codeblock:end]

[enter:description]
[para]
[:en] Let [`C] be [`common_type_t<T, U>].
[:zh_CN] 令 [`C] 为 [`common_type_t<T, U>]。

[:en] Let [`t] be a function whose return type is [`T], and let [`u] be a
function whose return type is [`U].
[:zh_CN] 令 [`t] 为返回类型为 [`T] 的函数，并令 [`u] 为返回类型为 [`U] 的函数。

[:en] [`Common<T, U>] is satisfied only if:
[:zh_CN] 仅当符合以下条件时 [`Common<T, U>] 得以满足：

[list]
[item]
[:en] [`C(t())] equals [`C(t())] if and only if [`t()] is an equality-preserving
expression ([#concepts.equality]).
[:zh_CN] 当且仅当 [`t()] 是维持相等性表达式（[#concepts.equality]）时，[`C(t())]
等于 [`C(t())]。
[item]
[:en] [`C(u())] equals [`C(u())] if and only if [`u()] is an equality-preserving
expression ([#concepts.equality]).
[:zh_CN] 当且仅当 [`u()] 是维持相等性表达式（[#concepts.equality]）时，[`C(u())]
等于 [`C(u())]。
[list:end]

[para]
[enter:note]
[:en] Users can customize the behavior of [`Common] by specializing the
[`common_type] class template ([#meta.trans.other]).
[:zh_CN] 用户可以通过特化类模板 [`common_type]（[#meta.trans.other]）来定制
[`Common] 的行为。
[exit:note]
[exit:description]
