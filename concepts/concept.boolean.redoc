[section#concept.boolean
    [:en] Concept [`Boolean]
    [:zh_CN] 概念 [`Boolean]
]

[para]
[:en] The [`Boolean] concept specifies the requirements on a type that is
usable in Boolean contexts.
[:zh_CN] [`Boolean] 概念指定对可以在布尔语境中使用的类型的规定。

[%@library Boolean]
[codeblock:declaration]
template<class B>
  concept Boolean =
    Movable<remove_cvref_t<B>> && // [:en] (see [#concepts.object])
                                  // [|:zh_CN] （参见 [#concepts.object]）
    requires(const remove_reference_t<B>& b1,
             const remove_reference_t<B>& b2, const bool a) {
      requires ConvertibleTo<const remove_reference_t<B>&, bool>;
      !b1;      requires ConvertibleTo<decltype(!b1), bool>;
      b1 &&  a; requires Same<decltype(b1 &&  a), bool>;
      b1 ||  a; requires Same<decltype(b1 ||  a), bool>;
      b1 && b2; requires Same<decltype(b1 && b2), bool>;
       a && b2; requires Same<decltype( a && b2), bool>;
      b1 || b2; requires Same<decltype(b1 || b2), bool>;
       a || b2; requires Same<decltype( a || b2), bool>;
      b1 == b2; requires ConvertibleTo<decltype(b1 == b2), bool>;
      b1 ==  a; requires ConvertibleTo<decltype(b1 ==  a), bool>;
       a == b2; requires ConvertibleTo<decltype( a == b2), bool>;
      b1 != b2; requires ConvertibleTo<decltype(b1 != b2), bool>;
      b1 !=  a; requires ConvertibleTo<decltype(b1 !=  a), bool>;
       a != b2; requires ConvertibleTo<decltype( a != b2), bool>;
    };
[codeblock:end]

[para]
[:en] Let [`b1] and [`b2] be lvalues of type [`const remove_reference_t<B>].
[:zh_CN] 令 [`b1] 和 [`b2] 为 [`const remove_reference_t<B>] 类型的左值。

[:en] [`Boolean<B>] is satisfied only if
[:zh_CN] 仅当符合以下条件时 [`Boolean<B>] 得以满足：

[list]
[item]
[:en] [`bool(b1) == !bool(!b1)].
[:zh_CN] [`bool(b1) == !bool(!b1)]。

[item]
[:en] [`(b1 && b2)], [`(b1 && bool(b2))], and [`(bool(b1) && b2)] are all equal
to [`(bool(b1) && bool(b2))], and have the same short-circuit evaluation.
[:zh_CN] [`(b1 && b2)]，[`(b1 && bool(b2))]，和 [`(bool(b1) && b2)] 都等于
[`(bool(b1) && bool(b2))]，且都具有相同的短路求值。

[item]
[:en] [`(b1 || b2)], [`(b1 || bool(b2))], and [`(bool(b1) || b2)] are all equal
to [`(bool(b1) || bool(b2))], and have the same short-circuit evaluation.
[:zh_CN] [`(b1 || b2)]，[`(b1 || bool(b2))]，和 [`(bool(b1) || b2)] 都等于
[`(bool(b1) || bool(b2))]，且都具有相同的短路求值。

[item]
[:en] [`bool(b1 == b2)], [`bool(b1 == bool(b2))], and [`bool(bool(b1) == b2)]
are all equal to [`(bool(b1) == bool(b2))].
[:zh_CN] [`bool(b1 == b2)]，[`bool(b1 == bool(b2))]，和 [`bool(bool(b1) == b2)]
都等于 [`(bool(b1) == bool(b2))]。

[item]
[:en] [`bool(b1 != b2)], [`bool(b1 != bool(b2))], and [`bool(bool(b1) != b2)]
are all equal to [`(bool(b1) != bool(b2))].
[:zh_CN] [`bool(b1 != b2)]，[`bool(b1 != bool(b2))]，和 [`bool(bool(b1) != b2)]
都等于 [`(bool(b1) != bool(b2))]。
[list:end]

[para]
[enter:example]
[:en] The types [`bool], [`true_type] ([#meta.type.synop]), and
[`bitset<[$N]>::reference] ([#template.bitset]) are [`Boolean] types.
[:zh_CN] 类型 [`bool]，[`true_type]（[#meta.type.synop]），以及
[`bitset<[$N]>::reference]（[#template.bitset]）都是 [`Boolean] 类型。

[:en] Pointers, smart pointers, and types with only explicit conversions to
[`bool] are not [`Boolean] types.
[:zh_CN] 指针，智能指针，以及仅带有向 [`bool] 的显式转换的类型不是 [`Boolean]
类型。
[exit:example]
