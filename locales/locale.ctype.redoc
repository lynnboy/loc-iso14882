[section#locale.ctype
    [:en] Class template [`ctype]
    [:zh_CN] 类模板 [`ctype]
]

[%@library ctype]
[codeblock:synopsis]
namespace std {
  template<class charT>
    class ctype : public locale::facet, public ctype_base {
    public:
      using char_type = charT;
  
      explicit ctype(size_t refs = 0);
  
      bool         is(mask m, charT c) const;
      const charT* is(const charT* low, const charT* high, mask* vec) const;
      const charT* scan_is(mask m, const charT* low, const charT* high) const;
      const charT* scan_not(mask m, const charT* low, const charT* high) const;
      charT        toupper(charT c) const;
      const charT* toupper(charT* low, const charT* high) const;
      charT        tolower(charT c) const;
      const charT* tolower(charT* low, const charT* high) const;
  
      charT        widen(char c) const;
      const char*  widen(const char* low, const char* high, charT* to) const;
      char         narrow(charT c, char dfault) const;
      const charT* narrow(const charT* low, const charT* high, char dfault, char* to) const;
  
      static locale::id id;
  
    protected:
      ~ctype();
      virtual bool         do_is(mask m, charT c) const;
      virtual const charT* do_is(const charT* low, const charT* high, mask* vec) const;
      virtual const charT* do_scan_is(mask m, const charT* low, const charT* high) const;
      virtual const charT* do_scan_not(mask m, const charT* low, const charT* high) const;
      virtual charT        do_toupper(charT) const;
      virtual const charT* do_toupper(charT* low, const charT* high) const;
      virtual charT        do_tolower(charT) const;
      virtual const charT* do_tolower(charT* low, const charT* high) const;
      virtual charT        do_widen(char) const;
      virtual const char*  do_widen(const char* low, const char* high, charT* dest) const;
      virtual char         do_narrow(charT, char dfault) const;
      virtual const charT* do_narrow(const charT* low, const charT* high,
                                     char dfault, char* dest) const;
    };
}
[codeblock:end]

[para]
[:en]
Class [`ctype] encapsulates the C library [`<cctype>] features.
[:zh_CN]
类 [`ctype] 封装了 C 程序库 [`<cctype>] 的功能特性。

[:en]
[`istream] members are required to use [`ctype<>] for character classing during
input parsing.
[:zh_CN]
要求 [`istream] 的成员在进行输入解析中使用 [`ctype<>] 以进行字符分类。

[para]
[:en]
The specializations required in [#localization.category.facets]
([#locale.category]), namely [`ctype<char>] and [`ctype<wchar_t>], implement
character classing appropriate to the implementation[=']s native character set.
[:zh_CN]
在 [#localization.category.facets] 中所要求的特例（[#locale.category]），亦即
[`ctype<char>] 和 [`ctype<wchar_t]，实现了该实现的本地字符集的适当的类型分类。

[include locale.ctype.members]

[include locale.ctype.virtuals]
