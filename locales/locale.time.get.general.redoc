[section#locale.time.get.general
    [:en] General
    [:zh_CN] 概述
]

[%@lib time_get]
[codeblock:synopsis]
namespace std {
  class time_base {
  public:
    enum dateorder { no_order, dmy, mdy, ymd, ydm };
  };

  template<class charT, class InputIterator = istreambuf_iterator<charT>>
    class time_get : public locale::facet, public time_base {
    public:
      using char_type = charT;
      using iter_type = InputIterator;

      explicit time_get(size_t refs = 0);

      dateorder date_order()  const { return do_date_order(); }
      iter_type get_time(iter_type s, iter_type end, ios_base& f,
                         ios_base::iostate& err, tm* t)  const;
      iter_type get_date(iter_type s, iter_type end, ios_base& f,
                         ios_base::iostate& err, tm* t)  const;
      iter_type get_weekday(iter_type s, iter_type end, ios_base& f,
                         ios_base::iostate& err, tm* t) const;
      iter_type get_monthname(iter_type s, iter_type end, ios_base& f,
                         ios_base::iostate& err, tm* t) const;
      iter_type get_year(iter_type s, iter_type end, ios_base& f,
                         ios_base::iostate& err, tm* t) const;
      iter_type get(iter_type s, iter_type end, ios_base& f,
                         ios_base::iostate& err, tm* t, char format, char modifier = 0) const;
      iter_type get(iter_type s, iter_type end, ios_base& f,
                         ios_base::iostate& err, tm* t, const char_type* fmt,
                         const char_type* fmtend) const;

      static locale::id id;

    protected:
      ~time_get();
      virtual dateorder do_date_order()  const;
      virtual iter_type do_get_time(iter_type s, iter_type end, ios_base&,
                                    ios_base::iostate& err, tm* t) const;
      virtual iter_type do_get_date(iter_type s, iter_type end, ios_base&,
                                    ios_base::iostate& err, tm* t) const;
      virtual iter_type do_get_weekday(iter_type s, iter_type end, ios_base&,
                                       ios_base::iostate& err, tm* t) const;
      virtual iter_type do_get_monthname(iter_type s, iter_type end, ios_base&,
                                         ios_base::iostate& err, tm* t) const;
      virtual iter_type do_get_year(iter_type s, iter_type end, ios_base&,
                                    ios_base::iostate& err, tm* t) const;
      virtual iter_type do_get(iter_type s, iter_type end, ios_base& f,
                               ios_base::iostate& err, tm* t, char format, char modifier) const;
    };
}
[codeblock:end]

[para]
[:en]
[`time_get] is used to parse a character sequence, extracting components of a
time or date into a [`struct tm] object.
[:zh_CN]
[`time_get] 用于解析字符序列，提取时间或日期的成分到 [`struct tm] 对象中。

[:en]
Each [`get] member parses a format as produced by a corresponding format
specifier to [`time_put<>::put].
[:zh_CN]
每个 [`get] 成员均解析一种对应于 [`time_put<>::put] 的一种格式说明符所产生的格式。

[:en]
If the sequence being parsed matches the correct format, the corresponding
members of the [`struct tm] argument are set to the values used to produce the
sequence; otherwise either an error is reported or unspecified values are
assigned.[#:note#fn:$1]
[:zh_CN]
如果所解析的序列匹配正确的格式，则 [`struct tm] 实参的对应成员被设置为用于产生
该序列的各个值；否则要么进行报错要么被赋值为未指明的值。[#:note#fn:$1]

[note:foot#fn:$1]
[:en]
In other words, user confirmation is required for reliable parsing of
user-entered dates and times, but machine-generated formats can be parsed
reliably.
[:zh_CN]
换句话说，对于用户输入的日期和时间，需要用户的确认才能进行可靠的解析，但由机器
生成的格式可以进行可靠的解析。

[:en]
This allows parsers to be aggressive about interpreting user variations on
standard formats.
[:zh_CN]
这就允许解析器对于用户对标准格式的变动采取积极的解释方式。
[note:end]

[para]
[:en]
If the end iterator is reached during parsing by any of the [`get()] member
functions, the member sets [`ios_base::eofbit] in [`err].
[:zh_CN]
如果在任何 [`get()] 成员函数的解析过程中达到了结尾迭代器，则该成员在 [`err] 中
设置 [`ios_base::eofbit]。
