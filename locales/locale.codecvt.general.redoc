[section#locale.codecvt.general
    [:en] General
    [:zh_CN] 概述
]

[%@lib codecvt]
[codeblock:synopsis]
namespace std {
  class codecvt_base {
  public:
    enum result { ok, partial, error, noconv };
  };

  template<class internT, class externT, class stateT>
    class codecvt : public locale::facet, public codecvt_base {
    public:
      using intern_type = internT;
      using extern_type = externT;
      using state_type  = stateT;

      explicit codecvt(size_t refs = 0);

      result out(
          stateT& state,
          const internT* from, const internT* from_end, const internT*& from_next,
                externT*   to,       externT*   to_end,       externT*&   to_next) const;

      result unshift(
          stateT& state,
                externT*    to,      externT*   to_end,       externT*&   to_next) const;

      result in(
          stateT& state,
          const externT* from, const externT* from_end, const externT*& from_next,
                internT*   to,       internT*   to_end,       internT*&   to_next) const;

      int encoding() const noexcept;
      bool always_noconv() const noexcept;
      int length(stateT&, const externT* from, const externT* end, size_t max) const;
      int max_length() const noexcept;

      static locale::id id;

    protected:
      ~codecvt();
      virtual result do_out(
          stateT& state,
          const internT* from, const internT* from_end, const internT*& from_next,
                externT* to,         externT*   to_end,       externT*&   to_next) const;
      virtual result do_in(
          stateT& state,
          const externT* from, const externT* from_end, const externT*& from_next,
                internT* to,         internT*   to_end,       internT*&   to_next) const;
      virtual result do_unshift(
          stateT& state,
                externT* to,         externT*   to_end,       externT*&   to_next) const;

      virtual int do_encoding() const noexcept;
      virtual bool do_always_noconv() const noexcept;
      virtual int do_length(stateT&, const externT* from, const externT* end, size_t max) const;
      virtual int do_max_length() const noexcept;
    };
}
[codeblock:end]

[para]
[:en]
The class [`codecvt<internT, externT, stateT>] is for use when converting from
one character encoding to another, such as from wide characters to multibyte
characters or between wide character encodings such as UTF-32 and EUC.
[:zh_CN]
类 [`codecvt<internT, externT, stateT>] 用于从一种字符编码向另一种进行转换，比如
从宽字符向多字节字符，或者在如 UTF-32 和 EUC 这样的宽字符编码之间的转换。

[para]
[:en]
The [`stateT] argument selects the pair of character encodings being mapped
between.
[:zh_CN]
[`stateT] 实参选择了在其中进行映射的一对字符编码。

[para]
[:en]
The specializations required in [#:tab#locale.category.facets]
([#locale.category]) convert the implementation-defined native character set.
[:zh_CN]
在 [#:tab#locale.category.facets] 中所要求的特例（[#locale.category]），对
由实现定义的本地字符集进行转换。

[:en]
[`codecvt<char, char, mbstate_t>] implements a degenerate conversion; it does
not convert at all.
[:zh_CN]
[`codecvt<char, char, mbstate_t>] 实现退化的转换；它并不进行任何转换。

[:en]
The specialization [`codecvt<char16_t, char8_t, mbstate_t>] converts between the
UTF-16 and UTF-8 encoding forms, and the specialization
[`codecvt<char32_t, char8_t, mbstate_t>] converts between the UTF-32 and UTF-8
encoding forms.
[:zh_CN]
特例 [`codecvt<char16_t, char8_t, mbstate_t>] 在 UTF-16 和 UTF-8 编码形式之间
进行转换，而特例 [`codecvt<char32_t, char8_t, mbstate_t>] 在 UTF-32 和 UTF-8
编码形式之间进行转换。

[:en]
[`codecvt<wchar_t, char, mbstate_t>] converts between the native character sets
for ordinary and wide characters.
[:zh_CN]
[`codecvt<wchar_t, char, mbstate_t>] 在普通字符和宽字符的本地字符集之间进行转换。

[:en]
Specializations on [`mbstate_t] perform conversion between encodings known to
the library implementer.
[:zh_CN]
对于 [`mbstate_t] 的特例实施对于程序库的实现者已知的编码之间的转换。

[:en]
Other encodings can be converted by specializing on a program-defined [`stateT]
type.
[:zh_CN]
其他的编码可以通过以由程序定义的 [`stateT] 类型进行的特化来进行转换。

[:en]
Objects of type [`stateT] can contain any state that is useful to communicate to
or from the specialized [`do_in] or [`do_out] members.
[:zh_CN]
类型 [`stateT] 的对象可以包含任何状态，以便于与特化的 [`do_in] 或 [`do_out] 成员
之间进行通信。
