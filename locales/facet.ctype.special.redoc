[section#facet.ctype.special
    [:en] [`ctype] specializations
    [:zh_CN] [`ctype] 的特化式
]

[%@library ctype<char>]
[codeblock:synopsis [!:mark ImpDef] ]
namespace std {
  template <>
    class ctype<char>
      : public locale::facet, public ctype_base {
    public:
      using char_type = char;
  
      explicit ctype(const mask* tab = 0, bool del = false, size_t refs = 0);

      bool is(mask m, char c) const;
      const char* is(const char* low, const char* high, mask* vec) const;
      const char* scan_is (mask m, const char* low, const char* high) const;
      const char* scan_not(mask m, const char* low, const char* high) const;

      char        toupper(char c) const;
      const char* toupper(char* low, const char* high) const;
      char        tolower(char c) const;
      const char* tolower(char* low, const char* high) const;

      char  widen(char c) const;
      const char* widen(const char* low, const char* high, char* to) const;
      char  narrow(char c, char dfault) const;
      const char* narrow(const char* low, const char* high, char dfault, char* to) const;

      static locale::id id;
      static const size_t table_size = [=ImpDef];

      const mask* table() const noexcept;
      static const mask* classic_table() noexcept;

    protected:
      ~ctype();
      virtual char        do_toupper(char c) const;
      virtual const char* do_toupper(char* low, const char* high) const;
      virtual char        do_tolower(char c) const;
      virtual const char* do_tolower(char* low, const char* high) const;

      virtual char        do_widen(char c) const;
      virtual const char* do_widen(const char* low, const char* high, char* to) const;
      virtual char        do_narrow(char c, char dfault) const;
      virtual const char* do_narrow(const char* low, const char* high,
                                    char dfault, char* to) const;
    };
}
[codeblock:end]

[para]
[:en]
A specialization [`ctype<char>] is provided so that the member functions on type
[`char] can be implemented [`inline].[#:note#fn:$section.1]
[:zh_CN]
提供了特化式 [`ctype<char>]，以使对于类型 [`char] 的成员函数可以实现为 [`inline]
。[#:note#fn:$section.1]

[note:foot#fn:$section.1]
[:en]
Only the [`char] (not [`unsigned char] and [`signed char]) form is provided.
[:zh_CN]
仅提供了 [`char] 的形式（而不是 [`unsigned char] 和 [`signed char]）。

[:en]
The specialization is specified in the standard, and not left as an
implementation detail, because it affects the derivation interface for
[`ctype<char>].
[:zh_CN]
该特化式是在标准中指定的，而不是作为实现的细节，这是因为它影响了 [`ctype<char>]
的派生接口。
[note:end]

[:en]
The [%@impldef value of [`ctype<char>::table_size]] implementation-defined value
of member [`table_size] is at least 256.
[:zh_CN]
[%@impldef [`ctype<char>::table_size] 的值]有时限定义的 [`table_size] 成员的值
至少为 256。

[include facet.ctype.char.dtor]

[include facet.ctype.char.members]

[include facet.ctype.char.statics]

[include facet.ctype.char.virtuals]
