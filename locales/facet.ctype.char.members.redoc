[section#facet.ctype.char.members
    [:en] Members
    [:zh_CN] 成员
]

[para]
[%@lib@member ctype<char>[!ctype<char>]]
[:en]
In the following member descriptions, for [`unsigned char] values [`v] where
[`v >= table_size], [`table()`[v`]] is assumed to have an
implementation-specific value (possibly different for each such value [`v])
without performing the array lookup.
[:zh_CN]
下列成员说明中，对于符合 [`v >= table_size] 的 [`unsigned char] 值 [`v]，均假设
[`table()`[v`]] 具有某个实现特有的值（可能对于每个这种 [`v] 值是不同的），而
不需要进行数组查找。

[%@lib@ctor ctype<char>]
[codeblock:declaration]
explicit ctype(const mask* tbl = nullptr, bool del = false, size_t refs = 0);
[codeblock:end]

[div:description]
[para:expects]
[:en] Either [`tbl == nullptr] is [`true] or [=range(tbl,tbl+table_size)] is a
valid range.
[:zh_CN] 要么 [`tbl == nullptr] 为 [`true]，要么 [=range(tbl,tbl+table_size)] 为
有效范围。

[para:effects]
[:en] Passes its [`refs] argument to its base class constructor.
[:zh_CN] 将其 [`refs] 实参传递给其基类的构造函数。
[div:end]

[%@lib@member ctype<char>[!is]]
[codeblock:declaration]
bool        is(mask m, char c) const;
const char* is(const char* low, const char* high, mask* vec) const;
[codeblock:end]

[div:description]
[para:effects]
[:en] The second form, for all [`*p] in the range [=range(low,high)], assigns
into [`vec`[p - low`]] the value [`table()`[(unsigned char)*p`]].
[:zh_CN] 第二种形式，对于范围 [=range(low,high)] 中的所有 [`*p]，将值
[`table()`[(unsigned char)*p`]] 赋值给 [`vec`[p - low`]]。

[para:returns]
[:en] The first form returns [`table()`[(unsigned char)c`] & m]; the second form
returns [`high].
[:zh_CN] 第一种形式返回 [`table()`[(unsigned char)c`] & m]；第二种形式返回 [`high]。
[div:end]

[%@lib@member ctype<char>[!scan_is]]
[codeblock:declaration]
const char* scan_is(mask m, const char* low, const char* high) const;
[codeblock:end]

[div:description]
[para:returns]
[:en] The smallest [`p] in the range [=range(low,high)] such that
[:zh_CN] 范围 [=range(low,high)] 中最小的 [`p]，能够使得

[codeblock]
table()[(unsigned char) *p] & m
[codeblock:end]

[:en@~] is [`true].
[:zh_CN] 为 [`true]。
[div:end]

[%@lib@member ctype<char>[!scan_not]]
[codeblock:declaration]
const char* scan_not(mask m, const char* low, const char* high) const;
[codeblock:end]

[div:description]
[para:returns]
[:en] The smallest [`p] in the range [=range(low,high)] such that
[:zh_CN] 范围 [=range(low,high)] 中最小的 [`p]，能够使得

[codeblock]
table()[(unsigned char) *p] & m
[codeblock:end]

[:en@~] is [`false].
[:zh_CN@~] 为 [`false]。
[div:end]

[%@lib@member ctype<char>[!toupper]]
[codeblock:declaration]
char        toupper(char c) const;
const char* toupper(char* low, const char* high) const;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`do_toupper(c)] or [`do_toupper(low, high)], respectively.
[:zh_CN] 相应的返回 [`do_toupper(c)] 或 [`do_toupper(low, high)]。
[div:end]

[%@lib@member ctype<char>[!tolower]]
[codeblock:declaration]
char        tolower(char c) const;
const char* tolower(char* low, const char* high) const;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`do_tolower(c)] or [`do_tolower(low, high)], respectively.
[:zh_CN] 相应的返回 [`do_tolower(c)] 或 [`do_tolower(low, high)]。
[div:end]

[%@lib@member ctype<char>[!widen]]
[codeblock:declaration]
char  widen(char c) const;
const char* widen(const char* low, const char* high, char* to) const;
[codeblock:end]

[div:description]
[para:returns]
[%@lib do_widen]
[:en] [`do_widen(c)] or [`do_widen(low, high, to)], respectively.
[:zh_CN] 相应的返回 [`do_widen(c)] 或 [`do_widen(low, high, to)]。
[div:end]

[%@lib@member ctype<char>[!narrow]]
[codeblock:declaration]
char        narrow(char c, char dfault) const;
const char* narrow(const char* low, const char* high, char dfault, char* to) const;
[codeblock:end]

[div:description]
[para:returns]
[:en] [%@lib do_narrow][`do_narrow(c, dfault)] or
[%@lib do_narrow][`do_narrow(low, high, dfault, to)], respectively.
[:zh_CN] 相应的返回 [%@lib do_narrow][`do_narrow(c, dfault)] 或
[%@lib do_narrow][`do_narrow(low, high, dfault, to)]。
[div:end]

[%@lib@member ctype<char>[!table]]
[codeblock:declaration]
const mask* table() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] The first constructor argument, if it was nonzero, otherwise
[`classic_table()].
[:zh_CN] 如果构造函数的第一个实参非零则返回它，否则返回 [`classic_table()]。
[div:end]
