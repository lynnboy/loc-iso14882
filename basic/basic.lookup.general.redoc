[section#basic.lookup.general
    [:en] General
    [:zh_CN] 概述
]
[%  [:en] scope [!name lookup and] [%lookup[!name]]
    [:zh_CN] 作用域 [!名字查找与～] [%查找[!名字～]]
]

[para]
[:en]
The name lookup rules apply uniformly to all names (including [~typedef-name]s
([#dcl.typedef]), [~namespace-name]s ([#basic.namespace]), and [~class-name]s
([#class.name])) wherever the grammar allows such names in the context discussed
by a particular rule.
[:zh_CN]
名字查找规则统一地应用于所有名字（包括 [~typedef-名]（[#dcl.typedef]），
[~命名空间名]（[#basic.namespace]），以及[~类名]（[#class.name]）等），只要根据
特定规则所考察的语境中这种名字被文法所接受。

[:en]
Name lookup associates the use of a name with a set of declarations ([#basic.def])
of that name.
[:zh_CN]
名字查找将名字的运用和该名字的一组声明式（[#basic.def]）关联起来。

[:en]
Unless otherwise specified, the program is ill-formed if no declarations are
found.
[:zh_CN]
除非另行指明，如果未能找到任何声明式，则程序非良构。

[:en]
If the declarations found by name lookup all denote functions or function
templates, the declarations are said to form an [+overload set].
[:zh_CN]
如果名字查找所找到的各个声明式都代表的是函数或函数模板；则称这些声明式构成一个
[+重载集合]。

[:en]
[%lookup[!ambiguous]]
Otherwise, if the declarations found by name lookup do not all denote the same
entity, they are [+ambiguous] and the program is ill-formed.
[:zh_CN]
[%查找[!有歧义]]
否则，如果名字查找所找到的各个声明式，并非都代表相同的实体，则它们[+有歧义]且
程序非良构。

[:en]
Overload resolution ([#over.match], [#over.load]) takes place after name lookup
has succeeded.
[:zh_CN]
在名字查找成功后进行重载决议（[#over.match]，[#over.load]）。

[:en]
The access rules ([#class.access]) are considered only once name lookup and
function overload resolution (if applicable) have succeeded.
[:zh_CN]
仅当名字查找和函数重载决议（如果适用）成功后，才考察访问规则（[#class.access]）。

[:en]
Only after name lookup, function overload resolution (if applicable) and access
checking have succeeded are the semantic properties introduced by the
declaration used in further processing.
[:zh_CN]
仅当名字查找、函数重载决议（如果适用）和访问检查都成功后，才能在进一步处理过程
中使用由该声明式所引入的各项语义性质。

[para]
[:en]
A program point [$P] is said to follow any declaration in the same translation
unit whose locus ([#basic.scope.pdecl]) is before [$P].
[:zh_CN]
程序的位置点 [$P] 被称为跟随同一翻译单元中的位点（[#basic.scope.pdecl]）处于 [$P]
之前的任何声明式之后。

[begin:note]
[:en]
The declaration might appear in a scope that does not contain [$P].
[:zh_CN]
声明式可能出现于并不包含 [$P] 的作用域之中。
[end:note]

[:en]
[%precede[%declaration[!precede]]]
A declaration [$X] [+precedes[%declaration[!precede]]] a program point [$P] in a
translation unit [$L] if [$P] follows [$X], [$X] inhabits a class scope and is
reachable from [$P], or else [$X] appears in a translation unit [$D] and
[:zh_CN]
[%先于[%声明式[!先于]]]
如果翻译单元 [$L] 中的某个程序位置点 [$P] 跟随声明式 [$X]，[$X] 居于某个类作用域
且从 [$P] 可达，或者 [$X] 出现于翻译单元 [$D] 中且满足如下条件，则 [$X]
[+先于[%声明式[!先于]]] [$P]：

[list]
[item]
[:en]
[$P] follows a [~module-import-declaration] or [~module-declaration] that
imports [$D] (directly or indirectly), and
[:zh_CN]
[$P] 跟随某个（直接或间接）导入 [$D] 的[~模块导入声明式]或[~模块声明式]，并且

[item]
[:en]
[$X] appears after the [~module-declaration] in [$D] (if any) and before the
[~private-module-fragment] in [$D] (if any), and
[:zh_CN]
[$X] 出现于 [$D] 中的[~模板声明式]（如果有）之后且在 [$D] 的[~私有模块分段]
（如果有）之前，并且

[item]
[:en]
either [$X] is exported or else [$D] and [$L] are part of the same module and
[$X] does not inhabit a namespace with internal linkage or declare a name with
internal linkage.
[:zh_CN]
要么 [$X] 被导出，要么 [$D] 和 [$L] 均属于同一个模块且 [$X] 不居于居于内部连接
的命名空间或它未声明具有内部连接的名字。

[begin:note]
[:en]
Names declared by a [~using-declaration] have no linkage.
[:zh_CN]
由 [~using-声明式]所声明的名字没有连接。
[end:note]
[list:end]

[begin:note]
[:en]
A [~module-import-declaration] imports both the named translation unit(s) and
any modules named by exported [~module-import-declaration]s within them,
recursively.
[:zh_CN]
[~模块导入声明式]同时会导入所指名的翻译单元，以及在它们之中由导出的
[~模块导入声明式]所指名的任何模块。

[begin:example]
[:en] Translation unit #1
[:zh_CN] 翻译单元 #1
[codeblock]
export module Q;
export int sq(int i) { return i*i; }
[codeblock:end]

[:en] Translation unit #2
[:zh_CN] 翻译单元 #2
[codeblock]
export module R;
export import Q;
[codeblock:end]

[:en] Translation unit #3
[:zh_CN] 翻译单元 #3
[codeblock]
import R;
int main() { return sq(9); }    // [:en] OK: [`sq] from module [`Q] \
                                [:zh_CN] OK：模块 [`Q] 中的 [`sq]
[codeblock:end]
[end:example]
[end:note]

[para]
[:en]
[%scope[!search[!single]]]
A [+:adj single search[%single[!search]]] in a scope [$S] for a name [$N] from
a program point [$P] finds all declarations that precede [$P] to which any name
that is the same as [$N] ([#basic.pre]) is bound in [$S].
[:zh_CN]
[%作用域[!搜索[!单次]]]
从程序位置点 [$P] 对名字 [$N] 在作用域 [$S] 中进行[+:adj 单次搜索[%搜索[!单次]]]，
找到先于 [$P] 的，在 [$S] 中与和 [$N] 相同的任何名字（[#basic.pre]）绑定的全部
声明式。

[:en]
If any such declaration is a [~using-declarator] whose terminal name
([#expr.prim.id.unqual]) is not dependent ([#temp.dep.type]), it is replaced by
the declarations named by the [~using-declarator] ([#namespace.udecl]).
[:zh_CN]
如果任何这种声明式是终端名（[#expr.prim.id.unqual]）非待决（[#temp.dep.type]）的
[~using-声明符]，则它被替换为该 [~using-声明符]所指名的声明式（[#namespace.udecl]）。

[para]
[:en]
In certain contexts, only certain kinds of declarations are included.
[:zh_CN]
某些语境下，仅包括特定种类的声明式。

[:en]
After any such restriction, any declarations of classes or enumerations are
discarded if any other declarations are found.
[:zh_CN]
经过任何这些限制后，如果找到了任何其他声明式，则丢弃任何类或枚举的声明式。

[begin:note]
[:en]
A type (but not a [~typedef-name] or template) is therefore hidden by any other
entity in its scope.
[:zh_CN]
因而类型（而不是 [~typedef-名]或模板）会被其作用域中的任何其他实体所隐藏。
[end:note]

[:en]
[%type-only[!lookup][%lookup[!type-only]]]
However, if a lookup is [+type-only[%lookup[!type-only]]], only declarations of
types and templates whose specializations are types are considered; furthermore,
if declarations of a [~typedef-name] and of the type to which it refers are
found, the declaration of the [~typedef-name] is discarded instead of the type
declaration.
[:zh_CN]
[%仅类型[!查找][%查找[!仅类型]]]
然而，如果是[+仅类型[%查找[!仅类型]]]查找，则仅考察类型和特例为类型的模板的
声明式；此外，如果找到了 [~typedef-名]的声明式和其所指代的类型的声明式，则放弃的
是这个 [~typedef-名]的声明式而非类型的声明式。
