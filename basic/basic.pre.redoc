[section#basic.pre
    [:en] Preamble
    [:zh_CN] 导言
]
[:en] [%type] [%object] [%storage class] [%scope] [%linkage]
[:zh_CN] [%类型] [%对象] [%存储类] [%作用域] [%连接]

[para]
[begin:note]
[:en] This Clause presents the basic concepts of the [=Cpp] language.
[:zh_CN] 本章给出了 [=Cpp] 语言中的基本概念。

[:en] It explains the difference between an object and a name and how they
relate to the value categories for expressions.
[:zh_CN] 在本章中解释了对象和名字的区别，以及它们怎样与表达式的值类别相联系。

[:en] It introduces the concepts of a declaration and a definition and presents
[=Cpp][=']s notion of type, scope, linkage, and storage duration.
[:zh_CN] 本章中引入了声明式和定义式的概念，并给出 [=Cpp] 的类型、作用域、连接以及存储期等概念。

[:en] The mechanisms for starting and terminating a program are discussed.
[:zh_CN] 本章还讨论了程序启动和终止的机制。

[:en] Finally, this Clause presents the fundamental types of the language and
lists the ways of constructing compound types from these.
[:zh_CN] 最后，本章介绍了语言中的基础类型，并列出了用它们构造出复合类型的途径。
[end:note]

[para]
[begin:note]
[:en] This Clause does not cover concepts that affect only a single part of the language.
[:zh_CN] 本章中不涉及仅对语言的某一部分有影响的概念。

[:en] Such concepts are discussed in the relevant Clauses.
[:zh_CN] 这样的概念将在其相关章节中讨论。
[end:note]

[para]
[:en] A [+name] is an [~identifier] ([#lex.name]), [~conversion-function-id] ([#class.conv.fct]),
[~operator-function-id] ([#over.oper]), or [~literal-operator-id] ([#over.literal]).
[:zh_CN] [+名字]是[~标识符]（[#lex.name]），[~转换函数标识]（[#class.conv.fct]），
[~运算符函数标识]（[#over.oper]），或[~字面量运算符标识]（[#over.literal]）。

[para]
[:en] Two names are [+the same[%name[!same]]] if
[:zh_CN] 以下情况下，两个名字[+相同[%名字[!相同]]]：

[list]
[item]
[:en] they are [~identifier]s composed of the same character sequence, or
[:zh_CN] 它们都是由相同的字符序列构成的[~标识符]，或者
[item]
[:en] they are [~conversion-function-id]s formed with equivalent ([#temp.over.link])
types, or
[:zh_CN] 它们都是以等价（[#temp.over.link]）的类型构成的[~转换函数标识]，或者
[item]
[:en] they are [~operator-function-id]s formed with the same operator, or
[:zh_CN] 它们都是以相同的运算符构成的[~运算符函数标识]，或者
[item]
[:en] they are [~literal-operator-id]s ([#over.literal]) formed with the same
literal suffix identifier.
[:zh_CN] 它们都是以相同的字面量后缀标识符构成的[~字面量运算符标识]（[#over.literal]）。
[list:end]

[para]
[:en] Every name is introduced by a [+declaration], which is a
[:zh_CN] 每个名字都是由[+声明式]所引入的，它们是

[list]
[item]
[:en@~] [~name-declaration], [~block-declaration], or [~member-declaration]
([#dcl.pre], [#class.mem]),
[:zh_CN@~] [~名字声明式]，[~块声明式]，或[~成员声明式]（[#dcl.pre]，[#class.mem]），
[item]
[:en@~] [~init-declarator] ([#dcl.decl]),
[:zh_CN@~] [~带初始化声明符]（[#dcl.decl]），
[item]
[:en@~] [~identifier] in a structured binding declaration ([#dcl.struct.bind]),
[:zh_CN@~] 结构化绑定声明式中的[~标识符]（[#dcl.struct.bind]），
[item]
[:en@~] [~identifier] in a [~result-name-introducer] in a postcondition
assertion ([#dcl.contract.res]),
[:zh_CN@~] 后条件断言中的[~结果名引入符]中的[~标识符]（[#dcl.contract.res]），
[item]
[:en@~] [~init-capture] ([#expr.prim.lambda.capture]),
[:zh_CN@~] [~带初始化俘获符]（[#expr.prim.lambda.capture]），
[item]
[:en@~] [~condition] with a [~declarator] ([#stmt.pre]),
[:zh_CN@~] 带有[~声明符]的[~条件]（[#stmt.pre]），
[item]
[:en@~] [~member-declarator] ([#class.mem]),
[:zh_CN@~] [~成员声明符]（[#class.mem]），
[item]
[:en@~] [~using-declarator] ([#namespace.udecl]),
[:zh_CN@~] [~using-声明符]（[#namespace.udecl]），
[item]
[:en@~] [~parameter-declaration] ([#dcl.fct], [#temp.param]),
[:zh_CN@~] [~形参声明式]（[#dcl.fct]，[#temp.param]），
[item]
[:en@~] [~type-parameter] ([#temp.param]),
[:zh_CN@~] [~类型形参]（[#temp.param]），
[item]
[:en@~] [~type-tt-parameter] ([#temp.param]),
[:zh_CN@~] [~类型-tt-形参]（[#temp.param]），
[item]
[:en@~] [~variable-tt-parameter] ([#temp.param]),
[:zh_CN@~] [~变量-tt-形参]（[#temp.param]），
[item]
[:en@~] [~concept-tt-parameter] ([#temp.param]),
[:zh_CN@~] [~概念-tt-形参]（[#temp.param]），
[item]
[:en@~] [~elaborated-type-specifier] that introduces a name ([#dcl.type.elab]),
[:zh_CN@~] 引入名字的[~详述类型说明符]（[#dcl.type.elab]），
[item]
[:en@~] [~class-specifier] ([#class.pre]),
[:zh_CN@~] [~类说明符]（[#class.pre]），
[item]
[:en@~] [~enum-specifier] or [~enumerator-definition] ([#dcl.enum]),
[:zh_CN@~] [~枚举说明符]或[~枚举符定义式]（[#dcl.enum]），
[item]
[:en@~] [~exception-declaration] ([#except.pre]), or
[:zh_CN@~] [~异常声明式]（[#except.pre]），或者
[item]
[:en@~] implicit declaration of an injected-class-name ([#class.pre]).
[:zh_CN@~] 注入类名的隐含声明式（[#class.pre]）。
[list:end]

[begin:note]
[:en] The interpretation of a [~for-range-declaration] produces one or more of
the above ([#stmt.ranged]).
[:zh_CN] 对 [~for-范围声明式]的判读会产生以上一项或多项（[#stmt.ranged]）。
[end:note]

[para]
[begin:note]
[:en] Some names denote types or templates.
[:zh_CN] 一些名字所代表的是类型或模板。

[:en] In general, whenever a name is encountered it is necessary to look it up
([#basic.lookup]) to determine whether that name denotes one of these entities
before continuing to parse the program that contains it.
[:zh_CN] 一般来说，每当遇到一个名字时，在继续对包含这个名字的程序进行解析之前，
必须查找出它（[#basic.lookup]）以确定它是否代表这些实体中的某一个。
[end:note]

[para]
[:en] A [+variable] is introduced by the declaration of a reference other than a
non-static data member or of an object.
[:zh_CN] [+变量]是由（不是非静态数据成员的）引用的声明式，以及对象的声明式所引入的。

[para]
[:en] An [+entity] is a variable, structured binding, result binding, function,
enumerator, type, type alias, non-static data member, bit-field, template,
namespace, namespace alias, template parameter, function parameter, or [~init-capture].
[:zh_CN] [+实体]有：变量，结构化绑定，结果绑定，函数，枚举符，类型，类型别名，非静态数据成员，
位字段，模板，命名空间，命名空间别名，模板形参，函数形参，以及[~带初始化俘获符]。

[:en] The [+:adj underlying[!entity]] of an entity is that entity
unless otherwise specified.
[:zh_CN] 除非另有规定，否则实体的[+:adj 底层[!实体]]就是该实体。

[:en] A name [+denotes[%denote]] the underlying entity of
the entity declared by each declaration that introduces the name.
[:zh_CN] 名字[+代表]引入该名字的每个声明式所声明的实体的底层实体。

[begin:note]
[:en] Type aliases and namespace aliases have underlying entities
that are distinct from themselves.
[:zh_CN] 类型别名和命名空间别名的底层实体与它们本身是不同的。
[end:note]

[para]
[:en] A [+:adj local [!entity]] is a variable with automatic storage duration
([#basic.stc.auto]), a structured binding ([#dcl.struct.bind]) whose
corresponding variable is such an entity, a result binding ([#dcl.contract.res]),
or the [`*[`:key this]] object ([#expr.prim.this]).
[:zh_CN] [+:adj 局部[!实体]]，包括具有自动存储期（[#basic.stc.auto]）的变量，
对应变量为这种实体的结构化绑定（[#dcl.struct.bind]），结果绑定（[#dcl.contract.res]），
以及 [`*[`:key this]] 对象（[#expr.prim.this]）。

[para]
[:en] [%translation unit[!name and]] [%linkage]
A name used in more than one translation unit can potentially refer to the same
entity in these translation units depending on the linkage ([#basic.link]) of
the name specified in each translation unit.
[:zh_CN] [%翻译单元[!名字与～]] [%连接]
在多个翻译单元中使用的某个名字，根据在每个翻译单元中对该名字所指定的连接
（[#basic.link]），可以潜在地在这些翻译单元中代表相同的实体。
