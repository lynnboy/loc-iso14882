[section#namespace.qual
    [:en] Namespace members
    [:zh_CN] 命名空间成员
]

[para]
[:en]
Qualified name lookup in a namespace [$N] additionally searches every element of
the inline namespace set of [$N] ([#namespace.def]).
[:zh_CN]
在命名空间 [$N] 中的限定名查找还要搜索 [$N] 的内联命名空间集合（[#namespace.def]）
的每个成员。

[:en]
If nothing is found, the results of the lookup are the results of qualified name
lookup in each namespace nominated by a [~using-directive] that precedes the
point of the lookup and inhabits [$N] or an element of [$N][=']s inline
namespace set.
[:zh_CN]
如果未找到任何东西，则查找的结果为，对于先于查找点并居于 [$N] 或 [$N] 的内联
命名空间集合成员中的 [~using-指令]，在它们所提名的每个命名空间中进行限定名查找的
结果。

[begin:note]
[:en]
If a [~using-directive] refers to a namespace that has already been considered,
it does not affect the result.
[:zh_CN]
如果某个 [~using-指令]指代已被考察过的命名空间，则它对结果没有影响。
[end:note]

[begin:example]
[codeblock]
int x;
namespace Y {
  void f(float);
  void h(int);
}

namespace Z {
  void h(double);
}

namespace A {
  using namespace Y;
  void f(int);
  void g(int);
  int i;
}

namespace B {
  using namespace Z;
  void f(char);
  int i;
}

namespace AB {
  using namespace A;
  using namespace B;
  void g();
}

void h()
{
  AB::g();          // [:en] [`g] is declared directly in [`AB], therefore [`S] is [$\{ [`AB::g()] \}] and [`AB::g()] is chosen \
                    [:zh_CN] [`AB] 中直接声明了 [`g]，故 [`S] 为 [$\{ [`AB::g()] \}] 并选取 [`AB::g()]

  AB::f(1);         // [:en] [`f] is not declared directly in [`AB] so the rules are applied recursively to [`A] and [`B]; \
                    [:zh_CN] [`AB] 中并未直接声明 [`f]，因此对 [`A] 和 [`B] 递归应用查找规则；
                    // [:en@~] namespace [`Y] is not searched and [`Y::f(float)] is not considered; \
                    [:zh_CN@~] 未搜索命名空间 [`Y] 且未考察 [`Y::f(float)]；
                    // [:en@~] [`S] is [$\{ [`A::f(int)], [`B::f(char)] \}] and overload resolution chooses [`A::f(int)] \
                    [:zh_CN@~] [`S] 为 [$\{ [`A::f(int)], [`B::f(char)] \}] 而重载决议选取 [`A::f(int)]

  AB::f('c');       // [:en] as above but resolution chooses [`B::f(char)] \
                    [:zh_CN] 同上，但重载决议选取 [`B::f(char)]

  AB::x++;          // [:en] [`x] is not declared directly in [`AB], and is not declared in [`A] or [`B], so the rules \
                    [:zh_CN] [`AB] 中并未直接声明 [`x] 而且也未在 [`A] 或 [`B] 中声明，因此
                    // [:en@~] are applied recursively to [`Y] and [`Z], [`S] is [$\{ \}] so the program is ill-formed \
                    [:zh_CN@~] 对 [`Y] 和 [`Z] 递归应用查找规则，[`S] 为 [$\{ \}]，因此程序非良构

  AB::i++;          // [:en] [`i] is not declared directly in [`AB] so the rules are applied recursively to [`A] and [`B], \
                    [:zh_CN] [`AB] 中并未直接声明 [`i]，因此对 [`A] 和 [`B] 递归应用查找规则，
                    // [:en] [`S] is [$\{ [`A::i], [`B::i] \}] so the use is ambiguous and the program is ill-formed \
                    [:zh_CN@~] [`S] 为 [$\ [`A::i], [`B::i] \}]，因此该使用有歧义且程序非良构

  AB::h(16.8);      // [:en] [`h] is not declared directly in [`AB] and not declared directly in [`A] or [`B] so the rules \
                    [:zh_CN] [`AB] 中并未直接声明 [`h] 而且也未在 [`A] 或 [`B] 中声明，因此
                    // [:en@~] are applied recursively to [`Y] and [`Z], [`S] is [$\{ [`Y::h(int)], [`Z::h(double)] \}] and \
                    [:zh_CN@~] 对 [`Y] 和 [`Z] 递归应用查找规则，[`S] 为 [$\{ [`Y::h(int)], [`Z::h(double)] \}]，
                    // [:en@~] overload resolution chooses [`Z::h(double)] \
                    [:zh_CN@~] 而重载决议选取 [`Z::h(double)]
}
[codeblock:end]
[end:example]

[para]
[begin:note]
[:en]
The same declaration found more than once is not an ambiguity (because it is
still a unique declaration).
[:zh_CN]
多次找到同一个声明式不会造成歧义（因为它仍是唯一的声明式）。

[begin:example]
[codeblock]
namespace A {
  int a;
}

namespace B {
  using namespace A;
}

namespace C {
  using namespace A;
}

namespace BC {
  using namespace B;
  using namespace C;
}

void f()
{
  BC::a++;          // [:en] OK, [`S] is [$\{ [`A::a], [`A::a] \}] \
                    [:zh_CN] OK，[`S] 为 [$\{ [`A::a], [`A::a] \}]
}

namespace D {
  using A::a;
}

namespace BD {
  using namespace B;
  using namespace D;
}

void g()
{
  BD::a++;          // [:en] OK, [`S] is [$\{ [`A::a], [`A::a] \}] \
                    [:zh_CN] OK，[`S] 为 [$\{ [`A::a], [`A::a] \}]
}
[codeblock:end]
[end:example]
[end:note]

[para]
[begin:example]
[:en]
Because each referenced namespace is searched at most once, the following is
well-defined:
[:zh_CN]
由于所涉指的每个命名空间最多被搜索一次，所以如下程序是良构的：

[codeblock]
namespace B {
  int b;
}

namespace A {
  using namespace B;
  int a;
}

namespace B {
  using namespace A;
}

void f()
{
  A::a++;           // [:en] OK, [`a] declared directly in [`A], [`S] is [$\{ [`A::a] \}] \
                    [:zh_CN] OK，[`A] 中直接声明了 [`a]，[`S] 为 [$\{ [`A::a] \}]
  B::a++;           // [:en] OK, both [`A] and [`B] searched (once), [`S] is [$\{ [`A::a] \}] \
                    [:zh_CN] OK，[`A] 和 [`B] 都进行了（一次）搜索，[`S] 为 [$\{ [`A::a] \}]
  A::b++;           // [:en] OK, both [`A] and [`B] searched (once), [`S] is [$\{ [`B::b] \}] \
                    [:zh_CN] OK，[`A] 和 [`B] 都进行了（一次）搜索，[`S] 为 [$\{ [`B::b] \}]
  B::b++;           // [:en] OK, [`b] declared directly in [`B], [`S] is [$\{ [`B::b] \}] \
                    [:zh_CN] OK，[`B] 中直接声明了 [`b]，[`S] 为 [$\{ [`B::b] \}]
}
[codeblock:end]
[end:example]

[para]
[begin:note]
[:en]
Class and enumeration declarations are not discarded because of other
declarations found in other searches.
[:zh_CN]
不会因为其他搜索中找到的其他声明式而丢弃类和枚举的声明式。
[end:note]

[begin:example]
[codeblock]
namespace A {
  struct x { };
  int x;
  int y;
}

namespace B {
  struct y { };
}

namespace C {
  using namespace A;
  using namespace B;
  int i = C::x;     // [:en] OK, [`A::x] (of type [`int]) \
                    [:zh_CN] OK，[`A::x]（类型为 [`int]）
  int j = C::y;     // [:en] ambiguous, [`A::y] or [`B::y] \
                    [:zh_CN] 有歧义，[`A::y] 或 [`B::y]
}
[codeblock:end]
[end:example]
