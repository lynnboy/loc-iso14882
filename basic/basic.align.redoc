[section#basic.align
    [:en] Alignment
    [:zh_CN] 对齐
]

[para]
[:en]
Object types have [+alignment requirements [%alignment requirement
[!implementation-defined]]] ([#basic.fundamental], [#basic.compound]) which
place restrictions on the addresses at which an object of that type may be
allocated.
[:zh_CN]
对象类型带有[+对齐要求[%对齐要求[!由实现定义的～]]]（[#basic.fundamental]，
[#basic.compound]），它限制了该类型的对象可以被分配的地址。

[:en]
An [+alignment] is an [?impldef alignment] integer value representing the number
of bytes between successive addresses at which a given object can be allocated.
[:zh_CN]
[+对齐]是[?impldef 对齐]整数值，表示相邻的可以分配给给定对象的地址之间的字节数。

[:en]
An object type imposes an alignment requirement on every object of that type;
stricter alignment can be requested using the alignment specifier ([#dcl.align]).
[:zh_CN]
对象类型中蕴含了该类型的每个对象的对齐要求；可以用对齐说明符（[#dcl.align]）来
要求更加严格的对齐。

[para]
[:en]
A [+:adj fundamental [!alignment]] is represented by an alignment less than or
equal to the greatest alignment supported by the implementation in all contexts,
which is equal to [`[`:key alignof](std::max_align_t)] ([#support.types]).
[:zh_CN]
[+:adj 基础[!对齐]]是小于或等于实现在所有语境中都支持的对齐中的最大对齐，它等于
[`[`:key alignof](std::max_align_t)]（[#support.types]）。

[:en]
The alignment required for a type may be different when it is used as the type
of a complete object and when it is used as the type of a subobject.
[:zh_CN]
某个类型所要求的对齐，当将其用作完整对象的类型，以及当将其用作某个子对象的类型时，
可以是不同的。

[begin:example]
[codeblock]
struct B { long double d; };
struct D : virtual B { char c; };
[codeblock:end]

[:en]
When [`D] is the type of a complete object, it will have a subobject of type [`B],
so it must be aligned appropriately for a [`[`:key long] [`:key double]].
[:zh_CN]
当 [`D] 是完整对象的类型时，它将具有 [`B] 类型的子对象，因此它必须为
[`[`:key long] [`:key double]] 适当地对齐。

[:en]
If [`D] appears as a subobject of another object that also has [`B] as a virtual
base class, the [`B] subobject might be part of a different subobject, reducing
the alignment requirements on the [`D] subobject.
[:zh_CN]
当 [`D] 作为另一个同样以 [`B] 作为虚基类的对象的子对象时，[`B] 子对象可能是某个
不同子对象的子对象，从而减弱了 [`D] 子对象的对齐要求。
[end:example]

[:en]
The result of the [`:key alignof] operator reflects the alignment requirement of
the type in the complete-object case.
[:zh_CN]
[`:key alignof] 运算符的结果，反映完整对象的情况下类型的对齐要求。

[para]
[:en]
An [+:adj extended[!alignment]] is represented by an alignment greater than
[`[`:key alignof](std::max_align_t)].
[:zh_CN]
[+:adj 扩充[!对齐]]是大于 [`[`:key alignof](std::max_align_t)] 的对齐。

[:en]
It is [?impldef support for extended alignments] whether any extended alignments
are supported and the contexts in which they are supported ([#dcl.align]).
[:zh_CN]
是否支持任何扩充对齐，以及在何种语境中支持它们是[?impldef 是否支持扩充对齐]
（[#dcl.align]）。

[:en]
A type having an extended alignment requirement is an [+:adj over-aligned[!type]].
[:zh_CN]
带有扩充对齐要求的类型是[+:adj 过量对齐[!类型]]。

[begin:note]
[:en]
Every over-aligned type is or contains a class type to which extended alignment
applies (possibly through a non-static data member).
[:zh_CN]
每个过量对齐类型都是一个，或者（可能通过其非静态数据成员而）包含一个适用扩充对齐
的类类型。
[end:note]

[:en]
A [+:adj new-extended[!alignment]] is represented by an alignment greater than
[`__STDCPP_DEFAULT_NEW_ALIGNMENT__] ([#cpp.predefined]).
[:zh_CN]
大于 [`__STDCPP_DEFAULT_NEW_ALIGNMENT__]（[#cpp.predefined]）的对齐表示
[+:adj new 扩充[!对齐]]。

[para]
[:en]
Alignments are represented as values of the type [`std::size_t].
[:zh_CN]
对齐由 [`std::size_t] 类型的值表示。

[:en]
Valid alignments include only those values returned by an [`:key alignof]
expression for the fundamental types plus an additional [?impldef alignment
additional values] set of values, which may be empty.
[:zh_CN]
有效的对齐仅包括由基础类型的 [`:key alignof] 表达式所返回的值，再加上额外的可能
为空的[?impldef 额外的对齐值]值集合。

[:en]
Every alignment value shall be a non-negative integral power of two.
[:zh_CN]
每个对齐值都应是二的非负整数次幂。

[para]
[:en]
Alignments have an order from [+weaker[%alignment[!weaker]]] to
[+stronger[%alignment[!stronger]]] or [+stricter[%alignment[!stricter]]]
alignments.
[:zh_CN]
对齐有从[+更弱[%对齐[!弱]]]的对齐到[+更强[%对齐[!强]]]或[+更严格[%对齐[!严格]]]
的对齐的顺序。

[:en]
Stricter alignments have larger alignment values.
[:zh_CN]
越严格的对齐具有越大的对齐值。

[:en]
An address that satisfies an alignment requirement also satisfies any weaker
valid alignment requirement.
[:zh_CN]
满足某个对齐要求的地址同样满足任意更弱的有效对齐要求。

[para]
[:en]
The alignment requirement of a complete type can be queried using an
[`:key alignof] expression ([#expr.alignof]).
[:zh_CN]
可以使用 [`:key alignof] 表达式来查询完整类型的对齐要求（[#expr.alignof]）。

[:en]
Furthermore, the narrow character types ([#basic.fundamental]) shall have the
weakest alignment requirement.
[:zh_CN]
此外，窄字符类型（[#basic.fundamental]）应当带有最弱的对齐要求。

[begin:note]
[:en]
This enables the ordinary character types to be used as the underlying type for
an aligned memory area ([#dcl.align]).
[:zh_CN]
这使得可以将普通字符类型用作已对齐内存区域的底层类型（[#dcl.align]）。
[end:note]

[para]
[:en]
Comparing alignments is meaningful and provides the obvious results:
[:zh_CN]
对对齐进行比较是有意义的，并且产生明确的结果：

[list]
[item]
[:en] Two alignments are equal when their numeric values are equal.
[:zh_CN] 当两个对齐的数值相等时它们相同。
[item]
[:en] Two alignments are different when their numeric values are not equal.
[:zh_CN] 当两个对齐的数值不相等时它们不同。
[item]
[:en] When an alignment is larger than another it represents a stricter
alignment.
[:zh_CN] 当某个对齐大于另一个时，它表示更严格的对齐。
[list:end]

[para]
[begin:note]
[:en]
The runtime pointer alignment function ([#ptr.align]) can be used to obtain an
aligned pointer within a buffer; an [~alignment-specifier] ([#dcl.align]) can be
used to obtain aligned storage.
[:zh_CN]
运行时指针对齐函数（[#ptr.align]）可以用于在缓冲区中获取经过对齐的指针；
[~对齐说明符]（[#dcl.align]）可以用于获取经过对齐的存储。
[end:note]

[para]
[:en]
If a request for a specific extended alignment in a specific context is not
supported by an implementation, the program is ill-formed.
[:zh_CN]
若在特定语境中所要求的特定扩充对齐并未被实现支持，则程序非良构。
