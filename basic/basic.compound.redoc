[section#basic.compound
    [:en] Compound types
    [:zh_CN] 复合类型
]

[para]
[:en] [%type[!compound]]
Compound types can be constructed in the following ways:
[:zh_CN] [%类型[!复合～]]
复合类型可通过如下方式构成：

[list]
[item]
[:en] [+arrays [%type[!array]]] of objects of a given type, [#dcl.array];
[:zh_CN] 给定类型对象的[+数组[%类型[!数组～]]]，[#dcl.array]；

[item]
[:en] [+functions[%type[!function]]], which have parameters of given types and
return [`:key void] or a result of a given type, [#dcl.fct];
[:zh_CN] 具有给定类型的形参，并返回 [`:key void] 或给定类型的结果的
[+函数[%类型[!函数～]]]，[#dcl.fct]；

[item]
[:en] [+pointers[%type[!pointer]]] to [=cv] [`:key void] or objects or functions
(including static members of classes) of a given type, [#dcl.ptr];
[:zh_CN] 指向 [=cv] [`:key void] 或者给定类型的对象或函数（包括类的静态成员）的
[+指针[%类型[!指针～]]]，[#dcl.ptr]；

[item]
[:en] [%reference[!lvalue]] [%reference[!rvalue]]
[+references[%reference]] to objects or functions of a given type, [#dcl.ref].
[:zh_CN] [%引用[!左值～]] [%引用[!右值～]]
给定类型的对象或函数的[+引用]，[#dcl.ref]。

[:en] There are two types of references:
[:zh_CN] 有两种类型的引用：

[list]
[item]
[:en@~] lvalue reference
[:zh_CN@~] 左值引用
[item]
[:en@~] rvalue reference
[:zh_CN@~] 右值引用
[list:end]

[item]
[:en] [+classes[%class]] containing a sequence of class members ([#class], [#class.mem]),
and a set of restrictions on the access to these entities ([#class.access]);
[:zh_CN] [+类]，包含一个类成员的序列（[#class]，[#class.mem]），以及一组针对这些实体的
访问限制（[#class.access]）；

[item]
[:en] [+unions[%[`union]]], which are classes capable of containing objects of
different types at different times, [#class.union];
[:zh_CN] [+联合体[%[`union]]]，是能够在不同时间包含不同类型的对象的类，[#class.union]；

[item]
[:en] [+enumerations[%[`enum]]], which comprise a set of named constant values, [#dcl.enum];
[:zh_CN] [+枚举[%[`enum]]]，由一组具名常量值构成，[#dcl.enum]；

[item]
[:en] [%member pointer to [%pointer to member]]
[+pointers to non-static class members[%pointer to member]],[#:fn] which
identify members of a given type within objects of a given class, [#dcl.mptr].
[:zh_CN] [%指向成员的指针[%成员指针]]
[+指向非静态类成员的指针[%成员指针]][#:fn]，在给定类的对象中识别给定类型的成员，[#dcl.mptr]。

[note:foot]
[:en] Static class members are objects or functions, and pointers to them are
ordinary pointers to objects or functions.
[:zh_CN] 静态类成员就是对象或函数，而且指向它们的指针就是普通的指向对象或函数的指针。
[note:end]

[:en] Pointers to data members and pointers to member functions are collectively
called [+:% pointer-to-member] types.
[:zh_CN] 指向数据成员的指针和指向成员函数的指针统称为[+:% 成员指针]类型。
[list:end]

[para]
[:en] These methods of constructing types can be applied recursively;
restrictions are mentioned in [#dcl.meaning].
[:zh_CN] 这些类型构成方法可以递归应用；在 [#dcl.meaning] 中提到其限制。

[:en] Constructing a type such that the number of bytes in its object
representation exceeds the maximum value representable in the type [`std::size_t]
([#support.types]) is ill-formed.
[:zh_CN] 所构成的类型，其对象表示中的字节数超出类型 [`std::size_t]（[#support.types]）
的可表示的最大值，是非良构的。

[para]
[:en] [%terminology[!pointer]]
The type of a pointer to [=cv] [`:key void] or a pointer to an object type is
called an [+object pointer type].
[:zh_CN] [%术语[!指针]]
指向 [=cv] [`:key void] 的指针或指向对象类型的指针的类型被称为[+对象指针类型]。

[begin:note]
[:en] A pointer to [`:key void] does not have a pointer-to-object type, however,
because [`:key void] is not an object type.
[:zh_CN] 但 [`:key void] 的指针并不具有指向对象的指针（pointer-to-object）类型，
这是因为 [`:key void] 不是对象类型。
[end:note]

[:en] The type of a pointer that can designate a function is called a
[+function pointer type].
[:zh_CN] 能够代表函数的指针类型被称为[+函数指针类型]。

[:en] A pointer to an object of type [`T] is referred to as a [=lq]pointer to [`T][=rq].
[:zh_CN] 指向 [`T] 类型的对象的指针被称为“[`T] 的指针”。

[begin:example]
[:en] A pointer to an object of type [`:key int] is referred to as
[=lq]pointer to [`:key int][=rq] and a pointer to an object of class [`X] is
called a [=lq]pointer to [`X][=rq].
[:zh_CN] 指向类型 [`:key int] 的对象的指针被称为“[`:key int] 的指针”，而指向类
[`X] 的对象的指针被称为“[`X] 的指针”。
[end:example]

[:en] Except for pointers to static members, text referring to [=lq]pointers[=rq]
does not apply to pointers to members.
[:zh_CN] 除了指向静态成员的指针外，提及“指针”的文字不适用与成员指针。

[:en] Pointers to incomplete types are allowed although there are restrictions
on what can be done with them ([#basic.types.general]).
[:zh_CN] 允许指向不完整类型的指针，但对用它们能做什么有限制（[#basic.types.general]）。

[:en] [%address]
Every value of pointer type is one of the following:
[:zh_CN] [%地址]
指针类型的值是以下之一：

[list]
[item]
[:en] a [+pointer to] an object or function (the pointer is said to [+point] to
the object or function), or
[:zh_CN] 指向对象或函数的[+指针]（该指针被称为[+指向]这个对象或函数），或

[item]
[:en] a [+pointer past the end of] an object ([#expr.add]), or
[:zh_CN] [+越过对象末尾的指针[%越过末尾的指针]]（[#expr.add]），或

[item]
[:en] [%null pointer value[%value[!null pointer]]]
the [+null pointer value[%value[!null pointer]]] for that type, or
[:zh_CN] [%空指针值[%值[!空指针～]]]
该类型的[+空指针值[%值[!空指针～]]]，或

[item]
[:en] [%invalid pointer value[%value[!invalid pointer]]]
an [+invalid pointer value[%value[!invalid pointer]]].
[:zh_CN] [%无效指针值[%值[!无效指针～]]]
[+无效指针值[%值[!无效指针～]]]。
[list:end]

[:en] A value of a pointer type that is a pointer to or past the end of an object
[+represents the address] of the first byte in memory ([#intro.memory]) occupied
by the object[#:fn] or the first byte in memory after the end of the storage
occupied by the object, respectively.
[:zh_CN] 指针类型的指向对象或越过对象末尾的值，分别[+表示[%表示～的地址]]由对象
所占据的内存（[#intro.memory]）的第一个字节[#:fn]，或内存中对象所占据的存储末尾
之后的第一个字节的[+地址[%]]。

[note:foot]
[:en] For an object that is not within its lifetime, this is the first byte in
memory that it will occupy or used to occupy.
[:zh_CN] 对于并不处于生存期内的对象来说，这是其将要占据或曾经占据的内存的第一个字节。
[note:end]

[begin:note]
[:en] A pointer past the end of an object ([#expr.add]) is not considered to
point to an unrelated object of the object[=']s type, even if the unrelated
object is located at that address.
[:zh_CN] 越过对象末尾的指针（[#expr.add]），并不被当成是指向这个对象类型的某个
无关对象，即便这个无关对象就位于该地址。
[end:note]

[:en] For purposes of pointer arithmetic ([#expr.add]) and comparison ([#expr.rel],
[#expr.eq]), a pointer past the end of the last element of an array [`x] of [$n]
elements is considered to be equivalent to a pointer to a hypothetical array
element [$n] of [`x], and an object of type [`T] that is not an array element is
considered to belong to an array with one element of type [`T].
[:zh_CN] 为进行指针算术（[#expr.add]）和比较（[#expr.rel]，[#expr.eq]），越过
[$n] 元数组 [`x] 的最后一个元素的末尾的指针，可被当做是等价于指向 [`x] 的一个
虚构的数组元素 [$n]，而一个并非数组元素的 [`T] 类型的对象可被当作属于某个具有
单个 [`T] 类型元素的数组。

[:en] The value representation of pointer types is [?impldef value representation
of pointer types].
[:zh_CN] 指针类型的值表示是[?impldef 指针类型的值表示]。

[:en] Pointers to layout-compatible types shall have the same value
representation and alignment requirements ([#basic.align]).
[:zh_CN] 指向布局兼容类型的指针应当具有相同的值表示和对齐要求（[#basic.align]）。

[begin:note]
[:en] Pointers to over-aligned types ([#basic.align]) have no special
representation, but their range of valid values is restricted by the extended
alignment requirement.
[:zh_CN] 指向过量对齐类型（[#basic.align]）的指针没有特殊的表示，但其
扩充对齐要求限制了它们的有效值的范围。
[end:note]

[para]
[:en] A pointer value [$P] is
[%value[!valid in the context of an evaluation]][+valid in the context of]
an evaluation [$E] if [$P] is a pointer to function or a null pointer value, or
if it is a pointer to or past the end of an object [$O] and [$E] happens before
the end of the duration of the region of storage for [$O].
[:zh_CN] 如果指针值 [$P] 是函数指针或空指针值，或者如果它是指向某对象 [$O] 或其
尾后位置的指针且求值 [$E] 发生早于 [$O] 的存储区域的持续期结束，那么 [$P]
[+:% 在] [$E] [+的语境中有效[%在～的语境中有效]][%值[!在某求值的语境中有效]]。

[:en] If a pointer value [$P] is used in an evaluation [$E] and [$P] is not
valid in the context of [$E], then the behavior is undefined if [$E] is
an indirection ([#expr.unary.op]) or an invocation of a deallocation function
([#basic.stc.dynamic.deallocation]), and [?impldef invalid pointer value in the
context of an evaluation] otherwise.
[:zh_CN] 如果在求值 [$E] 中使用指针值 [$P]，而 [$P] 并非在 [$E] 的语境中有效，则
当 [$E] 是间接（[#expr.unary.op]）或对回收函数（[#basic.stc.dynamic.deallocation]）
的调用时其行为未定义，否则其行为[?impldef 求值语境中的无效指针值]。

[note:foot]
[:en] Some implementations might define that
copying such a pointer value causes a system-generated runtime fault.
[:zh_CN] 一些实现可能会定义复制一个这种指针值时将导致系统生成的运行时故障。
[note:end]

[begin:note]
[:en] [$P] can be valid in the context of [$E] even if it points to a type
unrelated to that of [$O] or if [$O] is not within its lifetime,
although further restrictions apply to such pointer values
([#basic.life], [#basic.lval], [#expr.add]).
[:zh_CN] 即使 [$P] 所指向的类型与 [$O] 的类型无关，或者 [$O] 并不处于其生存期内，
[$P] 在 [$E] 的语境中仍然可以是有效的，虽然对这种指针值有进一步的限制。
[end:note]

[para]
[:en] Two objects [^a] and [^b] are [+pointer-interconvertible] if
[:zh_CN] 以下情况下称两个对象 [^a] 和 [^b] [+指针可相互转换]：

[list]
[item]
[:en] they are the same object, or
[:zh_CN] 它们是同一个对象，或

[item]
[:en] one is a union object and the other is a non-static data member of that
object ([#class.union]), or
[:zh_CN] 一个是联合体对象，而另一个是该对象的非静态数据成员（[#class.union]），或

[item]
[:en] one is a standard-layout class object and the other is the first
non-static data member of that object or any base class subobject of that object
([#class.mem]), or
[:zh_CN] 一个是标准布局类对象，而另一个是该对象的第一个非静态数据成员，或为
该对象的任何基类子对象（[#class.mem]），或

[item]
[:en] there exists an object [^c] such that [^a] and [^c] are
pointer-interconvertible, and [^c] and [^b] are pointer-interconvertible.
[:zh_CN] 存在某个对象 [^c]，使得 [^a] 和 [^c] 指针可相互转换，且 [^c] 和 [^b]
指针可相互转换。
[list:end]

[:en] If two objects are pointer-interconvertible, then they have the same
address, and it is possible to obtain a pointer to one from a pointer to the
other via a [`:key reinterpret_cast] ([#expr.reinterpret.cast]).
[:zh_CN] 当两个对象指针可相互转换时，它们就具有相同的地址，而且通过
[`:key reinterpret_cast]（[#expr.reinterpret.cast]）从指向其中之一的指针获得指向
另一个的指针也是可能的。

[begin:note]
[:en] An array object and its first element are not pointer-interconvertible,
even though they have the same address.
[:zh_CN] 数组对象和其第一个元素并不是指针可相互转换的，即便它们具有相同的地址。
[end:note]

[para]
[:en] A byte of storage [^b] is [+reachable through[%storage[!reachable through
a pointer value]]] a pointer value that points to an object [^x] if there is an
object [^y], pointer-interconvertible with [^x], such that [^b] is within the
storage occupied by [^y], or the immediately-enclosing array object if [^y] is
an array element.
[:zh_CN] 如果存在与对象 [^x] 指针可相互转换的对象 [^y]，使得存储字节 [^b] 处于由 [^y]，
或当 [^y] 是数组元素时为其直接外围数组对象所占据的存储中，则 [^b] [+:%通过]指向
[^x] 的指针值[+可达[%存储[!通过指针值可达]]]。

[para]
[:en] [%pointer [%[`void*]]] [%[`void*][!type]]
A pointer to [=cv] [`:key void] can be used to point to objects of unknown type.
[:zh_CN] [%指针 [%[`void*]]] [%[`void*][!类型]]
指向 [=cv] [`:key void] 的指针，可用于指向未知类型的对象。

[:en] Such a pointer shall be able to hold any object pointer.
[:zh_CN] 这种指针应当能持有任何对象指针。

[:en] An object of type [=lq]pointer to [=cv] [`:key void][=rq] shall have the
same representation and alignment requirements as an object of type
[=lq]pointer to [=cv] [`:key char][=rq].
[:zh_CN] 类型“[=cv] [`:key void] 的指针”的对象应当与类型“[=cv] [`:key char] 的指针”
的对象具有相同的表示和对齐要求。
