[section#basic.compound
    [:en] Compound types
    [:zh_CN] 复合类型
]

[para]
[:en]
[%type[!compound]]
Compound types can be constructed in the following ways:
[:zh_CN]
[%类型[!复合～]]
复合类型可通过如下方式构成：

[list]
[item]
[:en]
[+arrays [%type[!array]]] of objects of a given type, [#dcl.array];
[:zh_CN]
给定类型对象的[+数组[%类型[!数组～]]]，[#dcl.array]；

[item]
[:en]
[+functions[%type[!function]]], which have parameters of given types and return
[`void] or references or objects of a given type, [#dcl.fct];
[:zh_CN]
具有给定类型的形参，并返回 [`void] 或给定类型的引用或对象的[+函数[%类型[!函数～]
]]，[#dcl.fct]；

[item]
[:en]
[+pointers[%type[!pointer]]] to [$cv] [`void] or objects or functions (including
static members of classes) of a given type, [#dcl.ptr];
[:zh_CN]
指向 [$cv] [`void] 或者给定类型的对象或函数（包括类的静态成员）的[+指针[%类型
[!指针～]]]，[#dcl.ptr]；

[item]
[:en]
[%reference[!lvalue]] [%reference[!rvalue]]
[+references[%reference]] to objects or functions of a given type, [#dcl.ref].
[:zh_CN]
[%引用[!左值～]] [%引用[!右值～]]
给定类型的对象或函数的[+引用]，[#dcl.ref]。

[:en]
There are two types of references:
[:zh_CN]
有两种类型的引用：

[list]
[item]
[:en@~] lvalue reference
[:zh_CN@~] 左值引用
[item]
[:en@~] rvalue reference
[:zh_CN@~] 右值引用
[list:end]

[item]
[:en]
[+classes[%class]] containing a sequence of objects of various types ([#class]),
a set of types, enumerations and functions for manipulating these objects
([#class.mfct]), and a set of restrictions on the access to these entities
([#class.access]);
[:zh_CN]
[+类]，包含一个各种类型的对象的序列（[#class]），一组类型，枚举，和用于操作这些
对象的函数（[#class.mfct]），以及一组针对这些实体的访问限制（[#class.access]）；

[item]
[:en]
[+unions[%[`union]]], which are classes capable of containing objects of
different types at different times, [#class.union];
[:zh_CN]
[+联合体[%[`union]]]，是能够在不同时间包含不同类型的对象的类，[#class.union]；

[item]
[:en]
[+enumerations[%[`enum]]], which comprise a set of named constant values.
[:zh_CN]
[+枚举[%[`enum]]]，由一组具名常量值构成。

[:en]
Each distinct enumeration constitutes a different [+enumerated type[%type
[!enumerated]]][%enumerated type[%type[!enumerated]]], [#dcl.enum];
[:zh_CN]
每个独立的枚举都构成一个不同的[+枚举类型[%类型[!枚举～]]][%枚举类型[%类型[!枚举
～]]]，[#dcl.enum]；

[item]
[:en]
[%member pointer to [%pointer to member]]
[+pointers to non-static class members[%pointer to member]],[#:note#fn:$1] which
identify members of a given type within objects of a given class, [#dcl.mptr].
[:zh_CN]
[%指向成员的指针[%成员指针]]
[+指向非静态类成员的指针[%成员指针]]，[#:note#fn:$1]在给定类的对象中识别给定类型
的成员，[#dcl.mptr]。

[note:foot#fn:$1]
[:en]
Static class members are objects or functions, and pointers to them are ordinary
pointers to objects or functions.
[:zh_CN]
静态类成员就是对象或函数，而且指向它们的指针就是普通的指向对象或函数的指针。
[note:end]

[:en]
Pointers to data members and pointers to membef functions are collectively
called [+pointer-to-member[%]] types.
[:zh_CN]
指向数据成员的指针和指向成员函数的指针统称为[+成员指针[%]]类型。
[list:end]

[para]
[:en]
These methods of constructing types can be applied recursively; restrictions are
mentioned in [#dcl.ptr], [#dcl.array], [#dcl.fct], and [#dcl.ref].
[:zh_CN]
这些类型构成方法可以递归应用；在 [#dcl.ptr]，[#dcl.array]，[#dcl.fct]，和
[#dcl.ref] 中提到其限制。

[:en]
Constructing a type such that the number of bytes in its object representation
exceeds the maximum value representable in the type [`std::size_t]
([#support.types]) is ill-formed.
[:zh_CN]
构成在其对象表示中的字节数超出类型 [`std::size_t]（[#support.types]）的可表示的
最大值的类型，是非良构的。

[para]
[:en]
[%terminology[!pointer]]
The type of a pointer to [$cv] [`void] or a pointer to an object type is called
an [+object pointer type].
[:zh_CN]
[%术语[!指针]]
指向 [$cv] [`void] 的指针或指向对象类型的指针的类型被称为[+对象指针类型]。

[enter:note]
[:en]
A pointer to [`void] does not have a pointer-to-object type, however, because
[`void] is not an object type.
[:zh_CN]
[`void] 的指针并非对象指针类型，这是因为 [`void] 不是对象类型。
[exit:note]

[:en]
The type of a pointer that can designate a function is called a [+function
pointer type].
[:zh_CN]
能够代表函数的指针类型被称为[+函数指针类型]。

[:en]
A pointer to objects of type [`T] is referred to as a ["pointer to [`T]].
[:zh_CN]
指向 [`T] 类型的对象的指针被称为“[`T] 的指针”。

[enter:example]
[:en]
A pointer to an object of type [`int] is referred to as ["pointer to [`int]] and
a pointer to an object of class [`X] is called a ["pointer to [`X]].
[:zh_CN]
指向类型 [`int] 的对象的指针被称为“[`int] 的指针”，而指向类 [`X] 的对象的指针被
称为“[`X] 的指针”。
[exit:example]

[:en]
Except for pointers to static members, text referring to ["pointers] does not
apply to pointers to members.
[:zh_CN]
除了指向静态成员的指针外，提及“指针”的文字不适用与成员指针。

[:en]
Pointers to incomplete types are allowed although there are restrictions on what
can be done with them ([#basic.align]).
[:zh_CN]
允许指向不完整类型的指针，但对用它们能做什么有限制（[#basic.align]）。

[:en]
[%address]
Every value of pointer type is one of the following:
[:zh_CN]
[%地址]
指针类型的值是以下之一：

[list]
[item]
[:en]
a [+pointer to] an object or function (the pointer is said to [+point] to the
object or function), or
[:zh_CN]
指向对象或函数的[+指针]（该指针被称为[+指向]这个对象或函数），或

[item]
[:en]
a [+pointer past the end of] an object ([#expr.add]), or
[:zh_CN]
[+越过对象末尾的指针[%越过末尾的指针]]（[#expr.add]），或

[item]
[:en]
[%null pointer value[%value[!null pointer]]]
the [+null pointer value[%value[!null pointer]]] ([#conv.ptr]) for that type, or
[:zh_CN]
[%空指针值[%值[!空指针～]]]
该类型的[+空指针值[%值[!空指针～]]]（[#conv.ptr]），或

[item]
[:en]
[%invalid pointer value[%value[!invalid pointer]]]
an [+invalid pointer value[%value[!invalid pointer]]].
[:zh_CN]
[%无效指针值[%值[!无效指针～]]]
[+无效指针值[%值[!无效指针～]]]。
[list:end]

[:en]
A value of a pointer type that is a pointer to or past the end of an object
[+represents the address] of the first byte in memory ([#intro.memory]) occupied
by the object[#:note#fn:$2] or the first byte in memory after the end of the
storage occupied by the object, respectively.
[:zh_CN]
指针类型的值，指向某个对象或越过对象末尾，分别[+表示[%表示～的地址]]由对象所占据
的内存（[#intro.memory]）的第一个字节[#:note#fn:$2]，或内存中对象所占据的存储
末尾之后的第一个字节。

[note:foot#fn:$2]
[:en]
For an object that is not within its lifetime, this is the first byte in memory
that it will occupy or used to occupy.
[:zh_CN]
对于并不处于生存期内的对象来说，这是其将要占据或曾经占据的内存的第一个字节。
[note:end]

[enter:note]
[:en]
A pointer past the end of an object ([#expr.add]) is not considered to point to
an unrelated object of the object[=']s type that might be located at that
address.
[:zh_CN]
越过对象末尾的指针（[#expr.add]），并不被当成是指向这个对象类型的可能位于该地址
的某个无关对象。

[:en]
A pointer value becomes invalid when the storage it denotes reaches the end of
its storage duration; see [#basic.stc].
[:zh_CN]
当所代表的存储到达其存储期末尾时，指针的值变为无效；参见 [#basic.stc]。
[exit:note]

[:en]
For purposes of pointer arithmetic ([#expr.add]) and comparison ([#expr.rel],
[#expr.eq]), a pointer past the end of the last element of an array [`x] of [$n]
elements is considered to be equivalent to a pointer to a hypothetical element
[`x`[[$n]`]].
[:zh_CN]
为进行指针算术（[#expr.add]）和比较（[#expr.rel]，[#expr.eq]），越过 [$n] 个元素
的数组 [`x] 的最后一个元素的末尾的指针，可被当做是等价于指向一个虚构的元素
[`x`[[$n]`]]。

[:en]
The value representation of pointer types is [%@impldef value representation of
pointer types] implementation-defined.
[:zh_CN]
指针类型的值表示是[%@impldef 指针类型的值表示]由实现定义的。

[:en]
Pointers to layout-compatible types shall have the same value representation and
alignment requirements ([#basic.align]).
[:zh_CN]
指向布局兼容类型的指针应当具有相同的值表示和对齐要求（[#basic.align]）。

[enter:note]
[:en]
Pointers to over-aligned types ([#basic.align]) have no special representation,
but their range of valid values is restricted by the extended alignment
requirement.
[:zh_CN]
指向过量对齐类型（[#basic.align]）的指针没有特殊的表示，但其扩展对齐要求限制了
它们的有效值的范围。
[exit:note]

[para]
[:en]
Two objects [$a] and [$b] are [+pointer-interconvertible] if:
[:zh_CN]
以下情况下称两个对象 [$a] 和 [$b] [+指针可相互转换]：

[list]
[item]
[:en]
they are the same object, or
[:zh_CN]
它们是同一个对象，或

[item]
[:en]
one is a union object and the other is a non-static data member
of that object ([#class.union]), or
[:zh_CN]
一个是联合体对象，而另一个是该对象的非静态数据成员（[#class.union]），或

[item]
[:en]
one is a standard-layout class object and the other is the first non-static data
member of that object, or, if the object has no non-static data members, any
base class subobject of that object ([#class.mem]), or
[:zh_CN]
一个是标准布局类对象，而另一个是该对象的第一个非静态数据成员，或当该对象没有非
静态数据成员是，为该对象的任何基类子对象（[#class.mem]），或

[item]
[:en]
there exists an object [$c] such that [$a] and [$c] are
pointer-interconvertible, and [$c] and [$b] are pointer-interconvertible.
[:zh_CN]
存在某个对象 [$c]，使得 [$a] 和 [$c] 指针可相互转换，且 [$c] 和 [$b] 指针可相互
转换。
[list:end]

[:en]
If two objects are pointer-interconvertible, then they have the same address,
and it is possible to obtain a pointer to one from a pointer to the other via a
[`reinterpret_cast] ([#expr.reinterpret.cast]).
[:zh_CN]
当两个对象指针可相互转换时，它们就具有相同的地址，而且通过 [`reinterpret_cast]
（[#expr.reinterpret.cast]）从指向其中之一的指针获得指向另一个的指针也是可能的。

[enter:note]
[:en]
An array object and its first element are not pointer-interconvertible, even
though they have the same address.
[:zh_CN]
数组对象和其第一个元素并不是指针可相互转换的，即便它们具有相同的地址。
[exit:note]

[para]
[:en]
[%pointer [%[`void*]]] [%[`void*][!type]]
A pointer to [$cv]-qualified ([#basic.type.qualifier]) or [$cv]-unqualified
[`void] can be used to point to objects of unknown type.
[:zh_CN]
[%指针 [%[`void*]]] [%[`void*][!类型]]
指向 [$cv] 限定的（[#basic.type.qualifier]）或 [$cv] 未限定的 [`void] 的指针，
可用于指向未知类型的对象。

[:en]
Such a pointer shall be able to hold any object pointer.
[:zh_CN]
这种指针应当能持有任何对象指针。

[:en]
An object of type [$cv] [`void*] shall have the same representation and
alignment requirements as [$cv] [`char*].
[:zh_CN]
类型 [$cv] [`void*] 的对象应当与 [$cv] [`char*] 具有相同的表示和对齐要求。
