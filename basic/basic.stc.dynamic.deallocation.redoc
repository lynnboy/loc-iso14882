[section#basic.stc.dynamic.deallocation
    [:en] Deallocation functions
    [:zh_CN] 回收函数
]

[para]
[:en]
[%function[!deallocation]]
Deallocation functions shall be class member functions or global functions; a
program is ill-formed if deallocation functions are declared in a namespace
scope other than global scope or declared static in global scope.
[:zh_CN]
[%函数[!回收～]]
回收函数应当是类成员函数或全局函数；若回收函数声明于非全局作用域的命名空间作用域
中，或在全局作用域中被声明为静态的，则程序非良构。

[para]
[:en]
[%[`delete][!overloading and]]
Each deallocation function shall return [`void] and its first parameter shall be
[`void*].
[:zh_CN]
[%[`delete][!重载与～]]
每个回收函数都应当返回 [`void]，且其第一个形参都应当为 [`void*]。

[:en]
A deallocation function may have more than one parameter.
[:zh_CN]
回收函数可以有多个形参。

[:en]
[%deallocation function[!usual]]
A [+usual deallocation function] is a deallocation function that has:
[:zh_CN]
[%回收函数[!常规～]]
[+常规回收函数]符合如下条件的回收函数：。

[list]
[item]
[:en]
exactly one parameter; or
[:zh_CN]
恰好有一个形参；或者

[item]
[:en]
exactly two parameters, the type of the second being either [`std::align_val_t]
or [`std::size_t][#:note#fn:$section.1]; or
[:zh_CN]
恰好有两个形参，其第二个的类型为 [`std::align_val_t] 或 [`std::size_t]
[#:note#fn:$section.1]；或者

[note:foot#fn:$section.1]
[:en]
The global [`operator delete(void*, std::size_t)] precludes use of an allocation
function [`void operator new(std::size_t, std::size_t)] as a placement
allocation function ([#diff.cpp11.basic]).
[:zh_CN]
全局的 [`operator delete(void*, std::size_t)] 排除了将分配函数 [`void operator
new(std::size_t, std::size_t)] 用作放置式分配函数（[#diff.cpp11.basic]）。
[note:end]

[item]
[:en]
exactly three parameters, the type of the second being [`std::size_t] and the
type of the third being [`std::align_val_t].
[:zh_CN]
恰好有三个形参，其第二个的类型为 [`std::size_t]，第三个的类型为
[`std::align_val_t]。
[list:end]

[:en]
A deallocation function may be an instance of a function template.
[:zh_CN]
回收函数可以是函数模板的实例。

[:en]
Neither the first parameter nor the return type shall depend on a template
parameter.
[:zh_CN]
其第一个形参和返回类型都不应当依赖于模板形参。

[enter:note]
[:en]
That is, a deallocation function template shall have a first parameter of type
[`void*] and a return type of [`void] (as specified above).
[:zh_CN]
就是说，回收函数模板应当具有类型 [`void*] 的第一个形参和 [`void] 返回类型（如上
所述）。
[exit:note]

[:en]
A deallocation function template shall have two or more function parameters.
[:zh_CN]
回收函数模板应当具有两个或多个形参。

[:en]
A template instance is never a usual deallocation function, regardless of its
signature.
[:zh_CN]
无论模板实例有什么签名，它都不是常规回收函数。

[para]
[:en]
If a deallocation function terminates by throwing an exception, the behavior is
undefined.
[:zh_CN]
如果回收函数由于抛出异常而终止，则其行为未定义。

[:en]
The value of the first argument supplied to a deallocation function may be a
null pointer value; if so, and if the deallocation function is one supplied in
the standard library, the call has no effect.
[:zh_CN]
传递给回收函数的第一个实参的值可以为空指针值；这种情况下，若其为由标准程序库所
提供的回收函数，则此调用没有效果。

[para]
[:en]
If the argument given to a deallocation function in the standard library is a
pointer that is not the null pointer value ([#conv.ptr]), the deallocation
function shall deallocate the storage referenced by the pointer, ending the
duration of the region of storage.
[:zh_CN]
若传递给标准程序库中的回收函数的实参不是具有空指针值（[#conv.ptr]）的指针，则该
回收函数应当对该指针所指向的存储进行回收，使存储区域的期限结束。
