[section#basic.stc
    [:en] Storage duration
    [:zh_CN] 存储期
]

[%:begin#storage.duration
    [:en] storage duration
    [:zh_CN] 存储期
]

[para]
[:en]
The [+storage duration] is the property of an object that defines the minimum
potential lifetime of the storage containing the object.
[:zh_CN]
[+存储期]是对象的性质，它定义了包含该对象的存储的最小潜在生存期。

[:en]
The storage duration is determined by the construct used to create the object
and is one of the following:
[:zh_CN]
对象的存储期由用于创建它的语言构造所决定，可以为如下之一：

[list]
[item]
[:en@~] static storage duration
[:zh_CN@~] 静态存储期
[item]
[:en@~] thread storage duration
[:zh_CN@~] 线程存储期
[item]
[:en@~] automatic storage duration
[:zh_CN@~] 自动存储期
[item]
[:en@~] dynamic storage duration
[:zh_CN@~] 动态存储期
[list:end]

[para]
[:en]
[%storage duration[!static]] [%storage duration[!thread]]
[%storage duration[!automatic]] [%storage duration[!dynamic]]
Static, thread, and automatic storage durations are associated with objects
introduced by declarations ([#basic.def]) and implicitly created by the
implementation ([#class.temporary]).
[:zh_CN]
[%存储期[!静态～]] [%存储期[!线程～]] [%存储期[!自动～]] [%存储期[!动态～]]
静态、线程和自动存储期与由声明式（[#basic.def]）所引入和由实现隐式创建
（[#class.temporary]）的对象相关联。

[:en]
The dynamic storage duration is associated with objects created by a
[~new-expression] ([#expr.new]).
[:zh_CN]
动态存储期与用 [~new-表达式]（[#expr.new]）创建的对象相关联。

[para]
[:en]
The storage duration categories apply to references as well.
[:zh_CN]
存储期的分类也适用于引用。

[para]
[:en]
When the end of the duration of a region of storage is reached, the values of
all pointers representing the address of any part of that region of storage
become invalid pointer values ([#basic.compound]).
[:zh_CN]
当达到某块存储区域的期限末尾时，所有表示这块存储区域的任何部分的地址的指针的值都
变为无效指针值（[#basic.compound]）。

[:en]
Indirection through an invalid pointer value and passing an invalid pointer
value to a deallocation function have undefined behavior.
[:zh_CN]
通过无效指针值实施间接，以及将无效指针值传递给回收函数，都具有未定义的行为。

[:en]
Any other use of an invalid pointer value has [?impldef any use of an invalid
pointer other than to perform indirection or deallocate] behavior.[#:note#fn:$1]
[:zh_CN]
对无效指针值的任何其他用法都具有[?impldef 对无效指针值除实施间接和回收之外的
任何用法]行为。[#:note#fn:$1]

[note:foot#fn:$1]
[:en]
Some implementations might define that copying an invalid pointer value causes a
system-generated runtime fault.
[:zh_CN]
某些实现可能会定义对无效指针值进行复制会引发由系统生成的运行时故障。
[note:end]

[include basic.stc.static]

[include basic.stc.thread]

[include basic.stc.auto]

[include basic.stc.dynamic]

[include basic.stc.inherit]

[%:end#storage.duration]
