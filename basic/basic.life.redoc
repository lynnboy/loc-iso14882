[section#basic.life
    [:en] Object lifetime
    [:zh_CN] 对象生存期
]

[%:begin#object.lifetime
    [:en] object lifetime
    [:zh_CN] 对象生存期
]

[para]
[:en]
The [+lifetime] of an object or reference is a runtime property of the object or
reference.
[:zh_CN]
对象或引用的[+生存期]是对象或引用的一项运行时性质。

[:en]
An object is said to have [+non-vacuous initialization [%initialization
[!non-vacuous]]] if it is of a class or aggregate type and it or one of its
subobjects is initialized by a constructor other than a trivial default
constructor.
[:zh_CN]
如果某个对象是类或聚合类型，并且它或它的子对象之一以不是平凡默认构造函数的构造
函数来进行初始化，则称该对象具有[+非无为初始化[%初始化[!非无为～]]]。

[enter:note]
[:en]
Initialization by a trivial copy/move constructor is non-vacuous initialization.
[:zh_CN]
由平凡复制/移动构造函数进行的初始化是非无为初始化。
[exit:note]

[:en]
The lifetime of an object of type [`T] begins when:
[:zh_CN]
类型 [`T] 的对象的生存期开始于：

[list]
[item]
[:en@~]
storage with the proper alignment and size for type [`T] is obtained, and
[:zh_CN@~]
已获得对齐和大小都适应类型 [`T] 的存储，且

[item]
[:en@~]
if the object has non-vacuous initialization, its initialization is complete.
[:zh_CN@~]
若该对象具有非无为初始化，则其初始化已结束。
[list:end]

[:en]
except that if the object is a union member or subobject thereof, its lifetime
only begins if that union member is the initialized member in the union
([#dcl.init.aggr], [#class.base.init]), or as described in [#class.union].
[:zh_CN]
但若对象是联合的成员或其子对象，则仅当该联合成员是联合中的已初始化成员
（[#dcl.init.aggr]，[#class.base.init]），或者根据 [#class.union] 的描述，才开始
其生存期。

[:en]
The lifetime of an object [$o] of type [`T] ends when:
[:zh_CN]
类型 [`T] 的对象的生存期结束于：

[list]
[item]
[:en@~]
if [`T] is a class type with a non-trivial destructor ([#class.dtor]), the
destructor call starts, or
[:zh_CN@~]
当 [`T] 为具有非平凡析构函数（[#class.dtor]）的类类型时，该析构函数的调用已经
开始，或

[item]
[:en@~]
the storage which the object occupies is released, or is reused by an object
that is not nested within [$o] ([#intro.object]).
[:zh_CN@~]
该对象所占据的存储被释放，或者被某个并非嵌套于 [$o] 之中（[#intro.object]）的
对象所重用。
[list:end]

[para]
[:en]
The lifetime of a reference begins when its initialization is complete.
[:zh_CN]
引用的生存期开始于其初始化结束时。

[:en]
The lifetime of a reference ends as if it were a scalar object.
[:zh_CN]
引用的生存期的结束，如同它是一个标量对象。

[para]
[enter:note]
[:en]
[#class.base.init] describes the lifetime of base and member subobjects.
[:zh_CN]
[#class.base.init] 说明基类子对象和成员子对象的生存期。
[exit:note]

[para]
[:en]
The properties ascribed to objects and references throughout this document apply
for a given object or reference only during its lifetime.
[:zh_CN]
贯穿本文档中所描述的对象和引用的各项性质，对于给定对象或引用仅在其生存期之内才
适用。

[enter:note]
[:en]
In particular, before the lifetime of an object starts and after its lifetime
ends there are significant restrictions on the use of the object, as described
below, in [#class.base.init] and in [#class.cdtor].
[:zh_CN]
特别地，在对象的生存期开始之前及在其生存期结束之后，对于对象的使用有明确的限制，
如后文在 [#class.base.init] 和 [#class.cdtor] 中所述。

[:en]
Also, the behavior of an object under construction and destruction might not be
the same as the behavior of an object whose lifetime has started and not ended.
[:zh_CN]
同样地，处于构造和析构之中的对象的行为，可能不同于生存期已经开始且还未结束的对象
的行为。

[:en]
[#class.base.init] and [#class.cdtor] describe the behavior of objects during
the construction and destruction phases.
[:zh_CN]
[#class.base.init] 和 [#class.cdtor] 描述了处于构造和析构过程中的对象的行为。
[exit:note]

[para]
[:en]
A program may end the lifetime of any object by reusing the storage which the
object occupies or by explicitly calling the destructor for an object of a class
type with a non-trivial destructor.
[:zh_CN]
程序可以通过重用对象所占据的存储，或通过对具有非平凡析构函数的类类型的对象明确
调用其析构函数来结束任何对象的生存期。

[:en]
For an object of a class type with a non-trivial destructor, the program is not
required to call the destructor explicitly before the storage which the object
occupies is reused or released; however, if there is no explicit call to the
destructor or if a [~delete-expression] ([#expr.delete]) is not used to release
the storage, the destructor shall not be implicitly called and any program that
depends on the side effects produced by the destructor has undefined behavior.
[:zh_CN]
对于具有非平凡析构函数的类类型的对象，程序不必在该对象所占据的存储被重用或释放
之前明确调用其析构函数；然而，若未明确调用析构函数或未用 [~delete-表达式]
（[#expr.delete]）释放其存储，则析构函数不会被隐式调用，且任何依赖于析构函数产生
的副作用的程序具有未定义行为。

[para]
[:en]
Before the lifetime of an object has started but after the storage which the
object will occupy has been allocated[#:note#fn:$section.1] or, after the
lifetime of an object has ended and before the storage which the object occupied
is reused or released, any pointer that represents the address of the storage
location where the object will be or was located may be used but only in limited
ways.
[:zh_CN]
在对象的生存期开始前而该对象将要占据的存储已经分配之后[#:note#fn:$section.1]，
或者在对象的生存期结束后而该对象占据过的存储被重用或释放之前，可以但仅能以有限的
方式使用表示该对象将要或曾经位于的存储位置的地址的指针。

[note:foot#fn:$section.1]
[:en]
For example, before the construction of a global object that is initialized via
a user-provided constructor ([#class.cdtor]).
[:zh_CN]
例如，在某个以用户提供的构造函数进行初始化的类类型的全局对象进行构造之前
（[#class.cdtor]）。
[note:end]

[:en]
For an object under construction or destruction, see [#class.cdtor].
[:zh_CN]
对于处于构造和析构过程中的对象，参见 [#class.cdtor]。

[:en]
Otherwise, such a pointer refers to allocated storage
([#basic.stc.dynamic.deallocation]), and using the pointer as if the pointer
were of type [`void*], is well-defined.
[:zh_CN]
否则，此种指针指代已分配的存储（[#basic.stc.dynamic.deallocation]），将其当作
类型 [`void*] 的指针来使用是定义明确的。

[:en]
Indirection through such a pointer is permitted but the resulting lvalue may
only be used in limited ways, as described below.
[:zh_CN]
此种指针可以进行间接，但所获得的左值仅能以有限的方式使用，如下所述。

[:en]
The program has undefined behavior if:
[:zh_CN]
如下情况程序具有未定义行为：

[list]
[item]
[:en]
the object will be or was of a class type with a non-trivial destructor and the
pointer is used as the operand of a [~delete-expression],
[:zh_CN]
该对象将为或曾为具有非平凡析构函数的类类型的对象，且该指针被用作
[~delete-表达式]的操作数，

[item]
[:en]
the pointer is used to access a non-static data member or call a non-static
member function of the object, or
[:zh_CN]
该指针被用于访问该对象的非静态数据成员或调用非静态成员函数，或

[item]
[:en]
the pointer is implicitly converted ([#conv.ptr]) to a pointer to a virtual base
class, or
[:zh_CN]
该指针被隐式转换（[#conv.ptr]）为虚基类的指针，或

[item]
[:en]
the pointer is used as the operand of a [`static_cast] ([#expr.static.cast]),
except when the conversion is to pointer to [$cv] [`void], or to pointer to
[$cv] [`void] and subsequently to pointer to [$cv] [`char], [$cv]
[`unsigned char], or [$cv] [`std::byte] ([#cstddef.syn]), or
[:zh_CN]
该指针被用作 [`static_cast]（[#expr.static.cast]）的操作数，但不包括转换为
[$cv] [`void] 的指针，或者转换为 [$cv] [`void] 的指针随即转换为 [$cv] [`char]、
[$cv] [`unsigned char] 或 [$cv] [`std::byte]（[#cstddef.syn]）的指针的转换，或者

[item]
[:en]
the pointer is used as the operand of a [`dynamic_cast] ([#expr.dynamic.cast]).
[:zh_CN]
该指针被用作 [`dynamic_cast]（[#expr.dynamic.cast]）的操作数。
[list:end]

[enter:example]
[codeblock]
#include <cstdlib>

struct B {
  virtual void f();
  void mutate();
  virtual ~B();
};

struct D1 : B { void f(); };
struct D2 : B { void f(); };

void B::mutate() {
  new (this) D2;    // [:en] reuses storage [=--] ends the lifetime of [`*this]
                    // [|:zh_CN] 重用存储——结束 [`*this] 的生存期
  f();              // [:en] undefined behavior
                    // [|:zh_CN] 未定义行为
  ... = this;       // [:en] OK, [`this] points to valid memory
                    // [|:zh_CN] OK：[`this] 指向有效内存
}

void g() {
  void* p = std::malloc(sizeof(D1) + sizeof(D2));
  B* pb = new (p) D1;
  pb->mutate();
  &pb;              // [:en] OK: [`pb] points to valid memory
                    // [|:zh_CN] OK：[`pb] 指向有效内存
  void* q = pb;     // [:en] OK: [`pb] points to valid memory
                    // [|:zh_CN] OK：[`pb] 指向有效内存
  pb->f();          // [:en] undefined behavior, lifetime of [`*pb] has ended
                    // [|:zh_CN] 未定义行为，[`*pb] 的生存期已经结束
}
[codeblock:end]
[exit:example]

[para]
[:en]
Similarly, before the lifetime of an object has started but after the storage
which the object will occupy has been allocated or, after the lifetime of an
object has ended and before the storage which the object occupied is reused or
released, any glvalue that refers to the original object may be used but only in
limited ways.
[:zh_CN]
与此相似，在对象的生存期开始前而该对象将要占据的存储已经分配之后，或者在对象的
生存期结束后而该对象占据过的存储被重用或释放之前，可以但仅能以有限方式使用指代
原对象的泛左值。

[:en]
For an object under construction or destruction, see [#class.cdtor].
[:zh_CN]
对于处于构造和析构过程中的对象，参见 [#class.cdtor]。

[:en]
Otherwise, such a glvalue refers to allocated storage
([#basic.stc.dynamic.deallocation]), and using the properties of the glvalue
that do not depend on its value is well-defined.
[:zh_CN]
否则，此种泛左值指代已分配的存储（[#basic.stc.dynamic.deallocation]），且不依赖
于该泛左值的值而使用它的性质是定义明确的。

[:en]
The program has undefined behavior if:
[:zh_CN]
如下情况程序具有未定义行为：

[list]
[item]
[:en]
the glvalue is used to access the object, or
[:zh_CN]
该泛左值被用于访问这个对象，或

[item]
[:en]
the glvalue is used to call a non-static member function of the object, or
[:zh_CN]
该泛左值被用于调用这个对象的非静态成员函数，或

[item]
[:en]
the glvalue is bound to a reference to a virtual base class ([#dcl.init.ref]),
or
[:zh_CN]
该泛左值被绑定到虚基类的引用（[#dcl.init.ref]），或

[item]
[:en]
the glvalue is used as the operand of a [`dynamic_cast] ([#expr.dynamic.cast])
or as the operand of [`typeid].
[:zh_CN]
该泛左值被用作 [`dynamic_cast]（[#expr.dynamic.cast]）的操作数，或被用作
[`typeid] 的操作数。
[list:end]

[para]
[:en]
If, after the lifetime of an object has ended and before the storage which the
object occupied is reused or released, a new object is created at the storage
location which the original object occupied, a pointer that pointed to the
original object, a reference that referred to the original object, or the name
of the original object will automatically refer to the new object and, once the
lifetime of the new object has started, can be used to manipulate the new
object, if:
[:zh_CN]
如果在对象的生存期结束后而该对象占据过的存储被重用或释放之前，在原对象占据过的存
储位置上创建一个新的对象，则在如下情况下，指向原对象的指针、指代原对象的引用或原
对象的名字将自动指代新对象，并且一旦新对象的生存期开始，就可以被用于操纵新对象：

[list]
[item]
[:en]
the storage for the new object exactly overlays the storage location which the
original object occupied, and
[:zh_CN]
新对象的存储恰好覆盖原对象曾占据的存储位置，且

[item]
[:en]
the new object is of the same type as the original object (ignoring the
top-level cv-qualifiers), and
[:zh_CN]
新对象与原对象类型相同（忽略顶层的 cv 限定符），且

[item]
[:en]
the type of the original object is not const-qualified, and, if a class type,
does not contain any non-static data member whose type is const-qualified or a
reference type, and
[:zh_CN]
原对象的类型未被 const 限定，并且若其为类类型，则不包含任何类型为被 const 限定
的类型或引用类型的非静态数据成员，且

[item]
[:en]
neither the original object nor the new object is a potentially-overlapping
subobject ([#intro.object]).
[:zh_CN]
原对象和新对象都不是潜在重叠子对象（[#intro.object]）。
[list:end]

[enter:example]
[codeblock]
struct C {
  int i;
  void f();
  const C& operator=( const C& );
};

const C& C::operator=( const C& other) {
  if ( this != &other ) {
    this->~C();                 // [:en] lifetime of [`*this] ends
                                // [|:zh_CN] [`*this] 的生存期结束
    new (this) C(other);        // [:en] new object of type [`C] created
                                // [|:zh_CN] 创建了 [`C] 类型的新对象
    f();                        // [:en] well-defined
                                // [|:zh_CN] 良构的
  }
  return *this;
}

C c1;
C c2;
c1 = c2;                        // [:en] well-defined
                                // [|:zh_CN] 良构的
c1.f();                         // [:en] well-defined; [`c1] refers to a new object of type [`C]
                                // [|:zh_CN] 良构的；[`c1] 指代 [`C] 类型的新对象
[codeblock:end]
[exit:example]

[enter:note]
[:en]
If these conditions are not met, a pointer to the new object can be obtained
from a pointer that represents the address of its storage by calling
[`std::launder] ([#support.dynamic]).
[:zh_CN]
如果不满足这些条件，则还可以通过调用 [`std::launder]（[#support.dynamic]）来从
一个表示新对象的存储地址的指针获得一个指向新对象的指针。
[exit:note]

[para]
[:en]
If a program ends the lifetime of an object of type [`T] with static
([#basic.stc.static]), thread ([#basic.stc.thread]), or automatic
([#basic.stc.auto]) storage duration and if [`T] has a non-trivial destructor,
[#:note#fn:$section.2] the program must ensure that an object of the original
type occupies that same storage location when the implicit destructor call takes
place; otherwise the behavior of the program is undefined.
[:zh_CN]
若程序结束了具有静态（[#basic.stc.static]）、线程（[#basic.stc.thread]）或动态
存储期（[#basic.stc.auto]）的类型 [`T] 的对象的生存期，且若 [`T] 具有非平凡析构
函数，[#:note#fn:$section.2] 则程序必须保证当发生隐式析构函数的调用时，相同存储
位置已被原类型的对象所占据；否则该程序的行为是未定义的。

[note:foot#fn:$section.2]
[:en]
That is, an object for which a destructor will be called implicitly[=--]upon
exit from the block for an object with automatic storage duration, upon exit
from the thread for an object with thread storage duration, or upon exit from
the program for an object with static storage duration.
[:zh_CN]
就是说，某个析构函数将被隐式调用的对象——具有自动存储期的对象的所在语句块退出时，
具有线程存储期的对象的线程退出时，或者具有静态存储期的对象在程序退出时。
[note:end]

[:en]
This is true even if the block is exited with an exception.
[:zh_CN]
即使语句块的退出是由异常引发的也应如此。

[enter:example]
[codeblock]
class T { };
struct B {
   ~B();
};

void h() {
   B b;
   new (&b) T;
}                               // [:en] undefined behavior at block exit
                                // [|:zh_CN] 语句块退出时具有未定义行为
[codeblock:end]
[exit:example]
 
[para]
[:en]
Creating a new object within the storage that a [`const] complete object with
static, thread, or automatic storage duration occupies, or within the storage
that such a [`const] object used to occupy before its lifetime ended, results in
undefined behavior.
[:zh_CN]
在具有静态、线程或自动存储期的 [`const] 完整对象所占据的存储位置上，或在此种
[`const] 对象的生存期结束之前曾占据的存储位置上创建新对象,将导致未定义行为。

[enter:example]
[codeblock]
struct B {
  B();
  ~B();
};

const B b;

void h() {
  b.~B();
  new (const_cast<B*>(&b)) const B;     // [:en] undefined behavior
                                        // [|:zh_CN] 未定义行为
}
[codeblock:end]
[exit:example]
 
[para]
[:en]
In this section, ["before] and ["after] refer to the ["happens before] relation
([#intro.multithread]).
[:zh_CN]
本节中的“之前”和“之后”，代表“发生早于”关系（[#intro.multithread]）。

[enter:note]
[:en]
Therefore, undefined behavior results if an object that is being constructed in
one thread is referenced from another thread without adequate synchronization.
[:zh_CN]
因此，当没有进行恰当的同步时，一个线程中正在构造的对象被从另一个线程中引用，会
导致未定义行为。
[exit:note]

[%:end#object.lifetime]
