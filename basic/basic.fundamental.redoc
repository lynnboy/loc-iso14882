[section#basic.fundamental
    [:en] Fundamental types
    [:zh_CN] 基础类型
]

[para]
[:en]
[%type[!implementation-defined [`sizeof]]]
There are five [+:adj standard signed integer[!types[%type]]]:
[:zh_CN]
[%类型[!由实现定义的 [`sizeof] ～]]
有五种[+:adj 标准有符号整数[!类型]]：

[:en]
[%type[![`signed char]]] [%type[![`short]]] [%type[![`int]]] [%type[![`long]]]
[%type[![`long long]]]
[=lq][`[`:key signed] [`:key char]][=rq], [=lq][`[`:key short] [`:key int]][=rq],
[=lq][`:key int][=rq], [=lq][`[`:key long] [`:key int]][=rq], and
[=lq][`[`:key long] [`:key long] [`:key int]][=rq].
[:zh_CN]
[%类型[![`signed char]]] [%类型[![`short]]] [%类型[![`int]]] [%类型[![`long]]]
[%类型[![`long long]]]
“[`[`:key signed] [`:key char]]”、“[`[`:key short] [`:key int]]”、“[`:key int]”、
“[`[`:key long] [`:key int]]”和“[`[`:key long] [`:key long] [`:key int]]”。

[:en]
In this list, each type provides at least as much storage as those preceding it
in the list.
[:zh_CN]
在这个列表里，每个类型都提供至少为列表中在它之前的类型的存储大小。

[:en]
There may also be [?impldef extended signed integer types]
[+:adj extended signed integer[!types[%type]]].
[:zh_CN]
还可以有[?impldef 扩充有符号整数类型][+:adj 扩充有符号整数[!类型]]。

[:en]
The standard and extended signed integer types are collectively called
[+:adj signed integer[!types[%type]]].
[:zh_CN]
标准和扩充有符号整数类型统称为[+:adj 有符号整数[!类型]]。

[:en] The range of representable values for a signed integer type is [$-2^{N-1}]
to [$2^{N-1}-1] (inclusive), where [^N] is called the [+wide] of the type.
[:zh_CN] 有符号整数类型的可表示值的范围是从 [$-2^{N-1}] 到 [$2^{N-1}-1]（内含），
其中 [^N] 被称为该类型的[+宽度]。

[:en]
[%integral type[!implementation-defined [`sizeof]]]
[:zh_CN]
[%整型类型[!由实现定义的 [`sizeof] ～]]
[begin:note]
[:en]
Plain [`int]s are intended to have the natural width suggested by the
architecture of the execution environment; the other signed integer types are
provided to meet special needs.
[:zh_CN]
普通 [`int] 具有其执行环境的体系结构所建议的天然宽度；其他有符号整数类型是为满足
特殊需要而提供的。
[end:note]

[para]
[:en]
[%type[![`unsigned]]]
For each of the standard signed integer types, there exists a corresponding (but
different) [+:adj standard unsigned integer[!type]]:
[:zh_CN]
[%类型[![`unsigned]]]
对于每种标准有符号整数类型，都存在对应的（但不同的）[+:adj 标准无符号整数[!类型]]：

[:en@~]
[%type[![`unsigned char]]] [%type[![`unsigned short]]] [%type[![`unsigned int]]]
[%type[![`unsigned long]]] [%type[![`unsigned long long]]]
[=lq][`[`:key unsigned] [`:key char]][=rq],
[=lq][`[`:key unsigned] [`:key short] [`:key int]][=rq],
[=lq][`[`:key unsigned] [`:key int]][=rq],
[=lq][`[`:key unsigned] [`:key long] [`:key int]][=rq], and
[=lq][`[`:key unsigned] [`:key long] [`:key long] [`:key int]][=rq].
[:zh_CN@~]
[%类型[![`unsigned char]]] [%类型[![`unsigned short]]] [%类型[![`unsigned int]]]
[%类型[![`unsigned long]]] [%类型[![`unsigned long long]]]
“[`[`:key unsigned] [`:key char]]”，
“[`[`:key unsigned] [`:key short] [`:key int]]”，
“[`[`:key unsigned] [`:key int]]”，
“[`[`:key unsigned] [`:key long] [`:key int]]”，和
“[`[`:key unsigned] [`:key long] [`:key long] [`:key int]]”。

[:en]
Likewise, for each of the extended signed integer types, there exists a
corresponding [+:adj extended unsigned integer[!type]].
[:zh_CN]
同样，对于每种扩充有符号整数类型，都存在对应的[+:adj 扩充无符号整数[!类型]]。

[:en]
The standard and extended unsigned integer types are collectively called
[+:adj unsigned integer[!types[%type]]].
[:zh_CN]
标准和扩充无符号整数类型统称为[+:adj 无符号整数[!类型]]。

[:en]
An unsigned integer type has the same width [^N] as the corresponding signed
integer type.
[:zh_CN]
无符号整数类型与其对应有符号整数类型具有相同的宽度 [^N]。

[:en]
[%arithmetic[![`unsigned]]]
The range of representable values for the unsigned type is [$0] to [$2^N-1]
(inclusive); arithmetic for the unsigned type is performed modulo [$2^N].
[:zh_CN]
[%算术[![`unsigned]]]
无符号类型的可表示值的范围为从 [$0] 到 [$2^N-1]（内含）；无符号类型的算术按照模
[$2^N] 进行运算。

[begin:note]
[:en]
Unsigned arithmetic does not overflow.
[:zh_CN]
无符号算术不会溢出。

[:en]
Overflow for signed arithmetic yields undefined behavior ([#expr.pre]).
[:zh_CN]
有符号算术的溢出产生未定义行为（[#expr.pre]）。
[end:note]

[para]
[:en]
[%signed integer representation[!two[=']s complement]]
An unsigned integer type has the same object representation,
value representation, and alignment requirements ([#basic.align]) as the
corresponding signed integer type.
[:zh_CN]
[%有符号整数的表示[!二的补码]]
无符号整数类型与其对应有符号整数类型具有相同的对象表示，值表示，和对齐要求
（[#basic.align]）。

[:en]
For each value [$x] of a signed integer type, the value of the corresponding
unsigned integer type congruent to [$x] modulo [$2^N] has the same value of
corresponding bits in its value representation.[#:fn]
[:zh_CN]
对于某个有符号整数类型的每个值 [$x]，其对应无符号整数类型中与 [$x] 模 [$2^N]
同余的值，其值表示中与 [$x] 中的各个对应位的值相同[#:fn]。

[note:foot]
[:en]
This is also known as two[=']s complement representation.
[:zh_CN]
这也被称为二的补码表示。
[note:end]

[begin:example]
[:en]
The value [$-1] of a signed integer type has the same representation as
the largest value of the corresponding unsigned type.
[:zh_CN]
有符号整数类型的 [$-1] 值，与其对应无符号类型的最大值具有相同的表示。
[end:example]

[table:listing@shape=?x1@fill=column#basic.fundamental.width
    [:en] Minimum width
    [:zh_CN] 最小宽度
    [|  [:en] Type
        [:zh_CN] 类型 ]
    [|  [:en] Minimum width [$N]
        [:zh_CN] 最小宽度 [$N] ]
]
[|] [`[`:key signed] [`:key char]]              [|] 8   [-]
[|] [`[`:key short] [`:key int]]                [|] 16  [-]
[|] [`:key int]                                 [|] 16  [-]
[|] [`[`:key long] [`:key int]]                 [|] 32  [-]
[|] [`[`:key long] [`:key long] [`:key int]]    [|] 64  [-]
[table:end]

[para]
[:en]
The width of each standard signed integer type shall not be less than the values
specified in [#:tab#basic.fundamental.width].
[:zh_CN]
各个标准有符号整数类型的宽度应当不小于 [#:tab#basic.fundamental.width] 中所指定
的值。

[:en]
The value representation of a signed or unsigned integer type comprises [$N]
bits, where N is the respective width.
[:zh_CN]
有符号或无符号整数类型的值表示由 [$N] 个位组成，其中 [$N] 为其相应的宽度。

[:en]
Each set of values for any padding bits ([#basic.types.general]) in the object
representation are alternative representations of the value specified by the
value representation.
[:zh_CN]
对象表示中的任何填充位（[#basic.types.general]）的每个值集合，都是值表示所指定的
值的替代表示。

[begin:note]
[:en]
Padding bits have unspecified value, but cannot cause traps.
[:zh_CN]
填充位具有未指明的值，但不会引发陷阱。

[:en]
In contrast, see ISO C 6.2.6.2.
[:zh_CN]
相比之下，参见 ISO C 6.2.6.2。
[end:note]

[begin:note]
[:en]
The signed and unsigned integer types satisfy the constraints given in
ISO C 5.2.4.2.1.
[:zh_CN]
有符号和无符号整数类型符合 ISO C 5.2.4.2.1 中所给出的约束条件。
[end:note]

[:en]
Except as specified above, the width of a signed or unsigned integer type is
[?impldef width of integral type].
[:zh_CN]
除了上述之外，有符号或无符号整数类型的宽度是[?impldef 整型类型的宽度]。

[para]
[:en]
Each value [$x] of an unsigned integer type with width [$N] has a unique
representation [$x = x_0 2^0 + x_1 2^1 + \ldots + x_{N-1} 2^{N-1}], where each
coefficient [$x_i] is either 0 or 1; this is called the [+base-2 representation]
of [$x].
[:zh_CN]
宽度为 [$N] 的无符号整数类型的每个值 [$x]，都具有唯一的值表示
[$x = x_0 2^0 + x_1 2^1 + \ldots + x_{N-1} 2^{N-1}]，其中的各个系数 [$x_i] 为 0
或 1；这被称为 [$x] 的[+以二为基的表示]。

[:en]
The base-2 representation of a value of signed integer type is the base-2
representation of the congruent value of the corresponding unsigned integer type.
[:zh_CN]
有符号整数类型的某个值的以二为基的表示，就是对应无符号整数类型的同余值的以二为基
的表示。

[:en]
The standard signed integer types and standard unsigned integer types are
collectively called the [+:adj standard integer[!types[%type]]],
and the extended signed integer types and extended unsigned integer types are
collectively called the [+:adj extended integer[!types[%type]]].
[:zh_CN]
标准有符号整数类型和标准无符号整数类型统称为[+:adj 标准整数[!类型]]，
而扩充有符号整数类型和扩充无符号整数类型统称为[+:adj 扩充整数[!类型]]。

[para]
[:en]
A fundamental type specified to have a signed or unsigned integer type as its
[+:adj underlying[!type]] has the same object representation,
value representation, alignment requirements ([#basic.align]), and range of
representable values as the underlying type.
[:zh_CN]
被指定为以某个有符号或无符号整数类型为其[+:adj 底层[!类型]]的基础类型，与其基础
类型具有相同的对象表示，值表示，对齐要求（[#basic.align]），以及可表示值的范围。

[:en]
Further, each value has the same representation in both types.
[:zh_CN]
此外，各个值在两个类型中具有相同的表示。

[para]
[:en]
[%type[![`char]]]
[%type[!character]]
[%[`char][!implementation-defined sign of]]
[%type[![`signed char]]]
[%character[![`signed]]]
[%type[![`unsigned char]]]
[:zh_CN]
[%类型[![`char]]]
[%类型[!字符～]]
[%[`char][!由实现定义的正负号]]
[%类型[![`signed char]]]
[%字符[![`signed]]]
[%类型[![`unsigned char]]]
[:en]
Type [`:key char] is a distinct type that has an [?impldef underlying type of
[`char]] choice of [=lq][`[`:key signed] [`:key char]][=rq] or
[=lq][`[`:key unsigned] [`:key char]][=rq] as its underlying type.
[:zh_CN]
类型 [`:key char] 是一种独立类型，并以[?impldef [`char] 的底层类型]方式选择
“[`[`:key signed] [`:key char]]”或“[`[`:key unsigned] [`:key char]]”为其底层类型。

[:en]
The three types [`:key char], [`[`:key signed] [`:key char]], and
[`[`:key unsigned] [`:key char]] are collectively called
[+:adj ordinary character[!types[%type]]].
[:zh_CN]
三个类型 [`:key char]，[`[`:key signed] [`:key char]] 和
[`[`:key unsigned] [`:key char]] 统称为[+:adj 普通字符[!类型]]。

[:en]
The ordinary character types and [`:key char8_t] are collectively called
[+:adj narrow character[!types[%type]]].
[:zh_CN]
普通字符类型和 [`:key char8_t] 统称为[+:adj 窄字符[!类型]]。

[:en]
For narrow character types, each possible bit pattern of the object
representation represents a distinct value.
[:zh_CN]
对于窄字符类型，其对象表示的每种可能的位模式都表示一个独立的值。

[begin:note]
[:en]
This requirement does not hold for other types.
[:zh_CN]
这项规定并不约束其他的类型。
[end:note]

[begin:note]
[:en]
A bit-field of narrow character type whose width is larger than the width of
that type has padding bits; see [#basic.types.general].
[:zh_CN]
窄字符类型的位字段，若其宽度大于该类型的宽度，则带有填充位；参见
[#basic.types.general]。
[end:note]

[para]
[:en]
[%[`wchar_t][%type[![`wchar_t]]]]
[%type[![`wchar_t]]]
[%type[!underlying[![`wchar_t]]]]
[:zh_CN]
[%[`wchar_t][%类型[![`wchar_t]]]]
[%类型[![`wchar_t]]]
[%类型[!底层～[![`wchar_t]]]]
[:en]
Type [`:key wchar_t] is a distinct type that has an [?impldef underlying type of
[`wchar_t]] signed or unsigned integer type as its underlying type.
[:zh_CN]
类型 [`:key wchar_t] 是一种独立类型，并以[?impldef [`wchar_t] 的底层类型]有符号
或无符号整数类型为其底层类型。

[para]
[:en]
[%[`char8_t][%type[![`char8_t]]]]
[%type[![`char8_t]]]
[%type[!underlying[![`char8_t]]]]
[:zh_CN]
[%[`char8_t][%类型[![`char8_t]]]]
[%类型[![`char8_t]]]
[%类型[!底层～[![`char8_t]]]]
[:en]
Type [`:key char8_t] denotes a distinct type whose underlying type is
[`[`:key unsigned] [`:key char]].
[:zh_CN]
类型 [`:key char8_t] 代表一种独立类型，其底层类型为
[`[`:key unsigned] [`:key char]]。

[:en]
[%[`char16_t][%type![`char16_t]]]
[%[`char32_t][%type![`char32_t]]]
[%type[![`char16_t]]] [%type[![`char32_t]]]
[%type[!underlying[![`char16_t]]]]
[%type[!underlying[![`char32_t]]]]
[:zh_CN]
[%[`char16_t][%类型![`char16_t]]]
[%[`char32_t][%类型![`char32_t]]]
[%类型[![`char16_t]]] [%类型[![`char32_t]]]
[%类型[!底层～[![`char16_t]]]]
[%类型[!底层～[![`char32_t]]]]
[:en]
Types [`:key char16_t] and [`:key char32_t] denote distinct types whose
underlying types are [`uint_least16_t] and [`uint_least32_t], respectively, in
[?libheader@ref cstdint].
[:zh_CN]
[`:key char16_t] 和 [`:key char32_t] 类型分别代表以 [?libheader@ref cstdint] 中
的 [`uint_least16_t] 和 [`uint_least32_t] 为底层类型的独立类型。

[para]
[:en]
[%Boolean type]
[%type[!Boolean]]
Type [`bool] is a distinct type that has the same object representation, value
representation, and alignment requirements as an [?impldef underlying type of
[`bool]] unsigned integer type.
[:zh_CN]
[%布尔类型]
[%类型[!布尔～]]
类型 [`bool] 是一种独立类型，与一种[?impldef [`bool] 的底层类型]无符号整数类型
具有相同的对象表示，值表示和对齐要求。

[:en]
The values of type [`:key bool] are [`:key true] and [`:key false].
[:zh_CN]
类型 [`:key bool] 的值包括 [`:key true] 和 [`:key false]。

[begin:note]
[:en]
There are no [`:key signed], [`:key unsigned], [`:key short], or
[`[`:key long] [`:key bool]] types or values.
[:zh_CN]
不存在 [`:key signed]，[`:key unsigned]，[`:key short]，或者
[`[`:key long] [`:key bool]] 的类型或值。
[end:note]

[para]
[:en]
[%type[!integral]]
The types [`:key char], [`:key wchar_t], [`:key char8_t], [`:key char16_t], and
[`:key char32_t], are collectively called [+:adj character[!types[%type]]].
[:zh_CN]
[%类型[!整型～]]
类型 [`:key char]，[`:key wchar_t]，[`:key char8_t]，[`:key char16_t]，和
[`:key char32_t]，统称为[+:adj 字符[!类型]]。

[:en]
The character types, [`bool], the signed and unsigned integer types,
and cv-qualified versions ([#basic.type.qualifier]) thereof, are collectively
termed [+integral types[%integral type]].
[:zh_CN]
字符类型，[`bool]`，有符号和无符号整数类型，以及它们的 cv 限定版本
（[#basic.type.qualifier]），统称为[+整型类型]。

[:en]
A synonym for integral type is [+integer type].
[:zh_CN]
整型类型的一个同义词是[+整数类型]。

[begin:note]
[:en]
Enumerations ([#dcl.enum]) are not integral; however, unscoped enumerations can
be promoted to integral types as specified in [#conv.prom].
[:zh_CN]
枚举（[#dcl.enum]）不是整型；然而，可以按照 [#conv.prom] 所述把无作用域枚举提升
为整型类型。
[end:note]

[para]
[:en]
[%floating-point type[%type[!floating-point]]]
The three distinct types
[%type[![`float]]] [`:key float],
[%type[![`double]]] [`:key double], and
[%type[![`long double]]] [`[`:key long] [`:key double]] can represent
floating-point numbers.
[:zh_CN]
[%浮点类型[%类型[!浮点～]]]
有三种不同类型
[%类型[![`float]]] [`:key float]，
[%类型[![`double]]] [`:key double]，和
[%类型[![`long double]]] [`[`:key long] [`:key double]] 可以表示浮点数。

[:en]
The type [`:key double] provides at least as much precision as [`:key float],
and the type [`[`:key long] [`:key double]] provides at least as much precision
as [`:key double].
[:zh_CN]
[`:key double] 类型至少提供 [`:key float] 的精度，而
[`[`:key long] [`:key double]] 类型至少提供 [`:key double] 的精度。

[:en]
The set of values of the type [`:key float] is a subset of the set of values of
the type [`:key double]; the set of values of the type [`:key double] is
a subset of the set of values of the type [`[`:key long] [`:key double]].
[:zh_CN]
[`:key float] 类型的值集是 [`:key double] 类型的值集的子集；[`:key double] 类型
的值集是 [`[`:key long] [`:key double]] 类型的值集的子集

[:en]
The types [`:key float], [`:key double], and [`[`:key long] [`:key double]], and
cv-qualified versions ([#basic.type.qualifier]) thereof, are collectively termed
[+standard floating-point types[%type[!floating-point[!standard]]]].
[:zh_CN]
类型 [`:key float]，[`:key double]，和 [`[`:key long] [`:key double]]，以及它们
的 cv 限定版本（[#basic.type.qualifier]），统称为[+标准浮点类型[%类型[!浮点～
[!标准]]]]。

[:en]
An implementation may also provide additional types that represent
floating-point values and define them (and cv-qualified versions thereof) to be
[+extended floating-point types[%type[!floating-point[!extended]]]].
[:zh_CN]
实现还可提供表示浮点值的额外类型，并将它们（和其 cv 限定的版本）定义为
[+扩充浮点类型[%类型[!浮点～[!扩充]]]]

[:en]
The standard and extended floating-point types are collectively termed
[+floating-point types[%type[!floating-point]]].
[:zh_CN]
标准和扩充浮点类型统称为[+浮点类型[%类型[!浮点～]]]。

[begin:note]
[:en]
Any additional implementation-specific types representing floating-point values
that are not defined by the implementation to be extended floating-point types
are not considered to be floating-point types, and this document imposes no
requirements on them or their interactions with floating-point types.
[:zh_CN]
任何表示浮点值的特定于实现的额外类型，若未被实现定义为扩充浮点类型，则不被当作是
浮点类型，且本文档对于它们和它们与浮点类型的互操作不施加任何规定。
[end:note]

[:en]
Except as specified in [#basic.extended.fp], the object and value
representations and accuracy of operations of floating-point types are
[?impldef representation of floating-point types].
[:zh_CN]
除了 [#basic.extended.fp] 中所规定之外, 浮点类型的对象和值表示以及操作精度是
[?impldef 浮点类型的表示]。

[para]
[:en]
The minimum range of representable values for a floating-point type is the most
negative finite floating-point number representable in that type through
the most positive finite floating-point number representable in that type.
[:zh_CN]
浮点类型的可表示值的最小范围，是从该类型可表示的最小负有穷浮点值，到该类型可表示
的最大正有穷浮点值。

[:en]
In addition, if negative infinity is representable in a type, the range of that
type is extended to all negative real numbers; likewise, if positive infinity is
representable in a type, the range of that type is extended to all positive real
numbers.
[:zh_CN]
此外，如果该类型可以表示负无穷，则该类型的范围扩展到所有负实数；相似地，如果该
类型可以表示正无穷，则该类型的范围扩展到所有正实数。

[begin:note]
[:en]
Since negative and positive infinity are representable in ISO/IEC/IEEE 60559
formats, all real numbers lie within the range of representable values of
a floating-point type adhering to ISO/IEC/IEEE 60559.
[:zh_CN]
由于负无穷和正无穷均可由 ISO/IEC/IEEE 60559 格式表示，所以所有实数均属于符合
ISO/IEC/IEEE 60559 的浮点类型的可表示值范围之内。
[end:note]

[para]
[:en]
Integral and floating-point types are collectively termed [+arithmetic types
[%type[!arithmetic]]].
[:zh_CN]
整型和浮点类型统称为[+算术类型[%类型[!算术～]]]。

[begin:note]
[:en]
Properties of the arithmetic types, such as their minimum and maximum
representable value, can be queried using the facilities in the standard library
headers [?libheader@ref limits], [?libheader@ref climits], and
[?libheader@ref cfloat].
[:zh_CN]
算术类型的各项属性，比如它们最小和最大可表示值，可以使用标准程序库头文件
[?libheader@ref limits]，[?libheader@ref climits]，和 [?libheader@ref cfloat] 中
的设施查询得到。
[end:note]

[para]
[:en]
[%type[![`void]]]
A type [=cv] [`:key void] is an incomplete type that cannot be completed; such a
type has an empty set of values.
[:zh_CN]
[%类型[![`void]]]
类型 [=cv] [`:key void] 是不能被补全的不完整类型；这种类型具有空的值集合。

[:en]
It is used as the return type for functions that do not return a value.
[:zh_CN]
它被用于不返回值的函数的返回类型。

[:en]
Any expression can be explicitly converted to type [=cv] [`:key void]
([#expr.type.conv], [#expr.static.cast], [#expr.cast]).
[:zh_CN]
任何表达式都可被显式转换为 [=cv] [`:key void]（[#expr.type.conv]，
[#expr.static.cast]，[#expr.cast]）。

[:en]
An expression of type [=cv] [`:key void] shall be used only as an expression
statement ([#stmt.expr]), as an operand of a comma expression ([#expr.comma]),
as a second or third operand of [`?:] ([#expr.cond]), as the operand of
[`:key typeid], [`:key noexcept], or [`:key decltype], as the expression in a
[`:key return] statement ([#stmt.return]) for a function with the return type
[=cv] [`:key void], or as the operand of an explicit conversion to type
[=cv] [`:key void].
[:zh_CN]
[=cv] [`:key void] 类型的表达式只能用作表达式语句（[#stmt.expr]），逗号表达式的
操作数（[#expr.comma]），[`?:] 的第二或第三操作数（[#expr.cond]），[`:key typeid]，
[`:key noexcept]，或 [`:key decltype] 的操作数，具有返回类型为 [=cv] [`:key void]
的函数的 [`:key return] 语句中的表达式（[#stmt.return]），或向类型
[=cv] [`:key void] 的显式转换的操作数。

[para]
[:en] The types denoted by [=cv] [`std::nullptr_t] are distinct types.
[:zh_CN] [=cv] [`std::nullptr_t] 所代表的类型都是独立的类型。

[:en] A value of type [`std::nullptr_t] is a null pointer constant ([#conv.ptr]).
[:zh_CN] [`std::nullptr_t] 类型的值是空指针常量（[#conv.ptr]）。

[:en] Such values participate in the pointer and the pointer-to-member
conversions ([#conv.ptr], [#conv.mem]).
[:zh_CN] 这种值参与指针转换和成员指针转换（[#conv.ptr]，[#conv.mem]）。

[:en]
[`[`:key sizeof](std::nullptr_t)] shall be equal to [`[`:key sizeof]([`:key void]*)].
[:zh_CN]
[`[`:key sizeof](std::nullptr_t)] 应当等于 [`[`:key sizeof]([`:key void]*)]。

[para]
[:en]
[%type[!fundamental]]
The types described in this subclause are called [+fundamental types
[%fundamental type]].
[:zh_CN]
[%类型[!基础～]]
本子条款描述的类型被称为[+基础类型]。

[begin:note]
[:en]
Even if the implementation defines two or more fundamental types to have the
same value representation, they are nevertheless different types.
[:zh_CN]
即使两个或多个基础类型被实现定义为具有相同的值表示，它们仍为不同类型。
[end:note]
