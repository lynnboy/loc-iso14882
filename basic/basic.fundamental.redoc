[section#basic.fundamental
    [:en] Fundamental types
    [:zh_CN] 基础类型
]

[para]
[:en]
[%type[!implementation-defined [`sizeof]]]
[%type[!standard signed integer]]
There are five [+standard signed integer types [%standard signed integer type]]:
[:zh_CN]
[%类型[!由实现定义的 [`sizeof] ～]]
[%类型[!标准有符号整数～]]
有五种[+标准有符号整数类型]：

[:en]
[%type[![`signed char]]] [%type[![`short]]] [%type[![`int]]] [%type[![`long]]]
[%type[![`long long]]]
[=lq][`signed char][=rq], [=lq][`short int][=rq], [=lq][`int][=rq], [=lq][`long
int][=rq], and [=lq][`long long int][=rq].
[:zh_CN]
[%类型[![`signed char]]] [%类型[![`short]]] [%类型[![`int]]] [%类型[![`long]]]
[%类型[![`long long]]]
“[`signed char]”、“[`short int]”、“[`int]”、“[`long int]”和“[`long long int]”。

[:en]
In this list, each type provides at least as much storage as those preceding it
in the list.
[:zh_CN]
在这个列表里，每个类型都提供至少为列表中在它之前的类型的存储大小。

[:en]
[%type[!extended signed integer]]
[%type[!signed integer]]
There may also be [?impldef extended signed integer types] [+extended signed
integer types [%extended signed integer type]].
[:zh_CN]
[%类型[!扩充有符号整数～]]
[%类型[!有符号整数～]] [%有符号整数类型]
还可以有[?impldef 扩充有符号整数类型][+扩充有符号整数类型]。

[:en]
The standard and extended signed integer types are collectively called [+signed
integer types [%signed integer type]].
[:zh_CN]
标准和扩充有符号整数类型统称为[+有符号整数类型]。

[:en] The range of representable values for a signed integer type is [$-2^{N-1}]
to [$2^{N-1}-1] (inclusive), where [$N] is called the [+wide] of the type.
[:zh_CN] 有符号整数类型的可表示值的范围是从 [$-2^{N-1}] 到 [$2^{N-1}-1]（内含），
其中 [$N] 被称为该类型的[+宽度]。

[:en]
[%integral type[!implementation-defined [`sizeof]]]
[:zh_CN]
[%整型类型[!由实现定义的 [`sizeof] ～]]
[begin:note]
[:en]
Plain [`int]s are intended to have the natural size suggested by the
architecture of the execution environment; the other signed integer types are
provided to meet special needs.
[:zh_CN]
普通 [`int] 具有其执行环境的体系结构所建议的天然大小；其他有符号整数类型是为满足
特殊需要而提供的。
[end:note]

[para]
[:en]
[%type[![`unsigned]]] [%type[!unsigned integer]]
For each of the standard signed integer types, there exists a corresponding (but
different) [%type[!standard unsigned integer]][+standard unsigned integer type]:
[:zh_CN]
[%类型[![`unsigned]]] [%类型[!无符号整数～]]
对于每种标准有符号整数类型，都存在对应的（但不同的）
[%类型[!标准无符号整数～]][+标准无符号整数类型]：

[:en@~]
[%type[![`unsigned char]]] [%type[![`unsigned short]]] [%type[![`unsigned int]]]
[%type[![`unsigned long]]] [%type[![`unsigned long long]]]
[=lq][`unsigned char][=rq], [=lq][`unsigned short int][=rq], [=lq][`unsigned
int][=rq], [=lq][`unsigned long int][=rq], and [=lq][`unsigned long long int][=rq].
[:zh_CN@~]
[%类型[![`unsigned char]]] [%类型[![`unsigned short]]] [%类型[![`unsigned int]]]
[%类型[![`unsigned long]]] [%类型[![`unsigned long long]]]
“[`unsigned char]”，“[`unsigned short int]”，“[`unsigned int]”，“[`unsigned long
int]”，和 “[`unsigned long long int]”。

[:en]
[%type[!extended unsigned integer]]
[%type[!unsigned integer]]
Likewise, for each of the extended signed integer types, there exists a
corresponding [+extended unsigned integer type].
[:zh_CN]
[%类型[!扩充无符号整数～]]
[%类型[!无符号整数～]]
同样，对于每种扩充有符号整数类型，都存在对应的[+扩充无符号整数类型]。

[:en]
The standard and extended unsigned integer types are collectively called
[+unsigned integer types [%unsigned integer type]].
[:zh_CN]
标准和扩充无符号整数类型统称为[+无符号整数类型]。

[:en]
An unsigned integer type has the same width [$N] as the corresponding signed
integer type.
[:zh_CN]
无符号整数类型与其对应有符号整数类型具有相同的宽度 [$N]。

[:en]
[%arithmetic[![`unsigned]]]
The range of representable values for the unsigned type is [$0] to [$2^N-1]
(inclusive); arithmetic for the unsigned type is performed modulo [$2^N].
[:zh_CN]
[%算术[![`unsigned]]]
无符号类型的可表示值的范围为从 [$0] 到 [$2^N-1]（内含）；无符号类型的算术按照模
[$2^N] 进行运算。

[begin:note]
[:en]
Unsigned arithmetic does not overflow.
[:zh_CN]
无符号算术不会溢出。

[:en]
Overflow for signed arithmetic yields undefined behavior ([#expr.pre]).
[:zh_CN]
有符号算术的溢出将产生未定义行为（[#expr.pre]）。
[end:note]

[para]
[:en]
[%signed integer representation[!two[=']s complement]]
An unsigned integer type has the same object representation, value
representation, and alignment requirements ([#basic.align]) as the corresponding
signed integer type.
[:zh_CN]
[%有符号整数的表示[!二的补码]]
无符号整数类型与其对应有符号整数类型具有相同的对象表示，值表示，和对齐要求
（[#basic.align]）。

[:en]
For each value [$x] of a signed integer type, the value of the corresponding
unsigned integer type congruent to [$x] modulo [$2^N] has the same value of
corresponding bits in its value representation.[#:note#fn.$1]
[:zh_CN]
对于某个有符号整数类型的每个值 [$x]，其对应无符号整数类型中与 [$x] 模 [$2^N]
同余的值，其值表示中与 [$x] 中的各个对应位的值相同。

[note:foot#fn.$1]
[:en]
This is also known as two[=']s complement representation.
[:zh_CN]
这也被称为二的补码表示。
[note:end]

[begin:example]
[:en]
The value [$-1] of a signed integer type has the same representation as
the largest value of the corresponding unsigned type.
[:zh_CN]
有符号整数类型的 [$-1] 值，与其对应无符号类型的最大值具有相同的表示。
[end:example]

[table:listing@shape=?x1@fill=column#basic.fundamental.width
    [:en] Minimum width
    [:zh_CN] 最小宽度

    [|@code
        [:en] Type
        [:zh_CN] 类型 ]
    [|  [:en] Minimum width [$N]
        [:zh_CN] 最小宽度 [$N] ]
]

[|] signed char
[|] 8
[-]

[|] short
[|] 16
[-]

[|] int
[|] 16
[-]

[|] long
[|] 32
[-]

[|] long long
[|] 64
[-]

[table:end]

[para]
[:en]
The width of each signed integer type shall not be less than the values
specified in [#:tab#basic.fundamental.width].
[:zh_CN]
各个有符号整数类型的宽度应当不小于 [#:tab#basic.fundamental.width] 中所指定的值。

[:en]
The value representation of a signed or unsigned integer type comprises [$N]
bits, where N is the respective width.
[:zh_CN]
有符号或无符号整数类型的值表示由 [$N] 个位组成，其中 [$N] 为其相应的宽度。

[:en]
Each set of values for any padding bits ([#basic.types]) in the object
representation are alternative representations of the value specified by the
value representation.
[:zh_CN]
对象表示中的任何填充位（[#basic.types]）的每个值集合，都是值表示所指定的值的
替代表示。

[begin:note]
[:en]
Padding bits have unspecified value, but do not cause traps.
[:zh_CN]
填充位具有未指明的值，但不会引发陷阱。

[:en]
See also ISO C 6.2.6.2.
[:zh_CN]
另见 ISO C 6.2.6.2。
[end:note]

[begin:note]
[:en]
The signed and unsigned integer types satisfy the constraints given in
ISO C 5.2.4.2.1.
[:zh_CN]
有符号和无符号整数类型符合 ISO C 5.2.4.2.1 中所给出的约束条件。
[end:note]

[:en]
Except as specified above, the width of a signed or unsigned integer type is
[?impldef width of integral type].
[:zh_CN]
除了上述之外，有符号或无符号整数类型的宽度是[?impldef 整型类型的宽度]。

[para]
[:en]
Each value [$x] of an unsigned integer type with width [$N] has a unique
representation [$x = x_0 2^0 + x_1 2^1 + \ldots + x_{N-1} 2^{N-1}], where each
coefficient [$x_i] is either 0 or 1; this is called the [+base-2 representation]
of [$x].
[:zh_CN]
宽度为 [$N] 的无符号整数类型的每个值 [$x]，都具有唯一的值表示
[$x = x_0 2^0 + x_1 2^1 + \ldots + x_{N-1} 2^{N-1}]，其中的各个系数 [$x_i] 为 0
或 1；这被称为 [$x] 的[+以二为基的表示]。

[:en]
The base-2 representation of a value of signed integer type is the base-2
representation of the congruent value of the corresponding unsigned integer type.
[:zh_CN]
有符号整数类型的某个值的以二为基的表示，就是对应无符号整数类型的同余值的以二为基
的表示。

[:en]
[%type[!standard integer]]
[%type[!extended integer]]
The standard signed integer types and standard unsigned integer types are
collectively called the [+standard integer types [%standard integer type]], and
the extended signed integer types and extended unsigned integer types are
collectively called the [+extended integer types [%extended integer type]].
[:zh_CN]
[%类型[!标准整数～]]
[%类型[!扩充整数～]]
标准有符号整数类型和标准无符号整数类型统称为[+标准整数类型]，而扩充有符号整数
类型和扩充无符号整数类型统称为[+扩充整数类型]。

[para]
[:en]
[%underlying type[%type, [!underlying]]]
A fundamental type specified to have a signed or unsigned integer type as its
[+underlying type] has the same object representation, value representation,
alignment requirements ([#basic.align]), and range of representable values as
the underlying type.
[:zh_CN]
[%底层类型[%类型[!底层～]]]
被指定以某个有符号或无符号整数类型为其[+底层类型]的基础类型，与其基础类型具有
相同的对象表示，值表示，对齐要求（[#basic.align]），以及可表示值的范围。

[:en]
Further, each value has the same representation in both types.
[:zh_CN]
此外，各个值在两个类型中具有相同的表示。

[para]
[:en]
[%type[![`char]]]
[%type[!character]]
[%type[!ordinary character]]
[%type[!narrow character]]
[%[`char][!implementation-defined sign of]]
[%type[![`signed char]]]
[%character[![`signed]]]
[%type[![`unsigned char]]]
[:zh_CN]
[%类型[![`char]]]
[%类型[!字符～]]
[%类型[!普通字符～]]
[%类型[!窄字符～]]
[%[`char][!由实现定义的正负号]]
[%类型[![`signed char]]]
[%字符[![`signed]]]
[%类型[![`unsigned char]]]
[:en]
Type [`char] is a distinct type that has an [?impldef underlying type of
[`char]] choice of [=lq][`signed char][=rq] or [=lq][`unsigned char][=rq] as its
underlying type.
[:zh_CN]
类型 [`char] 是一种独立类型，并以[?impldef [`char] 的底层类型]方式选择
“[`signed char]”或“[`unsigned char]”为其底层类型。

[:en]
The values of type [`char] can represent distinct codes for all members of the
implementation[=']s basic character set.
[:zh_CN]
类型 [`char] 的值可以用于表示实现的基本字符集的所有成员的各个独立编码。

[:en]
The three types [`char], [`signed char], and [`unsigned char] are collectively
called [+ordinary character types[%type[!ordinary character]]].
[:zh_CN]
三个类型 [`char]，[`signed char] 和 [`unsigned char] 统称为[+普通符类型
[%类型[!普通字符～]]]。

[:en]
The ordinary character types and [`char8_t] are collectively called
[+narrow character types[%narrow character type]].
[:zh_CN]
普通字符类型和 [`char8_t] 统称为[+窄字符类型[%窄字符类型]]。

[:en]
For narrow character types, each possible bit pattern of the object
representation represents a distinct value.
[:zh_CN]
对于窄字符类型，其对象表示的每种可能的位模式都表示一个独立的值。

[begin:note]
[:en]
This requirement does not hold for other types.
[:zh_CN]
这项规定并不约束其他的类型。
[end:note]

[begin:note]
[:en]
A bit-field of narrow character type whose width is larger than the width of
that type has padding bits; see [#basic.types].
[:zh_CN]
窄字符类型的位字段，若其宽度大于该类型的宽度，则带有填充位；参见 [#basic.types]。
[end:note]

[para]
[:en]
[%[`wchar_t][%type[![`wchar_t]]]]
[%type[![`wchar_t]]]
[%type[!underlying[![`wchar_t]]]]
[:zh_CN]
[%[`wchar_t][%类型[![`wchar_t]]]]
[%类型[![`wchar_t]]]
[%类型[!底层～[![`wchar_t]]]]
[:en]
Type [`wchar_t] is a distinct type that has an [?impldef underlying type of
[`wchar_t]] signed or unsigned integer type as its underlying type.
[:zh_CN]
类型 [`wchar_t] 是一种独立类型，并以[?impldef [`wchar_t] 的底层类型]有符号或
无符号整数类型为其底层类型。

[:en]
The values of type [`wchar_t] can represent distinct codes for all members of
the largest extended character set specified among the supported locales
([#locale]).
[:zh_CN]
类型 [`wchar_t] 的值可以用于表示所支持的各个地域（[#locale]）中所指定的最大的
扩充字符集的所有成员的各个独立编码。

[para]
[:en]
[%[`char8_t][%type[![`char8_t]]]]
[%type[![`char8_t]]]
[%type[!underlying[![`char8_t]]]]
[:zh_CN]
[%[`char8_t][%类型[![`char8_t]]]]
[%类型[![`char8_t]]]
[%类型[!底层～[![`char8_t]]]]
[:en]
Type [`char8_t] denotes a distinct type whose underlying type is
[`unsigned char].
[:zh_CN]
类型 [`char8_t] 代表一种独立类型，其底层类型为 [`unsigned char]。

[:en]
[%[`char16_t][%type![`char16_t]]]
[%[`char32_t][%type![`char32_t]]]
[%type[![`char16_t]]] [%type[![`char32_t]]]
[%type[!underlying[![`char16_t]]]]
[%type[!underlying[![`char32_t]]]]
[:zh_CN]
[%[`char16_t][%类型![`char16_t]]]
[%[`char32_t][%类型![`char32_t]]]
[%类型[![`char16_t]]] [%类型[![`char32_t]]]
[%类型[!底层～[![`char16_t]]]]
[%类型[!底层～[![`char32_t]]]]
[:en]
Types [`char16_t] and [`char32_t] denote distinct types whose underlying types
are [`uint_least16_t] and [`uint_least32_t], respectively, in
[?libheader@ref cstdint].
[:zh_CN]
[`char16_t] 和 [`char32_t] 类型分别代表以 [?libheader@ref cstdint] 中的
[`uint_least16_t] 和 [`uint_least32_t] 为底层类型的独立类型。

[para]
[:en]
[%Boolean type]
[%type[!Boolean]]
Type [`bool] is a distinct type that has the same object representation, value
representation, and alignment requirements as an [?impldef underlying type of
[`bool]] unsigned integer type.
[:zh_CN]
[%布尔类型]
[%类型[!布尔～]]
类型 [`bool] 是一种独立类型，与一种[?impldef [`bool] 的底层类型]无符号整数类型
具有相同的对象表示，值表示和对齐要求。

[:en]
The values of type [`bool] are [`true] and [`false].
[:zh_CN]
类型 [`bool] 的值包括 [`true] 和 [`false]。

[begin:note]
[:en]
There are no [`signed], [`unsigned], [`short], or [`long bool] types or values.
[:zh_CN]
不存在 [`signed]，[`unsigned]，[`short]，或者 [`long bool] 的类型或值。
[end:note]

[para]
[:en]
[%type[!integral]]
Types [`bool], [`char], [`wchar_t], [`char8_t], [`char16_t], [`char32_t], and
the signed and unsigned integer types are collectively called [+integral types
[%integral type]].
[:zh_CN]
[%类型[!整型～]]
类型 [`bool]，[`char]，[`wchar_t]，[`char8_t]，[`char16_t]，[`char32_t]，以及
有符号和无符号整数类型统称为[+整型类型]。

[:en]
A synonym for integral type is [+integer type].
[:zh_CN]
整型类型的一个别名是[+整数类型]。

[begin:note]
[:en]
Enumerations ([#dcl.enum]) are not integral; however, unscoped enumerations can
be promoted to integral types as specified in [#conv.prom].
[:zh_CN]
枚举（[#dcl.enum]）不是整型；然而，可以按照 [#conv.prom] 所述把无作用域枚举提升
为整型类型。
[end:note]

[para]
[:en]
[%floating-point type[%type[!floating-point]]]
There are three [+floating-point types[%type[!floating-point]]]:
[%type[![`float]]] [`float],
[%type[![`double]]] [`double], and
[%type[![`long double]]] [`long double].
[:zh_CN]
[%浮点类型[%类型[!浮点～]]]
有三种[+浮点类型[%类型[!浮点～]]]：
[%类型[![`float]]] [`float]，
[%类型[![`double]]] [`double]，以及
[%类型[![`long double]]] [`long double]。

[:en]
The type [`double] provides at least as much precision as [`float], and the type
[`long double] provides at least as much precision as [`double].
[:zh_CN]
[`double] 类型至少提供 [`float] 的精度，而 [`long double] 类型至少提供 [`double]
的精度。

[:en]
The set of values of the type [`float] is a subset of the set of values of the
type [`double]; the set of values of the type [`double] is a subset of the set
of values of the type [`long double].
[:zh_CN]
[`float] 类型的值集是 [`double] 类型的值集的子集；[`double] 类型的值集是 [`long
double] 类型的值集的子集

[:en]
[%floating point type[!implementation-defined]]
The value representation of floating-point types is [?impldef value
representation of floating-point types].
[:zh_CN]
[%浮点类型[!由实现定义的～]]
浮点类型的值表示是[?impldef 浮点类型的值表示]。

[begin:note]
[:en]
This document imposes no requirements on the accuracy of floating-point
operations; see also [#support.limits].
[:zh_CN]
本文档对于浮点操作的精度不施加任何规定；另见 [#support.limits]。
[end:note]

[:en]
Integral and floating-point types are collectively called [+arithmetic
[%type[!arithmetic]]] types.
[:zh_CN]
整型和浮点类型统称为[+算术[%类型[!算术～]]]类型。

[:en]
[%[`numeric_limits][!specializations for arithmetic types]]
Specializations of the standard template [`std::numeric_limits]
([#support.limits]) shall specify the maximum and minimum values of each
arithmetic type for an implementation.
[:zh_CN]
[%[`numeric_limits][!算术类型的特例]]
标准模板 [`std::numeric_limits]（[#support.limits]）的特例应当指出实现中每种算术
类型的最大值和最小值。

[para]
[:en]
[%type[![`void]]]
A type [$cv] [`void] is an incomplete type that cannot be completed; such a type
has an empty set of values.
[:zh_CN]
[%类型[![`void]]]
类型 [$cv] [`void] 是不能被补全的不完整类型；这种类型具有空的值集合。

[:en]
It is used as the return type for functions that do not return a value.
[:zh_CN]
它被用于不返回值的函数的返回类型。

[:en]
Any expression can be explicitly converted to type [$cv] [`void]
([#expr.type.conv], [#expr.static.cast], [#expr.cast]).
[:zh_CN]
任何表达式都可被显式转换为 [$cv] [`void]（[#expr.type.conv]，[#expr.static.cast]，
[#expr.cast]）。

[:en]
An expression of type [$cv] [`void] shall be used only as an expression
statement ([#stmt.expr]), as an operand of a comma expression ([#expr.comma]),
as a second or third operand of [`?:] ([#expr.cond]), as the operand of
[`typeid], [`noexcept], or [`decltype], as the expression in a [`return]
statement ([#stmt.return]) for a function with the return type [$cv] [`void], or
as the operand of an explicit conversion to type [$cv] [`void].
[:zh_CN]
[$cv] [`void] 类型的表达式只能用作表达式语句（[#stmt.expr]），逗号表达式的操作数
（[#expr.comma]），[`?:] 的第二或第三操作数（[#expr.cond]），[`typeid]，
[`noexcept]，或 [`decltype] 的操作数，具有返回类型为 [$cv] [`void] 的函数的
[`return] 语句中的表达式（[#stmt.return]），或向类型 [$cv] [`void] 的显式转换的
操作数。

[para]
[:en]
A value of type [`std::nullptr_t] is a null pointer constant ([#conv.ptr]).
[:zh_CN]
[`std::nullptr_t] 类型的值是空指针常量（[#conv.ptr]）。

[:en]
Such values participate in the pointer and the pointer-to-member conversions
([#conv.ptr], [#conv.mem]).
[:zh_CN]
这种值参与指针转换和成员指针转换（[#conv.ptr]，[#conv.mem]）。

[:en]
[`sizeof(std::nullptr_t)] shall be equal to [`sizeof(void*)].
[:zh_CN]
[`sizeof(std::nullptr_t)] 应当等于 [`sizeof(void*)]。

[para]
[:en]
[%type[!fundamental]]
The types described in this subclause are called [+fundamental types
[%fundamental type]].
[:zh_CN]
[%类型[!基础～]]
本子条款描述的类型被称为[+基础类型]。

[begin:note]
[:en]
Even if the implementation defines two or more fundamental types to have the
same value representation, they are nevertheless different types.
[:zh_CN]
即使两个或多个基础类型被实现定义为具有相同的值表示，它们仍为不同类型。
[end:note]
