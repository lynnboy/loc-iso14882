[section#basic.lookup.argdep
    [:en] Argument-dependent name lookup
    [:zh_CN] 依赖于实参的名字查找
[%  [:en] lookup[!argument-dependent]
    [:zh_CN] 查找[!依赖于实参的～] ]
]

[para]
[:en]
When the [~postfix-expression] in a function call ([#expr.call]) is an
[~unqualified-id], other namespaces not considered during the usual unqualified
lookup ([#basic.lookup.unqual]) may be searched, and in those namespaces,
namespace-scope friend function or function template declarations
([#class.friend]) not otherwise visible may be found.
[:zh_CN]
当函数调用中的[~后缀表达式]（[#expr.call]）为[~未限定名]时，还会搜索那些在常规的
未限定查找（[#basic.lookup.unqual]）中并不考虑的其他命名空间，而且在这些命名空间
中，即使是不可见的命名空间作用域友元函数或函数模板的声明式（[#class.friend]）
也能被找到。

[:en]
These modifications to the search depend on the types of the arguments (and for
template template arguments, the namespace of the template argument).
[:zh_CN]
对搜索过程的这些变动依赖于实参的类型（以及对于模板模板实参来说，还依赖于模板实参
的命名空间）。

[begin:example]
[codeblock]
namespace N {
  struct S { };
  void f(S);
}

void g() {
  N::S s;
  f(s);             // [:en] OK: calls [`N::f]
                    // [|:zh_CN] OK：调用了 [`N::f]
  (f)(s);           // [:en] error: [`N::f] not considered; parentheses prevent argument-dependent lookup
                    // [|:zh_CN] 错误：并未考虑 [`N::F]；括号防止了依赖于实参的查找
}
[codeblock:end]
[end:example]

[para]
[:en]
For each argument type [`T] in the function call, there is a set of zero or more
[+associated namespaces [%namespace[!associated]]] and a set of zero or more
[+associated entities[%entity[!associated]]] (other than namespaces) to be
considered.
[:zh_CN]
对于函数调用中的每个实参类型 [`T]，都需要考察一个零或多个[+关联命名空间
[%命名空间[!关联～]]]的集合和一个零或多个（除命名空间外的）[+关联实体
[%实体[!关联～]]]的集合。

[:en]
The sets of namespaces and entities are determined entirely by the types of the
function arguments (and the namespace of any template template argument).
[:zh_CN]
命名空间集合和实体集合完全由各个函数实参的类型（以及任何模板模板实参的命名空间）
所确定。

[:en]
Typedef names and [~using-declaration]s used to specify the types do not
contribute to this set.
[:zh_CN]
用于指定类型的 typedef 名和 [~using-声明式]对这些集合没有贡献。

[:en]
The sets of namespaces and entities are determined in the following way:
[:zh_CN]
按如下方式确定命名空间集合和实体集合：

[list]
[item]
[:en]
If [`T] is a fundamental type, its associated sets of namespaces and entities
are both empty.
[:zh_CN]
若 [`T] 为基础类型，则它所关联的命名空间和实体集合都为空。

[item]
[:en]
If [`T] is a class type (including unions), its associated entities are: the
class itself; the class of which it is a member, if any; and its direct and
indirect base classes.
[:zh_CN]
若 [`T] 为类类型（包括联合体），则它所关联的实体为：该类本身；该类作为其成员的类
（如果有）；它的直接和间接基类。

[:en]
Its associated namespaces are the innermost enclosing namespaces of its
associated entities.
[:zh_CN]
它所关联的命名空间为其每个关联实体的最内层外围命名空间。

[:en]
Furthermore, if [`T] is a class template specialization, its associated
namespaces and entities also include: the namespaces and entities associated
with the types of the template arguments provided for template type parameters
(excluding template template parameters); the templates used as template
template arguments; the namespaces of which any template template arguments are
members; and the classes of which any member templates used as template template
arguments are members.
[:zh_CN]
此外，若 [`T] 为类模板特例，则它所关联的命名空间和实体还包括：与提供给各个模板
类型形参（排除模板模板形参）的模板实参类型相关联的命名空间和实体；用作模板模板
实参的模板；以模板模板实参为其成员的命名空间；以及用作模板模板实参的成员模板为
其成员的类。

[begin:note]
[:en]
Non-type template arguments do not contribute to the set of associated
namespaces.
[:zh_CN]
非类型模板实参对关联的命名空间集合没有贡献。
[end:note]

[item]
[:en]
If [`T] is an enumeration type, its associated namespace is the innermost
enclosing namespace of its declaration, and its associated entities are [`T]
and, if it is a class member, the member[=']s class.
[:zh_CN]
若 [`T] 为枚举类型，则它所关联的命名空间为在其中定义了它的最内层外围命名空间，而
其所关联的实体为 [`T]，以及当它是类成员时包括该成员所在的类。

[item]
[:en]
If [`T] is a pointer to [`U] or an array of [`U], its associated namespaces and
entities are those associated with [`U].
[:zh_CN]
若 [`T] 为 [`U] 的指针或 [`U] 的数组，则它关联 [`U] 所关联的命名空间和实体。

[item]
[:en]
If [`T] is a function type, its associated namespaces and entities are those
associated with the function parameter types and those associated with the
return type.
[:zh_CN]
若 [`T] 为函数类型，则它关联该函数的形参类型和返回类型所关联的命名空间和实体。

[item]
[:en]
If [`T] is a pointer to a member function of a class [`X], its associated
namespaces and entities are those associated with the function parameter types
and return type, together with those associated with [`X].
[:zh_CN]
若 [`T] 是指向类 [`X] 的成员函数的指针，则它关联该函数的形参类型和返回类型所关联
的，以及 [`X] 所关联的命名空间和实体。

[item]
[:en]
If [`T] is a pointer to a data member of class [`X], its associated namespaces
and entities are those associated with the member type together with those
associated with [`X].
[:zh_CN]
若 [`T] 为指向类 [`X] 的数据成员的指针，则它关联该成员的类型所关联的，以及 [`X]
所关联的命名空间和实体。
[list:end]

[:en]
If an associated namespace is an inline namespace ([#namespace.def]), its
enclosing namespace is also included in the set.
[:zh_CN]
如果某个关联的命名空间是内联命名空间（[#namespace.def]），则其外围命名空间也包含
在该集合中。

[:en]
If an associated namespace directly contains inline namespaces, those inline
namespaces are also included in the set.
[:zh_CN]
如果某个关联的命名空间直接包含了某些内联命名空间，则这些内联命名空间也包含在该
集合中。

[:en]
In addition, if the argument is the name or address of a set of overloaded
functions and/or function templates, its associated entities and namespaces are
the union of those associated with each of the members of the set, i.e., the
entities and namespaces associated with its parameter types and return type.
[:zh_CN]
另外，若该实参是一个重载函数和/或函数模板的集合的名字或地址，则它所关联的实体和
命名空间是该集合的每个成员所关联的（也就是与其各个形参类型和返回类型相关联的实体
和命名空间）并集。

[:en]
Additionally, if the aforementioned set of overloaded functions is named with
a [~template-id], its associated entities and namespaces also include those of
its type [~template-argument]s and its template [~template-argument]s.
[:zh_CN]
此外，如果上述重载函数的集合是以一个[~模板标识]指名的，则其所关联的实体和
命名空间还包括其类型[~模板实参]及其模板[~模板实参]所关联的实体和命名空间。

[para]
[:en]
Let [^X] be the lookup set produced by unqualified lookup
([#basic.lookup.unqual]) and let [^Y] be the lookup set produced by argument
dependent lookup (defined as follows).
[:zh_CN]
令 [^X] 为由未限定名查找（[#basic.lookup.unqual]）产生的查找集合，并令 [^Y] 为
由依赖于实参的查找（如下文定义）产生的查找集合。

[:en]
If [^X] contains
[:zh_CN]
若 [^X] 包含

[list]
[item]
[:en@~]
a declaration of a class member, or
[:zh_CN@~]
类成员的声明式，或

[item]
[:en@~]
a block-scope function declaration that is not a [~using-declaration], or
[:zh_CN@~]
不是 [~using-声明式]的块作用域函数声明式，或

[item]
[:en@~]
a declaration that is neither a function nor a function template
[:zh_CN@~]
不是函数或函数模板的声明式
[list:end]

[:en@~]
then [^Y] is empty.
[:zh_CN@~]
则 [^Y] 为空。

[:en]
Otherwise [^Y] is the set of declarations found in the namespaces associated
with the argument types as described below.
[:zh_CN]
否则 [^Y] 为按如下所述在与实参类型相关联的命名空间中找到的声明式的集合。

[:en]
The set of declarations found by the lookup of the name is the union of [^X] and
[^Y].
[:zh_CN]
对该名字进行的查找所找到的声明式的集合是 [^X] 和 [^Y] 的并集。

[begin:note]
[:en]
The namespaces and entities associated with the argument types can include
namespaces and entities already considered by the ordinary unqualified lookup.
[:zh_CN]
实参类型所关联的命名空间和实体可能包括已经被常规未限定查找考察过的命名空间和实体。
[end:note]

[begin:example]
[codeblock]
namespace NS {
  class T { };
  void f(T);
  void g(T, int);
}
NS::T parm;
void g(NS::T, float);
int main() {
  f(parm);                      // [:en] OK: calls [`NS::f]
                                // [|:zh_CN] OK：调用了 [`NS::f]
  extern void g(NS::T, float);
  g(parm, 1);                   // [:en] OK: calls [`g(NS::T, float)]
                                // [|:zh_CN] OK：调用了 [`g(NS::T, float)]
}
[codeblock:end]
[end:example]

[para]
[:en]
When considering an associated namespace [`N], the lookup is the same as the
lookup performed when [`N] is used as a qualifier ([#namespace.qual]) except
that:
[:zh_CN]
当考察关联的命名空间 [`N] 时，其查找过程与当以 [`N] 作为限定符时所进行的查找
（[#namespace.qual]）相同，除了：

[list]
[item]
[:en]
Any [~using-directive]s in [`N] are ignored.
[:zh_CN]
忽略 [`N] 中的任何 [~using-指令]。

[item]
[:en]
All names except those of (possibly overloaded) functions and function templates
are ignored.
[:zh_CN]
忽略除了（可能重载的）函数或函数模板的名字外的所有名字。

[item]
[:en]
Any namespace-scope friend functions or friend function templates
([#class.friend]) declared in classes with reachable definitions in the set of
associated entities are visible within their respective namespaces even if they
are not visible during an ordinary lookup ([#namespace.memdef]).
[:zh_CN]
在关联的实体集合中带有可达的定义式的类中所声明的任何命名空间作用域的友元函数或
友元函数模板（[#class.friend]），在其各自命名空间中可见，即便它们在常规的查找中
并不可见（[#namespace.memdef]）。

[item]
[:en]
Any declaration [`D] in [`N] that is in the interface of a named module [`M]
([#module.interface]) is visible if there is an associated entity attached to
[`M] with the same innermost enclosing non-inline namespace as [`D].
[:zh_CN]
[`N] 中处于某个具名模块 [`M] 的接口（[#module.interface]）中的任何声明式 [`D]，
如果存在附属于 [`M] 的某个关联实体，且与 [`D] 具有相同最内层外围非内联命名空间，
则该声明式可见。

[item]
[:en]
If the lookup is for a dependent name ([#temp.dep], [#temp.dep.candidate]), any
declaration [`D] in [`N] is visible if [`D] would be visible to qualified name
lookup ([#namespace.qual]) at any point in the instantiation context
([#module.context]) of the lookup, unless [`D] is declared in another
translation unit, attached to the global module, and is either discarded
([#module.global]) or has internal linkage.
[:zh_CN]
如果为某个待决名进行名字查找（[#temp.dep]，[#temp.dep.candidate]），对于 [`N] 中
的任何声明式 [`D]，只要 [`D] 在该查找的实例化语境（[#module.context]）中的任意点
对于限定名查找（[#namespace.qual]）可见，则该声明式可见，除非 [`D] 声明于其他
翻译单元，附属于全局模块，并且要么被丢弃（[#module.global]）要么具有内部连接。
[list:end]

[para]
[begin:example]
[:en] Translation unit #1:
[:zh_CN] 翻译单元 #1：
[codeblock]
export module M;
namespace R {
  export struct X {};
  export void f(X);
}
namespace S {
  export void f(X, X);
}
[codeblock:end]

[:en] Translation unit #2:
[:zh_CN] 翻译单元 #2：
[codeblock]
export module N;
import M;
export R::X make();
namespace R { static int g(X); }
export template<typename T, typename U> void apply(T t, U u) {
  f(t, u);
  g(t);
}
[codeblock:end]

[:en] Translation unit #3:
[:zh_CN] 翻译单元 #3：
[codeblock]
module Q;
import N;
namespace S {
  struct Z { template<typename T> operator T(); };
}
void test() {
  auto x = make();              // [:en] OK, [`decltype(x)] is [`R::X] in module [`M]
                                // [|:zh_CN] OK，[`decltype(x)] 为模块 [`M] 中的 [`R::X]
  R::f(x);                      // [:en] ill-formed: [`R] and [`R::f] are not visible here
                                // [|:zh_CN] 非良构：[`R] 和 [`R::f] 此处不可见
  f(x);                         // [:en] OK, calls [`R::f] from interface of [`M]
                                // [|:zh_CN] OK，调用模块 [`M] 接口中的 [`R::f]
  f(x, S::Z());                 // [:en] ill-formed: [`S::f] in module [`M] not considered
                                // [|:zh_CN] 非良构：不会考虑模块 [`M] 中的 [`S::f]
                                // [:en@~] even though [`S] is an associated namespace
                                // [|:zh_CN@~] 即便 [`S] 是其关联命名空间
  apply(x, S::Z());             // [:en] OK, [`S::f] is visible in instantiation context, and
                                // [|:zh_CN] OK，[`S::f] 在实例化语境中可见，并且
                                // [:en@~] [`R::g] is visible even though it has internal linkage
                                // [|:zh_CN@~] 即便 [`S::g] 具有内部连接也可见
}
[codeblock:end]
[end:example]
