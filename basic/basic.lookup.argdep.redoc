[section#basic.lookup.argdep
    [:en] Argument-dependent name lookup
    [:zh_CN] 依赖于实参的名字查找
[%  [:en] lookup[!argument-dependent]
    [:zh_CN] 查找[!依赖于实参的～] ]
]

[para]
[:en]
When the [~postfix-expression] in a function call ([#expr.call]) is an
[~unqualified-id], and unqualified lookup ([#basic.lookup.unqual]) for the name
in the [~unqualified-id] does not find any
[:zh_CN]
当函数调用中的[~后缀表达式]（[#expr.call]）为[~未限定名]，并且对[~未限定名]中的
名字进行未限定查找（[#basic.lookup.unqual]）未能找到

[list]
[item]
[:en@~] declaration of a class member, or
[:zh_CN@~] 类成员的声明式，或
[item]
[:en@~] function declaration inhabiting a block scope, or
[:zh_CN@~] 居于块作用域的函数声明式，或
[item]
[:en@~] declaration not of a function or function template
[:zh_CN@~] 不是函数或函数模板的声明式，
[list:end]

[:en@~]
then lookup for the name also includes the result of [+:adj argument-dependent
lookup[%argument-dependent[!lookup]]] in a set of associated namespaces that
depends on the types of the arguments (and for template template arguments, the
namespace of the template argument), as specified below.
[:zh_CN@~] 则对这个名字的查找还包括，在一组取决于各实参的类型的关联命名空间
（以及对于模板模板实参，其模板实参的命名空间）中进行的[+:adj 依赖于实参的查找
[%依赖于实参[!查找]]]，如下文所述。

[begin:example]
[codeblock]
namespace N {
  struct S { };
  void f(S);
}

void g() {
  N::S s;
  f(s);             // [:en] OK: calls [`N::f] \
                       [:zh_CN] OK：调用了 [`N::f]
  (f)(s);           // [:en] error: [`N::f] not considered; parentheses prevent argument-dependent lookup \
                       [:zh_CN] 错误：并未考虑 [`N::F]；括号防止了依赖于实参的查找
}
[codeblock:end]
[end:example]

[para]
[begin:note]
[:en]
For purposes of determining (during parsing) whether an expression is a
[~postfix-expression] for a function call, the usual name lookup rules apply.
[:zh_CN]
当（在语法解析时）确定表达式是否是某函数调用的[~后缀表达式]时，使用常规的
名字查找规则。

[:en]
In some cases a name followed by [`<] is treated as a [~template-name] even
though name lookup did not find a [~template-name] (see [#temp.names]).
[:zh_CN]
某些情况下，即便通过名字查找并未找到一个[~模板名]时，后面跟着 [`<] 的名字仍将被
当做是[~模板名]（参见 [#temp.names]）。

[:en]
For example,
[:zh_CN]
例如，

[codeblock]
int h;
void g();
namespace N {
  struct A {};
  template <class T> int f(T);
  template <class T> int g(T);
  template <class T> int h(T);
}

int x = f<N::A>(N::A());        // [:en] OK: lookup of [`f] finds nothing, [`f] treated as template name \
                                   [:zh_CN] OK：对 [`f] 的查找未找到任何声明式，[`f] 被当做模板名
int y = g<N::A>(N::A());        // [:en] OK: lookup of [`g] finds a function, [`g] treated as template name \
                                   [:zh_CN] OK：对 [`g] 的查找找到了一个函数，[`g] 被当做模板名
int z = h<N::A>(N::A());        // [:en] error: [`h<] does not begin a [~template-id] \
                                   [:zh_CN] 错误：[`h<] 并不开始一个[~模板标识]
[codeblock:end]

[:en]
The rules have no effect on the syntactic interpretation of an expression.
[:zh_CN]
这些规则对表达式的语法判读没有影响。

[:en]
For example,
[:zh_CN]
例如，

[codeblock]
typedef int f;
namespace N {
  struct A {
    friend void f(A &);
    operator int();
    void g(A a) {
      int i = f(a);             // [:en] [`f] is the typedef, not the friend function: equivalent to [`int(a)] \
                                   [:zh_CN] 是 typedef，而不是友元函数：等价于 [`int(a)]
    }
  };
}
[codeblock:end]

[:en]
Because the expression is not a function call, the argument-dependent
name lookup does not apply and the friend function [`f] is not found.
[:zh_CN]
因为该表达式并不是函数调用，所以依赖于实参的名字查找不适用，且友元函数 [`f] 没被
找到。
[end:note]

[para]
[:en]
For each argument type [`T] in the function call, there is a set of zero or more
[+associated entities[%entity[!associated]]] to be considered.
[:zh_CN]
对于函数调用中的每个实参类型 [`T]，都需要考察一个零或多个[+关联实体
[%实体[!关联～]]]的集合。

[:en]
The sets of entities is determined entirely by the types of the function
arguments (and any template template arguments).
[:zh_CN]
实体集合完全由各个函数实参的类型（以及任何模板模板实参）所确定。

[:en]
Typedef names and [~using-declaration]s used to specify the types do not
contribute to this set.
[:zh_CN]
用于指定类型的 typedef 名和 [~using-声明式]对这些集合没有贡献。

[:en]
The set of entities is determined in the following way:
[:zh_CN]
按如下方式确定实体集合：

[list]
[item]
[:en]
If [`T] is a fundamental type, its associated set of entities is empty.
[:zh_CN]
若 [`T] 为基础类型，则它所关联的实体集合为空。

[item]
[:en]
If [`T] is a class type (including unions), its associated entities are: the
class itself; the class of which it is a member, if any; and its direct and
indirect base classes.
[:zh_CN]
若 [`T] 为类类型（包括联合体），则它所关联的实体为：该类本身；该类作为其成员的类
（如果有）；它的直接和间接基类。

[:en]
Furthermore, if [`T] is a class template specialization, its associated entities
also include: the entities associated with the types of the template arguments
provided for template type parameters; the templates used as template template
arguments; and the classes of which any member templates used as template
template arguments are members.
[:zh_CN]
此外，若 [`T] 为类模板特例，则它所关联的实体还包括：与提供给各个模板类型形参的
模板实参类型相关联的实体；用作模板模板实参的模板；以及用作模板模板实参的成员模板
为其成员的类。

[begin:note]
[:en]
Non-type template arguments do not contribute to the set of associated entities.
[:zh_CN]
非类型模板实参对关联的实体集合没有贡献。
[end:note]

[item]
[:en]
If [`T] is an enumeration type, its associated entities are [`T] and, if it is
a class member, the member[=']s class.
[:zh_CN]
若 [`T] 为枚举类型，则它所关联的实体为 [`T]，以及当它是类成员时包括该成员所在的类。

[item]
[:en]
If [`T] is a pointer to [`U] or an array of [`U], its associated entities are
those associated with [`U].
[:zh_CN]
若 [`T] 为 [`U] 的指针或 [`U] 的数组，则它关联 [`U] 所关联的实体。

[item]
[:en]
If [`T] is a function type, its associated entities are those associated with
the function parameter types and those associated with the return type.
[:zh_CN]
若 [`T] 为函数类型，则它关联该函数的形参类型和返回类型所关联的实体。

[item]
[:en]
If [`T] is a pointer to a member function of a class [`X], its associated
entities are those associated with the function parameter types and return type,
together with those associated with [`X].
[:zh_CN]
若 [`T] 是指向类 [`X] 的成员函数的指针，则它关联该函数的形参类型和返回类型所关联
的，以及 [`X] 所关联的实体。

[item]
[:en]
If [`T] is a pointer to a data member of class [`X], its associated entities are
those associated with the member type together with those associated with [`X].
[:zh_CN]
若 [`T] 为指向类 [`X] 的数据成员的指针，则它关联该成员的类型所关联的，以及 [`X]
所关联的实体。
[list:end]

[:en]
In addition, if the argument is an overload set or the address of such a set,
its associated entities are the union of those associated with each of the
members of the set, i.e., the entities associated with its parameter types and
return type.
[:zh_CN]
另外，若该实参是一个重载集合或这种集合的地址，则它所关联的实体是该集合的每个成员
所关联的（也就是与其各个形参类型和返回类型相关联的实体）并集。

[:en]
Additionally, if the aforementioned overload set is named with a [~template-id],
its associated entities also include those associated with its type
[~template-argument]s.
[:zh_CN]
此外，如果上述重载集合是以一个[~模板标识]指名的，则其所关联的实体还包括其类型
[~模板实参]所关联的实体。

[para]
[:en]
The [+:% associated namespaces] for a call are the innermost enclosing
non-inline namespaces for its associated entities as well as every element of
the inline namespace set ([#namespace.def]) of those namespaces.
[:zh_CN]
某次调用的[+:% 关联命名空间]是其所关联的各个实体的最内层外围非内联命名空间，以及
这些命名空间的内联命名空间集合（）的每个元素。

[:en]
Argument-dependent lookup finds all declarations of functions and function
templates that
[:zh_CN]
依赖于实参的查找会找到符合以下情况的全部函数和函数模板声明式：

[list]
[item]
[:en@~]
are found by a search of any associated namespace, or
[:zh_CN@~]
在任何关联命名空间中所找到的，或者
[item]
[:en@~]
are declared as a friend ([#class.friend]) of any class with a reachable
definition in the set of associated entities, or
[:zh_CN@~]
被声明为任何具有关联实体集合中的可达定义式的类的友元（[#class.friend]），或者
[item]
[:en@~]
are exported, are attached to a named module [`M] ([#module.interface]),
do not appear in the translation unit containing the point of the lookup, and
have the same innermost enclosing non-inline namespace scope as
a declaration of an associated entity attached to [`M] ([#basic.link]).
[:zh_CN@~]
被导出，附属于具名模块 [`M]（[#module.interface]），并未出现在包含查找的点的
翻译单元中，并且和某个附属于 [`M] 的关联实体的声明式具有相同的最内层外围非内联
命名空间作用域（[#basic.link]）。
[list:end]

[:en]
If the lookup is for a dependent name ([#temp.dep], [#temp.dep.candidate]),
the above lookup is also performed from each point in the instantiation context
([#module.context]) of the lookup, additionally ignoring any declaration that
appears in another translation unit, is attached to the global module, and
is either discarded ([#module.global.frag]) or has internal linkage.
[:zh_CN]
如果时针对待决名的查找（[#temp.dep]，[#temp.dep.candidate]），这上述查找还要在
该查找的实例化语境（[#module.context]）中的每个点进行，但要忽略出现于其他
翻译单元中的，附属于全局模块的，以及或者被丢弃（[#module.global.frag]）或者具有
内部连接的声明式。

[para]
[begin:example]
[:en] Translation unit #1:
[:zh_CN] 翻译单元 #1：
[codeblock]
export module M;
namespace R {
  export struct X {};
  export void f(X);
}
namespace S {
  export void f(R::X, R::X);
}
[codeblock:end]

[:en] Translation unit #2:
[:zh_CN] 翻译单元 #2：
[codeblock]
export module N;
import M;
export R::X make();
namespace R { static int g(X); }
export template<typename T, typename U> void apply(T t, U u) {
  f(t, u);
  g(t);
}
[codeblock:end]

[:en] Translation unit #3:
[:zh_CN] 翻译单元 #3：
[codeblock]
module Q;
import N;
namespace S {
  struct Z { template<typename T> operator T(); };
}
void test() {
  auto x = make();              // [:en] OK, [`decltype(x)] is [`R::X] in module [`M] \
                                   [:zh_CN] OK，[`decltype(x)] 为模块 [`M] 中的 [`R::X]
  R::f(x);                      // [:en] error: [`R] and [`R::f] are not visible here \
                                   [:zh_CN] 错误：[`R] 和 [`R::f] 此处不可见
  f(x);                         // [:en] OK, calls [`R::f] from interface of [`M] \
                                   [:zh_CN] OK，调用模块 [`M] 接口中的 [`R::f]
  f(x, S::Z());                 // [:en] error: [`S::f] in module [`M] not considered \
                                   [:zh_CN] 错误：不会考虑模块 [`M] 中的 [`S::f]
                                // [:en@~] even though [`S] is an associated namespace \
                                   [:zh_CN@~] 即便 [`S] 是其关联命名空间
  apply(x, S::Z());             // [:en] error: [`S::f] is visible in instantiation context, but \
                                   [:zh_CN] 错误：[`S::f] 在实例化语境中可见，但
                                // [:en@~] [`R::g] has internal linkage and cannot be used outside TU \
                                   [:zh_CN@~] [`S::g] 具有内部连接而不能在翻译单元之外使用
}
[codeblock:end]
[end:example]

[para]
[begin:note]
[:en]
The associated namespace can include namespaces already considered by ordinary
unqualified lookup.
[:zh_CN]
关联命名空间中可以包括已经在常规的未限定查找中考察过的命名空间。
[end:note]

[begin:example]
[codeblock]
namespace NS {
  class T { };
  void f(T);
  void g(T, int);
}
NS::T parm;
void g(NS::T, float);
int main() {
  f(parm);                      // [:en] OK: calls [`NS::f] \
                                   [:zh_CN] OK：调用 [`NS::f]
  extern void g(NS::T, float);
  g(parm, 1);                   // [:en] OK: calls [`g(NS::T, float)] \
                                   [:zh_CN] OK：调用 [`g(NS::T, float)]
}
[codeblock:end]
[end:example]
