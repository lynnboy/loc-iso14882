[section#basic.types.general
    [:en] General
    [:zh_CN] 概述
]

[para]
[begin:note]
[:en]
[#basic.types] and the subclauses thereof impose requirements on implementations
regarding the representation of types.
[:zh_CN]
[#basic.types] 及其子条款对实现施加了关于类型的表示的规定。

[:en]
There are two kinds of types: fundamental types and compound types.
[:zh_CN]
类型有两种：基础类型和复合类型。

[:en]
Types describe objects ([#intro.object]), references ([#dcl.ref]), or functions
([#dcl.fct]).
[:zh_CN]
类型用于描述对象（[#intro.object]）、引用（[#dcl.ref]）或函数（[#dcl.fct]）。
[end:note]

[%:begin#object.byte.copying.and
    [:en] object [!byte copying and]
    [:zh_CN] 对象 [!按字节复制与～]
]

[para]
[:en]
[%type[!trivially copyable]]
For any object (other than a potentially-overlapping subobject) of trivially
copyable type [`T], whether or not the object holds a valid value of type [`T],
the underlying bytes ([#intro.memory]) making up the object can be copied into
an array of [`:key char], [`[`:key unsigned] [`:key char]], or [`std::byte]
([#cstddef.syn]).[#:fn]
[:zh_CN]
[%类型[!可平凡复制的～]]
对于可平凡复制类型 [`T] 的（不是潜在重叠子对象的）任意对象，无论该对象是否持有
类型 [`T] 的有效值，都可以将底层组成该对象的字节（[#intro.memory]）复制到一个
[`:key char]、[`[`:key unsigned] [`:key char]] 或 [`std::byte]（[#cstddef.syn]）
的数组中[#:fn]。

[note:foot]
[:en]
By using, for example, the library functions ([#headers]) [`std::memcpy] or
[`std::memmove].
[:zh_CN]
通过使用（比如）程序库函数（[#headers]）[`std::memcpy] 或 [`std::memmove]。
[note:end]

[:en]
If the content of that array is copied back into the object, the object shall
subsequently hold its original value.
[:zh_CN]
若将该数组的内容复制回该对象，则随后该对象应持有它原来的值。

[begin:example]
[codeblock]
constexpr std::size_t N = sizeof(T);
char buf[N];
T obj;                          // [:en] [`obj] initialized to its original value \
                                [:zh_CN] 初始化 [`obj] 为其初始值
std::memcpy(buf, &obj, N);      // [:en] between these two calls to [`std::memcpy], [`obj] might be modified \
                                [:zh_CN] 在这两次对 [`std::memory] 的调用之间，[`obj] 可能被改动
std::memcpy(&obj, buf, N);      // [:en] at this point, each subobject of [`obj] of scalar type holds its original value \
                                [:zh_CN] 此处，[`obj] 的每个标量类型子对象都持有其初始值
[codeblock:end]
[end:example]

[para]
[:en]
For two distinct objects [`obj1] and [`obj2] of trivially copyable type [`T],
where neither [`obj1] nor [`obj2] is a potentially-overlapping subobject, if the
underlying bytes ([#intro.memory]) making up [`obj1] are copied into [`obj2],[#:fn]
[`obj2] shall subsequently hold the same value as [`obj1].
[:zh_CN]
对于可平凡复制类型 [`T] 的两个不同对象 [`obj1] 和 [`obj2]，其中 [`obj1] 和 [`obj2]
都不是潜在重叠子对象，若将构成 [`obj1] 的底层字节（[#intro.memory]）复制给
[`obj2][#:fn]，则 [`obj2] 随后应当持有与 [`obj1] 相同的值。

[note:foot]
[:en]
By using, for example, the library functions ([#headers]) [`std::memcpy] or
[`std::memmove].
[:zh_CN]
通过使用（比如）程序库函数（[#headers]）[`std::memcpy] 或 [`std::memmove]。
[note:end]

[begin:example]
[codeblock]
T* t1p;
T* t2p;
    // [:en] provided that [`t2p] points to an initialized object ... \
    [:zh_CN] 假设 [`t2p] 指向一个未初始化的对象……
std::memcpy(t1p, t2p, sizeof(T));
    // [:en] at this point, every subobject of trivially copyable type in [`*t1p] contains \
    [:zh_CN] 此处，[`t1p] 中的每个可平凡复制类型的子对象包含
    // [:en@~] the same value as the corresponding subobject in [`*t2p] \
    [:zh_CN@~] [`*t2p] 中对应子对象相同的值
[codeblock:end]
[end:example]

[%:end#object.byte.copying.and]

[para#term.object.representation]
[:en]
The [+object representation[%representation[!object]]] of a complete object of
type [`T] is the sequence of [^N] [`[`:key unsigned] [`:key char]] objects taken
up by a non-bit-field complete object of type [`T], where [^N] equals
[`[`:key sizeof](T)].
[:zh_CN]
类型 [`T] 的完整对象的[+对象表示[%表示[!对象～]]]，是被类型 [`T] 的非位字段完整
对象所占据的 [^N] 个 [`[`:key unsigned] [`:key char]] 对象的序列，其中 [^N] 等于
[`[`:key sizeof](T)]。

[:en]
The [+value representation[%representation[!value]]] of a type [`T] is the set
of bits in the object representation of [`T] that participate in representing a
value of type [`T].
[:zh_CN]
类型 [`T] 的[+值表示[%表示[!值～]]]，是 [`T] 的对象表示中参与表示类型 [`T] 的值
的位的集合。

[:en]
The object and value representation of a non-bit-field complete object of type
[`T] are the bytes and bits, respectively, of the object corresponding to the
object and value representation of its type.
[:zh_CN]
类型 [`T] 的非位字段完整对象的对象和值的表示，分别是对应于其类型的对象和值表示
的对象中的各个字节和位。

[:en]
The object representation of a bit-field object is the sequence of [^N] bits
taken up by the object, where [^N] is the width of the bit-field ([#class.bit]).
[:zh_CN]
位字段对象的对象表示，是由该对象占据的 [^N] 个位的序列，其中 [^N] 为位字段的宽度
（[#class.bit]）。

[:en]
The value representation of a bit-field object is the set of bits in the object
representation that participate in representing its value.
[:zh_CN]
位字段对象的值表示，是对象表示中参与表示其值的位的集合。

[para:~#term.padding.bits]
[:en] Bits in the object representation of a type or object that are not part of
the value representation are [+padding bits].
[:zh_CN] 类型或对象的对象表示中不属于值表示的位是[+填充位]。

[:en]
For trivially copyable types, the value representation is a set of bits in the
object representation that determines a [+value], which is one discrete element
of an [?impldef values of a trivially copyable type] set of values.[#:fn]
[:zh_CN]
对于可平凡复制类型，其值表示是在其对象表示中决定其[+值]的位的集合，而这个值是
某个[?impldef 可平凡复制类型的值]值的集合中的一个独立元素[#:fn]。

[note:foot]
[:en]
The intent is that the memory model of [=Cpp] is compatible with that of the C
programming language.
[:zh_CN]
这是为了使 [=Cpp] 的内存模型兼容于程序设计语言 C。
[note:end]

[para]
[:en]
[%type[!incompletely-defined object]]
A class that has been declared but not defined, an enumeration type in certain
contexts ([#dcl.enum]), or an array of unknown bound or of incomplete element
type, is an [+:adj incompletely-defined[!object type]].[#:fn]
[:zh_CN]
[%类型[!定义不完整的对象～]]
已声明但未定义的类，某些特定语境中的枚举类型（[#dcl.enum]），或者未知边界或元素
类型不完整的数组，是[+:adj 定义不完整的[!对象类型]][#:fn]。

[note:foot]
[:en]
The size and layout of an instance of an incompletely-defined object type is
unknown.
[:zh_CN]
定义不完整的对象类型的实例的大小和布局是未知的。
[note:end]

[para:~#term.incomplete.type]
[:en]
Incompletely-defined object types and [=cv] [`:key void] are [+incomplete types
[%type[!incomplete]]] ([#basic.fundamental]).
[:zh_CN]
定义不完整的对象类型和 [=cv] [`:key void] 是[+不完整类型[%类型[!不完整～]]]
（[#basic.fundamental]）。

[begin:note]
[:en]
Objects cannot be defined to have an incomplete type ([#basic.def]).
[:zh_CN]
对象不能定义为不完整类型（[#basic.def]）。
[end:note]

[para]
[:en]
A class type (such as [=lq][`[`:key class] X][=rq]) can be incomplete at one
point in a translation unit and complete later on; the type
[=lq][`[`:key class] X][=rq] is the same type at both points.
[:zh_CN]
类类型（如“[`[`:key class] X]”）可以在翻译单元中的某处是不完整的，但可在后面补全；
这两处的类型“[`[`:key class] X]”是同一个类型。

[:en]
The declared type of an array object can be an array of incomplete class type
and therefore incomplete; if the class type is completed later on in the
translation unit, the array type becomes complete; the array type at those two
points is the same type.
[:zh_CN]
用于声明数组对象的类型可以是不完整类类型的数组，此时它是不完整的；若这个类类型在
翻译单元中的后面被补全，则该数组类型也变完整；这两点处的数组类型是同一个类型。

[:en]
The declared type of an array object can be an array of unknown bound and
therefore be incomplete at one point in a translation unit and complete later on;
the array types at those two points ([=lq]array of unknown bound of [`T][=rq]
and [=lq]array of [`N] [`T][=rq]) are different types.
[:zh_CN]
用于声明数组对象的类型可以是未知大小的数组，此时它在翻译单元中的某处是不完整的，
但可在后面补全；这两点处的数组类型（“[`T] 的边界未知数组”和“[`T] 的 [`N] 元数组”）
是不同的类型。

[begin:note]
[:en]
The type of a pointer or reference to array of unknown bound
permanently points to or refers to an incomplete type.
[:zh_CN]
指向未知边界的数组的指针或引用的类型永远指向或指代不完整类型。

[:en]
An array of unknown bound named by a [`:key typedef] declaration
permanently refers to an incomplete type.
[:zh_CN]
由 [`:key typedef] 声明式所指名的未知边界的数组永远代表不完整类型。

[:en]
In either case, the array type cannot be completed.
[:zh_CN]
各种情况中的数组类型均无法变得完整。
[end:note]

[begin:example]
[%  [:en] type[!example of incomplete]
    [:zh_CN] 类型[!不完整～的例子]]
[codeblock]
class X;                        // [:en] [`X] is an incomplete type \
                                [:zh_CN] [`X] 是不完整类型
extern X* xp;                   // [:en] [`xp] is a pointer to an incomplete type \
                                [:zh_CN] [`xp] 是不完整类型的指针
extern int arr[];               // [:en] the type of [`arr] is incomplete \
                                [:zh_CN] [`arr] 的类型不完整
typedef int UNKA[];             // [:en] [`UNKA] is an incomplete type \
                                [:zh_CN] [`UNKA] 是不完整类型
UNKA* arrp;                     // [:en] [`arrp] is a pointer to an incomplete type \
                                [:zh_CN] [`arrp] 是不完整类型的指针
UNKA** arrpp;

void foo() {
  xp++;                         // [:en] error: [`X] is incomplete \
                                [:zh_CN] 错误：[`X] 不完整
  arrp++;                       // [:en] error: incomplete type \
                                [:zh_CN] 错误：不完整类型
  arrpp++;                      // [:en] OK, sizeof [`UNKA*] is known \
                                [:zh_CN] OK，[`UNKA*] 大小未知
}

struct X { int i; };            // [:en] now [`X] is a complete type \
                                [:zh_CN] 此处 [`X] 是完整类型
int  arr[10];                   // [:en] now the type of [`arr] is complete \
                                [:zh_CN] 此处 [`arr] 的类型完整

X x;
void bar() {
  xp = &x;                      // [:en] OK; type is [=lq]pointer to [`X][=rq] \
                                [:zh_CN] OK；类型为“[`X] 的指针”
  arrp = &arr;                  // [:en] OK; qualification conversion ([#conv.qual]) \
                                [:zh_CN] OK；限定转换（[#conv.qual]）
  xp++;                         // [:en] OK, [`X] is complete \
                                [:zh_CN] OK，[`X] 完整
  arrp++;                       // [:en] error: [`UNKA] can[=']t be completed \
                                [:zh_CN] 错误：[`UNKA] 无法补全
}
[codeblock:end]
[end:example]

[para]
[begin:note]
[:en]
The rules for declarations and expressions describe in which contexts incomplete
types are prohibited.
[:zh_CN]
在关于声明式和表达式的规则中说明了何种语境禁止不完整类型。
[end:note]

[para#term.object.type]
[:en]
An [+object type] is a (possibly cv-qualified) type that is not a function type,
not a reference type, and not [=cv] [`:key void].
[:zh_CN]
不是函数类型，不是引用类型，且不是 [=cv] [`:key void] 的（可能被 cv 限定的）类型
是[+对象类型]。

[para#term.scalar.type]
[:en]
[%class[!trivial]] [%class[!trivially copyable]] [%class[!standard-layout]]
Arithmetic types ([#basic.fundamental]), enumeration types, pointer types,
pointer-to-member types ([#basic.compound]), [`std::nullptr_t], and cv-qualified
([#basic.type.qualifier]) versions of these types are collectively called
[+:adj scalar[!types[%type]]].
[:zh_CN]
[%类[!平凡～]] [%类[!可平凡复制～]] [%类[!标准布局～]]
算术类型（[#basic.fundamental]），枚举类型，指针类型，成员指针类型
（[#basic.compound]），[`std::nullptr_t]，以及这些类型被 cv 限定的版本
（[#basic.type.qualifier]）统称为[+:adj 标量[!类型]]。

[para:~#term.trivially.copyable.type]
[:en]
Scalar types, trivially copyable class types ([#class.prop]), arrays of such
types, and cv-qualified versions of these types are collectively called
[+:adj trivially copyable[!types[%type]]].
[:zh_CN]
标量类型，可平凡复制的类类型（[#class.prop]），这些类型的数组，以及这些类型被 cv
限定的版本统称为[+:adj 可平凡复制[!类型]]。

[para:~#term.trivial.type]
[:en]
Scalar types, trivial class types ([#class.prop]), arrays of such types and
cv-qualified versions of these types are collectively called
[+:adj trivial[!types[%type]]].
[:zh_CN]
标量类型，平凡类类型（[#class.prop]），这些类型的数组，以及这些类型被 cv 限定的
版本统称为[+:adj 平凡[!类型]]。

[para:~#term.standard.layout.type]
[:en]
Scalar types, standard-layout class types ([#class.prop]), arrays of such types,
and cv-qualified versions of these types are collectively called
[+:adj standard-layout[!types[%type]]].
[:zh_CN]
标量类型，标准布局类类型（[#class.prop]），这些类型的数组，以及这些类型被 cv
限定的版本统称为[+:adj 标准布局[!类型]]。

[para:~#term.implicit.lifetime.type]
[:en]
Scalar types, implicit-lifetime class types ([#class.prop]), array types, and
cv-qualified versions of these types are collectively called
[+:adj implicit-lifetime[!types[%type]]].
[:zh_CN]
标量类型，隐式生存期类类型（[#class.prop]），数组类型，以及这些类型被 cv 限定的
版本统称为[+:adj 隐式生存期[!类型]]。

[para#term.literal.type]
[:en]
A type is a [+:adj literal[!type]] if it is:
[:zh_CN]
若类型满足如下条件，则它是[+:adj 字面[!类型]]：

[list]
[item]
[:en@~] [=cv] [`:key void]; or
[:zh_CN@~] [=cv] [`:key void]；或者

[item]
[:en@~] a scalar type; or
[:zh_CN@~] 标量类型；或者

[item]
[:en@~] a reference type; or
[:zh_CN@~] 引用类型；或者

[item]
[:en] an array of literal type; or
[:zh_CN] 字面类型的数组；或者

[item]
[:en] a possibly cv-qualified class type ([#class]) that has all of the
following properties:
[:zh_CN] 带有如下全部性质的可能被 cv 限定的类类型（[#class]）：

[list]
[item]
[:en] it has a constexpr destructor ([#dcl.constexpr]),
[:zh_CN] 带有 constexpr 析构函数（[#dcl.constexpr]），

[item]
[:en] all of its non-static non-variant data members and base classes are of
non-volatile literal types, and
[:zh_CN] 其所有非静态非可变数据成员和基类均为非 volatile 字面类型，以及

[item]
[:en] it
[:zh_CN] 它是
[list]
[item]
[:en@~] is a closure type ([#expr.prim.lambda.closure]),
[:zh_CN@~] 闭包类型（[#expr.prim.lambda.closure]），
[item]
[:en@~] is an aggregate union type that has either no variant members or
at least one variant member of non-volatile literal type,
[:zh_CN@~] 聚合联合体类型，且或者没有可变成员或者具有至少一个非 volatile 字面类型
的可变成员，
[item]
[:en@~] is a non-union aggregate type for which each of its anonymous union
members satisfies the above requirements for an aggregate union type, or
[:zh_CN@~] 非联合体聚合类型，其每个匿名联合体成员均满足以上针对聚合联合体类型的
规定，或者
[item]
[:en@~] has at least one constexpr constructor or constructor template (possibly
inherited ([#namespace.udecl]) from a base class) that is not a copy or move
constructor.
[:zh_CN@~] 具有至少一个不是复制或移动构造函数的 constexpr 构造函数或构造函数模板
（其可能继承于（[#namespace.udecl]）某个基类）。
[list:end]
[list:end]
[list:end]

[begin:note]
[:en]
A literal type is one for which it might be possible to create an object within
a constant expression.
[:zh_CN]
字面类型是有可能在常量表达式中创建其对象的类型。

[:en]
It is not a guarantee that it is possible to create such an object, nor is it a
guarantee that any object of that type will be usable in a constant expression.
[:zh_CN]
既不保证可以创建这样的对象，也不保证该类型的任何对象都可以在常量表达式中使用。
[end:note]

[para#term.layout.compatible.type]
[:en]
Two types [=cv cv1] [`T1] and [=cv cv2] [`T2] are [+:adj layout-compatible
[!types[%type]]] if [`T1] and [`T2] are the same type, layout-compatible
enumerations ([#dcl.enum]), or layout-compatible standard-layout class types
([#class.mem]).
[:zh_CN]
若两个类型 [`T1] 和 [`T2] 是相同类型，布局兼容的枚举（[#dcl.enum]），或布局兼容
的标准布局类类型（[#class.mem]），则 [=cv cv1] [`T1] 和 [=cv cv2] [`T2] 是
[+:adj 布局兼容[!类型]]。
