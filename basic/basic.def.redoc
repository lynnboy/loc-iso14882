[section#basic.def
    [:en] Declarations and definitions
    [:zh_CN] 声明式和定义式
]

[para]
[:en]
[%declaration[!definition versus]]
[%declaration]
[%declaration[!name]]
A declaration ([#dcl.dcl]) may (re)introduce one or more names and/or entities
into a translation unit.
[:zh_CN]
[%声明式[!定义式与～]]
[%声明式]
[%声明式[!名字]]
声明式（[#dcl.dcl]）能够向翻译单元中（再次）引入一个或多个名字和/或实体。

[:en]
If so, the declaration specifies the interpretation and semantic properties of
these names.
[:zh_CN]
若有名字被引入，则声明式指定了这些名字的判读和语义性质。

[:en]
A declaration of an entity or [~typedef-name] [$X] is a redeclaration of [$X]
if another declaration of [$X] is reachable from it ([#module.reach]).
[:zh_CN]
对于某个实体或 [~typedef-名] [$X] 的声明式，若有另一个 [$X] 的声明式从它可达
（[#module.reach]），则它是 [$X] 的重复声明。

[:en]
A declaration may also have effects including:
[:zh_CN]
声明式还可能带有下列效果：

[list]
[item]
[:en]
a static assertion ([#dcl.pre]),
[:zh_CN]
静态断言（[#dcl.pre]），

[item]
[:en]
controlling template instantiation ([#temp.explicit]),
[:zh_CN]
控制模板的实例化（[#temp.explicit]），

[item]
[:en]
guiding template argument deduction for constructors ([#temp.deduct.guide]),
[:zh_CN]
指引构造函数的模板实参推断（[#temp.deduct.guide]），

[item]
[:en]
use of attributes ([#dcl.attr]), and
[:zh_CN]
使用特性标注（[#dcl.attr]），以及

[item]
[:en]
nothing (in the case of an [~empty-declaration]).
[:zh_CN]
无效果（对于[~空声明式]的情况）。
[list:end]

[para]
[:en]
[%declaration[!function]]
[%definition]
Each entity declared by a [~declaration] is also [+defined[%define]] by that
declaration unless:
[:zh_CN]
[%声明式[!函数～]]
[%定义式]
每个由其[~声明式]所声明的实体也被其所[+定义]，除非：

[list]
[item]
[:en]
it declares a function without specifying the function[=']s body
([#dcl.fct.def]),
[:zh_CN]
声明式声明了函数但未指定其函数体（[#dcl.fct.def]），

[item]
[:en]
it contains the [%declaration[![`extern]]] [`:key extern] specifier ([#dcl.stc])
or a [~linkage-specification][#:fn#] ([#dcl.link]) and neither an [~initializer]
nor a [~function-body],
[:zh_CN]
声明式中包含[%声明式[![`extern]]][`:key extern] 说明符（[#dcl.stc]）或[~连接说明]
[#:fn#]（[#dcl.link]）且既没有[~初始化式]也没有[~函数体]，

[note:foot]
[:en]
Appearing inside the brace-enclosed [~declaration-seq] in a
[~linkage-specification] does not affect whether a declaration is a definition.
[:zh_CN]
声明式是否出现在[~连接说明]中以花括号包围的[~声明式序列]之中，并不影响它是否是
定义式。
[note:end]

[item]
[:en]
[%declaration[![`static] member]]
it declares a non-inline static data member in a class definition ([#class.mem],
[#class.static]),
[:zh_CN]
[%声明式[!静态成员]]
它在类的定义式中声明非内联静态数据成员（[#class.mem]，[#class.static]），

[item]
[:en]
it declares a static data member outside a class definition and the variable was
defined within the class with the [`:key constexpr] specifier (this usage is
deprecated; see [#depr.static.constexpr]),
[:zh_CN]
它在类定义式外面声明静态数据成员，而该变量在类中的定义带有 [`:key constexpr]
说明符（这种用法是被摒弃的；参见 [#depr.static.constexpr]），

[item]
[:en]
[%declaration[!class name]] it is an [~elaborated-type-specifier]
([#class.name]),
[:zh_CN]
[%声明式[!类名～]] 它是[~详述类型说明符]（[#class.name]），

[item]
[:en]
it is an [%declaration[!opaque enum]] [~opaque-enum-declaration] ([#dcl.enum]),
[:zh_CN]
它是个[%声明式[!笼统枚举～]][~笼统枚举声明式]（[#dcl.enum]），

[item]
[:en]
it is a [%parameter[!template]] [%template parameter] [~template-parameter]
([#temp.param]),
[:zh_CN]
它是个[%形参[!模板～]] [%模板形参] [~模板形参]（[#temp.param]），

[item]
[:en]
it is a
[%declaration[!parameter]][%parameter declaration] [~parameter-declaration]
([#dcl.fct]) in a function [%declarator] declarator that is not the
[~declarator] of a [~function-definition],
[:zh_CN]
它是某个函数[%声明符]声明符中的[%声明式[!形参～]][%形参声明式][~形参声明式]，而
该声明符并非[~函数定义式]中的[~声明符]（[#dcl.fct]），

[item]
[:en]
it is a [%declaration[![`typedef]]] [`:key typedef] declaration ([#dcl.typedef]),
[:zh_CN]
它是个[%声明式[![`typedef]]] [`:key typedef] 声明式（[#dcl.typedef]），

[item]
[:en]
it is an [~alias-declaration] ([#dcl.typedef]),
[:zh_CN]
它是个[~别名声明式]（[#dcl.typedef]），

[item]
[:en]
it is a [~using-declaration] ([#namespace.udecl]),
[:zh_CN]
它是个[~using-声明式]（[#namespace.udecl]），

[item]
[:en]
it is a [~deduction-guide] ([#temp.deduct.guide]),
[:zh_CN]
它是个[~推断导引]（[#temp.deduct.guide]），

[item]
[:en]
it is a [~static_assert-declaration] ([#dcl.pre]),
[:zh_CN]
它是个 [~static_assert-声明式]（[#dcl.pre]），

[item]
[:en]
it is an [~attribute-declaration] ([#dcl.pre]),
[:zh_CN]
它是个[~特性标注声明式]（[#dcl.pre]），

[item]
[:en]
it is an [~empty-declaration] ([#dcl.pre]),
[:zh_CN]
它是个[~空声明式]（[#dcl.pre]），

[item]
[:en]
it is a [~using-directive] ([#namespace.udir]),
[:zh_CN]
它是个 [~using-指令]（[#namespace.udir]），

[item]
[:en]
it is a [~using-enum-declaration] ([#enum.udecl]),
[:zh_CN]
它是个 [~using-枚举声明式]（[#enum.udecl]），

[item]
[:en]
it is a [~template-declaration] ([#temp.pre]) whose [~template-head] is not
followed by either a [~concept-definition] or a [~declaration] that defines
a function, a class, a variable, or a static data member.
[:zh_CN]
它是个[~模板声明式]（[#temp.pre]），其[~模板头]之后跟着的既不是[~概念定义式]也
不是定义函数、类、变量或静态数据成员的[~声明式]。

[item]
[:en]
it is an explicit instantiation declaration ([#temp.explicit]), or
[:zh_CN]
它是个显式实例化声明式（[#temp.explicit]），或者

[item]
[:en]
it is an explicit specialization ([#temp.expl.spec]) whose [~declaration] is not
a definition.
[:zh_CN]
它是其[~声明式]不为定义式的显式特化式（[#temp.expl.spec]）。
[list:end]

[:en]
A declaration is said to be a [+definition] of each entity that it defines.
[:zh_CN]
声明式被称为其所定义的各个实体的[+定义式]。

[begin:example]
[:en]
All but one of the following are definitions:
[:zh_CN]
下面只有一个不是定义式：

[codeblock]
int a;                          // [:en] defines [`a] \
                                   [:zh_CN] 定义了 [`a]
extern const int c = 1;         // [:en] defines [`c] \
                                   [:zh_CN] 定义了 [`c]
int f(int x) { return x+a; }    // [:en] defines [`f] and defines [`x] \
                                   [:zh_CN] 定义了 [`f] 并定义了 [`x]
struct S { int a; int b; };     // [:en] defines [`S], [`S::a], and [`S::b] \
                                   [:zh_CN] 定义了 [`S]，[`S::a]，和 [`S::b]
struct X {                      // [:en] defines [`X] \
                                   [:zh_CN] 定义了 [`X]
  int x;                        // [:en] defines non-static data member [`x] \
                                   [:zh_CN] 定义了非静态数据成员 [`x]
  static int y;                 // [:en] declares static data member [`y] \
                                   [:zh_CN] 声明了静态数据成员 [`y]
  X(): x(0) { }                 // [:en] defines a constructor of [`X] \
                                   [:zh_CN] 定义了 [`X] 的一个构造函数
};
int X::y = 1;                   // [:en] defines [`X::y] \
                                   [:zh_CN] 定义了 [`X::y]
enum { up, down };              // [:en] defines [`up] and [`down] \
                                   [:zh_CN] 定义了 [`up] 和 [`down]
namespace N { int d; }          // [:en] defines [`N] and [`N::d] \
                                   [:zh_CN] 定义了 [`N] 和 [`N::d]
namespace N1 = N;               // [:en] defines [`N1] \
                                   [:zh_CN] 定义了 [`N1]
X anX;                          // [:en] defines [`anX] \
                                   [:zh_CN] 定义了 [`anX]
[codeblock:end]

[:en@~]
whereas these are just declarations:
[:zh_CN@~]
而这些只是声明式：

[codeblock]
extern int a;                   // [:en] declares [`a] \
                                   [:zh_CN] 声明了 [`a]
extern const int c;             // [:en] declares [`c] \
                                   [:zh_CN] 声明了 [`c]
int f(int);                     // [:en] declares [`f] \
                                   [:zh_CN] 声明了 [`f]
struct S;                       // [:en] declares [`S] \
                                   [:zh_CN] 声明了 [`S]
typedef int Int;                // [:en] declares [`Int] \
                                   [:zh_CN] 声明了 [`Int]
extern X anotherX;              // [:en] declares [`anotherX] \
                                   [:zh_CN] 声明了 [`anotherX]
using N::d;                     // [:en] declares [`d] \
                                   [:zh_CN] 声明了 [`d]
[codeblock:end]

[end:example]

[para]
[begin:note]
[:en]
[%implementation-generated]
In some circumstances, [=Cpp] implementations implicitly define the
default constructor ([#class.default.ctor]), copy constructor, move constructor
([#class.copy.ctor]), copy assignment operator, move assignment operator
([#class.copy.assign]), or destructor ([#class.dtor]) member functions.
[:zh_CN]
[%由实现生成的]
某些情况下，[=Cpp] 实现隐含地定义默认构造函数（[#class.default.ctor]），
复制构造函数，移动构造函数（[#class.copy.ctor]），复制赋值运算符，移动赋值运算符
（[#class.copy.assign]），或析构函数（[#class.dtor]）等成员函数。
[end:note]

[begin:example]
[:en]
Given
[:zh_CN]
给定

[codeblock]
#include <string>

struct C {
  std::string s;                // [:en] [`std::string] is the standard library class ([#string.classes]) \
                                   [:zh_CN] [`std::string] 是标准程序库的类（[#string.classes]）
};

int main() {
  C a;
  C b = a;
  b = a;
}
[codeblock:end]

[:en@~]
the implementation will implicitly define functions to make the definition of
[`C] equivalent to
[:zh_CN@~]
实现将隐含地定义一些函数以使 [`C] 的定义等价于

[codeblock]
struct C {
  std::string s;
  C() : s() { }
  C(const C& x): s(x.s) { }
  C(C&& x): s(static_cast<std::string&&>(x.s)) { }
      //  [`: s(std::move(x.s)) { }]
  C& operator=(const C& x) { s = x.s; return *this; }
  C& operator=(C&& x) { s = static_cast<std::string&&>(x.s); return *this; }
      //              [`{ s = std::move(x.s); return *this; }]
  ~C() { }
};
[codeblock:end]
[end:example]

[para]
[begin:note]
[:en]
A class name can also be implicitly declared by an [~elaborated-type-specifier]
([#dcl.type.elab]).
[:zh_CN]
类名也可能隐含地由[~详述类型说明符]所声明（[#dcl.type.elab]）。
[end:note]

[para]
[:en]
[%type[!incomplete]]
In the definition of an object, the type of that object shall not be an
incomplete type ([#basic.types]), an abstract class type ([#class.abstract]), or
a (possibly multi-dimensional) array thereof.
[:zh_CN]
[%类型[!不完整～]]
对象的定义式中，对象的类型不能是不完整类型（[#basic.types]），抽象类类型
（[#class.abstract]），或者其（可能多维的）数组。
