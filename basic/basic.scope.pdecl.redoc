[section#basic.scope.pdecl
    [:en] Point of declaration
    [:zh_CN] 声明点
]
[%  [:en] declaration[!point of] [%locus]
    [:zh_CN] 声明[!～点] [%位点] ]
[%  [:en] scope [! declarations and] [%locus]
    [:zh_CN] 作用域 [! 声明式与～] [%位点] ]
[%:begin#locus
    [:en] locus
    [:zh_CN] 位点
]

[para]
[:en] [%declaration[!locus] [%locus]]
The [+locus] of a declaration ([#basic.pre]) that is a declarator is immediately
after the complete declarator ([#dcl.decl]).
[:zh_CN] [%声明式[!位点] [%位点] ]
某个作为声明符的声明式（[#basic.pre]）的[+位点]紧接其完整声明符（[#dcl.decl]）之后。

[begin:example]
[codeblock]
unsigned char x = 12;
{ unsigned char x = x; }
[codeblock:end]

[:en] Here the initialization of the second [`x] has undefined behavior, because
the initializer accesses the second [`x] outside its lifetime ([#basic.life]).
[:zh_CN] 此处第二个 [`x] 的初始化具有未定义行为，因为其初始化式在第二个 [`x] 的生存期
（[#basic.life]）之外对其进行访问。
[end:example]

[para]
[begin:note]
[:en] [%name hiding]
A name from an outer scope remains visible up to the locus of the declaration
that hides it.
[:zh_CN] [%名字隐藏]
来自外部作用域的名字，直到隐藏它的名字的声明式的位点之前都保持可见。

[begin:example]
[codeblock]
const int i = 2;
{ int i[i]; }
[codeblock:end]
[:en] declares a block-scope array of two integers.
[:zh_CN] 声明了块作用域的两个整数的数组。
[end:example]
[end:note]

[para]
[:en] The locus of a [~class-specifier] is immediately after the [~identifier] or
[~simple-template-id] (if any) in its [~class-head] ([#class.pre]).
[:zh_CN] [~类说明符]的位点紧跟其[~类头]中的[~标识符]或[~简单模板标识]（如果有）之后（[#class.pre]）。

[:en] The locus of an [~enum-specifier] is immediately after its [~enum-head];
the locus of an [~opaque-enum-declaration] is immediately after it ([#dcl.enum]).
[:zh_CN] [~枚举说明符]的位点紧跟其[~枚举头]之后；[~笼统枚举声明式]的位点紧跟其自身之后（[#dcl.enum]）。

[:en] The locus of an [~alias-declaration] is immediately after it.
[:zh_CN] [~别名声明式]的位点紧跟它之后。

[para]
[:en] The locus of a [~using-declarator] that does not name a constructor is
immediately after the [~using-declarator] ([#namespace.udecl]).
[:zh_CN] 并非指名构造函数的[~using-声明符]的位点紧跟该[~using-声明符]之后（[#namespace.udecl]）。

[para]
[:en] The locus of an [~enumerator-definition] is immediately after it.
[:zh_CN] [~枚举符定义式]的位点紧跟它之后。

[begin:example]
[codeblock]
const int x = 12;
{ enum { x = x }; }
[codeblock:end]
[:en] Here, the enumerator [`x] is initialized with the value of the constant [`x],
namely 12.
[:zh_CN] 此处，枚举符 [`x] 被常量 [`x] 的值初始化，就是 12。
[end:example]

[para]
[begin:note]
[:en] [%type[!incomplete]]
After the declaration of a class member, the member name can be found in the
scope of its class even if the class is an incomplete class.
[:zh_CN] [%类型[!不完整～]]
在类成员的声明式之后，即使该类是不完整类，也可在该类的作用域中找到该成员名。

[begin:example]
[codeblock]
struct X {
  enum E { z = 16 };
  int b[X::z];          // OK
};
[codeblock:end]
[end:example]
[end:note]

[para]
[:en] The locus of an [~elaborated-type-specifier] that is a declaration
([#dcl.type.elab]) is immediately after it.
[:zh_CN] 作为声明式的[~详述类型说明符]（[#dcl.type.elab]）的位点紧跟它之后。

[para]
[:en] The locus of an injected-class-name declaration ([#class.pre]) is
immediately following the opening brace of the class definition.
[:zh_CN] 注入类名的声明式（[#class.pre]）的位点紧跟其类定义式的开花括号之后。

[para]
[:en] The locus of the implicit declaration of a function-local predefined variable
([#dcl.fct.def.general]) is immediately before the [~function-body] of its
function[=']s definition.
[:zh_CN] 函数局部预定义变量（[#dcl.fct.def.general]）的隐含声明式的位点紧接其函数的
定义式的[~函数体]之前。

[para]
[:en] The locus of the declaration of a structured binding ([#dcl.struct.bind]) is
immediately after the [~identifier-list] of the structured binding declaration.
[:zh_CN] 结构化绑定（[#dcl.struct.bind]）的声明式的位点紧跟其结构化绑定声明式的
[~标识符列表]之后。

[para]
[:en] The locus of a [~for-range-declaration] of a range-based [`:key for]
statement ([#stmt.ranged]) is immediately after the [~for-range-initializer].
[:zh_CN] 基于范围的 [`:key for] 语句（[#stmt.ranged]）的 [~for-范围声明式]的位点紧跟其
[~for-范围初始化式]之后。

[para]
[:en] The locus of a [~template-parameter] is immediately after it.
[:zh_CN] [~模板形参]的位点紧跟它之后。

[begin:example]
[codeblock]
typedef unsigned char T;
template<class T
  = T               // [:en] lookup finds the [~typedef-name] [:zh_CN] 查找到 [~typedef-名]
  , T               // [:en] lookup finds the template parameter [:zh_CN] 查找到模板形参
    N = 0> struct A { };
[codeblock:end]
[end:example]

[para]
[:en] The locus of a [~result-name-introducer] ([#dcl.contract.res]) is
immediately after it.
[:zh_CN] [~结果名引入符]（[#dcl.contract.res]）的位点紧跟它之后。

[para]
[:en] The locus of a [~concept-definition] is immediately after its
[~concept-name] ([#temp.concept]).
[:zh_CN] [~概念定义式]的位点紧跟其[~概念名]（[#temp.concept]）之后。

[begin:note]
[:en] The [~constraint-expression] cannot use the [~concept-name].
[:zh_CN] 其[~约束表达式]不能使用其[~概念名]。
[end:note]

[para]
[:en] The locus of a [~namespace-definition] with an [~identifier] is immediately
after the [~identifier].
[:zh_CN] 带有[~标识符]的[~命名空间定义式]的位点紧跟该[~标识符]之后。

[begin:note]
[:en] An identifier is invented for an [~unnamed-namespace-definition] ([#namespace.unnamed]).
[:zh_CN] [~无名命名空间定义式]虚构了一个标识符（[#namespace.unnamed]）。
[end:note]

[para]
[begin:note]
[:en] Friend declarations can introduce functions or classes
that belong to the nearest enclosing namespace or block scope,
but they do not bind names anywhere ([#class.friend]).
[:zh_CN] 友元声明式可以引入属于其最近外围命名空间或块作用域的函数或类，但它们不在任何位置
进行名字绑定（[#class.friend]）。

[:en] Function declarations at block scope and variable declarations with the
[`:key extern] specifier at block scope declare entities that belong to the
nearest enclosing namespace, but they do not bind names in it.
[:zh_CN] 块作用域中的函数声明式和块作用域中带有 [`:key extern] 说明符的变量声明式，声明
属于其最近外围命名空间的实体，但它们不与其中的名字绑定。
[end:note]

[para]
[begin:note]
[:en] For point of instantiation of a template, see [#temp.point].
[:zh_CN] 有关模板的实例化点，参见 [#temp.point]。
[end:note]

[%:end#locus]
