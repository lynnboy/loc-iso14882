[section#basic.type.qualifier
    [:en] CV-qualifiers
    [:zh_CN] cv 限定符
]

[para]
[%[`const]] [%[`volatile]]
[:en]
[%cv-qualifier]
Each type other than a function or reference type is part of a group of four
distinct, but related, types: a [+cv-unqualified] version, a [+const-qualified]
version, a [+volatile-qualified] version, and a [+const-volatile-qualified]
version.
[:zh_CN]
[%cv-限定符]
除了函数或引用类型之外的每个类型，都是一组四个不同但相关的类型的一部分：一个
[+cv 未限定的]版本，一个 [+const 限定的]版本，一个 [+volatile 限定的]版本，和
一个 [+const volatile 限定的]版本。

[:en]
;The types in each such group shall have the same representation and alignment
requirements ([#basic.align]).[#:fn#]
[:zh_CN]
每个这种分组中的类型都具有相同的表示和对齐要求（[#basic.align]）。[#:fn#]

[note:foot]
[:en]
The same representation and alignment requirements are meant to imply
interchangeability as arguments to functions, return values from functions, and
non-static data members of unions.
[:zh_CN]
相同的表示和对齐要求意味着作为函数实参，函数返回值和联合体的非静态数据成员时的
可互换性。
[note:end]

[:en]
A function or reference type is always cv-unqualified.
[:zh_CN]
函数或引用类型总是 cv 未限定的。

[list]
[item]
[:en]
A [+:adj const[!object]] is an object of type [`[`:key const] T]
or a non-mutable subobject of a const object.
[:zh_CN]
[+:adj const[!对象]]是 [`[`:key const] T] 类型的对象或者 const 对象的非 mutable
子对象。

[item]
[:en]
A [+:adj volatile[!object]] is an object of type [`[`:key volatile] T]
or a subobject of a volatile object.
[:zh_CN]
[+:adj volatile[!对象]]是 [`[`:key volatile] T] 类型的对象或者 volatile 对象的
子对象。

[item]
[:en]
A [+:adj const volatile[!object]] is an object of type
[`[`:key const] [`:key volatile] T], a non-mutable subobject of a const volatile
object, a const subobject of a volatile object, or a non-mutable volatile
subobject of a const object.
[:zh_CN]
[+:adj const volatile[!对象]]是 [`[`:key const] [`:key volatile] T] 类型的对象，
const volatile 对象的非 mutable 子对象，volatile 对象的 const 子对象，或者 const
对象的非 mutable 的 volatile 子对象。
[list:end]

[begin:note]
[:en]
The type of an object ([#intro.object]) includes the [~cv-qualifier]s specified
in the [~decl-specifier-seq] ([#dcl.spec]), [~declarator] ([#dcl.decl]),
[~type-id] ([#dcl.name]), or [~new-type-id] ([#expr.new]) when the object is
created.
[:zh_CN]
对象的类型（[#intro.object]）包括创建对象时，在[~声明说明符序列]（[#dcl.spec]），
[~声明符]（[#dcl.decl]），[~类型标识]（[#dcl.name]），或者[~new-类型标识]
（[#expr.new]）中所指定的 [~cv-限定符]。
[end:note]

[para]
[:en]
Except for array types, a compound type ([#basic.compound]) is not cv-qualified
by the cv-qualifiers (if any) of the types from which it is compounded.
[:zh_CN]
除了数组类型，复合类型（[#basic.compound]）并不被组成它的类型的 cv 限定符
（如果有）所 cv 限定。

[para]
[:en]
[%array[![`const]]]
An array type whose elements are cv-qualified is also considered to have the
same cv-qualifications as its elements.
[:zh_CN]
[%数组[![`const]]]
元素类型被 cv 限定的数组类型，也被当作具有与其元素相同的 cv 限定。

[begin:note]
[:en]
Cv-qualifiers applied to an array type attach to the underlying element type, so
the notation [=lq][=cv] [`T][=rq], where [`T] is an array type, refers to an
array whose elements are so-qualified ([#dcl.array]).
[:zh_CN]
施加在数组类型上的 cv 限定符作用于其底层元素类型，故记法“[=cv] [`T]”，其中 [`T]
为数组类型，代表其元素被如此限定的数组（[#dcl.array]）。
[end:note]

[begin:example]
[codeblock]
typedef char CA[5];
typedef const char CC;
CC arr1[5] = { 0 };
const CA arr2 = { 0 };
[codeblock:end]

[:en]
The type of both [`arr1] and [`arr2] is [=lq]array of 5
[`[`:key const] [`:key char]][=rq], and the array type is considered to be
const-qualified.
[:zh_CN]
[`arr1] 和 [`arr2] 的类型均为“[`[`:key const] [`:key char]] 的 5 元数组”，而该
数组类型被当作是 const 限定的。
[end:example]

[para]
[begin:note]
[:en]
See [#dcl.fct] and [#over.match.funcs] regarding function types that have
[~cv-qualifier]s.
[:zh_CN]
有关带有 [~cv-限定符]的函数类型，参见 [#dcl.fct] 和 [#over.match.funcs]。
[end:note]

[para]
[:en]
There is a partial ordering on cv-qualifiers, so that a type can be said to be
[+more cv-qualified] than another.
[:zh_CN]
cv 限定符有（部分的）顺序，故可称一个类型比另一个[+更加 cv 限定的]。

[:en]
[#:tab#basic.type.qualifier.rel] shows the relations that constitute this
ordering.
[:zh_CN]
[#:tab#basic.type.qualifier.rel] 列出构成这个顺序的关系。

[table:listing@center@shape=?x1@fill=column#basic.type.qualifier.rel
    [:en] Relations on [`:key const] and [`:key volatile]
    [:zh_CN] [`:key const] 和 [`:key volatile] 的关系
    [|]    [|]    [|]
]
[|] [:en] [=cv no cv-qualifier] [:zh_CN] [=cv 无 cv 限定符]
                     [|] [$<]   [|] [`:key const]
[|] [:en] [=cv no cv-qualifier] [:zh_CN] [=cv 无 cv 限定符]
                     [|] [$<]   [|] [`:key volatile]
[|] [:en] [=cv no cv-qualifier] [:zh_CN] [=cv 无 cv 限定符]
                     [|] [$<]   [|] [`[`:key const] [`:key volatile]]
[|] [`:key const]    [|] [$<]   [|] [`[`:key const] [`:key volatile]]
[|] [`:key volatile] [|] [$<]   [|] [`[`:key const] [`:key volatile]]
[table:end]

[para]
[:en]
In this document, the notation [=cv] (or [=cv cv1], [=cv cv2], etc.), used in
the description of types, represents an arbitrary set of cv-qualifiers, i.e.,
one of {[`:key const]}, {[`:key volatile]}, {[`:key const], [`:key volatile]},
or the empty set.
[:zh_CN]
在本文档中，类型的描述中记法 [=cv]（或 [=cv cv1]、[=cv cv2] 等）代表任意一组
cv 限定符，也就是 {[`:key const]}，{[`:key volatile]}，
{[`:key const]，[`:key volatile]} 之一或者空集。

[:en]
For a type [=cv] [`T], the [+top-level cv-qualifiers[%cv-qualifier[!top-level]]]
of that type are those denoted by [=cv].
[:zh_CN]
对于类型 [=cv] [`T]，[=cv] 代表该类型的[+顶层 cv 限定符[%cv-限定符[!顶层～]]]。

[begin:example]
[:en]
The type corresponding to the [~type-id] [`[`:key const] [`:key int]&] has no
top-level cv-qualifiers.
[:zh_CN]
对应于[~类型标识] [`[`:key const] [`:key int]&] 的类型没有顶层 cv 限定符。

[:en]
The type corresponding to the [~type-id]
[`[`:key volatile] [`:key int] * [`:key const]] has the top-level cv-qualifier
[`:key const].
[:zh_CN]
对应于[~类型标识] [`[`:key volatile] [`:key int] * [`:key const]] 的类型的顶层
cv 限定符为 [`:key const]。

[:en]
For a class type [`C], the type corresponding to the [~type-id]
[`[`:key void] (C::* [`:key volatile])([`:key int]) [`:key const]] has the
top-level cv-qualifier [`:key volatile].
[:zh_CN]
对应于[~类型标识]
[`[`:key void] (C::* [`:key volatile])([`:key int]) [`:key const]] 的类型的顶层
cv 限定符为 [`:key volatile]。
[end:example]
