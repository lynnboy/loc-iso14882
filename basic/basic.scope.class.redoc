[section#basic.scope.class
    [:en] Class scope
    [:zh_CN] 类作用域

[%  [:en] scope[!class]
    [:zh_CN] 作用域[!类～] ]
]

[para]
[:en]
The potential scope of a name declared in a class consists not only of the
declarative region following the name[=']s point of declaration, but also of all
complete-class contexts ([#class.mem]) of that class.
[:zh_CN]
在类中声明的名字的潜在作用域，不仅包括该名字的声明点后面的声明区，也包括该类的
所有完整类语境（[#class.mem]）。

[para]
[:en]
A name [`N] used in a class [`S] shall refer to the same declaration in its
context and when re-evaluated in the completed scope of [`S].
[:zh_CN]
在类 [`S] 中使用的名字 [`N]，在其语境中，以及当 [`S] 的作用域完成时进行重估后，
应该涉指相同的声明式。

[:en]
No diagnostic is required for a violation of this rule.
[:zh_CN]
违反本条规则无须诊断。

[para]
[:en]
A name declared within a member function hides a declaration of the same name
whose scope extends to or past the end of the member function[=']s class.
[:zh_CN]
成员函数中声明的名字，隐藏那些作用域延伸到或越过该成员函数的类的末尾的相同名字的
声明式。

[para]
[:en]
The potential scope of a declaration that extends to or past the end of a class
definition also extends to the regions defined by its member definitions, even
if the members are defined lexically outside the class (this includes static
data member definitions, nested class definitions, and member function
definitions, including the member function body and any portion of the
declarator part of such definitions which follows the [~declarator-id],
including a [~parameter-declaration-clause] and any default arguments
([#dcl.fct.default])).
[:zh_CN]
延伸到或超过类定义式的末尾的声明式的潜在作用域，同样延伸到其成员的定义式所定义的
区域，即使该成员在词法上定义于该类之外（这包括静态数据成员的定义式，嵌套类的定义
式，和成员函数的定义式（包括成员函数体，以及这些定义式中处于[~声明符标识]之后的
声明符的所有部分，这包括[~形参声明子句]和所有的默认实参（[#dcl.fct.default]）），
也是如此。

[para]
[begin:example]
[codeblock]
typedef int  c;
enum { i = 1 };

class X {
  char  v[i];                       // [:en] error: [`i] refers to [`::i] but when reevaluated is [`X::i] \
                                       [:zh_CN] 错误：[`i] 指代 [`::i]，但重估后却为 [`X::i]
  int  f() { return sizeof(c); }    // [:en] OK: [`X::c] \
                                       [:zh_CN] OK：[`X::c]
  char  c;
  enum { i = 2 };
};

typedef char*  T;
struct Y {
  T  a;                             // [:en] error: [`T] refers to [`::T] but when reevaluated is [`Y::T] \
                                       [:zh_CN] 错误：[`T] 指代 [`::T]，但重估后却为 [`Y::T]
  typedef long  T;
  T  b;
};

typedef int I;
class D {
  typedef I I;                      // [:en] error, even though no reordering involved\
                                       [:zh_CN] 错误，虽然其并不涉及重新排序
};
[codeblock:end]
[end:example]

[para]
[:en]
The name of a class member shall only be used as follows:
[:zh_CN]
类成员的名字仅应按如下方式使用：

[list]
[item]
[:en]
in the scope of its class (as described above) or a class derived
([#class.derived]) from its class,
[:zh_CN]
在其类的作用域（如上述）或其类的派生类（[#class.derived]）的作用域中，

[item]
[:en]
after the [`.] operator applied to an expression of the type of its class
([#expr.ref]) or a class derived from its class,
[:zh_CN]
在对某个类型为其类或其类的派生类的表达式应用 [`.] 运算符（[#expr.ref]）之后，

[item]
[:en]
after the [`->] operator applied to a pointer to an object of its class
([#expr.ref]) or a class derived from its class,
[:zh_CN]
在对某个指向其类或其类的派生类的对象的指针应用 [`->] 运算符（[#expr.ref]）之后，

[item]
[:en]
after the [`::] scope resolution operator ([#expr.prim.id.qual]) applied to the
name of its class or a class derived from its class.
[:zh_CN]
在对其类或其类的派生类的名字应用作用域解析运算符 [`::]（[#expr.prim.id.qual]）
之后。
[list:end]
