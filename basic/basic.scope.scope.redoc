[section#basic.scope.scope
    [:en] General
    [:zh_CN] 概述
]

[para]
[:en]
The declarations in a program appear in a number of [+scopes[%scope]] that are
in general discontiguous.
[:zh_CN]
程序中的各个声明式出现在许多[+作用域]中，它们一般是不连续的。

[:en]
The [+:adj global scope[%global[!scope]]] contains the entire program; every
other scope [$S] is introduced by a declaration, [~parameter-declaration-clause],
[~statement], or [~handler] (as described in the following subclauses of
[#basic.scope]) appearing in another scope which thereby contains [$S].
[:zh_CN]
[+:adj 全局作用域[%全局[!作用域]]]包含整个程序；任何其他作用域 [$S] 均由某个
出现于其他作用域（由此它包含了 [$S]）中的声明式，[~形参声明子句]，[~语句]，或
[~处理器]引入（如在 [#basic.scope] 的后续各子条款中所述）。

[:en]
An [+:adj enclosing scope[%enclosing[!scope]]] at a program point is any scope
that contains it; the smallest such scope is said to be the
[+:adj immediate scope[%immediate[!scope]]] at that point.
[:zh_CN]
某个程序位置的[+:adj 外围作用域[%外围[!作用域]]]是任何包含它的作用域；最小的这种
作用域被称为该位置点处的[+:adj 直接作用域[%直接[!作用域]]]。

[:en]
A scope [+intervenes[%scope[!intervene]]] between a program point [$P] and a
scope [$S] (that does not contain [$P]) if it is or contains [$S] but does not
contain [$P].
[:zh_CN]
对于某个程序位置点 [$P] 和某个不包含 [$P] 的作用域 [$S]，如果一个作用域正是或
包含 [$S] 但不包含 [$P]，则它[+介入[%作用域[!介入]]] [$P] 和 [$S] 之间。

[para]
[:en]
Unless otherwise specified:
[:zh_CN]
除非另行指明，否则：

[list]
[item]
[:en]
The smallest scope that contains a scope [$S] is the [+:adj parent scope
[%parent[!scope]]] of [$S].
[:zh_CN]
包含作用域 [$S] 的最小作用域为 [$S] 的[+:adj 父作用域[%父[!作用域]]]。
[item]
[:en]
No two declarations (re)introduce the same entity.
[:zh_CN]
两个声明式不会（再次）引入相同实体。
[item]
[:en]
A declaration [+inhabits[%scope[!inhabit]]] the immediate scope at its locus
([#basic.scope.pdecl]).
[:zh_CN]
声明式[+居于[%作用域[!居于]]]其声明位点（[#basic.scope.pdecl]）的直接作用域。
[item]
[:en]
A declaration[=']s [+:adj target scope[%target[!scope]]] is the scope it inhabits.
[:zh_CN]
声明式的[+:adj 目标作用域[%目标[!作用域]]]为其所居作用域。
[item]
[:en]
Any names (re)introduced by a declaration are [+bound[%name[!bound]]] to it
in its target scope.
[:zh_CN]
由某个声明式所（再次）引入的任何名字，都在其目标作用域中与之[+绑定[%名字[!绑定]]]。
[list:end]

[:en]
An entity [+belongs[%entity[!belong]]] to a scope [$S] if [$S] is the target
scope of a declaration of the entity.
[:zh_CN]
如果作用域 [$S] 是某实体的声明式的目标作用域，则该实体[+属于[%实体[!属于]]] [$S]。

[begin:note]
[:en]
Special cases include that:
[:zh_CN]
有以下特殊情况：

[list]
[item]
[:en]
Template parameter scopes are parents only to other template parameter scopes
([#basic.scope.temp]).
[:zh_CN]
模板形参作用域仅作为其他模板形参作用域的父作用域（[#basic.scope.temp]）。
[item]
[:en]
Corresponding declarations with appropriate linkage declare the same entity
([#basic.link]).
[:zh_CN]
具有适当连接的对应声明式声明相同的实体（[#basic.link]）。
[item]
[:en]
The declaration in a [~template-declaration] inhabits the same scope as the
[~template-declaration].
[:zh_CN]
[~模板声明式]中的声明式与[~模板声明式]居于相同作用域。
[item]
[:en]
Friend declarations and declarations of qualified names and template
specializations do not bind names ([#dcl.meaning]); those with qualified names
target a specified scope, and other friend declarations and certain
[~elaborated-type-specifier]s ([#dcl.type.elab]) target a larger enclosing scope.
[:zh_CN]
友元声明式和有限定名字的声明式以及模板特化式并不与名字绑定（[#dcl.meaning]）；
有限定名字的声明式以指定作用域为目标，而其他友元声明式和某些[~详述类型说明符]
（[#dcl.type.elab]）则以更大的外围作用域为目标。
[item]
[:en]
Block-scope extern declarations target a larger enclosing scope but bind a name
in their immediate scope.
[:zh_CN]
块作用域中的外部声明式以更大的外围作用域为目标，但在其直接作用域中与名字绑定。
[item]
[:en]
The names of unscoped enumerators are bound in the two innermost enclosing
scopes ([#dcl.enum]).
[:zh_CN]
无作用域枚举符的名字在两个最内层外围作用域中绑定（[#dcl.enum]）。
[item]
[:en]
A class[=']s name is also bound in its own scope ([#class.pre]).
[:zh_CN]
类的名字也在其自身的作用域中绑定（[#class.pre]）。
[item]
[:en]
The names of the members of an anonymous union are bound in the union[=']s
parent scope ([#class.union.anon]).
[:zh_CN]
匿名联合体的各成员的名字在该联合体的父作用域中绑定（[#class.union.anon]）。
[list:end]
[end:note]

[para]
[:en]
Two declarations [+correspond] if they (re)introduce the same name, both declare
constructors, or both declare destructors, unless
[:zh_CN]
除非发生以下情况，否则如果两个声明式（再次）引入相同的名字，都声明构造函数，或者
都声明析构函数，则它们相[+对应]：

[list]
[item]
[:en@~]
either is a [~using-declarator], or
[:zh_CN@~]
任何一个为 [~using-声明符]，或者
[item]
[:en@~]
one declares a type (not a [~typedef-name]) and the other declares a variable,
non-static data member other than of an anonymous union ([#class.union.anon]),
enumerator, function, or function template, or
[:zh_CN@~]
其中之一声明类型（而非 [~typedef-名]），而另一个声明变量，并非匿名联合体
（[#class.union.anon]）的非静态数据成员，枚举符，函数，或函数模板，或者
[item]
[:en@~]
each declares a function or function template, except when
[:zh_CN@~]
均声明函数或函数模板，但并非
[list]
[item]
[:en@~]
both declare functions with the same parameter-type-list,[#:fn#] equivalent
([#temp.over.link]) trailing [~requires-clause]s (if any, except as specified in
[#temp.friend]), and, if both are non-static members, the same [~cv-qualifier]s
(if any) and [~ref-qualifier] (if both have one), or
[:zh_CN@~]
均声明函数且具有相同形参类型列表，[#:fn#] 等价（[#temp.over.link]）的尾部
[~requires-子句]（如果有，但排除 [#temp.friend] 中指定的例外），以及当二者均为
非静态成员时，均具有相同的 [~cv-限定符]（如果有）和[~引用限定符]（如果二者均有），
或者
[note:foot]
[:en]
An implicit object parameter ([#over.match.funcs]) is not part of the
parameter-type-list.
[:zh_CN]
隐含的对象形参（[#over.match.funcs]）并不是形参类型列表的一部分。
[note:end]
[item]
[:en@~]
both declare function templates with equivalent parameter-type-lists, return
types (if any), [~template-head]s, and trailing [~requires-clause]s (if any),
and, if both are non-static members, the same [~cv-qualifier]s (if any) and
[~ref-qualifier] (if both have one).
[:zh_CN@~]
均声明函数模板且具有等价的形参类型列表，返回类型（如果有），[~模板头]，和尾部
[~requires-子句]（如果有），以及当二者均为非静态成员时，均具有相同的 [~cv-限定符]
（如果有）和[~引用限定符]（如果二者均有）。
[list:end]
[list:end]

[begin:note]
[:en]
Declarations can correspond even if neither binds a name.
[:zh_CN]
即便声明式并未与名字绑定，也可以对应。

[begin:example]
[codeblock]
struct A {
friend void f();        // #1
};
struct B {
  friend void f() {}    // [:en] corresponds to, and defines, #1 \
                        [:zh_CN] 对应于，并定义 #1
};
[codeblock:end]
[end:example]
[end:note]

[begin:example]
[codeblock]
typedef int Int;
enum E : int { a };
void f(int);            // #1
void f(Int) {}          // [:en] defines #1 \
                        [:zh_CN] 定义 #1
void f(E) {}            // [:en] OK: another overload \
                        [:zh_CN] OK：另一个重载

struct X {
  static void f();
  void f() const;       // [:en] error: redeclaration \
                        [:zh_CN] 错误：重复声明
  void g();
  void g() const;       // OK
  void g() &;           // [:en] error: redeclaration \
                        [:zh_CN] 错误：重复声明
};
[codeblock:end]
[end:example]

[para]
[:en]
[%declaration[!potentially conflict]]
Two declarations [+potentially conflict] if they correspond and cause their
shared name to denote different entities ([#basic.link]).
[:zh_CN]
[%声明式[!潜在冲突]]
如果两个声明式相对应并导致它们共享的名字代表了不同的实体（[#basic.link]），则
它们[+潜在冲突]。

[:en]
The program is ill-formed if, in any scope, a name is bound to two declarations
that potentially conflict and one precedes the other ([#basic.lookup]).
[:zh_CN]
如果在任何作用域中，有名字绑定到潜在冲突的两个声明式而其中一个先于另一个
（[#basic.lookup]），则程序非良构。

[begin:note]
[:en]
Overload resolution can consider potentially conflicting declarations found in
multiple scopes (e.g. via [~using-directive]s or for operator functions),
in which case it is often ambiguous.
[:zh_CN]
重载决议会考察在多个作用域中找到的潜在冲突的声明式（比如通过 [~using-指令]或针对
运算符函数），这种情况下通常会导致歧义。
[end:note]

[begin:example]
[codeblock]
void f() {
  int x,y;
  void x();             // [:en] error: different entity for [`x] \
                        [:zh_CN] 错误：[`x] 的不同实体
  int y;                // [:en] error: redeclaration \
                        [:zh_CN] 错误：重复声明
}
enum { f };             // error: different entity for [`::f] \
                        [:zh_CN] 错误：[`::f] 的不同实体
namespace A {}
namespace B = A;
namespace B = A;        // [:en] OK: no effect \
                        [:zh_CN] OK：没有效果
namespace B = B;        // [:en] OK: no effect \
                        [:zh_CN] OK：没有效果
namespace A = B;        // [:en] OK: no effect \
                        [:zh_CN] OK：没有效果
namespace B {}          // error: different entity for [`B] \
                        [:zh_CN] 错误：[`B] 的不同实体
[codeblock:end]
[end:example]

[para]
[:en]
[%declaration[!nominable]]
A declaration is [+nominable] in a class, class template, or namespace [$E] at
a point [$P] if it precedes [$P], it does not inhabit a block scope, and
its target scope is the scope associated with [$E] or, if [$E] is a namespace,
any element of the inline namespace set of [$E] ([#namespace.def]).
[:zh_CN]
[%声明式[!可提名]]
如果某个声明式在某个类，类模板，或命名空间 [$E] 中先于 [$P]，它并不居于块作用域，
并且其目标作用域是与 [$E] 相关联的作用域，或当 [$E] 为命名空间时是 [$E] 的内联
命名空间集合（[#namespace.def]）的任意成员，则该声明式在 [$P] 点[+可提名]。

[begin:example]
[codeblock]
namespace A {
  void f() {void g();}
  inline namespace B {
    struct S {
      friend void h();
      static int i;
    };
  }
}
[codeblock:end]

[:en]
At the end of this example, the declarations of [`f], [`B], [`S], and [`h] are
nominable in [`A], but those of [`g] and [`i] are not.
[:zh_CN]
在这个例子的末尾，[`f]、[`B]、[`S] 和 [`h] 的声明式在 [`A] 中都可提名，但 [`g]
和 [`i] 的声明式则不是。
[end:example]

[para]
[:en]
When instantiating a templated entity ([#temp.pre]), any scope [$S] introduced
by any part of the template definition is considered to be introduced by the
instantiated entity and to contain the instantiations of any declarations that
inhabit [$S].
[:zh_CN]
在实例化某个模板化实体（[#temp.pre]）时，由模板定义式的任何部分所引入的任何
作用域 [$S]，均被认为是由被实例化的实体所引入的，并包含居于 [$S] 的所有声明式的
实例化。
