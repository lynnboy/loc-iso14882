[section#basic.scope.scope
    [:en] General
    [:zh_CN] 概述
]

[para]
[:en] The declarations in a program appear in a number of [+scopes[%scope]] that
are in general discontiguous.
[:zh_CN] 程序中的各个声明式出现在许多[+作用域]中，它们一般是不连续的。

[:en] The [+:adj global [!scope]] contains the entire program; every other scope
[$S] is introduced by a declaration, [~parameter-declaration-clause], [~statement],
or [~handler] (as described in the following subclauses of [#basic.scope])
appearing in another scope which thereby contains [$S].
[:zh_CN] [+:adj 全局[!作用域]]包含整个程序；每个其他作用域 [$S] 均是由出现于其他
作用域中（因而它包含了 [$S]）的声明式，[~形参声明子句]，[~语句]，或[~处理器]所引入的
（如 [#basic.scope] 的后续各子条款中所述）。

[:en] An [+:adj enclosing [!scope]] at a program point is any scope that
contains it; the smallest such scope is said to be the [+:adj immediate [!scope]]
at that point.
[:zh_CN] 任何包含某个程序位置的作用域都是它的[+:adj 外围[!作用域]]；其中最小的这种
作用域被称为该位置点的[+:adj 直接[!作用域]]。

[:en] A scope [+intervenes[%scope[!intervene]]] between a program point [$P] and
a scope [$S] (that does not contain [$P]) if it is or contains [$S] but does not
contain [$P].
[:zh_CN] 对于某个程序位置点 [$P] 和某个不包含 [$P] 的作用域 [$S]，如果一个作用域
正是或包含 [$S] 但不包含 [$P]，则它[+介入[%作用域[!介入]]] [$P] 和 [$S] 之间。

[para]
[:en] Unless otherwise specified:
[:zh_CN] 除非另有规定，否则：

[list]
[item]
[:en] The smallest scope that contains a scope [$S] is the [+:adj parent[!scope]]
of [$S].
[:zh_CN] 包含作用域 [$S] 的最小作用域为 [$S] 的[+:adj 父[!作用域]]。
[item]
[:en] No two declarations (re)introduce the same entity.
[:zh_CN] 两个声明式不会（再次）引入相同实体。
[item]
[:en] A declaration [+inhabits[%scope[!inhabit]]] the immediate scope at its
locus ([#basic.scope.pdecl]).
[:zh_CN] 声明式[+居于[%作用域[!居于]]]其声明位点（[#basic.scope.pdecl]）的直接作用域。
[item]
[:en] A declaration[=']s [+:adj target[!scope]] is the scope it inhabits.
[:zh_CN] 声明式的[+:adj 目标[!作用域]]为其所居作用域。
[item]
[:en] Any names (re)introduced by a declaration are [+bound[%name[!bound]]] to
it in its target scope.
[:zh_CN] 由某个声明式所（再次）引入的任何名字，都在其目标作用域中与之[+绑定[%名字[!绑定]]]。
[list:end]

[:en] An entity [+belongs[%entity[!belong]]] to a scope [$S] if [$S] is the
target scope of a declaration of the entity.
[:zh_CN] 如果作用域 [$S] 是某实体的声明式的目标作用域，则该实体[+属于[%实体[!属于]]] [$S]。

[begin:note]
[:en] Special cases include that:
[:zh_CN] 有以下特殊情况：

[list]
[item]
[:en] Template parameter scopes are parents only to other template parameter
scopes ([#basic.scope.temp]).
[:zh_CN] 模板形参作用域仅作为其他模板形参作用域的父作用域（[#basic.scope.temp]）。
[item]
[:en] Corresponding declarations with appropriate linkage declare the same
entity ([#basic.link]).
[:zh_CN] 具有适当连接的对应声明式声明相同的实体（[#basic.link]）。
[item]
[:en] The declaration in a [~template-declaration] inhabits the same scope as
the [~template-declaration].
[:zh_CN] [~模板声明式]中的声明式与[~模板声明式]居于相同作用域。
[item]
[:en] Friend declarations and declarations of qualified names and template
specializations do not bind names ([#dcl.meaning]); those with qualified names
target a specified scope, and other friend declarations and certain
[~elaborated-type-specifier]s ([#dcl.type.elab]) target a larger enclosing scope.
[:zh_CN] 友元声明式和有限定的名字的声明式以及模板特化式并不与名字绑定（[#dcl.meaning]）；
有限定的名字的声明式以指定作用域为目标，而其他友元声明式和某些[~详述类型说明符]
（[#dcl.type.elab]）则以更大的外围作用域为目标。
[item]
[:en] Block-scope extern declarations target a larger enclosing scope but bind
a name in their immediate scope.
[:zh_CN] 块作用域中的外部声明式以更大的外围作用域为目标，但在其直接作用域中与名字绑定。
[item]
[:en] The names of unscoped enumerators are bound in the two innermost enclosing
scopes ([#dcl.enum]).
[:zh_CN] 无作用域枚举符的名字在两个最内层外围作用域中绑定（[#dcl.enum]）。
[item]
[:en] A class[=']s name is also bound in its own scope ([#class.pre]).
[:zh_CN] 类的名字也在其自身的作用域中绑定（[#class.pre]）。
[item]
[:en] The names of the members of an anonymous union are bound in the union[=']s
parent scope ([#class.union.anon]).
[:zh_CN] 匿名联合体的各成员的名字在该联合体的父作用域中绑定（[#class.union.anon]）。
[list:end]
[end:note]

[para]
[:en] Two non-static member functions have
[+:adj corresponding[!object parameters[%object parameter]]] if
[:zh_CN] 以下情况下，两个非静态成员函数具有[+:adj 对应[!对象形参]]：
[list]
[item]
[:en] exactly one is an implicit object member function with no [~ref-qualifier]
and the types of their object parameters ([#dcl.fct]), after removing references,
are the same, or
[:zh_CN] 刚好其一为没有[~引用限定符]的隐式对象成员函数，且它们的对象形参（[#dcl.fct]）的
类型移除引用后相同，或者
[item]
[:en] their object parameters have the same type.
[:zh_CN] 它们的对象形参具有相同类型。
[list:end]

[:en]
[%template[!function[!corresponding object parameter]]]
Two non-static member function templates have
[+:adj corresponding[!object parameters[%object parameter]]] if
[:zh_CN]
[%模板[!函数[!对应对象形参]]]
以下情况下，两个非静态成员函数模板具有[+:adj 对应[!对象形参]]：
[list]
[item]
[:en] exactly one is an implicit object member function with no [~ref-qualifier]
and the types of their object parameters, after removing any references, are
equivalent, or
[:zh_CN] 刚好其一为没有[~引用限定符]的隐式对象成员函数，且它们的对象形参的类型移除所有
引用后等价，或者
[item]
[:en] the types of their object parameters are equivalent.
[:zh_CN] 它们的对象形参的类型等价。
[list:end]

[:en]
[%template[!function[!corresponding signature]]]
Two function templates have [+:adj corresponding[!signatures[%signature]]] if
their [~template-parameter-list]s have the same length, their corresponding
[~template-parameter]s are equivalent, they have equivalent
non-object-parameter-type-lists and return types (if any), and,
if both are non-static members, they have corresponding object parameters.
[:zh_CN]
[%模板[!函数[!对应签名]]]
如果两个非静态成员函数模板的[~模板形参列表]长度相同，各个对应[~模板形参]均等价，
它们具有等价的非对象形参类型列表和返回类型（如果有），并且当二者均为非静态成员时
它们具有对应对象形参，则它们具有[+:adj 对应[!签名]]：

[para]
[:en] Two declarations [+correspond] if they (re)introduce the same name, both
declare constructors, or both declare destructors, unless
[:zh_CN] 除非发生以下情况，否则如果两个声明式（再次）引入相同的名字，都声明构造函数，或者
都声明析构函数，则它们相[+对应]：

[list]
[item]
[:en@~] either is a [~using-declarator], or
[:zh_CN@~] 任何一个为 [~using-声明符]，或者
[item]
[:en@~] one declares a type (not a [~typedef-name]) and the other declares a
variable, non-static data member other than of an anonymous union ([#class.union.anon]),
enumerator, function, or function template, or
[:zh_CN@~] 其中之一声明类型（而非 [~typedef-名]），而另一个声明变量，并非匿名联合体
（[#class.union.anon]）的非静态数据成员，枚举符，函数，或函数模板，或者
[item]
[:en@~] each declares a function or function template and they do not declare
corresponding overloads.
[:zh_CN@~] 均声明函数或函数模板，且它们并未声明对应重载。
[list:end]

[:en] Two function or function template declarations declare [+corresponding
overloads] if
[:zh_CN] 以下情况下，两个函数或函数模板声明式声明的是[+对应重载]：
[list]
[item]
[:en@~] both declare functions with the same non-object-parameter-type-list,[#:fn]
equivalent ([#temp.over.link]) trailing [~requires-clause]s (if any, except as
specified in [#temp.friend]), and, if both are non-static members, they have
corresponding object parameters, or
[:zh_CN@~] 均声明函数且具有相同非对象形参类型列表[#:fn]，等价（[#temp.over.link]）的尾部
[~requires-子句]（如果有，但排除 [#temp.friend] 中指定的例外），以及当二者均为非静态成员
时，具有对应对象形参，或者
[note:foot]
[:en] An implicit object parameter ([#over.match.funcs]) is not part of the
parameter-type-list.
[:zh_CN] 隐含的对象形参（[#over.match.funcs]）并不是形参类型列表的一部分。
[note:end]
[item]
[:en@~] both declare function templates with corresponding signatures and
equivalent [~template-head]s, and trailing [~requires-clause]s (if any).
[:zh_CN@~] 均声明函数模板且具有对应签名和等价的[~模板头]，和尾部 [~requires-子句]（如果有）。
[list:end]

[begin:note]
[:en] Declarations can correspond even if neither binds a name.
[:zh_CN] 即便声明式并未与名字绑定，也可以对应。

[begin:example]
[codeblock]
struct A {
  friend void f();      // #1
};
struct B {
  friend void f() {}    // [:en] corresponds to, and defines, #1 [:zh_CN] 对应于，并定义 #1
};
[codeblock:end]
[end:example]
[end:note]

[begin:example]
[codeblock]
typedef int Int;
enum E : int { a };
void f(int);                    // #1
void f(Int) {}                  // [:en] defines #1 [:zh_CN] 定义 #1
void f(E) {}                    // [:en] OK, another overload [:zh_CN] OK，另一个重载

struct X {
  static void f();
  void f() const;               // [:en] error: redeclaration [:zh_CN] 错误：重复声明
  void g();
  void g() const;               // OK
  void g() &;                   // [:en] error: redeclaration [:zh_CN] 错误：重复声明

  void h(this X&, int);
  void h(int) &&;               // [:en] OK, another overload [:zh_CN] OK，另一个重载
  void j(this const X&);
  void j() const &;             // [:en] error: redeclaration [:zh_CN] 错误：重复声明
  void k();
  void k(this X&);              // [:en] error: redeclaration [:zh_CN] 错误：重复声明
};
[codeblock:end]
[end:example]

[para]
[:en] A declaration is [+name-independent[%declaration[!name-independent]]] if
its name is [`_] ([=unicode(005f,low line)]) and it declares
[:zh_CN] 如果声明式的名字为 [`_]（[=unicode(005f,low line)]）且其声明的是以下各项，
则它是[+名字独立的[%声明式[!名字独立的]]]：
[list]
[item]
[:en@~] a variable with automatic storage duration,
[:zh_CN@~] 具有自动存储期的变量，
[item]
[:en@~] a structured binding with no [~storage-class-specifier] and not
inhabiting a namespace scope,
[:zh_CN@~] 非居于命名空间作用域的没有[~存储类说明符]的结构化绑定，
[item]
[:en@~] the variable introduced by an [~init-capture], or
[:zh_CN@~] 由[~带初始化俘获符]引入的变量，或者
[item]
[:en@~] a non-static data member of other than an anonymous union.
[:zh_CN@~] 并非匿名联合体的非静态数据成员。
[list:end]

[para:recommended:~]
[:en] Implementations should not emit a warning
that a name-independent declaration is used or unused.
[:zh_CN] 实现最好不针对名字独立的声明式被使用或未使用给出警告消息。

[para]
[:en]
[%declaration[!potentially conflict]]
Two declarations [+potentially conflict] if they correspond and cause their
shared name to denote different entities ([#basic.link]).
[:zh_CN]
[%声明式[!潜在冲突]]
如果两个声明式相对应并导致它们共享的名字代表了不同的实体（[#basic.link]），则
它们[+潜在冲突]。

[:en] The program is ill-formed if, in any scope, a name is bound to two
declarations [$A] and [$B] that potentially conflict and [$A] precedes [$B]
([#basic.lookup]), unless [$B] is name-independent.
[:zh_CN] 如果在任何作用域中，有名字绑定到潜在冲突的两个声明式 [$A] 和 [$B]，而
[$A] 先于 [$B]（[#basic.lookup]）且 [$B] 并非名字独立，则程序非良构。

[begin:note]
[:en] An [~id-expression] that names a unique name-independent declaration is
usable until an additional declaration of the same name is introduced in the
same scope ([#basic.lookup.general]).
[:zh_CN] 指名某个唯一的名字独立声明式的[~标识表达式]，在相同作用域中引入相同名字
的额外声明式之前均可用（[#basic.lookup.general]）。
[end:note]

[begin:note]
[:en] Overload resolution can consider potentially conflicting declarations
found in multiple scopes (e.g., via [~using-directive]s or for operator
functions), in which case it is often ambiguous.
[:zh_CN] 重载决议会考察在多个作用域中找到的潜在冲突的声明式（比如通过 [~using-指令]
或针对运算符函数），这种情况下通常会导致歧义。
[end:note]

[begin:example]
[codeblock]
void f() {
  int x,y;
  void x();             // [:en] error: different entity for [`x] [:zh_CN] 错误：[`x] 的不同实体
  int y;                // [:en] error: redeclaration [:zh_CN] 错误：重复声明
}
enum { f };             // error: different entity for [`::f] [:zh_CN] 错误：[`::f] 的不同实体
namespace A {}
namespace B = A;
namespace B = A;        // [:en] OK, no effect [:zh_CN] OK，没有效果
namespace B = B;        // [:en] OK, no effect [:zh_CN] OK，没有效果
namespace A = B;        // [:en] OK, no effect [:zh_CN] OK，没有效果
namespace B {}          // error: different entity for [`B] [:zh_CN] 错误：[`B] 的不同实体

void g() {
  int _;
  _ = 0;                // OK
  int _;                // [:en] OK, name-independent declaration [:zh_CN] OK，名字独立的声明式
  _ = 0;                // [:en] error: two non-function declarations in the lookup set \
                        [:zh_CN] 错误：查找集合中有两个非函数声明式
}
void h () {
  int _;                // #1
  _ ++;                 // OK
  static int _;         // [:en] error: conflicts with #1 because static variables are not name-independent \
                        [:zh_CN] 错误：由于静态变量并非名字独立而与 #1 冲突
}
[codeblock:end]
[end:example]

[para]
[:en]
[%declaration[!nominable]]
A declaration is [+nominable] in a class, class template, or namespace [$E] at
a point [$P] if it precedes [$P], it does not inhabit a block scope, and
its target scope is the scope associated with [$E] or, if [$E] is a namespace,
any element of the inline namespace set of [$E] ([#namespace.def]).
[:zh_CN]
[%声明式[!可提名]]
如果某个声明式在某个类，类模板，或命名空间 [$E] 中先于 [$P]，它并不居于块作用域，
并且其目标作用域是与 [$E] 相关联的作用域，或当 [$E] 为命名空间时是 [$E] 的内联
命名空间集合（[#namespace.def]）的任意成员，则该声明式在 [$P] 点[+可提名]。

[begin:example]
[codeblock]
namespace A {
  void f() {void g();}
  inline namespace B {
    struct S {
      friend void h();
      static int i;
    };
  }
}
[codeblock:end]

[:en] At the end of this example, the declarations of [`f], [`B], [`S], and [`h]
are nominable in [`A], but those of [`g] and [`i] are not.
[:zh_CN] 在这个例子的末尾，[`f]、[`B]、[`S] 和 [`h] 的声明式在 [`A] 中都可提名，但 [`g]
和 [`i] 的声明式则不是。
[end:example]

[para]
[:en] When instantiating a templated entity ([#temp.pre]), any scope [$S]
introduced by any part of the template definition is considered to be introduced
by the instantiated entity and to contain the instantiations of any declarations
that inhabit [$S].
[:zh_CN] 在实例化某个模板化实体（[#temp.pre]）时，由模板定义式的任何部分所引入的任何
作用域 [$S]，均被认为是由被实例化的实体所引入的，并包含居于 [$S] 的所有声明式的实例化。
