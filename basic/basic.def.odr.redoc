[section#basic.def.odr
    [:en] One definition rule
    [:zh_CN] 单一定义规则

[%  [:en] object [!definition]
    [:zh_CN] 对象 [!定义] ]
[%  [:en] function [!definition]
    [:zh_CN] 函数 [!定义] ]
[%  [:en] class [!definition]
    [:zh_CN] 类 [!定义] ]
[%  [:en] enumerator [!definition]
    [:zh_CN] 枚举符 [!定义] ]
[%:begin#one.definition.rule
    [:en] one-definition rule
    [:zh_CN] 单一定义规则
]
]

[para]
[:en]
No translation unit shall contain more than one definition of any variable,
function, class type, enumeration type, template, default argument for a
parameter (for a function in a given scope), or default template argument.
[:zh_CN]
翻译单元中不能包含任何变量、函数、类类型、枚举类型、模板、（某个函数在给定作用域
中）某个形参的默认实参，或者默认模板实参的多于一个定义式。

[para]
[:en]
[%expression[!potentially evaluated]]
An expression or conversion is [+potentially evaluated] unless it is an
unevaluated operand ([#expr.prop]), a subexpression thereof, or a conversion in
an initialization or conversion sequence in such a context.
[:zh_CN]
[%表达式[!潜在求值的～]]
表达式或转换是[+潜在求值的]，除非它是免求值操作数（[#expr.prop]）或其子表达式，
或者这种语境中的初始化或转换序列之中的转换。

[:en]
The set of [+potential results] of an expression [$E] is defined as follows:
[:zh_CN]
表达式 [$E] 的[+潜在结果]的集合按如下定义：

[list]
[item]
[:en]
If [$E] is an [~id-expression] ([#expr.prim.id]), the set contains only [$E].
[:zh_CN]
若 [$E] 是个[~标识表达式]（[#expr.prim.id]），则该集合仅包含 [$E]。

[item]
[:en]
If [$E] is a subscripting operation ([#expr.sub]) with an array operand, the set
contains the potential results of that operand.
[:zh_CN]
若 [$E] 是个带有数组操作数的下标运算（[#expr.sub]），则该集合包含这个操作数的
潜在结果。

[item]
[:en]
If [$E] is a class member access expression ([#expr.ref]) of the form
[$E_1] [`.] [`:opt:key template] [$E_2] naming a non-static data member, the set
contains the potential results of [$E_1].
[:zh_CN]
若 [$E] 是形式为“[$E_1] [`.] [`:opt:key template] [$E_2]”的指名了某个非静态数据
成员的类成员访问表达式（[#expr.ref]），则该集合包含 [$E_1] 的潜在结果。

[item]
[:en]
If [$E] is a class member access expression naming a static data member, the set
contains the [~id-expression] designating the data member.
[:zh_CN]
若 [$E] 是指名了某个静态数据成员的类成员访问表达式，则该集合包含代表该数据成员的
[~标识表达式]。

[item]
[:en]
If [$E] is a pointer-to-member expression ([#expr.mptr.oper]) of the form
[$E_1] [`.*] [$E_2], the set contains the potential results of [$E_1].
[:zh_CN]
若 [$E] 是形式为“[$E_1] [`.*] [$E_2]”的成员指针表达式（[#expr.mptr.oper]），则
该集合包含 [$E_1] 的潜在结果。

[item]
[:en]
If [$E] has the form [`([$E_1])], the set contains the potential results of [$E_1].
[:zh_CN]
若 [$E] 的形式为 [`([$E_1])]，则该集合包含 [$E_1] 的潜在结果。

[item]
[:en]
If [$E] is a glvalue conditional expression ([#expr.cond]), the set is the union
of the sets of potential results of the second and third operands.
[:zh_CN]
若 [$E] 是泛左值条件表达式（[#expr.cond]），则该集合是其第二和第三操作数的
潜在结果集合的并集。

[item]
[:en]
If [$E] is a comma expression ([#expr.comma]), the set contains the
potential results of the right operand.
[:zh_CN]
若 [$E] 是逗号表达式（[#expr.comma]），则该集合包含其右操作数的潜在结果。

[item]
[:en]
Otherwise, the set is empty.
[:zh_CN]
否则该集合为空集。
[list:end]

[begin:note]
[:en]
This set is a (possibly-empty) set of [~id-expression]s, each of which is either
[$E] or a subexpression of [$E].
[:zh_CN]
这个集合是[~标识表达式]的（可能为空的）集合，其中的每个要么为 [$E] 要么为 [$E]
的子表达式。

[begin:example]
[:en]
In the following example, the set of potential results of the initializer of
[`n] contains the first [`S::x] subexpression, but not the second [`S::x]
subexpression.
[:zh_CN]
以下例子中，[`n] 的初始化式的潜在结果集合包含第一个 [`S::x] 子表达式，但不包含
第二个 [`S::x] 子表达式。

[codeblock]
struct S { static const int x = 0; };
const int &f(const int &r);
int n = b ? (1, S::x)           // [:en] [`S::x] is not odr-used here \
                                   [:zh_CN] [`S::x] 并未被 ODR 式使用
          : f(S::x);            // [:en] [`S::x] is odr-used here, so a definition is required \
                                   [:zh_CN] [`S::x] 被 ODR 式使用，所以需要一个定义式
[codeblock:end]
[end:example]
[end:note]

[para]
[:en]
A function is [+named by[%function[!named by expression or conversion]]]
an expression or conversion as follows:
[:zh_CN]
以下情况下函数[+被表达式或转换指名[%函数[!被表达式或转换指名]]]：

[list]
[item]
[:en]
A function is named by an expression or conversion if it is the selected member
of an overload set ([#basic.lookup], [#over.match], [#over.over]) in an overload
resolution performed as part of forming that expression or conversion, unless it
is a pure virtual function and either the expression is not an [~id-expression]
naming the function with an explicitly qualified name or the expression forms a
pointer to member ([#expr.unary.op]).
[:zh_CN]
如果为构成某个表达式或转换的一部分所进行的重载决议之中，某个函数是某个重载集合中
所选中的成员（[#basic.lookup]，[#over.match]，[#over.over]），则这个函数被该
表达式或转换所指名，除非它是纯虚函数，并且要么该表达式并非一个带有显式限定名的
指名该函数的[~标识表达式]，要么该表达式构成了成员指针（[#expr.unary.op]）。

[begin:note]
[:en]
This covers taking the address of functions ([#conv.func], [#expr.unary.op]),
calls to named functions ([#expr.call]), operator overloading ([#over]),
user-defined conversions ([#class.conv.fct]), allocation functions for
[~new-expression]s ([#expr.new]), as well as non-default initialization
([#dcl.init]).
[:zh_CN]
这条也覆盖了获取函数的地址（[#conv.func]，[#expr.unary.op]），对具名函数
（[#expr.call]），运算符重载（[#over]），用户定义的转换（[#class.conv.fct]），
[~new-表达式]的分配函数（[#expr.new]）的调用，以及非默认初始化（[#dcl.init]）等
情况。

[:en]
A constructor selected to copy or move an object of class type is considered to
be named by an expression or conversion even if the call is actually elided by
the implementation ([#class.copy.elision]).
[:zh_CN]
选择用于复制或移动类类型的对象的构造函数，即便其调用实际上被实现所消除
（[#class.copy.elision]），也认为它是被表达式或转换所指名的。
[end:note]

[item]
[:en]
A deallocation function for a class is named by a [~new-expression] if it is the
single matching deallocation function for the allocation function selected by
overload resolution, as specified in [#expr.new].
[:zh_CN]
如果某个类的回收函数，根据 [#expr.new] 所述，对于某个 [~new-表达式]是唯一与由
重载决议所选中的分配函数相匹配的回收函数，则它被该表达式指名。

[item]
[:en]
A deallocation function for a class is named by a [~delete-expression] if it is
the selected usual deallocation function as specified in [#expr.delete] and
[#class.free].
[:zh_CN]
如果某个类的回收函数，根据 [#expr.delete] 和 [#class.free] 所述，对于某个
[~delete-表达式]是所选中的常规回收函数，则它被该表达式指名。
[list:end]

[para]
[:en]
A variable is named by an expression if the expression is an [~id-expression]
that denotes it.
[:zh_CN]
如果表达式为代表某个变量的[~标识表达式]，则该表达式指名该变量。

[:en]
A variable [`x] whose name appears as a potentially-evaluated expression [$E] is
[+odr-used[%odr-use]] by [$E] unless
[:zh_CN]
变量 [`x] 当其名字用作潜在求值表达式 [$E] 时，即被 [$E] 所 [+ODR 式使用]，但
不包括以下情况：

[list]
[item]
[:en@~] [`x] is a reference that is usable in constant expressions
([#expr.const]), or
[:zh_CN@~] [`x] 是个可用于常量表达式之中的引用（[#expr.const]），或
[item]
[:en@~] [`x] is a variable of non-reference type that is usable in constant
expressions and has no mutable subobjects, and [$E] is an element of the set of
potential results of an expression of non-volatile-qualified non-class type to
which the lvalue-to-rvalue conversion ([#conv.lval]) is applied, or
[:zh_CN@~] [`x] 是个非引用类型的可用于常量表达式之中且不包含可改动子对象的变量，
并且 [$E] 是某个未被 volatile 限定的非类类型表达式并实施了左值向右值转换
（[#conv.lval]）后的潜在结果集合的某个元素，或者
[item]
[:en@~] [`x] is a variable of non-reference type, and [$E] is an element of the
set of potential results of a discarded-value expression ([#expr.prop]) to which
the lvalue-to-rvalue conversion is not applied.
[:zh_CN@~] [`x] 是个非引用类型的变量，并且 [$E] 是某个弃值表达式（[#expr.prop]）
并实施了左值向右值转换后的潜在结果集合的某个元素。
[list:end]

[para]
[:en]
A structured binding is odr-used if it appears as a potentially-evaluated
expression.
[:zh_CN]
当结构化绑定作为潜在求值表达式出现时，它即被 ODR 式使用。

[para]
[:en]
[`*[`:key this]] is odr-used if [`:key this] appears as a potentially-evaluated
expression (including as the result of the implicit transformation in the body
of a non-static member function ([#class.mfct.non-static])).
[:zh_CN]
当 [`:key this] 用作潜在求值表达式（也包括在非静态成员函数体中所进行的隐式变换的
结果（[#class.mfct.non-static]））时，ODR 式使用 [`*[`:key this]]。

[para]
[:en]
A virtual member function is odr-used if it is not pure.
[:zh_CN]
若虚成员函数不是纯虚函数，它即被 ODR 式使用。

[:en]
A function is odr-used if it is named by a potentially-evaluated expression or
conversion.
[:zh_CN]
若函数被潜在求值表达式或转换所指名，它即被 ODR 式使用。

[:en]
A non-placement allocation or deallocation function for a class is odr-used by
the definition of a constructor of that class.
[:zh_CN]
类的构造函数的定义式 ODR 式使用类的非放置式分配或回收函数。

[:en]
A non-placement deallocation function for a class is odr-used by the definition
of the destructor of that class, or by being selected by the lookup at the
point of definition of a virtual destructor ([#class.dtor]).[#:fn#]
[:zh_CN]
类的析构函数的定义式，或者当虚析构函数的定义点处的查找所选取时，ODR 式使用类的
非放置式回收函数（[#class.dtor]）。[#:fn#]

[note:foot]
[:en]
An implementation is not required to call allocation and deallocation functions
from constructors or destructors; however, this is a permissible implementation
technique.
[:zh_CN]
实现不必在构造函数或析构函数中调用分配函数和回收函数；但这是一种允许的实现技术。
[note:end]

[para]
[:en]
An assignment operator function in a class is odr-used by an implicitly-defined
copy-assignment or move-assignment function for another class as specified in
[#class.copy.assign].
[:zh_CN]
类的隐式定义的复制赋值或移动赋值函数，按 [#class.copy.assign] 所述 ODR 式使用
另一个类的赋值运算符函数。

[:en]
A constructor for a class is odr-used as specified in [#dcl.init].
[:zh_CN]
按 [#dcl.init] 所述 ODR 式使用类的构造函数。

[:en]
A destructor for a class is odr-used if it is potentially invoked ([#class.dtor]).
[:zh_CN]
如果类的析构函数被潜在调用，则它被 ODR 式使用（[#class.dtor]）。

[para]
[:en]
A local entity ([#basic.pre]) is [+odr-usable] in a scope ([#basic.scope.scope])
if:
[:zh_CN]
以下情况下，称局部实体（[#basic.pre]）在某个作用域（[#basic.scope.scope]）中
[+可 ODR 式使用]。

[list]
[item]
[:en]
either the local entity is not [`*[`:key this]], or an enclosing class or
non-lambda function parameter scope exists and, if the innermost such scope is a
function parameter scope, it corresponds to a non-static member function, and
[:zh_CN]
要么该局部实体不是 [`*[`:key this]]，要么存在某个外围的类或非 lambda 函数形参
作用域，以及当最内层的这种作用域是一个函数形参作用域时它对应于某个非静态成员函数，
以及

[item]
[:en]
for each intervening scope ([#basic.scope.scope]) between the point at which the
entity is introduced and the scope (where [`*[`:key this]] is considered to be
introduced within the innermost enclosing class or non-lambda function
definition scope), either:
[:zh_CN]
对于每个介入到引入该实体的位置和该作用域之间的作用域（[#basic.scope.scope]），
其中 [`*[`:key this]] 被认为是在最内层的外围的类或非 lambda 函数定义式作用域中
引入的，有：

[list]
[item]
[:en@~]
the intervening scope is a block scope, or
[:zh_CN@~]
该介入的声明区是块作用域，或者
[item]
[:en@~]
the intervening scope is the function parameter scope of a [~lambda-expression]
that has a [~simple-capture] naming the entity or has a [~capture-default], and
the block scope of the [~lambda-expression] is also an intervening scope.
[:zh_CN@~]
这个介入的作用域是某个 [~lambda-表达式]的函数形参作用域，其带有指名该实体的
[~简单俘获符]或者带有[~默认俘获符]，并且该 [~lambda-表达式]的块作用域同样是一个
介入其间的作用域。
[list:end]
[list:end]

[:en]
If a local entity is odr-used in a scope in which it is not odr-usable, the
program is ill-formed.
[:zh_CN]
如果局部实体在其不可 ODR 式使用的作用域中被 ODR 式使用，则程序非良构。

[begin:example]
[codeblock]
void f(int n) {
  [] { n = 1; };                // [:en] error: [`n] is not odr-usable due to intervening lambda-expression \
                                   [:zh_CN] 错误：[`n] 由于介入的 lambda-表达式而不可被 ODR 式使用
  struct A {
    void f() { n = 2; }         // [:en] error: [`n] is not odr-usable due to intervening function definition scope \
                                   [:zh_CN] 错误：[`n] 由于介入的函数定义式作用域而不可被 ODR 式使用
  };
  void g(int = n);              // [:en] error: [`n] is not odr-usable due to intervening function parameter scope \
                                   [:zh_CN] 错误：[`n] 由于介入的函数形参作用域而不可被 ODR 式使用
  [=](int k = n) {};            // [:en] error: [`n] is not odr-usable due to being \
                                   [:zh_CN] 错误：[`n] 由于处于 [~lambda-表达式]的
                                // [:en@~] outside the block scope of the [~lambda-expression] \
                                   [:zh_CN@~] 块作用域之外而不可被 ODR 式使用
  [&] { [n]{ return n; }; };    // OK
}
[codeblock:end]
[end:example]

[para]
[:en]
Every program shall contain exactly one definition of every non-inline function
or variable that is odr-used in that program outside of a discarded statement
([#stmt.if]); no diagnostic required.
[:zh_CN]
每个程序中所包含的被该程序在弃用语句（[#stmt.if]）之外所 ODR 式使用的任何非内联
函数或变量的定义式应该恰好唯一；无须诊断。

[:en]
The definition can appear explicitly in the program, it can be found in the
standard or a user-defined library, or (when appropriate) it is
implicitly defined (see [#class.default.ctor], [#class.copy.ctor], [#class.dtor],
and [#class.copy.assign]).
[:zh_CN]
该定义式可以明确出现在程序中，可以在标准或用户定义程序库中找到，或（适当地）被
隐式定义（见 [#class.default.ctor]，[#class.copy.ctor]，[#class.dtor]，和
[#class.copy.assign]）。

[begin:example]
[codeblock]
auto f() {
  struct A {};
  return A{};
}
decltype(f()) g();
auto x = g();
[codeblock:end]

[:en]
A program containing this translation unit is ill-formed because [`g]
is odr-used but not defined, and cannot be defined in any other translation unit
because the local class [`A] cannot be named outside this translation unit.
[:zh_CN]
包含这个翻译单元的程序非良构，因为 [`g] 被 ODR 式使用但并未定义，而且由于局部类
[`A] 无法在这个翻译单元之外被指名，导致也无法在任何其他翻译单元中予以定义。
[end:example]

[para]
[:en]
A [+definition domain] is a [~private-module-fragment] or the portion of a
translation unit excluding its [~private-module-fragment] (if any).
[:zh_CN]
[+定义域]为[~私有模块分段]或翻译单元中除[~私有模块分段]以外的部分（如果有）。

[:en]
A definition of an inline function or variable shall be reachable from the end
of every definition domain in which it is odr-used outside of a discarded
statement.
[:zh_CN]
内联的函数或变量，应该在每个于弃用语句之外 ODR 式使用它的定义域末尾处可达。

[para]
[:en]
[%type[!incomplete]]
A definition of a class shall be reachable in every context in which
the class is used in a way that requires the class type to be complete.
[:zh_CN]
[%类型[!不完整～]]
对某个类的使用方式需要其类类型完整的每个语境中，都应当有该类的一个定义式可达。

[begin:example]
[:en]
The following complete translation unit is well-formed, even though it never
defines [`X]:
[:zh_CN]
如下的这个完整的翻译单元是良构的，虽然它并没有定义 [`X]：

[codeblock]
struct X;                       // [:en] declare [`X] as a struct type \
                                   [:zh_CN] 声明 [`X] 为结构体类型
struct X* x1;                   // [:en] use [`X] in pointer formation \
                                   [:zh_CN] 在指针构成中使用 [`X]
X* x2;                          // [:en] use [`X] in pointer formation \
                                   [:zh_CN] 在指针构成中使用  [`X]
[codeblock:end]
[end:example]

[begin:note]
[:en]
The rules for declarations and expressions describe in which contexts
complete class types are required.
[:zh_CN]
关于声明式和表达式的规则，描述了在何种语境中需要完整的类类型。

[:en]
A class type [`T] must be complete if:
[:zh_CN]
以下情况下类类型 [`T] 必须是完整的：

[list]
[item]
[:en]
an object of type [`T] is defined ([#basic.def]), or
[:zh_CN]
定义 [`T] 类型的对象（[#basic.def]），或

[item]
[:en]
a non-static class data member of type [`T] is declared ([#class.mem]), or
[:zh_CN]
声明 [`T] 类型的非静态的类数据成员（[#class.mem]），或

[item]
[:en]
[`T] is used as the allocated type or array element type in a [~new-expression]
([#expr.new]), or
[:zh_CN]
[`T] 被用作 [~new-表达式]中的被分配类型或数组元素类型（[#expr.new]），或

[item]
[:en]
an lvalue-to-rvalue conversion is applied to a glvalue referring to an object of
type [`T] ([#conv.lval]), or
[:zh_CN]
对指代 [`T] 类型的对象的泛左值实施左值向右值转换（[#conv.lval]），或

[item]
[:en]
an expression is converted (either implicitly or explicitly) to type [`T]
([#conv], [#expr.type.conv], [#expr.dynamic.cast], [#expr.static.cast],
[#expr.cast]), or
[:zh_CN]
将表达式（隐式或显式地）转换为类型 [`T]（[#conv]，[#expr.type.conv]，
[#expr.dynamic.cast]，[#expr.static.cast]，[#expr.cast]），或

[item]
[:en]
an expression that is not a null pointer constant, and has type other than
[=cv] [`[`:key void]*], is converted to the type pointer to [`T] or reference to
[`T] using a standard conversion ([#conv]), a [`:key dynamic_cast]
([#expr.dynamic.cast]) or a [`:key static_cast] ([#expr.static.cast]), or
[:zh_CN]
将不是空指针常量且类型不为 [=cv] [`[`:key void]*] 的表达式，通过标准转换（[#conv]），
[`:key dynamic_cast]（[#expr.dynamic.cast]），或 [`:key static_cast]
（[#expr.static.cast]），转换为 [`T] 的指针或 [`T] 的引用，或

[item]
[:en]
a class member access operator is applied to an expression of type [`T]
([#expr.ref]), or
[:zh_CN]
对 [`T] 类型的表达式运用类成员访问运算符（[#expr.ref]），或

[item]
[:en]
the [`:key typeid] operator ([#expr.typeid]) or the [`:key sizeof] operator
([#expr.sizeof]) is applied to an operand of type [`T], or
[:zh_CN]
对 [`T] 类型的操作数运用 [`:key typeid] 运算符（[#expr.typeid]）或 [`:key sizeof]
运算符（[#expr.sizeof]），或

[item]
[:en]
a function with a return type or argument type of type [`T] is defined
([#basic.def]) or called ([#expr.call]), or
[:zh_CN]
定义（[#basic.def]）或调用（[#expr.call]）以类型 [`T] 为返回类型或实参类型的函数，
或

[item]
[:en]
a class with a base class of type [`T] is defined ([#class.derived]), or
[:zh_CN]
定义具有 [`T] 类型基类的类（[#class.derived]），或

[item]
[:en]
an lvalue of type [`T] is assigned to ([#expr.ass]), or
[:zh_CN]
向 [`T] 类型的左值赋值（[#expr.ass]），或

[item]
[:en]
the type [`T] is the subject of an [`:key alignof] expression ([#expr.alignof]),
or
[:zh_CN]
类型 [`T] 是 [`:key alignof] 表达式的目标（[#expr.alignof]），或

[item]
[:en]
an [~exception-declaration] has type [`T], reference to [`T], or pointer to [`T]
([#except.handle]).
[:zh_CN]
[~异常声明]的类型为 [`T]，[`T] 的引用，或 [`T] 的指针（[#except.handle]）。
[list:end]
[end:note]

[para]
[:en]
There can be more than one definition of a
[:zh_CN]
程序中可以包含

[list]
[item]
[:en@~] class type ([#class]),
[:zh_CN@~] 类类型（[#class]），
[item]
[:en@~] enumeration type ([#dcl.enum]),
[:zh_CN@~] 枚举类型（[#dcl.enum]），
[item]
[:en@~] inline function or variable ([#dcl.inline]),
[:zh_CN@~] 内联函数或变量（[#dcl.inline]），
[item]
[:en@~] templated entity ([#temp.pre]),
[:zh_CN@~] 模板化实体（[#temp.pre]），
[item]
[:en@~] default argument for a parameter (for a function in a given scope)
([#dcl.fct.default]), or
[:zh_CN@~] （某个函数在给定作用域中的）某个形参的默认实参（[#dcl.fct.default]），
或者
[item]
[:en@~] default template argument ([#temp.param])
[:zh_CN@~] 默认模板实参（[#temp.param]）
[list:end]

[:en@~] in a program provided that each definition appears in a different
translation unit and the definitions satisfy the following requirements.
[:zh_CN@~] 的多个定义式，但要求每个定义式都出现于不同的翻译单元中，并且这些
定义式满足如下规定。

[:en]
Given such an entity [`D] defined in more than one translation unit, for all
definitions of [`D], or, if [`D] is an unnamed enumeration, for all definitions
of [`D] that are reachable at any given program point, the following
requirements shall be satisfied.
[:zh_CN]
给定定义于多个翻译单元中的实体 [`D]，对于 [`D] 的全部定义式，或当 [`D] 为无名
枚举时，对于程序中任何给定的位置点可达的 [`D] 的所有定义式，以下各项要求都应当
被满足。

[list]
[item]
[:en]
Each such definition shall not be attached to a named module ([#module.unit]).
[:zh_CN]
每个这种定义式都不应当附属于某个具名模块（[#module.unit]）。

[item]
[:en]
Each such definition shall consist of the same sequence of tokens, where
the definition of a closure type is considered to consist of the sequence of
tokens of the corresponding [~lambda-expression].
[:zh_CN]
每个这种定义式都应该由相同的记号序列构成，其中闭包类型的定义式被当做由其对应
[~lambda-表达式]的记号序列所构成。

[item]
[:en]
In each such definition, corresponding names, looked up according to
[#basic.lookup], shall refer to the same entity, after overload resolution
([#over.match]) and after matching of partial template specialization
([#temp.over]), except that a name can refer to
[:zh_CN]
在每个这种定义式中，每个对应的名字，根据 [#basic.lookup] 进行的查找结果，经过
重载决议（[#over.match]）并经过对模板部分特化式进行匹配（[#temp.over]）后，应当
代表相同实体，但是名字也可以代表

[list]
[item]
[:en]
a non-volatile const object with internal or no linkage if the object
[:zh_CN]
具有内部连接或无连接的非 volatile 的 const 对象，只要该对象

[list]
[item]
[:en]
has the same literal type in all definitions of [`D],
[:zh_CN]
在 [`D] 的所有定义式中都具有相同的字面类型，

[item]
[:en]
is initialized with a constant expression ([#expr.const]),
[:zh_CN]
由常量表达式（[#expr.const]）所初始化，

[item]
[:en]
is not odr-used in any definition of [`D], and
[:zh_CN]
未在 [`D] 的任何定义式中 ODR 式使用，并且

[item]
[:en]
has the same value in all definitions of [`D]
[:zh_CN]
在 [`D] 的所有定义式中的值都相同，
[list:end]

[:en@~]
or
[:zh_CN@~]
或者

[item]
[:en]
a reference with internal or no linkage initialized with a constant expression
such that the reference refers to the same entity in all definitions of [`D].
[:zh_CN]
具有内部连接或无连接的引用，其以常量表达式初始化并使该引用在 [`D] 的所有定义式中
都指代相同的实体。
[list:end]

[item]
[:en]
In each such definition, except within the default arguments and default
template arguments of [`D], corresponding [~lambda-expression]s shall have the
same closure type (see below).
[:zh_CN]
每个这种定义式中，不包括 [`D] 的默认实参和默认模板实参之内，对应的
[~lambda-表达式]应当具有相同的闭包类型（见下文）。

[item]
[:en]
In each such definition, corresponding entities shall have the same language
linkage.
[:zh_CN]
每个这种定义式中，对应实体应当具有相同的语言连接。

[item]
[:en]
In each such definition, the overloaded operators referred to, the implicit
calls to conversion functions, constructors, operator new functions and
operator delete functions, shall refer to the same function.
[:zh_CN]
每个这种定义式中，所涉指的重载运算符，对转换函数、构造函数、new 运算符函数和
delete 运算符函数的隐式调用，应该涉及相同函数。

[item]
[:en]
In each such definition, a default argument used by an (implicit or explicit)
function call or a default template argument used by an (implicit or explicit)
[~template-id] or [~simple-template-id] is treated as if its token sequence were
present in the definition of [`D];
[:zh_CN]
每个这种定义式中，由（隐式或显式的）函数调用所使用的默认实参，或者由（隐式或
显式的）[~模板标识]或[~简单模板标识]所使用的默认模板实参，是被当作如同其记号序列
位于 [`D] 的定义式之中的；

[:en@~]
that is, the default argument or default template argument is subject to the
requirements described in this paragraph (recursively).
[:zh_CN@~]
也就是说，默认实参或默认模板实参也（递归地）遵守本段落中所描述的各项规定。

[item]
[:en]
If [`D] is a class with an implicitly-declared constructor
([#class.default.ctor], [#class.copy.ctor]), it is as if the constructor was
implicitly defined in every translation unit where it is odr-used, and the
implicit definition in every translation unit shall call the same constructor
for a subobject of [`D].
[:zh_CN]
如果 [`D] 是带有隐式声明的构造函数（[#class.default.ctor]，[#class.copy.ctor]）
的类，则如同在每个 ODR 式使用它的翻译单元中都隐式定义了该构造函数，且其在每个
翻译单元中的隐式定义都应当调用 [`D] 的子对象的相同构造函数。

[begin:example]
[codeblock]
// [:en] translation unit 1: \
   [:zh_CN] 翻译单元 1：
struct X {
  X(int, int);
  X(int, int, int);
};
X::X(int, int = 0) { }
class D {
  X x = 0;
};
D d1;                           // [:en] [`X(int, int)] called by [`D()] \
                                   [:zh_CN] [`X(int, int)] 被 [`D()] 调用

// [:en] translation unit 2: \
   [:zh_CN] 翻译单元 2：
struct X {
  X(int, int);
  X(int, int, int);
};
X::X(int, int = 0, int = 0) { }
class D {
  X x = 0;
};
D d2                            // [:en] [`X(int, int, int)] called by [`D()]; \
                                   [:zh_CN] [`X(int, int, int)] 被 [`D()] 调用；
                                // [:en@~] [`D()][=']s implicit definition violates the ODR \
                                   [:zh_CN@~] [`D()] 的隐式定义违反 ODR
[codeblock:end]
[end:example]

[item]
[:en]
If [`D] is a class with a defaulted three-way comparison operator function
([#class.spaceship]), it is as if the operator was implicitly defined in every
translation unit where it is odr-used, and the implicit definition in every
translation unit shall call the same comparison operators for each subobject of
[`D].
[:zh_CN]
若 [`D] 是带有预置的三路比较运算符函数（[#class.spaceship]）的类，则如同该运算符
在每个 ODR 式使用了它的翻译单元中被隐式定义，而且其每个翻译单元中的隐式定义式都
应当调用 [`D] 的各个子对象的相同的比较运算符。
[list:end]

[para]
[:en]
If [`D] is a template and is defined in more than one translation unit, then the
preceding requirements shall apply both to names from the template[=']s
enclosing scope used in the template definition, and also to dependent names at
the point of instantiation ([#temp.dep]).
[:zh_CN]
若 [`D] 是模板，且定义于多个翻译单元之中，则前述的规定应当既适用于该模板的定义式
中所使用的来自该模板的外围作用域的名字，也适用于实例化点处的待决名字（[#temp.dep]）。

[:en]
These requirements also apply to corresponding entities defined within each
definition of [`D] (including the closure types of [~lambda-expression]s, but
excluding entities defined within default arguments or
default template arguments of either [`D] or an entity not defined within [`D]).
[:zh_CN]
这些规定同样适用于 [`D] 的每个定义式中所定义的对应实体（包括 [~lambda-表达式]的
闭包类型，但不包括定义于 [`D] 或并非在 [`D] 之中所定义的实体的默认实参或
默认模板实参之中所定义的实体）。

[:en]
For each such entity and for [`D] itself, the behavior is as if there is a
single entity with a single definition, including in the application of these
requirements to other entities.
[:zh_CN]
对于每个这样的实体以及 [`D] 自身，其行为如同一个具有单一定义式的单个实体一样，
这也包括这些规定运用于其他实体的情况。

[begin:note]
[:en]
The entity is still declared in multiple translation units, and [#basic.link]
still applies to these declarations.
[:zh_CN]
该实体仍然在多个翻译单元中有所声明，并且 [#basic.link] 仍然适用于这些声明式。

[:en]
In particular, [~lambda-expression]s ([#expr.prim.lambda]) appearing in the type
of [`D] can result in the different declarations having distinct types, and
[~lambda-expression]s appearing in a default argument of [`D] might still denote
different types in different translation units.
[:zh_CN]
特别是，出现于 [`D] 的类型中的 [~lambda-表达式]（[#expr.prim.lambda]）可导致
不同的声明式中各自具有不同的类型，并且出现于 [`D] 的默认实参中的 [~lambda-表达式]
在不同翻译单元中可能仍会代表不同类型。
[end:note]

[para]
[:en]
If these definitions do not satisfy these requirements, then the program
is ill-formed; a diagnostic is required only if the entity is attached to a
named module and a prior definition is reachable at the point where a later
definition occurs.
[:zh_CN]
如果这些定义式不符合以上这些要求，则程序非良构；仅当该实体附属于某个模块，且在
后面的定义式出现之处有之前的定义式可达时需要诊断。

[begin:example]
[codeblock]
inline void f(bool cond, void (*p)()) {
  if (cond) f(false, []{});
}
inline void g(bool cond, void (*p)() = []{}) {
  if (cond) g(false);
}
struct X {
  void h(bool cond, void (*p)() = []{}) {
    if (cond) h(false);
  }
};
[codeblock:end]

[:en]
If the definition of [`f] appears in multiple translation units, the behavior of
the program is as if there is only one definition of [`f].
[:zh_CN]
若 [`f] 的定义式在多个翻译单元中出现，则程序的行为如同仅有一个 [`f] 的定义式。

[:en]
If the definition of [`g] appears in multiple translation units, the program is
ill-formed (no diagnostic required) because each such definition uses a
default argument that refers to a distinct [~lambda-expression] closure type.
[:zh_CN]
若 [`g] 的定义式在多个翻译单元中出现，则程序非良构（无须诊断），这是因为这样的
定义式使用的默认实参指代了不同的 [~lambda-表达式]闭包类型。

[:en]
The definition of [`X] can appear in multiple translation units of a valid
program; the [~lambda-expression]s defined within the default argument of
[`X::h] within the definition of [`X] denote the same closure type in each
translation unit.
[:zh_CN]
[`X] 的定义式可以在合法程序的多个翻译单元中出现；在 [`X] 的定义式中的 [`X::h] 的
默认实参中所定义的 [~lambda-表达式]，在各个翻译单元中都代表相同的闭包类型。
[end:example]

[para]
[:en]
If, at any point in the program, there is more than one reachable unnamed
enumeration definition in the same scope that have the same first enumerator
name and do not have typedef names for linkage purposes ([#dcl.enum]),
those unnamed enumeration types shall be the same; no diagnostic required.
[:zh_CN]
如果在程序中的任意点，存在相同作用域中的多于一个可达的无名枚举定义式，它们具有
相同的首个枚举符名，且没有用于连接目的的 typedef 名（[#dcl.enum]），则这些无名
枚举类型应当相同；无须诊断。

[%:end#one.definition.rule]
