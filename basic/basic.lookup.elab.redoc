[section#basic.lookup.elab
    [:en] Elaborated type specifiers
    [:zh_CN] 详述类型说明符
[%:begin#lookup.elab
    [:en] lookup [!elaborated type specifier]
    [:zh_CN] 查找 [!详述类型说明符的～]
]
[%  [:en] type specifier[!elaborated]
    [:zh_CN] 类型说明符[!详述～] ]
]

[para]
[:en]
If the [~class-key] or [`:key enum] keyword in an [~elaborated-type-specifier]
is followed by an [~identifier] that is not followed by [`::], lookup for the
[~identifier] is type-only ([#basic.lookup.general]).
[:zh_CN]
如果[~详述类型说明符]中的[~类关键字]或关键字 [`:key enum] 之后跟着一个并未跟着
[`::] 的[~标识符]，则对该[~标识符]的查找是仅限类型的（[#basic.scope.general]）。

[begin:note]
[:en]
In general, the recognition of an [~elaborated-type-specifier] depends on the
following tokens.
[:zh_CN]
一般来说，对[~详述类型说明符]的识别取决于其后跟随的记号。

[:en]
If the [~identifier] is followed by [`::], see [#basic.lookup.qual].
[:zh_CN]
若其[~标识符]之后跟着 [`::]，请参见 [#basic.lookup.qual]。
[end:note]

[para]
[:en]
If the terminal name of the [~elaborated-type-specifier] is a qualified name,
lookup for it is type-only.
[:zh_CN]
若该[~详述类型说明符]的终端名是一个限定名，则对它的查找是仅限类型的。

[:en]
If the name lookup does not find a previously declared [~type-name], the
[~elaborated-type-specifier] is ill-formed.
[:zh_CN]
若此名字查找过程并未找到之前声明的[~类型名]，则该[~详述类型说明符]是非良构的。

[para]
[begin:example]
[codeblock]
struct Node {
  struct Node* Next;            // [:en] OK, refers to injected-class-name [`Node] \
                                [:zh_CN] OK，涉指注入类名 [`Node]
  struct Data* Data;            // [:en] OK, declares type [`Data] at global scope and member [`Data] \
                                [:zh_CN] OK，声明了全局作用域的类型 [`Data] 和成员 [`Data]
};

struct Data {
  struct Node* Node;            // [:en] OK, refers to [`Node] at global scope \
                                [:zh_CN] OK，涉指全局作用域的 [`Node]
  friend struct ::Glob;         // [:en] error: [`Glob] is not declared, cannot introduce a qualified type ([#dcl.type.elab]) \
                                [:zh_CN] 错误：[`Glob] 未声明，不能引入带限定的类型（[#dcl.type.elab]）
  friend struct Glob;           // [:en] OK, refers to (as yet) undeclared [`Glob] at global scope. \
                                [:zh_CN] OK，涉指（还）未声明的全局作用域的 [`Glob]
  /* ... */
};

struct Base {
  struct Data;                  // [:en] OK, declares nested [`Data] \
                                [:zh_CN] OK，声明嵌套的 [`Data]
  struct ::Data*     thatData;  // [:en] OK, refers to [`::Data] \
                                [:zh_CN] OK，涉指 [`::Data]
  struct Base::Data* thisData;  // [:en] OK, refers to nested [`Data] \
                                [:zh_CN] OK，涉指嵌套的 [`Data]
  friend class ::Data;          // [:en] OK, global [`Data] is a friend \
                                [:zh_CN] OK，以全局的 [`Data] 为友元
  friend class Data;            // [:en] OK, nested [`Data] is a friend \
                                [:zh_CN] OK，以嵌套的 [`Data] 为友元
  struct Data { /* ... */ };    // [:en] Defines nested [`Data] \
                                [:zh_CN] 定义嵌套的 [`Data]
};

struct Data;                    // [:en] OK, redeclares [`Data] at global scope \
                                [:zh_CN] OK，在全局作用域重复声明 [`Data]
struct ::Data;                  // [:en] error: cannot introduce a qualified type ([#dcl.type.elab]) \
                                [:zh_CN] 不能引入带限定的类型（[#dcl.type.elab]）
struct Base::Data;              // [:en] error: cannot introduce a qualified type ([#dcl.type.elab]) \
                                [:zh_CN] 不能引入带限定的类型（[#dcl.type.elab]）
struct Base::Datum;             // [:en] error: [`Datum] undefined \
                                [:zh_CN] 错误：[`Datum] 未定义
struct Base::Data* pBase;       // [:en] OK, refers to nested [`Data] \
                                [:zh_CN] OK，涉指嵌套的 [`Data]
[codeblock:end]
[end:example]

[%:end#lookup.elab]
