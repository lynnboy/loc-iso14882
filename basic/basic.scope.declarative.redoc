[section#basic.scope.declarative
    [:en] Declarative regions and scopes
    [:zh_CN] 声明区和作用域
]

[para]
[:en]
[%name[!scope of]]
Every name is introduced in some portion of program text called a
[%region[!declarative]] [%scope[!potential]]
[+declarative region], which is the largest part of the program in which that
name is valid, that is, in which that name may be used as an unqualified name
to refer to the same entity.
[:zh_CN]
[%名字[!～的作用域]]
每个名字都是在程序文本中被称为 [%区[!声明～]] [%作用域[!潜在]] [+声明区] 的部分
中引入的，这是程序中使该名字有效的最广大部分，也就是说，该名字可以在其中用作
未限定名来代表相同的实体。

[:en]
In general, each particular name is valid only within some possibly
discontiguous portion of program text called its [+scope].
[:zh_CN]
通常来说，每个特定的名字都只在程序文本中某些可能不连续的部分中有效，这被称为它的
[+作用域]。

[:en]
To determine the scope of a declaration, it is sometimes convenient to refer to
the [+potential scope] of a declaration.
[:zh_CN]
为确定某个声明式的作用域，有时为方便会提到该声明式的[+潜在作用域]。

[:en]
The scope of a declaration is the same as its potential scope unless the
potential scope contains another declaration of the same name.
[:zh_CN]
声明式的作用域与其潜在作用域相同，除非潜在作用域中包含了相同名字的另一个声明式。

[:en]
In that case, the potential scope of the declaration in the inner (contained)
declarative region is excluded from the scope of the declaration in the outer
(containing) declarative region.
[:zh_CN]
在此情况下，内部（被包含）声明区中的声明式的潜在作用域，就被排除在外部（包含方）
声明区中的声明式的作用域之外。

[para]
[begin:example]
[:en]
In
[:zh_CN]
下例中

[codeblock]
int j = 24;
int main() {
  int i = j, j;
  j = 42;
}
[codeblock:end]

[:en@~]
the identifier [`j] is declared twice as a name (and used twice).
[:zh_CN@~]
标识符 [`j] 作为名字被声明了两次（并使用了两次）。

[:en]
The declarative region of the first [`j] includes the entire example.
[:zh_CN]
第一个 [`j] 的声明区包括整个例子。

[:en]
The potential scope of the first [`j] begins immediately after that [`j] and
extends to the end of the program, but its (actual) scope excludes the text
between the [`,] and the [`}].
[:zh_CN]
第一个 [`j] 的潜在作用域紧跟该 [`j] 之后开始并延续到该程序的末尾，但其（实际的）
作用域并不包括 [`,] 和 [`}] 之间的文本。

[:en]
The declarative region of the second declaration of [`j] (the [`j] immediately
before the semicolon) includes all the text between [`{] and [`}], but its
potential scope excludes the declaration of [`i].
[:zh_CN]
第二个 [`j]（紧接分号之前的 [`j]）的声明式的声明区包括 [`{] 和 [`}] 中的所有文本
，但其潜在作用域不包括 [`i] 的声明式。

[:en]
The scope of the second declaration of [`j] is the same as its potential scope.
[:zh_CN]
第二个 [`j] 的声明式的作用域与其潜在作用域相同。
[end:example]

[para]
[:en]
The names declared by a declaration are introduced into the scope in which the
declaration occurs, except that the presence of a [`friend] specifier
([#class.friend]), certain uses of the [~elaborated-type-specifier]
([#dcl.type.elab]), and [~using-directive]s ([#namespace.udir]) alter this
general behavior.
[:zh_CN]
声明式将其所声明的名字引入到出现该声明式的作用域中，但带有 [`friend] 说明符
（[#class.friend]）的声明式，[~详述类型说明符]（[#dcl.type.elab]）的特定用法，
以及 [~using-指令]（[#namespace.udir]）能够改变这种常规行为。

[para]
[:en]
Given a set of declarations in a single declarative region, each of which
specifies the same unqualified name,
[:zh_CN]
给定某一声明区中的一组指定相同未限定名的声明式，

[list]
[item]
[:en]
they shall all refer to the same entity, or all refer to functions and function
templates; or
[:zh_CN]
它们应当都代表相同的实体，或者都代表函数或函数模板；或

[item]
[:en]
exactly one declaration shall declare a class name or enumeration name that is
not a typedef name and the other declarations shall all refer to the same
variable, non-static data member, or enumerator, or all refer to functions and
function templates;
[:zh_CN]
应当只有一个声明式声明某个不是 typedef 名的类名或枚举名，而其他声明式应当都代表
相同的变量，非静态数据成员，或枚举符，或者都代表函数或函数模板；

[:en@~]
in this case the class name or enumeration name is hidden
([#basic.scope.hiding]).
[:zh_CN@~]
这种情况下，类名或枚举名被隐藏（[#basic.scope.hiding]）。

[begin:note]
[:en]
A structured binding ([#dcl.struct.bind]), namespace name ([#basic.namespace]),
or class template name ([#temp]) must be unique in its declarative region.
[:zh_CN]
结构化绑定（[#dcl.struct.bind]）、命名空间名（[#basic.namespace]）或类模板名
（[#temp]）在其声明区中必须是唯一的。
[end:note]

[list:end]

[begin:note]
[:en]
These restrictions apply to the declarative region into which a name is
introduced, which is not necessarily the same as the region in which the
declaration occurs.
[:zh_CN]
这些规定适用于引入了名字的声明区，它与出现声明式的作用域不一定相同。

[:en]
In particular, [~elaborated-type-specifier]s ([#dcl.type.elab]) and friend
declarations ([#class.friend]) may introduce a (possibly not visible) name into
an enclosing namespace; these restrictions apply to that region.
[:zh_CN]
特别地，[~详述类型说明符]（[#dcl.type.elab]）和友元声明式（[#class.friend]）能够
向其所处的命名空间中引入（可能不可见的）名字；这些规定适用于这个区域。

[:en]
Local extern declarations ([#basic.link]) may introduce a name into the
declarative region where the declaration appears and also introduce a (possibly
not visible) name into an enclosing namespace; these restrictions apply to both
regions.
[:zh_CN]
局部的 extern 声明式（[#basic.link]）将向该声明式所处于的声明区中引入名字，并且
也将向其所处的命名空间中引入（可能不可见的）名字；这些规定也适用于这两个区域。
[end:note]

[para]
[:en]
For a given declarative region [^R] and a point [^P] outside [^R], the set of
[+intervening[%region[!declarative[!intervening]]]] declarative regions between
[^P] and [^R] comprises all declarative regions that are or enclose [^R] and do
not enclose [^P].
[:zh_CN]
对于给定的声明区 [^R] 和某个 [^R] 之外的点 [^P]，[+介入[%区域[!声明区[!介入的]]]]
到 [^P] 和 [^R] 之间的声明区的集合，由并不包围 [^P] 的 [^R] 及其所有外围声明区所
组成。

[para]
[begin:note]
[:en]
The name lookup rules are summarized in [#basic.lookup].
[:zh_CN]
[#basic.lookup] 中概括了名字查找规则。
[end:note]
