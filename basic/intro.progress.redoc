[section#intro.progress
    [:en] Forward progress
    [:zh_CN] 向前进展
]

[para]
[:en]
The implementation may assume that any thread will eventually do one of the
following:
[:zh_CN]
实现可以假设任何线程终将产生以下行为之一：

[list]
[item]
[:en]
terminate,
[:zh_CN]
终止，

[item]
[:en]
make a call to a library I/O function,
[:zh_CN]
调用程序库 I/O 函数，

[item]
[:en]
perform an access through a volatile glvalue, or
[:zh_CN]
通过 volatile 泛左值进行访问，或者

[item]
[:en]
perform a synchronization operation or an atomic operation.
[:zh_CN]
实施同步操作或原子性操作。
[list:end]

[begin:note]
[:en]
This is intended to allow compiler transformations such as removal of
empty loops, even when termination cannot be proven.
[:zh_CN]
其用意是在即使无法证明终止的情况下，允许某些如移除空循环这样的编译器程序变换。
[end:note]

[para]
[:en]
Executions of atomic functions that are either defined to be lock-free
([#atomics.flag]) or indicated as lock-free ([#atomics.lockfree])
are [+lock-free executions [%lock-free execution]].
[:zh_CN]
被定义为无锁的（[#atomics.flag]），或者被标明为无锁的（[#atomics.lockfree]）
原子性函数的执行，是[+无锁执行]。

[list:ul]

[item]
[:en]
If there is only one thread that is not blocked ([#defns.block]) in a standard
library function, a lock-free execution in that thread shall complete.
[:zh_CN]
如果只有一个线程未在某个标准程序库函数中阻塞（[#defns.block]），则该线程中的无锁
执行应当能够执行完毕。

[begin:note]
[:en]
Concurrently executing threads may prevent progress of a lock-free execution.
[:zh_CN]
并发执行的线程可能会妨碍无锁执行的向前进展。

[:en]
For example, this situation can occur with load-locked store-conditional
implementations.
[:zh_CN]
例如，LL/SC（Load-Locked Store-Conditional）实现中可能出现此种情况。

[:en]
This property is sometimes termed obstruction-free.
[:zh_CN]
这种性质有时被称为“无阻碍”。
[end:note]

[item]
[:en]
When one or more lock-free executions run concurrently, at least one should
complete.
[:zh_CN]
当同时运行一个或多个无锁执行时，至少其中之一应当能够执行完毕。

[begin:note]
[:en]
It is difficult for some implementations to provide absolute guarantees to this
effect, since repeated and particularly inopportune interference from other
threads may prevent forward progress,
[:zh_CN]
某些实现中难于为这种效果提供绝对保障，这是由于其他线程中重复发生的特别不合时宜
的干扰可能妨碍其向前进展，

[:en@~]
e.g., by repeatedly stealing a cache line for unrelated purposes between
load-locked and store-conditional instructions.
[:zh_CN@~]
例如，为某个无关目的而不断地在LL（Load-Locked）和SC（Store-Conditional）指令之间
窃取某个高速缓存线。

[:en]
Implementations should ensure that such effects cannot indefinitely delay
progress under expected operating conditions, and that such anomalies can
therefore safely be ignored by programmers.
[:zh_CN]
实现应当确保，这种效应在预期的操作条件下不能无限期地延迟其进展，由此程序员可以
安全地忽略这种反常情况。

[:en]
Outside this document, this property is sometimes termed lock-free.
[:zh_CN]
本文件之外，这种性质有时被称为“无锁”。
[end:note]

[list:end]

[para]
[:en]
During the execution of a thread of execution, each of the following is termed
an [+execution step]:
[:zh_CN]
在执行线程的执行期间，以下各项被称为[+执行步骤]：

[list]
[item]
[:en]
termination of the thread of execution,
[:zh_CN]
执行线程的终止，

[item]
[:en]
performing an access through a volatile glvalue, or
[:zh_CN]
通过 volatile 泛左值进行访问，或者

[item]
[:en]
completion of a call to a library I/O function, a synchronization operation, or
an atomic operation.
[:zh_CN]
对程序库 I/O 函数的调用，同步操作，或原子性操作的完成
[list:end]

[para]
[:en]
An invocation of a standard library function that blocks ([#defns.block])
is considered to continuously execute execution steps while waiting for the
condition that it blocks on to be satisfied.
[:zh_CN]
对标准程序库函数的调用发生阻塞（[#defns.block]），等待其所阻塞的条件得以满足，
被认为是执行步骤的持续执行。

[begin:example]
[:en]
A library I/O function that blocks until the I/O operation is complete can
be considered to continuously check whether the operation is complete.
[:zh_CN]
程序库 I/O 函数在 I/O 操作上阻塞直到其完成，可被看做是持续地检查该操作是否完成。

[:en]
Each such check might consist of one or more execution steps, for example using
observable behavior of the abstract machine.
[:zh_CN]
每次这样的检查都可能由一个或多个执行步骤所构成，比如可能使用了抽象机器的可观察
行为。
[end:example]

[para]
[begin:note]
[:en]
Because of this and the preceding requirement regarding what threads of
execution have to perform eventually, it follows that no thread of execution can
execute forever without an execution step occurring.
[:zh_CN]
因为这一点，以及前文中有关执行线程必须所终将实施的要求，可以得出：执行线程的执行
不会永远不发生执行步骤。
[end:note]

[para]
[:en]
A thread of execution [+makes progress [%make progress[!thread]]] when an
execution step occurs or a lock-free execution does not complete because there
are other concurrent threads that are not blocked in a standard library function
(see above).
[:zh_CN]
当发生执行步骤，或者由于其他的未在标准程序库函数中阻塞（见上文）的并发线程而使得
某次无锁执行未能完成时，执行线程[+取得进展[%取得进展[!线程]]]。

[para]
[:en]
[%forward progress guarantees[!concurrent]]
For a thread of execution providing [+concurrent forward progress guarantees],
the implementation ensures that the thread will eventually make progress for as
long as it has not terminated.
[:zh_CN]
[%向前进展保证[!并发～]]
对于提供[+并发向前进展保证]的执行线程，实现确保它在终止之前终将取得进展。

[begin:note]
[:en]
This is required regardless of whether or not other threads of executions
(if any) have been or are making progress.
[:zh_CN]
这项要求和是否有有其他执行线程已经或正在取得进展无关。

[:en]
To eventually fulfill this requirement means that this will happen in an
unspecified but finite amount of time.
[:zh_CN]
最终能够满足这项要求，是指其将会在某个未指明但有限的时间内发生。
[end:note]

[para]
[:en]
It is [?impldef whether the thread that executes [`main] and the threads created
by [`std::thread] or [`std::jthread] provide concurrent forward progress
guarantees] whether the implementation-created thread of execution that executes
[`main] ([#basic.start.main]) and the threads of execution created by
[`std::thread] ([#thread.thread.class]) or [`std::jthread]
([#thread.jthread.class]) provide concurrent forward progress guarantees.
[:zh_CN]
由实现所创建以执行 [`main] 的执行线程（[#basic.start.main]）和由 [`std::thread]
（[#thread.thread.class]）或 [`std::jthread]（[#thread.jthread.class]）所创建的
执行线程是否提供并发向前进展保证是[?impldef 执行 [`main] 的线程和由
[`std::thread] 或 [`std::jthread] 所创建的线程是否提供并发向前进展保证]。

[begin:note]
[:en]
General-purpose implementations should provide these guarantees.
[:zh_CN]
通用实现最好提供这些保证。
[end:note]

[para]
[:en]
[%forward progress guarantees[!parallel]]
For a thread of execution providing [+parallel forward progress guarantees], the
implementation is not required to ensure that the thread will eventually make
progress if it has not yet executed any execution step; once this thread has
executed a step, it provides concurrent forward progress guarantees.
[:zh_CN]
[%向前进展保证[!并行～]]
对于提供[+并行向前进展保证]的执行线程，如果它尚未产生任何执行步骤，实现不需要
确保它终将取得进展；一旦该线程执行了某个步骤，就应当提供并发向前进展保证。

[para]
[begin:note]
[:en]
This does not specify a requirement for when to start this thread of execution,
which will typically be specified by the entity that creates this thread of
execution.
[:zh_CN]
此处没有对何时启动这个执行线程给出要求，它一般由创建这个执行线程的实体来指定。

[:en]
For example, a thread of execution that provides concurrent forward progress
guarantees and executes tasks from a set of tasks in an arbitrary order, one
after the other, satisfies the requirements of parallel forward progress for
these tasks.
[:zh_CN]
例如，某个执行线程提供了并发向前进展保证，而且以某个任意次序相继地执行一个任务
集合中的任务，它能够满足对于这些任务的并行向前进展保证的要求。
[end:note]

[para]
[:en]
[%forward progress guarantees[!weakly parallel]]
For a thread of execution providing [+weakly parallel forward progress
guarantees], the implementation does not ensure that the thread will eventually
make progress.
[:zh_CN]
[%向前进展保证[!弱并行～]]
对于提供[+弱并行向前进展保证]的执行线程，实现不保证它终将取得进展。

[para]
[begin:note]
[:en]
Threads of execution providing weakly parallel forward progress guarantees
cannot be expected to make progress regardless of whether other threads make
progress or not;
[:zh_CN]
无论是否有其他线程取得进展，都不能期待提供弱并行向前进展保证的执行线程取得进展；

[:en@~]
however, blocking with forward progress guarantee delegation, as defined below,
can be used to ensure that such threads of execution make progress eventually.
[:zh_CN@~]
不过，可以使用带有向前进展保证委托的阻塞（如下文定义），来确保这样的执行线程终将
取得进展。
[end:note]

[para]
[:en]
Concurrent forward progress guarantees are stronger than parallel forward
progress guarantees, which in turn are stronger than weakly parallel forward
progress guarantees.
[:zh_CN]
并发向前进展保证比并行向前进展保证更强，而后者则比弱并行向前保证更强。

[begin:note]
[:en]
For example, some kinds of synchronization between threads of execution may only
make progress if the respective threads of execution provide parallel forward
progress guarantees, but will fail to make progress under weakly parallel
guarantees.
[:zh_CN]
例如，执行线程之间某些种类的同步操作，只有当相应执行线程提供并行向前进展保证时
才能取得进展，而在弱并行保证下则无法取得进展。
[end:note]

[para]
[:en]
[%forward progress guarantees[!delegation of]]
When a thread of execution [$P] is specified to [+block with forward progress
guarantee delegation] on the completion of a set [$S] of threads of execution,
then throughout the whole time of [$P] being blocked on [$S], the implementation
shall ensure that the forward progress guarantees provided by at least one
thread of execution in [$S] is at least as strong as [$P][=']s forward progress
guarantees.
[:zh_CN]
[%向前进展保证[!～的委托]]
若某个执行线程 [$P] 被指定为[+带有向前进展保证委托的阻塞]于某个执行线程集合 [$S]
的完成，则在 [$P] 阻塞于 [$S] 的全部时间内，实现都应当确保 [$S] 中至少有一个执行
线程诉欧提供的向前进展保证至少和 [$P] 的向前进展保证一样强。

[begin:note]
[:en]
It is unspecified which thread or threads of execution in [$S] are chosen and
for which number of execution steps.
[:zh_CN]
并未指定选择 [$S] 中的哪个或哪些执行线程，以及执行步骤的数量。

[:en]
The strengthening is not permanent and not necessarily in place for the rest of
the lifetime of the affected thread of execution.
[:zh_CN]
这项强化并非持久的，而且不需要在受影响的执行线程的其余生存期中起作用。

[:en]
As long as [$P] is blocked, the implementation has to eventually select and
potentially strengthen a thread of execution in [$S].
[:zh_CN]
只要 [$P] 被阻塞，实现就必须最终选择并可能强化 [$S] 中的某个执行线程。
[end:note]

[:en]
Once a thread of execution in [$S] terminates, it is removed from [$S].
[:zh_CN]
一旦 [$S] 中的某个线程终止，就将它从 [$S] 中移除。

[:en]
Once [$S] is empty, [$P] is unblocked.
[:zh_CN]
一旦 [$S] 变为空集，[$P] 就解除阻塞。

[para]
[begin:note]
[:en]
A thread of execution [$B] thus can temporarily provide an effectively stronger
forward progress guarantee for a certain amount of time, due to a second thread
of execution [$A] being blocked on it with forward progress guarantee
delegation.
[:zh_CN]
因此，通过让另一个执行线程 [$A] 带有向前进展保证委托地阻塞于一个执行线程 [$B]
的方式，可以使其在特定时间段中临时提供效果更强的向前进展保证。

[:en]
In turn, if [$B] then blocks with forward progress guarantee delegation on [$C],
this may also temporarily provide a stronger forward progress guarantee to [$C].
[:zh_CN]
进而，如果 [$B] 随即带有向前进展保证委托地阻塞于 [$C]，这也会临时地为 [$C] 提供
更强的向前进展保证。
[end:note]

[para]
[begin:note]
[:en]
If all threads of execution in [$S] finish executing (e.g., they terminate
and do not use blocking synchronization incorrectly), then [$P][=']s execution
of the operation that blocks with forward progress guarantee delegation will not
result in [$P][=']s progress guarantee being effectively weakened.
[:zh_CN]
当 [$S] 中的所有执行线程都执行完成（比如它们都已终止，且并未不当地使用任何阻塞
同步操作）时，[$P] 中进行带有向前进展委托阻塞的操作的执行并不会导致 [$P] 的向前
进展保证的效果被减弱。
[end:note]

[para]
[begin:note]
[:en]
This does not remove any constraints regarding blocking synchronization for
threads of execution providing parallel or weakly parallel forward progress
guarantees because the implementation is not required to strengthen a particular
thread of execution whose too-weak progress guarantee is preventing overall
progress.
[:zh_CN]
这并不会移除针对提供了并行或弱并行向前进展保证的执行线程中的阻塞同步操作的任何
约束条件，因为当某个特定执行线程的过弱的进展保证妨碍了总体进展时，实现并不必须
对其进行强化。
[end:note]

[para]
[:en]
An implementation should ensure that the last value (in modification order)
assigned by an atomic or synchronization operation will become visible to all
other threads in a finite period of time.
[:zh_CN]
实现应当确保，由原子性操作或同步操作（在改动顺序中）所最后赋予的值，将在有限时间
段内对所有其他线程可见。
