[section#basic.indet
    [:en] Indeterminate and erroneous values
    [:zh_CN] 不确定和错误的值
]

[para]
[:en] When storage for an object with automatic or dynamic storage duration
is obtained, the bytes comprising the storage for the object have the following
initial value:
[:zh_CN] 具有自动或动态存储期的对象获取到存储时，组成该对象的存储的各字节具有以下初值：

[list]
[item]
[:en] If the object has dynamic storage duration, or is the object associated
with a variable or function parameter whose first declaration is marked with
the [``[`[indeterminate`]`]] attribute ([#dcl.attr.indet]),
the bytes have [+:adj indeterminate[!values[%value]]];
[:zh_CN] 如果对象具有动态存储期，或它是于首个声明式中被标以
[``[`[indeterminate`]`]] 属性（[#dcl.attr.indet]）的变量或函数形参所关联的对象，
则这些字节具有[+:adj 不确定[!值]]；

[item]
[:en] otherwise, the bytes have [+:adj erroneous[!values[%value]]], where each
value is determined by the implementation independently of the state of the
program.
[:zh_CN] 否则，这些字节都具有[+:adj 错误[!值]]，其每个值都是由实现以与程序状态无关的方式确定。
[list:end]

[:en] If no initialization is performed for an object (including subobjects),
such a byte retains its initial value until that value is replaced
([#dcl.init.general], [#expr.assign]).
[:zh_CN] 如果未对对象（包括子对象）进行任何初始化，那么这样的字节维持其初值，
直到该值被替换（[#dcl.init.general]，[#expr.assign]）。

[:en] If any bit in the value representation has an indeterminate value,
the object has an indeterminate value;
otherwise, if any bit in the value representation has an erroneous value,
the object has an erroneous value ([#conv.lval]).
[:zh_CN] 如果其值表示中有任何位具有不确定值，则对象具有不确定值；
否则，如果其值表示中有任何位具有错误值，则对象具有错误值（[#conv.lval]）。

[begin:note]
[:en] Objects with static or thread storage duration are zero-initialized,
see [#basic.start.static].
[:zh_CN] 具有静态或线程存储期的对象进行零初始化，参见 [#basic.start.static]。
[end:note]

[para]
[:en] Except in the following cases, if an indeterminate value is produced by an
evaluation, the behavior is undefined, and if an erroneous value is produced by
an evaluation, the behavior is erroneous and the result of the evaluation is the
value so produced but is not erroneous:
[:zh_CN] 除以下情况之外，一旦某次求值产生了一个不确定的值，则其行为是未定义的，
而一旦某次求值产生了一个错误的值，则其行为是错误的，且求值的结果就是这样产生的值
但它并非错误的：

[list]
[item]
[:en] If an indeterminate or erroneous value of unsigned ordinary character type
([#basic.fundamental]) or [`std::byte] type ([#cstddef.syn]) is produced by the
evaluation of:
[:zh_CN] 如果无符号的普通字符类型（[#basic.fundamental]）或 [`std::byte] 类型
（[#cstddef.syn]）的不确定或错误的值是由以下各种求值所产生的：

[list]
[item]
[:en@~] the second or third operand of a conditional expression ([#expr.cond]),
[:zh_CN@~] 条件表达式的第二或第三个操作数（[#expr.cond]），
[item]
[:en@~] the right operand of a comma expression ([#expr.comma]),
[:zh_CN@~] 逗号表达式的第二个操作数（[#expr.comma]），
[item]
[:en@~] the operand of a cast or conversion ([#conv.integral],
[#expr.type.conv], [#expr.static.cast], [#expr.cast]) to an unsigned ordinary
character type or [`std::byte] type ([#cstddef.syn]), or
[:zh_CN@~] 向无符号普通字符类型或 [`std::byte] 类型（[#cstddef.syn]）进行的转型
或转换（[#conv.integral]，[#expr.type.conv]，[#expr.static.cast]，[#expr.cast]）
的操作数，或者
[item]
[:en@~] a discarded-value expression ([#expr.context]),
[:zh_CN@~] 弃值表达式（[#expr.context]），
[list:end]

[:en@~] then the result of the operation is an indeterminate value or that
erroneous value, respectively.
[:zh_CN@~] 则该运算的结果分别是该不确定的值或该错误的值。

[item]
[:en] If an indeterminate or erroneous value of unsigned ordinary character type
or [`std::byte] type is produced by the evaluation of the right operand of a
simple assignment operator ([#expr.assign]) whose first operand is an lvalue of
unsigned ordinary character type or [`std::byte] type, an indeterminate value
or that erroneous value, respectively, replaces the value of the object referred
to by the left operand.
[:zh_CN] 如果无符号的普通字符类型或 [`std::byte] 类型的不确定或错误的值是由
简单赋值运算符（[#expr.assign]）的右操作数的求值所产生的，且第一个操作数是无符号的
普通字符类型或[`std::byte] 类型的左值，则分别以不确定的值或该错误值取代由这个
操作数所指代的对象的值。

[item]
[:en] If an indeterminate or erroneous value of unsigned ordinary character type
is produced by the evaluation of the initialization expression when initializing
an object of unsigned ordinary character type, that object is initialized to an
indeterminate value or that erroneous value, respectively.
[:zh_CN] 如果无符号的普通字符类型的不确定或错误的值是在对某个无符号的普通字符类型
的对象进行初始化时由初始化表达式的求值所产生的，则该对象分别被初始化为不确定的值
或该错误的值。

[item]
[:en] If an indeterminate value of unsigned ordinary character type or
[`std::byte] type is produced by the evaluation of the initialization expression
when initializing an object of [`std::byte] type, that object is initialized to
an indeterminate value or that erroneous value, respectively.
[:zh_CN] 如果无符号普通字符类型或 [`std::byte] 类型的不确定的值是在对某个
[`std::byte] 类型的对象进行初始化时由初始化表达式的求值所产生的，则该对象分别被
初始化为不确定的值或该错误值。
[list:end]

[:en] Converting an indeterminate or erroneous value of unsigned ordinary
character type or [`std::byte] type produces an indeterminate or erroneous value,
respectively.
[:zh_CN] 对无符号普通字符类型或 [`std::byte] 类型的不确定值或错误值的转换，分别
产生不确定值或错误值。

[:en] In the latter case, the result of the conversion is the value of the
converted operand.
[:zh_CN] 后一种情况下，转换的结果是被转换的操作数的值。

[begin:example]
[codeblock]
int f(bool b) {
  unsigned char *c = new unsigned char;
  unsigned char d = *c;         // [:en] OK, [`d] has an indeterminate value [:zh_CN] OK，[`d] 具有不确定的值
  int e = d;                    // [:en] undefined behavior [:zh_CN] 未定义行为
  return b ? d : 0;             // [:en] undefined behavior if [`b] is [`true] \
                                [:zh_CN] 若 [`b] 为 [`true] 则为未定义行为
}

int g(bool b) {
  unsigned char c;
  unsigned char d = c;          // [:en] no erroneous behavior, but [`d] has an erroneous value \
                                [:zh_CN] 没有错误行为，但 [`d] 具有错误值

  assert(c == d);               // [:en] holds, both integral promotions have erroneous behavior \
                                [:zh_CN] 成立，二者的整型提升都具有错误行为

  int e = d;                    // [:en] erroneous behavior [:zh_CN] 错误行为
  return b ? d : 0;             // [:en] erroneous behavior if [`b] is [`true] \
                                [:zh_CN] 若 [`b] 为 [`true] 则为错误行为
}

void h() {
  int d1, d2;

  int e1 = d1;                  // [:en] erroneous behavior [:zh_CN] 错误行为
  int e2 = d1;                  // [:en] erroneous behavior [:zh_CN] 错误行为

  assert(e1 == e2);             // [:en] holds [:zh_CN] 成立
  assert(e1 == d1);             // [:en] holds, erroneous behavior [:zh_CN] 成立，错误行为
  assert(e2 == d1);             // [:en] holds, erroneous behavior [:zh_CN] 成立，错误行为

  std::memcpy(&d2, &d1, sizeof(int));   // [:en] no erroneous behavior, but [`d2] has an erroneous value \
                                        [:zh_CN] 没有错误行为，但 [`d2] 具有错误值
  assert(e1 == d2);             // [:en] holds, erroneous behavior [:zh_CN] 成立，错误行为
  assert(e2 == d2);             // [:en] holds, erroneous behavior [:zh_CN] 成立，错误行为
}[codeblock:end]
[end:example]
