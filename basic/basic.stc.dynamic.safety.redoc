[section#basic.stc.dynamic.safety
    [:en] Safely-derived pointers
    [:zh_CN] 安全衍生指针
]

[%:begin#pointer.safety.derived
    [:en] pointer [!safely-derived]
    [:zh_CN] 指针 [!安全衍生～]
]

[para]
[:en]
[%pointer!to traceable object]
A [+traceable pointer object] is
[:zh_CN]
[%指针[!可追踪～对象]]
[+可追踪指针对象]是

[list]
[item]
[:en] an object of an object pointer type ([#basic.compound]), or
[:zh_CN] 对象指针类型的对象（[#basic.compound]），或者
[item]
[:en] an object of an integral type that is at least as large as [`std::intptr_t],
or
[:zh_CN] 至少与 [`std::intptr_t] 一样大整型类型的对象，或者
[item]
[:en] a sequence of elements in an array of narrow character type
([#basic.fundamental]), where the size and alignment of the sequence match those
of some object pointer type.
[:zh_CN] 窄字符类型（[#basic.fundamental]）的数组中的元素序列，该序列的大小和
对齐与某些对象指针类型相匹配。
[list:end]

[para]
[:en]
A pointer value is a [+:adj safely-derived pointer[%safely-derived [!pointer]]]
to an object with dynamic storage duration only if the pointer value has an
object pointer type and is one of the following:
[:zh_CN]
仅当指针值具有对象指针类型，且为如下情况之一时，它是指向具有动态存储期的对象的
[+:adj 安全衍生指针[%安全衍生[!指针]]]：

[list]
[item]
[:en]
the value returned by a call to the [=Cpp] standard library implementation of
[`::operator new(std::size_t)] or
[`::operator new(std::size_t, std::align_val_t)];[#:note#fn:$1]
[:zh_CN]
调用 [=Cpp] 标准程序库实现的 [`::operator new(std::size_t)] 或
[`::operator new(std::size_t, std::align_val_t)]所返回的值；[#:note#fn:$1]

[note:foot#fn:$1]
[:en]
This subclause does not impose restrictions on indirection through pointers to
memory not allocated by [`::operator new].
[:zh_CN]
本子条款并不对指向并非由 [`::operator new] 所分配的内存的指针进行的解引用施加
限制。

[:en]
This maintains the ability of many [=Cpp] implementations to use binary
libraries and components written in other languages.
[:zh_CN]
这维持了在许多 [=Cpp] 实现中使用由其他语言写出的二进制程序库和组件的能力。

[:en]
In particular, this applies to C binaries, because indirection through pointers
to memory allocated by [`std::malloc] is not restricted.
[:zh_CN]
尤其是，这适用于 C 的二进制代码，因为对指向由 [`std::malloc] 所分配的内存的指针
进行间接是没有限制的。
[note:end]

[item]
[:en]
the result of taking the address of an object (or one of its subobjects)
designated by an lvalue resulting from indirection through a safely-derived
pointer value;
[:zh_CN]
由对某个安全衍生指针值进行间接所获得的左值所代表的对象，获取它或其子对象之一的
地址的结果；

[item]
[:en]
the result of well-defined pointer arithmetic ([#expr.add]) using a
safely-derived pointer value;
[:zh_CN]
对安全衍生指针值进行有良好定义的指针算术（[#expr.add]）的结果；

[item]
[:en]
the result of a well-defined pointer conversion ([#conv.ptr], [#expr.type.conv],
[#expr.static.cast], [#expr.cast]) of a safely-derived pointer value;
[:zh_CN]
对安全衍生指针值进行有良好定义的指针转换（[#conv.ptr]，[#expr.type.const]，
[#expr.static.cast]，[#expr.cast]）的结果；

[item]
[:en]
the result of a [`reinterpret_cast] of a safely-derived pointer value;
[:zh_CN]
对安全衍生指针值进行 [`reinterpret_cast] 的结果；

[item]
[:en]
the result of a [`reinterpret_cast] of an integer representation of a
safely-derived pointer value;
[:zh_CN]
对安全衍生指针值的整数表示进行 [`reinterpret_cast] 的结果；

[item]
[:en]
the value of an object whose value was copied from a traceable pointer object,
where at the time of the copy the source object contained a copy of a
safely-derived pointer value.
[:zh_CN]
对象的值，是从某个可追踪指针对象复制而来，且进行复制时源对象包含某个安全衍生指针
值的副本。
[list:end]

[para]
[:en]
[%integer representation] [%pointer[!integer representation of safely-derived]]
An integer value is an [+integer representation of a safely-derived pointer
[%safely-derived pointer[!integer representation]]]
only if its type is at least as large as [`std::intptr_t] and it is one of the
following:
[:zh_CN]
[%整数表示] [%指针[!安全衍生～的整数表示]]
仅当整数值的类型至少与 [`std::intptr_t] 一样大，且满足如下情况之一时，它才是
[+安全衍生指针的整数表示[%安全衍生指针[!整数表示]]]：

[list]
[item]
[:en]
the result of a [`reinterpret_cast] of a safely-derived pointer value;
[:zh_CN]
对安全衍生指针值进行 [`reinterpret_cast] 的结果；

[item]
[:en]
the result of a valid conversion of an integer representation of a
safely-derived pointer value;
[:zh_CN]
对某个安全衍生指针值的整数表示进行合法转换的结果；

[item]
[:en]
the value of an object whose value was copied from a traceable pointer object,
where at the time of the copy the source object contained an integer
representation of a safely-derived pointer value;
[:zh_CN]
对象的值，是从某个可追踪指针对象复制而来，且进行复制时源对象包含某个安全衍生指针
值的整数表示；

[item]
[:en]
the result of an additive or bitwise operation, one of whose operands is an
integer representation of a safely-derived pointer value [`P], if that result
converted by [`reinterpret_cast<void*>] would compare equal to a safely-derived
pointer computable from [`reinterpret_cast<void*>(P)].
[:zh_CN]
某个加性或按位运算的结果，其操作数之一是某个安全衍生指针值 [`P] 的整数表示，并且
当该结果用 [`reinterpret_cast<void*>] 转换后，与用 [`reinterpret_cast<void*>(P)]
能够计算得到的某个安全衍生指针比较相等。
[list:end]

[para]
[:en]
An implementation may have [+relaxed pointer safety], in which case the validity
of a pointer value does not depend on whether it is a safely-derived pointer
value.
[:zh_CN]
实现可以具有[+宽松指针安全性]，这种情况下，指针值的有效性不依赖于它是否是安全
衍生的指针值。

[:en]
Alternatively, an implementation may have [+strict pointer safety], in which
case a pointer value referring to an object with dynamic storage duration that
is not a safely-derived pointer value is an invalid pointer value unless the
referenced complete object has previously been declared reachable
([#util.dynamic.safety]).
[:zh_CN]
或者，实现还可具有[+严格指针安全性]，这种情况下，指代具有动态存储期的对象且不是
安全衍生指针值的指针值，除非被指代的完整对象之前曾被声明为可达的
（[#util.dynamic.safety]），否则就是无效的指针值。

[begin:note]
[:en]
The effect of using an invalid pointer value (including passing it to a
deallocation function) is undefined, see [#basic.stc].
[:zh_CN]
使用无效指针值（包括将其传递给回收函数）的效果是未定义的，参见 [#basic.stc]。

[:en]
This is true even if the unsafely-derived pointer value might compare equal to
some safely-derived pointer value.
[:zh_CN]
即使当非安全衍生指针值可能与某个安全衍生指针值比较为相等也是如此。
[end:note]

[:en]
It is [?impldef whether an implementation has relaxed or strict pointer safety]
whether an implementation has relaxed or strict pointer safety.
[:zh_CN]
实现具有宽松还是严格指针安全性这一点是[?impldef 实现具有宽松还是严格指针安全性]。

[%:end#pointer.safety.derived]
