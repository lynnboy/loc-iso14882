[section#basic.start.term
    [:en] Termination
    [:zh_CN] 终止
]

[%:begin#program.termination
    [:en] program [!termination]
    [:zh_CN] 程序 [!～终止]
]

[para]
[:en]
[%object[!destructor static]] [%[`main] function[!return from]]
Constructed objects ([#dcl.init]) with static storage duration are destroyed and
functions registered with [`std::atexit] are called as part of a call to
[%[`exit]][%@lib exit] [`std::exit] ([#support.start.term]).
[:zh_CN]
[%对象[!静态～的析构函数]] [%[`main] 函数[!从～返回]]
作为对[%[`exit]] [%@lib exit] [`std::exit]（[#support.start.term]）的调用的
一部分，销毁具有静态存储期的已构造对象（[#dcl.init]），并调用通过 [`std::exit]
登记过的函数。

[:en]
The call to [`std::exit] is sequenced before the destructions and the registered
functions.
[:zh_CN]
对 [`std::exit] 的调用按顺序早于这些销毁和登记函数。

[begin:note]
[:en]
Returning from [`main] invokes [`std::exit] ([#basic.start.main]).
[:zh_CN]
从 [`main] 返回时将调用 [`std::exit]（[#basic.start.main]）。
[end:note]

[para]
[:en]
Constructed objects with thread storage duration within a given thread are
destroyed as a result of returning from the initial function of that thread and
as a result of that thread calling [`std::exit].
[:zh_CN]
从给定线程的启动函数中返回，以及该线程调用 [`std::exit]，将导致销毁具有给定线程
中的线程存储期的已构造对象。

[:en]
The destruction of all constructed objects with thread storage duration within
that thread strongly happens before destroying any object with static storage
duration.
[:zh_CN]
所有已构造的具有该线程中的线程存储期的对象的销毁，都强发生早于任何具有静态存储期
的对象的销毁。

[para]
[:en]
If the completion of the constructor or dynamic initialization of an object with
static storage duration strongly happens before that of another, the completion
of the destructor of the second is sequenced before the initiation of the
destructor of the first.
[:zh_CN]
若某个具有静态存储期的对象的构造函数或动态初始化的完成，强发生早于另一个的，则
第二个对象的析构函数的完成就按顺序早于第一个对象的析构函数的开始。

[:en]
If the completion of the constructor or dynamic initialization of an object with
thread storage duration is sequenced before that of another, the completion of
the destructor of the second is sequenced before the initiation of the
destructor of the first.
[:zh_CN]
若某个具有线程存储期的对象的构造函数或动态初始化的完成，按顺序早于另一个的，则
第二个对象的析构函数的完成就按顺序早于第一个对象的析构函数的开始。

[:en]
If an object is initialized statically, the object is destroyed in the same
order as if the object was dynamically initialized.
[:zh_CN]
若某对象被静态地初始化，则该对象将以如同当它被动态初始化时的相同顺序进行销毁。

[:en]
For an object of array or class type, all subobjects of that object are
destroyed before any block-scope object with static storage duration initialized
during the construction of the subobjects is destroyed.
[:zh_CN]
对于数组或类类型的对象，该对象的所有子对象的销毁，将在这些子对象的构造过程中所
初始化的任何具有静态存储期的块作用域对象被销毁之前进行。

[:en]
If the destruction of an object with static or thread storage duration exits via
an exception, the function [`std::terminate] is called ([#except.terminate]).
[:zh_CN]
当具有静态或线程存储期的对象的析构由于异常而退出时，将会调用函数
[`std::terminate]（[#except.terminate]）。

[para]
[:en]
If a function contains a block-scope object of static or thread storage duration
that has been destroyed and the function is called during the destruction of an
object with static or thread storage duration, the program has undefined
behavior if the flow of control passes through the definition of the previously
destroyed block-scope object.
[:zh_CN]
若某个函数包含一个已经销毁的具有静态或线程存储期的块作用域对象，且该函数被某个
具有静态或线程存储期的对象的析构过程所调用，则当控制流经过已经销毁的块作用域对象
的定义式时，该程序具有未定义的行为。

[:en]
Likewise, the behavior is undefined if the block-scope object is used indirectly
(i.e., through a pointer) after its destruction.
[:zh_CN]
类似地，在块作用域对象销毁之后，间接地（比如通过指针）使用它的行为也是未定义的。

[para]
[%[`atexit]] [%@lib atexit]
[:en]
If the completion of the initialization of an object with static storage
duration strongly happens before a call to [`std::atexit] (see [?libheader cstdlib],
[#support.start.term]), the call to the function passed to [`std::atexit] is
sequenced before the call to the destructor for the object.
[:zh_CN]
如果某个具有静态存储期的对象的初始化的完成，强发生早于对 [`std::atexit]（参见
[?libheader cstdlib]，[#support.start.term]）的某次调用，则对传递给 [`std::atexit]
的函数进行的调用就按顺序早于对该对象的析构函数的调用。

[:en]
If a call to [`std::atexit] strongly happens before the completion of the
initialization of an object with static storage duration, the call to the
destructor for the object is sequenced before the call to the function passed to
[`std::atexit].
[:zh_CN]
如果对 [`std::atexit] 的某次调用，强发生早于某个具有静态存储期的对象的初始化的
完成，则对该对象的析构函数调用就按顺序早于对传递给 [`std::atexit] 的函数所进行的
调用。

[:en]
If a call to [`std::atexit] strongly happens before another call to
[`std::atexit], the call to the function passed to the second [`std::atexit]
call is sequenced before the call to the function passed to the first
[`std::atexit] call.
[:zh_CN]
如果对 [`std::atexit] 的某次调用强发生早于对 [`std::atexit] 的另一次调用，则对
第二次调用 [`std::atexit] 时传递的函数所进行的调用，就按顺序早于对第一次调用
[`std::atexit] 时传递的函数所进行的调用。

[para]
[:en]
If there is a use of a standard library object or function not permitted within
signal handlers ([#support.runtime]) that does not happen before
([#intro.multithread]) completion of destruction of objects with static storage
duration and execution of [`std::atexit] registered functions
([#support.start.term]), the program has undefined behavior.
[:zh_CN]
如果对标准程序库中不允许在信号处理函数（[#support.runtime]）中使用的对象或函数
进行了使用，并且其并非发生早于（[#intro.multithread]）具有静态存储期的对象的
析构的完成，以及用 [`std::atexit] 登记的函数（[#support.start.term]）的执行的
完成，则程序具有未定义的行为。

[begin:note]
[:en]
If there is a use of an object with static storage duration that does not happen
before the object[=']s destruction, the program has undefined behavior.
[:zh_CN]
如果对具有静态存储期的非局部对象的某次使用，并非发生早于该对象的析构，则程序具有
未定义的行为。

[:en]
Terminating every thread before a call to [`std::exit] or the exit from [`main]
is sufficient, but not necessary, to satisfy these requirements.
[:zh_CN]
在调用 [`std::exit] 或者从 [`main] 退出之前终止所有线程，是充分满足这些规定的，
但这不是必须的。

[:en]
These requirements permit thread managers as static-storage-duration objects.
[:zh_CN]
这些规定允许将线程管理器实现为静态存储期的对象。
[end:note]

[para]
[%[`abort]] [%@lib abort]
[:en]
[%termination[!program]]
Calling the function [`std::abort()] declared in [?libheader@ref cstdlib]
terminates the program without executing any destructors and without calling the
functions passed to [`std::atexit()] or [`std::at_quick_exit()].
[:zh_CN]
[%终止[!程序～]]
调用声明于 [?libheader@ref cstdlib] 的函数 [`std::abort()] 终止程序，而不执行
任何析构函数，且不调用传递给 [`std::atexit()] 或 [`std::at_quick_exit()] 的任何
函数。

[%:end#program.termination]
