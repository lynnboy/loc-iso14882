[section#basic.stc.dynamic
    [:en] Dynamic storage duration
    [:zh_CN] 动态存储期
[%:begin#storage.duration.dynamic
    [:en] storage duration [!dynamic]
    [:zh_CN] 存储期 [!动态～] ]
]

[para]
[:en]
Objects can be created dynamically during program execution
([#intro.execution]), using [%[`new]] [~new-expression]s ([#expr.new]), and
destroyed using [%[`delete]] [~delete-expression]s ([#expr.delete]).
[:zh_CN]
在程序执行期间（[#intro.execution]），可以使用 [%[`new]] [~new-表达式]
（[#expr.new]）来动态地创建对象，并使用 [%[`delete]] [~delete-表达式]
（[#expr.delete]）来动态地销毁它。

[:en]
A [=Cpp] implementation provides access to, and management of, dynamic storage
via the global [+allocation functions] [`operator new] and [`operator new`[`]]
and the global [+deallocation functions] [`operator delete] and [`operator
delete`[`]].
[:zh_CN]
[=Cpp] 的实现通过全局[+分配函数] [`operator new] 和 [`operator new`[`]]，以及
全局[+回收函数] [`operator delete] 和 [`operator delete`[`]] 提供对动态存储
的访问和管理。

[begin:note]
[:en]
The non-allocating forms described in [#new.delete.placement] do not perform
allocation or deallocation.
[:zh_CN]
[#new.delete.placement] 中所描述的非分配形式，并不会实施分配或回收操作。
[end:note]

[para]
[:en]
The library provides default definitions for the global allocation and
deallocation functions.
[:zh_CN]
程序库中提供了全局分配和回收函数的缺省定义。

[:en]
Some global allocation and deallocation functions are replaceable
([#new.delete]).
[:zh_CN]
一些全局分配和回收函数是可替换的（[#new.delete]）。

[:en]
A [=Cpp] program shall provide at most one definition of a replaceable
allocation or deallocation function.
[:zh_CN]
[=Cpp] 程序可以为可替换的分配或回收函数提供最多一个定义。

[:en]
Any such function definition replaces the default version provided in the
library ([#replacement.functions]).
[:zh_CN]
这类函数定义将替换掉由程序库所提供的缺省版本（[#replacement.functions]）。

[:en]
The following allocation and deallocation functions ([#support.dynamic]) are
implicitly declared in global scope in each translation unit of a program.
[:zh_CN]
在程序的每个翻译单元的全局作用域中，隐含地声明了下列分配和回收函数
（[#support.dynamic]）。

[codeblock:notation]
[[nodiscard]] void* operator new(std::size_t);
[[nodiscard]] void* operator new(std::size_t, std::align_val_t);

void operator delete(void*) noexcept;
void operator delete(void*, std::size_t) noexcept;
void operator delete(void*, std::align_val_t) noexcept;
void operator delete(void*, std::size_t, std::align_val_t) noexcept;

[[nodiscard]] void* operator new[](std::size_t);
[[nodiscard]] void* operator new[](std::size_t, std::align_val_t);

void operator delete[](void*) noexcept;
void operator delete[](void*, std::size_t) noexcept;
void operator delete[](void*, std::align_val_t) noexcept;
void operator delete[](void*, std::size_t, std::align_val_t) noexcept;
[codeblock:end]

[:en]
These implicit declarations introduce only the function names [`operator new],
[`operator new`[`]], [`operator delete], and [`operator delete`[`]].
[:zh_CN]
这些隐含的声明式仅引入了函数名 [`operator new]，[`operator new`[`]]，
[`operator delete]，和 [`operator delete`[`]]。

[begin:note]
[:en]
The implicit declarations do not introduce the names [`std], [`std::size_t],
[`std::align_val_t], or any other names that the library uses to declare these
names.
[:zh_CN]
这些隐含的声明式并不引入名字 [`std]，[`std::size_t]，[`std::align_val_t]，或其他
任何被程序库用于声明它们的名字。

[:en]
Thus, a [~new-expression], [~delete-expression] or function call that refers to
one of these functions without including the header [?libheader@ref new] is
well-formed.
[:zh_CN]
因此，[~new-表达式]，[~delete-表达式]，或者涉指这些函数之一的函数调用，在未包含
头文件 [?libheader@ref new] 时也是良构的。

[:en]
However, referring to [`std] or [`std::size_t] or [`std::align_val_t] is
ill-formed unless the name has been declared by including the appropriate
header.
[:zh_CN]
然而，除非 [`std] 或 [`std::size_t] 或 [`std::align_val_t] 已经通过包含适当的
头文件而进行了声明，否则提及这个名字就是非良构的。
[end:note]

[:en]
Allocation and/or deallocation functions may also be declared and defined for
any class ([#class.free]).
[:zh_CN]
也可以为任意类声明和定义它的分配和/或回收函数（[#class.free]）。

[para]
[:en]
If the behavior of an allocation or deallocation function does not satisfy the
semantic constraints specified in [#basic.stc.dynamic.allocation] and
[#basic.stc.dynamic.deallocation], the behavior is undefined.
[:zh_CN]
如果某个分配或回收函数的行为不能满足 [#basic.stc.dynamic.allocation] 和
[#basic.stc.dynamic.deallocation] 中所指定的语义约束，则其行为未定义。

[include basic.stc.dynamic.allocation]

[include basic.stc.dynamic.deallocation]

[include basic.stc.dynamic.safety]

[%:end#storage.duration.dynamic]
