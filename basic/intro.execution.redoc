[section#intro.execution
    [:en] Sequential execution
    [:zh_CN] 顺序执行
]

[para]
[:en] An instance of each object with automatic storage duration ([#basic.stc.auto])
is associated with each entry into its block.
[:zh_CN] 每个具有自动存储期（[#basic.stc.auto]）的对象实例都与其所在块的各个入口
相联系。

[:en] Such an object exists and retains its last-stored value during the
execution of the block and while the block is suspended (by a call of a function,
suspension of a coroutine ([#expr.await]), or receipt of a signal).
[:zh_CN] 这些对象将在该语句块的执行期间，以及当该语句块（因调用函数，协程暂停
（[#expr.await]）或接收信号而）暂停时存在，并保持其最近保存的值。

[para]
[:en] A [+constituent expression] is defined as follows:
[:zh_CN] [+成分表达式]的定义如下：

[list]
[item]
[:en] The constituent expression of an expression is that expression.
[:zh_CN] 表达式的成分表达式就是其自身。

[item]
[:en] The constituent expression of a conversion is the corresponding implicit
function call, if any, or the converted expression otherwise.
[:zh_CN] 转换的成分表达式是对应的隐式函数调用（如果有），否则就是经转换表达式。

[item]
[:en] The constituent expressions of a [~braced-init-list] or of a (possibly
parenthesized) [~expression-list] are the constituent expressions of the
elements of the respective list.
[:zh_CN] [~花括号初始化列表]，或（可能带有括号的）[~表达式列表]的成分表达式，是相应列表的
各元素的成分表达式。

[item]
[:en] The constituent expressions of a [~brace-or-equal-initializer] of the form
[`=] [~initializer-clause] are the constituent expressions of the
[~initializer-clause].
[:zh_CN] 形式为“[`=] [~初始化式子句]”的[~花括号或等号初始化式]的成分表达式，是该
[~初始化式子句]的成分表达式。
[list:end]

[begin:example]
[codeblock]
struct A { int x; };
struct B { int y; struct A a; };
B b = { 5, { 1+1 } };
[codeblock:end]

[:en] The constituent expressions of the [~initializer] used for the
initialization of [`b] are [`5] and [`1+1].
[:zh_CN] 用于 [`b] 的初始化的[~初始化式]的成分表达式为 [`5] 和 [`1+1]。
[end:example]

[para]
[:en] The [+immediate subexpressions[%immediate subexpression]] of an expression
[$E] are
[:zh_CN] 表达式 [$E] 的[+直接子表达式]为

[list]
[item]
[:en] the constituent expressions of [$E][=']s operands ([#expr.context]),
[:zh_CN] [$E] 的操作数的成分表达式（[#expr.context]），
[item]
[:en] any function call that [$E] implicitly invokes,
[:zh_CN] 任何 [$E] 所隐含执行的函数调用，

[item]
[:en] if [$E] is a [~lambda-expression] ([#expr.prim.lambda]), the
initialization of the entities captured by copy and the constituent expressions
of the [~initializer] of the [~init-capture]s,
[:zh_CN] 当 [$E] 为 [~lambda-表达式]（[#expr.prim.lambda]）时，其所复制俘获的
各个实体的初始化，以及各个[~带初始化俘获符]的[~初始化式]，

[item]
[:en] if [$E] is a function call ([#expr.call]) or implicitly invokes a function,
the constituent expressions of each default argument ([#dcl.fct.default]) used
in the call, or
[:zh_CN] 当 [$E] 为函数调用（[#expr.call]）或其隐式调用了函数时，该调用中所使用的
各个默认实参（[#dcl.fct.default]）的成分表达式，或者

[item]
[:en] if [$E] creates an aggregate object ([#dcl.init.aggr]), the constituent
expressions of each default member initializer ([#class.mem]) used in the
initialization.
[:zh_CN] 当 [$E] 创建了聚合对象（[#dcl.init.aggr]）时，其初始化中所使用的各个
默认成员初始化式（[#class.mem]）的成分表达式。
[list:end]

[para]
[:en] A [+subexpression] of an expression [$E] is an immediate subexpression of
[$E] or a subexpression of an immediate subexpression of [$E].
[:zh_CN] 表达式 [$E] 的[+子表达式]，是 [$E] 的直接子表达式，或者 [$E] 的
直接子表达式的子表达式。

[begin:note]
[:en] Expressions appearing in the [~compound-statement] of a [~lambda-expression]
are not subexpressions of the [~lambda-expression].
[:zh_CN] 出现于 [~lambda-表达式]的[~复合语句]之中的表达式不是[~lambda-表达式]的子表达式。
[end:note]

[:en] The [+:adj potentially-evaluated[!subexpressions[%subexpression]]] of
an expression, conversion, or [~initializer] [$E] are
[:zh_CN] 表达式，转换，或[~初始化式] [$E] 的[+:adj 潜在求值[!子表达式]]为
[list]
[item]
[:en@~] the constituent expressions of [$E] and
[:zh_CN@~] [$E] 的成分表达式，和
[item]
[:en@~] the subexpressions thereof that are not subexpressions of a nested
unevaluated operand ([#term.unevaluated.operand]).
[:zh_CN@~] 其子表达式，但并非嵌套的免求值操作数（[#term.unevaluated.operand]）
的子表达式。
[list]

[para]
[:en] A [+full-expression] is
[:zh_CN] [+全表达式]为

[list:ul]
[item]
[:en] an unevaluated operand ([#expr.prop]),
[:zh_CN] 免求值操作数（[#expr.prop]），

[item]
[:en] a [~constant-expression] ([#expr.const]),
[:zh_CN] [~常量表达式]（[#expr.const]），

[item]
[:en] an immediate invocation ([#expr.const]),
[:zh_CN] 直接调用（[#expr.const]），

[item]
[:en] an [~init-declarator] ([#dcl.decl]) (including such introduced by a
structure binding([#dcl.struct.bind])) or a [~mem-initializer] ([#class.base.init]),
including the constituent expressions of the initializer,
[:zh_CN] [~带初始化声明符]（[#dcl.decl]）（包括由结构化绑定（[#dcl.struct.bind]）
所引入的）或[~成员初始化式]（[#class.base.init]），包括初始化式的成分表达式，

[item]
[:en] an invocation of a destructor generated at the end of the lifetime of an
object other than a temporary object ([#class.temporary]) whose lifetime has not
been extended, or
[:zh_CN] 对并非临时对象（[#class.temporary]）且其生存期未被扩展的对象，在其
生存期结束时所生成的对析构函数的调用，或者

[item]
[:en] an expression that is not a subexpression of another expression and that
is not otherwise part of a full-expression.
[:zh_CN] 不是其他表达式的子表达式，而且也不是某个全表达式的一部分的表达式。
[list:end]

[:en] If a language construct is defined to produce an implicit call of
a function, a use of the language construct is considered to be an expression
for the purposes of this definition.
[:zh_CN] 若某种语言构造被定义为产生某个函数的隐含调用，则认为该语言构造的使用符合
此条定义的意图。

[:en] Conversions applied to the result of an expression in order to satisfy the
requirements of the language construct in which the expression appears are also
considered to be part of the full-expression.
[:zh_CN] 为了符合某个表达式所在的语言构造的要求，而对该表达式的结果实施的类型转换，
也被当作全表达式的一部分。

[:en] For an initializer, performing the initialization of the entity
(including evaluating default member initializers of an aggregate)
is also considered part of the full-expression.
[:zh_CN] 对于初始化式来说，对实体所进行的初始化（包括对聚合的默认成员初始化式的
求值），也被当作全表达式的一部分。

[begin:example]
[codeblock]
struct S {
  S(int i): I(i) { }            // [:en] full-expression is initialization of [`I] \
                                [:zh_CN] 全表达式是 [`I] 的初始化
  int& v() { return I; }
  ~S() noexcept(false) { }
private:
  int I;
};

S s1(1);                        // [:en] full-expression is call of [`S::S(int)] \
                                [:zh_CN] 全表达式是对 [`S::S(int)] 的调用
void f() {
  S s2 = 2;                     // [:en] full-expression is call of [`S::S(int)] \
                                [:zh_CN] 全表达式是对 [`S::S(int)] 的调用
  if (S(3).v())                 // [:en] full-expression includes lvalue-to-rvalue and [`int] to [`bool] conversions, \
                                [:zh_CN] 全表达式包括左值向右值以及 [`int] 向 [`bool] 的转换，
                                // [:en@~] performed before temporary is deleted at end of full-expression \
                                [:zh_CN@~] 并实施于临时变量在全表达式结尾处被删除之前
  { }
  bool b = noexcept(S(4));      // [:en] exception specification of destructor of [`S] considered for [`:key noexcept] \
                                [:zh_CN] 对于 [`:key noexcept]，考察了 [`S] 的析构函数的异常说明
  // [:en] full-expression is destruction of [`s2] at end of block \
  [:zh_CN] 全表达式为在代码块末尾对 [`s2] 的销毁
}
struct B {
  B(S = S(0));
};
B b[2] = { B(), B() };          // [:en] full-expression is the entire initialization \
                                [:zh_CN] 全表达式为包括临时变量的
                                // [:en@~] including the destruction of temporaries \
                                [:zh_CN@~] 销毁在内的整个初始化
[codeblock:end]
[end:example]

[para]
[begin:note]
[:en] The evaluation of a full-expression can include the evaluation of
subexpressions that are not lexically part of the full-expression.
[:zh_CN] 全表达式的求值可能会包含对并非其语法上的一部分的子表达式所进行的求值。

[:en] For example, subexpressions involved in evaluating default arguments
([#dcl.fct.default]) are considered to be created in the expression that calls
the function, not the expression that defines the default argument.
[:zh_CN] 例如，默认实参（[#dcl.fct.default]）求值时所涉及的子表达式，被认为
产生于进行函数调用的表达式中，而不是定义该默认实参的表达式中。
[end:note]

[%:begin#value.computation
    [:en] value computation
    [:zh_CN] 值计算
]

[para]
[:en] Reading an object designated by a [`:key volatile] glvalue ([#basic.lval]),
modifying an object, calling a library I/O function, or calling a function that
does any of those operations are all [+side effects], which are changes in the
state of the execution environment.
[:zh_CN] 读取由 [`:key volatile] 泛左值（[#basic.lval]）所指代的对象，更改对象，
调用程序库 I/O 函数，或调用含有任何这些操作的函数，都是[+副作用]，它们是执行环境的
状态的变化。

[:en] [+Evaluation[%evaluation]] of an expression (or a subexpression) in general
includes both value computations (including determining the identity of an
object for glvalue evaluation and fetching a value previously assigned to an
object for prvalue evaluation) and initiation of side effects.
[:zh_CN] 表达式（或子表达式）的[+求值]通常既包括值的计算（包括在泛左值求值中
对象实体的确定，以及在纯右值求值中获取对象此前曾被赋予的值），也包括引发副作用。

[:en] When a call to a library I/O function returns or an access through
a volatile glvalue is evaluated, the side effect is considered complete, even
though some external actions implied by the call (such as the I/O itself) or by
the [`:key volatile] access may not have completed yet.
[:zh_CN] 当从对某个程序库 I/O 函数的调用中返回时，或对通过 volatile 泛左值进行的
访问求值时，即认为副作用已经完成，而不管由该调用或该 [`:key volatile] 访问所隐含
的某些外部动作（如 I/O 本身）是否仍未完成。

[para]
[:en] [+Sequenced before[%sequenced before]] is an asymmetric, transitive,
pair-wise relation between evaluations executed by a single thread ([#intro.multithread]),
which induces a partial order among those evaluations.
[:zh_CN] [+按顺序早于]关系是在单个线程（[#intro.multithread]）中执行的求值之间的
非对称的、可传递的对偶关系，它在这些求值之间引入了部分顺序。

[:en] Given any two evaluations [^A] and [^B], if [^A] is sequenced before [^B]
(or, equivalently, [^B] is [+sequenced after] [^A]), then the execution of [^A]
shall precede the execution of [^B].
[:zh_CN] 任意给定两次求值 [^A] 和 [^B]，若 [^A] 按顺序早于 [^B]（或者等价地说，
[^B] [+按顺序晚于] [^A]），则 [^A] 的执行应当在 [^B] 的执行之前进行。

[:en] If [^A] is not sequenced before [^B] and [^B] is not sequenced before [^A],
then [^A] and [^B] are [+unsequenced].
[:zh_CN] 若 [^A] 未按顺序早于 [^B] 且 [^B] 未按顺序早于 [^A]，则 [^A] 和 [^B] 是
[+无顺序的]。

[begin:note]
[:en] The execution of unsequenced evaluations can overlap.
[:zh_CN] 无顺序的求值之间可以重叠执行。
[end:note]

[:en] Evaluations [^A] and [^B] are [+indeterminately sequenced] when either [^A]
is sequenced before [^B] or [^B] is sequenced before [^A], but it is unspecified
which.
[:zh_CN] 当或者 [^A] 按顺序早于 [^B] 或者 [^B] 按顺序早于 [^A]，但未指明是哪个时，
称求值 [^A] 和 [^B] 是[+未定顺序的]。

[begin:note]
[:en] Indeterminately sequenced evaluations cannot overlap, but either can be
executed first.
[:zh_CN] 未定顺序的求值之间不能重叠，但其中任何一个都可以首先执行。
[end:note]

[:en] An expression [^X] is said to be sequenced before an expression [^Y] if
every value computation and every side effect associated with the expression [^X]
is sequenced before every value computation and every side effect associated with
the expression [^Y].
[:zh_CN] 当与表达式 [^X] 关联的所有值计算和所有副作用都按顺序早于与表达式 [^Y]
关联的所有值计算和所有副作用，称表达式 [^X] 按顺序早于表达式 [^Y]。

[para]
[:en] Every [%value computation] value computation and [%side effects] side effect
associated with a full-expression is sequenced before every value computation
and side effect associated with the next full-expression to be evaluated.[#:fn]
[:zh_CN] 与某个全表达式相关联的任何[%值计算]值计算和[%副作用]副作用，都按顺序早于
与下一个求值的全表达式相关联的任何值计算和副作用[#:fn]。

[note:foot]
[:en] As specified in [#class.temporary], after a full-expression is evaluated,
a sequence of zero or more invocations of destructor functions for temporary
objects takes place, usually in reverse order of the construction of each
temporary object.
[:zh_CN] [#class.temporary] 中指出，在全表达式求值之后，执行一系列零个或多个
临时对象的析构函数调用，通常与每个临时对象的构造顺序相反的顺序进行。
[note:end]

[para]
[:en] [%evaluation [!unspecified order of]]
Except where noted, evaluations of operands of individual operators and of
subexpressions of individual expressions are unsequenced.
[:zh_CN] [%求值 [!未指明的～顺序]]
除非明确指明，否则一个运算符的不同操作数的求值之间，以及一个表达式的不同子表达式
的求值之间，是无顺序的。

[begin:note]
[:en] In an expression that is evaluated more than once during the execution of
a program, unsequenced and indeterminately sequenced evaluations of its
subexpressions need not be performed consistently in different evaluations.
[:zh_CN] 对于在程序执行过程中将不止进行一次求值的表达式，若其子表达式的求值若是
无顺序的或未定顺序的，则其不同次的求值不必保持一致。
[end:note]

[:en] The value computations of the operands of an operator are sequenced before
the value computation of the result of the operator.
[:zh_CN] 运算符的各操作数的值计算，均按顺序早于该运算符的结果的值计算。

[:en] The behavior is undefined if
[:zh_CN] 如果
[list]
[item]
[:en@~] a [%side effects] side effect on a memory location ([#intro.memory]) or
[:zh_CN@~] 某个内存位置（[#intro.memory]）上的[%副作用]副作用，或
[item]
[:en@~] starting or ending the lifetime of an object in a memory location
[:zh_CN@~] 开始或结束某个内存位置中对象的生存期，
[list:end]
[:en@~] is unsequenced relative to
[:zh_CN@~] 与
[list]
[item]
[:en@~] another side effect on the same memory location,
[:zh_CN@~] 同一个内存位置上的另一个副作用，
[item]
[:en@~] starting or ending the lifetime of an object occupying storage that
overlaps with the memory location, or
[:zh_CN@~] 开始或结束某个所占据存储与该内存位置重叠的对象的生存期，或
[item]
[:en@~] a value computation using the value of any object in the same memory
location,
[:zh_CN@~] 使用了同一个内存位置中的任何对象的值所进行的值计算，
[list:end]
[:en@~] and the two evaluations are not potentially concurrent ([#intro.multithread]).
[:zh_CN@~] 之间是无顺序的，并且这两个求值之间不是潜在并发的（[#intro.multithread]），
则其行为是未定义的。

[begin:note]
[:en] Starting the lifetime of an object in a memory location can end the
lifetime of objects in other memory locations ([#basic.life]).
[:zh_CN] 开始内存位置中对象的生存期可以结束其他内存位置中对象的生存期（[#basic.life]）。
[end:note]

[begin:note]
[:en] The next subclause imposes similar, but more complex restrictions on
potentially concurrent computations.
[:zh_CN] 下一子条款中，对潜在并发的计算施加了与此类似但更加复杂的限制。
[end:note]

[para:~]
[begin:example]
[codeblock]
void g(int i) {
  i = 7, i++, i++;              // [:en] [`i] becomes [`9] [:zh_CN] [`i] 变为 [`9]

  i = i++ + 1;                  // [:en] the value of [`i] is incremented [:zh_CN] [`i] 的值增加了
  i = i++ + i;                  // [:en] undefined behavior [:zh_CN] 未定义行为
  i = i + 1;                    // [:en] the value of [`i] is incremented [:zh_CN] [`i] 的值增加了

  union U { int x, y; } u;
  (u.x = 1, 0) + (u.y = 2, 0);  // [:en] undefined behavior [:zh_CN] 未定义行为
}
[codeblock:end]
[end:example]

[para]
[:en] When invoking a function (whether or not the function is inline), every
argument expression and the postfix expression designating the called function
are sequenced before every expression or statement in the body of the called
function.
[:zh_CN] 当调用一个函数时（无论函数是否内联），每个实参表达式和代表所调用函数的
后缀表达式，均按顺序早于被调用函数体中的任何表达式或语句。

[:en] For each
[:zh_CN] 对于每个
[list]
[item]
[:en@~] function invocation,
[:zh_CN@~] 函数调用
[item]
[:en@~] evaluation of an [~await-expression] ([#expr.await]), or
[:zh_CN@~] [~await-表达式]（[#expr.await]）的求值，或
[item]
[:en@~] evaluation of a [~throw-expression] ([#expr.throw]),
[:zh_CN@~] [~throw-表达式]（[#expr.throw]）的求值
[list:end]
[:en@~] [^F], each evaluation that does not occur within [^F] but is evaluated
on the same thread and as part of the same signal handler (if any) is either
sequenced before all evaluations that occur within [^F] or sequenced after all
evaluations that occur within [^F];[#:fn]
[:zh_CN@~] [^F]，若求值并非在 [^F] 中发生，但在同一个线程中并作为同一个
信号处理函数的一部分（如果有）进行求值，则其要么按顺序早于 [^F] 中发生的全部求值，
要么按顺序晚于 [^F] 中发生的全部求值[#:fn]；

[note:foot]
[:en] In other words, function executions do not interleave with each other.
[:zh_CN] 换句话说，函数之间不交错执行。
[note:end]

[:en] if [^F] invokes or resumes a coroutine ([#expr.await]), only evaluations
subsequent to the previous suspension (if any) and prior to the next suspension
(if any) are considered to occur within [^F].
[:zh_CN] 如果 [^F] 调用或恢复了某个协程（[#expr.await]），则仅有前一次暂停（如果有）
之后且处于下一次暂停（如果有）之前的求值才被当做在 [^F] 中发生。

[para:~]
[:en] Several contexts in [=Cpp] cause evaluation of a function call, even though
no corresponding function call syntax appears in the translation unit.
[:zh_CN] 在 [=Cpp] 的某些语境中，即使翻译单元中没有出现函数调用的相应语法，也会
导致对函数调用的求值。

[begin:example]
[:en] Evaluation of a [~new-expression] invokes one or more allocation and
constructor functions; see [#expr.new].
[:zh_CN] [~new-表达式]的求值会执行一个或多个分配和构造函数；参见 [#expr.new]。

[:en] For another example, invocation of a conversion function ([#class.conv.fct])
can arise in contexts in which no function call syntax appears.
[:zh_CN] 又例如，在没有函数调用语法的语境中，可能调用类型转换函数（[#class.conv.fct]）。
[end:example]

[:en] The sequencing constraints on the execution of the called function
(as described above) are features of the function calls as evaluated, regardless
of the syntax of the expression that calls the function.
[:zh_CN] 无论进行函数调用的表达式具有何种语法，对被调函数的执行的顺序性规定
（如上所述），都是函数调用的求值的特征。

[%:end#value.computation]

[:en] [%behavior[!on receipt of signal]] [%signal]
[:zh_CN] [%行为[!接收到信号时的～]] [%信号]
[para]
[:en] If a signal handler is executed as a result of a call to the [`std::raise]
function, then the execution of the handler is sequenced after the invocation
of the [`std::raise] function and before its return.
[:zh_CN] 当对 [`std::raise] 函数的调用导致执行了某个信号处理函数时，该处理函数
的执行按顺序晚于对 [`std::raise] 函数的调用，并早于其返回。

[begin:note]
[:en] When a signal is received for another reason, the execution of the signal
handler is usually unsequenced with respect to the rest of the program.
[:zh_CN] 当由于其他原因而接收到信号时，信号处理函数的执行，通常与程序的其余部分
之间是无顺序的。
[end:note]
