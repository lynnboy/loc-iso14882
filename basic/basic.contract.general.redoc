[section#basic.contract.general
    [:en] General
    [:zh_CN] 概述
]

[para]
[:en] [+Contract assertions[%contract assertion]] allow the programmer to specify
properties of the state of the program that are expected to hold at
certain points during execution.
[:zh_CN] [+契约断言]允许程序员指定，程序状态在执行过程中的特定位置预期成立的性质。

[:en] Contract assertions are introduced by [~precondition-specifier]s,
[~postcondition-specifier]s ([#dcl.contract.func]), and
[~assertion-statement]s ([#stmt.contract.assert]).
[:zh_CN] 契约断言由[~前条件说明符]、[~后条件说明符]（[#dcl.contract.func]）和
[~断言语句]（[#stmt.contract.assert]）引入。

[para]
[:en] Each contract assertion has a [+:adj contract-assertion[!predicate]],
which is an expression of type [`bool].
[:zh_CN] 每个契约断言都有一个[+:adj 契约断言[!谓词]]，它是 [`bool] 类型的表达式。

[begin:note]
[:en] The value of the predicate is used to identify program states that are expected.
[:zh_CN] 谓词的值用于识别所预期的程序状态。
[end:note]

[para]
[:en] An invocation of the macro [`va_start] ([#cstdarg.syn]) shall not be
a subexpression of the predicate of a contract assertion, no diagnostic required.
[:zh_CN] 宏 [`va_start]（[#cstdarg.syn]）的调用不能作为契约断言谓词的子表达式，
无须诊断。

[para]
[begin:note]
[:en] Within the predicate of a contract assertion, [~id-expression]s referring to
variables declared outside the contract assertion are [`:key const] ([#expr.prim.id.unqual]),
[`this] is a pointer to [`:key const] ([#expr.prim.this]), and the result object
can be named if a [~result-name-introducer] ([#dcl.contract.res]) has been specified.
[:zh_CN] 在契约断言的谓词之内，指代声明于契约断言之外的变量的[~标识表达式]均为
[`:key const]（[#expr.prim.id.unqual]），[`this] 为 [`:key const] 指针（[#expr.prim.this]），
并且若已经指定了[~结果名引入符]（[#dcl.contract.res]），则也能够指明结果对象。
[end:note]
