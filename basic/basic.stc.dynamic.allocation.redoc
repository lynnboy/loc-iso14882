[section#basic.stc.dynamic.allocation
    [:en] Allocation functions
    [:zh_CN] 分配函数
]

[para]
[:en]
[%function[!allocation]]
An allocation function that is not a class member function shall belong to the
global scope and not have a name with internal linkage.
[:zh_CN]
[%函数[!分配～]]
不是类成员函数的分配函数应当属于全局作用域且没有具有内部连接的名字。

[:en]
The return type shall be [`[`:key void]*].
[:zh_CN]
其返回类型应当为 [`[`:key void]*]。

[:en]
The first parameter shall have type [`std::size_t] ([#support.types]).
[:zh_CN]
其第一个形参应当具有类型 [`std::size_t]（[#support.types]）。

[:en]
The first parameter shall not have an associated default argument
([#dcl.fct.default]).
[:zh_CN]
第一个形参不应当具有关联的默认实参（[#dcl.fct.default]）。

[:en]
The value of the first parameter is interpreted as the requested size of
the allocation.
[:zh_CN]
第一个形参的值被判读为这次分配所请求的大小。

[:en]
An allocation function can be a function template.
[:zh_CN]
分配函数可以是函数模板。

[:en]
Such a template shall declare its return type and first parameter as specified
above (that is, template parameter types shall not be used in the return type
and first parameter type).
[:zh_CN]
此种模板也应当按如上所述声明其返回类型及第一个形参（就是说，不能在返回类型和第一
个形参的类型中使用模板形参类型）。

[:en]
Allocation function templates shall have two or more parameters.
[:zh_CN]
分配函数模板应当具有两个或更多形参。

[para]
[:en]
An allocation function attempts to allocate the requested amount of storage.
[:zh_CN]
分配函数试图分配所请求数量的存储。

[:en]
If it is successful, it returns the address of the start of a block of storage
whose length in bytes is at least as large as the requested size.
[:zh_CN]
如果成功，它返回一块其字节长度至少为所请求大小的存储块的起始地址。

[:en]
The order, contiguity, and initial value of storage allocated by successive
calls to an allocation function are unspecified.
[:zh_CN]
分配函数的相继成功调用所分配的存储，其之间的顺序、连续性以及初始值是未指明的。

[:en]
Even if the size of the space requested is zero, the request can fail.
[:zh_CN]
即使所请求的空间大小为零，该请求也可能失败。

[:en]
If the request succeeds, the value returned by a replaceable allocation function
is a non-null pointer value ([#basic.compound]) [`p0] different from any
previously returned value [`p1], unless that value [`p1] was subsequently passed
to a replaceable deallocation function.
[:zh_CN]
若请求成功，则由可替代分配函数返回的值是不同于任何之前的返回值 [`p1] 的非空
指针值（[#basic.compound]）[`p0]，除非这个 [`p1] 值随后曾被传给某个可替代回收函数。

[:en]
Furthermore, for the library allocation functions in [#new.delete.single] and
[#new.delete.array], [`p0] represents the address of a block of storage disjoint
from the storage for any other object accessible to the caller.
[:zh_CN]
此外，对于 [#new.delete.single] 和 [#new.delete.array] 中的程序库分配函数，[`p0]
应当表示与调用方可以访问的任何其他对象的存储都不相交的存储块的地址。

[:en]
The effect of indirecting through a pointer returned from a request for zero
size is undefined.[#:fn]
[:zh_CN]
对由请求零大小所返回的指针进行间接的后果是未定义的。[#:fn]

[note:foot]
[:en]
The intent is to have [`[`:key operator] [`:key new]()] implementable by calling
[`std::malloc()] or [`std::calloc()], so the rules are substantially the same.
[:zh_CN]
其意图是使 [`[`:key operator] [`:key new]()] 可以通过调用 [`std::malloc()] 或
[`std::calloc()] 来实现，因此它们的规则实质上是相同的。

[:en]
[=Cpp] differs from C in requiring a zero request to return a non-null pointer.
[:zh_CN]
[=Cpp] 与 C 的不同之处在于它要求为零请求返回非空指针。
[note:end]

[para]
[:en]
For an allocation function other than a reserved placement allocation function
([#new.delete.placement]), the pointer returned on a successful call shall
represent the address of storage that is aligned as follows:
[:zh_CN]
对于除了保留的放置式分配函数（[#new.delete.placement]）之外的分配函数，其成功
调用所返回的指针应当表示如下经过恰当对齐的存储的地址：

[list]
[item]
[:en]
If the allocation function takes an argument of type [`std::align_val_t], the
storage will have the alignment specified by the value of this argument.
[:zh_CN]
若分配函数接受一个 [`std::align_val_t] 类型的实参，则该存储将具有由这个实参所
指定的对齐。

[item]
[:en]
Otherwise, if the allocation function is named [`[`:key operator] [`:key new]`[`]],
the storage is aligned for any object that does not have new-extended alignment
([#basic.align]) and is no larger than the requested size.
[:zh_CN]
否则，若分配函数名为 [`[`:key operator] [`:key new]`[`]]，则该存储为针对任意不
具有 new 扩充对齐（[#basic.align]）的对象对齐，且不大于所请求的大小。

[item]
[:en]
Otherwise, the storage is aligned for any object that does not have new-extended
alignment and is of the requested size.
[:zh_CN]
否则，该存储为针对任意不具有 new 扩充对齐的对象对齐，且具有所请求的大小。
[list:end]

[para]
[:en]
An allocation function that fails to allocate storage can invoke the currently
installed new-handler function ([#new.handler]), if any.
[:zh_CN]
分配存储失败的分配函数可以调用当前安装的 new 处理器函数（[#new.handler]）（如果
有）。

[begin:note]
[%[`new_handler]]
[:en]
A program-supplied allocation function can obtain the address of the currently
installed [`new_handler] using the [`std::get_new_handler] function
([#get.new.handler]).
[:zh_CN]
由程序提供的分配函数可以使用 [`std::get_new_handler] 函数（[#get.new.handler]）
获取当前安装的 [`new_handler] 的地址。
[end:note]

[:en]
An allocation function that has a non-throwing exception specification
([#except.spec]) indicates failure by returning a null pointer value.
[:zh_CN]
带有无抛出异常说明（[#except.spec]）的分配函数通过返回空指针值标明分配存储失败。

[:en]
Any other allocation function never returns a null pointer value and indicates
failure only by throwing an exception ([#except.throw]) of a type that would
match a handler ([#except.handle]) of type [`std::bad_alloc] ([#bad.alloc]).
[:zh_CN]
其他任何分配函数永远不会返回空指针值，而只通过抛出能够与 [`std::bad_alloc] 类型
（[#bad.alloc]）的处理器相匹配（[#except.handle]）的异常（[#except.throw]）来
标明失败。

[para]
[:en]
A global allocation function is only called as the result of a new expression
([#expr.new]), or called directly using the function call syntax ([#expr.call]),
or called indirectly to allocate storage for a coroutine state
([#dcl.fct.def.coroutine]), or called indirectly through calls to the functions
in the [=Cpp] standard library.
[:zh_CN]
全局分配函数只能由 new 表达式（[#expr.new]）来调用，或以函数调用语法
（[#expr.call]）直接进行调用，或为协程状态分配存储（[#dcl.fct.def.coroutine]）
间接进行调用，或通过调用 [=Cpp] 标准程序库中的函数间接进行调用。

[begin:note]
[:en]
In particular, a global allocation function is not called to allocate storage
for objects with static storage duration ([#basic.stc.static]), for objects or
references with thread storage duration ([#basic.stc.thread]), for objects of
type [`std::type_info] ([#expr.typeid]), or for an exception object
([#except.throw]).
[:zh_CN]
特别地，不能调用全局分配函数来为具有静态存储期（[#basic.stc.static]）的对象，
具有线程存储期（[#basic.stc.thread]）的对象或引用，[`std::type_info] 类型
（[#expr.typeid]）的对象，或异常对象（[#except.throw]）分配存储。
[end:note]
