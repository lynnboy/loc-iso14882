[section#intro.object
    [:en] Object model
    [:zh_CN] 对象模型
]

[%:begin#object.model
    [:en] object model
    [:zh_CN] 对象模型
]

[para]
[:en]
The constructs in a [=Cpp] program create, destroy, refer to, access, and
manipulate objects.
[:zh_CN]
[=Cpp] 程序中的各种语言构造，创建、销毁、涉指、访问并操作对象。

[:en]
An [+object] is created by a definition ([#basic.def]), by a [~new-expression]
([#expr.new]), by an operation that implicitly creates objects (see below), when
implicitly changing the active member of a union ([#class.union]), or when a
temporary object is created ([#conv.rval], [#class.temporary]).
[:zh_CN]
[+对象]是通过定义式（[#basic.def]），通过 [~new-表达式]（[#expr.new]），通过隐式
创建对象的操作（见下文），当改变联合体的活跃成员（[#class.union]）时，或者当创建
临时对象（[#conv.rval]，[#class.temporary]）时创建的。

[:en]
An object occupies a region of storage in its period of construction
([#class.cdtor]), throughout its lifetime ([#basic.life]), and in its period of
destruction ([#class.cdtor]).
[:zh_CN]
在对象的创建期间（[#class.cdtor]），其整个生存期期间（[#basic.life]），以及其
销毁期间（[#class.cdtor]），对象占据一块存储区域。

[begin:note]
[:en]
A function is not an object, regardless of whether or not it occupies storage
in the way that objects do.
[:zh_CN]
无论是否像对象那样占据存储，函数都不是对象。
[end:note]

[:en]
The properties of an object are determined when the object is created.
[:zh_CN]
对象创建时确定了该对象的各种属性。

[:en]
An object can have a name ([#basic.pre]).
[:zh_CN]
对象可以有名字（[#basic.pre]）。

[:en]
An object has a storage duration ([#basic.stc]) which influences its lifetime
([#basic.life]).
[:zh_CN]
对象具有存储期（[#basic.stc]），并影响它的生存期（[#basic.life]）。

[:en]
An object has a type ([#basic.types]).
[:zh_CN]
对象具有一个类型（[#basic.types]）。

[:en]
Some objects are polymorphic ([#class.virtual]);
[:zh_CN]
一些对象是多态的（[#class.virtual]）；

[:en@~]
the implementation generates information associated with each such object that
makes it possible to determine that object[=']s type during program execution.
[:zh_CN@~]
实现为每个这种对象生成与其关联的信息，以便在程序运行时能够判定该对象的类型。

[:en]
For other objects, the interpretation of the values found therein is determined
by the type of the [~expression]s ([#expr.compound]) used to access them.
[:zh_CN]
对于其他对象，如何判读其中的值是根据用于访问它们的[~表达式]（[#expr.compound]）
的类型来决定的。

[para]
[:en]
[%subobject]
Objects can contain other objects, called [+subobjects [%subobject]].
[:zh_CN]
[%子对象]
对象可以包含其他对象，它们被称为[+子对象]。

[:en]
A subobject can be a [+member subobject] ([#class.mem]),
a [+base class subobject] ([#class.derived]), or an array element.
[:zh_CN]
子对象可以是[+成员子对象]（[#class.mem]），[+基类子对象]（[#class.derived]），
或数组元素。

[:en]
[%object [!complete]]
An object that is not a subobject of any other object is called a
[+complete object].
[:zh_CN]
[%对象 [!完整～]]
不是任何其他对象的子对象的对象被称为[+完整对象]。

[:en]
If an object is created in storage associated with a member subobject or array
element [^e] (which may or may not be within its lifetime), the created object
is a subobject of [^e][=']s containing object if:
[:zh_CN]
如果对象是创建在同某个成员子对象或数组元素 [^e]（其可能处于或可能不处于生存期
之中）所关联的存储之中的，则以下情况下所创建的对象是包含 [^e] 的对象的子对象：

[list]
[item]
[:en] the lifetime of [^e][=']s containing object has begun and not ended, and
[:zh_CN] 包含 [^e] 的对象的生存期已开始且未结束，并且
[item]
[:en] the storage for the new object exactly overlays the storage location
associated with [^e], and
[:zh_CN] 新对象的存储和 [^e] 所关联的存储位置严格重合，并且
[item]
[:en] the new object is of the same type as [^e] (ignoring cv-qualification).
[:zh_CN] 新对象具有和 [^e] 相同的类型（忽略 cv 限定）。
[list:end]

[para]
[:en]
[%object[!providing storage for]]
If a complete object is created ([#expr.new]) in storage associated with another
object [^e] of type [=lq]array of [$N] [`unsigned char][=rq] or of type
[=lq]array of [$N] [`std::byte][=rq] ([#cstddef.syn]), that array
[+provides storage] for the created object if:
[:zh_CN]
[%对象[!为～提供存储]]
如果一个完整对象是创建在另一个类型为“[`unsigned char] 的 [$N] 元素数组”或类型为
“[`std::byte] 的 [$N] 元素数组”（[#cstddef.syn]）的对象 [^e] 所关联的存储之中，
则以下情况下称这个数组为所创建的对象[+提供存储]：

[list]
[item]
[:en] the lifetime of [^e] has begun and not ended, and
[:zh_CN] [^e] 的生存期已开始且未结束，并且
[item]
[:en] the storage for the new object fits entirely within [^e], and
[:zh_CN] 新对象的存储完全置于 [^e] 之中，并且
[item]
[:en] there is no smaller array object that satisfies these constraints.
[:zh_CN] 不存在满足这些约束的更小的数组对象。
[list:end]

[begin:note]
[:en]
If that portion of the array previously provided storage for another object, the
lifetime of that object ends because its storage was reused ([#basic.life]).
[:zh_CN]
如果数组的这个部分曾经为另一个对象提供存储，则那个对象的生存期结束，因为其存储
已经被重用了（[#basic.life]）。
[end:note]

[begin:example]
[codeblock]
template<typename ...T>
struct AlignedUnion {
  alignas(T...) unsigned char data[max(sizeof(T)...)];
};
int f() {
  AlignedUnion<int, char> au;
  int *p = new (au.data) int;           // [:en] OK, [`au.data] provides storage \
                                           [:zh_CN] OK，[`au.data] 提供存储
  char *c = new (au.data) char();       // [:en] OK, ends lifetime of [`*p] \
                                           [:zh_CN] OK，[`*p] 的生存期结束
  char *d = new (au.data + 1) char();
  return *c + *d;                       // OK
}

struct A { unsigned char a[32]; };
struct B { unsigned char b[16]; };
A a;
B *b = new (a.a + 8) B;                 // [:en] [`a.a] provides storage for [`*b] \
                                           [:zh_CN] [`a.a] 为 [`*b] 提供存储
int *p = new (b->b + 4) int;            // [:en] [`b->b] provides storage for [`*p] \
                                           [:zh_CN] [`b->b] 为 [`*p] 提供存储
                                        // [:en] [`a.a] does not provide storage for [`*p] (directly), \
                                           [:zh_CN] [`a.a] 并不（直接）为 [`*p] 提供存储，
                                        // [:en@~] but [`*p] is nested within [`a] (see below) \
                                           [:zh_CN@~] 但 [`*p] 嵌套于 [`a] 之中（见下文）
[codeblock:end]
[end:example]

[para]
[:en]
[%object[!nested within]]
An object [^a] is [+nested within] another object [^b] if:
[:zh_CN]
[%对象[!嵌套于～之中]]
以下情况称对象 [^a] [+嵌套于[%嵌套于～之中]]另一个对象 [^b] 之中：

[list]
[item]
[:en] [^a] is a subobject of [^b], or
[:zh_CN] [^a] 是 [^b] 的子对象，或者
[item]
[:en] [^b] provides storage for [^a], or
[:zh_CN] [^b] 为 [^a] 提供存储，或者
[item]
[:en] there exists an object [^c] where [^a] is nested within [^c], and [^c] is
nested within [^b].
[:zh_CN] 存在某个对象 [^c]，使得 [^a] 嵌套于 [^c] 之中，而 [^c] 嵌套于 [^b] 之中。
[list:end]

[para]
[:en]
For every object [`x], there is some object called the [+complete object of]
[`x], determined as follows:
[:zh_CN]
对于任意对象 [`x]，都存在被称为 [`x] [+的完整对象[%～的完整对象]]的对象，判定
如下：

[list]
[item]
[:en]
If [`x] is a complete object, then the complete object of [`x] is itself.
[:zh_CN]
如果 [`x] 是完整对象，则 [`x] 的完整对象就是其自身。

[item]
[:en]
Otherwise, the complete object of [`x] is the complete object of the (unique)
object that contains [`x].
[:zh_CN]
否则，[`x] 的完整对象是包含 [`x] 的（唯一）对象的完整对象。
[list:end]

[para]
[:en]
If a complete object, a data member ([#class.mem]), or an array element is of
class type, its type is considered the [+most derived class], to distinguish it
from the class type of any base class subobject;
[:zh_CN]
如果完整对象、数据成员（[#class.mem]）或数组元素具有类类型，那么它的类型被称为
[+全派生类]，以区别于任何基类子对象的类类型；

[:en@~]
an object of a most derived class type or of a non-class type is called a
[+most derived object].
[:zh_CN@~]
全派生类类型的，或非类类型的对象被称为[+全派生对象]。

[para]
[:en]
A [+potentially-overlapping subobject] is either:
[:zh_CN]
[+潜在重叠的子对象]是：

[list]
[item]
[:en@~] a base class subobject, or
[:zh_CN@~] 基类子对象，或者
[item]
[:en@~] a non-static data member declared with the [`no_unique_address]
attribute ([#dcl.attr.nouniqueaddr]).
[:zh_CN@~] 以 [`no_unique_address] 特性标注（[#dcl.attr.nouniqueaddr]）所声明的
非静态数据成员。
[list:end]

[para]
[:en]
[%object[!zero size]]
[%object[!nonzero size]]
An object has nonzero size if it
[:zh_CN]
[%对象[!零大小]]
[%对象[!非零大小]]
以下情况下对象具有非零大小

[list]
[item]
[:en] is not a potentially-overlapping subobject, or
[:zh_CN] 它并非潜在重叠子对象，或者
[item]
[:en] is not of class type, or
[:zh_CN] 它不具有类类型，或者
[item]
[:en] is of a class type with virtual member functions or virtual base classes,
or
[:zh_CN] 它具有带有虚成员函数或虚基类的类类型，或者
[item]
[:en] has subobjects of nonzero size or bit-fields of nonzero length.
[:zh_CN] 它具有非零大小的子对象或非零长位字段。
[list:end]

[:en]
Otherwise, if the object is a base class subobject of a standard-layout class
type with no non-static data members, it has zero size.
[:zh_CN]
否则，如果该对象是某个没有非静态数据成员的标准布局类类型的基类子对象，则它大小为
零。

[:en]
Otherwise, the circumstances under which the object has zero size are
[?impldef which non-standard-layout objects containing no data are considered
empty].
[:zh_CN]
否则，在何种情况下对象大小为零是[?impldef 哪些不包含数据的非标准布局对象被当成
为空]。

[:en]
[%most derived object[!bit-field]]
Unless it is a bit-field ([#class.bit]), an object with nonzero size shall
occupy one or more bytes of storage, including every byte that is occupied in
full or in part by any of its subobjects.
[:zh_CN]
[%全派生对象[!位字段]]
除非作为位字段（[#class.bit]），否则具有非零大小的对象都应当占据一个或更多字节的
存储，包括由它的任何子对象所全部或部分占据的各个字节。

[:en]
An object of trivially copyable or standard-layout type ([#basic.types]) shall
occupy contiguous bytes of storage.
[:zh_CN]
可平凡复制的或标准布局类型（[#basic.types]）的对象应该占据连续字节的存储。

[para]
[:en]
[% most derived object [! bit-field]]
[% most derived object [! zero size subobject]]
Unless an object is a bit-field or a subobject of zero size, the address of that
object is the address of the first byte it occupies.
[:zh_CN]
[% 全派生对象 [! 位字段]]
[% 全派生对象 [! 零大小子对象]]
除非某个对象是位字段或者是零大小的子对象，否则该对象的地址就是它所占据的第一个
字节的地址。

[:en]
Two objects with overlapping lifetimes that are not bit-fields may have the same
address if one is nested within the other, or if at least one is a subobject of
zero size and they are of different types;
[:zh_CN]
对于不是位字段的两个生存期重叠的对象，若其中之一嵌套于另一个之中，或者若其中至少
有一个是大小为零的子对象而它们类型不同，则它们可以具有相同的地址；

[:en@~]
otherwise, they have distinct addresses and occupy disjoint bytes of storage.
[#:note#fn:$1]
[:zh_CN@~]
否则，它们具有各自独立的地址并占据不想交的字节存储。[#:note#fn:$1]

[note:foot#fn:$1]
[:en]
Under the [=lq]as-if[=rq] rule an implementation is allowed to store two objects
at the same machine address or not store an object at all if the program cannot
observe the difference ([#intro.execution]).
[:zh_CN]
根据“如同”规则，如果程序无法察觉其区别，那就允许实现将两个对象存储到同一个机器
地址，或者并不真正存储某个对象（[#intro.execution]）。
[note:end]

[begin:example]
[codeblock]
static const char test1 = 'x';
static const char test2 = 'x';
const bool b = &test1 != &test2;        // [:en] always [`true] \
                                           [:zh_CN] 永远为 [`true]
[codeblock:end]
[end:example]

[:en]
The address of a non-bit-field subobject of zero size is the address of an
unspecified byte of storage occupied by the complete object of that subobject.
[:zh_CN]
大小为零的非位字段子对象的地址，是该子对象所在完整对象所占据的某个未指明的字节
存储的地址。

[para]
[:en]
Some operations are described as [+implicitly creating objects[%object[!implicit
creation]]] within a specified region of storage.
[:zh_CN]
一些操作被称为在指定的存储区域中[+隐式创建对象[%对象[!隐式创建]]]。

[:en]
For each operation that is specified as implicitly creating objects, that
operation implicitly creates and starts the lifetime of zero or more objects of
implicit-lifetime types ([#basic.types]) in its specified region of storage
if doing so would result in the program having defined behavior.
[:zh_CN]
对于每个被指定为隐式创建对象的操作，该操作会在其指定存储区域中隐式创建并开始具有
隐式生存期类型（[#basic.types]）的零个或更多对象，只要这样做将导致程序具有有定义
的行为。

[:en]
If no such set of objects would give the program defined behavior,
the behavior of the program is undefined.
[:zh_CN]
如果不存在这样一组会带给程序有定义的行为的对象，则程序的行为未定义。

[:en]
If multiple such sets of objects would give the program defined behavior,
it is unspecified which such set of objects is created.
[:zh_CN]
如果有多组这种会带给程序有定义行为的对象，则未指明创建哪一组这种对象。

[begin:note]
[:en]
Such operations do not start the lifetimes of subobjects of such objects
that are not themselves of implicit-lifetime types.
[:zh_CN]
这种操作并不会使这种对象中自身并非隐式生存期类型的子对象的生存期开始。
[end:note]

[para]
[:en]
Further, after implicitly creating objects within a specified region of storage,
some operations are described as producing a pointer to a
[+:adj suitable created object[%suitable created[!object]]].
[:zh_CN]
此外，在指定存储区域中隐式创建对象之后，一些操作被描述为产生指向
[+:adj 适当创建的对象[%适当创建的[!对象]]]的指针。

[:en]
These operations select one of the implicitly-created objects
whose address is the address of the start of the region of storage,
and produce a pointer value that points to that object,
if that value would result in the program having defined behavior.
[:zh_CN]
这些操作选择被隐式创建的对象中其地址为存储区域的起始地址的一个对象，并产生指向
该对象的一个指针值，但要该值会导致程序具有有定义的行为。

[:en]
If no such pointer value would give the program defined behavior,
the behavior of the program is undefined.
[:zh_CN]
如果没有这种可以带给程序有定义的行为的指针值，则程序的行为未定义。

[:en]
If multiple such pointer values would give the program defined behavior,
it is unspecified which such pointer value is produced.
[:zh_CN]
如果有多格这种会带给程序有定义行为的对象，则未指明产生哪一格这种指针值。

[para]
[begin:example]
[codeblock]
#include <cstdlib>
struct X { int a, b; };
X *make_x() {
  // [:en] The call to [`std::malloc] implicitly creates an object of type [`X] \
  [:zh_CN] 对 [`std::malloc] 的调用隐式创建了一个 [`X] 类型的对象
  // [:en@~] and its subobjects [`a] and [`b], and returns a pointer to that [`X] object \
  [:zh_CN@~] 及其子对象 [`a] 和 [`b]，并返回指向该 [`X] 对象
  // [:en@~] (or an object that is pointer-interconvertible ([#basic.compound]) with it), \
  [:zh_CN@~] （或一个与之指针可相互转换（[#basic.compound]）的对象）的指针，
  // [:en@~] in order to give the subsequent class member access operations \
  [:zh_CN@~] 以便带给随后的类成员访问操作
  // [:en@~] defined behavior. \
  [:zh_CN@~] 有定义的行为。
  X *p = (X*)std::malloc(sizeof(struct X));
  p->a = 1;
  p->b = 2;
  return p;
}
[codeblock:end]
[end:example]

[para]
[:en]
An operation that begins the lifetime of an array of [`char], [`unsigned char],
or [`std::byte] implicitly creates objects within the region of storage occupied
by the array.
[:zh_CN]
开始 [`char]、[`unsigned char] 或 [`std::byte] 的数组的生存期的操作，在由该数组
所占据的存储区域中隐式创建对象。

[begin:note]
[:en]
The array object provides storage for these objects.
[:zh_CN]
此数组对象为这些对象提供存储。
[end:note]

[:en]
Any implicit or explicit invocation of a function named [`operator new] or
[`operator new`[`]] implicitly creates objects in the returned region of storage
and returns a pointer to a suitable created object.
[:zh_CN]
任何对名为 [`operator new] 或 [`operator new`[`]] 的函数的隐式或显示的调用，都
在其所返回的存储区域中隐式创建对象并返回适当创建的对象的指针。

[begin:note]
[:en]
Some functions in the C++ standard library implicitly create objects
([#allocator.traits.members], [#c.malloc], [#cstring.syn], [#bit.cast]).
[:zh_CN]
C++ 标准程序库中的一些函数会隐式创建对象
（[#allocator.traits.members]，[#c.malloc]，[#cstring.syn]，[#bit.cast]）。
[end:note]

[%:end#object.model]
