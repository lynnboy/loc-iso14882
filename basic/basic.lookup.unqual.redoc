[section#basic.lookup.unqual
    [:en] Unqualified name lookup
    [:zh_CN] 无限定名查找
]

[:en]
[%name[!unqualified]]
[:zh_CN]
[%名字[!无限定～]]

[para]
[:en]
A [~using-directive] is [+:% active] in a scope [$S] at a program point [$P] if
it precedes [$P] and inhabits either [$S] or the scope of a namespace nominated
by a [~using-directive] that is active in [$S] at [$P].
[:zh_CN]
如果某条 [~using-指令]先于程序位置点 [$P]，且要么居于作用域 [$S]，要么居于在 [$P]
点于 [$S] 中起效的某条 [~using-指令]所提名的命名空间的作用域，则它在 [$P] 点于
[$S] 中[+:% 起效]。

[begin:note]
[:en]
A [~using-directive] is exported if and only if it appears in a header unit.
[:zh_CN]
当且仅当 [~using-指令]出现于头文件单元中时，它被导出。
[end:note]

[para]
[:en]
An [+:% unqualified search] in a scope [$S] from a program point [$P]
includes the results of searches from [$P] in
[:zh_CN]
从程序位置点 [$P] 在作用域 [$S] 中进行[+:% 无限定搜索]，包含从 [$P] 在以下作用域
中搜索的结果：

[list]
[item]
[:en@~]
[$S], and
[:zh_CN@~]
[$S]，以及
[item]
[:en@~]
for any scope [$U] that contains [$P] and is or is contained by [$S],
each namespace contained by [$S] that is nominated by
a [~using-directive] that is active in [$U] at [$P].
[:zh_CN@~]
对于包含 [$P] 且是 [$S] 或是被其包含的任何作用域 [$U]，有由在 [$P] 处于 [$U] 中
起效的 [~using-指令]所提名的每个 [$S] 所包含的命名空间。
[list:end]

[:en]
If no declarations are found, the results of the unqualified search are the
results of an unqualified search in the parent scope of [$S], if any, from [$P].
[:zh_CN]
如果未找到任何声明式，则无限定搜索的结果为从 [$P] 在 [$S] 的父作用域（如果有）中
进行无限定搜索的结果。

[begin:note]
[:en]
When a class scope is searched, the scopes of its base classes are also searched
([#class.member.lookup]).
[:zh_CN]
搜索类作用域时，还会搜索其各基类的作用域（[#class.member.lookup]）。

[:en]
If it inherits from a single base, it is as if the scope of the base immediately
contains the scope of the derived class.
[:zh_CN]
若它继承于单个基类，则如同基类的作用域直接包含派生类的作用域一样。

[:en]
Template parameter scopes that are associated with one scope in the chain of
parents are also considered ([#temp.local]).
[:zh_CN]
与父作用域链条中的某个作用域相关联的模板形参作用域也会被考察（[#temp.local]）。
[end:note]

[para]
[:en]
[+Unqualified name lookup[%lookup[!unqualified name]]]
from a program point performs an unqualified search in its immediate scope.
[:zh_CN]
从某个程序位置点进行的[+无限定名查找[%查找[!无限定名]]]，在其直接作用域中实施
无限定搜索。

[para]
[:en]
An [+:adj unqualified[!name]] is a name that does not follow
a [~nested-name-specifier] or the [`.] or [`->] in a class member access
expression ([#expr.ref]), possibly after a [`:key template] keyword or [`~].
[:zh_CN]
[+:adj 无限定[!名字]]是并不跟随于[~嵌套名说明符]或者类成员访问表达式中的 [`.] 或
[`->]（[#expr.ref]）之后，可能处于 [`:key template] 关键字或 [`~] 之后的名字。

[:en]
Unless otherwise specified, such a name undergoes unqualified name lookup from
the point where it appears.
[:zh_CN]
除非另有规定，这种名字都遵循从其出现之处进行的无限定名字查找。

[para]
[:en]
An unqualified name that is a component name ([#expr.prim.id.unqual]) of
a [~type-specifier] or [~ptr-operator] of a [~conversion-type-id] is looked up
in the same fashion as the [~conversion-function-id] in which it appears.
[:zh_CN]
作为[~转换类型标识]的[~类型说明符]或[~指针声明符]的成分名（[#expr.prim.id.unqual]）
的无限定名，以其所出现的[~转换函数标识]相同的方式查找。

[:en]
If that lookup finds nothing, it undergoes unqualified name lookup; in each case,
only names that denote types or templates whose specializations are types are
considered.
[:zh_CN]
如果这种查找未找到任何东西，则它要进行无限定名查找；任何情况中，都只考察代表类型
或特例为类型的模板的名字。

[begin:example]
[codeblock]
struct T1 { struct U { int i; }; };
struct T2 { };
struct U1 {};
struct U2 {};

struct B {
  using T = T1;
  using U = U1;
  operator U1 T1::*();
  operator U1 T2::*();
  operator U2 T1::*();
  operator U2 T2::*();
};

template<class X, class T>
int g() {
  using U = U2;
  X().operator U T::*();                // [:en] #1, searches for [`T] in the scope of [`X] first \
                                        [:zh_CN] #1，首先在 [`X] 的作用域中搜索 [`T]
  X().operator U decltype(T())::*();    // #2
  return 0;
}
int x = g<B, T2>();                     // [:en] #1 calls [`B::operator U1 T1::*] \
                                        [:zh_CN] #1 调用 [`B::operator U1 T1::*]
                                        // [:en] #2 calls [`B::operator U1 T2::*] \
                                        [:zh_CN] #2 调用 [`B::operator U1 T2::*]
[codeblock:end]
[end:example]

[para]
[:en]
In a friend declaration [~declarator] whose [~declarator-id] is a [~qualified-id]
whose lookup context ([#basic.lookup.qual]) is a class or namespace [$S], lookup
for an unqualified name that appears after the [~declarator-id] performs a
search in the scope associated with [$S].
[:zh_CN]
在友元声明式的[~声明符]中，若其[~声明符标识]是一个查找语境（[#basic.lookup.qual]）
为类或命名空间 [$S] 的[~限定标识]，对出现于该[~声明符标识]之后的无限定名的查找
在与 [$S] 关联的作用域中进行搜索。

[:en]
If that lookup finds nothing, it undergoes unqualified name lookup.
[:zh_CN]
如果这种查找未找到任何东西，则它要进行无限定名查找。

[begin:example]
[codeblock]
using I = int;
using D = double;
namespace A {
  inline namespace N {using C = char; }
  using F = float;
  void f(I);
  void f(D);
  void f(C);
  void f(F);
}
struct X0 {using F = float; };
struct W {
  using D = void;
  struct X : X0 {
    void g(I);
    void g(::D);
    void g(F);
  };
};
namespace B {
  typedef short I, F;
  class Y {
    friend void A::f(I);        // [:en] error: no [`void A::f(short)] \
                                [:zh_CN] 错误：没有 [`void A::f(short)]
    friend void A::f(D);        // OK
    friend void A::f(C);        // [:en] error: [`A::N::C] not found \
                                [:zh_CN] 错误：未找到 [`A::N::C]
    friend void A::f(F);        // OK
    friend void W::X::g(I);     // [:en] error: no [`void X::g(short)] \
                                [:zh_CN] 错误：没有 [`void X::g(short)]
    friend void W::X::g(D);     // OK
    friend void W::X::g(F);     // OK
  };
}
[codeblock:end]
[end:example]
