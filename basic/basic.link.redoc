[section#basic.link
    [:en] Program and linkage
    [:zh_CN] 程序与连接
[%:begin#linkage
    [:en] linkage
    [:zh_CN] 连接 ]
]

[para]
[:en]
[%program]
A [+program] consists of one or more translation units ([#lex]) linked together.
[:zh_CN]
[%程序]
[+程序]由一个或多个被连接起来的翻译单元（[#lex]）构成。

[:en]
A translation unit consists of a sequence of declarations.
[:zh_CN]
翻译单元由一系列的声明式构成。

[syntax]
[rule translation-unit [:zh_CN] 翻译单元 ]
    [| [~:opt top-level-declaration-seq] ]
    [| [~:opt global-module-fragment] module-declaration [~:opt top-level-declaration-seq]
        [~:opt private-module-fragment] ]
[rule:end]

[rule private-module-fragment [:zh_CN] 私有模块分段 ]
    [| [`module] [`:] [`private] [`;] [~:opt top-level-declaration-seq] ]
[rule:end]

[rule top-level-declaration-seq [:zh_CN] 顶层声明式序列 ]
    [| top-level-declaration ]
    [| top-level-declaration-seq top-level-declaration ]
[rule:end]

[rule top-level-declaration [:zh_CN] 顶层声明式 ]
    [| module-import-declaration ]
    [| declaration ]
[rule:end]
[syntax:end]

[para]
[:en]
A [~private-module-fragment] shall appear only in a primary module interface
unit ([#module.unit]).
[:zh_CN]
[~私有模块分段]只能出现在主模块接口单元（[#module.unit]）中。

[:en]
A module unit with a [~private-module-fragment] shall be the only module unit
of its module; no diagnostic is required.
[:zh_CN]
带有[~私有模块分段]的模块单元应当是其模块的唯一模块单元；无须诊断。

[para]
[:en]
A token sequence beginning with [`:opt export] [`module] or
[`:opt export] [`import] and not immediately followed by [`::] is never
interpreted as the [~declaration] of a [~top-level-declaration].
[:zh_CN]
以“[`:opt export] [`module]”或“[`:opt export] [`import]”开头且后面未紧跟 [`::]
的记号序列，不会被解释为[~顶层声明式]的[~声明式]。

[para]
[:en]
[%linkage] [%translation unit] [%linkage[!internal]] [%linkage[!external]]
A name is said to have [+linkage] when it might denote the same object,
reference, function, type, template, namespace or value as a name introduced by
a declaration in another scope:
[:zh_CN]
[%连接] [%翻译单元] [%连接[!内部～]] [%连接[!外部～]]
当某个名字能够与在另一个作用域中由某个声明式引入的名字代表同一个对象、引用、函数
、类型、模板、命名空间或值时，就称其是有[+连接]的：

[list]
[item]
[:en]
When a name has [%linkage[!external]][+external linkage], the entity it denotes
can be referred to by names from scopes of other translation units or from other
scopes of the same translation unit.
[:zh_CN]
若某个名字具有[%连接[!外部～]][+外部连接]，则其所代表的实体可以用其他翻译单元中
的作用域，或相同翻译单元中的其他作用域中的名字来代表。

[item]
[:en]
When a name has [+module linkage[%linkage[!module]]], the entity it denotes can
be referred to by names from other scopes of the same module unit
([#module.unit]) or from scopes of other module units of that same module.
[:zh_CN]
若某个名字具有[+模块连接[%连接[!模块～]]]，则其所代表的实体可以用相同模块单元的
其他作用域，或相同模块的其他模块单元的作用域中的名字来代表。

[item]
[:en]
When a name has [%linkage[!internal]][+internal linkage], the entity it denotes
can be referred to by names from other scopes in the same translation unit.
[:zh_CN]
若某个名字具有[%连接[!内部～]][+内部连接]，则其所代表的实体可以用相同翻译单元中
的其他作用域中的名字来代表。

[item]
[:en]
When a name has [%linkage[!no]][+no linkage], the entity it denotes cannot be
referred to by names from other scopes.
[:zh_CN]
若某个名字为[%连接[!无～]][+无连接]，则其所代表的实体就不能用其他作用域中的名字
来代表。
[list:end]

[para]
[:en]
[%linkage[![`static] and]] [%[`static][!linkage of]]
[%linkage[![`const] and]] [%[`const][!linkage of]]
[%linkage[![`inline] and]] [%[`inline][!linkage of]]
A name having namespace scope ([#basic.scope.namespace]) has internal linkage if
it is the name of
[:zh_CN]
[%连接[![`static] 与～]] [%[`static][!～的连接]]
[%连接[![`const] 与～]] [%[`const][!～的连接]]
[%连接[![`inline] 与～]] [%[`inline][!～的连接]]
如下情况下，具有命名空间作用域（[#basic.scope.namespace]）的名字具有内部连接

[list]
[item]
[:en@~]
a variable, variable template, function, or function template that is explicitly
declared [`static]; or,
[:zh_CN@~]
被明确声明为 [`static] 的变量、变量模板、函数或函数模板；或者

[item]
[:en@~]
a non-template variable of non-volatile const-qualified type, unless
[:zh_CN@~]
非 volatile 的 const 限定的类型的非模板变量，排除以下情况：
[list]
[item]
[:en@~] it is explicitly declared [`extern], or
[:zh_CN@~] 它被显式声明为 [`extern]，或
[item]
[:en@~] it is inline or exported, or
[:zh_CN@~] 它被内联或被导出，或
[item]
[:en@~] it was previously declared and the prior declaration did not have
internal linkage; or
[:zh_CN@~] 它之前已被声明且其之前的声明式并不具有内部连接；或者
[list:end]

[item]
[:en@~]
a data member of an anonymous union.
[:zh_CN@~]
匿名联合的数据成员。
[list:end]

[enter:note]
[:en]
An instantiated variable template that has const-qualified type can have
external or module linkage, even if not declared [`extern].
[:zh_CN]
具有 const 限定的类型的已实例化的变量模板，即使未被声明为 [`extern] 也可以具有
外部或模块连接。
[exit:note]

[para]
[:en]
An unnamed namespace or a namespace declared directly or indirectly within an
unnamed namespace has internal linkage.
[:zh_CN]
无名命名空间，或者直接或间接声明于无名命名空间中的命名空间具有内部连接。

[:en]
All other namespaces have external linkage.
[:zh_CN]
其他任何命名空间均具有外部连接。

[:en]
A name having namespace scope that has not been given internal linkage above and
that is the name of
[:zh_CN]
具有命名空间作用域的名字，尚未被以上述方式给定内部连接，若它是下列各项之一的
名字：

[list]
[item]
[:en@~]
a variable; or
[:zh_CN@~]
变量；或者

[item]
[:en@~]
a function; or
[:zh_CN@~]
函数；或者

[item]
[:en@~]
[%class[!linkage of]]
a named class ([#class]), or an unnamed class defined in a typedef declaration
in which the class has the typedef name for linkage purposes ([#dcl.typedef]);
or
[:zh_CN@~]
[%类[!～的连接]]
具名类（[#class]），或定义于 typedef 声明式中的无名类，其具有用于连接的 typedef
名（[#dcl.typedef]）；或者

[item]
[:en@~]
[%enumeration[!linkage of]]
a named enumeration ([#dcl.enum]), or an unnamed enumeration defined in a
typedef declaration in which the enumeration has the typedef name for linkage
purposes ([#dcl.typedef]); or
[:zh_CN@~]
[%枚举[!～的连接]]
有名字的枚举（[#dcl.enum]），或定义于 typedef 声明式中的无名枚举，其具有用于连接
的 typedef 名（[#dcl.typedef]）；或者

[item]
[:en@~]
a template
[:zh_CN@~]
模板
[list:end]

[:en@~]
has its linkage determined as follows:
[:zh_CN@~]
则其连接以如下方式确定：

[list]
[item]
[:en@~] if the enclosing namespace has internal linkage, the name has internal
linkage;
[:zh_CN@~] 当其外围命名空间具有内部连接时，该名字具有内部连接；
[item]
[:en@~] otherwise, if the declaration of the name is attached to a named module
([#module.unit]) and is not exported ([#module.interface]), the name has module
linkage;
[:zh_CN@~] 否则，若该名字的声明式附属与某个具名模块（[#module.unit]）但未被导出
（[#module.interface]），则该名字具有模块连接；
[item]
[:en@~] otherwise, the name has external linkage.
[:zh_CN@~] 否则，该名字具有外部连接。
[list:end]

[para]
[:en]
In addition, a member function, static data member, a named class or enumeration
of class scope, or an unnamed class or enumeration defined in a class-scope
typedef declaration such that the class or enumeration has the typedef name for
linkage purposes ([#dcl.typedef]), has the same linkage, if any, as the name of
the class of which it is a member.
[:zh_CN]
此外，类的成员函数，静态数据成员，类作用域中的具名类或枚举，或者定义于类作用域中
的 typedef 声明式中（从而使其具有用于连接的 typedef 名）的无名类或枚举
（[#dcl.typedef]），它们具有与其作为成员的类的名字相同的连接（如果有）。

[para]
[:en]
The name of a function declared in block scope and the name of a variable
declared by a block scope [`extern] declaration have linkage.
[:zh_CN]
在块作用域中声明的函数的名字，以及由块作用域 [`extern] 声明式所声明的变量的名字
具有连接。

[:en]
If such a declaration is attached to a named module, the program is ill-formed.
[:zh_CN]
如果这样的声明式附属与某个具名模块，则程序员非良构。

[:en]
If there is a visible declaration of an entity with linkage, ignoring entities
declared outside the innermost enclosing namespace scope, such that the block
scope declaration would be a (possibly ill-formed) redeclaration if the two
declarations appeared in the same declarative region, the block scope
declaration declares that same entity and receives the linkage of the previous
declaration.
[:zh_CN]
若忽略其最内层外围命名空间作用域之外所声明的实体后，某个有连接实体的声明式是
可见的，并在当该声明式和块作用域声明式出现于相同的声明区时将导致块作用域声明式
变为（可能非良构的）重复声明式，则此块作用域声明式就对同一个实体进行声明，并获得
其之前所声明的连接。

[:en]
If there is more than one such matching entity, the program is ill-formed.
[:zh_CN]
若它所匹配的实体多于一个，则该程序非良构。

[:en]
Otherwise, if no matching entity is found, the block scope entity receives
external linkage.
[:zh_CN]
否则，若没找到匹配的实体，则这个块作用域实体就获得外部连接。

[:en]
If, within a translation unit, the same entity is declared with both internal
and external linkage, the program is ill-formed.
[:zh_CN]
如果同一个翻译单元中，相同的实体被同时声明为具有内部连接和外部连接，则程序
非良构。

[enter:example]

[codeblock]
static void f();
extern "C" void h();
static int i = 0;               // #1
void g() {
  extern void f();              // [:en] internal linkage
                                // [|:zh_CN] 内部连接
  extern void h();              // [:en] C language linkage
                                // [|:zh_CN] C 语言连接
  int i;                        // [:en] #2: [`i] has no linkage
                                // [|:zh_CN] #2：[`i] 无连接
  {
    extern void f();            // [:en] internal linkage
                                // [|:zh_CN] 内部连接
    extern int i;               // [:en] #3: external linkage
                                // [|:zh_CN] #3：外部连接，非良构
  }
}
[codeblock:end]

[:en]
Without the declaration at line #2, the declaration at line #3 would link with
the declaration at line #1.
[:zh_CN]
如果没有行 #2 的声明式的话，行 #3 的声明式将与行 #1 的声明式相连接。

[:en]
Because the declaration with internal linkage is hidden, however, #3 is given
external linkage, making the program ill-formed.
[:zh_CN]
但由于具有内部连接的声明式被隐藏了，行 #3 所获得的却是外部连接，导致程序非良构。
[exit:example]

[para]
[:en]
When a block scope declaration of an entity with linkage is not found to refer
to some other declaration, then that entity is a member of the innermost
enclosing namespace.
[:zh_CN]
当某个有连接实体的块作用域声明式，没有找到所能代表的其他声明式时，该实体就成为其
最内层外围命名空间的成员。

[:en]
However such a declaration does not introduce the member name in its namespace
scope.
[:zh_CN]
然而这种声明式并不向其命名空间作用域中引入成员名。

[enter:example]
[codeblock]
namespace X {
  void p() {
    q();                        // [:en] error: [`q] not yet declared
                                // [|:zh_CN] 错误：[`q] 还未声明
    extern void q();            // [:en] [`q] is a member of namespace [`X]
                                // [|:zh_CN] [`q] 是命名空间 [`X] 的成员
  }

  void middle() {
    q();                        // [:en] error: [`q] not yet declared
                                // [|:zh_CN] 错误：[`q] 还未声明
  }

  void q() { /* ... */ }        // [:en] definition of [`X::q]        
                                // [|:zh_CN] [`X::q] 的定义式
}

void q() { /* ... */ }          // [:en] some other, unrelated [`q]
                                // [|:zh_CN] 某个无关的其他 [`q]
[codeblock:end]
[exit:example]

[para]
[:en]
[%linkage[!no]]
Names not covered by these rules have no linkage.
[:zh_CN]
[%连接[!无～]]
未由下列规则覆盖到的名字没有连接。

[:en]
Moreover, except as noted, a name declared at block scope ([#basic.scope.block])
has no linkage.
[:zh_CN]
此外，除非另行指明，在块作用域（[#basic.scope.block]）中声明的名字没有连接。

[para]
[:en]
Two names that are the same ([#basic]) and that are declared in different scopes
shall denote the same variable, function, type, template or namespace if
[:zh_CN]
在下列情况下，相同的（[#basic]），且声明于不同的作用域中的两个名字，应当代表相同
的变量、函数、类型、模板或命名空间：

[list]
[item]
[:en]
both names have external or module linkage and are declared in declarations
attached to the same module, or else both names have internal linkage and are
declared in the same translation unit; and
[:zh_CN]
两个名字都具有外部或模块连接且均在附属与相同模块的声明式中所声明，或者都具有
内部连接且声明于相同翻译单元中；且

[item]
[:en]
both names refer to members of the same namespace or to members, not by
inheritance, of the same class; and
[:zh_CN]
两个名字都代表相同命名空间的成员，或相同类的（不来自继承的）成员；且

[item]
[:en]
when both names denote functions, the parameter-type-lists of the functions
([#dcl.fct]) are identical; and
[:zh_CN]
若两个名字都代表函数，则这些函数的形参类型列表（[#dcl.fct]）应当一致；且

[item]
[:en]
when both names denote function templates, the signatures ([#temp.over.link])
are the same.
[:zh_CN]
若两个名字都代表函数模板，则其签名（[#temp.over.link]）应当相同。
[list:end]

[:en]
If multiple declarations of the same name with external linkage would declare
the same entity except that they are attached to different modules, the program
is ill-formed; no diagnostic is required.
[:zh_CN]
如果同一个具有外部连接的名字的多个声明式，除附属与不同模块之外声明了同一个实体，
则程序非良构；无须诊断。

[enter:note]
[:en]
[~using-declaration]s, typedef declarations, and [~alias-declaration]s do not
declare entities, but merely introduce synonyms.
[:zh_CN]
[~using-声明式]、typedef 声明式和别名声明式并不声明实体而仅仅引入了同义词。

[:en]
Similarly, [~using-directive]s do not declare entities.
[:zh_CN]
雷斯蒂，[~using-指令]并不声明实体。
[exit:note]

[para]
[:en]
If a declaration would redeclare a reachable declaration attached to a different
module, the program is ill-formed.
[:zh_CN]
如果某个声明式重新声明了某个附属与不同模块的声明式，则程序非良构。

[enter:example]
[:en] [`"decls.h"]:
[:zh_CN] [`"decls.h"]：
[codeblock]
int f();            // [:en] #1, attached to the global module
int g();            // [:en] #2, attached to the global module
[codeblock:end]

[:en] Module interface of [`M]:
[:zh_CN] [`M] 的模块接口：
[codeblock]
module;
#include "decls.h"
export module M;
export using ::f;   // [:en] OK: does not declare an entity, exports #1
int g();            // [:en] error: matches #2, but attached to [`M]
export int h();     // #3
export int k();     // #4
[codeblock:end]

[:en] Other translation unit:
[:zh_CN] 另一个翻译单元：
[codeblock]
import M;
static int h();     // [:en] error: matches #3
int k();            // [:en] error: matches #4
[codeblock:end]
[exit:example]

[:en]
As a consequence of these rules, all declarations of an entity are attached to
the same module; the entity is said to be [+attached[%attached[!entity]]] to
that module.
[:zh_CN]
这些规则的结果是，一个实体的所有声明式均附属于同一个模块；该实体被称为[+附属
[%附属[!实体]]]于这个模块。

[para]
[:en]
[%consistency[!type declaration]] [%declaration[!multiple]]
After all adjustments of types (during which typedefs ([#dcl.typedef]) are
replaced by their definitions), the types specified by all declarations
referring to a given variable or function shall be identical, except that
declarations for an array object can specify array types that differ by the
presence or absence of a major array bound ([#dcl.array]).
[:zh_CN]
[%一致性[!类型声明式的～]] [%声明式[!多重～]]
在全部类型调整（其中 typedef（[#dcl.typedef]）都被其定义所取代）之后，除了数组
对象的声明式可以指定因带有或不带有主数组边界（[#dcl.array]）而相异的数组类型外，
所有代表给定变量或函数的声明式所指定的类型都应当一致。

[:en]
A violation of this rule on type identity does not require a diagnostic.
[:zh_CN]
违反本条关于类型一致的规则无须诊断。

[para]
[enter:note]
[:en]
Linkage to non-[=Cpp] declarations can be achieved using a
[~linkage-specification] ([#dcl.link]).
[:zh_CN]
到非 [=Cpp] 的声明式的连接可以通过使用[~连接说明]来达成（[#dcl.link]）。
[exit:note]

[%:end#linkage]
