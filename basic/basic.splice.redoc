[section#basic.splice
    [:en] Splice specifiers
    [:zh_CN] 拼接说明符
[%:begin#splice
    [:en] splice
    [:zh_CN] 拼接 ]
]

[syntax]
[rule splice-specifier [:zh_CN] 拼接说明符 ]
    [| [``[:] constant-expression [`:`]] ]
[rule:end]

[rule splice-specialization-specifier [:zh_CN] 拼接特例说明符 ]
    [| splice-specifier [`<] [~:opt template-argument-list] [`>] ]
[rule:end]
[syntax:end]

[para]
[:en] The [~constant-expression] of a [~splice-specifier] shall be a converted
constant expression of type [`std::meta::info] ([#expr.const]).
[:zh_CN] 拼接说明符的[~常量表达式]应当是 [`std::meta::info] 类型的经转换常量表达式（[#expr.const]）。

[:en] A [~splice-specifier] whose converted [~constant-expression] represents
a construct [$X] is said to [+designate] either
[:zh_CN] [~拼接说明符]，其经转换的[~常量表达式]代表构造 [$X]，称它[+指定]的是：
[list]
[item]
[:en@~] the underlying entity of [$X] if [$X] is an entity ([#basic.pre]), or
[:zh_CN@~] 若 [$X] 是实体（[#basic.pre]），则为 [$X] 的底层实体，或者
[item]
[:en@~] [$X] otherwise.
[:zh_CN@~] 否则为 [$X]。
[list:end]

[begin:note]
[:en] A [~splice-specifier] is dependent if the converted [~constant-expression]
is value-dependent ([#temp.dep.splice]).
[:zh_CN] 如果[~拼接说明符]经转换的[~常量表达式]是值待决的（[#temp.dep.splice]），则它是待决的。
[end:note]

[para]
[:en] A non-dependent [~splice-specifier] of a [~splice-specialization-specifier]
shall designate a template.
[:zh_CN] [~拼接特例说明符]的非待决[~拼接说明符]应当指定一个模板。

[para]
[begin:note]
[:en] A [`<] following a [~splice-specifier] is interpreted as the delimiter of
a [~template-argument-list] when the [~splice-specifier] is preceded by
the keyword [`:key template] or the keyword [`:key typename], or
when it appears in a type-only context ([#temp.names]).
[:zh_CN] 当[~拼接说明符]前有关键词 [`:key template] 或 [`:key typename]，或
当它出现在仅类型语境中（[#temp.names]）时，跟在[~拼接说明符]后面的 [`<] 被解释为
[~模板实参列表]的分隔符。

[begin:example]
[codeblock]
constexpr int v = 1;
template<int V> struct TCls {
  static constexpr int s = V + 1;
};

using alias = [:^^TCls:]<([:^^v:])>;
  // [:en] OK, a [~splice-specialization-specifier] with a parenthesized [~splice-expression] as a template argument \
  [:zh_CN] OK，以有括号[~拼接表达式]作为模板实参的[~拼接特例说明符]

static_assert(alias::s == 2);

auto o1 = [:^^TCls:]<([:^^v:])>();              // [:en] error: < means less than [:zh_CN] 错误：< 意为小于
auto o2 = typename [:^^TCls:]<([:^^v:])>();     // [:en] OK, [`o2] is an object of type [`TCls<1>] \
                                                [:zh_CN] OK，[`o2] 是类型 [`TCls<1>] 的对象

consteval int bad_splice(std::meta::info v) {
  return [:v:];                                 // [:en] error: [`v] is not constant [:zh_CN] 错误：[`v] 不是常量
}
[codeblock:end]
[end:example]
[end:note]

[%:end#splice]
