[section#intro.abstract
    [:en] Abstract machine
    [:zh_CN] 抽象机器
]

[%:begin#program.execution
    [:en] program execution
    [:zh_CN] 程序的执行
]

[para]
[:en] [% program execution [!abstract machine]]
The semantic descriptions in this document define a parameterized
nondeterministic abstract machine.
[:zh_CN] [% 程序的执行 [!抽象机器]]
本文档中的语义说明，定义了一个参数化的非确定性的抽象机器。

[:en] This document places no requirement on the structure of conforming implementations.
[:zh_CN] 本文档对符合标准的实现的内部结构不施以任何规定。

[:en] In particular, they need not copy or emulate the structure of the abstract machine.
[:zh_CN] 尤其是，它们并不需要复制或模拟这个抽象机器的结构。

[:en] [%as-if rule][%behavior [!observable]]
Rather, conforming implementations are required to emulate (only) the observable
behavior of the abstract machine as explained below.[#:fn]
[:zh_CN] [%“如同”规则 [@如同规则]] [%行为 [!可观察～]]
更确切地说，符合标准的实现需要模拟的（仅仅）是下文阐明的抽象机器的可观察行为[#:fn]。

[note:foot]
[:en] This provision is sometimes called the [=lq]as-if[=rq]] rule, because an
implementation is free to disregard any requirement of this document as long as
the result is [span:em as if] the requirement had been obeyed, as far as can be
determined from the observable behavior of the program.
[:zh_CN] 这条往往被称作“如同”规则，因为实现可以自由忽略本文档中的任何规定，
只要从程序的可观察行为能够确定，其结果[span:em 如同]该规定已经被遵守即可。

[:en] For instance, an actual implementation need not evaluate part of an
expression if it can deduce that its value is not used and that no [%side effects]
side effects affecting the observable behavior of the program are produced.
[:zh_CN] 例如，如果实现可以推导出一个表达式中的某部分的值不会被用到，并且不会
造成影响程序的可观察行为的[%副作用]副作用，这个实现就不必对其求值。
[note:end]

[para]
[:en] [%behavior [!implementation-defined]]
Certain aspects and operations of the abstract machine are described in this
document as implementation-defined behavior (for example, [`sizeof(int)]).
[:zh_CN] [%行为 [!由实现定义的～]]
本文档将抽象机器的某些特定方面和操作描述为由实现定义的行为（如 [`sizeof(int)]）。

[:en] These constitute the parameters of the abstract machine.
[:zh_CN] 它们构成了抽象机器的参数。

[:en] Each implementation shall include documentation describing its characteristics
and behavior in these respects.[#:fn]
[:zh_CN] 每个实现都应包含文档以说明其在这些方面的具体特性和行为[#:fn]。

[note:foot]
[:en] This documentation also includes conditionally-supported constructs and
locale-specific behavior.
[:zh_CN] 此文档中还包括有条件支持的构造和地域特有的行为。

[:en] See [#intro.compliance.general].
[:zh_CN] 参见 [#intro.compliance.general]。
[note:end]

[:en] Such documentation shall define the instance of the abstract machine that corresponds
to that implementation (referred to as the [=lq]corresponding instance[=rq] below).
[:zh_CN] 此文档中应当定义对应于该实现的抽象机器的实例（下文称为“对应实例”）。

[para]
[:en] [%behavior [!unspecified]]
Certain other aspects and operations of the abstract machine are described in
this document as unspecified behavior (for example, order of evaluation of
arguments in a function call ([#expr.call])).
[:zh_CN] [%行为 [!未指明的～]]
本文档将抽象机器的其他一些特定方面和操作描述为未指明的行为（例如，函数调用中的
实参求值顺序（[#expr.call]））。

[:en] Where possible, this document defines a set of allowable behaviors.
[:zh_CN] 只要可能，本文档都将定义一组可接受的行为。

[:en] These define the nondeterministic aspects of the abstract machine.
[:zh_CN] 它们定义了抽象机器的非确定性的方面。

[:en] An instance of the abstract machine can thus have more than one possible
execution for a given program and a given input.
[:zh_CN] 对于某个给定程序和给定数据，抽象机器的实例将可能因而产生不只一种可能的执行。

[para]
[:en] [%behavior [!undefined]]
Certain other operations are described in this document as undefined behavior
(for example, the effect of attempting to modify a const object).
[:zh_CN] [%行为 [!未定义的～]]
其他一些特定的操作被本文档称为未定义的行为（例如，试图修改某个 const 对象的后果）。

[para]
[:en] Certain events in the execution of a program are termed [+:adj observable[!checkpoints]].
[:zh_CN] 程序执行中的特定事件被称为[+:adj 可观察[!检查点]]。

[begin:note]
[:en] A call to [`std::observable_checkpoint] ([#utility.undefined]) is an observable
checkpoint, as are certain parts of the evaluation of contract assertions ([#basic.contract]).
[:zh_CN] 调用 [`std::observable_checkpoint]（[#utility.undefined]）是可观察检查点，
契约断言评估中的特定部分也是（[#basic.contract]）。
[end:note]

[para]
[:en] [%program [!well-formed]] [%behavior [!observable]]
The [+:adj defined[!prefix]] of an execution comprises the operations [$O]
for which for every undefined operation [$U] there is an observable checkpoint [$C]
such that [$O] happens before [$C] and [$C] happens before [$U].
[:zh_CN] [%程序 [!良构的～]] [%行为 [!可观察～]]
一项执行的[+:adj 有定义[!前置]]由这样的操作 [$O] 组成：对于每个未定义操作 [$U]，
存在一个可观察检查点 [$C]，使得 [$O] 发生早于 [$C] 且 [$C] 发生早于 [$U]。

[para:~]
[begin:note]
[:en] The undefined behavior that arises from a data race ([#intro.races])
occurs on all participating threads.
[:zh_CN] 源于数据竞争（[#intro.races]）的未定义行为发生于所有参与线程。
[end:note]

[:en] A conforming implementation executing a well-formed program shall produce the
observable behavior of the defined prefix of one of the possible executions of the
corresponding instance of the abstract machine with the same program and the same input.
[:zh_CN] 符合标准的实现执行良构的程序时，应该产生对应抽象机器实例依据同一程序和
相同输出产生的可能的执行之一的有定义前置的可观察行为。

[:en] [%behavior [!undefined]]
If the selected execution contains an undefined operation, the implementation
executing that program with that input may produce arbitrary additional observable
behavior afterwards.
[:zh_CN] [%行为 [!未定义的～]]
如果所选择的执行中包含未定义的操作，那么以该输入执行该程序的实现此后可能产生任意
的额外可观察行为。

[:en] If the execution contains an operation specified as having erroneous
behavior, the implementation is permitted to issue a diagnostic and is permitted
to terminate the execution at an unspecified time after that operation.
[:zh_CN] 如果执行中包含某个被指定为具有错误行为的操作，则允许实现发出一条诊断，并允许在
这个操作之后的未指明时间终止执行。

[para:recommended]
[:en] An implementation should issue a diagnostic when such an operation is executed.
[:zh_CN] 实现应当在执行这样的操作时发出一条诊断。

[begin:note]
[:en] An implementation can issue a diagnostic if it can determine that
erroneous behavior is reachable under an implementation-specific set of
assumptions about the program behavior, which can result in false positives.
[:zh_CN] 实现可以在一组关于程序行为的特定于实现的假定之下可以确定某个错误行为可达时发出
诊断，这可能会导致发生误报。
[end:note]

[para]
[:en] [%conformance requirements]
The following specify the [+:adj observable[!behavior]] of the program:
[:zh_CN] [%一致性规定]
以下规定了程序的[+adj 可观察[!行为]]：

[list]
[item]
[:en] Accesses through volatile glvalues are evaluated strictly according to the
rules of the abstract machine.
[:zh_CN] 通过 volatile 左值进行的访问是严格按照抽象机器的规则进行求值的。

[item]
[:en] Data is delivered to the host environment to be written into files ([?xrefc 7.21.3]).
[:zh_CN] 数据已被递交给宿主环境以写入文件（[?xrefc 7.21.3]）。

[begin:note]
[:en] Delivering such data is followed by an observable checkpoint ([#cstdio.syn]).
[:zh_CN] 递交这种数据之后即跟随一个可观察检查点（[#cstdio.syn]）。

[:en] Not all host environments provide access to file contents before program termination.
[:zh_CN] 并非所有宿主环境都提供了于程序终止前访问文件内容的能力。
[end:note]

[item]
[:en] The input and output dynamics of interactive devices shall take place in such a
fashion that prompting output is actually delivered before a program waits for input.
[:zh_CN] 交互设备的输入输出的动作的行为方式应当为：在程序开始等待输入之前，
提示输出已经确实发出。

[:en] What constitutes an interactive device is [?impldef interactive device].
[:zh_CN] 交互设备的构成是[?impldef 交互式设备]。
[list:end]

[begin:note]
[:en] More stringent correspondences between abstract and actual semantics can be
defined by each implementation.
[:zh_CN] 每个实现可以各自定义抽象语义和实际语义之间更严格的对应。
[end:note]

[%:end#program.execution]
