[section#intro.execution
    [:en] Program execution
    [:zh_CN] 程序的执行
]

[%:begin#program.execution
    [:en] program execution
    [:zh_CN] 程序的执行
]

[para]
[:en]
[% program execution [!abstract machine]]
The semantic descriptions in this International Standard define a parameterized
nondeterministic abstract machine.
[:zh_CN]
[% 程序的执行 [!抽象机器]]
本国际标准中的语义说明，定义了一个参数化的非确定性的抽象机器。

[:en]
This International Standard places no requirement on the structure of conforming
implementations.
[:zh_CN]
本国际标准对符合标准的实现的内部结构不施以任何规定。

[:en]
In particular, they need not copy or emulate the structure of the abstract
machine.
[:zh_CN]
尤其是，它们并不需要复制或模拟这个抽象机器的结构。

[:en]
[%as-if rule][%behavior [!observable]]
Rather, conforming implementations are required to emulate (only) the observable
behavior of the abstract machine as explained below.[#:note#fn:$section.1]
[:zh_CN]
[%“如同”规则 [@如同规则]] [%行为 [!可观察～]]
更确切地说，符合标准的实现需要模拟的（仅仅）是下文阐明的抽象机器的可观察行为。
[#:note#fn:$section.1]

[note:foot#fn:$section.1]
[:en]
This provision is sometimes called the ["as-if] rule, because an implementation
is free to disregard any requirement of this International Standard as long as
the result is [em as if] the requirement had been obeyed, as far as can be
determined from the observable behavior of the program.
[:zh_CN]
这条往往被称作“如同”规则，因为实现可以自由忽略本国际标准中的任何规定，只要从
程序的可观察行为能够确定，其结果[em 如同]该规定已经被遵守即可。

[:en]
For instance, an actual implementation need not evaluate part of an expression
if it can deduce that its value is not used and that no [%side effects] side
effects affecting the observable behavior of the program are produced.
[:zh_CN]
例如，如果实现可以推导出一个表达式中的某部分的值不会被用到，并且不会造成影响
程序的可观察行为的[%副作用]副作用，这个实现就不必对其求值。
[note:end]

[para]
[:en]
[%behavior [!implementation-defined]]
Certain aspects and operations of the abstract machine are described in this
International Standard as implementation-defined (for example, [`sizeof(int)]).
[:zh_CN]
[%行为 [!由实现定义的～]]
本国际标准将抽象机器的某些特定方面和操作描述为由实现定义的（如 [`sizeof(int)]）。

[:en]
These constitute the parameters of the abstract machine.
[:zh_CN]
它们构成了抽象机器的参数。

[:en]
Each implementation shall include documentation describing its characteristics
and behavior in these respects.[#:note#fn:$section.2]
[:zh_CN]
每个实现都应包含文档以说明其在这些方面的具体特性和行为。[#:note#fn:$section.2]

[note:foot#fn:$section.2]
[:en]
This documentation also includes conditionally-supported constructs and
locale-specific behavior.
[:zh_CN]
此文档中还包括有条件支持的构造和特定于地域的行为。

[:en]
See [#intro.compliance].
[:zh_CN]
参见 [#intro.compliance]。
[note:end]

[:en]
Such documentation shall define the instance of the abstract machine that
corresponds to that implementation (referred to as the ["corresponding instance]
below).
[:zh_CN]
此文档中应当定义对应于该实现的抽象机器的实例（下文称为“对应实例”）。

[para]
[:en]
[%behavior [!unspecified]]
Certain other aspects and operations of the abstract machine are described in
this International Standard as unspecified (for example, evaluation of
expressions in a [~new-initializer] if the allocation function fails to
allocate memory ([#expr.new])).
[:zh_CN]
[%行为 [!未指明的～]]
本国际标准将抽象机器的其他一些特定方面和操作描述为未指明的（例如，当分配函数
分配内存失败时，[~new-初始化式]中的表达式的求值（[#expr.new]））。

[:en]
Where possible, this International Standard defines a set of allowable
behaviors.
[:zh_CN]
只要可能，本国际标准都将定义一组可接受的行为。

[:en]
These define the nondeterministic aspects of the abstract machine.
[:zh_CN]
它们定义了抽象机器的非确定性的方面。

[:en]
An instance of the abstract machine can thus have more than one possible
execution for a given program and a given input.
[:zh_CN]
对于某个给定程序和给定数据，抽象机器的实例将可能因而产生不只一种可能的执行。

[para]
[:en]
[%behavior [!undefined]]
Certain other operations are described in this International Standard as
undefined (for example, the effect of attempting to modify a [`const] object).
[:zh_CN]
[%行为 [!未定义的～]]
其他一些特定的操作被本国际标准称为未定义的（例如，试图修改某个 [`const] 对象的
后果）。

[enter:note]
[:en]
This International Standard imposes no requirements on the behavior of programs
that contain undefined behavior.
[:zh_CN]
本国际标准对包含未定义行为的程序的行为不作任何规定。
[exit:note]

[para]
[:en]
[%program [!well-formed]]
[%behavior [!observable]]
A conforming implementation executing a well-formed program shall produce the
same observable behavior as one of the possible executions of the corresponding
instance of the abstract machine with the same program and the same input.
[:zh_CN]
[%程序 [!良构的～]]
[%行为 [!可观察～]]
符合标准的实现执行良构的程序时产生的可观察行为，应该与该实现的对应抽象机器实例
依据同一程序和同一输出产生的可能的执行之一相一致。

[:en]
[%behavior [!undefined]]
However, if any such execution contains an undefined operation, this
International Standard places no requirement on the implementation executing
that program with that input (not even with regard to operations preceding the
first undefined operation).
[:zh_CN]
[%行为 [!未定义的～]]
然而，如果任何这种执行中包含未定义的操作，本国际标准不会对以该输入执行该程序的
实现作任何规定（甚至对于第一个未定义操作之前的操作也不作规定）。

[para]
[:en]
An instance of each object with automatic storage duration ([#basic.stc.auto])
is associated with each entry into its block.
[:zh_CN]
每个具有自动存储期（[#basic.stc.auto]）的对象实例都与其所在块的各个入口相联系。

[:en]
Such an object exists and retains its last-stored value during the execution of
the block and while the block is suspended (by a call of a function or receipt
of a signal).
[:zh_CN]
这些对象将在该语句块的执行期间，以及当该语句块（因调用函数或接收信号而）被挂起时
存在，并保持其最近保存的值。

[para]
[:en]
[%conformance requirements]
The least requirements on a conforming implementation are:
[:zh_CN]
[%遵从性规定]
对符合标准的实现的最低要求是：

[list:ul]

[item]
[:en]
Accesses through volatile glvalues are evaluated strictly according to the rules
of the abstract machine.
[:zh_CN]
通过 volatile 左值进行的访问是严格按照抽象机器的规则进行求值的。

[item]
[:en]
At program termination, all data written into files shall be identical to one of
the possible results that execution of the program according to the abstract
semantics would have produced.
[:zh_CN]
程序终止时，写入文件的所有数据应与该程序根据抽象语义的执行所产生可能的结果之一
相吻合。

[item]
[:en]
The input and output dynamics of interactive devices shall take place in such a
fashion that prompting output is actually delivered before a program waits for
input.
[:zh_CN]
交互设备的输入输出的动作的行为方式应当为：在程序开始等待输入之前，提示输出已经
确实发出。

[:en]
What constitutes an interactive device is [%@impldef interactive device]
implementation-defined.
[:zh_CN]
交互设备的构成[%@impldef 交互式设备]由实现定义。

[list:end]

[:en]
These collectively are referred to as the [+observable behavior [%behavior
[!observable]]] of the program.
[:zh_CN]
这些共同称之为程序的[+可观察行为 [%行为[!可观察～]]]。

[enter:note]
[:en]
More stringent correspondences between abstract and actual semantics may be
defined by each implementation.
[:zh_CN]
抽象语义和实际语义之间更严格的对应应由每个实现各自定义。
[exit:note]

[para]
[:en]
[%operator [!precedence of]]
[%expression [!order of evaluation of]]
[:zh_CN]
[%运算符 [!～优先级]]
[%表达式 [!～求值顺序]]

[enter:note]
[:en]
Operators can be regrouped according to the usual mathematical rules only where
the operators really are associative or commutative.[#:note#fn:$section.3]
[:zh_CN]
仅当运算符在该处确实具有结合性或交换性时，才能根据常规的数学规则进行重新组合。
[#:note#fn:$section.3]

[note:foot#fn:$section.3]
[:en]
Overloaded operators are never assumed to be associative or commutative.
[:zh_CN]
重载运算符总不具有结合性或交换性。
[note:end]

[:en]
For example, in the following fragment
[:zh_CN]
例如，在如下片段中

[codeblock]
int a, b;
/* ... */
a = a + 32760 + b + 5;
[codeblock:end]

[:en@~]
the expression statement behaves exactly the same as
[:zh_CN@~]
根据运算符的结合性和优先级，该表达式与

[codeblock]
a = (((a + 32760) + b) + 5);
[codeblock:end]

[:en@~]
due to the associativity and precedence of these operators.
[:zh_CN@~]
具有完全相同的行为。

[:en]
Thus, the result of the sum [`(a + 32760)] is next added to [`b], and that
result is then added to 5 which results in the value assigned to [`a].
[:zh_CN]
按此，求和 [`(a + 32760)] 的结果接着与 [`b] 相加，然后对其结果加上 5，所得的
值被赋值给 [`a]。

[:en]
On a machine in which overflows produce an exception and in which the range of
values representable by an [`int] is [=crange(-32768,+32767)], the
implementation cannot rewrite this expression as
[:zh_CN]
在溢出产生异常且 [`int] 能够表示的值的范围是 [=crange(-32768,+32767)] 的机器上，
实现不能把该表达式重写为

[codeblock]
a = ((a + b) + 32765);
[codeblock:end]

[:en@~]
since if the values for [`a] and [`b] were, respectively, -32754 and -15, the
sum [`a + b] would produce an exception while the original expression would not;
[:zh_CN@~]
因为若 [`a] 和 [`b] 的值分别为 -32754 和 -15，则 [`a + b] 的和就会导致异常，
而原来的表达式却不会；

[:en@~]
nor can the expression be rewritten either as
[:zh_CN@~]
该表达式也不能重写为

[codeblock]
a = ((a + 32765) + b);
[codeblock:end]

[:en@~]
or
[:zh_CN@~]
或

[codeblock]
a = (a + (b + 32765));
[codeblock:end]

[:en@~]
since the values for [`a] and [`b] might have been, respectively, 4 and -8 or
-17 and 12.
[:zh_CN@~]
因为 [`a] 和 [`b] 的值可能分别是 4 和 -8，或 -17 和 12。

[:en]
However on a machine in which overflows do not produce an exception and in which
the results of overflows are reversible, the above expression statement can be
rewritten by the implementation in any of the above ways because the same result
will occur.
[:zh_CN]
然而在溢出不导致异常且溢出结果可逆的机器上，上面的表达式语句就可以被实现以上述
任意方式重写，因为它们所产生的结果相同。

[exit:note]

[para]
[:en]
A [+constituent expression] is defined as follows:
[:zh_CN]
[+成分表达式]的定义如下：

[list:ul]
[item]
[:en]
The constituent expression of an expression is that expression.
[:zh_CN]
表达式的成分表达式就是其自身。

[item]
[:en]
The constituent expressions of a [~braced-init-list] or of a (possibly
parenthesized) [~expression-list] are the constituent expressions of the
elements of the respective list.
[:zh_CN]
[~花括号初始化列表]，或（可能带有括号的）[~表达式列表]的成分表达式，是相应列表的
各元素的成分表达式。

[item]
[:en]
The constituent expressions of a [~brace-or-equal-initializer] of the form
[`=] [~initializer-clause] are the constituent expressions of the
[~initializer-clause].
[:zh_CN]
形式为“[`=] [~初始化式子句]”的[~花括号或等号初始化式]的成分表达式，是该
[~初始化式子句]的成分表达式。
[list:end]

[enter:example]
[codeblock]
struct A { int x; };
struct B { int y; struct A a; };
B b = { 5, { 1+1 } };
[codeblock:end]

[:en]
The constituent expressions of the [~initializer] used for the initialization
of [`b] are [`5] and [`1+1].
[:zh_CN]
用于 [`b] 的初始化的[~初始化式]的成分表达式为 [`5] 和 [`1+1]。
[exit:example]

[para]
[:en]
The [+immediate subexpressions[%immediate subexpression]] of an expression [`e]
are
[:zh_CN]
表达式 [`e] 的[+直接子表达式]为

[list:ul]
[item]
[:en]
the constituent expressions of [`e][=']s operands ([#expr]),
[:zh_CN]
[`e] 的操作数的成分表达式（[#expr]），

[item]
[:en]
any function call that [`e] implicitly invokes,
[:zh_CN]
任何 [`e] 所隐含执行的函数调用，

[item]
[:en]
if [`e] is a [~lambda-expression] ([#expr.prim.lambda]), the initialization of
the entities captured by copy and the constituent expressions of the
[~initializer] of the [~init-capture]s,
[:zh_CN]
当 [`e] 为 [~lambda-表达式]（[#expr.prim.lambda]）时，其所复制捕获的各个实体的
初始化，以及各个[~带初始化捕获符]的[~初始化式]，

[item]
[:en]
if [`e] is a function call ([#expr.call]) or implicitly invokes a function, the
constituent expressions of each default argument ([#dcl.fct.default]) used in
the call, or
[:zh_CN]
当 [`e] 为函数调用（[#expr.call]）或其隐式调用了函数时，该调用中所使用的各个默认
实参（[#dcl.fct.default]）的成分表达式，或者

[item]
[:en]
if [`e] creates an aggregate object ([#dcl.init.aggr]), the constituent
expressions of each default member initializer ([#class.mem]) used in the
initialization.
[:zh_CN]
当 [`e] 创建了聚合对象（[#dcl.init.aggr]）时，其初始化中所使用的各个默认成员
初始化式（[#class.mem]）的成分表达式。
[list:end]

[para]
[:en]
A [+subexpression] of an expression [`e] is an immediate subexpression of [`e]
or a subexpression of an immediate subexpression of [`e].
[:zh_CN]
表达式 [`e] 的[+子表达式]，是 [`e] 的直接子表达式，或者 [`e] 的直接子表达式的
子表达式。

[enter:note]
[:en]
Expressions appearing in the [~compound-statement] of a [~lambda-expression]
are not subexpressions of the [~lambda-expression].
[:zh_CN]
出现于 [~lambda-表达式]的[~组合语句]之中的表达式不是[~lambda-表达式]的子表达式。
[exit:note]

[para]
[:en]
A [+full-expression] is
[:zh_CN]
[+全表达式]为

[list:ul]
[item]
[:en]
an unevaluated operand ([#expr]),
[:zh_CN]
免求值操作数（[#expr]），

[item]
[:en]
a [~constant-expression] ([#expr.const]),
[:zh_CN]
[~常量表达式]（[#expr.const]），

[item]
[:en]
an [~init-declarator] ([#dcl.decl]) or a [~mem-initializer]
([#class.base.init]), including the constituent expressions of the initializer,
[:zh_CN]
[~带初始化声明符]（[#dcl.decl]）或[~成员初始化式]（[#class.base.init]），包括
初始化式的成分表达式，

[item]
[:en]
an invocation of a destructor generated at the end of the lifetime of an object
other than a temporary object ([#class.temporary]), or
[:zh_CN]
对并非临时对象（[#class.temporary]）的对象，在其生存期结束时所生成的对析构函数的
调用，或者

[item]
[:en]
an expression that is not a subexpression of another expression and that is not
otherwise part of a full-expression.
[:zh_CN]
不是其他表达式的子表达式，而且也不是某个全表达式的一部分的表达式。
[list:end]

[:en]
If a language construct is defined to produce an implicit call of a function, a
use of the language construct is considered to be an expression for the purposes
of this definition.
[:zh_CN]
若某种语言构造被定义为产生某个函数的隐含调用，则认为该语言构造的使用符合此条
定义的意图。

[:en]
Conversions applied to the result of an expression in order to satisfy the
requirements of the language construct in which the expression appears are also
considered to be part of the full-expression.
[:zh_CN]
为了满足某个表达式所在的语言构造的要求，而对该表达式的结果实施的类型转换，
也被当作全表达式的一部分。

[:en]
For an initializer, performing the initialization of the entity
(including evaluating default member initializers of an aggregate)
is also considered part of the full-expression.
[:zh_CN]
对于初始化式来说，对实体所进行的初始化（包括对聚合的默认成员初始化式的求值），也
被当作全表达式的一部分。

[enter:example]
[codeblock]
struct S {
  S(int i): I(i) { }       // [:en] full-expression is initialization of [`I]
                           // [|:zh_CN] 全表达式是 [`I] 的初始化
  int& v() { return I; }
  ~S() noexcept(false) { }
private:
  int I;
};

S s1(1);                   // [:en] full-expression is call of [`S::S(int)]
                           // [|:zh_CN] 全表达式是对 [`S::S(int)] 的调用
void f() {
  S s2 = 2;                // [:en] full-expression is call of [`S::S(int)]
                           // [|:zh_CN] 全表达式是对 [`S::S(int)] 的调用
  if (S(3).v())            // [:en] full-expression includes lvalue-to-rvalue and
                           // [|:zh_CN] 全表达式包括左值向右值以及
                           // [:en@~] [`int] to [`bool] conversions, performed before
                           // [|:zh_CN@~] [`int] 向 [`bool] 的转换，并实施于
                           // [:en@~] temporary is deleted at end of full-expression
                           // [|:zh_CN@~] 临时变量在全表达式结尾处被删除之前
  { }
  bool b = noexcept(S());  // [:en] exception specification of destructor of [`S]
                           // [|:zh_CN] 对于 [`noexcept]，考察了 [`S] 的析构函数
                           // [:en@~] considered for [`noexcept]
                           // [|:zh_CN@~] 的异常说明
  // [:en] full-expression is destruction of [`s2] at end of block
  // [|:zh_CN] 全表达式为在代码块末尾对 [`s2] 的销毁
}
struct B {
      B(S = S(0));
   };
   B b[2] = { B(), B() };  // [:en] full-expression is the entire initialization
                           // [|:zh_CN] 全表达式为包括临时变量的
                           // [:en@~] including the destruction of temporaries
                           // [|:zh_CN@~] 销毁在内的整个初始化
[codeblock:end]
[exit:example]

[para]
[enter:note]
[:en]
The evaluation of a full-expression can include the evaluation of subexpressions
that are not lexically part of the full-expression.
[:zh_CN]
全表达式的求值可能会包含对并非其语法上的一部分的子表达式所进行的求值。

[:en]
For example, subexpressions involved in evaluating default arguments
([#dcl.fct.default]) are considered to be created in the expression that calls
the function, not the expression that defines the default argument.
[:zh_CN]
例如，默认实参（[#dcl.fct.default]）求值时所涉及的子表达式，被认为创建于进行函数
调用的表达式中，而不是定义该默认实参的表达式中。
[exit:note]

[%:begin#value.computation
    [:en] value computation
    [:zh_CN] 值计算
]

[para]
[:en]
Reading an object designated by a [`volatile] glvalue ([#basic.lval]), modifying
an object, calling a library I/O function, or calling a function that does any
of those operations are all [+side effects], which are changes in the state
of the execution environment.
[:zh_CN]
读取由 [`volatile] 泛左值（[#basic.lval]）所指代的对象，更改对象，调用程序库 I/O
函数，或调用含有任何这些操作的函数，都是[+副作用]，它们是执行环境的状态的变化。

[:en]
[+Evaluation[%evaluation]] of an expression (or a subexpression) in general
includes both value computations (including determining the identity of an
object for glvalue evaluation and fetching a value previously assigned to an
object for prvalue evaluation) and initiation of side effects.
[:zh_CN]
表达式（或子表达式）的[+求值]通常既包括值的计算（包括在泛左值求值中对象实体的
确定，以及在纯右值求值中获取对象此前曾被赋予的值），也包括引发副作用。

[:en]
When a call to a library I/O function returns or an access through a volatile
glvalue is evaluated the side effect is considered complete, even though some
external actions implied by the call (such as the I/O itself) or by the
[`volatile] access may not have completed yet.
[:zh_CN]
当从对某个程序库 I/O 函数的调用中返回时，或通过 volatile 泛左值进行的访问被求值
时，即认为副作用已经完成，而不管由该调用或该 [`volatile] 访问所隐含的某些外部
动作（如 I/O 本身）是否仍未完成。

[para]
[:en]
[+Sequenced before[%sequenced before]] is an asymmetric, transitive, pair-wise
relation between evaluations executed by a single thread ([#intro.multithread]),
which induces a partial order among those evaluations.
[:zh_CN]
[+按顺序早于]关系是在单个线程（[#intro.multithread]）中执行的求值之间的非对称的、
可传递的对偶关系，它在这些求值之间引入了部分顺序。

[:en]
Given any two evaluations [$A] and [$B], if [$A] is sequenced before [$B] (or,
equivalently, [$B] is [+sequenced after] [$A]), then the execution of [$A] shall
precede the execution of [$B].
[:zh_CN]
任意给定两次求值 [$A] 和 [$B]，若 [$A] 按顺序早于 [$B]（或者等价地说，[$B]
[+按顺序晚于] [$A]），则 [$A] 的执行应当在 [$B] 的执行之前进行。

[:en]
If [$A] is not sequenced before [$B] and [$B] is not sequenced before [$A], then
[$A] and [$B] are [+unsequenced].
[:zh_CN]
若 [$A] 未按顺序早于 [$B] 且 [$B] 未按顺序早于 [$A]，则 [$A] 和 [$B] 是
[+无顺序的]。

[enter:note]
[:en]
The execution of unsequenced evaluations can overlap.
[:zh_CN]
无顺序的求值之间可以重叠执行。
[exit:note]

[:en]
Evaluations [$A] and [$B] are [+indeterminately sequenced] when either [$A] is
sequenced before [$B] or [$B] is sequenced before [$A], but it is unspecified
which.
[:zh_CN]
当或者 [$A] 按顺序早于 [$B] 或者 [$B] 按顺序早于 [$A]，但未指明是哪个时，称求值
[$A] 和 [$B] 是[+未定顺序的]。

[enter:note]
[:en]
Indeterminately sequenced evaluations cannot overlap, but either could be
executed first.
[:zh_CN]
未定顺序的求值之间不能重叠，但其中任何一个都可以首先执行。
[exit:note]

[:en]
An expression [$X] is said to be sequenced before an expression [$Y] if every
value computation and every side effect associated with the expression [$X] is
sequenced before every value computation and every side effect associated with
the expression [$Y].
[:zh_CN]
当与表达式 [$X] 关联的所有值计算和所有副作用都按顺序早于与表达式 [$Y] 关联的所有
值计算和所有副作用，称表达式 [$X] 按顺序早于表达式 [$Y]。

[para]
[:en]
Every [%value computation] value computation and [%side effects] side effect
associated with a full-expression is sequenced before every value computation
and side effect associated with the next full-expression to be evaluated.
[#:note#fn:$section.4]
[:zh_CN]
与某个全表达式相关联的任何[%值计算]值计算和[%副作用]副作用，都按顺序早于与
下一个求值的全表达式相关联的任何值计算和副作用。[#:note#fn:$section.4]

[note:foot#fn:$section.4]
[:en]
As specified in [#class.temporary], after a full-expression is evaluated, a
sequence of zero or more invocations of destructor functions for temporary
objects takes place, usually in reverse order of the construction of each
temporary object.
[:zh_CN]
[#class.temporary] 中指出，在全表达式求值之后，执行一系列零个或多个临时对象的
析构函数调用，通常与每个临时对象的构造顺序相反的顺序进行。
[note:end]

[para]
[:en]
[%evaluation [!unspecified order of]]
Except where noted, evaluations of operands of individual operators and of
subexpressions of individual expressions are unsequenced.
[:zh_CN]
[%求值 [!未指明的～顺序]]
除非明确指明，否则一个运算符的不同操作数的求值之间，以及一个表达式的不同子表达式
的求值之间，是无顺序的。

[enter:note]
[:en]
In an expression that is evaluated more than once during the execution of a
program, unsequenced and indeterminately sequenced evaluations of its
subexpressions need not be performed consistently in different evaluations.
[:zh_CN]
对于在程序执行过程中将不止进行一次求值的表达式，若其子表达式的求值若是无顺序的或
未定顺序的，则其不同次的求值不必保持一致。
[exit:note]

[:en]
The value computations of the operands of an operator are sequenced before the
value computation of the result of the operator.
[:zh_CN]
运算符的各操作数的值计算，均按顺序早于该运算符的结果的值计算。

[:en]
If a [%side effects] side effect on a memory location ([#intro.memory]) is
unsequenced relative to either another side effect on the same memory location
or a value computation using the value of any object in the same memory
location, and they are not potentially concurrent ([#intro.multithread]), the
behavior is undefined.
[:zh_CN]
若某个内存位置（[#intro.memory]）上的[%副作用]副作用，与同一个内存位置上的另一个
副作用，或者与使用了同一个内存位置中的任何对象的值所进行的值计算之间是无顺序的，
并且它们不是潜在并发的（[#intro.multithread]），则其行为是未定义的。

[enter:note]
[:en]
The next section imposes similar, but more complex restrictions on potentially
concurrent computations.
[:zh_CN]
下一小节中，对潜在并发的计算施加了与此类似但更加复杂的限制。
[exit:note]

[para:~]
[enter:example]
[codeblock]
void g(int i) {
  i = 7, i++, i++;    // [:en] [`i] becomes [`9]
                      // [|:zh_CN] [`i] 变为 [`9]

  i = i++ + 1;        // [:en] the value of [`i] is incremented
                      // [|:zh_CN] [`i] 的值增加了
  i = i++ + i;        // [:en] the behavior is undefined
                      // [|:zh_CN] 行为未定义
  i = i + 1;          // [:en] the value of [`i] is incremented
                      // [|:zh_CN] [`i] 的值增加了
}
[codeblock:end]
[exit:example]

[para]
[:en]
When calling a function (whether or not the function is inline), every
[%value computation] value computation and [%side effects] side effect
associated with any argument expression, or with the postfix expression
designating the called function, is sequenced before execution of every
expression or statement in the body of the called function.
[:zh_CN]
当调用一个函数时（无论函数是否内联），与任何实参表达式，或者与代表所调用函数的
后缀表达式相关联的任何[%值计算]值计算和[%副作用]副作用，均按顺序早于被调用函数体
中的任何表达式或语句的执行。

[:en]
For each function invocation [$F], for every evaluation [$A] that occurs within
[$F] and every evaluation [$B] that does not occur within [$F] but is evaluated
on the same thread and as part of the same signal handler (if any), either [$A]
is sequenced before [$B] or [$B] is sequenced before [$A].[#:note#fn:$section.5]
[:zh_CN]
对于每个函数调用 [$F]，对于在 [$F] 中发生的每个求值 [$A]，和并非在 [$F] 中发生，
但在同一个线程中，或作为同一个信号处理器的一部分（如果有）进行求值的每个求值
[$B]，要么 [$A] 按顺序早于 [$B]，要么 [$B] 按顺序早于 [$A]。
[#:note#fn:$section.5]

[note:foot#fn:$section.5]
[:en]
In other words, function executions do not interleave with each other.
[:zh_CN]
换句话说，函数之间不交错执行。
[note:end]

[enter:note]
[:en]
If [$A] and [$B] would not otherwise be sequenced then they are indeterminately
sequenced.
[:zh_CN]
若 [$A] 和 [$B] 之间仍未确定顺序，则它们是未定顺序的。
[exit:note]

[:en]
Several contexts in [=Cpp] cause evaluation of a function call, even though no
corresponding function call syntax appears in the translation unit.
[:zh_CN]
在 [=Cpp] 的某些语境中，即使翻译单元中没有出现函数调用的相应语法，也会导致对
函数调用的求值。

[enter:example]
[:en]
Evaluation of a [~new-expression] invokes one or more allocation and constructor
functions; see [#expr.new].
[:zh_CN]
[~new-表达式]的求值会执行一个或多个分配和构造函数；参见 [#expr.new]。

[:en]
For another example, invocation of a conversion function ([#class.conv.fct]) can
arise in contexts in which no function call syntax appears.
[:zh_CN]
又例如，在没有函数调用语法的语境中，可能调用类型转换函数（[#class.conv.fct]）。
[exit:example]

[:en]
The sequencing constraints on the execution of the called function (as described
above) are features of the function calls as evaluated, whatever the syntax of
the expression that calls the function might be.
[:zh_CN]
无论进行函数调用的表达式具有何种语法，对被调函数的执行的顺序性规定（如上所述），
都是函数调用的求值的特征。

[%:end#value.computation]

[:en]
[%behavior[!on receipt of signal]]
[%signal]
[:zh_CN]
[%行为[!接收到信号时的～]]
[%信号]
[para]
[:en]
If a signal handler is executed as a result of a call to the [`std::raise]
function, then the execution of the handler is sequenced after the invocation
of the [`std::raise] function and before its return.
[:zh_CN]
当对 [`std::raise] 函数的调用导致执行了某个信号处理器时，该处理器的执行按顺序
晚于对 [`std::raise] 函数的调用，并早于其返回。

[enter:note]
[:en]
When a signal is received for another reason, the execution of the signal
handler is usually unsequenced with respect to the rest of the program.
[:zh_CN]
当由于其他原因而接收到信号时，信号处理器的执行，通常与程序的其余部分之间是无顺序
的。
[exit:note]

[%:end#program.execution]
