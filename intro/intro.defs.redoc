[section:chapter#intro.defs
    [:en] Terms and definitions
    [:zh_CN] 术语与定义
]

[%:begin#definitions
    [:en] definitions
    [:zh_CN] 定义
]

[para]
[:en]
For the purposes of this document, the terms and definitions given in ISO/IEC
2382-1:1993, the terms, definitions, and symbols given in ISO 80000-2:2009, and
the following apply.
[:zh_CN]
出于本文档的目的，采用 ISO/IED 2382-1:1993 中给出的术语和定义，ISO 80000-2:2009
中给出的术语、定义和符号，以及下列定义。

[para]
[:en]
ISO and IEC maintain terminological databases for use in standardization at the
following addresses:
[:zh_CN]
ISO 和 IEC 为标准化过程维护了以下的术语数据库：

[list]
[item]
[:en] ISO Online browsing platform: available at [url https://www.iso.org/obp]
[:zh_CN] ISO 在线浏览平台：网址为 [url https://www.iso.org/obp]。
[item]
[:en] IEC Electropedia: available at [url http://www.electropedia.org/]
[:zh_CN] IEC 电子百科：网址为 [url http://www.electropedia.org/]。
[list:end]

[para]
[:en]
[#definitions] defines additional terms that are used only in [#library] through
[#[=lastlibchapter]] and [#depr].
[:zh_CN]
[#definitions] 定义了仅在 [#library] 到 [#[=lastlibchapter]] 和 [#depr] 中使用的
其他术语。

[para]
[:en]
Terms that are used only in a small portion of this document are defined where
they are used and italicized where they are defined.
[:zh_CN]
对于仅在本文档中小范围使用的术语，将在其使用之处给出定义，并用楷体字表示之。

[section:def#defns.access
    [:en] access [% access]
    [:zh_CN] 访问（access） [% 访问]
]
[:en]
[span@defcontext execution-time action]
read ([#conv.lval]) or modify([#expr.ass], [#expr.post.incr], [#expr.pre.incr])
the value of an object
[:zh_CN]
[span@defcontext 执行期行为]
读取（[#conv.lval]）或改变（[#expr.ass]，[#expr.post.incr]，[#expr.pre.incr]）
对象的值

[para:~]
[begin:note@defnote]
[:en]
Only objects of scalar type can be accessed.
[:zh_CN]
仅可以访问标量类型的对象。

[:en]
Attempts to read or modify an object of class type typically invoke a
constructor ([#class.ctor]) or assignment operator ([#class.copy.assign]);
such invocations do not themselves constitute accesses, although they may
involve accesses of scalar subobjects.
[:zh_CN]
尝试读取或写入类类型的对象通常会调用某个构造函数（[#class.ctor]）或赋值运算符
（[#class.copy.assign]）；这些调用本身并不构成访问，虽然它们可能涉及到对标量
子对象的访问。
[end:note]
[section:end]

[section:def#defns.argument
    [:en] argument [% argument] [% argument [!function call expression]]
    [:zh_CN] 实参（argument） [% 实参] [% 实参 [!函数调用表达式]]
]
[:en]
[span@defcontext function call expression]
expression in the comma-separated list bounded by the parentheses ([#expr.call])
[:zh_CN]
[span@defcontext 函数调用表达式]
圆括号所包围的逗号分隔列表中的表达式（[#expr.call]）
[section:end]

[section:def#defns.argument.macro
    [:en] argument [% argument] [% argument [!function-like macro]]
    [:zh_CN] 实参（argument） [% 实参] [% 实参 [!函数式宏]]
]
[:en]
[span@defcontext function-like macro]
sequence of preprocessing tokens in the comma-separated list bounded by the
parentheses ([#cpp.replace])
[:zh_CN]
[span@defcontext 函数式宏]
圆括号所包围的逗号分隔列表中的预处理记号序列（[#cpp.replace]）
[section:end]

[section:def#defns.argument.throw
    [:en] argument [% argument] [% argument [!throw expression]]
    [:zh_CN] 实参（argument） [% 实参] [% 实参 [!throw 表达式]]
]
[:en]
[span@defcontext throw expression]
operand of [`throw] ([#expr.throw])
[:zh_CN]
[span@defcontext throw 表达式]
[`throw] 的操作数（[#expr.throw]）
[section:end]

[section:def#defns.argument.templ
    [:en] argument [% argument] [% argument [!template instantiation]]
    [:zh_CN] 实参（argument） [% 实参] [% 实参 [!模板实例化式]]
]
[:en]
[span@defcontext template instantiation]
[~constant-expression], [~type-id] or [~id-expression] in the comma-separated
list bounded by the angle brackets ([#temp.arg])
[:zh_CN]
[span@defcontext 模板实例化式]
角括号所包围的逗号分隔列表中的[~常量表达式]、[~类型标识]或[~标识表达式]
（[#temp.arg]）
[section:end]

[section:def#defns.block
    [:en] block (execution) [% block]
    [:zh_CN] 阻塞（block） [% 阻塞]
]
[:en]
[span@defcontext execution]
wait for some condition (other than for the implementation to execute the
execution steps of the thread of execution) to be satisfied before continuing
execution past the blocking operation
[:zh_CN]
[span@defcontext 执行]
等待直到某种（除了让实现进行执行线程的执行步骤之外的）条件得以满足，然后继续执行
到该阻塞操作之后。
[section:end]

[section:def#defns.block.stmt
    [:en] block (statement) [% block]
    [:zh_CN] 块（语句） [% 阻塞]
]
[:en]
[span@defcontext statement]
compound statement ([#stmt.block])
[:zh_CN]
[span@defcontext 语句]
复合语句（[#stmt.block]）
[section:end]

[section:def#defns.cond.supp
    [:en] conditionally-supported [% behavior [!conditionally-supported]]
    [:zh_CN] 有条件支持的（conditionally-support） [% 行为 [!有条件支持的～]]
]
[:en]
program construct that an implementation is not required to support
[:zh_CN]
实现不必支持的程序构造

[para:~]
[begin:note@defnote]
[:en]
Each implementation documents all conditionally-supported constructs that it
does not support.
[:zh_CN]
每个实现都要对所有它所不支持的有条件支持的程序构造注明文档。
[end:note]
[section:end]

[section:def#defns.diagnostic
    [:en] diagnostic message [% message [!diagnostic]]
    [:zh_CN] 诊断消息（diagnostic message） [% 消息 [!诊断～]]
]
[:en]
message belonging to an [?impldef diagnostic message] subset of the
implementation[=']s output messages
[:zh_CN]
属于实现的输出消息中的一个[?impldef 诊断消息]子集的消息
[section:end]

[section:def#defns.dynamic.type
    [:en] dynamic type [% type [!dynamic]]
    [:zh_CN] 动态类型（dynamic type） [% 类型 [!动态～]]
]
[:en]
[span@defcontext glvalue]
type of the most derived object ([#intro.object]) to which the glvalue refers
[:zh_CN]
[span@defcontext 泛左值]
由泛左值所指代的全派生对象（[#intro.object]）的类型

[para:~]
[begin:example]
[:en]
If a pointer ([#dcl.ptr]) [`p] whose static type is [=lq]pointer to class [`B][=rq]
is pointing to an object of class [`D], derived from [`B] ([#class.derived]),
the dynamic type of the expression [`*p] is [=lq][`D][=rq].
[:zh_CN]
如果静态类型为“类 [`B] 的指针”的指针（[#dcl.ptr]）[`p]，指向一个派生自 [`B]
（[#class.derived]）的类 [`D] 的对象，则表达式 [`*p] 的动态类型是“[`D]”。

[:en]
References ([#dcl.ref]) are treated similarly.
[:zh_CN]
引用（[#dcl.ref]）与此相似。
[end:example]
[section:end]

[section:def#defns.dynamic.type.prvalue
    [:en] dynamic type [% type [!dynamic]]
    [:zh_CN] 动态类型（dynamic type） [% 类型 [!动态～]]
]
[:en]
[span@defcontext prvalue]
static type of the prvalue expression
[:zh_CN]
[span@defcontext 纯右值]
纯右值表达式的静态类型
[section:end]

[section:def#defns.ill.formed
    [:en] ill-formed program [% program [!ill-formed]]
    [:zh_CN] 非良构的（ill-formed）程序 [% 程序 [!非良构的～]]
]
[:en]
program that is not well formed ([#defns.well.formed])
[:zh_CN]
不是良构的程序（[#defns.well.formed]）
[section:end]

[section:def#defns.impl.defined
    [:en] implementation-defined behavior
        [% behavior [!implementation-defined]]
    [:zh_CN] 由实现定义的（implementation-defined）行为
        [% 行为 [!由实现定义的～]]
]
[:en]
behavior, for a well-formed program construct and correct data, that depends on
the implementation and that each implementation documents
[:zh_CN]
由良构的程序构造与正确的数据引发的行为，但它依赖于实现，并且每个实现各自对其注明
文档
[section:end]

[section:def#defns.impl.limits
    [:en] implementation limits [% limits [!implementation]]
    [:zh_CN] 实现限额（implementation limits） [% 限额 [!实现～]]
]
[:en]
restrictions imposed upon programs by the implementation
[:zh_CN]
由实现施加于程序的额度限制
[section:end]

[section:def#defns.locale.specific
    [:en] locale-specific behavior [% behavior [!locale-specific]]
    [:zh_CN] 地域特有的（locale-specific）行为 [% 行为 [!地域特有的～]]
]
[:en]
behavior that depends on local conventions of nationality, culture, and language
that each implementation documents
[:zh_CN]
依赖于当地国别、文化和语言等习俗约定的行为，每个实现各自对其注明文档
[section:end]

[section:def#defns.multibyte
    [:en] multibyte character [% character [!multibyte]]
    [:zh_CN] 多字节（multibyte）字符 [% 字符 [!多字节～]]
]
[:en]
sequence of one or more bytes representing a member of the extended character
set of either the source or the execution environment
[:zh_CN]
一个或多个字节的序列，用于表示源文件或执行环境的扩展字符集中的单个成员

[para:~]
[begin:note@defnote]
[:en]
The extended character set is a superset of the basic character set
([#lex.charset]).
[:zh_CN]
扩展字符集是基本字符集的超集（[#lex.charset]）。
[end:note]
[section:end]

[section:def#defns.parameter
    [:en] parameter
        [% parameter] [% parameter [!function]] [% parameter [!catch clause]]
    [:zh_CN] 形参（parameter）
        [% 形参] [% 形参 [!函数～]] [% 形参 [!catch 子句～]]
]
[:en]
[span@defcontext function or catch clause]
object or reference declared as part of a function declaration or definition or
in the catch clause of an exception handler that acquires a value on entry to
the function or handler
[:zh_CN]
[span@defcontext 函数或 catch 子句]
作为函数声明式或定义式的一部分，或位于异常处理器的 catch 子句中所声明的，在函数
或处理器的入口点获得值的对象或引用
[section:end]

[section:def#defns.parameter.macro
    [:en] parameter [% parameter] [% parameter [!function-like macro]]
    [:zh_CN] 形参（parameter） [% 形参] [% 形参 [!函数式宏～]]
]
[:en]
[span@defcontext function-like macro]
identifier from the comma-separated list bounded by the parentheses immediately
following the macro name
[:zh_CN]
[span@defcontext 函数式宏]
紧跟宏名的圆括号所包围的逗号分隔列表中的标识符
[section:end]

[section:def#defns.parameter.templ
    [:en] parameter [% parameter] [% parameter [!template]]
    [:zh_CN] 形参（parameter） [% 形参] [% 形参 [!模板～]]
]
[:en]
[span@defcontext template]
member of a [~template-parameter-list]
[:zh_CN]
[span@defcontext 模板]
[~模板形参列表]的成员
[section:end]

[section:def#defns.signature
    [:en] signature [% signature]
    [:zh_CN] 签名（signature） [% 签名]
]
[:en]
[span@defcontext function]
name, parameter-type-list ([#dcl.fct]), enclosing namespace (if any), and
trailing [~requires-clause] ([#dcl.decl]) (if any)
[:zh_CN]
[span@defcontext 函数]
名字，形参类型列表（[#dcl.fct]），外围命名空间（如果有），以及尾部
[~requires-子句]（[#dcl.decl]）（如果有）

[para:~]
[begin:note@defnote]
[:en]
Signatures are used as a basis for name mangling and linking.
[:zh_CN]
签名被用作名字重整和连接的基础。
[end:note]
[section:end]

[section:def#defns.signature.templ
    [:en] signature [% signature]
    [:zh_CN] 签名（signature） [% 签名]
]
[:en]
[span@defcontext function template]
name, parameter-type-list ([#dcl.fct]), enclosing namespace (if any), return
type, [~template-head], and trailing [~requires-clause] ([#dcl.decl]) (if any)
[:zh_CN]
[span@defcontext 函数模板]
名字，形参类型列表（[#dcl.fct]），外围命名空间（如果有），返回类型，[~模板头]，
以及尾部 [~requires-子句]（[#dcl.decl]）（如果有）
[section:end]

[section:def#defns.signature.spec
    [:en] signature [% signature]
    [:zh_CN] 签名（signature） [% 签名]
]
[:en]
[span@defcontext function template specialization]
signature of the template of which it is a specialization and its template
arguments (whether explicitly specified or deduced)
[:zh_CN]
[span@defcontext 函数模板特例]
其所特化的模板的签名，及其（显式指定的或推断出来的）模板实参
[section:end]

[section:def#defns.signature.member
    [:en] signature [% signature]
    [:zh_CN] 签名（signature） [% 签名]
]
[:en]
[span@defcontext class member function]
name, parameter-type-list ([#dcl.fct]), class of which the function is a member,
[=cv]-qualifiers (if any), [~ref-qualifier] (if any), and trailing
[~requires-clause] ([#dcl.decl]) (if any)
[:zh_CN]
[span@defcontext 类成员函数]
名字，形参类型列表（[#dcl.fct]），以其作为成员的类，[=cv] 限定符（如果有），
[~引用限定符]（如果有），以及尾部 [~requires-子句]（[#dcl.decl]）（如果有）
[section:end]

[section:def#defns.signature.member.templ
    [:en] signature [% signature]
    [:zh_CN] 签名（signature） [% 签名]
]
[:en]
[span@defcontext class member function template]
name, parameter-type-list ([#dcl.fct]), class of which the function is a member,
[=cv]-qualifiers (if any), [~ref-qualifier] (if any), return type (if any),
[~template-head], and trailing [~requires-clause] ([#dcl.decl]) (if any)
[:zh_CN]
[span@defcontext 类成员函数模板]
名字，形参类型列表（[#dcl.fct]），以其作为成员的类，[=cv] 限定符（如果有），
[~引用限定符]（如果有），返回类型（如果有），[~模板头]，以及尾部
[~requires-子句]（[#dcl.decl]）（如果有）
[section:end]

[section:def#defns.signature.member.spec
    [:en] signature [% signature]
    [:zh_CN] 签名（signature） [% 签名]
]
[:en]
[span@defcontext class member function template specialization]
signature of the member function template of which it is a specialization and
its template arguments (whether explicitly specified or deduced)
[:zh_CN]
[span@defcontext 类成员函数模板特例]
其所特化的成员函数模板的签名，及其（显式指定的或推断出来的）模板实参
[section:end]

[section:def#defns.static.type
    [:en] static type [% type [!static]]
    [:zh_CN] 静态类型（static type） [% 类型 [!静态～]]
]
[:en]
type of an expression ([#basic.types]) resulting from analysis of the program
without considering execution semantics
[:zh_CN]
仅通过分析程序，而不考虑其执行语义所得到的表达式的类型（[#basic.types]）

[para:~]
[begin:note@defnote]
[:en]
The static type of an expression depends only on the form of the program in
which the expression appears, and does not change while the program is executing.
[:zh_CN]
表达式的静态类型仅依赖于该表达式所在的程序的代码形式，且在程序执行期间不会改变。
[end:note]
[section:end]

[section:def#defns.unblock
    [:en] unblock [% unblock]
    [:zh_CN] 解除阻塞 [% 解除阻塞]
]
[:en]
satisfy a condition that one or more blocked threads of execution are waiting
for
[:zh_CN]
使由一个或多个被阻塞线程正在等待的条件得以达成
[section:end]

[section:def#defns.undefined
    [:en] undefined behavior [% behavior [!undefined]]
    [:zh_CN] 未定义的（undefined）行为 [% 行为 [!未定义的～]]
]
[:en]
behavior for which this document imposes no requirements
[:zh_CN]
本文档不为之施加任何规定的行为

[para:~]
[begin:note@defnote]
[:en]
Undefined behavior may be expected when this document omits any explicit
definition of behavior or when a program uses an erroneous construct or
erroneous data.
[:zh_CN]
若本文档忽略了对任何行为进行明确的定义，或者当某个程序使用错误的构造或错误的
数据时，预期会出现未定义的行为。

[:en]
Permissible undefined behavior ranges from ignoring the situation completely
with unpredictable results, to behaving during translation or program execution
in a documented manner characteristic of the environment (with or without the
issuance of a diagnostic message), to terminating a translation or execution
(with the issuance of a diagnostic message).
[:zh_CN]
未定义行为所允许的的范围包括：完全将之忽略并会具有不可预测的结果，在翻译或程序
执行期间以文档中明确说明的，环境所特有的方式发生动作（并产生或不产生诊断信息），
以及终止一次翻译或执行（并产生诊断消息）等等。

[:en]
Many erroneous program constructs do not engender undefined behavior; they are
required to be diagnosed.
[:zh_CN]
许多错误的程序构造并不会引发未定义行为；它们就需要被诊断出来。

[:en]
Evaluation of a constant expression never exhibits behavior explicitly
specified as undefined in [#intro] through [#cpp] of this document ([#expr.const]).
[:zh_CN]
对常量表达式的求值，不会表现出被本文档的 [#intro] 到 [#cpp] 中所明确指定为
未定义的行为（[#expr.const]）。
[end:note]
[section:end]

[section:def#defns.unspecified
    [:en] unspecified behavior [% behavior [!unspecified]]
    [:zh_CN] 未指明的行为 [% 行为 [!未指明的～]]
]
[:en]
behavior, for a well-formed program construct and correct data, that depends on
the implementation
[:zh_CN]
良构的程序构造和正确的数据可能产生的，取决于实现的行为

[para:~]
[begin:note@defnote]
[:en]
The implementation is not required to document which behavior occurs.
[:zh_CN]
实现并不需要注明发生了哪种行为。

[:en]
The range of possible behaviors is usually delineated by this document.
[:zh_CN]
在本文档中通常都圈定了可能行为的范围。
[end:note]
[section:end]

[section:def#defns.well.formed
    [:en] well-formed program [% program [!well-formed]]
    [:zh_CN] 良构的（well-formed）程序 [% 程序 [!良构的～]]
]
[:en]
[=Cpp] program constructed according to the syntax rules, diagnosable semantic
rules, and the one-definition rule ([#basic.def.odr])
[:zh_CN]
根据语法规则、可诊断的语义规则和单一定义规则（[#basic.def.odr]）所构造的 [=Cpp]
程序
[section:end]

[%:end#definitions]
