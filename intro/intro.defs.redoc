[section:chapter#intro.defs
    [:en] Terms and definitions
    [:zh_CN] 术语与定义
]

[%:begin#definitions
    [:en] definitions
    [:zh_CN] 定义
]

[para]
[:en] For the purposes of this document, the terms and definitions given in
ISO/IEC 2382, ISO 80000-2:2009, and the following apply.
[:zh_CN] 出于本文档的目的，采用 ISO/IEC 2382 和 ISO 80000-2:2009 中给出的术语和
定义，以及下列定义。

[para]
[:en] ISO and IEC maintain terminology databases for use in standardization at
the following addresses:
[:zh_CN] ISO 和 IEC 为标准化过程维护了以下的术语数据库：

[list]
[item]
[:en] ISO Online browsing platform: available at [url https://www.iso.org/obp]
[:zh_CN] ISO 在线浏览平台：网址为 [url https://www.iso.org/obp]。
[item]
[:en] IEC Electropedia: available at [url https://www.electropedia.org/]
[:zh_CN] IEC 电子百科：网址为 [url https://www.electropedia.org/]。
[list:end]

[section:def#defns.access
    [:en] access [% access]
    [:zh_CN] 访问（access） [% 访问]
]
[:en] [span@defcontext execution-time action]
read or modify the value of an object
[:zh_CN] [span@defcontext 执行期行为]
读取或改动对象的值

[para:~]
[begin:note@defnote]
[:en] Only glvalues of scalar type ([#basic.types.general]) can be used to access objects.
[:zh_CN] 仅可以通过标量类型（[#basic.types.general]）的泛左值来访问对象。

[:en] Reads of scalar objects are described in [#conv.lval] and modifications of
scalar objects are described in [#expr.assign], [#expr.post.incr], and [#expr.pre.incr].
[:zh_CN] [#conv.lval] 中描述了标量对象的读取，[#expr.assign]，[#expr.post.incr]，
和 [#expr.pre.incr] 中描述了标量对象的改动。

[:en] Attempts to read or modify an object of class type typically invoke a
constructor ([#class.ctor]) or assignment operator ([#class.copy.assign]);
such invocations do not themselves constitute accesses, although they may
involve accesses of scalar subobjects.
[:zh_CN] 尝试读取或写入类类型的对象通常会调用某个构造函数（[#class.ctor]）或赋值运算符
（[#class.copy.assign]）；这些调用本身并不构成访问，但它们可能涉及到对标量子对象的访问。
[end:note]
[section:end]

[section:def#defns.argument
    [:en] argument [% argument] [% argument [!function call expression]]
    [:zh_CN] 实参（argument） [% 实参] [% 实参 [!函数调用表达式]]
]
[:en] [span@defcontext function call expression]
expression or [~braced-init-list] in the comma-separated list bounded by the parentheses
[:zh_CN] [span@defcontext 函数调用表达式]
圆括号所包围的逗号分隔列表中的表达式或[~花括号初始化列表]
[section:end]

[section:def#defns.argument.macro
    [:en] argument [% argument] [% argument [!function-like macro]]
    [:zh_CN] 实参（argument） [% 实参] [% 实参 [!函数式宏]]
]
[:en] [span@defcontext function-like macro]
sequence of preprocessing tokens in the comma-separated list bounded by the parentheses
[:zh_CN] [span@defcontext 函数式宏]
圆括号所包围的逗号分隔列表中的预处理记号序列
[section:end]

[section:def#defns.argument.throw
    [:en] argument [% argument] [% argument [!throw expression]]
    [:zh_CN] 实参（argument） [% 实参] [% 实参 [!throw 表达式]]
]
[:en] [span@defcontext throw expression]
operand of [`:key throw]
[:zh_CN] [span@defcontext throw 表达式]
[`:key throw] 的操作数
[section:end]

[section:def#defns.argument.templ
    [:en] argument [% argument] [% argument [!template instantiation]]
    [:zh_CN] 实参（argument） [% 实参] [% 实参 [!模板实例化式]]
]
[:en] [span@defcontext template instantiation]
[~constant-expression], [~type-id] or [~id-expression] in the comma-separated
list bounded by the angle brackets
[:zh_CN] [span@defcontext 模板实例化式]
角括号所包围的逗号分隔列表中的[~常量表达式]、[~类型标识]或[~标识表达式]
[section:end]

[section:def#defns.block
    [:en] block (execution) [% block]
    [:zh_CN] 阻塞（block） [% 阻塞]
]
[:en] [span@defcontext execution]
wait for some condition (other than for the implementation to execute the
execution steps of the thread of execution) to be satisfied before continuing
execution past the blocking operation
[:zh_CN] [span@defcontext 执行]
在继续执行到阻塞操作之后前，等待直到某种（除了让实现进行执行线程的执行步骤之外的）
条件得以满足。
[section:end]

[section:def#defns.block.stmt
    [:en] block (statement) [% block]
    [:zh_CN] 块（语句） [% 阻塞]
]
[:en] [span@defcontext statement]
compound statement
[:zh_CN] [span@defcontext 语句]
复合语句
[section:end]

[section:def#defns.c.lib
    [:en] C standard library [%C[!standard library]]
    [:zh_CN] C 标准程序库 [%C[!标准程序库]]
]
[:en] library described in [=IsoC], Clause 7
[:zh_CN] [=IsoC] 第 7 章所描述的程序库

[para:~]
[begin:note@defnote]
[:en] With the qualifications noted in [#[=firstlibchapter]] through [#[=lastlibchapter]]
and in [#diff.library], the C standard library is a subset of the [=Cpp] standard library.
[:zh_CN] 在满足 [#[=firstlibchapter]] 到 [#[=lastlibchapter]]，以及 [#diff.library]
中所提到的限制条件下，C 标准程序库是 [=Cpp] 标准程序库的子集。
[end:note]
[section:end]

[section:def#defns.character
    [:en] character [%character]
    [:zh_CN] 字符 [%字符]
]
[:en] [span@defcontext library]
object which, when treated sequentially, can represent text
[:zh_CN] [span@defcontext 程序库]
一种对象，将其作为序列时可以用于表示文本

[para:~]
[begin:note@defnote]
[:en] The term does not mean only [`char], [`:key char8_t], [`:key char16_t],
[`:key char32_t], and [`:key wchar_t] objects ([#basic.fundamental]), but any
value that can be represented by a type that provides the definitions specified
in [#strings], [#localization], [#input.output], or [#re].
[:zh_CN] 此术语不仅代表 [`char]，[`:key char8_t]，[`:key char16_t]，[`:key char32_t]
和 [`:key wchar_t] 对象（[#basic.fundamental]），而是可以由提供了符合 [#strings]，
[#localization]，[#input.output]，或 [#re] 所指定的各项定义的类型所表示的任何值。
[end:note]
[section:end]

[section:def#defns.character.container
    [:en] character container type [%type[!character container]]
    [:zh_CN] 字符容器类型 [%类型[!字符容器～]]
]
[:en] class or a type used to represent a [?termref#defns.character character]
[:zh_CN] 用于表示[?termref#defns.character 字符]的类或类型

[para:~]
[begin:note@defnote]
[:en] It is used for one of the template parameters of [`char_traits] and the
class templates which use that, such as the string, iostream, and regular
expression class templates.
[:zh_CN] 它被用作 [`char_traits] 以及使用它的类模板的模板形参之一，诸如字符串、
I/O 流和正则表达式等类模板。
[end:note]
[section:end]

[section:def#defns.regex.collating.element
    [:en] collating element [%collating element]
    [:zh_CN] 校排元素 [%校排元素]
]
[:en] sequence of one or more [?termref#defns.character character[!s]] within
the current locale that collate as if they were a single character
[:zh_CN] 当前地域中的一个或多个[?termref#defns.character 字符]的序列，在进行校排
时如同它们是单个字符。
[section:end]

[section:def#defns.component
    [:en] component [%component]
    [:zh_CN] 组件 [%组件]
]
[:en] group of library entities directly related as members,
[?termref#defns.parameter parameter[!s]], or return types
[:zh_CN] 一组程序库实体，以成员、[?termref#defns.parameter 形参]或返回类型的形式直接相关

[para:~]
[begin:note@defnote]
[:en] For example, the class template [`basic_string] and the non-member function
templates that operate on strings are referred to as the string component.
[:zh_CN] 例如，类模板 [`basic_string] 和操作字符串的非成员函数模板被称为字符串组件。
[end:note]
[section:end]

[section:def#defns.cond.supp
    [:en] conditionally-supported [% behavior [!conditionally-supported]]
    [:zh_CN] 有条件支持的（conditionally-support） [% 行为 [!有条件支持的～]]
]
[:en] program construct that an implementation is not required to support
[:zh_CN] 实现不必支持的程序构造

[para:~]
[begin:note@defnote]
[:en] Each implementation documents all conditionally-supported constructs that
it does not support.
[:zh_CN] 每个实现都要对所有它所不支持的有条件支持的程序构造注明文档。
[end:note]
[section:end]

[section:def#defns.const.eval
    [:en] constant evaluation [%constant evaluation]
    [:zh_CN] 常量求值 [%常量求值]
]
[:en] evaluation that is performed as part of evaluating an expression
as a core constant expression ([#expr.const])
[:zh_CN] 将某个表达式作为核心常量表达式（[#expr.const]）求值过程中所进行的求值
[section:end]

[section:def#defns.const.subexpr
    [:en] constant subexpression [%constant subexpression]
    [:zh_CN] 常量子表达式 [%常量子表达式]
]
[:en] expression whose evaluation as subexpression of a [~conditional-expression]
[`CE] would not prevent [`CE] from being a core constant expression
[:zh_CN] 表达式，当其作为一个[~条件表达式] [`CE] 的子表达式进行求值时，不妨碍 [`CE]
成为核心常量表达式
[section:end]

[section:def#defns.deadlock
    [:en] deadlock [%deadlock]
    [:zh_CN] 死锁 [%死锁]
]
[:en] [span@defcontext library]
situation wherein one or more threads are unable to continue execution
because each is [?termref#defns.block block[!ed]] waiting for one or more of the
others to satisfy some condition
[:zh_CN] [span@defcontext 程序库]
一个或多个线程，由于其中每个都由于等待其他线程中的一个或多个来达成某种条件而
[?termref#defns.block 阻塞]，因此无法继续执行的情况
[section:end]

[section:def#defns.default.behavior.impl
    [:en] default behavior [%behavior[!default]]
    [:zh_CN] 缺省行为 [%行为[!缺省～]]
]
[:en] [span@defcontext library implementation]
specific behavior provided by the implementation, within the scope of the
[?termref#defns.required.behavior required behavior]
[:zh_CN] [span@defcontext 程序库实现]
由实现提供的，在[?termref#defns.required.behavior 预期行为]的范围内的特定行为
[section:end]

[section:def#defns.diagnostic
    [:en] diagnostic message [% message [!diagnostic]]
    [:zh_CN] 诊断消息（diagnostic message） [% 消息 [!诊断～]]
]
[:en] message belonging to an [?impldef diagnostic message] subset of the
implementation[=']s output messages
[:zh_CN] 属于实现的输出消息中的一个[?impldef 诊断消息]子集的消息
[section:end]

[section:def#defns.dynamic.type
    [:en] dynamic type [% type [!dynamic]]
    [:zh_CN] 动态类型（dynamic type） [% 类型 [!动态～]]
]
[:en] [span@defcontext glvalue]
type of the most derived object to which the glvalue refers
[:zh_CN] [span@defcontext 泛左值]
由泛左值所指代的全派生对象的类型

[para:~]
[begin:example]
[:en] If a pointer ([#dcl.ptr]) [`p] whose type is [=lq]pointer to class [`B][=rq]
is pointing to a base class subobject of class [`B], whose most derived object
is of class [`D], derived from [`B] ([#class.derived]),
the dynamic type of the expression [`*p] is [=lq][`D][=rq].
[:zh_CN] 如果类型为“类 [`B] 的指针”的指针（[#dcl.ptr]）[`p]，指向一个 [`B] 类型
的基类子对象，其最终拍摄对象为派生自 [`B]（[#class.derived]）的类 [`D]，
则表达式 [`*p] 的动态类型是“[`D]”。

[:en] References ([#dcl.ref]) are treated similarly.
[:zh_CN] 引用（[#dcl.ref]）与此相似。
[end:example]
[section:end]

[section:def#defns.dynamic.type.prvalue
    [:en] dynamic type [% type [!dynamic]]
    [:zh_CN] 动态类型（dynamic type） [% 类型 [!动态～]]
]
[:en] [span@defcontext prvalue]
[?termref#defns.static.type static type] of the prvalue expression
[:zh_CN] [span@defcontext 纯右值]
纯右值表达式的[?termref#defns.static.type 静态类型]
[section:end]

[section:def#defns.erroneous
    [:en] erroneous behavior [%behavior[!erroneous]]
    [:zh_CN] 错误行为 [%行为[!错误～]]
]
[:en] well-defined behavior that the implementation is recommended to diagnose
[:zh_CN] 建议实现予以诊断的良定义的行为

[begin:note@defnote]
[:en] Erroneous behavior is always the consequence of incorrect program code.
[:zh_CN] 错误行为总是由不正确的程序编码所造成的。

[:en] Implementations are allowed, but not required, to diagnose it
([#intro.compliance.general]).
[:zh_CN] 允许实现（但不要求必须）对其进行诊断（[#intro.compliance.general]）。

[:en] Evaluation of a constant expression ([#expr.const]) never exhibits
behavior specified as erroneous in [#intro] through [#[=lastcorechapter]].
[:zh_CN] 常量表达式的求值（[#expr.const]）绝不会表现出从 [#intro] 到
[#[=lastcorechapter]] 中所指定的错误行为。
[end:note]
[section:end]

[section:def#defns.expression.equivalent
    [:en] expression-equivalent [%expression-equivalent]
    [:zh_CN] 按表达式等价 [%表达式等价]
]
[:en] [span@defcontext library]
expressions that all have the same effects, either are all potentially-throwing
or are all not potentially-throwing, and either are all
[?termref#defns.const.subexpr constant subexpression[!s]]
or are all not constant subexpressions
[:zh_CN] [span@defcontext 程序库]
各表达式都具有相同效果，它们要么全部为潜在抛出的，要么都不为潜在抛出的，并且
要么都为[?termref#defns.const.subexpr 常量子表达式]，要么都不为常量子表达式

[para:~]
[begin:example]
[:en] For a value [`x] of type [`int] and a function [`f] that accepts integer arguments,
the expressions [`f(x + 2)], [`f(2 + x)], and [`f(1 + x + 1)] are expression-equivalent.
[:zh_CN] 对于 [`int] 类型的值 [`x] 和接收整数实参的函数 [`f]，表达式 [`f(x + 2)]、
[`f(2 + x)] 和 [`f(1 + x + 1)] 均按表达式等价。
[end:example]
[section:end]

[section:def#defns.regex.finite.state.machine
    [:en] finite state machine [%finite state machine]
    [:zh_CN] 有限状态机 [%有限状态机]
]
[:en] [span@defcontext regular expression]
unspecified data structure that is used to represent a
[?termref#defns.regex.regular.expression regular expression], and
which permits efficient matches against the regular expression to be obtained
[:zh_CN] [span@defcontext 正则表达式]
一种未指明的用于表示[?termref#defns.regex.regular.expression 正则表达式]的数据结构，
允许针对所获得的正则表达式进行高效匹配
[section:end]

[section:def#defns.regex.format.specifier
    [:en] format specifier [%format specifier]
    [:zh_CN] 格式说明符 [%格式说明符]
]
[:en] [span@defcontext regular expression]
sequence of one or more [?termref#defns.character character[!s]] that is
expected to be replaced with some part of a
[?termref#defns.regex.regular.expression regular expression] match
[:zh_CN] [span@defcontext 正则表达式]
一个或多个[?termref#defns.character 字符]的序列，预期会被
[?termref#defns.regex.regular.expression 正则表达式]匹配的某个部分所替换
[section:end]

[section:def#defns.handler
    [:en] handler function [%function[!handler]]
    [:zh_CN] 处理函数 [%函数[!处理～]]
]
[:en] [span@defcontext library]
non-reserved function whose definition may be provided by a [=Cpp] program
[:zh_CN] [span@defcontext 程序库]
非保留函数，可以由 [=Cpp] 程序提供其定义

[para:~]
[begin:note@defnote]
[:en] A [=Cpp] program may designate a handler function at various points in its
execution by supplying a pointer to the function when calling any of the library
functions that install handler functions (see [#support]).
[:zh_CN] [=Cpp] 程序可以在其执行过程中的不同点，通过调用用于安装处理函数的任意
程序库函数，并向其提供函数指针来指定一个处理函数（参见 [#support]）。
[end:note]
[section:end]

[section:def#defns.ill.formed
    [:en] ill-formed program [% program [!ill-formed]]
    [:zh_CN] 非良构的（ill-formed）程序 [% 程序 [!非良构的～]]
]
[:en] program that is not well-formed ([#defns.well.formed])
[:zh_CN] 不是良构的程序（[#defns.well.formed]）
[section:end]

[section:def#defns.impl.defined
    [:en] implementation-defined behavior
        [% behavior [!implementation-defined]]
    [:zh_CN] 由实现定义的（implementation-defined）行为
        [% 行为 [!由实现定义的～]]
]
[:en] behavior, for a [?termref#defns.well.formed well-formed program] construct
and correct data, that depends on the implementation and that each
implementation documents
[:zh_CN] 由[?termref#defns.well.formed 良构的程序]构造与正确的数据引发的行为，
但它依赖于实现，并且每个实现各自对其注明文档
[section:end]

[section:def#defns.order.ptr
    [:en] implementation-defined strict total order over pointers
    [%pointer[!strict total order]]
    [:zh_CN] 由实现定义的指针上的严格全序
    [%指针[!严格全序]]
]
[:en] [span@defcontext library]
[?impldef strict total order over pointer values] strict total ordering over all
pointer values such that the ordering is consistent with the partial order
imposed by the built-in operators [`<], [`>], [`<=], [`>=], and [`<=>]
[:zh_CN] [span@defcontext 程序库]
[?impldef 指针值上的严格全序] 所有指针值上的严格全序，使得其顺序与内建运算符
[`<]、[`>]、[`<=]、[`>=] 和 [`<=>] 所蕴含的偏序相一致
[section:end]

[section:def#defns.impl.limits
    [:en] implementation limit [% limits [!implementation]]
    [:zh_CN] 实现限额（implementation limit） [% 限额 [!实现～]]
]
[:en] restrictions imposed upon programs by the implementation
[:zh_CN] 由实现施加于程序的额度限制
[section:end]

[section:def#defns.locale.specific
    [:en] locale-specific behavior [% behavior [!locale-specific]]
    [:zh_CN] 地域特有的（locale-specific）行为 [% 行为 [!地域特有的～]]
]
[:en] behavior that depends on local conventions of nationality, culture, and
language that each implementation documents
[:zh_CN] 依赖于当地国别、文化和语言等习俗约定的行为，每个实现各自对其注明文档
[section:end]

[section:def#defns.regex.matched
    [:en] matched [%matched] [%regular expression[!matched]]
    [:zh_CN] 匹配 [%匹配] [%正则表达式[!匹配]]
]
[:en] [span@defcontext regular expression]
condition when a sequence of zero or more [?termref#defns.character character[!s]]
correspond to a sequence of characters defined by the pattern
[:zh_CN] [span@defcontext 正则表达式]
某个零或更多[?termref#defns.character 字符]的序列与由模式所定义的字符序列相对应
的情况
[section:end]

[section:def#defns.modifier
    [:en] modifier function [%function[!modifier]]
    [:zh_CN] 改动函数 [%函数[!改动～]]
]
[:en] [span@defcontext library]
class member function other than a constructor, assignment operator, or
destructor that alters the state of an object of the class
[:zh_CN] [span@defcontext 程序库]
除构造函数、赋值运算符或析构函数之外的，改变类对象的状态的类成员函数
[section:end]

[section:def#defns.move.assign
    [:en] move assignment [%assignment[!move]]
    [:zh_CN] 移动赋值 [%赋值[!移动～]]
]
[:en] [span@defcontext library]
assignment of an rvalue of some object type to a modifiable lvalue of the same type
[:zh_CN] [span@defcontext 程序库]
以某个对象类型的右值对相同类型的可改动左值进行赋值
[section:end]

[section:def#defns.move.constr
    [:en] move construction [%construction[!move]]
    [:zh_CN] 移动构造 [%构造[!移动～]]
]
[:en] [span@defcontext library]
direct-initialization of an object of some type with an rvalue of the same type
[:zh_CN] [span@defcontext 程序库]
对某个类型的对象用相同类型的右值进行直接初始化
[section:end]

[section:def#defns.nonconst.libcall
    [:en] non-constant library call [% library call [!non-const]]
    [:zh_CN] 非常量程序库调用 [% 程序库调用 [!非常量～]]
]
[:en] invocation of a library function that, as part of evaluating any
expression [`E], prevents [`E] from being a core constant expression
[:zh_CN] 对程序库函数的调用，其作为任何表达式 [`E] 求值的一部分时，妨碍 [`E] 成为
核心常量表达式
[section:end]

[section:def#defns.ntcts
    [:en] NTCTS [%NTCTS] [%string[!null-terminated character type]]
    [:zh_CN] NTCTS [%NTCTS] [%字符串[!空终结～类型]]
]
[:en] [span@defcontext library]
sequence of values that have [?termref#defns.character character] type that
precede the terminating null character type value [`charT()]
[:zh_CN] [span@defcontext 程序库]
[?termref#defns.character 字符]类型的值的序列，后面带有用于终结的空字符类型值 [`charT()]
[section:end]

[section:def#defns.observer
    [:en] observer function [%function[!observer]]
    [:zh_CN] 探察函数 [%函数[!探察～]]
]
[:en] [span@defcontext library]
class member function that accesses the state of an object of the class but does
not alter that state
[:zh_CN] [span@defcontext 程序库]
访问类对象的状态但不改变该状态的类成员函数

[para:~]
[begin:note@defnote]
[:en] Observer functions are specified as [`:key const] member functions.
[:zh_CN] 探察函数被指定为 [`:key const] 成员函数。
[end:note]
[section:end]

[section:def#defns.parameter
    [:en] parameter
        [% parameter] [% parameter [!function]] [% parameter [!catch clause]]
    [:zh_CN] 形参（parameter）
        [% 形参] [% 形参 [!函数～]] [% 形参 [!catch 子句～]]
]
[:en] [span@defcontext function or catch clause]
object or reference declared as part of a function declaration or definition or
in the catch clause of an exception handler that acquires a value on entry to
the function or handler
[:zh_CN] [span@defcontext 函数或 catch 子句]
作为函数声明式或定义式的一部分所声明的，或位于异常处理器的 catch 子句中所声明的，
在函数或处理器的入口点获得值的对象或引用
[section:end]

[section:def#defns.parameter.macro
    [:en] parameter [% parameter] [% parameter [!function-like macro]]
    [:zh_CN] 形参（parameter） [% 形参] [% 形参 [!函数式宏～]]
]
[:en] [span@defcontext function-like macro]
identifier from the comma-separated list bounded by the parentheses immediately
following the macro name
[:zh_CN] [span@defcontext 函数式宏]
紧跟宏名的圆括号所包围的逗号分隔列表中的标识符
[section:end]

[section:def#defns.parameter.templ
    [:en] parameter [% parameter] [% parameter [!template]]
    [:zh_CN] 形参（parameter） [% 形参] [% 形参 [!模板～]]
]
[:en] [span@defcontext template]
member of a [~template-parameter-list]
[:zh_CN] [span@defcontext 模板]
[~模板形参列表]的成员
[section:end]

[section:def#defns.regex.primary.equivalence.class
    [:en] primary equivalence class [%primary equivalence class]
    [:zh_CN] 主等价类 [%主等价类]
]
[:en] [span@defcontext regular expression]
set of one or more [?termref#defns.character character[!s]] which share the same
primary sort key: that is the sort key weighting that depends only upon
character shape, and not accents, case, or locale-specific tailorings
[:zh_CN] [span@defcontext 正则表达式]
共享相同的主排序键的一个或更多[?termref#defns.character 字符]的集合，主排序键的
排序键权重仅依赖于字符形状而非其重音、大小写或地域特有的裁剪修饰
[section:end]

[section:def#defns.prog.def.spec
    [:en] program-defined specialization [%specialization[!program-defined]]
    [:zh_CN] 由程序定义的特化式 [%特化式[!由程序定义的]]
]
[:en] [span@defcontext library]
explicit template specialization or partial specialization that is not part of
the [=Cpp] standard library and not defined by the implementation
[:zh_CN] [span@defcontext 程序库]
并非 [=Cpp] 标准程序库的一部分且并非由实现所定义的显式模板特化式或部分特化式。
[section:end]

[section:def#defns.prog.def.type
    [:en] program-defined type [%type[!program-defined]]
    [:zh_CN] 由程序定义的类型 [%类型[!由程序定义的]]
]
[:en] [span@defcontext library]
non-closure class type or enumeration type that is not part of the [=Cpp]
standard library and not defined by the implementation, or a closure type of a
non-implementation-provided lambda expression, or an instantiation of a
[?termref#defns.prog.def.spec program-defined specialization]
[:zh_CN] [span@defcontext 程序库]
并非 [=Cpp] 标准程序库的一部分且并非由实现所定义的非闭包类类型或枚举类型，或者
并非由实现所提供的 lambda 表达式的闭包类型，或者
[?termref#defns.prog.def.spec 由程序定义的特化式]的实例

[para:~]
[begin:note@defnote]
[:en] Types defined by the implementation include extensions ([#intro.compliance])
and internal types used by the library.
[:zh_CN] 由实现定义的类型包括扩展（[#intro.compliance]）和由程序库使用的内部类型。
[end:note]
[section:end]

[section:def#defns.projection
    [:en] projection [%projection]
    [:zh_CN] 投射 [%投射]
]
[:en] [span@defcontext library]
transformation that an algorithm applies before inspecting the values of elements
[:zh_CN] [span@defcontext 程序库]
算法在审查元素的值之前所实施的变换

[begin:example]
[codeblock]
std::pair<int, std::string_view> pairs[] = {{2, "foo"}, {1, "bar"}, {0, "baz"}};
std::ranges::sort(pairs, std::ranges::less{}, [](auto const& p) { return p.first; });
[codeblock:end]
[:en] sorts the pairs in increasing order of their [`first] members:
[:zh_CN] 将各个对偶以它们的 [`first] 成员的增序进行排序。
[codeblock]
{{0, "baz"}, {1, "bar"}, {2, "foo"}}
[codeblock:end]
[end:example]
[section:end]

[section:def#defns.referenceable
    [:en] referenceable type [%type[!referenceable]]
    [:zh_CN] 可被引用的类型 [%类型[!可引用～]]
]
[:en] type that is either an object type, a function type that does not have
cv-qualifiers or a [~ref-qualifier], or a reference type
[:zh_CN] 对象类型，没有 cv 限定符和[~引用限定符]的函数类型，或者引用类型

[para:~]
[begin:note@defnote]
[:en] The term describes a type to which a reference can be created, including
reference types.
[:zh_CN] 这个术语说明可以为其创建引用的类型，其中包括引用类型。
[end:note]
[section:end]

[section:def#defns.regex.regular.expression
    [:en] regular expression
    [:zh_CN] 正则表达式
]
[:en] pattern that selects specific strings from a set of
[?termref#defns.character character] strings
[:zh_CN] 从[?termref#defns.character 字符]串的集合中选择特定字符串的模式
[section:end]

[section:def#defns.replacement
    [:en] replacement function [%function[!replacement]]
    [:zh_CN] 替代函数 [%函数[!替代～]]
]
[:en] [span@defcontext library]
non-reserved function whose definition is provided by a [=Cpp] program
[:zh_CN] [span@defcontext 程序库]
由 [=Cpp] 程序提供定义式的非保留函数

[para:~]
[begin:note@defnote]
[:en] Only one definition for such a function is in effect for the duration of
the program[=']s execution, as the result of creating the program ([#lex.phases])
and resolving the definitions of all translation units ([#basic.link]).
[:zh_CN] 在程序的执行期间这种函数只能有一个定义式发挥作用，这是创建程序时（[#lex.phases]）
对所有翻译单元中的定义式进行决议（[#basic.link]）的结果。
[end:note]
[section:end]

[section:def#defns.required.behavior
    [:en] required behavior [%behavior[!required]]
    [:zh_CN] 预期行为 [%行为[!预期～]]
]
[:en] [span@defcontext library]
description of [?termref#defns.replacement replacement function] and
[?termref#defns.handler handler function] semantics applicable to
both the behavior provided by the implementation and the behavior of any such
function definition in the program
[:zh_CN] [span@defcontext 程序库]
对[?termref#defns.replacement 替代函数]和[?termref#defns.handler 处理函数]语义的
描述，适用于由实现提供的行为和由程序中的函数定义式所提供的行为

[para:~]
[begin:note@defnote]
[:en] If such a function defined in a [=Cpp] program fails to meet the required
behavior when it executes, the behavior is [%undefined] undefined.
[:zh_CN] 若在某 [=Cpp] 程序中定义的函数在执行时不能满足预期行为，则其行为是[%未定义的]未定义的。
[end:note]
[section:end]

[section:def#defns.reserved.function
    [:en] reserved function [%function[!reserved]]
    [:zh_CN] 保留函数 [%函数[!保留～]]
]
[:en] [span@defcontext library]
function, specified as part of the [=Cpp] standard library, that is defined by
the implementation
[:zh_CN] [span@defcontext 程序库]
被指定为 [=Cpp] 标准程序库的一部分，而由实现定义的函数

[para:~]
[begin:note@defnote]
[:en] If a [=Cpp] program provides a definition for any reserved function, the
results are [%undefined] undefined.
[:zh_CN] 若某 [=Cpp] 程序提供了任何保留函数的定义式，则其结果是[%未定义的]未定义的。
[end:note]
[section:end]

[section:def#defns.undefined.runtime
    [:en] runtime-undefined behavior [%behavior[!runtime-undefined]]
    [:zh_CN] 运行时未定义行为 [%行为[!运行时未定义～]]
]
[:en] behavior that is undefined except when it occurs during constant evaluation
[:zh_CN] 仅当不发生于常量求值过程中时未定义的行为

[para:~]
[begin:note@defnote]
[:en] During constant evaluation,
[:zh_CN] 在常量求值中，
[list]
[item]
[:en@~] it is [?impldef whether runtime-undefined behavior results in the
expression being deemed non-constant] whether runtime-undefined behavior results
in the expression being deemed non-constant (as specified in [#expr.const]) and
[:zh_CN@~] 运行时未定义行为是否会导致表达式被视为非常量表达式（如 [#expr.const] 的规定）
是[?impldef 运行时未定义行为是否会导致表达式被视为非常量表达式]，并且
[item]
[:en@~] runtime-undefined behavior has no other effect.
[:zh_CN@~] 运行时未定义行为没有其他效果。
[list:end]
[end:note]
[section:end]

[section:def#defns.signature
    [:en] signature [% signature]
    [:zh_CN] 签名（signature） [% 签名]
]
[:en] [span@defcontext function]
name, parameter-type-list, and enclosing namespace
[:zh_CN] [span@defcontext 函数]
名字，形参类型列表，以及外围命名空间

[para:~]
[begin:note@defnote]
[:en] Signatures are used as a basis for name mangling and linking.
[:zh_CN] 签名被用作名字重整和连接的基础。
[end:note]
[section:end]

[section:def#defns.signature.friend
    [:en] signature [% signature]
    [:zh_CN] 签名（signature） [% 签名]
]
[:en] [span@defcontext non-template friend function with trailing [~requires-clause]]
name, parameter-type-list, enclosing class, and trailing [~requires-clause]
[:zh_CN] [span@defcontext 带有尾部 [~requires-子句]的非模板友元函数]
名字，形参类型列表，外围类，以及尾部 [~requires-子句]
[section:end]

[section:def#defns.signature.templ
    [:en] signature [% signature]
    [:zh_CN] 签名（signature） [% 签名]
]
[:en] [span@defcontext function template]
name, parameter-type-list, enclosing namespace, return type,
[?termref#defns.signature.template.head signature] of the [~template-head], and
trailing [~requires-clause] (if any)
[:zh_CN] [span@defcontext 函数模板]
名字，形参类型列表，外围命名空间，返回类型，[~模板头]的
[?termref#defns.signature.template.head 签名]，以及尾部 [~requires-子句]（如果有）
[section:end]

[section:def#defns.signature.templ.friend
    [:en] signature [% signature]
    [:zh_CN] 签名（signature） [% 签名]
]
[:en] [span@defcontext friend function template with constraint involving enclosing
template parameters]
name, parameter-type-list, return type, enclosing class,
[?termref#defns.signature.template.head signature] of the [~template-head], and
trailing [~requires-clause] (if any)
[:zh_CN] [span@defcontext 带有涉及外围模板形参的约束的友元函数模板]
名字，形参类型列表，返回类型，外围类，[~模板头]的
[?termref#defns.signature.template.head 签名]，以及尾部 [~requires-子句]（如果有）
[section:end]

[section:def#defns.signature.spec
    [:en] signature [% signature]
    [:zh_CN] 签名（signature） [% 签名]
]
[:en] [span@defcontext function template specialization]
[?termref#defns.signature.templ signature] of the template of which it is a
specialization and its template [?termref#defns.argument.templ argument[!s]]
(whether explicitly specified or deduced)
[:zh_CN] [span@defcontext 函数模板特例]
其所特化的模板的[?termref#defns.signature.templ 签名]，及其（显式指定的或推断
出来的）模板[?termref#defns.argument.templ 实参]
[section:end]

[section:def#defns.signature.member
    [:en] signature [% signature]
    [:zh_CN] 签名（signature） [% 签名]
]
[:en] [span@defcontext class member function]
name, parameter-type-list, class of which the function is a member,
[=cv]-qualifiers (if any), [~ref-qualifier] (if any), and trailing
[~requires-clause] (if any)
[:zh_CN] [span@defcontext 类成员函数]
名字，形参类型列表，以其作为成员的类，[=cv] 限定符（如果有），[~引用限定符]
（如果有），以及尾部 [~requires-子句]（如果有）
[section:end]

[section:def#defns.signature.member.templ
    [:en] signature [% signature]
    [:zh_CN] 签名（signature） [% 签名]
]
[:en] [span@defcontext class member function template]
name, parameter-type-list, class of which the function is a member,
[=cv]-qualifiers (if any), [~ref-qualifier] (if any), return type (if any),
[?termref#defns.signature.template.head signature] of the [~template-head], and
trailing [~requires-clause] (if any)
[:zh_CN] [span@defcontext 类成员函数模板]
名字，形参类型列表，以其作为成员的类，[=cv] 限定符（如果有），[~引用限定符]
（如果有），返回类型（如果有），[~模板头]的
[?termref#defns.signature.template.head 签名]，以及尾部 [~requires-子句]（如果有）
[section:end]

[section:def#defns.signature.member.spec
    [:en] signature [% signature]
    [:zh_CN] 签名（signature） [% 签名]
]
[:en] [span@defcontext class member function template specialization]
[?termref#defns.signature.member.templ signature] of the member function
template of which it is a specialization and its template arguments (whether
explicitly specified or deduced)
[:zh_CN] [span@defcontext 类成员函数模板特例]
其所特化的成员函数模板的[?termref#defns.signature.member.templ 签名]，及其
（显式指定的或推断出来的）模板实参
[section:end]

[section:def#defns.signature.template.head
    [:en] signature [% signature]
    [:zh_CN] 签名（signature） [% 签名]
]
[:en] [span@defcontext [~template-head]]
template [?termref#defns.parameter.templ parameter] list, excluding template
parameter names and default [?termref#defns.argument.templ argument[!s]], and
[~requires-clause] (if any)
[:zh_CN] [span@defcontext [~模板头]]
模板[?termref#defns.parameter.templ 形参]列表，不包括各模板形参名和默认
[?termref#defns.argument.templ 实参]，以及 [~requires-子句]（如果有）
[section:end]

[section:def#defns.stable
    [:en] stable algorithm [%algorithm[!stable]] [%stable algorithm]
    [:zh_CN] 稳定算法 [%算法[!稳定～]] [%稳定算法]
]
[:en] [span@defcontext library]
algorithm that preserves, as appropriate to the particular algorithm, the order
of elements
[:zh_CN] [span@defcontext 程序库]
保留元素顺序的算法，其方式适合于该特定算法

[para:~]
[begin:note@defnote]
[:en] Requirements for stable algorithms are given in [#algorithm.stable].
[:zh_CN] [#algorithm.stable] 中给出了对稳定算法的规定。
[end:note]
[section:end]

[section:def#defns.static.type
    [:en] static type [% type [!static]]
    [:zh_CN] 静态类型（static type） [% 类型 [!静态～]]
]
[:en] type of an expression resulting from analysis of the program without
considering execution semantics
[:zh_CN] 仅通过分析程序，而不考虑其执行语义所得到的表达式的类型

[para:~]
[begin:note@defnote]
[:en] The static type of an expression depends only on the form of the program in
which the expression appears, and does not change while the program is executing.
[:zh_CN] 表达式的静态类型仅依赖于该表达式所在的程序的代码形式，且在程序执行期间不会改变。
[end:note]
[section:end]

[section:def#defns.regex.subexpression
    [:en] sub-expression [%sub-expression[!regular expression]]
    [:zh_CN] 子表达式 [%子表达式[!正则表达式]]
]
[:en] [span@defcontext regular expression]
subset of a [?termref#defns.regex.regular.expression regular expression] that
has been marked by parentheses
[:zh_CN] [span@defcontext 正则表达式]
[?termref#defns.regex.regular.expression 正则表达式]中由括号所标记的子集
[section:end]

[section:def#defns.traits
    [:en] traits class [%traits]
    [:zh_CN] 特征类 [%特征]
]
[:en] [span@defcontext library]
class that encapsulates a set of types and functions necessary for class templates
and function templates to manipulate objects of types for which they are instantiated
[:zh_CN] [span@defcontext 程序库]
针对用以实例化它的类型，封装了由类模板和函数模板在操纵该类型的对象时所需要的一组
类型和函数的类
[section:end]

[section:def#defns.unblock
    [:en] unblock [% unblock]
    [:zh_CN] 解除阻塞 [% 解除阻塞]
]
[:en] satisfy a condition that one or more [?termref#defns.block blocked]
threads of execution are waiting for
[:zh_CN] 使由一个或多个被[?termref#defns.block 阻塞]线程正在等待的条件得以达成
[section:end]

[section:def#defns.undefined
    [:en] undefined behavior [% behavior [!undefined]]
    [:zh_CN] 未定义的（undefined）行为 [% 行为 [!未定义的～]]
]
[:en] behavior for which this document imposes no requirements
[:zh_CN] 本文档不为之施加任何规定的行为

[para:~]
[begin:note@defnote]
[:en] Undefined behavior may be expected when this document omits any explicit
definition of behavior or when a program uses an incorrect construct or invalid data.
[:zh_CN] 若本文档忽略了对任何行为进行明确的定义，或者当某个程序使用不正确的构造或无效的
数据时，预期会出现未定义的行为。

[:en] Permissible undefined behavior ranges from ignoring the situation
completely with unpredictable results, to behaving during translation or program
execution in a documented manner characteristic of the environment (with or
without the issuance of a [?termref#defns.diagnostic diagnostic message]), to
terminating a translation or execution (with the issuance of a diagnostic message).
[:zh_CN] 未定义行为所允许的的范围包括：完全将之忽略并会具有不可预测的结果，在
翻译或程序执行期间以文档中明确说明的，环境所特有的方式发生动作（并产生或不产生
[?termref#defns.diagnostic 诊断消息]），以及终止一次翻译或执行（并产生诊断消息）等等。

[:en] Many incorrect program constructs do not engender undefined behavior;
they are required to be diagnosed.
[:zh_CN] 许多不正确的程序构造并不会引发未定义行为；它们就需要被诊断出来。

[:en] Evaluation of a constant expression ([#expr.const]) never exhibits
behavior explicitly specified as undefined in [#intro] through [#[=lastcorechapter]].
[:zh_CN] 对常量表达式的求值（[#expr.const]），不会表现出被 [#intro] 到
[#[=lastcorechapter]] 中所明确指定为未定义的行为。
[end:note]
[section:end]

[section:def#defns.unspecified
    [:en] unspecified behavior [% behavior [!unspecified]]
    [:zh_CN] 未指明的行为 [% 行为 [!未指明的～]]
]
[:en] behavior, for a [?termref#defns.well.formed well-formed program] construct
and correct data, that depends on the implementation
[:zh_CN] [?termref#defns.well.formed 良构的程序]构造和正确的数据可能产生的，取决于实现的行为

[para:~]
[begin:note@defnote]
[:en] The implementation is not required to document which behavior occurs.
[:zh_CN] 实现并不需要注明发生了哪种行为。

[:en] The range of possible behaviors is usually delineated by this document.
[:zh_CN] 在本文档中通常都圈定了可能行为的范围。
[end:note]
[section:end]

[section:def#defns.valid
    [:en] valid but unspecified state [%valid but unspecified state]
    [:zh_CN] 有效但未指明的状态 [%有效但未指明的状态]
]
[:en] [span@defcontext library]
value of an object that is not specified except that the object[=']s invariants
are met and operations on the object behave as specified for its type
[:zh_CN] [span@defcontext 程序库]
未指明的对象的值，但满足对象的不变式，并且对对象的操作将按其类型所指定的方式进行

[para:~]
[begin:example]
[:en] If an object [`x] of type [`std::vector<int>] is in a valid but
unspecified state, [`x.empty()] can be called unconditionally, and [`x.front()]
can be called only if [`x.empty()] returns [`false].
[:zh_CN] 如果类型 [`std::vector<int>] 的对象 [`x] 处于有效但未指明的状态，则
[`x.empty()] 可以无条件调用，而仅当 [`x.empty()] 返回 [`false] 时可以调用 [`x.front()]。
[end:example]
[section:end]

[section:def#defns.well.formed
    [:en] well-formed program [% program [!well-formed]]
    [:zh_CN] 良构的（well-formed）程序 [% 程序 [!良构的～]]
]
[:en] [=Cpp] program constructed according to the syntax and semantic rules
[:zh_CN] 根据语法和语义规则所构造的 [=Cpp] 程序
[section:end]

[%:end#definitions]
