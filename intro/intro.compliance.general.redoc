[section#intro.compliance.general
    [:en] General
    [:zh_CN] 概述
]

[%:begin#conformance
    [:en] conformance requirements
    [:zh_CN] 一致性规定
]

[%:begin#conformance.general
    [:en] conformance requirements [!general]
    [:zh_CN] 一致性规定 [!综述]
]

[para]
[:en] The set of [+diagnosable rules] consists of all syntactic and semantic
rules in this document except for those rules containing an explicit notation
that [=lq]no diagnostic is required[=rq] or which are described as resulting in
[=lq]undefined behavior[=rq].
[:zh_CN] [+可诊断规则] 的集合包括，在本文档中除了明确标记为“无须诊断”的，或描述为
导致“未定义的行为”的规则外的所有语法和语义规则。

[para]
[:en] [% conformance requirements [!method of description]]
Although this document states only requirements on [=Cpp] implementations, those
requirements are often easier to understand if they are phrased as requirements
on programs, parts of programs, or execution of programs.
[:zh_CN] [% 一致性规定 [!描述方式]]
虽然本文档只需陈述针对 [=Cpp] 实现的规定，但若将这些规定描述为针对程序、程序的
片段或程序的执行的规定，通常会使它们更加容易理解。

[:en] Such requirements have the following meaning:
[:zh_CN] 这些规定具有如下含义：

[list]
[item]
[:en] If a program contains no violations of the rules in [#lex] through
[#[=lastlibchapter]] as well as those specified in [#depr], a conforming
implementation shall accept and correctly execute[#:fn] that program, except
when the implementation[=']s limitations (see below) are exceeded.
[:zh_CN] 如果程序没有违反 [#lex] 到 [#[=lastlibchapter]] 和 [#depr] 中所指定的规则，
那么除非超出了实现的资源限制（见下文），符合标准的实现应该接受并正确执行[#:fn]这个程序。

[note:foot]
[:en] [=lq]Correct execution[=rq] can include undefined behavior and erroneous
behavior, depending on the data being processed; see [#intro.defs] and
[#intro.execution].
[:zh_CN] “正确执行”可能含有未定义行为和错误行为，这取决于其所处理的数据；
见 [#intro.defs] 和 [#intro.execution]。
[note:end]

[item]
[:en] [% behavior [!undefined]]
If a program contains a violation of a rule for which no diagnostic is required,
this document places no requirement on implementations with respect to that program.
[:zh_CN] [% 行为 [!未定义的～]]
如果程序中包含对无须诊断的规则的违反情况，则本文档对于该程序不对实现作任何规定。

[item]
[:en] [% message [!diagnostic]]
Otherwise, if a program contains
[:zh_CN] [% 消息 [!诊断～]]
否则，如果程序中包含
[list]
[item]
[:en@~] a violation of any diagnosable rule,
[:zh_CN@~] 对任何可诊断规则的违反，
[item]
[:en@~] a preprocessing translation unit with a [`#warning] preprocessing
directive ([#cpp.error]), or
[:zh_CN@~] 带有 [`#warning] 预处理指令（[#cpp.error]）的预处理翻译单元，或者
[item]
[:en@~] an occurrence of a construct described in this document as
[=lq]conditionally-supported[=rq] when the implementation does not support that
construct,
[:zh_CN@~] 任何在本文档中被描述为“有条件支持的”而该实现并不支持的程序构造，
[list:end]
[:en@~] a conforming implementation shall issue at least one diagnostic message.
[:zh_CN@~] 则符合标准的实现应该给出至少一条诊断消息。
[list:end]

[begin:note]
[:en]During template argument deduction and substitution, certain constructs
that in other contexts require a diagnostic are treated differently;
see [#temp.deduct].
[:zh_CN] 在进行模板实参推断和代换过程中，对某些在别的语境中应当给出诊断的构造，是以
不同的方式处理的；参见 [#temp.deduct]。
[end:note]

[:en] Furthermore, a conforming implementation shall not accept
[:zh_CN] 此外，符合标准的实现不应接受
[list]
[item]
[:en@~] a preprocessing translation unit containing a [`#error] preprocessing
directive ([#cpp.error]) or
[:zh_CN@~] 包含 [`#error] 预处理指令的预处理翻译单元（[#cpp.error]），或者
[item]
[:en@~] a translation unit with a [~static_assert-declaration] that fails
([#dcl.pre]).
[:zh_CN@~] 带有失败的 [~static_assert-声明式]的翻译单元（[#dcl.pre]）。
[list:end]

[%:begin#conformance.library
    [:en] conformance requirements [!library]
    [:zh_CN] 一致性规定 [!程序库]
]

[para]
[:en]
[%conformance requirements [!classes]]
[%conformance requirements [!class template]]
For classes and class templates, the library Clauses specify partial
definitions.
[:zh_CN]
[%一致性规定 [!类]]
[%一致性规定 [!类模板]]
对于类和类模板，程序库条款中指定了它们的部分定义式。

[:en] Private members ([#class.access]) are not specified, but each
implementation shall supply them to complete the definitions according to the
description in the library Clauses.
[:zh_CN] 其私有成员（[#class.access]）并未予以指明，但每个实现都应按照程序库条款
中的描述提供它们，以补全这些定义式。

[para]
[:en] For functions, function templates, objects, and values, the library
Clauses specify declarations.
[:zh_CN] 对于函数、函数模板、对象和值，程序库条款中指定了它们的声明式。

[:en] Implementations shall supply definitions consistent with the descriptions
in the library Clauses.
[:zh_CN] 各实现应该提供与程序库条款中的描述相一致的定义。

[para]
[:en] A [=Cpp] translation unit ([#lex.phases]) obtains access to the names
defined in the library by including the appropriate standard library header or
importing the appropriate standard library named header unit ([#using.headers]).
[:zh_CN] [=Cpp] 翻译单元（[#lex.phases]）可通过包含相应的标准程序库头文件，或通过
导入相应的标准程序库具名头文件单元（[#using.headers]）来访问程序库中定义的名字。

[para]
[:en] The templates, classes, functions, and objects in the library have
external linkage ([#basic.link]).
[:zh_CN] 程序库中的模板、类、函数和对象具有外部连接（[#basic.link]）。

[:en] The implementation provides definitions for standard library entities, as
necessary, while combining translation units to form a complete [=Cpp] program
([#lex.phases]).
[:zh_CN] 当将翻译单元合并为完整的 [=Cpp] 程序（[#lex.phases]）时，实现应当按需提供
标准程序库中的实体的定义。

[%:end#conformance.library]

[para]
[:en] Two kinds of implementations are defined: a [+:adj hosted [!implementation]]
and a [+:adj freestanding [!implementation]].
[:zh_CN] 共定义了两类实现：[+:adj 宿主式[!实现]]和[+:adj 自立式[!实现]]。

[:en] A freestanding implementation is one in which execution may take place
without the benefit of an operating system.
[:zh_CN] 自立式实现中，程序执行时没有操作系统的支持。

[:en] A hosted implementation supports all the facilities described in this
document, while a freestanding implementation supports the entire [=Cpp] language
described in [#lex] through [#[=lastcorechapter]] and the subset of the library
facilities described in [#compliance].
[:zh_CN] 宿主式实现支持本文档中描述的所有设施，而自立式实现支持从 [#lex] 到 [#[=lastcorechapter]]
中描述的完整 [=Cpp] 语言，和 [#compliance] 中描述的程序库设施的子集。

[para]
[:en] An implementation is encouraged to document its limitations in the size or
complexity of the programs it can successfully process, if possible and where known.
[:zh_CN] 鼓励实现为其所能成功处理的程序的大小和复杂度的限制，在可能且已知的情况下注明文档。

[:en] [#implimits] lists some quantities that can be subject to limitations and
a potential minimum supported value for each quantity.
[:zh_CN] [#implimits] 列出了一些可能收到限制的数量以及每种数量的支持的潜在最小值。

[para]
[:en] A conforming implementation may have extensions (including additional
library functions), provided they do not alter the behavior of any well-formed
program.
[:zh_CN] 符合标准的实现也可以带有扩展（包括额外的程序库功能），它们不能改变任何
良构程序的行为。

[:en] Implementations are required to diagnose programs that use such extensions
that are ill-formed according to this document.
[:zh_CN] 各实现应将使用了这些扩展的程序诊断为对本文档而言是非良构的。

[:en] Having done so, however, they can compile and execute such programs.
[:zh_CN] 虽然如此，它们仍能编译并执行这种程序。

[para]
[:en] Each implementation shall include documentation that identifies all
conditionally-supported constructs [% behavior [!conditionally-supported]] that
it does not support and defines all locale-specific characteristics.[#:fn]
[:zh_CN] 每个实现都应当包含说明文档，标明所有其所不支持的有条件支持的语言构造
[%行为[!有条件支持的～]]，并定义所有地域特有的行为特征[#:fn]。

[note:foot]
[:en] This documentation also defines implementation-defined behavior;
see [#intro.abstract].
[:zh_CN] 这份文档还定义了由实现定义的行为；参见 [#intro.abstract]。
[note:end]

[%:end#conformance.general]
[%:end#conformance]
