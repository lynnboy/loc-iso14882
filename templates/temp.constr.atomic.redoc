[section#temp.constr.atomic
    [:en] Atomic constraints
    [:zh_CN] 原子约束
]

[para]
[:en]
An [+atomic constraint] is formed from an expression [`E] and a mapping from the
template parameters that appear within [`E] to template arguments that are
formed via substitution during constraint normalization in the declaration of a
constrained entity (and, therefore, can involve the unsubstituted template
parameters of the constrained entity), called the [+parameter mapping]
([#temp.constr.decl]).
[:zh_CN]
[+原子约束]，是由一个表达式 [`E]，以及从出现于表达式 [`E] 中的各模板形参向各模板
实参的一项映射（称为[+形参映射]（[#temp.constr.decl]））所构成的，这些模板实参是
在受约束实体的声明式中的约束正规化过程中进行替换所构成的（因此，可能也涉及受约束
实体的未被替代的模板形参）。

[begin:note]
[:en]
Atomic constraints are formed by constraint normalization ([#temp.constr.normal]).
[:zh_CN]
原子约束是通过约束正规化（[#temp.constr.normal]）构成的。

[:en]
[`E] is never a logical [=logop AND] expression ([#expr.log.and]) nor a logical
[=logop OR] expression ([#expr.log.or]).
[:zh_CN]
[`E] 既不能是逻辑与表达式（[#expr.log.and]）也不能是逻辑或表达式（[#expr.log.or]）。
[end:note]

[para]
[:en]
[%identical[!atomic constraints][%atomic constraint[!identical]]]
Two atomic constraints, [$e_1] and [$e_2], are [+identical[%atomic constraint
[!identical]]] if they are formed from the same appearance of the same
[~expression] and if, given a hypothetical template [$A] whose
[~template-parameter-list] consists of [~template-parameter]s corresponding and
equivalent ([#temp.over.link]) to those mapped by the parameter mappings of the
expression, a [~template-id] naming [$A] whose [~template-argument]s are
the targets of the parameter mapping of [$e_1] is the same ([#temp.type]) as
a [~template-id] naming [$A] whose [~template-argument]s are the targets of the
parameter mapping of [$e_2].
[:zh_CN]
[%相同[!原子约束][%原子约束[!相同]]]
如果两个原子约束 [$e_1] 和 [$e_2] 是以相同[~表达式]的相同表现所构成，并且如果
给定一个假想的模板 [$A]，构成其[~模板形参列表]的各个[~模板形参]对应于并等价于
（[#temp.over.link]）该表达式的形参映射所映射的[~模板形参]，则指名 [$A] 且其各
[~模板实参]为 [$e_1] 的形参映射的各目标的[~模板标识]，与指名 [$A] 且其各
[~模板实参]为 [$e_2] 的形参映射的各目标的[~模板标识]相同（[#temp.type]）。

[begin:note]
[:en]
The comparison of parameter mappings of atomic constraints operates in a manner
similar to that of declaration matching with alias template substitution
([#temp.alias]).
[:zh_CN]
对原子约束的形参映射进行的比较，与进行别名模板替换的声明式匹配（[#temp.alias]）
时相似的操作方式进行。

[begin:example]
[codeblock]
template <unsigned N> constexpr bool Atomic = true;
template <unsigned N> concept C = Atomic<N>;
template <unsigned N> concept Add1 = C<N + 1>;
template <unsigned N> concept AddOne = C<N + 1>;
template <unsigned M> void f()
  requires Add1<2 * M>;
template <unsigned M> int f()
  requires AddOne<2 * M> && true;

int x = f<0>();     // [:en] OK, the atomic constraints from concept [`C] in both [`f]s are [`Atomic<N>] \
                    [:zh_CN] OK，两个 [`f] 中来自概念 [`C] 的原子约束均为 [`Atomic<N>]
                    // [:en@~] with mapping similar to [$[`N] \mapsto [`2 * M + 1] \
                    [:zh_CN] 其映射类似于 [$[`N] \mapsto [`2 * M + 1]

template <unsigned N> struct WrapN;
template <unsigned N> using Add1Ty = WrapN<N + 1>;
template <unsigned N> using AddOneTy = WrapN<N + 1>;
template <unsigned M> void g(Add1Ty<2 * M> *);
template <unsigned M> void g(AddOneTy<2 * M> *);

void h() {
  g<0>(nullptr);    // [:en] OK, there is only one [`g] \
                    [:zh_CN] OK，仅有一个 [`g]
}
[codeblock:end]
[end:example]

[:en]
This similarity includes the situation where a program is ill-formed,
no diagnostic required, when the meaning of the program depends on whether two
constructs are equivalent, and they are functionally equivalent but not
equivalent.
[:zh_CN]
这种相似性包括，当程序的含义依赖于两个语言构造是否等价，以及是否它们功能等价但
不等价时，程序非良构，无须诊断的情况。

[begin:example]
[codeblock]
template <unsigned N> void f2()
  requires Add1<2 * N>;
template <unsigned N> int f2()
  requires Add1<N * 2> && true;
void h2() {
  f2<0>();          // [:en] ill-formed, no diagnostic required: \
                    [:zh_CN] 非良构，无须诊断：
                    // [:en@~] requires determination of subsumption between atomic constraints that are \
                    [:zh_CN@~] 需要确定各原子约束之间
                    // [:en@~] functionally equivalent but not equivalent \
                    [:zh_CN@~] 功能等价但不等价的小前提
}
[codeblock:end]
[end:example]
[end:note]

[para]
[:en]
To determine if an atomic constraint is [+satisfied[%constraint[!satisfaction
[!atomic]]]], the parameter mapping and template arguments are first substituted
into its expression.
[:zh_CN]
为确定原子约束是否[+被满足[%约束[!满足[!原子]]]]，先将其形参映射和模板实参替换到
其表达式之中。

[:en]
If substitution results in an invalid type or expression, the constraint is not
satisfied.
[:zh_CN]
如果替换导致了无效类型或表达式，则该约束未能满足。

[:en]
Otherwise, the lvalue-to-rvalue conversion ([#conv.lval]) is performed if
necessary, and [`E] shall be a constant expression of type [`bool].
[:zh_CN]
否则，如果需要就进行左值向右值转换（[#conv.lval]），且 [`E] 应当为 [`bool] 类型
的常量表达式。

[:en]
The constraint is satisfied if and only if evaluation of [`E] results in [`true].
[:zh_CN]
当且仅当 [`E] 的求值结果为 [`true] 时该约束被满足。

[:en]
If, at different points in the program, the satisfaction result is different
for identical atomic constraints and template arguments,
the program is ill-formed, no diagnostic required.
[:zh_CN]
如果在程序的不同位置点，对相同的原子约束和模板实参的满足结果有所不同，则程序
非良构，无须诊断。

[begin:example]
[codeblock]
template<typename T> concept C =
  sizeof(T) == 4 && !true;      // [:en] requires atomic constraints [`sizeof(T) == 4] and [`!true] \
                                   [:zh_CN] 要求原子约束 [`sizeof(T) == 4] 和 [`!true]

template<typename T> struct S {
  constexpr operator bool() const { return true; }
};

template<typename T> requires (S<T>{})
void f(T);                      // #1
void f(int);                    // #2

void g() {
  f(0);                         // [:en] error: expression [`S<int>{}] does not have type [`bool] \
                                   [:zh_CN] 错误：当为 #1 的推断实参检查约束满足情况时，
}                               // [:en@~] while checking satisfaction of deduced arguments of #1; \
                                   [:zh_CN@~] 表达式 [`S<int>{}] 并非类型 [`bool]；
                                // [:en@~] call is ill-formed even though #2 is a better match \
                                   [:zh_CN@~] 即便 #2 是更好的匹配，该调用也是非良构的
[codeblock:end]
[end:example]
