[section#temp.spec.general
    [:en] General
    [:zh_CN] 概述
]

[para]
[:en]
[%specialization[!template]]
The act of instantiating a function, a variable, a class, a member of a class
template, or a member template is referred to as [+template instantiation].
[:zh_CN]
[%特例[!模板～]]
函数，变量，类，类模板的成员，或者成员模板的落实动作被称作[+模板实例化]。

[para]
[:en]
A function instantiated from a function template is called an instantiated
function.
[:zh_CN]
从函数模板中实例化出来的函数被称为已实例化函数。

[:en]
A class instantiated from a class template is called an instantiated class.
[:zh_CN]
从类模板中实例化出来的类被称为已实例化类。

[:en]
A member function, a member class, a member enumeration, or a static data member
of a class template instantiated from the member definition of the class
template is called, respectively, an instantiated member function, member class,
member enumeration, or static data member.
[:zh_CN]
从类模板的成员定义中实例化出来的类模板的成员函数，成员类，成员枚举或静态数据成员
分别被称为已实例化成员函数，成员类，成员枚举或静态数据成员。

[:en]
A member function instantiated from a member function template is called an
instantiated member function.
[:zh_CN]
从成员函数模板中实例化出来的成员函数被称为已实例化成员函数。

[:en]
A member class instantiated from a member class template is called an
instantiated member class.
[:zh_CN]
从成员类模板中实例化出来的成员类被称为已实例化成员类。

[:en]
A variable instantiated from a variable template is called an instantiated
variable.
[:zh_CN]
从变量模板实例化出来的变量被称为已实例化变量。

[:en]
A static data member instantiated from a static data member template is called
an instantiated static data member.
[:zh_CN]
从静态数据成员模板实例化出来的静态数据成员被称为已实例化静态数据成员。

[para]
[:en]
An explicit specialization may be declared for a function template, a variable
template, a class template, a member of a class template, or a member template.
[:zh_CN]
可以为函数模板，变量模板，类模板，类模板的成员，或者成员模板声明显式特化式。

[:en]
An explicit specialization declaration is introduced by [`[`:key template]<>].
[:zh_CN]
显式特化声明式是以 [`[`:key template]<>] 开始的。

[:en]
In an explicit specialization declaration for a variable template, a class
template, a member of a class template, or a class member template, the variable
or class that is explicitly specialized shall be specified with a
[~simple-template-id].
[:zh_CN]
在变量模板，类模板，类模板的成员，或类成员模板的显式特化声明式中，应当以
[~简单模板标识]指定被显式特化的变量或类。

[:en]
In the explicit specialization declaration for a function template or a member
function template, the function or member function explicitly specialized may be
specified using a [~template-id].
[:zh_CN]
在函数模版或成员函数模板的显式特化声明式中，可以用[~模板标识]来指定被显式特化的
函数或成员函数。

[begin:example]
[codeblock]
template<class T = int> struct A {
  static int x;
};
template<class U> void g(U) { }

template<> struct A<double> { };        // [:en] specialize for [`T == double] \
                                        [:zh_CN] 为 [`T == double] 特化
template<> struct A<> { };              // [:en] specialize for [`T == int] \
                                        [:zh_CN] 为 [`T == int] 特化
template<> void g(char) { }             // [:en] specialize for [`U == char] \
                                        [:zh_CN] 为 [`U == char] 特化
                                        // [:en@~] [`U] is deduced from the parameter type \
                                        [:zh_CN@~] [`U] 从形参类型推断出来
template<> void g<int>(int) { }         // [:en] specialize for [`U == int] \
                                        [:zh_CN] 为 [`U == int] 特化
template<> int A<char>::x = 0;          // [:en] specialize for [`T == char] \
                                        [:zh_CN] 为 [`T == char] 特化

template<class T = int> struct B {
  static int x;
};
template<> int B<>::x = 1;              // [:en] specialize for [`T == int] \
                                        [:zh_CN] 为 [`T == int] 特化
[codeblock:end]
[end:example]

[para]
[:en]
An instantiated template specialization can be either implicitly instantiated
([#temp.inst]) for a given argument list or be explicitly instantiated
([#temp.explicit]).
[:zh_CN]
已实例化的模板特例，既可以对给定的实参列表进行隐式实例化（[#temp.inst]），也可以
进行显式实例化（[#temp.explicit]）。

[:en]
A [+specialization] is a class, variable, function, or class member that is
either instantiated ([#temp.inst]) from a templated entity or is an explicit
specialization ([#temp.expl.spec]) of a templated entity.
[:zh_CN]
[+特例]是类，变量，函数，或类成员，它要么是从某个模板化实体实例化（[#temp.inst]），
要么是某个模板化实体的显式特化（[#temp.expl.spec]）。

[para]
[:en]
For a given template and a given set of [~template-argument]s,
[:zh_CN]
对于一个给定的模板和一组给定的[~模板实参]，

[list]
[item]
[:en] an explicit instantiation definition shall appear at most once in a
program,
[:zh_CN] 显式实例化定义式在程序中应当最多出现一次，

[item]
[:en] an explicit specialization shall be defined at most once in a program,
as specified in [#basic.def.odr], and
[:zh_CN] 如 [#basic.def.odr] 中所述，其显式特化式在程序中应当最多被定义一次，
并且

[item]
[:en] both an explicit instantiation and a declaration of an explicit
specialization shall not appear in a program unless the explicit specialization
is reachable from the explicit instantiation.
[:zh_CN] 在程序中不能同时出现显式实例化式和显示特化声明式，除非从该显式实例化式
可达该显式特化式。
[list:end]

[:en]
An implementation is not required to diagnose a violation of this rule
if neither declaration is reachable from the other.
[:zh_CN]
如果声明式间互不可达，则实现不需要对这条规则的违反进行诊断。

[para]
[:en]
The usual access checking rules do not apply to names in a declaration of an
explicit instantiation or explicit specialization, with the exception of names
appearing in a function body, default argument, [~base-clause],
[~member-specification], [~enumerator-list], or static data member or variable
template initializer.
[:zh_CN]
显式实例化式或显式特化式的声明式中的名字，除了出现于函数体，默认实参，[~基子句]，
[~成员说明]，[~枚举符列表]，或者静态数据成员或变量模板的初始化式中的名字之外，
并不适用常规的访问检查规则。

[begin:note]
[:en]
In particular, the template arguments and names used in the function declarator
(including parameter types, return types and exception specifications) can be
private types or objects that would normally not be accessible.
[:zh_CN]
尤其是，在函数声明符（包括形参类型，返回类型和异常说明）中使用的模板实参和名字，
可以是一般来说不能访问的私有类型或对象。
[end:note]

[para]
[:en]
Each class template specialization instantiated from a template has its own copy
of any static members.
[:zh_CN]
从同一个模板实例化出来的每个类模板特例都带有任何静态成员的其自己的副本。

[begin:example]
[codeblock]
template<class T> class X {
  static T s;
};
template<class T> T X<T>::s = 0;
X<int> aa;
X<char*> bb;
[codeblock:end]

[:en]
[`X<int>] has a static member [`s] of type [`int] and [`X<char*>] has a static
member [`s] of type [`char*].
[:zh_CN]
[`X<int>] 具有类型为 [`int] 的静态成员 [`s]，而 [`X<char*>] 具有类型为 [`char*]
的静态成员 [`s]。
[end:example]

[para]
[:en]
If a function declaration acquired its function type through a dependent type
([#temp.dep.type]) without using the syntactic form of a function declarator,
the program is ill-formed.
[:zh_CN]
如果某个函数声明式通过待决类型（[#temp.dep.type]）获得其函数类型，而其并未使用
函数声明符的语法形式，则程序非良构。

[begin:example]
[codeblock]
template<class T> struct A {
  static T t;
};
typedef int function();
A<function> a;      // [:en] error: would declare [`A<function>::t] as a static member function \
                    [:zh_CN] 错误：这将会把 [`A<function>::t] 声明为一个静态成员函数
[codeblock:end]
[end:example]
