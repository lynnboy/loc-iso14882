[section#temp.arg.nontype
    [:en] Template non-type arguments
    [:zh_CN] 模板的非类型实参
]

[para]
[:en] If the type [`T] of a [~template-parameter] ([#temp.param]) contains a
placeholder type ([#dcl.spec.auto]) or a placeholder for a deduced class type
([#dcl.type.class.deduct]), the type of the parameter is the type deduced for
the variable [`x] in the invented declaration
[:zh_CN] 如果[~模板形参]的类型 [`T]（[#temp.param]）中包含占位符类型
（[#dcl.spec.auto]）或者推断类类型的占位符（[#dcl.type.class.deduct]），则该形参
的类型是在以下虚构的声明式中对变量 [`x] 所推断的类型：
[codeblock]
T x = [[redoc("$>")]]E;
[codeblock:end]
[:en@~] where [$E] is the template argument provided for the parameter.
[:zh_CN@~] 其中 [$E] 是为此形参提供的模板实参。

[begin:note]
[:en] [$E] is a [~template-argument] or (for a default template argument) an
[~initializer-clause].
[:zh_CN] [$E] 是[~模板实参]或者（对于默认模板实参）是[~初始化式子句]。
[end:note]

[:en] If a deduced parameter type is not permitted for a [~template-parameter]
declaration ([#temp.param]), the program is ill-formed.
[:zh_CN] 如果一个[~模板形参]的声明式（[#temp.param]）不允许出现推断的形参类型，
则程序非良构。

[para]
[:en] The value of a non-type [~template-parameter] [$P] of (possibly deduced)
type [`T] is determined from its template argument [$A] as follows.
[:zh_CN] （可能被推断的）[`T] 类型的非类型[~模板形参]的值，按如下从起模板实参
[$A] 确定。

[:en] If [`T] is not a class type and [$A] is not a [~braced-init-list], [$A]
shall be a converted constant expression ([#expr.const]) of type [`T]; the value
of [$P] is [$A] (as converted).
[:zh_CN] 如果 [`T] 不是类类型且 [$A] 不是[~花括号初始化列表]，则 [$A] 应当为 [`T]
类型的经转换常量表达式（[#expr.const]）；[$P] 的值为（转换后的）[$A]。

[para]
[:en] Otherwise, a temporary variable
[:zh_CN] 否则，引入一个临时变量：
[codeblock]
constexpr T v = [[redoc("$>")]]A;
[codeblock:end]
[:en@~] is introduced.

[:en] The lifetime of [`v] ends immediately after initializing it and
any template parameter object (see below).
[:zh_CN] [`v] 的生存期在它和任何模板形参对象（见下文）的初始化之后立即结束。

[:en] For each such variable, the [~id-expression] [`v] is termed a
[+candidate initializer].
[:zh_CN] 对于每个这种变量，[~标识表达式] [`v] 被称为一个[+候选初始化式]。

[para]
[:en] If [`T] is a class type, a template parameter object ([#temp.param])
exists that is constructed so as to be template-argument-equivalent to [`v];
[$P] denotes that template parameter object.
[:zh_CN] 如果 [`T] 为类类型，存在一个的模板形参对象（[#temp.param]）且被构造为
按模板实参等价于 [`v]；[$P] 代表这个模板形参对象。

[:en] [$P] is copy-initialized from an unspecified candidate initializer
that is template-argument-equivalent to [`v].
[:zh_CN] [$P] 从某个未指明的按模板实参等价于 [`v] 的候选初始化式进行复制初始化。

[:en] If, for the initialization from any candidate initializer,
[:zh_CN] 如果，对于从任何候选初始化式进行的初始化，
[list]
[item]
[:en@~] the initialization would be ill-formed, or
[:zh_CN@~] 该初始化非良构，或者
[item]
[:en@~] the full-expression of an invented [~init-declarator] for the
initialization would not be a constant expression when interpreted as a
[~constant-expression] ([#expr.const]), or
[:zh_CN@~] 为该初始化虚构的[~带初始化声明符]的全表达式，在被解释为[~常量表达式]
时并不是常量表达式（[#expr.const]），或者
[item]
[:en@~] the initialization would cause [$P] to not be
template-argument-equivalent ([#temp.type]) to [`v],
[:zh_CN@~] 该初始化会造成 [$P] 并非按模板实参等价于 [`v]（[#temp.type]），
[list:end]
[:en@~] the program is ill-formed.
[:zh_CN@~] 则程序非良构。

[para]
[:en] Otherwise, the value of [$P] is that of [`v].
[:zh_CN] 否则，[$P] 的值就是 [`v] 的值。

[para]
[:en] For a non-type [~template-parameter] of reference or pointer type, or for
each non-static data member of reference or pointer type in a non-type
[~template-parameter] of class type or subobject thereof, the reference or
pointer value shall not refer or point to (respectively):
[:zh_CN] 对于引用或指针类型的非类型[~模板形参]，或者对于具有类类型的[~模板形参]或其
子对象中的所有引用或指针类型的非静态数据成员，这个引用或指针值（各自）不能指代或指向以下各项：

[list]
[item]
[:en@~] a temporary object ([#class.temporary]),
[:zh_CN@~] 临时对象（[#class.temporary]），
[item]
[:en@~] a string literal object ([#lex.string]),
[:zh_CN@~] 字符串字面量对象（[#lex.string]），
[item]
[:en@~] the result of a [`typeid] expression ([#expr.typeid]),
[:zh_CN@~] [`typeid] 表达式的结果（[#expr.typeid]），
[item]
[:en@~] a predefined [`__func__] variable ([#dcl.fct.def.general]), or
[:zh_CN@~] 预定义的 [`__func__] 变量（[#dcl.fct.def.general]），或者
[item]
[:en@~] a subobject ([#intro.object]) of one of the above.
[:zh_CN@~] 以上各项之一的子对象（[#intro.object]）。
[list:end]

[para]
[begin:example]
[codeblock]
template<const int* pci> struct X { /* ... */ };
int ai[10];
X<ai> xi;                       // [:en] array to pointer and qualification conversions \
                                [:zh_CN] 数组向指针转换和限定转换

struct Y { /* ... */ };
template<const Y& b> struct Z { /* ... */ };
Y y;
Z<y> z;                         // [:en] no conversion, but note extra cv-qualification \
                                [:zh_CN] 无须转换，但注意额外的 cv 限定

template<int (&pa)[5]> struct W { /* ... */ };
int b[5];
W<b> w;                         // [:en] no conversion [:zh_CN] 无须转换

void f(char);
void f(int);

template<void (*pf)(int)> struct A { /* ... */ };

A<&f> a;                        // [:en] selects [`f(int)] [:zh_CN] 选择了 [`f(int)]

template<auto n> struct B { /* ... */ };
B<5> b1;                        // [:en] OK, template parameter type is [`int] \
                                [:zh_CN] OK，模板形参的类型为 [`int]
B<'a'> b2;                      // [:en] OK, template parameter type is [`char] \
                                [:zh_CN] OK，模板形参的类型为 [`char]
B<2.5> b3;                      // [:en] OK, template parameter type is [`char] \
                                [:zh_CN] OK，模板形参的类型为 [`char]
B<void(0)> b4;                  // [:en] error: template parameter type cannot be [`:key void] \
                                [:zh_CN] 错误：模板形参类型不能为 [`:key void]

template<int i> struct C { /* ... */ };
C<{ 42 }> c1;   // OK

struct J1 {
  J1 *self = this;
};
B<J1{}> j1;     // [:en] error: initialization of template parameter object is not a constant expression \
                [:zh_CN] 错误：模板形参对象的初始化不是常量表达式

struct J2 {
  J2 *self = this;
  constexpr J2() {}
  constexpr J2(const J2&) {}
};
B<J2{}> j2;     // [:en] error: template parameter object not template-argument-equivalent to introduced temporary \
                [:zh_CN] 错误：模板形参对象并非按模板实参等价于所引入的临时变量
[codeblock:end]
[end:example]

[para]
[begin:note]
[:en] A [~string-literal] ([#lex.string]) is not an acceptable
[~template-argument] for a [~template-parameter] of non-class type.
[:zh_CN]
[~字符串字面量]（[#lex.string]）对于非类类型的[~模板形参]不是可接受的[~模板实参]。

[begin:example]
[codeblock]
template<class T, T p> class X {
  /* ... */
};

X<const char*, "Studebaker"> x; // [:en] error: string literal object as [~template-argument] \
                                [:zh_CN] 错误：字符串字面量对象用作[~模板实参]
X<const char*, "Knope" + 1> x2; // [:en] error: subobject of string literal object as [~template-argument] \
                                [:zh_CN] 错误：字符串字面量对象的子对象用作[~模板实参]

const char p[] = "Vivisectionist";
X<const char*, p> y;            // OK

struct A {
  constexpr A(const char*) {}
};

X<A, "Pyrophoricity"> z;        // [:en] OK, [~string-literal] is a constructor argument to [`A] \
                                [:zh_CN] OK，[~字符串字面量]是提供给 [`A] 的构造函数实参
[codeblock:end]
[end:example]
[end:note]

[para]
[begin:note]
[:en] A temporary object is not an acceptable [~template-argument] when the
corresponding [~template-parameter] has reference type.
[:zh_CN] 当对应的[~模板形参]为引用类型时， 临时对象不是可接受的[~模板实参]。

[begin:example]
[codeblock]
template<const int& CRI> struct B { /* ... */ };

B<1> b1;                        // [:en] error: temporary would be required for template argument \
                                [:zh_CN] 错误：需要为模板实参创建临时对象

int c = 1;
B<c> b2;                        // OK

struct X { int n; };
struct Y { const int &r; };
template<Y y> struct C { /* ... */ };
C<Y{X{1}.n}> c;                 // [:en] error: subobject of temporary object used to initialize \
                                [:zh_CN] 错误：临时对象的子对象用于初始化
                                // [:en@~] reference member of template parameter \
                                [:zh_CN@~] 模板形参的引用成员
[codeblock:end]
[end:example]
[end:note]
