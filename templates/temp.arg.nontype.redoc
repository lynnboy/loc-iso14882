[section#temp.arg.nontype
    [:en] Template non-type arguments
    [:zh_CN] 模板的非类型实参
]

[para]
[:en]
If the type [`T] of a [~template-parameter] ([#temp.param]) contains a
placeholder type ([#dcl.spec.auto]) or a placeholder for a deduced class type
([#dcl.type.class.deduct]), the type of the parameter is the type deduced for
the variable [`x] in the invented declaration
[:zh_CN]
如果[~模板形参]的类型 [`T]（[#temp.param]）中包含占位符类型（[#dcl.spec.auto]）
或者推断类类型的占位符（[#dcl.type.class.deduct]），则该形参的类型是在以下虚构
的声明式中对变量 [`x] 所推断的类型：

[codeblock:notation]
T x = [~template-argument];
[codeblock:end]

[:en]
If a deduced parameter type is not permitted for a [~template-parameter]
declaration ([#temp.param]), the program is ill-formed.
[:zh_CN]
如果一个[~模板形参]的声明式（[#temp.param]）不允许出现推断的形参类型，则程序
非良构

[para]
[:en]
A [~template-argument] for a non-type [~template-parameter] shall be a converted
constant expression ([#expr.const]) of the type of the [~template-parameter].
[:zh_CN]
非类型[~模板形参]的[~模板实参]应当是该[~模板形参]类型的经转换常量表达式
（[#expr.const]）。

[begin:note]
[:en]
If the [~template-argument] is an overload set (or the address of such,
including forming a pointer-to-member), the matching function is selected from
the set ([#over.over]).
[:zh_CN]
若[~模板实参]是重载集合（或其地址，也包括构成成员指针的那些），则从集合中选择
其所匹配的函数（[#over.over]）。
[end:note]

[para]
[:en]
For a non-type [~template-parameter] of reference or pointer type, or for each
non-static data member of reference or pointer type in a non-type
[~template-parameter] of class type or subobject thereof, the reference or
pointer value shall not refer to or be the address of (respectively):
[:zh_CN]
对于引用或指针类型的非类型[~模板形参]，或者对于具有类类型的[~模板形参]或其子对象
中的所有引用或指针类型的非静态数据成员，这个引用或指针值（各自）不能指代以下各项
或为其地址：

[list]
[item]
[:en@~] a temporary object ([#class.temporary]),
[:zh_CN@~] 临时对象（[#class.temporary]），
[item]
[:en@~] a string literal object ([#lex.string]),
[:zh_CN@~] 字符串字面量对象（[#lex.string]），
[item]
[:en@~] the result of a [`typeid] expression ([#expr.typeid]),
[:zh_CN@~] [`typeid] 表达式的结果（[#expr.typeid]），
[item]
[:en@~] a predefined [`__func__] variable ([#dcl.fct.def.general]), or
[:zh_CN@~] 预定义的 [`__func__] 变量（[#dcl.fct.def.general]），或者
[item]
[:en@~] a subobject ([#intro.object]) of one of the above.
[:zh_CN@~] 以上各项之一的子对象（[#intro.object]）。
[list:end]

[para]
[begin:example]
[codeblock]
template<const int* pci> struct X { /* ... */ };
int ai[10];
X<ai> xi;                       // [:en] array to pointer and qualification conversions \
                                [:zh_CN] 数组向指针转换和限定转换

struct Y { /* ... */ };
template<const Y& b> struct Z { /* ... */ };
Y y;
Z<y> z;                         // [:en] no conversion, but note extra cv-qualification \
                                [:zh_CN] 无须转换，但注意额外的 cv 限定

template<int (&pa)[5]> struct W { /* ... */ };
int b[5];
W<b> w;                         // [:en] no conversion \
                                [:zh_CN] 无须转换

void f(char);
void f(int);

template<void (*pf)(int)> struct A { /* ... */ };

A<&f> a;                        // [:en] selects [`f(int)] \
                                [:zh_CN] 选择了 [`f(int)]

template<auto n> struct B { /* ... */ };
B<5> b1;                        // [:en] OK, template parameter type is [`int] \
                                [:zh_CN] OK，模板形参的类型为 [`int]
B<'a'> b2;                      // [:en] OK, template parameter type is [`char] \
                                [:zh_CN] OK，模板形参的类型为 [`char]
B<2.5> b3;                      // [:en] OK, template parameter type is [`char] \
                                [:zh_CN] OK，模板形参的类型为 [`char]
B<void(0)> b4;                  // [:en] error: template parameter type cannot be [`void] \
                                [:zh_CN] 错误：模板形参类型不能为 [`void]
[codeblock:end]
[end:example]

[para]
[begin:note]
[:en] A [~string-literal] ([#lex.string]) is not an acceptable
[~template-argument] for a [~template-parameter] of non-class type.
[:zh_CN]
[~字符串字面量]（[#lex.string]）对于非类类型的[~模板形参]不是可接受的[~模板实参]。

[begin:example]
[codeblock]
template<class T, T p> class X {
  /* ... */
};

X<const char*, "Studebaker"> x; // [:en] error: string literal object as [~template-argument] \
                                [:zh_CN] 错误：字符串字面量对象用作[~模板实参]
X<const char*, "Knope" + 1> x2; // [:en] error: subobject of string literal object as [~template-argument] \
                                [:zh_CN] 错误：字符串字面量对象的子对象用作[~模板实参]

const char p[] = "Vivisectionist";
X<const char*, p> y;            // OK

struct A {
  constexpr A(const char*) {}
};

X<A, "Pyrophoricity"> z;        // [:en] OK, [~string-literal] is a constructor argument to [`A] \
                                [:zh_CN] OK，[~字符串字面量]是提供给 [`A] 的构造函数实参
[codeblock:end]
[end:example]
[end:note]

[para]
[begin:note]
[:en]
A temporary object is not an acceptable [~template-argument] when the
corresponding [~template-parameter] has reference type.
[:zh_CN]
当对应的[~模板形参]为引用类型时， 临时对象不是可接受的[~模板实参]。

[begin:example]
[codeblock]
template<const int& CRI> struct B { /* ... */ };

B<1> b1;                        // [:en] error: temporary would be required for template argument \
                                [:zh_CN] 错误：需要为模板实参创建临时对象

int c = 1;
B<c> b2;                        // OK

struct X { int n; };
struct Y { const int &r; };
template<Y y> struct C { /* ... */ };
C<Y{X{1}.n}> c;                 // [:en] error: subobject of temporary object used to initialize \
                                [:zh_CN] 错误：临时对象的子对象用于初始化
                                // [:en@~] reference member of template parameter \
                                [:zh_CN@~] 模板形参的引用成员
[codeblock:end]
[end:example]
[end:note]
