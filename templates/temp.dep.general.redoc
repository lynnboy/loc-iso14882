[section#temp.dep.general
    [:en] General
    [:zh_CN] 概述
]

[para]
[:en]
[%dependent name[%name[!dependent]]]
Inside a template, some constructs have semantics which may differ from one
instantiation to another.
[:zh_CN]
[%待决的名字[%名字[!待决的～]]]
在一个模板中，某些语言构造的语义在不同的实例之间是不同的。

[:en]
Such a construct [+depends[%name[!dependent]]] on the template parameters.
[:zh_CN]
这样的构造[+依存[%名字[!待决的～]]]于其模板形参。

[:en]
In particular, types and expressions may depend on the type and/or value of
template parameters (as determined by the template arguments) and this
determines the context for name lookup for certain names.
[:zh_CN]
特别是，类型和表达式可以依存于模板形参的类型和/或值（由其模板实参决定），而且这
也决定了对特定名字进行查找的语境。

[:en]
An expression may be [+type-dependent[%expression[!type-dependent]]] (that is,
its type may depend on a template parameter) or [+value-dependent[%expression
[!value-dependent]]] (that is, its value when evaluated as a constant expression
([#expr.const]) may depend on a template parameter) as described below.
[:zh_CN]
表达式可能是[+类型待决的[%表达式[!类型待决的]]]（亦即，其类型依存于某个模板形参），
或者是[+值待决的[%表达式[!值待决的]]]（亦即，当它的值被作为常量表达式
（[#expr.const]）求值时依存于某个模板形参），正如下文所述。

[para]
[:en]
A [+:adj dependent[!call]] is an expression, possibly formed as a non-member
candidate for an operator ([#over.match.oper]), of the form
[:zh_CN]
[+:adj 待决[!调用]]是一个表达式，可能构成某个运算符的非成员候选
（[#over.match.oper]），其形式为

[syntax:explanation]
[~postfix-expression] [`(] [~:opt expression-list] [`)]
[syntax:end]

[:en@~]
where the [~postfix-expression] is an [~unqualified-id] and
[:zh_CN@~]
其中的[~后缀表达式]是个[~无限定标识]，并且

[list]
[item] 
[:en@~] any of the expressions in the [~expression-list] is a pack expansion
([#temp.variadic]), or
[:zh_CN@~] [~表达式列表]中有任何表达式是包组展开式（[#temp.variadic]），或者

[item]
[:en@~] any of the expressions or [~braced-init-list]s in the [~expression-list]
is type-dependent ([#temp.dep.expr]), or
[:zh_CN@~] [~表达式列表]中有任何表达式或[~花括号初始化列表]是类型待决的表达式
（[#temp.dep.expr]），或者

[item]
[:en@~] the [~unqualified-id] is a [~template-id] in which any of the template
arguments depends on a template parameter.
[:zh_CN@~] 该[~无限定标识]是一个[~模板标识]，其中有任何模板实参依存于某个模板
形参。
[list:end]

[:en]
The component name of an [~unqualified-id] ([#expr.prim.id.unqual]) is dependent
if
[:zh_CN]
以下情况下，[~无限定标识]的成分名（[#expr.prim.id.unqual]）待决：

[list]
[item] 
[:en@~] it is a [~conversion-function-id] whose [~conversion-type-id] is
dependent, or
[:zh_CN@~] 它是个[~转换类型标识]待决的[~转换函数标识]，或者

[item]
[:en@~] it is [`[`:key operator]=] and the current class is a templated entity,
or
[:zh_CN@~] 它是 [`[`:key operator]=] 且当前类是模板化实体，或者

[item]
[:en@~] the [~unqualified-id] is the [~postfix-expression] in a dependent call.
[:zh_CN@~] 该[~无限定标识]是待决调用中的[~后缀表达式]。
[list:end]

[begin:note]
[:en]
Such names are looked up only at the point of the template instantiation
([#temp.point]) in both the context of the template definition and the context
of the point of instantiation ([#temp.dep.candidate]).
[:zh_CN]
这些名字仅在模板实例化点（[#temp.point]），同时于模板定义式的语境和实例化点的
语境中进行查找（[#temp.dep.candidate]）。
[end:note]

[para]
[begin:example]
[codeblock]
template<class T> struct X : B<T> {
  typename T::A* pa;
  void f(B<T>* pb) {
    static int i = B<T>::i;
    pb->j++;
  }
};
[codeblock:end]

[:en]
The base class name [`B<T>], the type name [`T::A], the names [`B<T>::i] and
[`pb->j] explicitly depend on the [~template-parameter].
[:zh_CN]
基类名 [`B<T>]，类型名 [`T::A]，名字 [`B<T>::i] 和 [`pb->j] 明确依存于其
[~模板形参]。
[end:example]
