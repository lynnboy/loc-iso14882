[section#temp.explicit
    [:en] Explicit instantiation
    [:zh_CN] 显式实例化
]

[para]
[:en]
[%instantiation[!explicit]]
[%[`extern template][%instantiation[!explicit]]]
A class, function, variable, or member template specialization can be explicitly
instantiated from its template.
[:zh_CN]
[%实例化[!显式～]]
[%[`extern template][%实例化[!显式～]]]
类、函数、变量或成员模板特例可从其模板显式实例化出来。

[:en] A member function, member class or static data member of a class template
can be explicitly instantiated from the member definition associated with its
class template.
[:zh_CN] 类模板的成员函数、成员类或静态数据成员可从与其类模板相关联的成员定义式
中显式实例化出来。

[para]
[:en] The syntax for explicit instantiation is:
[:zh_CN] 显式实例化式的语法是：

[syntax]
[rule explicit-instantiation [:zh_CN] 显式实例化式 ]
    [| [`:opt:key extern] [`:key template] declaration ]
[rule:end]
[syntax:end]

[:en] There are two forms of explicit instantiation: an explicit instantiation
definition and an explicit instantiation declaration.
[:zh_CN] 有两种形式的显式实例化式：显式实例化定义式和显式实例化声明式。

[:en] An explicit instantiation declaration begins with the [`:key extern]
keyword.
[:zh_CN] 显式实例化声明式以 [`:key extern] 关键词开始。

[para]
[:en] An explicit instantiation shall not use a [~storage-class-specifier]
([#dcl.stc]) other than [`:key thread_local].
[:zh_CN] 显式实例化不能使用除 [`:key thread_local] 以外的[~存储类说明符]（[#dcl.stc]）。

[:en] An explicit instantiation of a function template, member function of a
class template, or variable template shall not use the [`:key inline],
[`:key constexpr], or [`:key consteval] specifiers.
[:zh_CN] 函数模板，类模板的成员函数，或变量模板的显式实例化，不能使用
[`:key inline]、[`:key constexpr] 或 [`:key consteval] 说明符。

[:en] No [~attribute-specifier-seq] ([#dcl.attr.grammer]) shall appertain to an
explicit instantiation.
[:zh_CN] [~属性说明符序列]（[#dcl.attr.grammer]）不能属于显式实例化式。

[para]
[:en] If the explicit instantiation is for a class or member class, the
[~elaborated-type-specifier] in the [~declaration] shall include a
[~simple-template-id]; otherwise, the [~declaration] shall be a
[~simple-declaration] whose [~init-declarator-list] comprises a single
[~init-declarator] that does not have an [~initializer].
[:zh_CN] 若显式实例化的是类或成员类，则其[~声明式]中的[~详述类型说明符]应当包含
一个[~简单模板标识]；否则，其[~声明式]应当为一个[~简单声明式]，其
[~带初始化声明符列表]包含一个没有[~初始化式]的[~带初始化声明符]。

[:en] If the explicit instantiation is for a variable template specialization,
the [~unqualified-id] in the [~declarator] shall be a [~simple-template-id].
[:zh_CN] 若显式实例化的是变量模板特例，则其[~声明符]中的[~无限定标识]应当为一个
[~简单模板标识]。

[begin:example]
[codeblock]
template<class T> class Array { void mf(); };
template class Array<char>;
template void Array<int>::mf();

template<class T> void sort(Array<T>& v) { /* ... */ }
template void sort(Array<char>&);       // [:en] argument is deduced here ([#temp.arg.explicit]) \
                                        [:zh_CN] 实参在此进行推断（[#temp.arg.explicit]）

namespace N {
  template<class T> void f(T&) { }
}
template void N::f<int>(int&);
[codeblock:end]
[end:example]

[para]
[:en] An explicit instantiation does not introduce a name ([#basic.scope.scope]).
[:zh_CN] 显式实例化不会引入名字（[#basic.scope.scope]）。

[:en] A declaration of a function template, a variable template, a member
function or static data member of a class template, or a member function
template of a class or class template shall be reachable from any explicit
instantiation of that entity.
[:zh_CN] 函数模板，变量模板，类模板的成员函数或静态数据成员，或者类或类模板的
成员函数模板的声明式，应当从该实体的任意显式实例化式可达。

[:en] A definition of a class template, a member class of a class template, or a
member class template of a class or class template shall be reachable from any
explicit instantiation of that entity unless an explicit specialization of the
entity with the same template arguments is reachable therefrom.
[:zh_CN] 类模板，类模板的成员类，或者类或类模板的成员类模板的定义式，应当从该
实体的任意显式实例化式可达，除非有某个该实体带有相同模板实参的显式特化式从其可达。

[:en] If the [~declaration] of the explicit instantiation names an
implicitly-declared special member function ([#special]), the program is ill-formed.
[:zh_CN] 若显式实例化式的[~声明式]指名了某个隐式声明的特殊成员函数（[#special]），
则程序非良构。

[para]
[:en] The [~declaration] in an [~explicit-instantiation] and the [~declaration]
produced by the corresponding substitution into the templated function, variable,
or class are two declarations of the same entity.
[:zh_CN] [~显式实例化式]中的[~声明式]，以及通过向模板化的函数、变量或类之中进行
相应的代换所产生的[~声明式]，应当是同一个实体的两个声明式。

[begin:note]
[:en] These declarations need to have matching types as specified in [#basic.link],
except as specified in [#except.spec].
[:zh_CN] 除了在 [#except.spec] 中给出的例外，这些声明式需要根据 [#basic.link]
具有匹配的类型。

[begin:example]
[codeblock]
template<typename T> T var = {};
template float var<float>;      // [:en] OK, instantiated variable has type [`float] \
                                [:zh_CN] OK，实例化的变量类型为 [`float]
template int var<int[16]>[];    // [:en] OK, absence of major array bound is permitted \
                                [:zh_CN] OK，允许缺少主数组边界
template int *var<int>;         // [:en] error: instantiated variable has type [`int] \
                                [:zh_CN] 错误：实例化的变量类型为 [`int]

template<typename T> auto av = T();
template int av<int>;           // [:en] OK, variable with type [`int] can be redeclared with type [`:key auto] \
                                [:zh_CN] OK，类型为 [`int] 的变量可以用类型 [`:key auto] 重复声明

template<typename T> auto f() {}
template void f<int>();         // [:en] error: function with deduced return type \
                                [:zh_CN] 错误：带有推断返回类型的函数
                                // [:en@~] redeclared with non-deduced return type ([#dcl.spec.auto]) \
                                [:zh_CN@~] 以非推断返回类型重新声明（[#dcl.spec.auto]）
[codeblock:end]
[end:example]
[end:note]

[:en] Despite its syntactic form, the [~declaration] in an
[~explicit-instantiation] for a variable is not itself a definition and does not
conflict with the definition instantiated by an explicit instantiation
definition for that variable.
[:zh_CN] 无论其语法形式如何，变量的[~显式实例化式]中的[~声明式]自身并非是定义式，
且并不会与对该变量的显式实例化定义式所实例化的定义式产生冲突。

[para]
[:en] For a given set of template arguments, if an explicit instantiation of a
template appears after a declaration of an explicit specialization for that
template, the explicit instantiation has no effect.
[:zh_CN] 对于一组给定的模板形参，若某个模板的显式实例化式出现于该模板的
显式特化式的声明式之后，则该显式实例化式没有效果。

[:en] Otherwise, for an explicit instantiation definition, the definition of a
function template, a variable template, a member function template, or a member
function or static data member of a class template shall be present in every
translation unit in which it is explicitly instantiated.
[:zh_CN] 否则，对于显式实例化定义式，函数模板，变量模板，成员函数模板，或者
类模板的成员函数或静态数据成员的定义式，应当在其被显式实例化的每个翻译单元中出现。

[para]
[begin:note]
[:en] An explicit instantiation of a constrained template needs to satisfy that
template[=']s associated constraints ([#temp.constr.decl]).
[:zh_CN] 受约束模板的显式实例化需要符合该模板的关联约束（[#temp.constr.decl]）。

[:en] The satisfaction of constraints is determined when forming the template
name of an explicit instantiation in which all template arguments are specified
([#temp.names]), or, for explicit instantiations of function templates, during
template argument deduction ([#temp.deduct.decl]) when one or more trailing
template arguments are left unspecified.
[:zh_CN] 对约束的满足情况是在构成显式实例化式的模板名（其中所有模板形参都被指定）
（[#temp.names]）时确定的，或者对于函数模板的显式实例化式，若其有一个或更多尾部
模板实参未予指定，则是在模板实参推断（[#temp.deduct.decl]）过程中确定的。
[end:note]

[para]
[:en] An explicit instantiation that names a class template specialization is
also an explicit instantiation of the same kind (declaration or definition) of
each of its direct non-template members that has not been previously explicitly
specialized in the translation unit containing the explicit instantiation,
provided that the associated constraints, if any, of that member are satisfied
by the template arguments of the explicit instantiation ([#temp.constr.decl],
[#temp.constr.constr]), except as described below.
[:zh_CN] 除了下面描述的之外，指名某个类模板特例的显式实例化式，同时还是在包含该
显式实例化式的翻译单元中，所有之前并未被显式特化过的直接非模板成员的相同种类
（声明式或定义式）的显式实例化式，前提是该成员的关联约束（如果有）都被该
显式实例化式的模板实参所满足（[#temp.constr.decl]，[#temp.constr.constr]）。

[begin:note]
[:en] In addition, it will typically be an explicit instantiation of certain
[%implementation-dependent] implementation-dependent data about the class.
[:zh_CN] 此外，典型情况下，它还是对有关该类的[%特定于实现]特定于实现的特定数据的
显式实例化式。
[end:note]

[para]
[:en] An explicit instantiation definition that names a class template
specialization explicitly instantiates the class template specialization and is
an explicit instantiation definition of only those members that have been
defined at the point of instantiation.
[:zh_CN] 指名某个类模板特例的显式实例化定义式，显式实例化了这个类模板特例，并且
是在实例化点已定义的成员的显式实例化定义式。

[para]
[:en] An explicit instantiation of a prospective destructor ([#class.dtor])
shall correspond to the selected destructor of the class.
[:zh_CN] 预期析构函数（[#class.dtor]）的显式实例化式应当对应于该类所选中的析构函数。

[para]
[:en] If an entity is the subject of both an explicit instantiation declaration
and an explicit instantiation definition in the same translation unit, the
definition shall follow the declaration.
[:zh_CN] 若某实体在同一翻译单元中同时经受显式实例化声明式和显式实例化定义式，则
其定义式应当在其声明式之后。

[:en] An entity that is the subject of an explicit instantiation declaration and
that is also used in a way that would otherwise cause an implicit instantiation
([#temp.inst]) in the translation unit shall be the subject of an explicit
instantiation definition somewhere in the program; otherwise the program is
ill-formed, no diagnostic required.
[:zh_CN] 经受显式实例化声明式并在其翻译单元中以能够导致隐式实例化（[#temp.inst]）
的方式被使用的实体，应当在程序中的别处经受显式实例化定义式；否则程序非良构，
无须诊断。

[begin:note]
[:en] This rule does apply to inline functions even though an explicit
instantiation declaration of such an entity has no other normative effect.
[:zh_CN] 此规则也适用于内联函数，尽管这种实体的显式实例化声明式并没有其他的规定
效果。

[:en] This is needed to ensure that if the address of an inline function is
taken in a translation unit in which the implementation chose to suppress the
out-of-line body, another translation unit will supply the body.
[:zh_CN] 这用于保证，如果在一个翻译单元中获取某个内联函数的地址，而实现准备在
其中抑制其非内联函数体，那么其他翻译单元将会提供其函数体。
[end:note]

[:en] An explicit instantiation declaration shall not name a specialization of a
template with internal linkage.
[:zh_CN] 显式实例化声明式不能指名带有内部连接的模板的特例。

[para]
[:en] An explicit instantiation does not constitute a use of a default argument,
so default argument instantiation is not done.
[:zh_CN] 显式实例化式并不构成对默认实参的使用，故它并不会实例化默认实参。

[begin:example]
[codeblock]
char* p = 0;
template<class T> T g(T x = &p) { return x; }
template int g<int>(int);       // [:en] OK even though [`&p] isn[=']t an [`int]. \
                                [:zh_CN] OK，即使 [`&p] 并不是 [`int]。
[codeblock:end]
[end:example]
