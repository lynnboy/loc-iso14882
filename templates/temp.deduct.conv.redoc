[section#temp.deduct.conv
    [:en] Deducing conversion function template arguments
    [:zh_CN] 推断转换函数模板实参
]

[para]
[:en]
Template argument deduction is done by comparing the return type of the
conversion function template (call it [`P]) with the type specified by the
[~conversion-type-id] of the [~conversion-function-id] being looked up (call it
[`A]) as described in [#temp.deduct.type].
[:zh_CN]
模板实参推断是对转换函数模板的返回类型（称其为 [`P]），和被查找的[~转换函数标识]
的[~转换类型标识]所指定的类型（称其为 [`A]）进行比较做到的，如
[#temp.deduct.type] 所述。

[:en]
If the [~conversion-function-id] is constructed during overload resolution
([#over.match.funcs]), the following transformations apply.
[:zh_CN]
如果该[~转换函数标识]是在重载决议过程中构造而得的（[#over.match.funcs]），则适用
以下变换。

[para]
[:en]
If [`P] is a reference type, the type referred to by [`P] is used in place of
[`P] for type deduction and for any further references to or transformations of
[`P] in the remainder of this subclause.
[:zh_CN]
若 [`P] 为引用类型，则在类型推断过程，以及本子条款中任何后续的对 [`P] 的涉指或
变换，均由 [`P] 所指代的类型代替 [`P] 进行。

[para]
[:en]
If [`A] is not a reference type:
[:zh_CN]
若 [`A] 不是引用类型：

[list]
[item]
[:en]
If [`P] is an array type, the pointer type produced by the array-to-pointer
standard conversion ([#conv.array]) is used in place of [`P] for type deduction;
otherwise,
[:zh_CN]
若 [`P] 为数组类型，则在类型推断中由数组向指针标准转换（[#conv.array]）所产生的
指针类型替代 [`P]；否则，

[item]
[:en]
If [`P] is a function type, the pointer type produced by the function-to-pointer
standard conversion ([#conv.func]) is used in place of [`P] for type deduction;
otherwise,
[:zh_CN]
若 [`P] 为函数类型，则在类型推断中由函数向指针标准转换（[#conv.func]）所产生的
指针类型替代 [`P]；否则，

[item]
[:en]
If [`P] is a cv-qualified type, the top level cv-qualifiers of [`P][=']s type
are ignored for type deduction.
[:zh_CN]
若 [`P] 为被 cv 限定的类型，则在类型推断中 [`P] 的类型的顶层 cv 限定符被忽略。
[list:end]

[para]
[:en]
If [`A] is a cv-qualified type, the top level cv-qualifiers of [`A][=']s type
are ignored for type deduction.
[:zh_CN]
若 [`A] 为被 cv 限定的类型，则在类型推断中 [`A] 的类型的顶层 cv 限定符被忽略。

[:en]
If [`A] is a reference type, the type referred to by [`A] is used for type
deduction.
[:zh_CN]
若 [`A] 是引用类型，则在类型推断中使用由 [`A] 指代的类型。

[para]
[:en]
In general, the deduction process attempts to find template argument values that
will make the deduced [`A] identical to [`A].
[:zh_CN]
一般地，推断过程试图找到能够使被推断出来的 [`A] 与 [`A] 一致的模板实参值。

[:en]
However, certain attributes of [`A] may be ignored:
[:zh_CN]
然而，[`A] 的某些性质可以忽略：

[list]
[item]
[:en]
If the original [`A] is a reference type, any cv-qualifiers of [`A] (i.e., the
type referred to by the reference).
[:zh_CN]
当原来的 [`A] 为引用类型时，[`A]（就是被该引用所指代的类型）的 cv 限定符。

[item]
[:en]
If the original [`A] is a function pointer or pointer-to-member-function type,
its [`noexcept].
function[=rq] even if the deduced [`A] is [=lq]pointer to [`noexcept] function[=rq].
[:zh_CN]
当原来的 [`A] 为函数指针或成员函数指针类型时，它的 [`noexcept]。

[item]
[:en]
Any cv-qualifiers in [`A] that can be restored by a qualification conversion.
[:zh_CN]
[`A] 中可以经由限定转换恢复的任何 cv 限定符。
[list:end]

[para]
[:en]
These attributes are ignored only if type deduction would otherwise fail.
[:zh_CN]
仅当若非如此类型推断将失败时才会忽略这些性质。

[:en]
If ignoring them allows more than one possible deduced [`A], the type deduction
fails.
[:zh_CN]
若忽略它们产生了多于一个可能的被推断出来的 [`A]，则类型推断失败。
