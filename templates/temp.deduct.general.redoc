[section#temp.deduct.general
    [:en] General
    [:zh_CN] 概述
]

[para]
[:en] When a function template specialization is referenced, all of the template
arguments shall have values.
[:zh_CN] 当涉指函数模板特例时，所有模板实参必须具有值。

[:en] The values can be explicitly specified or, in some cases, be deduced from
the use or obtained from default [~template-argument]s.
[:zh_CN] 这些值既可被显式指定，也可在某些情况下从其使用中推断出来，或从默认[~模板实参]中获取。

[begin:example]
[codeblock]
void f(Array<dcomplex>& cv, Array<int>& ci) {
  sort(cv);                     // [:en] calls [`sort(Array<dcomplex>&)] [:zh_CN] 调用了 [`sort(Array<dcomplex>&)]
  sort(ci);                     // [:en] calls [`sort(Array<int>&)] [:zh_CN] 调用了 [`sort(Array<int>&)]
}
[codeblock:end]
[:en] and
[:zh_CN] 以及
[codeblock]
void g(double d) {
  int i = convert<int>(d);      // [:en] calls [`convert<int,double>(double)] [:zh_CN] 调用了 [`convert<int,double>(double)]
  int c = convert<char>(d);     // [:en] calls [`convert<char,double>(double)] [:zh_CN] 调用了 [`convert<char,double>(double)]
}
[codeblock:end]
[end:example]

[para]
[:en] When an explicit template argument list is specified, if the given
[~template-id] or [~splice-specialization-specifier] is not valid ([#temp.names]),
type deduction fails.
[:zh_CN] 当指定显式模板实参列表时，如果所给定的[~模板标识]或[~拼接特例说明符]
无效（[#temp.names]），则类型推断失败。

[:en] Otherwise, the specified template argument values are substituted for the
corresponding template parameters as specified below.
[:zh_CN] 否则，以所指定的模板实参值根据如下所述对其对应的模板形参进行代换。

[para]
[:en] After this substitution is performed, the function parameter type
adjustments described in [#dcl.fct] are performed.
[:zh_CN] 在实施这项代换之后，实施在 [#dcl.fct] 中所描述的函数形参类型调整。

[begin:example]
[:en] A parameter type of [=lq][`void (const int, int`[5`])][=rq] becomes
[=lq][`void(*)(int,int*)][=rq].
[:zh_CN] 形参类型“[`void (const int, int`[5`])]”变为“[`void(*)(int,int*)]”。
[end:example]

[begin:note]
[:en] A top-level qualifier in a function parameter declaration does not affect
the function type but still affects the type of the function parameter variable
within the function.
[:zh_CN] 函数形参声明式中的顶层限定符不会影响函数类型，但仍会影响函数形参变量在函数中的类型。
[end:note]

[begin:example]
[codeblock]
template <class T> void f(T t);
template <class X> void g(const X x);
template <class Z> void h(Z, Z*);

int main() {
  // [:en] #1: function type is [`f(int)], [`t] is non [`:key const] \
  [:zh_CN] #1：函数类型为 [`f(int)]，[`t] 为非 [`:key const]
  f<int>(1);

  // [:en] #2: function type is [`f(int)], [`t] is [`:key const] \
  [:zh_CN] #2：函数类型为 [`f(int)]，[`t] 为 [`:key const]
  f<const int>(1);

  // [:en] #3: function type is [`g(int)], [`x] is [`:key const] \
  [:zh_CN] #3：函数类型为 [`g(int)]，[`x] 为 [`:key const]
  g<int>(1);

  // [:en] #4: function type is [`g(int)], [`x] is [`:key const] \
  [:zh_CN] #4：函数类型为 [`g(int)]，[`x] 为 [`:key const]
  g<const int>(1);

  // [:en] #5: function type is [`h(int, const int*)] \
  [:zh_CN] #5：函数类型为 [`g(int, const int*)]
  h<const int>(1,0);
}
[codeblock:end]
[end:example]

[para]
[begin:note]
[:en] [`f<int>(1)] and [`f<const int>(1)] call distinct functions even though
both of the functions called have the same function type.
[:zh_CN] 即使函数调用 [`f<int>(1)] 和 [`f<const int>(1)] 所调用的函数具有相同的
函数类型，它们仍会调用不同的函数。
[end:note]

[para]
[:en] The resulting substituted and adjusted function type is used as the type
of the function template for template argument deduction.
[:zh_CN] 所产生的已代换并调整的函数类型被用作模板实参推断的函数模板的类型。

[:en] If a template argument has not been deduced and its corresponding template
parameter has a default argument, the template argument is determined by
substituting the template arguments determined for preceding template
parameters into the default argument.
[:zh_CN] 若某个模板实参并未被推断，并且其对应模板形参具有默认实参，则该默认实参
的确定是通过在默认实参中对之前的模板形参所确定的模板实参进行代换而得到的。

[:en] If the substitution results in an invalid type, as described above, type deduction fails.
[:zh_CN] 如果如上所述的代换导致了无效的类型，则类型推断失败。

[begin:example]
[codeblock]
template <class T, class U = double>
void f(T t = 0, U u = 0);

void g() {
  f(1, 'c');        // [`f<int,char>(1,'c')]
  f(1);             // [`f<int,double>(1,0)]
  f();              // [:en] error: [`T] cannot be deduced [:zh_CN] 错误：[`T] 无法推断
  f<int>();         // [`f<int,double>(0,0)]
  f<int,char>();    // [`f<int,char>(0,0)]
}
[codeblock:end]
[end:example]

[:en] When all template arguments have been deduced or obtained from default
template arguments, all uses of template parameters in the template parameter
list of the template are replaced with the corresponding deduced or default
argument values.
[:zh_CN] 当所有模板实参均被推断或从默认模板实参获得之后，在该模板的模板形参列表
中的所有对模板形参的使用，均代换为所对应的推断出的或默认的实参值。

[:en] If the substitution results in an invalid type, as described above, type deduction fails.
[:zh_CN] 若代换产生了无效类型，则如上所述，类型推断失败。

[:en] If the function template has associated constraints ([#temp.constr.decl]),
those constraints are checked for satisfaction ([#temp.constr.constr]).
[:zh_CN] 如果函数模板带有关联约束（[#temp.constr.decl]），则检查这些约束的满足情况（[#temp.constr.constr]）。

[:en] If the constraints are not satisfied, type deduction fails.
[:zh_CN] 如果约束未能满足，则类型推断失败。

[:en] In the context of a function call, if type deduction has not yet failed,
then for those function parameters for which the function call has arguments,
each function parameter with a type that was non-dependent before substitution
of any explicitly-specified template arguments is checked against its
corresponding argument; if the corresponding argument cannot be implicitly
converted to the parameter type, type deduction fails.
[:zh_CN] 在函数调用的语境中，如果类型推断尚未失败，则对于函数调用中具有实参的
那些函数形参，每个其类型被显式指定的模板实参代换之前非待决的函数形参，均针对它的
对应实参实施检查；如果其对应实参无法隐式转换为形参类型，则类型推断失败。

[begin:note]
[:en] Overload resolution will check the other parameters, including parameters
with dependent types in which no template parameters participate in template
argument deduction and parameters that became non-dependent due to substitution
of explicitly-specified template arguments.
[:zh_CN] 重载决议会检查其他的形参，包括带有待决类型的形参，其中模板形参均不参与
模板实参推断，还包括由于显式指定的模板实参的代换而变为非待决的形参。
[end:note]

[:en] If type deduction has not yet failed, then all uses of template parameters
in the function type are replaced with the corresponding deduced or default argument values.
[:zh_CN] 如果类型推断尚未失败，则在函数类型中使用的所有模板形参均被替换为其对应
的推断或默认实参的值。

[:en] If the substitution results in an invalid type, as described above, type deduction fails.
[:zh_CN] 如果如上所述的代换导致了无效类型，则类型推断失败。

[begin:example]
[codeblock]
template <class T> struct Z {
  typedef typename T::x xx;
};
template <class T> concept C = requires { typename T::A; };
template <C T> typename Z<T>::xx f(void *, T);          // #1
template <class T> void f(int, T);                      // #2
struct A {} a;
struct ZZ {
  template <class T, class = typename Z<T>::xx> operator T *();
  operator int();
};
int main() {
  ZZ zz;
  f(1, a);              // [:en] OK, deduction fails for #1 because there is no conversion from [`int] to [`[:key void]*] \
                        [:zh_CN] OK，对 #1 的推断失败，因为不存在从 [`int] 到 [`[void]*] 的转换
  f(zz, 42);            // [:en] OK, deduction fails for #1 because [`C<int>] is not satisfied \
                        [:zh_CN] OK，对 #1 的推断失败，因为 [`C<int>] 未能满足
}
[codeblock:end]
[end:example]

[para]
[:en] At certain points in the template argument deduction process it is
necessary to take a function type that makes use of template parameters and
replace those template parameters with the corresponding template arguments.
[:zh_CN] 在模板实参推断过程的特定点，需要获得使用了模板形参的函数类型，并将这些
模板形参替换为对应的模板实参。

[:en] This is done at the beginning of template argument deduction when any
explicitly specified template arguments are substituted into the function type,
and again at the end of template argument deduction when any template arguments
that were deduced or obtained from default arguments are substituted.
[:zh_CN] 这将于模板实参推断开始时，当将任何显式指定的模板实参代换到函数类型中时进行，
以及将于模板实参推断结束时，当有任何推断出的或者从默认实参中获得的模板实参被代换时再进行一次。

[para]
[:en] [%deduction[!deduction substitution loci]]
The [+deduction substitution loci] are
[:zh_CN] [%推断[!推断代换位置]]
[+推断代换位置]为
[list]
[item]
[:en@~] the function type outside of the [~noexcept-specifier],
[:zh_CN@~] [~noexcept-说明符]外面的函数类型，
[item]
[:en@~] the [~explicit-specifier],
[:zh_CN@~] 其 [~explicit-说明符]，
[item]
[:en@~] the template parameter declarations, and
[:zh_CN@~] 各模板实参声明式，以及
[item]
[:en@~] the template argument list of a partial specialization ([#temp.spec.partial.general]).
[:zh_CN@~] 部分特化式的模板实参列表（[#temp.spec.partial.general]）。
[list:end]

[:en] The substitution occurs in all types and expressions that are used in the
deduction substitution loci.
[:zh_CN] 这种代换发生在推断代换位置中所使用的所有类型和表达式上。

[:en] The expressions include not only constant expressions such as those that
appear in array bounds or as nontype template arguments but also general
expressions (i.e., non-constant expressions) inside [`sizeof], [`:key decltype],
and other contexts that allow non-constant expressions.
[:zh_CN] 这些表达式不仅包括如用作数组边界或者非类型模板实参这样的常量表达式，还
包括 [`sizeof]、[`:key decltype] 和其他允许非常量表达式的语境之内的一般表达式
（亦即非常量表达式）。

[:en] The substitution proceeds in lexical order and stops when a condition that
causes deduction to fail is encountered.
[:zh_CN] 代换以词法顺序进行，且当遇到导致推断失败的条件时终止。

[:en] If substitution into different declarations of the same function template
would cause template instantiations to occur in a different order or not at all,
the program is ill-formed; no diagnostic required.
[:zh_CN] 如果向同一个函数模板的不同声明式中进行的代换可能导致以不同顺序进行模板
实例化或者无法发生实例化，则程序非良构；无须诊断。

[begin:note]
[:en] The equivalent substitution in exception specifications ([#except.spec])
and function contract assertions ([#dcl.contract.func]) is done only when
the [~noexcept-specifier] or [~function-contract-specifier], respectively,
is instantiated, at which point a program is ill-formed if the substitution
results in an invalid type or expression.
[:zh_CN] 异常说明（[#except.spec]）和函数契约断言（[#dcl.contract.func]）中进行的
等价的代换，分别仅发生于[~noexcept-说明符]或[~函数契约说明符]被实例化时，如果
此时代换导致无效的类型或表达式，则程序非良构。
[end:note]

[begin:example]
[codeblock]
template <class T> struct A { using X = typename T::X; };
template <class T> typename T::X f(typename A<T>::X);
template <class T> void f(...) { }
template <class T> auto g(typename A<T>::X) -> typename T::X;
template <class T> void g(...) { }
template <class T> typename T::X h(typename A<T>::X);
template <class T> auto h(typename A<T>::X) -> typename T::X;   // [:en] redeclaration [:zh_CN] 重复声明
template <class T> void h(...) { }

void x() {
  f<int>(0);        // [:en] OK, substituting return type causes deduction to fail \
                    [:zh_CN] OK，对返回类型进行代换时导致推断失败
  g<int>(0);        // [:en] error, substituting parameter type instantiates [`A<int>] \
                    [:zh_CN] 错误，对形参类型的代换实例化了 [`A<int>]
  h<int>(0);        // [:en] ill-formed, no diagnostic required \
                    [:zh_CN] 非良构，无须诊断
}
[codeblock:end]
[end:example]

[para]
[:en] If a substitution results in an invalid type or expression, type deduction fails.
[:zh_CN] 如果代换导致无效的类型或表达式，则类型推断失败。

[:en] An invalid type or expression is one that would be ill-formed, with a
diagnostic required, if written in the same context using the substituted arguments.
[:zh_CN] 无效的类型或表达式是指当，以所代换的实参在相同语境中写出时它是非良构的，并且需要进行诊断。

[begin:note]
[:en] If no diagnostic is required, the program is still ill-formed.
[:zh_CN] 即便不需要诊断，程序也是非良构的。

[:en] Access checking is done as part of the substitution process.
[:zh_CN] 访问检查作为代换过程的一部分进行。
[end:note]

[:en] Invalid types and expressions can result in a deduction failure
only in the immediate context of the deduction substitution loci.
[:zh_CN] 仅在推断代换位置的直接语境中，无效的类型和表达式可以导致推断失败。

[begin:note]
[:en] The substitution into types and expressions can result in effects such as
the instantiation of class template specializations and/or function template
specializations, the generation of implicitly-defined functions, etc.
[:zh_CN] 向类型和表达式进行的代换可能会产生各种效果，比如类模板特例和/或函数模板
特例的实例化，生成隐式定义的函数，等等。

[:en] Such effects are not in the [=lq]immediate context[=rq] and can result in
the program being ill-formed.
[:zh_CN] 这些效果并非处于“直接语境”中，并且可能导致程序非良构。
[end:note]

[para]
[:en] When substituting into a [~lambda-expression], substitution into its body
is not in the immediate context.
[:zh_CN] 当向 [~lambda-表达式]中进行代换时，其函数体中的代换并不在直接语境中进行。

[begin:note]
[:en] The intent is to avoid requiring implementations to deal with substitution
failure involving arbitrary statements.
[:zh_CN] 其目的是避免要求实现处理涉及任意语句的代换错误。

[begin:example]
[codeblock]
template <class T>
  auto f(T) -> decltype([]() { T::invalid; } ());
void f(...);
f(0);               // [:en] error: invalid expression not part of the immediate context \
                    [:zh_CN] 错误：无效的表达式并非直接语境的一部分

template <class T, std::size_t = sizeof([]() { T::invalid; })>
  void g(T);
void g(...);
g(0);               // [:en] error: invalid expression not part of the immediate context \
                    [:zh_CN] 错误：无效的表达式并非直接语境的一部分

template <class T>
  auto h(T) -> decltype([x = T::invalid]() { });
void h(...);
h(0);               // [:en] error: invalid expression not part of the immediate context \
                    [:zh_CN] 错误：无效的表达式并非直接语境的一部分

template <class T>
  auto i(T) -> decltype([]() -> typename T::invalid { });
void i(...);
i(0);               // [:en] error: invalid expression not part of the immediate context \
                    [:zh_CN] 错误：无效的表达式并非直接语境的一部分

template <class T>
  auto j(T t) -> decltype([](auto x) -> decltype(x.invalid) { } (t));   // #1
void j(...);                                                            // #2
j(0);               // [:en] deduction fails on #1, calls #2 [:zh_CN] 对 #1 的推断失败，调用 #2
[codeblock:end]
[end:example]
[end:note]

[para]
[begin:example]
[codeblock]
struct X { };
struct Y {
  Y(X) {}
};

template <class T> auto f(T t1, T t2) -> decltype(t1 + t2);     // #1
X f(Y, Y);                                                      // #2

X x1, x2;
X x3 = f(x1, x2);   // [:en] deduction fails on #1 (cannot add [`X+X]), calls #2 \
                    [:zh_CN] 在 #1 推断失败（无法对 [`X+X] 进行加法），调用了 #2
[codeblock:end]
[end:example]

[para]
[begin:note]
[:en] Type deduction can fail for the following reasons:
[:zh_CN] 类型推断可能因如下原因失败：

[list]
[item]
[:en] Attempting to instantiate a pack expansion containing multiple packs of differing lengths.
[:zh_CN] 试图实例化包含多个不同长度的包组的包组展开式。

[item]
[:en] Attempting to create an array with an element type that is [`:key void], a
function type, or a reference type, or attempting to create an array with a size
that is zero or negative.
[:zh_CN] 试图创建元素类型为 [`:key void]、函数类型或引用类型的数组，或者试图创建
大小为零或为负的数组。

[begin:example]
[codeblock]
template <class T> int f(T[5]);
int I = f<int>(0);
int j = f<void>(0);             // [:en] invalid array [:zh_CN] 无效数组
[codeblock:end]
[end:example]

[item]
[:en] Attempting to use a type that is not a class or enumeration type in a qualified name.
[:zh_CN] 试图在限定名中使用不是类或枚举类型的类型。

[begin:example]
[codeblock]
template <class T> int f(typename T::B*);
int i = f<int>(0);
[codeblock:end]
[end:example]

[item]
[:en] Attempting to use a type in a [~nested-name-specifier] of a [~qualified-id]
when that type does not contain the specified member, or
[:zh_CN] 试图在某[~限定标识]的[~嵌套名说明符]中使用某个类型，而该类型并不包含指定的成员，或者

[list]
[item]
[:en@~] the specified member is not a type where a type is required, or
[:zh_CN@~] 当需要类型时所指定的成员不是类型，或者
[item]
[:en@~] the specified member is not a template where a template is required, or
[:zh_CN@~] 当需要模板时所指定的成员不是模板，或者
[item]
[:en@~] the specified member is not a non-type, non-template where a non-type,
non-template is required.
[:zh_CN@~] 当需要非类型非模板时所指定的成员不是非类型非模板的。
[list:end]

[begin:example]
[codeblock]
template <int I> struct X { };
template <template <class T> class> struct Z { };
template <class T> void f(typename T::Y*) {}
template <class T> void g(X<T::N>*) {}
template <class T> void h(Z<T::TT>*) {}
struct A {};
struct B { int Y; };
struct C {
  typedef int N;
};
struct D {
  typedef int TT;
};

int main() {
  // [:en] Deduction fails in each of these cases: \
  [:zh_CN] 这些情况下的推断都将失败：
  f<A>(0);          // [:en] [`A] does not contain a member [`Y] [:zh_CN] [`A] 并不包含成员 [`Y]
  f<B>(0);          // [:en] The [`Y] member of [`B] is not a type [:zh_CN] [`B] 的成员 [`Y] 并不是类型
  g<C>(0);          // [:en] The [`N] member of [`C] is not a non-type, non-template name \
                    [:zh_CN] [`C] 的成员 [`N] 并不是非类型非模板的名字
  h<D>(0);          // [:en] The [`TT] member of [`D] is not a template [:zh_CN] [`D] 的成员 [`TT] 并不是模板
}
[codeblock:end]
[end:example]

[item]
[:en] Attempting to create a pointer to reference type.
[:zh_CN] 试图创建指向引用类型的指针。

[item]
[:en] Attempting to create a reference to [`:key void].
[:zh_CN] 试图创建 [`:key void] 的引用。

[item]
[:en] Attempting to create [=lq]pointer to member of [`T][=rq] when [`T] is not a class type.
[:zh_CN] 当 [`T] 不是类类型时试图创建“[`T] 的成员指针”。

[begin:example]
[codeblock]
template <class T> int f(int T::*);
int i = f<int>(0);
[codeblock:end]
[end:example]

[item]
[:en] Attempting to give an invalid type to a constant template parameter.
[:zh_CN] 试图为常量模板形参指定无效的类型。

[begin:example]
[codeblock]
template <class T, T> struct S {};
template <class T> int f(S<T, T{}>*);   // #1
class X {
  int m;
};
int i0 = f<X>(0);   // [:en] #1 uses a value of non-structural type [`X] as a constant template argument \
                    [:zh_CN] #1 使用费结构化类型 [`X] 的值作为常量模板实参
[codeblock:end]
[end:example]

[item]
[:en] Attempting to perform an invalid conversion in either a template argument
expression, or an expression used in the function declaration.
[:zh_CN] 试图在模板实参表达式或在函数声明式中使用的表达式上实施无效的转换。

[begin:example]
[codeblock]
template <class T, T*> int f(int);
int i2 = f<int,1>(0);           // [:en] can[=']t convert [`1] to [`int*] [:zh_CN] 不能把 [`1] 转换为 [`int*]
[codeblock:end]
[end:example]

[item]
[:en] Attempting to create a function type in which a parameter has a type of
[`:key void], or in which the return type is a function type or array type.
[:zh_CN] 试图创建形参类型为 [`:key void]，或返回类型为函数类型或数组类型的函数类型。

[item]
[:en] Attempting to give to an explicit object parameter of a lambda[=']s
function call operator a type not permitted for such ([#expr.prim.lambda.closure]).
[:zh_CN] 试图为 lambda 的函数定义运算符的显式对象形参赋予某个不允许的类型（[#expr.prim.lambda.closure]）。
[list:end]
[end:note]

[para]
[begin:example]
[:en] In the following example, assuming a [`signed char] cannot represent the
value 1000, a narrowing conversion ([#dcl.init.list]) would be required to
convert the [~template-argument] of type [`int] to [`signed char], therefore
substitution fails for the second template ([#temp.arg.nontype]).
[:zh_CN] 在如下示例中，假设 [`signed char] 无法表示值 1000，则由于需要对其
[~模板实参]进行从类型 [`int] 到 [`signed char] 的窄化转换（[#dcl.init.list]），
因此对第二个模板的代换将会失败（[#temp.arg.nontype]）。

[codeblock]
template <int> int f(int);
template <signed char> int f(int);
int i1 = f<1000>(0);            // OK
int i2 = f<1>(0);               // [:en] ambiguous; not narrowing [:zh_CN] 有歧义；不能进行窄化
[codeblock:end]
[end:example]
