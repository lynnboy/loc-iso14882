[section#temp.mem.func
    [:en] Member functions of class templates
    [:zh_CN] 类模板的成员函数
]

[para]
[:en]
[%template[!member function]]
A member function of a class template may be defined outside of the class
template definition in which it is declared.
[:zh_CN]
[%模板[!成员函数]]
类模板的成员函数可以在声明了它的类模板定义式之外进行定义。

[enter:example]
[codeblock]
template<class T> class Array {
  T* v;
  int sz;
public:
  explicit Array(int);
  T& operator[](int);
  T& elem(int i) { return v[i]; }
};
[codeblock:end]

[:en]
declares three member functions of a class template.
[:zh_CN]
声明了一个类模板的三个成员函数。

[:en]
The subscript function might be defined like this:
[:zh_CN]
其下标函数可以定义如下：

[codeblock]
template<class T> T& Array<T>::operator[](int i) {
  if (i<0 || sz<=i) error("Array: range error");
  return v[i];
}
[codeblock:end]

[:en]
A constrained member function can be defined out of line:
[:zh_CN]
受约束成员函数可以在外面定义：

[codeblock]
template<typename T> concept C = requires {
  typename T::type;
};

template<typename T> struct S {
  void f() requires C<T>;
  void g() requires C<T>;
};

template<typename T>
  void S<T>::f() requires C<T> { }      // OK
template<typename T>
  void S<T>::g() { }                    // [:en] error: no matching function in [`S<T>]
                                        // [|:zh_CN] 错误：没有与 [`S<T>] 匹配的函数
[codeblock:end]
[exit:example]

[para]
[:en]
The [~template-argument]s for a member function of a class template are
determined by the [~template-argument]s of the type of the object for which the
member function is called.
[:zh_CN]
类模板的成员函数的[~模板实参]是由调用了该成员函数的对象的类型的[~模板实参]来确定
的。

[enter:example]
[:en]
The [~template-argument] for [`Array<T>::operator`[`]] will be determined by
the [`Array] to which the subscripting operation is applied.
[:zh_CN]
[`Array<T>::operator`[`]] 中的[~模板实参]将由应用了下标运算符的 [`Array] 来确定。

[codeblock]
Array<int> v1(20);
Array<dcomplex> v2(30);

v1[3] = 7;                              // [`Array<int>::operator`[`]]
v2[3] = dcomplex(7,8);                  // [`Array<dcomplex>::operator`[`]]
[codeblock:end]
[exit:example]
