[section#temp.names
    [:en] Names of template specializations
    [:zh_CN] 模板特例的名字
]

[para]
[:en]
A template specialization ([#temp.spec]) can be referred to by a [~template-id]:
[:zh_CN]
模板特例（[#temp.spec]）可由[~模板标识]来涉指：

[syntax]
[rule simple-template-id [:zh_CN] 简单模板标识 ]
    [| template-name [`<] [~:opt template-argument-list] [`>] ]
[rule:end]

[rule template-id [:zh_CN] 模板标识 ]
    [| simple-template-id ]
    [| operator-function-id [`<] [~:opt template-argument-list] [`>] ]
    [| literal-operator-id [`<] [~:opt template-argument-list] [`>] ]
[rule:end]

[rule template-name [:zh_CN] 模板名 ]
    [| identifier ]
[rule:end]

[rule template-argument-list [:zh_CN] 模板实参列表 ]
    [| template-argument [`:opt ...] ]
    [| template-argument-list [`,] template-argument [`:opt ...] ]
[rule:end]

[rule template-argument [:zh_CN] 模板实参 ]
    [| constant-expression ]
    [| type-id ]
    [| id-expression ]
[rule:end]
[syntax:end]

[para]
[:en]
[%component name]
The component name of a [~simple-template-id], [~template-id], or
[~template-name] is the first name in it.
[:zh_CN]
[%成分名]
[~简单模板标识]，[~模板标识]，或[~模板名]的成分名为其中的第一个名字。

[para]
[:en]
A [`<] is interpreted as the delimiter of a [~template-argument-list] if it
follows a name that is not a [~conversion-function-id] and
[:zh_CN]
如果 [`<] 跟在其后的名字不是[~转换函数标识]，且该名字符合以下情况，则 [`<] 被
判读为[~模板实参列表]的分隔符：
[list]
[item]
[:en@~]
that follows the keyword [`:key template] or a [`~] after a
[~nested-name-specifier] or in a class member access expression, or
[:zh_CN@~]
它跟在关键字 [`:key template] 之后，或[~嵌套名说明符]后面的 [`~] 之后，或在
类成员访问表达式之中，或者
[item]
[:en@~]
for which name lookup finds the injected-class-name of a class template or finds
any declaration of a template, or
[:zh_CN@~]
对它进行名字查找找到了某个类模板的注入类名，或找到了任何模板的声明式，或者
[item]
[:en@~]
that is an unqualified name for which name lookup either finds one or more
functions or finds nothing, or
[:zh_CN@~]
它是个无限定名，且对它进行的查找要么找到一个或更多函数要么找不到任何东西，或者
[item]
[:en@~]
that is a terminal name in a [~using-declarator] ([#namespace.udecl]), in a
[~declarator-id] ([#dcl.meaning]), or in a type-only context other than a
[~nested-name-specifier] ([#temp.res]).
[:zh_CN@~]
它是 [~using-声明符]（[#namespace.udecl]），[~声明符标识]（[#dcl.meaning]），或
除[~嵌套名说明符]之外的仅限类型语境（[#temp.res]）中的终端名。
[list:end]

[begin:note]
[:en]
If the name is an [~identifier], it is then interpreted as a [~template-name].
[:zh_CN]
如果这个名字是一个[~标识符]，则它被判读为一个[~模板名]。

[:en]
The keyword [`:key template] is used to indicate that a dependent qualified name
([#temp.dep.type]) denotes a template where an expression might appear.
[:zh_CN]
关键字 [`:key template] 用于指明，位于可以出现表达式之处的待决的限定名
（[#temp.dep.type]）代表的是一个模板。
[end:note]

[begin:example]
[codeblock]
struct X {
  template<std::size_t> X* alloc();
  template<std::size_t> static X* adjust();
};
template<class T> void f(T* p) {
  T* p1 = p->alloc<200>();              // [:en] error: [`<] means less than \
                                        [:zh_CN] 错误：[`<] 表示小于
  T* p2 = p->template alloc<200>();     // [:en] OK: [`<] starts template argument list \
                                        [:zh_CN] OK：[`<] 开始了模板实参列表
  T::adjust<100>();                     // [:en] error: [`<] means less than \
                                        [:zh_CN] 错误：[`<] 表示小于
  T::template adjust<100>();            // [:en] OK: [`<] starts template argument list \
                                        [:zh_CN] OK：[`<] 开始了模板实参列表
}
[codeblock:end]
[end:example]

[para]
[:en]
[%[`<][!template and]]
When parsing a [~template-argument-list], the first non-nested [`>][#:fn]
is taken as the ending delimiter rather than a greater-than operator.
[:zh_CN]
[%[`<][!模板与～]]
当解析[~模板实参列表]时，第一个非嵌套的 [`>][#:fn]被当作结尾分隔符而不是大于
运算符。

[note:foot]
[:en]
A [`>] that encloses the [~type-id] of a [`:key dynamic_cast],
[`:key static_cast], [`:key reinterpret_cast] or [`:key const_cast], or which
encloses the [~template-argument]s of a subsequent [~template-id], is considered
nested for the purpose of this description.
[:zh_CN]
包围 [`:key dynamic_cast]、[`:key static_cast]、[`:key reinterpret_cast] 或
[`:key const_cast] 的[~类型标识]，或者包围后续[~模板标识]的[~模板实参]的 [`>]，
对这条描述来说被认为是嵌套的。
[note:end]

[:en]
Similarly, the first non-nested [`>>] is treated as two consecutive but distinct
[`>] tokens, the first of which is taken as the end of the
[~template-argument-list] and completes the [~template-id].
[:zh_CN]
相似地，第一个非嵌套的 [`>>] 被当作两个连续但独立的 [`>] 记号，其中的第一个被
当作[~模板实参列表]的结尾并结束这个[~模板标识]。

[begin:note]
[:en]
The second [`>] token produced by this replacement rule can terminate an
enclosing [~template-id] construct or it can be part of a different construct
(e.g., a cast).
[:zh_CN]
这个替换规则所产生的第二个 [`>] 记号能够结束某个外围的[~模板标识]构造，或者可以
是某个不同的构造的一部分（例如一个转型）。
[end:note]

[begin:example]
[codeblock]
template<int i> class X { /* ... */ }

X< 1>2 > x1;                            // [:en] syntax error \
                                        [:zh_CN] 语法错误
X<(1>2)> x2;                            // OK

template<class T> class Y { /* ... */ }
Y<X<1>> x3;                             // [:en] OK, same as [`Y<X<1> > x3;] \
                                        [:zh_CN] OK，与 [`Y<X<1> > x3;] 相同
Y<X<6>>1>> x4;                          // [:en] syntax error \
                                        [:zh_CN] 语法错误
Y<X<(6>>1)>> x5;                        // OK
[codeblock:end]
[end:example]

[para]
[:en]
The keyword [`:key template] shall not appear immediately after a declarative
[~nested-name-specifier] ([#expr.prim.id.qual]).
[:zh_CN]
关键字 [`:key template] 不能紧跟声明性[~嵌套名说明符]之后出现
（[#expr.prim.id.qual]）。

[para]
[:en]
A name prefixed by the keyword [`:key template] shall be followed by a template
argument list or refer to a class template or an alias template.
[:zh_CN]
带有 [`:key template] 关键字前缀的名字应当后面跟着模板实参列表，或者应当涉指某个
类模板或别名模板。

[:en]
The latter case is deprecated ([#depr.template.template]).
[:zh_CN]
后一种情况已被摒弃（[#depr.template.template]）。

[:en]
The keyword [`:key template] shall not appear immediately before a [`~] token
(as to name a destructor).
[:zh_CN]
关键字 [`:key template] 不能紧接一个 [`~] 记号（用于指名析构函数）之前出现。

[begin:note]
[:en]
The keyword [`:key template] cannot be applied to non-template members of class
templates.
[:zh_CN]
关键字 [`:key template] 不能应用于类模板的非模板成员。
[end:note]

[begin:note]
[:en]
As is the case with the [`:key typename] prefix, the [`:key template] prefix is
allowed even when lookup for the name would already find a template.
[:zh_CN]
与 [`:key typename] 前缀的情况相似，即使对名字的查找已经能够找到一个模板，也允许
使用 [`:key template] 前缀。
[end:note]

[begin:example]
[codeblock]
template <class T> struct A {
  void f(int);
  template <class U> void f(U);
};

template <class T> void f(T t) {
  A<T> a;
  a.template f<>(t);                    // [:en] OK: calls template \
                                        [:zh_CN] OK：调用模板函数
  a.template f(t);                      // [:en] error: not a [~template-id] \
                                        [:zh_CN] 错误：不是[~模板标识]
}

template <class T> struct B {
  template <class T2> struct C { };
};

// [:en] deprecated: [`T::C] is assumed to name a class template: \
[:zh_CN] 被摒弃：[`T::C] 被假定为指名类模板：
template <class T, template <class X> class TT = T::template C> struct D { };
D<B<int> > db;
[codeblock:end]
[end:example]

[para]
[:en]
A [~template-id] is [+valid[%[~template-id][!valid]]] if
[:zh_CN]
如下情况下[~模板标识][+有效[%[~模板标识][!有效]]]：

[list]
[item]
[:en]
there are at most as many arguments as there are parameters or a parameter is a
template parameter pack ([#temp.variadic]),
[:zh_CN]
实参最多与形参一样多，或者某个形参为模板形参包组（[#temp.variadic]），

[item]
[:en]
there is an argument for each non-deducible non-pack parameter that does not
have a default [~template-argument],
[:zh_CN]
每个没有默认[~模板实参]的不可推断的非包组形参都有一个实参，

[item]
[:en]
each [~template-argument] matches the corresponding [~template-parameter]
([#temp.arg]),
[:zh_CN]
各个[~模板实参]都与对应的[~模板形参]相匹配（[#temp.arg]），

[item]
[:en]
substitution of each template argument into the following template parameters
(if any) succeeds, and
[:zh_CN]
将各个模板实参代换到其后的模板形参中（如果有）得以成功，并且

[item]
[:en]
if the [~template-id] is non-dependent, the associated constraints are satisfied
as specified in the next paragraph.
[:zh_CN]
如果[~模板标识]非待决，则其关联约束按下面的段落所述得以满足。
[list:end]

[:en]
A [~simple-template-id] shall be valid unless it names a function template
specialization ([#temp.deduct]).
[:zh_CN]
[~简单模板标识]除非指名的是函数模板特例（[#temp.deduct]），否则应当有效。

[begin:example]
[codeblock]
template<class T, T::type n = 0> class X;
struct S {
  using type = int;
};
using T1 = X<S, int, int>;      // [:en] error: too many arguments \
                                [:zh_CN] 错误：实参过多
using T2 = X<>;                 // [:en] error: no default argument for first template parameter \
                                [:zh_CN] 错误：第一个模板形参没有默认实参
using T3 = X<1>;                // [:en] error: value [`1] does not match type-parameter \
                                [:zh_CN] 错误：值 [`1] 无法与类型形参匹配
using T4 = X<int>;              // [:en] error: substitution failure for second template parameter \
                                [:zh_CN] 错误：对第二个模板形参的代换失败
using T5 = X<S>;                // OK
[codeblock:end]
[end:example]

[para]
[:en]
When the [~template-name] of a [~simple-template-id] names a constrained
non-function template or a constrained template [~template-parameter],
and all [~template-argument]s in the [~simple-template-id] are non-dependent
([#temp.dep.temp]), the associated constraints ([#temp.constr.decl]) of the
constrained template shall be satisfied ([#temp.constr.constr]).
[:zh_CN]
如果某个[~简单模板标识]的[~模板名]指名了某个受约束的非函数模板，或者某个受约束的
模板[~模板形参]，而且该[~简单模板标识]中的所有[~模板实参]都是非待决的
（[#temp.dep.temp]），则该受约束模板的关联约束（[#temp.constr.decl]）都应当被
满足（[#temp.constr.constr]）。

[begin:example]
[codeblock]
template<typename T> concept C1 = sizeof(T) != sizeof(int);

template<C1 T> struct S1 { };
template<C1 T> using Ptr = T*;

S1<int>* p;                         // [:en] error: constraints not satisfied \
                                    [:zh_CN] 错误：约束未满足
Ptr<int> p;                         // [:en] error: constraints not satisfied \
                                    [:zh_CN] 错误：约束未满足

template<typename T>
struct S2 { Ptr<int> x; };          // [:en] ill-formed, no diagnostic required \
                                    [:zh_CN] 非良构，无须诊断

template<typename T>
struct S3 { Ptr<T> x; };            // [:en] OK, satisfaction is not required \
                                    [:zh_CN] OK，不需要满足约束

S3<int> x;                          // [:en] error: constraints not satisfied \
                                    [:zh_CN] 错误：约束未满足

template<template<C1 T> class X>
struct S4 {
  X<int> x;                         // [:en] ill-formed, no diagnostic required \
                                    [:zh_CN] 非良构，无须诊断
};

template<typename T> concept C2 = sizeof(T) == 1;

template<C2 T> struct S { };

template struct S<char[2]>;         // [:en] error: constraints not satisfied \
                                    [:zh_CN] 错误：约束未满足
template<> struct S<char[2]> { };   // [:en] error: constraints not satisfied \
                                    [:zh_CN] 错误：约束未满足
[codeblock:end]
[end:example]

[para]
[:en]
A [+concept-id] is a [~simple-template-id] where the [~template-name] is a
[~concept-name].
[:zh_CN]
[+概念标识]是[~模板名]为[~概念名]的[~简单模板标识]。

[:en]
A concept-id is a prvalue of type [`bool], and does not name a template
specialization.
[:zh_CN]
概念标识是 [`bool] 类型的纯右值，且并不指名模板特例。

[:en]
A concept-id evaluates to [`true] if the concept[=']s normalized
[~constraint-expression] ([#temp.constr.decl]) is satisfied
([#temp.constr.constr]) by the specified template arguments and [`false]
otherwise.
[:zh_CN]
如果概念的规范化后的[~约束表达式]（[#temp.constr.decl]）被所指定的模板实参所满足
（[#temp.constr.constr]），则概念标识求值为 [`true]，否则为 [`false]。

[begin:note]
[:en]
Since a [~constraint-expression] is an unevaluated operand, a concept-id
appearing in a [~constraint-expression] is not evaluated except as necessary
to determine whether the normalized constraints are satisfied.
[:zh_CN]
由于[~约束表达式]是免求值操作数，出现于[~约束表达式]中的概念标识，除非为确定
是否满足规范化后的约束所需，否则不会被求值。
[end:note]

[begin:example]
[codeblock]
template<typename T> concept C = true;
static_assert(C<int>);      // OK
[codeblock:end]
[end:example]
