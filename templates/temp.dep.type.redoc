[section#temp.dep.type
    [:en] Dependent types
    [:zh_CN] 待决的类型
]

[para]
[:en]
A name or [~template-id] refers to the [+current instantiation] if it is
[:zh_CN]
如果某个名字或[~模板标识]为如下之一，则它涉指[+当前实例]：

[list]
[item]
[:en]
in the definition of a class template, a nested class of a class template,
a member of a class template, or a member of a nested class of a class template,
the injected-class-name ([#class.pre]) of the class template or nested class,
[:zh_CN]
在类模板，类模板的嵌套类，类模板的成员，或者类模板的嵌套类的成员的定义式中，该
类模板或者嵌套类的注入类名（[#class.pre]），

[item]
[:en]
in the definition of a primary class template or a member of a primary class
template, the name of the class template followed by the template argument list
of its [~template-head] ([#temp.arg]) enclosed in [`<>] (or an equivalent
template alias specialization),
[:zh_CN]
在主类模板或主类模板的成员的定义式中，该类模板的名字后面跟着被括在 [`<>] 中的
其[~模板头]（[#temp.arg]）的模板实参列表（或者某个等价的模板别名特例），

[item]
[:en]
in the definition of a nested class of a class template, the name of the nested
class referenced as a member of the current instantiation, or
[:zh_CN]
在类模板的嵌套类的定义式中，作为当前实例的成员进行涉指的该嵌套类的名字，或者

[item]
[:en]
in the definition of a class template partial specialization or a member of a
class template partial specialization, the name of the class template followed
by a template argument list equivalent to that of the partial specialization
([#temp.spec.partial]) enclosed in [`<>] (or an equivalent template alias
specialization).
[:zh_CN]
在类模板部分特化式或类模板部分特化式的成员的定义式中，该类模板的名字后面跟着被
括在 [`<>] 中的等价于该部分特化式的模板实参列表的模板实参列表
（[#temp.spec.partial]）（或者某个等价的模板别名特例）。
[list:end]

[para]
[:en]
A template argument that is equivalent to a template parameter can be used in
place of that template parameter in a reference to the current instantiation.
[:zh_CN]
等价于某个模板形参的模板实参，在对当前实例所进行的涉指之中可以用于代替的这个模板
形参。

[:en]
For a template [~type-parameter], a template argument is equivalent to a
template parameter if it denotes the same type.
[:zh_CN]
对于模板[~类型形参]，当模板实参代表相同的类型时其等价于该模板形参。

[:en]
For a non-type template parameter, a template argument is equivalent to a
template parameter if it is an [~identifier] that names a variable that is
equivalent to the template parameter.
[:zh_CN]
对于非类型模板形参，当模板实参时指名某个等价于该模板形参的变量的[~标识符]时，它
等价于该模板形参。

[:en]
A variable is equivalent to a template parameter if
[:zh_CN]
以下情况下变量与模板形参等价：

[list]
[item]
[:en]
it has the same type as the template parameter (ignoring cv-qualification) and
[:zh_CN]
变量与模板形参具有相同的类型（忽略 cv 限定），并且
[item]
[:en]
its initializer consists of a single [~identifier] that names the template
parameter or, recursively, such a variable.
[:zh_CN]
其初始化式由一个指名该模板实参的[~标识符]，或者递归地也是这样的变量所构成。
[list:end]

[begin:note]
[:en]
Using a parenthesized variable name breaks the equivalence.
[:zh_CN]
使用参数化的变量名将打破这种等价关系。
[end:note]

[begin:example]
[codeblock]
template <class T> class A {
  A* p1;                        // [:en] [`A] is the current instantiation \
                                   [:zh_CN] [`A] 为当前实例
  A<T>* p2;                     // [:en] [`A<T>] is the current instantiation \
                                   [:zh_CN] [`A<T>] 为当前实例
  A<T*> p3;                     // [:en] [`A<T*>] is not the current instantiation \
                                   [:zh_CN] [`A<T*>] 不是当前实例
  ::A<T>* p4;                   // [:en] [`::A<T>] is the current instantiation \
                                   [:zh_CN] [`::A<T>] 为当前实例
  class B {
    B* p1;                      // [:en] [`B] is the current instantiation \
                                   [:zh_CN] [`B] 为当前实例
    A<T>::B* p2;                // [:en] [`A<T>::B] is the current instantiation \
                                   [:zh_CN] [`A<T>::B] 为当前实例
    typename A<T*>::B* p3;      // [:en] [`A<T*>::B] is not the current instantiation \
                                   [:zh_CN] [`A<T*>::B] 不是当前实例
  };
};

template <class T> class A<T*> {
  A<T*>* p1;                    // [:en] [`A<T*>] is the current instantiation \
                                   [:zh_CN] [`A<T*>] 为当前实例
  A<T>* p2;                     // [:en] [`A<T>] is not the current instantiation \
                                   [:zh_CN] [`A<T>] 不是当前实例
};

template <class T1, class T2, int I> struct B {
  B<T1, T2, I>* b1;             // [:en] refers to the current instantiation \
                                   [:zh_CN] 涉指当前实例
  B<T2, T1, I>* b2;             // [:en] not the current instantiation \
                                   [:zh_CN] 不是当前实例
  typedef T1 my_T1;
  static const int my_I = I;
  static const int my_I2 = I+0;
  static const int my_I3 = my_I;
  static const long my_I4 = I;
  static const int my_I5 = (I);
  B<my_T1, T2, my_I>* b3;       // [:en] refers to the current instantiation \
                                   [:zh_CN] 涉指当前实例
  B<my_T1, T2, my_I2>* b4;      // [:en] not the current instantiation \
                                   [:zh_CN] 不是当前实例
  B<my_T1, T2, my_I3>* b5;      // [:en] refers to the current instantiation \
                                   [:zh_CN] 涉指当前实例
  B<my_T1, T2, my_I4>* b6;      // [:en] not the current instantiation \
                                   [:zh_CN] 不是当前实例
  B<my_T1, T2, my_I5>* b7;      // [:en] not the current instantiation \
                                   [:zh_CN] 不是当前实例
};
[codeblock:end]
[end:example]

[para]
[:en]
[%dependent base class[%base class[!dependent]]]
A [+dependent base class[%base class[!dependent]]] is a base class that is a
dependent type and is not the current instantiation.
[:zh_CN]
[%待决的基类[%基类[!待决的～]]]
[+待决的基类[%基类[!待决的～]]]是待决的类型但并非当前实例的基类。

[begin:note]
[:en]
A base class can be the current instantiation in the case of a nested class
naming an enclosing class as a base.
[:zh_CN]
当嵌套类将其外围类指名为其基类时，基类可以是当前实例。

[begin:example]
[codeblock]
template<class T> struct A {
  typedef int M;
  struct B {
    typedef void M;
    struct C;
  };
};

template<class T> struct A<T>::B::C : A<T> {
  M m;                          // OK, [`A<T>::M]
};
[codeblock:end]
[end:example]
[end:note]

[para]
[:en]
[%member of the current instantiation[%current instantiation[!member of the]]]
A qualified ([#basic.lookup.qual]) or unqualified name is a [+member of the
current instantiation[%current instantiation[!member of the]]] if
[:zh_CN]
[%当前实例的成员[%当前实例[!～的成员]]]
符合如下情况的限定（[#basic.lookup.qual]）或未限定名是[+当前实例的成员[%当前实例
[!～的成员]]]：

[list]
[item]
[:en@~]
its lookup context, if it is a qualified name, is the current instantiation, and
[:zh_CN@~]
当其为限定名时，其查找语境为当前实例，并且
[item]
[:en@~]
lookup for it finds any member of a class that is the current instantiation
[:zh_CN@~]
对它的查找找到了作为当前实例的类的任意成员。
[list:end]

[begin:example]
[codeblock]
template <class T> class A {
  static const int i = 5;
  int n1[i];                    // [:en] [`i] refers to a member of the current instantiation \
                                   [:zh_CN] [`i] 涉指当前实例的成员
  int n2[A::i];                 // [:en] [`A::i] refers to a member of the current instantiation \
                                   [:zh_CN] [`A::i] 涉指当前实例的成员
  int n3[A<T>::i];              // [:en] [`A<T>::i] refers to a member of the current instantiation \
                                   [:zh_CN] [`A<T>::i] 涉指当前实例的成员
  int f();
};

template <class T> int A<T>::f() {
  return i;                     // [:en] [`i] refers to a member of the current instantiation \
                                   [:zh_CN] [`i] 涉指当前实例的成员
}
[codeblock:end]
[end:example]

[para:~]
[:en]
[%dependent member of the current instantiation
 [%current instantiation[!dependent member of the]]]
A qualified or unqualified name names a [+dependent member of the current
instantiation[%current instantiation[!dependent member of the]]] if it is a
member of the current instantiation that, when looked up, refers to at least one
member declaration (including a [~using-declarator] whose terminal name is
dependent) of a class that is the current instantiation.
[:zh_CN]
[%当前实例的待决成员[%当前实例[!～的待决成员]]]
如果某个限定或未限定的名字是当前实例的成员，并且当进行查找时，涉指作为当前实例的
类的至少一个成员声明式（包括终端名待决的 [~using-声明符]），则它是[+当前实例的
待决成员[%当前实例[!～的待决成员]]]。

[para]
[:en]
A qualified name ([#basic.lookup.qual]) is dependent if
[:zh_CN]
以下情况下限定名（[#basic.lookup.qual]）待决：

[list]
[item]
[:en] it is a [~conversion-function-id] whose [~conversion-type-id] is dependent,
or
[:zh_CN] 它是个[~转换类型标识]待决的[~转换函数标识]，或者

[item]
[:en] its lookup context is dependent and is not the current instantiation, or
[:zh_CN] 其查找语境待决且并非当前实例，或者

[item]
[:en] its lookup context is the current instantiation and it is
[`[`:key operator]=],[#:fn#] or
[:zh_CN] 其查找语境是当前实例，且它是 [`[`:key operator]=]，[#:fn#]，或者

[note:foot]
[:en]
Every instantiation of a class template declares a different set of assignment
operators.
[:zh_CN]
类模板的每个实例都会声明一组不同的赋值运算符。
[note:end]

[item]
[:en] its lookup context is the current instantiation and has at least one
dependent base class, and qualified name lookup for the name finds nothing
([#basic.lookup.qual]).
[:zh_CN] 其查找语境是当前实例且具有至少一个待决基类，并且对该名字的限定名查找
未找到任何东西（[#basic.lookup.qual]）。
[list:end]

[begin:example]
[codeblock]
struct A {
  using B = int;
  A f();
};
struct C : A {};
template<class T>
void g(T t) {
  decltype(t.A::f())::B i;      // [:en] error: [`:key typename] needed to interpret [`B] as a type \
                                [:zh_CN] 错误：需要用 [`:key typename] 将 [`B] 解释为类型
}
template void g(C);             // [:en@~] [$\ldots] even though [`A] is [`::A] here \
                                [:zh_CN@~] ……即便 [`A] 此处为 [`::A]
[codeblock:end]
[end:example]

[para]
[:en]
If, for a given set of template arguments, a specialization of a template is
instantiated that refers to a member of the current instantiation with a
qualified name, the name is looked up in the template instantiation context.
[:zh_CN]
对于给定的一组模板实参，如果对模板的某个特例进行实例化中包含以一个限定名对当前
实例的某个成员进行涉指，则这个名字在模板实例化语境中进行查找。

[:en]
If the result of this lookup differs from the result of name lookup in the
template definition context, name lookup is ambiguous.
[:zh_CN]
如果此查找的结果与在模板定义式的语境中进行名字查找的结果不同，则名字查找有歧义。

[begin:example]
[codeblock]
struct A {
  int m;
};

struct B {
  int m;
};

template<typename T>
struct C : A, T {
  int f() { return this->m; }   // [:en] finds [`A::m] in the template definition context \
                                   [:zh_CN] 在模板定义式的语境中找到了 [`A::m]
  int g() { return m; }         // [:en] finds [`A::m] in the template definition context \
                                   [:zh_CN] 在模板定义式的语境中找到了 [`A::m]
};

template int C<B>::f();         // [:en] error: finds both [`A::m] and [`B::m] \
                                   [:zh_CN] 错误：同时找到了 [`A::m] 和 [`B::m]
template int C<B>::g();         // [:en] OK: transformation to class member access syntax \
                                   [:zh_CN] OK：在模板定义式的语境中
                                // [:en@~] does not occur in the template definition context; see [#class.mfct.non-static] \
                                   [:zh_CN@~] 并不会发生向成员访问语法的变换；参见 [#class.mfct.non-static]
[codeblock:end]
[end:example]

[para]
[:en]
A type is dependent if it is
[:zh_CN]
如果某个类型为如下之一，则它是待决的。

[list]
[item]
[:en@~] a template parameter,
[:zh_CN@~] 模板形参，
[item]
[:en@~] denoted by a dependent (qualified) name,
[:zh_CN@~] 由某个待决（限定）名来代表，
[item]
[:en@~] a nested class or enumeration that is a direct member of a class that is
the current instantiation,
[:zh_CN@~] 作为当前实例的类的直接成员的嵌套类或枚举，
[item]
[:en@~] a cv-qualified type where the cv-unqualified type is dependent,
[:zh_CN@~] 被 cv 限定的类型，其 cv 未限定的类型是待决的，
[item]
[:en@~] a compound type constructed from any dependent type,
[:zh_CN@~] 从任意待决类型构造的复合类型，
[item]
[:en@~] an array type whose element type is dependent or whose bound (if any) is
value-dependent,
[:zh_CN@~] 元素类型待决或其边界（如果有）为值待决的数组类型，
[item]
[:en@~] a function type whose parameters include one or more function parameter
packs,
[:zh_CN@~] 形参中包含一个或多个函数形参包组的函数类型，
[item]
[:en@~] a function type whose exception specification is value-dependent,
[:zh_CN@~] 异常说明为值待决的函数类型，
[item]
[:en@~] denoted by a [~simple-template-id] in which either the template name is
a template parameter or any of the template arguments is a dependent type or an
expression that is type-dependent or value-dependent or is a pack expansion,
[#:fn#] or
[:zh_CN@~] [~简单模板标识]所代表的类型，其中的模板名为一个模板形参，或者有任何
模板实参为一个待决类型或者一个类型待决或值待决的表达式，[#:fn#] 或者

[note:foot]
[:en]
This includes an injected-class-name ([#class.pre]) of a class template used
without a [~template-argument-list].
[:zh_CN]
其中包括不带有[~模板实参列表]使用的注入类名（[#class.pre]）。
[note:end]

[item]
[:en@~] denoted by [`decltype(][~expression][`)], where [~expression] is
type-dependent ([#temp.dep.expr]).
[:zh_CN@~] 由 [`decltype(][~表达式][`)] 表示，其中[~表达式] 是类型待决的
（[#temp.dep.expr]）。
[list:end]

[para]
[begin:note]
[:en]
Because typedefs do not introduce new types, but instead simply refer to other
types, a name that refers to a typedef that is a member of the current
instantiation is dependent only if the type referred to is dependent.
[:zh_CN]
由于 typedef 并不引入新的类型，而只是单纯地代表其他类型，所以涉指作为当前实例的
成员的 typedef 的名字时，仅当被指代的类型待决时才是待决的。
[end:note]
