[section#temp.arg.general
    [:en] General
    [:zh_CN] 概述
]

[para]
[:en]
[%argument[!template]]
There are three forms of [~template-argument], corresponding to the three forms
of [~template-parameter]: type, non-type and template.
[:zh_CN]
[%实参[!模板～]]
有三种形式的[~模板实参]，对应于[~模板形参]的三种形式：类型、非类型和模板。

[:en]
The type and form of each [~template-argument] specified in a [~template-id]
shall match the type and form specified for the corresponding parameter declared
by the template in its [~template-parameter-list].
[:zh_CN]
[~模板标识]中指定的每个[~模板实参]的类型与形式应当与该模板在其[~模板形参列表]中
所声明的对应形参的类型和形式相匹配。

[:en]
When the parameter declared by the template is a template parameter pack
([#temp.variadic]), it will correspond to zero or more [~template-argument]s.
[:zh_CN]
当模板所声明的形参是一个模板形参包组（[#temp.variadic]）时，它将对应于零个或多个
[~模板实参]。

[begin:example]
[codeblock]
template<class T> class Array {
  T* v;
  int sz;
public:
  explicit Array(int);
  T& operator[](int);
  T& elem(int i) { return v[i]; }
};

Array<int> v1(20);
typedef std::complex<double> dcomplex;  // [:en] [`std::complex] is a standard library template \
                                           [:zh_CN] [`std::complex] 是标准程序库中的一个模板
Array<dcomplex> v2(30);
Array<dcomplex> v3(40);

void bar() {
  v1[3] = 7;
  v2[3] = v3.elem(4) = dcomplex(7,8);
}
[codeblock:end]
[end:example]

[para]
[:en]
The template argument list of a [~template-head] is a template argument list in
which the [$n^\text{th}] template argument has the value of the [$n^\text{th}]
template parameter of the [~template-head].
[:zh_CN]
[~模板头]的模板实参列表是其第 [$n] 个模板实参具有该[~模板头]的第 [$n] 个模板形参
的值的模板实参列表。

[:en]
If the [$n^\text{th}] template parameter is a template parameter pack
([#temp.variadic]), the [$n^\text{th}] template argument is a pack expansion
whose pattern is the name of the template parameter pack.
[:zh_CN]
如果第 [$n] 个模板形参是模板形参包组（[#temp.variadic]），则第 [$n] 个模板实参是
其模式为该模板形参包组的名字的包组展开式。

[para]
[:en]
In a [~template-argument], an ambiguity between a [~type-id] and an expression
is resolved to a [~type-id], regardless of the form of the corresponding
[~template-parameter].[#:fn]
[:zh_CN]
在[~模板实参]中，[~类型标识]与表达式之间的歧义被决议为[~类型标识]，无论其对应
[~模板形参]是何种形式。[#:fn]

[note:foot]
[:en]
There is no such ambiguity in a default [~template-argument] because the form of
the [~template-parameter] determines the allowable forms of the
[~template-argument].
[:zh_CN]
在默认[~模板实参]中没有此种歧义，因为[~模板形参]的形式决定了可接受的[~模板实参]
的形式。
[note:end]

[begin:example]
[codeblock]
template<class T> void f();
template<int I> void f();

void g() {
  f<int()>();       // [:en] [`int()] is a [~type-id]: call the first [`f()] \
                       [:zh_CN] [`int()] 是[~类型标识]：调用第一个 [`f()]
}
[codeblock:end]
[end:example]

[para]
[begin:note]
[:en]
Names used in a [~template-argument] are subject to access control where they
appear.
[:zh_CN]
[~模板实参]中使用的名字都要在它们出现之处进行访问控制。

[:en]
Because a [~template-parameter] is not a class member, no access control applies.
[:zh_CN]
因为[~模板形参]不是类成员，所以没有适用的访问控制。
[end:note]

[begin:example]
[codeblock]
template<class T> class X {
  static T t;
};

class Y {
private:
  struct S { /* ... */ };
  X<S> x;           // [:en] OK: [`S] is accessible \
                       [:zh_CN] OK：[`S] 是可访问的
                    // [:en] [`X<Y::S>] has a static member of type [`Y::S] \
                       [:zh_CN] [`X<Y::S>] 带有类型为 [`Y::S] 的静态成员
                    // [:en] OK: even though [`Y::S] is private \
                    vzh_CN] OK：即使 [`Y::S] 是私有的
};

X<Y::S> y;          // [:en] error: [`S] not accessible \
                       [:zh_CN] 错误：[`S] 不可访问
[codeblock:end]
[end:example]

[:en]
For a [~template-argument] that is a class type or a class template, the
template definition has no special access rights to the members of the
[~template-argument].
[:zh_CN]
对于类类型或类模板的[~模板实参]，模板的定义式对[~模板实参]的成员没有特殊的访问权。

[begin:example]
[codeblock]
template <template <class TT> class T> class A {
  typename T<int>::S s;
};

template <class U> class B {
private:
  struct S { /* ... */ };
};

A<B> b;             // [:en] error: [`A] has no access to [`B::S] \
                       [:zh_CN] 错误：[`A] 不能访问 [`B::S]
[codeblock:end]
[end:example]

[para]
[:en]
When template argument packs or default [~template-argument]s are used, a
[~template-argument] list can be empty.
[:zh_CN]
如果使用了模板实参包组或默认[~模板实参]，[~模板实参]列表可以为空。

[:en]
In that case the empty [`<>] brackets shall still be used as the
[~template-argument-list].
[:zh_CN]
在这种情况下仍需要使用空的 [`<>] 括号以用作[~模板实参列表]。

[begin:example]
[codeblock]
template<class T = char> class String;
String<>* p;                    // OK: [`String<char>]
String* q;                      // [:en] syntax error \
                                   [:zh_CN] 语法错误
template<class ... Elements> class Tuple;
Tuple<>* t;                     // [:en] OK: [`Elements] is empty \
                                   [:zh_CN] OK：[`Elements] 为空
Tuple* u;                       // [:en] syntax error \
                                   [:zh_CN] 语法错误
[codeblock:end]
[end:example]

[para]
[:en]
An explicit destructor call ([#class.dtor]) for an object that has a type
that is a class template specialization may explicitly specify the
[~template-argument]s.
[:zh_CN]
对类型为类模板特例的对象进行显式析构函数调用（[#class.dtor]）时，可以显式指定其
[~模板实参]。

[begin:example]
[codeblock]
template<class T> struct A {
  ~A();
};
void f(A<int>* p, A<int>* q) {
  p->A<int>::~A();              // [:en] OK: destructor call \
                                   [:zh_CN] OK：析构函数调用
  q->A<int>::~A<int>();         // [:en] OK: destructor call \
                                   [:zh_CN] OK：析构函数调用
}
[codeblock:end]
[end:example]

[para]
[:en]
If the use of a [~template-argument] gives rise to an ill-formed construct in
the instantiation of a template specialization, the program is ill-formed.
[:zh_CN]
若所使用的[~模板实参]在模板特例的实例中造成了非良构的构造，则程序非良构。

[para]
[:en]
When name lookup for the component name of a [~template-id] finds an overload
set, both non-template functions in the overload set and function templates in
the overload set for which the [~template-argument]s do not match the
[~template-parameter]s are ignored.
[:zh_CN]
当针对[~模板标识]的成分名的名字查找找到了重载集合时，重载集合中的非模板函数和
重载集合中[~模板实参]与[~模板形参]并不匹配的函数模板都被忽略。

[begin:note]
[:en]
If none of the function templates have matching [~template-parameter]s, the
program is ill-formed.
[:zh_CN]
若不存在带有与之匹配的[~模板形参]的函数模板，则程序非良构。
[end:note]

[para]
[:en]
When a [~simple-template-id] does not name a function, a default
[~template-argument] is implicitly instantiated ([#temp.inst]) when the value of
that default argument is needed.
[:zh_CN]
若[~简单模板标识]所指名的并非函数，则当需要默认[~模板实参]的值时，这个默认实参将
被隐式实例化（[#temp.inst]）。

[begin:example]
[codeblock]
template<typename T, typename U = int> struct S { };
S<bool>* p;         // [:en] the type of [`p] is [`S<bool, int>*] \
                       [:zh_CN] [`p] 的类型为 [`S<bool, int>*]
[codeblock:end]

[:en]
The default argument for [`U] is instantiated to form the type [`S<bool, int>*].
[:zh_CN]
实例化了 [`U] 的默认实参以构成类型 [`S<bool, int>*]。
[end:example]

[para]
[:en]
A [~template-argument] followed by an ellipsis is a pack expansion
([#temp.variadic]).
[:zh_CN]
[~模板实参]后面跟着省略号是包组展开式（[#temp.variadic]）。

[include temp.arg.type]

[include temp.arg.nontype]

[include temp.arg.template]
