[section#temp.friend
    [:en] Friends
    [:zh_CN] 友元
]

[para]
[:en]
[%friend[!template and]]
A friend of a class or class template can be a function template or class
template, a specialization of a function template or class template, or a
non-template function or class.
[:zh_CN]
[%友元[!模板与～]]
类或类模板的友元可以是函数模板或类模板，函数模板或类模板的特例，或者非模板函数或
类。

[:en]
For a friend function declaration that is not a template declaration:
[:zh_CN]
对于不是模板声明式的友元函数声明式：

[list]
[item]
[:en]
if the name of the friend is a qualified or unqualified [~template-id], the
friend declaration refers to a specialization of a function template, otherwise,
[:zh_CN]
若该友元的名字是被限定或未被限定的[~模板标识]，则该友元声明式指代某个函数模板的
特例，否则

[item]
[:en]
if the name of the friend is a [~qualified-id] and a matching non-template
function is found in the specified class or namespace, the friend declaration
refers to that function, otherwise,
[:zh_CN]
若该友元的名字是[~限定标识]，且在所指定的类或命名空间中找到了匹配的非模板函数，
则该友元声明式指代这个函数，否则，

[item]
[:en]
if the name of the friend is a [~qualified-id] and a matching function template
is found in the specified class or namespace, the friend declaration refers to
the deduced specialization of that function template ([#temp.deduct.decl]),
otherwise,
[:zh_CN]
若该友元的名字是[~限定标识]，且在所指定的类或命名空间中找到了匹配的函数模板，则
该友元声明式指代以这个函数模板所推断的特例（[#temp.deduct.decl]），否则，

[item]
[:en]
the name shall be an [~unqualified-id] that declares (or redeclares) a
non-template function.
[:zh_CN]
该名字应当是声明（或重复声明）某个非模板函数的[~未限定标识]。
[list:end]

[begin:example]
[codeblock]
template<class T> class task;
template<class T> task<T>* preempt(task<T>*);

template<class T> class task {
  friend void next_time();
  friend void process(task<T>*);
  friend task<T>* preempt<T>(task<T>*);
  template<class C> friend int func(C);

  friend class task<int>;
  template<class P> friend class frd;
};
[codeblock:end]

[:en]
Here, each specialization of the [`task] class template has the function
[`next_time] as a friend; because [`process] does not have explicit
[~template-argument]s, each specialization of the [`task] class template has an
appropriately typed function [`process] as a friend, and this friend is not a
function template specialization; because the friend [`preempt] has an explicit
[~template-argument] [`T], each specialization of the [`task] class template has
the appropriate specialization of the function template [`preempt] as a friend;
and each specialization of the [`task] class template has all specializations of
the function template [`func] as friends.
[:zh_CN]
此处，[`task] 类模板的每个特例都把 [`next_time] 函数当作友元；由于 [`process] 并
不具有显式[~模板实参]，故 [`task] 类模板的每个特例均以一个适当类型的 [`process]
函数当作友元，而这个友元并不是函数模板特例；由于友元 [`preempt] 带有显式[~模板
实参] [`<T>]，故 [`task] 类模板的每个特例均以一个经适当特化的 [`preempt] 函数
模板当作友元；而且 [`task] 类模板的每个特例都把 [`func] 函数模板的所有特例当作
友元。

[:en]
Similarly, each specialization of the [`task] class template has the class
template specialization [`task<int>] as a friend, and has all specializations of
the class template [`frd] as friends.
[:zh_CN]
相似地，[`task] 类模板的每个特例都把类模板特例 [`task<int>] 当作友元，并把类模板
[`frd] 的所有特例都当作友元。
[end:example]

[para]
[:en]
A friend template may be declared within a class or class template.
[:zh_CN]
可以在类或类模板中声明友元模板。

[:en]
A friend function template may be defined within a class or class template, but
a friend class template may not be defined in a class or class template.
[:zh_CN]
可以在类或类模板中对友元函数模板进行定义，但不能在类或类模板中定义友元类模板。

[:en]
In these cases, all specializations of the friend class or friend function
template are friends of the class or class template granting friendship.
[:zh_CN]
在这些情况下，友元类或友元函数模板的所有特例都是授予友元关系的类或类模板的友元。

[begin:example]
[codeblock]
class A {
  template<class T> friend class B;                 // OK
  template<class T> friend void f(T){ /* ... */ }   // OK
};
[codeblock:end]
[end:example]

[para]
[:en]
A template friend declaration specifies that all specializations of that
template, whether they are implicitly instantiated ([#temp.inst]), partially
specialized ([#temp.class.spec]) or explicitly specialized ([#temp.expl.spec]),
are friends of the class containing the template friend declaration.
[:zh_CN]
模板友元声明式指定该模板的所有特例，无论是隐式实例化的（[#temp.inst]），部分特化
的（[#temp.class.spec]）还是显式特化的（[#temp.expl.spec]），都是包含该模板友元
声明式的类的友元。

[begin:example]
[codeblock]
class X {
  template<class T> friend struct A;
  class Y { };
};

template<class T> struct A { X::Y ab; };            // OK
template<class T> struct A<T*> { X::Y ab; };        // OK
[codeblock:end]
[end:example]

[para]
[:en]
A template friend declaration may declare a member of a dependent type to be a
friend.
[:zh_CN]
模板友元声明式可以将具有待决类型的成员声明为友元。

[:en]
The friend declaration shall declare a function or specify a type with an
[~elaborated-type-specifier], in either case with a [~nested-name-specifier]
ending with a [~simple-template-id], [$C], whose [~template-name] names a class
template.
[:zh_CN]
该引用声明式应当声明一个函数，或者指定带有[~详述类型说明符]的类型，两种情况下
都带有一个[~嵌套名说明符]并以[~简单模板标识] [$C] 结，其[~模板名]指名了某个类
模板。

[:en]
The template parameters of the template friend declaration shall be deducible
from [$C] ([#temp.deduct.type]).
[:zh_CN]
这个模板友元声明式的模板形参应当可以从 [$C] 进行推断（[#temp.deduct.type]）。

[:en]
In this case, a member of a specialization [$S] of the class template is a
friend of the class granting friendship if deduction of the template parameters
of [$C] from [$S] succeeds, and substituting the deduced template arguments into
the friend declaration produces a declaration that would be a valid
redeclaration of the member of the specialization.
[:zh_CN]
这种情况下，对于该类模板的某个特例 [$S]，如果从 [$S] 对 [$C] 的模板形参进行的
推断成功，并且将被推断的模板形参替换到该友元声明式中后所产生的声明式是该特例的
某个成员的有效的重复声明，则该成员成为授予友元关系的类的友元。

[begin:example]
[codeblock]
template<class T> struct A {
  struct B { };
  void f();
  struct D {
    void g();
  };
  T h();
  template<T U> T i();
};
template<> struct A<int> {
  struct B { };
  int f();
  struct D {
    void g();
  };
  template<int U> int i();
};
template<> struct A<float*> {
  int *h();
};

class C {
  template<class T> friend struct A<T>::B;      // [:en] grants friendship to [`A<int>::B] even though \
                                                   [:zh_CN] 授予 [`A<int>::B] 友元关系，
                                                // [:en@~] it is not a specialization of [`A<T>::B] \
                                                   [:zh_CN@~] 即使它并非 [`A<T>::B] 的特例
  template<class T> friend void A<T>::f();      // [:en] does not grant friendship to [`A<int>::f()] \
                                                   [:zh_CN] 未授予 [`A<int>::f()] 友元关系，
                                                // [:en@~] because its return type does not match \
                                                   [:zh_CN@~] 因为其返回类型不匹配
  template<class T> friend void A<T>::D::g();   // [:en] ill-formed: [`A<T>::D] does not end with \
                                                   [:zh_CN] 非良构：[`A<T>::D] 并非以
                                                // [:en@] a [~simple-template-id] \
                                                   [:zh_CN@~] [~简单模板标识]结尾
  template<class T> friend int *A<T*>::h();     // [:en] grants friendship to [`A<int*>::h()] and [`A<float*>::h()] \
                                                   [:zh_CN] 授予 [`A<int*>::h()] 和 [`A<float*>::h()] 友元关系
  template<class T> template<T U>               // [:en] grants friendship to instantiations of [`A<T>::i()] and \
                                                   [:zh_CN] 向 [`A<T>::i()] 的各实例，向 [`A<int>::i()]，
    friend T A<T>::i();                         // [:en@~] to [`A<int>::i()], and thereby to all specializations \
                                                   [:zh_CN@~] 因而向这些这些函数模板的所有特例
};                                              // [:en@~] of those function templates \
                                                   [:zh_CN@~] 授予友元关系
[codeblock:end]
[end:example]

[para]
[begin:note]
[:en]
A friend declaration may first declare a member of an enclosing namespace scope
([#temp.inject]).
[:zh_CN]
友元声明式可以用于首次声明外围命名空间作用域的成员（[#temp.inject]）。
[end:note]

[para]
[:en]
A friend template shall not be declared in a local class.
[:zh_CN]
不能在局部类中声明友元模板。

[para]
[:en]
Friend declarations shall not declare partial specializations.
[:zh_CN]
友元声明式不能声明部分特化。

[begin:example]
[codeblock]
template<class T> class A { };
class X {
  template<class T> friend class A<T*>;         // [:en] error \
                                                   [:zh_CN] 错误
};
[codeblock:end]
[end:example]

[para]
[:en]
When a friend declaration refers to a specialization of a function template, the
function parameter declarations shall not include default arguments, nor shall
the [`inline], [`constexpr], or [`consteval] specifiers be used in such a
declaration.
[:zh_CN]
当友元声明式指代某个函数模板的特例时，其函数形参声明式不能包含默认实参，也不能在
这种声明式中使用 [`inline]、[`constexpr] 或 [`consteval] 说明符。

[para]
[:en]
A non-template friend declaration shall not have a [~requires-clause].
[:zh_CN]
非模板友元声明式不能带有 [~requires-子句]。
