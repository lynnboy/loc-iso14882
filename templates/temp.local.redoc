[section#temp.local
    [:en] Locally declared names
    [:zh_CN] 局部声明的名字
]

[para]
[:en]
Like normal (non-template) classes, class templates have an injected-class-name
([#class.pre]).
[:zh_CN]
与普通（非模板）类相似，类模板也有注入类名（[#class.pre]）。

[:en]
The injected-class-name can be used as a [~template-name] or a [~type-name].
[:zh_CN]
注入类名可以用作[~模板名]或[~类型名]。

[:en]
When it is used with a [~template-argument-list], as a [~template-argument] for
a template [~template-parameter], or as the final identifier in the
[~elaborated-type-specifier] of a friend class template declaration, it is a
[~template-name] that refers to the class template itself.
[:zh_CN]
若使用时带有[~模板实参列表]，将它用作某个模板[~模板形参]的[~模板实参]，或者将它
用作某个友元类模板声明式的[~详述类型说明符]中的最后一个标识符时，注入类名是涉指
该类模板自身的[~模板名]。

[:en]
Otherwise, it is a [~type-name] equivalent to the [~template-name] followed by
the template argument list ([#temp.decls.general], [#temp.arg.general]) the
class template enclosed in [`<>].
[:zh_CN]
否则，它是等价于[~模板名]后面跟着以 [`<>] 包围的该类模板的模板实参列表
（[#temp.decls.general]，[#temp.arg.general]）的[~类型名]。

[para]
[:en]
When the injected-class-name of a class template specialization or partial
specialization is used as a [~type-name], it is equivalent to the
[~template-name] followed by the [~template-argument]s of the class template
specialization or partial specialization enclosed in [`<>].
[:zh_CN]
当类模板特化式或部分特化式的注入类名被用作[~类型名]时，它等价于其[~模板名]后面
跟着以 [`<>] 包围的该类模板特化式或部分特化式的[~模板实参]。

[begin:example]
[codeblock]
template<template<class> class T> class A { };
template<class T> class Y;
template<> class Y<int> {
  Y* p;                                 // [:en] meaning [`Y<int>] \
                                        [:zh_CN] 意思是 [`Y<int>]
  Y<char>* q;                           // [:en] meaning [`Y<char>] \
                                        [:zh_CN] 意思是 [`Y<char>]
  A<Y>* a;                              // [:en] meaning [`A<::Y>] \
                                        [:zh_CN] 意思是 [`A<::Y>]
  class B {
    template<class> friend class Y;     // [:en] meaning [`::Y] \
                                        [:zh_CN] 意思是 [`::Y]
  };
};
[codeblock:end]
[end:example]

[para]
[:en]
The injected-class-name of a class template or class template specialization can
be used as either a [~template-name] or a [~type-name] wherever it is named.
[:zh_CN]
类模板或类模板特化式的注入类名，只要其被指名，就可以被用作[~模板名]或[~类型名]。

[begin:example]
[codeblock]
template <class T> struct Base {
  Base* p;
};

template <class T> struct Derived: public Base<T> {
  typename Derived::Base* p;            // [:en] meaning [`Derived::Base<T>] \
                                        [:zh_CN] 意思是 [`Derived::Base<T>]
};

template<class T, template<class> class U = T::Base> struct Third { };
Third<Derived<int> > t;                 // [:en] OK, default argument uses injected-class-name as a template \
                                        [:zh_CN] OK，默认实参将注入类名用作模板
[codeblock:end]
[end:example]

[para]
[:en]
A lookup that finds an injected-class-name ([#class.member.lookup]) can result
in an ambiguity in certain cases (for example, if it is found in more than one
base class).
[:zh_CN]
找到注入类名的查找（[#class.member.lookup]），在某些情况下可能导致歧义（例如当
在多个基类中找到时）。

[:en]
If all of the injected-class-names that are found refer to specializations of
the same class template, and if the name is used as a [~template-name], the
reference refers to the class template itself and not a specialization thereof,
and is not ambiguous.
[:zh_CN]
如果所找到的所有注入类名都涉指同一个类模板的特例，且其名字被用作[~模板名]，则所
涉指的是类模板自身而不是其特例，并且没有歧义。

[begin:example]
[codeblock]
template <class T> struct Base { };
template <class T> struct Derived: Base<int>, Base<char> {
  typename Derived::Base b;             // [:en] error: ambiguous \
                                        [:zh_CN] 错误：有歧义
  typename Derived::Base<double> d;     // OK
};
[codeblock:end]
[end:example]

[para]
[:en]
When the normal name of the template (i.e., the name from the enclosing scope,
not the injected-class-name) is used, it always refers to the class template
itself and not a specialization of the template.
[:zh_CN]
当使用模板的普通名字（就是外围作用域中的名字，而不是注入类名）时，它总是涉指该类
模板自身而不是该模板的特例。

[begin:example]
[codeblock]
template<class T> class X {
  X* p;                                 // [:en] meaning [`X<T>] \
                                        [:zh_CN] 意思是 [`X<T>]
  X<T>* p2;
  X<int>* p3;
  ::X* p4;                              // [:en] error: missing template argument list \
                                        [:zh_CN] 错误：缺少模板实参列表
                                        // [:en@~] [`::X] does not refer to the injected-class-name \
                                        [:zh_CN@~] [`::X] 并不涉指注入类名
};
[codeblock:end]
[end:example]

[para]
[:en]
The name of a [~template-parameter] shall not be bound to any following
declaration contained by the scope to which the [~template-parameter] belongs.
[:zh_CN]
[~模板形参]的名字不能与该[~模板形参]所属的作用域中随其之后的任何声明式绑定。

[:en]
A [~template-parameter] shall not have the same name as the template name.
[:zh_CN]
[~模板形参]不能具有与模板名相同的名字。

[begin:example]
[codeblock]
template<class T, int i> class Y {
  int T;                                // [:en] error: [~template-parameter] hidden \
                                        [:zh_CN] 错误：[~模板形参]被隐藏
  void f() {
    char T;                             // [:en] error: [~template-parameter] hidden \
                                        [:zh_CN] 错误：[~模板形参]被隐藏
  }
  friend void T();                      // [:en] OK, no name bound \
                                        [:zh_CN] OK，未绑定名字
};

template<class X> class X;              // [:en] error: hidden by [~template-parameter] \
                                        [:zh_CN] 错误：被[~模板形参]隐藏
[codeblock:end]
[end:example]

[para]
[:en]
Unqualified name lookup considers the template parameter scope of a
[~template-declaration] immediately after the outermost scope associated with
the template declared (even if its parent scope does not contain the
[~template-parameter-list]).
[:zh_CN]
无限定名字查找考虑紧跟所声明的模板所关联的最外层作用域之后的[~模板声明式]的模板
形参作用域，即便其外围作用域并不包含[~模板形参列表]也是如此。

[begin:note]
[:en]
The scope of a class template, including its non-dependent base classes
([#temp.dep.type], [#class.member.lookup]), is searched before its template
parameter scope.
[:zh_CN]
类模板的作用域，包括其待决基类（[#temp.dep.type]，[#class.member.lookup]），先于
其模板形参作用域之前搜索。
[end:note]

[begin:example]
[codeblock]
struct B { };
namespace N {
  typedef void V;
  template<class T> struct A : B {
    typedef void C;
    void f();
    template<class U> void g(U);
  };
}

template<class V> void N::A<V>::f() {   // [:en] [`N::V] not considered here \
                                        [:zh_CN] 此处不考虑 [`N::V]
  V v;                                  // [:en] [`V] is still the template parameter, not [`N::V] \
                                        [:zh_CN] [`V] 还是模板形参，而不是 [`N::V]
}

template<class B> template<class C> void N::A<B>::g(C) {
  B b;                                  // [:en] [`B] is the base class, not the template parameter \
                                        [:zh_CN] [`B] 为基类，而非模板形参
  C c;                                  // [:en] [`C] is the template parameter, not [`A][=']s [`C] \
                                        [:zh_CN] [`C] 为模板形参，而非 [`A] 的 [`C]
}
[codeblock:end]
[end:example]
