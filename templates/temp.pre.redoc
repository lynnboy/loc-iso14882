[section#temp.pre
    [:en] Templates
    [:zh_CN] 模板
]

[:en]
[%parameterized type[%template]]
[%type generator[%template]]
[:zh_CN]
[%参数化类型[%模板]]
[%类型生成器[%模板]]

[para]
[:en]
A [+template] defines a family of classes, functions, or variables, an alias for
a family of types, or a concept.
[:zh_CN]
[+模板]定义了一族类、函数或变量，为一族类型定义别名，或者定义一个概念。

[:][%[`template]]

[syntax]
[rule template-declaration [:zh_CN] 模板声明式 ]
    [| template-head declaration ]
    [| template-head concept-definition ]
[rule:end]

[rule template-head [:zh_CN] 模板头 ]
    [| [`:key template] [`<] template-parameter-list [`>] [~:opt requires-clause] ]
[rule:end]

[rule template-parameter-list [:zh_CN] 模板形参列表 ]
    [| template-parameter ]
    [| template-parameter-list [`,] template-parameter ]
[rule:end]

[rule requires-clause [:zh_CN] requires-子句 ]
    [| [`:key requires] constraint-logical-or-expression ]
[rule:end]

[rule constraint-logical-or-expression [:zh_CN] 约束逻辑或表达式 ]
    [| constraint-logical-and-expression ]
    [| constraint-logical-or-expression [`||] constraint-logical-and-expression ]
[rule:end]

[rule constraint-logical-and-expression [:zh_CN] 约束逻辑与表达式 ]
    [| primary-expression ]
    [| constraint-logical-and-expression [`&&] primary-expression ]
[rule:end]
[syntax:end]

[begin:note]
[:en]
The [`>] token following the [~template-parameter-list] of a
[~template-declaration] can be the product of replacing a [`>>] token by two
consecutive [`>] tokens ([#temp.names]).
[:zh_CN]
[~模板声明式]的[~模板形参列表]后面跟着的 [`>] 记号，可能是通过把 [`>>] 记号替换
为两个连续的 [`>] 记号（[#temp.names]）而产生的。
[end:note]

[para]
[:en]
The [~declaration] in a [~template-declaration] (if any) shall
[:zh_CN]
[~模板声明式]中的[~声明式]（如果有）应当

[list]
[item]
[:en@~] declare or define a function, a class, or a variable, or
[:zh_CN@~] 声明或定义函数，类，或变量，或者

[item]
[:en@~] define a member function, a member class, a member enumeration, or a
static data member of a class template or of a class nested within a class
template, or
[:zh_CN@~] 定义某个类模板或嵌套于某个类模板中的类的成员函数、成员类、成员枚举或
静态数据成员，或者

[item]
[:en@~] define a member template of a class or class template, or
[:zh_CN@~] 定义某个类或类模板的成员模板，或者

[item]
[:en@~] be a [~deduction-guide], or
[:zh_CN@~] 是一个[~推断导引]，或者

[item]
[:en@~] be an [~alias-declaration].
[:zh_CN@~] 是一个[~别名声明式]。
[list:end]

[para]
[:en]
A [~template-declaration] is a [~declaration].
[:zh_CN]
[~模板声明式]是[~声明式]。

[:en]
[%variable template[!definition of]]
A declaration introduced by a template declaration of a variable is a
[+variable template[%template[!variable]]].
[:zh_CN]
[%变量模板[!～定义式]]
由变量的模板声明式所引入的声明式是[+变量模板[%模板[!变量～]]]。

[:en]
A variable template at class scope is a [+static data member template[%template
[!static data member]]].
[:zh_CN]
类作用域的变量模板是[+静态数据成员模板[%模板[!静态数据成员～]]]。

[para:~]
[begin:example]
[codeblock]
template<class T>
  constexpr T pi = T(3.1415926535897932385L);
template<class T>
  T circular_area(T r) {
    return pi<T> * r * r;
  }
struct matrix_constants {
  template<class T>
    using pauli = hermitian_matrix<T, 2>;
  template<class T>
    constexpr static pauli<T> sigma1 = { { 0, 1 }, { 1, 0 } };
  template<class T>
    constexpr static pauli<T> sigma2 = { { 0, -1i }, { 1i, 0 } };
  template<class T>
    constexpr static pauli<T> sigma3 = { { 1, 0 }, { 0, -1 } };
};
[codeblock:end]
[end:example]

[para]
[begin:note]
[:en]
A [~template-declaration] can appear only as a namespace scope or class scope
declaration.
[:zh_CN]
[~模板声明式]只能作为命名空间作用域或类作用域的声明式。
[end:note]

[:en]
Its [~declaration] shall not be an [~export-declaration].
[:zh_CN]
其[~声明式]不能是[~导出声明式]。

[:en]
In a function template declaration, the [~unqualified-id] of the [~declarator-id]
shall be a name.
[:zh_CN]
在函数模板声明式中，其[~声明符标识]的[~无限定标识]应当是一个名字。

[begin:note]
[:en]
A class or variable template declaration of a [~simple-template-id] declares
a partial specialization ([#temp.spec.partial]).
[:zh_CN]
[~简单模板标识]的类或变量模板声明的是部分特化（[#temp.spec.partial]）。
[end:note]

[para]
[:en]
In a [~template-declaration], explicit specialization, or explicit instantiation
the [~init-declarator-list] in the declaration shall contain at most one
declarator.
[:zh_CN]
在[~模板声明式]、显式特化式或显式实例化式中，声明式中的[~带初始化声明符列表]应当
最多包含一个声明符。

[:en]
When such a declaration is used to declare a class template, no declarator is
permitted.
[:zh_CN]
当使用这样的声明式来声明类模板时，不允许出现声明符。

[para]
[:en]
[%template name[!linkage of]]
A specialization (explicit or implicit) of one template is distinct from all
specializations of any other template.
[:zh_CN]
[%模板名[!～的连接]]
一个模板的（显式或隐式的）特例与任何其他模板的特例均不同。

[:en]
A template, an explicit specialization ([#temp.expl.spec]), and a partial
specialization shall not have C language linkage.
[:zh_CN]
模板，显式特化式（[#temp.expl.spec]），和部分特化式均不能具有 C 语言连接。

[begin:note]
[:en]
Default arguments for function templates and for member functions of class
templates are considered definitions for the purpose of template instantiation
([#temp.decls]) and must obey the one definition rule ([#basic.def.odr]).
[:zh_CN]
在进行模板实例化（[#temp.decls]）时，函数模板或类模板的成员函数的默认实参被当作
是定义式，且必须遵循唯一定义原则（[#basic.def.odr]）。
[end:note]

[para]
[begin:note]
[:en]
A template cannot have the same name as any other name bound in the same scope
([#basic.scope.scope]), except that a function template can share a name with
non-template functions ([#dcl.fct]) and/or function templates ([#temp.over]).
[:zh_CN]
除了函数模板可以和非模板函数（[#dcl.fct]）以及函数模板（[#temp.over]）共享一个
名字之外，模板的名字不能与相同作用域中绑定的任何其他名字（[#basic.scope.scope]）
相同。

[:en]
Specializations, including partial specializations ([#temp.spec.partial]),
do not reintroduce or bind names.
[:zh_CN]
特化式，包括部分特化式（[#temp.spec.partial]），并不会重新引入或者绑定名字。

[:en]
Their target scope is the target scope of the primary template,
so all specializations of a template belong to the same scope as it does.
[:zh_CN]
它们的目标作用域是其主模板的目标作用域，因此模板的所有特化式都属于它所属的相同
作用域。
[end:note]

[para]
[:en]
[%entity[!templated]]
An entity is [+templated] if it is
[:zh_CN]
[%实体[!模板化～]]
[+模板化]的实体是

[list]
[item]
[:en@~] a template,
[:zh_CN@~] 模板，
[item]
[:en@~] an entity defined ([#basic.def]) or created ([#class.temporary]) in a
templated entity,
[:zh_CN@~] 在模板化实体之中定义（[#basic.def]）或创建（[#class.temporary]）的
实体，
[item]
[:en@~] a member of a templated entity,
[:zh_CN@~] 模板化实体的成员，
[item]
[:en@~] an enumerator for an enumeration that is a templated entity, or
[:zh_CN@~] 作为模板化实体的枚举的枚举符，或
[item]
[:en@~] the closure type of a [~lambda-expression] ([#expr.prim.lambda.closure])
appearing in the declaration of a templated entity.
[:zh_CN@~] 在模板化实体的定义式中出现的[~lambda-表达式]的闭包类型
（[#expr.prim.lambda.closure]）。
[list:end]

[begin:note]
[:en]
A local class, a local or block variable, or a friend function defined in a
templated entity is a templated entity.
[:zh_CN]
在模板化实体之中所定义的局部类，局部或块变量，以及友元函数均为模板化实体。
[end:note]

[para]
[:en]
A [~template-declaration] is written in terms of its template parameters.
[:zh_CN]
[~模板声明式]是以它的各模板形参为基础编写的。

[:en]
The optional [~requires-clause] following a [~template-parameter-list] allows
the specification of constraints ([#temp.constr.decl]) on template arguments
([#temp.arg]).
[:zh_CN]
跟在[~模板形参列表]之后的可选的 [~requires-子句]，允许针对模板实参（[#temp.arg]）
说明约束（[#temp.constr.decl]）。

[:en]
The [~requires-clause] introduces the [~constraint-expression] that results from
interpreting the [~constraint-logical-or-expression] as a
[~constraint-expression].
[:zh_CN]
[~requires-子句]所引入的[~约束表达式]是将[~约束逻辑或表达式]作为[~约束表达式]
解释的结果。

[:en]
The [~constraint-logical-or-expression] of a [~requires-clause] is an
unevaluated operand ([#expr.context]).
[:zh_CN]
[~requires-子句]的[~约束逻辑与表达式]是免求值操作数（[#expr.context]）。

[begin:note]
[:en]
The expression in a [~requires-clause] uses a restricted grammar to avoid
ambiguities.
[:zh_CN]
[~requires-子句]中的表达式使用一套受限制的文法来避免歧义。

[:en]
Parentheses can be used to specify arbitrary expressions in a [~requires-clause].
[:zh_CN]
可以用括号在 [~requires-子句]中指定任意的表达式。

[begin:example]
[codeblock]
template<int N> requires N == sizeof new unsigned short
int f();            // [:en] error: parentheses required around [`==] expression \
                    [:zh_CN] 错误：[`==] 表达式需要有括号包围
[codeblock:end]
[end:example]
[end:note]

[para]
[:en]
A definition of a function template, member function of a class template,
variable template, or static data member of a class template shall be reachable
from the end of every definition domain ([#basic.def.odr]) in which it is
implicitly instantiated ([#temp.inst]) unless the corresponding specialization
is explicitly instantiated ([#temp.explicit]) in some translation unit;
no diagnostic is required.
[:zh_CN]
函数模板，类模板的成员函数，变量模板，或者类模板的静态数据成员，从它隐式实例化
（[#temp.inst]）的每个定义域的末尾处，应当有一个定义式可达（[#basic.def.odr]），
除非其对应特例在某个翻译单元中被显式实例化（[#temp.explicit]）；无须诊断。

[%:end#template]
