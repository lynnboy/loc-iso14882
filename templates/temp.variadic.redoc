[section#temp.variadic
    [:en] Variadic templates
    [:zh_CN] 变参模板
]

[para]
[:en]
A [+template parameter pack] is a template parameter that accepts zero or more
template arguments.
[:zh_CN]
[+模板形参包组]是接受零个或多个模板实参的模板形参。

[begin:example]
[codeblock]
template<class ... Types> struct Tuple { };

Tuple<> t0;                     // [:en] [`Types] contains no arguments \
                                [:zh_CN] [`Types] 不包含实参
Tuple<int> t1;                  // [:en] [`Types] contains one argument: [`int] \
                                [:zh_CN] [`Types] 包含一个实参：[`int]
Tuple<int, float> t2;           // [:en] [`Types] contains two arguments: [`int] and [`float] \
                                [:zh_CN] [`Types] 包含两个实参：[`int] 和 [`float]
Tuple<0> error;                 // [:en] error: [`0] is not a type \
                                [:zh_CN] 错误：[`0] 不是类型
[codeblock:end]
[end:example]

[para]
[:en]
A [+function parameter pack] is a function parameter that accepts zero or more
function arguments.
[:zh_CN]
[+函数形参包组]是接受零个或多个函数实参的函数形参。

[begin:example]
[codeblock]
template<class ... Types> void f(Types ... args);

f();                            // [:en] [`args] contains no arguments \
                                [:zh_CN] [`args] 不包含实参
f(1);                           // [:en] [`args] contains one argument: [`int] \
                                [:zh_CN] [`args] 包含一个实参：[`int]
f(2, 1.0);                      // [:en] [`args] contains two arguments: [`int] and [`double] \
                                [:zh_CN] [`args] 包含两个实参：[`int] 和 [`double]
[codeblock:end]
[end:example]

[para]
[:en]
An [+[~init-capture] pack] is a lambda capture that introduces an [~init-capture]
for each of the elements in the pack expansion of its [~initializer].
[:zh_CN]
[+[~带初始化俘获符]包组]是 lambda 俘获符，为其[~初始化式]的包组展开中的每个元素
都引入一个[~带初始化俘获符]。

[begin:example]
[codeblock]
template <typename... Args>
void foo(Args... args) {
    [...xs=args]{
        bar(xs...);             // [:en] [`xs] is an [~init-capture] pack \
                                [:zh_CN] [`xs] 是一个[~带初始化俘获符]包组
    };
}

foo();                          // [:en] [`xs] contains zero [~init-capture]s \
                                [:zh_CN] [`xs] 包含零个[~带初始化俘获符]
foo(1);                         // [:en] [`xs] contains one [~init-capture] \
                                [:zh_CN] [`xs] 包含一个[~带初始化俘获符]
[codeblock:end]
[end:example]

[para]
[:en]
A [+pack] is a template parameter pack, a function parameter pack, or an
[~init-capture] pack.
[:zh_CN]
[+包组]是模板形参包组、函数形参包组或[~带初始化俘获符]包组。

[:en]
The number of elements of a template parameter pack or a function parameter pack
is the number of arguments provided for the parameter pack.
[:zh_CN]
模板形参包组或函数形参包组的元素数量是提供给形参包组的实参的数量。

[:en]
The number of elements of an [~init-capture] pack is the number of elements in
the pack expansion of its [~initializer].
[:zh_CN]
[~带初始化俘获符]包组的元素数量是其[~初始化式]的包组展开中的元素数量。

[para]
[:en]
[%pattern[%pack expansion[!pattern]]]
A [+pack expansion] consists of a [+pattern[%pack expansion[!pattern]]] and an
ellipsis, the instantiation of which produces zero or more instantiations of the
pattern in a list (described below).
[:zh_CN]
[%模式[%包组展开式[!模式]]]
[+包组展开式]由一个[+模式[%包组展开式[!模式]]]和一个省略号构成，它的实例化将产生
包含零个或更多该模式的实例的一个列表（见下文说明）。

[:en]
The form of the pattern depends on the context in which the expansion occurs.
[:zh_CN]
其模式的形式依赖于展开式所在的语境。

[:en]
Pack expansions can occur in the following contexts:
[:zh_CN]
包组展开式可以出现于下列语境中：

[list]
[item]
[:en] In a function parameter pack ([#dcl.fct]); the pattern is the
[~parameter-declaration] without the ellipsis.
[:zh_CN] 在函数形参包组（[#dcl.fct]）中；其模式是不带有省略号的[~形参声明式]。

[item]
[:en] In a [~using-declaration] ([#namespace.udecl]); the pattern is a
[~using-declarator].
[:zh_CN] 在[~using-声明式]（[#namespace.udecl]）中；其模式为[~using-声明符]。

[item]
[:en] In a template parameter pack that is a pack expansion ([#temp.param]):
[:zh_CN] 在作为包组展开式的模板形参包组（[#temp.param]）中：

[list]
[item]
[:en] if the template parameter pack is a [~parameter-declaration];
the pattern is the [~parameter-declaration] without the ellipsis;
[:zh_CN] 若该模板形参包组是一个[~形参声明式]，则其模式是不带有省略号的
[~形参声明式]；

[item]
[:en] if the template parameter pack is a [~type-parameter]; the pattern is the
corresponding [~type-parameter] without the ellipsis.
[:zh_CN] 若该模板形参包组是一个[~类型形参]，则其模式为对应的不带有省略号的
[~类型形参]。
[list:end]

[item]
[:en] In an [~initializer-list] ([#dcl.init]); the pattern is an
[~initializer-clause].
[:zh_CN] 在[~初始化式列表]（[#dcl.init]）中；其模式是个[~初始化式子句]。

[item]
[:en] In a [~base-specifier-list] ([#class.derived]); the pattern is a
[~base-specifier].
[:zh_CN] 在[~基说明符列表]（[#class.derived]）中；其模式是个[~基说明符]。

[item]
[:en] In a [~mem-initializer-list] ([#class.base.init]) for a [~mem-initializer]
whose [~mem-initializer-id] denotes a base class; the pattern is the
[~mem-initializer].
[:zh_CN] 在[~成员初始化式列表]（[#class.base.init]）中；其模式是个[~成员初始化式]。

[item]
[:en] In a [~template-argument-list] ([#temp.arg]); the pattern is a
[~template-argument].
[:zh_CN] 在[~模板实参列表]（[#temp.arg]）中；其模式是个[~模板实参]。

[item]
[:en] In an [~attribute-list] ([#dcl.attr.grammar]); the pattern is an
[~attribute].
[:zh_CN] 在[~属性列表]（[#dcl.attr.grammar]）中；其模式是个[~属性]。

[item]
[:en] In an [~alignment-specifier] ([#dcl.align]); the pattern is the
[~alignment-specifier] without the ellipsis.
[:zh_CN] 在[~对齐说明符]（[#dcl.align]）中；其模式是不带有省略号的[~对齐说明符]。

[item]
[:en] In a [~capture-list] ([#expr.prim.lambda.capture]); the pattern is the
[~capture] without the ellipsis.
[:zh_CN] 在[~俘获符列表]（[#expr.prim.lambda.capture]）中；其模式是没有省略号的
[~俘获符]。

[item]
[:en] In a [`sizeof...] expression ([#expr.sizeof]); the pattern is an
[~identifier].
[:zh_CN] 在 [`sizeof...] 表达式（[#expr.sizeof]）中；其模式是个[~标识符]。

[item]
[:en] In a [~fold-expression] ([#expr.prim.fold]); the pattern is the
[~cast-expression] that contains an unexpanded pack.
[:zh_CN] 在[~折叠表达式]（[#expr.prim.fold]）中；其模式是包含未展开的包组的
[~转型表达式]。
[list:end]

[begin:example]
[codeblock]
template<class ... Types> void f(Types ... rest);
template<class ... Types> void g(Types ... rest) {
  f(&rest ...);     // [:en] [=lq][`&rest ...][=rq] is a pack expansion; [=lq][`&rest][=rq] is its pattern \
                    [:zh_CN] “[`&rest ...]”是包组展开式；“[`&rest]”是其模式
}
[codeblock:end]
[end:example]

[para]
[:en]
For the purpose of determining whether a pack satisfies a rule regarding
entities other than packs, the pack is considered to be the entity that would
result from an instantiation of the pattern in which it appears.
[:zh_CN]
当确定包组是否符合有关非包组的实体的规定时，包组被当作由包含它的模式进行实例化
所得到的实体一样来进行处理。

[para]
[:en]
A pack whose name appears within the pattern of a pack expansion is expanded by
that pack expansion.
[:zh_CN]
若包组的名字出现于某个包组展开式的模式之中，则它被此包组展开式所展开。

[:en]
An appearance of the name of a pack is only expanded by the innermost enclosing
pack expansion.
[:zh_CN]
每次出现的包组名字，仅会被其最内层的外围包组展开式所展开。

[:en]
The pattern of a pack expansion shall name one or more packs that are not
expanded by a nested pack expansion; such packs are called [+unexpanded packs
[%pack[!unexpanded]]] in the pattern.
[:zh_CN]
包组展开式的模式中，应当指名一个或多个未被其中所嵌套的包组展开式所展开的包组；
这种包组被称为这个模式中的[+未展开的包组[%包组[!未展开的～]]]。

[:en]
All of the packs expanded by a pack expansion shall have the same number of
arguments specified.
[:zh_CN]
被包组展开式所展开的所有包组都应当指定相同数量的实参。

[:en]
An appearance of a name of a pack that is not expanded is ill-formed.
[:zh_CN]
出现未被展开的包组的名字是非良构的。

[begin:example]
[codeblock]
template<typename...> struct Tuple {};
template<typename T1, typename T2> struct Pair {};

template<class ... Args1> struct zip {
  template<class ... Args2> struct with {
    typedef Tuple<Pair<Args1, Args2> ... > type;
  };
};

typedef zip<short, int>::with<unsigned short, unsigned>::type T1;
    // [:en] [`T1] is [`Tuple<Pair<short, unsigned short>, Pair<int, unsigned>>] \
    [:zh_CN] [`T1] 为 [`Tuple<Pair<short, unsigned short>, Pair<int, unsigned>>]
typedef zip<short>::with<unsigned short, unsigned>::type T2;
    // [:en] error: different number of arguments specified for [`Args1] and [`Args2] \
    [:zh_CN] 错误：为 [`Args1] 和 [`Args2] 指定了不同数量的实参

template<class ... Args>
  void g(Args ... args) {                   // [:en] OK: [`Args] is expanded by the function parameter pack [`args] \
                                            [:zh_CN] OK：[`Args] 由函数形参包组 [`args] 所展开
    f(const_cast<const Args*>(&args)...);   // [:en] OK: [=lq][`Args][=rq] and [=lq][`args][=rq] are expanded \
                                            [:zh_CN] OK：展开了“[`Args]”和“[`args]”
    f(5 ...);                               // [:en] error: pattern does not contain any packs \
                                            [:zh_CN] 错误：模式并不包含任何包组
    f(args);                                // [:en] error: pack [=lq][`args][=rq] is not expanded \
                                            [:zh_CN] 错误：包组“[`args]”未被展开
    f(h(args ...) + args ...);              // [:en] OK: first [=lq][`args][=rq] expanded within [`h], \
                                            [:zh_CN] OK：第一个“[`args]”在 [`h] 中被展开，
                                            // [:en@~] second [=lq][`args][=rq] expanded within [`f] \
                                            [:zh_CN@~] 第二个“[`args]”在 [`f] 中被展开
  }
[codeblock:end]
[end:example]

[para]
[:en]
The instantiation of a pack expansion considers items
[$[`E]_1, [`E]_2, \dotsc, [`E]_N], where [$N] is the number of elements in the
pack expansion parameters.
[:zh_CN]
包组展开式的实例化，考虑其各项“[$[`E]_1, [`E]_2, \cdots, [`E]_N]”，其中 [$N] 为
该包组展开式形参的元素数量。

[:en]
Each [$[`E]_i] is generated by instantiating the pattern and replacing each pack
expansion parameter with its [$i^\text{th}] element.
[:zh_CN]
每个 [$[`E]_i] 是通过实例化其模式并把每个包组展开式形参用其第 [$i] 个元素代替而
产生的。

[:en]
Such an element, in the context of the instantiation, is interpreted as follows:
[:zh_CN]
这种元素在进行实例化的语境中以如下方式进行解释：

[list]
[item]
[:en]
if the pack is a template parameter pack, the element is an [~id-expression]
(for a non-type template parameter pack), a [~typedef-name] (for a type template
parameter pack declared without [`template]), or a [~template-name] (for a type
template parameter pack declared with [`template]) if the pack was introduced
by a pack expansion, designating the [$i^\text{th}] corresponding type or value
template argument;
[:zh_CN]
如果该包组是模板形参包组，则当该包组是由包组展开式所引入时，该元素是[~标识表达式]
（对于非类型模板形参包组），[~typedef-名]（对于声明时不带有 [`template] 的类型
模板形参包组），或[~模板名]（对于声明时带有 [`template] 的类型模板形参包组），
并代表第 [$i] 个对应的类型或值模板实参；

[item]
[:en]
if the pack is a function parameter pack, the element is an [~id-expression]
designating the [$i^\text{th}] function parameter that resulted from
instantiation of the function parameter pack declaration; otherwise,
[:zh_CN]
如果该包组是函数形参包组，则该元素是一个[~标识表达式]，并代表这个函数形参包组
声明式的实例化所得到的第 [$i] 个函数形参；否则，

[item]
[:en]
if the pack is an [~init-capture] pack, the element is an [~id-expression]
designating the variable introduced by the [$i^\text{th}] [~init-capture] that
resulted from instantiation of the [~init-capture] pack.
[:zh_CN]
如果该包组是[~带初始化俘获符]包组，则该元素是一个[~标识表达式]，并代表由这个
[~带初始化俘获符]包组的实例化所得到的第 [$i] 个[~带初始化俘获符]所引入的变量。
[list:end]

[:en]
When [$N] is zero, the instantiation of a pack expansion does not alter the
syntactic interpretation of the enclosing construct, even in cases where
omitting the pack expansion entirely would otherwise be ill-formed or would
result in an ambiguity in the grammar.
[:zh_CN]
当 [$N] 为零时，包组展开式的实例化并不会改变对包围它的语言构造的语法解释，即使
某些情况下完全省略这个包装展开式可能是非良构的，或者可能导致文法中的歧义也是如此。

[para]
[:en]
The instantiation of a [`sizeof...] expression ([#expr.sizeof]) produces an
integral constant with value [$N].
[:zh_CN]
[`sizeof...] 表达式（[#expr.sizeof]）的实例化，产生一个值为 [$N] 的整型常量。

[para]
[:en]
The instantiation of a [~fold-expression] ([#expr.prim.fold]) produces:
[:zh_CN]
[~折叠表达式]（[#expr.prim.fold]）的实例化产生：

[list]
[item]
[:en]
[`((][$[`E]_1] [^op] [$[`E]_2][`)] [^op] [$\cdots] [`)] [^op] [$[`E]_N] for a
unary left fold,
[:zh_CN]
[`((][$[`E]_1] [^op] [$[`E]_2][`)] [^op] [$\cdots] [`)] [^op] [$[`E]_N]（对于
一元左折叠），
[item]
[:en]
[$[`E]_1] [^op] [`(][$\cdots] [^op] [`(][$[`E]_{N-1}] [^op] [$[`E]_N][`))] for a
unary right fold,
[:zh_CN]
[$[`E]_1] [^op] [`(][$\cdots] [^op] [`(][$[`E]_{N-1}] [^op] [$[`E]_N][`))]（对于
一元右折叠），
[item]
[:en]
[`(((][$[`E]] [^op] [$[`E]_1][`)] [^op] [$[`E]_2][`)] [^op] [$\cdots][`)] [^op]
[$[`E]_N] for a binary left fold, and
[:zh_CN]
[`(((][$[`E]] [^op] [$[`E]_1][`)] [^op] [$[`E]_2][`)] [^op] [$\cdots][`)] [^op]
[$[`E]_N]（对于二元左折叠），以及
[item]
[:en]
[$[`E]_1] [^op] [`(][$\cdots] [^op] [`(][$[`E]_{N-1}] [^op] [`(][$[`E]_N] [^op]
[`E][`)))] for a binary right fold.
[:zh_CN]
[$[`E]_1] [^op] [`(][$\cdots] [^op] [`(][$[`E]_{N-1}] [^op] [`(][$[`E]_N] [^op]
[`E][`)))]（对于二元右折叠）。
[list:end]

[:en]
In each case, [^op] is the [~fold-operator].
[:zh_CN]
以上每种情况中，[^op] 为[~折叠运算符]。

[:en]
For a binary fold, [`E] is generated by instantiating the [~cast-expression]
that did not contain an unexpanded pack.
[:zh_CN]
对于二元折叠，[`E] 是通过对不包含未展开的包组的[~折叠表达式]进行实例化而产生的。

[begin:example]
[codeblock]
template<typename ...Args>
  bool all(Args ...args) { return (... && args); }

bool b = all(true, true, true, false);
[codeblock:end]

[:en]
Within the instantiation of [`all], the returned expression expands to
[`((true && true) && true) && false], which evalutes to [`false].
[:zh_CN]
在 [`all] 的实例化中，所返回的表达式被展开为 [`((true && true) && true) && false]，
并求值为 [`false]。
[end:example]

[:en]
If [$N] is zero for a unary fold, the value of the expression is shown in
[#:tab#temp.fold.empty]; if the operator is not listed in [#:tab#temp.fold.empty],
the instantiation is ill-formed.
[:zh_CN]
当一元折叠表达式的 [$N] 为零时，表达式的值如 [#:tab#temp.fold.empty] 所示；若其
运算符未在 [#:tab#temp.fold.empty] 中列出，则其实例化非良构。

[table:listing@shape=?x?@fill=column@code#temp.fold.empty
    [:en] Value of folding empty sequences
    [:zh_CN] 折叠空序列的值
    [|@code
        [:en] Operator
        [:zh_CN] 运算符
    ]
    [|@code
        [:en] Value when pack is empty
        [:zh_CN] 当包组为空时的值
    ]
]
[|] &&  [|] true
[|] ||  [|] false
[|] ,   [|] void()
[table:end]

[para]
[:en]
The instantiation of any other pack expansion produces a list of elements
[$[`E]_1, [`E]_2, \dotsc, [`E]_N].
[:zh_CN]
任何其他包组展开式的实例化，产生一个元素列表“[$[`E]_1, [`E]_2, \dotsc, [`E]_N]”。

[begin:note]
[:en]
The variety of list varies with the context: [~expression-list],
[~base-specifier-list], [~template-argument-list], etc.
[:zh_CN]
列表的种类跟随语境变化：[~表达式列表]，[~基说明符列表]，[~模板实参列表]，等等。
[end:note]

[:en]
When [$N] is zero, the instantiation of the expansion produces an empty list.
[:zh_CN]
当 [$N] 为零时，展开式的实例化产生空列表。

[begin:example]
[codeblock]
template<class... T> struct X : T... { };
template<class... T> void f(T... values) {
  X<T...> x(values...);
}

template void f<>();    // [:en] OK: [`X<>] has no base classes \
                        [:zh_CN] OK：[`X<>] 没有基类
                        // [:en@~] [`x] is a variable of type [`X<>] that is value-initialized \
                        [:zh_CN@~] [`x] 是类型 [`X<>] 的变量，并进行值初始化
[codeblock:end]
[end:example]
