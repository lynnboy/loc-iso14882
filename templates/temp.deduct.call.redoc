[section#temp.deduct.call
    [:en] Deducing template arguments from a function call
    [:zh_CN] 从函数调用中推断模板实参
]

[para]
[:en]
Template argument deduction is done by comparing each function template
parameter type (call it [`P]) that contains [~template-parameter]s that
participate in template argument deduction with the type of the corresponding
argument of the call (call it [`A]) as described below.
[:zh_CN]
模板实参推断是按如下所述，通过对每个包含了参与模板实参推断的[~模板形参]的函数
模板形参类型（称其为 [`P]）与调用中的对应实参的类型（称其为 [`A]）进行比较而作出
的。

[:en]
If removing references and cv-qualifiers from [`P] gives
[`std::initializer_list<P[$']>] or [`P[$']`[N`]] for some [`P][$'] and [`N] and
the argument is a non-empty initializer list ([#dcl.init.list]), then deduction
is performed instead for each element of the initializer list independently,
taking [`P][$'] as separate function template parameter types [`P][$'_i] and the
[$i][^th] initializer element the corresponding argument.
[:zh_CN]
如果从 [`P] 移除引用和 cv 限定符将会得到（对某个 [`P][$']）
[`std::initializer_list<P[$']>] 或者 [`P[$']`[N`]]，并且其实参是个非空初始化式
列表（[#dcl.init.list]），则为初始化式列表中的每个元素进行独立的推断，其中将
[`P][$'] 作为独立的函数模板形参类型 [`P][$'_i]，并以第 [$i] 个初始化式的元素作为
其实参进行推断。

[:en]
In the [`P[$']`[N`]] case, if [`N] is a non-type template parameter, [`N] is
deduced from the length of the initializer list.
[:zh_CN]
在 [`P[$']`[N`]] 的情况中，如果 [`N] 是某个非类型模板形参，则 [`N] 从初始化式
列表的长度推断出来。

[:en]
Otherwise, an initializer list argument causes the parameter to be considered a
non-deduced context ([#temp.deduct.type]).
[:zh_CN]
否则，初始化式列表实参将使其形参被当作非推断语境处理（[#temp.deduct.type]）。

[begin:example]
[codeblock]
template<class T> void f(std::initializer_list<T>);
f({1,2,3});                     // [:en] [`T] deduced as [`int] \
                                   [:zh_CN] [`T] 被推断为 [`int]
f({1,"asdf"});                  // [:en] error: [`T] deduced as both [`int] and [`const char*] \
                                   [:zh_CN] 错误：[`T] 同时被推断为 [`int] 和 [`const char*]

template<class T> void g(T);
g({1,2,3});                     // [:en] error: no argument deduced for [`T] \
                                   [:zh_CN] 错误：未对 [`T] 推断出实参

template<class T, int N> void h(T const(&)[N]);
h({1,2,3});                     // [:en] [`T] deduced as [`int]; [`N] deduced as [`3] \
                                   [:zh_CN] [`T] 被推断为 [`int]；[`N] 被推断为 [`3]

template<class T> void j(T const(&)[3]);
j({42});                        // [:en] [`T] deduced as [`int]; array bound not considered \
                                   [:zh_CN] [`T] 被推断为 [`int]；不考虑数组的界

struct Aggr { int i; int j; };
template<int N> void k(Aggr const(&)[N]);
k({1,2,3});                     // [:en] error: deduction fails, no conversion from [`int] to [`Aggr] \
                                   [:zh_CN] 错误：推断失败，不存在从 [`int] 向 [`Aggr] 的转换
k({{1},{2},{3}});               // [:en] OK, [`N] deduced as [`3] \
                                   [:zh_CN] OK，[`N] 被推断为 [`3]

template<int M, int N> void m(int const(&)[M][N]);
m({{1,2},{3,4}});               // [:en] [`M] and [`N] both deduced as [`2] \
                                   [:zh_CN] [`M] 和 [`N] 都被推断为 [`2]

template<class T, int N> void n(T const(&)[N], T);
n({{1},{2},{3}},Aggr());        // [:en] OK, [`T] is [`Aggr], [`N] is [`3] \
                                   [:zh_CN] OK，[`T] 为 [`Aggr]，[`N] 为 [`3]

template<typename T, int N> void o(T (* const (&)[N])(T)) { }
int f1(int);
int f4(int);
char f4(char);
o({ &f1, &f4 });                                // [:en] OK, [`T] deduced as [`int] from first element, nothing \
                                                   [:zh_CN] OK，[`T] 从第一个元素推断为 [`int]，
                                                // [:en@~] deduced from second element, [`N] deduced as [`2] \
                                                vzh_CN@~] 第二个元素没有推断，[`N] 被推断为 [`2]
o({ &f1, static_cast<char(*)(char)>(&f4) });    // [:en] error: conflicting deductions for [`T] \
                                                   [:zh_CN] 错误：对 [`T] 的推断发生冲突
[codeblock:end]
[end:example]

[:en]
For a function parameter pack that occurs at the end of the
[~parameter-declaration-list], deduction is performed for each remaining
argument of the call, taking the type [`P] of the [~declarator-id] of the
function parameter pack as the corresponding function template parameter type.
[:zh_CN]
对于出现在[~形参声明式列表]的末尾的函数形参包组，为该调用中的每个余下的实参，以
该函数形参包组的[~声明符标识]的类型 [`P] 为其对应的函数模板形参类型来进行推断。

[:en]
Each deduction deduces template arguments for subsequent positions in the
template parameter packs expanded by the function parameter pack.
[:zh_CN]
这些推断为被函数形参包组所展开的模板形参包组中的后续位置的模板实参进行推断。

[:en]
When a function parameter pack appears in a non-deduced context
([#temp.deduct.type]), the type of that pack is never deduced.
[:zh_CN]
如果函数形参包组出现于非推断语境中（[#temp.deduct.type]），则该包组的类型不会
进行推断。

[begin:example]
[codeblock]
template<class ... Types> void f(Types& ...);
template<class T1, class ... Types> void g(T1, Types ...);
template<class T1, class ... Types> void g1(Types ..., T1);

void h(int x, float& y) {
  const int z = x;
  f(x, y, z);                   // [:en] [`Types] deduced as [`int], [`float], [`const int] \
                                   [:zh_CN] [`Types] 被推断为“[`int], [`float], [`const int]”
  g(x, y, z);                   // [:en] [`T1] deduced as [`int]; [`Types] deduced as [`float], [`int] \
                                   [:zh_CN] [`T1] 被推断为 [`int]；[`Types] 被推断为“[`float], [`int]”
  g1(x, y, z);                  // [:en] error: [`Types] is not deduced \
                                   [:zh_CN] 错误：[`Types] 未推断
  g1<int, int, int>(x, y, z);   // [:en] OK, no deduction occurs \
                                   [:zh_CN] OK，未发生推断
}
[codeblock:end]

[end:example]

[para]
[:en]
If [`P] is not a reference type:
[:zh_CN]
若 [`P] 不是引用类型：

[list]
[item]
[:en]
If [`A] is an array type, the pointer type produced by the array-to-pointer
standard conversion ([#conv.array]) is used in place of [`A] for type deduction;
otherwise,
[:zh_CN]
若 [`A] 为数组类型，则在类型推断中由数组向指针标准转换（[#conv.array]）所产生的
指针类型替代 [`A]；否则，

[item]
[:en]
If [`A] is a function type, the pointer type produced by the function-to-pointer
standard conversion ([#conv.func]) is used in place of [`A] for type deduction;
otherwise,
[:zh_CN]
若 [`A] 为函数类型，则在类型推断中由函数向指针标准转换（[#conv.func]）所产生的
指针类型替代 [`A]；否则，

[item]
[:en]
If [`A] is a cv-qualified type, the top level cv-qualifiers of [`A][=']s type
are ignored for type deduction.
[:zh_CN]
若 [`A] 为被 cv 限定的类型，则在类型推断中 [`A] 的类型的顶层 cv 限定符被忽略。
[list:end]

[para]
[:en]
[%reference[!forwarding]]
If [`P] is a cv-qualified type, the top level cv-qualifiers of [`P][=']s type
are ignored for type deduction.
[:zh_CN]
[%引用[!转发～]]
若 [`P] 为被 cv 限定的类型，则在类型推断中 [`P] 的类型的顶层 cv 限定符被忽略。

[:en]
If [`P] is a reference type, the type referred to by [`P] is used for type
deduction.
[:zh_CN]
若 [`P] 是引用类型，则在类型推断中使用由 [`P] 所指代的类型。

[begin:example]
[codeblock]
template<class T> int f(const T&);
int n1 = f(5);                  // [:en] calls [`f<int>(const int&)] \
                                   [:zh_CN] 调用了 [`f<int>(const int&)]
const int i = 0;
int n2 = f(i);                  // [:en] calls [`f<int>(const int&)] \
                                   [:zh_CN] 调用了 [`f<int>(const int&)]
template <class T> int g(volatile T&);
int n3 = g(i);                  // [:en] calls [`g<const int>(const volatile int&)] \
                                   [:zh_CN] 调用了 [`g<const int>(const volatile int&)]
[codeblock:end]
[end:example]

[:en]
A [+forwarding reference] is an rvalue reference to a cv-unqualified template
parameter that does not represent a template parameter of a class template
(during class template argument deduction ([#over.match.class.deduct])).
[:zh_CN]
[+转发引用]是 cv 未限定的模板形参的右值引用，且其并非（在类模板实参推断
（[#over.match.class.deduct]）中）表示某个类模板的模板形参。

[:en]
If [`P] is a forwarding reference and the argument is an lvalue, the type
[=lq]lvalue reference to [`A][=rq] is used in place of [`A] for type deduction.
[:zh_CN]
若 [`P] 为转发引用，而其实参是一个左值，则在类型推断中使用“[`A] 的左值引用”替代
[`A]。

[begin:example]
[codeblock]
template <class T> int f(T&& heisenreference);
template <class T> int g(const T&&);
int i;
int n1 = f(i);                  // [:en] calls [`f<int&>(int&)] \
                                   [:zh_CN] 调用了 [`f<int&>(int&)]
int n2 = f(0);                  // [:en] calls [`f<int>(int&&)] \
                                   [:zh_CN] 调用了[`f<int>(int&&)]
int n3 = g(i);                  // [:en] error: would call [`g<int>(const int&&)], which \
                                   [:zh_CN] 错误：试图调用 [`g<int>(const int&&)]，
                                // [:en@~] would bind an rvalue reference to an lvalue \
                                   [:zh_CN@~] 但这将把一个右值引用绑定到左值

template <class T> struct A {
  template <class U>
    A(T&&, U&&, int*);          // [:en] #1: [`T&&] is not a forwarding reference. \
                                   [:zh_CN] #1：[`T&&] 不是转发引用。
                                // [:en] [`U&&] is a forwarding reference. \
                                   [:zh_CN] [`U&&] 是转发引用。
  A(T&&, int*);                 // #2
};

template <class T> A(T&&, int*) -> A<T>;    // [:en] #3: [`T&&] is a forwarding reference. \
                                               [:zh_CN] #3：[`T&&] 是转发引用。

int *ip;
A a{i, 0, ip};                  // [:en] error: cannot deduce from #1 \
                                   [:zh_CN] 错误：无法从 #1 进行推断
A a0{0, 0, ip};                 // [:en] uses #1 to deduce [`A<int>] and #1 to initialize \
                                   [:zh_CN] 使用 #1 推断出 [`A<int>] 并使用 #1 进行初始化
A a2{i, ip};                    // [:en] uses #3 to deduce [`A<int&>] and #2 to initialize \
                                   [:zh_CN] 使用 #3 推断出 [`A<int&>] 并使用 #2 进行初始化
[codeblock:end]
[end:example]

[para]
[:en]
In general, the deduction process attempts to find template argument values that
will make the deduced [`A] identical to [`A] (after the type [`A] is transformed
as described above).
[:zh_CN]
一般地，推断过程试图找到能够使被推断出来的 [`A] 与 [`A]（经由上述对类型 [`A] 的
变换之后）一致的模板实参值。

[:en]
However, there are three cases that allow a difference:
[:zh_CN]
然而，在三种情况下允许有所不同：

[list]
[item]
[:en]
If the original [`P] is a reference type, the deduced [`A] (i.e., the type
referred to by the reference) can be more cv-qualified than the transformed
[`A].
[:zh_CN]
若原来的 [`P] 为引用类型，则被推断出来的 [`P]（就是被该引用所指代的类型）可以比
经变换的 [`P] 更加被 cv 限定的。

[item]
[:en]
The transformed [`A] can be another pointer or pointer-to-member type that can
be converted to the deduced [`A] via a function pointer conversion
([#conv.fctptr]) and/or qualification conversion ([#conv.qual]).
[:zh_CN]
经变换的 [`A] 可以为可通过函数指针转换（[#conv.fctptr]）和/或限定性转换
（[#conv.qual]）转换为被推断出来的 [`A] 的其他指针或成员指针类型。

[item]
[:en]
If [`P] is a class and [`P] has the form [~simple-template-id], then the
transformed [`A] can be a derived class [`D] of the deduced [`A].
[:zh_CN]
若 [`P] 是类，且 [`P] 的形式为[~简单模板标识]，则经变换的 [`A] 可以为被推断出来
的 [`A] 的某个派生类 [`D]。

[:en]
Likewise, if [`P] is a pointer to a class of the form [~simple-template-id], the
transformed [`A] can be a pointer to a derived class [`D] pointed to by the
deduced [`A].
[:zh_CN]
与此相似，若 [`P] 是指向某个形式为[~简单模板标识]的类的指针，则经转换的 [`A]
可以为指向被推断出来的 [`A] 所指向的某个派生类 [`D] 的指针。

[:en]
However, if there is a class [`C] that is a (direct or indirect) base class of
[`D] and derived (directly or indirectly) from a class [`B] and that would be a
valid deduced [`A], the deduced [`A] cannot be [`B] or pointer to [`B],
respectively.
[:zh_CN]
但是，如果存在某个类 [`C] 是 [`D] 的（直接或间接）基类并（直接或间接）派生于类
[`B]，并且可作为有效的被推断出来的 [`A]，则被推断出来的 [`A] 分别都不能为 [`B]
或者 [`B] 的指针。

[begin:example]
[codeblock]
template <typename... T> struct X;
template <> struct X<> {};
template <typename T, typename... Ts>
  struct X<T, Ts...> : X<Ts...> {};
struct D : X<int> {};

template <typename... T>
int f(const X<T...>&);
int x = f(D());     // [:en] calls [`f<int>], not [`f<>] \
                       [:zh_CN] 调用 [`f<int>]，而不是 [`f<>]
                    // [:en@~] [`B] is [`X<>], [`C] is [`X<int>] \
                       [:zh_CN@~] [`B] 为 [`X<>]，[`C] 为 [`X<int>]
[codeblock:end]
[end:example]
[list:end]

[para]
[:en]
These alternatives are considered only if type deduction would otherwise fail.
[:zh_CN]
仅当若非如此类型推断将失败时才会考虑这些备选方式。

[:en]
If they yield more than one possible deduced [`A], the type deduction fails.
[:zh_CN]
若它们产生多于一个可能的被推断出来的 [`A]，则类型推断失败。

[begin:note]
[:en]
If a [~template-parameter] is not used in any of the function parameters of a
function template, or is used only in a non-deduced context, its corresponding
[~template-argument] cannot be deduced from a function call and the
[~template-argument] must be explicitly specified.
[:zh_CN]
若某[~模板形参]未在函数模板的任何函数形参中使用，或仅在非推断的语境中使用，则其
对应[~模板实参]不能从函数调用中推断出来，且该[~模板实参]必须被显式指定。
[end:note]

[para]
[:en]
When [`P] is a function type, function pointer type, or
pointer-to-member-function type:
[:zh_CN]
当 [`P] 为函数类型，函数指针类型，或者成员函数指针类型时：

[list]
[item]
[:en]
If the argument is an overload set containing one or more function templates,
the parameter is treated as a non-deduced context.
[:zh_CN]
若其实参是包含一个或多个函数模板的重载集合，则该实参被当成非推断语境。

[item]
[:en]
If the argument is an overload set (not containing function templates), trial
argument deduction is attempted using each of the members of the set.
[:zh_CN]
若其实参是（不包含函数模板的）重载集合，则尝试使用该集合中的每个成员进行试验性的
实参推断。

[:en]
If deduction succeeds for only one of the overload set members, that member is
used as the argument value for the deduction.
[:zh_CN]
若仅对一个重载集合成员推断成功，则该成员被用作推断中的实参值。

[:en]
If deduction succeeds for more than one member of the overload set the parameter
is treated as a non-deduced context.
[:zh_CN]
若对重载集合的多于一个成员推断成功则该形参被当作是非推断语境。
[list:end]

[para]
[begin:example]
[codeblock]
// [:en] Only one function of an overload set matches the call so the function parameter is a deduced context. \
   [:zh_CN] 重载集合中只有一个函数与调用匹配，故其函数形参是推断语境。
template <class T> int f(T (*p)(T));
int g(int);
int g(char);
int i = f(g);       // [:en] calls [`f(int (*)(int))] \
                       [:zh_CN] 调用了 [`f(int (*)(int))]
[codeblock:end]
[end:example]

[para]
[begin:example]
[codeblock]
// [:en] Ambiguous deduction causes the second function parameter to be a non-deduced context. \
   [:zh_CN] 有歧义的推断导致第二个函数形参成为非推断语境。
template <class T> int f(T, T (*p)(T));
int g(int);
char g(char);
int i = f(1, g);    // [:en] calls [`f(int, int (*)(int))] \
                       [:zh_CN] 调用了 [`f(int, int (*)(int))]
[codeblock:end]
[end:example]

[para]
[begin:example]
[codeblock]
// [:en] The overload set contains a template, causing the second function parameter to be a non-deduced context. \
   [:zh_CN] 重载集合包含模板，导致第二个函数形参成为非推断语境。
template <class T> int f(T, T (*p)(T));
char g(char);
template <class T> T g(T);
int i = f(1, g);    // [:en] calls [`f(int, int (*)(int))] \
                       [:zh_CN] 调用了 [`f(int, int (*)(int))]
[codeblock:end]
[end:example]

[para]
[:en]
If deduction succeeds for all parameters that contain [~template-parameter]s
that participate in template argument deduction, and all template arguments are
explicitly specified, deduced, or obtained from default template arguments,
remaining parameters are then compared with the corresponding arguments.
[:zh_CN]
如果对所有包含参与了模板实参推断的[~模板实参]的实参诉欧进行的推断都已成功进行，
并且所有的模板实参都要么被显式指定，被推断，或者从默认模板实参中取得，则将剩余的
各个形参与其对应的实参进行比较。

[:en]
For each remaining parameter [`P] with a type that was non-dependent before
substitution of any explicitly-specified template arguments, if the
corresponding argument [`A] cannot be implicitly converted to [`P], deduction
fails.
[:zh_CN]
对于每个剩余的形参 [`P]，若其在被任何显式指定的模板实参所替换之前并非待决的，则
当其所对应的实参 [`A] 无法被隐式转换为 [`P] 时，推断失败。

[begin:note]
[:en]
Parameters with dependent types in which no [~template-parameter]s participate
in template argument deduction, and parameters that became non-dependent due to
substitution of explicitly-specified template arguments, will be checked during
overload resolution.
[:zh_CN]
不包含参与模板实参推断的[~模板形参]的具有待决类型的形参，以及因显式指定的模板
实参的替换而成为非待决的形参，将在重载决议中被检查。
[end:note]

[begin:example]
[codeblock]
template <class T> struct Z {
typedef typename T::x xx;
};
template <class T> typename Z<T>::xx f(void *, T);      // #1
template <class T> void f(int, T);                      // #2
struct A {} a;
int main() {
f(1, a);            // [:en] OK, deduction fails for #1 because there is no conversion from [`int] to [`void*] \
                       [:zh_CN] OK，对 #1 的推断失败，因为不存在从 [`int] 向 [`void*] 的转换
}
[codeblock:end]
[end:example]
