[section#temp.concept
    [:en] Concept definitions
    [:zh_CN] 概念定义式
]

[para]
[:en]
A [+concept] is a template that defines constraints on its template arguments.
[:zh_CN]
[+概念]是为其模板实参定义约束的模板。

[syntax]
[rule concept-definition [:zh_CN] 概念定义式 ]
    [| [`:key concept] concept-name [~:opt attribute-specifier-seq] [`=] constraint-expression [`;] ]
[rule:end]

[rule concept-name [:zh_CN] 概念名 ]
    [| identifier ]
[rule:end]
[syntax:end]

[para]
[:en]
A [~concept-definition] declares a concept.
[:zh_CN]
[~概念定义式]声明一个概念。

[:en]
Its [~identifier] becomes a [~concept-name] referring to that concept within its
scope.
[:zh_CN]
其[~标识符]成为在其作用域中代表这个概念的[~概念名]。

[:en]
The optional [~attribute-specifier-seq] appertains to the concept.
[:zh_CN]
可选的[~属性说明符序列]属于概念。

[begin:example]
[codeblock]
template<typename T>
concept C = requires(T x) {
  { x == x } -> std::[[redoc("`:c>")]]convertible_to<bool>;
};

template<typename T>
  requires C<T>     // [:en] [`C] constrains [`f1(T)] in [~constraint-expression] \
                    [:zh_CN] [`C] 在[~约束表达式]中约束 [`f1(T)]
T f1(T x) { return x; }

template<C T>       // [:en] [`C], as a [~type-constraint], constrains [`f2(T)] \
                    [:zh_CN] [`C] 作为[~类型约束]约束了 [`f2(T)]
T f2(T x) { return x; }
[codeblock:end]
[end:example]

[para]
[:en]
A [~concept-definition] shall inhabit a namespace scope ([#basic.scope.namespace]).
[:zh_CN]
[~概念定义式]应当居于命名空间作用域（[#basic.scope.namespace]）。

[para]
[:en]
A concept shall not have associated constraints ([#temp.constr.decl]).
[:zh_CN]
概念不能有关联约束（[#temp.constr.decl]）。

[para]
[:en]
A concept is not instantiated ([#temp.spec]).
[:zh_CN]
概念不会实例化（[#temp.spec]）。

[begin:note]
[:en]
A concept-id ([#temp.names]) is evaluated as an expression.
[:zh_CN]
概念标识（[#temp.names]）作为表达式进行求值。

[:en]
A concept cannot be explicitly instantiated ([#temp.explicit]), explicitly
specialized ([#temp.expl.spec]), or partially specialized ([#temp.spec.partial]).
[:zh_CN]
概念不能被显式实例化（[#temp.explicit]），显式特化（[#temp.expl.spec]），或者
部分特化（[#temp.spec.partial]）。
[end:note]

[para]
[:en]
The [~constraint-expression] of a [~concept-definition] is an unevaluated
operand ([#expr.context]).
[:zh_CN]
[~概念定义式]的[~约束表达式]是免求值操作数（[#expr.context]）。

[para]
[:en]
The first declared template parameter of a concept definition is its
[+prototype parameter[%prototype parameter[!concept]]].
[:zh_CN]
概念定义式中声明的第一个模板形参是其[+原型形参[%原型形参[!概念]]]。

[:en]
[%type concept[%concept[!type]]]
A [+type concept[%concept[!type]]] is a concept whose prototype parameter is
a type [~template-parameter].
[:zh_CN]
[%类型概念[%概念[!类型～]]]
[+类型概念[%概念[!类型～]]]是原型形参为类型[~模板形参]的概念。
