[section#temp.type
    [:en] Type equivalence
    [:zh_CN] 类型等价
]

[para]
[:en]
[%equivalence[!template type]]
Two [~template-id]s refer to the same class, function, or variable if
[:zh_CN]
[%等价[!模板类型]]
若两个[~模板标识]满足如下条件，则它们涉指相同的类、函数或变量：

[list]
[item]
[:en] their [~template-name]s, [~operator-function-id]s, or
[~literal-operator-id]s refer to the same template and
[:zh_CN] 它们的[~模板名]、[~运算符函数标识]或[~字面量运算符标识]涉指同一个模板，
并且
[item]
[:en] their corresponding type [~template-argument]s are the same type and
[:zh_CN] 它们的对应的类型[~模板实参]是同一个类型，并且
[item]
[:en] their corresponding non-type [~template-argument]s of pointer-to-member
type refer to the same class member or are both the null member pointer value
and
[:zh_CN] 它们的对应的成员指针类型的非类型[~模板实参]指代同一个类成员或者均为空
成员指针值，并且
[item]
[:en] their corresponding non-type [~template-argument]s of reference type refer
to the same object or function and
[:zh_CN] 它们的对应的引用类型的非类型[~模板实参]指代同一个对象或函数，并且
[item]
[:en] their remaining corresponding non-type [~template-argument]s have the same
type and value after conversion to the type of the [~template-parameter], where
they are considered to have the same value if they compare equal with the [`==]
operator ([#expr.eq]), and
[:zh_CN] 它们余下的对应的非类型[~模板实参]在转换为[~模板形参]的类型之后具有相同
类型和值，其中当将它们以 [`==] 运算符（[#expr.eq]）比较为相等时可认为它们具有
相同的值，并且
[item]
[:en] their corresponding template [~template-argument]s refer to the same
template.
[:zh_CN] 它们的对应的模板[~模板实参]指代同一个模板。
[list:end]

[begin:example]
[codeblock]
template<class E, int size> class buffer { /* ... */ };
buffer<char,2*512> x;
buffer<char,1024> y;
[codeblock:end]

[:en]
declares [`x] and [`y] to be of the same type, and
[:zh_CN]
声明 [`x] 和 [`y] 为相同的类型，而

[codeblock]
template<class T, void(*err_fct)()> class list { /* ... */ };
list<int,&error_handler1> x1;
list<int,&error_handler2> x2;
list<int,&error_handler2> x3;
list<char,&error_handler2> x4;
[codeblock:end]

[:en]
declares [`x2] and [`x3] to be of the same type.
[:zh_CN]
声明 [`x2] 和 [`x3] 为相同的类型。

[:en]
Their type differs from the types of [`x1] and [`x4].
[:zh_CN]
它们的类型与 [`x1] 和 [`x4] 的类型不同。

[codeblock]
template<class T> struct X { };
template<class> struct Y { };
template<class T> using Z = Y<T>;
X<Y<int> > y;
X<Z<int> > z;
[codeblock:end]

[:en]
declares [`y] and [`z] to be of the same type.
[:zh_CN]
声明 [`y] 和 [`z] 为相同的类型。
[end:example]

[para]
[:en]
If an expression [$e] is type dependent ([#temp.dep.expr]), [`decltype([$e])]
denotes a unique dependent type.
[:zh_CN]
若表达式 [$e] 类型待决（[#temp.dep.expr]），则 [`decltype([$e])] 代表一个唯一的
待决类型。

[:en]
Two such [~decltype-specifier]s refer to the same type only if their
[~expression]s are equivalent ([#temp.over.link]).
[:zh_CN]
两个这样的 [~decltype-说明符]，仅当它们的[~表达式]等价（[#temp.over.link]）时，
它们才代表相同的类型。

[begin:note]
[:en]
However, such a type may be aliased, e.g., by a [~typedef-name].
[:zh_CN]
然而，可以通过（比如）一个 [~typedef-名]而用别名代替这样的类型。
[end:note]
