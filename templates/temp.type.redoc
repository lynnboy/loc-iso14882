[section#temp.type
    [:en] Type equivalence
    [:zh_CN] 类型等价
]

[para]
[:en]
[%equivalence[!template type]]
Two [~template-id]s are the same if
[:zh_CN]
[%等价[!模板类型]]
满足如下条件的两个[~模板标识]相同：

[list]
[item]
[:en] their [~template-name]s, [~operator-function-id]s, or
[~literal-operator-id]s refer to the same template, and
[:zh_CN] 它们的[~模板名]、[~运算符函数标识]或[~字面量运算符标识]涉指同一个模板，
并且
[item]
[:en] their corresponding type [~template-argument]s are the same type, and
[:zh_CN] 它们的对应的类型[~模板实参]是同一个类型，并且
[item]
[:en] their corresponding non-type [~template-argument]s are
template-argument-equivalent (see below) after conversion to the type of the
[~template-parameter], and
[:zh_CN] 它们的对应的非类型[~模板实参]在转换为[~模板形参]的类型之后模板实参等价
（见下文），并且
[item]
[:en] their corresponding template [~template-argument]s refer to the same
template.
[:zh_CN] 它们的对应的模板[~模板实参]指代同一个模板。
[list:end]

[:en]
Two [~template-id]s that are the same refer to the same class, function, or
variable.
[:zh_CN]
两个相同的[~模板标识]涉指相同的类、函数或变量：

[para]
[:en]
Two values are [+template-argument-equivalent] if they are of the same type and
[:zh_CN]
当两个值具有相同类型且符合以下条件时，它们[+模板实参等价]：

[list]
[item]
[:en] they are of integral type and their values are the same, or
[:zh_CN] 它们为整型类型而且它们的值相同，或者

[item]
[:en] they are of floating-point type and their values are identical, or
[:zh_CN] 它们为浮点类型而且它们的值相同，或者

[item]
[:en] they are of type [`std::nullptr_t], or
[:zh_CN] 它们类型为 [`std::nullptr_t]，或者

[item]
[:en] they are of enumeration type and their values are the same,[#:fn] or
[:zh_CN] 它们为枚举类型而且它们的值相同[#:fn]，或者

[note:foot]
[:en] The identity of enumerators is not preserved.
[:zh_CN] 不保持枚举符的区别。
[note:end]

[item]
[:en] they are of pointer type and they have the same pointer value, or
[:zh_CN] 它们为指针类型，而且它们具有相同的指针值，或者

[item]
[:en] they are of pointer-to-member type and they refer to the same class member
or are both the null member pointer value, or
[:zh_CN] 它们为成员指针类型，而且它们指代相同的类成员或均为空成员指针值，或者

[item]
[:en] they are of reference type and they refer to the same object or function,
or
[:zh_CN] 它们为引用类型，而且它们指代相同对象或函数，或者

[item]
[:en] they are of array type and their corresponding elements are
template-argument-equivalent,[#:fn] or
[:zh_CN] 它们为数组类型，而且它们的对应元素之间模板实参等价[#:fn]，或者

[note:foot]
[:en] An array as a [~template-parameter] decays to a pointer.
[:zh_CN] 数组作为[~模板形参]时退化为指针。
[note:end]

[item]
[:en] they are of union type and either they both have no active member or they
have the same active member and their active members are
template-argument-equivalent, or
[:zh_CN] 它们为联合体类型，而且要么它们都没有活跃成员要么它们具有相同的活跃成员
且它们的活跃成员之间模板实参等价，或者

[item]
[:en] they are of class type and their corresponding direct subobjects and
reference members are template-argument-equivalent.
[:zh_CN] 它们为类类型，而且它们的对应直接子对象和引用成员之间模板实参等价。
[list:end]

[para]
[begin:example]
[codeblock]
template<class E, int size> class buffer { /* ... */ };
buffer<char,2*512> x;
buffer<char,1024> y;
[codeblock:end]

[:en]
declares [`x] and [`y] to be of the same type, and
[:zh_CN]
声明 [`x] 和 [`y] 为相同的类型，而

[codeblock]
template<class T, void(*err_fct)()> class list { /* ... */ };
list<int,&error_handler1> x1;
list<int,&error_handler2> x2;
list<int,&error_handler2> x3;
list<char,&error_handler2> x4;
[codeblock:end]

[:en]
declares [`x2] and [`x3] to be of the same type.
[:zh_CN]
声明 [`x2] 和 [`x3] 为相同的类型。

[:en]
Their type differs from the types of [`x1] and [`x4].
[:zh_CN]
它们的类型与 [`x1] 和 [`x4] 的类型不同。

[codeblock]
template<class T> struct X { };
template<class> struct Y { };
template<class T> using Z = Y<T>;
X<Y<int> > y;
X<Z<int> > z;
[codeblock:end]

[:en]
declares [`y] and [`z] to be of the same type.
[:zh_CN]
声明 [`y] 和 [`z] 为相同的类型。
[end:example]

[para]
[:en]
If an expression [$e] is type dependent ([#temp.dep.expr]), [`decltype([$e])]
denotes a unique dependent type.
[:zh_CN]
若表达式 [$e] 类型待决（[#temp.dep.expr]），则 [`decltype([$e])] 代表一个唯一的
待决类型。

[:en]
Two such [~decltype-specifier]s refer to the same type only if their
[~expression]s are equivalent ([#temp.over.link]).
[:zh_CN]
两个这样的 [~decltype-说明符]，仅当它们的[~表达式]等价（[#temp.over.link]）时，
它们才代表相同的类型。

[begin:note]
[:en]
However, such a type might be aliased, e.g., by a [~typedef-name].
[:zh_CN]
然而，这样的类型可能通过（比如）[~typedef-名]被赋予别名。
[end:note]
