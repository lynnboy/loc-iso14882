[section#temp.arg.explicit
    [:en] Explicit template argument specification
    [:zh_CN] 显式模板实参说明
]

[para]
[:en]
[%specification[!template argument]]
Template arguments can be specified when referring to a function template
specialization that is not a specialization of a constructor template by
qualifying the function template name with the list of [~template-argument]s in
the same way as [~template-argument]s are specified in uses of a class template
specialization.
[:zh_CN]
[%说明[!模板实参～]]
当涉指并非构造函数模板特例的函数模板的特例时，可以通过以[~模板实参]的列表对函数
模板名进行限定而指定模板实参，这与在使用类模板特例时指定其[~模板实参]的方式相同。

[begin:example]
[codeblock]
template<class T> void sort(Array<T>& v);
void f(Array<dcomplex>& cv, Array<int>& ci) {
  sort<dcomplex>(cv);                   // [`sort(Array<dcomplex>&)]
  sort<int>(ci);                        // [`sort(Array<int>&)]
}
[codeblock:end]

[:en]
and
[:zh_CN]
以及

[codeblock]
template<class U, class V> U convert(V v);

void g(double d) {
  int i = convert<int,double>(d);       // [`int convert(double)]
  char c = convert<char,double>(d);     // [`char convert(double)]
}
[codeblock:end]
[end:example]

[para]
[:en]
Template arguments shall not be specified when referring to a specialization of
a constructor template ([#class.ctor], [#class.qual]).
[:zh_CN]
当涉指构造函数模板的特例时不能指定模板实参（[#class.ctor]，[#class.qual]）。

[para]
[:en]
A template argument list may be specified when referring to a specialization of
a function template
[:zh_CN]
当涉指函数模板的特例时可以指定模板实参列表：

[list]
[item]
[:en@~] when a function is called,
[:zh_CN@~] 当调用函数时，
[item]
[:en@~] when the address of a function is taken, when a function initializes a
reference to function, or when a pointer to member function is formed,
[:zh_CN@~] 当获取函数的地址，以函数对函数引用进行初始化，或者构成成员函数指针时，
[item]
[:en@~] in an explicit specialization,
[:zh_CN@~] 在显式特化式中，
[item]
[:en@~] in an explicit instantiation, or
[:zh_CN@~] 在显式实例化式中，或者
[item]
[:en@~] in a friend declaration.
[:zh_CN@~] 在友元声明式中。
[list:end]

[para]
[:en]
Trailing template arguments that can be deduced ([#temp.deduct]) or obtained
from default [~template-argument]s may be omitted from the list of explicit
[~template-argument]s.
[:zh_CN]
在显式[~模板实参]的列表中可以省略可被推断（[#temp.deduct]）出来或者可从默认
[~模板实参]中获取的尾部模板实参。

[begin:note]
[:en]
A trailing template parameter pack ([#temp.variadic]) not otherwise deduced will
be deduced as an empty sequence of template arguments.
[:zh_CN]
未被推断的尾部的模板形参包组（[#temp.variadic]）将被推断为空的模板实参序列。
[end:note]

[:en]
If all of the template arguments can be deduced or obtained from default
[~template-argument]s, they may all be omitted; in this case, the empty template
argument list [`<>] itself may also be omitted.
[:zh_CN]
若所有模板实参均可被推断出来或从默认[~模板实参]得到，则它们全部可以省略；这种
情况下，空模板实参列表 [`<>] 自身也可被省略。

[begin:example]
[codeblock]
template<class X, class Y> X f(Y);
template<class X, class Y, class ... Z> X g(Y);
void h() {
  int i = f<int>(5.6);          // [:en] [`Y] deduced as [`double] \
                                [:zh_CN] [`Y] 被推断为 [`double]
  int j = f(5.6);               // [:en] error: [`X] cannot be deduced \
                                [:zh_CN] 错误：[`X] 无法被推断
  f<void>(f<int, bool>);        // [:en] [`Y] for outer [`f] deduced as [`int (*)(bool)] \
                                [:zh_CN] 外面的 [`f] 的 [`Y] 被推断为 [`int (*)(bool)]
  f<void>(f<int>);              // [:en] error: [`f<int>] does not denote a single function template specialization \
                                [:zh_CN] 错误：[`f<int>] 并不代表某一个函数模板特例
  int k = g<int>(5.6);          // [:en] [`Y] deduced as [`double]; [`Z] deduced as an empty sequence \
                                [:zh_CN] [`Y] 被推断为 [`double]；[`Z] 被推断为空序列
  f<void>(g<int, bool>);        // [:en] [`Y] for outer [`f] deduced as [`int (*)(bool)], \
                                [:zh_CN] 外面的 [`f] 的 [`Y] 被推断为 [`int (*)(bool)]，
                                // [:en@~] [`Z] deduced as an empty sequence \
                                [:zh_CN@~] [`Z] 被推断为空序列
}
[codeblock:end]
[end:example]

[para]
[begin:note]
[:en]
An empty template argument list can be used to indicate that a given use refers
to a specialization of a function template even when a non-template function
([#dcl.fct]) is visible that would otherwise be used.
[:zh_CN]
空模板实参列表可以用来指出某次特定的使用所指代的是函数模板的特例，否则将可能会
使用某个可见的非模板函数（[#dcl.fct]）。

[:en]
For example:
[:zh_CN]
例如：

[codeblock]
template <class T> int f(T);    // #1
int f(int);                     // #2
int k = f(1);                   // [:en] uses #2 \
                                [:zh_CN] 使用了 #2
int l = f<>(1);                 // [:en] uses #1 \
                                [:zh_CN] 使用了 #1
[codeblock:end]
[end:note]

[para]
[:en]
Template arguments that are present shall be specified in the declaration
order of their corresponding [~template-parameter]s.
[:zh_CN]
所列出的模板实参应当以它们对应的[~模板形参]的声明顺序进行指定。

[:en]
The template argument list shall not specify more [~template-argument]s than
there are corresponding [~template-parameter]s unless one of the
[~template-parameter]s is a template parameter pack.
[:zh_CN]
除非其[~模板形参]之一是模板形参包组，否则模板实参列表不能指定比对应的[~模板形参]
更多的[~模板实参]。

[begin:example]
[codeblock]
template<class X, class Y, class Z> X f(Y,Z);
template<class ... Args> void f2();
void g() {
  f<int,const char*,double>("aa",3.0);
  f<int,const char*>("aa",3.0); // [:en] [`Z] deduced as [`double] \
                                [:zh_CN] [`Z] 被推断为 [`double]
  f<int>("aa",3.0);             // [:en] [`Y] deduced as [`const char*]; [`Z] deduced as [`double] \
                                [:zh_CN] [`Y] 被推断为 [`const char*]；[`Z] 被推断为 [`double]
  f("aa",3.0);                  // [:en] error: [`X] cannot be deduced \
                                [:zh_CN] 错误：[`X] 无法被推断
  f2<char, short, int, long>(); // OK
}
[codeblock:end]
[end:example]

[para]
[:en]
Implicit conversions ([#conv]) will be performed on a function argument to
convert it to the type of the corresponding function parameter if the parameter
type contains no [~template-parameter]s that participate in template argument
deduction.
[:zh_CN]
若一个函数实参所对应的函数形参不包含参与模板实参推断的[~模板形参]，则将对该函数
实参实施隐式转换（[#conv]）以将其转换为其对应函数形参的类型。

[begin:note]
[:en]
Template parameters do not participate in template argument deduction if they
are explicitly specified.
[:zh_CN]
被显式指定的模板形参并不参与模板实参推断。

[:en]
For example,
[:zh_CN]
例如，

[codeblock]
template<class T> void f(T);

class Complex {
  Complex(double);
};

void g() {
  f<Complex>(1);    // [:en] OK, means [`f<Complex>(Complex(1))] \
                    [:zh_CN] OK，意思是 [`f<Complex>(Complex(1))]
}
[codeblock:end]
[end:note]

[para]
[begin:note]
[:en]
Because the explicit template argument list follows the function template name,
and because constructor templates ([#class.ctor]) are named without using a
function name ([#class.qual]), there is no way to provide an explicit template
argument list for these function templates.
[:zh_CN]
由于显式模板实参列表跟在函数模板名之后，且由于构造函数模板（[#class.ctor]）并不
使用函数名来指名，所以对这些函数模板无法提供显式模板实参列表。
[end:note]

[para]
[:en]
Template argument deduction can extend the sequence of template arguments
corresponding to a template parameter pack, even when the sequence contains
explicitly specified template arguments.
[:zh_CN]
通过模板实参推断能够展开对应于模板形参包组的模板实参的序列，即使该序列包含被显式
指定的模板实参也进行展开。

[begin:example]
[codeblock]
template<class ... Types> void f(Types ... values);

void g() {
  f<int*, float*>(0, 0, 0);     // [:en] [`Types] deduced as the sequence [`int*], [`float*], [`int] \
                                [:zh_CN] [`Types] 被推断为序列“[`int*], [`float*], [`int]”
}
[codeblock:end]
[end:example]
