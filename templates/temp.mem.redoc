[section#temp.mem
    [:en] Member templates
    [:zh_CN] 成员模板
]

[para]
[:en]
A template can be declared within a class or class template; such a template
is called a member template.
[:zh_CN]
类或类模板之中可以声明模板；这样的模板称为成员模板。

[:en]
A member template can be defined within or outside its class definition or
class template definition.
[:zh_CN]
成员模板可以在其类定义式或类模板定义式之中或之外进行定义。

[:en]
A member template of a class template that is defined outside of its class
template definition shall be specified with a [~template-head] equivalent to
that of the class template followed by a [~template-head] equivalent to that
of the member template ([#temp.over.link]).
[:zh_CN]
定义于类模板定义式之外的类模板的成员模板，应该指定与该类模板的[~模板头]等价的
[~模板头]，跟着与该成员模板的[~模板头]等价的[~模板头]（[#temp.over.link]）。

[begin:example]
[codeblock]
template<class T> struct string {
  template<class T2> int compare(const T2&);
  template<class T2> string(const string<T2>& s) { /* ... */ }
};

template<class T> template<class T2> int string<T>::compare(const T2& s) {
}
[codeblock:end]
[end:example]

[begin:example]
[codeblock]
template<typename T> concept C1 = true;
template<typename T> concept C2 = sizeof(T) <= 4;

template<C1 T> struct S {
  template<C2 U> void f(U);
  template<C2 U> void g(U);
};

template<C1 T> template<C2 U>
void S<T>::f(U) { }             // OK
template<C1 T> template<typename U>
void S<T>::g(U) { }             // [:en] error: no matching function in [`S<T>] \
                                [:zh_CN] 错误：[`S<T>] 中没有匹配的函数
[codeblock:end]
[end:example]

[para]
[:en]
A local class of non-closure type shall not have member templates.
[:zh_CN]
非闭包类型的局部类不能带有成员模板。

[:en]
Access control rules ([#class.access]) apply to member template names.
[:zh_CN]
对成员模板名实施访问控制规则（[#class.access]）。

[:en]
A destructor shall not be a member template.
[:zh_CN]
析构函数不能是成员模板。

[:en]
A non-template member function ([#dcl.fct]) with a given name and type and a
member function template of the same name, which could be used to generate a
specialization of the same type, can both be declared in a class.
[:zh_CN]
具有给定名字和类型的非模板成员函数，和可用以生成相同类型的特例的相同名字的成员
函数模板，可以在类中同时进行声明。

[:en]
When both exist, a use of that name and type refers to the non-template member
unless an explicit template argument list is supplied.
[:zh_CN]
若二者同时存在，使用这个名字和类型时，除非提供显式模板实参列表，否则将涉指非模板
成员函数。

[begin:example]
[codeblock]
template <class T> struct A {
  void f(int);
  template <class T2> void f(T2);
};

template <> void A<int>::f(int) { }                 // [:en] non-template member function \
                                                    [:zh_CN] 非模板成员函数
template <> template <> void A<int>::f<>(int) { }   // [:en] member function template specialization \
                                                    [:zh_CN] 成员函数模板的特化式

int main() {
  A<char> ac;
  ac.f(1);                                          // [:en] non-template \
                                                    [:zh_CN] 非模板
  ac.f('c');                                        // [:en] template \
                                                    [:zh_CN] 模板
  ac.f<>(1);                                        // [:en] template \
                                                    [:zh_CN] 模板
}
[codeblock:end]
[end:example]

[para]
[:en]
A member function template shall not be declared [`:key virtual].
[:zh_CN]
成员函数模板不能被声明为 [`:key virtual]。

[begin:example]
[codeblock]
template <class T> struct AA {
  template <class C> virtual void g(C);             // [:en] error \
                                                    [:zh_CN] 错误
  virtual void f();                                 // OK
};
[codeblock:end]
[end:example]

[para]
[:en]
A specialization of a member function template does not override a virtual
function from a base class.
[:zh_CN]
成员函数模板的特例不会覆盖基类中的虚函数。

[begin:example]
[codeblock]
class B {
  virtual void f(int);
};

class D : public B {
  template <class T> void f(T); // [:en] does not override [`B::f(int)] \
                                [:zh_CN] 并不覆盖 [`B::f(int)]
  void f(int i) { f<>(i); }     // [:en] overriding function that calls the function template specialization \
                                [:zh_CN] 调用了函数模板特例的覆盖函数
};
[codeblock:end]
[end:example]

[para]
[begin:note]
[:en]
A specialization of a conversion function template is referenced in the same way
as a non-template conversion function that converts to the same type
([#class.conv.fct])
[:zh_CN]
转换函数模板的特例与转换到同一个类型的非模板转换函数以相同方式进行涉指
（[#class.conv.fct]）。

[begin:example]
[codeblock]
struct A {
  template <class T> operator T*();
};
template <class T> A::operator T*() { return 0; }
template <> A::operator char*() { return 0; }       // [:en] specialization \
                                                    [:zh_CN] 特化式
template A::operator void*();                       // [:en] explicit instantiation \
                                                    [:zh_CN] 显式实例化式

int main() {
  A a;
  int* ip;
  ip = a.operator int*();       // [:en] explicit call to template operator [`A::operator int*()] \
                                [:zh_CN] 对模板运算符 [`A::operator int*()] 的显式调用
}
[codeblock:end]
[end:example]

[:en]
There is no syntax to form a [~template-id] ([#temp.names]) by providing an
explicit template argument list ([#temp.arg.explicit]) for a conversion function
template.
[:zh_CN]
不存在向转换函数模板提供显式模板实参列表（[#temp.arg.explicit]）以构成
[~模板标识]（[#temp.names]）的语法。
[end:note]
