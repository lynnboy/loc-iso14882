[section#temp.constr.normal
    [:en] Constraint normalization
    [:zh_CN] 约束正规化
[%:begin#constraint.normalization
    [:en] constraint[!normalization]
    [:zh_CN] 约束[!正规化] ]
]

[para]
[:en]
The [+normal form[%normal form[!constraint]]] of an [~expression] [`E] is a
constraint ([#temp.constr.constr]) that is defined as follows:
[:zh_CN]
[~表达式] [`E] 的[+正规形式[%正规形式[!约束]]]是如下定义的约束
（[#temp.constr.constr]）：

[list]
[item]
[:en]
The normal form of an expression [`( E )] is the normal form of [`E].
[:zh_CN]
表达式 [`( E )] 的正规形式是 [`E] 的正规形式。

[item]
[:en]
The normal form of an expression [`E1 || E2] is the disjunction
([#temp.constr.op]) of the normal forms of [`E1] and [`E2].
[:zh_CN]
表达式 [`E1 || E2] 的正规形式是 [`E1] 和 [`E2] 的正规形式的析取
（[#temp.constr.op]）。

[item]
[:en]
The normal form of an expression [`E1 && E2] is the conjunction of the normal
forms of [`E1] and [`E2].
[:zh_CN]
表达式 [`E1 && E2] 的正规形式是 [`E1] 和 [`E2] 的正规形式的合取。

[item]
[:en]
The normal form of a concept-id [`C<A[$_1], A[$_2], ..., A[$_n]>] is the normal
form of the [~constraint-expression] of [`C], after substituting
[`A[$_1], A[$_2], ..., A[$_n]] for [`C][=']s respective template parameters in
the parameter mappings in each atomic constraint.
[:zh_CN]
概念标识 [`C<A[$_1], A[$_2], ..., A[$_n]>] 的正规形式是 [`C] 的[~约束表达式]的
正规形式，并经过替换 [`A[$_1], A[$_2], ..., A[$_n]] 为各个原子约束中的形参映射中
的 [`C] 的相应模板形参。

[:en]
If any such substitution results in an invalid type or expression, the program
is ill-formed; no diagnostic is required.
[:zh_CN]
如果任何这种替换导致了无效的类型或表达式，则程序非良构；无须诊断。

[begin:example]
[codeblock]
template<typename T> concept A = T::value || true;
template<typename U> concept B = A<U*>;
template<typename V> concept C = B<V&>;
[codeblock:end]

[:en]
Normalization of [`B][=']s [~constraint-expression] is valid and results in
[`T::value] (with the mapping [$[`T] \mapsto [`U*]]) [$\lor] [`true] (with an
empty mapping), despite the expression [`T::value] being ill-formed for a
pointer type [`T].
[:zh_CN]
[`B] 的[~约束表达式]的正规化有效，其结果为 [`T::value]（映射为
[$[`T] \mapsto [`U*]]）[$\lor] [`true]（映射为空），而不管表达式 [`T::value]
对于指针类型 [`T] 非良构这一点。

[:en]
Normalization of [`C][='s] [~constraint-expression] results in the program being
ill-formed, because it would form the invalid type [`T&*] in the parameter
mapping.
[:zh_CN]
[`B] 的[~约束表达式]的正规化导致程序非良构，因为它将会在形参映射中构成无效的类型
[`T&*]。
[end:example]

[item]
[:en]
The normal form of any other expression [`E] is the atomic constraint whose
expression is [`E] and whose parameter mapping is the identity mapping.
[:zh_CN]
任何其他表达式 [`E] 的正规形式是以 [`E] 为其表达式并以同一映射为其形参映射的原子
约束。
[list:end]

[para]
[:en]
The process of obtaining the normal form of a [~constraint-expression] is called
[+normalization[%normalization[!constraint][%constraint[!normalization]]]].
[:zh_CN]
取得[~约束表达式]的正规形式的过程称为[+正规化[%正规化[!约束][%约束[!正规化]]]]。

[begin:note]
[:en]
Normalization of [~constraint-expression]s is performed when determining the
associated constraints ([#temp.constr.constr]) of a declaration and when
evaluating the value of an [~id-expression] that names a concept specialization
([#expr.prim.id]).
[:zh_CN]
[~约束表达式]的正规化是在确定声明式的关联约束（[#temp.constr.constr]）时，以及在
为指名某个概念特例的[~标识表达式]（[#expr.prim.id]）进行求值时实施的。
[end:note]

[para]
[begin:example]
[codeblock]
template<typename T> concept C1 = sizeof(T) == 1;
template<typename T> concept C2 = C1<T>() && 1 == 2;
template<typename T> concept C3 = requires { typename T::type; };
template<typename T> concept C4 = requires (T x) { ++x; }

template<C2 U> void f1(U);      // #1
template<C3 U> void f2(U);      // #2
template<C4 U> void f3(U);      // #3
[codeblock:end]

[:en]
The associated constraints of #1 are [`sizeof(T) == 1] (with mapping
[$[`T] \mapsto [`U]]) [$\land] [`1 == 2].
[:zh_CN]
#1 的关联约束为 [`sizeof(T) == 1]（映射为 [$[`T] \mapsto [`U]]）[$\land]
[`1 == 2]。

[br]

[:en]
The associated constraints of #2 are [`requires { typename T::type; }] (with
mapping [$[`T] \mapsto [`U]]).
[:zh_CN]
#2 的关联约束为 [`requires { typename T::type; }]（映射为 [$[`T] \mapsto [`U]]）。

[br]

[:en]
The associated constraints of #3 are [`requires (T x) { ++x; }] (with mapping
[$[`T] \mapsto [`U]]).
[:zh_CN]
#3 的关联约束为 [`requires (T x) { ++x; }]（映射为 [$[`T] \mapsto [`U]]）。
[end:example]

[%:end#constraint.normalization]
