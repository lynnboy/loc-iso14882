[section#temp.constr.order
    [:en] Partial ordering by constraints
    [:zh_CN] 基于约束的部分排序
]

[%  [:en] subsume[%constraint[!subsumption]]
    [:zh_CN] 归入[%约束[!归入关系]] ]

[para]
[:en]
A constraint [$P] [+subsumes[%constraint[!subsumption]]] a constraint [$Q]
if and only if, for every disjunctive clause [$P_i] in the disjunctive normal
form[#:note#fn:$1] of [$P], [$P_i] subsumes every conjunctive clause [$Q_j] in
the conjunctive normal form[#:note#fn:$2] of [$Q], where
[:zh_CN]
称约束 [$P] [+归入[%约束[!归入关系]]]约束 [$Q]，当且仅当对于 [$P] 的析取性正规
形式[#:note#fn:$1]中的每个析取性子句 [$P_i]，[$P_i] 均归入 [$Q] 的合取性正规形式
[#:note#fn:$2]中的所有合取性子句 [$Q_j] 时，[$P] [+归入[%约束[!归入关系]]] [$Q]，
其中

[note:foot#fn:$1]
[:en]
A constraint is in disjunctive normal form when it is a disjunction of clauses
where each clause is a conjunction of atomic constraints.
[:zh_CN]
当一个约束是其各子句的析取，而每个子句均为原子约束的合取时，该约束具有析取性正规
形式。

[begin:example]
[:en]
For atomic constraints [$A], [$B], and [$C], the disjunctive normal form of the
constraint [$A \land (B \lor C)] is [$(A \land B) \lor (A \land C)].
[:zh_CN]
对于原子约束 [$A]、[$B] 和 [$C]，约束 [$A \land (B \lor C)] 的析取性正规形式为
[$(A \land B) \lor (A \land C)]。

[:en]
Its disjunctive clauses are [$(A \land B)] and [$(A \land C)].
[:zh_CN]
其析取性子句为 [$(A \land B)] 和 [$(A \land C)]。
[end:example]
[note:end]

[note:foot#fn:$2]
[:en]
A constraint is in conjunctive normal form when it is a conjunction of clauses
where each clause is a disjunction of atomic constraints.
[:zh_CN]
类似地，当一个约束是其各子句的合取，而每个子句均为原子约束的析取时，该约束具有
合取性正规形式。

[begin:example]
[:en]
For atomic constraints [$A], [$B], and [$C], the constraint
[$A \land (B \lor C)] is in conjunctive normal form.
[:zh_CN]
对于原子约束 [$A]、[$B] 和 [$C]，约束 [$A \land (B \lor C)] 为合取性正规形式。

[:en]
Its conjunctive clauses are [$A] and [$(B \lor C)].
[:zh_CN]
其合取性子句为 [$A] 和 [$(B \lor C)]。
[end:example]
[note:end]

[list]
[item]
[:en]
a disjunctive clause [$P_i] subsumes a conjunctive clause [$Q_j] if and only
if there exists an atomic constraint [$P_{ia}] in [$P_i] for which there exists
an atomic constraint [$Q_{jb}] in [$Q_j] such that [$P_{ia}] subsumes [$Q_{jb}],
and
[:zh_CN]
当且仅当 [$P_i] 中存在一个原子约束 [$P_{ia}]，[$Q_j] 中存在一个原子约束
[$Q_{jb}]，使得 [$P_{ia}] 归入 [$Q_{jb}] 时，析取式子句 [$P_i] 归入合取式子句
[$Q_j]，而

[item]
[:en]
an atomic constraint [$A] subsumes another atomic constraint [$B] if and only if
[$A] and [$B] are identical using the rules described in [#temp.constr.atomic].
[:zh_CN]
当且仅当 [$A] 和 [$B] 使用 [#temp.constr.atomic] 中描述的规则相同时，原子约束
[$A] 归入另一个原子约束 [$B]。
[list:end]

[begin:example]
[:en]
Let [$A] and [$B] be atomic constraints ([#temp.constr.atomic]).
[:zh_CN]
令 [$A] 和 [$B] 为原子约束（[#temp.constr.atomic]）。

[:en]
The constraint [$A \land B] subsumes [$A], but [$A] does not subsume [$A \land B].
[:zh_CN]
约束 [$A \land B] 归入 [$A]，但 [$A] 不能归入 [$A \land B]。

[:en]
The constraint [$A] subsumes [$A \lor B], but [$A \lor B] does not subsume [$A].
[:zh_CN]
约束 [$A] 归入 [$A \lor B]，但 [$A \lor B] 不能归入 [$A]。

[:en]
Also note that every constraint subsumes itself.
[:zh_CN]
还要注意，每个约束都归入其自身。
[end:example]

[para]
[begin:note]
[:en]
The subsumption relation defines a partial ordering on constraints.
[:zh_CN]
归入关系定义约束的一种部分排序。

[:en]
This partial ordering is used to determine
[:zh_CN]
这种部分排序用于确定

[list]
[item]
[:en@~] the best viable candidate of non-template functions ([#over.match.best]),
[:zh_CN@~] 非模板函数的最佳可行候选（[#over.match.best]），
[item]
[:en@~] the address of a non-template function ([#over.over]),
[:zh_CN@~] 非模板函数的地址（[#over.over]），
[item]
[:en@~] the matching of template template arguments ([#temp.arg.template]),
[:zh_CN@~] 模板模板实参的匹配（[#temp.arg.template]），
[item]
[:en@~] the partial ordering of class template specializations
([#temp.class.order]), and
[:zh_CN@~] 类模板特例的部分排序（[#temp.class.order]），以及
[item]
[:en@~] the partial ordering of function templates ([#temp.func.order]).
[:zh_CN@~] 函数模板的部分排序（[#temp.func.order]）。
[list:end]
[end:note]

[para]
[:en]
A declaration [`D1] is [+at least as constrained] as a declaration [`D2] if
[:zh_CN]
以下条件下，称声明式 [`D1] [+至少与[%至少与～同样受约束]]声明式 [`D2][+:% 同样
受约束]。

[list]
[item]
[:en] [`D1] and [`D2] are both constrained declarations and [`D1][=']s
associated constraints subsume those of [`D2]; or
[:zh_CN] [`D1] 和 [`D2] 都为受约束声明式，且 [`D1] 的关联约束归入 [`D2] 的
关联约束；或者

[item]
[:en] [`D2] has no associated constraints.
[:zh_CN] [`D2] 没有关联约束。
[list:end]

[para]
[:en]
A declaration [`D1] is [+more constrained] than another declaration [`D2] when
[`D1] is at least as constrained as [`D2], and [`D2] is not at least as
constrained as [`D1].
[:zh_CN]
当 [`D1] 至少与 [`D2] 同样受约束但 [`D2] 并非至少与 [`D1] 同样受约束时，称声明式
[`D1] 比另一个声明式 [`D2] [+更受约束]。

[begin:example]
[codeblock]
template<typename T> concept C1 = requires(T t) { --t; };
template<typename T> concept C2 = C1<T> && requires(T t) { *t; };

template<C1 T> void f(T);       // #1
template<C2 T> void f(T);       // #2
template<typename T> void g(T); // #3
template<C1 T> void g(T);       // #4

f(0);                           // [:en] selects #1 \
                                   [:zh_CN] 选择 #1
f((int*)0);                     // [:en] selects #2 \
                                   [:zh_CN] 选择 #2
g(true);                        // [:en] selects #3 because [`C1<bool>] is not satisfied \
                                   [:zh_CN] 选择 #3，因为 [`C1<bool>] 未能满足
g(0);                           // [:en] selects #4 \
                                   [:zh_CN] 选择 #4
[codeblock:end]
[end:example]
