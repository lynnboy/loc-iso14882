[section#temp.deduct
    [:en] Template argument deduction
    [:zh_CN] 模板实参推断
]

[para]
[:en]
When a function template specialization is referenced, all of the template
arguments shall have values.
[:zh_CN]
当涉指函数模板特例时，所有模板实参必须具有值。

[:en]
The values can be explicitly specified or, in some cases, be deduced from the
use or obtained from default [~template-argument]s.
[:zh_CN]
这些值既可被显式指定，也可在某些情况下从其使用中推断出来，或从默认[~模板实参]中
获取。

[enter:example]
[codeblock]
void f(Array<dcomplex>& cv, Array<int>& ci) {
  sort(cv);                     // [:en] calls [`sort(Array<dcomplex>&)]
                                // [|:zh_CN] 调用了 [`sort(Array<dcomplex>&)]
  sort(ci);                     // [:en] calls [`sort(Array<int>&)]
                                // [|:zh_CN] 调用了 [`sort(Array<int>&)]
}
[codeblock:end]

[:en]
and
[:zh_CN]
以及

[codeblock]
void g(double d) {
  int i = convert<int>(d);      // [:en] calls [`convert<int,double>(double)]
                                // [|:zh_CN] 调用了 [`convert<int,double>(double)]
  int c = convert<char>(d);     // [:en] calls [`convert<char,double>(double)]
                                // [|:zh_CN] 调用了 [`convert<char,double>(double)]
}
[codeblock:end]
[exit:example]

[para]
[:en]
When an explicit template argument list is specified, the template arguments
must be compatible with the template parameter list and must result in a valid
function type as described below; otherwise type deduction fails.
[:zh_CN]
当指定显式模板实参列表时，其模板实参必须与模板形参列表兼容，并且根据如下描述必须
产生合法的函数类型；否则类型推断将失败。

[:en]
Specifically, the following steps are performed when evaluating an explicitly
specified template argument list with respect to a given function template:
[:zh_CN]
具体地说，当根据给定的函数模板来对显式指定的模板实参列表进行求值时将实施以下步骤
：

[list]
[item]
[:en]
The specified template arguments must match the template parameters in kind
(i.e., type, non-type, template).
[:zh_CN]
所指定的模板实参必须在种类上（就是类型、非类型、模板）与模板形参相匹配。

[:en]
There must not be more arguments than there are parameters unless at least one
parameter is a template parameter pack, and there shall be an argument for each
non-pack parameter.
[:zh_CN]
除非至少有一个形参是模板形参包组否则实参必须不比形参多，并且每个非形参包组形参都
应当有一个实参。

[:en]
Otherwise, type deduction fails.
[:zh_CN]
否则，类型推断失败。

[item]
[:en]
Non-type arguments must match the types of the corresponding non-type template
parameters, or must be convertible to the types of the corresponding non-type
parameters as specified in [#temp.arg.nontype], otherwise type deduction fails.
[:zh_CN]
非类型实参必须与对应非类型模板形参的类型相匹配，或者必须能够根据
[#temp.arg.nontype] 中所指定的规则转换为对应非类型形参的类型，否则类型推断失败。

[item]
[:en]
The specified template argument values are substituted for the corresponding
template parameters as specified below.
[:zh_CN]
以所指定的模板实参值根据如下所述对其对应的模板形参进行替换。
[list:end]

[para]
[:en]
After this substitution is performed, the function parameter type adjustments
described in [#dcl.fct] are performed.
[:zh_CN]
在实施这项替换之后，实施在 [#dcl.init] 中所描述的函数形参类型调整。

[enter:example]
[:en]
A parameter type of ["[`void (const int, int`[5`])]] becomes
["[`void(*)(int,int*)]].
[:zh_CN]
形参类型“[`void (const int, int`[5`])]”变为“[`void(*)(int,int*)]”。
[exit:example]

[enter:note]
[:en]
A top-level qualifier in a function parameter declaration does not affect the
function type but still affects the type of the function parameter variable
within the function.
[:zh_CN]
函数形参声明式中的顶层限定符不会影响函数类型，但仍会影响函数形参变量在函数中的
类型。
[exit:note]

[enter:example]
[codeblock]
template <class T> void f(T t);
template <class X> void g(const X x);
template <class Z> void h(Z, Z*);

int main() {
  // [:en] #1: function type is [`f(int)], [`t] is non [`const]
  // [|:zh_CN] #1：函数类型为 [`f(int)]，[`t] 为非 [`const]
  f<int>(1);

  // [:en] #2: function type is [`f(int)], [`t] is [`const]
  // [|:zh_CN] #2：函数类型为 [`f(int)]，[`t] 为 [`const]
  f<const int>(1);

  // [:en] #3: function type is [`g(int)], [`x] is [`const]
  // [|:zh_CN] #3：函数类型为 [`g(int)]，[`x] 为 [`const]
  g<int>(1);

  // [:en] #4: function type is [`g(int)], [`x] is [`const]
  // [|:zh_CN] #4：函数类型为 [`g(int)]，[`x] 为 [`const]
  g<const int>(1);

  // [:en] #5: function type is [`h(int, const int*)]
  // [|:zh_CN] #5：函数类型为 [`g(int, const int*)]
  h<const int>(1,0);
}
[codeblock:end]
[exit:example]

[para]
[enter:note]
[:en]
[`f<int>(1)] and [`f<const int>(1)] call distinct functions even though both of
the functions called have the same function type.
[:zh_CN]
即使函数调用 [`f<int>(1)] 和 [`f<const int>(1)] 所调用的函数具有相同的函数类型，
它们仍会调用不同的函数。
[exit:note]

[para]
[:en]
The resulting substituted and adjusted function type is used as the type of the
function template for template argument deduction.
[:zh_CN]
所产生的已替换并调整的函数类型被用作模板实参推断的函数模板的类型。

[:en]
If a template argument has not been deduced and its corresponding template
parameter has a default argument, the template argument is determined by
substituting the template arguments determined for preceding template
parameters into the default argument.
[:zh_CN]
若某个模板实参并未被推断，并且其对应模板形参具有默认实参，则该默认实参的确定是
通过在默认实参中对之前的模板形参所确定的模板实参进行代换而得到的。

[:en]
If the substitution results in an invalid type, as described above, type
deduction fails.
[:zh_CN]
如果如上所述的代换导致了无效的类型，则类型推断失败。

[enter:example]
[codeblock]
template <class T, class U = double>
void f(T t = 0, U u = 0);

void g() {
  f(1, 'c');        // [`f<int,char>(1,'c')]
  f(1);             // [`f<int,double>(1,0)]
  f();              // [:en] error: [`T] cannot be deduced
                    // [|:zh_CN] 错误：[`T] 无法推断
  f<int>();         // [`f<int,double>(0,0)]
  f<int,char>();    // [`f<int,char>(0,0)]
}
[codeblock:end]
[exit:example]

[:en]
When all template arguments have been deduced or obtained from default template
arguments, all uses of template parameters in the template parameter list of the
template and the function type are replaced with the corresponding deduced or
default argument values.
[:zh_CN]
当所有模板实参均被推断或从默认模板实参获得之后，在该模板的模板形参列表和函数类型
中的所有对模板形参的使用，均以对应推断出的或默认的实参值进行代换。

[:en]
If the substitution results in an invalid type, as described above, type
deduction fails.
[:zh_CN]
若代换产生了无效类型，如上所述，则类型推断失败。

[:en]
If the function template has associated constraints ([#temp.constr.decl]), those
constraints are checked for satisfaction ([#temp.constr.constr]).
[:zh_CN]
如果函数模板带有关联约束（[#temp.constr.decl]），则检查这些约束的满足情况
（[#temp.constr.constr]）。

[:en]
If the constraints are not satisfied, type deduction fails.
[:zh_CN]
如果约束未能满足，则类型推断失败。

[para]
[:en]
At certain points in the template argument deduction process it is necessary
to take a function type that makes use of template parameters and replace those
template parameters with the corresponding template arguments.
[:zh_CN]
在模板实参推断过程的特定点，需要获得使用了模板形参的函数类型，并将这些模板形参
替换为对应的模板实参。

[:en]
This is done at the beginning of template argument deduction when any explicitly
specified template arguments are substituted into the function type, and again
at the end of template argument deduction when any template arguments that were
deduced or obtained from default arguments are substituted.
[:zh_CN]
这将于模板实参推断开始时，当将任何显式指定的模板实参代换到函数类型中时进行，以及
将于模板实参推断结束时，当有任何推断出的或者从默认实参中获得的模板实参被代换时再
进行一次。

[para]
[:en]
The substitution occurs in all types and expressions that are used in the
function type and in template parameter declarations.
[:zh_CN]
这种代换发生在函数类型和模板形参声明式中所使用的所有类型和表达式上。

[:en]
The expressions include not only constant expressions such as those that appear
in array bounds or as nontype template arguments but also general expressions
(i.e., non-constant expressions) inside [`sizeof], [`decltype], and other
contexts that allow non-constant expressions.
[:zh_CN]
这些表达式不仅包括如用作数组边界或者非类型模板实参这样的常量表达式，还包括
[`sizeof]、[`decltype] 和其他允许非常量表达式的语境之内的一般表达式（亦即非常量
表达式）。

[:en]
The substitution proceeds in lexical order and stops when a condition that
causes deduction to fail is encountered.
[:zh_CN]
代换以词法顺序进行，且当遇到导致推断失败的条件时终止。

[enter:note]
[:en]
The equivalent substitution in exception specifications is done only when the
[~noexcept-specifier] is instantiated, at which point a program is ill-formed if
the substitution results in an invalid type or expression.
[:zh_CN]
异常说明中进行的等价的代换仅发生于[~noexcept-说明符]被实例化时，如果此时代换导致
无效的类型或表达式，则程序非良构。
[exit:note]

[enter:example]
[codeblock]
template <class T> struct A { using X = typename T::X; };
template <class T> typename T::X f(typename A<T>::X);
template <class T> void f(...) { }
template <class T> auto g(typename A<T>::X) -> typename T::X;
template <class T> void g(...) { }

void h() {
  f<int>(0);        // [:en] OK, substituting return type causes deduction to fail
                    // [|:zh_CN] OK，对返回类型进行代换时导致推断失败
  g<int>(0);        // [:en] error, substituting parameter type instantiates [`A<int>]
                    // [|:zh_CN] 错误，对形参类型的代换实例化了 [`A<int>]
}
[codeblock:end]
[exit:example]

[para]
[:en]
If a substitution results in an invalid type or expression, type deduction
fails.
[:zh_CN]
如果代换导致无效的类型或表达式，则类型推断失败。

[:en]
An invalid type or expression is one that would be ill-formed, with a diagnostic
required, if written using the substituted arguments.
[:zh_CN]
无效的类型或表达式是指当以所代换的实参写出时它是非良构的，并且需要进行诊断。

[enter:note]
[:en]
If no diagnostic is required, the program is still ill-formed.
[:zh_CN]
如果不需要诊断，程序也是非良构的。

[:en]
Access checking is done as part of the substitution process.
[:zh_CN]
访问检查作为替换过程的一部分进行。
[exit:note]

[:en]
Only invalid types and expressions in the immediate context of the function type
and its template parameter types can result in a deduction failure.
[:zh_CN]
只有函数类型及其模板形参类型的直接语境中的无效类型和表达式才能导致推断失败。

[enter:note]
[:en]
The substitution into types and expressions can result in effects such as the
instantiation of class template specializations and/or function template
specializations, the generation of implicitly-defined functions, etc.
[:zh_CN]
向类型和表达式进行的代换可能会产生各种效果，比如类模板特例和/或函数模板特例的
实例化，生成隐式定义的函数，等等。

[:en]
Such effects are not in the ["immediate context] and can result in the program
being ill-formed.
[:zh_CN]
这些效果并非处于“直接语境”中，并且可能导致程序非良构。
[exit:note]

[para:~]
[enter:example]
[codeblock]
struct X { };
struct Y {
  Y(X){}
};

template <class T> auto f(T t1, T t2) -> decltype(t1 + t2);     // #1
X f(Y, Y);          // #2

X x1, x2;
X x3 = f(x1, x2);   // [:en] deduction fails on #1 (cannot add [`X+X]), calls #2
                    // [|:zh_CN] 在 #1 推断失败（无法对 [`X+X] 进行加法），调用了 #2
[codeblock:end]
[exit:example]

[para:~]
[enter:note]
[:en]
Type deduction may fail for the following reasons:
[:zh_CN]
类型推断可能因如下原因失败：

[list]
[item]
[:en]
Attempting to instantiate a pack expansion containing multiple parameter packs
of differing lengths.
[:zh_CN]
试图实例化包含多个不同长度的形参包组的包组展开式。

[item]
[:en]
Attempting to create an array with an element type that is [`void], a function
type, a reference type, or an abstract class type, or attempting to create an
array with a size that is zero or negative.
[:zh_CN]
试图创建元素类型为 [`void]，函数类型，引用类型或抽象类类型的数组，或者试图创建
大小为零或为负的数组。

[enter:example]
[codeblock]
template <class T> int f(T[5]);
int I = f<int>(0);
int j = f<void>(0);             // [:en] invalid array
                                // [|:zh_CN] 无效数组
[codeblock:end]
[exit:example]

[item]
[:en]
Attempting to use a type that is not a class or enumeration type in a qualified
name.
[:zh_CN]
试图在限定名中使用不是类或枚举类型的类型。

[enter:example]
[codeblock]
template <class T> int f(typename T::B*);
int i = f<int>(0);
[codeblock:end]
[exit:example]

[item]
[:en]
Attempting to use a type in a [~nested-name-specifier] of a [~qualified-id] when
that type does not contain the specified member, or
[:zh_CN]
试图在某[~限定标识]的[~嵌套名说明符]中使用某个类型，而该类型并不包含指定的成员，
或者

[list]
[item]
[:en@~] the specified member is not a type where a type is required, or
[:zh_CN@~] 当需要类型时所指定的成员不是类型，或者
[item]
[:en@~] the specified member is not a template where a template is required, or
[:zh_CN@~] 当需要模板时所指定的成员不是模板，或者
[item]
[:en@~] the specified member is not a non-type where a non-type is required.
[:zh_CN@~] 当需要非类型时所指定的成员不是非类型。
[list:end]

[enter:example]
[codeblock]
template <int I> struct X { };
template <template <class T> class> struct Z { };
template <class T> void f(typename T::Y*){}
template <class T> void g(X<T::N>*){}
template <class T> void h(Z<T::template TT>*){}
struct A {};
struct B { int Y; };
struct C {
  typedef int N;
};
struct D {
  typedef int TT;
};

int main() {
  // [:en] Deduction fails in each of these cases:
  // [|:zh_CN] 这些情况下的推断都将失败：
  f<A>(0);          // [:en] [`A] does not contain a member [`Y]
                    // [|:zh_CN] [`A] 并不包含成员 [`Y]
  f<B>(0);          // [:en] The [`Y] member of [`B] is not a type
                    // [|:zh_CN] [`B] 的成员 [`Y] 并不是类型
  g<C>(0);          // [:en] The [`N] member of [`C] is not a non-type
                    // [|:zh_CN] [`C] 的成员 [`N] 并不是非类型
  h<D>(0);          // [:en] The [`TT] member of [`D] is not a template
                    // [|:zh_CN] [`D] 的成员 [`TT] 并不是模板
}
[codeblock:end]
[exit:example]

[item]
[:en]
Attempting to create a pointer to reference type.
[:zh_CN]
试图创建指向引用类型的指针。

[item]
[:en]
Attempting to create a reference to [`void].
[:zh_CN]
试图创建 [`void] 的引用。

[item]
[:en]
Attempting to create ["pointer to member of [`T]] when [`T] is not a class type.
[:zh_CN]
当 [`T] 不是类类型时试图创建“[`T] 的成员指针”。

[enter:example]
[codeblock]
template <class T> int f(int T::*);
int i = f<int>(0);
[codeblock:end]
[exit:example]

[item]
[:en]
Attempting to give an invalid type to a non-type template parameter.
[:zh_CN]
试图为非类型模板形参指定无效的类型。

[enter:example]
[codeblock]
template <class T, T> struct S {};
template <class T> int f(S<T, T()>*);
struct X {};
int i0 = f<X>(0);
[codeblock:end]
[exit:example]

[item]
[:en]
Attempting to perform an invalid conversion in either a template argument
expression, or an expression used in the function declaration.
[:zh_CN]
试图在模板实参表达式或在函数声明式中使用的表达式上实施无效的转换。

[enter:example]
[codeblock]
template <class T, T*> int f(int);
int i2 = f<int,1>(0);           // [:en] can[=']t conv [`1] to [`int*]
                                // [|:zh_CN] 不能把 [`1] 转换为 [`int*]
[codeblock:end]
[exit:example]

[item]
[:en]
Attempting to create a function type in which a parameter has a type of [`void],
or in which the return type is a function type or array type.
[:zh_CN]
试图创建形参类型为 [`void]，或返回类型为函数类型或数组类型的函数类型。

[item]
[:en]
Attempting to create a function type in which a parameter type or the return
type is an abstract class type ([#class.abstract]).
[:zh_CN]
试图创建形参类型或返回类型为抽象类类型（[#class.abstract]）的函数类型。
[list:end]
[exit:note]

[para]
[enter:example]
[:en]
In the following example, assuming a [`signed char] cannot represent the value
1000, a narrowing conversion ([#dcl.init.list]) would be required to convert the
[~template-argument] of type [`int] to [`signed char], therefore substitution
fails for the second template ([#temp.arg.nontype]).
[:zh_CN]
在如下示例中，假设 [`signed char] 无法表示值 1000，则由于需要对其[~模板实参]进行
从类型 [`int] 到 [`signed char] 的窄化转换（[#dcl.init.list]），因此对第二个模板
的代换将会失败（[#temp.arg.nontype]）。

[codeblock]
template <int> int f(int);
template <signed char> int f(int);
int i1 = f<1000>(0);            // OK
int i2 = f<1>(0);               // [:en] ambiguous; not narrowing
                                // [|:zh_CN] 有歧义；不能进行窄化
[codeblock:end]
[exit:example]

[include temp.deduct.call]

[include temp.deduct.funcaddr]

[include temp.deduct.conv]

[include temp.deduct.partial]

[include temp.deduct.type]

[include temp.deduct.decl]
