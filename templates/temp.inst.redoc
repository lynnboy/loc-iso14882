[section#temp.inst
    [:en] Implicit instantiation
    [:zh_CN] 隐式实例化
]

[para]
[:en]
A template specialization [$E] is a [+:adj declared[!specialization]] if there
is a reachable explicit instantiation definition ([#temp.explicit]) or explicit
specialization declaration ([#temp.expl.spec]) for [$E], or if there is a
reachable explicit instantiation declaration for [$E] and [$E] is not
[:zh_CN]
如果存在可达的模板特例 [$E] 的显式实例化定义式（[#temp.explicit]）或显式特化
声明式（[#temp.expl.spec]），或者存在可达的 [$E] 的显式实例化声明式且 [$E] 不是
下列各项，则 [$E] 为[+:adj 已声明[!特例]]：

[list]
[item]
[:en@~] an inline function,
[:zh_CN@~] 内联函数，
[item]
[:en@~] declared with a type deduced from its initializer or return value
([#dcl.spec.auto]),
[:zh_CN@~] 声明为具有从其初始化式或返回值推断的类型（[#dcl.spec.auto]），
[item]
[:en@~] a potentially-constant variable ([#expr.const]), or
[:zh_CN@~] 潜在常量变量（[#expr.const]），或者
[item]
[:en@~] a specialization of a templated class.
[:zh_CN@~] 模板化的类的特例。
[list:end]

[begin:note]
[:en]
An implicit instantiation in an importing translation unit cannot use names with
internal linkage from an imported translation unit ([#basic.link]).
[:zh_CN]
在进行导入的翻译单元中，隐式实例化不能使用来自被导入翻译单元的具有内部连接的名字
（[#basic.link]）。
[end:note]

[para]
[:en]
[%instantiation[!template implicit]]
Unless a class template specialization is a declared specialization, the class
template specialization is implicitly instantiated when the specialization is
referenced in a context that requires a completely-defined object type or when
the completeness of the class type affects the semantics of the program.
[:zh_CN]
[%实例化[!模板隐式～]]
除非类模板特例是已声明特例，否则在需要完整定义的对象类型的语境中指代该特例，或者
当其类类型的完整性对程序的语义有影响时，就对该类模板特例进行隐式实例化。

[begin:note]
[:en]
In particular, if the semantics of an expression depend on the member or
base class lists of a class template specialization, the class template
specialization is implicitly generated.
[:zh_CN]
特别是，如果某个表达式的语义依赖于某个类模板特例的成员或基类的列表，则会隐含地
生成这个类模板特例。

[:en]
For instance, deleting a pointer to class type depends on whether or not the
class declares a destructor, and a conversion between pointers to class type
depends on the inheritance relationship between the two classes involved.
[:zh_CN]
例如说，删除类类型的指针，依赖于这个类是否声明了析构函数，而在类类型的指针之间的
转换则依赖于其所涉及的两个类之间的继承关系。
[end:note]

[begin:example]
[codeblock]
template<class T> class B { /* ... */ };
template<class T> class D : public B<T> { /* ... */ };

void f(void*);
void f(B<int>*);

void g(D<int>* p, D<char>* pp, D<double>* ppp) {
  f(p);             // [:en] instantiation of [`D<int>] required: call [`f(B<int>*)] \
                    [:zh_CN] 需要实例化 [`D<int>]：调用了 [`f(B<int>*)]
  B<char>* q = pp;  // [:en] instantiation of [`D<char>] required: convert [`D<char>*] to [`B<char>*] \
                    [:zh_CN] 需要实例化 [`D<char>]：将 [`D<char>*] 转换为 [`B<char>*]
  delete ppp;       // [:en] instantiation of [`D<double>] required \
                    [:zh_CN] 需要实例化 [`D<double>]
}
[codeblock:end]
[end:example]

[:en]
If the template selected for the specialization ([#temp.spec.partial.match])
has been declared, but not defined, at the point of instantiation ([#temp.point]),
the instantiation yields an incomplete class type ([#term.incomplete.type]).
[:zh_CN]
如果对特例所选择的模板（[#temp.spec.partial.match]）已经被声明但尚未定义，则在其
实例化点（[#temp.point]），实例化产生的是不完整类类型（[#term.incomplete.type]）。

[begin:example]
[codeblock]
template<class T> class X;
X<char> ch;         // [:en] error: incomplete type [`X<char>] \
                    [:zh_CN] 错误：不完整类型 [`X<char>]
[codeblock:end]
[end:example]

[begin:note]
[:en]
Within a template declaration, a local class ([#class.local]) or enumeration and
the members of a local class are never considered to be entities that can be
separately instantiated (this includes their default arguments,
[~noexcept-specifier]s, and non-static data member initializers, if any, but
not their [~type-constraint]s or [~requires-clause]s).
[:zh_CN]
在模板声明式中，局部类（[#class.local]）或枚举，以及局部类的成员，不会被当作可以
单独进行实例化的实体（这还包括它们的默认实参，[~noexcept-说明符]，以及非静态数据
成员初始化式，如果有，但不包括其[~类型约束]或 [~requires-子句]）。

[:en]
As a result, the dependent names are looked up, the semantic constraints are
checked, and any templates used are instantiated as part of the instantiation of
the entity within which the local class or enumeration is declared.
[:zh_CN]
其结果是，作为对声明了该局部类或枚举的实体的实例化过程的一部分，实施待决名字查找，
检查其语义约束，并实例化其所使用的任何模板。
[end:note]

[para]
[:en]
The implicit instantiation of a class template specialization causes
[:zh_CN]
类模板特例的隐式实例化将导致

[list]
[item]
[:en]
the implicit instantiation of the declarations, but not of the definitions, of
the non-deleted class member functions, member classes, scoped member
enumerations, static data members, member templates, and friends; and
[:zh_CN]
未弃置的类成员函数，成员类，有作用域成员枚举，静态数据成员，成员模板，以及友元的
声明式（而非定义式）的隐式实例化；以及
[item]
[:en]
the implicit instantiation of the definitions of deleted member functions,
unscoped member enumerations, and member anonymous unions.
[:zh_CN]
弃置的成员函数，无作用域成员枚举，以及成员匿名联合体的定义式的隐式实例化。
[list:end]

[:en]
The implicit instantiation of a class template specialization does not cause the
implicit instantiation of default arguments or [~noexcept-specifier]s of the
class member functions.
[:zh_CN]
类模板特例的隐式实例化不会导致对类成员函数的默认实参或 [~noexcept-说明符]的隐式
实例化。

[begin:example]
[codeblock]
template<class T>
struct C {
  void f() { T x; }
  void g() = delete;
};
C<void> c;                      // [:en] OK, definition of [`C<void>::f] is not instantiated at this point \
                                [:zh_CN] OK，此处并未实例化 [`C<void>::f] 的定义式
template<> void C<int>::g() { } // [:en] error: redefinition of [`C<int>::g] \
                                [:zh_CN] 错误：重复定义 [`C<int>::g]
[codeblock:end]
[end:example]

[:en]
However, for the purpose of determining whether an instantiated redeclaration
is valid according to [#basic.def.odr] and [#class.mem], an instantiated
declaration that corresponds to a definition in the template is considered to be
a definition.
[:zh_CN]
然而，在根据 [#basic.def.odr] 和 [#class.mem] 来确定某个已实例化的重复声明式是否
有效时，对应于该模板中的一个定义式的已实例化的声明式被当作定义式处理。

[begin:example]
[codeblock]
template<class T, class U>
struct Outer {
  template<class X, class Y> struct Inner;
  template<class Y> struct Inner<T, Y>;         // #1a
  template<class Y> struct Inner<T, Y> { };     // [:en] #1b; OK, valid redeclaration of #1a \
                                                [:zh_CN] #1b；OK，对 #1a 的有效的重复声明式
  template<class Y> struct Inner<U, Y> { };     // #2
};

Outer<int, int> outer;                          // [:en] error at #2 \
                                                [:zh_CN] 在 #2 处有错误
[codeblock:end]

[:en]
[`Outer<int, int>::Inner<int, Y>] is redeclared at #1b.
[:zh_CN]
[`Outer<int, int>::Inner<int, Y>] 在 #1b 被重复声明。

[:en]
(It is not defined but noted as being associated with a definition in
[`Outer<T, U>].)
[:zh_CN]
（它并未被定义，但被标记为与 [`Outer<T, U>] 中的一个定义式相关联。）

[:en]
#2 is also a redeclaration of #1a.
[:zh_CN]
#2 也是对 #1a 的重复声明式。

[:en]
It is noted as associated with a definition, so it is an invalid redeclaration
of the same partial specialization.
[:zh_CN]
它被标记为与一个定义式相关联，因此它在同一个部分特化式中是一个无效的重复声明式。

[codeblock]
template<typename T> struct Friendly {
  template<typename U> friend int f(U) { return sizeof(T); }
};
Friendly<char> fc;
Friendly<float> ff;                             // [:en] error: produces second definition of [`f(U)] \
                                                [:zh_CN] 错误：产生了 [`f(U)] 的第二个定义
[codeblock:end]
[end:example]

[para]
[:en]
Unless a member of a templated class is a declared specialization, the
specialization of the member is implicitly instantiated when the specialization
is referenced in a context that requires the member definition to exist or if
the existence of the definition of the member affects the semantics of the
program; in particular, the initialization (and any associated side-effects) of
a static data member does not occur unless the static data member is itself used
in a way that requires the definition of the static data member to exist.
[:zh_CN]
除非模板化类的成员是已声明特例，否则在需要存在该成员的定义式的语境中指代该特例时，
或者该成员的定义的存在与否会影响程序的语义时，该成员的特例就被隐式实例化；特别地，
除非静态数据成员自身以需要该静态数据成员的定义式存在的方式被使用，否则静态数据
成员的实例化（以及任何相关的副作用）并不会发生。

[para]
[:en]
Unless a function template specialization is a declared specialization, the
function template specialization is implicitly instantiated when the
specialization is referenced in a context that requires a function definition to
exist or if the existence of the definition affects the semantics of the program.
[:zh_CN]
除非函数模板特例是已声明特例，否则在需要存在函数定义式的语境中涉指该特例时，或者
其定义的存在与否会影响程序的语义时，该函数模板特例就被隐式实例化。

[:en]
A function whose declaration was instantiated from a friend function definition
is implicitly instantiated when it is referenced in a context that requires a
function definition to exist or if the existence of the definition affects the
semantics of the program.
[:zh_CN]
如果某个函数的声明式是由某个友元函数定义式实例化而来，则当由于在某个要求存在函数
定义的语境中涉指它时，或者其定义的存在与否会影响程序的语义时，它被隐式实例化。

[:en]
Unless a call is to a function template explicit specialization or to a member
function of an explicitly specialized class template, a default argument for a
function template or a member function of a class template is implicitly
instantiated when the function is called in a context that requires the value of
the default argument.
[:zh_CN]
除非调用了函数模板显式特化式或被显式特化的类模板的成员函数，否则函数模板或类模板
的成员函数的默认实参在需要该默认实参的值的语境中调用该函数时就被隐式实例化。

[begin:note]
[:en]
An inline function that is the subject of an explicit instantiation declaration
is not a declared specialization; the intent is that it still be implicitly
instantiated when odr-used ([#term.odr.use]) so that the body can be considered
for inlining, but that no out-of-line copy of it be generated in the translation
unit.
[:zh_CN]
作为显式实例化式声明式主体的内联函数不是已声明特例；其意图是使其在被 ODR 式使用
（[#term.odr.use]）时仍会被隐式实例化，以使其函数体可在内联中予以考察，但不会
在翻译单元中生成其非内联的副本。
[end:note]

[para]
[begin:example]
[codeblock]
template<class T> struct Z {
  void f();
  void g();
};

void h() {
  Z<int> a;         // [:en] instantiation of class [`Z<int>] required \
                    [:zh_CN] 需要类 [`Z<int>] 的实例化
  Z<char>* p;       // [:en] instantiation of class [`Z<char>] not required \
                    [:zh_CN] 不需要类 [`Z<char>] 的实例化
  Z<double>* q;     // [:en] instantiation of class [`Z<double>] not required \
                    [:zh_CN] 不需要类 [`Z<double>] 的实例化

  a.f();            // [:en] instantiation of [`Z<int>::f()] required \
                    [:zh_CN] 需要 [`Z<int>::f()] 的实例化
  p->g();           // [:en] instantiation of class [`Z<char>] required, and \
                    [:zh_CN] 需要类 [`Z<char>] 的实例化，并且
                    // [:en@~] instantiation of [`Z<char>::g()] required \
                    [:zh_CN@~] 需要 [`Z<char>::g()] 的实例化
}
[codeblock:end]

[:en]
Nothing in this example requires [`:key class] [`Z<double>], [`Z<int>::g()], or
[`Z<char>::f()] to be implicitly instantiated.
[:zh_CN]
本例中不需要对 [`:key class] [`Z<double>]，[`Z<int>::g()]>，或者 [`Z<char>::f()]
进行隐式实例化。
[end:example]

[para]
[:en]
Unless a variable template specialization is a declared specialization, the
variable template specialization is implicitly instantiated when it is
referenced in a context that requires a variable definition to exist or if the
existence of the definition affects the semantics of the program.
[:zh_CN]
除非变量模板特例是已声明特例，否则变量模板特例在某个要求存在变量的定义的语境中
涉指它时，或者当其定义的存在与否会影响程序的语义时，它就被隐式实例化。

[:en]
A default template argument for a variable template is implicitly instantiated
when the variable template is referenced in a context that requires the value of
the default argument.
[:zh_CN]
变量模板的默认模板实参，当其变量模板在需要该默认实参的值的语境中被涉指时被隐式
实例化。

[para]
[:en]
[%definition[!program semantics affected by]]
[%variable[!program semantics affected by the existence of a variable definition]]
[%function[!program semantics affected by the existence of a function definition]]
[%program semantics[!affected by the existence of a variable or function definition]]
[:zh_CN]
[%定义[!影响程序语义]]
[%变量[!程序语义受到变量定义存在与否的影响]]
[%函数[!程序语义受到函数定义存在与否的影响]]
[%程序语义[!受变量或函数定义存在与否的影响]]
[:en]
The existence of a definition of a variable or function is considered to affect
the semantics of the program if the variable or function is needed for constant
evaluation by an expression ([#expr.const]), even if constant evaluation of the
expression is not required or if constant expression evaluation does not use the
definition.
[:zh_CN]
如果变量或函数被某个表达式的常量求值所需要（[#expr.const]），则认为该变量或函数
的定义存在与否会影响程序的语义，即使该表达式的常量求值并不是必要的，或常量表达式
求值并未使用该定义时也是如此。

[begin:example]
[codeblock]
template<typename T> constexpr int f() { return T::value; }
template<bool B, typename T> void g(decltype(B ? f<T>() : 0));
template<bool B, typename T> void g(...);
template<bool B, typename T> void h(decltype(int{B ? f<T>() : 0}));
template<bool B, typename T> void h(...);
void x() {
  g<false, int>(0); // [:en] OK, [`B ? f<T>() : 0] is not potentially constant evaluated \
                    [:zh_CN] OK，[`B ? f<T>() : 0] 并非潜在常量求值
  h<false, int>(0); // [:en] error, instantiates [`f<int>] even though [`B] evaluates to [`false] and \
                    [:zh_CN] 错误，即便 [`B] 求值为 [`false]，且从 [`int] 对 [`int]
                    // [:en@~] list-initialization of [`int] from [`int] cannot be narrowing \
                    [:zh_CN@~] 进行的列表初始化式并不会窄化，也会实例化 [`f<int>]
}
[codeblock:end]
[end:example]

[para]
[:en]
If the function selected by overload resolution ([#over.match]) can be
determined without instantiating a class template definition, it is unspecified
whether that instantiation actually takes place.
[:zh_CN]
若重载决议（[#over.match]）所选择的函数可以在不实例化类模板定义式时就能够确定，
则该实例化实际上会不会发生是未指明的。

[begin:example]
[codeblock]
template <class T> struct S {
  operator int();
};

void f(int);
void f(S<int>&);
void f(S<float>);

void g(S<int>& sr) {
  f(sr);            // [:en] instantiation of [`S<int>] allowed but not required \
                    [:zh_CN] 允许但不需要 [`S<int>] 的实例化
                    // [:en] instantiation of [`S<float>] allowed but not required \
                    [:zh_CN] 允许但不需要 [`S<float>] 的实例化
};
[codeblock:end]
[end:example]

[para]
[:en]
If a function template or a member function template specialization is used in
a way that involves overload resolution, a declaration of the specialization is
implicitly instantiated ([#temp.over]).
[:zh_CN]
若以涉及重载决议的方式使用函数模板或成员函数模板的特例，则该特例的声明式就被隐式
实例化（[#temp.over]）。

[para]
[:en]
An implementation shall not implicitly instantiate a function template,
a variable template, a member template, a non-virtual member function, a member
class or static data member of a templated class, or a substatement of a
constexpr if statement ([#stmt.if]), unless such instantiation is required.
[:zh_CN]
除非必须进行实例化，否则实现不能隐式实例化函数模板，变量模板，成员模板，类模板的
非虚成员函数，模板化类的成员类或静态数据成员，或者 constexpr if 语句（[#stmt.if]）
的子语句。

[begin:note]
[:en]
The instantiation of a generic lambda does not require instantiation of
substatements of a constexpr if statement within its [~compound-statement]
unless the call operator template is instantiated.
[:zh_CN]
泛型 lambda 的实例化并不要求对其[~复合语句]中的 constexpr if 语句的子语句进行
实例化，除非其调用运算符模板被实例化。
[end:note]

[:en]
It is unspecified whether or not an implementation implicitly instantiates a
virtual member function of a class template if the virtual member function would
not otherwise be instantiated.
[:zh_CN]
若类模板的虚成员函数不会以其他方式被实例化，则实现是否隐式实例化该虚成员函数是
未指明的。

[:en]
The use of a template specialization in a default argument or default member
initializer shall not cause the template to be implicitly instantiated except
where needed to determine the correctness of the default argument or default
member initializer.
[:zh_CN]
在默认实参或默认成员初始化式中使用模板特例，除非需要确定该默认实参或默认成员
初始化式的正确性，否则不应当造成该模板被隐式实例化。

[:en]
The use of a default argument in a function call causes specializations in the
default argument to be implicitly instantiated.
[:zh_CN]
在函数调用中使用默认实参将造成默认实参中的特例被隐式实例化。

[:en]
Similarly, the use of a default member initializer in a constructor definition
or an aggregate initialization causes specializations in the default member
initializer to be instantiated.
[:zh_CN]
相似地，在构造函数定义式或聚合初始化中使用默认成员初始化式将造成默认成员初始化式
中的特例被实例化。

[para]
[:en]
If a function template [`f] is called in a way that requires a default argument
to be used, the dependent names are looked up, the semantics constraints are
checked, and the instantiation of any template used in the default argument is
done as if the default argument had been an initializer used in a function
template specialization with the same scope, the same template parameters and
the same access as that of the function template [`f] used at that point, except
that the scope in which a closure type is declared ([#expr.prim.lambda.closure])
[=--] and therefore its associated namespaces [=--] remain as determined from
the context of the definition for the default argument.
[:zh_CN]
若函数模板 [`f] 以需要使用某个默认实参的方式被调用，则要按照如同该默认实参作为与
该处所使用的函数模板 [`f] 带有相同作用域、相同模板形参和相同访问权的函数模板特例
中所使用的初始化式那样，查找其待决名，检查其语义约束，并对在该默认实参中所使用的
任何模板进行实例化，但声明闭包类型（[#expr.prim.lambda.closure]）的作用域（以及
与其关联的命名空间）仍保持为从默认实参的定义式的语句中进行确定。

[:en]
This analysis is called [+default argument instantiation].
[:zh_CN]
这项分析被称为[+默认实参的实例化]。

[:en]
The instantiated default argument is then used as the argument of [`f].
[:zh_CN]
所实例化的默认实参随即被用作 [`f] 的实参。

[para]
[:en]
Each default argument is instantiated independently.
[:zh_CN]
每个默认实参的实例化是独立进行的。

[begin:example]
[codeblock]
template<class T> void f(T x, T y = ydef(T()), T z = zdef(T()));

class  A { };

A zdef(A);

void g(A a, A b, A c) {
  f(a, b, c);       // [:en] no default argument instantiation \
                    [:zh_CN] 没有默认实参实例化
  f(a, b);          // [:en] default argument [`z = zdef(T())] instantiated \
                    [:zh_CN] 默认实参 [`z = zdef(T())] 被实例化
  f(a);             // [:en] error: [`ydef] is not declared \
                    [:zh_CN] 错误：[`ydef] 未被声明
}
[codeblock:end]
[end:example]

[para]
[:en]
The [~noexcept-specifier] of a function template specialization is not
instantiated along with the function declaration; it is instantiated when needed
([#except.spec]).
[:zh_CN]
函数模板特例的[~noexcept-说明符]并不与函数声明式一起实例化；它是当需要时才实例化
的（[#except.spec]）。

[:en]
If such an [~noexcept-specifier] is needed but has not yet been instantiated,
the dependent names are looked up, the semantics constraints are checked, and
the instantiation of any template used in the [~noexcept-specifier] is done as
if it were being done as part of instantiating the declaration of the
specialization at that point.
[:zh_CN]
如果这种 [~noexcept-说明符]被需要但还未被实例化，则如同它作为在该处对声明式的
实例化过程的一部分一样，实施待决名字查找，检查其语义约束，并实例化在这个
[~noexcept-说明符]中所使用的任何模板。

[para]
[begin:note]
[:en]
[#temp.point] defines the point of instantiation of a template specialization.
[:zh_CN]
[#temp.point] 定义了模板特例的实例化点。
[end:note]

[para]
[:en]
There is an [?impldef maximum depth of recursive template instantiation]
quantity that specifies the limit on the total depth of recursive instantiations
([#implimits]), which could involve more than one template.
[:zh_CN]
[?impldef 模板实例化的最大递归深度]一个数量，指定了递归进行的实例化的总深度的
限度，其中可能会涉及多于一个模板。

[:en]
The result of an infinite recursion in instantiation is undefined.
[:zh_CN]
无限递归的实例化的结果是未定义的。
[begin:example]

[codeblock]
template<class T> class X {
  X<T>* p;          // OK
  X<T*> a;          // [:en] implicit generation of [`X<T>] requires \
                    [:zh_CN] [`X<T>] 的隐式生成需要
                    // [:en@~] the implicit instantiation of [`X<T*>] which requires \
                    [:zh_CN@~] 隐式实例化 [`X<T*>]，而它又需要
                    // [:en@~] the implicit instantiation of [`X<T**>] which [$\ldots] \
                    [:zh_CN@~] 隐式实例化 [`X<T**>]，[$\ldots]
};
[codeblock:end]
[end:example]

[para]
[:en]
The [~type-constraint]s and [~requires-clause] of a template specialization or
member function are not instantiated along with the specialization or function
itself, even for a member function of a local class; substitution into the
atomic constraints formed from them is instead performed as specified in
[#temp.constr.decl] and [#temp.constr.atomic] when determining whether the
constraints are satisfied or as specified in [#temp.constr.decl] when comparing
declarations.
[:zh_CN]
模板特例或成员函数的[~类型约束]和 [~requires-子句]，并不会与特例或函数自身一起
实例化，即便局部类的成员函数也是如此；而是代之以根据 [#temp.constr.decl] 和
[#temp.constr.atomic] 中所指定的，当要确定其约束是否满足时，或根据
[#temp.constr.decl] 中所指定的，当进行声明式的比较时，进行向以它们所构成的
原子约束中进行代换。

[begin:note]
[:en]
The satisfaction of constraints is determined during name lookup or overload
resolution ([#over.match]).
[:zh_CN]
在名字查找或重载决议（[#over.match]）中需要确定其约束的满足情况。
[end:note]

[begin:example]
[codeblock]
template<typename T> concept C = sizeof(T) > 2;
template<typename T> concept D = C<T> && sizeof(T) > 4;

template<typename T> struct S {
  S() requires C<T> { }         // #1
  S() requires D<T> { }         // #2
};

S<char> s1;                     // [:en] error: no matching constructor \
                                [:zh_CN] 错误：没有匹配的构造函数
S<char[8]> s2;                  // [:en] OK, calls #2 \
                                [:zh_CN] OK，调用 #2
[codeblock:end]

[:en]
When [`S<char>] is instantiated, both constructors are part of the
specialization.
[:zh_CN]
当实例化 [`S<char>] 时，两个构造函数都是该特例的一部分。

[:en]
Their constraints are not satisfied, and they suppress the implicit declaration
of a default constructor for [`S<char>] ([#class.default.ctor]), so there is no
viable constructor for [`s1].
[:zh_CN]
它们的约束并未满足，而它们却抑制了 [`S<char>] 的默认构造函数的隐式声明式
（[#class.default.ctor]），因此 [`s1] 没有可行的构造函数。
[end:example]

[begin:example]
[codeblock]
template<typename T> struct S1 {
  template<typename U>
    requires false
  struct Inner1;                // [:en] ill-formed, no diagnostic required \
                                [:zh_CN] 非良构，无须诊断
};

template<typename T> struct S2 {
  template<typename U>
    requires (sizeof(T[-(int)sizeof(T)]) > 1)
  struct Inner2;                // [:en] ill-formed, no diagnostic required \
                                [:zh_CN] 非良构，无须诊断
};
[codeblock:end]

[:en]
The class [`S1<T>::Inner1] is ill-formed, no diagnostic required, because it has
no valid specializations.
[:zh_CN]
类 [`S1<T>::Inner1] 非良构，无须诊断，因为它没有有效的特例。

[:en]
[`S2] is ill-formed, no diagnostic required, since no substitution into the
constraints of its [`Inner2] template would result in a valid expression.
[:zh_CN]
[`S2] 非良构，无须诊断，因为向其 [`Inner2] 模板的元素进行代换无法导致有效的
表达式。
[end:example]
