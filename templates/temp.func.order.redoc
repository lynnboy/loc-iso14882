[section#temp.func.order
    [:en] Partial ordering of function templates
    [:zh_CN] 函数模板的偏序
]

[para]
[:en]
[%overloading[!resolution[!template]]]
[%ordering[!function template partial][%template[!function[!partial ordering]]]]
If a function template is overloaded, the use of a function template
specialization might be ambiguous because template argument deduction
([#temp.deduct]) may associate the function template specialization with more
than one function template declaration.
[:zh_CN]
[%重载[!～决议[!模板]]]
[%排序[!函数模板的偏～][%模板[!函数～[!偏序]]]]
当函数模板被重载时，由于模板实参推断（[#temp.deduct]）可能将一个函数模板特例与
不止一个函数模板声明式关联起来，使用函数模板特例时有可能产生歧义。

[:en]
[+Partial ordering[%template[!function[!partial ordering]]]] of overloaded
function template declarations is used in the following contexts to select the
function template to which a function template specialization refers:
[:zh_CN]
在下述语境中，利用重载函数模板声明式的[+偏序[%模板[!函数～[!偏序]]]]来选择函数
模板特例所指代的函数模板：

[list]
[item]
[:en] during overload resolution for a call to a function template
specialization ([#over.match.best]);
[:zh_CN] 在为函数模板特例（[#over.match.best]）的调用进行重载决议时；
[item]
[:en] when the address of a function template specialization is taken;
[:zh_CN] 当获取函数模板特例的地址时；
[item]
[:en] when a placement operator delete that is a function template
specialization is selected to match a placement operator new
([#basic.stc.dynamic.deallocation], [#expr.new]);
[:zh_CN] 当选择作为函数模板特例的放置 delete 运算符以匹配某个放置 new 运算符时
（[#basic.stc.dynamic.deallocation]，[#expr.new]）；
[item]
[:en] when a friend function declaration ([#temp.friend]), an explicit
instantiation ([#temp.explicit]) or an explicit specialization
([#temp.expl.spec]) refers to a function template specialization.
[:zh_CN] 当友元函数声明式（[#temp.friend]），显式实例化式（[#temp.explicit]）或
显式特化式（[#temp.expl.spec]）指代某个函数模板特例时。
[list:end]

[para]
[:en]
Partial ordering selects which of two function templates is more specialized
than the other by transforming each template in turn (see next paragraph) and
performing template argument deduction using the function type.
[:zh_CN]
偏序过程通过对两个函数模板中的每个模板依次进行变换（见下一段落），并且利用其函数
类型实施模板实参推断来选择其中哪个比另一个更加特殊来进行。

[:en]
The deduction process determines whether one of the templates is more
specialized than the other.
[:zh_CN]
该推断过程确定了其中是否有一个模板比另一个更特殊。

[:en]
If so, the more specialized template is the one chosen by the partial ordering
process.
[:zh_CN]
如果是这样，这个更特殊的模板就是被偏序过程所选择的那一个。

[:en]
If both deductions succeed, the partial ordering selects the more constrained
template as described by the rules in [#temp.constr.order].
[:zh_CN]
如果推断均成功，则部分排序根据 [#temp.constr.order] 中的规则所述选择更受约束的
模板。

[para]
[:en]
To produce the transformed template, for each type, non-type, or template
template parameter (including template parameter packs ([#temp.variadic])
thereof) synthesize a unique type, value, or class template respectively and
substitute it for each occurrence of that parameter in the function type of the
template.
[:zh_CN]
为产生经过变换的模板，须对每个类型、非类型或模板模板形参（包括其模板形参包组
（[#temp.variadic]））分别合成出一个唯一的类型、值或类模板，并且将该模板的函数
类型中出现的每个这个形参以之进行替换。

[begin:note]
[:en]
The type replacing the placeholder in the type of the value synthesized for a
non-type template parameter is also a unique synthesized type.
[:zh_CN]
对于为非类型模板形参所合成的值，用以替换其类型之中的占位符的类型也是一个唯一的
合成类型。
[end:note]

[:en]
If only one of the function templates [$M] is a member function, and that
function is a non-static member of some class [$A], [$M] is considered to have
a new first parameter inserted in its function parameter list.
[:zh_CN]
如果函数模板中仅有一个是成员函数 [$M]，且该函数是某个类 [$A] 的非静态成员，则
[$M] 被当作其函数形参列表中插入了新的第一个形参。

[:en]
Given [=cv] as the cv-qualifiers of [$M] (if any), the new parameter is of type
[=lq]rvalue reference to [=cv] [$A][=rq] if the optional [~ref-qualifier] of
[$M] is [`&&] or if [$M] has no [~ref-qualifier] and the first parameter of the
other template has rvalue reference type.
[:zh_CN]
给定 [=cv] 为 [$M] 的 [=cv] 限定符（如果有），则当 [$M] 的可选的[~引用限定符]为
[`&&]，或当 [$M] 没有[~引用限定符]而另一个模板的第一个形参具有右值引用类型时，
这个新形参具有类型“[=cv] [$A] 的右值引用”。

[:en]
Otherwise, the new parameter is of type [=lq]lvalue reference to [=cv] [$A][=rq].
[:zh_CN]
否则，这个新形参具有类型“[=cv] [$A] 的左值引用”。

[begin:note]
[:en]
This allows a non-static member to be ordered with respect to a non-member
function and for the results to be equivalent to the ordering of two equivalent
non-members.
[:zh_CN]
这样就允许一个非静态成员相对于非成员函数进行排序，且其结果等价于对两个非成员的
排序。
[end:note]

[begin:example]
[codeblock]
struct A { };
template<class T> struct B {
  template<class R> int operator*(R&);              // #1
};

template<class T, class R> int operator*(T&, R&);   // #2

// [:en] The declaration of [`B::operator*] is transformed into the equivalent of \
   [:zh_CN] [`B::operator*] 的声明式被变换为等价的
//[` template<class R> int operator*(B<A>&, R&);      ]// #1a

int main() {
  A a;
  B<A> b;
  b * a;                                            // [:en] calls #1a \
                                                       [:zh_CN] 调用了 #1a
}
[codeblock:end]
[end:example]

[para]
[:en]
Using the transformed function template[=']s function type, perform type
deduction against the other template as described in [#temp.deduct.partial].
[:zh_CN]
使用变换过的函数模板的函数类型，根据 [#temp.deduct.partial] 中的描述对另一个模板
实施类型推断。

[para:~]
[begin:example]
[codeblock]
template<class T> struct A { A(); };

template<class T> void f(T);
template<class T> void f(T*);
template<class T> void f(const T*);

template<class T> void g(T);
template<class T> void g(T&);

template<class T> void h(const T&);
template<class T> void h(A<T>&);

void m() {
  const int* p;
  f(p);             // [:en] [`f(const T*)] is more specialized than [`f(T)] or [`f(T*)] \
                       [:zh_CN] [`f(const T*)] 比 [`f(T)] 或 [`f(T*)] 更特殊
  float x;
  g(x);             // [:en] ambiguous: [`g(T)] or [`g(T&)] \
                       [:zh_CN] 有歧义：[`g(T)] 还是 [`g(T&)]
  A<int> z;
  h(z);             // [:en] overload resolution selects [`h(A<T>&)] \
                       [:zh_CN] 重载决议选择了 [`h(A<T>&)]
  const A<int> z2;
  h(z2);            // [:en] [`h(const T&)] is called because [`h(A<T>&)] is not callable \
                       [:zh_CN] 调用了 [`h(const T&)]，因为 [`h(A<T>&)] 不可调用
}
[codeblock:end]
[end:example]

[para]
[begin:note]
[:en]
Since partial ordering in a call context considers only parameters for which
there are explicit call arguments, some parameters are ignored (namely, function
parameter packs, parameters with default arguments, and ellipsis parameters).
[:zh_CN]
由于在调用语境中，偏序规则仅考虑具有明确的调用实参的形参，因此一些形参是被忽略的
（包括函数形参包组，带有默认实参的形参，以及省略号形参）。

[begin:example]
[codeblock]
template<class T> void f(T);                            // #1
template<class T> void f(T*, int=1);                    // #2
template<class T> void g(T);                            // #3
template<class T> void g(T*, ...);                      // #4

int main() {
  int* ip;
  f(ip);                                                // [:en] calls #2 \
                                                           [:zh_CN] 调用了 #2
  g(ip);                                                // [:en] calls #4 \
                                                           [:zh_CN] 调用了 #4
}
[codeblock:end]
[end:example]

[begin:example]
[codeblock]
template<class T, class U> struct A { };

template<class T, class U> void f(U, A<U, T>* p = 0);   // #1
template<         class U> void f(U, A<U, U>* p = 0);   // #2
template<class T         > void g(T, T = T());          // #3
template<class T, class... U> void g(T, U ...);         // #4

void h() {
  f<int>(42, (A<int, int>*)0);                          // [:en] calls #2 \
                                                           [:zh_CN] 调用了 #2
  f<int>(42);                                           // [:en] error: ambiguous \
                                                           [:zh_CN] 错误：有歧义
  g(42);                                                // [:en] error: ambiguous \
                                                           [:zh_CN] 错误：有歧义
}
[codeblock:end]
[end:example]

[begin:example]
[codeblock]
template<class T, class... U> void f(T, U...);          // #1
template<class T            > void f(T);                // #2
template<class T, class... U> void g(T*, U...);         // #3
template<class T            > void g(T);                // #4

void h(int i) {
  f(&i);                                                // [:en] OK: calls #2 \
                                                           [:zh_CN] OK：调用了 #2
  g(&i);                                                // [:en] OK: calls #3 \
                                                           [:zh_CN] OK：调用了 #3
}
[codeblock:end]
[end:example]
[end:note]
