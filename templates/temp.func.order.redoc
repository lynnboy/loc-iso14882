[section#temp.func.order
    [:en] Partial ordering of function templates
    [:zh_CN] 函数模板的偏序
]

[para]
[:en]
[%overloading[!resolution[!template]]]
[%ordering[!function template partial][%template[!function[!partial ordering]]]]
If multiple function templates share a name, the use of that name can be
ambiguous because template argument deduction ([#temp.deduct]) may identity
a specialization for more than one function template.
[:zh_CN]
[%重载[!～决议[!模板]]]
[%排序[!函数模板的偏～][%模板[!函数～[!偏序]]]]
当多个函数模板共享一个名字时，由于模板实参推断（[#temp.deduct]）可能会为多个
函数模板识别同一个特例，使用这个名字可能会产生歧义。

[:en]
[+Partial ordering[%template[!function[!partial ordering]]]] of overloaded
function template declarations is used in the following contexts to select the
function template to which a function template specialization refers:
[:zh_CN]
在下述语境中，利用重载函数模板声明式的[+偏序[%模板[!函数～[!偏序]]]]来选择函数
模板特例所指代的函数模板：

[list]
[item]
[:en] during overload resolution for a call to a function template
specialization ([#over.match.best]);
[:zh_CN] 在为函数模板特例（[#over.match.best]）的调用进行重载决议时；
[item]
[:en] when the address of a function template specialization is taken;
[:zh_CN] 当获取函数模板特例的地址时；
[item]
[:en] when a placement operator delete that is a function template
specialization is selected to match a placement operator new
([#basic.stc.dynamic.deallocation], [#expr.new]);
[:zh_CN] 当选择作为函数模板特例的放置 delete 运算符以匹配某个放置 new 运算符时
（[#basic.stc.dynamic.deallocation]，[#expr.new]）；
[item]
[:en] when a friend function declaration ([#temp.friend]), an explicit
instantiation ([#temp.explicit]) or an explicit specialization
([#temp.expl.spec]) refers to a function template specialization.
[:zh_CN] 当友元函数声明式（[#temp.friend]），显式实例化式（[#temp.explicit]）或
显式特化式（[#temp.expl.spec]）指代某个函数模板特例时。
[list:end]

[para]
[:en]
Partial ordering selects which of two function templates is more specialized
than the other by transforming each template in turn (see next paragraph) and
performing template argument deduction using the function type.
[:zh_CN]
偏序过程对两个函数模板中的每个模板依次进行变换（见下一段落），并且利用其函数类型
实施模板实参推断来选择其中哪个比另一个更加特殊。

[:en]
The deduction process determines whether one of the templates is more
specialized than the other.
[:zh_CN]
该推断过程确定了其中是否有一个模板比另一个更特殊。

[:en]
If so, the more specialized template is the one chosen by the partial ordering
process.
[:zh_CN]
如果是这样，这个更特殊的模板就是被偏序过程所选择的那一个。

[:en]
If both deductions succeed, the partial ordering selects the more constrained
template (if one exists) as determined below.
[:zh_CN]
如果推断均成功，则偏序根据下述确定方式选择更受约束的模板（如果存在）。

[para]
[:en]
To produce the transformed template, for each type, non-type, or template
template parameter (including template parameter packs ([#temp.variadic])
thereof) synthesize a unique type, value, or class template respectively and
substitute it for each occurrence of that parameter in the function type of the
template.
[:zh_CN]
为产生经过变换的模板，须对每个类型、非类型或模板模板形参（包括其模板形参包组
（[#temp.variadic]））分别合成出一个唯一的类型、值或类模板，并且将该模板的函数
类型中出现的每个这个形参以之进行代换。

[begin:note]
[:en]
The type replacing the placeholder in the type of the value synthesized for a
non-type template parameter is also a unique synthesized type.
[:zh_CN]
对于为非类型模板形参所合成的值，用以替换其类型之中的占位符的类型也是一个唯一的
合成类型。
[end:note]

[:en]
Each function template [$M] that is a member function is considered to have
a new first parameter of type [$X(M)], described below, inserted in its function
parameter list.
[:zh_CN]
每个作为成员函数的函数模板 [$M] 被当作其函数形参列表中插入了一个新的第一个形参，
其类型 [$X(M)] 描述如下。

[:en]
If exactly one of the function templates was considered by overload resolution
via a rewritten candidate ([#over.match.oper]) with a reversed order of
parameters, then the order of the function parameters in its transformed
template is reversed.
[:zh_CN]
如果函数模板中恰有一个被重载决议通过具有反转形参顺序的重写候选
（[#over.match.oper]）所考察，则其经过变换的模板中的函数形参的顺序经过反转。

[:en]
For a function template [$M] with cv-qualifiers [=cv] that is a member of a
class [$A]:
[:zh_CN]
对于作为类 [$A] 的成员的带有 cv 限定符 [=cv] 的函数模板 [$M]：

[list]
[item]
[:en]
The type [$X(M)] is [=lq]rvalue reference to [=cv] [$A][=rq] if the optional
[~ref-qualifier] of [$M] is [`&&] or if [$M] has no [~ref-qualifier] and
the positionally-corresponding parameter of the other transformed template
has rvalue reference type; if this determination depends recursively upon
whether [$X(M)] is an rvalue reference type, it is not considered to have rvalue
reference type.
[:zh_CN]
当 [$M] 的可选的[~引用限定符]为 [`&&]，或当 [$M] 没有[~引用限定符]而另一个经过
变换的模板的潜在对应的形参具有右值引用类型时，类型 [$X(M)] 为“[=cv] [$A] 的右值
引用”；如果这项决定递归地依赖于 [$X(M)] 是否是右值引用类型，则不将之当做具有
右值引用类型。

[item]
[:en]
Otherwise, [$X(M)] is [=lq]lvalue reference to [=cv] [$A][=rq].
[:zh_CN]
否则，[$X(M)] 为“[=cv] [$A] 的左值引用”。
[list:end]

[begin:note]
[:en]
This allows a non-static member to be ordered with respect to a non-member
function and for the results to be equivalent to the ordering of two equivalent
non-members.
[:zh_CN]
这样就允许一个非静态成员相对于非成员函数进行排序，且其结果等价于对两个非成员的
排序。
[end:note]

[begin:example]
[codeblock]
struct A { };
template<class T> struct B {
  template<class R> int operator*(R&);              // #1
};

template<class T, class R> int operator*(T&, R&);   // #2

// [:en] The declaration of [`B::operator*] is transformed into the equivalent of \
[:zh_CN] [`B::operator*] 的声明式被变换为等价的
//[` template<class R> int operator*(B<A>&, R&);      ]// #1a

int main() {
  A a;
  B<A> b;
  b * a;                                            // [:en] calls #1 \
                                                    [:zh_CN] 调用了 #1
}
[codeblock:end]
[end:example]

[para]
[:en]
Using the transformed function template[=']s function type, perform type
deduction against the other template as described in [#temp.deduct.partial].
[:zh_CN]
使用变换过的函数模板的函数类型，根据 [#temp.deduct.partial] 中的描述对另一个模板
实施类型推断。

[para:~]
[begin:example]
[codeblock]
template<class T> struct A { A(); };

template<class T> void f(T);
template<class T> void f(T*);
template<class T> void f(const T*);

template<class T> void g(T);
template<class T> void g(T&);

template<class T> void h(const T&);
template<class T> void h(A<T>&);

void m() {
  const int* p;
  f(p);             // [:en] [`f(const T*)] is more specialized than [`f(T)] or [`f(T*)] \
                    [:zh_CN] [`f(const T*)] 比 [`f(T)] 或 [`f(T*)] 更特殊
  float x;
  g(x);             // [:en] ambiguous: [`g(T)] or [`g(T&)] \
                    [:zh_CN] 有歧义：[`g(T)] 还是 [`g(T&)]
  A<int> z;
  h(z);             // [:en] overload resolution selects [`h(A<T>&)] \
                    [:zh_CN] 重载决议选择了 [`h(A<T>&)]
  const A<int> z2;
  h(z2);            // [:en] [`h(const T&)] is called because [`h(A<T>&)] is not callable \
                    [:zh_CN] 调用了 [`h(const T&)]，因为 [`h(A<T>&)] 不可调用
}
[codeblock:end]
[end:example]

[para]
[begin:note]
[:en]
Since, in a call context, such type deduction considers only parameters for which
there are explicit call arguments, some parameters are ignored (namely, function
parameter packs, parameters with default arguments, and ellipsis parameters).
[:zh_CN]
由于在调用语境中，这种类型推断仅考虑具有明确的调用实参的形参，因此一些形参是被
忽略的（包括函数形参包组，带有默认实参的形参，以及省略号形参）。

[begin:example]
[codeblock]
template<class T> void f(T);                            // #1
template<class T> void f(T*, int=1);                    // #2
template<class T> void g(T);                            // #3
template<class T> void g(T*, ...);                      // #4

int main() {
  int* ip;
  f(ip);                                                // [:en] calls #2 \
                                                        [:zh_CN] 调用了 #2
  g(ip);                                                // [:en] calls #4 \
                                                        [:zh_CN] 调用了 #4
}
[codeblock:end]
[end:example]

[begin:example]
[codeblock]
template<class T, class U> struct A { };

template<class T, class U> void f(U, A<U, T>* p = 0);   // #1
template<         class U> void f(U, A<U, U>* p = 0);   // #2
template<class T         > void g(T, T = T());          // #3
template<class T, class... U> void g(T, U ...);         // #4

void h() {
  f<int>(42, (A<int, int>*)0);                          // [:en] calls #2 \
                                                        [:zh_CN] 调用了 #2
  f<int>(42);                                           // [:en] error: ambiguous \
                                                        [:zh_CN] 错误：有歧义
  g(42);                                                // [:en] error: ambiguous \
                                                        [:zh_CN] 错误：有歧义
}
[codeblock:end]
[end:example]

[begin:example]
[codeblock]
template<class T, class... U> void f(T, U...);          // #1
template<class T            > void f(T);                // #2
template<class T, class... U> void g(T*, U...);         // #3
template<class T            > void g(T);                // #4

void h(int i) {
  f(&i);                                                // [:en] OK: calls #2 \
                                                        [:zh_CN] OK：调用了 #2
  g(&i);                                                // [:en] OK: calls #3 \
                                                        [:zh_CN] OK：调用了 #3
}
[codeblock:end]
[end:example]
[end:note]

[para]
[:en]
If deduction against the other template succeeds for both transformed templates,
constraints can be considered as follows:
[:zh_CN]
如果针对另一个模板的推断对两个经转换的模板均成功，则可以如下考察约束：

[list]
[item]
[:en]
If their [~template-parameter-list]s (possibly including [~template-parameter]s
invented for an abbreviated function template ([#dcl.fct])) or function
parameter lists differ in length, neither template is more specialized than the
other.
[:zh_CN]
如果它们的[~模板形参列表]（可能包含为简写函数模板（[#dcl.fct]）所引入的
[~模板形参]）或函数形参列表长度不同，则没有模板比另一个更特殊。

[item]
[:en]
Otherwise:
[:zh_CN]
否则：

[list]
[item]
[:en]
If exactly one of the templates was considered by overload resolution
via a rewritten candidate with reversed order of parameters:
[:zh_CN]
如果函数模板中恰有一个被重载决议通过具有反转形参顺序的重写候选所考察：

[list]
[item]
[:en]
If, for either template, some of the template parameters are not deducible from
their function parameters, neither template is more specialized than the other.
[:zh_CN]
如果对于任一模板，其某些模板形参不可从它们的函数形参进行推断，则没有模板比另一个
更特殊。

[item]
[:en]
If there is either no reordering or more than one reordering of the associated
[~template-parameter-list] such that
[:zh_CN]
如果对于其所关联的[~模板形参列表]要么没有重排序，要么有多于一种重排序，使得
[list]
[item]
[:en@~]
the corresponding [~template-parameter]s of the [~template-parameter-list]s are
equivalent and
[:zh_CN@~]
各[~模板形参列表]的对应[~模板形参]等价，并且
[item]
[:en@~]
the function parameters that positionally correspond between the two templates
are of the same type,
[:zh_CN@~]
两个模板中按位置对应的各函数形参具有相同类型，
[list:end]
[:en@~]
neither template is more specialized than the other.
[:zh_CN@~]
则没有模板比另一个更特殊。
[list:end]

[item]
[:en]
Otherwise, if the corresponding [~template-parameter]s of the
[~template-parameter-list]s are not equivalent ([#temp.over.link]) or if the
function parameters that positionally correspond between the two templates are
not of the same type, neither template is more specialized than the other.
[:zh_CN]
否则，如果各[~模板形参列表]的对应[~模板形参]不等价（[#temp.over.link]），或者
如果两个模板中按位置对应的函数形参具有不同类型，则没有模板比另一个更特殊。
[list:end]

[item]
[:en]
Otherwise, if the context in which the partial ordering is done is that of a
call to a conversion function and the return types of the templates are not the
same, then neither template is more specialized than the other.
[:zh_CN]
否则，如果完成偏序的语境是一次对转换函数的调用，且各模板的返回类型不同，则
没有模板比另一个更特殊。

[item]
[:en]
Otherwise, if one template is more constrained than the other
([#temp.constr.order]), the more constrained template is more specialized than
the other.
[:zh_CN]
否则，如果一个模板比另一个更受约束（[#temp.constr.order]），则更受约束的模板比
另一个更特殊。

[item]
[:en]
Otherwise, neither template is more specialized than the other.
[:zh_CN]
否则，没有模板比另一个更特殊。
[list:end]

[begin:example]
[codeblock]
template <typename> constexpr bool True = true;
template <typename T> concept C = True<T>;

void f(C auto &, auto &) = delete;
template <C Q> void f(Q &, C auto &);

void g(struct A *ap, struct B *bp) {
  f(*ap, *bp);                  // [:en] OK: Can use different methods to produce template parameters \
                                [:zh_CN] OK：可以用不同方法来产生模板形参
}

template <typename T, typename U> struct X {};

template <typename T, C U, typename V> bool operator==(X<T, U>, V) = delete;
template <C T, C U, C V>               bool operator==(T, X<U, V>);

void h() {
  X<void *, int>{} == 0;        // [:en] OK: Correspondence of `[[`T], [`U], [`V]`] and `[[`U], [`V], [`T]`] \
                                [:zh_CN] OK：`[[`T], [`U], [`V]`] 和 `[[`U], [`V], [`T]`] 之间相对应
}
[codeblock:end]
[end:example]
