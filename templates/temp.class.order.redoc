[section#temp.class.order
    [:en] Partial ordering of class template specializations
    [:zh_CN] 类模板特化式的偏序
]

[para]
[:en]
[%more specialized[!class template]]
For two class template partial specializations, the first is [+more specialized]
than the second if, given the following rewrite to two function templates, the
first function template is more specialized than the second according to the
ordering rules for function templates ([#temp.func.order]):
[:zh_CN]
[%更特殊[!类模板]]
两个模板部分特化式，若将它们重写为如下的两个函数模板时，根据函数模板排序规则
（[#temp.func.order]）第一个函数模板比第二个是更特殊，则第一个部分特化式比第二个
[+更特殊]：

[list]
[item]
[:en]
Each of the two function templates has the same template parameters and
associated constraints ([#temp.constr.decl]) as the corresponding partial
specialization.
[:zh_CN]
两个函数模板都分别与其所对应的部分特化式带有相同的模板形参和关联约束
（[#temp.constr.decl]）。

[item]
[:en]
Each function template has a single function parameter whose type is a class
template specialization where the template arguments are the corresponding
template parameters from the function template for each template argument in the
[~template-argument-list] of the [~simple-template-id] of the partial
specialization.
[:zh_CN]
两个函数模板各有一个函数形参，类型为一个类模板特例，其各模板实参为该函数模板的
各个模板形参，并对应于该部分特化式的[~简单模板标识]的[~模板实参列表]中的各个模板
实参。
[list:end]

[para]
[enter:example]
[codeblock]
template<int I, int J, class T> class X { };
template<int I, int J>          class X<I, J, int> { };         // #1
template<int I>                 class X<I, I, int> { };         // #2

template<int I0, int J0> void f(X<I0, J0, int>);                // A
template<int I0>         void f(X<I0, I0, int>);                // B

template <auto v>    class Y { };                               
template <auto* p>   class Y<p> { };                            // #3
template <auto** pp> class Y<pp> { };                           // #4

template <auto* p0>   void g(Y<p0>);                            // C
template <auto** pp0> void g(Y<pp0>);                           // D
[codeblock:end]

[:en]
According to the ordering rules for function templates, the function template
[$B] is more specialized than the function template [$A] and the function
template [$D] is more specialized than the function template [$C].
[:zh_CN]
根据函数模板排序规则，函数模板 [$B] 比函数模板 [$A] 更特殊，而函数模板 [$D] 比
函数模板 [$C] 更特殊。

[:en]
Therefore, the partial specialization #2 is more specialized than the partial
specialization #1 and the partial specialization #4 is more specialized than the
partial specialization #3.
[:zh_CN]
因此，部分特化式 #2 比部分特化式 #1 更特殊，而部分特化式 #4 比部分特化式 #3 更
特殊。
[exit:example]

[enter:example]
[codeblock]
template<typename T> concept C = requires (T t) { t.f(); };
template<typename T> concept D = C<T> && requires (T t) { t.f(); };

template<typename T> class S { };
template<C T> class S<T> { };   // #1
template<D T> class S<T> { };   // #2

template<C T> void f(S<T>);     // A
template<D T> void f(S<T>);     // B
[codeblock:end]

[:en]
The partial specialization #2 is more specialized than #1 because [`B] is more
specialized than [`A].
[:zh_CN]
部分特化式 #2 比 #1 更特殊，因为 [`B] 比 [`A] 更特殊。
[exit:example]
