[section#temp.res.general
    [:en] General
    [:zh_CN] 概述
]

[para]
[:en]
A name that appears in a declaration [$D] of a template [$T] is looked up from
where it appears in an unspecified declaration of [$T] that is or is reachable
from [$D] and from which no other declaration of [$T] that contains the usage of
the name is reachable.
[:zh_CN]
出现于模板 [$T] 的声明式 [$D] 中的名字，从它在 [$D] 或从 [$D] 可达的某个未指明的
[$T] 的声明式中出现之处查找，还要从其他包含该名字的使用的 [$T] 的声明式均不可达
的声明式中进行查找。

[:en]
If the name is dependent (as specified in [#temp.dep]), it is looked up for each
specialization (after substitution) because the lookup depends on a template
parameter.
[:zh_CN]
如果名字待决（如 [#temp.dep] 中所述），则为每个特化式（经过替换）对它进行查找，
因为其查找依赖于模板实参。

[begin:note]
[:en]
Some dependent names are also looked up during parsing to determine that they
are dependent or to interpret following [`<] tokens.
[:zh_CN]
某些待决名还会在解析时查找，以确定它们是否待决或者用于判读随后的 [`<] 记号。

[:en]
Uses of other names might be type-dependent or value-dependent ([#temp.dep.expr],
[#temp.dep.constexpr]).
[:zh_CN]
其他名字的使用可能是类型待决的或值待决的（[#temp.dep.expr]，[#temp.dep.constexpr]）。

[:en]
A [~using-declarator] is never dependent in a specialization and is therefore
replaced during lookup for that specialization ([#basic.lookup]).
[:zh_CN]
[~using-声明符]在特化式中从不是待决的，因而在对该特化式的查找中被替换
（[#basic.lookup]）。
[end:note]

[begin:example]
[codeblock]
struct A { operator int(); };
template<class B, class T>
struct D : B {
  T get() { return operator T(); }      // [:en] [~conversion-function-id] is dependent \
                                        [:zh_CN] [~转换函数标识]待决
};
int f(D<A, int> d) { return d.get(); }  // [:en] OK: lookup finds [`A::operator int] \
                                        [:zh_CN] OK：查找找到了 [`A::operator int]
[codeblock:end]
[end:example]

[begin:example]
[codeblock]
void f(char);

template<class T> void g(T t) {
  f(1);             // [`f(char)]
  f(T(1));          // [:en] dependent \
                    [:zh_CN] 待决
  f(t);             // [:en] dependent \
                    [:zh_CN] 待决
  dd++;             // [:en] not dependent; error: declaration for [`dd] not found \
                    [:zh_CN] 非待决；错误：未找到 [`dd] 的声明式
}

enum E { e };
void f(E);

double dd;
void h() {
  g(e);             // [:en] will cause one call of [`f(char)] followed by two calls of [`f(E)] \
                    [:zh_CN] 会造成一次对 [`f(char)] 的调用跟着两次对 [`f(E)] 的调用
  g('a');           // [:en] will cause three calls of [`f(char)] \
                    [:zh_CN] 会造成三次对 [`f(char)] 的调用
}
[codeblock:end]
[end:example]

[begin:example]
[codeblock]
struct A {
  struct B { /* ... */ };
  int a;
  int Y;
};

int a;

template<class T> struct Y : T {
  struct B { /* ... */ };
  B b;                          // [:en] The [`B] defined in [`Y] \
                                [:zh_CN] [`Y] 中定义的 [`B]
  void f(int i) { a = i; }      // [`::a]
  Y* p;                         // [`Y<T>]
};

Y<A> ya;
[codeblock:end]

[:en]
The members [`A::B], [`A::a], and [`A::Y] of the template argument [`A]
do not affect the binding of names in [`Y<A>].
[:zh_CN]
模板实参 [`A] 的成员 [`A::B]，[`A::a]，和 [`A::Y] 并不影响 [`Y<A>] 中的名字绑定。
[end:example]

[para]
[:en]
If the validity or meaning of the program would be changed by considering a
default argument or default template argument introduced in a declaration that
is reachable from the point of instantiation of a specialization ([#temp.point])
but is not found by lookup for the specialization, the program is ill-formed,
no diagnostic required.
[:zh_CN]
对于从特化式的实例化点（[#temp.point]）可达的声明式，且该声明式未被针对该特化式
的查找找到，如果程序的有效性和含义会因为考虑在声明式中引入的默认实参或默认模板
实参而发生改变，则程序非良构；无须诊断。


[syntax]
[rule typename-specifier [:zh_CN] typename-说明符 ]
    [| [`:key typename] nested-name-specifier identifier ]
    [| [`:key typename] nested-name-specifier [`:opt template] simple-template-id ]
[rule:end]
[syntax:end]

[para]
[:en]
[%component name]
The component names of a [~typename-specifier] are its [~identifier] (if any)
and those of its [~nested-name-specifier] and [~simple-template-id] (if any).
[:zh_CN]
[%成分名]
[~typename-声明符]的成分名，为它的[~标识符]（如果有），和它的[~嵌套名说明符]和
[~简单模板标识]的成分名（如果有）。

[para]
[:en]
A [~typename-specifier] denotes the type or class template denoted by the
[~simple-type-specifier] ([#dcl.type.simple]) formed by omitting the keyword
[`:key typename].
[:zh_CN]
[~typename-说明符]代表由忽略其 [`:key typename] 关键字所构成的[~简单模板标识]
（[#dcl.type.simple]）所代表的类型或类模板。

[begin:note]
[:en]
The usual qualified name lookup ([#basic.lookup.qual]) applies even in the
presence of [`:key typename].
[:zh_CN]
即使带有 [`:key typename]，也适用常规的限定名查找（[#basic.lookup.qual]）。
[end:note]

[begin:example]
[codeblock]
struct A {
  struct X { };
  int X;
};
struct B {
  struct X { };
};
template<class T> void f(T t) {
  typename T::X x;
}
void foo() {
  A a;
  B b;
  f(b);             // [:en] OK: [`T::X] refers to [`B::X] \
                       [:zh_CN] OK：[`T::X] 指代 [`B::X]
  f(a);             // [:en] error: [`T::X] refers to the data member [`A::X] not the struct [`A::X] \
                       [:zh_CN] 错误：[`T::X] 指代数据成员 [`A::X] 而不是结构体 [`A::X]
}
[codeblock:end]
[end:example]

[para]
[:en]
[%type-only[!context][%context[!type-only]]]
A qualified or unqualified name is said to be in a [+type-only context[%context
[!type-only]]] if it is the terminal name of
[:zh_CN]
[%仅限类型[!语境][%语境[!仅限类型]]]
如果某个限定或未限定的名字是以下各项的终端名，则称它处于[+仅限类型语境[%语境
[!仅限类型]]]中。

[list]
[item]
[:en] a [~typename-specifier], [~nested-name-specifier],
[~elaborated-type-specifier], [~class-or-decltype], or
[:zh_CN] [~typename-说明符]，[~嵌套名说明符]，[~详述类型说明符]，[~类或-decltype]，
或者

[item]
[:en] a [~type-specifier] of a
[:zh_CN] 以下各项的[~类型说明符]：
[list]
[item]
[:en@~] [~new-type-id],
[:zh_CN@~] [~new-类型标识]，
[item]
[:en@~] [~defining-type-id],
[:zh_CN@~] [~定义类型标识]，
[item]
[:en@~] [~conversion-type-id],
[:zh_CN@~] [~转换类型标识]，
[item]
[:en@~] [~trailing-return-type],
[:zh_CN@~] [~尾部返回类型]，
[item]
[:en@~] default argument of a [~type-parameter], or
[:zh_CN@~] [~类型形参]的默认实参，或
[item]
[:en@~] [~type-id] of a [`:key static_cast], [`:key const_cast],
[`:key reinterpret_cast], or [`:key dynamic_cast], or
[:zh_CN@~] [`:key static_cast]、[`:key const_cast]、[`:key reinterpret_cast] 或
[`:key dynamic_cast] 的[~类型标识]，或者
[list:end]

[item]
[:en] a [~decl-specifier] of the [~decl-specifier-seq] of a
[:zh_CN] 以下各项的[~声明说明符序列]中的[~声明说明符]:
[list]
[item]
[:en@~] [~simple-declaration] or a [~function-definition] in namespace scope,
[:zh_CN@~] 命名空间作用域中的[~简单声明式]或[~函数定义式]，
[item]
[:en@~] [~member-declaration],
[:zh_CN@~] [~成员声明式]，
[item]
[:en@~] [~parameter-declaration] in a [~member-declaration],[#:fn] unless that
[~parameter-declaration] appears in a default argument,
[:zh_CN@~] [~成员声明式][#:fn]中的[~形参声明式]，除非该[~形参声明式]出现于默认
实参之中，
[item]
[:en@~] [~parameter-declaration] in a [~declarator] of a function or function
template declaration whose [~declarator-id] is qualified, unless that
[~parameter-declaration] appears in a default argument,
[:zh_CN@~] [~声明符标识]有限定的函数或函数模板的[~声明符]中的[~形参声明式]，除非
该[~形参声明式]出现于默认实参之中，
[item]
[:en@~] [~parameter-declaration] in a [~lambda-declarator] or
[~requirement-parameter-list], unless that [~parameter-declaration] appears in
a default argument, or
[:zh_CN@~] [~lambda-声明符]或[~规定形参列表]中的[~形参声明式]，除非该
[~形参声明式]出现于默认实参之中，或者
[item]
[:en@~] [~parameter-declaration] of a (non-type) [~template-parameter].
[:zh_CN@~] （非类型）[~模板形参]的[~形参声明式]。
[list:end]
[list:end]

[note:foot]
[:en]
This includes friend function declarations.
[:zh_CN]
包括友元函数声明式。
[note:end]

[begin:example]
[codeblock]
template<class T> T::R f();             // [:en] OK, return type of a function declaration at global scope \
                                           [:zh_CN] OK，全局作用域中的函数声明式的返回类型
template<class T> void f(T::R);         // [:en] ill-formed, no diagnostic required: attempt to declare \
                                           [:zh_CN] 非良构，无须诊断：试图声明
                                        // [:en@~] a [`:key void] variable template \
                                           [:zh_CN@~] [`:key void] 变量模板
template<class T> struct S {
  using Ptr = PtrTraits<T>::Ptr;        // [:en] OK, in a [~defining-type-id] \
                                           [:zh_CN] OK，在[~定义类型标识]中
  T::R f(T::P p) {                      // [:en] OK, class scope \
                                           [:zh_CN] OK，类作用域
    return static_cast<T::R>(p);        // [:en] OK, [~type-id] of a [`:key static_cast] \
                                           [:zh_CN] OK，[`:key static_cast] 的[~类型标识]
  }
  auto g() -> S<T*>::Ptr;               // [:en] OK, [~trailing-return-type] \
                                           [:zh_CN] OK，[~尾部返回类型]
};
template<typename T> void f() {
  void (*pf)(T::X);                     // [:en] variable [`pf] of type [`[`:key void]*] initialized with [`T::X] \
                                           [:zh_CN] 以 [`T::x] 初始化 [`[`:key void]*] 类型的变量 [`pf]
  void g(T::X);                         // [:en] error: [`T::X] at block scope does not denote a type \
                                           [:zh_CN] 错误：[`T::X] 在块作用域中并不代表类型
                                        // [:en@~] (attempt to declare a [`:key void] variable) \
                                           [:zh_CN@~] （试图声明 [`:key void] 变量）
}
[codeblock:end]
[end:example]

[para]
[:en]
A [~qualified-id] whose terminal name is dependent and that is in a type-only
context is considered to denote a type.
[:zh_CN]
终端名待决且处于仅限类型语境中的[~限定标识]被认为代表类型。

[:en]
A name that refers to a [~using-declarator] whose terminal name is dependent is
interpreted as a [~typedef-name] if the [~using-declarator] uses the keyword
[`:key typename].
[:zh_CN]
如果某个终端名待决的 [~using-声明符]使用了关键字 [`:key typename]，则指代该
[~using-声明符]的名字被判读为一个 [~typedef-名]。

[begin:example]
[codeblock]
template <class T> void f(int i) {
  T::x * i;         // [:en] expression, not the declaration of a variable [`i] \
                       [:zh_CN] 表达式，而不是变量 [`i] 的声明式
}

struct Foo {
  typedef int x;
};

struct Bar {
  static int const x = 5;
};

int main() {
  f<Bar>(1);        // OK
  f<Foo>(1);        // [:en] error: [`Foo::x] is a type \
                       [:zh_CN] 错误：[`Foo:x] 是类型
}
[codeblock:end]
[end:example]

[para]
[:en]
[%checking[!syntax]]
[%checking[!point of error]]
The validity of a template may be checked prior to any instantiation.
[:zh_CN]
[%检查[!语法～]]
[%检查[!错误～点]]
模板的有效性可能在进行任何实例化之前进行检查。

[begin:note]
[:en]
Knowing which names are type names allows the syntax of every template to be
checked in this way.
[:zh_CN]
知道哪个名字是类型名，就允许对每个模板定义式的语法以这种方式进行检查。
[end:note]

[:en]
The program is ill-formed, no diagnostic required, if:
[:zh_CN]
以下情况下程序非良构，无须诊断：

[list]
[item]
[:en]
no valid specialization can be generated for a template or a substatement of a
constexpr if statement ([#stmt.if]) within a template and the template is not
instantiated, or
[:zh_CN]
无法对某个模板或某个 constexpr if 语句的子语句生成有效特例，而该模板未被实例化，
或者

[item]
[:en]
any [~constraint-expression] in the program, introduced or otherwise, has (in
its normal form) an atomic constraint [$A] where no satisfaction check for [$A]
could be well-formed and no satisfaction check of [$A] is performed, or
[:zh_CN]
程序中（引入或其它方式包含）的任何[~约束表达式]，（其正规形式中）包含原子约束
[$A]，但对 [$A] 没有良构的满足性检查并且为对 [$A] 进行满足性检查，或者

[item]
[:en]
every valid specialization of a variadic template requires an empty template
parameter pack, or
[:zh_CN]
变参模板的每个有效特例均需要一个空的模板形参包组，或者

[item]
[:en]
a hypothetical instantiation of a template immediately following its definition
would be ill-formed due to a construct that does not depend on a template
parameter, or
[:zh_CN]
一个假定的紧跟模板的定义式之后进行的实例化，将因为并不依存于模板形参的语言构造而
非良构，或者

[item]
[:en]
the interpretation of such a construct in the hypothetical instantiation is
different from the interpretation of the corresponding construct in any actual
instantiation of the template.
[:zh_CN]
对假定的实例化中的这个语言构造的解释，与该模板的任何真实实例化中的对应语言
构造的解释不同。

[begin:note]
[:en]
This can happen in situations including the following:
[:zh_CN]
这可能发生于以下情况：

[list]
[item]
[:en] a type used in a non-dependent name is incomplete at the point at which a
template is defined but is complete at the point at which an instantiation is
performed, or
[:zh_CN] 非待决名中所使用的类型在模板的定义点是不完整的，但在进行实例化之处是
完整的，或者

[item]
[:en] lookup for a name in the template definition found a [~using-declaration],
but the lookup in the corresponding scope in the instantiation does not find any
declarations because the [~using-declaration] was a pack expansion and the
corresponding pack is empty, or
[:zh_CN] 对模板定义式中的名字进行的查找找到了一个 [~using-声明式]，但在实例化中
的相应作用域中进行的查找，因为该 [~using-声明式]是一个包组展开式而其对应的包组
为空而导致无法找到任何声明式，或者

[item]
[:en] an instantiation uses a default argument or default template argument
that had not been defined at the point at which the template was defined, or
[:zh_CN] 某个实例所使用的默认实参或默认模板实参，在该模板进行定义时还未定义，
或者

[item]
[:en] constant expression evaluation ([#expr.const]) within the template
instantiation uses
[:zh_CN] 模板实例中的常量表达式求值（[#expr.const]），使用了

[list]
[item]
[:en@~] the value of a const object of integral or unscoped enumeration type or
[:zh_CN@~] 整型或无作用域枚举类型的 const 对象的值，或者
[item]
[:en@~] the value of a [`:key constexpr] object or
[:zh_CN@~] [`:key constexpr] 对象的值，或者
[item]
[:en@~] the value of a reference or
[:zh_CN@~] 引用的值，或者
[item]
[:en@~] the definition of a constexpr function,
[:zh_CN@~] constexpr 函数的定义式，
[list:end]

[:en@~]
and that entity was not defined when the template was defined, or
[:zh_CN@~]
而该实体在模板进行定义时还未定义，或者

[item]
[:en] a class template specialization or variable template specialization that
is specified by a non-dependent [~simple-template-id] is used by the template,
and either it is instantiated from a partial specialization that was not defined
when the template was defined or it names an explicit specialization that was
not declared when the template was defined.
[:zh_CN] 该模板中使用的非待决[~简单模板标识]指定了类模板特例或变量模板特例，而它
要么是以在该模板进行定义时还未定义的部分特化式实例化的，要么它指名了该模板进行
定义时还未声明的显式特化式。
[list:end]
[end:note]
[list:end]

[:en]
Otherwise, no diagnostic shall be issued for a template for which a valid
specialization can be generated.
[:zh_CN]
否则，不应该对能够产生有效特例的模板产生诊断消息。

[begin:note]
[:en]
If a template is instantiated, errors will be diagnosed according to the other
rules in this document.
[:zh_CN]
若某模板被实例化，则要根据本文档中的其他规则对错误进行诊断。

[:en]
Exactly when these errors are diagnosed is a quality of implementation issue.
[:zh_CN]
这些错误要在何时进行诊断是实现的质量问题。
[end:note]

[begin:example]
[codeblock]
int j;
template<class T> class X {
  void f(T t, int i, char* p) {
    t = i;          // [:en] diagnosed if [`X::f] is instantiated, and the assignment to [`t] is an error \
                       [:zh_CN] 若 [`X::f] 被实例化则需诊断，且对 [`t] 的赋值是错误的
    p = i;          // [:en] may be diagnosed even if [`X::f] is not instantiated \
                       [:zh_CN] 即使 [`X::f] 未被实例化也需要进行诊断
    p = j;          // [:en] may be diagnosed even if [`X::f] is not instantiated \
                       [:zh_CN] 即使 [`X::f] 未被实例化也需要进行诊断
    X<T>::g(t);     // OK
    X<T>::h();      // [:en] may be diagnosed even if [`X::f] is not instantiated \
                       [:zh_CN] 即使 [`X::f] 未被实例化也需要进行诊断
  }
  void g(T t) {
    +;              // [:en] may be diagnosed even if [`X::g] is not instantiated \
                       [:zh_CN] 即使 [`X::g] 未被实例化也需要进行诊断
  }
};

template<class... T> struct A {
  void operator++(int, T... t);                     // [:en] error: too many parameters \
                                                       [:zh_CN] 错误：过多的形参
};
template<class... T> union X : T... { };            // [:en] error: union with base class \
                                                       [:zh_CN] 错误：带有基类的联合体
template<class... T> struct A : T...,  T... { };    // [:en] error: duplicate base class \
                                                       [:zh_CN] 错误：重复的基类
[codeblock:end]
[end:example]

[para]
[begin:note]
[:en]
For purposes of name lookup, default arguments and [~noexcept-specifier]s of
function templates and default arguments and [~noexcept-specifier]s of member
functions of class templates are considered definitions ([#temp.decls]).
[:zh_CN]
为进行名字查找，函数模板的默认实参和 [~noexcept-说明符]，以及类模板的成员函数的
默认实参和 [~noexcept-说明符]被当作是定义式（[#temp.decls]）。
[end:note]
