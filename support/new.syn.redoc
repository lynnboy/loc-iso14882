[section#new.syn
    [:en] Header [`<new>] synopsis
    [:zh_CN] 头文件 [`<new>] 纲要
]

[codeblock:synopsis]
namespace std {
  // [:en] [#alloc.errors], storage allocation errors \
  [:zh_CN] [#alloc.errors]，存储分配错误
  class bad_alloc;
  class bad_array_new_length;

  struct destroying_delete_t {
    explicit destroying_delete_t() = default;
  };
  inline constexpr destroying_delete_t destroying_delete{};

  // [:en] global [`operator new] control \
  [:zh_CN] 全局 [`operator new] 的控制
[[redoc("
[%@lib destroying_delete_t]
[%@lib destroying_delete]
[%@lib align_val_t]
[%@lib nothrow_t]
[%@lib nothrow]
")]] \
  enum class align_val_t : size_t {};

  struct nothrow_t { explicit nothrow_t() = default; };
  extern const nothrow_t nothrow;

  using new_handler = void (*)();
  new_handler get_new_handler() noexcept;
  new_handler set_new_handler(new_handler new_p) noexcept;

  // [:en] [#ptr.launder], pointer optimization barrier \
  [:zh_CN] [#ptr.launder]，指针优化屏障
  template<class T> [[nodiscard]] constexpr T* launder(T* p) noexcept;

  // [:en] [#hardware.interference], hardware interference size \
  [:zh_CN] [#hardware.interference]，硬件干预的大小
  inline constexpr size_t hardware_destructive_interference_size = [[redoc("[=impdef]")]];
  inline constexpr size_t hardware_constructive_interference_size = [[redoc("[=impdef]")]];
}

// [:en] [#new.delete], storage allocation and deallocation \
[:zh_CN] [#new.delete]，存储的分配和回收
[[nodiscard]] void* operator new(std::size_t size);
[[nodiscard]] void* operator new(std::size_t size, std::align_val_t alignment);
[[nodiscard]] void* operator new(std::size_t size, const std::nothrow_t&) noexcept;
[[nodiscard]] void* operator new(std::size_t size, std::align_val_t alignment,
                                 const std::nothrow_t&) noexcept;

void  operator delete(void* ptr) noexcept;
void  operator delete(void* ptr, std::size_t size) noexcept;
void  operator delete(void* ptr, std::align_val_t alignment) noexcept;
void  operator delete(void* ptr, std::size_t size, std::align_val_t alignment) noexcept;
void  operator delete(void* ptr, const std::nothrow_t&) noexcept;
void  operator delete(void* ptr, std::align_val_t alignment, const std::nothrow_t&) noexcept;

[[nodiscard]] void* operator new[](std::size_t size);
[[nodiscard]] void* operator new[](std::size_t size, std::align_val_t alignment);
[[nodiscard]] void* operator new[](std::size_t size, const std::nothrow_t&) noexcept;
[[nodiscard]] void* operator new[](std::size_t size, std::align_val_t alignment,
                                   const std::nothrow_t&) noexcept;

void  operator delete[](void* ptr) noexcept;
void  operator delete[](void* ptr, std::size_t size) noexcept;
void  operator delete[](void* ptr, std::align_val_t alignment) noexcept;
void  operator delete[](void* ptr, std::size_t size, std::align_val_t alignment) noexcept;
void  operator delete[](void* ptr, const std::nothrow_t&) noexcept;
void  operator delete[](void* ptr, std::align_val_t alignment, const std::nothrow_t&) noexcept;

[[nodiscard]] void* operator new  (std::size_t size, void* ptr) noexcept;
[[nodiscard]] void* operator new[](std::size_t size, void* ptr) noexcept;
void  operator delete  (void* ptr, void*) noexcept;
void  operator delete[](void* ptr, void*) noexcept;
[codeblock:end]
