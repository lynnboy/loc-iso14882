[section#version.syn
    [:en] Header [`<version>] synopsis
    [:zh_CN] 头文件 [`<version>] 纲要
]

[para]
[:en] The header [?libheader@def version] supplies implementation-dependent
information about the [=Cpp] standard library (e.g., version number and release date).
[:zh_CN] 头文件 [?libheader@def version] 提供有关 [=Cpp] 标准程序库的特定于实现
的信息（例如版本号和发布日期）。

[para]
[:en] [%macro[!feature-test]]
Each of the macros defined in [?libheader version] is also defined after
inclusion of any member of the set of library headers indicated in the
corresponding comment in this synpsis.
[:zh_CN] [%宏[!功能特性检查～]]
包含头文件 [?libheader version] 中所定义的每个宏，当包含了这个纲要中相应代码注释
中的程序库头文件集合的任意成员之后，也会得到定义。

[begin:note]
[:en] Future revisions of this document might replace the values of these macros
with greater values.
[:zh_CN] 本文档的未来版本可能会将这些宏的值替换为更大的值。
[end:note]

[codeblock:synopsis]
#define __cpp_lib_adaptor_iterator_pair_constructor[[redoc("`@def@lib<")]] 202106L // [?also_in stack, queue]
#define __cpp_lib_addressof_constexpr[[redoc("`@def@lib<")]]               201603L // [=freestanding], [?also_in memory]
#define __cpp_lib_algorithm_default_value_type[[redoc("`@def@lib<")]]      202403L
  // [?also_in stack, algorithm, ranges, string, deque, list, forward_list, vector]
#define __cpp_lib_algorithm_iterator_requirements[[redoc("`@def@lib<")]]   202207L
  // [?also_in algorithm, numeric, memory]
#define __cpp_lib_aligned_accessor[[redoc("`@def@lib<")]]                  202411L // [?also_in mdspan]
#define __cpp_lib_allocate_at_least[[redoc("`@def@lib<")]]                 202302L // [?also_in memory]
#define __cpp_lib_allocator_traits_is_always_equal[[redoc("`@def@lib<")]]  201411L
  // [=freestanding] [?also_in memory, scoped_allocator, string, deque, forward_list, list]
  // [?also_in@~ vector, map, set, unordered_map unordered_set]
#define __cpp_lib_any[[redoc("`@def@lib<")]]                               201606L // [?also_in any]
#define __cpp_lib_apply[[redoc("`@def@lib<")]]                             201603L // [=freestanding], [?also_in tuple]
#define __cpp_lib_array_constexpr[[redoc("`@def@lib<")]]                   201811L // [?also_in iterator, array]
#define __cpp_lib_as_const[[redoc("`@def@lib<")]]                          201510L // [=freestanding], [?also_in utility]
#define __cpp_lib_associative_heterogeneous_erasure[[redoc("`@def@lib<")]] 202110L
  // [?also_in map, set, unordered_map, unordered_set]
#define cpp_lib_associative_heterogeneous_insertion[[redoc("`@def@lib<")]] 202306L
  // [?also_in map, set, unordered_map, unordered_set]
#define __cpp_lib_assume_aligned[[redoc("`@def@lib<")]]                    201811L // [=freestanding], [?also_in memory]
#define __cpp_lib_atomic_flag_test[[redoc("`@def@lib<")]]                  201907L // [=freestanding], [?also_in atomic]
#define __cpp_lib_atomic_float[[redoc("`@def@lib<")]]                      201711L // [=freestanding], [?also_in atomic]
#define __cpp_lib_atomic_is_always_lock_free[[redoc("`@def@lib<")]]        201603L // [=freestanding], [?also_in atomic]
#define __cpp_lib_atomic_lock_free_type_aliases[[redoc("`@def@lib<")]]     201907L // [?also_in atomic]
#define __cpp_lib_atomic_min_max[[redoc("`@def@lib<")]]                    202403L // [=freestanding], [?also_in atomic]
#define __cpp_lib_atomic_ref[[redoc("`@def@lib<")]]                        202411L // [=freestanding], [?also_in atomic]
#define __cpp_lib_atomic_shared_ptr[[redoc("`@def@lib<")]]                 201711L // [:en] a[?also_in memory]
#define __cpp_lib_atomic_value_initialization[[redoc("`@def@lib<")]]       201907L // [=freestanding], [?also_in atomic]
#define __cpp_lib_atomic_wait[[redoc("`@def@lib<")]]                       201907L // [=freestanding], [?also_in atomic]
#define __cpp_lib_barrier[[redoc("`@def@lib<")]]                           202302L // [?also_in barrier]
#define __cpp_lib_bind_back[[redoc("`@def@lib<")]]                         202306L // [=freestanding], [?also_in functional]
#define __cpp_lib_bind_front[[redoc("`@def@lib<")]]                        202306L // [=freestanding], [?also_in functional]
#define __cpp_lib_bit_cast[[redoc("`@def@lib<")]]                          201806L // [=freestanding], [?also_in bit]
#define __cpp_lib_bitops[[redoc("`@def@lib<")]]                            201907L // [=freestanding], [?also_in bit]
#define __cpp_lib_bitset[[redoc("`@def@lib<")]]                            202306L // [?also_in bit]
#define __cpp_lib_bool_constant[[redoc("`@def@lib<")]]                     201505L // [=freestanding], [?also_in type_traits]
#define __cpp_lib_bounded_array_traits[[redoc("`@def@lib<")]]              201902L // [=freestanding], [?also_in type_traits]
#define __cpp_lib_boyer_moore_searcher[[redoc("`@def@lib<")]]              201603L // [?also_in functional]
#define __cpp_lib_byte[[redoc("`@def@lib<")]]                              201603L // [=freestanding], [?also_in cstddef]
#define __cpp_lib_byteswap[[redoc("`@def@lib<")]]                          202110L // [=freestanding], [?also_in bit]
#define __cpp_lib_char8_t[[redoc("`@def@lib<")]]                           201907L
  // [=freestanding], [?also_in atomic, filesystem, istream, limits, locale, ostream, string]
  // [?also_in@~ string_view, string_view]
#define __cpp_lib_chrono[[redoc("`@def@lib<")]]                            202306L // [?also_in chrono]
#define __cpp_lib_chrono_udls[[redoc("`@def@lib<")]]                       201304L // [?also_in chrono]
#define __cpp_lib_clamp[[redoc("`@def@lib<")]]                             201603L // [?also_in algorithm]
#define __cpp_lib_common_reference[[redoc("`@def@lib<")]]                  202302L // [=freestanding], [?also_in type_traits]
#define __cpp_lib_common_reference_wrapper[[redoc("`@def@lib<")]]          202302L // [=freestanding], [?also_in functional]
#define __cpp_lib_complex_udls[[redoc("`@def@lib<")]]                      201309L // [?also_in complex]
#define __cpp_lib_concepts[[redoc("`@def@lib<")]]                          202207L
  // [=freestanding], [?also_in concepts, compare]
#define __cpp_lib_constexpr_algorithms[[redoc("`@def@lib<")]]              202306L // [?also_in algorithm, utility]
#define __cpp_lib_constexpr_atomic[[redoc("`@def@lib<")]]                  202411L // [?also_in atomic]
#define __cpp_lib_constexpr_bitset[[redoc("`@def@lib<")]]                  202207L // [?also_in bitset]
#define __cpp_lib_constexpr_charconv[[redoc("`@def@lib<")]]                202207L // [=freestanding], [?also_in charconv]
#define __cpp_lib_constexpr_cmath[[redoc("`@def@lib<")]]                   202306L // [?also_in cmath, cstdlib]
#define __cpp_lib_constexpr_complex[[redoc("`@def@lib<")]]                 202306L // [?also_in complex]
#define __cpp_lib_constexpr_deque[[redoc("`@def@lib<")]]                   202502L // [?also_in deque]
#define __cpp_lib_constexpr_dynamic_alloc[[redoc("`@def@lib<")]]           201907L // [?also_in memory]
#define __cpp_lib_constexpr_exceptions[[redoc("`@def@lib<")]]              202411L
  // [?also_in exception, stdexcept, expected, optional, variant, format] 
#define __cpp_lib_constexpr_flat_map[[redoc("`@def@lib<")]]                202502L // [?also_in flat_map]
#define __cpp_lib_constexpr_flat_set[[redoc("`@def@lib<")]]                202502L // [?also_in flat_set]
#define __cpp_lib_constexpr_forward_list[[redoc("`@def@lib<")]]            202502L // [?also_in forward_list]
#define __cpp_lib_constexpr_functional[[redoc("`@def@lib<")]]              201907L // [=freestanding], [?also_in functional]
#define __cpp_lib_constexpr_inplace_vector[[redoc("`@def@lib<")]]          202502L // [?also_in inplace_vector]
#define __cpp_lib_constexpr_iterator[[redoc("`@def@lib<")]]                201811L // [=freestanding], [?also_in iterator]
#define __cpp_lib_constexpr_list[[redoc("`@def@lib<")]]                    202502L // [?also_in list]
#define __cpp_lib_constexpr_map[[redoc("`@def@lib<")]]                     202502L // [?also_in map]
#define __cpp_lib_constexpr_memory[[redoc("`@def@lib<")]]                  202202L // [=freestanding], [?also_in memory]
#define __cpp_lib_constexpr_new[[redoc("`@def@lib<")]]                     202406L // [=freestanding], [?also_in new]
#define __cpp_lib_constexpr_numeric[[redoc("`@def@lib<")]]                 201911L // [?also_in numeric]
#define __cpp_lib_constexpr_queue[[redoc("`@def@lib<")]]                   202502L // [?also_in queue]
#define __cpp_lib_constexpr_set[[redoc("`@def@lib<")]]                     202502L // [?also_in set]
#define __cpp_lib_constexpr_stack[[redoc("`@def@lib<")]]                   202502L // [?also_in stack]
#define __cpp_lib_constexpr_string[[redoc("`@def@lib<")]]                  201907L // [?also_in string]
#define __cpp_lib_constexpr_string_view[[redoc("`@def@lib<")]]             201811L // [?also_in string_view]
#define __cpp_lib_constexpr_tuple[[redoc("`@def@lib<")]]                   201811L // [=freestanding], [?also_in tuple]
#define __cpp_lib_constexpr_typeinfo[[redoc("`@def@lib<")]]                202106L // [=freestanding], [?also_in typeinfo]
#define __cpp_lib_constexpr_unordered_map[[redoc("`@def@lib<")]]           202502L // [?also_in unordered_map]
#define __cpp_lib_constexpr_unordered_set[[redoc("`@def@lib<")]]           202502L // [?also_in unordered_set]
#define __cpp_lib_constexpr_utility[[redoc("`@def@lib<")]]                 201811L // [=freestanding], [?also_in utility]
#define __cpp_lib_constexpr_vector[[redoc("`@def@lib<")]]                  201907L // [?also_in vector]
#define __cpp_lib_constrained_equality[[redoc("`@def@lib<")]]              202411L // [=freestanding],
  // [?also_in utility, tuple, optional, variant, expected]
#define __cpp_lib_containers_ranges[[redoc("`@def@lib<")]]                 202202L
  // [?also_in vector, list, forward_list, map, set, unordered_map, unordered_set]
  // [?also_in@~ deque, queue, stack, string
#define __cpp_lib_contracts[[redoc("`@def@lib<")]]                         202502L // [=freestanding], [?also_in contracts]
#define __cpp_lib_copyable_function[[redoc("`@def@lib<")]]                 202306L // [?also_in functional]
#define __cpp_lib_coroutine[[redoc("`@def@lib<")]]                         201902L // [=freestanding], [?also_in coroutine]
#define __cpp_lib_debugging[[redoc("`@def@lib<")]]                         202403L // [=freestanding], [?also_in debugging]
#define __cpp_lib_destroying_delete[[redoc("`@def@lib<")]]                 201806L // [=freestanding], [?also_in new]
#define __cpp_lib_enable_shared_from_this[[redoc("`@def@lib<")]]           201603L // [?also_in memory]
#define __cpp_lib_endian[[redoc("`@def@lib<")]]                            201907L // [=freestanding], [?also_in bit]
#define __cpp_lib_erase_if[[redoc("`@def@lib<")]]                          202002L
  // [?also_in string, deque, forward_list, list, vector, map, set, unordered_map]
  // [?also_in@~ unordered_set]
#define __cpp_lib_exchange_function[[redoc("`@def@lib<")]]                 201304L // [=freestanding], [?also_in utility]
#define __cpp_lib_execution[[redoc("`@def@lib<")]]                         201902L // [?also_in execution]
#define __cpp_lib_expected[[redoc("`@def@lib<")]]                          202211L // [?also_in expected]
#define __cpp_lib_filesystem[[redoc("`@def@lib<")]]                        201703L // [?also_in filesystem]
#define __cpp_lib_flat_map[[redoc("`@def@lib<")]]                          202207L // [?also_in flat_map]
#define __cpp_lib_flat_set[[redoc("`@def@lib<")]]                          202207L // [?also_in flat_set]
#define __cpp_lib_format[[redoc("`@def@lib<")]]                            202311L // [?also_in format]
#define __cpp_lib_format_ranges[[redoc("`@def@lib<")]]                     202207L // [?also_in format]
#define __cpp_lib_format_path[[redoc("`@def@lib<")]]                       202403L // [?also_in filesystem]
#define __cpp_lib_format_uchar[[redoc("`@def@lib<")]]                      202311L // [?also_in format]
#define __cpp_lib_formatters[[redoc("`@def@lib<")]]                        202302L // [?also_in stacktrace, thread]
#define __cpp_lib_forward_like[[redoc("`@def@lib<")]]                      202207L // [=freestanding], [?also_in utility]
#define __cpp_lib_freestanding_algorithm[[redoc("`@def@lib<")]]            202502L // [=freestanding], [?also_in algorithm]
#define __cpp_lib_freestanding_array[[redoc("`@def@lib<")]]                202311L // [=freestanding], [?also_in array]
#define __cpp_lib_freestanding_char_traits[[redoc("`@def@lib<")]]          202306L // [=freestanding], [?also_in string]
#define __cpp_lib_freestanding_charconv[[redoc("`@def@lib<")]]             202306L // [=freestanding], [?also_in charconv]
#define __cpp_lib_freestanding_cstdlib[[redoc("`@def@lib<")]]              202306L // [=freestanding], [?also_in cstdlib, cmath]
#define __cpp_lib_freestanding_cstring[[redoc("`@def@lib<")]]              202311L // [=freestanding], [?also_in cstring]
#define __cpp_lib_freestanding_cwchar[[redoc("`@def@lib<")]]               202306L // [=freestanding], [?also_in cwchar]
#define __cpp_lib_freestanding_errc[[redoc("`@def@lib<")]]                 202306L
  // [=freestanding], [?also_in string, system_error]
#define __cpp_lib_freestanding_execution[[redoc("`@def@lib<")]]            202502L // [=freestanding], [?also_in execution]
#define __cpp_lib_freestanding_expected[[redoc("`@def@lib<")]]             202311L // [=freestanding], [?also_in expected]
#define __cpp_lib_freestanding_feature_test_macros[[redoc("`@def@lib<")]]  202306L // [=freestanding]
#define __cpp_lib_freestanding_functional[[redoc("`@def@lib<")]]           202306L // [=freestanding], [?also_in functional]
#define __cpp_lib_freestanding_iterator[[redoc("`@def@lib<")]]             202306L // [=freestanding], [?also_in iterator]
#define __cpp_lib_freestanding_mdspan[[redoc("`@def@lib<")]]               202311L // [=freestanding], [?also_in mdspan]
#define __cpp_lib_freestanding_memory[[redoc("`@def@lib<")]]               202502L // [=freestanding], [?also_in memory]
#define __cpp_lib_freestanding_numeric[[redoc("`@def@lib<")]]              202502L // [=freestanding], [?also_in numeric]
#define __cpp_lib_freestanding_operator_new[[redoc("`@def@lib<")]]         [[redoc("[=seebelow]")]] // [=freestanding], [?also_in new]
#define __cpp_lib_freestanding_optional[[redoc("`@def@lib<")]]             202311L // [=freestanding], [?also_in optional]
#define __cpp_lib_freestanding_random[[redoc("`@def@lib<")]]              202502L // [=freestanding], [?also_in random]
#define __cpp_lib_freestanding_ranges[[redoc("`@def@lib<")]]               202306L // [=freestanding], [?also_in ranges]
#define __cpp_lib_freestanding_ratio[[redoc("`@def@lib<")]]                202306L // [=freestanding], [?also_in ratio]
#define __cpp_lib_freestanding_string_view[[redoc("`@def@lib<")]]          202311L // [=freestanding], [?also_in string_view]
#define __cpp_lib_freestanding_tuple[[redoc("`@def@lib<")]]                202306L // [=freestanding], [?also_in tuple]
#define __cpp_lib_freestanding_utility[[redoc("`@def@lib<")]]              202306L // [=freestanding], [?also_in utility]
#define __cpp_lib_freestanding_variant[[redoc("`@def@lib<")]]              202311L // [=freestanding], [?also_in variant]
#define __cpp_lib_fstream_native_handle[[redoc("`@def@lib<")]]             202306L // [?also_in fstream]
#define __cpp_lib_function_ref[[redoc("`@def@lib<")]]                      202306L // [?also_in functional]
#define __cpp_lib_gcd_lcm[[redoc("`@def@lib<")]]                           201606L // [?also_in numeric]
#define __cpp_lib_generator[[redoc("`@def@lib<")]]                         202207L // [?also_in generator]
#define __cpp_lib_generic_associative_lookup[[redoc("`@def@lib<")]]        201304L // [?also_in map, set]
#define __cpp_lib_generic_unordered_lookup[[redoc("`@def@lib<")]]          201811L
  // [?also_in unordered_map, unordered_set]
#define __cpp_lib_hardware_interference_size[[redoc("`@def@lib<")]]        201703L // [=freestanding], [?also_in new]
#define __cpp_lib_has_unique_object_representations[[redoc("`@def@lib<")]] 201606L // [=freestanding], [?also_in type_traits]
#define __cpp_lib_hazard_pointer[[redoc("`@def@lib<")]]                    202306L // [?also_in hazard_pointer]
#define __cpp_lib_hive[[redoc("`@def@lib<")]]                              202502L // [?also_in hive]
#define __cpp_lib_hypot[[redoc("`@def@lib<")]]                             201603L // [?also_in cmath]
#define __cpp_lib_incomplete_container_elements[[redoc("`@def@lib<")]]     201505L
  // [?also_in forward_list, list, vector]
#define __cpp_lib_indirect[[redoc("`@def@lib<")]]                          202502L // [?also_in memory]
#define __cpp_lib_inplace_vector[[redoc("`@def@lib<")]]                    202406L // [?also_in inplace_vector]
#define __cpp_lib_int_pow2[[redoc("`@def@lib<")]]                          202002L // [=freestanding], [?also_in bit]
#define __cpp_lib_integer_comparison_functions[[redoc("`@def@lib<")]]      202002L // [?also_in utility]
#define __cpp_lib_integer_sequence[[redoc("`@def@lib<")]]                  201304L // [=freestanding], [?also_in utility]
#define __cpp_lib_integral_constant_callable[[redoc("`@def@lib<")]]        201304L // [=freestanding], [?also_in type_traits]
#define __cpp_lib_interpolate[[redoc("`@def@lib<")]]                       201902L // [?also_in cmath, numeric]
#define __cpp_lib_invoke[[redoc("`@def@lib<")]]                            201411L // [=freestanding], [?also_in functional]
#define __cpp_lib_invoke_r[[redoc("`@def@lib<")]]                          202106L // [=freestanding], [?also_in functional]
#define __cpp_lib_ios_noreplace[[redoc("`@def@lib<")]]                     202207L // [?also_in ios]
#define __cpp_lib_is_aggregate[[redoc("`@def@lib<")]]                      201703L // [=freestanding], [?also_in type_traits]
#define __cpp_lib_is_constant_evaluated[[redoc("`@def@lib<")]]             201811L // [=freestanding], [?also_in type_traits]
#define __cpp_lib_is_final[[redoc("`@def@lib<")]]                          201402L // [=freestanding], [?also_in type_traits]
#define __cpp_lib_is_implicit_lifetime[[redoc("`@def@lib<")]]              202302L // [=freestanding], [?also_in type_traits]
#define __cpp_lib_is_invocable[[redoc("`@def@lib<")]]                      201703L // [=freestanding], [?also_in type_traits]
#define __cpp_lib_is_layout_compatible[[redoc("`@def@lib<")]]              201907L // [=freestanding], [?also_in type_traits]
#define __cpp_lib_is_nothrow_convertible[[redoc("`@def@lib<")]]            201806L // [=freestanding], [?also_in type_traits]
#define __cpp_lib_is_null_pointer[[redoc("`@def@lib<")]]                   201309L // [=freestanding], [?also_in type_traits]
#define __cpp_lib_is_pointer_interconvertible[[redoc("`@def@lib<")]]       201907L // [=freestanding], [?also_in type_traits]
#define __cpp_lib_is_scoped_enum[[redoc("`@def@lib<")]]                    202011L // [=freestanding], [?also_in type_traits]
#define __cpp_lib_is_sufficiently_aligned[[redoc("`@def@lib<")]]           202411L // [?also_in memory]
#define __cpp_lib_is_swappable[[redoc("`@def@lib<")]]                      201603L // [=freestanding], [?also_in type_traits]
#define __cpp_lib_is_virtual_base_of[[redoc("`@def@lib<")]]                202406L // [=freestanding], [?also_in type_traits]
#define __cpp_lib_is_within_lifetime[[redoc("`@def@lib<")]]                202306L // [=freestanding], [?also_in type_traits]
#define __cpp_lib_jthread[[redoc("`@def@lib<")]]                           201911L // [?also_in stop_token, thread]
#define __cpp_lib_latch[[redoc("`@def@lib<")]]                             201907L // [?also_in latch]
#define __cpp_lib_launder[[redoc("`@def@lib<")]]                           201606L // [=freestanding], [?also_in new]
#define __cpp_lib_linalg[[redoc("`@def@lib<")]]                            202412L // [?also_in linalg]
#define __cpp_lib_list_remove_return_type[[redoc("`@def@lib<")]]           201806L // [?also_in forward_list, list]
#define __cpp_lib_logical_traits[[redoc("`@def@lib<")]]                    201510L // [=freestanding], [?also_in type_traits]
#define __cpp_lib_make_from_tuple[[redoc("`@def@lib<")]]                   201606L // [=freestanding], [?also_in tuple]
#define __cpp_lib_make_reverse_iterator[[redoc("`@def@lib<")]]             201402L // [=freestanding], [?also_in iterator]
#define __cpp_lib_make_unique[[redoc("`@def@lib<")]]                       201304L // [?also_in memory]
#define __cpp_lib_map_try_emplace[[redoc("`@def@lib<")]]                   201411L // [?also_in map]
#define __cpp_lib_math_constants[[redoc("`@def@lib<")]]                    201907L // [?also_in numbers]
#define __cpp_lib_math_special_functions[[redoc("`@def@lib<")]]            201603L // [?also_in cmath]
#define __cpp_lib_mdspan[[redoc("`@def@lib<")]]                            202406L // [=freestanding], [?also_in mdspan]
#define __cpp_lib_memory_resource[[redoc("`@def@lib<")]]                   201603L // [?also_in memory_resource]
#define __cpp_lib_modules[[redoc("`@def@lib<")]]                           202207L // [=freestanding]
#define __cpp_lib_move_iterator_concept[[redoc("`@def@lib<")]]             202207L // [=freestanding], [?also_in iterator]
#define __cpp_lib_move_only_function[[redoc("`@def@lib<")]]                202110L // [?also_in functional]
#define __cpp_lib_node_extract[[redoc("`@def@lib<")]]                      201606L
  // [?also_in map, set, unordered_map, unordered_set]
#define __cpp_lib_nonmember_container_access[[redoc("`@def@lib<")]]        201411L
  // [=freestanding], [?also_in array, deque, forward_list, iterator, list, map, regex, set]
  // [?also_in@~ string, unordered_map, unordered_set, vector]
#define __cpp_lib_not_fn[[redoc("`@def@lib<")]]                            202306L // [=freestanding], [?also_in functional]
#define __cpp_lib_null_iterators[[redoc("`@def@lib<")]]                    201304L // [=freestanding], [?also_in iterator]
#define __cpp_lib_optional[[redoc("`@def@lib<")]]                          202110L // [?also_in optional]
#define __cpp_lib_optional_range_support[[redoc("`@def@lib<")]]            202406L // [=freestanding], [?also_in optional]
#define __cpp_lib_out_ptr[[redoc("`@def@lib<")]]                           202311L // [=freestanding], [?also_in memory]
#define __cpp_lib_parallel_algorithm[[redoc("`@def@lib<")]]                201603L // [?also_in algorithm, numeric]
#define __cpp_lib_philox_engine[[redoc("`@def@lib<")]]                     202406L // [?also_in random]
#define __cpp_lib_polymorphic[[redoc("`@def@lib<")]]                       202502L // [?also_in memory]
#define __cpp_lib_polymorphic_allocator[[redoc("`@def@lib<")]]             201902L // [?also_in memory_resource]
#define __cpp_lib_print[[redoc("`@def@lib<")]]                             202406L // [?also_in print, ostream]
#define __cpp_lib_quoted_string_io[[redoc("`@def@lib<")]]                  201304L // [?also_in iomanip]
#define __cpp_lib_ranges[[redoc("`@def@lib<")]]                            202406L
  // [?also_in algorithm, functional, iterator, memory, ranges]
#define __cpp_lib_ranges_as_const[[redoc("`@def@lib<")]]                   202311L // [=freestanding], [?also_in ranges]
#define __cpp_lib_ranges_as_rvalue[[redoc("`@def@lib<")]]                  202207L // [=freestanding], [?also_in ranges]
#define __cpp_lib_ranges_cache_latest[[redoc("`@def@lib<")]]               202411L // [=freestanding], [?also_in ranges]
#define __cpp_lib_ranges_cartesian_product[[redoc("`@def@lib<")]]          202207L // [=freestanding], [?also_in ranges]
#define __cpp_lib_ranges_chunk[[redoc("`@def@lib<")]]                      202202L // [=freestanding], [?also_in ranges]
#define __cpp_lib_ranges_chunk_by[[redoc("`@def@lib<")]]                   202202L // [=freestanding], [?also_in ranges]
#define __cpp_lib_ranges_concat[[redoc("`@def@lib<")]]                     202403L // [=freestanding], [?also_in ranges]
#define __cpp_lib_ranges_contains[[redoc("`@def@lib<")]]                   202207L // [?also_in algorithm]
#define __cpp_lib_ranges_enumerate[[redoc("`@def@lib<")]]                  202302L // [?also_in ranges]
#define __cpp_lib_ranges_find_last[[redoc("`@def@lib<")]]                  202207L // [?also_in algorithm]
#define __cpp_lib_ranges_fold[[redoc("`@def@lib<")]]                       202207L // [?also_in algorithm]
#define __cpp_lib_ranges_generate_random[[redoc("`@def@lib<")]]            202403L // [?also_in random]
#define __cpp_lib_ranges_iota[[redoc("`@def@lib<")]]                       202202L // [?also_in numeric]
#define __cpp_lib_ranges_join_with[[redoc("`@def@lib<")]]                  202202L // [=freestanding], [?also_in ranges]
#define __cpp_lib_ranges_repeat[[redoc("`@def@lib<")]]                     202207L // [=freestanding], [?also_in ranges]
#define __cpp_lib_ranges_reserve_hint[[redoc("`@def@lib<")]]               202502L // [?also_in ranges]
#define __cpp_lib_ranges_slide[[redoc("`@def@lib<")]]                      202202L // [=freestanding], [?also_in ranges]
#define __cpp_lib_ranges_starts_ends_with[[redoc("`@def@lib<")]]           202106L // [?also_in algorithm]
#define __cpp_lib_ranges_stride[[redoc("`@def@lib<")]]                     202207L // [=freestanding], [?also_in ranges]
#define __cpp_lib_ranges_to_container[[redoc("`@def@lib<")]]               202202L // [=freestanding], [?also_in ranges]
#define __cpp_lib_ranges_to_input[[redoc("`@def@lib<")]]                   202502L // [=freestanding], [?also_in ranges]
#define __cpp_lib_ranges_zip[[redoc("`@def@lib<")]]                        202110L
  // [=freestanding], [?also_in ranges, tuple, utility]
#define __cpp_lib_ratio[[redoc("`@def@lib<")]]                             202306L // [=freestanding], [?also_in ratio]
#define __cpp_lib_raw_memory_algorithms[[redoc("`@def@lib<")]]             202411L // [?also_in memory]
#define __cpp_lib_rcu[[redoc("`@def@lib<")]]                               202306L // [?also_in rcu]
#define __cpp_lib_reference_from_temporary[[redoc("`@def@lib<")]]          202202L // [=freestanding], [?also_in type_traits]
#define __cpp_lib_reference_wrapper[[redoc("`@def@lib<")]]                 202403L // [=freestanding], [?also_in functional]
#define __cpp_lib_remove_cvref[[redoc("`@def@lib<")]]                      201711L // [=freestanding], [?also_in type_traits]
#define __cpp_lib_result_of_sfinae[[redoc("`@def@lib<")]]                  201210L
  // [=freestanding], [?also_in functional, type_traits]
#define __cpp_lib_robust_nonmodifying_seq_ops[[redoc("`@def@lib<")]]       201304L // [?also_in algorithm]
#define __cpp_lib_sample[[redoc("`@def@lib<")]]                            201603L // [?also_in algorithm]
#define __cpp_lib_saturation_arithmetic[[redoc("`@def@lib<")]]             202311L // [?also_in numeric]
#define __cpp_lib_scoped_lock[[redoc("`@def@lib<")]]                       201703L // [?also_in mutex]
#define __cpp_lib_semaphore[[redoc("`@def@lib<")]]                         201907L // [?also_in semaphore]
#define __cpp_lib_senders[[redoc("`@def@lib<")]]                           202406L // [?also_in execution]
#define __cpp_lib_shared_mutex[[redoc("`@def@lib<")]]                      201505L // [?also_in shared_mutex]
#define __cpp_lib_shared_ptr_arrays[[redoc("`@def@lib<")]]                 201707L // [?also_in memory]
#define __cpp_lib_shared_ptr_weak_type[[redoc("`@def@lib<")]]              201606L // [?also_in memory]
#define __cpp_lib_shared_timed_mutex[[redoc("`@def@lib<")]]                201402L // [?also_in shared_mutex]
#define __cpp_lib_shift[[redoc("`@def@lib<")]]                             202202L // [?also_in algorithm]
#define __cpp_lib_simd[[redoc("`@def@lib<")]]                              202502L // [?also_in simd]
#define __cpp_lib_simd_complex[[redoc("`@def@lib<")]]                      202502L // [?also_in simd]
#define __cpp_lib_smart_ptr_for_overwrite[[redoc("`@def@lib<")]]           202002L // [?also_in memory]
#define __cpp_lib_smart_ptr_owner_equality[[redoc("`@def@lib<")]]          202306L // [?also_in memory]
#define __cpp_lib_source_location[[redoc("`@def@lib<")]]                   201907L // [=freestanding], [?also_in source_location]
#define __cpp_lib_span[[redoc("`@def@lib<")]]                              202311L // [=freestanding], [?also_in span]
#define __cpp_lib_span_initializer_list[[redoc("`@def@lib<")]]             202311L // [=freestanding], [?also_in span]
#define __cpp_lib_spanstream[[redoc("`@def@lib<")]]                        202106L // [?also_in spanstream]
#define __cpp_lib_ssize[[redoc("`@def@lib<")]]                             201902L // [=freestanding], [?also_in iterator]
#define __cpp_lib_sstream_from_string_view[[redoc("`@def@lib<")]]          202306L // [?also_in sstream]
#define __cpp_lib_stacktrace[[redoc("`@def@lib<")]]                        202011L // [?also_in stacktrace]
#define __cpp_lib_start_lifetime_as[[redoc("`@def@lib<")]]                 202207L // [=freestanding], [?also_in memory]
#define __cpp_lib_starts_ends_with[[redoc("`@def@lib<")]]                  201711L // [?also_in string, string_view]
#define __cpp_lib_stdatomic_h[[redoc("`@def@lib<")]]                       202011L // [?also_in stdatomic.h]
#define __cpp_lib_string_contains[[redoc("`@def@lib<")]]                   202011L // [?also_in string, string_view]
#define __cpp_lib_string_resize_and_overwrite[[redoc("`@def@lib<")]]       202110L // [?also_in string]
#define __cpp_lib_string_udls[[redoc("`@def@lib<")]]                       201304L // [?also_in string]
#define __cpp_lib_string_view[[redoc("`@def@lib<")]]                       202403L // [?also_in string, string_view]
#define __cpp_lib_submdspan[[redoc("`@def@lib<")]]                         202411L // [=freestanding], [?also_in mdspan]
#define __cpp_lib_syncbuf[[redoc("`@def@lib<")]]                           201803L // [?also_in syncstream]
#define __cpp_lib_text_encoding[[redoc("`@def@lib<")]]                     202306L // [?also_in text_encoding]
#define __cpp_lib_three_way_comparison[[redoc("`@def@lib<")]]              201907L // [=freestanding], [?also_in compare]
#define __cpp_lib_to_address[[redoc("`@def@lib<")]]                        201711L // [=freestanding], [?also_in memory]
#define __cpp_lib_to_array[[redoc("`@def@lib<")]]                          201907L // [=freestanding], [?also_in array]
#define __cpp_lib_to_chars[[redoc("`@def@lib<")]]                          202306L // [?also_in charconv]
#define __cpp_lib_to_string[[redoc("`@def@lib<")]]                         202306L // [?also_in string]
#define __cpp_lib_to_underlying[[redoc("`@def@lib<")]]                     202102L // [=freestanding], [?also_in utility]
#define __cpp_lib_transformation_trait_aliases[[redoc("`@def@lib<")]]      201304L // [=freestanding], [?also_in type_traits]
#define __cpp_lib_transparent_operators[[redoc("`@def@lib<")]]             201510L
  // [=freestanding], [?also_in memory, functional]
#define __cpp_lib_trivially_relocatable[[redoc("`@def@lib<")]]             202502L
  // [=freestanding], [?also_in memory, type_traits]
#define __cpp_lib_tuple_element_t[[redoc("`@def@lib<")]]                   201402L // [=freestanding], [?also_in tuple]
#define __cpp_lib_tuple_like[[redoc("`@def@lib<")]]                        202311L
  // [?also_in utility, tuple, map, unordered_map]
#define __cpp_lib_tuples_by_type[[redoc("`@def@lib<")]]                    201304L // [=freestanding], [?also_in utility, tuple]
#define __cpp_lib_type_identity[[redoc("`@def@lib<")]]                     201806L // [=freestanding], [?also_in type_traits]
#define __cpp_lib_type_trait_variable_templates[[redoc("`@def@lib<")]]     201510L // [=freestanding], [?also_in type_traits]
#define __cpp_lib_uncaught_exceptions[[redoc("`@def@lib<")]]               201411L // [=freestanding], [?also_in exception]
#define __cpp_lib_unordered_map_try_emplace[[redoc("`@def@lib<")]]         201411L // [?also_in unordered_map]
#define __cpp_lib_unreachable[[redoc("`@def@lib<")]]                       202202L // [=freestanding], [?also_in utility]
#define __cpp_lib_unwrap_ref[[redoc("`@def@lib<")]]                        201811L // [=freestanding], [?also_in type_traits]
#define __cpp_lib_variant[[redoc("`@def@lib<")]]                           202306L // [?also_in variant]
#define __cpp_lib_void_t[[redoc("`@def@lib<")]]                            201411L // [=freestanding], [?also_in type_traits]
[codeblock:end]

[para]
[:en] Additionally, each of the following macros is defined in a hardened implementation:
[:zh_CN] 此外，加固实现中还定义下列各个宏。

[codeblock:synopsis]
#define __cpp_lib_hardened_array[[redoc("`@def@lib<")]]                    202502L // [?also_in array]
#define __cpp_lib_hardened_basic_string[[redoc("`@def@lib<")]]             202502L // [?also_in string]
#define __cpp_lib_hardened_basic_string_view[[redoc("`@def@lib<")]]        202502L // [?also_in string_view]
#define __cpp_lib_hardened_bitset[[redoc("`@def@lib<")]]                   202502L // [?also_in bitset]
#define __cpp_lib_hardened_deque[[redoc("`@def@lib<")]]                    202502L // [?also_in deque]
#define __cpp_lib_hardened_expected[[redoc("`@def@lib<")]]                 202502L // [?also_in expected]
#define __cpp_lib_hardened_forward_list[[redoc("`@def@lib<")]]             202502L // [?also_in forward_list]
#define __cpp_lib_hardened_inplace_vector[[redoc("`@def@lib<")]]           202502L // [?also_in inplace_vector]
#define __cpp_lib_hardened_list[[redoc("`@def@lib<")]]                     202502L // [?also_in list]
#define __cpp_lib_hardened_mdspan[[redoc("`@def@lib<")]]                   202502L // [?also_in mdspan]
#define __cpp_lib_hardened_optional[[redoc("`@def@lib<")]]                 202502L // [?also_in optional]
#define __cpp_lib_hardened_span[[redoc("`@def@lib<")]]                     202502L // [?also_in span]
#define __cpp_lib_hardened_valarray[[redoc("`@def@lib<")]]                 202502L // [?also_in valarray]
#define __cpp_lib_hardened_vector[[redoc("`@def@lib<")]]                   202502L // [?also_in vector]
[codeblock:end]

[para]
[:en] The macro [`__cpp_lib_freestanding_operator_new] is defined to the integer
literal [`202306L] if all the default versions of the replaceable global
allocation functions meet the requirements of a hosted implementation, and
to the integer literal [`0] otherwise ([#new.delete]).
[:zh_CN] 如果所有可替换全局分配函数的默认版本都满足宿主式实现的规定，则宏
[`__cpp_lib_freestanding_operator_new] 被定义为整数字面量 [`202306L]，否则则被
定义为整数字面量 [`0]（[#new.delete]）。

[para:recommended]
[:en] Freestanding implementations should only define a macro from [?libheader version]
if the implementation provides the corresponding facility in its entirety.
[:zh_CN] 自立式实现最好仅在完整地提供对应程序库设施时，才定义 [?libheader version] 中的宏。

[para:recommended]
[:en] A non-hardened implementation should not define macros from [?libheader version]
required for hardened implementations.
[:zh_CN] 非加固实现不应当定义 [?libheader version] 中加固实现所必须的宏。
