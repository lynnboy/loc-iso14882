[section#cmp.partialord
    [:en] Class [`partial_ordering]
    [:zh_CN] 类 [`partial_ordering]
]

[para]
[:en]
The [`partial_ordering] type is typically used as the result type of a three-way
comparison operator ([#expr.spaceship]) that (a) admits all of the six two-way
comparison operators ([#expr.rel], [#expr.eq]), (b) does not imply
substitutability, and (c) permits two values to be incomparable.[#:note#fn:$1]
[:zh_CN]
[`partial_ordering] 类型通常被用作三路比较运算符（[#expr.spaceship]）的结果类型，
（A）允许全部六种双路比较运算符（[#expr.rel]，[#expr.eq]），（B）不蕴含可替代性，
以及（C）允许两个值之间不可比较。[#:note#fn:$1]

[note:foot#fn:$1]
[:en] That is, [`a < b], [`a == b], and [`a > b] might all be [`false].
[:zh_CN] 就是说 [`a < b]，[`a == b] 和 [`a > b] 可能都为 [`false]。
[note:end]

[%@lib partial_ordering]
[%@lib@member less[!partial_ordering]]
[%@lib@member equivalent[!partial_ordering]]
[%@lib@member greater[!partial_ordering]]
[%@lib@member unordered[!partial_ordering]]
[codeblock:synopsis]
namespace std {
  class partial_ordering {
    int value;          // [=expos]
    bool is_ordered;    // [=expos]

    // [:en] exposition-only constructor \
       [:zh_CN] 仅用于阐释的构造函数
    constexpr explicit
      partial_ordering([[redoc("^>")]]ord v) noexcept : value(int(v)), is_ordered(true) {}     // [=expos]
    constexpr explicit
      partial_ordering([[redoc("^>")]]ncmp v) noexcept : value(int(v)), is_ordered(false) {}   // [=expos]

  public:
    // [:en] valid values \
       [:zh_CN] 有效值
    static const partial_ordering less;
    static const partial_ordering equivalent;
    static const partial_ordering greater;
    static const partial_ordering unordered;

    // [:en] comparisons \
       [:zh_CN] 比较
    friend constexpr bool operator==(partial_ordering v, [[redoc("[=unspec]")]]) noexcept;
    friend constexpr bool operator==(partial_ordering v, partial_ordering w) noexcept = default;
    friend constexpr bool operator< (partial_ordering v, [[redoc("[=unspec]")]]) noexcept;
    friend constexpr bool operator> (partial_ordering v, [[redoc("[=unspec]")]]) noexcept;
    friend constexpr bool operator<=(partial_ordering v, [[redoc("[=unspec]")]]) noexcept;
    friend constexpr bool operator>=(partial_ordering v, [[redoc("[=unspec]")]]) noexcept;
    friend constexpr bool operator< ([[redoc("[=unspec]")]], partial_ordering v) noexcept;
    friend constexpr bool operator> ([[redoc("[=unspec]")]], partial_ordering v) noexcept;
    friend constexpr bool operator<=([[redoc("[=unspec]")]], partial_ordering v) noexcept;
    friend constexpr bool operator>=([[redoc("[=unspec]")]], partial_ordering v) noexcept;
    friend constexpr partial_ordering operator<=>(partial_ordering v, [[redoc("[=unspec]")]]) noexcept;
    friend constexpr partial_ordering operator<=>([[redoc("[=unspec]")]], partial_ordering v) noexcept;
  };

  // [:en] valid values[='] definitions \
     [:zh_CN] 有效值的定义式
  inline constexpr partial_ordering partial_ordering::less([[redoc("^>")]]ord::[[redoc("^>")]]less);
  inline constexpr partial_ordering partial_ordering::equivalent([[redoc("^>")]]ord::[[redoc("^>")]]equivalent);
  inline constexpr partial_ordering partial_ordering::greater([[redoc("^>")]]ord::[[redoc("^>")]]greater);
  inline constexpr partial_ordering partial_ordering::unordered([[redoc("^>")]]ncmp::[[redoc("^>")]]unordered);
}
[codeblock:end]

[%@lib@member operator==[!partial_ordering]]
[%@lib@member operator<[!partial_ordering]]
[%@lib@member operator>[!partial_ordering]]
[%@lib@member operator<=[!partial_ordering]]
[%@lib@member operator>=[!partial_ordering]]
[codeblock:declaration]
constexpr bool operator==(partial_ordering v, [[redoc("[=unspec]")]]) noexcept;
constexpr bool operator< (partial_ordering v, [[redoc("[=unspec]")]]) noexcept;
constexpr bool operator> (partial_ordering v, [[redoc("[=unspec]")]]) noexcept;
constexpr bool operator<=(partial_ordering v, [[redoc("[=unspec]")]]) noexcept;
constexpr bool operator>=(partial_ordering v, [[redoc("[=unspec]")]]) noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] For [`operator@], [`v.is_ordered && v.value @ 0].
[:zh_CN] 对于 [`operator@]，返回 [`v.is_ordered && v.value @ 0]。
[div:end]

[%@lib@member operator<[!partial_ordering]]
[%@lib@member operator>[!partial_ordering]]
[%@lib@member operator<=[!partial_ordering]]
[%@lib@member operator>=[!partial_ordering]]
[codeblock:declaration]
constexpr bool operator< ([[redoc("[=unspec]")]], partial_ordering v) noexcept;
constexpr bool operator> ([[redoc("[=unspec]")]], partial_ordering v) noexcept;
constexpr bool operator<=([[redoc("[=unspec]")]], partial_ordering v) noexcept;
constexpr bool operator>=([[redoc("[=unspec]")]], partial_ordering v) noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] For [`operator@], [`v.is_ordered && 0 @ v.value].
[:zh_CN] 对于 [`operator@]，返回 [`v.is_ordered && 0 @ v.value]。
[div:end]

[%@lib@member operator<=>[!partial_ordering]]
[codeblock:declaration]
constexpr partial_ordering operator<=>(partial_ordering v, [[redoc("[=unspec]")]]) noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`v].
[:zh_CN] [`v]。
[div:end]

[%@lib@member operator<=>[!partial_ordering]]
[codeblock:declaration]
constexpr partial_ordering operator<=>([[redoc("[=unspec]")]], partial_ordering v) noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`v < 0 ? partial_ordering::greater : v > 0 ? partial_ordering::less : v].
[:zh_CN]
[`v < 0 ? partial_ordering::greater : v > 0 ? partial_ordering::less : v]。
[div:end]
