[section#cmp.partialord
    [:en] Class [`partial_ordering]
    [:zh_CN] 类 [`partial_ordering]
]

[para]
[:en]
The [`partial_ordering] type is typically used as the result type of a three-way
comparison operator ([#expr.spaceship]) that (a) admits all of the six two-way
comparison operators ([#expr.rel], [#expr.eq]), (b) does not imply
substitutability, and (c) permits two values to be incomparable.
[#:note#fn:$section.1]
[:zh_CN]
[`partial_ordering] 类型通常被用作三路比较运算符（[#expr.spaceship]）的结果类型，
（A）允许全部六种双路比较运算符（[#expr.rel]，[#expr.eq]），（B）不蕴含可替代性，
以及（C）允许两个值之间不可比较。[#:note#fn:$section.1]

[note:foot#fn:$section.1]
[:en] That is, [`a < b], [`a == b], and [`a > b] might all be [`false].
[:zh_CN] 就是说 [`a < b]，[`a == b] 和 [`a > b] 可能都为 [`false]。
[note:end]

[%@library partial_ordering]
[%@library less[!partial_ordering]]
[%@library partial_ordering[!less]]
[%@library equivalent[!partial_ordering]]
[%@library partial_ordering[!equivalent]]
[%@library greater[!partial_ordering]]
[%@library partial_ordering[!greater]]
[%@library unordered[!partial_ordering]]
[%@library partial_ordering[!unordered]]
[codeblock:synopsis [!:mark UnSpec] ]
namespace std {
  class partial_ordering {
    int value;          // [=Expos]
    bool is_ordered;    // [=Expos]

    // [:en] exposition-only constructor
    // [|:zh_CN] 仅用于阐释的构造函数
    explicit constexpr
      partial_ordering(eq v) noexcept : value(int(v)), is_ordered(true) {}      // [=Expos]
    explicit constexpr
      partial_ordering(ord v) noexcept : value(int(v)), is_ordered(true) {}     // [=Expos]
    explicit constexpr
      partial_ordering(ncmp v) noexcept : value(int(v)), is_ordered(false) {}   // [=Expos]

  public:
    // [:en] valid values
    // [|:zh_CN] 有效值
    static const partial_ordering less;
    static const partial_ordering equivalent;
    static const partial_ordering greater;
    static const partial_ordering unordered;

    // [:en] conversion
    // [:zh_CN] 转换
    constexpr operator weak_equality() const noexcept;

    // [:en] comparisons
    // [|:zh_CN] 比较
    friend constexpr bool operator==(partial_ordering v, [=UnSpec]) noexcept;
    friend constexpr bool operator!=(partial_ordering v, [=UnSpec]) noexcept;
    friend constexpr bool operator< (partial_ordering v, [=UnSpec]) noexcept;
    friend constexpr bool operator<=(partial_ordering v, [=UnSpec]) noexcept;
    friend constexpr bool operator> (partial_ordering v, [=UnSpec]) noexcept;
    friend constexpr bool operator>=(partial_ordering v, [=UnSpec]) noexcept;
    friend constexpr bool operator==([=UnSpec], partial_ordering v) noexcept;
    friend constexpr bool operator!=([=UnSpec], partial_ordering v) noexcept;
    friend constexpr bool operator< ([=UnSpec], partial_ordering v) noexcept;
    friend constexpr bool operator<=([=UnSpec], partial_ordering v) noexcept;
    friend constexpr bool operator> ([=UnSpec], partial_ordering v) noexcept;
    friend constexpr bool operator>=([=UnSpec], partial_ordering v) noexcept;
    friend constexpr partial_ordering operator<=>(partial_ordering v, [=UnSpec]) noexcept;
    friend constexpr partial_ordering operator<=>([=UnSpec], partial_ordering v) noexcept;
  };

  // [:en] valid values[='] definitions
  // [|:zh_CN] 有效值的定义式
  inline constexpr partial_ordering partial_ordering::less(ord::less);
  inline constexpr partial_ordering partial_ordering::equivalent(eq::equivalent);
  inline constexpr partial_ordering partial_ordering::greater(ord::greater);
  inline constexpr partial_ordering partial_ordering::unordered(ncmp::unordered);
}
[codeblock:end]

[%@library operator weak_equality[!partial_ordering]]
[%@library partial_ordering[!operator weak_equality]]
[codeblock:declaration]
constexpr operator weak_equality() const noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`value == 0 ? weak_equality::equivalent : weak_equality::nonequivalent].
[:zh_CN]
[`value == 0 ? weak_equality::equivalent : weak_equality::nonequivalent]。

[enter:note]
[:en] The result is independent of the [`is_ordered] member.
[:zh_CN] 结果与 [`is_ordered] 成员无关。
[exit:note]
[exit:description]

[%@library operator==[!partial_ordering]]
[%@library partial_ordering[!operator==]]
[%@library operator<[!partial_ordering]]
[%@library partial_ordering[!operator<]]
[%@library operator<=[!partial_ordering]]
[%@library partial_ordering[!operator<=]]
[%@library operator>[!partial_ordering]]
[%@library partial_ordering[!operator>]]
[%@library operator>=[!partial_ordering]]
[%@library partial_ordering[!operator>=]]
[codeblock:declaration [!:mark UnSpec] ]
constexpr bool operator==(partial_ordering v, [=UnSpec]) noexcept;
constexpr bool operator< (partial_ordering v, [=UnSpec]) noexcept;
constexpr bool operator<=(partial_ordering v, [=UnSpec]) noexcept;
constexpr bool operator> (partial_ordering v, [=UnSpec]) noexcept;
constexpr bool operator>=(partial_ordering v, [=UnSpec]) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] For [`operator@], [`v.is_ordered && v.value @ 0].
[:zh_CN] 对于 [`operator@]，返回 [`v.is_ordered && v.value @ 0]。
[exit:description]

[%@library operator==[!partial_ordering]]
[%@library partial_ordering[!operator==]]
[%@library operator<[!partial_ordering]]
[%@library partial_ordering[!operator<]]
[%@library operator<=[!partial_ordering]]
[%@library partial_ordering[!operator<=]]
[%@library operator>[!partial_ordering]]
[%@library partial_ordering[!operator>]]
[%@library operator>=[!partial_ordering]]
[%@library partial_ordering[!operator>=]]
[codeblock:declaration [!:mark UnSpec] ]
constexpr bool operator==([=UnSpec], partial_ordering v) noexcept;
constexpr bool operator< ([=UnSpec], partial_ordering v) noexcept;
constexpr bool operator<=([=UnSpec], partial_ordering v) noexcept;
constexpr bool operator> ([=UnSpec], partial_ordering v) noexcept;
constexpr bool operator>=([=UnSpec], partial_ordering v) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] For [`operator@], [`v.is_ordered && 0 @ v.value].
[:zh_CN] 对于 [`operator@]，返回 [`v.is_ordered && 0 @ v.value]。
[exit:description]

[%@library operator!=[!partial_ordering]]
[%@library partial_ordering[!operator!=]]
[codeblock:declaration [!:mark UnSpec] ]
constexpr bool operator!=(partial_ordering v, [=UnSpec]) noexcept;
constexpr bool operator!=([=UnSpec], partial_ordering v) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] For [`operator@], [`!v.is_ordered || v.value != 0].
[:zh_CN] 对于 [`operator@]，返回 [`!v.is_ordered || v.value != 0]。
[exit:description]

[%@library operator<=>[!partial_ordering]]
[%@library partial_ordering[!operator<=>]]
[codeblock:declaration [!:mark UnSpec] ]
constexpr partial_ordering operator<=>(partial_ordering v, [=UnSpec]) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`v].
[:zh_CN] [`v]。
[exit:description]

[%@library operator<=>[!partial_ordering]]
[%@library partial_ordering[!operator<=>]]
[codeblock:declaration [!:mark UnSpec] ]
constexpr partial_ordering operator<=>([=UnSpec], partial_ordering v) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`v < 0 ? partial_ordering::greater : v > 0 ? partial_ordering::less : v].
[:zh_CN]
[`v < 0 ? partial_ordering::greater : v > 0 ? partial_ordering::less : v]。
[exit:description]
