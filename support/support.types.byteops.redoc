[section#support.types.byteops
    [:en] [`byte] type operations
    [:zh_CN] [`byte] 类型操作
]


[%@library operator<<=[!byte]]
[%@library byte[!operator<<=]]
[codeblock:declaration]
template<class IntType>
  constexpr byte& operator<<=(byte& b, IntType shift) noexcept;
[codeblock:end]

[begin:description]
[para:constraints]
[:en] [`is_integral_v<IntType>] is [`true].
[:zh_CN] [`is_integral_v<IntType>] 为 [`true]。

[para:effects]
[:en] Equivalent to: [`return b = b << shift;]
[:zh_CN] 等价于：[`return b = b << shift;]
[end:description]

[%@library operator<<[!byte]]
[%@library byte[!operator<<]]
[codeblock:declaration]
template<class IntType>
  constexpr byte operator<<(byte b, IntType shift) noexcept;
[codeblock:end]

[begin:description]
[para:constraints]
[:en] [`is_integral_v<IntType>] is [`true].
[:zh_CN] [`is_integral_v<IntType>] 为 [`true]。

[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于
[codeblock:notation]
return static_cast<byte>(static_cast<unsigned char>(
	                   static_cast<unsigned int>(b) << shift));
[codeblock:end]
[end:description]

[%@library operator>>=[!byte]]
[%@library byte[!operator>>=]]
[codeblock:declaration]
template<class IntType>
  constexpr byte& operator>>=(byte& b, IntType shift) noexcept;
[codeblock:end]

[begin:description]
[para:constraints]
[:en] [`is_integral_v<IntType>] is [`true].
[:zh_CN] [`is_integral_v<IntType>] 为 [`true]。

[para:effects]
[:en] Equivalent to: [`return b >> shift;]
[:zh_CN] 等价于：[`return b >> shift;]
[end:description]

[%@library operator>>[!byte]]
[%@library byte[!operator>>]]
[codeblock:declaration]
template<class IntType>
  constexpr byte operator>>(byte b, IntType shift) noexcept;
[codeblock:end]

[begin:description]
[para:constraints]
[:en] [`is_integral_v<IntType>] is [`true].
[:zh_CN] [`is_integral_v<IntType>] 为 [`true]。

[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于
[codeblock:notation]
return static_cast<byte>(static_cast<unsigned char>(
	                   static_cast<unsigned int>(b) >> shift));
[codeblock:end]
[end:description]

[%@library operator|=[!byte]]
[%@library byte[!operator|=]]
[codeblock:declaration]
constexpr byte& operator|=(byte& l, byte r) noexcept;
[codeblock:end]

[begin:description]
[para:effects]
[:en] Equivalent to: [`return l = l | r;]
[:zh_CN] 等价于：[`return l = l | r;]
[end:description]

[%@library operator|[!byte]]
[%@library byte[!operator|]]
[codeblock:declaration]
constexpr byte operator|(byte l, byte r) noexcept;
[codeblock:end]

[begin:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：

[codeblock:notation]
return static_cast<byte>(static_cast<unsigned char>(static_cast<unsigned int>(l) |
                                                    static_cast<unsigned int>(r)));
[codeblock:end]
[end:description]

[%@library operator&=[!byte]]
[%@library byte[!operator&=]]
[codeblock:declaration]
constexpr byte& operator&=(byte& l, byte r) noexcept;
[codeblock:end]

[begin:description]
[para:effects]
[:en] Equivalent to: [`return l = l & r;]
[:zh_CN] 等价于：[`return l = l & r;]
[end:description]

[%@library operator&[!byte]]
[%@library byte[!operator&]]
[codeblock:declaration]
constexpr byte operator&(byte l, byte r) noexcept;
[codeblock:end]

[begin:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：

[codeblock:notation]
return static_cast<byte>(static_cast<unsigned char>(static_cast<unsigned int>(l) &
                                                    static_cast<unsigned int>(r)));
[codeblock:end]
[end:description]

[%@library operator^=[!byte]]
[%@library byte[!operator^=]]
[codeblock:declaration]
constexpr byte& operator^=(byte& l, byte r) noexcept;
[codeblock:end]

[begin:description]
[para:effects]
[:en] Equivalent to: [`return l = l ^ r;]
[:zh_CN] 等价于：[`return l = l ^ r;]
[end:description]

[%@library operator^[!byte]]
[%@library byte[!operator^]]
[codeblock:declaration]
constexpr byte operator^(byte l, byte r) noexcept;
[codeblock:end]

[begin:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：

[codeblock:notation]
return static_cast<byte>(static_cast<unsigned char>(static_cast<unsigned int>(l) ^
                                                    static_cast<unsigned int>(r)));
[codeblock:end]
[end:description]

[%@library operator~[!byte]]
[%@library byte[!operator~]]
[codeblock:declaration]
constexpr byte operator~(byte b) noexcept;
[codeblock:end]

[begin:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：

[codeblock:notation]
return static_cast<byte>(static_cast<unsigned char>(
	                   ~static_cast<unsigned int>(b)));
[codeblock:end]
[end:description]

[%@library to_integer[!byte]]
[%@library byte[!to_integer]]
[codeblock:declaration]
template<class IntType>
  constexpr IntType to_integer(byte b) noexcept;
[codeblock:end]

[begin:description]
[para:constraints]
[:en] [`is_integral_v<IntType>] is [`true].
[:zh_CN] [`is_integral_v<IntType>] 为 [`true]。

[para:effects]
[:en] Equivalent to: [`return static_cast<IntType>(b);]
[:zh_CN] 等价于：[`return static_cast<IntType>(b);]
[end:description]
