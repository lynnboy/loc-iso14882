[section#cmp.weakeq
    [:en] Class [`weak_equality]
    [:zh_CN] 类 [`weak_equality]
]

[para]
[:en]
The [`weak_equality] type is typically used as the result type of a three-way
comparison operator ([#expr.spaceship]) that (a) admits only equality and
inequality comparisons, and (b) does not imply substitutability.
[:zh_CN]
[`weak_equality] 类型通常被用作三路比较运算符（[#expr.spaceship]）的结果类型，
（A）仅允许相等和不相等比较，（B）不蕴含可替代性。

[%@library weak_equality]
[%@library equivalent[!weak_equality]]
[%@library weak_equality[!equivalent]]
[%@library nonequivalent[!weak_equality]]
[%@library weak_equality[!nonequivalent]]
[codeblock:synopsis [!:mark UnSpec] ]
namespace std {
  class weak_equality {
    int value;  // [=Expos]

    // [:en] exposition-only constructor
    // [|:zh_CN] 仅用于阐释的构造函数
    constexpr explicit weak_equality([*eq] v) noexcept : value(int(v)) {}  // [=Expos]

  public:
    // [:en] valid values
    // [|:zh_CN] 有效值
    static const weak_equality equivalent;
    static const weak_equality nonequivalent;

    // [:en] comparisons
    // [|:zh_CN] 比较
    friend constexpr bool operator==(weak_equality v, [=UnSpec]) noexcept;
    friend constexpr bool operator!=(weak_equality v, [=UnSpec]) noexcept;
    friend constexpr bool operator==([=UnSpec], weak_equality v) noexcept;
    friend constexpr bool operator!=([=UnSpec], weak_equality v) noexcept;
    friend constexpr weak_equality operator<=>(weak_equality v, [=UnSpec]) noexcept;
    friend constexpr weak_equality operator<=>([=UnSpec], weak_equality v) noexcept;
  };

  // [:en] valid values[='] definitions
  // [|:zh_CN] 有效值的定义式
  inline constexpr weak_equality weak_equality::equivalent([*eq]::[*equivalent]);
  inline constexpr weak_equality weak_equality::nonequivalent([*eq]::[*nonequivalent]);
}
[codeblock:end]

[%@library operator==[!weak_equality]]
[%@library weak_equality[!operator==]]
[codeblock:declaration [!:mark UnSpec] ]
constexpr bool operator==(weak_equality v, [=UnSpec]) noexcept;
constexpr bool operator==([=UnSpec], weak_equality v) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`v.value == 0].
[:zh_CN] [`v.value == 0]。
[exit:description]

[%@library operator!=[!weak_equality]]
[%@library weak_equality[!operator!=]]
[codeblock:declaration [!:mark UnSpec] ]
constexpr bool operator!=(weak_equality v, [=UnSpec]) noexcept;
constexpr bool operator!=([=UnSpec], weak_equality v) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`v.value != 0].
[:zh_CN] [`v.value != 0]。
[exit:description]

[%@library operator<=>[!weak_equality]]
[%@library weak_equality[!operator<=>]]
[codeblock:declaration [!:mark UnSpec] ]
constexpr weak_equality operator<=>(weak_equality v, [=UnSpec]) noexcept;
constexpr weak_equality operator<=>([=UnSpec], weak_equality v) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`v].
[:zh_CN] [`v]。
[exit:description]
