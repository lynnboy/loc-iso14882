[section#support.start.term
    [:en] Startup and termination
    [:zh_CN] 启动和终止
]

[para]
[begin:note]
[:en]
The header [?libheader@ref cstdlib] declares the functions described in this
subclause.
[:zh_CN]
头文件 [?libheader@ref cstdlib] 声明了本子条款中所述的各个函数。
[end:note]

[%@lib _Exit]
[codeblock:declaration]
[[noreturn]] void _Exit(int status) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en]
This function has the semantics specified in the C standard library.
[:zh_CN]
本函数具有 C 标准程序库中所指定的语义。

[para:remarks]
[:en]
The program is terminated without executing destructors for objects of automatic,
thread, or static storage duration and without calling functions passed to
[`atexit()] ([#basic.start.term]).
[:zh_CN]
程序终止时并不执行自动、线程或静态存储期的对象的析构函数，且并不调用传递给
[`atexit()] 的函数（[#basic.start.term]）。

[:en]
[%signal-safe[![`_Exit]]]
The function [`_Exit] is signal-safe ([#support.signal]).
[:zh_CN]
[%信号安全[![`_Exit]]]
函数 [`_Exit] 是信号安全的（[#support.signal]）。
[div:end]

[%@lib abort]
[codeblock:declaration]
[[noreturn]] void abort(void) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en]
This function has the semantics specified in the C standard library.
[:zh_CN]
本函数具有 C 标准程序库中所指定的语义。

[para:remarks]
[:en]
The program is terminated without executing destructors for objects of
automatic, thread, or static storage duration and without calling functions
passed to [`atexit()] ([#basic.start.term]).
[:zh_CN]
程序终止时并不执行自动、线程或静态存储期的对象的析构函数，且并不调用传递给
[`atexit()] 的函数（[#basic.start.term]）。

[:en]
[%signal-safe[![`abort]]]
The function [`abort] is signal-safe ([#support.signal]).
[:zh_CN]
[%信号安全[![`abort]]]
函数 [`abort] 是信号安全的（[#support.signal]）。
[div:end]

[%@lib atexit]
[codeblock:declaration]
int atexit([[redoc("^>")]]c-atexit-handler* f) noexcept;
int atexit([[redoc("^>")]]atexit-handler* f) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en]
The [`atexit()] functions register the function pointed to by [`f] to be called
without arguments at normal program termination.
[:zh_CN]
[`atexit()] 函数登记由 [`f] 所指向的函数，以在正常的程序终止时不带实参地调用。

[:en]
It is unspecified whether a call to [`atexit()] that does not happen before
([#intro.multithread]) a call to [`exit()] will succeed.
[:zh_CN]
若对 [`atexit()] 的调用并非发生早于（[#intro.multithread]）对 [`exit()] 的调用，
则其是否成功是未指明的。

[begin:note]
[:en]
The [`atexit()] functions do not introduce a data race ([#res.on.data.races]).
[:zh_CN]
[`atexit()] 函数不会引入数据竞争（[#res.on.data.races]）。
[end:note]

[para:implimits]
[:en]
The implementation shall support the registration of at least 32 functions.
[:zh_CN]
实现应当支持至少登记 32 个函数。

[para:returns]
[:en]
The [`atexit()] function returns zero if the registration succeeds, nonzero if
it fails.
[:zh_CN]
若登记成功则 [`atexit()] 函数返回零，若它失败则为非零。
[div:end]

[%@lib exit]
[codeblock:declaration]
[[noreturn]] void exit(int status);
[codeblock:end]

[div:description]
[para:effects]
[list]
[item]
[:en]
First, objects with thread storage duration and associated with the current
thread are destroyed.
[:zh_CN]
首先，销毁具有线程存储期并与当前线程关联的对象。

[:en]
Next, objects with static storage duration are destroyed and functions
registered by calling [`atexit] are called.[#:note#fn:$1]
[:zh_CN]
然后，销毁具有静态存储期的对象并调用通过调用 [`atexit] 登记的函数。[#:note#fn:$1]

[note:foot#fn:$1]
[:en]
A function is called for every time it is registered.
[:zh_CN]
函数的每次登记均会进行调用。
[note:end]

[:en]
See [#basic.start.term] for the order of destructions and calls.
[:zh_CN]
有关进行销毁和调用之间的顺序，参见 [#basic.start.term]。

[:en]
(Objects with automatic storage duration are not destroyed as a result of
calling [`exit()].)[#:note#fn:$2]
[:zh_CN]
（调用 [`exit()] 不会导致销毁具有自动存储期的对象。）[#:note#fn:$2]

[note:foot#fn:$2]
[:en]
Objects with automatic storage duration are all destroyed in a program whose
[`main] function ([#basic.start.main]) contains no objects with automatic
storage duration and executes the call to [`exit()].
[:zh_CN]
对于 [`main] 函数（[#basic.start.main]）中不包含任何具有自动存储期的自动对象，
并且由它执行对 [`exit()] 的调用的程序，所有自动存储期对象都将被销毁。

[:en]
Control can be transferred directly to such a [`main] function by throwing an
exception that is caught in [`main].
[:zh_CN]
可以通过抛出在 [`main] 函数中捕获的异常而把控制直接传递到这种 [`main] 函数中。
[note:end]

[para:~]
[:en]
If a registered function inovked by [`exit] exits via an exception, the function
[%@lib terminate] [`std::terminate] is invoked ([#except.terminate]).
[:zh_CN]
当被 [`exit] 所调用的某个已登记函数以抛出的异常退出时，调用函数
[%@lib terminate][`std::terminate]（[#except.terminate]）。

[item]
[:en]
Next, all open C streams (as mediated by the function signatures declared in
[?libheader@ref cstdio]) with unwritten buffered data are flushed, all open C
streams are closed, and all files created by calling [`tmpfile()] are removed.
[:zh_CN]
然后，清空所有打开的带有未写出的缓冲数据的 C 流（以在 [?libheader@ref cstdio]
中声明的函数签名为中介），关闭所有打开的 C 流，并删除通过调用 [`tmpfile()] 创建
的所有文件。

[item]
[:en]
Finally, control is returned to the host environment.
[:zh_CN]
最后，控制被返回到宿主环境。

[:en]
If [`status] is zero or [`EXIT_SUCCESS], an [?impldef exit status] form of the
status [+:% successful termination] is returned.
[:zh_CN]
若 [`status] 为零或 [`EXIT_SUCCESS]，则以[?impldef 退出状态][+:% 成功终止]状态的
形式返回。

[:en]
If [`status] is [`EXIT_FAILURE], an [?impldef exit status] form of the status
[+:% unsuccessful termination] is returned.
[:zh_CN]
若 [`status] 为 [`EXIT_FAILURE]，则以[?impldef 退出状态][+:% 不成功终止]状态的
形式返回。

[:en]
Otherwise the status returned is [?impldef exit status].[#:note#fn:$3]
[:zh_CN]
否则返回的状态是[?impldef 退出状态]。[#:note#fn:$3]

[note:foot#fn:$3]
[:en]
The macros [`EXIT_FAILURE] and [`EXIT_SUCCESS] are defined in
[?libheader@ref cstdlib].
[:zh_CN]
宏 [`EXIT_FAILURE] 和 [`EXIT_SUCCESS] 在 [?libheader@ref cstdlib] 中定义。
[note:end]
[list:end]
[div:end]

[%@lib at_quick_exit]
[codeblock:declaration]
int at_quick_exit([[redoc("^>")]]c-atexit-handler* f) noexcept;
int at_quick_exit([[redoc("^>")]]atexit-handler* f) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en]
The [`at_quick_exit()] functions register the function pointed to by [`f]
to be called without arguments when [`quick_exit] is called.
[:zh_CN]
[`at_quick_exit()] 函数登记由 [`f] 所指向的函数，以在调用 [`quick_exit] 时不带
实参地调用。

[:en]
It is unspecified whether a call to [`at_quick_exit()] that does not happen
before ([#intro.multithread]) all calls to [`quick_exit] will succeed.
[:zh_CN]
若对 [`at_quick_exit()] 的调用并非发生早于（[#intro.multithread]）所有对
[`quick_exit] 的调用，则其是否成功是未指明的。

[begin:note]
[:en]
The [`at_quick_exit()] functions do not introduce a data race
([#res.on.data.races]).
[:zh_CN]
[`at_quick_exit()] 函数不会引入数据竞争（[#res.on.data.races]）。
[end:note]

[begin:note]
[:en]
The order of registration could be indeterminate if [`at_quick_exit] was called
from more than one thread.
[:zh_CN]
若从多个线程调用 [`at_quick_exit]，则登记顺序可以是不确定的。
[end:note]

[begin:note]
[:en]
The [`at_quick_exit] registrations are distinct from the [`atexit] registrations,
and applications might need to call both registration functions with the same
argument.
[:zh_CN]
[`at_quick_exit] 的登记与 [`atexit] 登记是不同的，并且应用程序可能需要用相同的
实参调用这两个登记。
[end:note]

[para:implimits]
[:en]
The implementation shall support the registration of at least 32 functions.
[:zh_CN]
实现应当支持至少登记 32 个函数。

[para:returns]
[:en]
Zero if the registration succeeds, nonzero if it fails.
[:zh_CN]
若登记成功则为零，若失败则为非零。
[div:end]

[%@lib quick_exit]
[codeblock:declaration]
[[noreturn]] void quick_exit(int status) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en]
Functions registered by calls to [`at_quick_exit] are called in the reverse
order of their registration, except that a function shall be called after any
previously registered functions that had already been called at the time it was
registered.
[:zh_CN]
对通过调用 [`at_quick_exit] 所登记的函数，以它们登记的相反顺序进行调用，但对一个
函数的调用，应当在先于它登记的，当其登记时已经调用过的函数之后进行。

[:en]
Objects shall not be destroyed as a result of calling [`quick_exit].
[:zh_CN]
调用 [`quick_exit] 不应当导致销毁对象。

[:en]
If a registered function inovked by [`quick_exit] exits via an exception, the
function [%@lib terminate] [`std::terminate] is invoked ([#except.terminate]).
[:zh_CN]
当被 [`quick_exit] 所调用的某个已登记函数以抛出的异常退出时，调用函数
[%@lib terminate][`std::terminate]（[#except.terminate]）。

[begin:note]
[:en]
A function registered via [`at_quick_exit] is invoked by the thread that calls
[`quick_exit], which can be a different thread than the one that registered it,
so registered functions cannot rely on the identity of objects with thread
storage duration.
[:zh_CN]
通过 [`at_quick_exit] 所登记的函数将由调用 [`quick_exit] 的线程所调用，该线程
可能从与函数登记时的线程不同，因此所登记的函数不能依赖于具有线程存储期的对象的
同一性。
[end:note]

[:en]
After calling registered functions, [`quick_exit] shall call [`_Exit(status)].
[:zh_CN]
调用已登记函数之后，[`quick_exit] 应当调用 [`_Exit(status)]。

[para:remarks]
[:en]
[%signal-safe[![`quick_exit]]]
The function [`quick_exit] is signal-safe ([#support.signal]) when the functions
registered with [`at_quick_exit] are.
[:zh_CN]
[%信号安全[![`quick_exit]]]
如果通过 [`at_quick_exit] 所登记的函数是信号安全的，则函数 [`quick_exit] 是信号
安全的（[#support.signal]）。
[div:end]

[para:xref@c] 7.22.4
