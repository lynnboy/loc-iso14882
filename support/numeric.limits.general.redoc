[section#numeric.limits.general
    [:en] General
    [:zh_CN] 概述
]

[para]
[:en]
The [%@lib numeric_limits] [`numeric_limits] class template provides a
[=Cpp] program with information about various properties of the
implementation[=']s representation of the arithmetic types.
[:zh_CN]
类模板 [%@lib numeric_limits] [`numeric_limits] 为 [=Cpp] 程序提供了有关该实现中
算术类型的表示的各种性质的信息。

[%@lib numeric_limits]
[codeblock:synopsis]
namespace std {
  template<class T> class numeric_limits {
  public:
    static constexpr bool is_specialized = false;
    static constexpr T min() noexcept { return T(); }
    static constexpr T max() noexcept { return T(); }
    static constexpr T lowest() noexcept { return T(); }

    static constexpr int  digits = 0;
    static constexpr int  digits10 = 0;
    static constexpr int  max_digits10 = 0;
    static constexpr bool is_signed = false;
    static constexpr bool is_integer = false;
    static constexpr bool is_exact = false;
    static constexpr int  radix = 0;
    static constexpr T epsilon() noexcept { return T(); }
    static constexpr T round_error() noexcept { return T(); }

    static constexpr int  min_exponent = 0;
    static constexpr int  min_exponent10 = 0;
    static constexpr int  max_exponent = 0;
    static constexpr int  max_exponent10 = 0;

    static constexpr bool has_infinity = false;
    static constexpr bool has_quiet_NaN = false;
    static constexpr bool has_signaling_NaN = false;
    static constexpr float_denorm_style has_denorm = denorm_absent;
    static constexpr bool has_denorm_loss = false;
    static constexpr T infinity() noexcept { return T(); }
    static constexpr T quiet_NaN() noexcept { return T(); }
    static constexpr T signaling_NaN() noexcept { return T(); }
    static constexpr T denorm_min() noexcept { return T(); }

    static constexpr bool is_iec559 = false;
    static constexpr bool is_bounded = false;
    static constexpr bool is_modulo = false;

    static constexpr bool traps = false;
    static constexpr bool tinyness_before = false;
    static constexpr float_round_style round_style = round_toward_zero;
  };
}
[codeblock:end]

[para]
[:en]
For all members declared [`:key static] [`:key constexpr] in the
[`numeric_limits] template, specializations shall define these values in such a
way that they are usable as constant expressions.
[:zh_CN]
在 [`numeric_limits] 模板中声明为 [`:key static] [`:key constexpr] 的所有成员，
在特化式中都应当以使这些值可被用作常量表达式的方式来定义它们。

[para]
[:en]
For the [`numeric_limits] primary template, all data members are
value-initialized and all member functions return a value-initialized object.
[:zh_CN]
对于 [`numeric_limits] 的主模板，所有数据成员均被值初始化，且所有成员函数均返回
经值初始化的对象。

[begin:note]
[:en]
This means all members have zero or [`false] values unless [`numeric_limits] is
specialized for a type.
[:zh_CN]
这意味着当 [`numeric_limits] 未针对某个类型进行特化时，所有成绩均具有零或
[`false] 值。
[end:note]

[para]
[:en]
Specializations shall be provided for each arithmetic type, both floating-point
and integer, including [`bool].
[:zh_CN]
应当为每个算术类型，包括浮点、整数和 [`bool]，提供特化式。

[:en]
The member [`is_specialized] shall be [`true] for all such specializations of
[`numeric_limits].
[:zh_CN]
[`numeric_limits] 的所有这些特化式的成员 [`is_specialized] 都应为 [`true]。

[para]
[:en]
The value of each member of a specialization of [`numeric_limits] on a
cv-qualified type [`cv T] shall be equal to the value of the corresponding
member of the specialization on the unqualified type [`T].
[:zh_CN]
[`numeric_limits] 对被 [$cv] 限定的类型 [`cv T] 的特例中的每个成员的值应当与其在
对未限定的类型 [`T] 的特例中的对应成员的值相同。

[para]
[:en]
Non-arithmetic standard types, such as [`complex<T>] ([#complex]), shall not
have specializations.
[:zh_CN]
非算术标准类型，比如 [`complex<T>]（[#complex]），不能有其特化式。
