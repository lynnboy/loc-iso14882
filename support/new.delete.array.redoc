[section#new.delete.array
    [:en] Array forms
    [:zh_CN] 数组形式
]

[%@library new[!operator]]
[codeblock:declaration]
[[nodiscard]] void* operator new[](std::size_t size);
[[nodiscard]] void* operator new[](std::size_t size, std::align_val_t alignment);
[codeblock:end]

[enter:description]
[para:effects]
[:en]
The allocation function ([#basic.stc.dynamic.allocation]) called by the array
form of a [~new-expression] ([#expr.new]) to allocate [`size] bytes of storage.
[:zh_CN]
被 [~new-表达式]的数组形式（[#expr.new]）调用的分配函数
（[#basic.stc.dynamic.allocation]），以分配 [`size] 个字节的存储。

[:en]
The second form is called for a type with new-extended alignment, and allocates
storage with the specified alignment.
[:zh_CN]
第二种形式是为具有 new 扩充对齐的类型所调用的形式，分配具有所指定对齐的存储。

[:en]
The first form is called otherwise, and allocates storage suitably aligned to
represent any array object of that size or smaller, provided the object[=']s
type does not have new-extended alignment.[#:note#fn:$1]
[:zh_CN]
否则就会调用第一种形式，所分配的存储经过适当对齐，只要对象的类型不具有 new 扩充
对齐，就能够表示具有所指定大小或更小的任何数组对象。[#:note#fn:$1]

[note:foot#fn:$1]
[:en]
It is not the direct responsibility of [`operator new`[`]] or
[`operator delete`[`]] to note the repetition count or element size of the
array.
[:zh_CN]
记录数组的重复个数或元素大小并不是 [`operator new`[`]] 或 [`operator delete`[`]]
的直接责任。

[:en]
Those operations are performed elsewhere in the array [`new] and [`delete]
expressions.
[:zh_CN]
这些操作是在数组 [`new] 和 [`delete] 表达式中的其他地方实施的。

[:en]
The array [`new] expression, may, however, increase the [`size] argument to
[`operator new`[`]] to obtain space to store supplemental information.
[:zh_CN]
然而，数组 [`new] 表达式可能会增加传给 [`operator new`[`]] 的 [`size] 实参以获取
用于存储辅助信息的空间。
[note:end]

[para:replaceable]
[:en]
a [=Cpp] program may define function with either of these function signatures,
and thereby displace the default versions defined by the [=Cpp] standard
library.
[:zh_CN]
[=Cpp] 程序可以定义带有任何这些函数签名的函数，并以之替代由 [=Cpp] 标准程序库所
定义的预置版本。

[para:required]
[:en]
Same as for the corresponding single object forms.
[:zh_CN]
与对应的单对象形式相同。

[:en]
This requirement is binding on any replacement versions of these functions.
[:zh_CN]
这些函数的任何替代版本同样遵守此规定。

[para:default]
[:en]
Returns [`operator new(size)] or [`operator new(size, alignment)], respectively.
[:zh_CN]
分别返回 [`operator new(size)] 或者 [`operator new(size, alignment)]。
[exit:description]

[%@library new[!operator]]
[codeblock:declaration]
[[nodiscard]] void* operator new[](std::size_t size, const std::nothrow_t&) noexcept;
[[nodiscard]] void* operator new[](std::size_t size, std::align_val_t alignment,
                                   const std::nothrow_t&) noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en]
Same as above, except that these are called by a placement version of a
[~new-expression] when a [=Cpp] program prefers a null pointer result as an
error indication, instead of a [`bad_alloc] exception.
[:zh_CN]
同上，但当 [=Cpp] 程序更倾向于将空指针结果，而不是 [`bad_alloc] 异常作为错误指示
时，它们将被 [~new-表达式]的放置式版本所调用。

[para:replaceable]
[:en]
a [=Cpp] program may define function with either of these function signatures,
and thereby displace the default versions defined by the [=Cpp] standard
library.
[:zh_CN]
[=Cpp] 程序可以定义带有任何这些函数签名的函数，并以之替代由 [=Cpp] 标准程序库所
定义的预置版本。

[para:required]
[:en]
Return a non-null pointer to suitably aligned storage ([#basic.stc.dynamic]),
or else return a null pointer.
[:zh_CN]
返回非空的指向适当对齐的存储的指针（[#basic.stc.dynamic]），要么返回空指针。

[:en]
Each of these nothrow versions of [`operator new`[`]] returns a pointer obtained
as if acquired from the (possibly replaced) corresponding non-placement
function.
[:zh_CN]
[`operator new`[`]] 的这些无抛出版本返回如同从其（可能已被替代的）对应非放置式
函数所获取的一样的指针。

[:en]
This requirement is binding on any replacement versions of these functions.
[:zh_CN]
这些函数的任何替代版本同样遵守此规定。

[para:default]
[:en]
Calls [`operator new`[`](size)] or [`operator new`[`](size, alignment)],
respectively.
[:zh_CN]
分别调用 [`operator new`[`](size)] 或者  [`operator new`[`](size, alignment)]。

[:en]
If the call returns normally, returns the result of that call.
[:zh_CN]
若该调用正常返回，则返回该调用的结果。

[:en]
Otherwise, returns a null pointer.
[:zh_CN]
否则，返回空指针。
[exit:description]

[%@library delete[!operator]]
[codeblock:declaration]
void operator delete[](void* ptr) noexcept;
void operator delete[](void* ptr, std::size_t size) noexcept;
void operator delete[](void* ptr, std::align_val_t alignment) noexcept;
void operator delete[](void* ptr, std::size_t size, std::align_val_t alignment) noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en]
The deallocation function ([#basic.stc.dynamic.deallocation]) called by the
array form of a [~delete-expression] to render the value of [`ptr] invalid.
[:zh_CN]
被 [~delete-表达式]的数组形式调用的回收函数（[#basic.stc.dynamic.deallocation]）
，以使 [`ptr] 的值成为无效的。

[para:replaceable]
[:en]
a [=Cpp] program may define functions with any of these function signatures, and
thereby displace the default versions defined by the [=Cpp] standard library.
[:zh_CN]
[=Cpp] 程序可以定义带有任何这些函数签名的函数，并以之替代由 [=Cpp] 标准程序库所
定义的预置版本。

[:en]
If a function without a [`size] parameter is defined, the program should also
define the corresponding function with a [`size] parameter.
[:zh_CN]
如果定义了没有 [`size] 形参的函数，则程序应当同样定义其所对应的带有 [`size] 形参
的函数。

[:en]
If a function with a [`size] parameter is defined, the program shall also
define the corresponding version without the [`size] parameter.
[:zh_CN]
如果定义了带有 [`size] 形参的函数，则程序应当同样定义其所对应的没有 [`size] 形参
的版本。

[enter:note]
[:en]
The default behavior below may change in the future, which will require
replacing both deallocation functions when replacing the allocation function.
[:zh_CN]
下文的缺省行为可能于未来被改变为，当替换分配函数时同时要求替换两个回收函数。
[exit:note]

[para:requires]
[:en]
[`ptr] shall be a null pointer or its value shall represent the address of a
block of memory allocated by an earlier call to a (possibly replaced)
[`operator new`[`](std::size_t)] or
[`operator new`[`](std::size_t, std::align_val_t)] which has not been
invalidated by an intervening call to [`operator delete`[`]].
[:zh_CN]
[`ptr] 应当为空指针，或者其值应当表示一个从早前对（可能已被替代的）
[`operator new`[`](std::size_t)] 或
[`operator new`[`](std::size_t, std::align_val_t)] 的调用所返回的已分配内存块的
地址，且未被介于其间的对 [`operator delete`[`]] 的调用变为无效。

[para:requires]
[:en]
If an implementation has strict pointer safety ([#basic.stc.dynamic.safety])
then [`ptr] shall be a safely-derived pointer.
[:zh_CN]
如果实现带有严格指针安全性（[#basic.stc.dynamic.safety]），[`ptr] 应当是安全衍生
指针。

[para:requires]
[:en]
If the [`alignment] parameter is not present, [`ptr] shall have been returned by
an allocation function without an [`alignment] parameter.
[:zh_CN]
如果没有 [`alignment] 形参，则 [`ptr] 应当是由没有 [`alignment] 形参的分配函数所
返回的指针。

[:en]
If present, the [`alignment] argument shall equal the [`alignment] argument
passed to the allocation function that returned [`ptr].
[:zh_CN]
如果存在，则 [`alignment] 实参应当等于传递给返回了 [`ptr] 的分配函数的
[`alignment] 实参。

[:en]
If present, the [`size] argument shall equal the [`size] argument passed to the
allocation function that returned [`ptr].
[:zh_CN]
如果存在，则 [`size] 实参应当等于传递给返回了 [`ptr] 的分配函数的 [`size] 实参。

[para:required]
[:en]
A call to an [`operator delete`[`]] with a [`size] parameter may be changed to a
call to the corresponding [`operator delete`[`]] without a [`size] parameter,
without affecting memory allocation.
[:zh_CN]
对带有 [`size] 形参的 [`operator delete`[`]] 的调用可以被改成对其所对应的不带有
[`size] 形参的 [`operator delete`[`]] 的调用而不影响内存分配。

[enter:note]
[:en]
A conforming implementation is for
[`operator delete`[`](void* ptr, std::size_t size)]
to simply call [`operator delete`[`](ptr)].
[:zh_CN]
符合标准的一种实现是 [`operator delete`[`](void* ptr, std::size_t size)] 只是
简单地调用 [`operator delete`[`](ptr)]。
[exit:note]

[para:default]
[:en]
The function that have a [`size] parameter forward their other parameters to
the corresponding function without a [`size] parameter.
[:zh_CN]
带有 [`size] 形参的函数将其他形参转发给不带有 [`size] 形参的函数。

[:en]
The functions that do not have a [`size] parameter forward their parameters to
the corresponding [`operator delete] (single-object) function.
[:zh_CN]
不带有 [`size] 形参的函数将其各个形参转发给对应的（单对象）[`operator delete]
函数。
[exit:description]

[%@library delete[!operator]]
[codeblock:declaration]
void operator delete[](void* ptr, const std::nothrow_t&) noexcept;
void operator delete[](void* ptr, std::align_val_t alignment, const std::nothrow_t&) noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en]
The deallocation function ([#basic.stc.dynamic.deallocation]) called by the
implementation to render the value of [`ptr] invalid when the constructor
invoked from a nothrow placement version of the array [~new-expression] throws
an exception.
[:zh_CN]
当数组 [~new-表达式]的无抛出放置式版本所调用的构造函数抛出异常时被实现调用的
回收函数（[#basic.stc.dynamic.deallocation]），以使 [`ptr] 的值成为无效的。

[para:replaceable]
[:en]
a [=Cpp] program may define function with either of these function signatures,
and thereby displace the default versions defined by the [=Cpp] standard
library.
[:zh_CN]
[=Cpp] 程序可以定义带有任何这些函数签名的函数，并以之替代由 [=Cpp] 标准程序库所
定义的预置版本。

[para:requires]
[:en]
[`ptr] shall be a null pointer or its value shall represent the address of a
block of memory allocated by an earlier call to a (possibly replaced)
[`operator new`[`](std::size_t)] or
[`operator new`[`](std::size_t, std::align_val_t)] which has not been
invalidated by an intervening call to [`operator delete`[`]].
[:zh_CN]
[`ptr] 应当为空指针，或者其值应当表示一个从早前对（可能已被替代的）
[`operator new`[`](std::size_t)] 或
[`operator new`[`](std::size_t, std::align_val_t)] 的调用所返回的已分配内存块的
地址，且未被介于其间的对 [`operator delete`[`]] 的调用变为无效。

[para:requires]
[:en]
If an implementation has strict pointer safety ([#basic.stc.dynamic.safety])
then [`ptr] shall be a safely-derived pointer.
[:zh_CN]
如果实现带有严格指针安全性（[#basic.stc.dynamic.safety]），[`ptr] 应当是安全衍生
指针。

[para:requires]
[:en]
If the [`alignment] parameter is not present, [`ptr] shall have been returned by
an allocation function without an [`alignment] parameter.
[:zh_CN]
如果没有 [`alignment] 形参，则 [`ptr] 应当是由没有 [`alignment] 形参的分配函数所
返回的指针。

[:en]
If present, the [`alignment] argument shall equal the [`alignment] argument
passed to the allocation function that returned [`ptr].
[:zh_CN]
如果存在，则 [`alignment] 实参应当等于传递给返回了 [`ptr] 的分配函数的
[`alignment] 实参。

[para:default]
[:en]
Calls [`operator delete`[`](ptr)], or [`operator delete`[`](ptr, alignment)],
respectively.
[:zh_CN]
分别调用 [`operator delete`[`](ptr)] 或 [`operator delete`[`](ptr, alignment)]。
[exit:description]
