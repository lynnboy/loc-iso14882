[section#new.delete.array
    [:en] Array forms
    [:zh_CN] 数组形式
]

[%@lib@member new[!operator]]
[codeblock:declaration]
void* operator new[](std::size_t size);
void* operator new[](std::size_t size, std::align_val_t alignment);
[codeblock:end]

[div:description]
[para:effects]
[:en] The allocation function ([#basic.stc.dynamic.allocation]) called by the
array form of a [~new-expression] ([#expr.new]) to allocate [`size] bytes of
storage.
[:zh_CN] [~new-表达式]的数组形式（[#expr.new]）所调用的分配函数（[#basic.stc.dynamic.allocation]），
用以分配 [`size] 个字节的存储。

[:en] The second form is called for a type with new-extended alignment, and the
first form is called otherwise.[#:fn]
[:zh_CN] 第二种形式是为具有 new 扩充对齐的类型所调用的形式，否则调用第一种形式[#:fn]。

[note:foot]
[:en] It is not the direct responsibility of [`operator new`[`]] or
[`operator delete`[`]] to note the repetition count or element size of the array.
[:zh_CN] 记录数组的重复个数或元素大小并不是 [`operator new`[`]] 或 [`operator delete`[`]]
的直接责任。

[:en] Those operations are performed elsewhere in the array [`:key new] and
[`:key delete] expressions.
[:zh_CN] 这些操作是在数组 [`:key new] 和 [`:key delete] 表达式中的其他地方实施的。

[:en] The array [`:key new] expression, can, however, increase the [`size]
argument to [`operator new`[`]] to obtain space to store supplemental information.
[:zh_CN] 然而，数组 [`:key new] 表达式可以增加传给 [`operator new`[`]] 的 [`size]
实参，以获取用于存储辅助信息的空间。
[note:end]

[para:replaceable]
[?replaceabledesc either]

[para:required]
[:en] Same as for the corresponding single-object forms.
[:zh_CN] 与对应的单对象形式相同。

[:en] This requirement is binding on any replacement versions of these functions.
[:zh_CN] 这些函数的任何替代版本同样遵守此规定。

[para:default]
[:en] Returns [`operator new(size)], or [`operator new(size, alignment)],
respectively.
[:zh_CN] 分别返回 [`operator new(size)] 或者 [`operator new(size, alignment)]。
[div:end]

[%@lib@member new[!operator]]
[codeblock:declaration]
void* operator new[](std::size_t size, const std::nothrow_t&) noexcept;
void* operator new[](std::size_t size, std::align_val_t alignment, const std::nothrow_t&) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Same as above, except that these are called by a placement version of a
[~new-expression] when a [=Cpp] program prefers a null pointer result as an
error indication, instead of a [`bad_alloc] exception.
[:zh_CN] 同上，如果 [=Cpp] 程序更倾向于将空指针结果，而不是以 [`bad_alloc] 异常为
错误指示，则以 [~new-表达式]的一种放置式版本来调用这些函数。

[para:replaceable]
[?replaceabledesc either]

[para:required]
[:en] Return a non-null pointer to suitably aligned storage ([#basic.stc.dynamic]),
or else return a null pointer.
[:zh_CN] 返回指向适当对齐的存储的非空指针（[#basic.stc.dynamic]），抑或返回空指针。

[:en] Each of these nothrow versions of [`operator new`[`]] returns a pointer
obtained as if acquired from the (possibly replaced) corresponding non-placement
function.
[:zh_CN] [`operator new`[`]] 的这些无抛出版本返回如同从其（可能已被替代的）对应
非放置式函数所获取的一样的指针。

[:en] This requirement is binding on any replacement versions of these functions.
[:zh_CN] 这些函数的任何替代版本同样遵守此规定。

[para:default]
[:en] Calls [`operator new`[`](size)] or [`operator new`[`](size, alignment)],
respectively.
[:zh_CN] 分别调用 [`operator new`[`](size)] 或者
[`operator new`[`](size, alignment)]。

[:en] If the call returns normally, returns the result of that call.
[:zh_CN] 若该调用正常返回，则返回该调用的结果。

[:en] Otherwise, returns a null pointer.
[:zh_CN] 否则，返回空指针。
[div:end]

[%@lib@member delete[!operator]]
[codeblock:declaration]
void operator delete[](void* ptr) noexcept;
void operator delete[](void* ptr, std::size_t size) noexcept;
void operator delete[](void* ptr, std::align_val_t alignment) noexcept;
void operator delete[](void* ptr, std::size_t size, std::align_val_t alignment) noexcept;
[codeblock:end]

[div:description]
[para:expects]
[:en] [`ptr] is a null pointer or its value represents the address of a block of
memory allocated by an earlier call to a (possibly replaced)
[`operator new`[`](std::size_t)] or
[`operator new`[`](std::size_t, std::align_val_t)] which has not been
invalidated by an intervening call to [`operator delete`[`]].
[:zh_CN] [`ptr] 为空指针，或者其值表示一个从早前对（可能已被替代的）
[`operator new`[`](std::size_t)] 或
[`operator new`[`](std::size_t, std::align_val_t)] 的调用所返回的已分配内存块的
地址，且它未被介于其间的对 [`operator delete`[`]] 的调用变为无效。

[para]
[:en] If the [`alignment] parameter is not present, [`ptr] was returned by an
allocation function without an [`alignment] parameter.
[:zh_CN] 如果没有 [`alignment] 形参，则 [`ptr] 是由没有 [`alignment] 形参的
分配函数所返回的指针。

[:en] If present, the [`alignment] argument is equal to the [`alignment] argument
passed to the allocation function that returned [`ptr].
[:zh_CN] 如果存在，则 [`alignment] 实参等于传递给返回了 [`ptr] 的分配函数的
[`alignment] 实参。

[:en] If present, the [`size] argument is equal to the [`size] argument passed
to the allocation function that returned [`ptr].
[:zh_CN] 如果存在，则 [`size] 实参等于传递给返回了 [`ptr] 的分配函数的 [`size] 实参。

[para:effects]
[:en] The deallocation function ([#basic.stc.dynamic.deallocation]) called by
the array form of a [~delete-expression] to render the value of [`ptr] invalid.
[:zh_CN] [~delete-表达式]的数组形式所调用的回收函数（[#basic.stc.dynamic.deallocation]），
用以使 [`ptr] 的值无效。

[para:replaceable]
[?replaceabledesc any]

[:en] If a function without a [`size] parameter is defined, the program should
also define the corresponding function with a [`size] parameter.
[:zh_CN] 如果定义了没有 [`size] 形参的函数，则程序应当同样定义其所对应的带有 [`size]
形参的函数。

[:en] If a function with a [`size] parameter is defined, the program shall also
define the corresponding version without the [`size] parameter.
[:zh_CN] 如果定义了带有 [`size] 形参的函数，则程序应当同样定义其所对应的没有 [`size]
形参的版本。

[begin:note]
[:en] The default behavior below might change in the future, which will require
replacing both deallocation functions when replacing the allocation function.
[:zh_CN] 下文的缺省行为可能于未来被改变为，当替换分配函数时同时要求替换两个回收函数。
[end:note]

[para:required]
[:en] A call to an [`operator delete`[`]] with a [`size] parameter may be
changed to a call to the corresponding [`operator delete`[`]] without a [`size]
parameter, without affecting memory allocation.
[:zh_CN] 对带有 [`size] 形参的 [`operator delete`[`]] 的调用，可以改成对其所对应
的不带有 [`size] 形参的 [`operator delete`[`]] 的调用而不影响内存分配。

[begin:note]
[:en] A conforming implementation is for
[`operator delete`[`](void* ptr, std::size_t size)] to simply call
[`operator delete`[`](ptr)].
[:zh_CN] 符合标准的一种实现是 [`operator delete`[`](void* ptr, std::size_t size)]
只是简单地调用 [`operator delete`[`](ptr)]。
[end:note]

[para:default]
[:en] The functions that have a [`size] parameter forward their other parameters
to the corresponding function without a [`size] parameter.
[:zh_CN] 带有 [`size] 形参的函数将其他形参转发给不带有 [`size] 形参的函数。

[:en] The functions that do not have a [`size] parameter forward their
parameters to the corresponding [`operator delete] (single-object) function.
[:zh_CN] 不带有 [`size] 形参的函数将其各个形参转发给对应的（单对象）[`operator delete]
函数。
[div:end]

[%@lib@member delete[!operator]]
[codeblock:declaration]
void operator delete[](void* ptr, const std::nothrow_t&) noexcept;
void operator delete[](void* ptr, std::align_val_t alignment, const std::nothrow_t&) noexcept;
[codeblock:end]

[div:description]
[para:expects]
[:en] [`ptr] is a null pointer or its value represents the address of a block of
memory allocated by an earlier call to a (possibly replaced)
[`operator new`[`](std::size_t)] or
[`operator new`[`](std::size_t, std::align_val_t)] which has not been
invalidated by an intervening call to [`operator delete`[`]].
[:zh_CN] [`ptr] 为空指针，或者其值表示一个从早前对（可能已被替代的）
[`operator new`[`](std::size_t)] 或
[`operator new`[`](std::size_t, std::align_val_t)] 的调用所返回的已分配内存块的
地址，且它未被介于其间的对 [`operator delete`[`]] 的调用变为无效。

[para]
[:en] If the [`alignment] parameter is not present, [`ptr] was returned by an
allocation function without an [`alignment] parameter.
[:zh_CN] 如果没有 [`alignment] 形参，则 [`ptr] 是由没有 [`alignment] 形参的
分配函数所返回的指针。

[:en] If present, the [`alignment] argument is equal to the [`alignment]
argument passed to the allocation function that returned [`ptr].
[:zh_CN] 如果存在，则 [`alignment] 实参等于传递给返回了 [`ptr] 的分配函数的
[`alignment] 实参。

[para:effects]
[:en] The deallocation function ([#basic.stc.dynamic.deallocation]) called by
the implementation to render the value of [`ptr] invalid when the constructor
invoked from a nothrow placement version of the array [~new-expression] throws
an exception.
[:zh_CN] 当数组 [~new-表达式]的无抛出放置式版本所调用的构造函数抛出异常时，实现所
调用的回收函数（[#basic.stc.dynamic.deallocation]），用以使 [`ptr] 的值无效。

[para:replaceable]
[?replaceabledesc either]

[para:default]
[:en] Calls [`operator delete`[`](ptr)], or [`operator delete`[`](ptr, alignment)],
respectively.
[:zh_CN] 分别调用 [`operator delete`[`](ptr)] 或
[`operator delete`[`](ptr, alignment)]。
[div:end]
