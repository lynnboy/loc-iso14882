[section#numeric.limits.members
    [:en] [`numeric_limits] members
    [:zh_CN] [`numeric_limits] 的成员
]

[para]
[:en]
[%signal-safe[![`numeric_limits] members]]
Each member function defined in this subclause is signal-safe ([#support.signal]).
[:zh_CN]
[%信号安全[![`numeric_limits] 的成员]]
本子条款中定义的各个成员函数都是信号安全的（[#support.signal]）。

[%@lib@member min[!numeric_limits]]
[codeblock:declaration]
static constexpr T min() noexcept;
[codeblock:end]

[div:description]
[para]
[:en]
Minimum finite value.[#:fn]
[:zh_CN]
最小有穷值[#:fn]。

[note:foot]
[:en]
Equivalent to [`CHAR_MIN], [`SHRT_MIN], [`FLT_MIN], [`DBL_MIN], etc.
[:zh_CN]
等价于 [`CHAR_MIN]，[`SHRT_MIN]，[`FLT_MIN]，[`DBL_MIN]，等等。
[note:end]

[para]
[:en]
[%number[!subnormal]]
For floating-point types with subnormal numbers, returns the minimum positive
normalized value.
[:zh_CN]
[%数值[!次规范的]]
对于允许次规范的数值的浮点类型，返回最小的规格化的正数值。

[para]
[:en]
Meaningful for all specializations in which [`is_bounded != false], or
[`is_bounded == false && is_signed == false].
[:zh_CN]
对于 [`is_bounded != false]，或者 [`is_bounded == false && is_signed == false]
的所有特例有意义。
[div:end]

[%@lib@member max[!numeric_limits]]
[codeblock:declaration]
static constexpr T max() noexcept;
[codeblock:end]

[div:description]
[para]
[:en]
Maximum finite value.[#:fn]
[:zh_CN]
最大有穷值[#:fn]。

[note:foot]
[:en]
Equivalent to [`CHAR_MAX], [`SHRT_MAX], [`FLT_MAX], [`DBL_MAX], etc.
[:zh_CN]
等价于 [`CHAR_MAX]，[`SHRT_MAX]，[`FLT_MAX]，[`DBL_MAX]，等等。
[note:end]

[para]
[:en]
Meaningful for all specializations in which [`is_bounded != false].
[:zh_CN]
对于 [`is_bounded != false] 的所有特例有意义。
[div:end]

[%@lib@member lowest[!numeric_limits]]
[codeblock:declaration]
static constexpr T lowest() noexcept;
[codeblock:end]

[div:description]
[para]
[:en]
A finite value [`x] such that there is no other finite value [`y] where [`y < x].[#:fn]
[:zh_CN]
有穷值 [`x]，使得不存在满足 [`y < x] 的其他有穷值 [`y][#:fn]。

[note:foot]
[:en]
[`lowest()] is necessary because not all floating-point representations have a
smallest (most negative) value that is the negative of the largest (most
positive) finite value.
[:zh_CN]
[`lowest()] 是必要的，这是由于不是所有浮点表示的最小值（通常为负）都是其最大的
有穷值（通常为正）的相反数。
[note:end]

[para]
[:en]
Meaningful for all specializations in which [`is_bounded != false].
[:zh_CN]
对于 [`is_bounded != false] 的所有特例有意义。
[div:end]

[%@lib@member digits[!numeric_limits]]
[codeblock:declaration]
static constexpr int digits;
[codeblock:end]

[div:description]
[para]
[:en]
Number of [`radix] digits that can be represented without change.
[:zh_CN]
以 [`radix] 为基的数字可以不改变地表示的数量。

[para]
[:en]
For integer types, the number of non-sign bits in the representation.
[:zh_CN]
对于整数类型，为其表示中非符号位的数量。

[para]
[:en]
For floating-point types, the number of [`radix] digits in the significand.[#:fn]
[:zh_CN]
对于浮点类型，在其有效数字中以 [`radix] 为基的数字的个数[#:fn]。

[note:foot]
[:en]
Equivalent to [`FLT_MANT_DIG], [`DBL_MANT_DIG], [`LDBL_MANT_DIG].
[:zh_CN]
等价于 [`FLT_MANT_DIG]，[`DBL_MANT_DIG]，[`LDBL_MANT_DIG]。
[note:end]
[div:end]

[%@lib@member digits10[!numeric_limits]]
[codeblock:declaration]
static constexpr int digits10;
[codeblock:end]

[div:description]
[para]
[:en]
Number of base 10 digits that can be represented without change.[#:fn]
[:zh_CN]
以 10 为基的数字可以不改变地表示的数量[#:fn]。

[note:foot]
[:en]
Equivalent to [`FLT_DIG], [`DBL_DIG], [`LDBL_DIG].
[:zh_CN]
等价于 [`FLT_DIG]，[`DBL_DIG]，[`LDBL_DIG]。
[note:end]

[para]
[:en]
Meaningful for all specializations in which [`is_bounded != false].
[:zh_CN]
对于 [`is_bounded != false] 的所有特例有意义。
[div:end]

[%@lib@member max_digits10[!numeric_limits]]
[codeblock:declaration]
static constexpr int max_digits10;
[codeblock:end]

[div:description]
[para]
[:en]
Number of base 10 digits required to ensure that values which differ are always
differentiated.
[:zh_CN]
保证不同的值总能被区分开所需要的以 10 为基的数字。

[para]
[:en]
Meaningful for all floating-point types.
[:zh_CN]
对于所有浮点类型有意义。
[div:end]

[%@lib@member is_signed[!numeric_limits]]
[codeblock:declaration]
static constexpr bool is_signed;
[codeblock:end]

[div:description]
[para]
[:en]
[`true] if the type is signed.
[:zh_CN]
若该类型有符号则为 [`true]。

[para]
[:en]
Meaningful for all specializations.
[:zh_CN]
对于所有特例有意义。
[div:end]

[%@lib@member is_integer[!numeric_limits]]
[codeblock:declaration]
static constexpr bool is_integer;
[codeblock:end]

[div:description]
[para]
[:en]
[`true] if the type is integer.
[:zh_CN]
若该类型为整数则为 [`true]。

[para]
[:en]
Meaningful for all specializations.
[:zh_CN]
对于所有特例有意义。
[div:end]

[%@lib@member is_exact[!numeric_limits]]
[codeblock:declaration]
static constexpr bool is_exact;
[codeblock:end]

[div:description]
[para]
[:en]
[`true] if the type uses an exact representation.
[:zh_CN]
若该类型使用了精确表示则为 [`true]。

[:en]
All integer types are exact, but not all exact types are integer.
[:zh_CN]
所有整数类型都是精确的，但不是所有的精确类型都是整数。

[:en]
For example, rational and fixed-exponent representations are exact but not
integer.
[:zh_CN]
例如，有理数和固定指数表示是精确的但不是整数。

[para]
[:en]
Meaningful for all specializations.
[:zh_CN]
对于所有特例有意义。
[div:end]

[%@lib@member radix[!numeric_limits]]
[codeblock:declaration]
static constexpr int radix;
[codeblock:end]

[div:description]
[para]
[:en]
For floating-point types, specifies the base or radix of the exponent
representation (often 2).[#:fn]
[:zh_CN]
对于浮点类型，指定其指数表示的基或基数（通常为 2）[#:fn]。

[note:foot]
[:en]
Equivalent to [`FLT_RADIX].
[:zh_CN]
等价于 [`FLT_RADIX]。
[note:end]

[para]
[:en]
For integer types, specifies the base of the representation.[#:fn]
[:zh_CN]
对于整数类型，指定其表示的基[#:fn]。

[note:foot]
[:en]
Distinguishes types with bases other than 2 (e.g., BCD).
[:zh_CN]
区别不以 2 为基的类型（比如 BCD）。
[note:end]

[para]
[:en]
Meaningful for all specializations.
[:zh_CN]
对于所有特例有意义。
[div:end]

[%@lib@member epsilon[!numeric_limits]]
[codeblock:declaration]
static constexpr T epsilon() noexcept;
[codeblock:end]

[div:description]
[para]
[:en]
Machine epsilon: the difference between 1 and the least value greater than 1
that is representable.[#:fn]
[:zh_CN]
机器 [=epsilon]：1 与大于 1 的可表示的最小值的差[#:fn]。

[note:foot]
[:en]
Equivalent to [`FLT_EPSILON], [`DBL_EPSILON], [`LDBL_EPSILON].
[:zh_CN]
等价于 [`FLT_EPSILON]，[`DBL_EPSILON]，[`LDBL_EPSILON]。
[note:end]

[para]
[:en]
Meaningful for all floating-point types.
[:zh_CN]
对于所有浮点类型有意义。
[div:end]

[%@lib@member round_error[!numeric_limits]]
[codeblock:declaration]
static constexpr T round_error() noexcept;
[codeblock:end]

[div:description]
[para]
[:en]
Measure of the maximum rounding error.[#:fn]
[:zh_CN]
最大舍入误差的度量[#:fn]。

[note:foot]
[:en]
Rounding error is described in LIA-1 Section 5.2.4 and Annex C Rationale Section
C.5.2.4 [=--] Rounding and rounding constants.
[:zh_CN]
舍入误差在 LIA-1 第 5.2.4 节以及附录 C 原理的第 C.5.2.4 节——“舍入和舍入常量”中
描述。
[note:end]
[div:end]

[%@lib@member min_exponent[!numeric_limits]]
[codeblock:declaration]
static constexpr int  min_exponent;
[codeblock:end]

[div:description]
[para]
[:en]
Minimum negative integer such that [`radix] raised to the power of one less than
that integer is a normalized floating-point number.[#:fn]
[:zh_CN]
使得以 [`radix] 为底指数比该整数小一的幂为规格化浮点数的最小负整数[#:fn]。

[note:foot]
[:en]
Equivalent to [`FLT_MIN_EXP], [`DBL_MIN_EXP], [`LDBL_MIN_EXP].
[:zh_CN]
等价于 [`FLT_MIN_EXP]，[`DBL_MIN_EXP]，[`LDBL_MIN_EXP]。
[note:end]

[para]
[:en]
Meaningful for all floating-point types.
[:zh_CN]
对于所有浮点类型有意义。
[div:end]

[%@lib@member min_exponent10[!numeric_limits]]
[codeblock:declaration]
static constexpr int  min_exponent10;
[codeblock:end]

[div:description]
[para]
[:en]
Minimum negative integer such that 10 raised to that power is in the range
of normalized floating-point numbers.[#:fn]
[:zh_CN]
使得以 10 为底的该指数的幂处于规格化浮点数的值域之中的最小负整数[#:fn]。

[note:foot]
[:en]
Equivalent to [`FLT_MIN_10_EXP], [`DBL_MIN_10_EXP], [`LDBL_MIN_10_EXP].
[:zh_CN]
等价于 [`FLT_MIN_10_EXP]，[`DBL_MIN_10_EXP]，[`LDBL_MIN_10_EXP]。
[note:end]

[para]
[:en]
Meaningful for all floating-point types.
[:zh_CN]
对于所有浮点类型有意义。
[div:end]

[%@lib@member max_exponent[!numeric_limits]]
[codeblock:declaration]
static constexpr int  max_exponent;
[codeblock:end]

[div:description]
[para]
[:en]
Maximum positive integer such that [`radix] raised to the power one less than
that integer is a representable finite floating-point number.[#:fn]
[:zh_CN]
使得以 [`radix] 为底指数比该整数小一的幂为可表示的有穷的浮点数的最大正整数[#:fn]。

[note:foot]
[:en]
Equivalent to [`FLT_MAX_EXP], [`DBL_MAX_EXP], [`LDBL_MAX_EXP].
[:zh_CN]
等价于 [`FLT_MAX_EXP]，[`DBL_MAX_EXP]，[`LDBL_MAX_EXP]。
[note:end]

[para]
[:en]
Meaningful for all floating-point types.
[:zh_CN]
对于所有浮点类型有意义。
[div:end]

[%@lib@member max_exponent10[!numeric_limits]]
[codeblock:declaration]
static constexpr int  max_exponent10;
[codeblock:end]

[div:description]
[para]
[:en]
Maximum positive integer such that 10 raised to that power is in the range of
representable finite floating-point numbers.[#:fn]
[:zh_CN]
使得以 10 为底的该指数的幂处于可表示的有穷的浮点数的值域之中的最大正整数[#:fn]。

[note:foot]
[:en]
Equivalent to [`FLT_MAX_10_EXP], [`DBL_MAX_10_EXP], [`LDBL_MAX_10_EXP].
[:zh_CN]
等价于 [`FLT_MAX_10_EXP]，[`DBL_MAX_10_EXP]，[`LDBL_MAX_10_EXP]。
[note:end]

[para]
[:en]
Meaningful for all floating-point types.
[:zh_CN]
对于所有浮点类型有意义。
[div:end]

[%@lib@member has_infinity[!numeric_limits]]
[codeblock:declaration]
static constexpr bool has_infinity;
[codeblock:end]

[div:description]
[para]
[:en]
[`true] if the type has a representation for positive infinity.
[:zh_CN]
若该类型具有正无穷的表示则为 [`true]。

[para]
[:en]
Meaningful for all floating-point types.
[:zh_CN]
对于所有浮点类型有意义。

[para]
[:en]
Shall be [`true] for all specializations in which [`is_iec559 != false].
[:zh_CN]
对于 [`is_iec559 != false] 的所有特例均应当为 [`true]。
[div:end]

[%@lib@member has_quiet_NaN[!numeric_limits]]
[codeblock:declaration]
static constexpr bool has_quiet_NaN;
[codeblock:end]

[div:description]
[para]
[:en]
[`true] if the type has a representation for a quiet (non-signaling) [=lq]Not a
Number[=rq].[#:fn]
[:zh_CN]
若该类型具有静默（无信号的）“非数字（NaN）”的表示则为 [`true][#:fn]。

[note:foot]
[:en]
Required by LIA-1.
[:zh_CN]
由 LIA-1 所规定。
[note:end]

[para]
[:en]
Meaningful for all floating-point types.
[:zh_CN]
对于所有浮点类型有意义。

[para]
[:en]
Shall be [`true] for all specializations in which [`is_iec559 != false].
[:zh_CN]
对于 [`is_iec559 != false] 的所有特例均应当为 [`true]。
[div:end]

[%@lib@member has_signaling_NaN[!numeric_limits]]
[codeblock:declaration]
static constexpr bool has_signaling_NaN;
[codeblock:end]

[div:description]
[para]
[:en]
[`true] if the type has a representation for a signaling [=lq]Not a Number[=rq].[#:fn]
[:zh_CN]
若该类型具有发信“非数字（NaN）”的表示则为 [`true][#:fn]。

[note:foot]
[:en]
Required by LIA-1.
[:zh_CN]
由 LIA-1 所规定。
[note:end]

[para]
[:en]
Meaningful for all floating-point types.
[:zh_CN]
对于所有浮点类型有意义。

[para]
[:en]
Shall be [`true] for all specializations in which [`is_iec559 != false].
[:zh_CN]
对于 [`is_iec559 != false] 的所有特例应当为 [`true]。
[div:end]

[%@lib@member infinity[!numeric_limits]]
[codeblock:declaration]
static constexpr T infinity() noexcept;
[codeblock:end]

[div:description]
[para]
[:en]
Representation of positive infinity, if available.[#:fn]
[:zh_CN]
如果可用则表示正无穷[#:fn]。

[note:foot]
[:en]
Required by LIA-1.
[:zh_CN]
由 LIA-1 所规定。
[note:end]

[para]
[:en]
Meaningful for all specializations for which [`has_infinity != false].
[:zh_CN]
对于 [`has_infinity != false] 的所有特例有意义。

[:en]
Required in specializations for which [`is_iec559 != false].
[:zh_CN]
在 [`is_iec559 != false] 的特例中是必要的。
[div:end]

[%@lib@member quiet_NaN[!numeric_limits]]
[codeblock:declaration]
static constexpr T quiet_NaN() noexcept;
[codeblock:end]

[div:description]
[para]
[:en]
Representation of a quiet [=lq]Not a Number[=rq], if available.[#:fn]
[:zh_CN]
如果可用则表示静默“非数字（NaN）”[#:fn]。

[note:foot]
[:en]
Required by LIA-1.
[:zh_CN]
由 LIA-1 所规定。
[note:end]

[para]
[:en]
Meaningful for all specializations for which [`has_quiet_NaN != false].
[:zh_CN]
对于 [`has_infinity != false] 的所有特例有意义。

[:en]
Required in specializations for which [`is_iec559 != false].
[:zh_CN]
在 [`is_iec559 != false] 的特例中是必要的。
[div:end]

[%@lib@member signaling_NaN[!numeric_limits]]
[codeblock:declaration]
static constexpr T signaling_NaN() noexcept;
[codeblock:end]

[div:description]
[para]
[:en]
Representation of a signaling [=lq]Not a Number[=rq], if available.[#:fn]
[:zh_CN]
如果可用则表示发信“非数字（NaN）”[#:fn]。

[note:foot]
[:en]
Required by LIA-1.
[:zh_CN]
由 LIA-1 所规定。
[note:end]

[para]
[:en]
Meaningful for all specializations for which [`has_signaling_NaN != false].
[:zh_CN]
对于 [`has_infinity != false] 的所有特例有意义。

[:en]
Required in specializations for which [`is_iec559 != false].
[:zh_CN]
在 [`is_iec559 != false] 的特例中是必要的。
[div:end]

[%@lib@member denorm_min[!numeric_limits]]
[codeblock:declaration]
static constexpr T denorm_min() noexcept;
[codeblock:end]

[div:description]
[para]
[:en]
[%number[!subnormal]]
Minimum positive subnormal value, if available.[#:fn]
[:zh_CN]
[%数值[!次规范的～]]
最小正数次规范的值，如果存在[#:fn]。

[note:foot]
[:en]
Required by LIA-1.
[:zh_CN]
由 LIA-1 所规定。
[note:end]

[:en]
Otherwise, minimum positive normalized value.
[:zh_CN]
否则，为最小正规范值。

[para]
[:en]
Meaningful for all floating-point types.
[:zh_CN]
对于所有浮点类型有意义。
[div:end]

[%@lib@member is_iec559[!numeric_limits]]
[codeblock:declaration]
static constexpr bool is_iec559;
[codeblock:end]

[div:description]
[para]
[:en]
[`true] if and only if the type adheres to ISO/IEC/IEEE 60559.[#:fn]
[:zh_CN]
当且仅当该类型符合 ISO/IEC/IEEE 60559 时为 [`true][#:fn]。

[note:foot]
[:en]
ISO/IEC/IEEE 60559:2020 is the same as IEEE 754-2019.
[:zh_CN]
ISO/IEC/IEEE 60559:2020 和 IEEE 754-2019 相同。
[note:end]

[begin:note]
[:en] The value is [`true] for any of the types [`float16_t], [`float32_t],
[`float64_t], or [`float128_t], if present ([#basic.extended.fp]).
[:zh_CN] 对于 [`float16_t]，[`float32_t]，[`float64_t]，和 [`float128_t] 中的
任何类型（[#basic.extended.fp]），若其存在则该值为 [`true]。
[end:note]

[para]
[:en]
Meaningful for all floating-point types.
[:zh_CN]
对于所有浮点类型有意义。
[div:end]

[%@lib@member is_bounded[!numeric_limits]]
[codeblock:declaration]
static constexpr bool is_bounded;
[codeblock:end]

[div:description]
[para]
[:en]
[`true] if the set of values representable by the type is finite.[#:fn]
[:zh_CN]
若该类型可表示的值的集合是有穷的则为 [`true][#:fn]。

[note:foot]
[:en]
Required by LIA-1.
[:zh_CN]
由 LIA-1 所规定。
[note:end]

[begin:note]
[:en]
All fundamental types ([#basic.fundamental]) are bounded.
[:zh_CN]
所有基础类型（[#basic.fundamental]）都是有界的。

[:en]
This member would be [`false] for arbitrary precision types.
[:zh_CN]
此成员对于任意精度类型应该为 [`false]。
[end:note]

[para]
[:en]
Meaningful for all specializations.
[:zh_CN]
对于所有特例有意义。
[div:end]

[%@lib@member is_modulo[!numeric_limits]]
[codeblock:declaration]
static constexpr bool is_modulo;
[codeblock:end]

[div:description]
[para]
[:en]
[`true] if the type is modulo.[#:fn]
[:zh_CN]
若该类型按模计算则为 [`true][#:fn]。

[note:foot]
[:en]
Required by LIA-1.
[:zh_CN]
由 LIA-1 所规定。
[note:end]

[:en]
A type is modulo if, for any operation involving [`+], [`-], or [`*] on values
of that type whose result would fall outside the range [=crange(min(),max())],
the value returned differs from the true value by an integer multiple of
[`max() - min() + 1].
[:zh_CN]
若对于某个类型的值进行涉及 [`+]、[`-] 或 [`*] 的任何操作的结果可能超出范围
[=crange(min(),max())]，其所返回的值与真值之间相差 [`max() - min() + 1] 的整数倍，
则该类型是按模计算的。

[para]
[begin:example]
[:en]
[`is_modulo] is [`false] for signed integer types ([#basic.fundamental]) unless
an implementation, as an extension to this document, defines signed integer
overflow to wrap.
[:zh_CN]
[`is_modulo] 对于有符号整数类型（[#basic.fundamental]）为 [`false]，除非某个实现
以对本文档的扩展的形式将有符号整数的溢出定义为回绕。
[end:example]

[para]
[:en]
Meaningful for all specializations.
[:zh_CN]
对于所有特例有意义。
[div:end]

[%@lib@member traps[!numeric_limits]]
[codeblock:declaration]
static constexpr bool traps;
[codeblock:end]

[div:description]
[para]
[:en]
[`true] if, at the start of the program, there exists a value of the type that
would cause an arithmetic operation using that value to trap.[#:fn]
[:zh_CN]
在程序启动时，若存在该类型的一个值，能够导致使用该值的算术运算陷入陷阱，则为
[`true][#:fn]。

[note:foot]
[:en]
Required by LIA-1.
[:zh_CN]
由 LIA-1 所规定。
[note:end]

[para]
[:en]
Meaningful for all specializations.
[:zh_CN]
对于所有特例有意义。
[div:end]

[%@lib@member tinyness_before[!numeric_limits]]
[codeblock:declaration]
static constexpr bool tinyness_before;
[codeblock:end]

[div:description]
[para]
[:en]
[`true] if tinyness is detected before rounding.[#:fn]
[:zh_CN]
若在舍入之前检测微小量则为 [`true][#:fn]。

[note:foot]
[:en]
Refer to ISO/IEC/IEEE 60559.
[:zh_CN]
参考 ISO/IEC/IEEE 60559。

[:en]
Required by LIA-1.
[:zh_CN]
由 LIA-1 所规定。
[note:end]

[para]
[:en]
Meaningful for all floating-point types.
[:zh_CN]
对于所有浮点类型有意义。
[div:end]

[%@lib@member round_style[!numeric_limits]]
[codeblock:declaration]
static constexpr float_round_style round_style;
[codeblock:end]

[div:description]
[para]
[:en]
The rounding style for the type.[#:fn]
[:zh_CN]
该类型的舍入方式[#:fn]。

[note:foot]
[:en]
Equivalent to [`FLT_ROUNDS].
[:zh_CN]
等价于 [`FLT_ROUNDS]。

[:en]
Required by LIA-1.
[:zh_CN]
由 LIA-1 所规定。
[note:end]

[para]
[:en]
Meaningful for all floating-point types.
[:zh_CN]
对于所有浮点类型有意义。

[:en]
Specializations for integer types shall return [`round_toward_zero].
[:zh_CN]
整数类型的特例应当返回 [`round_toward_zero]。
[div:end]
