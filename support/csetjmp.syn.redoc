[section#csetjmp.syn
    [:en] Header [`<csetjmp>] synopsis
    [:zh_CN] 头文件 [`<csetjmp>] 纲要
]

[%@library jmp_buf]
[%@library longjmp]
[%@library setjmp]
[codeblock:synopsis [!:mark SeeBelow] ]
namespace std {
  using jmp_buf = [=SeeBelow];
  [[noreturn]] void longjmp(jmp_buf env, int val);
}

#define setjmp(env) [=SeeBelow]
[codeblock:end]

[para]
[%@header setjmp.h]
[:en]
The contents of the header [?libheader@def csetjmp] are the same as the C
standard library header [?libheader setjmp.h].
[:zh_CN]
头文件 [?libheader@def csetjmp] 的内容和 C 标准程序库头文件 [?libheader setjmp.h]
相同。

[para]
[:en]
The function signature [%@library longjmp] [`longjmp(jmp_buf jbuf, int val)]
has more restricted behavior in this document.
[:zh_CN]
函数签名 [%@library longjmp] [`longjmp(jmp_buf jbuf, int val)] 在本文档中有更加
受限制的行为。

[:en]
A [`setjmp]/[`longjmp] call pair has undefined behavior if replacing the
[`setjmp] and [`longjmp] by [`catch] and [`throw] would invoke any non-trivial
destructors for any automatic objects.
[:zh_CN]
若将某个 [`setjmp]/[`longjmp] 调用对中的 [`setjmp] 和 [`longjmp] 替换为 [`catch]
和 [`throw] 将会导致调用任何自动对象的非平凡析构函数，则它具有未定义的行为。

[:en]
A call to [`setjmp] or [`longjmp] has undefined behavior if invoked in a
suspension context of a coroutine ([#expr.await]).
[:zh_CN]
如果在某个协程的暂停语境中进行对 [`setjmp] 或 [`longjmp] 的调用（[#expr.await]），
则它具有未定义的行为。

[para:xref@c] 7.13
