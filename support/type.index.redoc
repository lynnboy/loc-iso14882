[section#type.index
    [:en] Class [`type_index]
    [:zh_CN] 类 [`type_index]
]

[%@lib type_index]
[codeblock:synopsis]
namespace std {
  class type_index {
  public:
    type_index(const type_info& rhs) noexcept;
    bool operator==(const type_index& rhs) const noexcept;
    bool operator< (const type_index& rhs) const noexcept;
    bool operator> (const type_index& rhs) const noexcept;
    bool operator<=(const type_index& rhs) const noexcept;
    bool operator>=(const type_index& rhs) const noexcept;
    strong_ordering operator<=>(const type_index& rhs) const noexcept;
    size_t hash_code() const noexcept;
    const char* name() const noexcept;

  private:
    const type_info* target;    // [=expos]
    // [:en] Note that the use of a pointer here, rather than a reference, \
    [:zh_CN] 注意此处使用了指针，而不是引用，
    // [:en@~] means that the default copy/move constructor and assignment \
    [:zh_CN@~] 因此默认的复制/移动构造函数和赋值操作符
    // [:en@~] operators will be provided and work as expected. \
    [:zh_CN@~] 将按照预期被提供并正常工作。
  };
}
[codeblock:end]

[para]
[:en] The class [`type_index] provides a simple wrapper for [`type_info] which
can be used as an index type in associative containers ([#associative]) and in
unordered associative containers ([#unord]).
[:zh_CN] 类 [`type_index] 提供了对 [`type_info] 的简单封装，可以用作关联容器
（[#associative]）的索引类型，也可以用在无序关联容器（[#unord]）中。

[%@lib@ctor type_index]
[codeblock:declaration]
type_index(const type_info& rhs) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Constructs a [`type_index] object, the equivalent of [`target = &rhs].
[:zh_CN] 构造一个 [`type_index] 对象，等价于 [`target = &rhs]。
[div:end]

[%@lib@member operator==[!type_index]]
[codeblock:declaration]
bool operator==(const type_index& rhs) const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`*target == *rhs.target].
[:zh_CN] [`*target == *rhs.target]。
[div:end]

[%@lib@member operator<[!type_index]]
[codeblock:declaration]
bool operator<(const type_index& rhs) const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`target->before(*rhs.target)].
[:zh_CN] [`target->before(*rhs.target)]。
[div:end]

[%@lib@member operator>[!type_index]]
[codeblock:declaration]
bool operator>(const type_index& rhs) const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`rhs.target->before(*target)].
[:zh_CN] [`rhs.target->before(*target)]。
[div:end]

[%@lib@member operator<=[!type_index]]
[codeblock:declaration]
bool operator<=(const type_index& rhs) const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`!rhs.target->before(*target)].
[:zh_CN] [`!rhs.target->before(*target)]。
[div:end]

[%@lib@member operator>=[!type_index]]
[codeblock:declaration]
bool operator>=(const type_index& rhs) const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`!target->before(*rhs.target)].
[:zh_CN] [`!target->before(*rhs.target)]。
[div:end]

[%@lib@member operator<=>[!type_index]]
[codeblock:declaration]
strong_ordering operator<=>(const type_index& rhs) const noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
if (*target == *rhs.target) return strong_ordering::equal;
if (target->before(*rhs.target)) return strong_ordering::less;
return strong_ordering::greater;
[codeblock:end]
[div:end]

[%@lib@member hash_code[!type_index]]
[codeblock:declaration]
size_t hash_code() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`target->hash_code()].
[:zh_CN] [`target->hash_code()]。
[div:end]

[%@lib@member name[!type_index]]
[codeblock:declaration]
const char* name() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`target->name()].
[:zh_CN] [`target->name()]。
[div:end]

[%@lib@member hash[!type_index]]
[codeblock:declaration]
template<> struct hash<type_index>;
[codeblock:end]

[div:description]
[para]
[:en] For an object [`index] of type [`type_index], [`hash<type_index>()(index)]
shall evaluate to the same result as [`index.hash_code()].
[:zh_CN] 对于 [`type_index] 类型的对象 [`index]，[`hash<type_index>()(index)]
的求值结果应当与 [`index.hash_code()] 相同。
[div:end]
