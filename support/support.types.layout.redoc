[section#support.types.layout
    [:en] Sizes, alignments, and offsets
    [:zh_CN] 大小，对齐和偏移量
]

[para]
[%@library offsetof]
[:en]
The macro [`offsetof([*type], [*member-designator])] has the same semantics as
the corresponding macro in the C standard library header [`<stddef.h>], but
accepts a restricted set of [`[*type]] arguments in this document.
[:zh_CN]
宏 [`offsetof([*type], [*member-designator])] 具有和 C 标准程序库头文件
[`<stddef.h>] 中的对应宏相同的语义，但它在本文档中接受一个有限制的实参
[`[*type]] 的集合。

[:en]
Use of the [`offsetof] macro with a [`[*type]] other than a standard-layout
class ([#class.prop]) is conditionally-supported.[#:note#fn:$1]
[:zh_CN]
在并非标注布局类（[#class.prop]）的 [`[*type]] 使用 [`offsetof] 宏，是有条件支持
的。[#:note#fn:$1]

[note:foot#fn:$1]
[:en]
Note that [`offsetof] is required to work as specified even if unary
[`operator&] is overloaded for any of the types involved.
[:zh_CN]
注意 [`offsetof] 在它所涉及的任何类型重载了一元 [`operator&] 时也要按其所指定的
工作。
[note:end]

[:en]
The expression [`offsetof([*type], [*member-designator])] is never
type-dependent ([#temp.dep.expr]) and it is value-dependent
([#temp.dep.constexpr]) if and only if [`[*type]] is dependent.
[:zh_CN]
表达式 [`offsetof([*type], [*member-designator])] 永远不是类型待决的
（[#temp.dep.expr]）并且当且仅当 [*type] 待决时它是值待决的
（[#temp.dep.constexpr]）。

[:en]
The result of applying the [`offsetof] macro to a static data member or a
function member is undefined.
[:zh_CN]
对静态数据成员或函数成员应用宏 [`offsetof] 的结果是未定义的。

[:en]
No operation invoked by the [`offsetof] macro shall throw an exception and
[`noexcept(offsetof([*type], [*member-designator]))] shall be [`true].
[:zh_CN]
由 [`offsetof] 宏所引发的操作不应当抛出异常，且
[`noexcept(offsetof([*type], [*member-designator]))] 应当为 [`true]。

[para]
[:en]
The type [`ptrdiff_t] is an [%@impldef type of [`ptrdiff_t]]
implementationd-defined signed integer type that can hold the difference of two
subscripts in an array object, as described in [#expr.add].
[:zh_CN]
类型 [`ptrdiff_t] 是[%@impldef [`ptrdiff_t] 的类型]由实现定义的有符号整数类型，
并能够持有数组对象的两个下标的差，如 [#expr.add] 所述。

[para]
[:en]
The type [`size_t] is an [%@impldef type of [`size_t]] implementation-defined
unsigned integer type that is large enough to contain the size in bytes of any
object ([#expr.sizeof]).
[:zh_CN]
类型 [`size_t] 是[%@impldef [`size_t] 的类型]由实现定义的无符号整数类型，并足以
包含任意对象的字节大小（[#expr.sizeof]）。

[para]
[enter:note]
[:en]
It is recommended that implementations choose types for [`ptrdiff_t] and
[`size_t] whose integer conversion ranks ([#conv.rank]) are no greater than that
of [`signed long int] unless a larger size is necessary to contain all the
possible values.
[:zh_CN]
推荐实现为 [`ptrdiff_t] 和 [`size_t] 所选择的类型的整数转换等级（[#conv.rank]）
不高于 [`signed long int]，除非需要更大的大小以包含其可能的值。
[exit:note]

[para]
[:en]
The type [%@library max_align_t] [`max_align_t] is a trivial standard-layout
type whose alignment requirement is at least as great as that of every scalar
type, and whose alignment requirement is supported in every context
([#basic.align]).
[:zh_CN]
类型 [%@library max_align_t] [`max_align_t] 是个对齐要求至少与每个标量类型一样大
，并且其对齐要求在任何语境中都被支持的平凡标准布局类型（[#basic.align]）。

[para:xref]
ISO C 7.19
