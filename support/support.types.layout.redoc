[section#support.types.layout
    [:en] Sizes, alignments, and offsets
    [:zh_CN] 大小，对齐和偏移量
]

[para]
[%@lib offsetof]
[:en] The macro [`offsetof([^type], [^member-designator])] has the same semantics
as the corresponding macro in the C standard library header [?libheader stddef.h],
but accepts a restricted set of [`[^type]] arguments in this document.
[:zh_CN] 宏 [`offsetof([^type], [^member-designator])] 具有和 C 标准程序库头文件
[?libheader stddef.h] 中的对应宏相同的语义，但它在本文档中接受一个有限制的实参
[`[^type]] 的集合。

[:en] Use of the [`offsetof] macro with a [`[^type]] other than a standard-layout
class ([#class.prop]) is conditionally-supported.[#:fn]
[:zh_CN] 对并非标准布局类（[#class.prop]）的 [`[^type]] 使用 [`offsetof] 宏，
是有条件支持的[#:fn]。

[note:foot]
[:en] Note that [`offsetof] is required to work as specified even if unary
[`operator&] is overloaded for any of the types involved.
[:zh_CN] 注意，即便涉及的任何类型重载了一元 [`operator&]， [`offsetof] 也要按规定工作。
[note:end]

[:en] The expression [`offsetof([^type], [^member-designator])] is never
type-dependent ([#temp.dep.expr]) and it is value-dependent ([#temp.dep.constexpr])
if and only if [`[^type]] is dependent.
[:zh_CN] 表达式 [`offsetof([^type], [^member-designator])] 永远不是类型待决的
（[#temp.dep.expr]）并且当且仅当 [^type] 待决时它是值待决的（[#temp.dep.constexpr]）。

[:en] The result of applying the [`offsetof] macro to a static data member or a
function member is undefined.
[:zh_CN] 对静态数据成员或函数成员应用宏 [`offsetof] 的结果是未定义的。

[:en] No operation invoked by the [`offsetof] macro shall throw an exception and
[`noexcept(offsetof([^type], [^member-designator]))] shall be [`true].
[:zh_CN] 由 [`offsetof] 宏所引发的操作不应当抛出异常，且
[`noexcept(offsetof([^type], [^member-designator]))] 应当为 [`true]。

[para]
[:en] The type [`ptrdiff_t] is an [?impldef type of [`ptrdiff_t]] signed integer
type that can hold the difference of two subscripts in an array object, as
described in [#expr.add].
[:zh_CN] 类型 [`ptrdiff_t] 是[?impldef [`ptrdiff_t] 的类型]有符号整数类型，
并能够持有数组对象的两个下标的差，如 [#expr.add] 所述。

[para]
[:en] The type [`size_t] is an [?impldef type of [`size_t]] unsigned integer type
that is large enough to contain the size in bytes of any object ([#expr.sizeof]).
[:zh_CN] 类型 [`size_t] 是[?impldef [`size_t] 的类型]无符号整数类型，并足以包含
任意对象的字节大小（[#expr.sizeof]）。

[para:recommended]
[:en] An implementations should choose types for [`ptrdiff_t] and [`size_t]
whose integer conversion ranks ([#conv.rank]) are no greater than that of
[`signed long int] unless a larger size is necessary to contain all the
possible values.
[:zh_CN] 实现最好为 [`ptrdiff_t] 和 [`size_t] 选择整数转换等级（[#conv.rank]）
不高于 [`signed long int] 的类型，除非需要更大的大小以包含其可能的值。

[para]
[:en] The type [%@lib max_align_t] [`max_align_t] is a trivially copyable
standard-layout type whose alignment requirement is at least as great as that of
every scalar type, and whose alignment requirement is supported in every context
([#basic.align]).
[:zh_CN] 类型 [%@lib max_align_t] [`max_align_t] 是个对齐要求至少与每个标量类型
一样大，并且其对齐要求在任何语境中都被支持的可平凡复制的标准布局类型（[#basic.align]）。

[:en] [`std::is_trivially_default_constructible_v<max_align_t>] is [`true].
[:zh_CN] [`std::is_trivially_default_constructible_v<max_align_t>] 为 [`true]。

[para:xref@c] 7.22
