[section#type.info
    [:en] Class [`type_info]
    [:zh_CN] 类 [`type_info]
]

[%@lib type_info]
[codeblock:synopsis]
namespace std {
  class type_info {
  public:
    virtual ~type_info();
    constexpr bool operator==(const type_info& rhs) const noexcept;
    bool before(const type_info& rhs) const noexcept;
    size_t hash_code() const noexcept;
    const char* name() const noexcept;

    type_info(const type_info& rhs) = delete;
    type_info& operator=(const type_info& rhs) = delete;
  };
}
[codeblock:end]

[para]
[:en] The class [`type_info] describes type information generated by the
implementation ([#expr.typeid]).
[:zh_CN] [`type_info] 类描述由实现生成的类型信息（[#expr.typeid]）。

[:en] Objects of this class effectively store a pointer to a name for the type, and
an encoded value suitable for comparing two types for equality or collating order.
[:zh_CN] 此类的对象效果为保存一个指向类型的名字的指针，以及一个适用于比较两个类型的相等性
或校对顺序的编码值。

[:en] The names, encoding rule, and collating sequence for types are all unspecified
[%unspecified] and may differ between programs.
[:zh_CN] 类型的名字，编码规则，以及校对顺序都是[%未指明的]未指明的，并可能随程序而不同。

[%@lib@member operator==[!type_info]]
[codeblock:declaration]
constexpr bool operator==(const type_info& rhs) const noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Compares the current object with [`rhs].
[:zh_CN] 比较当前对象与 [`rhs]。

[para:returns]
[:en] [`true] if the two values describe the same type.
[:zh_CN] 若两个值描述相同类型则为 [`true]。
[div:end]

[%@lib@member before[!type_info]]
[codeblock:declaration]
bool before(const type_info& rhs) const noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Compares the current object with [`rhs].
[:zh_CN] 比较当前对象与 [`rhs]。

[para:returns]
[:en] [`true] if [`*this] precedes [`rhs] in the implementation[=']s collation order.
[:zh_CN] 若在该实现的校对顺序中 [`*this] 在 [`rhs] 之前则为 [`true]。
[div:end]

[%@lib@member hash_code[!type_info]]
[codeblock:declaration]
size_t hash_code() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] An unspecified value, except that within a single execution of the program,
it shall return the same value for any two [`type_info] objects which compare equal.
[:zh_CN] 未指明的值，但在程序的单次执行中，对于两个比较为相等的 [`type_info] 对象，应当返回相同的值。

[para:remarks]
[:en] An implementation should return different values for two [`type_info] objects
which do not compare equal.
[:zh_CN] 实现最好为两个比较为不相等的 [`type_info] 对象返回不同的值。
[div:end]

[%@lib@member name[!type_info]]
[codeblock:declaration]
const char* name() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] An [?impldef return value of [`type_info::name()]] [=ntbs].
[:zh_CN] 一个[?impldef [`type_info::name()] 的返回值] [=ntbs]。

[para:remarks]
[:en] The message may be a null-terminated multibyte string ([#multibyte.strings]),
suitable for conversion and display as a [`wstring] ([#string.classes], [#locale.codecvt]).
[:zh_CN] 该消息可能是个空终结多字节字符串（[#multibyte.strings]），且适于转换并显示为一个
[`wstring]（[#string.classes]，[#locale.codecvt]）。
[div:end]
