[section#coroutine.handle.noop
    [:en] Class [`coroutine_handle<noop_coroutine_promise>]
    [:zh_CN] 类 [`coroutine_handle<noop_coroutine_promise>]
]

[%@lib coroutine_handle<noop_coroutine_promise>]
[codeblock:synopsis]
namespace std {
  template<>
  struct coroutine_handle<noop_coroutine_promise> : coroutine_handle<>
  {
    // [:en] [#coroutine.handle.noop.observers], observers \
       [:zh_CN] [#coroutine.handle.noop.observers]，探察函数
    constexpr explicit operator bool() const noexcept;
    constexpr bool done() const noexcept;

    // [:en] [#coroutine.handle.noop.resumption], resumption \
       [:zh_CN] [#coroutine.handle.noop.resumption]，恢复
    constexpr void operator()() const noexcept;
    constexpr void resume() const noexcept;
    constexpr void destroy() const noexcept;

    // [:en] [#coroutine.handle.noop.promise], promise access \
       [:zh_CN] [#coroutine.handle.noop.promise]，对承诺的访问
    noop_coroutine_promise& promise() const noexcept;

    // [:en] [#coroutine.handle.noop.address], address \
       [:zh_CN] [#coroutine.handle.noop.address]，地址
    constexpr void* address() const noexcept;
  private:
    coroutine_handle([[redoc("=unspec")]]);
  };
}
[codeblock:end]

[include coroutine.handle.noop.observers]

[include coroutine.handle.noop.resumption]

[include coroutine.handle.noop.promise]

[include coroutine.handle.noop.address]
