[section#cstdlib.syn
    [:en] Header [`<cstdlib>] synopsis
    [:zh_CN] 头文件 [`<cstdlib>] 纲要
]

[%@hdr@def cstdlib]
[%@lib EXIT_FAILURE]
[%@lib EXIT_SUCCESS]
[%@lib MB_CUR_MAX]
[%@lib NULL]
[%@lib RAND_MAX]
[%@lib _Exit]
[%@lib abort]
[%@lib abs]
[%@lib aligned_alloc]
[%@lib at_quick_exit]
[%@lib atexit]
[%@lib atof]
[%@lib atoi]
[%@lib atol]
[%@lib atoll]
[%@lib bsearch]
[%@lib calloc]
[%@lib div]
[%@lib div_t]
[%@lib exit]
[%@lib free]
[%@lib getenv]
[%@lib labs]
[%@lib ldiv]
[%@lib ldiv_t]
[%@lib llabs]
[%@lib lldiv]
[%@lib lldiv_t]
[%@lib malloc]
[%@lib mblen]
[%@lib mbstowcs]
[%@lib mbtowc]
[%@lib qsort]
[%@lib quick_exit]
[%@lib rand]
[%@lib realloc]
[%@lib size_t]
[%@lib srand]
[%@lib strtod]
[%@lib strtof]
[%@lib strtol]
[%@lib strtold]
[%@lib strtoll]
[%@lib strtoul]
[%@lib strtoull]
[%@lib system]
[%@lib wcstombs]
[%@lib wctomb]

[codeblock:synopsis]
namespace std {
  using size_t = [[redoc("[=seebelow]")]];
  using div_t = [[redoc("[=seebelow]")]];
  using ldiv_t = [[redoc("[=seebelow]")]];
  using lldiv_t = [[redoc("[=seebelow]")]];
}

#define NULL [[redoc("[=seebelow]")]]
#define EXIT_FAILURE [[redoc("[=seebelow]")]]
#define EXIT_SUCCESS [[redoc("[=seebelow]")]]
#define RAND_MAX [[redoc("[=seebelow]")]]
#define MB_CUR_MAX [[redoc("[=seebelow]")]]

namespace std {
  // [:en] Exposition-only function type aliases \
  [:zh_CN] 仅为阐释的函数类型别名
  extern "C" using [[redoc("^>")]]c-atexit-handler = void();                        // [=expos]
  extern "C++" using [[redoc("^>")]]atexit-handler = void();                        // [=expos]
  extern "C" using [[redoc("^>")]]c-compare-pred = int(const void*, const void*);   // [=expos]
  extern "C++" using [[redoc("^>")]]compare-pred = int(const void*, const void*);   // [=expos]

  // [:en] [#support.start.term], start and termination \
  [:zh_CN] [#support.start.term]，启动和终止
  [[noreturn]] void abort() noexcept;
  int atexit([[redoc("^>")]]c-atexit-handler* func) noexcept;
  int atexit([[redoc("^>")]]atexit-handler* func) noexcept;
  int at_quick_exit([[redoc("^>")]]c-atexit-handler* func) noexcept;
  int at_quick_exit([[redoc("^>")]]atexit-handler* func) noexcept;
  [[noreturn]] void exit(int status);
  [[noreturn]] void _Exit(int status) noexcept;
  [[noreturn]] void quick_exit(int status) noexcept;

  char* getenv(const char* name);
  int system(const char* string);

  // [:en] [#c.malloc], C library memory allocation \
  [:zh_CN] [#c.malloc]，C 程序库的内存分配
  void* aligned_alloc(size_t alignment, size_t size);
  void* calloc(size_t nmemb, size_t size);
  void free(void* ptr);
  void* malloc(size_t size);
  void* realloc(void* ptr, size_t size);

  double atof(const char* nptr);
  int atoi(const char* nptr);
  long int atol(const char* nptr);
  long long int atoll(const char* nptr);
  double strtod(const char* nptr, char** endptr);
  float strtof(const char* nptr, char** endptr);
  long double strtold(const char* nptr, char** endptr);
  long int strtol(const char* nptr, char** endptr, int base);
  long long int strtoll(const char* nptr, char** endptr, int base);
  unsigned long int strtoul(const char* nptr, char** endptr, int base);
  unsigned long long int strtoull(const char* nptr, char** endptr, int base);

  // [:en] [#c.mb.wcs], multibyte / wide string and character conversion functions \
  [:zh_CN] [#c.mbm.wcs]，多字节/宽字符串和字符转换函数
  int mblen(const char* s, size_t n);
  int mbtowc(wchar_t* pwc, const char* s, size_t n);
  int wctomb(char* s, wchar_t wchar);
  size_t mbstowcs(wchar_t* pwcs, const char* s, size_t n);
  size_t wcstombs(char* s, const wchar_t* pwcs, size_t n);

  // [:en] [#alg.c.library], C standard library algorithms \
  [:zh_CN] [#alg.c.library]，C 标准程序库的算法
  void* bsearch(const void* key, const void* base, size_t nmemb, size_t size,
                [[redoc("^>")]]c-compare-pred* compar);
  void* bsearch(const void* key, const void* base, size_t nmemb, size_t size,
                [[redoc("^>")]]compare-pred* compar);
  void qsort(void* base, size_t nmemb, size_t size, [[redoc("^>")]]c-compare-pred* compar);
  void qsort(void* base, size_t nmemb, size_t size, [[redoc("^>")]]compare-pred* compar);

  // [:en] [#c.math.rand], low-quality random number generation \
  [:zh_CN] [#c.math.rand]，低品质的随机数发生
  int rand();
  void srand(unsigned int seed);

  // [:en] [#c.math.abs], absolute values \
  [:zh_CN] [#c.math.abs]，绝对值
  int abs(int j);
  long int abs(long int j);
  long long int abs(long long int j);
  float abs(float j);
  double abs(double j);
  long double abs(long double j);

  long int labs(long int j);
  long long int llabs(long long int j);

  div_t div(int numer, int denom);
  ldiv_t div(long int numer, long int denom);                   // [:en] see [#library.c] \
                                                                [:zh_CN] 参见 [#library.c]
  lldiv_t div(long long int numer, long long int denom);        // [:en] see [#library.c] \
                                                                [:zh_CN] 参见 [#library.c]
  ldiv_t ldiv(long int numer, long int denom);
  lldiv_t lldiv(long long int numer, long long int denom);
}
[codeblock:end]

[para]
[:en]
The contents and meaning of the header [?libheader cstdlib] are the same as the
C standard library header [?libheader stdlib.h], except that it does not declare
the type [`:key wchar_t], and except as noted in [#support.types.nullptr],
[#support.types.layout], [#support.start.term], [#c.malloc], [#c.mb.wcs],
[#alg.c.library], [#c.math.rand], and [#c.math.abs].
[:zh_CN]
头文件 [?libheader cstdlib] 的内容及其含义和 C 标准程序库头文件
[?libheader stdlib.h] 相同，但其并未声明类型 [`:key wchar_t]，并有如
[#support.types.nullptr]，[#support.types.layout]，[#support.start.term]，
[#c.malloc]，[#c.mb.wcs]，[#alg.c.library]，[#c.math.rand]，和 [#c.math.abs] 中
所注明的区别。

[begin:note]
[:en]
Several functions have additional overloads in this document, but they have the
same behavior as in the C standard library ([#library.c]).
[:zh_CN]
本文档中，一些函数有额外的重载，但它们与 C 标准程序库（[#library.c]）中的函数
具有相同的行为。
[end:note]

[para:xref@c] 7.22
