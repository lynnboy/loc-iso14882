[section#cstdlib.syn
    [:en] Header [`<cstdlib>] synopsis
    [:zh_CN] 头文件 [`<cstdlib>] 纲要
]

[%[`<cstdlib>][@cstdlib]]
[%@library [`<cstdlib>][@cstdlib]]
[%@library [`EXIT_FAILURE]]
[%@library [`EXIT_SUCCESS]]
[%@library [`MB_CUR_MAX]]
[%@library [`NULL]]
[%@library [`RAND_MAX]]
[%@library [`_Exit]]
[%@library [`abort]]
[%@library [`abs]]
[%@library [`aligned_alloc]]
[%@library [`at_quick_exit]]
[%@library [`atexit]]
[%@library [`atof]]
[%@library [`atoi]]
[%@library [`atol]]
[%@library [`atoll]]
[%@library [`bsearch]]
[%@library [`calloc]]
[%@library [`div]]
[%@library [`div_t]]
[%@library [`exit]]
[%@library [`free]]
[%@library [`getenv]]
[%@library [`labs]]
[%@library [`ldiv]]
[%@library [`ldiv_t]]
[%@library [`llabs]]
[%@library [`lldiv]]
[%@library [`lldiv_t]]
[%@library [`malloc]]
[%@library [`mblen]]
[%@library [`mbstowcs]]
[%@library [`mbtowc]]
[%@library [`qsort]]
[%@library [`quick_exit]]
[%@library [`rand]]
[%@library [`realloc]]
[%@library [`size_t]]
[%@library [`srand]]
[%@library [`strtod]]
[%@library [`strtof]]
[%@library [`strtol]]
[%@library [`strtold]]
[%@library [`strtoll]]
[%@library [`strtoul]]
[%@library [`strtoull]]
[%@library [`system]]
[%@library [`wcstombs]]
[%@library [`wctomb]]

[codeblock:synopsis [!:mark SeeBelow]
    [!:var c-atexit-handler atexit-handler c-compare-pred compare-pred] ]
namespace std {
  using size_t = [=SeeBelow];
  using div_t = [=SeeBelow];
  using ldiv_t = [=SeeBelow];
  using lldiv_t = [=SeeBelow];
}

#define NULL [=SeeBelow]
#define EXIT_FAILURE [=SeeBelow]
#define EXIT_SUCCESS [=SeeBelow]
#define RAND_MAX [=SeeBelow]
#define MB_CUR_MAX [=SeeBelow]

namespace std {
  // [:en] Exposition-only function type aliases
  // [|:zh_CN] 仅为解释的函数类型别名
  extern "C" using [*c-atexit-handler] = void();                        // [=Expos]
  extern "C++" using [*atexit-handler] = void();                        // [=Expos]
  extern "C" using [*c-compare-pred] = int(const void*, const void*);   // [=Expos]
  extern "C++" using [*compare-pred] = int(const void*, const void*);   // [=Expos]

  // [:en] [#support.start.term], start and termination
  // [|:zh_CN] [#support.start.term]，启动和终止
  [[noreturn]] void abort() noexcept;
  int atexit([*c-atexit-handler]* func) noexcept;
  int atexit([*atexit-handler]* func) noexcept;
  int at_quick_exit([*c-atexit-handler]* func) noexcept;
  int at_quick_exit([*atexit-handler]* func) noexcept;
  [[noreturn]] void exit(int status);
  [[noreturn]] void _Exit(int status) noexcept;
  [[noreturn]] void quick_exit(int status) noexcept;

  char* getenv(const char* name);
  int system(const char* string);

  // [:en] [#c.malloc], C library memory allocation
  // [|:zh_CN] [#c.malloc]，C 程序库的内存分配
  void* aligned_alloc(size_t alignment, size_t size);
  void* calloc(size_t nmemb, size_t size);
  void free(void* ptr);
  void* malloc(size_t size);
  void* realloc(void* ptr, size_t size);

  double atof(const char* nptr);
  int atoi(const char* nptr);
  long int atol(const char* nptr);
  long long int atoll(const char* nptr);
  double strtod(const char* nptr, char** endptr);
  float strtof(const char* nptr, char** endptr);
  long double strtold(const char* nptr, char** endptr);
  long int strtol(const char* nptr, char** endptr, int base);
  long long int strtoll(const char* nptr, char** endptr, int base);
  unsigned long int strtoul(const char* nptr, char** endptr, int base);
  unsigned long long int strtoull(const char* nptr, char** endptr, int base);

  // [:en] [#c.mb.wcs], multibyte / wide string and character conversion functions
  // [|:zh_CN] [#c.mbm.wcs]，多字节/宽字符串和字符转换函数
  int mblen(const char* s, size_t n);
  int mbtowc(wchar_t* pwc, const char* s, size_t n);
  int wctomb(char* s, wchar_t wchar);
  size_t mbstowcs(wchar_t* pwcs, const char* s, size_t n);
  size_t wcstombs(char* s, const wchar_t* pwcs, size_t n);

  // [:en] [#alg.c.library], C standard library algorithms
  // [|:zh_CN] [#alg.c.library]，C 标准程序库的算法
  void* bsearch(const void* key, const void* base, size_t nmemb, size_t size,
                [*c-compare-pred]* compar);
  void* bsearch(const void* key, const void* base, size_t nmemb, size_t size,
                [*compare-pred]* compar);
  void qsort(void* base, size_t nmemb, size_t size, [*c-compare-pred]* compar);
  void qsort(void* base, size_t nmemb, size_t size, [*compare-pred]* compar);

  // [:en] [#c.math.rand], low-quality random number generation
  // [|:zh_CN] [#c.math.rand]，低质量的随机数发生
  int rand();
  void srand(unsigned int seed);

  // [:en] [#c.math.abs], absolute values
  // [|:zh_CN] [#c.math.abs]，绝对值
  int abs(int j);
  long int abs(long int j);
  long long int abs(long long int j);
  float abs(float j);
  double abs(double j);
  long double abs(long double j);

  long int labs(long int j);
  long long int llabs(long long int j);

  div_t div(int numer, int denom);
  ldiv_t div(long int numer, long int denom);             // [:en] see [#library.c]
                                                          // [|:zh_CN] 参见 [#library.c]
  lldiv_t div(long long int numer, long long int denom);  // [:en] see [#library.c]
                                                          // [|:zh_CN] 参见 [#library.c]
  ldiv_t ldiv(long int numer, long int denom);
  lldiv_t lldiv(long long int numer, long long int denom);
}
[codeblock:end]

[para]
[:en]
The contents and meaning of the header [`<cstdlib>] are the same as
the C standard library header [`<stdlib.h>], except that it does not declare the
type [`wchar_t], and except as noted in [#support.types.nullptr],
[#support.types.layout], [#support.start.term], [#c.malloc], [#c.mb.wcs],
[#alg.c.library], [#c.math.rand], and [#c.math.abs].
[:zh_CN]
头文件 [`<cstdlib>] 的内容及其含义和 C 标准程序库头文件 [`<stdlib.h>] 相同，但
其并未声明类型 [`wchar_t]，以及如 [#support.types.nullptr]，
[#support.types.layout]，[#support.start.term]，[#c.malloc]，[#c.mb.wcs]，
[#alg.c.library]，[#c.math.rand]，和 [#c.math.abs] 中所注明的区别。

[enter:note]
[:en]
Several functions have additional overloads in this International Standard,
but they have the same behavior as in the C standard library ([#library.c]).
[:zh_CN]
本国际标准中，一些函数有额外的重载，但它们与 C 标准程序库（[#library.c]）中的
函数具有相同的行为。
[exit:note]

[para:xref] ISO C 7.22
