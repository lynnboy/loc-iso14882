[section#cmp.weakord
    [:en] Class [`weak_ordering]
    [:zh_CN] 类 [`weak_ordering]
]

[para]
[:en]
The [`weak_ordering] type is typically used as the result type of a three-way
comparison operator ([#expr.spaceship]) that (a) admits all of the six two-way
comparison operators ([#expr.rel], [#expr.eq]), and (b) does not imply
substitutability.
[:zh_CN]
[`weak_ordering] 类型通常被用作三路比较运算符（[#expr.spaceship]）的结果类型，
（A）允许全部六种双路比较运算符（[#expr.rel]，[#expr.eq]），（B）不蕴含可替代性。

[%@library weak_ordering]
[%@library less[!weak_ordering]]
[%@library weak_ordering[!less]]
[%@library equivalent[!weak_ordering]]
[%@library weak_ordering[!equivalent]]
[%@library greater[!weak_ordering]]
[%@library weak_ordering[!greater]]
[codeblock:synopsis [!:mark UnSpec] ]
namespace std {
  class weak_ordering {
    int value;  // [=Expos]

    // [:en] exposition-only constructor
    // [|:zh_CN] 仅用于阐释的构造函数
    constexpr explicit weak_ordering(eq v) noexcept : value(int(v)) {}  // [=Expos]
    constexpr explicit weak_ordering(ord v) noexcept : value(int(v)) {} // [=Expos]

  public:
    // [:en] valid values
    // [|:zh_CN] 有效值
    static const weak_ordering less;
    static const weak_ordering equivalent;
    static const weak_ordering greater;

    // [:en] conversion
    // [:zh_CN] 转换
    constexpr operator weak_equality() const noexcept;
    constexpr operator partial_ordering() const noexcept;

    // [:en] comparisons
    // [|:zh_CN] 比较
    friend constexpr bool operator==(weak_ordering v, [=UnSpec]) noexcept;
    friend constexpr bool operator!=(weak_ordering v, [=UnSpec]) noexcept;
    friend constexpr bool operator< (weak_ordering v, [=UnSpec]) noexcept;
    friend constexpr bool operator> (weak_ordering v, [=UnSpec]) noexcept;
    friend constexpr bool operator<=(weak_ordering v, [=UnSpec]) noexcept;
    friend constexpr bool operator>=(weak_ordering v, [=UnSpec]) noexcept;
    friend constexpr bool operator==([=UnSpec], weak_ordering v) noexcept;
    friend constexpr bool operator!=([=UnSpec], weak_ordering v) noexcept;
    friend constexpr bool operator< ([=UnSpec], weak_ordering v) noexcept;
    friend constexpr bool operator> ([=UnSpec], weak_ordering v) noexcept;
    friend constexpr bool operator<=([=UnSpec], weak_ordering v) noexcept;
    friend constexpr bool operator>=([=UnSpec], weak_ordering v) noexcept;
    friend constexpr weak_ordering operator<=>(weak_ordering v, [=UnSpec]) noexcept;
    friend constexpr weak_ordering operator<=>([=UnSpec], weak_ordering v) noexcept;
  };

  // [:en] valid values[='] definitions
  // [|:zh_CN] 有效值的定义式
  inline constexpr weak_ordering weak_ordering::less(ord::less);
  inline constexpr weak_ordering weak_ordering::equivalent(eq::equivalent);
  inline constexpr weak_ordering weak_ordering::greater(ord::greater);
}
[codeblock:end]

[%@library operator weak_equality[!weak_ordering]]
[%@library weak_ordering[!operator weak_equality]]
[codeblock:declaration]
constexpr operator weak_equality() const noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`value == 0 ? weak_equality::equivalent : weak_equality::nonequivalent].
[:zh_CN]
[`value == 0 ? weak_equality::equivalent : weak_equality::nonequivalent]。
[exit:description]

[%@library operator partial_ordering[!weak_ordering]]
[%@library weak_ordering[!operator partial_ordering]]
[codeblock:declaration]
constexpr operator partial_ordering() const noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[codeblock:notation]
value == 0 ? partial_ordering::equivalent :
value < 0  ? partial_ordering::less :
             partial_ordering::greater
[codeblock:end]
[exit:description]

[%@library operator==[!weak_ordering]]
[%@library weak_ordering[!operator==]]
[%@library operator!=[!weak_ordering]]
[%@library weak_ordering[!operator!=]]
[%@library operator<[!weak_ordering]]
[%@library weak_ordering[!operator<]]
[%@library operator>[!weak_ordering]]
[%@library weak_ordering[!operator>]]
[%@library operator<=[!weak_ordering]]
[%@library weak_ordering[!operator<=]]
[%@library operator>=[!weak_ordering]]
[%@library weak_ordering[!operator>=]]
[codeblock:declaration [!:mark UnSpec] ]
constexpr bool operator==(weak_ordering v, [=UnSpec]) noexcept;
constexpr bool operator!=(weak_ordering v, [=UnSpec]) noexcept;
constexpr bool operator< (weak_ordering v, [=UnSpec]) noexcept;
constexpr bool operator> (weak_ordering v, [=UnSpec]) noexcept;
constexpr bool operator<=(weak_ordering v, [=UnSpec]) noexcept;
constexpr bool operator>=(weak_ordering v, [=UnSpec]) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`v.value @ 0] for [`operator@].
[:zh_CN] 对于 [`operator@]，返回 [`v.value @ 0]。
[exit:description]

[%@library operator==[!weak_ordering]]
[%@library weak_ordering[!operator==]]
[%@library operator!=[!weak_ordering]]
[%@library weak_ordering[!operator!=]]
[%@library operator<[!weak_ordering]]
[%@library weak_ordering[!operator<]]
[%@library operator>[!weak_ordering]]
[%@library weak_ordering[!operator>]]
[%@library operator<=[!weak_ordering]]
[%@library weak_ordering[!operator<=]]
[%@library operator>=[!weak_ordering]]
[%@library weak_ordering[!operator>=]]
[codeblock:declaration [!:mark UnSpec] ]
constexpr bool operator==([=UnSpec], weak_ordering v) noexcept;
constexpr bool operator!=([=UnSpec], weak_ordering v) noexcept;
constexpr bool operator< ([=UnSpec], weak_ordering v) noexcept;
constexpr bool operator> ([=UnSpec], weak_ordering v) noexcept;
constexpr bool operator<=([=UnSpec], weak_ordering v) noexcept;
constexpr bool operator>=([=UnSpec], weak_ordering v) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`0 @ v.value] for [`operator@].
[:zh_CN] 对于 [`operator@]，返回 [`0 @ v.value]。
[exit:description]

[%@library operator<=>[!weak_ordering]]
[%@library weak_ordering[!operator<=>]]
[codeblock:declaration [!:mark UnSpec] ]
constexpr weak_ordering operator<=>(weak_ordering v, [=UnSpec]) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`v].
[:zh_CN] [`v]。
[exit:description]

[%@library operator<=>[!weak_ordering]]
[%@library weak_ordering[!operator<=>]]
[codeblock:declaration [!:mark UnSpec] ]
constexpr weak_ordering operator<=>([=UnSpec], weak_ordering v) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`v < 0 ? weak_ordering::greater : v > 0 ? weak_ordering::less : v].
[:zh_CN] [`v < 0 ? weak_ordering::greater : v > 0 ? weak_ordering::less : v]。
[exit:description]
