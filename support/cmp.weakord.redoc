[section#cmp.weakord
    [:en] Class [`weak_ordering]
    [:zh_CN] 类 [`weak_ordering]
]

[para]
[:en]
The [`weak_ordering] type is typically used as the result type of a three-way
comparison operator ([#expr.spaceship]) that (a) admits all of the six two-way
comparison operators ([#expr.rel], [#expr.eq]), and (b) does not imply
substitutability.
[:zh_CN]
[`weak_ordering] 类型通常被用作三路比较运算符（[#expr.spaceship]）的结果类型，
（A）允许全部六种双路比较运算符（[#expr.rel]，[#expr.eq]），（B）不蕴含可代换性。

[%@lib weak_ordering]
[%@lib@member less[!weak_ordering]]
[%@lib@member equivalent[!weak_ordering]]
[%@lib@member greater[!weak_ordering]]
[codeblock:synopsis]
namespace std {
  class weak_ordering {
    int value;  // [=expos]

    // [:en] exposition-only constructor \
    [:zh_CN] 仅用于阐释的构造函数
    constexpr explicit weak_ordering([[redoc("^>")]]ord v) noexcept : value(int(v)) {} // [=expos]

  public:
    // [:en] valid values \
    [:zh_CN] 有效值
    static const weak_ordering less;
    static const weak_ordering equivalent;
    static const weak_ordering greater;

    // [:en] conversion \
    [:zh_CN] 转换
    constexpr operator partial_ordering() const noexcept;

    // [:en] comparisons \
    [:zh_CN] 比较
    friend constexpr bool operator==(weak_ordering v, [[redoc("[=unspec]")]]) noexcept;
    friend constexpr bool operator==(weak_ordering v, weak_ordering w) noexcept = default;
    friend constexpr bool operator< (weak_ordering v, [[redoc("[=unspec]")]]) noexcept;
    friend constexpr bool operator> (weak_ordering v, [[redoc("[=unspec]")]]) noexcept;
    friend constexpr bool operator<=(weak_ordering v, [[redoc("[=unspec]")]]) noexcept;
    friend constexpr bool operator>=(weak_ordering v, [[redoc("[=unspec]")]]) noexcept;
    friend constexpr bool operator< ([[redoc("[=unspec]")]], weak_ordering v) noexcept;
    friend constexpr bool operator> ([[redoc("[=unspec]")]], weak_ordering v) noexcept;
    friend constexpr bool operator<=([[redoc("[=unspec]")]], weak_ordering v) noexcept;
    friend constexpr bool operator>=([[redoc("[=unspec]")]], weak_ordering v) noexcept;
    friend constexpr weak_ordering operator<=>(weak_ordering v, [[redoc("[=unspec]")]]) noexcept;
    friend constexpr weak_ordering operator<=>([[redoc("[=unspec]")]], weak_ordering v) noexcept;
  };

  // [:en] valid values[='] definitions \
  [:zh_CN] 有效值的定义式
  inline constexpr weak_ordering weak_ordering::less([[redoc("^>")]]ord::[[redoc("^>")]]less);
  inline constexpr weak_ordering weak_ordering::equivalent([[redoc("^>")]]ord::[[redoc("^>")]]equivalent);
  inline constexpr weak_ordering weak_ordering::greater([[redoc("^>")]]ord::[[redoc("^>")]]greater);
}
[codeblock:end]

[%@lib@member operator partial_ordering[!weak_ordering]]
[codeblock:declaration]
constexpr operator partial_ordering() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[codeblock]
value == 0 ? partial_ordering::equivalent :
value < 0  ? partial_ordering::less :
             partial_ordering::greater
[codeblock:end]
[div:end]

[%@lib@member operator==[!weak_ordering]]
[%@lib@member operator<[!weak_ordering]]
[%@lib@member operator>[!weak_ordering]]
[%@lib@member operator<=[!weak_ordering]]
[%@lib@member operator>=[!weak_ordering]]
[codeblock:declaration]
constexpr bool operator==(weak_ordering v, [[redoc("[=unspec]")]]) noexcept;
constexpr bool operator< (weak_ordering v, [[redoc("[=unspec]")]]) noexcept;
constexpr bool operator> (weak_ordering v, [[redoc("[=unspec]")]]) noexcept;
constexpr bool operator<=(weak_ordering v, [[redoc("[=unspec]")]]) noexcept;
constexpr bool operator>=(weak_ordering v, [[redoc("[=unspec]")]]) noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`v.value @ 0] for [`operator@].
[:zh_CN] 对于 [`operator@]，返回 [`v.value @ 0]。
[div:end]

[%@lib@member operator<[!weak_ordering]]
[%@lib@member operator>[!weak_ordering]]
[%@lib@member operator<=[!weak_ordering]]
[%@lib@member operator>=[!weak_ordering]]
[codeblock:declaration]
constexpr bool operator< ([[redoc("[=unspec]")]], weak_ordering v) noexcept;
constexpr bool operator> ([[redoc("[=unspec]")]], weak_ordering v) noexcept;
constexpr bool operator<=([[redoc("[=unspec]")]], weak_ordering v) noexcept;
constexpr bool operator>=([[redoc("[=unspec]")]], weak_ordering v) noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`0 @ v.value] for [`operator@].
[:zh_CN] 对于 [`operator@]，返回 [`0 @ v.value]。
[div:end]

[%@lib@member operator<=>[!weak_ordering]]
[codeblock:declaration]
constexpr weak_ordering operator<=>(weak_ordering v, [[redoc("[=unspec]")]]) noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`v].
[:zh_CN] [`v]。
[div:end]

[%@lib@member operator<=>[!weak_ordering]]
[codeblock:declaration]
constexpr weak_ordering operator<=>([[redoc("[=unspec]")]], weak_ordering v) noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`v < 0 ? weak_ordering::greater : v > 0 ? weak_ordering::less : v].
[:zh_CN] [`v < 0 ? weak_ordering::greater : v > 0 ? weak_ordering::less : v]。
[div:end]
