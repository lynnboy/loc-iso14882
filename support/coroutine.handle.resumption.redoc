[section#coroutine.handle.resumption
    [:en] Resumption
    [:zh_CN] 恢复
]

[para]
[:en]
Resuming a coroutine via [`resume], [`operator()], or [`destroy] on an execution
agent other than the one on which it was suspended has implementation-defined
behavior unless each execution agent either is an instance of [`std::thread] or
[`std::jthread], or is the thread that executes [`main].
[:zh_CN]
在并非协程所暂停于其中的执行代理中通过 [`resume]、[`operator()] 或 [`destroy]
恢复该协程，具有由实现定义的行为，除非各个执行代理均要么是 [`std::thread] 或
[`std::jthread] 的实例，要么是执行 [`main] 的线程。

[begin:note]
[:en]
A coroutine that is resumed on a different execution agent should avoid relying
on consistent thread identity throughout, such as holding a mutex object across
a suspend point.
[:zh_CN]
在不同的执行代理中恢复协程时，应当避免依赖线程的同一性自始至终保持一致，比如跨越
暂停点持有互斥体对象。
[end:note]

[begin:note]
[:en]
A concurrent resumption of the coroutine can result in a data race.
[:zh_CN]
并发的协程恢复将造成数据竞争。
[end:note]

[%@lib@member operator()[!coroutine_handle]]
[%@lib@member resume[!coroutine_handle]]
[codeblock:declaration]
void operator()() const;
void resume() const;
[codeblock:end]

[div:description]
[para:expects]
[:en] [`*this] refers to a suspended coroutine.
[:zh_CN] [`*this] 指代已暂停的协程。

[:en] The coroutine is not suspended at its final suspend point.
[:zh_CN] 该协程并未暂停于其最终暂停点。

[para:effects]
[:en] Resumes the execution of the coroutine.
[:zh_CN] 恢复协程的执行。
[div:end]

[%@lib@member destroy[!coroutine_handle]]
[codeblock:declaration]
void destroy() const;
[codeblock:end]

[div:description]
[para:expects]
[:en] [`*this] refers to a suspended coroutine.
[:zh_CN] [`*this] 指代已暂停的协程。

[para:effects]
[:en] Destroys the coroutine ([#dcl.fct.def.coroutine]).
[:zh_CN] 销毁协程（[#dcl.fct.def.coroutine]）。
[div:end]
