[section#coroutine.handle
    [:en] Class template [`coroutine_handle]
    [:zh_CN] 类模板 [`coroutine_handle]
]

[%@lib coroutine_handle]
[codeblock:synopsis]
namespace std {
  template<>
  struct coroutine_handle<void>
  {
    // [:en] [#coroutine.handle.con], construct/reset \
       [:zh_CN] [#coroutine.handle.con]，构造/重置
    constexpr coroutine_handle() noexcept;
    constexpr coroutine_handle(nullptr_t) noexcept;
    coroutine_handle& operator=(nullptr_t) noexcept;

    // [:en] [#coroutine.handle.export.import], export/import \
       [:zh_CN] [#coroutine.handle.export.import]，导出/导入
    constexpr void* address() const noexcept;
    static constexpr coroutine_handle from_address(void* addr);

    // [:en] [#coroutine.handle.observers], observers \
       [:zh_CN] [#coroutine.handle.observers]，探察函数
    constexpr explicit operator bool() const noexcept;
    bool done() const;

    // [:en] [#coroutine.handle.resumption], resumption \
       [:zh_CN] [#coroutine.handle.resumption]，恢复
    void operator()() const;
    void resume() const;
    void destroy() const;

  private:
    void* ptr;  // [=expos]
  };

  template<class Promise>
  struct coroutine_handle : coroutine_handle<>
  {
    // [:en] [#coroutine.handle.con], construct/reset \
       [:zh_CN] [#coroutine.handle.con]，构造/重置
    using coroutine_handle<>::coroutine_handle;
    static coroutine_handle from_promise(Promise&);
    coroutine_handle& operator=(nullptr_t) noexcept;

    // [:en] [#coroutine.handle.export.import], export/import \
       [:zh_CN] [#coroutine.handle.export.import]，导出/导入
    static constexpr coroutine_handle from_address(void* addr);

    // [:en] [#coroutine.handle.promise], promise access \
       [:zh_CN] [#coroutine.handle.promise]，对承诺的访问
    Promise& promise() const;
  };
}
[codeblock:end]

[para]
[:en]
An object of type [`coroutine_handle<T>] is called a [+:% coroutine handle]
and can be used to refer to a suspended or executing coroutine.
[:zh_CN]
[`coroutine_handle<T>] 类型的对象称为[+:% 协程句柄]，可用于指代某个已暂停或正在
执行的协程。

[:en]
A default-constructed [`coroutine_handle] object does not refer to any coroutine.
[:zh_CN]
默认构造的 [`coroutine_handle] 对象并不指代任何协程。

[para]
[:en]
If a program declares an explicit or partial specialization of
[`coroutine_handle], the behavior is undefined.
[:zh_CN]
如果程序声明了 [`coroutine_handle] 的显式或部分特化式，则其行为未定义。

[include coroutine.handle.con]

[include coroutine.handle.export.import]

[include coroutine.handle.observers]

[include coroutine.handle.resumption]

[include coroutine.handle.promise]

[include coroutine.handle.compare]

[include coroutine.handle.hash]
