[section#cmp.strongord
    [:en] Class [`strong_ordering]
    [:zh_CN] 类 [`strong_ordering]
]

[para]
[:en]
The [`strong_ordering] type is typically used as the result type of a three-way
comparison operator ([#expr.spaceship]) for a type that admits all of the six
two-way comparison operators ([#expr.rel], [#expr.eq]) and for which equality
does imply substitutability.
[:zh_CN]
[`strong_ordering] 类型通常被用作允许全部六种双路比较运算符的类型（[#expr.rel]，
[#expr.eq]）和相等性蕴含可代换性的类型的三路比较运算符（[#expr.spaceship]）
的结果类型。

[%@lib strong_ordering]
[%@lib@member less[!strong_ordering]]
[%@lib@member equal[!strong_ordering]]
[%@lib@member equivalent[!strong_ordering]]
[%@lib@member greater[!strong_ordering]]
[codeblock:synopsis]
namespace std {
  class strong_ordering {
    int value;  // [=expos]

    // [:en] exposition-only constructor \
    [:zh_CN] 仅用于阐释的构造函数
    constexpr explicit strong_ordering([[redoc("^>")]]ord v) noexcept : value(int(v)) {}   // [=expos]

  public:
    // [:en] valid values \
    [:zh_CN] 有效值
    static const strong_ordering less;
    static const strong_ordering equal;
    static const strong_ordering equivalent;
    static const strong_ordering greater;

    // [:en] conversion \
    [:zh_CN] 转换
    constexpr operator partial_ordering() const noexcept;
    constexpr operator weak_ordering() const noexcept;

    // [:en] comparisons \
    [:zh_CN] 比较
    friend constexpr bool operator==(strong_ordering v, [[redoc("[=unspec]")]]) noexcept;
    friend constexpr bool operator==(strong_ordering v, strong_ordering w) noexcept = default;
    friend constexpr bool operator< (strong_ordering v, [[redoc("[=unspec]")]]) noexcept;
    friend constexpr bool operator> (strong_ordering v, [[redoc("[=unspec]")]]) noexcept;
    friend constexpr bool operator<=(strong_ordering v, [[redoc("[=unspec]")]]) noexcept;
    friend constexpr bool operator>=(strong_ordering v, [[redoc("[=unspec]")]]) noexcept;
    friend constexpr bool operator< ([[redoc("[=unspec]")]], strong_ordering v) noexcept;
    friend constexpr bool operator> ([[redoc("[=unspec]")]], strong_ordering v) noexcept;
    friend constexpr bool operator<=([[redoc("[=unspec]")]], strong_ordering v) noexcept;
    friend constexpr bool operator>=([[redoc("[=unspec]")]], strong_ordering v) noexcept;
    friend constexpr strong_ordering operator<=>(strong_ordering v, [[redoc("[=unspec]")]]) noexcept;
    friend constexpr strong_ordering operator<=>([[redoc("[=unspec]")]], strong_ordering v) noexcept;
  };

  // [:en] valid values[='] definitions \
  [:zh_CN] 有效值的定义式
  inline constexpr strong_ordering strong_ordering::less([[redoc("^>")]]ord::[[redoc("^>")]]less);
  inline constexpr strong_ordering strong_ordering::equal([[redoc("^>")]]ord::[[redoc("^>")]]equal);
  inline constexpr strong_ordering strong_ordering::equivalent([[redoc("^>")]]ord::[[redoc("^>")]]equivalent);
  inline constexpr strong_ordering strong_ordering::greater([[redoc("^>")]]ord::[[redoc("^>")]]greater);
}
[codeblock:end]

[%@lib@member operator partial_ordering[!strong_ordering]]
[codeblock:declaration]
constexpr operator partial_ordering() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[codeblock]
value == 0 ? partial_ordering::equivalent :
value < 0  ? partial_ordering::less :
             partial_ordering::greater
[codeblock:end]
[div:end]

[%@lib@member operator weak_ordering[!strong_ordering]]
[codeblock:declaration]
constexpr operator weak_ordering() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[codeblock]
value == 0 ? weak_ordering::equivalent :
value < 0  ? weak_ordering::less :
             weak_ordering::greater
[codeblock:end]
[div:end]

[%@lib@member operator==[!strong_ordering]]
[%@lib@member operator<[!strong_ordering]]
[%@lib@member operator>[!strong_ordering]]
[%@lib@member operator<=[!strong_ordering]]
[%@lib@member operator>=[!strong_ordering]]
[codeblock:declaration]
constexpr bool operator==(strong_ordering v, [[redoc("[=unspec]")]]) noexcept;
constexpr bool operator< (strong_ordering v, [[redoc("[=unspec]")]]) noexcept;
constexpr bool operator> (strong_ordering v, [[redoc("[=unspec]")]]) noexcept;
constexpr bool operator<=(strong_ordering v, [[redoc("[=unspec]")]]) noexcept;
constexpr bool operator>=(strong_ordering v, [[redoc("[=unspec]")]]) noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`v.value @ 0] for [`operator@].
[:zh_CN] 对于 [`operator@]，返回 [`v.value @ 0]。
[div:end]

[%@lib@member operator<[!strong_ordering]]
[%@lib@member operator>[!strong_ordering]]
[%@lib@member operator<=[!strong_ordering]]
[%@lib@member operator>=[!strong_ordering]]
[codeblock:declaration]
constexpr bool operator< ([[redoc("[=unspec]")]], strong_ordering v) noexcept;
constexpr bool operator> ([[redoc("[=unspec]")]], strong_ordering v) noexcept;
constexpr bool operator<=([[redoc("[=unspec]")]], strong_ordering v) noexcept;
constexpr bool operator>=([[redoc("[=unspec]")]], strong_ordering v) noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`0 @ v.value] for [`operator@].
[:zh_CN] 对于 [`operator@]，返回 [`0 @ v.value]。
[div:end]

[%@lib@member operator<=>[!strong_ordering]]
[codeblock:declaration]
constexpr strong_ordering operator<=>(strong_ordering v, [[redoc("[=unspec]")]]) noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`v].
[:zh_CN] [`v]。
[div:end]

[%@lib@member operator<=>[!strong_ordering]]
[codeblock:declaration]
constexpr strong_ordering operator<=>([[redoc("[=unspec]")]], strong_ordering v) noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`v < 0 ? strong_ordering::greater : v > 0 ? strong_ordering::less : v].
[:zh_CN] [`v < 0 ? strong_ordering::greater : v > 0 ? strong_ordering::less : v]。
[div:end]
