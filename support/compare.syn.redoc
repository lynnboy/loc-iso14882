[section#compare.syn
    [:en] Header [`<compare>] synopsis
    [:zh_CN] 头文件 [`<compare>] 纲要
]

[para]
[:en]
The header [?libheader@def compare] specifies types, objects, and functions for
use primarily in connection with the three-way comparison operator
([#expr.spaceship]).
[:zh_CN]
头文件 [?libheader@def compare] 指定了一些类型、对象和函数，主要用于和三路比较
运算符结合使用（[#expr.spaceship]）。

[%@lib is_eq]
[%@lib is_neq]
[%@lib is_lt]
[%@lib is_lteq]
[%@lib is_gt]
[%@lib is_geq]
[%@lib is_gteq]
[%@lib common_comparison_category_t]
[codeblock:synopsis]
namespace std {
  // [:en] [#cmp.categories], comparison category types \
     [:zh_CN] [#cmp.categories]，比较类别类型
  class partial_ordering;
  class weak_ordering;
  class strong_ordering;

  // [:en] named comparison functions \
     [:zh_CN] 具名比较函数
  constexpr bool is_eq  (partial_ordering cmp) noexcept { return cmp == 0; }
  constexpr bool is_neq (partial_ordering cmp) noexcept { return cmp != 0; }
  constexpr bool is_lt  (partial_ordering cmp) noexcept { return cmp < 0; }
  constexpr bool is_lteq(partial_ordering cmp) noexcept { return cmp <= 0; }
  constexpr bool is_gt  (partial_ordering cmp) noexcept { return cmp > 0; }
  constexpr bool is_gteq(partial_ordering cmp) noexcept { return cmp >= 0; }

  // [:en] [#cmp.common], common comparison category type \
     [:zh_CN] [#cmp.common]，一般比较类别类型
  template<class... Ts>
  struct common_comparison_category {
    using type = [[redoc("[=seebelow]")]];
  };
  template<class... Ts>
    using common_comparison_category_t = typename common_comparison_category<Ts...>::type;

  // [:en] [#cmp.concept], concept [`:c three_way_comparable] \
     [:zh_CN] [#cmp.concept]，概念 [`:c three_way_comparable]
  template<class T, class Cat = partial_ordering>
    concept three_way_comparable = [[redoc("[=seebelow]")]];
  template<class T, class U, class Cat = partial_ordering>
    concept three_way_comparable_with = [[redoc("[=seebelow]")]];

  // [:en] [#cmp.result], result of three-way comparison \
     [:zh_CN] [#cmp.result]，三路比较的结果
  template<class T, class U = T> struct compare_three_way_result;

  template<class T, class U = T>
    using compare_three_way_result_t = typename compare_three_way_result<T, U>::type;

  // [:en] [#comparisons.three.way], class [`compare_three_way] \
     [:zh_CN] [#comparisons.three.way]，类 [`compare_three_way]
  struct compare_three_way;

  // [:en] [#cmp.alg], comparison algorithms \
     [:zh_CN] [#cmp.alg]，比较算法
  inline namespace [[redoc("[=unspec]")]] {
    inline constexpr [[redoc("[=unspec]")]] strong_order = [[redoc("[=unspec]")]];
    inline constexpr [[redoc("[=unspec]")]] weak_order = [[redoc("[=unspec]")]];
    inline constexpr [[redoc("[=unspec]")]] partial_order = [[redoc("[=unspec]")]];
    inline constexpr [[redoc("[=unspec]")]] compare_strong_order_fallback = [[redoc("[=unspec]")]];
    inline constexpr [[redoc("[=unspec]")]] compare_weak_order_fallback = [[redoc("[=unspec]")]];
    inline constexpr [[redoc("[=unspec]")]] compare_partial_order_fallback = [[redoc("[=unspec]")]];
  }
}
[codeblock:end]
