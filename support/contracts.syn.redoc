[section#contracts.syn
    [:en] Header [`<contracts>] synopsis
    [:zh_CN] 头文件 [`<contracts>] 纲要
]

[para]
[:en] The header [?libheader contracts] defines types for reporting information
about contract violations ([#basic.contract.eval]).
[:zh_CN] 头文件 [?libheader stdfloat] 定义的类型用于报告与契约违例有关的信息（[#basic.contract.eval]）。

[%@hdr@def contracts]
[%@lib contract_violation]
[codeblock:synopsis]
// [=all freestanding]
namespace std::contracts {

  enum class assertion_kind : [[redoc("[=unspec]")]] {
    pre = 1,
    post = 2,
    assert = 3
  };

  enum class evaluation_semantic : [[redoc("[=unspec]")]] {
    ignore = 1,
    observe = 2,
    enforce = 3,
    quick_enforce = 4
  };

  enum class detection_mode : [[redoc("[=unspec]")]] {
    predicate_false = 1,
    evaluation_exception = 2
  };

  class contract_violation {
    // [:en] no user-accessible constructor [:zh_CN] 没有用户可访问的构造函数
  public:
    contract_violation(const contract_violation&) = delete;
    contract_violation& operator=(const contract_violation&) = delete;

    [[redoc("[=seebelow]")]] ~contract_violation();

    const char* comment() const noexcept;
    contracts::detection_mode detection_mode() const noexcept;
    exception_ptr evaluation_exception() const noexcept;
    bool is_terminating() const noexcept;
    assertion_kind kind() const noexcept;
    source_location location() const noexcept;
    evaluation_semantic semantic() const noexcept;
  };

  void invoke_default_contract_violation_handler(const contract_violation&);
}
[codeblock:end]
