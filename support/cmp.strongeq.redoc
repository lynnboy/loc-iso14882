[section#cmp.strongeq
    [:en] Class [`strong_equality]
    [:zh_CN] 类 [`strong_equality]
]

[para]
[:en]
The [`strong_equality] type is typically used as the result type of a three-way
comparison operator ([#expr.spaceship]) that (a) admits only equality and
inequality comparisons, and (b) does imply substitutability.
[:zh_CN]
[`strong_equality] 类型通常被用作三路比较运算符（[#expr.spaceship]）的结果类型，
（A）仅允许相等和不相等比较，（B）蕴含可替代性。

[%@lib strong_equality]
[%@lib@member equal[!strong_equality]]
[%@lib@member nonequal[!strong_equality]]
[%@lib@member equivalent[!strong_equality]]
[%@lib@member nonequivalent[!strong_equality]]
[codeblock:synopsis]
namespace std {
  class strong_equality {
    int value;  // [=expos]

    // [:en] exposition-only constructor \
       [:zh_CN] 仅用于阐释的构造函数
    constexpr explicit strong_equality([[redoc("^>")]]eq v) noexcept : value(int(v)) {}    // [=expos]

  public:
    // [:en] valid values \
       [:zh_CN] 有效值
    static const strong_equality equal;
    static const strong_equality nonequal;
    static const strong_equality equivalent;
    static const strong_equality nonequivalent;

    // [:en] conversion \
       [:zh_CN] 转换
    constexpr operator weak_equality() const noexcept;

    // [:en] comparisons \
       [:zh_CN] 比较
    friend constexpr bool operator==(strong_equality v, [[redoc("[=unspec]")]]) noexcept;
    friend constexpr bool operator==(strong_equality v, strong_equality w) noexcept = default;
    friend constexpr strong_equality operator<=>(strong_equality v, [[redoc("[=unspec]")]]) noexcept;
    friend constexpr strong_equality operator<=>([[redoc("[=unspec]")]], strong_equality v) noexcept;
  };

  // [:en] valid values[='] definitions \
     [:zh_CN] 有效值的定义式
  inline constexpr strong_equality strong_equality::equal([[redoc("^>")]]eq::[[redoc("^>")]]equal);
  inline constexpr strong_equality strong_equality::nonequal([[redoc("^>")]]eq::[[redoc("^>")]]nonequal);
  inline constexpr strong_equality strong_equality::equivalent([[redoc("^>")]]eq::[[redoc("^>")]]equivalent);
  inline constexpr strong_equality strong_equality::nonequivalent([[redoc("^>")]]eq::[[redoc("^>")]]nonequivalent);
}
[codeblock:end]

[%@library operator weak_equality[!strong_equality]]
[%@library strong_equality[!operator weak_equality]]
[codeblock:declaration]
constexpr operator weak_equality() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`value == 0 ? weak_equality::equivalent : weak_equality::nonequivalent].
[:zh_CN]
[`value == 0 ? weak_equality::equivalent : weak_equality::nonequivalent]。
[div:end]

[%@library operator==[!strong_equality]]
[%@library strong_equality[!operator==]]
[codeblock:declaration]
constexpr bool operator==(strong_equality v, [[redoc("[=unspec]")]]) noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`v.value == 0].
[:zh_CN] [`v.value == 0]。
[div:end]

[%@library operator<=>[!strong_equality]]
[%@library strong_equality[!operator<=>]]
[codeblock:declaration]
constexpr strong_equality operator<=>(strong_equality v, [[redoc("[=unspec]")]]) noexcept;
constexpr strong_equality operator<=>([[redoc("[=unspec]")]], strong_equality v) noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`v].
[:zh_CN] [`v]。
[div:end]
