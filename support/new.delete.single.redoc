[section#new.delete.single
    [:en] Single-object forms
    [:zh_CN] 单对象形式
]

[%@lib@member new[!operator]]
[codeblock:declaration]
void* operator new(std::size_t size);
void* operator new(std::size_t size, std::align_val_t alignment);
[codeblock:end]

[div:description]
[para:effects]
[:en] The allocation function ([#basic.stc.dynamic.allocation]) called by a
[~new-expression] ([#expr.new]) to allocate [`size] bytes of storage.
[:zh_CN] [~new-表达式]（[#expr.new]）所调用的分配函数（[#basic.stc.dynamic.allocation]），
用以分配 [`size] 个字节的存储。

[:en] The second form is called for a type with new-extended alignment, and the
first form is called otherwise.
[:zh_CN] 第二种形式是为具有 new 扩充对齐的类型所调用的形式，否则调用第一种形式。

[para:required]
[:en] Return a non-null pointer to suitably aligned storage ([#basic.stc.dynamic]),
or else throw a [`bad_alloc] [%@lib bad_alloc] exception.
[:zh_CN] 返回指向适当对齐的存储的非空指针（[#basic.stc.dynamic]），抑或抛出
[%@lib bad_alloc] [`bad_alloc] 异常。

[:en] This requirement is binding on any replacement versions of these functions.
[:zh_CN] 这些函数的任何替代版本同样遵守此规定。

[para:default]

[list]
[item]
[:en] Executes a loop:
[:zh_CN] 执行循环：

[:en] Within the loop, the function first attempts to allocate the requested storage.
[:zh_CN] 在循环中，该函数首先试图分配所请求的存储。

[:en] Whether the attempt involves a call to the C standard library functions
[`malloc] or [`aligned_alloc] is [%unspecified] unspecified.
[:zh_CN] 该尝试是否涉及对 C 标准程序库函数 [`malloc] 或者 [`aligned_alloc] 的调用是[%未指明的]未指明的。

[item]
[:en] Returns a pointer to the allocated storage if the attempt is successful.
[:zh_CN] 若其尝试成功则返回指向所分配的存储的指针。

[:en] Otherwise, if the current [`new_handler] ([#get.new.handler]) is a null
pointer value, throws [`bad_alloc].
[:zh_CN] 否则，若当前 [`new_handler]（[#get.new.handler]）为空指针值，则抛出 [`bad_alloc]。

[item]
[:en] Otherwise, the function calls the current [`new_handler] function ([#new.handler]).
[:zh_CN] 否则，该函数调用当前的 [`new_handler] 函数（[#new.handler]）。

[:en] If the called function returns, the loop repeats.
[:zh_CN] 若所调用的函数返回，则重复循环。

[item]
[:en] The loop terminates when an attempt to allocate the requested storage is
successful or when a called [`new_handler] function does not return.
[list:end] 当尝试分配所请求的存储成功或当所调用的 [`new_handler] 函数并不返回时循环终止。

[para:remarks]
[:en] This function is replaceable ([#dcl.fct.def.replace]).
[:zh_CN] 此函数可替换（[#dcl.fct.def.replace]）。
[div:end]

[%@lib@member new[!operator]]
[codeblock:declaration]
void* operator new(std::size_t size, const std::nothrow_t&) noexcept;
void* operator new(std::size_t size, std::align_val_t alignment, const std::nothrow_t&) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Same as above, except that these are called by a placement version of a
[~new-expression] when a [=Cpp] program prefers a null pointer result as an
error indication, instead of a [`bad_alloc] exception.
[:zh_CN] 同上，如果 [=Cpp] 程序更倾向于将空指针结果，而不是以 [`bad_alloc] 异常为
错误指示，则以 [~new-表达式]的一种放置式版本来调用这些函数。

[para:required]
[:en] Return a non-null pointer to suitably aligned storage ([#basic.stc.dynamic]),
or else return a null pointer.
[:zh_CN] 返回指向适当对齐的存储的非空指针（[#basic.stc.dynamic]），抑或返回空指针。

[:en] Each of these nothrow versions of [`operator new] returns a pointer obtained
as if acquired from the (possibly replaced) corresponding non-placement function.
[:zh_CN] [`operator new] 的这些无抛出版本返回如同从其（可能已被替代的）对应
非放置式函数所获取的一样的指针。

[:en] This requirement is binding on any replacement versions of these functions.
[:zh_CN] 这些函数的任何替代版本同样遵守此规定。

[para:default]
[:en] Calls [`operator new(size)], or [`operator new(size, alignment)], respectively.
[:zh_CN] 分别调用 [`operator new(size)] 或者 [`operator new(size, alignment)]。

[:en] If the call returns normally, returns the result of that call.
[:zh_CN] 若该调用正常返回，则返回该调用的结果。

[:en] Otherwise, returns a null pointer.
[:zh_CN] 否则返回空指针。

[para]
[begin:example]
[codeblock]
T* p1 = new T;                  // [:en] throws [`bad_alloc] if it fails [:zh_CN] 若失败则抛出 [`bad_alloc]
T* p2 = new(nothrow) T;         // [:en] returns [`:key nullptr] if it fails [:zh_CN] 若失败则返回 [`:key nullptr]
[codeblock:end]
[end:example]

[para:remarks]
[:en] This function is replaceable ([#dcl.fct.def.replace]).
[:zh_CN] 此函数可替换（[#dcl.fct.def.replace]）。
[div:end]

[%@lib@member delete[!operator]]
[codeblock:declaration]
void operator delete(void* ptr) noexcept;
void operator delete(void* ptr, std::size_t size) noexcept;
void operator delete(void* ptr, std::align_val_t alignment) noexcept;
void operator delete(void* ptr, std::size_t size, std::align_val_t alignment) noexcept;
[codeblock:end]

[div:description]
[para:expects]
[:en] [`ptr] is a null pointer or its value represents the address of a block of
memory allocated by an earlier call to a (possibly replaced)
[`operator new(std::size_t)] or [`operator new(std::size_t, std::align_val_t)]
which has not been invalidated by an intervening call to [`operator delete].
[:zh_CN] [`ptr] 为空指针，或者其值表示一个从早前对（可能已被替代的）
[`operator new(std::size_t)] 或 [`operator new(std::size_t, std::align_val_t)]
的调用所返回的已分配内存块的地址，且它未被介于其间的对 [`operator delete] 的调用变为无效。

[para]
[:en] If the [`alignment] parameter is not present, [`ptr] was returned by an
allocation function without an [`alignment] parameter.
[:zh_CN] 如果没有 [`alignment] 形参，则 [`ptr] 是由没有 [`alignment] 形参的分配函数所返回的指针。

[:en] If present, the [`alignment] argument is equal to the [`alignment] argument
passed to the allocation function that returned [`ptr].
[:zh_CN] 如果存在，则 [`alignment] 实参等于传递给返回了 [`ptr] 的分配函数的 [`alignment] 实参。

[:en] If present, the [`size] argument is equal to the [`size] argument passed
to the allocation function that returned [`ptr].
[:zh_CN] 如果存在，则 [`size] 实参等于传递给返回了 [`ptr] 的分配函数的 [`size] 实参。

[para:effects]
[:en] The deallocation function ([#basic.stc.dynamic.deallocation]) called by a
[~delete-expression] ([#expr.delete]) to render the value of [`ptr] invalid.
[:zh_CN] [~delete-表达式]（[#expr.delete]）所调用的回收函数（[#basic.stc.dynamic.deallocation]），
用以使 [`ptr] 的值无效。

[para:required]
[:en] A call to an [`operator delete] with a [`size] parameter may be changed to
a call to the corresponding [`operator delete] without a [`size] parameter,
without affecting memory allocation.
[:zh_CN] 对带有 [`size] 形参的 [`operator delete] 的调用，可以改成对其所对应的
不带有 [`size] 形参的 [`operator delete] 的调用而不影响内存分配。

[begin:note]
[:en] A conforming implementation is for [`operator delete(void* ptr, std::size_t size)]
to simply call [`operator delete(ptr)].
[:zh_CN] 符合标准的一种实现是 [`operator delete(void* ptr, std::size_t size)]
只是简单地调用 [`operator delete(ptr)]。
[end:note]

[para:default]
[:en] The functions that have a [`size] parameter forward their other parameters
to the corresponding function without a [`size] parameter.
[:zh_CN] 带有 [`size] 形参的函数将其他形参转发给不带有 [`size] 形参的函数。

[begin:note]
[:en] See the note in the below [=remarks] paragraph.
[:zh_CN] 参见下文的 [=remarks] 段落中的注解。
[end:note]

[para:default]
[:en] If [`ptr] is null, does nothing.
[:zh_CN] 若 [`ptr] 为空，则不做任何事。

[:en] Otherwise, reclaims the storage allocated by the earlier call to [`operator new].
[:zh_CN] 否则，回收由早前对 [`operator new] 的调用所分配的存储。

[para:remarks]
[:en] It is [%unspecified] unspecified under what conditions part or all of such
reclaimed storage will be allocated by subsequent calls to [`operator new] or any of
[`aligned_alloc], [`calloc], [`malloc], or [`realloc], declared in [?libheader@ref cstdlib].
[:zh_CN] 在何种条件下如此回收的存储将被随后对 [`operator new]，或者 [?libheader@ref cstdlib] 中
所声明的 [`aligned_alloc]，[`calloc]，[`malloc] 或 [`realloc] 的任何调用所分配是[%未指明的]未指明的。

[:en] This function is replaceable ([#dcl.fct.def.replace]).
[:zh_CN] 此函数可替换（[#dcl.fct.def.replace]）。

[:en] If a replacement function without a [`size] parameter is defined by the program,
the program should also define the corresponding function with a [`size] parameter.
[:zh_CN] 如果程序定义了没有 [`size] 形参的替代函数，则程序最好同样定义其所对应的带有 [`size] 形参的函数。

[:en] If a replacement function with a [`size] parameter is defined by the program,
the program shall also define the corresponding version without the [`size] parameter.
[:zh_CN] 如果程序定义了带有 [`size] 形参的替代函数，则程序应当同样定义其所对应的没有 [`size] 形参的版本。

[begin:note]
[:en] The default behavior above might change in the future, which will require
replacing both deallocation functions when replacing the allocation function.
[:zh_CN] 上文的缺省行为可能于未来被改变为，当替换分配函数时同时要求一并替换两个回收函数。
[end:note]
[div:end]

[%@lib@member delete[!operator]]
[codeblock:declaration]
void operator delete(void* ptr, const std::nothrow_t&) noexcept;
void operator delete(void* ptr, std::align_val_t alignment, const std::nothrow_t&) noexcept;
[codeblock:end]

[div:description]
[para:expects]
[:en] [`ptr] is a null pointer or its value represents the address of a block of
memory allocated by an earlier call to a (possibly replaced)
[`operator new(std::size_t)] or [`operator new(std::size_t, std::align_val_t)]
which has not been invalidated by an intervening call to [`operator delete].
[:zh_CN] [`ptr] 为空指针，或者其值表示一个从早前对（可能已被替代的）
[`operator new(std::size_t)] 或 [`operator new(std::size_t, std::align_val_t)]
的调用所返回的已分配内存块的地址，且它未被介于其间的对 [`operator delete] 的调用变为无效。

[para]
[:en] If the [`alignment] parameter is not present, [`ptr] was returned by an
allocation function without an [`alignment] parameter.
[:zh_CN] 如果没有 [`alignment] 形参，则 [`ptr] 是由没有 [`alignment] 形参的
分配函数所返回的指针。

[:en] If present, the [`alignment] argument is equal to the [`alignment]
argument passed to the allocation function that returned [`ptr].
[:zh_CN] 如果存在，则 [`alignment] 实参等于传递给返回了 [`ptr] 的分配函数的 [`alignment] 实参。

[para:effects]
[:en] The deallocation function ([#basic.stc.dynamic.deallocation]) called by
the implementation to render the value of [`ptr] invalid when the constructor
invoked from a nothrow placement version of the [~new-expression] throws an exception.
[:zh_CN] 当 [~new-表达式]的无抛出放置式版本所调用的构造函数抛出异常时，实现所调用的
回收函数（[#basic.stc.dynamic.deallocation]），用以使 [`ptr] 的值无效。

[para:default]
[:en] Calls [`operator delete(ptr)], or [`operator delete(ptr, alignment)], respectively.
[:zh_CN] 分别调用 [`operator delete(ptr)] 或 [`operator delete(ptr, alignment)]。

[para:remarks]
[:en] This function is replaceable ([#dcl.fct.def.replace]).
[:zh_CN] 此函数可替换（[#dcl.fct.def.replace]）。
[div:end]
