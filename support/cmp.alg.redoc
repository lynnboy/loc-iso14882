[section#cmp.alg
    [:en] Comparison algorithms
    [:zh_CN] 比较算法
]

[%@lib strong_order]
[para]
[:en] The name [`strong_order] denotes a customization point object
([#customization.point.object]).
[:zh_CN] 名字 [`strong_order] 代表一个定制化点对象（[#customization.point.object]）。

[:en] Given subexpressions [`E] and [`F], the expression [`strong_order(E, F)]
is expression-equivalent ([#defns.expression-equivalent]) to the following:
[:zh_CN] 给定子表达式 [`E] 和 [`F]，表达式 [`strong_order(E, F)] 按表达式等价于
（[#defns.expression-equivalent]）以下各项：

[list]
[item]
[:en] If the decayed types of [`E] and [`F] differ, [`strong_order(E, F)] is
ill-formed.
[:zh_CN] 如果 [`E] 和 [`F] 的退化类型不同，则 [`strong_order(E, F)] 非良构。

[item]
[:en] Otherwise, [`strong_ordering(strong_order(E, F))] if it is a well-formed
expression with overload resolution performed in a context that does not include
a declaration of [`std::strong_order].
[:zh_CN] 否则，如果在不包含 [`std::strong_order] 的声明式的语境中实施重载决议时
表达式 [`strong_ordering(strong_order(E, F))] 良构，则为该表达式。

[item]
[:en] Otherwise, if the decayed type [`T] of [`E] is a floating-point type,
yields a value of type [`strong_ordering] that is consistent with the ordering
observed by [`T][=']s comparison operators, and if
[`numeric_limits<T>::is_iec559] is [`true], is additionally consistent with the
[`totalOrder] operation as specified in ISO/IEC/IEEE 60559.
[:zh_CN] 否则，如果 [`E] 的退化类型 [`T] 是浮点类型，则产生于 [`T] 的比较运算符
所观察的顺序性相一致，并且当 [`numeric_limits<T>::is_iec559] 为 [`true] 时，还与
ISO/IEC/IEEE 60559 所指定的 [`totalOrder] 操作相一致的 [`strong_ordering] 类型
的值。

[item]
[:en] Otherwise, [`strong_ordering(compare_three_way()(E, F))] if it is
a well-formed expression.
[:zh_CN] 否则，如果表达式 [`strong_ordering(compare_three_way()(E, F))] 良构则为
该表达式。

[item]
[:en] Otherwise, [`strong_order(E, F)] is ill-formed.
[:zh_CN] 否则，[`strong_order(E, F)] 非良构。
[begin:note]
[:en] This case can result in substitution failure when [`strong_order(E, F)]
appears in the immediate context of a template instantiation.
[:zh_CN] 这种情况下，当 [`strong_order(E, F)] 出现于模板实例化的直接语境时将导致
替换失败。
[end:note]
[list:end]

[%@lib weak_order]
[para]
[:en] The name [`weak_order] denotes a customization point object
([#customization.point.object]).
[:zh_CN] 名字 [`weak_order] 代表一个定制化点对象（[#customization.point.object]）。

[:en] Given subexpressions [`E] and [`F], the expression [`weak_order(E, F)]
is expression-equivalent ([#defns.expression-equivalent]) to the following:
[:zh_CN] 给定子表达式 [`E] 和 [`F]，表达式 [`weak_order(E, F)] 按表达式等价于
（[#defns.expression-equivalent]）以下各项：

[list]
[item]
[:en] If the decayed types of [`E] and [`F] differ, [`weak_order(E, F)] is
ill-formed.
[:zh_CN] 如果 [`E] 和 [`F] 的退化类型不同，则 [`weak_order(E, F)] 非良构。

[item]
[:en] Otherwise, [`weak_ordering(weak_order(E, F))] if it is a well-formed
expression with overload resolution performed in a context that does not include
a declaration of [`std::weak_order].
[:zh_CN] 否则，如果在不包含 [`std::weak_order] 的声明式的语境中实施重载决议时
表达式 [`weak_ordering(weak_order(E, F))] 良构，则为该表达式。

[item]
[:en] Otherwise, if the decayed type [`T] of [`E] is a floating-point type,
yields a value of type [`weak_ordering] that is consistent with the ordering
observed by [`T][=']s comparison operators and [`strong_order], and if
[`numeric_limits<T>::is_iec559] is [`true], is additionally consistent with the
following equivalence classes, ordered from lesser to greater:
[:zh_CN] 否则，如果 [`E] 的退化类型 [`T] 是浮点类型，则产生于 [`T] 的比较运算符
所观察的顺序性和 [`strong_order] 相一致，并且当 [`numeric_limits<T>::is_iec559]
为 [`true] 时，还与以下各等价类按从小到大排列相一致：
[list]
[item]
[:en@~] together, all negative NaN values;
[:zh_CN@~] 所有负的 NaN 值；
[item]
[:en@~] negative infinity;
[:zh_CN@~] 负无穷；
[item]
[:en@~] each normal negative values;
[:zh_CN@~] 所有正规负值；
[item]
[:en@~] each subnormal negative values;
[:zh_CN@~] 所有非正规负值；
[item]
[:en@~] together, both zero values;
[:zh_CN@~] 所有两种零值；
[item]
[:en@~] each subnormal positive values;
[:zh_CN@~] 所有非正规正值；
[item]
[:en@~] each normal positive values;
[:zh_CN@~] 所有正规正值；
[item]
[:en@~] positive infinity;
[:zh_CN@~] 正无穷；
[item]
[:en@~] together, all positive NaN values.
[:zh_CN@~] 所有正的 NaN 值。
[list:end]

[item]
[:en] Otherwise, [`weak_ordering(compare_three_way()(E, F))] if it is
a well-formed expression.
[:zh_CN] 否则，如果表达式 [`weak_ordering(compare_three_way()(E, F))] 良构则为
该表达式。

[item]
[:en] Otherwise, [`weak_ordering(strong_order(E, F))] if it is a well-formed
expression.
[:zh_CN] 否则，如果表达式 [`weak_ordering(strong_order(E, F))] 良构则为该表达式。

[item]
[:en] Otherwise, [`weak_order(E, F)] is ill-formed.
[:zh_CN] 否则，[`weak_order(E, F)] 非良构。
[begin:note]
[:en] This case can result in substitution failure when [`std::weak_order(E, F)]
appears in the immediate context of a template instantiation.
[:zh_CN] 这种情况下，当 [`std::weak_order(E, F)] 出现于模板实例化的直接语境时将
导致替换失败。
[end:note]
[list:end]

[%@lib partial_order]
[para]
[:en] The name [`partial_order] denotes a customization point object
([#customization.point.object]).
[:zh_CN] 名字 [`partial_order] 代表一个定制化点对象（[#customization.point.object]）。

[:en] Given subexpressions [`E] and [`F], the expression [`partial_order(E, F)]
is expression-equivalent ([#defns.expression-equivalent]) to the following:
[:zh_CN] 给定子表达式 [`E] 和 [`F]，表达式 [`partial_order(E, F)] 按表达式等价于
（[#defns.expression-equivalent]）以下各项：

[list]
[item]
[:en] If the decayed types of [`E] and [`F] differ, [`partial_order(E, F)] is
ill-formed.
[:zh_CN] 如果 [`E] 和 [`F] 的退化类型不同，则 [`partial_order(E, F)] 非良构。

[item]
[:en] Otherwise, [`partial_ordering(partial_order(E, F))] if it is a well-formed
expression with overload resolution performed in a context that does not include
a declaration of [`std::partial_order].
[:zh_CN] 否则，如果在不包含 [`std::partial_order] 的声明式的语境中实施重载决议时
表达式 [`partial_ordering(partial_order(E, F))] 良构，则为该表达式。

[item]
[:en] Otherwise, [`partial_ordering(compare_three_way()(E, F))] if it is
a well-formed expression.
[:zh_CN] 否则，如果表达式 [`partial_ordering(compare_three_way()(E, F))] 良构
则为该表达式。

[item]
[:en] Otherwise, [`partial_ordering(weak_order(E, F))] if it is a well-formed
expression.
[:zh_CN] 否则，如果表达式 [`partial_ordering(weak_order(E, F))] 良构则为该表达式。

[item]
[:en] Otherwise, [`partial_order(E, F)] is ill-formed.
[:zh_CN] 否则，[`partial_order(E, F)] 非良构。
[begin:note]
[:en] This case can result in substitution failure when
[`std::partial_order(E, F)] appears in the immediate context of a template
instantiation.
[:zh_CN] 这种情况下，当 [`std::partial_order(E, F)] 出现于模板实例化的直接语境
时将导致替换失败。
[end:note]
[list:end]

[%@lib compare_strong_order_fallback]
[para]
[:en] The name [`compare_strong_order_fallback] denotes a customization point
object ([#customization.point.object]).
[:zh_CN] 名字 [`compare_strong_order_fallback] 代表一个定制化点对象
（[#customization.point.object]）。

[:en] Given subexpressions [`E] and [`F], the expression
[`compare_strong_order_fallback(E, F)] is expression-equivalent
([#defns.expression-equivalent]) to:
[:zh_CN] 给定子表达式 [`E] 和 [`F]，表达式 [`compare_strong_order_fallback(E, F)]
按表达式等价于（[#defns.expression-equivalent]）：

[list]
[item]
[:en] If the decayed types of [`E] and [`F] differ,
[`compare_strong_order_fallback(E, F)] is ill-formed.
[:zh_CN] 如果 [`E] 和 [`F] 的退化类型不同，则
[`compare_strong_order_fallback(E, F)] 非良构。

[item]
[:en] Otherwise, [`strong_order(E, F)] if it is a well-formed expression.
[:zh_CN] 否则，如果表达式 [`strong_order(E, F)] 良构则为该表达式。

[item]
[:en] Otherwise, if the expressions [`E == F] and [`E < F] are both well-formed
and convertible to [`bool],
[:zh_CN] 否则，如果表达式 [`E == F] 和 [`E < F] 均良构且可以转换为 [`bool]，则为
[codeblock]
E == F ? strong_ordering::equal :
E < F  ? strong_ordering::less :
         strong_ordering::greater
[codeblock:end]
[:en@~] except that [`E] and [`F] are evaluated only once.
[:zh_CN@~] 但其中的 [`E] 和 [`F] 各只执行一次。

[item]
[:en] Otherwise, [`compare_strong_order_fallback(E, F)] is ill-formed.
[:zh_CN] 否则，[`compare_strong_order_fallback(E, F)] 非良构。
[list:end]

[%@lib compare_weak_order_fallback]
[para]
[:en] The name [`compare_weak_order_fallback] denotes a customization point
object ([#customization.point.object]).
[:zh_CN] 名字 [`compare_weak_order_fallback] 代表一个定制化点对象
（[#customization.point.object]）。

[:en] Given subexpressions [`E] and [`F], the expression
[`compare_weak_order_fallback(E, F)] is expression-equivalent
([#defns.expression-equivalent]) to:
[:zh_CN] 给定子表达式 [`E] 和 [`F]，表达式 [`compare_weak_order_fallback(E, F)]
按表达式等价于（[#defns.expression-equivalent]）：

[list]
[item]
[:en] If the decayed types of [`E] and [`F] differ,
[`compare_weak_order_fallback(E, F)] is ill-formed.
[:zh_CN] 如果 [`E] 和 [`F] 的退化类型不同，则
[`compare_weak_order_fallback(E, F)] 非良构。

[item]
[:en] Otherwise, [`weak_order(E, F)] if it is a well-formed expression.
[:zh_CN] 否则，如果表达式 [`weak_order(E, F)] 良构则为该表达式。

[item]
[:en] Otherwise, if the expressions [`E == F] and [`E < F] are both well-formed
and convertible to [`bool],
[:zh_CN] 否则，如果表达式 [`E == F] 和 [`E < F] 均良构且可以转换为 [`bool]，则为
[codeblock]
E == F ? weak_ordering::equivalent :
E < F  ? weak_ordering::less :
         weak_ordering::greater
[codeblock:end]
[:en@~] except that [`E] and [`F] are evaluated only once.
[:zh_CN@~] 但其中的 [`E] 和 [`F] 各只执行一次。

[item]
[:en] Otherwise, [`compare_weak_order_fallback(E, F)] is ill-formed.
[:zh_CN] 否则，[`compare_weak_order_fallback(E, F)] 非良构。
[list:end]

[%@lib compare_partial_order_fallback]
[para]
[:en] The name [`compare_partial_order_fallback] denotes a customization point
object ([#customization.point.object]).
[:zh_CN] 名字 [`compare_partial_order_fallback] 代表一个定制化点对象
（[#customization.point.object]）。

[:en] Given subexpressions [`E] and [`F], the expression
[`compare_partial_order_fallback(E, F)] is expression-equivalent
([#defns.expression-equivalent]) to:
[:zh_CN] 给定子表达式 [`E] 和 [`F]，表达式 [`compare_partial_order_fallback(E, F)]
按表达式等价于（[#defns.expression-equivalent]）：

[list]
[item]
[:en] If the decayed types of [`E] and [`F] differ,
[`compare_partial_order_fallback(E, F)] is ill-formed.
[:zh_CN] 如果 [`E] 和 [`F] 的退化类型不同，则
[`compare_partial_order_fallback(E, F)] 非良构。

[item]
[:en] Otherwise, [`partial_order(E, F)] if it is a well-formed expression.
[:zh_CN] 否则，如果表达式 [`partial_order(E, F)] 良构则为该表达式。

[item]
[:en] Otherwise, if the expressions [`E == F] and [`E < F] are both well-formed
and convertible to [`bool],
[:zh_CN] 否则，如果表达式 [`E == F] 和 [`E < F] 均良构且可以转换为 [`bool]，则为
[codeblock]
E == F ? partial_ordering::equivalent :
E < F  ? partial_ordering::less :
F < E  ? partial_ordering::greater :
         partial_ordering::unordered
[codeblock:end]
[:en@~] except that [`E] and [`F] are evaluated only once.
[:zh_CN@~] 但其中的 [`E] 和 [`F] 各只执行一次。

[item]
[:en] Otherwise, [`compare_partial_order_fallback(E, F)] is ill-formed.
[:zh_CN] 否则，[`compare_partial_order_fallback(E, F)] 非良构。
[list:end]
