[section#support.contract.cviol
    [:en] Class [`contract_violation]
    [:zh_CN] 类 [`contract_violation]
]

[%@library contract_violation]

[codeblock:synopsis]
namespace std {
  class contract_violation {
  public:
    uint_least32_t line_number() const noexcept;
    string_view file_name() const noexcept;
    string_view function_name() const noexcept;
    string_view comment() const noexcept;
    string_view assertion_level() const noexcept;
  };
}
[codeblock:end]

[para]
[:en]
The class [`contract_violation] describes information about a contract violation
generated by the implementation.
[:zh_CN]
类 [`contract_violation] 描述有关由实现生成的契约违例的信息。

[%@library line_number[!contract_violation]]
[%@library contract_violation[!line_number]]
[codeblock:declaration]
uint_least32_t line_number() const noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] The source code location where the contract violation happened
([#dcl.attr.contract]).
[:zh_CN] 发生契约违例（[#dcl.attr.contract]）的源代码位置。

[:en] If the location is unknown, an implementation may return [`0].
[:zh_CN] 如果位置未知，则实现可以返回 [`0]。
[exit:description]

[%@library file_name[!contract_violation]]
[%@library contract_violation[!file_name]]
[codeblock:declaration]
string_view file_name() const noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] The source file name where the contract violation happened
([#dcl.attr.contract]).
[:zh_CN] 发生契约违例（[#dcl.attr.contract]）的源文件名。

[:en] If the file name is unknown, an implementation may return [`string_view{}].
[:zh_CN] 如果文件名未知，则实现可以返回 [`string_view{}]。
[exit:description]

[%@library function_name[!contract_violation]]
[%@library contract_violation[!function_name]]
[codeblock:declaration]
string_view function_name() const noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] The name of the function where the contract violation happened
([#dcl.attr.contract]).
[:zh_CN] 发生契约违例（[#dcl.attr.contract]）的函数名。

[:en] If the function name is unknown, an implementation may return
[`string_view{}].
[:zh_CN] 如果函数名未知，则实现可以返回 [`string_view{}]。
[exit:description]

[%@library comment[!contract_violation]]
[%@library contract_violation[!comment]]
[codeblock:declaration]
string_view comment() const noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] Implementation-defined text describing the predicate of the violated
contract.
[:zh_CN] 描述被违反的契约的谓词的由实现定义的文本。
[exit:description]

[%@library assertion_level[!contract_violation]]
[%@library contract_violation[!assertion_level]]
[codeblock:declaration]
string_view assertion_level() const noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] Text describing the [~assertion-level] of the violated contract.
[:zh_CN] 描述被违反的契约的[~断言级别]的由实现定义的文本。
[exit:description]
