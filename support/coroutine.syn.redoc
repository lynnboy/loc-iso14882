[section#coroutine.syn
    [:en] Header [`<coroutine>] synopsis
    [:zh_CN] 头文件 [`<coroutine>] 纲要
]

[%@hdr@def coroutine]
[%@lib noop_coroutine_handle]
[codeblock:synopsis]
#include <compare>              // [:en] see [#compare.syn] \
                                [:zh_CN] 参见 [#compare.syn]

namespace std {
  // [:en] [#coroutine.traits], coroutine traits \
  [:zh_CN] [#coroutine.traits]，协程特征
  template<class R, class... ArgTypes>
    struct coroutine_traits;

  // [:en] [#coroutine.handle], coroutine handle \
  [:zh_CN] [#coroutine.handle]，协程句柄
  template<class Promise = void>
    struct coroutine_handle;

  // [:en] [#coroutine.handle.compare], comparison operators \
  [:zh_CN] [#coroutine.handle.compare]，比较运算符
  constexpr bool operator==(coroutine_handle<> x, coroutine_handle<> y) noexcept;
  constexpr strong_ordering operator<=>(coroutine_handle<> x, coroutine_handle<> y) noexcept;

  // [:en] [#coroutine.handle.hash], hash support \
  [:zh_CN] [#coroutine.handle.hash]，散列支持
  template<class T> struct hash;
  template<class P> struct hash<coroutine_handle<P>>;

  // [:en] [#coroutine.noop], no-op coroutines \
  [:zh_CN] [#coroutine.noop]，无操作协程
  struct noop_coroutine_promise;

  template<> struct coroutine_handle<noop_coroutine_promise>;
  using noop_coroutine_handle = coroutine_handle<noop_coroutine_promise>;

  noop_coroutine_handle noop_coroutine() noexcept;

  // [:en] [#coroutine.trivial.awaitables], trivial awaitables \
  [:zh_CN] [#coroutine.trivial.awaitables]，平凡的可等待体
  struct suspend_never;
  struct suspend_always;
}
[codeblock:end]
