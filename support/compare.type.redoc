[section#compare.type
    [:en] Type Ordering
    [:zh_CN] 类型定序
]

[para]
[:en] There is an [?impldef total ordering of all types] total ordering of all types.
[:zh_CN] 存在全部类型的一个[?impldef 全部类型的全序]全序。

[:en] For any (possibly incomplete) types [`X] and [`Y], the expression
[`[*TYPE-ORDER](X, Y)] is a constant expression ([#expr.const]) of type
[`strong_ordering] ([#cmp.strongord]).
[:zh_CN] 对于任何（可能不完整的）类型 [`X] 和 [`Y]，表达式 [`[*TYPE-ORDER](X, Y)]
是 [`strong_ordering] 类型（[#cmp.strongord]）的常量表达式（[#expr.const]）。

[:en] Its value is [`strong_ordering::less] if [`X] precedes [`Y]
in this implementation-defined total order, [`strong_ordering::greater] if
[`Y] precedes [`X], and [`strong_ordering::equal] if they are the same type.
[:zh_CN] 当在这种由实现定义的全序中 [`X] 先于 [`Y]，则其值为 [`strong_ordering::less]，
当 [`Y] 先于 [`X] 时，为 [`strong_ordering::greater]，或当它们是相同类型时为
[`strong_ordering::equal]。

[begin:note]
[:en] [`int], [`const int] and [`int&] are different types.
[:zh_CN] [`int]、[`const int] 和 [`int&] 是不同类型。
[end:note]

[begin:note]
[:en] This ordering need not be consistent with the one induced by [`type_info::before].
[:zh_CN] 这种定序不必与 [`type_info::before] 所引入的次序相一致。
[end:note]

[begin:note]
[:en] The ordering of TU-local types from different translation units is not observable,
because the necessary specialization of [`type_order] is impossible to name.
[:zh_CN] 对不同翻译单元的翻译单元局部类型的定序是不可观察的，因为不可能指名所必须的 [`type_order] 特例。
[end:note]

[%@lib type_order]
[codeblock:declaration]
template<class T, class U>
  struct type_order;
[codeblock:end]

[div:description]
[para]
[:en] The name [`type_order] denotes a [^:oc BinaryTypeTrait] ([#meta.rqmts])
with a base characteristic of [`integral_constant<strong_ordering, [*TYPE-ORDER](T, U)>].
[:zh_CN] 名字 [`type_order] 代表一个 [^:oc BinaryTypeTrait]（[#meta.rqmts]），
其基础特征为 [`integral_constant<strong_ordering, [*TYPE-ORDER](T, U)>]。

[para:recommended]
[:en] The order should be lexicographical on parameter-type-lists and
template argument lists.
[:zh_CN] 此顺序最好对于形参类型列表和各个模板实参列表遵循字典序。
[div:end]
