[section#module.import
    [:en] Import declaration
    [:zh_CN] 导入声明式
]

[syntax]
[rule module-import-declaration [:zh_CN] 模块导入声明式 ]
    [| [`:opt:key export] import-keyword module-name [~:opt attribute-specifier-seq] [`;] ]
    [| [`:opt:key export] import-keyword module-partition [~:opt attribute-specifier-seq] [`;] ]
    [| [`:opt:key export] import-keyword header-name [~:opt attribute-specifier-seq] [`;] ]
[rule:end]
[syntax:end]

[para]
[:en]
In a module unit, all [~module-import-declaration]s shall precede all other
[~top-level-declaration]s in the [~top-level-declaration-seq] of the
[~translation-unit] and of the [~private-module-fragment] (if any).
[:zh_CN]
在一个模块单元中，[~翻译单元]或[~私有模块分段]（如果有）的[~顶层声明式序列]中，
所有的[~模块导入声明式]都应当处于所有其他的[~顶层声明式]之前。

[:en]
The optional [~attribute-specifier-seq] appertains to the
[~module-import-declaration].
[:zh_CN]
可选的[~特性说明符序列]属于[~模块导入声明式]。

[para]
[:en]
A [~module-import-declaration] [+imports[%import]] a set of translation units
determined as described below.
[:zh_CN]
[~模块导入声明式][+导入]如下文所决定的一组翻译单元的集合。

[begin:note]
[:en]
Namespace-scope names exported by the imported translation units become visible
([#basic.scope.namespace]) in the importing translation unit and declarations
within the imported translation units become reachable ([#module.reach]) in the
importing translation unit after the import declaration.
[:zh_CN]
由被导入的翻译单元所导出的命名空间作用域的名字，在进行导入的翻译单元中变为可见
（[#basic.scope.namespace]），而被导入翻译单元中的声明式，在进行导入的翻译单元中
导入声明式之后变为可达（[#module.reach]）。
[end:note]

[para]
[:en]
A [~module-import-declaration] that specifies a [~module-name] [`M] imports all
module interface units of [`M].
[:zh_CN]
指定[~模块名] [`M] 的[~模块导入声明式]，导入 [`M] 的全部模块接口单元。

[para]
[:en]
A [~module-import-declaration] that specifies a [~module-partition] shall only
appear after the [~module-declaration] in a module unit of some module [`M].
[:zh_CN]
指定某个[~模块分区]的[~模块导入声明式]，只能出现于某个模块 [`M] 的模块单元的
[~模块声明式]之后。

[:en]
Such a declaration imports the so-named module partition of [`M].
[:zh_CN]
这种声明式导入其所指名的 [`M] 的模块分区。

[para]
[:en]
A [~module-import-declaration] that specifies a [~header-name] [`H] imports
a synthesized [+header unit], which is a translation unit formed by applying
phases 1 to 7 of translation ([#lex.phases]) to the source file or header
nominated by [`H], which shall not contain a [~module-declaration].
[:zh_CN]
指定某个[~头文件名] [`H] 的[~模块导入声明式]，导入一个合成的[+头文件单元]，它是
通过对由 [`H] 所提名的源文件或头文件（其不能包含[~模块声明式]）实施翻译的第 1
到第 7 阶段（[#lex.phases]）所形成的翻译单元。

[begin:note]
[:en]
All declarations within a header unit are implicitly exported
([#module.interface]), and are attached to the global module ([#module.unit]).
[:zh_CN]
头文件单元中的所有声明式都被隐式导出（[#module.interface]），并都附属于全局模块
（[#module.unit]）。
[end:note]

[:en]
An [+:adj importable header[%header[!importable]]] is a member of an [?impldef
how the set of importable headers is determined] set of headers that includes
all importable [=Cpp] library headers ([#headers]).
[:zh_CN]
[+:adj 可导入头文件[%头文件[!可导入～]]]是某个[?impldef 如何确定可导入头文件的
集合]，包含全部可导入 [=Cpp] 程序库头文件（[#headers]）的头文件集合。

[:en]
[`H] shall identify an importable header.
[:zh_CN]
[`H] 应当标明某个可导入头文件。

[:en]
Two [~module-import-declaration]s import the same header unit if and only if
their [~header-name]s identify the same header or source file ([#cpp.include]).
[:zh_CN]
两个[~模块导入声明式]，当且仅当其[~头文件名]标明相同的头文件或源文件
（[#cpp.include]）时，导入相同头文件单元。

[begin:note]
[:en]
A [~module-import-declaration] nominating a [~header-name] is also recognized by
the preprocessor, and results in macros defined at the end of phase 4 of
translation of the header unit being made visible as described in [#cpp.import].
[:zh_CN]
提名某个[~头文件名]的[~模块导入声明式]，也为预处理器所识别，并导致该头文件单元的
翻译的第 4 阶段结束时所定义的宏均变为可见，如 [#cpp.import] 所述。
[end:note]

[:en]
A declaration of a name with internal linkage is permitted within a header unit
despite all declarations being implicitly exported ([#module.interface]).
[:zh_CN]
具有内部连接的名字的声明式允许出现于头文件单元中，尽管所有声明式都被隐式导出
（[#module.interface]）。

[:en]
If such a declaration declares an entity that is odr-used outside the header
unit, or by a template instantiation whose point of instantiation is outside
the header unit, the program is ill-formed.
[:zh_CN]
如果这种声明式所声明的实体，在该头文件单元之外被 ODR 式使用，或者由实例化点处于
该头文件单元之外的某个模板实例所 ODR 式使用，则程序非良构。

[para]
[:en]
When a [~module-import-declaration] imports a translation unit [$T], it also
imports all translation units imported by exported [~module-import-declaration]s
in [$T]; such translation units are said to be [+exported[%module[!exported]]]
by [$T].
[:zh_CN]
当某个[~模块导入声明式]导入了某个翻译单元 [$T] 时，它也导入由 [$T] 中被导出的
[~模块导入声明式]所导入的所有翻译单元；这种翻译单元被称为被 [$T] [+导出[%模块
[!被导出]]]。

[:en]
Additionally, when a [~module-import-declaration] in a module unit of some
module [$M] imports another module unit [$U] of [$M], it also imports all
translation units imported by non-exported [~module-import-declaration]s in the
module unit purview of [$U].[#:note#fn:$1]
[:zh_CN]
此外，如果模块 [$M] 的某个模块单元中的[~模块导入声明式]导入了 [$M] 的另一个
模块单元 [$U]，则它也导入由 [$U] 的模块单元视野中的未导出[~模块导入声明式]所导入
的所有翻译单元。[#:note#fn:$1]

[note:foot#$1]
[:en]
This is consistent with the rules for visibility of imported names
([#basic.scope.namespace]).
[:zh_CN]
这与被导入名字的可见性规则（[#basic.scope.namespace]）相一致。
[note:end]

[:en]
These rules may in turn lead to the importation of yet more translation units.
[:zh_CN]
这些规则可能进一步导致更多的翻译单元被导入。

[para]
[:en]
A module implementation unit shall not be exported.
[:zh_CN]
模块实现单元不能被导出。

[begin:example]
[:en] Translation unit #1:
[:zh_CN] 翻译单元 #1：
[codeblock]
module M:Part;
[codeblock:end]

[:en] Translation unit #2:
[:zh_CN] 翻译单元 #2：
[codeblock]
export module M;
export import :Part;    // [:en] error: exported partition [`:Part] is an implementation unit \
                           [:zh_CN] 错误：被导出的分区 [`:Part] 是一个实现单元
[codeblock:end]
[end:example]

[para]
[:en]
A module implementation unit of a module [`M] that is not a module partition
shall not contain a [~module-import-declaration] nominating [`M].
[:zh_CN]
模块 [`M] 的并非模块分区的模块实现单元，不能包含提名 [`M] 的[~模块导入声明式]。

[begin:example]
[codeblock]
module M;
import M;               // [:en] error: cannot import [`M] in its own unit \
                           [:zh_CN] 错误：不能在 [`M] 自身的单元中导入 [`M]
[codeblock:end]
[end:example]

[para]
[:en]
A translation unit has an [+interface dependency] on a translation unit [`U] if
it contains a [~module-declaration] or [~module-import-declaration] that imports
[`U] or if it has an interface dependency on a translation unit that has an
interface dependency on [`U].
[:zh_CN]
如果翻译单元中包含某个导入了翻译单元 [`U] 的[~模块声明式]或[~模块导入声明式]，
或者它对某个对 [`U] 有接口依赖的翻译单元有接口依赖，则该翻译单元对 [`U] 有
[+接口依赖]。

[:en]
A translation unit shall not have an interface dependency on itself.
[:zh_CN]
翻译单元不能对自身有接口依赖。

[begin:example]
[:en] Interface unit of [`M1]:
[:zh_CN] [`M1] 的接口单元：
[codeblock]
export module M1;
import M2;
[codeblock:end]

[:en] Interface unit of [`M2]:
[:zh_CN] [`M2] 的接口单元：
[codeblock]
export module M2;
import M3;
[codeblock:end]

[:en] Interface unit of [`M3]:
[:zh_CN] [`M3] 的接口单元：
[codeblock]
export module M3;
import M1;              // [:en] error: cyclic interface dependency [$[`M3] \rightarrow [`M1] \rightarrow [`M2] \rightarrow [`M3]] \
                           [:zh_CN] 错误：循环接口依赖 [$[`M3] \rightarrow [`M1] \rightarrow [`M2] \rightarrow [`M3]]
[codeblock:end]
[end:example]
