[section#module.import
    [:en] Import declaration
    [:zh_CN] 导入声明式
]

[syntax]
[rule module-import-declaration [:zh_CN] 模块导入声明式 ]
    [| import-keyword module-name [~:opt attribute-specifier-seq] [`;] ]
    [| import-keyword module-partition [~:opt attribute-specifier-seq] [`;] ]
    [| import-keyword header-name [~:opt attribute-specifier-seq] [`;] ]
[rule:end]
[syntax:end]

[para]
[:en]
A [~module-import-declaration] shall inhabit the global namespace scope.
[:zh_CN]
[~模块导入声明式]应当居于全局命名空间作用域。

[:en]
In a module unit, all [~module-import-declaration]s and [~export-declaration]s
exporting [~module-import-declaration]s shall appear before all other
[~declaration]s in the [~declaration-seq] of the [~translation-unit] and of the
[~private-module-fragment] (if any).
[:zh_CN]
在一个模块单元中，[~翻译单元]或[~私有模块分段]（如果有）的[~声明式序列]中，
所有的[~模块导入声明式]和导出[~模块导入声明式]的[~导出声明式]，都应当出现于所有
其他的[~声明式]之前。

[:en]
The optional [~attribute-specifier-seq] appertains to the
[~module-import-declaration].
[:zh_CN]
可选的[~属性说明符序列]属于[~模块导入声明式]。

[para]
[:en]
A [~module-import-declaration] [+imports[%import]] a set of translation units
determined as described below.
[:zh_CN]
[~模块导入声明式][+导入]如下文所决定的一组翻译单元的集合。

[begin:note]
[:en]
Namespace-scope declarations exported by the imported translation units can be
found by name lookup ([#basic.lookup]) in the importing translation unit and
declarations within the imported translation units become reachable
([#module.reach]) in the importing translation unit after the import declaration.
[:zh_CN]
由被导入的翻译单元所导出的命名空间作用域的声明式，在进行导入的翻译单元中可被名字
查找找到（[#basic.lookup]），而被导入翻译单元中的声明式，在进行导入的翻译单元中
导入声明式之后变为可达（[#module.reach]）。
[end:note]

[para]
[:en]
A [~module-import-declaration] that specifies a [~module-name] [`M] imports all
module interface units of [`M].
[:zh_CN]
指定[~模块名] [`M] 的[~模块导入声明式]，导入 [`M] 的全部模块接口单元。

[para]
[:en]
A [~module-import-declaration] that specifies a [~module-partition] shall only
appear after the [~module-declaration] in a module unit of some module [`M].
[:zh_CN]
指定某个[~模块分区]的[~模块导入声明式]，只能出现于某个模块 [`M] 的模块单元的
[~模块声明式]之后。

[:en]
Such a declaration imports the so-named module partition of [`M].
[:zh_CN]
这种声明式导入其所指名的 [`M] 的模块分区。

[para]
[:en]
A [~module-import-declaration] that specifies a [~header-name] [`H] imports
a synthesized [+header unit], which is a translation unit formed by applying
phases 1 to 7 of translation ([#lex.phases]) to the source file or header
nominated by [`H], which shall not contain a [~module-declaration].
[:zh_CN]
指定某个[~头文件名] [`H] 的[~模块导入声明式]，导入一个合成的[+头文件单元]，它是
通过对由 [`H] 所提名的源文件或头文件（其不能包含[~模块声明式]）实施翻译的第 1
到第 7 阶段（[#lex.phases]）所形成的翻译单元。

[begin:note]
[:en] A header unit is a separate translation unit with an independent set of
defined macros.
[:zh_CN] 头文件单元是带有一个已定义宏的独立集合的单独翻译单元。

[:en]
All declarations within a header unit are implicitly exported
([#module.interface]), and are attached to the global module ([#module.unit]).
[:zh_CN]
头文件单元中的所有声明式都被隐式导出（[#module.interface]），并都附属于全局模块
（[#module.unit]）。
[end:note]

[:en]
An [+:adj importable[!header]] is a member of an [?impldef how the set of
importable headers is determined] set of headers that includes all importable
[=Cpp] library headers ([#headers]).
[:zh_CN]
[+:adj 可导入[!头文件]]是某个[?impldef 如何确定可导入头文件的集合]，包含全部
可导入 [=Cpp] 程序库头文件（[#headers]）的头文件集合。

[:en]
[`H] shall identify an importable header.
[:zh_CN]
[`H] 应当标明某个可导入头文件。

[:en]
Given two such [~module-import-declaration]s:
[:zh_CN]
给定两个这种[~模块导入声明式]：
[list]
[item]
[:en] if their [~header-name]s identify different headers or source files
([#cpp.include]), they import distinct header units;
[:zh_CN] 如果它们的[~头文件名]标明不同的的头文件或源文件（[#cpp.include]），则
它们导入不同的头文件单元；
[item]
[:en] otherwise, if they appear in the same translation unit, they import the
same header unit;
[:zh_CN] 否则，如果它们出现于同一个翻译单元中，则它们导入相同的头文件单元；
[item]
[:en] otherwise, it is unspecified whether they import the same header unit.
[:zh_CN] 否则，未指明它们是否导入相同的头文件单元。

[begin:note]
[:en]
It is therefore possible that multiple copies exist of entities declared with
internal linkage in an importable header.
[:zh_CN]
因此，在某个可导入头文件中被声明为具有内部连接的实体，可能存在多个副本。
[end:note]
[list:end]

[begin:note]
[:en]
A [~module-import-declaration] nominating a [~header-name] is also recognized by
the preprocessor, and results in macros defined at the end of phase 4 of
translation of the header unit being made visible as described in [#cpp.import].
[:zh_CN]
提名某个[~头文件名]的[~模块导入声明式]，也为预处理器所识别，并导致该头文件单元的
翻译的第 4 阶段结束时所定义的宏均变为可见，如 [#cpp.import] 所述。
[end:note]

[:en]
Any other [~module-import-declaration] does not make macros visible.
[:zh_CN]
任何其他[~模块导入声明式]均不会使宏变得可见。

[para]
[:en]
A declaration of a name with internal linkage is permitted within a header unit
despite all declarations being implicitly exported ([#module.interface]).
[:zh_CN]
具有内部连接的名字的声明式允许出现于头文件单元中，尽管所有声明式都被隐式导出
（[#module.interface]）。

[begin:note]
[:en]
A definition that appears in multiple translation units cannot in general refer
to such names ([#basic.def.odr]).
[:zh_CN]
出现于多个翻译单元中的定义式，一般无法涉指这样的名字（[#basic.def.odr]）。
[end:note]

[:en]
A header unit shall not contain a definition of a non-inline function or
variable whose name has external linkage.
[:zh_CN]
头文件单元不能包含名字具有外部连接的非内联函数或变量的定义式。

[para]
[:en]
When a [~module-import-declaration] imports a translation unit [$T], it also
imports all translation units imported by exported [~module-import-declaration]s
in [$T]; such translation units are said to be [+exported[%module[!exported]]]
by [$T].
[:zh_CN]
当某个[~模块导入声明式]导入了某个翻译单元 [$T] 时，它也导入由 [$T] 中被导出的
[~模块导入声明式]所导入的所有翻译单元；称这种翻译单元被 [$T] [+导出[%模块
[!被导出]]]。

[:en]
Additionally, when a [~module-import-declaration] in a module unit of some
module [$M] imports another module unit [$U] of [$M], it also imports all
translation units imported by non-exported [~module-import-declaration]s in the
module unit purview of [$U].[#:fn]
[:zh_CN]
此外，如果模块 [$M] 的某个模块单元中的[~模块导入声明式]导入了 [$M] 的另一个
模块单元 [$U]，则它也导入由 [$U] 的模块单元视野中的未导出[~模块导入声明式]所导入
的所有翻译单元[#:fn]。

[note:foot]
[:en]
This is consistent with the lookup rules for imported names ([#basic.lookup]).
[:zh_CN]
这与被导入名字的查找规则（[#basic.lookup]）相一致。
[note:end]

[:en]
These rules can in turn lead to the importation of yet more translation units.
[:zh_CN]
这些规则进一步会导致更多的翻译单元被导入。

[begin:note]
[:en]
Such indirect importation does not make macros available, because a translation
unit is a sequence of tokens in translation phase 7 ([#lex.phases]).
[:zh_CN]
这种间接导入不会使宏可用，因为翻译单元是翻译阶段 7 中的记号序列（[#lex.phases]）。

[:en]
Macros can be made available by directly importing header units as described in
[#cpp.import].
[:zh_CN]
如 [#cpp.import] 所述，可以通过直接导入头文件单元使宏可用。
[end:note]

[para]
[:en]
A module implementation unit shall not be exported.
[:zh_CN]
模块实现单元不能被导出。

[begin:example]
[:en] Translation unit #1:
[:zh_CN] 翻译单元 #1：
[codeblock]
module M:Part;
[codeblock:end]

[:en] Translation unit #2:
[:zh_CN] 翻译单元 #2：
[codeblock]
export module M;
export import :Part;    // [:en] error: exported partition [`:Part] is an implementation unit \
                        [:zh_CN] 错误：被导出的分区 [`:Part] 是一个实现单元
[codeblock:end]
[end:example]

[para]
[:en]
A module implementation unit of a module [`M] that is not a module partition
shall not contain a [~module-import-declaration] nominating [`M].
[:zh_CN]
模块 [`M] 的并非模块分区的模块实现单元，不能包含提名 [`M] 的[~模块导入声明式]。

[begin:example]
[codeblock]
module M;
import M;               // [:en] error: cannot import [`M] in its own unit \
                        [:zh_CN] 错误：不能在 [`M] 自身的单元中导入 [`M]
[codeblock:end]
[end:example]

[para]
[:en]
A translation unit has an [+interface dependency] on a translation unit [`U] if
it contains a declaration (possibly a [~module-declaration]) that imports [`U]
or if it has an interface dependency on a translation unit that has an interface
dependency on [`U].
[:zh_CN]
如果翻译单元中包含某个导入了翻译单元 [`U] 的声明式（可能为[~模块声明式]），或者
它对某个对 [`U] 有接口依赖的翻译单元有接口依赖，则该翻译单元对 [`U] 有[+接口依赖]。

[:en]
A translation unit shall not have an interface dependency on itself.
[:zh_CN]
翻译单元不能对自身有接口依赖。

[begin:example]
[:en] Interface unit of [`M1]:
[:zh_CN] [`M1] 的接口单元：
[codeblock]
export module M1;
import M2;
[codeblock:end]

[:en] Interface unit of [`M2]:
[:zh_CN] [`M2] 的接口单元：
[codeblock]
export module M2;
import M3;
[codeblock:end]

[:en] Interface unit of [`M3]:
[:zh_CN] [`M3] 的接口单元：
[codeblock]
export module M3;
import M1;              // [:en] error: cyclic interface dependency [$[`M3] \rightarrow [`M1] \rightarrow [`M2] \rightarrow [`M3]] \
                        [:zh_CN] 错误：循环接口依赖 [$[`M3] \rightarrow [`M1] \rightarrow [`M2] \rightarrow [`M3]]
[codeblock:end]
[end:example]
