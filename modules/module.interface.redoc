[section#module.interface
    [:en] Export declaration
    [:zh_CN] 导出声明式
]

[syntax]
[rule export-declaration [:zh_CN] 导出声明式 ]
    [| [`:key export] declaration ]
    [| [`:key export] [`{] [~:opt declaration-seq] [`}] ]
    [| export-keyword module-import-declaration ]
[rule:end]
[syntax:end]

[para]
[:en]
An [~export-declaration] shall inhabit a namespace scope and appear in the
purview of a module interface unit.
[:zh_CN]
[~导出声明式]应当居于命名空间作用域，且只能在模块接口单元的视野中出现。

[:en]
An [~export-declaration] shall not appear directly or indirectly within an
unnamed namespace or a [~private-module-fragment].
[:zh_CN]
[~导出声明式]不能直接或间接出现在无名命名空间或[~私有模块分段]之内。

[:en]
An [~export-declaration] has the declarative effects of its [~declaration],
[~declaration-seq] (if any), or [~module-import-declaration].
[:zh_CN]
[~导出声明式]具有其[~声明式]，[~声明式序列]（如果有），或[~模块导入声明式]的
声明效果。

[:en]
The [~declaration] or [~declaration-seq] of an [~export-declaration] shall not
contain an [~export-declaration] or [~module-import-declaration].
[:zh_CN]
[~导出声明式]的[~声明式]或[~声明式序列]不能包含[~导出声明式]或[~模块导入声明式]。

[begin:note]
[:en]
An [~export-declaration] does not establish a scope.
[:zh_CN]
[~导出声明式]并不设立作用域。
[end:note]

[para]
[:en]
A declaration is [+exported[%declaration[!exported]]] if it is declared within
an [~export-declaration] and inhabits a namespace scope or it is
[:zh_CN]
如果声明式声明于某个[~导出声明式]中并居于命名空间作用域，或者它满足以下条件，则
它[+被导出[%声明式[!被导出]]]：

[list]
[item]
[:en@~] a [~namespace-definition] that contains an exported declaration, or
[:zh_CN@~] 它是包含被导出声明式的[~命名空间定义式]，或
[item]
[:en@~] a declaration within a header unit ([#module.import]) that introduces at
least one name.
[:zh_CN@~] 它是头文件单元（[#module.import]）之内的引入至少一个名字的声明式。
[list:end]

[para]
[:en]
An exported declaration that is not a [~module-import-declaration] shall declare
at least one name.
[:zh_CN]
并非[~模块导入声明式]的被导出声明式应当声明至少一个名字。

[:en]
If the declaration is not within a header unit, it shall not declare a name with
internal linkage.
[:zh_CN]
如果该声明式并不处于头文件单元之内，则它不能声明具有内部连接的名字。

[para]
[begin:example]
[:en] Source file [`"a.h"]:
[:zh_CN] 源文件 [`"a.h"]：
[codeblock]
export int x;
[codeblock:end]

[:en] Translation unit #1:
[:zh_CN] 翻译单元 #1：
[codeblock]
module;
#include "a.h"                  // [:en] error: declaration of [`x] is not in the \
                                [:zh_CN] 错误：[`x] 的声明式并不处于
                                // [:en@~] purview of a module interface unit \
                                [:zh_CN@~] 模块接口单元的视野之内
export module M;
export namespace {}             // [:en] error: does not introduce any names \
                                [:zh_CN] 错误：并未引入任何名字
export namespace {
  int a1;                       // [:en] error: export of name with internal linkage \
                                [:zh_CN] 错误：导出具有内部连接的名字
}
namespace {
  export int a2;                // [:en] error: export of name with internal linkage \
                                [:zh_CN] 错误：导出具有内部连接的名字
}
export static int b;            // [:en] error: [`b] explicitly declared [`static] \
                                [:zh_CN] 错误：[`b] 被明确声明为 [`static]
export int f();                 // OK
export namespace N { }          // OK
export using namespace N;       // [:en] error: does not declare a name \
                                [:zh_CN] 错误：并未声明一个名字
[codeblock:end]
[end:example]

[para]
[:en]
If an exported declaration is a [~using-declaration] ([#namespace.udecl]) and is
not within a header unit, all entities to which all of the [~using-declarator]s
ultimately refer (if any) shall have been introduced with a name having external
linkage.
[:zh_CN]
如果被导出的声明式是个 [~using-声明式]（[#namespace.udecl]），且其并未处于
头文件单元之内，则其所有 [~using-声明符]所最终涉及的全部实体（如果有），都应当
已经作为具有外部连接的名字而引入。

[begin:example]
[:en] Source file [`"b.h"]:
[:zh_CN] 源文件 [`"b.h"]：
[codeblock]
int f();
[codeblock:end]

[:en] Importable header [`"c.h"]:
[:zh_CN] 可导入的头文件 [`"c.h"]：
[codeblock]
int g();
[codeblock:end]

[:en] Translation unit #1:
[:zh_CN] 翻译单元 #1：
[codeblock]
export module X;
export int h();
[codeblock:end]

[:en] Translation unit #2:
[:zh_CN] 翻译单元 #2：
[codeblock]
module;
#include "b.h"
export module M;
import "c.h";
import X;
export using ::f, ::g, ::h;     // OK
struct S;
export using ::S;               // [:en] error: [`S] has module linkage \
                                [:zh_CN] 错误：[`S] 具有模块连接
namespace N {
  export int h();
  static int h(int);            // #1
}
export using N::h;              // [:en] error: #1 has internal linkage \
                                [:zh_CN] 错误：#1 具有内部连接
[codeblock:end]
[end:example]

[begin:note]
[:en]
These constraints do not apply to type names introduced by [`:key typedef]
declarations and [~alias-declaration]s.
[:zh_CN]
这些约束并不适用于由 [`:key typedef] 声明式和[~别名声明式]所引入的类型名。

[begin:example]
[codeblock]
export module M;
struct S;
export using T = S;             // [:en] OK, exports name [`T] denoting type [`S] \
                                [:zh_CN] OK，导出的名字 [`T] 代表类型 [`S]
[codeblock:end]
[end:example]
[end:note]

[para]
[:en]
A redeclaration of an entity [$X] is implicitly exported if [$X] was introduced
by an exported declaration; otherwise it shall not be exported.
[:zh_CN]
对于某个实体 [$X] 的重复声明式，如果 [$X] 是由某个被导出声明式所引入的，则它被
隐式导出；否则它应当不被导出。

[begin:example]
[codeblock]
export module M;
struct S { int n; };
typedef S S;
export typedef S S;             // [:en] OK, does not redeclare an entity \
                                [:zh_CN] OK，并未重复声明任何实体
export struct S;                // [:en] error: exported declaration follows non-exported declaration \
                                [:zh_CN] 错误：被导出声明式跟在未被导出的声明式之后
[codeblock:end]
[end:example]

[para]
[begin:note]
[:en]
Names introduced by exported declarations have either external linkage or no
linkage; see [#basic.link].
[:zh_CN]
由被导出的声明式所引入名字要么具有外部连接，要么无连接；参见 [#basic.link]。

[:en]
Namespace-scope declarations exported by a module can be found by name lookup in
any translation unit importing that module ([#basic.lookup]).
[:zh_CN]
被某个模块导出的命名空间作用域的声明式，在导入了这个模块的任何翻译单元中都可通过
名字查找找到（[#basic.lookup]）。

[:en]
Class and enumeration member names can be found by name lookup in any context in
which a definition of the type is reachable.
[:zh_CN]
类和枚举的成员名，在其类型的某个定义式可达的任何语境中，都可通过名字查找找到。
[end:note]

[begin:example]
[:en] Interface unit of [`M]:
[:zh_CN] [`M] 的接口单元：
[codeblock]
export module M;
export struct X {
  static void f();
  struct Y { };
};

namespace {
  struct S { };
}
export void f(S);               // OK
struct T { };
export T id(T);                 // OK

export struct A;                // [:en] [`A] exported as incomplete \
                                [:zh_CN] [`A] 作为不完整类型被导出

export auto rootFinder(double a) {
  return [=](double x) { return (x + a/x)/2; };
}

export const int n = 5;         // [:en] OK, [`n] has external linkage \
                                [:zh_CN] OK，[`n] 具有外部连接
[codeblock:end]

[:en] Implementation unit of [`M]:
[:zh_CN] [`M] 的实现单元：
[codeblock]
module M;
struct A {
  int value;
};
[codeblock:end]

[:en] Main program:
[:zh_CN] 主程序：
[codeblock]
import M;
int main() {
  X::f();                       // [:en] OK, [`X] is exported and definition of [`X] is reachable \
                                [:zh_CN] OK，[`X] 被导出，且 [`X] 的定义式可达
  X::Y y;                       // [:en] OK, [`X::Y] is exported as a complete type \
                                [:zh_CN] OK，[`X::Y] 作为完整类型被导出
  auto f = rootFinder(2);       // OK
  return A{45}.value;           // [:en] error: [`A] is incomplete \
                                [:zh_CN] 错误：[`A] 不完整
}
[codeblock:end]
[end:example]

[para]
[begin:note]
[:en]
Declarations in an exported [~namespace-definition] or in an exported
[~linkage-specification] ([#dcl.link]) are exported and subject to the rules of
exported declarations.
[:zh_CN]
被导出的[~命名空间定义式]或被导出的[~连接说明]（[#dcl.link]）中的声明式均被导出，
且遵循被导出声明式的各项规则。

[begin:example]
[codeblock]
export module M;
export namespace N {
  int x;                        // OK
  static_assert(1 == 1);        // [:en] error: does not declare a name \
                                [:zh_CN] 错误：并未声明一个名字
}
[codeblock:end]
[end:example]
[end:note]
