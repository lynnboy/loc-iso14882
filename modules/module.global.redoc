[section#module.global
    [:en] Global module fragment
    [:zh_CN] 全局模块分段
]

[syntax]
[rule global-module-fragment [:zh_CN] 全局模块分段 ]
    [| [`module] [`;] [~:opt top-level-declaration-seq] [`;] ]
[rule:end]
[syntax:end]

[para]
[enter:note]
[:en]
Prior to phase 4 of translation, only preprocessing directives can appear in the
[~top-level-declaration-seq] ([#cpp.glob.frag]).
[:zh_CN]
在翻译阶段 4 之前，只有预处理指令可以出现于[~顶层声明式序列]之中
（[#cpp.globl.frag]）。
[exit:note]

[para]
[:en]
A [~global-module-fragment] specifies the contents of the [+global module
fragment] for a module unit.
[:zh_CN]
[~全局模块分段]指定了一个模块单元的[+全局模块分段]的内容。

[:en]
The global module fragment can be used to provide declarations that are attached
to the global module and usable within the module unit.
[:zh_CN]
全局模块分段可以用于提供一些附属于全局模块并且在模块单元中可用的声明式。

[para]
[:en]
A declaration [$D] is [+decl-reachable] from a declaration [$S] in the same
translation unit if:
[:zh_CN]
以下条件下，声明式 [$D] 对于同一个翻译单元中的声明式 [$S] 是[+声明可达]的：

[list]
[item]
[:en]
[$D] does not declare a function or function template and [$S] contains an
[~id-expression], [~namespace-name], [~type-name], [~template-name], or
[~concept-name] naming [$D], or
[:zh_CN]
[$D] 并未声明函数或函数模板，而 [$S] 包含指名了 [$D] 的[~标识表达式]、
[~命名空间名]、[~类型名]、[~模板名]或[~概念名]，或者

[item]
[:en]
[$D] declares a function or function template that is named by an expression
([#basic.def.odr]) appearing in [$S], or
[:zh_CN]
[$D] 声明了某个函数或函数模板，并由 [$S] 中出现的某个表达式所指名
（[#basic.def.odr]），或者

[item]
[:en]
[$S] contains an expression [`E] of the form
[:zh_CN]
[$S] 包含某个如下形式的表达式 [`E]

[syntax:explanation]
[~postfix-expression] [`(] [~:opt expression-list] [`)]
[syntax:end]

[:en@~]
whose [~postfix-expression] denotes a dependent name, or for an operator
expression whose operator denotes a dependent name, and [$D] is found by name
lookup for the corresponding name in an expression synthesized from [`E] by
replacing each type-dependent argument or operand with a value of a placeholder
type with no associated namespaces or entities, or
[:zh_CN@~]
其[~后缀表达式]代表某个待决名，或对于运算符表达式则其运算符代表某个待决名，并且
对通过将 [`E] 中的每个类型待决的实参或操作数替换为某个没有关联命名空间和实体的
占位符类型的值的方式合成而得的表达式，在其中进行对应的名字查找找到了 [$D]，或者

[item]
[:en]
[$S] contains an expression that takes the address of an overloaded function
([#over.over]) whose set of overloads contains [$D] and for which the target
type is dependent, or
[:zh_CN]
[$S] 包含某个表达式获取了某个重载函数的地址（[#over.over]）且其重载集合中包含
[$D]，并且其目标类型待决，或者

[item]
[:en]
there exists a declaration [$M] that is not a [~namespace-definition] for which
[$M] is decl-reachable from [$S] and either
[:zh_CN]
存在某个并非[~命名空间定义式]的声明式 [$M]，从 [$S] 对 [$M] 声明可达，并且

[list]
[item]
[:en]
[$D] is decl-reachable from [$M], or
[:zh_CN]
对 [$D] 从 [$M] 声明可达，或
[item]
[:en]
[$D] redeclares the entity declared by [$M] or [$M] redeclares the entity
declared by [$D], and [$D] is neither a friend declaration nor a block-scope
declaration, or
[:zh_CN]
[$D] 重复声明了由 [$M] 所声明的实体，或者 [$M] 重复声明了由 [$D] 所声明的实体，
并且 [$D] 既不是友元声明式也不是块作用域的声明式，或者
[item]
[:en]
[$D] declares a namespace [$N] and [$M] is a member of [$N], or
[:zh_CN]
[$D] 声明命名空间 [$N] 并且 [$M] 是 [$N] 的成员，或者
[item]
[:en]
one of [$M] and [$D] declares a class or class template [$C] and the other
declares a member or friend of [$C], or
[:zh_CN]
[$M] 和 [$D] 二者之一声明类或类模板 [$C]，而另一个声明 [$C] 的成员或友元，或者
[item]
[:en]
one of [$D] and [$M] declares an enumeration [$E] and the other declares an
enumerator of [$E], or
[:zh_CN]
[$D] 和 [$M] 二者之一声明枚举 [$E]，而另一个声明 [$E] 的枚举符，或者
[item]
[:en]
[$D] declares a function or variable and [$M] is declared in [$D],[#:note#fn:$1]
or
[:zh_CN]
[$D] 声明某个函数或变量，而 [$M] 在 [$D] 之中声明，[#:note#fn:$1]

[note:foot#fn:$1
[:en]
A declaration can appear within a [~lambda-expression] in the initializer of a
variable.
[:zh_CN]
声明式可以出现在变量的初始化式中的 [~lambda-表达式]之中。
[note:end]

[item]
[:en]
one of [$M] and [$D] declares a template and the other declares a partial or
explicit specialization or an implicit or explicit instantiation of that
template, or
[:zh_CN]
[$M] 和 [$D] 之一声明某个模板，而另一个声明了该模板的部分或显式特化式或者隐式或
显式实例化式，或者
[item]
[:en]
one of [$M] and [$D] declares a class or enumeration type and the other
introduces a typedef name for linkage purposes for that type.
[:zh_CN]
[$M] 和 [$D] 之一声明某个类或枚举类型，而另一个为该类型为连接目的而引入 typedef
名。
[list:end]
[list:end]

[:en]
In this determination, it is unspecified
[:zh_CN]
这个确定过程中，以下各项是未指明的：

[list]
[item]
[:en]
whether a reference to an [~alias-declaration], [`typedef] declaration,
[~using-declaration], or [~namespace-alias-declaration] is replaced by the
declarations they name prior to this determination,
[:zh_CN]
是否在该确定过程之前，将所提及的[~别名声明式]、[`typedef] 声明式、[~using-声明式]
或[~命名空间别名声明式]替换为其所指名的声明式，

[item]
[:en]
whether a [~simple-template-id] that does not denote a dependent type and whose
[~template-name] names an alias template is replaced by its denoted type prior
to this determination,
[:zh_CN]
是否在该确定过程之前，将并不代表某个待决类型，且其[~模板名]指名某个别名模板的
[~简单模板标识]替换为其所代表的类型，

[item]
[:en]
whether a [~decltype-specifier] that does not denote a dependent type
is replaced by its denoted type prior to this determination, and
[:zh_CN]
是否在该确定过程之前，将并不代表某个待决类型的 [~decltype-说明符]替换为其所代表
的类型，以及

[item]
[:en]
whether a non-value-dependent constant expression is replaced by the result of
constant evaluation prior to this determination.
[:zh_CN]
是否在该确定过程之前，将并非值待决的常量表达式替换为其常量求值的结果。
[list:end]

[para]
[:en]
A declaration [`D] in a global module fragment of a module unit is [+discarded
[%discarded[!declaration]]] if [`D] is not decl-reachable from any
[~top-level-declaration] in the [~top-level-declaration-seq] of the
[~translation unit].
[:zh_CN]
对于模块单元的全局模块分段中的声明式 [`D]，如果 [`D] 从该[~翻译单元]的
[~顶层声明式序列]中的任何[~顶层声明式]都不是声明可达的，则 [`D] 被[+弃用[%弃用
[!声明式]]]。

[enter:note]
[:en]
A discarded declaration is neither reachable nor visible to name lookup outside
the module unit, nor in template instantiations whose points of instantiation
([#temp.point]) are outside the module unit, even when the instantiation context
([#module.context]) includes the module unit.
[:zh_CN]
弃用的声明式对于模块单元之外的名字查找既不可达也不可见，对于实例化点
（[#temp.point]）处于该模块单元之外的模板实例之中也是如此，即便实例化语境
（[#module.context]）包含该模块单元。
[exit:note]

[para]
[enter:example]
[codeblock]
const int size = 2;
int ary1[size];                 // [:en] unspecified whether [`size] is decl-reachable from [`ary1]
                                // [|:zh_CN] 未指明是否 [`size] 从 [`ary1] 声明可达
constexpr int identity(int x) { return x; }
int ary2[identity(2)];          // [:en] unspecified whether [`identity] is decl-reachable from [`ary2]
                                // [|:zh_CN] 未指明是否 [`identity] 从 [`ary2] 声明可达

template<typename> struct S;
template<typename, int> struct S2;
constexpr int g(int);

template<typename T, int N>
S<S2<T, g(N)>> f();             // [:en] [`S], [`S2], [`g], and [`::] are decl-reachable from [`f]
                                // [|:zh_CN] [`S]、[`S2]、[`g] 和 [`::] 均为从 [`f] 声明可达

template<int N>
void h() noexcept(g(N) == N);   // [:en] [`g] and [`::] are decl-reachable from [`h]
                                // [|:zh_CN] [`g] 和 [`::] 从 [`h] 声明可达
[codeblock:end]
[exit:example]

[para]
[enter:example]
[:en] Source file [`"foo.h"]:
[:zh_CN] 源文件 [`"foo.h"]：
[codeblock]
namespace N {
  struct X {};
  int d();
  int e();
  inline int f(X, int = d()) { return e(); }
  int g(X);
  int h(X);
}
[codeblock:end]

[:en] Module [`M] interface:
[:zh_CN] 模块 [`M] 的接口：
[codeblock]
module;
#include "foo.h"
export module M;
template<typename T> int use_f() {
  N::X x;                       // [:en] [`N::X], [`N], and [`::] are decl-reachable from [`use_f]
                                // [|:zh_CN] [`N::X]、[`N] 和 [`::] 均为从 [`use_f] 声明可达
  return f(x, 123);             // [:en] [`N::f] is decl-reachable from [`use_f],
                                // [|:zh_CN] [`N::f] 从 [`use_f] 声明可达
                                // [:en] [`N::e] is indirectly decl-reachable from [`use_f]
                                // [|:zh_CN] [`N::e] 从 [`use_f] 间接声明可达
                                //   [:en@~] because it is decl-reachable from [`N::f], and
                                //   [|:zh_CN@~] 因为它从 [`N::f] 声明可达，而
                                // [:en] [`N::d] is decl-reachable from [`use_f]
                                // [|:zh_CN] [`N::d] 从 [`use_f] 声明可达
                                //   [:en@~] because it is decl-reachable from [`N::f]
                                //   [|:zh_CN@~] 因为它从 [`N::f] 声明可达
                                //   [:en@~] even though it is not used in this call
                                //   [|:zh_CN@~] 虽然在这次调用中并未使用它
}
template<typename T> int use_g() {
  N::X x;                       // [:en] [`N::X], [`N], and [`::] are decl-reachable from [`use_f]
                                // [|:zh_CN] [`N::X]、[`N] 和 [`::] 均为从 [`use_f] 声明可达
  return g((T(), x));           // [:en] [`N::g] is not decl-reachable from [`use_g]
                                // [|:zh_CN] [`N::g] 从 [`use_g] 并非声明可达
}
template<typename T> int use_h() {
  N::X x;                       // [:en] [`N::X], [`N], and [`::] are decl-reachable from [`use_h]
                                // [|:zh_CN] [`N::X]、[`N] 和 [`::] 均为从 [`use_h] 声明可达
  return h((T(), x));           // [:en] [`N::h] is not decl-reachable from [`use_h], but
                                // [|:zh_CN] [`N::h] 从 [`use_h] 并非声明可达，但
                                // [:en@~] [`N::h] is decl-reachable from [`use_h<int>]
                                // [|:zh_CN@~] [`N::h] 从 [`use_h<int>] 声明可达
}
int k = use_h<int>();
  // [:en] [`use_h<int>] is decl-reachable from [`k], so
  // [|:zh_CN] [`use_h<int>] 从 [`k] 声明可达，因此
  // [:en@~] [`N::h] is decl-reachable from [`k]
  // [|:zh_CN@~] [`N::h] 从 [`k] 声明可达
[codeblock:end]

[:en] Module [`M] implementation:
[:zh_CN] 模块 [`M] 的实现：
[codeblock]
module M;
int a = use_f<int>();           // OK
int b = use_g<int>();           // [:en] error: no viable function for call to [`g];
                                // [|:zh_CN] 错误：对 [`g] 的调用没有可行函数；
                                // [:en] [`g] is not decl-reachable from purview of
                                // [|:zh_CN] [`g] 从模块 [`M] 的接口的视野中
                                // [:en@~] module [`M][=']s interface, so is discarded
                                // [|:zh_CN@~] 并非声明可达，因此被弃用
int c = use_h<int>();           // OK
[codeblock:end]
[exit:example]
