[section#ostream.inserters.character
    [:en] Character inserter function templates
    [:zh_CN] 字符插入符函数模板
]

[%@lib@member operator<<[!basic_ostream]]
[codeblock:declaration]
template<class charT, class traits>
  basic_ostream<charT, traits>& operator<<(basic_ostream<charT, traits>& out, charT c);
template<class charT, class traits>
  basic_ostream<charT, traits>& operator<<(basic_ostream<charT, traits>& out, char c);
// [:en] specialization \
   [:zh_CN] 特化
template<class traits>
  basic_ostream<char, traits>& operator<<(basic_ostream<char, traits>& out, char c);
// [:en] signed and unsigned \
   [:zh_CN] signed 和 unsigned
template<class traits>
  basic_ostream<char, traits>& operator<<(basic_ostream<char, traits>& out, signed char c);
template<class traits>
  basic_ostream<char, traits>& operator<<(basic_ostream<char, traits>& out, unsigned char c);
[codeblock:end]

[div:description]
[para:effects]
[:en] Behaves as an formatted output function ([#ostream.formatted.reqmts]) of
[`out].
[:zh_CN] 行为符合对 [`out] 的格式化输出函数（如 [#ostream.formatted.reqmts] 中
所述）。

[:en] Constructs a character sequence [`seq].
[:zh_CN] 构造一个字符序列 [`seq]。

[:en] If [`c] has type [`char] and the character type of the stream is not
[`char], then [`seq] consists of [`out.widen(c)]; otherwise [`seq] consists of
[`c].
[:zh_CN] 若 [`c] 类型为 [`char] 而流的字符类型不是 [`char]，则 [`seq] 由
[`out.widen(c)] 构成，否则 [`seq] 由 [`c] 构成。

[:en] Determines padding for [`seq] as described in [#ostream.formatted.reqmts].
[:zh_CN] 如 [#ostream.formatted.reqmts] 所述确定对 [`seq] 的填充。

[:en] Inserts [`seq] into [`out].
[:zh_CN] 将 [`seq] 插入 [`out]。

[:en] Calls [`os.width(0)].
[:zh_CN] 调用 [`os.width(0)]。

[para:returns]
[:en] [`out].
[:zh_CN] [`out]。
[div:end]

[%@lib@member operator<<[!basic_ostream]]
[codeblock:declaration]
template<class charT, class traits>
  basic_ostream<charT, traits>& operator<<(basic_ostream<charT, traits>& out, const charT* s);
template<class charT, class traits>
  basic_ostream<charT, traits>& operator<<(basic_ostream<charT, traits>& out, const char* s);
template<class traits>
  basic_ostream<char, traits>& operator<<(basic_ostream<char, traits>& out, const char* s);
template<class traits>
  basic_ostream<char, traits>& operator<<(basic_ostream<char, traits>& out, const signed char* s);
template<class traits>
  basic_ostream<char, traits>& operator<<(basic_ostream<char, traits>& out,
                                          const unsigned char* s);
[codeblock:end]

[div:description]
[para:requires]
[:en] [`s] shall not be a null pointer.
[:zh_CN] [`s] 不能为空指针。

[para:effects]
[:en] Behaves like a formatted inserter (as described in
[#ostream.formatted.reqmts]) of [`out].
[:zh_CN] 行为符合对 [`out] 的格式化插入符（如 [#ostream.formatted.reqmts] 中
所述）。

[:en] Creates a character sequence [`seq] of [`n] characters starting at [`s],
each widened using [`out.widen()] ([#basic.ios.members]), where [`n] is the
number that would be computed as if by:
[:zh_CN] 创建一个以 [`s] 开头的有 [`n] 个字符的字符序列 [`seq]，其中每个字符都以
[`out.widen()] 来拓宽（[#basic.ios.members]），[`n] 为通过如同以下的计算所能得到
的数值：

[list]
[item]
[:en] [`traits::length(s)] for the overload where the first argument is of type
[`basic_ostream<charT, traits>&] and the second is of type [`const charT*], and
also for the overload where the first argument is of type
[`basic_ostream<char, traits>&] and the second is of type [`const char*],
[:zh_CN] 对于第一个实参类型为 [`basic_ostream<charT, traits>&] 且第二个实参类型
为 [`const charT*] 的重载，以及对于第一个实参类型为
[`basic_ostream<char, traits>&] 且第二个实参类型为 [`const char*] 的重载，为
[`traits::length(s)]，

[item]
[:en] [`char_traits<char>::length(s)] for the overload where the first argument
is of type [`basic_ostream<charT, traits>&] and the second is of type
[`const char*],
[:zh_CN] 对于第一个实参类型为 [`basic_ostream<charT, traits>&] 且第二个实参类型
为 [`const char*] 的重载，为 [`char_traits<char>::length(s)]，

[item]
[:en] [`traits::length(reinterpret_cast<const char*>(s))] for the other two
overloads.
[:zh_CN] 对于其他两个重载为 [`traits::length(reinterpret_cast<const char*>(s))]。
[list:end]

[:en] Determines padding for [`seq] as described in [#ostream.formatted.reqmts].
[:zh_CN] 如 [#ostream.formatted.reqmts] 所述确定对 [`seq] 的填充。

[:en] Inserts [`seq] into [`out].
[:zh_CN] 将 [`seq] 插入 [`out]。

[:en] Calls [`width(0)].
[:zh_CN] 调用 [`width(0)]。

[para:returns]
[:en] [`out].
[:zh_CN] [`out]。
[div:end]
