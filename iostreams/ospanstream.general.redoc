[section#ospanstream.general
    [:en] General
    [:zh_CN] 概述
]

[%@lib basic_ospanstream]
[codeblock:synopsis]
namespace std {
  template<class charT, class traits = char_traits<charT>>
  class basic_ospanstream
    : public basic_ostream<charT, traits> {
  public:
    using char_type   = charT;
    using int_type    = typename traits::int_type;
    using pos_type    = typename traits::pos_type;
    using off_type    = typename traits::off_type;
    using traits_type = traits;

    // [:en] [#ospanstream.cons], constructors \
    [:zh_CN] [#ospanstream.ctconsor]，构造函数
    explicit basic_ospanstream(std::span<charT> s,
                               ios_base::openmode which = ios_base::out);
    basic_ospanstream(const basic_ospanstream&) = delete;
    basic_ospanstream(basic_ospanstream&& rhs);

    basic_ospanstream& operator=(const basic_ospanstream&) = delete;
    basic_ospanstream& operator=(basic_ospanstream&& rhs);

    // [:en] [#ospanstream.swap], Swap \
    [:zh_CN] [#ospanstream.swap]，交换
    void swap(basic_ospanstream& rhs);

    // [:en] [#ospanstream.members], members \
    [:zh_CN] [#ospanstream.members]，成员
    basic_spanbuf<charT, traits>* rdbuf() const noexcept;

    std::span<charT> span() const noexcept;
    void span(std::span<charT> s) noexcept;

  private:
    basic_spanbuf<charT, traits> sb;    // [=expos]
  };
}
[codeblock:end]
