[section#iosfwd.syn
    [:en] Header [`<iosfwd>] synopsis
    [:zh_CN] 头文件 [`<iosfwd>] 纲要
]

[%@hdr@def iosfwd]

[%@library basic_ios]
[%@library basic_streambuf]
[%@library basic_istream]
[%@library basic_ostream]
[%@library basic_stringbuf]
[%@library basic_istringstream]
[%@library basic_ostringstream]
[%@library basic_stringstream]
[%@library basic_filebuf]
[%@library basic_ifstream]
[%@library basic_ofstream]
[%@library basic_fstream]
[%@library basic_istreambuf_iterator]
[%@library basic_ostreambuf_iterator]
[%@library basic_syncbuf]
[%@library basic_osyncstream]
[%@library ios]
[%@library streambuf]
[%@library istream]
[%@library ostream]
[%@library stringbuf]
[%@library istringstream]
[%@library ostringstream]
[%@library stringstream]
[%@library filebuf]
[%@library ifstream]
[%@library ofstream]
[%@library fstream]
[%@library wstreambuf]
[%@library wistream]
[%@library wostream]
[%@library wstringbuf]
[%@library wistringstream]
[%@library wostringstream]
[%@library wstringstream]
[%@library wfilebuf]
[%@library wifstream]
[%@library wofstream]
[%@library wfstream]
[%@library syncbuf]
[%@library wsyncbuf]
[%@library osyncstream]
[%@library wosyncstream]
[%@library fpos]
[%@library streampos]
[%@library wstreampos]
[%@library u16streampos]
[%@library u32streampos]
[codeblock:synopsis]
namespace std {
  template<class charT> struct char_traits;
  template<> struct char_traits<char>;
  template<> struct char_traits<char8_t>;
  template<> struct char_traits<char16_t>;
  template<> struct char_traits<char32_t>;
  template<> struct char_traits<wchar_t>;

  template<class T> class allocator;

  template<class charT, class traits = char_traits<charT>>
    class basic_ios;
  template<class charT, class traits = char_traits<charT>>
    class basic_streambuf;
  template<class charT, class traits = char_traits<charT>>
    class basic_istream;
  template<class charT, class traits = char_traits<charT>>
    class basic_ostream;
  template<class charT, class traits = char_traits<charT>>
    class basic_iostream;

  template<class charT, class traits = char_traits<charT>,
           class Allocator = allocator<charT>>
    class basic_stringbuf;
  template<class charT, class traits = char_traits<charT>,
           class Allocator = allocator<charT>>
    class basic_istringstream;
  template<class charT, class traits = char_traits<charT>,
           class Allocator = allocator<charT>>
    class basic_ostringstream;
  template<class charT, class traits = char_traits<charT>,
           class Allocator = allocator<charT>>
    class basic_stringstream;

  template<class charT, class traits = char_traits<charT>>
    class basic_filebuf;
  template<class charT, class traits = char_traits<charT>>
    class basic_ifstream;
  template<class charT, class traits = char_traits<charT>>
    class basic_ofstream;
  template<class charT, class traits = char_traits<charT>>
    class basic_fstream;

  template<class charT, class traits = char_traits<charT>,
           class Allocator = allocator<charT>>
    class basic_syncbuf;
  template<class charT, class traits = char_traits<charT>,
           class Allocator = allocator<charT>>
    class basic_osyncstream;

  template<class charT, class traits = char_traits<charT>>
    class istreambuf_iterator;
  template<class charT, class traits = char_traits<charT>>
    class ostreambuf_iterator;

  using ios  = basic_ios<char>;
  using wios = basic_ios<wchar_t>;

  using streambuf = basic_streambuf<char>;
  using istream   = basic_istream<char>;
  using ostream   = basic_ostream<char>;
  using iostream  = basic_iostream<char>;

  using stringbuf     = basic_stringbuf<char>;
  using istringstream = basic_istringstream<char>;
  using ostringstream = basic_ostringstream<char>;
  using stringstream  = basic_stringstream<char>;

  using filebuf  = basic_filebuf<char>;
  using ifstream = basic_ifstream<char>;
  using ofstream = basic_ofstream<char>;
  using fstream  = basic_fstream<char>;

  using syncbuf = basic_syncbuf<char>;
  using osyncstream = basic_osyncstream<char>;

  using wstreambuf = basic_streambuf<wchar_t>;
  using wistream   = basic_istream<wchar_t>;
  using wostream   = basic_ostream<wchar_t>;
  using wiostream  = basic_iostream<wchar_t>;

  using wstringbuf     = basic_stringbuf<wchar_t>;
  using wistringstream = basic_istringstream<wchar_t>;
  using wostringstream = basic_ostringstream<wchar_t>;
  using wstringstream  = basic_stringstream<wchar_t>;

  using wfilebuf  = basic_filebuf<wchar_t>;
  using wifstream = basic_ifstream<wchar_t>;
  using wofstream = basic_ofstream<wchar_t>;
  using wfstream  = basic_fstream<wchar_t>;

  using wsyncbuf = basic_syncbuf<wchar_t>;
  using wosyncstream = basic_osyncstream<wchar_t>;

  template <class state> class fpos;
  using streampos  = fpos<char_traits<char>::state_type>;
  using wstreampos = fpos<char_traits<wchar_t>::state_type>;
  using u8streampos = fpos<char_traits<char8_t>::state_type>;
  using u16streampos = fpos<char_traits<char16_t>::state_type>;
  using u32streampos = fpos<char_traits<char32_t>::state_type>;
}
[codeblock:end]

[para]
[:en] Default template arguments are described as appearing both in [?libheader
iosfwd] and in the synopsis of other headers but it is well-formed to include
both [?libheader iosfwd] and one or more of the other headers.[#:note#fn:$1]
[:zh_CN] 对默认模板实参的描述，既在 [?libheader iosfwd] 中出现，也在其他头文件的
纲要中出现，但同时包含 [?libheader iosfwd] 和一个或多个其他头文件是良构的。
[#:note#fn:$1]

[note:foot#fn:$1]
[:en] It is the implementation[=']s responsibility to implement headers so that
including [?libheader iosfwd] and other headers does not violate the rules about
multiple occurrences of default arguments.
[:zh_CN] 各实现负责将这些头文件实现为，包含 [?libheader iosfwd] 和其他头文件不会
违反有关多次出现的默认实参的规则。
[note:end]
