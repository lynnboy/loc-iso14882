[section#fstream
    [:en] Class template [`basic_fstream]
    [:zh_CN] 类模板 [`basic_fstream]
]

[%@lib basic_fstream]
[codeblock:synopsis]
namespace std {
  template<class charT, class traits = char_traits<charT>>
  class basic_fstream : public basic_iostream<charT, traits> {
  public:
    using char_type   = charT;
    using int_type    = typename traits::int_type;
    using pos_type    = typename traits::pos_type;
    using off_type    = typename traits::off_type;
    using traits_type = traits;

    // [:en] [#fstream.cons], constructors \
       [:zh_CN] [#fstream.cons]，构造函数
    basic_fstream();
    explicit basic_fstream(
      const char* s,
      ios_base::openmode mode = ios_base::in | ios_base::out);
    explicit basic_fstream(
      const filesystem::path::value_type* s,
      ios_base::openmode mode = ios_base::in|ios_base::out);    // [:en] wide systems only; see [#fstream.syn] \
                                                                   [:zh_CN] 仅宽字符系统；参见 [#fstream.syn]
    explicit basic_fstream(
      const string& s,
      ios_base::openmode mode = ios_base::in | ios_base::out);
    explicit basic_fstream(
      const filesystem::path& s,
      ios_base::openmode mode = ios_base::in | ios_base::out);
    basic_fstream(const basic_fstream&) = delete;
    basic_fstream(basic_fstream&& rhs);

    // [:en] [#fstream.assign], assign and swap \
       [:zh_CN] [#fstream.assign]，赋值和交换
    basic_fstream& operator=(const basic_fstream&) = delete;
    basic_fstream& operator=(basic_fstream&& rhs);
    void swap(basic_fstream& rhs);

    // [:en] [#fstream.members], members \
       [:zh_CN] [#fstream.members]，成员
    basic_filebuf<charT, traits>* rdbuf() const;
    bool is_open() const;
    void open(
      const char* s,
      ios_base::openmode mode = ios_base::in | ios_base::out);
    void open(
      const filesystem::path::value_type* s,
      ios_base::openmode mode = ios_base::in|ios_base::out);    // [:en] wide systems only; see [#fstream.syn] \
                                                                   [:zh_CN] 仅宽字符系统；参见 [#fstream.syn]
    void open(
      const string& s,
      ios_base::openmode mode = ios_base::in | ios_base::out);
    void open(
      const filesystem::path& s,
      ios_base::openmode mode = ios_base::in | ios_base::out);
    void close();

  private:
    basic_filebuf<charT, traits> sb;    // [=expos]
  };

  template<class charT, class traits>
    void swap(basic_fstream<charT, traits>& x,
              basic_fstream<charT, traits>& y);
}
[codeblock:end]

[para]
[:en] The class template [`basic_fstream<charT, traits>] supports reading and
writing from named files.
[:zh_CN] 类模板 [`basic_fstream<charT, traits>] 支持从具名的文件进行读取和写入。

[:en] It uses a [`basic_filebuf<charT, traits>] object to control the associated
sequence.
[:zh_CN] 它利用一个 [`basic_filebuf<charT, traits>] 对象来控制其所关联的序列。

[:en] For the sake of exposition, the maintained data is presented here as:
[:zh_CN] 为阐释目的，此处将其所维护的数据表示为：
[list]
[item]
[:en] [`sb], the [`basic_filebuf] object.
[:zh_CN] [`sb]，[`basic_filebuf] 对象。
[list:end]

[include fstream.cons]

[include fstream.assign]

[include fstream.members]
