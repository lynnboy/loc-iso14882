[section#fs.path.compare
    [:en] [`path] compare
    [:zh_CN] [`path] 比较
]

[%@library compare[!path]]
[%@library path[!compare]]
[codeblock:declaration]
int compare(const path& p) const noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[list]
[item]
[:en] A value less than [`0], if [`native()] for the elements of [`*this] are
lexicographically less than [`native()] for the elements of [`p]; otherwise,
[:zh_CN] 当 [`*this] 的各元素的 [`native()] 依字典序小于 [`p] 的各元素的
[`native()] 时，返回小于 [`0] 的值；否则

[item]
[:en] a value greater than [`0], if [`native()] for the elements of [`*this] are
lexicographically greater than [`native()] for the elements of [`p]; otherwise,
[:zh_CN] 当 [`*this] 的各元素的 [`native()] 依字典序大于 [`p] 的各元素的
[`native()] 时，返回大于 [`0] 的值；否则

[item]
[:en] [`0].
[:zh_CN] [`0]。
[list:end]

[para:remarks]
[:en] The elements are determined as if by iteration over the half-open range
[=range(begin(),end())] for [`*this] and [`p].
[:zh_CN] 通为 [`*this] 和 [`p] 在半开范围 [=range(begin(),end())] 中迭代来确定
它们的各个元素。
[exit:description]

[%@library compare[!path]]
[%@library path[!compare]]
[codeblock:declaration]
int compare(const string_type& s) const
int compare(basic_string_view<value_type> s) const;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`compare(path(s))].
[:zh_CN] [`compare(path(s))]。
[exit:description]

[%@library compare[!path]]
[%@library path[!compare]]
[codeblock:declaration]
int compare(const value_type* s) const
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`compare(path(s))].
[:zh_CN] [`compare(path(s))]。
[exit:description]
