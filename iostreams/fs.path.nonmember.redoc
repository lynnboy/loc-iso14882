[section#fs.path.nonmember
    [:en] Non-member functions
    [:zh_CN] 非成员函数
]

[%@lib@member swap[!path]]
[codeblock:declaration]
void swap(path& lhs, path& rhs) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to [`lhs.swap(rhs)].
[:zh_CN] 等价于 [`lhs.swap(rhs)]。
[div:end]

[%@lib@member hash_value[!path]]
[codeblock:declaration]
size_t hash_value(const path& p) noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] A hash value for the path [`p].
[:zh_CN] 路径 [`p] 的散列值。

[:en] If for two paths, [`p1 == p2] then [`hash_value(p1) == hash_value(p2)].
[:zh_CN] 如果两个路径有 [`p1 == p2]，则 [`hash_value(p1) == hash_value(p2)]。
[div:end]

[%@lib@member operator==[!path]]
[codeblock:declaration]
friend bool operator==(const path& lhs, const path& rhs) noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`lhs.compare(rhs) == 0].
[:zh_CN] [`lhs.compare(rhs) == 0]。

[%[:en]path equality
  [:zh_CN]路径相等性]
[para]
[begin:note]
[:en] Path equality and path equivalence have different semantics.
[:zh_CN] 路径相等性和路径等价性具有不同的语义。

[list]
[item]
[:en] Equality is determined by the [`path] non-member [`operator==], which
considers the two paths[='] lexical representations only.
[:zh_CN] 相等性通过 [`path] 的非成员函数 [`operator==] 来判定，它仅考虑两个路径
的此法表示。

[begin:example]
[:en] [`path("foo") == "bar"] is never [`true].
[:zh_CN] [`path("foo") == "bar"] 不可能为 [`true]。
[end:example]

[item]
[:en] Equivalence is determined by the [`equivalent()] non-member function,
which determines if two paths resolve ([#fs.class.path]) to the same file system
entity.
[:zh_CN] 等价性通过非成员函数 [`equivalence()] 来判定，它判定两个路径是否被解析
（[#fs.class.path]）为同一个文件系统实体。

[begin:example]
[:en] [`equivalent("foo", "bar")] will be [`true] when both paths resolve to the
same file.
[:zh_CN] [`equivalent("foo", "bar")] 在两个路径都解析为同一个文件时为 [`true]。
[end:example]
[list:end]
[end:note]
[div:end]

[%@lib@member operator<=>[!path]]
[codeblock:declaration]
friend strong_ordering operator<=>(const path& lhs, const path& rhs) noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`lhs.compare(rhs) <=> 0].
[:zh_CN] [`lhs.compare(rhs) <=> 0]。
[div:end]

[%@lib@member operator/[!path]]
[codeblock:declaration]
friend path operator/(const path& lhs, const path& rhs);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return path(lhs) /= rhs;]
[:zh_CN] 等价于：[`return path(lhs) /= rhs;]
[div:end]
