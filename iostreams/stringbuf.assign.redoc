[section#stringbuf.assign
    [:en] Assignment and swap
    [:zh_CN] 赋值和交换
]

[%@lib@member operator=[!basic_stringbuf]]
[codeblock:declaration]
basic_stringbuf& operator=(basic_stringbuf&& rhs);
[codeblock:end]

[div:description]
[para:effects]
[:en] After the move assignment [`*this] has the observable state it would have
had if it had been move constructed from [`rhs] (see [#stringbuf.cons]).
[:zh_CN] 经过移动赋值之后，[`*this] 具有与当其由 [`rhs] 进行移动构造后所具有的
相同可观察状态（参见 [#stringbuf.cons]）。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@lib@member swap[!basic_stringbuf]]
[codeblock:declaration]
void swap(basic_stringbuf& rhs) noexcept([[redoc("=seebelow")]]);
[codeblock:end]

[div:description]
[para:expects]
[:en] [`allocator_traits<Allocator>::propagate_on_container_swap::value] is
[`true] or [`get_allocator() == s.get_allocator()] is [`true].
[:zh_CN] [`allocator_traits<Allocator>::propagate_on_container_swap::value] 为
[`true] 或 [`get_allocator() == s.get_allocator()] 为 [`true]。

[para:effects]
[:en] Exchanges the state of [`*this] and [`rhs].
[:zh_CN] 互换 [`*this] 和 [`rhs] 的状态。

[para:remarks]
[:en] The expression inside [`noexcept] is equivalent to:
[`allocator_traits<Allocator>::propagate_on_container_swap::value ||
allocator_traits<Allocator>::is_always_equal::value].
[:zh_CN] [`noexcept] 之内的表达式等价于：
[`allocator_traits<Allocator>::propagate_on_container_swap::value ||
allocator_traits<Allocator>::is_always_equal::value]。
[div:end]

[%@lib@member swap[!basic_stringbuf]]
[codeblock:declaration]
template<class charT, class traits, class Allocator>
  void swap(basic_stringbuf<charT, traits, Allocator>& x,
            basic_stringbuf<charT, traits, Allocator>& y) noexcept(noexcept(x.swap(y)));
[codeblock:end]

[div:description]
[para:effects]
[:en] As if by [`x.swap(y)].
[:zh_CN] 如同执行 [`x.swap(y)]。
[div:end]
