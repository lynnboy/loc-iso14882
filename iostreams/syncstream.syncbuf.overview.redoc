[section#syncstream.syncbuf.overview
    [:en] Overview
    [:zh_CN] 概述
]

[%@lib basic_syncbuf]
[codeblock:synopsis]
namespace std {
  template<class charT, class traits = char_traits<charT>, class Allocator = allocator<charT>>
  class basic_syncbuf : public basic_streambuf<charT, traits> {
  public:
    using char_type      = charT;
    using int_type       = typename traits::int_type;
    using pos_type       = typename traits::pos_type;
    using off_type       = typename traits::off_type;
    using traits_type    = traits;
    using allocator_type = Allocator;

    using streambuf_type = basic_streambuf<charT, traits>;

    // [:en] [#syncstream.syncbuf.cons], construction and destruction \
    [:zh_CN] [#syncstream.syncbuf.cons]，构造和销毁
    basic_syncbuf()
      : basic_syncbuf(nullptr) {}
    explicit basic_syncbuf(streambuf_type* obuf)
      : basic_syncbuf(obuf, Allocator()) {}
    basic_syncbuf(streambuf_type*, const Allocator&);
    basic_syncbuf(basic_syncbuf&&);
    ~basic_syncbuf();

    // [:en] [#syncstream.syncbuf.assign], assignment and swap \
    [:zh_CN] [#syncstream.syncbuf.assign]，赋值和交换
    basic_syncbuf& operator=(basic_syncbuf&&);
    void swap(basic_syncbuf&);

    // [:en] [#syncstream.syncbuf.members], member functions \
    [:zh_CN] [#syncstream.syncbuf.members]，成员函数
    bool emit();
    streambuf_type* get_wrapped() const noexcept;
    allocator_type get_allocator() const noexcept;
    void set_emit_on_sync(bool) noexcept;

  protected:
    // [:en] [#syncstream.syncbuf.virtuals], overridden virtual functions \
    [:zh_CN] [#syncstream.syncbuf.virtuals]，覆盖的虚函数
    int sync() override;

  private:
    streambuf_type* [[redoc("*>")]]wrapped;    // [=expos]
    bool [[redoc("*>")]]emit-on-sync{};        // [=expos]
  };
}
[codeblock:end]

[para]
[:en] Class template [`basic_syncbuf] stores character data written to it, known
as the associated output, into internal buffers allocated using the object[=']s
allocator.
[:zh_CN] 类模板 [`basic_syncbuf] 将写入它的字符数据（这称为其关联的输出），存储
到使用该对象的分配器所分配的内部缓冲区中。

[:en] The associated output is transferred to the wrapped stream buffer object
[`*[*wrapped]] when [`emit()] is called or when the [`basic_syncbuf] object is
destroyed.
[:zh_CN] 当 [`emit()] 被调用或当 [`basic_syncbuf] 对象被销毁时，其所关联的输出
被转移给其所包装的流缓冲区对象 [`*[*wrapped]] 中。

[:en] Such transfers are atomic with respect to transfers by other
[`basic_syncbuf] objects with the same wrapped stream buffer object.
[:zh_CN] 这样的传输操作，与由其他具有相同包装流缓冲区对象的 [`basic_syncbuf]
对象的传输操作来说是原子性的。
