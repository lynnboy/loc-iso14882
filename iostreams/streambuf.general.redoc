[section#streambuf.general
    [:en] General
    [:zh_CN] 概述
]

[%@lib basic_streambuf]
[codeblock:synopsis]
namespace std {
  template<class charT, class traits = char_traits<charT>>
  class basic_streambuf {
  public:
    using char_type   = charT;
    using int_type    = typename traits::int_type;
    using pos_type    = typename traits::pos_type;
    using off_type    = typename traits::off_type;
    using traits_type = traits;

    virtual ~basic_streambuf();

    // [:en] [#streambuf.locales], locales \
    [:zh_CN] [#streambuf.locales]，地域
    locale   pubimbue(const locale& loc);
    locale   getloc() const;

    // [:en] [#streambuf.buffer], buffer and positioning \
    [:zh_CN] [#streambuf.buffer]，缓冲区及其定位
    basic_streambuf* pubsetbuf(char_type* s, streamsize n);
    pos_type pubseekoff(off_type off, ios_base::seekdir way,
                        ios_base::openmode which
                          = ios_base::in | ios_base::out);
    pos_type pubseekpos(pos_type sp,
                        ios_base::openmode which
                          = ios_base::in | ios_base::out);
    int      pubsync();

    // [:en] get and put areas \
    [:zh_CN] 获取与放入区
    // [:en] [#streambuf.pub.get], get area \
    [:zh_CN] [#streambuf.pub.get]，获取区
    streamsize in_avail();
    int_type snextc();
    int_type sbumpc();
    int_type sgetc();
    streamsize sgetn(char_type* s, streamsize n);

    // [:en] [#streambuf.pub.pback], putback \
    [:zh_CN] [#streambuf.pub.pback]，回填
    int_type sputbackc(char_type c);
    int_type sungetc();

    // [:en] [#streambuf.pub.put], put area \
    [:zh_CN] [#streambuf.pub.put]，放入区
    int_type   sputc(char_type c);
    streamsize sputn(const char_type* s, streamsize n);

  protected:
    basic_streambuf();
    basic_streambuf(const basic_streambuf& rhs);
    basic_streambuf& operator=(const basic_streambuf& rhs);

    void swap(basic_streambuf& rhs);

    // [:en] [#streambuf.get.area], get area access \
    [:zh_CN] [#streambuf.get.area]，获取区的访问
    char_type* eback() const;
    char_type* gptr()  const;
    char_type* egptr() const;
    void       gbump(int n);
    void       setg(char_type* gbeg, char_type* gnext, char_type* gend);

    // [:en] [#streambuf.put.area], put area access \
    [:zh_CN] [#streambuf.put.area]，获取区的访问
    char_type* pbase() const;
    char_type* pptr() const;
    char_type* epptr() const;
    void       pbump(int n);
    void       setp(char_type* pbeg, char_type* pend);

    // [:en] [#streambuf.virtuals], virtual functions \
    [:zh_CN] [#streambuf.virtuals]，虚函数
    // [:en] [#streambuf.virt.locales], locales \
    [:zh_CN] [#streambuf.virt.locales]，地域
    virtual void imbue(const locale& loc);

    // [:en] [#streambuf.virt.buffer], buffer management and positioning \
    [:zh_CN] [#streambuf.virt.buffer]，缓冲区的管理和定位
    virtual basic_streambuf* setbuf(char_type* s, streamsize n);
    virtual pos_type seekoff(off_type off, ios_base::seekdir way,
                             ios_base::openmode which
                               = ios_base::in | ios_base::out);
    virtual pos_type seekpos(pos_type sp,
                             ios_base::openmode which
                               = ios_base::in | ios_base::out);
    virtual int      sync();

    // [:en] [#streambuf.virt.get], get area \
    [:zh_CN] [#streambuf.virt.get]，获取区
    virtual streamsize showmanyc();
    virtual streamsize xsgetn(char_type* s, streamsize n);
    virtual int_type   underflow();
    virtual int_type   uflow();

    // [:en] [#streambuf.virt.pback], putback \
    [:zh_CN] [#streambuf.virt.pback]，回填
    virtual int_type   pbackfail(int_type c = traits::eof());

    // [:en] [#streambuf.virt.put], put area \
    [:zh_CN] [#streambuf.virt.put]，放入区
    virtual streamsize xsputn(const char_type* s, streamsize n);
    virtual int_type   overflow(int_type c = traits::eof());
  };
}
[codeblock:end]

[para]
[:en] The class template [`basic_streambuf] serves as an abstract base class for
deriving various [+:% stream buffers] whose objects each control two
[+:% character sequences]:
[:zh_CN] 类模板 [`basic_streambuf] 被用作抽象基类，以派生出各种[+:% 流缓冲区]，
每个这种对象都控制两个[+:% 字符序列]：

[list]
[item]
[:en@~] a character [+:% input sequence];
[:zh_CN@~] 字符[+:% 输入序列]；
[item]
[:en@~] a character [+:% output sequence].
[:zh_CN@~] 字符[+:% 输出序列]。
[list:end]
