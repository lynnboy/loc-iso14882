[section#istream.formatted.arithmetic
    [:en] Arithmetic extractors
    [:zh_CN] 算术类型提取符
]

[%@library operator>>[!basic_istream]]
[%@library basic_istream[!operator>>]]
[codeblock:declaration]
operator>>(unsigned short& val);
operator>>(unsigned int& val);
operator>>(long& val);
operator>>(unsigned long& val);
operator>>(long long& val);
operator>>(unsigned long long& val);
operator>>(float& val);
operator>>(double& val);
operator>>(long double& val);
operator>>(bool& val);
operator>>(void*& val);
[codeblock:end]

[begin:description]
[para]
[:en] As in the case of the inserters, these extractors depend on the
locale[=']s [`num_get<>] ([#locale.num.get]) object to perform parsing the input
stream data.
[:zh_CN] 与插入符的情况相同，提取符依赖于地域的 [`num_get<>] 对象
（[#locale.num.get]）进行对输入流数据的解析。

[:en] These extractors behave as formatted input functions (as described in
[#istream.formatted.reqmts]).
[:zh_CN] 这些提取符的行为符合格式化输入函数（如 [#istream.formatted.reqmts] 中
所述）。

[:en] After a sentry object is constructed, the conversion occurs as if
performed by the following code fragment:
[:zh_CN] 构造一个 [`sentry] 对象之后，进行如同以下代码片段所进行的转换：

[codeblock:notation]
using numget = num_get<charT, istreambuf_iterator<charT, traits>>;
iostate err = iostate::goodbit;
use_facet<numget>(loc).get(*this, 0, *this, err, val);
setstate(err);
[codeblock:end]

[:en] In the above fragment, [`loc] stands for the private member of the
[`basic_ios] class.
[:zh_CN] 以上片段中，[`loc] 代表类 [`basic_ios] 的私有成员。

[begin:note]
[:en] The first argument provides an object of the [`istreambuf_iterator] class
which is an iterator pointed to an input stream.
[:zh_CN] 第一个实参提供一个 [`istreambuf_iterator] 类的对象，它是指向输入流的
一个迭代器。

[:en] It bypasses istreams and uses streambufs directly.
[:zh_CN] 它绕过 [`istream] 而直接使用 [`streambuf]。
[end:note]

[:en] Class [`locale] relies on this type as its interface to [`istream],
so that it does not need to depend directly on [`istream].
[:zh_CN] 类 [`locale] 依靠这个类型作为其与 [`istream] 的接口，从而使其不需要直接
依赖于 [`istream]。
[end:description]

[%@library operator>>[!basic_istream]]
[%@library basic_istream[!operator>>]]
[codeblock:declaration]
operator>>(short& val);
[codeblock:end]

[begin:description]
[para]
[:en] The conversion occurs as if performed by the following code fragment
(using the same notation as for the preceding code fragment):
[:zh_CN] 进行如同以下代码片段所进行的转换（采用与前一个代码片段相同的记法）：

[codeblock:notation]
using numget = num_get<charT, istreambuf_iterator<charT, traits>>;
iostate err = ios_base::goodbit;
long lval;
use_facet<numget>(loc).get(*this, 0, *this, err, lval);
if (lval < numeric_limits<short>::min()) {
  err |= ios_base::failbit;
  val = numeric_limits<short>::min();
} else if (numeric_limits<short>::max() < lval) {
  err |= ios_base::failbit;
  val = numeric_limits<short>::max();
}  else
  val = static_cast<short>(lval);
setstate(err);
[codeblock:end]
[end:description]

[%@library operator>>[!basic_istream]]
[%@library basic_istream[!operator>>]]
[codeblock:declaration]
operator>>(int& val);
[codeblock:end]

[begin:description]
[para]
[:en] The conversion occurs as if performed by the following code fragment
(using the same notation as for the preceding code fragment):
[:zh_CN] 进行如同以下代码片段所进行的转换（采用与前一个代码片段相同的记法）：

[codeblock:notation]
using numget = num_get<charT, istreambuf_iterator<charT, traits>>;
iostate err = ios_base::goodbit;
long lval;
use_facet<numget>(loc).get(*this, 0, *this, err, lval);
if (lval < numeric_limits<int>::min()) {
  err |= ios_base::failbit;
  val = numeric_limits<int>::min();
} else if (numeric_limits<int>::max() < lval) {
  err |= ios_base::failbit;
  val = numeric_limits<int>::max();
}  else
  val = static_cast<int>(lval);
setstate(err);
[codeblock:end]
[end:description]
