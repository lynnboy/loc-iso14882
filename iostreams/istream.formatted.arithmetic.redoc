[section#istream.formatted.arithmetic
    [:en] Arithmetic extractors
    [:zh_CN] 算术类型提取符
]

[%@lib@member operator>>[!basic_istream]]
[codeblock:declaration]
basic_istream& operator>>(unsigned short& val);
basic_istream& operator>>(unsigned int& val);
basic_istream& operator>>(long& val);
basic_istream& operator>>(unsigned long& val);
basic_istream& operator>>(long long& val);
basic_istream& operator>>(unsigned long long& val);
basic_istream& operator>>(float& val);
basic_istream& operator>>(double& val);
basic_istream& operator>>(long double& val);
basic_istream& operator>>(bool& val);
basic_istream& operator>>(void*& val);
[codeblock:end]

[div:description]
[para]
[:en] As in the case of the inserters, these extractors depend on the
locale[=']s [`num_get<>] ([#locale.num.get]) object to perform parsing the input
stream data.
[:zh_CN] 与插入符的情况相同，提取符依赖于地域的 [`num_get<>] 对象
（[#locale.num.get]）进行对输入流数据的解析。

[:en] These extractors behave as formatted input functions (as described in
[#istream.formatted.reqmts]).
[:zh_CN] 这些提取符的行为符合格式化输入函数（如 [#istream.formatted.reqmts] 中
所述）。

[:en] After a [`sentry] object is constructed, the conversion occurs as if
performed by the following code fragment, where [`state] represents the input
function[=']s local error state:
[:zh_CN] 构造一个 [`sentry] 对象之后，进行如同以下代码片段所进行的转换，其中
[`state] 表示输入函数的局部错误状态：

[codeblock]
using numget = num_get<charT, istreambuf_iterator<charT, traits>>;
use_facet<numget>(loc).get(*this, 0, *this, state, val);
[codeblock:end]

[:en] In the above fragment, [`loc] stands for the private member of the
[`basic_ios] class.
[:zh_CN] 以上片段中，[`loc] 代表类 [`basic_ios] 的私有成员。

[begin:note]
[:en] The first argument provides an object of the [`istreambuf_iterator] class
which is an iterator pointed to an input stream.
[:zh_CN] 第一个实参提供一个 [`istreambuf_iterator] 类的对象，它是指向输入流的
一个迭代器。

[:en] It bypasses istreams and uses streambufs directly.
[:zh_CN] 它绕过 [`istream] 而直接使用 [`streambuf]。
[end:note]

[:en] Class [`locale] relies on this type as its interface to [`istream],
so that it does not need to depend directly on [`istream].
[:zh_CN] 类 [`locale] 依靠这个类型作为其与 [`istream] 的接口，从而使其不需要直接
依赖于 [`istream]。
[div:end]

[%@lib@member operator>>[!basic_istream]]
[codeblock:declaration]
basic_istream& operator>>(short& val);
[codeblock:end]

[div:description]
[para]
[:en] The conversion occurs as if performed by the following code fragment
(using the same notation as for the preceding code fragment):
[:zh_CN] 进行如同以下代码片段所进行的转换（采用与前一个代码片段相同的记法）：

[codeblock]
using numget = num_get<charT, istreambuf_iterator<charT, traits>>;
long lval;
use_facet<numget>(loc).get(*this, 0, *this, state, lval);
if (lval < numeric_limits<short>::min()) {
  state |= ios_base::failbit;
  val = numeric_limits<short>::min();
} else if (numeric_limits<short>::max() < lval) {
  state |= ios_base::failbit;
  val = numeric_limits<short>::max();
}  else
  val = static_cast<short>(lval);
[codeblock:end]
[div:end]

[%@lib@member operator>>[!basic_istream]]
[codeblock:declaration]
basic_istream& operator>>(int& val);
[codeblock:end]

[div:description]
[para]
[:en] The conversion occurs as if performed by the following code fragment
(using the same notation as for the preceding code fragment):
[:zh_CN] 进行如同以下代码片段所进行的转换（采用与前一个代码片段相同的记法）：

[codeblock]
using numget = num_get<charT, istreambuf_iterator<charT, traits>>;
long lval;
use_facet<numget>(loc).get(*this, 0, *this, state, lval);
if (lval < numeric_limits<int>::min()) {
  state |= ios_base::failbit;
  val = numeric_limits<int>::min();
} else if (numeric_limits<int>::max() < lval) {
  state |= ios_base::failbit;
  val = numeric_limits<int>::max();
}  else
  val = static_cast<int>(lval);
[codeblock:end]
[div:end]

[codeblock:declaration]
basic_istream& operator>>([[redoc("^>")]]extended-floating-point-type& val);
[codeblock:end]

[div:description]
[para]
[:en] If the floating-point conversion rank of [`[^extended-floating-point-type]]
is not less than or equal to that of [`long double], then an invocation of the
operator function is conditionally supported with [?impldef [`operator>>] for
large extended floating-point types] semantics.
[:zh_CN] 如果 [`[^extended-floating-point-type]] 的浮点转换等级并不小于或等于
[`long double] 的等级，则调用该运算符函数是有条件支持的，并具有[?impldef 大型
扩充浮点类型的 [`operator>>]]语义。

[para]
[:en] Otherwise, let [`FP] be a standard floating-point type:
[:zh_CN] 否则，令 [`FP] 为一种标准浮点类型：
[list]
[item]
[:en] if the floating-point conversion rank of [`[^extended-floating-point-type]]
is less than or equal to that of [`float], then [`FP] is [`float],
[:zh_CN] 如果 [`[^extended-floating-point-type]] 的浮点转换等级小于或等于
[`float] 的等级，则 [`FP] 为 [`float]，
[item]
[:en] otherwise, if the floating-point conversion rank of
[`[^extended-floating-point-type]] is less than or equal to that of [`double],
then [`FP] is [`double],
[:zh_CN] 否则，如果 [`[^extended-floating-point-type]] 的浮点转换等级小于或等于
[`double] 的等级，则 [`FP] 为 [`double]，
[item]
[:en] otherwise, [`FP] is [`long double].
[:zh_CN] 否则，[`FP] 为 [`long double]。
[list:end]

[para]
[:en] The conversion occurs as if performed by the following code fragment
(using the same notation as for the preceding code fragment):
[:zh_CN] 进行如同以下代码片段所进行的转换（采用与前一个代码片段相同的记法）：

[codeblock]
using numget = num_get<charT, istreambuf_iterator<charT, traits>>;
FP fval;
use_facet<numget>(loc).get(*this, 0, *this, state, fval);
if (fval < -numeric_limits<[[redoc("^>")]]extended-floating-point-type>::max()) {
  state |= ios_base::failbit;
  val = -numeric_limits<[[redoc("^>")]]extended-floating-point-type>::max();
} else if (numeric_limits<[[redoc("^>")]]extended-floating-point-type>::max() < fval) {
  state |= ios_base::failbit;
  val = numeric_limits<[[redoc("^>")]]extended-floating-point-type>::max();
} else {
  val = static_cast<[[redoc("^>")]]extended-floating-point-type>(fval);
}
setstate(err);
[codeblock:end]

[begin:note]
[:en] When the extended floating-point type has a floating-point conversion rank
that is not equal to the rank of any standard floating-point type,
then double rounding during the conversion can result in inaccurate results.
[:zh_CN] 如果扩充浮点类型的浮点转换等级不等于任何标准浮点类型的等级，则转换过程
中的 double 舍入可能造成不精确结果。

[:en] [`from_chars] can be used in situations where maximum accuracy is important.
[:zh_CN] 最大化精确性的情况下可以使用 [`from_chars]。
[end:note]
[div:end]
