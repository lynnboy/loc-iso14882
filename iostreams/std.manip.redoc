[section#std.manip
    [:en] Standard manipulators
    [:zh_CN] 标准操作符
]

[para]
[:en] The header [?libheader iomanip] defines several functions that support
extractors and inserters that alter information maintained by class [`ios_base]
and its derived classes.
[:zh_CN] 头文件 [?libheader iomanip] 定义了几个函数，支持对类 [`ios_base] 及其
派生类所维护的信息进行改动的提取符和插入符。

[%@lib resetiosflags]
[codeblock:declaration]
[[redoc("[=unspec]")]] resetiosflags(ios_base::fmtflags mask);
[codeblock:end]

[div:description]
[para:returns]
[:en] An object of unspecified type such that if [`out] is an object of type
[`basic_ostream<charT, traits>] then the expression
[`out << resetiosflags(mask)] behaves as if it called [`f(out, mask)], or if
[`in] is an object of type [`basic_istream<charT, traits>] then the expression
[`in >> resetiosflags(mask)] behaves as if it called [`f(in, mask)], where the
function [`f] is defined as:[#:fn]
[:zh_CN] 一个未指明类型的对象，当 [`out] 为 [`basic_ostream<charT, traits>] 类型
的对象时，表达式 [`out << resetiosflags(mask)] 的行为如同调用 [`f(out, mask)]，
或者当 [`in] 为 [`basic_istream<charT, traits>] 类型的对象时，表达式
[`in >> resetiosflags(mask)] 的行为如同调用 [`f(in, mask)]，其中的函数 [`f] 定义
如下[#:fn]：

[note:foot]
[:en] The expression [`cin >> resetiosflags(ios_base::skipws)] clears
[`ios_base::skipws] in the format flags stored in the
[`basic_istream<charT, traits>] object [`cin] (the same as [`cin >> noskipws]),
and the expression [`cout << resetiosflags(ios_base::showbase)] clears
[`ios_base::showbase] in the format flags stored in the
[`basic_ostream<charT, traits>] object [`cout] (the same as
[`cout << noshowbase]).
[:zh_CN] 表达式 [`cin >> resetiosflags(ios_base::skipws)] 清除在
[`basic_istream<charT, traits>] 类型的对象 [`cin] 中所存储的格式标记
[`ios_base::skipws]（与 [`cin >> noskipws] 相同），而表达式
[`cout << resetiosflags(ios_base::showbase)] 清除在
[`basic_ostream<charT, traits>] 类型的对象 [`cout] 中所存储的格式标记
[`ios_base::showbase]（与 [`cout << noshowbase] 相同）。
[note:end]

[codeblock]
void f(ios_base& str, ios_base::fmtflags mask) {
  // [:en] reset specified flags \
  [:zh_CN] 重置指定的标记
  str.setf(ios_base::fmtflags(0), mask);
}
[codeblock:end]

[:en] The expression [`out << resetiosflags(mask)] has type
[`basic_ostream<charT, traits>&] and value [`out].
[:zh_CN] 表达式 [`out << resetiosflags(mask)] 的类型为
[`basic_ostream<charT, traits>&] 且其值为 [`out]。

[:en] The expression [`in >> resetiosflags(mask)] has type
[`basic_istream<charT, traits>&] and value [`in].
[:zh_CN] 表达式 [`in >> resetiosflags(mask)] 的类型为
[`basic_istream<charT, traits>&] 且其值为 [`in]。
[div:end]

[%@lib setiosflags]
[codeblock:declaration]
[[redoc("[=unspec]")]] setiosflags(ios_base::fmtflags mask);
[codeblock:end]

[div:description]
[para:returns]
[:en] An object of unspecified type such that if [`out] is an object of type
[`basic_ostream<charT, traits>] then the expression [`out << setiosflags(mask)]
behaves as if it called [`f(out, mask)], or if [`in] is an object of type
[`basic_istream<charT, traits>] then the expression [`in >> setiosflags(mask)]
behaves as if it called [`f(in, mask)], where the function [`f] is defined as:
[:zh_CN] 一个未指明类型的对象，当 [`out] 为 [`basic_ostream<charT, traits>] 类型
的对象时，表达式 [`out << setiosflags(mask)] 的行为如同调用 [`f(out, mask)]，
或者当 [`in] 为 [`basic_istream<charT, traits>] 类型的对象时，表达式
[`in >> setiosflags(mask)] 的行为如同调用 [`f(in, mask)]，其中的函数 [`f] 定义
如下：

[%@lib@member fmtflags[!ios_base]]
[codeblock]
void f(ios_base& str, ios_base::fmtflags mask) {
  // [:en] set specified flags \
  [:zh_CN] 设置指定的标记
  str.setf(mask);
}
[codeblock:end]

[:en] The expression [`out << setiosflags(mask)] has type
[`basic_ostream<charT, traits>&] and value [`out].
[:zh_CN] 表达式 [`out << setiosflags(mask)] 的类型为
[`basic_ostream<charT, traits>&] 且其值为 [`out]。

[:en] The expression [`in >> setiosflags(mask)] has type
[`basic_istream<charT, traits>&] and value [`in].
[:zh_CN] 表达式 [`in >> setiosflags(mask)] 的类型为
[`basic_istream<charT, traits>&] 且其值为 [`in]。
[div:end]

[%@lib@member setbase]
[codeblock:declaration]
[[redoc("[=unspec]")]] setbase(int base);
[codeblock:end]

[div:description]
[para:returns]
[:en] An object of unspecified type such that if [`out] is an object of type
[`basic_ostream<charT, traits>] then the expression [`out << setbase(base)]
behaves as if it called [`f(out, base)], or if [`in] is an object of type
[`basic_istream<charT, traits>] then the expression [`in >> setbase(base)]
behaves as if it called [`f(in, base)], where the function [`f] is defined as:
[:zh_CN] 一个未指明类型的对象，当 [`out] 为 [`basic_ostream<charT, traits>] 类型
的对象时，表达式 [`out << setbase(base)] 的行为如同调用 [`f(out, base)]，
或者当 [`in] 为 [`basic_istream<charT, traits>] 类型的对象时，表达式
[`in >> setbase(base)] 的行为如同调用 [`f(in, base)]，其中的函数 [`f] 定义如下：

[codeblock]
void f(ios_base& str, int base) {
  // [:en] set [`basefield] \
  [:zh_CN] 设置 [`basefield]
  str.setf(base ==  8 ? ios_base::oct :
      base == 10 ? ios_base::dec :
      base == 16 ? ios_base::hex :
      ios_base::fmtflags(0), ios_base::basefield);
}
[codeblock:end]

[:en] The expression [`out << setbase(base)] has type
[`basic_ostream<charT, traits>&] and value [`out].
[:zh_CN] 表达式 [`out << setbase(base)] 的类型为
[`basic_ostream<charT, traits>&] 且其值为 [`out]。

[:en] The expression [`in >> setbase(base)] has type
[`basic_istream<charT, traits>&] and value [`in].
[:zh_CN] 表达式 [`in >> setbase(base)] 的类型为
[`basic_istream<charT, traits>&] 且其值为 [`in]。
[div:end]

[%@lib@member setfill]
[codeblock:declaration]
[[redoc("[=unspec]")]] setfill(char_type c);
[codeblock:end]

[div:description]
[para:returns]
[:en] An object of unspecified type such that if [`out] is an object of type
[`basic_ostream<charT, traits>] and [`c] has type [`charT] then the expression
[`out << setfill(c)] behaves as if it called [`f(out, c)], where the function
[`f] is defined as:
[:zh_CN] 一个未指明类型的对象，当 [`out] 为 [`basic_ostream<charT, traits>] 类型
的对象，且 [`c] 的类型为 [`charT] 时，表达式 [`out << setfill(c)] 的行为如同调用
[`f(out, c)]，其中的函数 [`f] 定义如下：

[codeblock]
template<class charT, class traits>
void f(basic_ios<charT, traits>& str, charT c) {
  // [:en] set fill character \
  [:zh_CN] 设置填充字符
  str.fill(c);
}
[codeblock:end]

[:en] The expression [`out << setfill(c)] has type
[`basic_ostream<charT, traits>&] and value [`out].
[:zh_CN] 表达式 [`in >> setfill(c)] 的类型为
[`basic_ostream<charT, traits>&] 且其值为 [`out]。
[div:end]

[%@lib@member setprecision]
[codeblock:declaration]
[[redoc("[=unspec]")]] setprecision(int n);
[codeblock:end]

[div:description]
[para:returns]
[:en] An object of unspecified type such that if [`out] is an object of type
[`basic_ostream<charT, traits>] then the expression [`out << setprecision(n)]
behaves as if it called [`f(out, n)], or if [`in] is an object of type
[`basic_istream<charT, traits>] then the expression [`in >> setprecision(n)]
behaves as if it called [`f(in, n)], where the function [`f] is defined as:
[:zh_CN] 一个未指明类型的对象，当 [`out] 为 [`basic_ostream<charT, traits>] 类型
的对象时，表达式 [`out << setprecision(n)] 的行为如同调用 [`f(out, n)]，
或者当 [`in] 为 [`basic_istream<charT, traits>] 类型的对象时，表达式
[`in >> setprecision(n)] 的行为如同调用 [`f(in, n)]，其中的函数 [`f] 定义如下：

[codeblock]
void f(ios_base& str, int n) {
  // [:en] set precision \
  [:zh_CN] 设置精度
  str.precision(n);
}
[codeblock:end]

[:en] The expression [`out << setprecision(n)] has type
[`basic_ostream<charT, traits>&] and value [`out].
[:zh_CN] 表达式 [`out << setprecision(n)] 的类型为
[`basic_ostream<charT, traits>&] 且其值为 [`out]。

[:en] The expression [`in >> setprecision(n)] has type
[`basic_istream<charT, traits>&] and value [`in].
[:zh_CN] 表达式 [`in >> setprecision(n)] 的类型为
[`basic_istream<charT, traits>&] 且其值为 [`in]。
[div:end]

[%@lib@member setw]
[codeblock:declaration]
[[redoc("[=unspec]")]] setw(int n);
[codeblock:end]

[div:description]
[para:returns]
[:en] An object of unspecified type such that if [`out] is an instance of
[`basic_ostream<charT, traits>] then the expression [`out << setw(n)] behaves as
if it called [`f(out, n)], or if [`in] is an object of type
[`basic_istream<charT, traits>] then the expression [`in >> setw(n)] behaves as
if it called [`f(in, n)], where the function [`f] is defined as:
[:zh_CN] 一个未指明类型的对象，当 [`out] 为 [`basic_ostream<charT, traits>] 的
实例时，表达式 [`out << setw(n)] 的行为如同调用 [`f(out, n)]，或者当 [`in] 为
[`basic_istream<charT, traits>] 类型的对象时，表达式 [`in >> setw(n)] 的行为如同
调用 [`f(in, n)]，其中的函数 [`f] 定义如下：

[codeblock]
void f(ios_base& str, int n) {
  // [:en] set width \
  [:zh_CN] 设置宽度
  str.width(n);
}
[codeblock:end]

[:en] The expression [`out << setw(n)] has type [`basic_ostream<charT, traits>&]
and value [`out].
[:zh_CN] 表达式 [`out << setw(n)] 的类型为 [`basic_ostream<charT, traits>&]
且其值为 [`out]。

[:en] The expression [`in >> setw(n)] has type [`basic_istream<charT, traits>&]
and value [`in].
[:zh_CN] 表达式 [`in >> setw(n)] 的类型为 [`basic_istream<charT, traits>&]
且其值为 [`in]。
[div:end]
