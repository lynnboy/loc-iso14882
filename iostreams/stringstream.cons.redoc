[section#stringstream.cons
    [:en] Constructors
    [:zh_CN] 构造函数
]

[%@lib@ctor basic_stringstream]
[codeblock:declaration]
explicit basic_stringstream(ios_base::openmode which);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes the base class with
[`basic_iostream<charT, traits>(addressof([*sb]))] ([#iostream.cons]) and [*sb]
with [`basic_stringbuf<charT, traits, Allocator>(which)].
[:zh_CN] 以 [`basic_iostream<charT, traits>(addressof([*sb]))]（[#iostream.cons]）
初始化其基类，并以 [`basic_stringbuf<charT, traits, Allocator>(which)] 初始化 [*sb]。
[div:end]

[%@lib@ctor basic_stringstream]
[codeblock:declaration]
explicit basic_stringstream(
  const basic_string<charT, traits, Allocator>& s,
  ios_base::openmode which = ios_base::out | ios_base::in);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializing the base class with
[`basic_iostream<charT, traits>(addressof([*sb]))] ([#iostream.cons]) and [*sb]
with [`basic_stringbuf<charT, traits, Allocator>(s, which)].
[:zh_CN] 以 [`basic_iostream<charT, traits>(addressof([*sb]))]（[#iostream.cons]）
初始化其基类，并以 [`basic_stringbuf<charT, traits, Allocator>(s, which)] 初始化 [*sb]。
[div:end]

[%@lib@ctor basic_stringstream]
[codeblock:declaration]
basic_stringstream(ios_base::openmode which, const Allocator& a);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializing the base class with
[`basic_iostream<charT, traits>(addressof([*sb]))] ([#iostream.cons]) and [*sb]
with [`basic_stringbuf<charT, traits, Allocator>(which, a)] ([#stringbuf.cons]).
[:zh_CN] 以 [`basic_iostream<charT, traits>(addressof([*sb]))]（[#iostream.cons]）
初始化其基类，并以 [`basic_stringbuf<charT, traits, Allocator>(which, a)] 初始化
[*sb]（[#stringbuf.cons]）。
[div:end]

[%@lib@ctor basic_stringstream]
[codeblock:declaration]
explicit basic_stringstream(
  basic_string<charT, traits, Allocator>&& s,
  ios_base::openmode which = ios_base::out | ios_base::in);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializing the base class with
[`basic_iostream<charT, traits>(addressof([*sb]))] ([#iostream.cons]) and [*sb]
with [`basic_stringbuf<charT, traits, Allocator>(std::move(s), which)] ([#stringbuf.cons]).
[:zh_CN] 以 [`basic_iostream<charT, traits>(addressof([*sb]))]（[#iostream.cons]）
初始化其基类，并以
[`basic_stringbuf<charT, traits, Allocator>(std::move(s), which)] 初始化 [*sb]
（[#stringbuf.cons]）。
[div:end]

[%@lib@ctor basic_stringstream]
[codeblock:declaration]
template<class SAlloc>
  basic_stringstream(
    const basic_string<charT, traits, SAlloc>& s,
    ios_base::openmode which, const Allocator& a);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializing the base class with
[`basic_iostream<charT, traits>(addressof([*sb]))] ([#iostream.cons]) and [*sb]
with [`basic_stringbuf<charT, traits, Allocator>(s, which, a)] ([#stringbuf.cons]).
[:zh_CN] 以 [`basic_iostream<charT, traits>(addressof([*sb]))]（[#iostream.cons]）
初始化其基类，并以 [`basic_stringbuf<charT, traits, Allocator>(s, which, a)]
初始化 [*sb]（[#stringbuf.cons]）。
[div:end]

[%@lib@ctor basic_stringstream]
[codeblock:declaration]
template<class SAlloc>
  explicit basic_stringstream(
    const basic_string<charT, traits, SAlloc>& s,
    ios_base::openmode which = ios_base::out | ios_base::in);
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`is_same_v<SAlloc, Allocator>] is [`false].
[:zh_CN] [`is_same_v<SAlloc, Allocator>] 为 [`false]。

[para:effects]
[:en] Initializing the base class with
[`basic_iostream<charT, traits>(addressof([*sb]))] ([#iostream.cons]) and [*sb]
with [`basic_stringbuf<charT, traits, Allocator>(s, which)] ([#stringbuf.cons]).
[:zh_CN] 以 [`basic_iostream<charT, traits>(addressof([*sb]))]（[#iostream.cons]）
初始化其基类，并以 [`basic_stringbuf<charT, traits, Allocator>(s, which)] 初始化
[*sb]（[#stringbuf.cons]）。
[div:end]

[%@lib@ctor basic_stringstream]
[codeblock:declaration]
template<class T>
  explicit basic_stringstream(const T& t, ios_base::openmode which = ios_base::out | ios_base::in);
template<class T>
  basic_stringstream(const T& t, const Allocator& a);
template<class T>
  basic_stringstream(const T& t, ios_base::openmode which, const Allocator& a);
[codeblock:end]

[div:description]
[para]
[:en] Let [`which] be [`ios_base::out | ios_base::in] for the overload with no
parameter [`which], and [`a] be [`Allocator()] for the overload with no
parameter [`a].
[:zh_CN] 令 [`which] 对于没有 [`which] 形参的重载为
[`ios_base::out | ios_base::in]，并令 [`a] 对于没有形参 [`a] 的重载为
[`Allocator()]。

[para:constraints]
[:en] [`is_convertible_v<const T&, basic_string_view<charT, traits>>] is [`true].
[:zh_CN] [`is_convertible_v<const T&, basic_string_view<charT, traits>>] 为
[`true]。

[para:effects]
[:en] Initializes the base class with [`addressof([*sb])], and
direct-non-list-initializes [*sb] with [`t, which, a].
[:zh_CN] 以 [`addressof([*sb])] 初始化其基类，并以 [`t, which, a] 直接非列表初始化 [*sb]。
[div:end]

[%@lib@ctor basic_stringstream]
[codeblock:declaration]
basic_stringstream(basic_stringstream&& rhs);
[codeblock:end]

[div:description]
[para:effects]
[:en] Move constructs from the rvalue [`rhs].
[:zh_CN] 从右值 [`rhs] 进行移动构造。

[:en] This is accomplished by move constructing the base class, and the
contained [`basic_stringbuf].
[:zh_CN] 这是通过移动构造其基类和其所包含的 [`basic_stringbuf] 来达成的。

[:en] Then calls [`basic_istream<charT, traits>::set_rdbuf(addressof([*sb]))] to
install the contained [`basic_stringbuf].
[:zh_CN] 然后调用 [`basic_istream<charT, traits>::set_rdbuf(addressof([*sb]))] 来
安装其所包含的 [`basic_stringbuf]。
[div:end]
