[section#fs.class.directory.iterator.general
    [:en] General
    [:zh_CN] 概述
]

[%@lib directory_iterator]
[para]
[:en] An object of type [`directory_iterator] provides an iterator for a
sequence of [`directory_entry] elements representing the path and any cached
attribute values ([#fs.class.directory.entry]) for each file in a directory
or in an [?impldef type of a directory-like file] directory-like file type.
[:zh_CN] [`directory_iterator] 类型的对象为 [`directory_entry] 元素的序列提供
迭代器，它们表示在某个目录中或者某个[?impldef 目录式文件的类型]目录式文件类型中
的各个文件的路径和任何缓存的属性值（[#fs.class.directory.entry]）。

[begin:note]
[:en] For iteration into sub-directories, see class
[`recursive_directory_iterator] ([#fs.class.rec.dir.itr]).
[:zh_CN] 对于到子目录中进行迭代，参见类 [`recursive_directory_iterator]
（[#fs.class.rec.dir.itr]）。
[end:note]

[codeblock:synopsis]
namespace std::filesystem {
  class directory_iterator {
  public:
    using iterator_category = input_iterator_tag;
    using value_type        = directory_entry;
    using difference_type   = ptrdiff_t;
    using pointer           = const directory_entry*;
    using reference         = const directory_entry&;

    // [:en] [#fs.dir.itr.members], member functions \
    [:zh_CN] [#fs.dir.itr.members]，成员函数
    directory_iterator() noexcept;
    explicit directory_iterator(const path& p);
    directory_iterator(const path& p, directory_options options);
    directory_iterator(const path& p, error_code& ec);
    directory_iterator(const path& p, directory_options options,
                       error_code& ec);
    directory_iterator(const directory_iterator& rhs);
    directory_iterator(directory_iterator&& rhs) noexcept;
    ~directory_iterator();

    directory_iterator& operator=(const directory_iterator& rhs);
    directory_iterator& operator=(directory_iterator&& rhs) noexcept;

    const directory_entry& operator*() const;
    const directory_entry* operator->() const;
    directory_iterator&    operator++();
    directory_iterator&    increment(error_code& ec);

    // [:en] other members as required by [#input.iterators], input iterators \
    [:zh_CN] 由 [#input.iterators]，输入迭代器所要求的其他成员
  };
}
[codeblock:end]

[para]
[:en] [`directory_iterator] meets the [^:oc InputIterator] requirements
([#input.iterators]).
[:zh_CN] [`directory_iterator] 满足 [^:oc InputIterator] 的规定
（[#input.iterators]）。

[para]
[:en] If an iterator of type [`directory_iterator] reports an error or is
advanced past the last directory element, that iterator shall become equal to
the end iterator value.
[:zh_CN] 当 [`directory_iterator] 类型的迭代器报告了错误，或者它推进越过了最后
一个目录元素时，该迭代器应当变为等于末尾迭代器值。

[:en] The [`directory_iterator] default constructor shall create an iterator
equal to the end iterator value, and this shall be the only valid iterator for
the end condition.
[:zh_CN] [`directory_iterator] 的默认构造函数应当创建等于末尾迭代器值的迭代器，
该值应当是针对末尾条件的唯一有效迭代器。

[para]
[:en] The end iterator is not dereferenceable.
[:zh_CN] 末尾迭代器不可解引用。

[para]
[:en] Two end iterators are always equal.
[:zh_CN] 两个末尾迭代器总是相等。

[:en] An end iterator shall not be equal to a non-end iterator.
[:zh_CN] 末尾迭代器不能等于非末尾迭代器。

[para]
[:en] The result of calling the [`path()] member of the [`directory_entry]
object obtained by dereferencing a [`directory_iterator] is a reference to a
[`path] object composed of the directory argument from which the iterator was
constructed with the filename of the directory entry appended as if by [`operator/=].
[:zh_CN] 调用通过解引用 [`directory_iterator] 而得的 [`directory_entry] 对象的
[`path()] 成员的结果，是到某个 [`path] 对象的引用，该对象是通过对该迭代器构造时
的目录实参，以及如同使用 [`operator/=] 追加目录项的文件名所构成的。

[para]
[:en] Directory iteration shall not yield directory entries for the current
(dot) and parent (dot-dot) directories.
[:zh_CN] 对目录的迭代不应当产生当前目录（“点”）和父目录（“点点”）的目录项的元素。

[para]
[:en] The order of directory entries obtained by dereferencing successive
increments of a [`directory_iterator] is unspecified.
[:zh_CN] 对连续增加的 [`directory_iterator] 进行解引用所获得的目录项的顺序是
未指明的。

[para]
[:en] Constructors and non-const [`directory_iterator] member functions store
the values of any cached attributes ([#fs.class.directory.entry]) in the
[`directory_entry] element returned by [`operator*()].
[:zh_CN] [`directory_iterator] 的构造函数和非 [`const] 成员函数将任何缓存属性值
（[#fs.class.directory.entry]）存储到由 [`operator*()] 所返回的
[`directory_entry] 元素之内。

[:en] [`directory_iterator] member functions shall not directly or indirectly
call any [`directory_entry] [`refresh] function.
[:zh_CN] [`directory_iterator] 的成员函数不应当直接或间接调用任何
[`directory_entry] 的 [`refresh] 函数。

[begin:note]
[:en] The exact mechanism for storing cached attribute values is not exposed to
users.
[:zh_CN] 存储缓存属性值的确切机制不暴露给用户。

[:en] For exposition, class [`directory_iterator] is shown in
[#fs.class.directory.entry] as a friend of class [`directory_entry].
[:zh_CN] 为阐释目的，类 [`directory_iterator] 在 [#fs.class.directory.entry] 中
被展示为类 [`directory_entry] 的友元。
[end:note]

[para]
[begin:note]
[:en] A path obtained by dereferencing a directory iterator might not actually
exists; it could be a symbolic link to a non-existent file.
[:zh_CN] 解引用目录迭代器所得的路径可能并不实际存在；它可能是到某个不存在的文件
的符号连接。

[:en] Recursively walking directory trees for purposes of removing and renaming
entries might invalidate symbolic links that are being followed.
[:zh_CN] 为删除和改名目录项而进行递归的目录树遍历，可能会使所跟随的符号连接失效。
[end:note]

[para]
[begin:note]
[:en] If a file is removed from or added to a directory after the construction
of a [`directory_iterator] for the directory, it is unspecified whether or not
subsequently incrementing the iterator will ever result in an iterator
referencing the removed or added directory entry.
[:zh_CN] 如果在为目录构造某个 [`directory_iterator] 之后在该目录中删除或添加了
文件，则随后增加这个迭代器是否会导致一个引用被删除或被添加的目录项的迭代器，
是未指明的。

[:en] See POSIX [`readdir].
[:zh_CN] 参见 POSIX 的 [`readdir]。
[begin:note]
