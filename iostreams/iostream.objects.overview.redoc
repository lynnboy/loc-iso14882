[section#iostream.objects.overview
    [:en] Overview
    [:zh_CN] 概述
]

[para]
[:en] In this Clause, the type name [`FILE] refers to the type [`FILE] declared
in [?libheader@ref cstdio].
[:zh_CN] 本章中，类型名 [`FILE] 代表 [?libheader@ref cstdio] 中所声明的 [`FILE] 类型。

[para]
[:en] The header [?libheader iostream] declares objects that associate objects
with the standard C streams provided for by the functions declared in
[?libheader cstdio], and includes all the headers necessary to use these objects.
[:zh_CN] 头文件 [?libheader iostream] 声明了一些对象，通过在 [?libheader cstdio]
中所声明的各函数，与为标准 C 流所提供的各对象关联起来，并且包含了为使用这些对象
所必须的所有头文件。

[:en] The dynamic types of the stream buffers initially associated with these
objects are unspecified, but they have the behavior specified for
[`std::basic_filebuf<char>] or [`std::basic_filebuf<wchar_t>].
[:zh_CN] 最初与这些对象关联的流缓冲区的动态类型是未指明的，但它们具有
[`std::basic_filebuf<char>] 或 [`std::basic_filebuf<wchar_t>] 所规定的行为。

[para]
[:en] The objects are constructed and the associations are established at some time
prior to or during the first time an object of class [`ios_base::Init] is constructed,
and in any case before the body of [`main] ([#basic.start.main]) begins execution.
[:zh_CN] 这些对象是在首次有某个 [`ios_base::Init] 类的对象被构造之前或其过程中
构造并建立起关联的，且总是在 [`main] 的函数体开始执行之前进行的（[#basic.start.main]）。

[:en] The objects are not destroyed during program execution.[#:fn]
[:zh_CN] 这些对象在程序执行过程中不会被销毁[#:fn]。

[note:foot]
[:en] Constructors and destructors for objects with static storage duration can
access these objects to read input from [`stdin] or write output to [`stdout] or [`stderr].
[:zh_CN] 具有静态存储期的对象的构造函数和析构函数，可以访问这些对象，以从
[`stdin] 读取输入，或者向 [`stdout] 或 [`stderr] 写出输出。
[note:end]

[para:recommended]
[:en] If it is possible for them to do so, implementations should initialize the
objects earlier than required.
[:zh_CN] 如果可能做到的话，各实现应比所需要的更早进行这些对象的初始化。

[para]
[:en] The results of including [?libheader iostream] in a translation unit shall
be as if [?libheader iostream] defined an instance of [`ios_base::Init] with
static storage duration.
[:zh_CN] 在一个翻译单元中包含 [?libheader iostream] 的结果，应当如同
[?libheader iostream] 中定义了一个具有静态存储期的 [`ios_base::Init] 实例一样。

[:en] Each [=Cpp] library module ([#std.modules]) in a hosted implementation
shall behave as if it contains an interface unit that defines an unexported
[`ios_base::Init] variable with ordered initialization ([#basic.start.dynamic]).
[:zh_CN] 宿主式实现中的每个 [=Cpp] 程序库模块（[#std.modules]），应当表现为如同其包含一个
接口单元，定义了未导出的具有有序初始化（[#basic.start.dynamic]）的 [`ios_base::Init] 变量。

[begin:note]
[:en] As a result, the definition of that variable is appearance-ordered before
any declaration following the point of importation of a [=Cpp] library module.
[:zh_CN] 其结果是，该变量的定义式按表现顺序早于跟在该 [=Cpp] 程序库模块的导入
位置后的任何声明式。

[:en] Whether such a definition exists is unobservable by a program that
does not reference any of the standard iostream objects.
[:zh_CN] 这种定义式是否存在，对于并未引用任何标准 I/O 流对象的程序是不可观察的。
[end:note]

[para]
[:en] Mixing operations on corresponding wide- and narrow-character streams
follows the same semantics as mixing such operations on [`FILE]s, as specified
in the C standard library.
[:zh_CN] 对对应的宽字符和窄字符流进行混合操作，遵循在 C 标准程序库中所指定的，
在 [`FILE] 上混合这样的操作相同的语义。

[para]
[:en] Concurrent access to a synchronized ([#ios.members.static]) standard
iostream object[=']s formatted and unformatted input ([#istream]) and output
([#ostream]) functions or a standard C stream by multiple threads does not
result in a data race ([#intro.multithread]).
[:zh_CN] 对标准 I/O 流对象的带有同步的（[#ios.members.static]）格式化和无格式化
的输入（[#istream]）或输出（[#ostream]）功能，或者标准 C 流，从多个线程进行并发
访问，不会造成数据竞争（[#intro.multithread]）。

[begin:note]
[:en] Unsynchronized concurrent use of these objects and streams by multiple
threads can result in interleaved characters.
[:zh_CN] 在多个线程中未同步地并发使用这些对象和流会导致出现字符交错。
[end:note]

[para:xref@c] 7.21.2
