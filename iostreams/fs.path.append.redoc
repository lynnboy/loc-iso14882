[section#fs.path.append
    [:en] Appends
    [:zh_CN] 追加
]

[para]
[:en] The append operations use [`operator/=] to denote their semantic effect of
appending [~preferred-separator] when needed.
[:zh_CN] 追加操作使用 [`operator/=] 来表示其语义效果，当需要时将添加一个
[~首选分隔符]。

[%@lib@member operator/=[!path]]
[codeblock:declaration]
path& operator/=(const path& p);
[codeblock:end]

[div:description]
[para:effects]
[:en]
If [`p.is_absolute() || (p.has_root_name() && p.root_name() != root_name())],
then [`operator=(p)].
[:zh_CN]
若 [`p.is_absolute() || (p.has_root_name() && p.root_name() != root_name())]，
则执行 [`operator=(p)]。

[para]
[:en] Otherwise, modifies [`*this] as if by these steps:
[:zh_CN] 否则，如同通过以下步骤来修改 [`*this]：

[list]
[item]
[:en] If [`p.has_root_directory()], then removes any root directory and relative
path from the generic format pathname.
[:zh_CN] 若 [`p.has_root_directory()]，则从通用格式路径名中删除任何根目录和相对
路径。

[:en] Otherwise, if [`!has_root_directory() && is_absolute()] is [`true] or if
[`has_filename()] is [`true], then appends [`path::preferred_separator] to the
generic format pathname.
[:zh_CN] 否则，若 [`!has_root_directory() && is_absolute()] 为 [`true] 或者
[`has_filename()] 为 [`true]，则向通用格式路径名追加
[`path::preferred_separator]。

[item]
[:en] Then appends the native format pathname of [`p], omitting any [~root-name]
from its generic format pathname, to the native format pathname.
[:zh_CN] 然后将 [`p] 的本地格式路径名，忽略其通用格式路径名中的[~根名]，追加到
本地格式路径名之后。
[list:end]

[para]
[begin:example]
[:en] Even if [`//host] is interpreted as a [~root-name], both of the paths
[`path("//host")/"foo"] and [`path("//host/")/"foo"] equal [`"//host/foo"]
(although the former might use backslash as the preferred separator).
[:zh_CN] 即便 [`//host] 被解释为一个[~根名]，路径 [`path("//host")/"foo"] 和
[`path("//host/")/"foo"] 仍都等于 [`"//host/foo"]（尽管前者以斜杠为优先分隔符
也是如此）。

[para:~]
[:en] Expression examples:
[:zh_CN] 表达式的例子：

[codeblock]
// [:en] On POSIX, \
[:zh_CN] 在 POSIX 中，
path("foo") /= path("");        // [:en] yields [`path("foo/")] \
                                [:zh_CN] 产生 [`path("foo/")]
path("foo") /= path("/bar");    // [:en] yields [`path("/bar")] \
                                [:zh_CN] 产生 [`path("/bar")]

// [:en] On Windows, \
[:zh_CN] 在 Windows 中，
path("foo") /= path("");        // [:en] yields [`path("foo\\")] \
                                [:zh_CN] 产生 [`path("foo\\")]
path("foo") /= path("/bar");    // [:en] yields [`path("/bar")] \
                                [:zh_CN] 产生 [`path("/bar")]
path("foo") /= path("c:/bar");  // [:en] yields [`path("c:/bar")] \
                                [:zh_CN] 产生 [`path("c:/bar")]
path("foo") /= path("c:");      // [:en] yields [`path("c:")] \
                                [:zh_CN] 产生 [`path("c:")]
path("c:") /= path("");         // [:en] yields [`path("c:")] \
                                [:zh_CN] 产生 [`path("c:")]
path("c:foo") /= path("/bar");  // [:en] yields [`path("c:/bar")] \
                                [:zh_CN] 产生 [`path("c:/bar")]
path("c:foo") /= path("c:bar"); // [:en] yields [`path("c:foo\\bar")] \
                                [:zh_CN] 产生 [`path("c:foo\\bar")]
[codeblock:end]
[end:example]

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@lib@member operator/=[!path]]
[%@lib@member append[!path]]
[codeblock:declaration]
template <class Source>
  path& operator/=(const Source& source);
template <class Source>
  path& append(const Source& source);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return operator/=(path(source));]
[:zh_CN] 等价于：[`return operator/=(path(source));]
[div:end]

[%@lib@member operator/=[!path]]
[%@lib@member append[!path]]
[codeblock:declaration]
template <class InputIterator>
  path& append(InputIterator first, InputIterator last);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return operator/=(path(first, last));]
[:zh_CN] 等价于：[`return operator/=(path(first, last));]
[div:end]
