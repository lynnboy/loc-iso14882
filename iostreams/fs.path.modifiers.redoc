[section#fs.path.modifiers
    [:en] Modifiers
    [:zh_CN] 改动函数
]

[%@library clear[!path]]
[%@library path[!clear]]
[codeblock:declaration]
void clear() noexcept;
[codeblock:end]

[enter:description]
[para:ensures]
[:en] [`empty() == true].
[:zh_CN] [`empty() == true]。
[exit:description]

[%@library make_preferred[!path]]
[%@library path[!make_preferred]]
[codeblock:declaration]
path& make_preferred();
[codeblock:end]

[enter:description]
[para:effects]
[:en] Each [~directory-separator] of the pathname in the generic format is
converted to [~preferred-separator].
[:zh_CN] 将通用格式路径名中的每个[~目录分隔符]转换为[~首选分隔符]。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。

[para]
[enter:example]
[codeblock]
path p("foo/bar");
std::cout << p << '\n';
p.make_preferred();
std::cout << p << '\n';
[codeblock:end]

[:en] On an operating system where [~preferred-separator] is a slash, the output
is:
[:zh_CN] 在[~首选分隔符]为斜杠的操作系统中，其输出为：

[codeblock]
"foo/bar"
"foo/bar"
[codeblock:end]

[:en] On an operating system where [~preferred-separator] is a backslash, the
output is:
[:zh_CN] 在[~首选分隔符]为反斜杠的操作系统中，其输出为：

[codeblock]
"foo/bar"
"foo\bar"
[codeblock:end]
[exit:example]
[exit:description]

[%@library remove_filename[!path]]
[%@library path[!remove_filename]]
[codeblock:declaration]
path& remove_filename();
[codeblock:end]

[enter:description]
[para:ensures]
[:en] [`!has_filename()].
[:zh_CN] [`!has_filename()]。

[para:effects]
[:en] Remove the generic format pathname of [`filename()] from the generic
format pathname.
[:zh_CN] 从通用格式路径名中删除 [`filename()] 的通用格式路径名。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。

[para]
[enter:example]
[codeblock]
path("foo/bar").remove_filename();      // [:en] yields [`"foo/"]
                                        // [|:zh_CN] 产生 [`"foo/"]
path("foo/").remove_filename();         // [:en] yields [`"foo/"]
                                        // [|:zh_CN] 产生 [`"foo/"]
path("/foo").remove_filename();         // [:en] yields [`"/"]
                                        // [|:zh_CN] 产生 [`"/"]
path("/").remove_filename();            // [:en] yields [`"/"]
                                        // [|:zh_CN] 产生 [`"/"]
[codeblock:end]
[exit:example]
[exit:description]

[%@library replace_filename[!path]]
[%@library path[!replace_filename]]
[codeblock:declaration]
path& replace_filename(const path& replacement);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：

[codeblock:notation]
remove_filename();
operator/=(replacement);
[codeblock:end]

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。

[para]
[enter:example]
[codeblock]
path("/foo").replace_filename("bar");   // [:en] yields [`"/bar"] on POSIX
                                        // [|:zh_CN] 在 POSIX 上产生 [`"/bar"]
path("/").replace_filename("bar");      // [:en] yields [`"/bar"] on POSIX
                                        // [|:zh_CN] 在 POSIX 上产生 [`"/bar"]
[codeblock:end]
[exit:example]
[exit:description]

[%@library replace_extension[!path]]
[%@library path[!replace_extension]]
[codeblock:declaration]
path& replace_extension(const path& replacement = path());
[codeblock:end]

[enter:description]
[para:effects]
[list]
[item]
[:en] Any existing [`extension()] ([#fs.path.decompose]) is removed from the
pathname in the generic format, then
[:zh_CN] 从通用格式路径名中删除任何现存的 [`extension()]
（[#fs.path.decompose]），然后

[item]
[:en] If [`replacement] is not empty and does not begin with a dot character,
a dot character is appended to the pathname in the generic format, then
[:zh_CN] 若 [`replacement] 不为空且并不以“点”字符开始，则向通用格式路径名追加
一个点字符，然后

[item]
[:en] [`operator+=(replacement);].
[:zh_CN] [`operator+=(replacement);]。
[list:end]

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[exit:description]

[%@library swap[!path]]
[%@library path[!swap]]
[codeblock:declaration]
void swap(path& rhs) noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Swaps the contents (in all formats) of the two paths.
[:zh_CN] 交换两个路径中的（所有格式的）内容。

[para:complexity]
[:en] Constant time.
[:zh_CN] 常量时间。
[exit:description]
