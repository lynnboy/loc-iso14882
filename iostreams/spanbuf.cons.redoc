[section#spanbuf.cons
    [:en] Constructors
    [:zh_CN] 构造函数
]

[%@lib@ctor basic_spanbuf]
[codeblock:declaration]
explicit basic_spanbuf(std::span<charT> s,
                       ios_base::openmode which = ios_base::in | ios_base::out);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes the base class with [`basic_streambuf()] ([#streambuf.cons]),
and [`mode] with [`which].
[:zh_CN] 以 [`basic_streambuf()] 初始化其基类（[#streambuf.cons]），并以 [`which]
初始化 [`mode]。

[:en] Initializes the internal pointers as if calling [`span(s)].
[:zh_CN] 如同以 [`span(s)] 初始化其内部指针。
[div:end]

[%@lib@ctor basic_spanbuf]
[codeblock:declaration]
basic_spanbuf(basic_spanbuf&& rhs);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes the base class with [`std::move(rhs)] and [*mode] with
[`std::move(rhs.[*mode])] and [*buf] with [`std::move(rhs.[*buf])].
[:zh_CN] 以 [`std::move(rhs)] 初始化其基类，以 [`std::move(rhs.[*mode])] 初始化
[*mode]，并以 [`std::move(rhs.[*buf])] 初始化 [*buf]。

[:en] The sequence pointers in [`*this] ([`eback()], [`gptr()], [`egptr()],
[`pbase()], [`pptr()], [`epptr()]) obtain the values which [`rhs] had.
[:zh_CN] [`*this] 中的各序列指针（[`eback()]、[`gptr()]、[`egptr()]、[`pbase()]、
[`pptr()] 和 [`epptr()]）获得 [`rhs] 所具有的各值。

[:en] It is [?impldef whether [`basic_spanbuf][=']s move source is empty after a
move] whether [`rhs.[*buf].empty()] returns [`true] after the move.
[:zh_CN] 移动之后 [`rhs.[*buf].empty()] 是否返回 [`true] 是[?impldef
[`basic_spanbuf] 移动之后的移动源是否为空]。

[para:ensures]
[:en] Let [`rhs_p] refer to the state of [`rhs] just prior to this construction.
[:zh_CN] 令 [`rhs_p] 代表 [`rhs] 在进行这次构造之前的状态。

[list]
[item] [`span().data() == rhs_p.span().data()]
[item] [`span().size() == rhs_p.span().size()]
[item] [`eback() == rhs_p.eback()]
[item] [`gptr() == rhs_p.gptr()]
[item] [`egptr() == rhs_p.egptr()]
[item] [`pbase() == rhs_p.pbase()]
[item] [`pptr() == rhs_p.pptr()]
[item] [`epptr() == rhs_p.epptr()]
[item] [`getloc() == rhs_p.getloc()]
[list:end]
[div:end]
