[section#print.fun
    [:en] Print
    [:zh_CN] 打印
]

[%@lib print]
[codeblock:declaration]
template<class... Args>
  void print(format_string<Args...> fmt, Args&&... args);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
print(stdout, fmt, std::forward<Args>(args)...);
[codeblock:end]
[div:end]

[%@lib print]
[codeblock:declaration]
template<class... Args>
  void print(FILE* stream, format_string<Args...> fmt, Args&&... args);
[codeblock:end]

[div:description]
[para:effects]
[:en] Let [`locksafe] be
[`(enable_nonlocking_formatter_optimization<remove_cvref_t<Args>> && ...)].
[:zh_CN] 令 [`locksafe] 为
[`(enable_nonlocking_formatter_optimization<remove_cvref_t<Args>> && ...)]。

[:en] If the ordinary literal encoding ([#lex.charset]) is UTF-8, equivalent to:
[:zh_CN] 如果普通字面量编码（[#lex.charset]）是 UTF-8，则等价于：
[codeblock]
locksafe
  ? vprint_unicode(stream, fmt.str, make_format_args(args...))
  : vprint_unicode_buffered(stream, fmt.str, make_format_args(args...));
[codeblock:end]

[:en] Otherwise, equivalent to:
[:zh_CN] 否则，等价于：
[codeblock]
locksafe
  ? vprint_nonunicode(stream, fmt.str, make_format_args(args...))
  : vprint_nonunicode_buffered(stream, fmt.str, make_format_args(args...));
[codeblock:end]
[div:end]

[%@lib println]
[codeblock:declaration]
template<class... Args>
  void println(format_string<Args...> fmt, Args&&... args);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
println(stdout, fmt, std::forward<Args>(args)...);
[codeblock:end]
[div:end]

[%@lib println]
[codeblock:declaration]
void println();
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
println(stdout);
[codeblock:end]
[div:end]

[%@lib println]
[codeblock:declaration]
template<class... Args>
  void println(FILE* stream, format_string<Args...> fmt, Args&&... args);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
print(stream, runtime_format(string(fmt.get()) + '\n'), std::forward<Args>(args)...);
[codeblock:end]
[div:end]

[%@lib println]
[codeblock:declaration]
void println(FILE* stream);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
print(stream, "\n");
[codeblock:end]
[div:end]

[%@lib vprint_unicode]
[codeblock:declaration]
void vprint_unicode(string_view fmt, format_args args);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
vprint_unicode(stdout, fmt, args);
[codeblock:end]
[div:end]

[%@lib vprint_unicode_buffered]
[codeblock:declaration]
void vprint_unicode_buffered(FILE* stream, string_view fmt, format_args args);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
string out = vformat(fmt, args);
vprint_unicode(stream, "{}", make_format_args(out));
[codeblock:end]
[div:end]

[%@lib vprint_unicode]
[codeblock:declaration]
void vprint_unicode(FILE* stream, string_view fmt, format_args args);
[codeblock:end]

[div:description]
[para:expects]
[:en] [`stream] is a valid pointer to an output C stream.
[:zh_CN] [`stream] 是指向 C 输出流的有效指针。

[para:effects]
[:en] Locks [`stream].
[:zh_CN] 锁定 [`stream]。

[:en] Let [`out] denote the character representation of formatting arguments
provided by [`args] formatted according to specifications given in [`fmt].
[:zh_CN] 令 [`out] 代表由 [`args] 提供的格式化实参根据 [`fmt] 中给定的说明所格式化的
字符表示。

[list]
[item]
[:en] If [`stream] refers to a terminal that is capable of displaying Unicode
only via a native Unicode API, flushes [`stream] and then writes [`out] to the
terminal using the native Unicode API; if [`out] contains invalid code units,
[%undefined]the behavior is undefined.
[:zh_CN] 如果 [`stream] 代表仅能通过某个本地 Unicode API 而有能力显示 Unicode 的终端，
则冲洗 [`stream]，然后利用本地 Unicode API 将 [`out] 写出到终端；如果 [`out] 包含
无效字符单元，则[%未定义]其行为未定义。
[item]
[:en] Otherwise writes [`out] to [`stream] unchanged.
[:zh_CN] 否则，将 [`out] 无改动地写入到 [`stream]。
[list:end]

[:en] Unconditionally unlocks [`stream] on function exit.
[:zh_CN] 于函数退出时无条件解锁 [`stream]。

[para:xref@c] 7.21.2

[begin:note]
[:en] On Windows, the native Unicode API is [`WriteConsoleW] and [`stream]
referring to a terminal means that
[`GetConsoleMode(_get_osfhandle(_fileno(stream)), ...)] returns nonzero.
[:zh_CN] 在 Windows 上，本地 Unicode API 为 [`WriteConsoleW]，而 [`stream] 所代表
终端应使得 [`GetConsoleMode(_get_osfhandle(_fileno(stream)), ...)] 返回非零。
[end:note]

[para:throws]
[:en] Any exception thrown by the call to [`vformat] ([#format.err.report]).
[:zh_CN] 由调用 [`vformat] 所抛出的任何异常（[#format.err.report]）。

[:en] [`system_error] if writing to the terminal or [`stream] fails.
[:zh_CN] 当向终端或 [`stream] 的写入失败时抛出 [`system_error]。

[:en] May throw [`bad_alloc].
[:zh_CN] 可能会抛出 [`bad_alloc]。

[para:recommended]
[:en] If invoking the native Unicode API requires transcoding, implementations
should substitute invalid code units with [=unicode(fffd,replacement character)]
per the Unicode Standard, Chapter 3.9 [&:ucode fffd] Substitution in Conversion.
[:zh_CN] 如果调用本地 Unicode API 时需要进行转码，则根据《Unicode 标准》的章节
3.9，《转换中的 [&:ucode fffd] 代换》，实现最好将无效代码单元替换为
[=unicode(fffd,replacement character)]。
[div:end]

[%@lib vprint_nonunicode]
[codeblock:declaration]
void vprint_nonunicode(string_view fmt, format_args args);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
vprint_nonunicode(stdout, fmt, args);
[codeblock:end]
[div:end]

[%@lib vprint_nonunicode_buffered]
[codeblock:declaration]
void vprint_nonunicode_buffered(FILE* stream, string_view fmt, format_args args);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
string out = vformat(fmt, args);
vprint_nonunicode("{}", make_format_args(out));
[codeblock:end]
[div:end]

[%@lib vprint_nonunicode]
[codeblock:declaration]
void vprint_nonunicode(FILE* stream, string_view fmt, format_args args);
[codeblock:end]

[div:description]
[para:expects]
[:en] [`stream] is a valid pointer to an output C stream.
[:zh_CN] [`stream] 是指向 C 输出流的有效指针。

[para:effects]
[:en] While holding the lock on [`stream], writes the character representation
of formatting arguments provided by [`args] formatted according to
specifications given in [`fmt] to [`stream].
[:zh_CN] 在持有 [`stream] 上的锁时，把由 [`args] 提供的格式化实参根据 [`fmt] 中给定的
说明所格式化的字符表示写入到 [`stream]。

[para:throws]
[:en] Any exception thrown by the call to [`vformat] ([#format.err.report]).
[:zh_CN] 由调用 [`vformat] 所抛出的任何异常（[#format.err.report]）。

[:en] [`system_error] if writing to [`stream] fails.
[:zh_CN] 当向 [`stream] 的写入失败时抛出 [`system_error]。

[:en] May throw [`bad_alloc].
[:zh_CN] 可能会抛出 [`bad_alloc]。
[div:end]
