[section#stringstream
    [:en] Class template [`basic_stringstream]
    [:zh_CN] 类模板 [`basic_stringstream]
]

[%@library basic_stringstream]
[codeblock:synopsis]
namespace std {
  template<class charT, class traits = char_traits<charT>,
           class Allocator = allocator<charT>>
  class basic_stringstream : public basic_iostream<charT, traits> {
  public:
    using char_type      = charT;
    using int_type       = typename traits::int_type;
    using pos_type       = typename traits::pos_type;
    using off_type       = typename traits::off_type;
    using traits_type    = traits;
    using allocator_type = Allocator;

    // [:en] [#stringstream.cons], constructors
    // [|:zh_CN] [#stringstream.cons]，构造函数
    basic_stringstream() : basic_stringstream(ios_base::out | ios_base::in) {}
    explicit basic_stringstream(ios_base::openmode which);
    explicit basic_stringstream(
      const basic_string<charT, traits, Allocator>& s,
      ios_base::openmode which = ios_base::out | ios_base::in);
    basic_stringstream(ios_base::openmode which, const Allocator& a);
    explicit basic_stringstream(
      basic_string<charT, traits, Allocator>&& s,
      ios_base::openmode which = ios_base::out | ios_base::in);
    template<class SAlloc>
      basic_stringstream(
        const basic_string<charT, traits, SAlloc>& s, const Allocator& a)
        : basic_stringstream(s, ios_base::out | ios_base::in, a) {}
    template<class SAlloc>
      basic_stringstream(
        const basic_string<charT, traits, SAlloc>& s,
        ios_base::openmode which, const Allocator& a);
    template<class SAlloc>
      explicit basic_stringstream(
        const basic_string<charT, traits, SAlloc>& s,
        ios_base::openmode which = ios_base::out | ios_base::in);
    basic_stringstream(const basic_stringstream&) = delete;
    basic_stringstream(basic_stringstream&& rhs);

    // [:en] [#stringstream.assign], assign and swap
    // [|:zh_CN] [#stringstream.assign]，赋值和交换
    basic_stringstream& operator=(const basic_stringstream&) = delete;
    basic_stringstream& operator=(basic_stringstream&& rhs);
    void swap(basic_stringstream& rhs);

    // [:en] [#stringstream.members], members
    // [|:zh_CN] [#stringstream.members]，成员
    basic_stringbuf<charT, traits, Allocator>* rdbuf() const;

    basic_string<charT, traits, Allocator> str() const &;
    template<class SAlloc>
      basic_string<charT,traits,SAlloc> str(const SAlloc& sa) const;
    basic_string<charT, traits, Allocator> str() &&;
    basic_string_view<charT, traits> view() const noexcept;

    void str(const basic_string<charT, traits, Allocator>& s);
    template<class SAlloc>
      void str(const basic_string<charT, traits, SAlloc>& s);
    void str(basic_string<charT, traits, Allocator>&& s);

  private:
    basic_stringbuf<charT, traits> sb;  // [=Expos]
  };

  template<class charT, class traits, class Allocator>
    void swap(basic_stringstream<charT, traits, Allocator>& x,
              basic_stringstream<charT, traits, Allocator>& y);
}
[codeblock:end]

[para]
[:en] The class template [`basic_stringstream<charT, traits>] supports reading
and writing objects of class [`basic_string<charT, traits, Allocator>].
[:zh_CN] 类模板 [`basic_istringstream<charT, traits>] 支持对类
[`basic_string<charT, traits, Allocator>] 的对象进行读取和写入。

[:en] It uses a [`basic_stringbuf<charT, traits, Allocator>] object to control
the associated storage.
[:zh_CN] 它利用一个 [`basic_stringbuf<charT, traits, Allocator>] 对象来控制其所
关联的存储。

[:en] For the sake of exposition, the maintained data is presented here as:
[:zh_CN] 为阐释目的，此处将其所维护的数据表示为：
[list]
[item]
[:en] [`sb], the [`stringbuf] object.
[:zh_CN] [`sb]，[`stringbuf] 对象。
[list:end]

[include stringstream.cons]

[include stringstream.assign]

[include stringstream.members]
