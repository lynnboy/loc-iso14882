[section#ispanstream.members
    [:en] Member functions
    [:zh_CN] 成员函数
]

[%@lib@member rdbuf[!basic_ispanstream]]
[codeblock:declaration]
basic_spanbuf<charT, traits>* rdbuf() const noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return const_cast<basic_spanbuf<charT, traits>*>(addressof([[redoc("*>")]]sb));
[codeblock:end]
[div:end]

[%@lib@member span[!basic_ispanstream]]
[codeblock:declaration]
std::span<const charT> span() const noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return rdbuf()->span();]
[:zh_CN] 等价于：[`return rdbuf()->span();]
[div:end]

[%@lib@member span[!basic_ispanstream]]
[codeblock:declaration]
void span(std::span<charT> s) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to [`rdbuf()->span(s)].
[:zh_CN] 等价于 [`rdbuf()->span(s)]。
[div:end]

[codeblock:declaration]
template<class ROS> void span(ROS&& s) noexcept;
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`ROS] models [`ranges::[`:c borrowed_range]].
[:zh_CN] [`ROS] 构成 [`ranges::[`:c borrowed_range]]。

[:en]
[`![`:c convertible_to]<ROS, std::span<charT>> && [`:c convertible_to]<ROS, std::span<const charT>>]
is [`true].
[:zh_CN]
[`![`:c convertible_to]<ROS, std::span<charT>> && [`:c convertible_to]<ROS, std::span<const charT>>]
为 [`true]。

[para:effects]
[:en] Let [`sp] be [`std::span<const charT>(std::forward<ROS>(s))].
[:zh_CN] 令 [`sp] 为 [`std::span<const charT>(std::forward<ROS>(s))]。

[:en] Equivalent to
[:zh_CN] 等价于
[codeblock]
this->span(std::span<charT>(const_cast<charT*>(sp.data()), sp.size()));
[codeblock:end]
[div:end]
