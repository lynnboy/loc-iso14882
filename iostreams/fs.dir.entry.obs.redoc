[section#fs.dir.entry.obs
    [:en] Observers
    [:zh_CN] 探查函数
]

[para]
[:en] Unqualified function names in the [=returns] elements of the
[`directory_entry] observers described below refer to members of the
[`std::filesystem] namespace.
[:zh_CN] 下文所述的各 [`directory_entry] 探查函数的 [=returns] 部分中，未限定的
函数名都涉指 [`std::filesystem] 命名空间的成员。

[%@lib@member path[!directory_entry]]
[%@lib@member operator const filesystem::path&[!directory_entry]]
[codeblock:declaration]
const filesystem::path& path() const noexcept;
operator const filesystem::path&() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`pathobject].
[:zh_CN] [`pathobject]。
[div:end]

[%@lib@member exists[!directory_entry]]
[codeblock:declaration]
bool exists() const;
bool exists(error_code& ec) const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`exists(this->status())] or [`exists(this->status(ec))], respectively.
[:zh_CN] 分别返回 [`exists(this->status())] 或 [`exists(this->status(ec))]。

[para:throws]
[:en] As specified in [#fs.err.report].
[:zh_CN] 如 [#fs.err.report] 所述。
[div:end]

[%@lib@member is_block_file[!directory_entry]]
[codeblock:declaration]
bool is_block_file() const;
bool is_block_file(error_code& ec) const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`is_block_file(this->status())] or [`is_block_file(this->status(ec))],
respectively.
[:zh_CN] 分别返回 [`is_block_file(this->status())] 或
[`is_block_file(this->status(ec))]。

[para:throws]
[:en] As specified in [#fs.err.report].
[:zh_CN] 如 [#fs.err.report] 所述。
[div:end]

[%@lib@member is_character_file[!directory_entry]]
[codeblock:declaration]
bool is_character_file() const;
bool is_character_file(error_code& ec) const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`is_character_file(this->status())] or
[`is_character_file(this->status(ec))], respectively.
[:zh_CN] 分别返回 [`is_character_file(this->status())] 或
[`is_character_file(this->status(ec))]。

[para:throws]
[:en] As specified in [#fs.err.report].
[:zh_CN] 如 [#fs.err.report] 所述。
[div:end]

[%@lib@member is_directory[!directory_entry]]
[codeblock:declaration]
bool is_directory() const;
bool is_directory(error_code& ec) const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`is_directory(this->status())] or [`is_directory(this->status(ec))],
respectively.
[:zh_CN] 分别返回 [`is_directory(this->status())] 或
[`is_directory(this->status(ec))]。

[para:throws]
[:en] As specified in [#fs.err.report].
[:zh_CN] 如 [#fs.err.report] 所述。
[div:end]

[%@lib@member is_fifo[!directory_entry]]
[codeblock:declaration]
bool is_fifo() const;
bool is_fifo(error_code& ec) const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`is_fifo(this->status())] or [`is_fifo(this->status(ec))],
respectively.
[:zh_CN] 分别返回 [`is_fifo(this->status())] 或 [`is_fifo(this->status(ec))]。

[para:throws]
[:en] As specified in [#fs.err.report].
[:zh_CN] 如 [#fs.err.report] 所述。
[div:end]

[%@lib@member is_other[!directory_entry]]
[codeblock:declaration]
bool is_other() const;
bool is_other(error_code& ec) const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`is_other(this->status())] or [`is_other(this->status(ec))],
respectively.
[:zh_CN] 分别返回 [`is_other(this->status())] 或
[`is_other(this->status(ec))]。

[para:throws]
[:en] As specified in [#fs.err.report].
[:zh_CN] 如 [#fs.err.report] 所述。
[div:end]

[%@lib@member is_regular_file[!directory_entry]]
[codeblock:declaration]
bool is_regular_file() const;
bool is_regular_file(error_code& ec) const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`is_regular_file(this->status())] or
[`is_regular_file(this->status(ec))], respectively.
[:zh_CN] 分别返回 [`is_regular_file(this->status())] 或
[`is_regular_file(this->status(ec))]。

[para:throws]
[:en] As specified in [#fs.err.report].
[:zh_CN] 如 [#fs.err.report] 所述。
[div:end]

[%@lib@member is_socket[!directory_entry]]
[codeblock:declaration]
bool is_socket() const;
bool is_socket(error_code& ec) const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`is_socket(this->status())] or [`is_socket(this->status(ec))],
respectively.
[:zh_CN] 分别返回 [`is_socket(this->status())] 或
[`is_socket(this->status(ec))]。

[para:throws]
[:en] As specified in [#fs.err.report].
[:zh_CN] 如 [#fs.err.report] 所述。
[div:end]

[%@lib@member is_symlink[!directory_entry]]
[codeblock:declaration]
bool is_symlink() const;
bool is_symlink(error_code& ec) const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`is_symlink(this->symlink_status())] or
[`is_symlink(this->symlink_status(ec))], respectively.
[:zh_CN] 分别返回 [`is_symlink(this->symlink_status())] 或
[`is_symlink(this->symlink_status(ec))]。

[para:throws]
[:en] As specified in [#fs.err.report].
[:zh_CN] 如 [#fs.err.report] 所述。
[div:end]

[%@lib@member file_size[!directory_entry]]
[codeblock:declaration]
uintmax_t file_size() const;
uintmax_t file_size(error_code& ec) const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] If cached, the file size attribute value.
[:zh_CN] 如果有缓存，则为文件大小特性值。

[:en] Otherwise, [`file_size(path())] or [`file_size(path(), ec)], respectively.
[:zh_CN] 否则，分别返回 [`file_size(path())] 或 [`file_size(path(), ec)]。

[para:throws]
[:en] As specified in [#fs.err.report].
[:zh_CN] 如 [#fs.err.report] 所述。
[div:end]

[%@lib@member hard_link_count[!directory_entry]]
[codeblock:declaration]
uintmax_t hard_link_count() const;
uintmax_t hard_link_count(error_code& ec) const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] If cached, the hard link count attribute value.
[:zh] 如果有缓存，则为硬链接数特性值。

[:en] Otherwise, [`hard_link_count(path())] or [`hard_link_count(path(), ec)],
respectively.
[:zh_CN] 否则，分别返回 [`hard_link_count(path())] 或
[`hard_link_count(path(), ec)]。

[para:throws]
[:en] As specified in [#fs.err.report].
[:zh_CN] 如 [#fs.err.report] 所述。
[div:end]

[%@lib@member last_write_time[!directory_entry]]
[codeblock:declaration]
file_time_type last_write_time() const;
file_time_type last_write_time(error_code& ec) const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] If cached, the last write time attribute value.
[:zh] 如果有缓存，则为最近写入时间特性值。

[:en] Otherwise, [`last_write_time(path())] or [`last_write_time(path(), ec)],
respectively.
[:zh_CN] 否则，分别返回 [`last_write_time(path())] 或
[`last_write_time(path(), ec)]。

[para:throws]
[:en] As specified in [#fs.err.report].
[:zh_CN] 如 [#fs.err.report] 所述。
[div:end]

[%@lib@member status[!directory_entry]]
[codeblock:declaration]
file_status status() const;
file_status status(error_code& ec) const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] If cached, the status attribute value.
[:zh] 如果有缓存，则为状态特性值。

[:en] Otherwise, [`status(path())] or [`status(path(), ec)], respectively.
[:zh_CN] 否则，分别返回 [`status(path())] 或 [`status(path(), ec)]。

[para:throws]
[:en] As specified in [#fs.err.report].
[:zh_CN] 如 [#fs.err.report] 所述。
[div:end]

[%@lib@member symlink_status[!directory_entry]]
[codeblock:declaration]
file_status symlink_status() const;
file_status symlink_status(error_code& ec) const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] If cached, the symlink status attribute value.
[:zh] 如果有缓存，则为符号连接状态特性值。

[:en] Otherwise, [`symlink_status(path())] or [`symlink_status(path(), ec)],
respectively.
[:zh_CN] 否则，分别返回 [`symlink_status(path())] 或
[`symlink_status(path(), ec)]。

[para:throws]
[:en] As specified in [#fs.err.report].
[:zh_CN] 如 [#fs.err.report] 所述。
[div:end]

[%@lib@member operator==[!directory_entry]]
[codeblock:declaration]
bool operator==(const directory_entry& rhs) const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`pathobject == rhs.pathobject].
[:zh_CN] [`pathobject == rhs.pathobject]。
[div:end]

[%@lib@member operator<=>[!directory_entry]]
[codeblock:declaration]
strong_ordering operator<=>(const directory_entry& rhs) const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`pathobject <=> rhs.pathobject].
[:zh_CN] [`pathobject <=> rhs.pathobject]。
[div:end]
