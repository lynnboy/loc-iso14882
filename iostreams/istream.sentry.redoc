[section#istream.sentry
    [:en] Class [`basic_istream::sentry]
    [:zh_CN] 类 [`basic_istream::sentry]
]

[%@lib basic_istream::sentry]
[%@lib@member sentry[!basic_istream]]
[codeblock:synopsis]
namespace std {
  template<class charT, class traits = char_traits<charT>>
  class basic_istream<charT, traits>::sentry {
    bool ok_;                   // [=expos]
  public:
    explicit sentry(basic_istream<charT, traits>& is, bool noskipws = false);
    ~sentry();
    explicit operator bool() const { return ok_; }
    sentry(const sentry&) = delete;
    sentry& operator=(const sentry&) = delete;
  };
}
[codeblock:end]

[div:description]
[para]
[:en] The class [`sentry] defines a class that is responsible for doing
exception safe prefix and suffix operations.
[:zh_CN] 类 [`sentry] 所定义的类负责进行异常安全前缀和后缀操作。
[div:end]

[%@lib@ctor sentry]
[%@lib@ctor basic_istream::sentry]
[codeblock:declaration]
explicit sentry(basic_istream<charT, traits>& is, bool noskipws = false);
[codeblock:end]

[div:description]
[para:effects]
[:en] If [`is.good()] is [`false], calls [`is.setstate(failbit)].
[:zh_CN] 若 [`is.good()] 为 [`false]，则调用 [`is.setstate(failbit)]。

[:en] Otherwise, prepares for formatted or unformatted input.
[:zh_CN] 否则，为格式化或无格式的输入进行准备。

[:en] First, if [`is.tie()] is not a null pointer, the function calls
[%@lib flush][`is.tie()->flush()] to synchronize the output sequence with
any associated external C stream.
[:zh_CN] 首先，如果 [`is.tie()] 不是空指针，则函数调用
[%@lib flush][`is.tie()->flush()] 来将输出序列与任何其所关联的外部 C 流进行同步。

[:en] Except that this call can be suppressed if the put area of [`is.tie()]
is empty.
[:zh_CN] 不过，如果 [`is.tie()] 的放入区为空，则可以免除这次调用。

[:en] Further an implementation is allowed to defer the call to [`flush] until a
call of [`is.rdbuf()->underflow()] occurs.
[:zh_CN] 此外，允许实现将对 [`flush] 的调用推迟到发生对
[`is.rdbuf()->underflow()] 的调用之时进行。

[:en] If no such call occurs before the [`sentry] object is destroyed, the call
to [`flush] may be eliminated entirely.[#:fn]
[:zh_CN] 如果在该 [`sentry] 对象销毁之前都未发生这种调用，则对 [`flush] 的调用
可以被完全消除[#:fn]。

[note:foot]
[:en] This will be possible only in functions that are part of the library.
[:zh_CN] 只有作为程序库的一部分的函数中才可能如此处理。

[:en] The semantics of the constructor used in user code is as specified.
[:zh_CN] 而在用户代码中使用该构造函数的语义则符合上文说明。
[note:end]

[:en] If [`noskipws] is zero and [`is.flags() & ios_base::skipws] is nonzero,
the function extracts and discards each character as long as the next available
input character [`c] is a whitespace character.
[:zh_CN] 如果 [`noskipws] 为零且 [`is.flags() & ios_base::skipws] 不为零，则
下一个可用输入字符 [`c] 为空白字符时，函数持续提取并丢弃这些字符。

[:en] If [`is.rdbuf()->sbumpc()] or [`is.rdbuf()->sgetc()] returns
[`traits::eof()], the function calls [`setstate(failbit | eofbit)] (which may
throw [`ios_base::failure]).
[:zh_CN] 如果 [`is.rdbuf()->sbumpc()] 或 [`is.rdbuf()->sgetc()] 返回了
[`traits::eof()]，则函数将调用 [`setstate(failbit | eofbit)]（这可能会抛出
[`ios_base::failure]）。

[para:remarks]
[:en] The constructor
[:zh_CN] 构造函数

[codeblock]
explicit sentry(basic_istream<charT, traits>& is, bool noskipws = false)
[codeblock:end]

[:en@~] uses the currently imbued locale in [`is], to determine whether the next
input character is whitespace or not.
[:zh_CN@~] 使用 [`is] 中当前浸染的地域来确定其下一个输入字符是否是空白。

[para]
[:en] To decide if the character [`c] is a whitespace character, the constructor
performs as if it executes the following code fragment:
[:zh_CN] 为决定字符 [`c] 是否是空白字符，构造函数进行如同它执行以下的代码片段：

[codeblock]
const ctype<charT>& ctype = use_facet<ctype<charT>>(is.getloc());
if (ctype.is(ctype.space, c) != 0)
  // [:en] [`c] is a whitespace character. \
  [:zh_CN] [`c] 为空白字符。
[codeblock:end]

[para]
[:en] If, after any preparation is completed, [`is.good()] is [`true],
[`ok_ != false] otherwise, [`ok_ == false].
[:zh_CN] 如果准备工作完成后 [`os.good()] 为 [`true]，则有 [`ok_ != false]，否则
[`ok_ == false]。

[:en] During preparation, the constructor may call [`setstate(failbit)] (which
may throw [`ios_base::failure] ([#iostate.flags])).[#:fn]
[:zh_CN] 进行准备过程中，构造函数可能调用 [`setstate(failbit)]（这可能会抛出
[`ios_base::failure]（[#iostate.flags]））[#:fn]。

[note:foot]
[:en] The [`sentry] constructor and destructor can also perform additional
[%implementation-dependent]implementation-dependent operations.
[:zh_CN] [`sentry] 的构造函数和析构函数还可以进行其他[%特定于实现的]特定于实现的
操作。
[note:end]
[div:end]

[%@lib@dtor sentry]
[%@lib@dtor basic_istream::sentry]
[codeblock:declaration]
~sentry();
[codeblock:end]

[div:description]
[para:effects]
[:en] None.
[:zh_CN] 无。
[div:end]

[%@lib@member operator bool[!basic_istream::sentry]]
[codeblock:declaration]
explicit operator bool() const;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`ok_].
[:zh_CN] [`ok_]。
[div:end]
