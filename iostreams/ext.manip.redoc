[section#ext.manip
    [:en] Extended manipulators
    [:zh_CN] 扩展操作符
]

[para]
[:en] The header [?libheader iomanip] defines several functions that support
extractors and inserters that allow for the parsing and formatting of sequences
and values for money and time.
[:zh_CN] 头文件 [?libheader iomanip] 定义了几个函数，支持对金额和时间的序列和值
进行解析和格式化的提取符和插入符。

[%@lib get_money]
[codeblock:declaration]
template<class moneyT> [[redoc("[=unspec]")]] get_money(moneyT& mon, bool intl = false);
[codeblock:end]

[div:description]
[para:requires]
[:en] The type [`moneyT] shall be either [`long double] or a specialization of
the [`basic_string] template ([#strings]).
[:zh_CN] 类型 [`moneyT] 应当或者为 [`long double]，或者为模板 [`basic_string] 的
特例（[#strings]）。

[para:effects]
[:en] The expression [`in >> get_money(mon, intl)] described below behaves as a
formatted input function ([#istream.formatted.reqmts]).
[:zh_CN] 如下所述的表达式 [`in >> get_money(mon, intl)] 的行为符合格式化输入函数
（[#istream.formatted.reqmts]）。

[para:returns]
[:en] An object of unspecified type such that if [`in] is an object of type
[`basic_istream<charT, traits>] then the expression [`in >> get_money(mon, intl)]
behaves as if it called [`f(in, mon, intl)], where the function [`f] is defined
as:
[:zh_CN] 一个未指明类型的对象，当 [`in] 为 [`basic_istream<charT, traits>] 类型
的对象时，表达式 [`in >> get_money(mon, intl)] 的行为如同调用
[`f(in, mon, intl)]，其中的函数 [`f] 定义如下：

[codeblock]
template<class charT, class traits, class moneyT>
void f(basic_ios<charT, traits>& str, moneyT& mon, bool intl) {
  using Iter     = istreambuf_iterator<charT, traits>;
  using MoneyGet = money_get<charT, Iter>;

  ios_base::iostate err = ios_base::goodbit;
  const MoneyGet& mg = use_facet<MoneyGet>(str.getloc());

  mg.get(Iter(str.rdbuf()), Iter(), intl, str, err, mon);

  if (ios_base::goodbit != err)
    str.setstate(err);
}
[codeblock:end]

[:en] The expression [`in >> get_money(mon, intl)] shall have type
[`basic_istream<charT, traits>&] and value [`in].
[:zh_CN] 表达式 [`in >> get_money(mon, intl)] 的类型应当为
[`basic_istream<charT, traits>&] 且其值应当为 [`in]。
[div:end]

[%@lib put_money]
[codeblock:declaration]
template<class moneyT> [[redoc("[=unspec]")]] put_money(const moneyT& mon, bool intl = false);
[codeblock:end]

[div:description]
[para:requires]
[:en] The type [`moneyT] shall be either [`long double] or a specialization of
the [`basic_string] template ([#strings]).
[:zh_CN] 类型 [`moneyT] 应当或者为 [`long double]，或者为模板 [`basic_string] 的
特例（[#strings]）。

[para:returns]
[:en] An object of unspecified type such that if [`out] is an object of type
[`basic_ostream<charT, traits>] then the expression
[`out << put_money(mon, intl)] behaves as a formatted output function
([#ostream.formatted.reqmts]) that calls [`f(out, mon, intl)], where the
function [`f] is defined as:
[:zh_CN] 一个未指明类型的对象，当 [`out] 为 [`basic_ostream<charT, traits>] 类型
的对象时，表达式 [`out << put_money(mon, intl)] 的行为如同一个格式化输出函数
（[#ostream.formatted.reqmts]），它调用 [`f(out, mon, intl)]，其中的函数 [`f]
定义如下：

[codeblock]
template<class charT, class traits, class moneyT>
void f(basic_ios<charT, traits>& str, const moneyT& mon, bool intl) {
  using Iter     = ostreambuf_iterator<charT, traits>;
  using MoneyPut = money_put<charT, Iter>;

  const MoneyPut& mp = use_facet<MoneyPut>(str.getloc());
  const Iter end = mp.put(Iter(str.rdbuf()), intl, str, str.fill(), mon);

  if (end.failed())
    str.setstate(ios::badbit);
}
[codeblock:end]

[:en] The expression [`out << put_money(mon, intl)] shall have type
[`basic_ostream<charT, traits>&] and value [`out].
[:zh_CN] 表达式 [`out << put_money(mon, intl)] 的类型应当为
[`basic_ostream<charT, traits>&] 且其值应当为 [`out]。
[div:end]

[%@lib get_time]
[codeblock:declaration]
template<class charT> [[redoc("[=unspec]")]] get_time(struct tm* tmb, const charT* fmt);
[codeblock:end]

[div:description]
[para:requires]
[:en] The argument [`tmb] shall be a valid pointer to an object of type
[`struct tm].
[:zh_CN] 实参 [`tmb] 应当为指向一个类型 [`struct tm] 的对象的有效指针。

[:en] The argument [`fmt] shall be a valid pointer to an array of objects of
type [`charT] with [`char_traits<charT>::length(fmt)] elements.
[:zh_CN] 实参 [`fmt] 应当为指向一个具有 [`char_traits<charT>::length(fmt)] 个
元素的 [`charT] 类型的数组的有效指针。

[para:returns]
[:en] An object of unspecified type such that if [`in] is an object of type
[`basic_istream<charT, traits>] then the expression [`in >> get_time(tmb, fmt)]
behaves as if it called [`f(in, tmb, fmt)], where the function [`f] is defined
as:
[:zh_CN] 一个未指明类型的对象，当 [`in] 为 [`basic_istream<charT, traits>] 类型
的对象时，表达式 [`in >> get_time(tmb, fmt)] 的行为如同调用
[`f(in, tmb, fmt)]，其中的函数 [`f] 定义如下：

[codeblock]
template<class charT, class traits>
void f(basic_ios<charT, traits>& str, struct tm* tmb, const charT* fmt) {
  using Iter    = istreambuf_iterator<charT, traits>;
  using TimeGet = time_get<charT, Iter>;

  ios_base::iostate err = ios_base::goodbit;
  const TimeGet& tg = use_facet<TimeGet>(str.getloc());

  tg.get(Iter(str.rdbuf()), Iter(), str, err, tmb,
    fmt, fmt + traits::length(fmt));

  if (err != ios_base::goodbit)
    str.setstate(err);
}
[codeblock:end]

[:en] The expression [`in >> get_time(tmb, fmt)] shall have type
[`basic_istream<charT, traits>&] and value [`in].
[:zh_CN] 表达式 [`in >> get_time(tmb, fmt)] 的类型应当为
[`basic_istream<charT, traits>&] 且其值应当为 [`in]。
[div:end]

[%@lib put_time]
[codeblock:declaration]
template<class charT> [[redoc("[=unspec]")]] put_time(const struct tm* tmb, const charT* fmt);
[codeblock:end]

[div:description]
[para:requires]
[:en] The argument [`tmb] shall be a valid pointer to an object of type
[`struct tm], and the argument [`fmt] shall be a valid pointer to an array of
objects of type [`charT] with [`char_traits<charT>::length(fmt)] elements.
[:zh_CN] 实参 [`tmb] 应当为指向一个类型 [`struct tm] 的对象的有效指针，而实参
[`fmt] 应当为指向一个具有 [`char_traits<charT>::length(fmt)] 个元素的 [`charT]
类型的数组的有效指针。

[para:returns]
[:en] An object of unspecified type such that if [`out] is an object of type
[`basic_ostream<charT, traits>] then the expression [`out << put_time(tmb, fmt)]
behaves as if it called [`f(out, tmb, fmt)], where the function [`f] is defined
as:
[:zh_CN] 一个未指明类型的对象，当 [`out] 为 [`basic_ostream<charT, traits>] 类型
的对象时，表达式 [`out << put_time(tmb, fmt)] 的行为如同调用
[`f(out, tmb, fmt)]，其中的函数 [`f] 定义如下：

[codeblock]
template<class charT, class traits>
void f(basic_ios<charT, traits>& str, const struct tm* tmb, const charT* fmt) {
  using Iter    = ostreambuf_iterator<charT, traits>;
  using TimePut = time_put<charT, Iter>;

  const TimePut& tp = use_facet<TimePut>(str.getloc());
  const Iter end = tp.put(Iter(str.rdbuf()), str, str.fill(), tmb,
    fmt, fmt + traits::length(fmt));

  if (end.failed())
    str.setstate(ios_base::badbit);
}
[codeblock:end]

[:en] The expression [`out << put_time(tmb, fmt)] shall have type
[`basic_ostream<charT, traits>&] and value [`out].
[:zh_CN] 表达式 [`out << put_time(tmb, fmt)] 的类型应当为
[`basic_ostream<charT, traits>&] 且其值应当为 [`out]。
[div:end]
