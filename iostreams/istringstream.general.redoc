[section#istringstream.general
    [:en] General
    [:zh_CN] 概述
]

[%@lib basic_istringstream]
[codeblock:synopsis]
namespace std {
  template<class charT, class traits = char_traits<charT>,
           class Allocator = allocator<charT>>
  class basic_istringstream : public basic_istream<charT, traits> {
  public:
    using char_type      = charT;
    using int_type       = typename traits::int_type;
    using pos_type       = typename traits::pos_type;
    using off_type       = typename traits::off_type;
    using traits_type    = traits;
    using allocator_type = Allocator;

    // [:en] [#istringstream.cons], constructors \
    [:zh_CN] [#istringstream.cons]，构造函数
    basic_istringstream() : basic_istringstream(ios_base::in) {}
    explicit basic_istringstream(ios_base::openmode which);
    explicit basic_istringstream(
      const basic_string<charT, traits, Allocator>& s,
      ios_base::openmode which = ios_base::in);
    basic_istringstream(ios_base::openmode which, const Allocator& a);
    explicit basic_istringstream(
      basic_string<charT, traits, Allocator>&& s,
      ios_base::openmode which = ios_base::in);
    template<class SAlloc>
      basic_istringstream(
        const basic_string<charT, traits, SAlloc>& s, const Allocator& a)
        : basic_istringstream(s, ios_base::in, a) {}
    template<class SAlloc>
      basic_istringstream(
        const basic_string<charT, traits, SAlloc>& s,
        ios_base::openmode which, const Allocator& a);
    template<class SAlloc>
      explicit basic_istringstream(
        const basic_string<charT, traits, SAlloc>& s,
        ios_base::openmode which = ios_base::in);
    basic_istringstream(const basic_istringstream&) = delete;
    basic_istringstream(basic_istringstream&& rhs);

    basic_istringstream& operator=(const basic_istringstream&) = delete;
    basic_istringstream& operator=(basic_istringstream&& rhs);

    // [:en] [#istringstream.swap], swap \
    [:zh_CN] [#istringstream.swap]，交换
    void swap(basic_istringstream& rhs);

    // [:en] [#istringstream.members], members \
    [:zh_CN] [#istringstream.members]，成员
    basic_stringbuf<charT, traits, Allocator>* rdbuf() const;
    basic_string<charT, traits, Allocator> str() const &;
    template<class SAlloc>
      basic_string<charT,traits,SAlloc> str(const SAlloc& sa) const;
    basic_string<charT, traits, Allocator> str() &&;
    basic_string_view<charT, traits> view() const noexcept;

    void str(const basic_string<charT, traits, Allocator>& s);
    template<class SAlloc>
      void str(const basic_string<charT, traits, SAlloc>& s);
    void str(basic_string<charT, traits, Allocator>&& s);

  private:
    basic_stringbuf<charT, traits, Allocator> sb;   // [=expos]
  };
}
[codeblock:end]

[para]
[:en] The class [`basic_istringstream<charT, traits, Allocator>] supports
reading objects of class [`basic_string<charT, traits, Allocator>].
[:zh_CN] 类 [`basic_istringstream<charT, traits, Allocator>] 支持从类
[`basic_string<charT, traits, Allocator>] 的对象进行读取。

[:en] It uses a [`basic_stringbuf<charT, traits, Allocator>] object to control
the associated storage.
[:zh_CN] 它利用一个 [`basic_stringbuf<charT, traits, Allocator>] 对象来控制其所
关联的存储。

[:en] For the sake of exposition, the maintained data is presented here as:
[:zh_CN] 为阐释目的，此处将其所维护的数据表示为：
[list]
[item]
[:en] [`sb], the [`stringbuf] object.
[:zh_CN] [`sb]，[`stringbuf] 对象。
[list:end]
