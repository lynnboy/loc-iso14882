[section#sstream.syn
    [:en] Header [`<sstream>] synopsis
    [:zh_CN] 头文件 [`<sstream>] 纲要
]

[%@hdr@def sstream]

[%@lib stringbuf]
[%@lib basic_stringbuf<char>]
[%@lib wstringbuf]
[%@lib basic_stringbuf<wchar_t>]
[%@lib istringstream]
[%@lib basic_istringstream<char>]
[%@lib wistringstream]
[%@lib basic_istringstream<wchar_t>]
[%@lib ostringstream]
[%@lib basic_ostringstream<char>]
[%@lib wostringstream]
[%@lib basic_ostringstream<wchar_t>]
[%@lib stringstream]
[%@lib basic_stringstream<char>]
[%@lib wstringstream]
[%@lib basic_stringstream<wchar_t>]
[codeblock:synopsis]
namespace std {
  // [:en] [#stringbuf], class template [`basic_stringbuf] \
  [:zh_CN] [#stringbuf]，类模板 [`basic_stringbuf]
  template<class charT, class traits = char_traits<charT>,
           class Allocator = allocator<charT>>
    class basic_stringbuf;

  template<class charT, class traits, class Allocator>
    void swap(basic_stringbuf<charT, traits, Allocator>& x,
              basic_stringbuf<charT, traits, Allocator>& y) noexcept(noexcept(x.swap(y)));

  using stringbuf  = basic_stringbuf<char>;
  using wstringbuf = basic_stringbuf<wchar_t>;

  // [:en] [#istringstream], class template [`basic_istringstream] \
  [:zh_CN] [#istringstream]，类模板 [`basic_istringstream]
  template<class charT, class traits = char_traits<charT>,
           class Allocator = allocator<charT>>
    class basic_istringstream;

  template<class charT, class traits, class Allocator>
    void swap(basic_istringstream<charT, traits, Allocator>& x,
              basic_istringstream<charT, traits, Allocator>& y);

  using istringstream  = basic_istringstream<char>;
  using wistringstream = basic_istringstream<wchar_t>;

  // [:en] [#ostringstream], class template [`basic_ostringstream] \
  [:zh_CN] [#ostringstream]，类模板 [`basic_ostringstream]
  template<class charT, class traits = char_traits<charT>,
           class Allocator = allocator<charT>>
    class basic_ostringstream;

  template<class charT, class traits, class Allocator>
    void swap(basic_ostringstream<charT, traits, Allocator>& x,
              basic_ostringstream<charT, traits, Allocator>& y);

  using ostringstream  = basic_ostringstream<char>;
  using wostringstream = basic_ostringstream<wchar_t>;

  // [:en] [#stringstream], class template [`basic_stringstream] \
  [:zh_CN] [#stringstream]，类模板 [`basic_stringstream]
  template<class charT, class traits = char_traits<charT>,
           class Allocator = allocator<charT>>
    class basic_stringstream;

  template<class charT, class traits, class Allocator>
    void swap(basic_stringstream<charT, traits, Allocator>& x,
              basic_stringstream<charT, traits, Allocator>& y);

  using stringstream  = basic_stringstream<char>;
  using wstringstream = basic_stringstream<wchar_t>;
}
[codeblock:end]

[para]
[:en] The header [?libheader sstream] defines four class templates and eight
types that associate stream buffers with objects of class 
[%@lib basic_string][`basic_string], as described in [#string.classes].
[:zh_CN] 头文件 [?libheader sstream] 定义了四个类模板和八个类型，将流缓冲区和
[#string.classes] 中所述的类 [%@lib basic_string][`basic_string] 的对象关联起来。
