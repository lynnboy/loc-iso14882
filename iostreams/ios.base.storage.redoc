[section#ios.base.storage
    [:en] [`ios_base] storage functions
    [:zh_CN] [`ios_base] 存储函数
]

[%@library xalloc[!ios_base]]
[%@library ios_base[!xalloc]]
[codeblock:declaration]
static int xalloc();
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`index++].
[:zh_CN] [`index++]。

[para:remarks]
[:en] Concurrent access to this function by multiple threads shall not result in
a data race ([#intro.multithread]).
[:zh_CN] 由多个线程并发访问这个函数不能造成数据竞争（[#intro.multithread]）。
[exit:description]

[%@library iword[!ios_base]]
[%@library ios_base[!iword]]
[codeblock:declaration]
long& iword(int idx);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`idx] is a value obtained by a call to [`xalloc].
[:zh_CN] [`idx] 是对 [`xalloc] 的调用所返回的值。

[para:effects]
[:en] If [`iarray] is a null pointer, allocates an array of [`long] of
unspecified size and stores a pointer to its first element in [`iarray].
[:zh_CN] 若 [`iarray] 为空指针，则分配一个未指明大小的 [`long] 数组，并将指向其
首个元素的指针存储到 [`iarray] 中。

[:en] The function then extends the array pointed at by [`iarray] as necessary
to include the element [`iarray`[idx`]].
[:zh_CN] 然后该函数按需扩展 [`iarray] 所指向的数组以包含元素 [`iarray`[idx`]]。

[:en] Each newly allocated element of the array is initialized to zero.
[:zh_CN] 数组每个新分配的元素都初始化为零。

[:en] The reference returned is invalid after any other operations on the
object.[#:note#fn:$section.1]
[:zh_CN] 对该对象的任何其他操作之后都将使其所返回的引用失效。
[#:note#fn:$section.1]

[note:foot#fn:$section.1]
[:en] An implementation is free to implement both the integer array pointed at
by [`iarray] and the pointer array pointed at by [`parray] as sparse data
structures, possibly with a one-element cache for each.
[:zh_CN] 实现有自由将由 [`iarray] 所指向的整数数组和由 [`parray] 所指向的指针
数组都实现为稀疏数据结构，可能为每个数组提供一个单元素的高速缓存。
[note:end]

[:en] However, the value of the storage referred to is retained, so that until
the next call to [`copyfmt], calling [`iword] with the same index yields another
reference to the same value.
[:zh_CN] 不过，其所指代的存储中的值则会被保留，因此指导下一次调用 [`copyfmt] 前，
以相同索引调用 [`iword] 时将返回指代相同的值的另一个引用。

[:en] If the function fails[#:note#fn:$section.2] and [`*this] is a base class
subobject of a [`basic_ios<>] object or subobject, the effect is equivalent to
calling [`basic_ios<>::setstate(badbit)] on the derived object (which may throw
[`failure]).
[:zh_CN] 如果函数失败[#:note#fn:$section.2] 而 [`*this] 是某个 [`basic_ios<>]
对象或子对象的基类子对象，则其效果等价于在派生对象上调用
[`basic_ios<>::setstate(badbit)]（这可能会抛出 [`failure]）。

[note:foot#fn:$section.2]
[:en] For example, because it cannot allocate space.
[:zh_CN] 比如由于它无法分配空间。
[note:end]

[para:returns]
[:en] On success [`iarray`[idx`]].
[:zh_CN] 成功则为 [`iarray`[idx`]]。

[:en] On failure, a valid [`long&] initialized to 0.
[:zh_CN] 失败则为初始化为 0 的一个有效 [`long&]。
[exit:description]

[%@library pword[!ios_base]]
[%@library ios_base[!pword]]
[codeblock:declaration]
void*& pword(int idx);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`idx] is a value obtained by a call to [`xalloc].
[:zh_CN] [`idx] 是对 [`xalloc] 的调用所返回的值。

[para:effects]
[:en] If [`parray] is a null pointer, allocates an array of pointers to [`void]
of unspecified size and stores a pointer to its first element in [`parray].
[:zh_CN] 若 [`parray] 为空指针，则分配一个未指明大小的 [`void] 的指针的数组，并
将指向其首个元素的指针存储到 [`parray] 中。

[:en] The function then extends the array pointed at by [`parray] as necessary
to include the element [`parray`[idx`]].
[:zh_CN] 然后该函数按需扩展 [`parray] 所指向的数组以包含元素 [`parray`[idx`]]。

[:en] Each newly allocated element of the array is initialized to a null
pointer.
[:zh_CN] 数组每个新分配的元素都初始化为空指针。

[:en] The reference returned is invalid after any other operations on the
object.
[:zh_CN] 对该对象的任何其他操作之后都将使其所返回的引用失效。

[:en] However, the value of the storage referred to is retained, so that until
the next call to [`copyfmt], calling [`pword] with the same index yields another
reference to the same value.
[:zh_CN] 不过，其所指代的存储中的值则会被保留，因此指导下一次调用 [`copyfmt] 前，
以相同索引调用 [`pword] 时将返回指代相同的值的另一个引用。

[:en] If the function fails[#:note#fn:$section.3] and [`*this] is a base class
subobject of a [`basic_ios<>] object or subobject, the effect is equivalent to
calling [`basic_ios<>::setstate(badbit)] on the derived object (which may throw
[`failure]).
[:zh_CN] 如果函数失败[#:note#fn:$section.3] 而 [`*this] 是某个 [`basic_ios<>]
对象或子对象的基类子对象，则其效果等价于在派生对象上调用
[`basic_ios<>::setstate(badbit)]（这可能会抛出 [`failure]）。

[note:foot#fn:$section.3]
[:en] For example, because it cannot allocate space.
[:zh_CN] 比如由于它无法分配空间。
[note:end]

[para:returns]
[:en] On success [`parray`[idx`]].
[:zh_CN] 成功则为 [`parray`[idx`]]。

[:en] On failure a valid [`void*&] initialized to 0.
[:zh_CN] 失败则为初始化为 0 的一个有效 [`void*&]。

[para:remarks]
[:en] After a subsequent call to [`pword(int)] for the same object, the earlier
return value may no longer be valid.
[:zh_CN] 对同一个对象连续调用 [`pword(int)] 后，稍早时所返回的值可能不再有效。
[exit:description]
