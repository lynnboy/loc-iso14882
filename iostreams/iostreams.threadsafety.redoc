[section#iostreams.threadsafety
    [:en] Thread safety
    [:zh_CN] 线程安全性
]

[para]
[:en] Concurrent access to a stream object ([#string.streams], [#file.streams]),
stream buffer object ([#stream.buffers]), or C Library stream ([#c.files]) by
multiple threads may result in a data race ([#intro.multithread]) unless
otherwise specified ([#iostream.objects]).
[:zh_CN] 对流对象（[#string.streams]，[#file.streams]），流缓冲区对象
（[#stream.buffers]）或者 C 程序库的流（[#c.files]）从多个线程进行并发访问，除非
另行指明（[#iostream.objects]），否则可能会造成数据竞争（[#intro.multithread]）。

[begin:note]
[:en] Data races result in undefined behavior ([#intro.multithread]).
[:zh_CN] 数据竞争导致未定义的行为（[#intro.multithread]）。
[end:note]

[para]
[:en] If one thread makes a library call [$a] that writes a value to a stream
and, as a result, another thread reads this value from the stream through a
library call [$b] such that this does not result in a data race, then [$a][=']s
write synchronizes with [$b][=']s read.
[:zh_CN] 如果一个线程进行的库函数调用 [$a] 向某个流写入一个值，而作为其结果，
另一个线程通过库函数调用 [$b] 从这个流中读取到这个值，而其中并未造成数据竞争，
则 [$a] 的写入操作同步于 [$b] 的读取操作。
