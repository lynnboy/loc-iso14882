[section#spanbuf.members
    [:en] Member functions
    [:zh_CN] 成员函数
]

[%@lib@member span[!basic_spanbuf]]
[codeblock:declaration]
std::span<charT> span() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] If [`ios_base::out] is set in [*mode], returns
[`std::span<charT>(pbase(), pptr())], otherwise returns [*buf].
[:zh_CN] 若 [*mode] 中设置了 [`ios_base::out]，则返回
[`std::span<charT>(pbase(), pptr())]，否则返回 [*buf]。

[begin:note]
[:en] In contrast to [`basic_stringbuf], the underlying sequence never grows and
is not owned.
[:zh_CN] 与 [`basic_stringbuf] 相反，底层序列不会增长且并未被其拥有。

[:en] An owning copy can be obtained by converting the result to
[`basic_string<charT>].
[:zh_CN] 可以将其结果转换为 [`basic_string<charT>] 来获得一个自有的副本。
[end:note]
[div:end]

[%@lib@member span[!basic_spanbuf]]
[codeblock:declaration]
void span(std::span<charT> s) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] [`[*buf] = s].
[:zh_CN] [`[*buf] = s]。

[:en] Initializes the input and output sequences according to [*mode].
[:zh_CN] 依据 [*mode] 初始化输入和输出序列。

[para:ensures]
[list]
[item]
[:en] If [`ios_base::out] is set in [`mode],
[`pbase() == s.data() && epptr() == pbase() + s.size()] is [`true];
[:zh_CN] 若 [`mode] 中设置了 [`ios_base::out]，则
[`pbase() == s.data() && epptr() == pbase() + s.size()] 为 [`true]；

[list]
[item]
[:en] in addition, if [`ios_base::ate] is set in [`mode],
[`pptr() == pbase() + s.size()] is [`true],
[:zh_CN] 若 [`mode] 中设置了 [`ios_base::ate]，则 [`pptr() == pbase() + s.size()]
为 [`true]，
[item]
[:en] otherwise [`pptr() == pbase()] is [`true].
[:zh_CN] 否则 [`pptr() == pbase()] 为 [`true]。
[list:end]

[item]
[:en] If [`ios_base::in] is set in [`mode],
[`eback() == s.data() && gptr() == eback() && egptr() == eback() + s.size()] is
[`true].
[:zh_CN] 若 [`mode] 中设置了 [`ios_base::in]，则
[`eback() == s.data() && gptr() == eback() && egptr() == eback() + s.size()] 为
[`true]。
[list:end]
[div:end]
