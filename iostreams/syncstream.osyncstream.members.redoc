[section#syncstream.osyncstream.members
    [:en] Member functions
    [:zh_CN] 成员函数
]

[%@library emit[!basic_osyncstream]]
[%@library basic_osyncstream[!emit]]
[codeblock:declaration]
void emit();
[codeblock:end]

[begin:description]
[para:effects]
[:en] Calls [`sb.emit()].
[:zh_CN] 调用 [`sb.emit()]。

[:en] If that call returns [`false], calls [`setstate(ios::badbit)].
[:zh_CN] 如果该调用返回了 [`false] 则调用 [`setstate(ios::badbit)]。

[para]
[begin:example]
[:en] A flush on a [`basic_osyncstream] does not flush immediately:
[:zh_CN] 在 [`basic_osyncstream] 上的冲洗并不会立即进行：

[codeblock]
{
  osyncstream bout(cout);
  bout << "Hello," << '\n';     // [:en] no flush \
                                   [:zh_CN] 没有冲洗
  bout.emit();                  // [:en] characters transferred; [`cout] not flushed \
                                   [:zh_CN] 字符被转移；[`cout] 未冲洗
  bout << "World!" << endl;     // [:en] flush noted; [`cout] not flushed \
                                   [:zh_CN] 标记冲洗；[`cout] 未冲洗
  bout.emit();                  // [:en] characters transferred; [`cout] flushed \
                                   [:zh_CN] 字符被转移；冲洗 [`cout]
  bout << "Greetings." << '\n'; // [:en] no flush \
                                   [:zh_CN] 没有冲洗
}   // [:en] characters transferred; [`cout] not flushed \
       [:zh_CN] 字符被转移；[`cout] 未冲洗
[codeblock:end]
[end:example]

[para]
[begin:example]
[:en] The function [`emit()] can be used to handle exceptions from operations on
the underlying stream.
[:zh_CN] 函数 [`emit()] 可被用于处理来自底层流的操作发出的异常。

[codeblock]
{
  osyncstream bout(cout);
  bout << "Hello, " << "World!" << '\n';
  try {
    bout.emit();
  } catch (...) {
    // handle exception
  }
}
[codeblock:end]
[end:example]
[end:description]

[%@library get_wrapped[!basic_osyncstream]]
[%@library basic_osyncstream[!get_wrapped]]
[codeblock:declaration]
streambuf_type* get_wrapped() const noexcept;
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`sb.get_wrapped()].
[:zh_CN] [`sb.get_wrapped()]。

[para]
[begin:example]
[:en] Obtaining the wrapped stream buffer with [`get_wrapped()] allows wrapping
it again with an [`osyncstream].
[:zh_CN] 用 [`get_wrapped()] 获取包装的流缓冲区，允许将其再次以一个
[`osyncstream] 进行包装。

[:en] For example,
[:zh_CN] 例如，

[codeblock]
{
  osyncstream bout1(cout);
  bout1 << "Hello, ";
  {
    osyncstream(bout1.get_wrapped()) << "Goodbye, " << "Planet!" << '\n';
  }
  bout1 << "World!" << '\n';
}
[codeblock:end]

[:en@~] produces the [em uninterleaved] output
[:zh_CN@~] 产生[em 无交错]的输出

[codeblock]
Goodbye, Planet!
Hello, World!
[codeblock:end]
[end:example]
[end:description]
