[section#cstdio.syn
    [:en] Header [`<cstdio>] synopsis
    [:zh_CN] 头文件 [`<cstdio>] 纲要
]

[%@hdr@def cstdio]

[%@lib size_t]
[%@lib FILE]
[%@lib fpos_t]
[%@lib remove]
[%@lib rename]
[%@lib tmpfile]
[%@lib tmpnam]
[%@lib fclose]
[%@lib fflush]
[%@lib fopen]
[%@lib freopen]
[%@lib setbuf]
[%@lib setvbuf]
[%@lib fprintf]
[%@lib fscanf]
[%@lib printf]
[%@lib scanf]
[%@lib snprintf]
[%@lib sprintf]
[%@lib sscanf]
[%@lib vfprintf]
[%@lib vfscanf]
[%@lib vprintf]
[%@lib vscanf]
[%@lib vsnprintf]
[%@lib vsprintf]
[%@lib vsscanf]
[%@lib fgetc]
[%@lib fgets]
[%@lib fputc]
[%@lib fputs]
[%@lib getc]
[%@lib getchar]
[%@lib putc]
[%@lib putchar]
[%@lib puts]
[%@lib ungetc]
[%@lib fread]
[%@lib fwrite]
[%@lib fgetpos]
[%@lib fseek]
[%@lib fsetpos]
[%@lib ftell]
[%@lib rewind]
[%@lib clearerr]
[%@lib feof]
[%@lib ferror]
[%@lib perror]

[codeblock:synopsis]
namespace std {
  using size_t = [[redoc("[span:em [:en] see [#support.types.layout] [:zh_CN] 参见 [#support.types.layout]]")]];
  using FILE = [[redoc("[=seebelow]")]];
  using fpos_t = [[redoc("[=seebelow]")]];
}

#define NULL[[redoc("`:m<")]] [[redoc("[span:em [:en] see [#support.types.nullptr] [:zh_CN] 参见 [#support.types.nullptr]]")]]
#define _IOFBF[[redoc("`:m<")]] [[redoc("[=seebelow]")]]
#define _IOLBF[[redoc("`:m<")]] [[redoc("[=seebelow]")]]
#define _IONBF[[redoc("`:m<")]] [[redoc("[=seebelow]")]]
#define BUFSIZ[[redoc("`:m<")]] [[redoc("[=seebelow]")]]
#define EOF[[redoc("`:m<")]] [[redoc("[=seebelow]")]]
#define FOPEN_MAX[[redoc("`:m<")]] [[redoc("[=seebelow]")]]
#define FILENAME_MAX[[redoc("`:m<")]] [[redoc("[=seebelow]")]]
#define L_tmpnam[[redoc("`:m<")]] [[redoc("[=seebelow]")]]
#define SEEK_CUR[[redoc("`:m<")]] [[redoc("[=seebelow]")]]
#define SEEK_END[[redoc("`:m<")]] [[redoc("[=seebelow]")]]
#define SEEK_SET[[redoc("`:m<")]] [[redoc("[=seebelow]")]]
#define TMP_MAX[[redoc("`:m<")]] [[redoc("[=seebelow]")]]
#define stderr[[redoc("`:m<")]] [[redoc("[=seebelow]")]]
#define stdin[[redoc("`:m<")]] [[redoc("[=seebelow]")]]
#define stdout[[redoc("`:m<")]] [[redoc("[=seebelow]")]]

namespace std {
  int remove(const char* filename);
  int rename(const char* old_p, const char* new_p);
  FILE* tmpfile();
  char* tmpnam(char* s);
  int fclose(FILE* stream);
  int fflush(FILE* stream);
  FILE* fopen(const char* filename, const char* mode);
  FILE* freopen(const char* filename, const char* mode, FILE* stream);
  void setbuf(FILE* stream, char* buf);
  int setvbuf(FILE* stream, char* buf, int mode, size_t size);
  int fprintf(FILE* stream, const char* format, ...);
  int fscanf(FILE* stream, const char* format, ...);
  int printf(const char* format, ...);
  int scanf(const char* format, ...);
  int snprintf(char* s, size_t n, const char* format, ...);
  int sprintf(char* s, const char* format, ...);
  int sscanf(const char* s, const char* format, ...);
  int vfprintf(FILE* stream, const char* format, va_list arg);
  int vfscanf(FILE* stream, const char* format, va_list arg);
  int vprintf(const char* format, va_list arg);
  int vscanf(const char* format, va_list arg);
  int vsnprintf(char* s, size_t n, const char* format, va_list arg);
  int vsprintf(char* s, const char* format, va_list arg);
  int vsscanf(const char* s, const char* format, va_list arg);
  int fgetc(FILE* stream);
  char* fgets(char* s, int n, FILE* stream);
  int fputc(int c, FILE* stream);
  int fputs(const char* s, FILE* stream);
  int getc(FILE* stream);
  int getchar();
  int putc(int c, FILE* stream);
  int putchar(int c);
  int puts(const char* s);
  int ungetc(int c, FILE* stream);
  size_t fread(void* ptr, size_t size, size_t nmemb, FILE* stream);
  size_t fwrite(const void* ptr, size_t size, size_t nmemb, FILE* stream);
  int fgetpos(FILE* stream, fpos_t* pos);
  int fseek(FILE* stream, long int offset, int whence);
  int fsetpos(FILE* stream, const fpos_t* pos);
  long int ftell(FILE* stream);
  void rewind(FILE* stream);
  void clearerr(FILE* stream);
  int feof(FILE* stream);
  int ferror(FILE* stream);
  void perror(const char* s);
}
[codeblock:end]

[para]
[:en] The contents and meaning of the header [?libheader cstdio] are the same as
the C standard library header [?libheader stdio.h].
[:zh_CN] 头文件 [?libheader cstdio] 的内容及其含义与 C 标准程序库头文件
[?libheader stdio.h] 相同。

[para]
[:en] The return from each function call that delivers data to the host environment
to be written to a file ([?xrefc 7.21.3]) is an observable checkpoint ([#intro.abstract]).
[:zh_CN] 对于每个向宿主环境传递数据以写入文件的函数（[?xrefc 7.21.3]），从中返回
都是一个可观察检查点（[#intro.abstract]）。

[para]
[:en] Calls to the function [`tmpnam] with an argument that is a null pointer
value may introduce a data race ([#res.on.data.races]) with other calls to
[`tmpnam] with an argument that is a null pointer value.
[:zh_CN] 以空指针值作为实参调用函数 [`tmpnam]，可能导致与其他的以空指针值为实参
调用 [`tmpnam] 之间的数据竞争（[#res.on.data.races]）。

[para:xref@c] 7.21
