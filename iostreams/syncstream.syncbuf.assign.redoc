[section#syncstream.syncbuf.assign
    [:en] Assignment and swap
    [:zh_CN] 赋值和交换
]

[%@library operator=[!basic_syncbuf]]
[%@library basic_syncbuf[!operator=]]
[codeblock:declaration]
basic_syncbuf& operator=(basic_syncbuf&& rhs) noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Calls [`emit()] then move assigns from [`rhs].
[:zh_CN] 调用 [`emit()] 然后从 [`rhs] 移动赋值。

[:en] After the move assignment [`*this] has the observable state it would have
had if it had been move constructed from [`rhs] ([#syncstream.syncbuf.cons]).
[:zh_CN] 进行移动赋值之后 [`*this] 将具有如同它被从 [`rhs] 进行移动构造
（[#syncstream.syncbuf.cons]）后所具有的可观察状态。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。

[para:ensures]
[list]
[item]
[:en] [`rhs.get_wrapped() == nullptr] is [`true].
[:zh_CN] [`rhs.get_wrapped() == nullptr] 为 [`true]。
[item]
[:en] [`this->get_allocator() == rhs.get_allocator()] is [`true] when
[:zh_CN] 当

[codeblock:notation]
allocator_traits<Allocator>::propagate_on_container_move_assignment::value
[codeblock:end]

[:en@~] is [`true]; otherwise, the allocator is unchanged.
[:zh_CN@~] 为 [`true] 时 [`this->get_allocator() == rhs.get_allocator()] 为
[`true]；否则，不改变分配器。
[list:end]

[para:remarks]
[:en] This assignment operator disassociates [`rhs] from its wrapped stream
buffer, ensuring destruction of [`rhs] produces no output.
[:zh_CN] 这个赋值运算符解除 [`rhs] 与其所包装的流缓冲区的关联，保证 [`rhs] 销毁
时不会产生任何输出。
[exit:description]

[%@library swap[!basic_syncbuf]]
[%@library basic_syncbuf[!swap]]
[codeblock:declaration]
void swap(basic_syncbuf& other) noexcept;
[codeblock:end]

[enter:description]
[para:requires]
[:en] Either [`allocator_traits<Allocator>::propagate_on_container_swap::value]
is [`true] or [`this->get_allocator() == other.get_allocator()] is [`true].
[:zh_CN] 要么 [`allocator_traits<Allocator>::propagate_on_container_swap::value]
为 [`true] 要么 [`this->get_allocator() == other.get_allocator()] 为 [`true]。

[para:effects]
[:en] Exchanges the state of [`*this] and [`other].
[:zh_CN] 互换 [`*this] 和 [`other] 的状态。
[exit:description]
