[section#syncstream.osyncstream.overview
    [:en] Overview
    [:zh_CN] 概述
]

[%@library basic_osyncstream]
[codeblock:synopsis]
namespace std {
  template<class charT, class traits, class Allocator>
  class basic_osyncstream : public basic_ostream<charT, traits> {
  public:
    using char_type   = charT;
    using int_type    = typename traits::int_type;
    using pos_type    = typename traits::pos_type;
    using off_type    = typename traits::off_type;
    using traits_type = traits;

    using allocator_type = Allocator;
    using streambuf_type = basic_streambuf<charT, traits>;
    using syncbuf_type   = basic_syncbuf<charT, traits, Allocator>;

    // [:en] [#syncstream.osyncstream.cons], construction and destruction
    // [:zh_CN] [#syncstream.osyncstream.cons]，构造和销毁
    basic_osyncstream(streambuf_type*, const Allocator&);
    explicit basic_osyncstream(streambuf_type* obuf)
      : basic_osyncstream(obuf, Allocator()) {}
    basic_osyncstream(basic_ostream<charT, traits>& os, const Allocator& allocator)
      : basic_osyncstream(os.rdbuf(), allocator) {}
    explicit basic_osyncstream(basic_ostream<charT, traits>& os)
      : basic_osyncstream(os, Allocator()) {}
    basic_osyncstream(basic_osyncstream&&) noexcept;
    ~basic_osyncstream();

    // [:en] [#syncstream.osyncstream.assign], assignment
    // [:zh_CN] [#syncstream.osyncstream.assign]，赋值
    basic_osyncstream& operator=(basic_osyncstream&&) noexcept;

    // [:en] [#syncstream.osyncstream.members], member functions
    // [:zh_CN] [#syncstream.osyncstream.members]，成员函数
    void emit();
    streambuf_type* get_wrapped() const noexcept;
    syncbuf_type* rdbuf() const noexcept { return &sb ; }

  private:
    syncbuf_type sb;    // [=Expos]
  };
}
[codeblock:end]

[para]
[:en] [`Allocator] shall satisfy the [*Cpp17Allocator] requirements
([#utilities.allocator.requirements]).
[:zh_CN] [`Allocator] 应当满足 [*Cpp17Allocator] 的规定
（[#utilities.allocator.requirements]）。

[para]
[enter:example]
[:en] A named variable can be used within a block statement for streaming.
[:zh_CN] 可以在块语句中使用具名的变量来进行流操作。

[codeblock]
{
  osyncstream bout(cout);
  bout << "Hello, ";
  bout << "World!";
  bout << endl; // [:en] flush is noted
                // [|:zh_CN] 标记冲洗
  bout << "and more!\n";
}   // [:en] characters are transferred and [`cout] is flushed
    // [|:zh_CN] 转移字符并冲洗 [`cout]
[codeblock:end]
[exit:example]

[para]
[enter:example]
[:en] A temporary object can be used for streaming within a single statement.
[:zh_CN] 可以在单个语句中使用临时对象来进行流操作。

[codeblock]
osyncstream(cout) << "Hello, " << "World!" << '\n';
[codeblock:end]

[:en] In this example, [`cout] is not flushed.
[:zh_CN] 本例中，[`cout] 未被冲洗。
[exit:example]
