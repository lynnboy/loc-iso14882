[section#ispanstream.general
    [:en] General
    [:zh_CN] 概述
]

[%@lib basic_ispanstream]
[codeblock:synopsis]
namespace std {
  template<class charT, class traits = char_traits<charT>>
  class basic_ispanstream
    : public basic_istream<charT, traits> {
  public:
    using char_type   = charT;
    using int_type    = typename traits::int_type;
    using pos_type    = typename traits::pos_type;
    using off_type    = typename traits::off_type;
    using traits_type = traits;

    // [:en] [#ispanstream.ctor], constructors \
    [:zh_CN] [#ispanstream.ctor]，构造函数
    explicit basic_ispanstream(std::span<charT> s,
                               ios_base::openmode which = ios_base::in);
    basic_ispanstream(const basic_ispanstream&) = delete;
    basic_ispanstream(basic_ispanstream&& rhs);
    template<class ROS> explicit basic_ispanstream(ROS&& s);

    basic_ispanstream& operator=(const basic_ispanstream&) = delete;
    basic_ispanstream& operator=(basic_ispanstream&& rhs);

    // [:en] [#ispanstream.swap], swap \
    [:zh_CN] [#ispanstream.swap]，交换
    void swap(basic_ispanstream& rhs);

    // [:en] [#ispanstream.members], members \
    [:zh_CN] [#ispanstream.members]，成员
    basic_spanbuf<charT, traits>* rdbuf() const noexcept;

    std::span<const charT> span() const noexcept;
    void span(std::span<charT> s) noexcept;
    template<class ROS> void span(ROS&& s) noexcept;

  private:
    basic_spanbuf<charT, traits> sb;    // [=expos]
  };

  template<class charT, class traits>
    void swap(basic_ispanstream<charT, traits>& x, basic_ispanstream<charT, traits>& y);
}
[codeblock:end]

[para]
[begin:note]
[:en] Constructing an [`ispanstream] from a [~string-literal] includes the
termination character [`'\0'] in the underlying [`spanbuf].
[:zh_CN] 从[~字符串字面量]构造 [`ispanstream] 时包括底层 [`spanbuf] 中的终结字符
[`'\0']。
[end:note]
