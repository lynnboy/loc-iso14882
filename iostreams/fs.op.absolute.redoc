[section#fs.op.absolute
    [:en] Absolute
    [:zh_CN] 绝对路径
]

[%@lib absolute]
[codeblock:declaration]
path filesystem::absolute(const path& p);
path filesystem::absolute(const path& p, error_code& ec);
[codeblock:end]

[div:description]
[para:effects]
[:en] Composes an absolute path referencing the same file system location as
[`p] according to the operating system ([#fs.conform.os]).
[:zh_CN] 构成一个绝对路径，与 [`p] 根据操作系统涉指同一个文件系统位置
（[#fs.conform.os]）。

[para:returns]
[:en] The composed path.
[:zh_CN] 所构成的路径。

[:en] The signature with argument [`ec] returns [`path()] if an error occurs.
[:zh_CN] 当发生错误时，带有 [`ec] 实参的签名返回 [`path()]。

[para]
[begin:note]
[:en] For the returned path, [`rp], [`rp.is_absolute()] is [`true] unless an
error occurs.
[:zh_CN] 对于其所返回的路径 [`rp]，除非发生错误，否则 [`rp.is_absolute()] 均为
[`true]。
[end:note]

[para:throws]
[:en] As specified in [#fs.err.report].
[:zh_CN] 如 [#fs.err.report] 所述。

[para]
[begin:note]
[:en] To resolve symlinks or perform other sanitization that can involve queries
to secondary storage, such as hard disks, consider [`canonical]
([#fs.op.canonical]).
[:zh_CN] 为解析符号连接，或者实施其他可能涉及对如硬盘等附属存储进行查询的防卫
操作，考虑使用 [`canonical]（[#fs.op.canonical]）。
[end:note]

[para]
[begin:note]
[:en] Implementations are strongly encouraged to not query secondary storage,
and not consider [`!exists(p)] an error.
[:zh_CN] 强烈建议各实现避免对附属存储进行查询，且不将 [`!exists(p)] 视作错误。
[end:note]

[para]
[begin:example]
[:en] For POSIX-based operating systems, [`absolute(p)] is simply
[`current_path()/p].
[:zh_CN] 对于基于 POSIX 的操作系统，[`absolute(p)] 只不过是 [`current_path()/p]。

[:en] For Windows-based operating systems, [`absolute] might have the same
semantics as [`GetFullPathNameW].
[:zh_CN] 对于基于 Windows 的操作系统，[`absolute] 可能具有与 [`GetFullPathNameW]
相同的语义。
[end:example]
[div:end]
