[section#stringbuf.general
    [:en] General
    [:zh_CN] 概述
]

[%@lib basic_stringbuf]
[codeblock:synopsis]
namespace std {
  template<class charT, class traits = char_traits<charT>,
           class Allocator = allocator<charT>>
  class basic_stringbuf : public basic_streambuf<charT, traits> {
  public:
    using char_type      = charT;
    using int_type       = typename traits::int_type;
    using pos_type       = typename traits::pos_type;
    using off_type       = typename traits::off_type;
    using traits_type    = traits;
    using allocator_type = Allocator;

    // [:en] [#stringbuf.cons], constructors \
    [:zh_CN] [#stringbuf.cons]，构造函数
    basic_stringbuf() : basic_stringbuf(ios_base::in | ios_base::out) {}
    explicit basic_stringbuf(ios_base::openmode which);
    explicit basic_stringbuf(
      const basic_string<charT, traits, Allocator>& s,
      ios_base::openmode which = ios_base::in | ios_base::out);
    explicit basic_stringbuf(const Allocator& a)
      : basic_stringbuf(ios_base::in | ios_base::out, a) {}
    basic_stringbuf(ios_base::openmode which, const Allocator& a);
    explicit basic_stringbuf(
      basic_string<charT, traits, Allocator>&& s,
      ios_base::openmode which = ios_base::in | ios_base::out);
    template<class SAlloc>
      basic_stringbuf(
        const basic_string<charT, traits, SAlloc>& s, const Allocator& a)
        : basic_stringbuf(s, ios_base::in | ios_base::out, a) {}
    template<class SAlloc>
      basic_stringbuf(
        const basic_string<charT, traits, SAlloc>& s,
        ios_base::openmode which, const Allocator& a);
    template<class SAlloc>
      explicit basic_stringbuf(
        const basic_string<charT, traits, SAlloc>& s,
        ios_base::openmode which = ios_base::in | ios_base::out);
    template<class T>
      explicit basic_stringbuf(const T& t,
                               ios_base::openmode which = ios_base::in | ios_base::out);
    template<class T>
      basic_stringbuf(const T& t, const Allocator& a);
    template<class T>
      basic_stringbuf(const T& t, ios_base::openmode which, const Allocator& a);
    basic_stringbuf(const basic_stringbuf&) = delete;
    basic_stringbuf(basic_stringbuf&& rhs);
    basic_stringbuf(basic_stringbuf&& rhs, const Allocator& a);

    // [:en] [#stringbuf.assign], assignment and swap \
    [:zh_CN] [#stringbuf.assign]，赋值与交换
    basic_stringbuf& operator=(const basic_stringbuf&) = delete;
    basic_stringbuf& operator=(basic_stringbuf&& rhs);
    void swap(basic_stringbuf& rhs) noexcept([[redoc("[=seebelow]")]]);

    // [:en] [#stringbuf.members], getters and setters \
    [:zh_CN] [#stringbuf.members]，获取函数与设值函数
    allocator_type get_allocator() const noexcept;

    basic_string<charT, traits, Allocator> str() const &;
    template<class SAlloc>
      basic_string<charT,traits,SAlloc> str(const SAlloc& sa) const;
    basic_string<charT, traits, Allocator> str() &&;
    basic_string_view<charT, traits> view() const noexcept;
    void str(const basic_string<charT, traits, Allocator>& s);
    template<class SAlloc>
      void str(const basic_string<charT, traits, SAlloc>& s);
    void str(basic_string<charT, traits, Allocator>&& s);
    template<class T>
      void str(const T& t);

  protected:
    // [:en] [#stringbuf.virtuals], overridden virtual functions \
    [:zh_CN] [#stringbuf.virtuals]，覆盖的虚函数
    int_type underflow() override;
    int_type pbackfail(int_type c = traits::eof()) override;
    int_type overflow (int_type c = traits::eof()) override;
    basic_streambuf<charT, traits>* setbuf(charT*, streamsize) override;

    pos_type seekoff(off_type off, ios_base::seekdir way,
                     ios_base::openmode which
                      = ios_base::in | ios_base::out) override;
    pos_type seekpos(pos_type sp,
                     ios_base::openmode which
                      = ios_base::in | ios_base::out) override;

  private:
    ios_base::openmode [[redoc("*>")]]mode;                        // [=expos]
    basic_string<charT, traits, Allocator> [[redoc("*>")]]buf;     // [=expos]
    void [[redoc("*>")]]init-buf-ptrs();                           // [=expos]
  };
}
[codeblock:end]

[para]
[:en] The class [`basic_stringbuf] is derived from [`basic_streambuf]
to associate possibly the input sequence and possibly the output sequence with
a sequence of arbitrary [+:% characters].
[:zh_CN] 类 [`basic_stringbuf] 派生于 [`basic_streambuf]，并将可能的输入序列和
可能的输出序列与一个任意[+:% 字符]序列关联起来。

[:en] The sequence can be initialized from, or made available as, an object of
class [`basic_string].
[:zh_CN] 这个序列可以由类 [`basic_string] 的对象来初始化，或者作为类
[`basic_string] 的对象提供出来。

[para]
[:en] For the sake of exposition, the maintained data and internal pointer
initialization is presented here as:
[:zh_CN] 为阐释目的，此处将其所维护的数据和内部指针初始化表示为：

[list]
[item]
[:en] [`ios_base::openmode [*mode]], has [`in] set if the input sequence can be
read, and [`out] set if the output sequence can be written.
[:zh_CN] [`ios_base::openmode [*mode]]，当可以读取输入序列时其中设置 [`in]，当可以
写入输出序列时其中设置 [`out]。

[item]
[:en] [`basic_string<charT, traits, Allocator> [*buf]] contains the underlying
character sequence.
[:zh_CN] [`basic_string<charT, traits, Allocator> [*buf]] 包含底层字符序列。

[item]
[:en] [`[*init-buf-ptrs]()] sets the base class[='] get area ([#streambuf.get.area])
and put area ([#streambuf.put.area]) pointers after initializing, moving from,
or assigning to [`buf] accordingly.
[:zh_CN] 在初始化，被移动，或向 [`buf] 赋值之后，[`[*init-buf-ptrs]()] 适当地设置
基类的获取区（[#streambuf.get.area]）和放置区（[#streambuf.put.area]）指针。
[list:end]
