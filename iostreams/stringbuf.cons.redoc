[section#stringbuf.cons
    [:en] Constructors
    [:zh_CN] 构造函数
]

[%@library basic_stringbuf[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
explicit basic_stringbuf(ios_base::openmode which);
[codeblock:end]

[begin:description]
[para:effects]
[:en] Initializes the base class with [`basic_streambuf()] ([#streambuf.cons]),
and [`mode] with [`which].
[:zh_CN] 以 [`basic_streambuf()] 初始化其基类（[#streambuf.cons]），并以
[`which] 初始化 [`mode]。

[:en] It is [%@impldef whether sequence pointers are initialized to null
pointers] implementation-defined whether the sequence pointers ([`eback()],
[`gptr()], [`egptr()], [`pbase()], [`pptr()], [`epptr()]) are initialized to
null pointers.
[:zh_CN] 各个序列指针（[`eback()]，[`gptr()]，[`egptr()]，[`pbase()]，[`pptr()]，
[`epptr()]）是否被初始化为空指针是[%@impldef 序列指针是否初始化为空指针]由实现
定义的。

[para:ensures]
[:en] [`str().empty()] is [`true].
[:zh_CN] [`str().empty()] 为 [`true]。
[end:description]

[%@library basic_stringbuf[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
explicit basic_stringbuf(
  const basic_string<charT, traits, Allocator>& s,
  ios_base::openmode which = ios_base::in | ios_base::out);
[codeblock:end]

[begin:description]
[para:effects]
[:en] Initializes the base class with [`basic_streambuf()] ([#streambuf.cons]),
[`mode] with [`which], and [`buf] with [`s], then calls [`init_buf_ptrs()].
[:zh_CN] 以 [`basic_streambuf()] 初始化其基类（[#streambuf.cons]），以 [`which]
初始化 [`mode]，并以 [`s] 初始化 [`buf]，然后调用 [`init_buf_ptrs()]。
[end:description]

[%@library basic_stringbuf[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
basic_stringbuf(ios_base::openmode which, const Allocator &a);
[codeblock:end]

[begin:description]
[para:effects]
[:en] Initializes the base class with [`basic_streambuf()] ([#streambuf.cons]),
[`mode] with [`which], and [`buf] with [`a], then calls [`init_buf_ptrs()].
[:zh_CN] 以 [`basic_streambuf()] 初始化其基类（[#streambuf.cons]），以 [`which]
初始化 [`mode]，并以 [`a] 初始化 [`buf]，然后调用 [`init_buf_ptrs()]。

[para:ensures]
[:en] [`str().empty()] is [`true].
[:zh_CN] [`str().empty()] 为 [`true]。
[end:description]

[%@library basic_stringbuf[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
explicit basic_stringbuf(
  basic_string<charT, traits, Allocator>&& s,
  ios_base::openmode which = ios_base::in | ios_base::out);
[codeblock:end]

[begin:description]
[para:effects]
[:en] Initializes the base class with [`basic_streambuf()] ([#streambuf.cons]),
[`mode] with [`which], and [`buf] with [`std::move(s)], then calls
[`init_buf_ptrs()].
[:zh_CN] 以 [`basic_streambuf()] 初始化其基类（[#streambuf.cons]），以 [`which]
初始化 [`mode]，并以 [`std::move(s)] 初始化 [`buf]，然后调用 [`init_buf_ptrs()]。
[end:description]

[%@library basic_stringbuf[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
template<class SAlloc>
  basic_stringbuf(
    const basic_string<charT, traits, SAlloc>& s,
    ios_base::openmode which, const Allocator &a);
[codeblock:end]

[begin:description]
[para:effects]
[:en] Initializes the base class with [`basic_streambuf()] ([#streambuf.cons]),
[`mode] with [`which], and [`buf] with [`{s,a}], then calls [`init_buf_ptrs()].
[:zh_CN] 以 [`basic_streambuf()] 初始化其基类（[#streambuf.cons]），以 [`which]
初始化 [`mode]，并以 [`{s,a}] 初始化 [`buf]，然后调用 [`init_buf_ptrs()]。
[end:description]

[%@library basic_stringbuf[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
template<class SAlloc>
  explicit basic_stringbuf(
    const basic_string<charT, traits, SAlloc>& s,
    ios_base::openmode which = ios_base::in | ios_base::out);
[codeblock:end]

[begin:description]
[para:constraints]
[:en] [`is_same_v<SAlloc,Allocator>] is [`false].
[:zh_CN] [`is_same_v<SAlloc,Allocator>] 为 [`false]。

[para:effects]
[:en] Initializes the base class with [`basic_streambuf()] ([#streambuf.cons]),
[`mode] with [`which], and [`buf] with [`s], then calls [`init_buf_ptrs()].
[:zh_CN] 以 [`basic_streambuf()] 初始化其基类（[#streambuf.cons]），以 [`which]
初始化 [`mode]，并以 [`s] 初始化 [`buf]，然后调用 [`init_buf_ptrs()]。
[end:description]

[%@library basic_stringbuf[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
basic_stringbuf(basic_stringbuf&& rhs);
basic_stringbuf(basic_stringbuf&& rhs, const Allocator& a);
[codeblock:end]

[begin:description]
[para:effects]
[:en] Copy constructs the base class from [`rhs] and initializes [`mode] with
[`rhs.mode].
[:zh_CN] 从 [`rhs] 复制构造基类，并以 [`rhs.mode] 初始化 [`mode]。

[:en] In the first form [`buf] is initialized from [`std::move(rhs).str()].
[:zh_CN] 第一种形式中 [`buf] 以 [`std::move(rhs).str()] 初始化。

[:en] In the second form [`buf] is initialized from [`{std::move(rhs).str(), a}].
[:zh_CN] 第二种形式中 [`buf] 以 [`{std::move(rhs).str(), a}] 初始化。

[:en] It is [%@impldef whether sequence pointers are copied by
[`basic_stringbuf] move constructor] implementation-defined whether the sequence
pointers in [`*this] ([`eback()], [`gptr()], [`egptr()], [`pbase()], [`pptr()],
[`epptr()]) obtain the values which [`rhs] had.
[:zh_CN] [`*this] 中的各序列指针（[`eback()]、[`gptr()]、[`egptr()]、[`pbase()]、
[`pptr()] 和 [`epptr()]）是否获得 [`rhs] 所具有的值是
[%@impldef [`basic_stringbuf] 的移动构造函数是否复制各序列指针]由实现定义的。

[para:ensures]
[:en] Let [`rhs_p] refer to the state of [`rhs] just prior to this construction
and let [`rhs_a] refer to the state of [`rhs] just after this construction.
[:zh_CN] 令 [`rhs_p] 代表 [`rhs] 在进行这次构造之前的状态，并令 [`rhs_a] 代表
[`rhs] 这次构造之后的状态。

[list]
[item] [`str() == rhs_p.str()]
[item] [`gptr() - eback() == rhs_p.gptr() - rhs_p.eback()]
[item] [`egptr() - eback() == rhs_p.egptr() - rhs_p.eback()]
[item] [`pptr() - pbase() == rhs_p.pptr() - rhs_p.pbase()]
[item] [`epptr() - pbase() == rhs_p.epptr() - rhs_p.pbase()]
[item] [`if (eback()) eback() != rhs_a.eback()]
[item] [`if (gptr()) gptr() != rhs_a.gptr()]
[item] [`if (egptr()) egptr() != rhs_a.egptr()]
[item] [`if (pbase()) pbase() != rhs_a.pbase()]
[item] [`if (pptr()) pptr() != rhs_a.pptr()]
[item] [`if (epptr()) epptr() != rhs_a.epptr()]
[item] [`getloc() == rhs_p.getloc()]
[item]
[:en] [`rhs] is empty but usable, as if [`std::move(rhs).str()] was called.
[:zh_CN] [`rhs] 为空但可用，如同调用了 [`std::move(rhs).str()] 一样。
[list:end]
[end:description]
