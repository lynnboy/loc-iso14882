[section#fs.path.decompose
    [:en] Decomposition
    [:zh_CN] 分解
]

[%@lib@member root_name[!path]]
[codeblock:declaration]
path root_name() const;
[codeblock:end]

[div:description]
[para:returns]
[:en] [~root-name], if the pathname in the generic format includes [~root-name],
otherwise [`path()].
[:zh_CN] 若通用格式的路径名中包含[~根名]则返回[~根名]，否则返回 [`path()]。
[div:end]

[%@lib@member root_directory[!path]]
[codeblock:declaration]
path root_directory() const;
[codeblock:end]

[div:description]
[para:returns]
[:en] [~root-directory], if the pathname in the generic format includes
[~root-directory], otherwise [`path()].
[:zh_CN] 若通用格式的路径名中包含[~根目录]则返回[~根目录]，否则返回 [`path()]。
[div:end]

[%@lib@member root_path[!path]]
[codeblock:declaration]
path root_path() const;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`root_name() / root_directory()].
[:zh_CN] [`root_name() / root_directory()]。
[div:end]

[%@lib@member relative_path[!path]]
[codeblock:declaration]
path relative_path() const;
[codeblock:end]

[div:description]
[para:returns]
[:en] A [`path] composed from the pathname in the generic format, if [`empty()]
is [`false], beginning with the first [~filename] after [`root_path()].
[:zh_CN] 如果 [`!empty()] 为 [`false]，则为从通用格式的路径名中，从
[`root_path()] 之后的第一个[~文件名]开始构成的一个 [`path]。

[:en] Otherwise, [`path()].
[:zh_CN] 否则，返回 [`path()]。
[div:end]

[%@lib@member parent_path[!path]]
[codeblock:declaration]
path parent_path() const;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`*this] if [`has_relative_path()] is [`false], otherwise a path whose
generic format pathname is the longest prefix of the generic format pathname of
[`*this] that produces one fewer element in its iteration.
[:zh_CN] 如果 [`has_relative_path()] 为 [`false]，则返回 [`*this]，否则返回一个
[`path]，其通用格式路径名为，[`*this] 的通用格式路径名中，进行迭代时比其自身少
一个元素的最长前缀。
[div:end]

[%@lib@member filename[!path]]
[codeblock:declaration]
path filename() const;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`relative_path().empty() ? path() : *--end()].
[:zh_CN] [`relative_path().empty() ? path() : *--end()]。

[para]
[begin:example]
[codeblock]
path("/foo/bar.txt").filename();        // [:en] yields [`"bar.txt"] \
                                        [:zh_CN] 产生 [`"bar.txt"]
path("/foo/bar").filename();            // [:en] yields [`"bar"] \
                                        [:zh_CN] 产生 [`"bar"]
path("/foo/bar/").filename();           // [:en] yields [`""] \
                                        [:zh_CN] 产生 [`""]
path("/").filename();                   // [:en] yields [`""] \
                                        [:zh_CN] 产生 [`""]
path("//host").filename();              // [:en] yields [`""] \
                                        [:zh_CN] 产生 [`""]
path(".").filename();                   // [:en] yields [`"."] \
                                        [:zh_CN] 产生 [`"."]
path("..").filename();                  // [:en] yields [`".."] \
                                        [:zh_CN] 产生 [`".."]
[codeblock:end]
[end:example]
[div:end]

[%@lib@member stem[!path]]
[codeblock:declaration]
path stem() const;
[codeblock:end]

[div:description]
[para:returns]
[:en] Let [`f] be the generic format pathname of [`filename()].
[:zh_CN] 令 [`f] 为 [`filename()] 的通用格式路径名。

[:en] Returns a path whose pathname in the generic format is
[:zh_CN] 返回通用格式路径名为以下之一的 [`path]：

[list]
[item]
[:en] [`f], if it contains no periods other than a leading period or consists
solely of one or two periods;
[:zh_CN] 如果 [`f] 中除了开头的句点不包含其他句点，或者仅由一个或两个句点构成，
则为 [`f]；
[item]
[:en] otherwise, the prefix of [`f] ending before its last period.
[:zh_CN] 否则，为 [`f] 的最后一个句点之前的前缀。
[list:end]

[para]
[begin:example]
[codeblock]
std::cout << path("/foo/bar.txt").stem();       // [:en] outputs [`"bar"] \
                                                [:zh_CN] 输出 [`"bar"]
path p = "foo.bar.baz.tar";
for (; !p.extension().empty(); p = p.stem())
  std::cout << p.extension() << '\n';
  // [:en] outputs: [`.tar] \
  [:zh_CN] 输出：[`.tar]
  //          [`.baz]
  //          [`.bar]
[codeblock:end]
[end:example]
[div:end]

[%@lib@member extension[!path]]
[codeblock:declaration]
path extension() const;
[codeblock:end]

[div:description]
[para:returns]
[:en] a path whose pathname in the generic format is the suffix of [`filename()]
not included in [`stem()].
[:zh_CN] 一个 [`path]，其通用格式的路径为 [`filename()] 中不包括在 [`stem()] 中
的前缀。

[para]
[begin:example]
[codeblock]
path("/foo/bar.txt").extension();       // [:en] yields [`".txt"] and [`stem()] is [`"bar"] \
                                        [:zh_CN] 产生 [`".txt"] 且 [`stem()] 为 [`"bar"]
path("/foo/bar").extension();           // [:en] yields [`""] and [`stem()] is [`"bar"] \
                                        [:zh_CN] 产生 [`""] 且 [`stem()] 为 [`"bar"]
path("/foo/.profile").extension();      // [:en] yields [`""] and [`stem()] is [`".profile"] \
                                        [:zh_CN] 产生 [`""] 且 [`stem()] 为 [`".profile"]
path(".bar").extension();               // [:en] yields [`""] and [`stem()] is [`".bar"] \
                                        [:zh_CN] 产生 [`""] 且 [`stem()] 为 [`".bar"]
path("..bar").extension();              // [:en] yields [`".bar"] and [`stem()] is [`"."] \
                                        [:zh_CN] 产生 [`".bar"] 且 [`stem()] 为 [`"."]
[codeblock:end]
[end:example]

[para]
[begin:note]
[:en] The period is included in the return value so that it is possible to
distinguish between no extension and an empty extension.
[:zh_CN] 将句点包含到返回值中，这样做使得可以在无扩展名和空的扩展名之间加以区分。
[end:note]

[para]
[begin:note]
[:en] On non-POSIX operating systems, for a path [`p], it is possible that
[`p.stem() + p.extension() == p.filename()] is [`false], even though the generic
format pathnames are the same.
[:zh_CN] 在非 POSIX 操作系统中，对于路径 [`p] 来说，可能
[`p.stem() + p.extension() == p.filename()] 为 [`false]，即便二者的通用格式
路径名相同。
[end:note]
[div:end]
