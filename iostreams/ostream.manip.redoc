[section#ostream.manip
    [:en] Standard manipulators
    [:zh_CN] 标准操作符
]

[para]
[:en] Each instantiation of any of the function templates specified in this
subclause is a designated addressable function ([#namespace.std]).
[:zh_CN] 本子条款中所指定的各函数模板的每个实例都是指派为可取得地址的函数
（[#namespace.std]）。

[%@lib endl]
[codeblock:declaration]
template<class charT, class traits>
  basic_ostream<charT, traits>& endl(basic_ostream<charT, traits>& os);
[codeblock:end]

[div:description]
[para:effects]
[:en] Calls [`os.put(os.widen('\n'))], then [`os.flush()].
[:zh_CN] 调用 [`os.put(os.widen('\n'))]，然后调用 [`os.flush()]。

[para:returns]
[:en] [`os].
[:zh_CN] [`os]。
[div:end]

[%@lib ends]
[codeblock:declaration]
template<class charT, class traits>
  basic_ostream<charT, traits>& ends(basic_ostream<charT, traits>& os);
[codeblock:end]

[div:description]
[para:effects]
[:en] Inserts a null character into the output sequence: calls [`os.put(charT())].
[:zh_CN] 向输出序列中插入一个空字符：调用 [`os.put(charT())]。

[para:returns]
[:en] [`os].
[:zh_CN] [`os]。
[div:end]

[%@lib flush]
[codeblock:declaration]
template<class charT, class traits>
  basic_ostream<charT, traits>& flush(basic_ostream<charT, traits>& os);
[codeblock:end]

[div:description]
[para:effects]
[:en] Calls [`os.flush()].
[:zh_CN] 调用 [`os.flush()]。

[para:returns]
[:en] [`os].
[:zh_CN] [`os]。
[div:end]

[%@lib emit_on_flush]
[codeblock:declaration]
template<class charT, class traits>
  basic_ostream<charT, traits>& emit_on_flush(basic_ostream<charT, traits>& os);
[codeblock:end]

[div:description]
[para:effects]
[:en] If [`os.rdbuf()] is a [`basic_syncbuf<charT, traits, Allocator>*], called
[`buf] for the purpose of exposition, calls [`buf->set_emit_on_sync(true)].
[:zh_CN] 如果 [`os.rdbuf()] 是一个 [`basic_syncbuf<charT, traits, Allocator>*]，
为阐释目的称其为 [`buf]，则调用 [`buf->set_emit_on_sync(true)]。

[:en] Otherwise this manipulator has no effect.
[:zh_CN] 否则这个操作符没有效果。

[begin:note]
[:en] To work around the issue that the [`Allocator] template argument cannot be
deduced, implementations can introduce an intermediate base class to
[`basic_syncbuf] that manages its [`emit_on_sync] flag.
[:zh_CN] 为了处理模板实参 [`Allocator] 无法被推断的问题，各实现可以为
[`basic_syncbuf] 引入一个中间基类以管理其 [`emit_on_sync] 标记。
[end:note]

[para:returns]
[:en] [`os].
[:zh_CN] [`os]。
[div:end]

[%@lib noemit_on_flush]
[codeblock:declaration]
template<class charT, class traits>
  basic_ostream<charT, traits>& noemit_on_flush(basic_ostream<charT, traits>& os);
[codeblock:end]

[div:description]
[para:effects]
[:en] If [`os.rdbuf()] is a [`basic_syncbuf<charT, traits, Allocator>*], called
[`buf] for the purpose of exposition, calls [`buf->set_emit_on_sync(false)].
[:zh_CN] 如果 [`os.rdbuf()] 是一个 [`basic_syncbuf<charT, traits, Allocator>*]，
为阐释目的称其为 [`buf]，则调用 [`buf->set_emit_on_sync(false)]。

[:en] Otherwise this manipulator has no effect.
[:zh_CN] 否则这个操作符没有效果。

[para:returns]
[:en] [`os].
[:zh_CN] [`os]。
[div:end]

[%@lib flush_emit]
[codeblock:declaration]
template<class charT, class traits>
  basic_ostream<charT, traits>& flush_emit(basic_ostream<charT, traits>& os);
[codeblock:end]

[div:description]
[para:effects]
[:en] Calls [`os.flush()].
[:zh_CN] 调用 [`os.flush()]。

[:en] Then, if [`os.rdbuf()] is a [`basic_syncbuf<charT, traits, Allocator>*],
called [`buf] for the purpose of exposition, calls [`buf->emit()].
[:zh_CN] 然后，如果 [`os.rdbuf()]
是一个 [`basic_syncbuf<charT, traits, Allocator>*]，为阐释目的称其为 [`buf]，则
调用 [`buf->emit()]。

[para:returns]
[:en] [`os].
[:zh_CN] [`os]。
[div:end]
