[section#istream.unformatted
    [:en] Unformatted input functions
    [:zh_CN] 无格式输入函数
]

[para]
[:en] Each unformatted input function begins execution by constructing an object
of class [`sentry] with the default argument [`noskipws] (second) argument
[`true].
[:zh_CN] 每个无格式输入函数，都以 [`true] 作为 [`noskipws]（第二个）实参构造
一个类 [`sentry] 的对象开始其执行。

[:en] If the [`sentry] object returns [`true], when converted to a value of type
[`bool], the function endeavors to obtain the requested input.
[:zh_CN] 如果该 [`sentry] 对象当将其转换为 [`bool] 类型的值时返回 [`true]，则
该函数尽力获取所请求的输入。

[:en] Otherwise, if the sentry constructor exits by throwing an exception or if
the sentry object returns [`false], when converted to a value of type [`bool],
the function returns without attempting to obtain any input.
[:zh_CN] 否则，如果 [`sentry] 的构造函数以抛出异常退出，或者当转换为 [`bool]
类型时返回 [`false]，则该函数将不获取任何输入而返回。

[:en] In either case the number of extracted characters is set to 0; unformatted
input functions taking a character array of nonzero size as an argument shall
also store a null character (using [`charT()]) in the first location of the
array.
[:zh_CN] 各种情况下，其所抽取的字符数都设为 0；接受一个非零大小字符数组作为实参
的无格式输入函数，还应当在该数组的首个位置中存储一个空字符（使用 [`charT()]）。

[:en] If an exception is thrown during input then [`ios::badbit] is turned on
[#:note#fn:$section.1] in [`*this][=']s error state.
[:zh_CN] 如果输入过程中抛出了异常，则在 [`*this] 的错误状态中打开 [`ios::badbit]
[#:note#fn:$section.1]。

[note:foot#fn:$section.1]
[:en] This is done without causing an [`ios::failure] to be thrown.
[:zh_CN] 这样做不会导致抛出 [`ios::failure]。
[note:end]

[:en] (Exceptions thrown from [`basic_ios<>::clear()] are not caught or
rethrown.)
[:zh_CN] （从 [`basic_ios<>::clear()] 中抛出的异常不进行捕获或重新抛出。）

[:en] If [`(exceptions()&badbit) != 0] then the exception is rethrown.
[:zh_CN] 如果 [`(exceptions()&badbit) != 0] 则重新抛出该异常。

[:en] It also counts the number of characters extracted.
[:zh_CN] 它还要对所抽取的字符数进行计数。

[:en] If no exception has been thrown it ends by storing the count in a member
object and returning the value specified.
[:zh_CN] 如果没有抛出异常，它最后将该计数值存储到某个成员对象中，并返回其所指定
的值。

[:en] In any event the [`sentry] object is destroyed before leaving the
unformatted input function.
[:zh_CN] 无论何种情况，都要在离开这个无格式输入函数之前销毁 [`sentry] 对象。

[%@library gcount[!basic_istream]]
[%@library basic_istream[!gcount]]
[codeblock:declaration]
streamsize gcount() const;
[codeblock:end]

[enter:description]
[para:effects]
[:en] None.
[:zh_CN] 无。

[:en] This member function does not behave as an unformatted input function
(as described above).
[:zh_CN] 这个成员函数的行为并不符合无格式输入函数（如上所述）。

[para:returns]
[:en] The number of characters extracted by the last unformatted input member
function called for the object.
[:zh_CN] 最近一次在改对象上调用的无格式输入成员函数所抽取的字符数。
[exit:description]

[%@library get[!basic_istream]]
[%@library basic_istream[!get]]
[codeblock:declaration]
int_type get();
[codeblock:end]

[enter:description]
[para:effects]
[:en] Behaves as an unformatted input function (as described above).
[:zh_CN] 行为符合无格式输入函数（如上所述）。

[:en] After constructing a sentry object, extracts a character [`c], if one is
available.
[:zh_CN] 构造一个 [`sentry] 对象之后，如果有可用的字符则抽取一个字符 [`c]。

[:en] Otherwise, the function calls [`setstate(failbit)], which may throw
[`ios_base::failure] ([#iostate.flags]),
[:zh_CN] 否则，该函数调用 [`setstate(failbit)]，这可能会抛出
[`ios_base::failure]（[#iostate.flags]）。

[para:returns]
[:en] [`c] if available, otherwise [`traits::eof()].
[:zh_CN] 如果可用则为 [`c]，否则为 [`traits::eof()]。
[exit:description]

[%@library get[!basic_istream]]
[%@library basic_istream[!get]]
[codeblock:declaration]
basic_istream<charT, traits>& get(char_type& c);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Behaves as an unformatted input function (as described above).
[:zh_CN] 行为符合无格式输入函数（如上所述）。

[:en] After constructing a sentry object, extracts a character, if one is
available, and assigns it to [`c].[#:note#fn:$secton.2]
[:zh_CN] 构造一个 [`sentry] 对象之后，如果有可用的字符则抽取一个字符，并将它赋值
给 [`c]。[#:note#fn:$secton.2]

[note:foot#fn:$section.2]
[:en] Note that this function is not overloaded on types [`signed char] and
[`unsigned char].
[:zh_CN] 注意这个函数并未针对 [`signed char] 和 [`unsigned char] 进行重载。
[note:end]

[:en] Otherwise, the function calls [`setstate(failbit)] (which may throw
[`ios_base::failure] ([#iostate.flags])).
[:zh_CN] 否则，该函数调用 [`setstate(failbit)]，这可能会抛出
[`ios_base::failure]（[#iostate.flags]）。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[exit:description]

[%@library get[!basic_istream]]
[%@library basic_istream[!get]]
[codeblock:declaration]
basic_istream<charT, traits>& get(char_type* s, streamsize n, char_type delim);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Behaves as an unformatted input function (as described above).
[:zh_CN] 行为符合无格式输入函数（如上所述）。

[:en] After constructing a sentry object, extracts characters and stores them
into successive locations of an array whose first element is designated by [`s].
[#:note#fn:$secton.3]
[:zh_CN] 构造一个 [`sentry] 对象之后，抽取字符并将它们存储到以 [`s] 代表其首个
元素的数组中的连续位置之中。[#:note#fn:$secton.3]

[note:foot#fn:$section.3]
[:en] Note that this function is not overloaded on types [`signed char] and
[`unsigned char].
[:zh_CN] 注意这个函数并未针对 [`signed char] 和 [`unsigned char] 进行重载。
[note:end]

[:en] Characters are extracted and stored until any of the following occurs:
[:zh_CN] 字符的抽取和插入持续进行到出现以下任何情况：

[list]
[item]
[:en@~] [`n] is less than one or [`n - 1] characters are stored;
[:zh_CN@~] [`n] 小于一或者已经存储了 [`n - 1] 个字符；
[item]
[:en@~] end-of-file occurs on the input sequence (in which case the function
calls [`setstate(eofbit)]);
[:zh_CN@~] 输入序列遇到了文件末尾（此时该函数调用 [`setstate(eofbit)]）；
[item]
[:en@~] [`traits::eq(c, delim)] for the next available input character [`c] (in
which case [`c] is not extracted).
[:zh_CN@~] 对于下一个可用的输入字符 [`c] 有 [`traits::eq(c, delim)]（此时并不
抽取 [`c]）。
[list:end]

[para]
[:en] If the function stores no characters, it calls [`setstate(failbit)] (which
may throw [`ios_base::failure] ([#iostate.flags])).
[:zh_CN] 如果函数没有存储任何字符，则它调用 [`setstate(failbit)]（这可能会抛出
[`ios_base::failure]（[#iostate.flags]））。

[:en] In any case, if [`n] is greater than zero it then stores a null character
into the next successive location of the array.
[:zh_CN] 无论何种情况，若 [`n] 大于零则它将向数组中的下一个后续位置中存储一个空
字符。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[exit:description]

[%@library get[!basic_istream]]
[%@library basic_istream[!get]]
[codeblock:declaration]
basic_istream<charT, traits>& get(char_type* s, streamsize n);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Calls [`get(s, n, widen('\n'))].
[:zh_CN] 调用 [`get(s, n, widen('\n'))]。

[para:returns]
[:en] Value returned by the call.
[:zh_CN] 该调用所返回的值。
[exit:description]

[%@library get[!basic_istream]]
[%@library basic_istream[!get]]
[codeblock:declaration]
basic_istream<charT, traits>& get(basic_streambuf<char_type, traits>& sb, char_type delim);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Behaves as an unformatted input function (as described above).
[:zh_CN] 行为符合无格式输入函数（如上所述）。

[:en] After constructing a sentry object, extracts characters and inserts them
in the output sequence controlled by [`sb].
[:zh_CN] 构造一个 [`sentry] 对象之后，抽取字符并将它们插入到由 [`sb] 所掌控的
输出序列之中。

[:en] Characters are extracted and inserted until any of the following occurs:
[:zh_CN] 字符的抽取和插入持续进行到出现以下任何情况：

[list]
[item]
[:en@~] end-of-file occurs on the input sequence;
[:zh_CN@~] 输入序列遇到了文件末尾；
[item]
[:en@~] inserting in the output sequence fails (in which case the character to
be inserted is not extracted);
[:zh_CN@~] 向输出序列的插入失败（此时所要插入的字符并未被抽取）；
[item]
[:en@~] [`traits::eq(c, delim)] for the next available input character [`c] (in
which case [`c] is not extracted);
[:zh_CN@~] 对于下一个可用的输入字符 [`c] 有 [`traits::eq(c, delim)]（此时并不
抽取 [`c]）；
[item]
[:en@~] an exception occurs (in which case the exception is caught but not
rethrown).
[:zh_CN@~] 发生异常（此时异常将被捕获但并不重新抛出）。
[list:end]

[para]
[:en] If the function inserts no characters, it calls [`setstate(failbit)],
which may throw [`ios_base::failure] ([#iostate.flags]).
[:zh_CN] 如果函数没有插入任何字符，则它调用 [`setstate(failbit)]（这可能会抛出
[`ios_base::failure]（[#iostate.flags]））。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[exit:description]

[%@library get[!basic_istream]]
[%@library basic_istream[!get]]
[codeblock:declaration]
basic_istream<charT, traits>& get(basic_streambuf<char_type, traits>& sb);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Calls [`get(sb, widen('\n'))].
[:zh_CN] 调用 [`get(sb, widen('\n'))]。

[para:returns]
[:en] Value returned by the call.
[:zh_CN] 该调用所返回的值。
[exit:description]

[%@library getline[!basic_istream]]
[%@library basic_istream[!getline]]
[codeblock:declaration]
basic_istream<charT, traits>& getline(char_type* s, streamsize n, char_type delim);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Behaves as an unformatted input function (as described above).
[:zh_CN] 行为符合无格式输入函数（如上所述）。

[:en] After constructing a sentry object, extracts characters and stores them
into successive locations of an array whose first element is designated by [`s].
[#:note#fn:$secton.4]
[:zh_CN] 构造一个 [`sentry] 对象之后，抽取字符并将它们存储到以 [`s] 代表其首个
元素的数组中的连续位置之中。[#:note#fn:$secton.4]

[note:foot#fn:$section.4]
[:en] Note that this function is not overloaded on types [`signed char] and
[`unsigned char].
[:zh_CN] 注意这个函数并未针对 [`signed char] 和 [`unsigned char] 进行重载。
[note:end]

[:en] Characters are extracted and stored until one of the following occurs:
[:zh_CN] 字符的抽取和插入持续进行到出现以下情况之一：
[list]
[item]
[:en@~] end-of-file occurs on the input sequence (in which case the function
calls [`setstate(eofbit)]);
[:zh_CN@~] 输入序列遇到了文件末尾（此时该函数调用 [`setstate(eofbit)]）；
[item]
[:en@~] [`traits::eq(c, delim)] for the next available input character [`c] (in
which case the input character is extracted but not stored);
[#:note#fn:$secton.5]
[:zh_CN@~] 对于下一个可用的输入字符 [`c] 有 [`traits::eq(c, delim)]（此时该输入
字符进行抽取但并不存储）；[#:note#fn:$secton.5]

[note:foot#fn:$section.5]
[:en] Since the final input character is ["extracted], it is counted in the
[`gcount()], even though it is not stored.
[:zh_CN] 既然最后一个输入字符也“被抽取”，它在 [`gcount()] 中是被计数的，即便并不
将之存储。
[note:end]

[item]
[:en@~] [`n] is less than one or [`n - 1] characters are stored (in which case
the function calls [`setstate(failbit)]).
[:zh_CN@~] [`n] 小于一或者已经存储了 [`n - 1] 个字符（此时该函数调用
[`setstate(failbit)]）。
[list:end]

[para]
[:en] These conditions are tested in the order shown.[#:note#fn:$secton.6]
[:zh_CN] 这些条件是以所示顺序进行检查的。[#:note#fn:$secton.6]

[note:foot#fn:$section.6]
[:en] This allows an input line which exactly fills the buffer, without setting
[`failbit].
[:zh_CN] 这样就允许让恰好填充缓冲区的输入行并不设置 [`failbit]。

[:en] This is different behavior than the historical AT&T implementation.
[:zh_CN] 这与历史中的 AT&T 实现的行为不同。
[note:end]

[para]
[:en] If the function extracts no characters, it calls [`setstate(failbit)]
(which may throw [`ios_base::failure] ([#iostate.flags])).[#:note#fn:$secton.7]
[:zh_CN] 如果函数没有抽取任何字符，则它调用 [`setstate(failbit)]（这可能会抛出
[`ios_base::failure]（[#iostate.flags]））。[#:note#fn:$secton.7]

[note:foot#fn:$section.7]
[:en] This implies an empty input line will not cause [`failbit] to be set.
[:zh_CN] 这意味着空输入行并不会导致 [`failbit] 被设置。
[note:end]

[para]
[:en] In any case, if [`n] is greater than zero, it then stores a null character
(using [`charT()]) into the next successive location of the array.
[:zh_CN] 无论何种情况，若 [`n] 大于零则它将向数组中的下一个后续位置中存储一个空
字符（使用 [`charT()]）。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。

[para]
[enter:example]
[codeblock]
#include <iostream>

int main() {
  using namespace std;
  const int line_buffer_size = 100;

  char buffer[line_buffer_size];
  int line_number = 0;
  while (cin.getline(buffer, line_buffer_size, '\n') || cin.gcount()) {
    int count = cin.gcount();
    if (cin.eof())
      cout << "Partial final line";   // [:en] [`cin.fail()] is [`false]
                                      // [|:zh_CN] [`cin.fail()] 为 [`false]
    else if (cin.fail()) {
      cout << "Partial long line";
      cin.clear(cin.rdstate() & ~ios_base::failbit);
    } else {
      count--;                        // [:en] Don[=']t include newline in [`count]
                                      // [|:zh_CN] [`count] 中不包括换行
      cout << "Line " << ++line_number;
    }
    cout << " (" << count << " chars): " << buffer << endl;
  }
}
[codeblock:end]
[exit:example]
[exit:description]

[%@library getline[!basic_istream]]
[%@library basic_istream[!getline]]
[codeblock:declaration]
basic_istream<charT, traits>& getline(char_type* s, streamsize n);
[codeblock:end]

[enter:description]
[para:returns]
[:] [`getline(s, n, widen('\n'))]
[exit:description]

[%@library ignore[!basic_istream]]
[%@library basic_istream[!ignore]]
[codeblock:declaration]
basic_istream<charT, traits>& ignore(streamsize n = 1, int_type delim = traits::eof());
[codeblock:end]

[enter:description]
[para:effects]
[:en] Behaves as an unformatted input function (as described above).
[:zh_CN] 行为符合无格式输入函数（如上所述）。

[:en] After constructing a sentry object, extracts characters and discards them.
[:zh_CN] 构造一个 [`sentry] 对象之后，抽取字符并将它们丢弃。

[:en] Characters are extracted until any of the following occurs:
[:zh_CN] 字符的抽取持续进行到出现以下任何情况：
[list]
[item]
[:en@~] [`n != numeric_limits<streamsize>::max()] ([#numeric.limits]) and [`n]
characters have been extracted so far
[:zh_CN@~] [`n != numeric_limits<streamsize>::max()]（[#numeric.limits]），并且
至此已经抽取了 [`n] 个字符
[item]
[:en@~] end-of-file occurs on the input sequence (in which case the function
calls [`setstate(eofbit)], which may throw [`ios_base::failure]
([#iostate.flags]));
[:zh_CN@~] 输入序列遇到了文件末尾（此时该函数调用 [`setstate(eofbit)]，这可能会
抛出 [`ios_base::failure]（[#iostate.flags]））；
[item]
[:en@~] [`traits::eq_int_type(traits::to_int_type(c), delim)] for the next
available input character [`c] (in which case [`c] is extracted).
[:zh_CN@~] 对于下一个可用的输入字符 [`c] 有
[`traits::eq_int_type(traits::to_int_type(c), delim)]（此时 [`c] 被抽取）。
[list:end]

[para:remarks]
[:en] The last condition will never occur if
[`traits::eq_int_type(delim, traits::eof())].
[:zh_CN] 当 [`traits::eq_int_type(delim, traits::eof())] 时，最后一个条件永远
不会发生。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[exit:description]

[%@library peek[!basic_istream]]
[%@library basic_istream[!peek]]
[codeblock:declaration]
int_type peek();
[codeblock:end]

[enter:description]
[para:effects]
[:en] Behaves as an unformatted input function (as described above).
[:zh_CN] 行为符合无格式输入函数（如上所述）。

[:en] After constructing a sentry object, reads but does not extract the current
input character.
[:zh_CN] 构造一个 [`sentry] 对象之后，读取但并不抽取当前的输入字符。

[para:returns]
[:en] [`traits::eof()] if [`good()] is [`false].
[:zh_CN] 当 [`good()] 为 [`false] 时返回 [`traits::eof()]。

[:en] Otherwise, returns [`rdbuf()->sgetc()].
[:zh_CN] 否则返回 [`rdbuf()->sgetc()]。
[exit:description]

[%@library read[!basic_istream]]
[%@library basic_istream[!read]]
[codeblock:declaration]
basic_istream<charT, traits>& read(char_type* s, streamsize n);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Behaves as an unformatted input function (as described above).
[:zh_CN] 行为符合无格式输入函数（如上所述）。

[:en] After constructing a sentry object, if [`!good()] calls
[`setstate(failbit)] which may throw an exception, and return.
[:zh_CN] 构造一个 [`sentry] 对象之后，如果 [`!good()] 则调用
[`setstate(failbit)]（其可能抛出异常）并返回。

[:en] Otherwise extracts characters and stores them into successive locations of
an array whose first element is designated by [`s].[#:note#fn:$secton.8]
[:zh_CN] 否则，抽取字符并将它们存储到以 [`s] 代表其首个元素的数组中的连续位置
之中。[#:note#fn:$secton.8]

[note:foot#fn:$section.8]
[:en] Note that this function is not overloaded on types [`signed char] and
[`unsigned char].
[:zh_CN] 注意这个函数并未针对 [`signed char] 和 [`unsigned char] 进行重载。
[note:end]

[:en] Characters are extracted until either of the following occurs:
[:zh_CN] 字符的抽取持续进行到出现以下任何情况：
[list]
[item]
[:en@~] [`n] characters are stored;
[:zh_CN@~] 存储了 [`n] 个字符；
[item]
[:en@~] end-of-file occurs on the input sequence (in which case the function
calls [`setstate(failbit | eofbit)], which may throw [`ios_base::failure]
([#iostate.flags])).
[:zh_CN@~] 输入序列遇到了文件末尾（此时该函数调用 [`setstate(failbit | eofbit)]，
这可能会抛出 [`ios_base::failure]（[#iostate.flags]））。
[list:end]

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[exit:description]

[%@library readsome[!basic_istream]]
[%@library basic_istream[!readsome]]
[codeblock:declaration]
streamsize readsome(char_type* s, streamsize n);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Behaves as an unformatted input function (as described above).
[:zh_CN] 行为符合无格式输入函数（如上所述）。

[:en] After constructing a sentry object, if [`!good()] calls
[`setstate(failbit)] which may throw an exception, and return.
[:zh_CN] 构造一个 [`sentry] 对象之后，如果 [`!good()] 则调用
[`setstate(failbit)]（其可能抛出异常）并返回。

[:en] Otherwise extracts characters and stores them into successive locations of
an array whose first element is designated by [`s].
[:zh_CN] 否则，抽取字符并将它们存储到以 [`s] 代表其首个元素的数组中的连续位置
之中。

[:en] If [`rdbuf()->in_avail() == -1], calls [`setstate(eofbit)] (which may
throw [`ios_base::failure] ([#iostate.flags])), and extracts no characters;
[:zh_CN] 如果 [`rdbuf()->in_avail() == -1]，则调用 [`setstate(eofbit)]（这可能会
抛出 [`ios_base::failure]（[#iostate.flags]），并且不抽取任何字符；

[list]
[item]
[:en] If [`rdbuf()->in_avail() == 0], extracts no characters
[:zh_CN] 如果 [`rdbuf()->in_avail() == 0]，则不抽取任何字符；
[item]
[:en] If [`rdbuf()->in_avail() > 0], extracts [`min(rdbuf()->in_avail(), n))].
[:zh_CN] 如果 [`rdbuf()->in_avail() > 0]，则抽取 [`min(rdbuf()->in_avail(), n))]
个字符。
[list:end]

[para:returns]
[:en] The number of characters extracted.
[:zh_CN] 抽取的字符数。
[exit:description]

[%@library putback[!basic_istream]]
[%@library basic_istream[!putback]]
[codeblock:declaration]
basic_istream<charT, traits>& putback(char_type c);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Behaves as an unformatted input function (as described above), except that
the function first clears [`eofbit].
[:zh_CN] 行为符合无格式输入函数（如上所述），但该函数首先清除 [`eofbit]。

[:en] After constructing a sentry object, if [`!good()] calls
[`setstate(failbit)] which may throw an exception, and return.
[:zh_CN] 构造一个 [`sentry] 对象之后，如果 [`!good()] 则调用
[`setstate(failbit)]（其可能抛出异常）并返回。

[:en] If [`rdbuf()] is not null, calls [`rdbuf->sputbackc()].
[:zh_CN] 如果 [`rdbuf()] 不为空值，则调用 [`rdbuf->sputbackc()]。

[:en] If [`rdbuf()] is null, or if [`sputbackc()] returns [`traits::eof()],
calls [`setstate(badbit)] (which may throw [`ios_base::failure]
([#iostate.flags])).
[:zh_CN] 如果 [`rdbuf()] 为空值，或者 [`sputbackc()] 返回了 [`traits::eof()]，则
调用 [`setstate(badbit)]（这可能会抛出 [`ios_base::failure]（[#iostate.flags]）。

[enter:note]
[:en] This function extracts no characters, so the value returned by the next
call to [`gcount()] is 0.
[:zh_CN] 这个函数不抽取任何字符，因此下次调用 [`gcount()] 所返回的值将为 0.
[exit:note]

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[exit:description]

[%@library unget[!basic_istream]]
[%@library basic_istream[!unget]]
[codeblock:declaration]
basic_istream<charT, traits>& unget();
[codeblock:end]

[enter:description]
[para:effects]
[:en] Behaves as an unformatted input function (as described above), except that
the function first clears [`eofbit].
[:zh_CN] 行为符合无格式输入函数（如上所述），但该函数首先清除 [`eofbit]。

[:en] After constructing a sentry object, if [`!good()] calls
[`setstate(failbit)] which may throw an exception, and return.
[:zh_CN] 构造一个 [`sentry] 对象之后，如果 [`!good()] 则调用
[`setstate(failbit)]（其可能抛出异常）并返回。

[:en] If [`rdbuf()] is not null, calls [`rdbuf->sungetc()].
[:zh_CN] 如果 [`rdbuf()] 不为空值，则调用 [`rdbuf->sungetc()]。

[:en] If [`rdbuf()] is null, or if [`sungetc()] returns [`traits::eof()],
calls [`setstate(badbit)] (which may throw [`ios_base::failure]
([#iostate.flags])).
[:zh_CN] 如果 [`rdbuf()] 为空值，或者 [`sungetc()] 返回了 [`traits::eof()]，则
调用 [`setstate(badbit)]（这可能会抛出 [`ios_base::failure]（[#iostate.flags]）。

[enter:note]
[:en] This function extracts no characters, so the value returned by the next
call to [`gcount()] is 0.
[:zh_CN] 这个函数不抽取任何字符，因此下次调用 [`gcount()] 所返回的值将为 0.
[exit:note]

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[exit:description]

[%@library sync[!basic_istream]]
[%@library basic_istream[!sync]]
[codeblock:declaration]
int sync();
[codeblock:end]

[enter:description]
[para:effects]
[:en] Behaves as an unformatted input function (as described above), except that
it does not count the number of characters extracted and does not affect the
value returned by subsequent calls to [`gcount()].
[:zh_CN] 行为符合无格式输入函数（如上所述），但它并不对抽取的字符数进行计数，
并且不会影响随后对 [`gcount()] 的调用所返回的值。

[:en] After constructing a sentry object, if [`rdbuf()] is a null pointer,
returns [`-1].
[:zh_CN] 构造一个 [`sentry] 对象之后，如果 [`rdbuf()] 为空指针，则返回 [`-1]。

[:en] Otherwise, calls [`rdbuf()->pubsync()] and, if that function returns [`-1]
calls [`setstate(badbit)] (which may throw [`ios_base::failure]
([#iostate.flags]), and returns [`-1].
[:zh_CN] 否则调用 [`rdbuf()->pubsync()]，且当该函数返回 [`-1] 时调用
[`setstate(badbit)]（这可能会抛出 [`ios_base::failure]（[#iostate.flags]））
并返回 [`-1]。

[:en] Otherwise, returns zero.
[:zh_CN] 否则返回零。
[exit:description]

[%@library tellg[!basic_istream]]
[%@library basic_istream[!tellg]]
[codeblock:declaration]
pos_type tellg();
[codeblock:end]

[enter:description]
[para:effects]
[:en] Behaves as an unformatted input function (as described above), except that
it does not count the number of characters extracted and does not affect the
value returned by subsequent calls to [`gcount()].
[:zh_CN] 行为符合无格式输入函数（如上所述），但它并不对抽取的字符数进行计数，
并且不会影响随后对 [`gcount()] 的调用所返回的值。

[para:returns]
[:en] After constructing a sentry object, if [`fail() != false], returns
[`pos_type(-1)] to indicate failure.
[:zh_CN] 构造一个 [`sentry] 对象之后，如果 [`fail() != false]，则返回
[`pos_type(-1)] 以标明失败。

[:en] Otherwise, returns [`rdbuf()->pubseekoff(0, cur, in)].
[:zh_CN] 否则，返回 [`rdbuf()->pubseekoff(0, cur, in)]。
[exit:description]

[%@library seekg[!basic_istream]]
[%@library basic_istream[!seekg]]
[codeblock:declaration]
basic_istream<charT, traits>& seekg(pos_type pos);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Behaves as an unformatted input function (as described above), except that
the function first clears [`eofbit], it does not count the number of characters
extracted, and it does not affect the value returned by subsequent calls to
[`gcount()].
[:zh_CN] 行为符合无格式输入函数（如上所述），但该函数首先清除 [`eofbit]，它并不
对抽取的字符数进行计数，并且不会影响随后对 [`gcount()] 的调用所返回的值。

[:en] After constructing a sentry object, if [`fail() != true], executes
[`rdbuf()->pubseekpos(pos, ios_base::in)].
[:zh_CN] 构造一个 [`sentry] 对象之后，如果 [`fail() != true]，则执行
[`rdbuf()->pubseekpos(pos, ios_base::in)]。

[:en] In case of failure, the function calls [`setstate(failbit)] (which may
throw [`ios_base::failure]).
[:zh_CN] 当发生失败时，该函数调用 [`setstate(failbit)]（这可能会抛出
[`ios_base::failure]）。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[exit:description]

[%@library seekg[!basic_istream]]
[%@library basic_istream[!seekg]]
[codeblock:declaration]
basic_istream<charT, traits>& seekg(off_type off, ios_base::seekdir dir);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Behaves as an unformatted input function (as described above), except that
the function first clears [`eofbit], does not count the number of characters
extracted, and does not affect the value returned by subsequent calls to
[`gcount()].
[:zh_CN] 行为符合无格式输入函数（如上所述），但该函数首先清除 [`eofbit]，并不
对抽取的字符数进行计数，并且不会影响随后对 [`gcount()] 的调用所返回的值。

[:en] After constructing a sentry object, if [`fail() != true], executes
[`rdbuf()->pubseekoff(off, dir, ios_base::in)].
[:zh_CN] 构造一个 [`sentry] 对象之后，如果 [`fail() != true]，则执行
[`rdbuf()->pubseekoff(off, dir, ios_base::in)]。

[:en] In case of failure, the function calls [`setstate(failbit)] (which may
throw [`ios_base::failure]).
[:zh_CN] 当发生失败时，该函数调用 [`setstate(failbit)]（这可能会抛出
[`ios_base::failure]）。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[exit:description]
