[section#fs.rec.dir.itr.members
    [:en] Members
    [:zh_CN] 成员
]

[%@lib@ctor recursive_directory_iterator]
[codeblock:declaration]
recursive_directory_iterator() noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Constructs the end iterator.
[:zh_CN] 构造末尾迭代器。
[div:end]

[%@lib@ctor recursive_directory_iterator]
[codeblock:declaration]
explicit recursive_directory_iterator(const path& p);
recursive_directory_iterator(const path& p, directory_options options);
recursive_directory_iterator(const path& p, directory_options options, error_code& ec);
recursive_directory_iterator(const path& p, error_code& ec);
[codeblock:end]

[div:description]
[para:effects]
[:en] Constructs a iterator representing the first entry in the directory to
which [`p] resolves, if any; otherwise, the end iterator.
[:zh_CN] 为 [`p] 所解析到的目录中的第一个项目（如果有）构造一个迭代器，否则为
末尾迭代器。

[:en] However, if
[:zh_CN] 不过，若
[codeblock]
(options & directory_options::skip_permission_denied) != directory_options::none
[codeblock:end]
[:en@~] and construction encounters an error indicating that permission to
access [`p] is denied, constructs the end iterator and does not report an error.
[:zh_CN@~] 并且构造过程发生了表示访问 [`p] 的权限被拒绝的错误，则构造末尾迭代器
而并不报告错误。

[para:ensures]
[:en] [`options() == options] for the signatures with a [`directory_options]
argument, otherwise [`options() == directory_options::none].
[:zh_CN] 对于带有 [`directory_options] 实参的签名，有 [`options() == options]，
否则有 [`options() == directory_options::none]。

[para:throws]
[:en] As specified in [#fs.err.report].
[:zh_CN] 如 [#fs.err.report] 所述。

[para]
[begin:note]
[:en] To iterate over the current directory, use
[`recursive_directory_iterator(".")] rather than
[`recursive_directory_iterator("")].
[:zh_CN] 要在当前目录上迭代，应当使用 [`recursive_directory_iterator(".")]
而不是 [`recursive_directory_iterator("")]。
[end:note]

[para]
[begin:note]
[:en] By default, [`recursive_directory_iterator] does not follow directory
symlinks.
[:zh_CN] 默认情况下，[`recursive_directory_iterator] 并不会跟随目录符号连接。

[:en] To follow directory symlinks, specify [`options] as
[`directory_options::follow_directory_symlink]
[:zh_CN] 要跟随目录符号连接，应当将 [`options] 指定为
[`directory_options::follow_directory_symlink]。
[end:note]
[div:end]

[%@lib@ctor recursive_directory_iterator]
[codeblock:declaration]
recursive_directory_iterator(const recursive_directory_iterator& rhs);
[codeblock:end]

[div:description]
[para:ensures]
[list]
[item] [`options() == rhs.options()]
[item] [`depth() == rhs.depth()]
[item] [`recursion_pending() == rhs.recursion_pending()]
[list:end]
[div:end]

[%@lib@ctor recursive_directory_iterator]
[codeblock:declaration]
recursive_directory_iterator(recursive_directory_iterator&& rhs) noexcept;
[codeblock:end]

[div:description]
[para:ensures]
[:en] [`options()], [`depth()], and [`recursion_pending()] have the values that
[`rhs.options()], [`rhs.depth()], and [`rhs.recursion_pending()], respectively,
had before the function call.
[:zh_CN] [`options()]、[`depth()] 和 [`recursion_pending()] 分别具有函数调用前的
[`rhs.options()]、[`rhs.depth()] 和 [`rhs.recursion_pending()] 的值。
[div:end]

[%@lib@member operator=[!recursive_directory_iterator]]
[codeblock:declaration]
recursive_directory_iterator& operator=(const recursive_directory_iterator& rhs);
[codeblock:end]

[div:description]
[para:effects]
[:en] If [`*this] and [`rhs] are the same object, the member has no effect.
[:zh_CN] 若 [`*this] 和 [`rhs] 是同一个对象，则该成员没有效果。

[para:ensures]
[list]
[item] [`options() == rhs.options()]
[item] [`depth() == rhs.depth()]
[item] [`recursion_pending() == rhs.recursion_pending()]
[list:end]

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@lib@member operator=[!recursive_directory_iterator]]
[codeblock:declaration]
recursive_directory_iterator& operator=(recursive_directory_iterator&& rhs) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] If [`*this] and [`rhs] are the same object, the member has no effect.
[:zh_CN] 若 [`*this] 和 [`rhs] 是同一个对象，则该成员没有效果。

[para:ensures]
[:en] [`options()], [`depth()], and [`recursion_pending()] have the values that
[`rhs.options()], [`rhs.depth()], and [`rhs.recursion_pending()], respectively,
had before the function call.
[:zh_CN] [`options()]、[`depth()] 和 [`recursion_pending()] 分别具有函数调用前的
[`rhs.options()]、[`rhs.depth()] 和 [`rhs.recursion_pending()] 的值。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@lib@member options[!recursive_directory_iterator]]
[codeblock:declaration]
directory_options options() const;
[codeblock:end]

[div:description]
[para:returns]
[:en] The value of the argument passed to the constructor for the [`options]
parameter, if present, otherwise [`directory_options::none].
[:zh_CN] 如果有，则为传递给构造函数的 [`options] 形参的实参值，否则为
[`directory_options::none]。

[para:throws]
[:en] Nothing.
[:zh_CN] 无。
[div:end]

[%@lib@member depth[!recursive_directory_iterator]]
[codeblock:declaration]
int depth() const;
[codeblock:end]

[div:description]
[para:returns]
[:en] The current depth of the directory tree being traversed.
[:zh_CN] 所遍历的目录树的当前深度。

[begin:note]
[:en] The initial directory is depth [`0], its immediate subdirectories are
depth [`1], and so forth.
[:zh_CN] 起始目录的深度为 [`0]，其直接子目录深度为 [`1]，以此类推。
[end:note]

[para:throws]
[:en] Nothing.
[:zh_CN] 无。
[div:end]

[%@lib@member recursion_pending[!recursive_directory_iterator]]
[codeblock:declaration]
bool recursion_pending() const;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`true] if [`disable_recursion_pending()] has not been called subsequent
to the prior construction or increment operation, otherwise [`false].
[:zh_CN] 如果在构造之后或增量操作之后尚未调用过 [`disable_recursion_pending()]，
则返回 [`true]，否则返回 [`false]。

[para:throws]
[:en] Nothing.
[:zh_CN] 无。
[div:end]

[%@lib@member increment[!recursive_directory_iterator]]
[%@lib@member operator++[!recursive_directory_iterator]]
[codeblock:declaration]
recursive_directory_iterator& operator++();
recursive_directory_iterator& increment(error_code& ec);
[codeblock:end]

[div:description]
[para:effects]
[:en] As specified for the prefix increment operation of Input iterators
([#input.iterators]), except that:
[:zh_CN] 符合对输入迭代器的前缀增量操作的说明（[#input.iterators]），但：

[list]
[item]
[:en] If there are no more entries at the current depth, then if [`depth() != 0]
iteration over the parent directory resumes; otherwise
[`*this = recursive_directory_iterator()].
[:zh_CN] 如果前深度没有更多项目，则当 [`depth() != 0] 时继续父目录的迭代；否则
[`*this = recursive_directory_iterator()]。

[item]
[:en] Otherwise if
[:zh_CN] 否则，如果
[codeblock]
recursion_pending() && is_directory((*this)->status()) &&
(!is_symlink((*this)->symlink_status()) ||
 (options() & directory_options::follow_directory_symlink) != directory_options::none)
[codeblock:end]

[:en@~] then either directory [`(*this)->path()] is recursively iterated into or,
if
[:zh_CN@~] 则或者递归地进入 [`(*this)->path()] 进行迭代，或者当
[codeblock]
(options() & directory_options::skip_permission_denied) != directory_options::none
[codeblock:end]

[:en@~] and an error occurs indicating that permission to access directory
[`(*this)->path()] is denied, then directory [`(*this)->path()] is treated as an
empty directory and no error is reported.
[:zh_CN@~] 并且发生了指明访问目录 [`(*this)->path()] 的权限被拒绝的错误时，
将目录 [`(*this)->path()] 当做一个空目录而并不报告错误。
[list:end]

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。

[para:throws]
[:en] As specified in [#fs.err.report].
[:zh_CN] 如 [#fs.err.report] 所述。
[div:end]

[%@lib@member pop[!recursive_directory_iterator]]
[codeblock:declaration]
void pop();
void pop(error_code& ec);
[codeblock:end]

[div:description]
[para:effects]
[:en] If [`depth() == 0], set [`*this] to [`recursive_directory_iterator()].
[:zh_CN] 若 [`depth() == 0]，则将 [`*this] 设值为
[`recursive_directory_iterator()]。

[:en] Otherwise, cease iteration of the directory currently being iterated over,
and continue iteration over the parent directory.
[:zh_CN] 否则，免除对当前正在迭代的目录的迭代操作，继续对其父目录的迭代。

[para:throws]
[:en] As specified in [#fs.err.report].
[:zh_CN] 如 [#fs.err.report] 所述。

[para:remarks]
[:en] Any copies of the previous value of [`*this] are no longer required
to be dereferenceable nor to be in the domain of [`==].
[:zh_CN] [`*this] 的原值的任何副本都不再要求可以被解引用或者在 [`==] 的定义域中。
[div:end]

[%@lib@member disable_recursion_pending[!recursive_directory_iterator]]
[codeblock:declaration]
void disable_recursion_pending();
[codeblock:end]

[div:description]
[para:ensures]
[:en] [`recursion_pending() == false].
[:zh_CN] [`recursion_pending() == false]。

[para]
[begin:note]
[:en] [`disable_recursion_pending()] is used to prevent unwanted recursion into
a directory.
[:zh_CN] [`disable_recursion_pending()] 用于避免递归进入并不需要的目录之中。
[end:note]
[div:end]
