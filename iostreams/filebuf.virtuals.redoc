[section#filebuf.virtuals
    [:en] Overridden virtual functions
    [:zh_CN] 覆盖的虚函数
]

[%@library showmanyc[!basic_filebuf]]
[%@library basic_filebuf[!showmanyc]]
[codeblock:declaration]
streamsize showmanyc() override;
[codeblock:end]

[begin:description]
[para:effects]
[%@library showmanyc[!basic_streambuf]]
[%@library basic_streambuf[!showmanyc]]
[:en] Behaves the same as [`basic_streambuf::showmanyc()]
([#streambuf.virtuals]).
[:zh_CN] 行为与 [`basic_streambuf::showmanyc()] 相同（[#streambuf.virtuals]）。

[para:remarks]
[:en] An implementation might well provide an overriding definition for this
function signature if it can determine that more characters can be read from the
input sequence.
[:zh_CN] 如果实现能够确定从输入序列中可以读取到更多字符，则实现当然可以为这个
函数签名提供覆盖定义。
[end:description]

[%@library underflow[!basic_filebuf]]
[%@library basic_filebuf[!underflow]]
[codeblock:declaration]
int_type underflow() override;
[codeblock:end]

[begin:description]
[para:effects]
[:en] Behaves according to the description of
[`basic_streambuf<charT, traits>::underflow()], with the specialization that a
sequence of characters is read from the input sequence as if by reading from the
associated file into an internal buffer ([`extern_buf]) and then as if by doing:
[:zh_CN] 其行为与符合对 [`basic_streambuf<charT, traits>::underflow()] 的描述，
特殊之处在于其从输入序列读取字符序列，如同从其所关联的文件中读取到某个内部缓冲区
（[`extern_buf]），然后如同执行：

[codeblock:notation]
char   extern_buf[XSIZE];
char*  extern_end;
charT  intern_buf[ISIZE];
charT* intern_end;
codecvt_base::result r =
  a_codecvt.in(state, extern_buf, extern_buf+XSIZE, extern_end,
               intern_buf, intern_buf+ISIZE, intern_end);
[codeblock:end]

[:en] This shall be done in such a way that the class can recover the position
([`fpos_t]) corresponding to each character between [`intern_buf] and
[`intern_end].
[:zh_CN] 它的执行方式应当使得这个类可以将 [`intern_buf] 和 [`intern_end] 之间的
每个字符所对应的位置（[`fpos_t]）恢复回来。

[:en] If the value of [`r] indicates that [`a_codecvt.in()] ran out of space in
[`intern_buf], retry with a larger [`intern_buf].
[:zh_CN] 如果 [`r] 的值标明 [`a_codecvt.in()] 用光了 [`intern_buf] 中的空间，则
以更大的 [`intern_buf] 来重新尝试。
[end:description]

[%@library uflow[!basic_filebuf]]
[%@library basic_filebuf[!uflow]]
[codeblock:declaration]
int_type uflow() override;
[codeblock:end]

[begin:description]
[para:effects]
[:en] Behaves according to the description of
[`basic_streambuf<charT, traits>::uflow()], with the specialization that a
sequence of characters is read from the input same method as used by
[`underflow].
[:zh_CN] 其行为与符合对 [`basic_streambuf<charT, traits>::uflow()] 的描述，
特殊之处在于其从输入序列读取字符的方法与 [`underflow] 所用的相同。
[end:description]

[%@library pbackfail[!basic_filebuf]]
[%@library basic_filebuf[!pbackfail]]
[codeblock:declaration]
int_type pbackfail(int_type c = traits::eof()) override;
[codeblock:end]

[begin:description]
[para:effects]
[:en] Puts back the character designated by [`c] to the input sequence, if
possible, in one of three ways:
[:zh_CN] 如果可能，将 [`c] 代表的字符以三种方式之一回填到输入序列中：

[list]
[item]
[:en] If [`traits::eq_int_type(c, traits::eof())] returns [`false] and if the
function makes a putback position available and if
[`traits::eq(to_char_type(c), gptr()`[-1`])] returns [`true], decrements the
next pointer for the input sequence, [`gptr()].
[:zh_CN] 若 [`traits::eq_int_type(c, traits::eof())] 返回 [`false] 且函数做出了
一个可用的回填位置，并且若 [`traits::eq(to_char_type(c), gptr()`[-1`])] 返回
[`true]，则减少输入序列的后继指针（[`gptr()]）。

[:en] Returns: [`c].
[:zh_CN] 返回：[`c]。

[item]
[:en] If [`traits::eq_int_type(c, traits::eof())] returns [`false] and if the
function makes a putback position available and if the function is permitted to
assign to the putback position, decrements the next pointer for the input
sequence, and stores [`c] there.
[:zh_CN] 若 [`traits::eq_int_type(c, traits::eof())] 返回 [`false] 且函数做出了
一个可用的回填位置，并且若该函数被允许向回填位置赋值，则减少输入序列的后继指针，
并将 [`c] 存储其中。

[:en] Returns: [`c].
[:zh_CN] 返回：[`c]。

[item]
[:en] If [`traits::eq_int_type(c, traits::eof())] returns [`true] and if either
the input sequence has a putback position available or the function makes a
putback position available, decrements the next pointer for the input sequence,
[`gptr()].
[:zh_CN] 若 [`traits::eq_int_type(c, traits::eof())] 返回 [`true]，且或者输入
序列有可用的回填位置，或者函数做出了一个可用的回填位置，则减少输入序列的后继指针
[`gptr()]。

[:en] Returns: [`traits::not_eof(c)].
[:zh_CN] 返回：[`traits::not_eof(c)]。
[list:end]

[para:returns]
[:en] [`traits::eof()] to indicate failure.
[:zh_CN] [`traits::eof()] 以标明失败。

[para:remarks]
[:en] If [`is_open() == false], the function always fails.
[:zh_CN] 当 [`is_open() == false] 时，函数总是失败。

[para]
[:en] The function does not put back a character directly to the input sequence.
[:zh_CN] 该函数并不会直接将字符回填到输入序列之中。

[para]
[:en] If the function can succeed in more than one of these ways, it is
unspecified which way is chosen.
[:zh_CN] 若函数可以通过不止一种方式完成工作，则采用哪种方式是未指明的。

[:en] The function can alter the number of putback positions available as a
result of any call.
[:zh_CN] 该函数可能由于所进行的任何调用而改变可用的回填位置的数量。
[end:description]

[%@library overflow[!basic_filebuf]]
[%@library basic_filebuf[!overflow]]
[codeblock:declaration]
int_type overflow(int_type c = traits::eof()) override;
[codeblock:end]

[begin:description]
[para:effects]
[:en] Behaves according to the description of
[`basic_streambuf<charT, traits>::overflow(c)], except that the behavior of
["consuming characters] is performed by first converting as if by:
[:zh_CN] 其行为与符合对 [`basic_streambuf<charT, traits>::overflow(c)] 的描述，
但其“消耗字符”的行为是以先如同以下方式进行转换：

[codeblock:notation]
charT* b = pbase();
charT* p = pptr();
charT* end;
char   xbuf[XSIZE];
char*  xbuf_end;
codecvt_base::result r =
  a_codecvt.out(state, b, p, end, xbuf, xbuf+XSIZE, xbuf_end);
[codeblock:end]

[:en@~] and then
[:zh_CN@~] 然后，

[list]
[item]
[:en] If [`r == codecvt_base::error] then fail.
[:zh_CN] 如果 [`r == codecvt_base::error] 则失败。
[item]
[:en] If [`r == codecvt_base::noconv] then output characters from [`b] up to
(and not including) [`p].
[:zh_CN] 如果 [`r == codecvt_base::noconv] 则将 [`b] 中直到（但不包括）[`p] 的
字符都输出。
[item]
[:en] If [`r == codecvt_base::partial] then output to the file characters from
[`xbuf] up to [`xbuf_end], and repeat using characters from [`end] to [`p].
[:zh_CN] 如果 [`r == codecvt_base::partial] 则将从 [`xbuf] 到 [`xbuf_end] 中的
字符输出到文件，然后以从 [`end] 到 [`p] 中的字符重复。

[:en] If output fails, fail (without repeating).
[:zh_CN] 如果输出失败，则失败（而不进行重复）。

[item]
[:en] Otherwise output from [`xbuf] to [`xbuf_end], and fail if output fails.
[:zh_CN] 否则，将从 [`xbuf] 到 [`xbuf_end] 中的字符输出，且若输出失败则失败。

[:en] At this point if [`b != p] and [`b == end] ([`xbuf] isn[=']t large enough)
then increase [`XSIZE] and repeat from the beginning.
[:zh_CN] 此时，如果 [`b != p] 且 [`b == end]（[`xbuf] 不够大），则增加 [`XSIZE]
并重最初开始重复。
[list:end]

[para:returns]
[:en] [`traits::not_eof(c)] to indicate success, and [`traits::eof()] to
indicate failure.
[:zh_CN] 以 [`traits::not_eof(c)] 标明成功，而以 [`traits::eof()] 标明失败。

[:en] If [`is_open() == false], the function always fails.
[:zh_CN] 当 [`is_open() == false] 时，函数总是失败。
[end:description]

[%@library setbuf[!basic_filebuf]]
[%@library basic_filebuf[!setbuf]]
[codeblock:declaration]
basic_streambuf* setbuf(char_type* s, streamsize n) override;
[codeblock:end]

[begin:description]
[para:effects]
[:en] If [`setbuf(0, 0)] is called on a stream before any I/O has occurred on
that stream, the stream becomes unbuffered.
[:zh_CN] 如果在某个流尚未发生任何 I/O 之前对其调用 [`setbuf(0, 0)]，则该流变为
无缓冲的。

[:en] Otherwise the results are [%@impldef effect of calling
[`basic_filebuf::setbuf] with nonzero arguments] implementation-defined.
[:zh_CN] 否则其结果是[%@impldef 以非零实参调用 [`basic_filebuf::setbuf] 的效果]
由实现定义的。

[:en] ["Unbuffered] means that [`pbase()] and [`pptr()] always return null and
output to the file should appear as soon as possible.
[:zh_CN] “无缓冲”的含义是 [`pbase()] 和 [`pptr()] 总是返回空值，且向文件的输出
将尽可能快的实施。
[end:description]

[%@library seekoff[!basic_filebuf]]
[%@library basic_filebuf[!seekoff]]
[codeblock:declaration]
pos_type seekoff(off_type off, ios_base::seekdir way,
                 ios_base::openmode which
                   = ios_base::in | ios_base::out) override;
[codeblock:end]

[begin:description]
[para:effects]
[:en] Let [`width] denote [`a_codecvt.encoding()].
[:zh_CN] 令 [`width] 代表 [`a_codecvt.encoding()]。

[:en] If [`is_open() == false], or [`off != 0 && width <= 0], then the
positioning operation fails.
[:zh_CN] 若 [`is_open() == false] 或 [`off != 0 && width <= 0]，则定位操作失败。

[:en] Otherwise, if [`way != basic_ios::cur] or [`off != 0], and if the last
operation was output, then update the output sequence and write any unshift
sequence.
[:zh_CN] 否则，若 [`way != basic_ios::cur] 或 [`off != 0]，并且若最近一次操作是
输出操作，则更新其输出序列并写入任何 unshift 序列。

[:en] Next, seek to the new position: if [`width > 0], call
[`fseek(file, width * off, whence)], otherwise call [`fseek(file, 0, whence)].
[:zh_CN] 然后定位到新位置：若 [`width > 0] 则调用
[`fseek(file, width * off, whence)]，否则调用 [`fseek(file, 0, whence)]。

[para:remarks]
[:en] ["The last operation was output] means either the last virtual operation
was overflow or the put buffer is non-empty.
[:zh_CN] “最近一次操作是输出操作”的含义是，或者最近一次虚函数操作是 [`overflow]，
或者其放入缓冲区非空。

[:en] ["Write any unshift sequence] means, if [`width] if less than zero then
call [`a_codecvt.unshift(state, xbuf, xbuf+XSIZE, xbuf_end)] and output the
resulting unshift sequence.
[:zh_CN] “写入任何 unshift 序列”的含义是，如果 [`width] 小于零则调用
[`a_codecvt.unshift(state, xbuf, xbuf+XSIZE, xbuf_end)] 并将其结果 unshift 序列
输出。

[:en] The function determines one of three values for the argument [`whence], of
type [`int], as indicated in [#:tab filebuf.seekoff].
[:zh_CN] 该函数确定 [`int] 类型的实参 [`whence] 的三个值之一，如
[#:tab filebuf.seekoff] 所示。

[table:listing@shape=?x1@code#filebuf.seekoff
    [|  [:en] [`way] Value
        [:zh_CN] [`way] 的值 ]
    [|  [:en] [`stdio] Equivalent
        [:zh_CN] [`stdio] 等价物 ]
]
[|] basic_ios::beg [|] SEEK_SET
[|] basic_ios::cur [|] SEEK_CUR
[|] basic_ios::end [|] SEEK_END
[table:end]

[para:returns]
[:en] A newly constructed [`pos_type] object that stores the resultant stream
position, if possible.
[:zh_CN] 如果可能，返回一个新构造的保存结果流位置的 [`pos_type] 对象。

[:en] If the positioning operation fails, or if the object cannot represent the
resultant stream position, returns [`pos_type(off_type(-1))].
[:zh_CN] 如果定位操作失败，或者该对象无法表示结果流位置，则返回
[`pos_type(off_type(-1))]。
[end:description]

[%@library seekpos[!basic_filebuf]]
[%@library basic_filebuf[!seekpos]]
[codeblock:declaration]
pos_type seekpos(pos_type sp,
                 ios_base::openmode which
                   = ios_base::in | ios_base::out) override;
[codeblock:end]

[begin:description]
[para]
[:en] Alters the file position, if possible, to correspond to the position
stored in [`sp] (as described below).
[:zh_CN] 如果可能，将文件位置改动为对应于 [`sp] 中所存储的位置（如下所述）。

[:en] Altering the file position performs as follows:
[:zh_CN] 对文件位置的改动按如下进行：

[list]
[item]
[:en@~] if [`(om & ios_base::out) != 0], then update the output sequence and write
any unshift sequence;
[:zh_CN@~] 若 [`(om & ios_base::out) != 0]，则更新其输出序列并写入任何 unshift
序列；
[item]
[:en@~] set the file position to [`sp] as if by a call to [`fsetpos];
[:zh_CN@~] 如同以调用 [`fsetpos] 将设置文件位置为 [`sp]；
[item]
[:en@~] if [`(om & ios_base::in) != 0], then update the input sequence;
[:zh_CN@~] 若 [`(om & ios_base::in) != 0]，则更新输入序列；
[list:end]

[:en@~] where [`om] is the open mode passed to the last call to [`open()].
[:zh_CN@~] 其中 [`om] 为传递给最近一次 [`open()] 调用的打开模式。

[:en] The operation fails if [`is_open()] returns [`false].
[:zh_CN] 如果 [`is_open()] 返回 [`false] 则操作失败。

[para]
[:en] If [`sp] is an invalid stream position, or if the function positions
neither sequence, the positioning operation fails.
[:zh_CN] 如果 [`sp] 是无效的流位置，或者该函数并未定位任何序列，则定位操作失败。

[:en] If [`sp] has not been obtained by a previous successful call to one of
the positioning functions ([`seekoff] or [`seekpos]) on the same file the
effects are undefined.
[:zh_CN] 如果 [`sp] 并非由之前对相同文件调用定位函数（[`seekoff] 或 [`seekpos]）
之一所获得的值，则其效果是未定义的。

[para:returns]
[:en] [`sp] on success.
[:zh_CN] 成功时返回 [`sp]。

[:en] Otherwise returns [`pos_type(off_type(-1))].
[:zh_CN] 否则返回 [`pos_type(off_type(-1))]。
[end:description]

[%@library sync[!basic_filebuf]]
[%@library basic_filebuf[!sync]]
[codeblock:declaration]
int sync() override;
[codeblock:end]

[begin:description]
[para:effects]
[:en] If a put area exists, calls [`filebuf::overflow] to write the characters
to the file, then flushes the file as if by calling [`fflush(file)].
[:zh_CN] 如果存在放入区，则调用 [`filebuf::overflow] 以将其中的字符写入文件，
然后如同通过调用 [`fflush(file)] 来冲洗文件。

[:en] If a get area exists, the effect is [%@impldef effect of calling
[`basic_filebuf::sync] when a get area exists] implementation-defined.
[:zh_CN] 如果存在获取区，则其效果是 [%@impldef 当存在获取区时调用
[`basic_filebuf::sync] 的效果]由实现定义的。
[end:description]

[%@library imbue[!basic_filebuf]]
[%@library basic_filebuf[!imbue]]
[codeblock:declaration]
void imbue(const locale& loc) override;
[codeblock:end]

[begin:description]
[para:requires]
[:en] If the file is not positioned at its beginning and the encoding of the
current locale as determined by [`a_codecvt.encoding()] is state-dependent
([#locale.codecvt.virtuals]) then that facet is the same as the corresponding
facet of [`loc].
[:zh_CN] 如果文件并未定位于其起始位置，并且由 [`a_codecvt.encoding()] 所确定的
当前地域的编码是状态相关的（[#locale.codecvt.virtuals]），则该刻面与 [`loc] 的
对应刻面应当相同。

[para:effects]
[:en] Causes characters inserted or extracted after this call to be converted
according to [`loc] until another call of [`imbue].
[:zh_CN] 导致这次调用之后所插入或提取的字符，直到另一次调用 [`imbue] 之前都根据
[`loc] 进行转换。

[para:remarks]
[:en] This may require reconversion of previously converted characters.
[:zh_CN] 可能需要将之前已转换的各个字符进行重新转换。

[:en] This in turn may require the implementation to be able to reconstruct
the original contents of the file.
[:zh_CN] 而这可能又要求实现能够重新构造出文件的原始内容。
[end:description]
