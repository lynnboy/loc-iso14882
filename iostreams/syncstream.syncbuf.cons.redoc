[section#syncstream.syncbuf.cons
    [:en] construction and destruction
    [:zh_CN] 构造和销毁
]

[%@library basic_syncbuf[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
basic_syncbuf(streambuf_type* obuf, const Allocator& allocator);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Constructs the [`basic_syncbuf] object and sets [`wrapped] to [`obuf].
[:zh_CN] 构造 [`basic_syncbuf] 对象并将 [`wrapped] 设置为 [`obuf]。

[para:remarks]
[:en] A copy of [`allocator] is used to allocate memory for internal buffers
holding the associated output.
[:zh_CN] 使用 [`allocator] 的一个副本来为持有关联输出的内部缓冲区分配内存。

[para:throws]
[:en] Nothing unless an exception is thrown by the construction of a mutex or
by memory allocation.
[:zh_CN] 除非互斥体的构造或者内存分配抛出了异常，否则不抛出任何异常。

[para:postconditions]
[:en] [`get_wrapped() == obuf] and [`get_allocator() == allocator] are [`true].
[:zh_CN] [`get_wrapped() == obuf] 和 [`get_allocator() == allocator] 为 [`true]。
[exit:description]

[%@library basic_syncbuf[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
basic_syncbuf(basic_syncbuf&& other);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Move constructs from [`other] ([#moveconstructible]).
[:zh_CN] 从 [`other] 移动构造（[#moveconstructible]）。

[para:postconditions]
[:en] The value returned by [`this->get_wrapped()] is the value returned by
[`other.get_wrapped()] prior to calling this constructor.
[:zh_CN] [`this->get_wrapped()] 所返回的值是调用这个构造函数之前
[`other.get_wrapped()] 所返回的值。

[:en] Output stored in [`other] prior to calling this constructor will be stored
in [`*this] afterwards.
[:zh_CN] 调用这个构造函数之前存储于 [`other] 中的输出自此后存储于 [`*this] 中。

[:en] [`other.rdbuf()->pbase() == other.rdbuf()->pptr()] and
[`other.get_wrapped() == nullptr] are [`true].
[:zh_CN] [`other.rdbuf()->pbase() == other.rdbuf()->pptr()] 和
[`other.get_wrapped() == nullptr] 为 [`true]。

[para:remarks]
[:en] This constructor disassociates [`other] from its wrapped stream buffer,
ensuring destruction of [`other] produces no output.
[:zh_CN] 这个构造函数解除 [`other] 和其所包装的流缓冲区的关联，保证 [`other] 的
销毁时不会产生任何输出。
[exit:description]

[%@library basic_syncbuf[![:en]destructor[:zh_CN]析构函数]]
[codeblock:declaration]
~basic_syncbuf();
[codeblock:end]

[enter:description]
[para:effects]
[:en] Calls [`emit()].
[:zh_CN] 调用 [`emit()]。

[para:throws]
[:en] Nothing.
[:zh_CN] 无。

[:en] If an exception is thrown from [`emit()], the destructor catches and
ignores that exception.
[:zh_CN] 如果 [`emit()] 抛出了异常，则析构函数捕捉并忽略该异常。
[exit:description]
