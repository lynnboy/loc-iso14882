[section#iomanip.syn
    [:en] Header [`<iomanip>] synopsis
    [:zh_CN] 头文件 [`<iomanip>] 纲要
]

[%@hdr@def iomanip]

[codeblock:synopsis]
namespace std {
  // [:en] types [`T1], [`T2], ... are unspecified implementation types \
     [:zh_CN] 类型 [`T1]，[`T2]，……为未指明的实现类型
  [[redoc("*", "n>")]]T1 resetiosflags(ios_base::fmtflags mask);
  [[redoc("*", "n>")]]T2 setiosflags  (ios_base::fmtflags mask);
  [[redoc("*", "n>")]]T3 setbase(int base);
  template<class charT> [[redoc("*", "n>")]]T4 setfill(charT c);
  [[redoc("*", "n>")]]T5 setprecision(int n);
  [[redoc("*", "n>")]]T6 setw(int n);
  template<class moneyT> [[redoc("*", "n>")]]T7 get_money(moneyT& mon, bool intl = false);
  template<class moneyT> [[redoc("*", "n>")]]T8 put_money(const moneyT& mon, bool intl = false);
  template<class charT> [[redoc("*", "n>")]]T9 get_time(struct tm* tmb, const charT* fmt);
  template<class charT> [[redoc("*", "n>")]]T10 put_time(const struct tm* tmb, const charT* fmt);

  template<class charT>
    [[redoc("*", "n>")]]T11 quoted(const charT* s, charT delim = charT('"'), charT escape = charT('\\'));

  template<class charT, class traits, class Allocator>
    [[redoc("*", "n>")]]T12 quoted(const basic_string<charT, traits, Allocator>& s,
                charT delim = charT('"'), charT escape = charT('\\'));

  template<class charT, class traits, class Allocator>
    [[redoc("*", "n>")]]T13 quoted(basic_string<charT, traits, Allocator>& s,
                charT delim = charT('"'), charT escape = charT('\\'));

  template<class charT, class traits>
    [[redoc("*", "n>")]]T14 quoted(basic_string_view<charT, traits> s,
                charT delim = charT('"'), charT escape = charT('\\'));
}
[codeblock:end]
