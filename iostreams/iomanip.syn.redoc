[section#iomanip.syn
    [:en] Header [`<iomanip>] synopsis
    [:zh_CN] 头文件 [`<iomanip>] 纲要
]

[%@hdr@def iomanip]

[codeblock:synopsis]
namespace std {
  // [:en] [#std.manip], standard manipulators \
  [:zh_CN] [#std.manip]，标准操作符
  [[redoc("[=unspec]")]] resetiosflags(ios_base::fmtflags mask);
  [[redoc("[=unspec]")]] setiosflags  (ios_base::fmtflags mask);
  [[redoc("[=unspec]")]] setbase(int base);
  template<class charT> [[redoc("*>")]] setfill(charT c);
  [[redoc("[=unspec]")]] setprecision(int n);
  [[redoc("[=unspec]")]] setw(int n);

  // [:en] [#ext.manip], extended manipulators \
  [:zh_CN] [#ext.manip]，扩展操作符
  template<class moneyT> [[redoc("[=unspec]")]] get_money(moneyT& mon, bool intl = false);
  template<class moneyT> [[redoc("[=unspec]")]] put_money(const moneyT& mon, bool intl = false);
  template<class charT> [[redoc("[=unspec]")]] get_time(tm* tmb, const charT* fmt);
  template<class charT> [[redoc("[=unspec]")]]0 put_time(const tm* tmb, const charT* fmt);

  // [:en] [#quoted.manip], quoted manipulators \
  [:zh_CN] [#quoted.manip]，引号操作符
  template<class charT>
    [[redoc("[=unspec]")]] quoted(const charT* s, charT delim = charT('"'), charT escape = charT('\\'));

  template<class charT, class traits, class Allocator>
    [[redoc("[=unspec]")]] quoted(const basic_string<charT, traits, Allocator>& s,
                        charT delim = charT('"'), charT escape = charT('\\'));

  template<class charT, class traits, class Allocator>
    [[redoc("[=unspec]")]] quoted(basic_string<charT, traits, Allocator>& s,
                        charT delim = charT('"'), charT escape = charT('\\'));

  template<class charT, class traits>
    [[redoc("[=unspec]")]] quoted(basic_string_view<charT, traits> s,
                        charT delim = charT('"'), charT escape = charT('\\'));
}
[codeblock:end]
