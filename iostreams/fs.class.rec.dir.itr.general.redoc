[section#fs.class.rec.dir.itr.general
    [:en] General
    [:zh_CN] 概述
]

[%@lib recursive_directory_iterator]
[para]
[:en] An object of type [`recursive_directory_iterator] provides an iterator for
a sequence of [`directory_entry] elements representing the files in a directory
or in an [?impldef type of a directory-like file] directory-like file type, and
its sub-directories.
[:zh_CN] [`recursive_directory_iterator] 类型的对象为 [`directory_entry] 元素的
序列提供迭代器，它们表示在某个目录中或者某个[?impldef 目录式文件的类型]目录式
文件类型中，以及其各个子目录中的各个文件。

[codeblock:synopsis]
namespace std::filesystem {
  class recursive_directory_iterator {
  public:
    using iterator_category = input_iterator_tag;
    using value_type        = directory_entry;
    using difference_type   = ptrdiff_t;
    using pointer           = const directory_entry*;
    using reference         = const directory_entry&;

    // [:en] [#fs.rec.dir.itr.members], constructors and destructor \
       [:zh_CN] [#fs.rec.dir.itr.members]，构造函数和析构函数
    recursive_directory_iterator() noexcept;
    explicit recursive_directory_iterator(const path& p);
    recursive_directory_iterator(const path& p, directory_options options);
    recursive_directory_iterator(const path& p, directory_options options,
                                 error_code& ec);
    recursive_directory_iterator(const path& p, error_code& ec);
    recursive_directory_iterator(const recursive_directory_iterator& rhs);
    recursive_directory_iterator(recursive_directory_iterator&& rhs) noexcept;
    ~recursive_directory_iterator();

    // [:en] [#fs.rec.dir.itr.members], observers \
       [:zh_CN] [#fs.rec.dir.itr.members]，探查函数
    directory_options  options() const;
    int                depth() const;
    bool               recursion_pending() const;

    const directory_entry& operator*() const;
    const directory_entry* operator->() const;

    // [:en] [#fs.rec.dir.itr.members], modifiers \
       [:zh_CN] [#fs.rec.dir.itr.members]，改动函数
    recursive_directory_iterator&
      operator=(const recursive_directory_iterator& rhs);
    recursive_directory_iterator&
      operator=(recursive_directory_iterator&& rhs) noexcept;

    recursive_directory_iterator& operator++();
    recursive_directory_iterator& increment(error_code& ec);

    void pop();
    void pop(error_code& ec);
    void disable_recursion_pending();

    // [:en] other members as required by [#input.iterators], input iterators \
       [:zh_CN] 由 [#input.iterators]，输入迭代器所要求的其他成员
  };
}
[codeblock:end]

[para]
[:en] Calling [`options], [`depth], [`recursion_pending], [`pop] or
[`disable_recursion_pending] on an iterator that is not dereferenceable results
in undefined behavior.
[:zh_CN] 在不能解引用的迭代器上调用 [`options]、[`depth]、[`recursion_pending]、
[`pop] 或 [`disable_recursion_pending] 将导致未定义的行为。

[para]
[:en] The behavior of a [`recursive_directory_iterator] is the same as a
[`directory_iterator] unless otherwise specified.
[:zh_CN] 除非另行说明，否则 [`recursive_directory_iterator] 的行为与
[`directory_iterator] 相同。

[para]
[begin:note]
[:en] If the directory structure being iterated over contains cycles then the
end iterator might be unreachable.
[:zh_CN] 如果所迭代的目录结构中包含回圈，则可能无法到达末尾迭代器。
[end:note]
