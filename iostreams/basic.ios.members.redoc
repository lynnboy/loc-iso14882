[section#basic.ios.members
    [:en] Member functions
    [:zh_CN] 成员函数
]

[%@library tie[!basic_ios]]
[%@library basic_ios[!tie]]
[codeblock:declaration]
basic_ostream<charT, traits>* tie() const;
[codeblock:end]

[div:description]
[para:returns]
[:en] An output sequence that is [+tied[%]] to (synchronized with) the sequence
controlled by the stream buffer.
[:zh_CN] [+捆绑[%]]到（同步于）由流缓冲区所掌控的序列的输入序列。
[div:end]

[%@library tie[!basic_ios]]
[%@library basic_ios[!tie]]
[codeblock:declaration]
basic_ostream<charT, traits>* tie(basic_ostream<charT, traits>* tiestr);
[codeblock:end]

[div:description]
[para:requires]
[:en] If [`tiestr] is not null, [`tiestr] shall not be reachable by traversing
the linked list of tied stream objects starting from [`tiestr->tie()].
[:zh_CN] 若 [`tiestr] 不为空值，则通过对以 [`tiestr->tie()] 开始的已捆绑流对象的
链表进行遍历不能达到 [`tiestr]。

[para:ensures]
[:en] [`tiestr == tie()].
[:zh_CN] [`tiestr == tie()]。

[para:returns]
[:en] The previous value of [`tie()].
[:zh_CN] [`tie()] 的原值。
[div:end]

[%@library rdbuf[!basic_ios]]
[%@library basic_ios[!rdbuf]]
[codeblock:declaration]
basic_streambuf<charT, traits>* rdbuf() const;
[codeblock:end]

[div:description]
[para:returns]
[:en] A pointer to the [`streambuf] associated with the stream.
[:zh_CN] 指向与该流关联的 [`streambuf] 的指针。
[div:end]

[%@library rdbuf[!basic_ios]]
[%@library basic_ios[!rdbuf]]
[codeblock:declaration]
basic_streambuf<charT, traits>* rdbuf(basic_streambuf<charT, traits>* sb);
[codeblock:end]

[div:description]
[para:ensures]
[:en] [`sb == rdbuf()].
[:zh_CN] [`sb == rdbuf()]。

[para:effects]
[:en] Calls [`clear()].
[:zh_CN] 调用 [`clear()]。

[para:returns]
[:en] The previous value of [`rdbuf()].
[:zh_CN] [`rdbuf()] 的原值。
[div:end]

[%@library imbue[!basic_ios]]
[%@library basic_ios[!imbue]]
[codeblock:declaration]
locale imbue(const locale& loc);
[codeblock:end]

[div:description]
[para:effects]
[:en] Calls [`ios_base::imbue(loc)] ([#ios.base.locales]) and if [`rdbuf() != 0]
then [`rdbuf()->pubimbue(loc)] ([#streambuf.locales]).
[:zh_CN] 调用 [`ios_base::imbue(loc)]（[#ios.base.locales]），然后若
[`rdbuf() != 0] 则调用 [`rdbuf()->pubimbue(loc)]（[#streambuf.locales]）。

[para:returns]
[:en] The prior value of [`ios_base::imbue()].
[:zh_CN] [`ios_base::imbue()] 之前的值。
[div:end]

[%@library narrow[!basic_ios]]
[%@library basic_ios[!narrow]]
[codeblock:declaration]
char narrow(char_type c, char dfault) const;
[codeblock:end]

[div:description]
[para:returns]
[`use_facet<ctype<char_type>>(getloc()).narrow(c, dfault)]
[div:end]

[%@library widen[!basic_ios]]
[%@library basic_ios[!widen]]
[codeblock:declaration]
char_type widen(char c) const;
[codeblock:end]

[div:description]
[para:returns]
[`use_facet<ctype<char_type>>(getloc()).widen(c)]
[div:end]

[%@library fill[!basic_ios]]
[%@library basic_ios[!fill]]
[codeblock:declaration]
char_type fill() const;
[codeblock:end]

[div:description]
[para:returns]
[:en] The character used to pad (fill) an output conversion to the specified
field width.
[:zh_CN] 用于将输出转换填充到指定字段宽度的字符。
[div:end]

[%@library fill[!basic_ios]]
[%@library basic_ios[!fill]]
[codeblock:declaration]
char_type fill(char_type fillch);
[codeblock:end]

[div:description]
[para:ensures]
[:en] [`traits::eq(fillch, fill())].
[:zh_CN] [`traits::eq(fillch, fill())]。

[para:returns]
[:en] The previous value of [`fill()].
[:zh_CN] [`fill()] 的原值。
[div:end]

[%@library copyfmt[!basic_ios]]
[%@library basic_ios[!copyfmt]]
[codeblock:declaration]
basic_ios& copyfmt(const basic_ios& rhs);
[codeblock:end]

[div:description]
[para:effects]
[:en] If [`(this == addressof(rhs))] does nothing.
[:zh_CN] 如果 [`(this == addressof(rhs))] 则不做任何事。

[:en] Otherwise assigns to the member objects of [`*this] the corresponding
member objects of [`rhs] as follows:
[:zh_CN] 否则按如下方式将 [`rhs] 的对应成员对象赋值给 [`*this] 的各成员对象：

[list]
[item]
[:en] calls each registered callback pair [`(fn, idx)] as
[`(*fn)(erase_event, *this, idx)];
[:zh_CN] 以 [`(*fn)(erase_event, *this, idx)] 的形式调用每个已注册的回调对偶
[`(fn, idx)]；

[item]
[:en] then, assigns to the member objects of [`*this] the corresponding member
objects of [`rhs], except that
[:zh_CN] 然后，将 [`rhs] 的对应成员对象赋值给 [`*this] 的各成员对象，但：

[list]
[item]
[:en] [`rdstate()], [`rdbuf()], and [`exceptions()] are left unchanged;
[:zh_CN] 留下 [`rdstate()]、[`rdbuf()] 和 [`exceptions()] 不被改动；

[item]
[:en] the contents of arrays pointed at by [`pword] and [`iword] are copied, not
the pointers themselves;[#:note#fn:$1]
[:zh_CN] 将 [`pword] 和 [`iword] 所指向的数组的内容，而不是两个指针自身进行复制；
[#:note#fn:$1]

[note:foot#fn:$1]
[:en] This suggests an infinite amount of copying, but the implementation can
keep track of the maximum element of the arrays that is nonzero.
[:zh_CN] 这意味着无限量的复制操作，但实现可以跟踪各数组中非零的最大元素。
[note:end]

[:en@~] and
[:zh_CN@~] 以及

[item]
[:en] if any newly stored pointer values in [`*this] point at objects stored
outside the object [`rhs] and those objects are destroyed when [`rhs] is
destroyed, the newly stored pointer values are altered to point at newly
constructed copies of the objects;
[:zh_CN] 如果在 [`*this] 中有任何新存储的指针值指向存储于 [`rhs] 对象之外的对象，
且该对象将在 [`rhs] 被销毁时销毁，则新存储的指针值改为指向为这些对象新构造的
副本；
[list:end]

[item]
[:en] then, calls each callback pair that was copied from [`rhs] as
[`(*fn)(copyfmt_event, *this, idx)];
[:zh_CN] 然后，以 [`(*fn)(copyfmt_event, *this, idx)] 的形式调用从 [`rhs] 复制
来的每个回调对偶；

[item]
[:en] then, calls [`exceptions(rhs.exceptions())].
[:zh_CN] 然后，调用 [`exceptions(rhs.exceptions())]。
[list:end]

[para]
[begin:note]
[:en] The second pass through the callback pairs permits a copied [`pword] value
to be zeroed, or to have its referent deep copied or reference counted, or to
have other special action taken.
[:zh_CN] 进行第二次对回调对偶的调用，允许将所复制的 [`pword] 值清零，或者为其
指代的对象进行深拷贝或引用计数，或者也可以进行其他的特殊动作。
[end:note]

[para:ensures]
[:en] The postconditions of this function are indicated in
[#:tab#basic.ios.copyfmt].
[:zh_CN] 这个函数的后条件在 [#:tab#basic.ios.copyfmt] 中给出。

[table:listing@shape=?x1@fill=column#basic.ios.copyfmt
    [:en] [`basic_ios::copyfmt()] effects
    [:zh_CN] [`basic_ios::copyfmt()] 的效果
    
    [|@code
        [:en] Element
        [:zh_CN] 元素 ]
    [|  [:en] Value
        [:zh_CN] 值 ]
]
[|] rdbuf()
[|] [em unchanged]
[-]

[|] tie()
[|] [`rhs.tie()]
[-]

[|] rdstate()
[|] [em unchanged]
[-]

[|] exceptions()
[|] [`rhs.exceptions()]
[-]

[|] flags()
[|] [`rhs.flags()]
[-]

[|] width()
[|] [`rhs.width()]
[-]

[|] precision()
[|] [`rhs.precision()]
[-]

[|] fill()
[|] [`rhs.fill()]
[-]

[|] getloc()
[|] [`rhs.getloc()]
[-]
[table:end]

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@library move[!basic_ios]]
[%@library basic_ios[!move]]
[codeblock:declaration]
void move(basic_ios& rhs);
void move(basic_ios&& rhs);
[codeblock:end]

[div:description]
[para:ensures]
[:en] [`*this] shall have the state that [`rhs] had before the function call,
except that [`rdbuf()] shall return 0.
[:zh_CN] [`*this] 应当具有进行函数调用前 [`rhs] 的状态，但其 [`rdbuf()] 应当返回
0。

[:en] [`rhs] shall be in a valid but unspecified state, except that
[`rhs.rdbuf()] shall return the same value as it returned before the function
call, and [`rhs.tie()] shall return 0.
[:zh_CN] [`rhs] 应当处于有效但未指明的状态，但 [`rhs.rdbuf()] 应当返回该函数调用
之前其所返回的相同的值，且 [`rhs.tie()] 应当返回 0。
[div:end]

[%@library swap[!basic_ios]]
[%@library basic_ios[!swap]]
[codeblock:declaration]
void swap(basic_ios& rhs) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] The states of [`*this] and [`rhs] shall be exchanged, except that
[`rdbuf()] shall return the same value as it returned before the function call,
and [`rhs.rdbuf()] shall return the same value as it returned before the
function call.
[:zh_CN] [`*this] 和 [`rhs] 的状态应当互换，但 [`rdbuf()] 应当返回该函数调用之前
其所返回的相同的值，且 [`rhs.rdbuf()] 应当返回该函数调用之前其所返回的相同的值。
[div:end]

[%@library set_rdbuf[!basic_ios]]
[%@library basic_ios[!set_rdbuf]]
[codeblock:declaration]
void set_rdbuf(basic_streambuf<charT, traits>* sb);
[codeblock:end]

[div:description]
[para:requires]
[:en] [`sb != nullptr].
[:zh_CN] [`sb != nullptr]。

[para:effects]
[:en] Associates the [`basic_streambuf] object pointed to by [`sb] with this
stream without calling [`clear()].
[:zh_CN] 将由 [`sb] 所指向的 [`basic_streambuf] 对象与这个流关联起来，并不调用
[`clear()]。

[para:ensures]
[:en] [`rdbuf() == sb].
[:zh_CN] [`rdbuf() == sb]。

[para:throws]
[:en] Nothing.
[:zh_CN] 无。
[div:end]
