[section#fs.path.native.obs
    [:en] Native format observers
    [:zh_CN] 本地格式探查函数
]

[para]
[:en] The string returned by all native format observers is in the native
pathname format ([#fs.class.path]).
[:zh_CN] 所有本地格式探查函数所返回的字符串都为本地路径格式（[#fs.class.path]）。

[%@library native[!path]]
[%@library path[!native]]
[codeblock:declaration]
const string_type& native() const noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] The pathname in the native format.
[:zh_CN] 本地格式的路径名。
[exit:description]

[%@library c_str[!path]]
[%@library path[!c_str]]
[codeblock:declaration]
const value_type* c_str() const noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] Equivalent to: [`native().c_str();]
[:zh_CN] 等价于：[`native().c_str();]
[exit:description]

[%@library operator string_type[!path]]
[%@library path[!operator string_type]]
[codeblock:declaration]
operator string_type() const;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`native()].
[:zh_CN] [`native()]。

[para]
[enter:note]
[:en] Conversion to [`string_type] is provided so that an object of class
[`path] can be given as an argument to existing standard library file stream
constructors and open functions.
[:zh_CN] 提供向 [`string_type] 的转换是为了将类 [`path] 的对象用作现存标准程序库
的文件流构造函数和 [`open] 函数的实参。
[exit:note]
[exit:description]

[%@library string[!path]]
[%@library path[!string]]
[codeblock:declaration]
template<class EcharT, class traits = char_traits<EcharT>,
         class Allocator = allocator<EcharT>>
  basic_string<EcharT, traits, Allocator>
    string(const Allocator& a = Allocator()) const;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`native()].
[:zh_CN] [`native()]。

[para:remarks]
[:en] All memory allocation, including for the return value, shall be performed
by [`a].
[:zh_CN] 所有的内存分配（包括为返回值），都应当通过 [`a] 进行。

[:en] Conversion, if any, is specified by [#fs.path.cvt].
[:zh_CN] 其中的转换（如果有）按 [#fs.path.cvt] 所述进行。
[exit:description]

[%@library string[!path]]
[%@library path[!string]]
[%@library wstring[!path]]
[%@library path[!wstring]]
[%@library u8string[!path]]
[%@library path[!u8string]]
[%@library u16string[!path]]
[%@library path[!u16string]]
[%@library u32string[!path]]
[%@library path[!u32string]]
[codeblock:declaration]
std::string string() const;
std::wstring wstring() const;
std::u8string u8string() const;
std::u16string u16string() const;
std::u32string u32string() const;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`native()].
[:zh_CN] [`native()]。

[para:remarks]
[:en] Conversion, if any, is performed as specified by [#fs.path.cvt].
[:zh_CN] 其中的转换（如果有）按 [#fs.path.cvt] 所述进行。
[exit:description]
