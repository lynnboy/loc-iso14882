[section#stringbuf.members
    [:en] Member functions
    [:zh_CN] 成员函数
]

[%@library str[!basic_stringbuf]]
[%@library basic_stringbuf[!str]]
[codeblock:declaration]
basic_string<charT, traits, Allocator> str() const;
[codeblock:end]

[enter:description]
[para:returns]
[:en] A [`basic_string] object whose content is equal to the [`basic_stringbuf]
underlying character sequence.
[:zh_CN] 一个 [`basic_string] 对象，其内容等于 [`basic_stringbuf] 的底层
字符序列。

[:en] If the [`basic_stringbuf] was created only in input mode, the resultant
[`basic_string] contains the character sequence in the range
[=range(eback(),egptr()].
[:zh_CN] 如果该 [`basic_stringbuf] 对象仅以输入模式创建，则结果 [`basic_string]
包含范围 [=range(eback(),egptr()] 中的字符序列。

[:en] If the [`basic_stringbuf] was created with [`which & ios_base::out] being
nonzero then the resultant [`basic_string] contains the character sequence in
the range [=range(pbase(),high_mark], where [`high_mark] represents the position
one past the highest initialized character in the buffer.
[:zh_CN] 如果该 [`basic_stringbuf] 创建时 [`which & ios_base::out] 非零，则结果
[`basic_string] 包含范围 [=range(pbase(),high_mark] 中的字符序列，其中
[`high_mark] 表示越过缓冲区中初始化过的最高位置字符的位置。

[:en] Characters can be initialized by writing to the stream, by constructing
the [`basic_stringbuf] with a [`basic_string], or by calling the
[`str(basic_string)] member function.
[:zh_CN] 可以通过向流中写入，通过以一个 [`basic_string] 构造 [`basic_stringbuf]，
或者通过调用成员函数 [`str(basic_string)]，来初始化各个字符。

[:en] In the case of calling the [`str(basic_string)] member function, all
characters initialized prior to the call are now considered uninitialized
(except for those characters re-initialized by the new [`basic_string]).
[:zh_CN] 对于调用成员函数 [`str(basic_string)] 的情况，进行调用之前所初始化的
全部字符都被认为是未初始化的（除了被新的 [`basic_string] 重新初始化的那些字符）。

[:en] Otherwise the [`basic_stringbuf] has been created in neither input nor
output mode and a zero length [`basic_string] is returned.
[:zh_CN] 否则该 [`basic_stringbuf] 既不是以输入也不是以输出模式创建的，并返回
一个长度为零的 [`basic_string]。
[exit:description]

[%@library str[!basic_stringbuf]]
[%@library basic_stringbuf[!str]]
[codeblock:declaration]
void str(const basic_string<charT, traits, Allocator>& s);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Copies the content of [`s] into the [`basic_stringbuf] underlying
character sequence and initializes the input and output sequences according to
[`mode].
[:zh_CN] 将 [`s] 的内容复制到 [`basic_stringbuf] 的底层字符序列中，并根据
[`mode] 来初始化其输入序列和输出序列。

[para:postconditions]
[:en] If [`mode & ios_base::out] is nonzero, [`pbase()] points to the first
underlying character and [`epptr() >= pbase() + s.size()] holds; in addition, if
[`mode & ios_base::ate] is nonzero, [`pptr() == pbase() + s.size()] holds,
otherwise [`pptr() == pbase()] is [`true].
[:zh_CN] 如果 [`mode & ios_base::out] 非零，则 [`pbase()] 指向第一个底层字符，且
满足 [`epptr() >= pbase() + s.size()]；而且，如果 [`mode & ios_base::ate] 非零，
则满足 [`pptr() == pbase() + s.size()]，否则 [`pptr() == pbase()] 为 [`true]。

[:en] If [`mode & ios_base::in] is nonzero, [`eback()] points to the first
underlying character, and both [`gptr() == eback()] and
[`egptr() == eback() + s.size()] hold.
[:zh_CN] 如果 [`mode & ios_base::in] 非零，则 [`eback()] 指向第一个底层字符，且
同时满足 [`gptr() == eback()] 和 [`egptr() == eback() + s.size()]。
[exit:description]
