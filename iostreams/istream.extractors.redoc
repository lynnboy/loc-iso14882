[section#istream.extractors
    [:] [`basic_istream::operator>>]
]

[%@library operator>>[!basic_istream]]
[%@library basic_istream[!operator>>]]
[codeblock:declaration]
basic_istream<charT, traits>&
  operator>>(basic_istream<charT, traits>& (*pf)(basic_istream<charT, traits>&));
[codeblock:end]

[enter:description]
[para:effects]
[:en] None.
[:zh_CN] 无。

[:en] This extractor does not behave as a formatted input function (as described
in [#istream.formatted.reqmts]).
[:zh_CN] 这个抽取符的行为并不符合格式化输入函数（如 [#istream.formatted.reqmts]
中所述）。

[para:returns]
[:en] [`pf(*this)].[#:note#fn:$1]
[:zh_CN] [`pf(*this)]。[#:note#fn:$1]

[note:foot#fn:$1]
[:en] See, for example, the function signature
[%@library ws] [`ws(basic_istream&)] ([#istream.manip]).
[:zh_CN] 作为例子，参见函数签名
[%@library ws] [`ws(basic_istream&)]（[#istream.manip]）。
[note:end]
[exit:description]

[%@library operator>>[!basic_istream]]
[%@library basic_istream[!operator>>]]
[codeblock:declaration]
basic_istream<charT, traits>&
  operator>>(basic_ios<charT, traits>& (*pf)(basic_ios<charT, traits>&));
[codeblock:end]

[enter:description]
[para:effects]
[:en] Calls [`pf(*this)].
[:zh_CN] 调用 [`pf(*this)]。

[:en] This extractor does not behave as a formatted input function (as described
in [#istream.formatted.reqmts]).
[:zh_CN] 这个抽取符的行为并不符合格式化输入函数（如 [#istream.formatted.reqmts]
中所述）。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[exit:description]

[%@library operator>>[!basic_istream]]
[%@library basic_istream[!operator>>]]
[codeblock:declaration]
basic_istream<charT, traits>& operator>>(ios_base& (*pf)(ios_base&));
[codeblock:end]

[enter:description]
[para:effects]
[:en] Calls [`pf(*this)].[#:note#fn:$2]
[:zh_CN] 调用 [`pf(*this)]。[#:note#fn:$2]

[note:foot#fn:$2]
[:en] See, for example, the function signature [`dec(ios_base&)]
([#basefield.manip]).
[:zh_CN] 作为例子，参见函数签名 [`dec(ios_base&)]（[#basefield.manip]）。
[note:end]

[:en] This extractor does not behave as a formatted input function (as described
in [#istream.formatted.reqmts]).
[:zh_CN] 这个抽取符的行为并不符合格式化输入函数（如 [#istream.formatted.reqmts]
中所述）。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[exit:description]

[%@library operator>>[!basic_istream]]
[%@library basic_istream[!operator>>]]
[codeblock:declaration]
template<class charT, class traits>
  basic_istream<charT, traits>& operator>>(basic_istream<charT, traits>& in, charT* s);
template<class traits>
  basic_istream<char, traits>& operator>>(basic_istream<char, traits>& in, unsigned char* s);
template<class traits>
  basic_istream<char, traits>& operator>>(basic_istream<char, traits>& in, signed char* s);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Behaves like a formatted input member (as described in
[#istream.formatted.reqmts]) of [`in].
[:zh_CN] 行为符合在 [`in] 上的格式化输入函数（如 [#istream.formatted.reqmts] 中
所述）。

[:en] After a [`sentry] object is constructed, [`operator>>] extracts characters
and stores them into successive locations of an array whose first element is
designated by [`s].
[:zh_CN] 构造一个 [`sentry] 对象之后，[`operator>>] 抽取字符，并将它们存储到由
[`s] 代表其首个月色的数组中的连续位置之中。

[:en] If [`width()] is greater than zero, [`n] is [`width()].
[:zh_CN] 若 [`width()] 大于零则 [`n] 为 [`width()]。

[:en] Otherwise [`n] is the number of elements of the largest array of
[`char_type] that can store a terminating [`charT()].
[:zh_CN] 否则 [`n] 为可以存入一个代表终止的 [`charT()] 的最大的 [`char_type]
数组中的元素数。

[:en] [`n] is the maximum number of characters stored.
[:zh_CN] [`n] 是所存储的字符的最大数量。

[para]
[:en] Characters are extracted and stored until any of the following occurs:
[:zh_CN] 字符的抽取和存储持续进行到出现以下情况：
[list]
[item]
[:en@~] [`n-1] characters are stored;
[:zh_CN@~] 已经存储了 [`n-1] 个字符；
[item]
[:en@~] end of file occurs on the input sequence;
[:zh_CN@~] 输入序列遇到了文件末尾；
[item]
[:en@~] letting [`ct] be [`use_facet<ctype<charT>>(in.getloc())],
[`ct.is(ct.space, c)] is [`true].
[:zh_CN@~] 令 [`ct] 为 [`use_facet<ctype<charT>>(in.getloc())]，
[`ct.is(ct.space, c)] 为 [`true]。
[list:end]

[para]
[:en] [`operator>>] then stores a null byte ([`charT()]) in the next position,
which may be the first position if no characters were extracted.
[:zh_CN] [`operator>>] 随后在后续位置存储一个空字节（[`charT()]），当没有抽取到
任何字符时这就是第一个位置。

[:en] [`operator>>] then calls [`width(0)].
[:zh_CN] [`operator>>] 随后调用 [`width(0)]。

[para]
[:en] If the function extracted no characters, it calls [`setstate(failbit)],
which may throw [`ios_base::failure] ([#iostate.flags]).
[:zh_CN] 如果函数没有抽取到任何字符，则它调用 [`setstate(failbit)]，这可能会抛出
[`ios_base::failure]（[#iostate.flags]）。

[para:returns]
[:en] [`in].
[:zh_CN] [`in]。
[exit:description]

[%@library operator>>[!basic_istream]]
[%@library basic_istream[!operator>>]]
[codeblock:declaration]
template<class charT, class traits>
  basic_istream<charT, traits>& operator>>(basic_istream<charT, traits>& in, charT& c);
template<class traits>
  basic_istream<char, traits>& operator>>(basic_istream<char, traits>& in, unsigned char& c);
template<class traits>
  basic_istream<char, traits>& operator>>(basic_istream<char, traits>& in, signed char& c);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Behaves like a formatted input member (as described in
[#istream.formatted.reqmts]) of [`in].
[:zh_CN] 行为符合在 [`in] 上的格式化输入函数（如 [#istream.formatted.reqmts] 中
所述）。

[:en] After a [`sentry] object is constructed a character is extracted from
[`in], if one is available, and stored in [`c].
[:zh_CN] 构造一个 [`sentry] 对象之后，从 [`in] 中抽取一个字符，如果有效则将其
存储到 [`c] 中。

[:en] Otherwise, the function calls [`in.setstate(failbit)].
[:zh_CN] 否则，该函数调用 [`in.setstate(failbit)]。

[para:returns]
[:en] [`in].
[:zh_CN] [`in]。
[exit:description]

[%@library operator>>[!basic_istream]]
[%@library basic_istream[!operator>>]]
[codeblock:declaration]
basic_istream<charT, traits>& operator>>(basic_streambuf<charT, traits>* sb);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Behaves as an unformatted input function ([#istream.unformatted]).
[:zh_CN] 行为符合无格式输入函数（[#istream.unformatted]）。

[:en] If [`sb] is null, calls [`setstate(failbit)], which may throw
[`ios_base::failure] ([#iostate.flags]).
[:zh_CN] 若 [`sb] 为空值，则调用 [`setstate(failbit)]，这可能会抛出
[`ios_base::failure]（[#iostate.flags]）。

[:en] After a sentry object is constructed, extracts characters from [`*this]
and inserts them in the output sequence controlled by [`sb].
[:zh_CN] 构造一个 [`sentry] 对象之后，从 [`*this] 中抽取字符，将它们插入到由
[`sb] 所掌控的输出序列之中。

[:en] Characters are extracted and inserted until any of the following occurs:
[:zh_CN] 字符的抽取和插入持续进行到出现以下情况：

[list]
[item]
[:en@~] end-of-file occurs on the input sequence;
[:zh_CN@~] 输入序列遇到了文件末尾；
[item]
[:en@~] inserting in the output sequence fails (in which case the character to
be inserted is not extracted);
[:zh_CN@~] 向输出序列的插入失败（此时所要插入的字符并未被抽取）；
[item]
[:en@~] an exception occurs (in which case the exception is caught).
[:zh_CN@~] 发生异常（此时异常将被捕获）。
[list:end]

[para]
[:en] If the function inserts no characters, it calls [`setstate(failbit)],
which may throw [`ios_base::failure] ([#iostate.flags]).
[:zh_CN] 如果函数没有插入任何字符，则它调用 [`setstate(failbit)]，这可能会抛出
[`ios_base::failure]（[#iostate.flags]）。

[:en] If it inserted no characters because it caught an exception thrown while
extracting characters from [`*this] and [`failbit] is on in [`exceptions()]
([#iostate.flags]), then the caught exception is rethrown.
[:zh_CN] 如果它没有插入任何字符是因为在从 [`*this] 抽取字符时捕获到了某个异常，
而且 [`failbit] 在 [`exceptions()] 中是打开的（[#iostate.flags]），则重新抛出
所捕获的异常。

[para:returns]
[:en] [`in].
[:zh_CN] [`in]。
[exit:description]
