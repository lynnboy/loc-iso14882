[section#istream.general
    [:en] General
    [:zh_CN] 概述
]

[para]
[:en] When a function is specified with a type placeholder of
[`[^extended-floating-point-type]], the implementation provides overloads
for all cv-unqualified extended floating-point types ([#basic.fundamental])
in lieu of [`[^extended-floating-point-type]].
[:zh_CN] 如果函数被指定为具有类型占位符 [`[^extended-floating-point-type]]，则
实现为所有未被 cv 限定的扩充浮点类型（[#basic.fundamental]）提供重载。

[%@lib basic_istream]
[codeblock:synopsis]
namespace std {
  template<class charT, class traits = char_traits<charT>>
  class basic_istream : virtual public basic_ios<charT, traits> {
  public:
    // [:en] types (inherited from [`basic_ios] ([#ios])) \
    [:zh_CN] 类型（继承于 [`basic_ios]（[#ios]））
    using char_type   = charT;
    using int_type    = typename traits::int_type;
    using pos_type    = typename traits::pos_type;
    using off_type    = typename traits::off_type;
    using traits_type = traits;

    // [:en] [#istream.cons], constructor/destructor \
    [:zh_CN] [#istream.cons]，构造函数/析构函数
    explicit basic_istream(basic_streambuf<charT, traits>* sb);
    virtual ~basic_istream();

    // [:en] [#istream.sentry], prefix/suffix \
    [:zh_CN] [#istream::sentry]，前缀/后缀
    class sentry;

    // [:en] [#istream.formatted], formatted input \
    [:zh_CN] [#istream.formatted]，格式化输入
    basic_istream& operator>>(basic_istream& (*pf)(basic_istream&));
    basic_istream& operator>>(basic_ios<charT, traits>& (*pf)(basic_ios<charT, traits>&));
    basic_istream& operator>>(ios_base& (*pf)(ios_base&));

    basic_istream& operator>>(bool& n);
    basic_istream& operator>>(short& n);
    basic_istream& operator>>(unsigned short& n);
    basic_istream& operator>>(int& n);
    basic_istream& operator>>(unsigned int& n);
    basic_istream& operator>>(long& n);
    basic_istream& operator>>(unsigned long& n);
    basic_istream& operator>>(long long& n);
    basic_istream& operator>>(unsigned long long& n);
    basic_istream& operator>>(float& f);
    basic_istream& operator>>(double& f);
    basic_istream& operator>>(long double& f);
    basic_istream& operator>>([[redoc("^>")]]extended-floating-point-type& f);

    basic_istream& operator>>(void*& p);
    basic_istream& operator>>(basic_streambuf<char_type, traits>* sb);

    // [:en] [#istream.unformatted], unformatted input \
    [:zh_CN] [#istream.unformatted]，无格式输入
    streamsize gcount() const;
    int_type get();
    basic_istream& get(char_type& c);
    basic_istream& get(char_type* s, streamsize n);
    basic_istream& get(char_type* s, streamsize n, char_type delim);
    basic_istream& get(basic_streambuf<char_type, traits>& sb);
    basic_istream& get(basic_streambuf<char_type, traits>& sb, char_type delim);

    basic_istream& getline(char_type* s, streamsize n);
    basic_istream& getline(char_type* s, streamsize n, char_type delim);

    basic_istream& ignore(streamsize n = 1, int_type delim = traits::eof());
    int_type       peek();
    basic_istream& read    (char_type* s, streamsize n);
    streamsize     readsome(char_type* s, streamsize n);

    basic_istream& putback(char_type c);
    basic_istream& unget();
    int sync();

    pos_type tellg();
    basic_istream& seekg(pos_type);
    basic_istream& seekg(off_type, ios_base::seekdir);

  protected:
    // [:en] [#istream.cons], copy/move constructor \
    [:zh_CN] [#istream.cons]，复制/移动构造函数
    basic_istream(const basic_istream&) = delete;
    basic_istream(basic_istream&& rhs);

    // [:en] [#istream.assign], assignment and swap \
    [:zh_CN] [#istream.assign]，赋值与交换
    basic_istream& operator=(const basic_istream&) = delete;
    basic_istream& operator=(basic_istream&& rhs);
    void swap(basic_istream& rhs);
  };

  // [:en] [#istream.extractors], character extraction templates \
  [:zh_CN] [#istream.extractors]，字符提取模板
  template<class charT, class traits>
    basic_istream<charT, traits>& operator>>(basic_istream<charT, traits>&, charT&);
  template<class traits>
    basic_istream<char, traits>& operator>>(basic_istream<char, traits>&, unsigned char&);
  template<class traits>
    basic_istream<char, traits>& operator>>(basic_istream<char, traits>&, signed char&);

  template<class charT, class traits, size_t N>
    basic_istream<charT, traits>& operator>>(basic_istream<charT, traits>&, charT(&)[N]);
  template<class traits, size_t N>
    basic_istream<char, traits>& operator>>(basic_istream<char, traits>&, unsigned char(&)[N]);
  template<class traits, size_t N>
    basic_istream<char, traits>& operator>>(basic_istream<char, traits>&, signed char(&)[N]);
}
[codeblock:end]

[para]
[:en] The class template [`basic_istream] defines a number of member function
signatures that assist in reading and interpreting input from sequences
controlled by a stream buffer.
[:zh_CN] 类模板 [`basic_istream] 定义了一些成员函数签名，以帮助对来自流缓冲区所
掌控的序列的输入进行读取和解释。

[para]
[:en] Two groups of member function signatures share common properties: the
[+:% formatted input functions] (or [+:% extractors]) and the [+:% unformatted
input functions].
[:zh_CN] 两组成员函数签名各自具有共通的属性：[+:% 格式化输入函数]（或
[+:% 提取符]），以及[+:% 无格式输入函数]。

[:en] Both groups of input functions are described as if they obtain (or
[+:% extract]) input [+:% characters] by calling [`rdbuf()->sbumpc()] or
[`rdbuf()->sgetc()].
[:zh_CN] 对这两组输入函数的说明都按照，如同它们是通过调用 [`rdbuf()->sbumpc()]
或 [`rdbuf()->sgetc()] 来获取（或[+:% 提取]）其输入[+:% 字符]的。

[:en] They may use other public members of [`istream].
[:zh_CN] 它们可以使用 [`istream] 的其他公开成员。
