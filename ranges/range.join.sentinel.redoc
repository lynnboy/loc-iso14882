[section#range.join.sentinel
    [:en] Class template [`join_view::[*sentinel]]
    [:zh_CN] 类模板 [`join_view::[*sentinel]]
]

[%@lib join_view::[*sentinel]]
[codeblock:synopsis]
namespace std::ranges {
  template<[[redoc("`:c>")]]input_range V>
    requires [[redoc("`:c>")]]view<V> && [[redoc("`:c>")]]input_range<range_reference_t<V>>
  template<bool Const>
  struct join_view<V>::[[redoc("*>")]]sentinel {
  private:
    using [[redoc("*>")]]Parent = [[redoc("*>")]]maybe-const<Const, join_view>;       // [=expos]
    using [[redoc("*>")]]Base = [[redoc("*>")]]maybe-const<Const, V>;                 // [=expos]
    sentinel_t<[[redoc("*>")]]Base> [[redoc("*>")]]end_ = sentinel_t<[[redoc("*>")]]Base>();         // [=expos]

  public:
    [[redoc("*>")]]sentinel() = default;

    constexpr explicit [[redoc("*>")]]sentinel([[redoc("*>")]]Parent& parent);
    constexpr [[redoc("*>")]]sentinel([[redoc("*>")]]sentinel<!Const> s)
      requires Const && [[redoc("`:c>")]]convertible_to<sentinel_t<V>, sentinel_t<[[redoc("*>")]]Base>>;

    template<bool OtherConst>
      requires [[redoc("`:c>")]]sentinel_for<sentinel_t<[[redoc("*>")]]Base>, iterator_t<[[redoc("*>")]]maybe-const<OtherConst, V>>>
    friend constexpr bool operator==(const [[redoc("*>")]]iterator<OtherConst>& x, const [[redoc("*>")]]sentinel& y);
  };
}
[codeblock:end]

[%@lib@ctor join_view::[*sentinel]]
[codeblock:declaration]
constexpr explicit [[redoc("*>")]]sentinel(Parent& parent);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*end_] with [`ranges::end(parent.[*base_])].
[:zh_CN] 以 [`ranges::end(parent.[*base_])] 初始化 [*end_]。
[div:end]

[%@lib@ctor join_view::[*sentinel]]
[codeblock:declaration]
constexpr [[redoc("*>")]]sentinel([[redoc("*>")]]sentinel<!Const> s)
  requires Const && [[redoc("`:c>")]]convertible_to<sentinel_t<V>, sentinel_t<[[redoc("*>")]]Base>>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*end_] with [`std::move(s.[*end_])].
[:zh_CN] 以 [`std::move(s.[*end_])] 初始化 [*end_]。
[div:end]

[%@lib@member operator==[!join_view::[*sentinel]]]
[codeblock:declaration]
template<bool OtherConst>
  requires [[redoc("`:c>")]]sentinel_for<sentinel_t<[[redoc("*>")]]Base>, iterator_t<[[redoc("*>")]]maybe-const<OtherConst, V>>>
friend constexpr bool operator==(const [[redoc("*>")]]iterator<OtherConst>& x, const [[redoc("*>")]]sentinel& y);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return x.[*outer]() == y.[*end_];]
[:zh_CN] 等价于：[`return x.[*outer]() == y.[*end_];]
[div:end]
