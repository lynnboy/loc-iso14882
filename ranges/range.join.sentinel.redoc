[section#range.join.sentinel
    [:en] Class template [`join_view::sentinel]
    [:zh_CN] 类模板 [`join_view::sentinel]
]

[%@lib join_view::sentinel]
[codeblock:synopsis]
namespace std::ranges {
  template<class V>
  template<bool Const>
  struct join_view<V>::sentinel {
  private:
    using Parent =                                      // [=expos]
      conditional_t<Const, const join_view, join_view>;
    using Base   = conditional_t<Const, const V, V>;    // [=expos]
    sentinel_t<Base> end_ = sentinel_t<Base>();         // [=expos]
  public:
    sentinel() = default;

    constexpr explicit sentinel(Parent& parent);
    constexpr sentinel(sentinel<!Const> s)
      requires Const && convertible_to<sentinel_t<V>, sentinel_t<Base>>;

    friend constexpr bool operator==(const iterator<Const>& x, const sentinel& y);
  };
}
[codeblock:end]

[%@lib@ctor join_view::sentinel]
[codeblock:declaration]
constexpr explicit sentinel(Parent& parent);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [`end_] with [`ranges::end(parent.base_)].
[:zh_CN] 以 [`ranges::end(parent.base_)] 初始化 [`end_]。
[div:end]

[%@lib@ctor join_view::sentinel]
[codeblock:declaration]
constexpr sentinel(sentinel<!Const> s)
  requires Const && convertible_to<sentinel_t<V>, sentinel_t<Base>>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [`end_] with [`std::move(s.end_)].
[:zh_CN] 以 [`std::move(s.end_)] 初始化 [`end_]。
[div:end]

[%@lib@member operator==[!join_view::sentinel]]
[codeblock:declaration]
friend constexpr bool operator==(const iterator<Const>& x, const sentinel& y);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return x.outer_ == y.end_;]
[:zh_CN] 等价于：[`return x.outer_ == y.end_;]
[div:end]
