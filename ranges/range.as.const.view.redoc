[section#range.as.rvalue.view
    [:en] Class template [`as_const_view]
    [:zh_CN] 类模板 [`as_const_view]
]

[codeblock:synopsis]
namespace std::ranges {
  template<[[redoc("`:c>")]]view V>
    requires [[redoc("`:c>")]]input_range<V>
  class as_const_view : public view_interface<as_const_view<V>> {
    V [[redoc("*>")]]base_ = V();      // [=expos]

  public:
    as_const_view() requires [[redoc("`:c>")]]default_initializable<V> = default;
    constexpr explicit as_const_view(V base);

    constexpr V base() const & requires [[redoc("`:c>")]]copy_constructible<V> { return [[redoc("*>")]]base_; }
    constexpr V base() && { return std::move([[redoc("*>")]]base_); }

    constexpr auto begin() requires (![[redoc("*:c>")]]simple-view<V>) { return ranges::cbegin([[redoc("*>")]]base_); }
    constexpr auto begin() const requires [[redoc("`:c>")]]range<const V> { return ranges::cbegin([[redoc("*>")]]base_); }

    constexpr auto end() requires (![[redoc("*:c>")]]simple-view<V>) { return ranges::cend([[redoc("*>")]]base_); }
    constexpr auto end() const requires [[redoc("`:c>")]]range<const V> { return ranges::cend([[redoc("*>")]]base_); }

    constexpr auto size() requires [[redoc("`:c>")]]sized_range<V> { return ranges::size([[redoc("*>")]]base_); }
    constexpr auto size() const requires [[redoc("`:c>")]]sized_range<const V> { return ranges::size([[redoc("*>")]]base_); }
  };

  template<class R>
    as_const_view(R&&) -> as_const_view<views::all_t<R>>;
}
[codeblock:end]

[codeblock:declaration]
constexpr explicit as_const_view(V base);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*base_] with [`std::move(base)].
[:zh_CN] 以 [`std::move(base)] 初始化 [*base_]。
[div:end]
