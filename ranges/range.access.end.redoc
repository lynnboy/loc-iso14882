[section#range.access.end
    [`ranges::end]
]

[%@lib end]

[para]
[:en] The name [`ranges::end] denotes a customization point object
([#customization.point.object]).
[:zh_CN] 名字 [`ranges::end] 代表一个定制化点（[#customization.point.object]）。

[para]
[:en] Given a subexpression [`E] with type [`T], let [`t] be an lvalue that
denotes the reified object for [`E].
[:zh_CN] 给定一个类型为 [`T] 的子表达式 [`E]，令 [`t] 为一个代表 [`E] 的具象化
对象的左值。

[:en] Then:
[:zh_CN] 则有：

[list]
[item]
[:en] If [`E] is an rvalue and [`enable_borrowed_range<remove_cv_t<T>>] is
[`false], [`ranges::end(E)] is ill-formed.
[:zh_CN] 若 [`E] 为左值且 [`enable_borrowed_range<remove_cv_t<T>>] 为 [`false]，
则 [`ranges::end(E)] 非良构。

[item]
[:en] Otherwise, if [`T] is an array type ([#basic.compound]) and
[`remove_all_extents_t<T>] is an incomplete type, [`ranges::end(E)] is
ill-formed with no diagnostic required.
[:zh_CN] 否则，若 [`T] 为数组类型（[#basic.compound]）且
[`remove_all_extents_t<T>] 为不完整类型，则 [`ranges::end(E)] 非良构且无须诊断。

[item]
[:en] Otherwise, if [`T] is an array of unknown bound, [`ranges::end(E)] is
ill-formed.
[:zh_CN] 否则，若 [`T] 为未知边界的数组类型，则 [`ranges::end(E)] 非良构。

[item]
[:en] Otherwise, if [`T] is an array, [`ranges::end(E)] is expression-equivalent
to [`t + extent_v<T>].
[:zh_CN] 否则，若 [`T] 为数组类型，则 [`ranges::end(E)] 按表达式等价于
[`t + extent_v<T>]。

[item]
[:en] Otherwise, if [`[^decay-copy](t.end())] is a valid expression whose type
models [`[`:c sentinel_for]<iterator_t<T>>] then [`ranges::end(E)] is
expression-equivalent to [`[^decay-copy](t.end())].
[:zh_CN] 否则，若 [`[^decay-copy](t.end())] 为其类型构成
[`[`:c sentinel_for]<iterator_t<T>>] 的有效表达式，则 [`ranges::end(E)] 按表达式
等价于 [`[^decay-copy](t.end())]。

[item]
[:en] Otherwise, if [`T] is a class or enumeration type and
[`[^decay-copy](end((t))] is a valid expression whose type models
[`[`:c sentinel_for]<iterator_t<T>>] with overload resolution performed in a
context in which unqualified lookup for [`end] finds only the declarations
[:zh_CN] 否则，若 [`T] 为类或枚举类型，且在某个对 [`end] 进行无限定查找仅会找到
以下声明式的语境中进行重载决议的条件下 [`[^decay-copy](end((t))] 为有效表达式
且其类型构成 [`[`:c sentinel_for]<iterator_t<T>>]，
[codeblock]
void end(auto&) = delete;
void end(const auto&) = delete;
[codeblock:end]
[:en@~] then [`ranges::end(E)] is expression-equivalent to
[`[^decay-copy](end(t))] with overload resolution performed in the above
context.
[:zh_CN@~] 则 [`ranges::end(E)] 在上述语境中进行重载决议的条件下按表达式等价于
[`[^decay-copy](end(t))]。

[item]
[:en] Otherwise, [`ranges::end(E)] is ill-formed.
[:zh_CN] 否则，[`ranges::end(E)] 非良构。
[list:end]

[para]
[begin:note]
[:en] Diagnosable ill-formed cases above result in substitution failure when
[`ranges::end(E)] appears in the immediate context of a template instantiation.
[:zh_CN] 以上各种可诊断的非良构情况，当 [`ranges::end(E)] 出现在某个模板实例化
的直接语境中时会导致替换失败。
[end:note]
