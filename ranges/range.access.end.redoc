[section#range.access.end
    [`ranges::end]
]

[para]
[:en] The name [`ranges::end] denotes a customization point object
([#customization.point.object]).
[:zh_CN] 名字 [`ranges::end] 代表一个定制化点（[#customization.point.object]）。

[:en] The expression [`ranges::end(E)] for some subexpression [`E] is
expression-equivalent to:
[:zh_CN] 对于某个子表达式 [`E]，表达式 [`ranges::end(E)] 按表达式等价于：

[list]
[item]
[:en] [`E + extent_v<T>] if [`E] is an lvalue of array type ([#basic.compound])
[`T].
[:zh_CN] 若 [`E] 为数组类型（[#basic.compound]）[`T] 的左值，则为
[`E + extent_v<T>]。

[item]
[:en] Otherwise, if [`E] is an lvalue, [`[*DECAY_COPY](E.end())] if it is
a valid expression and its type [`S] models
[`Sentinel<decltype(ranges::begin(E))>].
[:zh_CN] 否则，若 [`E] 为左值，则当 [`[*DECAY_COPY](E.end())] 为有效表达式且其
类型 [`S] 构成 [`Sentinel<decltype(ranges::begin(E))>] 时为该表达式。

[item]
[:en] Otherwise, [`[*DECAY_COPY](end(E))] if it is a valid expression and its
type [`S] models [`Sentinel<decltype(ranges::begin(E))>] with overload
resolution performed in a context that includes the declarations:
[:zh_CN] 否则，当 [`[*DECAY_COPY](end(E))] 为有效表达式且其类型 [`S] 构成
[`Sentinel<decltype(ranges::begin(E))>] 时，在包含下列声明式：
[codeblock:notation]
template<class T> void end(T&&) = delete;
template<class T> void end(initializer_list<T>&&) = delete;
[codeblock:end]
[:en@~] and does not include a declaration of [`ranges::end].
[:zh_CN@~] 但不包含 [`ranges::end] 的声明式的语境中实施重载决议，则为该表达式。

[item]
[:en] Otherwise, [`ranges::end(E)] is ill-formed.
[:zh_CN] 否则，[`ranges::end(E)] 非良构。

[enter:note]
[:en] This case can result in substitution failure when [`ranges::end(E)]
appears in the immediate context of a template instantiation.
[:zh_CN] 这种情况下，当 [`ranges::end(E)] 出现在某个模板实例化的直接语境中时
会导致替换失败。
[exit:note]
[list:end]

[para]
[enter:note]
[:en] Whenever [`ranges::end(E)] is a valid expression, the types [`S] and [`I]
of [`ranges::end(E)] and [`ranges::begin(E)] model [`Sentinel<S, I>].
[:zh_CN] 只要 [`ranges::end(E)] 是有效表达式，则 [`ranges::end(E)] 和
[`ranges::begin(E)] 的类型 [`S] 和 [`I] 就构成 [`Sentinel<S, I>]。
[exit:note]
