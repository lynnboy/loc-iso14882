[section#range.join.with.view
    [:en] Class template [`join_with_view]
    [:zh_CN] 类模板 [`join_with_view]
]

[codeblock:synopsis]
namespace std::ranges {
  template<class R, class P>
  concept [[redoc("*:c@def>")]]compatible-joinable-ranges =            // [=expos]
      [[redoc("`:c>")]]common_with<range_value_t<R>, range_value_t<P>> &&
      [[redoc("`:c>")]]common_reference_with<range_reference_t<R>, range_reference_t<P>> &&
      [[redoc("`:c>")]]common_reference_with<range_rvalue_reference_t<R>, range_rvalue_reference_t<P>>;

  template<class R>
  concept [[redoc("*:c@def>")]]bidirectional-common = [[redoc("`:c>")]]bidirectional_range<R> && [[redoc("`:c>")]]common_range<R>;    // \expos

  template<[[redoc("`:c>")]]input_range V, [[redoc("`:c>")]]forward_range Pattern>
    requires [[redoc("`:c>")]]view<V> && [[redoc("`:c>")]]input_range<range_reference_t<V>>
          && [[redoc("`:c>")]]view<Pattern>
          && [[redoc("*:c>")]]compatible-joinable-ranges<range_reference_t<V>, Pattern>
  class join_with_view : public view_interface<join_with_view<V, Pattern>> {
    using [[redoc("*>")]]InnerRng = range_reference_t<V>;                  // [=expos]

    V [[redoc("*>")]]base_ = V();                                          // [=expos]
    [[redoc("*>")]]non-propagating-cache<remove_cv_t<[[redoc("*>")]]InnerRng>> [[redoc("*>")]]inner_;   // [:en] [=expos], present only \
                                                                                                [:zh_CN] [=expos]，
                                                            // [:en@~] when [`!is_reference_v<[*InnerRng]>] \
                                                            [:zh_CN@~] 仅 [`!is_reference_v<[*InnerRng]>] 时提供
    Pattern [[redoc("*>")]]pattern_ = Pattern();                           // [=expos]

    // [:en] [#range.join.with.iterator], class template [`join_with_view::[*iterator]] \
    [:zh_CN] [#range.join.with.iterator]，类模板 [`join_with_view::[*iterator]]
    template<bool Const> struct [[redoc("*>")]]iterator;                   // [=expos]

    // [:en] [#range.join.with.sentinel], class template [`join_with_view::[*sentinel]] \
    [:zh_CN] [#range.join.with.sentinel]，类模板 [`join_with_view::[*sentinel]]
    template<bool Const> struct [[redoc("*>")]]sentinel;                   // [=expos]

  public:
    join_with_view()
      requires [[redoc("`:c>")]]default_initializable<V> && [[redoc("`:c>")]]default_initializable<Pattern> = default;

    constexpr join_with_view(V base, Pattern pattern);

    template<[[redoc("`:c>")]]input_range R>
      requires [[redoc("`:c>")]]constructible_from<V, views::all_t<R>> &&
               [[redoc("`:c>")]]constructible_from<Pattern, single_view<range_value_t<[[redoc("*>")]]InnerRng>>>
    constexpr join_with_view(R&& r, range_value_t<@\exposid{InnerRng}@> e);

    constexpr V base() const & requires [[redoc("`:c>")]]copy_constructible<V> { return [[redoc("*>")]]base_; }
    constexpr V base() && { return std::move([[redoc("*>")]]base_); }

    constexpr auto begin() {
      constexpr bool use_const =
        [[redoc("*:c>")]]simple-view<V> && is_reference_v<[[redoc("*>")]]InnerRng> && [[redoc("*:c>")]]simple-view<Pattern>;
      return [[redoc("*>")]]iterator<use_const>{*this, ranges::begin([[redoc("*>")]]base_)};
    }
    constexpr auto begin() const
      requires [[redoc("`:c>")]]input_range<const V> &&
               [[redoc("`:c>")]]forward_range<const Pattern> &&
               is_reference_v<range_reference_t<const V>> {
      return [[redoc("*>")]]iterator<true>{*this, ranges::begin([[redoc("*>")]]base_)};
    }

    constexpr auto end() {
      if constexpr ([[redoc("`:c>")]]forward_range<V> &&
                    is_reference_v<[[redoc("*>")]]InnerRng> && [[redoc("`:c>")]]forward_range<[[redoc("*>")]]InnerRng> &&
                    [[redoc("`:c>")]]common_range<V> && [[redoc("`:c>")]]common_range<[[redoc("*>")]]InnerRng>)
        return [[redoc("*>")]]iterator<[[redoc("*:c>")]]simple-view<V> && [[redoc("*:c>")]]simple-view<Pattern>>{*this, ranges::end([[redoc("*>")]]base_)};
      else
        return [[redoc("*>")]]sentinel<[[redoc("*:c>")]]simple-view<V> && [[redoc("*:c>")]]simple-view<Pattern>>{*this};
    }
    constexpr auto end() const
      requires [[redoc("`:c>")]]input_range<const V> && [[redoc("`:c>")]]forward_range<const Pattern> &&
               is_reference_v<range_reference_t<const V>> {
      using InnerConstRng = range_reference_t<const V>;
      if constexpr ([[redoc("`:c>")]]forward_range<const V> && [[redoc("`:c>")]]forward_range<InnerConstRng> &&
                    [[redoc("`:c>")]]common_range<const V> && [[redoc("`:c>")]]common_range<InnerConstRng>)
        return [[redoc("*>")]]iterator<true>{*this, ranges::end([[redoc("*>")]]base_)};
      else
        return [[redoc("*>")]]sentinel<true>{*this};
    }
  };

  template<class R, class P>
    join_with_view(R&&, P&&) -> join_with_view<views::all_t<R>, views::all_t<P>>;

  template<[[redoc("`:c>")]]input_range R>
    join_with_view(R&&, range_value_t<range_reference_t<R>>)
      -> join_with_view<views::all_t<R>, single_view<range_value_t<range_reference_t<R>>>>;
}
[codeblock:end]

[codeblock:declaration]
constexpr join_with_view(V base, Pattern pattern);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*base_] with [`std::move(base)] and [*pattern_] with
[`std::move(pattern)].
[:zh_CN] 以 [`std::move(base)] 初始化 [*base_]，并以 [`std::move(pattern)]
初始化 [*pattern_]。
[div:end]

[codeblock:declaration]
template<[[redoc("`:c>")]]input_range R>
  requires [[redoc("`:c>")]]constructible_from<V, views::all_t<R>> &&
           [[redoc("`:c>")]]constructible_from<Pattern, single_view<range_value_t<[[redoc("*>")]]InnerRng>>>
constexpr join_with_view(R&& r, range_value_t<[[redoc("*>")]]InnerRng> e);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*base_] with [`views::all(std::forward<R>(r))] and [`pattern_]
with [`views::single(std::move(e))].
[:zh_CN] 以 [`views::all(std::forward<R>(r))] 初始化 [*base_]，并以
[`views::single(std::move(e))] 初始化 [`pattern_]。
[div:end]
