[section#range.split.outer.value
    [:en] Class [`split_view::outer_iterator::value_type]
    [:zh_CN] 类 [`split_view::outer_iterator::value_type]
]

[codeblock:synopsis]
namespace std::ranges {
  template<class V, class Pattern>
  template<bool Const>
  struct split_view<V, Pattern>::outer_iterator<Const>::value_type {
  private:
    outer_iterator i_ = outer_iterator();               // [=Expos]
  public:
    value_type() = default;
    constexpr explicit value_type(outer_iterator i);

    constexpr inner_iterator<Const> begin() const;
    constexpr default_sentinel_t end() const;
  };
}
[codeblock:end]

[%@library value_type[!split_view::outer_iterator::value_type]]
[codeblock:declaration]
constexpr explicit value_type(outer_iterator i);
[codeblock:end]

[begin:description]
[para:effects]
[:en] Initializes [`i_] with [`i].
[:zh_CN] 以 [`i] 初始化 [`i_]。
[end:description]

[%@library begin[!split_view::outer_iterator::value_type]]
[codeblock:declaration]
constexpr inner_iterator<Const> begin() const;
[codeblock:end]

[begin:description]
[para:effects]
[:en] Equivalent to: [`return inner_iterator<Const>{i_};]
[:zh_CN] 等价于：[`return inner_iterator<Const>{i_};]
[end:description]

[%@library end[!split_view::outer_iterator::value_type]]
[codeblock:declaration]
constexpr default_sentinel_t end() const;
[codeblock:end]

[begin:description]
[para:effects]
[:en] Equivalent to: [`return default_sentinel;]
[:zh_CN] 等价于：[`return default_sentinel;]
[end:description]
