[section#range.common.view
    [:en] Class template [`common_view]
    [:zh_CN] 类模板 [`common_view]
]

[codeblock:synopsis]
namespace std::ranges {
  template<view V>
    requires (!common_range<V>)
  class common_view : public view_interface<common_view<V>> {
  private:
    V base_ = V();  // [=expos]
  public:
    common_view() = default;

    constexpr explicit common_view(V r);

    template<viewable_range R>
      requires (!common_range<R> && constructible_from<V, all_view<R>>)
    constexpr explicit common_view(R&& r);

    constexpr V base() const;

    constexpr auto size() requires sized_range<V> {
      return ranges::size(base_);
    }
    constexpr auto size() const requires sized_range<const V> {
      return ranges::size(base_);
    }

    constexpr auto begin() {
      if constexpr (random_access_range<V> && sized_range<V>)
        return ranges::begin(base_);
      else
        return common_iterator<iterator_t<V>, sentinel_t<V>>(ranges::begin(base_));
    }

    constexpr auto begin() const requires range<const V> {
      if constexpr (random_access_range<const V> && sized_range<const V>)
        return ranges::begin(base_);
      else
        return common_iterator<iterator_t<const V>, sentinel_t<const V>>(ranges::begin(base_));
    }

    constexpr auto end() {
      if constexpr (random_access_range<V> && sized_range<V>)
        return ranges::begin(base_) + ranges::size(base_);
      else
        return common_iterator<iterator_t<V>, sentinel_t<V>>(ranges::end(base_));
    }

    constexpr auto end() const requires range<const V> {
      if constexpr (random_access_range<const V> && sized_range<const V>)
        return ranges::begin(base_) + ranges::size(base_);
      else
        return common_iterator<iterator_t<const V>, sentinel_t<const V>>(ranges::end(base_));
    }
  };

  template<class R>
    common_view(R&&) -> common_view<all_view<R>>;
}
[codeblock:end]

[%@library common_view[!common_view]]
[codeblock:declaration]
constexpr explicit common_view(V base);
[codeblock:end]

[begin:description]
[para:effects]
[:en] Initializes [`base_] with [`std::move(base)].
[:zh_CN] 以 [`std::move(base)] 初始化 [`base_]。
[end:description]

[%@library common_view[!common_view]]
[codeblock:declaration]
template<viewable_range R>
  requires (!common_range<R> && constructible_from<V, all_view<R>>)
constexpr explicit common_view(R&& r);
[codeblock:end]

[begin:description]
[para:effects]
[:en] Initializes [`base_] with [`views::all(std::forward<R>(r))].
[:zh_CN] 以 [`views::all(std::forward<R>(r))] 初始化 [`base_]。
[end:description]

[%@library base[!common_view]]
[codeblock:declaration]
constexpr V base() const;
[codeblock:end]

[begin:description]
[para:effects]
[:en] Equivalent to: [`return base_;]
[:zh_CN] 等价于：[`return base_;]
[end:description]
