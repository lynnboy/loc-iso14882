[section#range.common.view
    [:en] Class template [`common_view]
    [:zh_CN] 类模板 [`common_view]
]

[%@lib common_view]
[%@lib@member base[!common_view]]
[%@lib@member size[!common_view]]
[%@lib@member begin[!common_view]]
[%@lib@member end[!common_view]]
[codeblock:synopsis]
namespace std::ranges {
  template<[[redoc("`:c>")]]view V>
    requires (!common_range<V> && [[redoc("`:c>")]]copyable<iterator_t<V>>)
  class common_view : public view_interface<common_view<V>> {
  private:
    V [[redoc("*>")]]base_ = V();  // [=expos]
  public:
    common_view() = default;

    constexpr explicit common_view(V r);

    constexpr V base() const& requires [[redoc("`:c>")]]copy_constructible<V> { return [[redoc("*>")]]base_; }
    constexpr V base() && { return std::move([[redoc("*>")]]base_); }

    constexpr auto begin() {
      if constexpr ([[redoc("`:c>")]]random_access_range<V> && [[redoc("`:c>")]]sized_range<V>)
        return ranges::begin([[redoc("*>")]]base_);
      else
        return common_iterator<iterator_t<V>, sentinel_t<V>>(ranges::begin([[redoc("*>")]]base_));
    }

    constexpr auto begin() const requires range<const V> {
      if constexpr ([[redoc("`:c>")]]random_access_range<const V> && [[redoc("`:c>")]]sized_range<const V>)
        return ranges::begin([[redoc("*>")]]base_);
      else
        return common_iterator<iterator_t<const V>, sentinel_t<const V>>(ranges::begin([[redoc("*>")]]base_));
    }

    constexpr auto end() {
      if constexpr ([[redoc("`:c>")]]random_access_range<V> && [[redoc("`:c>")]]sized_range<V>)
        return ranges::begin([[redoc("*>")]]base_) + ranges::size([[redoc("*>")]]base_);
      else
        return common_iterator<iterator_t<V>, sentinel_t<V>>(ranges::end([[redoc("*>")]]base_));
    }

    constexpr auto end() const requires range<const V> {
      if constexpr ([[redoc("`:c>")]]random_access_range<const V> && [[redoc("`:c>")]]sized_range<const V>)
        return ranges::begin([[redoc("*>")]]base_) + ranges::size([[redoc("*>")]]base_);
      else
        return common_iterator<iterator_t<const V>, sentinel_t<const V>>(ranges::end([[redoc("*>")]]base_));
    }

    constexpr auto size() requires sized_range<V> {
      return ranges::size([[redoc("*>")]]base_);
    }
    constexpr auto size() const requires sized_range<const V> {
      return ranges::size([[redoc("*>")]]base_);
    }
  };

  template<class R>
    common_view(R&&) -> common_view<views::all_t<R>>;
}
[codeblock:end]

[%@lib@ctor common_view]
[codeblock:declaration]
constexpr explicit common_view(V base);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*base_] with [`std::move(base)].
[:zh_CN] 以 [`std::move(base)] 初始化 [*base_]。
[div:end]
