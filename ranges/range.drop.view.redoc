[section#range.drop.view
    [:en] Class template [`drop_view]
    [:zh_CN] 类模板 [`drop_view]
]

[%@lib drop_view]
[%@lib@member base[!drop_view]]
[%@lib@member end[!drop_view]]
[%@lib@member size[!drop_view]]
[codeblock:synopsis]
namespace std::ranges {
  template<view V>
  class drop_view : public view_interface<drop_view<V>> {
  public:
    drop_view() = default;
    constexpr drop_view(V base, range_difference_t<V> count);

    constexpr V base() const& requires copy_constructible<V> { return base_; }
    constexpr V base() && { return std::move(base_); }

    constexpr auto begin()
      requires (!([[redoc("^>")]]simple-view<V> && random_access_range<V>));
    constexpr auto begin() const
      requires random_access_range<const V>;

    constexpr auto end()
      requires (![[redoc("^>")]]simple-view<V>)
    { return ranges::end(base_); }

    constexpr auto end() const
      requires range<const V>
    { return ranges::end(base_); }

    constexpr auto size()
      requires sized_range<V>
    {
      const auto s = ranges::size(base_);
      const auto c = static_cast<decltype(s)>(count_);
      return s < c ? 0 : s - c;
    }

    constexpr auto size() const
      requires sized_range<const V>
    {
      const auto s = ranges::size(base_);
      const auto c = static_cast<decltype(s)>(count_);
      return s < c ? 0 : s - c;
    }
  private:
    V base_;                                    // [=expos]
    range_difference_t<V> count_;               // [=expos]
  };

  template<class R>
    drop_view(R&&, range_difference_t<R>) -> drop_view<all_view<R>>;
}
[codeblock:end]

[%@lib@ctor drop_view]
[codeblock:declaration]
constexpr drop_view(V base, range_difference_t<V> count);
[codeblock:end]

[div:description]
[para:expects]
[:en] [`count >= 0] is [`true].
[:zh_CN] [`count >= 0] 为 [`true]。

[para:effects]
[:en] Initializes [`base_] with [`std::move(base)] and [`count_] with [`count].
[:zh_CN] 以 [`std::move(base)] 初始化 [`base_] 并以 [`count] 初始化 [`count_]。
[div:end]

[%@lib@member begin[!drop_view]]
[codeblock:declaration]
constexpr auto begin()
  requires (!([[redoc("^>")]]simple-view<V> && random_access_range<V>));
constexpr auto begin() const
  requires random_access_range<const V>;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`ranges::next(ranges::begin(base_), count_, ranges::end(base_))].
[:zh_CN] [`ranges::next(ranges::begin(base_), count_, ranges::end(base_))]。

[para:remarks]
[:en] In order to provide the amortized constant-time complexity required by the
[`range] concept when [`drop_view] models [`:c forward_range], the first
overload caches the result within the [`drop_view] for use on subsequent calls.
[:zh_CN] 为了在 [`drop_view] 构成 [`:c forward_range] 时提供由 [`range] 概念所
要求的均摊常量时间复杂度，第一个重载在 [`drop_view] 中将其结果进行缓存以在后续的
调用中使用。

[begin:note]
[:en] Without this, applying a [`reverse_view] over a [`drop_view] would have
quadratic iteration complexity.
[:zh_CN] 不这样的话，在 [`drop_view] 上运用 [`reverse_view] 将具有平方级的循环
复杂度。
[end:note]
[div:end]
