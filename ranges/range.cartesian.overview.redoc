[section#range.as.rvalue.overview
    [:en] Overview
    [:zh_CN] 概述
]

[%@lib cartesian_product_view]
[para]
[:en] [`cartesian_product_view] takes any non-zero number of ranges [$n] and
produces a view of tuples calculated by the [$n]-ary cartesian product of the
provided ranges.
[:zh_CN] [`cartesian_product_view] 接受任意非零个范围 [$n] 并产生计算所提供范围
的 [$n] 元笛卡尔积所得的元组的视图。

[para]
[:en] The name [`views::cartesian_product] denotes a customization point object
([#customization.point.object]).
[:zh_CN] 名字 [`views::cartesian_product] 代表一个定制化点对象
（[#customization.point.object]）。

[:en] Given a pack of subexpressions [`Es], the expression
[`views::cartesian_product(Es...)] is expression-equivalent to
[:zh_CN] 给定子表达式的包组 [`Es]，表达式 [`views::cartesian_product(Es...)]
按表达式等价于：

[list]
[item]
[:en] [`views::single(tuple())] if [`Es] is an empty pack,
[:zh_CN] 如果 [`Es] 是空包组，则为 [`views::single(tuple())]，
[item]
[:en] otherwise, [`cartesian_product_view<views::all_t<decltype((Es))>...>(Es...)].
[:zh_CN] 否则，为 [`cartesian_product_view<views::all_t<decltype((Es))>...>(Es...)]。
[list:end]

[para]
[begin:example]
[codeblock]
vector<int> v { 0, 1, 2 };
for (auto&& [a, b, c] : views::cartesian_product(v, v, v)) {
  cout << a << ' ' << b << ' ' << c << '\n';
}
// [:en] The above prints \
[:zh_CN] 以上代码打印出
// [`0 0 0]
// [`0 0 1]
// [`0 0 2]
// [`0 1 0]
// [`0 1 1]
// ...
[codeblock:end]
[end:example]
