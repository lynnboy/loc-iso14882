[section#range.take.while.overview
    [:en] Overview
    [:zh_CN] 概述
]

[para]
[:en] Given a unary predicate [`pred] and a view [`r], [`take_while_view]
produces a view of the range [=range(begin(r),ranges::find_if_not(r, pred))].
[:zh_CN] 给定一元谓词 [`pred] 和一个视图 [`r]，[`take_while_view] 产生范围
[=range(begin(r),ranges::find_if_not(r, pred))] 的视图。

[para]
[%@lib@member take_while[!views]]
[:en] The name [`views::take_while] denotes a range adaptor object
([#range.adaptor.object]).
[:zh_CN] 名字 [`views::take_while] 代表一个范围适配器对象
（[#range.adaptor.object]）。

[:en] Given subexpressions [`E] and [`F], the expression
[`views::take_while(E, F)] is expression-equivalent to [`take_while_view(E, F)].
[:zh_CN] 给定子表达式 [`E] 和 [`F]，表达式 [`views::take_while(E, F)] 按表达式
等价于 [`take_while_view(E, F)]。

[para]
[begin:example]
[codeblock]
auto input = istringstream{"0 1 2 3 4 5 6 7 8 9"};
auto small = [](const auto x) noexcept { return x < 5; };
auto small_ints = views::istream<int>(input) | views::take_while(small);
for (const auto i : small_ints) {
  cout << i << ' ';                             // [:en] prints [`0 1 2 3 4] \
                                                [:zh_CN] 打印：[`0 1 2 3 4]
}
auto i = 0;
input >> i;
cout << i;                                      // [:en] prints \tcode{6} \
                                                [:zh_CN] 打印：[`6]
[codeblock:end]
[end:example]
