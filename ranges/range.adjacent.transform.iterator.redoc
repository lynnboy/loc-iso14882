[section#range.adjacent.transform.iterator
    [:en] Class template [`adjacent_transform_view::[*iterator]]
    [:zh_CN] 类 template [`adjacent_transform_view::[*iterator]]
]

[codeblock:synopsis]
namespace std::ranges {
  template<[[redoc("`:c>")]]forward_range V, [[redoc("`:c>")]]move_constructible F, size_t N>
    requires [[redoc("`:c>")]]view<V> && (N > 0) && is_object_v<F> &&
             [[redoc("`:c>")]]regular_invocable<F&, [[redoc("*>")]]REPEAT(range_reference_t<V>, N)...> &&
             [[redoc("*:c>")]]can-reference<invoke_result_t<F&, [[redoc("*>")]]REPEAT(range_reference_t<V>, N)...>>
  template<bool Const>
  class adjacent_transform_view<V, F, N>::[[redoc("*>")]]iterator {
    using [[redoc("*>")]]Parent = [[redoc("*>")]]maybe-const<Const, adjacent_transform_view>;         // [=expos]
    using [[redoc("*>")]]Base = [[redoc("*>")]]maybe-const<Const, V>;                                 // [=expos]
    [[redoc("*>")]]Parent* [[redoc("*>")]]parent_ = nullptr;                                          // [=expos]
    [[redoc("*>")]]inner-iterator<Const> [[redoc("*>")]]inner_;                                       // [=expos]

    constexpr [[redoc("*>")]]iterator([[redoc("*>")]]Parent& parent, [[redoc("*>")]]inner-iterator<Const> inner);    // [=expos]

  public:
    using iterator_category = [[redoc("[=seebelow]")]];
    using iterator_concept  = typename [[redoc("*>")]]inner-iterator<Const>::iterator_concept;
    using value_type =
      remove_cvref_t<invoke_result_t<[[redoc("*>")]]maybe-const<Const, F>&,
                                     [[redoc("*>")]]REPEAT(range_reference_t<[[redoc("*>")]]Base>, N)...>>;
    using difference_type = range_difference_t<[[redoc("*>")]]Base>;

    [[redoc("*>")]]iterator() = default;
    constexpr [[redoc("*>")]]iterator([[redoc("*>")]]iterator<!Const> i)
      requires Const && [[redoc("`:c>")]]convertible_to<[[redoc("*>")]]inner-iterator<false>, [[redoc("*>")]]inner-iterator<Const>>;

    constexpr decltype(auto) operator*() const noexcept([[redoc("[=seebelow]")]]);
    constexpr [[redoc("*>")]]iterator& operator++();
    constexpr [[redoc("*>")]]iterator operator++(int);
    constexpr [[redoc("*>")]]iterator& operator--() requires [[redoc("`:c>")]]bidirectional_range<[[redoc("*>")]]Base>;
    constexpr [[redoc("*>")]]iterator operator--(int) requires [[redoc("`:c>")]]bidirectional_range<[[redoc("*>")]]Base>;
    constexpr [[redoc("*>")]]iterator& operator-=(difference_type x) requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
    constexpr [[redoc("*>")]]iterator& operator+=(difference_type x) requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;

    constexpr decltype(auto) operator[](difference_type n) const
      requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;

    friend constexpr bool operator==(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y);
    friend constexpr bool operator<(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
      requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
    friend constexpr bool operator>(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
      requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
    friend constexpr bool operator<=(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
      requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
    friend constexpr bool operator>=(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
      requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
    friend constexpr auto operator<=>(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
      requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base> && [[redoc("`:c>")]]three_way_comparable<[[redoc("*>")]]inner-iterator<Const>>;

    friend constexpr [[redoc("*>")]]iterator operator+(const [[redoc("*>")]]iterator& i, difference_type n)
      requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
    friend constexpr [[redoc("*>")]]iterator operator+(difference_type n, const [[redoc("*>")]]iterator& i)
      requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
    friend constexpr [[redoc("*>")]]iterator operator-(const [[redoc("*>")]]iterator& i, difference_type n)
      requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
    friend constexpr difference_type operator-(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
      requires [[redoc("`:c>")]]sized_sentinel_for<[[redoc("*>")]]inner-iterator<Const>, [[redoc("*>")]]inner-iterator<Const>>;
  };
}
[codeblock:end]

[para]
[:en] The member [~typedef-name] [`[*iterator]::iterator_category] is defined as
follows:
[:zh_CN] 成员 [~typedef-名] [`iterator::iterator_category] 的定义如下：

[list]
[item]
[:en] If
[`invoke_result_t<[*maybe-const]<Const, F>&, [*REPEAT](range_reference_t<[*Base]>, N)...>]
is not a reference, [`iterator_category] denotes [`input_iterator_tag].
[:zh_CN] 如果
[`invoke_result_t<[*maybe-const]<Const, F>&, [*REPEAT](range_reference_t<[*Base]>, N)...>]
不是引用，则 [`iterator_category] 代表 [`input_iterator_tag]。

[item]
[:en] Otherwise, let [`C] denote the type
[`iterator_traits<iterator_t<[*Base]>>::iterator_category].
[:zh_CN] 否则，令 [`C] 代表类型
[`iterator_traits<iterator_t<[*Base]>>::iterator_category]。

[list]
[item]
[:en] If [`[`:c derived_from]<C, random_access_iterator_tag>] is [`true],
[`iterator_category] denotes [`random_access_iterator_tag].
[:zh_CN] 若 [`[`:c derived_from]<C, random_access_iterator_tag>] 为 [`true]，则
[`iterator_category] 代表 [`random_access_iterator_tag]。

[item]
[:en] Otherwise, if [`[`:c derived_from]<C, bidirectional_iterator_tag>] is
[`true], [`iterator_category] denotes [`bidirectional_iterator_tag].
[:zh_CN] 若 [`[`:c derived_from]<C, bidirectional_iterator_tag>] 为 [`true]，则
[`iterator_category] 代表 [`bidirectional_iterator_tag]。

[item]
[:en] Otherwise, if [`[`:c derived_from]<C, forward_iterator_tag>] is
[`true], [`iterator_category] denotes [`forward_iterator_tag].
[:zh_CN] 若 [`[`:c derived_from]<C, forward_iterator_tag>] 为 [`true]，则
[`iterator_category] 代表 [`forward_iterator_tag]。

[item]
[:en] Otherwise, [`iterator_category] denotes [`input_iterator_tag].
[:zh_CN] 否则，[`iterator_category] 代表 [`input_iterator_tag]。
[list:end]
[list:end]

[codeblock:declaration]
constexpr [[redoc("*>")]]iterator([[redoc("*>")]]Parent& parent, [[redoc("*>")]]inner-iterator<Const> inner);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*parent_] with [`addressof(parent)] and [*inner_] with
[`std::move(inner)].
[:zh_CN] 以 [`addressof(parent)] 初始化 [*parent_] 并以 [`std::move(inner)]
初始化 [*inner_]。
[div:end]

[codeblock:declaration]
constexpr [[redoc("*>")]]iterator([[redoc("*>")]]iterator<!Const> i)
  requires Const && [[redoc("`:c>")]]convertible_to<[[redoc("*>")]]inner-iterator<false>, [[redoc("*>")]]inner-iterator<Const>>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*parent_] with [`i.[*parent_]] and [*inner_] with
[`std::move(i.[*inner_])].
[:zh_CN] 以 [`i.[*parent_]] 初始化 [*parent_] 并以 [`std::move(i.[*inner_])]
初始化 [*inner_]。
[div:end]

[codeblock:declaration]
constexpr decltype(auto) operator*() const noexcept([[redoc("[=seebelow]")]]);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return apply([&](const auto&... iters) -> decltype(auto) {
  return invoke(*[[redoc("*>")]]parent_->[[redoc("*>")]]fun_, *iters...);
}, [[redoc("*>")]]inner_.[[redoc("*>")]]current_);
[codeblock:end]

[para:remarks]
[:en] Let [`Is] be the pack [`0, 1, [$\ldots], (N-1)].
[:zh_CN] 令 [`Is] 为包组 [`0, 1, [$\ldots], (N-1)]。

[:en] The exception specification is equivalent to:
[:zh_CN] 其异常说明等价于：
[codeblock]
noexcept(invoke(*[[redoc("*>")]]parent_->[[redoc("*>")]]fun_, *std::get<Is>([[redoc("*>")]]inner_.[[redoc("*>")]]current_)...))
[codeblock:end]
[div:end]

[codeblock:declaration]
constexpr [[redoc("*>")]]iterator& operator++();
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
++[[redoc("*>")]]inner_;
return *this;
[codeblock:end]
[div:end]

[codeblock:declaration]
constexpr [[redoc("*>")]]iterator operator++(int);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
auto tmp = *this;
++*this;
return tmp;
[codeblock:end]
[div:end]

[codeblock:declaration]
constexpr [[redoc("*>")]]iterator& operator--() requires [[redoc("`:c>")]]bidirectional_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
--[[redoc("*>")]]inner_;
return *this;
[codeblock:end]
[div:end]

[codeblock:declaration]
constexpr [[redoc("*>")]]iterator operator--(int) requires [[redoc("`:c>")]]bidirectional_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
auto tmp = *this;
--*this;
return tmp;
[codeblock:end]
[div:end]

[codeblock:declaration]
constexpr [[redoc("*>")]]iterator& operator+=(difference_type x) requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
[[redoc("*>")]]inner_ += x;
return *this;
[codeblock:end]
[div:end]

[codeblock:declaration]
constexpr [[redoc("*>")]]iterator& operator-=(difference_type x) requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
[[redoc("*>")]]inner_ -= x;
return *this;
[codeblock:end]
[div:end]

[codeblock:declaration]
constexpr decltype(auto) operator[](difference_type n) const
  requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return apply([&](const auto&... iters) -> decltype(auto) {
  return invoke(*[[redoc("*>")]]parent_->[[redoc("*>")]]fun_, iters[n]...);
}, [[redoc("*>")]]inner_.[[redoc("*>")]]current_);
[codeblock:end]
[div:end]

[codeblock:declaration]
friend constexpr bool operator==(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y);
friend constexpr bool operator<(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
  requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
friend constexpr bool operator>(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
  requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
friend constexpr bool operator<=(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
  requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
friend constexpr bool operator>=(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
  requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
friend constexpr auto operator<=>(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
  requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base> && [[redoc("`:c>")]]three_way_comparable<[[redoc("*>")]]inner-iterator<Const>>;
[codeblock:end]

[div:description]
[:en] Let [^op] be the operator.
[:zh_CN] 令 [^op] 为其运算符。

[para:effects]
[:en] Equivalent to: [`return x.[*inner_] [^op] y.[*inner_];]
[:zh_CN] 等价于：[`return x.[*inner_] [^op] y.[*inner_];]
[div:end]

[codeblock:declaration]
friend constexpr [[redoc("*>")]]iterator operator+(const [[redoc("*>")]]iterator& i, difference_type n)
  requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
friend constexpr [[redoc("*>")]]iterator operator+(difference_type n, const [[redoc("*>")]]iterator& i)
  requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return [*iterator](*i.[*parent_], i.[*inner_] + n);]
[:zh_CN] 等价于：[`return [*iterator](*i.[*parent_], i.[*inner_] + n);]
[div:end]

[codeblock:declaration]
friend constexpr [[redoc("*>")]]iterator operator-(const [[redoc("*>")]]iterator& i, difference_type n)
  requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return [*iterator](*i.[*parent_], i.[*inner_] - n);]
[:zh_CN] 等价于：[`return [*iterator](*i.[*parent_], i.[*inner_] - n);]
[div:end]

[codeblock:declaration]
friend constexpr difference_type operator-(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
  requires [[redoc("`:c>")]]sized_sentinel_for<[[redoc("*>")]]inner-iterator<Const>, [[redoc("*>")]]inner-iterator<Const>>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return x.[*inner_] - y.[*inner_];]
[:zh_CN] 等价于：[`return x.[*inner_] - y.[*inner_];]
[div:end]
