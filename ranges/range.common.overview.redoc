[section#range.common.overview
    [:en] Overview
    [:zh_CN] 概述
]

[para]
[:en] [`common_view] takes a [`:c view] which has different types for its
iterator and sentinel and turns it into a [`:c view] of the same elements with
an iterator and sentinel of the same type.
[:zh_CN] [`common_view] 接受迭代器和哨位类型不同的一个 [`:c view]，并将其转化为
相同元素的迭代器和哨位类型相同的一个 [`:c view]。

[para]
[begin:note]
[:en] [`common_view] is useful for calling legacy algorithms that expect
a range[=']s iterator and sentinel types to be the same.
[:zh_CN] [`common_view] 在调用遗留算法时很有用，它们预期范围的迭代器和哨位的类型
是相同的。
[end:note]

[para]
[:en] The name [`views::common] denotes a range adaptor object
([#range.adaptor.object]).
[:zh_CN] 名字 [`views::common] 代表一个范围适配器对象（[#range.adaptor.object]）。

[:en] Given a subexpression [`E], the expression [`views::common(E)] is
expression-equivalent to:
[:zh_CN] 给定子表达式 [`E]，表达式 [`views::common(E)] 按表达式等价于：

[list]
[item]
[:en] [`views::all(E)], if [`decltype((E))] models [`:c common_range] and
[`views::all(E)] is a well-formed expression.
[:zh_CN] 当 [`decltype((E))] 构成 [`:c common_range] 并且 [`views::all(E)] 是
良构表达式时，为 [`views::all(E)]。
[item]
[:en] Otherwise, [`common_view{E}].
[:zh_CN] 否则，为 [`common_view{E}]。
[list:end]

[para]
[begin:example]
[codeblock]
// [:en] Legacy algorithm: \
   [:zh_CN] 遗留算法：
template<class ForwardIterator>
size_t count(ForwardIterator first, ForwardIterator last);

template<[[redoc("`:c>")]]forward_range R>
void my_algo(R&& r) {
  auto&& common = common_view{r};
  auto cnt = count(common.begin(), common.end());
  // ...
}
[codeblock:end]
[end:example]
