[section#range.iota.view
    [:en] Class template [`iota_view]
    [:zh_CN] 类模板 [`iota_view]
]

[codeblock:synopsis [!:var advanceable decrementable weakly-equality-comparable-with]]
namespace std::ranges {
  template<class I>
    concept [*decrementable] =     // [=Expos]
      [=SeeBelow];
  template<class I>
    concept [*advanceable] =       // [=Expos]
      [=SeeBelow];

  template<weakly_incrementable W, semiregular Bound = unreachable_sentinel_t>
    requires [*weakly-equality-comparable-with]<W, Bound>
  class iota_view : public view_interface<iota_view<W, Bound>> {
  private:
    // [:en] [#range.iota.iterator], class [`iota_view::iterator]
    // [|:zh_CN] [#range.iota.iterator]，类 [`iota_view::iterator]
    struct iterator;            // [=Expos]
    // [:en] [#range.iota.sentinel], class [`iota_view::sentinel]
    // [|:zh_CN] [#range.iota.sentinel]，类 [`iota_view::sentinel]
    struct sentinel;            // [=Expos]
    W value_ = W();             // [=Expos]
    Bound bound_ = Bound();     // [=Expos]
  public:
    iota_view() = default;
    constexpr explicit iota_view(W value);
    constexpr iota_view(type_identity_t<W> value,
                        type_identity_t<Bound> bound);

    constexpr iterator begin() const;
    constexpr auto end() const;
    constexpr iterator end() const requires same_as<W, Bound>;

    constexpr auto size() const requires [=SeeBelow];
  };

  template<class W, class Bound>
    requires (![*is-integer-like]<W> || ![*is-integer-like]<Bound> ||
      ([*is-signed-integer-like]<W> == [*is-signed-integer-like]<Bound>))
  iota_view(W, Bound) -> iota_view<W, Bound>;
}
[codeblock:end]

[para]
[:en] Let [`[*IOTA-DIFF-T](W)] be defined as follows:
[:zh_CN] 令 [`[*IOTA-DIFF-T](W)] 定义如下：

[list]
[item]
[:en] If [`W] is not an integral type, or if it is an integral type and
[`sizeof(iter_difference_t<W>)] is greater than [`sizeof(W)], then
[`[*IOTA-DIFF-T](W)] denotes [`iter_difference_t<W>].
[:zh_CN] 若 [`W] 并非整型类型，或者它是整型类型而 [`sizeof(iter_difference_t<W>)]
大于 [`sizeof(W)]，则 [`[*IOTA-DIFF-T](W)] 代表 [`iter_difference_t<W>]。

[item]
[:en] Otherwise, [`[*IOTA-DIFF-T](W)] is a signed integer type of width greater
than the width of [`W] if such a type exists.
[:zh_CN] 否则，[`[*IOTA-DIFF-T](W)] 为宽度大于 [`W] 的宽度的有符号整数类型（若
存在这样的类型）。

[item]
[:en] Otherwise, [`[*IOTA-DIFF-T](W)] is an unspecified signed-integer-like type
([#iterator.concept.winc]) of width not less than the width of [`W].
[:zh_CN] 否则，[`[*IOTA-DIFF-T](W)] 为某个未指明的宽度不小于 [`W] 的宽度的有符号
整数式类型（[#iterator.concept.winc]）。

[enter:note]
[:en] It is unspecified whether this type satisfies [`weakly_incrementable].
[:zh_CN] 未指明该类型是否满足 [`weakly_incrementable]。
[exit:note]
[list:end]

[para]
[:en] The exposition-only [`[*decrementable]] concept is equivalent to:
[:zh_CN] 仅用于阐释的 [`[*decrementable]] 概念等价于：
[codeblock:notation [!:var Decrementable]]
template<class I>
  concept [*decrementable] =
    incrementable<I> && requires(I i) {
      { --i } -> same_as<I&>;
      { i-- } -> same_as<I>;
    };
[codeblock:end]

[enter:description]
[para]
[:en] When an object is in the domain of both pre- and post-decrement,
the object is said to be [+decrementable[%]].
[:zh_CN] 只要某个对象同时处于前置和后置自减的作用域中，该对象就被称为
[+可自减[%]]。

[para]
[:en] Let [`a] and [`b] be equal objects of type [`I].
[:zh_CN] 令 [`a] 和 [`b] 为 [`I] 类型的相等对象。

[:en] [`I] models [`[*decrementable]] only if
[:zh_CN] 仅当符合以下条件时，[`I] 构成 [`[*decrementable]]：

[list]
[item]
[:en] If [`a] and [`b] are decrementable, then the following are all true:
[:zh_CN] 若 [`a] 和 [`b] 是可自减的，则以下各项均为真：
[list]
[item] [`addressof(--a) == addressof(a)]
[item] [`bool(a-- == b)]
[item] [`bool(((void)a--, a) == --b)]
[item]
[:en] [`bool(++(--a) == b)].
[:zh_CN] [`bool(++(--a) == b)]。
[list:end]

[item]
[:en] If [`a] and [`b] are incrementable, then [`bool(--(++a) == b)].
[:zh_CN] 若 [`a] 和 [`b] 是可自增的，则有 [`bool(--(++a) == b)]。
[list:end]
[exit:description]

[para]
[:en] The exposition-only [`[*advanceable]] concept is equivalent to:
[:zh_CN] 仅用于阐释的 [`[*advanceable]] 概念等价于：

[codeblock:declaration [!:var advanceable decrementable]]
template<class I>
  concept [*advanceable] =
    [*decrementable]<I> && totally_ordered<I> &&
    requires(I i, const I j, const [*IOTA-DIFF-T](I) n) {
      { i += n } -> same_as<I&>;
      { i -= n } -> same_as<I&>;
      I(j + n);
      I(n + j);
      I(j - n);
      { j -  j } -> convertible_to<[*IOTA-DIFF-T](I)>;
    };
[codeblock:end]

[para:~]
[:en] Let [`D] be [`[*IOTA-DIFF-T](I)].
[:zh_CN] 令 [`D] 为 [`[*IOTA-DIFF-T](I)]。

[:en] Let [`a] and [`b] be objects of type [`I] such that [`b] is reachable from
[`a] after [`n] applications of [`++a], for some value [`n] of type [`D].
[:zh_CN] 令 [`a] 和 [`b] 为 [`I] 类型的对象并使 [`b] 从 [`a] 经过 [`n] 次对
[`++a] 的运用之后可达，其中 [`n] 为某个 [`D] 类型的值。

[:en] [`I] models [`[*advanceable]] only if
[:zh_CN] 仅当符合以下条件时，[`I] 构成 [`[*advanceable]]：

[list]
[item]
[:en] [`(a += n)] is equal to [`b].
[:zh_CN] [`(a += n)] 等于 [`b]。
[item]
[:en] [`addressof(a += n)] is equal to [`addressof(a)].
[:zh_CN] [`addressof(a += n)] 等于 [`addressof(a)]。
[item]
[:en] [`I(a + n)] is equal to [`(a += n)].
[:zh_CN] [`I(a + n)] 等于 [`(a += n)]。
[item]
[:en] For any two positive values [`x] and [`y] of type [`D], if
[`I(a + D(x + y))] is well-defined, then [`I(a + D(x + y))] is equal to
[`I(I(a + x) + y)].
[:zh_CN] 对于任何 [`D] 类型的两个正数值 [`x] 和 [`y]，若 [`I(a + D(x + y))] 良构，
则 [`I(a + D(x + y))] 等于 [`I(I(a + x) + y)]。
[item]
[:en] [`I(a + D(0))] is equal to [`a].
[:zh_CN] [`I(a + D(0))] 等于 [`a]。
[item]
[:en] If [`I(a + D(n - 1))] is well-defined, then [`I(a + n)] is equal to
[``[`](I c) { return ++c; }(I(a + D(n - 1)))].
[:zh_CN] 若 [`I(a + D(n - 1))] 良构，则 [`I(a + n)] 等于
[``[`](I c) { return ++c; }(I(a + D(n - 1)))]。
[item]
[:en] [`(b += -n)] is equal to [`a].
[:zh_CN] [`(b += -n)] 等于 [`a]。
[item]
[:en] [`(b -= n)] is equal to [`a].
[:zh_CN] [`(b -= n)] 等于 [`a]。
[item]
[:en] [`addressof(b -= n)] is equal to [`addressof(b)].
[:zh_CN] [`addressof(b -= n)] 等于 [`addressof(b)]。
[item]
[:en] [`I(b - n)] is equal to [`(b -= n)].
[:zh_CN] [`I(b - n)] 等于 [`(b -= n)]。
[item]
[:en] [`D(b - a)] is equal to [`n].
[:zh_CN] [`D(b - a)] 等于 [`n]。
[item]
[:en] [`D(a - b)] is equal to [`D(-n)].
[:zh_CN] [`D(a - b)] 等于 [`D(-n)]。
[item]
[:en] [`bool(a <= b)] is [`true].
[:zh_CN] [`bool(a <= b)] 为 [`true]。
[list:end]

[%@library iota_view[!iota_view]]
[codeblock:declaration]
constexpr explicit iota_view(W value);
[codeblock:end]

[enter:description]
[para:expects]
[:en] [`Bound] denotes [`unreachable_sentinel_t] or [`Bound()] is reachable from
[`value].
[:zh_CN] [`Bound] 代表 [`unreachable_sentinel_t] 或者 [`Bound()] 从 [`value]
可达。

[:en] When [`W] and [`Bound] model [`totally_ordered_with], then
[`bool(value <= bound)] is [`true].
[:zh_CN] 当 [`W] 和 [`Bound] 构成 [`totally_ordered_with] 时，
[`bool(value <= bound)] 为 [`true]。

[para:effects]
[:en] Initializes [`value_] with [`value].
[:zh_CN] 以 [`value] 初始化 [`value_]。
[exit:description]

[%@library iota_view[!iota_view]]
[codeblock:declaration]
constexpr iota_view(type_identity_t<W> value, type_identity_t<Bound> bound);
[codeblock:end]

[enter:description]
[para:expects]
[:en] [`Bound] denotes [`unreachable_sentinel_t] or [`bound] is reachable from
[`value].
[:zh_CN] [`Bound] 代表 [`unreachable_sentinel_t] 或者 [`bound] 从 [`value]
可达。

[para:effects]
[:en] Initializes [`value_] with [`value] and [`bound_] with [`bound].
[:zh_CN] 以 [`value] 初始化 [`value_] 并以 [`bound] 初始化 [`bound_]。
[exit:description]

[%@library begin[!iota_view]]
[codeblock:declaration]
constexpr iterator begin() const;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to: [`return iterator{value_};]
[:zh_CN] 等价于：[`return iterator{value_};]
[exit:description]

[%@library end[!iota_view]]
[codeblock:declaration]
constexpr auto end() const;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock:notation]
if constexpr (same_as<Bound, unreachable_sentinel_t>)
  return unreachable_sentinel;
else
  return sentinel{bound_};
[codeblock:end]
[exit:description]

[%@library end[!iota_view]]
[codeblock:declaration]
constexpr iterator end() const requires same_as<W, Bound>;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to: [`return iterator{bound_};]
[:zh_CN] 等价于：[`return iterator{bound_};]
[exit:description]

[%@library size[!iota_view]]
[%@library iota_view[!size]]
[codeblock:declaration]
constexpr auto size() const requires [=SeeBelow];
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock:notation]
if constexpr ([*is-integer-like]<W> && [*is-integer-like]<Bound>)
  return (value_ < 0)
    ? ((bound_ < 0)
      ? [*make-unsigned-like](-value_) - [*make-unsigned-like](-bound_)
      : [*make-unsigned-like](bound_) + [*make-unsigned-like](-value_))
    : [*make-unsigned-like](bound_) - [*make-unsigned-like](value_);
else
  return [*make-unsigned-like](bound_ - value_);
[codeblock:end]

[para:remarks]
[:en] The expression in the [~requires-clause] is equivalent to
[:zh_CN] [~requires-子句]中的表达式等价于
[codeblock:notation]
(same_as<W, Bound> && [*advanceable]<W>) || (integral<W> && integral<Bound>) ||
  sized_sentinel_for<Bound, W>
[codeblock:end]
[exit:description]
