[section#range.access.cbegin
    [`ranges::cbegin]
]

[%@lib cbegin]

[para]
[:en] The name [`ranges::cbegin] denotes a customization point object
([#customization.point.object]).
[:zh_CN] 名字 [`ranges::cbegin] 代表一个定制化点（[#customization.point.object]）。

[:en] Given a subexpression [`E] with type [`T], let [`t] be an lvalue that
denotes the reified object for [`E].
[:zh_CN] 给定某个类型为 [`T] 的子表达式 [`E]，令 [`t] 为代表 [`E] 的具象对象的
左值。

[:en] Then:
[:zh_CN] 则有：

[list]
[item]
[:en] If [`E] is an rvalue and [`enable_borrowed_range<remove_cv_t<T>>] is
[`false], [`ranges::cbegin(E)] is ill-formed.
[:zh_CN] 若 [`E] 为右值且 [`enable_borrowed_range<remove_cv_t<T>>] 为 [`false]，
则 [`ranges::cbegin(E)] 非良构。

[item]
[:en] Otherwise, let [`U] be [`ranges::begin([*possibly-const-range](t))].
[:zh_CN] 否则，令 [`U] 为 [`ranges::begin([*possibly-const-range](t))]。

[:en] [`ranges::cbegin(E)] is expression-equivalent to
[`const_iterator<decltype(U)>(U)].
[:zh_CN] [`ranges::cbegin(E)] 按表达式等价于 [`const_iterator<decltype(U)>(U)]。
[list:end]

[para]
[begin:note]
[:en] Whenever [`ranges::cbegin(E)] is a valid expression, its type models
[`:c input_or_output_iterator] and [*:c constant-iterator].
[:zh_CN] 只要 [`ranges::cbegin(E)] 是有效表达式，其类型就构成
[`:c input_or_output_iterator] 和 [*:c constant-iterator]。
[end:note]
