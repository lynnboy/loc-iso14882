[section#range.subrange.general
    [:en] General
    [:zh_CN] 概述
]

[para]
[:en] The [`subrange] class template combines together an iterator and
a sentinel into a single object that models the [`:c view] concept.
[:zh_CN] 类模板 [`subrange] 将一个迭代器和一个哨位组合为构成 [`:c view] 概念的
单个对象。

[:en] Additionally, it models the [`:c sized_range] concept when the final
template parameter is [`subrange_kind::sized].
[:zh_CN] 此外，若最后一个模板形参为 [`subrange_kind::sized]，它还构成
[`:c sized_range] 概念。

[%@lib subrange]
[codeblock:synopsis]
namespace std::ranges {
  template<class From, class To>
    concept [[redoc("*:c@def>")]]uses-nonqualification-pointer-conversion =      // [=expos]
      is_pointer_v<From> && is_pointer_v<To> &&
      ![[redoc("*:c>")]]convertible_to<remove_pointer_t<From>(*)[], remove_pointer_t<To>(*)[]>;

    concept [[redoc("*:c@def>")]]convertible-to-non-slicing =                    // [=expos]
      [[redoc("`:c>")]]convertible_to<From, To> &&
      ![[redoc("*:c>")]]uses-nonqualification-pointer-conversion<decay_t<From>, decay_t<To>>;

  template<class T, class U, class V>
    concept [[redoc("*:c@def>")]]pair-like-convertible-from =                    // [=expos]
      ![[redoc("`:c>")]]range<T> && !is_reference_v<T> && [[redoc("*:c>")]]pair-like<T> &&
      [[redoc("`:c>")]]constructible_from<T, U, V> &&
      [[redoc("*:c>")]]convertible-to-non-slicing<U, tuple_element_t<0, T>> &&
      [[redoc("`:c>")]]convertible_to<V, tuple_element_t<1, T>>;

  template<[[redoc("`:c>")]]input_or_output_iterator I, [[redoc("`:c>")]]sentinel_for<I> S = I, subrange_kind K =
      [[redoc("`:c>")]]sized_sentinel_for<S, I> ? subrange_kind::sized : subrange_kind::unsized>
    requires (K == subrange_kind::sized || ![[redoc("`:c>")]]sized_sentinel_for<S, I>)
  class subrange : public view_interface<subrange<I, S, K>> {
  private:
    static constexpr bool [[redoc("*>")]]StoreSize =                       // [=expos]
      K == subrange_kind::sized && ![[redoc("`:c>")]]sized_sentinel_for<S, I>;
    I [[redoc("*>")]]begin_ = I();                                         // [=expos]
    S [[redoc("*>")]]end_ = S();                                           // [=expos]
    [[redoc("*>")]]make-unsigned-like-t<iter_difference_t<I>> [[redoc("*>")]]size_ = 0;   // [:en] [=expos]; present only \
                                                                                          [:zh_CN] [=expos]；仅当 [*StoreSize] 为
                                                            // [:en@~] if [*StoreSize] is [`true] \
                                                            [:zh_CN@~] [`true] 时提供
  public:
    subrange() requires [[redoc("`:c>")]]default_initializable<I> = default;

    constexpr subrange([[redoc("*:c>")]]convertible-to-non-slicing<I> auto i, S s) requires (![[redoc("*>")]]StoreSize);

    constexpr subrange([[redoc("*:c>")]]convertible-to-non-slicing<I> auto i, S s,
                       [[redoc("^>")]]make-unsigned-like-t<iter_difference_t<I>> n)
      requires (K == subrange_kind::sized);

    template<[[redoc("*:c>")]]different-from<subrange> R>
      requires [[redoc("`:c>")]]borrowed_range<R> &&
               [[redoc("*:c>")]]convertible-to-non-slicing<iterator_t<R>, I> &&
               [[redoc("`:c>")]]convertible_to<sentinel_t<R>, S>
    constexpr subrange(R&& r) requires (![[redoc("*>")]]StoreSize || [[redoc("`:c>")]]sized_range<R>);

    template<[[redoc("`:c>")]]borrowed_range R>
      requires [[redoc("*:c>")]]convertible-to-non-slicing<iterator_t<R>, I> &&
               [[redoc("`:c>")]]convertible_to<sentinel_t<R>, S>
    constexpr subrange(R&& r, [[redoc("^>")]]make-unsigned-like-t<iter_difference_t<I>> n)
      requires (K == subrange_kind::sized)
        : subrange{ranges::begin(r), ranges::end(r), n} {}

    template<[[redoc("*:c>")]]different-from<subrange> PairLike>
      requires [[redoc("*:c>")]]pair-like-convertible-from<PairLike, const I&, const S&>
    constexpr operator PairLike() const;

    constexpr I begin() const requires [[redoc("`:c>")]]copyable<I>;
    constexpr I begin() requires (![[redoc("`:c>")]]copyable<I>);
    constexpr S end() const;

    constexpr bool empty() const;
    constexpr [[redoc("^>")]]make-unsigned-like-t<iter_difference_t<I>> size() const
      requires (K == subrange_kind::sized);

    constexpr subrange next(iter_difference_t<I> n = 1) const &
      requires [[redoc("`:c>")]]forward_iterator<I>;
    constexpr subrange next(iter_difference_t<I> n = 1) &&;
    constexpr subrange prev(iter_difference_t<I> n = 1) const
      requires [[redoc("`:c>")]]bidirectional_iterator<I>;
    constexpr subrange& advance(iter_difference_t<I> n);
  };

  template<[[redoc("`:c>")]]input_or_output_iterator I, [[redoc("`:c>")]]sentinel_for<I> S>
    subrange(I, S) -> subrange<I, S>;

  template<[[redoc("`:c>")]]input_or_output_iterator I, [[redoc("`:c>")]]sentinel_for<I> S>
    subrange(I, S, [[redoc("^>")]]make-unsigned-like-t<iter_difference_t<I>>) ->
      subrange<I, S, subrange_kind::sized>;

  template<[[redoc("`:c>")]]borrowed_range R>
    subrange(R&&) ->
      subrange<iterator_t<R>, sentinel_t<R>,
               ([[redoc("`:c>")]]sized_range<R> || [[redoc("`:c>")]]sized_sentinel_for<sentinel_t<R>, iterator_t<R>>)
                 ? subrange_kind::sized : subrange_kind::unsized>;

  template<[[redoc("`:c>")]]borrowed_range R>
    subrange(R&&, [[redoc("^>")]]make-unsigned-like-t<range_difference_t<R>>) ->
      subrange<iterator_t<R>, sentinel_t<R>, subrange_kind::sized>;
}
[codeblock:end]
