[section#range.refinements
    [:en] Other range refinements
    [:zh_CN] 其他范围精化概念
]

[para]
[:en] The [`:c output_range] concept specifies requirements of a [`:c range]
type for which [`ranges::begin] returns a model of [`:c output_iterator]
([#iterator.concept.output]).
[:zh_CN] [`:c output_range] 概念对 [`ranges::begin] 所返回的类型构成
[`:c output_iterator]（[#iterator.concept.output]）的 [`:c range] 类型指定了一些
规定。

[:en] [`:c input_range], [`:c forward_range], [`:c bidirectional_range], and
[`:c random_access_range] are defined similarly.
[:zh_CN] 也类似地定义了 [`:c input_range]，[`:c forward_range]，
[`:c bidirectional_range]，以及 [`:c random_access_range]。

[codeblock:declaration]
template<class R, class T>
  concept [[redoc("`:c@def>")]]output_range =
    [[redoc("`:c>")]]range<R> && [[redoc("`:c>")]]output_iterator<iterator_t<R>, T>;

template<class T>
  concept [[redoc("`:c@def>")]]input_range =
    [[redoc("`:c>")]]range<T> && [[redoc("`:c>")]]input_iterator<iterator_t<T>>;

template<class T>
  concept [[redoc("`:c@def>")]]forward_range =
    [[redoc("`:c>")]]input_range<T> && [[redoc("`:c>")]]forward_iterator<iterator_t<T>>;

template<class T>
  concept [[redoc("`:c@def>")]]bidirectional_range =
    [[redoc("`:c>")]]forward_range<T> && [[redoc("`:c>")]]bidirectional_iterator<iterator_t<T>>;

template<class T>
  concept [[redoc("`:c@def>")]]random_access_range =
    [[redoc("`:c>")]]bidirectional_range<T> && [[redoc("`:c>")]]random_access_iterator<iterator_t<T>>;
[codeblock:end]

[para]
[:en] [`:c contiguous_range] additionally requires that the [`ranges::data]
customization point object ([#range.prim.data]) is usable with the range.
[:zh_CN] [`:c contiguous_range] 额外规定了可以对范围使用 [`ranges::data] 定制化
点对象（[#range.prim.data]）。

[codeblock:declaration]
template<class T>
  concept [[redoc("`:c@def>")]]contiguous_range =
    [[redoc("`:c>")]]random_access_range<T> && [[redoc("`:c>")]]contiguous_iterator<iterator_t<T>> &&
    requires(T& t) {
      { ranges::data(t) } -> [[redoc("`:c>")]]same_as<add_pointer_t<range_reference_t<T>>>;
    };
[codeblock:end]

[para]
[:en] Given an expression [`t] such that [`decltype((t))] is [`T&], [`T] models
[`:c contiguous_range] only if [`to_address(ranges::begin(t)) == ranges::data(t)]
is [`true].
[:zh_CN] 给定表达式 [`t] 使得 [`decltype((t))] 为 [`T&]，仅当
[`to_address(ranges::begin(t)) == ranges::data(t)] 为 [`true] 时，[`T] 构成
[`:c contiguous_range]。

[para]
[:en] The [`:c common_range] concept specifies requirements of a [`:c range]
type for which [`ranges::begin] and [`ranges::end] return objects of the same
type.
[:zh_CN] [`:c common_range] 概念针对 [`:c range] 类型规定，[`ranges::begin] 和
[`ranges::end] 返回的对象具有相同类型。

[begin:example]
[:en] The standard containers ([#containers]) model [`:c common_range].
[:zh_CN] 标准容器（[#containers]）均构成 [`:c common_range]。
[end:example]

[codeblock:declaration]
template<class T>
  concept [[redoc("`:c@def>")]]common_range =
    [[redoc("`:c>")]]range<T> && [[redoc("`:c>")]]same_as<iterator_t<T>, sentinel_t<T>>;
[codeblock:end]

[para]
[:en] The [`:c viewable_range] concept specifies the requirements of a
[`:c range] type that can be converted to a [`:c view] safely.
[:zh_CN] [`:c viewable_range] 概念为可以安全地转换为 [`:c view] 的 [`:c range]
类型做出了规定。

[codeblock:declaration]
template<class T>
  concept [[redoc("`:c@def>")]]viewable_range =
    [[redoc("`:c>")]]range<T> && ([[redoc("`:c>")]]borrowed_range<T> || [[redoc("`:c>")]]view<remove_cvref_t<T>>);
[codeblock:end]
