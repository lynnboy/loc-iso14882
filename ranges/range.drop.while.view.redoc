[section#range.drop.while.view
    [:en] Class template [`drop_while_view]
    [:zh_CN] 类模板 [`drop_while_view]
]

[%@lib drop_while_view]
[%@lib@member base[!drop_while_view]]
[%@lib@member end[!drop_while_view]]
[codeblock:synopsis]
namespace std::ranges {
  template<[[redoc("`:c>")]]view V, class Pred>
    requires [[redoc("`:c>")]]input_range<V> && is_object_v<Pred> &&
             [[redoc("`:c>")]]indirect_unary_predicate<const Pred, iterator_t<V>>
  class drop_while_view : public view_interface<drop_while_view<V, Pred>> {
  public:
    drop_while_view() requires [[redoc("`:c>")]]default_initializable<V> && [[redoc("`:c>")]]default_initializable<Pred> = default;
    constexpr drop_while_view(V base, Pred pred);

    constexpr V base() const & requires [[redoc("`:c>")]]copy_constructible<V> { return [[redoc("*>")]]base_; }
    constexpr V base() && { return std::move([[redoc("*>")]]base_); }

    constexpr const Pred& pred() const;

    constexpr auto begin();

    constexpr auto end() { return ranges::end([[redoc("*>")]]base_); }

  private:
    V [[redoc("*>")]]base_ = V();                                      // [=expos]
    [[redoc("^>")]]movable-box<Pred> [[redoc("*>")]]pred_;                            // [=expos]
  };

  template<class R, class Pred>
    drop_while_view(R&&, Pred) -> drop_while_view<views::all_t<R>, Pred>;
}
[codeblock:end]

[%@lib@ctor drop_while_view]
[codeblock:declaration]
constexpr drop_while_view(V base, Pred pred);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*base_] with [`std::move(base)] and [*pred_] with
[`std::move(pred)].
[:zh_CN] 以 [`std::move(base)] 初始化 [*base_] 并以 [`std::move(pred)] 初始化
[*pred_]。
[div:end]

[%@lib@member pred[!drop_while_view]]
[codeblock:declaration]
constexpr const Pred& pred() const;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return *[*pred_];]
[:zh_CN] 等价于：[`return *[*pred_];]
[div:end]

[%@lib@member begin[!drop_while_view]]
[codeblock:declaration]
constexpr auto begin();
[codeblock:end]

[div:description]
[para:expects]
[:en] [`[*pred_].has_value()] is [`true].
[:zh_CN] [`[*pred_].has_value()] 为 [`true]。

[para:returns]
[:en] [`ranges::find_if_not([*base_], cref(*[*pred_]))].
[:zh_CN] [`ranges::find_if_not([*base_], cref(*[*pred_]))]。

[para:remarks]
[:en] In order to provide the amortized constant-time complexity required by the
[`:c range] concept when [`drop_while_view] models [`:c forward_range], the
first call caches the result within the [`drop_while_view] for use on subsequent
calls.
[:zh_CN] 为了在 [`drop_while_view] 构成 [`:c forward_range] 时提供由 [`:c range]
概念所要求的均摊常量时间复杂度，第一个重载在 [`drop_while_view] 中将其结果进行
缓存以在后续的调用中使用。

[begin:note]
[:en] Without this, applying a [`reverse_view] over a [`drop_while_view] would
have quadratic iteration complexity.
[:zh_CN] 不这样的话，在 [`drop_while_view] 上运用 [`reverse_view] 将具有平方级的
循环复杂度。
[end:note]
[div:end]
