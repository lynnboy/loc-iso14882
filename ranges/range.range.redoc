[section#range.range
    [:en] Ranges
    [:zh_CN] 范围
]

[para]
[:en] The [`:c range] concept defines the requirements of a type that allows
iteration over its elements by providing an iterator and sentinel that denote
the elements of the range.
[:zh_CN] [`:c range] 概念定义了针对类型的一些规定，允许通过提供代表范围中的元素
的迭代器和哨位来对各个元素进行迭代。

[codeblock:declaration]
template<class T>
  concept [[redoc("^:c@def>")]]range =
    requires(T& t) {
      ranges::begin(t);                         // [:en] sometimes equality-preserving (see below) \
                                                   [:zh_CN] 有时候是维持相等性的（见下文）
      ranges::end(t);
    };
[codeblock:end]

[div:description]
[para]
[:en] The required expressions [`ranges::begin(t)] and [`ranges::end(t)] of the
[`:c range] concept do not require implicit expression variations
([#concepts.equality]).
[:zh_CN] 对 [`:c range] 概念规定的表达式 [`ranges::begin(t)] 和 [`ranges::end(t)]
并不规定提供隐式表达式变体（[#concepts.equality]）。

[para]
[:en] Given an expression [`t] such that [`decltype((t))] is [`T&], [`T] models
[`:c range] only if
[:zh_CN] 给定某个表达式 [`t] 并使 [`decltype((t))] 为 [`T&]，仅当满足以下条件时，
[`T] 构成 [`:c range]：

[list]
[item]
[:en@~] [=range(ranges::begin(t),ranges::end(t))] denotes a range
([#iterator.requirements.general]),
[:zh_CN@~] [=range(ranges::begin(t),ranges::end(t))] 代表一个范围
（[#iterator.requirements.general]），

[item]
[:en@~] both [`ranges::begin(t)] and [`ranges::end(t)] are amortized constant
time and non-modifying, and
[:zh_CN@~] [`ranges::begin(t)] 和 [`ranges::end(t)] 均为均摊常量时间且不进行
改动，并且

[item]
[:en@~] if the type of [`ranges::begin(t)] models [`:c forward_iterator],
[`ranges::begin(t)] is equality-preserving.
[:zh_CN@~] 若 [`ranges::begin(t)] 的类型构成 [`:c forward_iterator]，则
[`ranges::begin(t)] 是维持相等性的。
[list:end]

[para]
[begin:note]
[:en] Equality preservation of both [`ranges::begin] and [`ranges::end] enables
passing a [`:c range] whose iterator type models [`:c forward_iterator] to
multiple algorithms and making multiple passes over the range by repeated calls
to [`ranges::begin] and [`ranges::end].
[:zh_CN] [`ranges::begin] 和 [`ranges::end] 同时维持相等性，允许将迭代器类型构成
[`:c forward_iterator] 的 [`:c range] 传递给多个算法，并通过对 [`ranges::begin]
和 [`ranges::end] 的重复调用来对范围进行多遍访问。

[:en] Since [`ranges::begin] is not required to be equality-preserving when the
return type does not model [`:c forward_iterator], repeated calls might not
return equal values or might not be well-defined; [`ranges::begin] should be
called at most once for such a range.
[:zh_CN] 由于当 [`ranges::begin] 的返回类型不构成 [`:c forward_iterator] 时并不
要求它维持相等性，所以对其进行重复调用可能并不会返回相等值或者可能是未定义的；
对于这样的范围应当最多调用 [`ranges::begin] 一次。
[end:note]
[div:end]

[codeblock:declaration]
template<class T>
  concept [[redoc("`:c@def")]]safe_range =
    range<T> &&
      (is_lvalue_reference_v<T> || enable_safe_range<remove_cvref_t<T>>);
[codeblock:end]

[div:description]
[para]
[:en] Given an expression [`E] such that [`decltype((E))] is [`T], [`T] models
[`:c safe_range] only if the validity of iterators obtained from the object
denoted by [`E] is not tied to the lifetime of that object.
[:zh_CN] 给定表达式 [`E]，令 [`decltype((E))] 为 [`T]，仅当从 [`E] 所代表的对象
中获得的迭代器的有效性，与这个对象的生存期之间并无关联时，[`T] 构成
[`:c safe_range]。

[para]
[begin:note]
[:en] Since the validity of iterators is not tied to the lifetime of an object
whose type models [`:c safe_range], a function can accept arguments of such a
type by value and return iterators obtained from it without danger of dangling.
[:zh_CN] 由于对迭代器的有效性，与类型构成了 [`:c safe_range] 的对象的生存期之间
并无关联，所以接受按值传递的这种类型的实参并返回从其中获得的迭代器的函数并没有
发生悬挂的危险。
[end:note]
[div:end]

[%@lib enable_safe_range]
[codeblock:declaration]
template<class>
  inline constexpr bool enable_safe_range = false;
[codeblock:end]

[div:description]
[para:remarks]
[:en] Pursuant to [#namespace.std], users may specialize [`enable_safe_range]
for cv-unqualified program-defined types.
[:zh_CN] 根据 [#namespace.std]，用户可以针对 cv 未限定的程序定义类型来特化
[`enable_safe_range]。

[:en] Such specializations shall be usable in constant expressions ([#expr.const])
and have type [`const bool].
[:zh_CN] 这种特化应当可以在常量表达式（[#expr.const]）中使用，并具有类型
[`const bool]。

[para]
[begin:example]
[:en] Each specialization [`S] of class template [`subrange] ([#range.subrange])
models [`:c safe_range] because
[:zh_CN] 类模板 [`subrange]（[#range.subrange]）的每个特例 [`S] 都构成
[`:c safe_range]，因为

[list]
[item]
[:en@~] [`enable_safe_range<S>] is specialized to have the value [`true], and
[:zh_CN@~] [`enable_safe_range<S>] 被特化为具有值 [`true]，并且
[item]
[:en@~] [`S][=']s iterators do not have validity tied to the lifetime of an [`S]
object because they are [=lq]borrowed[=rq] from some other range.
[:zh_CN@~] 由于 [`S] 的迭代器是从某个其他范围“借来”的，它们并不具有与某个 [`S]
对象的生存期之间关联的有效性。
[list:end]
[end:example]
[div:end]
