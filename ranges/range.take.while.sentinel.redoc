[section#range.take.while.sentinel
    [:en] Class template [`take_while_view::[*sentinel]]
    [:zh_CN] 类模板 [`take_while_view::[*sentinel]]
]

[codeblock:synopsis]
namespace std::ranges {
  template<[[redoc("`:c>")]]view V, class Pred>
    requires [[redoc("`:c>")]]input_range<V> && is_object_v<Pred> &&
             [[redoc("`:c>")]]indirect_unary_predicate<const Pred, iterator_t<V>>
  template<bool Const>
  class take_while_view<V, Pred>::[[redoc("*>")]]sentinel {            // [=expos]
    using [[redoc("*>")]]Base = [[redoc("*>")]]maybe-const<Const, V>;                 // [=expos]

    sentinel_t<[[redoc("*>")]]Base> [[redoc("*>")]]end_ = sentinel_t<[[redoc("*>")]]Base>();         // [=expos]
    const Pred* [[redoc("*>")]]pred_ = nullptr;                        // [=expos]

  public:
    [[redoc("*>")]]sentinel() = default;
    constexpr explicit [[redoc("*>")]]sentinel(sentinel_t<[[redoc("*>")]]Base> end, const Pred* pred);
    constexpr [[redoc("*>")]]sentinel([[redoc("*>")]]sentinel<!Const> s)
      requires Const && [[redoc("`:c>")]]convertible_to<sentinel_t<V>, sentinel_t<[[redoc("*>")]]Base>>;

    constexpr sentinel_t<[[redoc("*>")]]Base> base() const { return [[redoc("*>")]]end_; }

    friend constexpr bool operator==(const iterator_t<[[redoc("*>")]]Base>& x, const [[redoc("*>")]]sentinel& y);

    template<bool OtherConst = !Const>
      requires [[redoc("`:c>")]]sentinel_for<sentinel_t<[[redoc("*>")]]Base>, iterator_t<[[redoc("*>")]]maybe-const<OtherConst, V>>>
    friend constexpr bool operator==(const iterator_t<[[redoc("*>")]]maybe-const<OtherConst, V>>& x,
                                     const [[redoc("*>")]]sentinel& y);
  };
}
[codeblock:end]

[%@lib@ctor take_while_view::[*sentinel]]
[codeblock:declaration]
constexpr explicit [[redoc("*>")]]sentinel(sentinel_t<[[redoc("*>")]]Base> end, const Pred* pred);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*end_] with [`end] and [*pred_] with [`pred].
[:zh_CN] 以 [`end] 初始化 [*end_] 并以 [`pred] 初始化 [*pred_]。
[div:end]

[%@lib@ctor take_while_view::[*sentinel]]
[codeblock:declaration]
constexpr [[redoc("*>")]]sentinel([[redoc("*>")]]sentinel<!Const> s)
  requires Const && [[redoc("`:c>")]]convertible_to<sentinel_t<V>, sentinel_t<[[redoc("*>")]]Base>>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*end_] with [`std::move(s.[*end_])] and [*pred_] with
[`s.[*pred_]].
[:zh_CN] 以 [`std::move(s.[*end_])] 初始化 [*end_] 并以 [`s.[*pred_]] 初始化
[*pred_]。
[div:end]

[%@lib operator==[!take_while_view::[*sentinel]]]
[codeblock:declaration]
friend constexpr bool operator==(const iterator_t<[[redoc("*>")]]Base>& x, const [[redoc("*>")]]sentinel& y);

template<bool OtherConst = !Const>
  requires [[redoc("`:c>")]]sentinel_for<sentinel_t<[[redoc("*>")]]Base>, iterator_t<[[redoc("*>")]]maybe-const<OtherConst, V>>>
friend constexpr bool operator==(const iterator_t<[[redoc("*>")]]maybe-const<OtherConst, V>>& x,
                                  const [[redoc("*>")]]sentinel& y);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return y.[*end_] == x || !invoke(*y.[*pred_], *x);]
[:zh_CN] 等价于：[`return y.[*end_] == x || !invoke(*y.[*pred_], *x);]
[div:end]
