[section#range.take.while.sentinel
    [:en] Class template [`take_while_view::[*sentinel]]
    [:zh_CN] 类模板 [`take_while_view::[*sentinel]]
]

[%@lib take_while_view::sentinel]
[codeblock:synopsis]
namespace std::ranges {
  template<class V, class Pred>
  template<bool Const>
  class take_while_view<V, Pred>::[[redoc("*>")]]sentinel {            // [=expos]
    using [[redoc("*>")]]base-t = conditional_t<Const, const V, V>;    // [=expos]

    sentinel_t<[[redoc("*>")]]base-t> [[redoc("*>")]]end_ = sentinel_t<[[redoc("*>")]]base-t>();     // [=expos]
    const Pred* [[redoc("*>")]]pred_ = nullptr;                        // [=expos]
  public:
    [[redoc("*>")]]sentinel() = default;
    constexpr explicit [[redoc("*>")]]sentinel(sentinel_t<[[redoc("*>")]]base-t> end, const Pred* pred);
    constexpr [[redoc("*>")]]sentinel([[redoc("*>")]]sentinel<!Const> s)
      requires Const && convertible_to<sentinel_t<V>, sentinel_t<[[redoc("*>")]]base-t>>;

    constexpr sentinel_t<[[redoc("*>")]]base-t> base() const { return [[redoc("*>")]]end_; }

    friend constexpr bool operator==(const iterator_t<[[redoc("*>")]]base-t>& x, const [[redoc("*>")]]sentinel& y);
  };
}
[codeblock:end]

[%@lib@ctor take_while_view::sentinel]
[codeblock:declaration]
constexpr explicit [[redoc("*>")]]sentinel(sentinel_t<[[redoc("*>")]]base-t> end, const Pred* pred);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*end_] with [`end] and [*pred_] with [`pred].
[:zh_CN] 以 [`end] 初始化 [*end_] 并以 [`pred] 初始化 [*pred_]。
[div:end]

[%@lib@ctor take_while_view::sentinel]
[codeblock:declaration]
constexpr [[redoc("*>")]]sentinel([[redoc("*>")]]sentinel<!Const> s)
  requires Const && convertible_to<sentinel_t<V>, sentinel_t<[[redoc("*>")]]base-t>>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*end_] with [`s.[*end_]] and [*pred_] with [`s.[*pred_]].
[:zh_CN] 以 [`s.[*end_]] 初始化 [*end_] 并以 [`s.[*pred_]] 初始化 [*pred_]。
[div:end]

[%@lib operator==[!take_while_view]]
[codeblock:declaration]
friend constexpr bool operator==(const iterator_t<[[redoc("*>")]]base-t>& x, const [[redoc("*>")]]sentinel& y);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return y.[*end_] == x || !invoke(*y.[*pred_], *x);]
[:zh_CN] 等价于：[`return y.[*end_] == x || !invoke(*y.[*pred_], *x);]
[div:end]
