[section#range.transform.view
    [:en] Class template [`transform_view]
    [:zh_CN] 类模板 [`transform_view]
]

[%@lib transform_view]
[%@lib@member base[!transform_view]]
[%@lib@member size[!transform_view]]
[codeblock:synopsis]
namespace std::ranges {
  template<[[redoc("`:c>")]]input_range V, [[redoc("`:c>")]]move_constructible F>
    requires [[redoc("`:c>")]]view<V> && is_object_v<F> &&
             [[redoc("`:c>")]]regular_invocable<F&, range_reference_t<V>> &&
             [[redoc("*:c>")]]can-reference<invoke_result_t<F&, range_reference_t<V>>>
  class transform_view : public view_interface<transform_view<V, F>> {
  private:
    // [:en] [#range.transform.iterator], class template [`transform_view::[*iterator]] \
    [:zh_CN] [#range.transform.iterator]，类模板 [`transform_view::[*iterator]]
    template<bool> struct [[redoc("*>")]]iterator;             // [=expos]

    // [:en] [#range.transform.sentinel], class template [`transform_view::[*sentinel]] \
    [:zh_CN] [#range.transform.sentinel]，类模板 [`transform_view::[*sentinel]]
    template<bool> struct [[redoc("*>")]]sentinel;             // [=expos]

    V [[redoc("*>")]]base_ = V();                              // [=expos]
    [[redoc("^>")]]movable-box<F> [[redoc("*>")]]fun_;                        // [=expos]

  public:
    transform_view() requires [[redoc("`:c>")]]default_initializable<V> && [[redoc("`:c>")]]default_initializable<F> = default;
    constexpr explicit transform_view(V base, F fun);

    constexpr V base() const & requires [[redoc("`:c>")]]copy_constructible<V> { return [[redoc("*>")]]base_; }
    constexpr V base() && { return std::move([[redoc("*>")]]base_); }

    constexpr [[redoc("*>")]]iterator<false> begin();
    constexpr [[redoc("*>")]]iterator<true> begin() const
      requires [[redoc("`:c>")]]range<const V> &&
               [[redoc("`:c>")]]regular_invocable<const F&, range_reference_t<const V>>;

    constexpr [[redoc("*>")]]sentinel<false> end();
    constexpr [[redoc("*>")]]iterator<false> end() requires [[redoc("`:c>")]]common_range<V>;
    constexpr [[redoc("*>")]]sentinel<true> end() const
      requires [[redoc("`:c>")]]range<const V> &&
               [[redoc("`:c>")]]regular_invocable<const F&, range_reference_t<const V>>;
    constexpr [[redoc("*>")]]iterator<true> end() const
      requires [[redoc("`:c>")]]common_range<const V> &&
               [[redoc("`:c>")]]regular_invocable<const F&, range_reference_t<const V>>;

    constexpr auto size() requires [[redoc("`:c>")]]sized_range<V> { return ranges::size([[redoc("*>")]]base_); }
    constexpr auto size() const requires [[redoc("`:c>")]]sized_range<const V>
    { return ranges::size([[redoc("*>")]]base_); }

    constexpr auto reserve_hint() requires [[redoc("`:c>")]]approximately_sized_range<V>
    { return ranges::reserve_hint([[redoc("*>")]]base_); }
    constexpr auto reserve_hint() const requires [[redoc("`:c>")]]approximately_sized_range<const V>
    { return ranges::reserve_hint([[redoc("*>")]]base_); }
  };

  template<class R, class F>
    transform_view(R&&, F) -> transform_view<views::all_t<R>, F>;
}
[codeblock:end]

[%@lib@ctor transform_view]
[codeblock:declaration]
constexpr explicit transform_view(V base, F fun);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*base_] with [`std::move(base)] and [*fun_] with [`std::move(fun)].
[:zh_CN] 以 [`std::move(base)] 初始化 [*base_] 并以 [`std::move(fun)] 初始化 [*fun_]。
[div:end]

[%@lib@member begin[!transform_view]]
[codeblock:declaration]
constexpr [[redoc("*>")]]iterator<false> begin();
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return [[redoc("*>")]]iterator<false>{*this, ranges::begin([[redoc("*>")]]base_)};
[codeblock:end]
[div:end]

[%@lib@member begin[!transform_view]]
[codeblock:declaration]
constexpr [[redoc("*>")]]iterator<true> begin() const
  requires [[redoc("`:c>")]]range<const V> &&
           [[redoc("`:c>")]]regular_invocable<const F&, range_reference_t<const V>>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return [[redoc("*>")]]iterator<true>{*this, ranges::begin([[redoc("*>")]]base_)};
[codeblock:end]
[div:end]

[%@lib@member end[!transform_view]]
[codeblock:declaration]
constexpr [[redoc("*>")]]sentinel<false> end();
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return [[redoc("*>")]]sentinel<false>{ranges::end([[redoc("*>")]]base_)};
[codeblock:end]
[div:end]

[%@lib@member end[!transform_view]]
[codeblock:declaration]
constexpr [[redoc("*>")]]iterator<false> end() requires [[redoc("`:c>")]]common_range<V>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return [[redoc("*>")]]iterator<false>{*this, ranges::end([[redoc("*>")]]base_)};
[codeblock:end]
[div:end]

[%@lib@member end[!transform_view]]
[codeblock:declaration]
constexpr [[redoc("*>")]]sentinel<true> end() const
  requires [[redoc("`:c>")]]range<const V> &&
           [[redoc("`:c>")]]regular_invocable<const F&, range_reference_t<const V>>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return [[redoc("*>")]]sentinel<true>{ranges::end([[redoc("*>")]]base_)};
[codeblock:end]
[div:end]

[%@lib@member end[!transform_view]]
[codeblock:declaration]
constexpr [[redoc("*>")]]iterator<true> end() const
  requires [[redoc("`:c>")]]common_range<const V> &&
           [[redoc("`:c>")]]regular_invocable<const F&, range_reference_t<const V>>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return [[redoc("*>")]]iterator<true>{*this, ranges::end([[redoc("*>")]]base_)};
[codeblock:end]
[div:end]
