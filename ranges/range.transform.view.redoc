[section#range.transform.view
    [:en] Class template [`transform_view]
    [:zh_CN] 类模板 [`transform_view]
]

[%@lib transform_view]
[codeblock:synopsis]
namespace std::ranges {
  template<input_range V, copy_constructible F>
    requires view<V> && is_object_v<F> &&
             regular_invocable<F&, range_reference_t<V>>
  class transform_view : public view_interface<transform_view<V, F>> {
  private:
    // [:en] [#range.transform.iterator], class template [`transform_view::iterator] \
       [:zh_CN] [#range.transform.iterator]，类模板 [`transform_view::iterator]
    template<bool> struct iterator;             // [=expos]
    // [:en] [#range.transform.sentinel], class template [`transform_view::sentinel] \
       [:zh_CN] [#range.transform.sentinel]，类模板 [`transform_view::sentinel]
    template<bool> struct sentinel;             // [=expos]

    V base_ = V();                              // [=expos]
    [[redoc("^>")]]semiregular-box<F> fun_;                    // [=expos]

  public:
    transform_view() = default;
    constexpr transform_view(V base, F fun);
    template<input_range R>
      requires viewable_range<R> && constructible_from<V, all_view<R>>
    constexpr transform_view(R&& r, F fun);

    constexpr V base() const;

    constexpr iterator<false> begin();
    constexpr iterator<true> begin() const
      requires range<const V> &&
               regular_invocable<const F&, range_reference_t<const V>>;

    constexpr sentinel<false> end();
    constexpr iterator<false> end() requires common_range<V>;
    constexpr sentinel<true> end() const
      requires range<const V> &&
               regular_invocable<const F&, range_reference_t<const V>>;
    constexpr iterator<true> end() const
      requires common_range<const V> &&
               regular_invocable<const F&, range_reference_t<const V>>;

    constexpr auto size() requires sized_range<V> { return ranges::size(base_); }
    constexpr auto size() const requires sized_range<const V>
    { return ranges::size(base_); }
  };

  template<class R, class F>
    transform_view(R&&, F) -> transform_view<all_view<R>, F>;
}
[codeblock:end]

[%@lib@ctor transform_view]
[codeblock:declaration]
constexpr transform_view(V base, F fun);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [`base_] with [`std::move(base)] and [`fun_] with
[`std::move(fun)].
[:zh_CN] 以 [`std::move(base)] 初始化 [`base_] 并以 [`std::move(fun)] 初始化
[`fun_]。
[div:end]

[%@lib@ctor transform_view]
[codeblock:declaration]
template<input_range R>
  requires viewable_range<R> && constructible_from<V, all_view<R>>
constexpr transform_view(R&& r, F fun);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [`base_] with [`views::all(std::forward<R>(r))] and [`fun_]
with [`std::move(fun)].
[:zh_CN] 以 [`views::all(std::forward<R>(r))] 初始化 [`base_] 并以
[`std::move(fun)] 初始化 [`fun_]。
[div:end]

[%@lib@member base[!transform_view]]
[codeblock:declaration]
constexpr V base() const;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return base_;]
[:zh_CN] 等价于：[`return base_;]
[div:end]

[%@lib@member begin[!transform_view]]
[codeblock:declaration]
constexpr iterator<false> begin();
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock:notation]
return iterator<false>{*this, ranges::begin(base_)};
[codeblock:end]
[div:end]

[%@lib@member begin[!transform_view]]
[codeblock:declaration]
constexpr iterator<true> begin() const
  requires range<const V> &&
           regular_invocable<const F&, range_reference_t<const V>>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return iterator<true>{*this, ranges::begin(base_)};
[codeblock:end]
[div:end]

[%@lib@member end[!transform_view]]
[codeblock:declaration]
constexpr sentinel<false> end();
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return sentinel<false>{ranges::end(base_)};
[codeblock:end]
[div:end]

[%@lib@member end[!transform_view]]
[codeblock:declaration]
constexpr iterator<false> end() requires common_range<V>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return iterator<false>{*this, ranges::end(base_)};
[codeblock:end]
[div:end]

[%@lib@member end[!transform_view]]
[codeblock:declaration]
constexpr sentinel<true> end() const
  requires range<const V> &&
           regular_invocable<const F&, range_reference_t<const V>>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return sentinel<true>{ranges::end(base_)};
[codeblock:end]
[div:end]

[%@lib@member end[!transform_view]]
[codeblock:declaration]
constexpr iterator<true> end() const
  requires common_range<const V> &&
           regular_invocable<const F&, range_reference_t<const V>>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return iterator<true>{*this, ranges::end(base_)};
[codeblock:end]
[div:end]
