[section#range.repeat.view
    [:en] Class template [`repeat_view]
    [:zh_CN] 类模板 [`repeat_view]
]

[%@lib repeat_view]
[codeblock:synopsis]
namespace std::ranges {
  template<class T>
    concept [[redoc("*:c@def>")]]integer-like-with-usable-difference-type =  // [=expos]
      [[redoc("*>")]]is-signed-integer-like<T> || ([[redoc("*>")]]is-integer-like<T> && [[redoc("`:c>")]]weakly_incrementable<T>);

  template<[[redoc("`:c>")]]move_constructible T, [[redoc("`:c>")]]semiregular Bound = unreachable_sentinel_t>
    requires (is_object_v<T> && [[redoc("`:c>")]]same_as<T, remove_cv_t<T>> &&
              ([[redoc("*:c>")]]integer-like-with-usable-difference-type<Bound> ||
               [[redoc("`:c>")]]same_as<Bound, unreachable_sentinel_t>))
  class [[redoc("`:c>")]]repeat_view : public view_interface<repeat_view<T, Bound>> {
  private:
    // [:en] [#range.repeat.iterator], class [`repeat_view::[*iterator]] \
    [:zh_CN] [#range.repeat.iterator]，类 [`repeat_view::[*iterator]]
    struct [[redoc("*>")]]iterator;                            // [=expos]

    [[redoc("*>")]]movable-box<T> [[redoc("*>")]]value_;                      // [:en] [=expos], see [#range.move.wrap] \
                                                                              [:zh_CN] [=expos]，参见 [#range.move.wrap]）
    Bound [[redoc("*>")]]bound_ = Bound();                     // [=expos]

  public:
    repeat_view() requires [[redoc("`:c>")]]default_initializable<T> = default;

    constexpr explicit repeat_view(const T& value, Bound bound = Bound())
      requires [[redoc("`:c>")]]copy_constructible<T>;
    constexpr explicit repeat_view(T&& value, Bound bound = Bound());
    template<class... TArgs, class... BoundArgs>
      requires [[redoc("`:c>")]]constructible_from<T, TArgs...> &&
               [[redoc("`:c>")]]constructible_from<Bound, BoundArgs...>
    constexpr explicit repeat_view(piecewise_construct_t,
      tuple<TArgs...> value_args, tuple<BoundArgs...> bound_args = tuple<>{});

    constexpr [[redoc("*>")]]iterator begin() const;
    constexpr [[redoc("*>")]]iterator end() const requires (![[redoc("`:c>")]]same_as<Bound, unreachable_sentinel_t>);
    constexpr unreachable_sentinel_t end() const noexcept;

    constexpr auto size() const requires (![[redoc("`:c>")]]same_as<Bound, unreachable_sentinel_t>);
  };

  template<class T, class Bound>
    repeat_view(T, Bound) -> repeat_view<T, Bound>;
}
[codeblock:end]

[%@lib@ctor repeat_view]
[codeblock:declaration]
constexpr explicit repeat_view(const T& value, Bound bound = Bound())
  requires [[redoc("`:c>")]]copy_constructible<T>;
[codeblock:end]

[div:description]
[para:expects]
[:en] If [`Bound] is not [`unreachable_sentinel_t], [$[`bound] \ge 0].
[:zh_CN] 当 [`Bound] 不是 [`unreachable_sentinel_t] 时，[$[`bound] \ge 0]。

[para:effects]
[:en] Initializes [*value_] with [`value] and [*bound_] with [`bound].
[:zh_CN] 以 [`value] 初始化 [*value_] 并以 [`bound] 初始化 [*bound_]。
[div:end]

[%@lib@ctor repeat_view]
[codeblock:declaration]
constexpr explicit repeat_view(T&& value, Bound bound = Bound());
[codeblock:end]

[div:description]
[para:expects]
[:en] If [`Bound] is not [`unreachable_sentinel_t], [$[`bound] \ge 0].
[:zh_CN] 当 [`Bound] 不是 [`unreachable_sentinel_t] 时，[$[`bound] \ge 0]。

[para:effects]
[:en] Initializes [*value_] with [`std::move(value)] and [*bound_] with [`bound].
[:zh_CN] 以 [`std::move(value)] 初始化 [*value_] 并以 [`bound] 初始化 [*bound_]。
[div:end]

[%@lib@ctor repeat_view]
[codeblock:declaration]
template<class... TArgs, class... BoundArgs>
  requires [[redoc("`:c>")]]constructible_from<T, TArgs...> &&
           [[redoc("`:c>")]]constructible_from<Bound, BoundArgs...>
constexpr explicit repeat_view(piecewise_construct_t,
  tuple<TArgs...> value_args, tuple<BoundArgs...> bound_args = tuple<>{});
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*value_] with [`make_from_tuple<T>(std::move(value_args))]
and initializes [*bound_] with [`make_from_tuple<Bound>(std::move(bound_args))].
[:en] 以 [`make_from_tuple<T>(std::move(value_args))] 初始化，并以
[`make_from_tuple<Bound>(std::move(bound_args))] 初始化 [*bound_]。

[:en] The behavior is undefined if [`Bound] is not [`unreachable_sentinel_t] and
[*bound_] is negative.
[:zh_CN] 如果 [`Bound] 不是 [`unreachable_sentinel_t] 且 [*bound_] 为负数，则其
行为未定义。
[div:end]

[%@lib@member begin[!repeat_view]]
[codeblock:declaration]
constexpr [[redoc("*>")]]iterator begin() const;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return [*iterator](addressof([*value_]));]
[:zh_CN] 等价于：[`return [*iterator](addressof([*value_]));]
[div:end]

[%@lib@member end[!repeat_view]]
[codeblock:declaration]
constexpr [[redoc("*>")]]iterator end() const requires (![[redoc("`:c>")]]same_as<Bound, unreachable_sentinel_t>);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return [*iterator](addressof([*value_]), [*bound_]);]
[:zh_CN] 等价于：[`return [*iterator](addressof([*value_]), [*bound_]);]
[div:end]

[%@lib@member end[!repeat_view]]
[codeblock:declaration]
constexpr unreachable_sentinel_t end() const noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return unreachable_sentinel;]
[:zh_CN] 等价于：[`return unreachable_sentinel;]
[div:end]

[%@lib@member size[!single_view]]
[codeblock:declaration]
constexpr auto size() const requires (![[redoc("`:c>")]]same_as<Bound, unreachable_sentinel_t>);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return [*to-unsigned-like]([*bound_]);]
[:zh_CN] 等价于：[`return [*to-unsigned-like]([*bound_]);]
[div:end]
