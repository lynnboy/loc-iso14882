[section#range.adjacent.transform.sentinel
    [:en] Class template [`adjacent_transform_view::[*sentinel]]
    [:zh_CN] 类模板 [`adjacent_transform_view::[*sentinel]]
]

[%@lib adjacent_transform_view::[*sentinel]]
[codeblock:synopsis]
namespace std::ranges {
  template<[[redoc("`:c>")]]forward_range V, [[redoc("`:c>")]]move_constructible F, size_t N>
    requires [[redoc("`:c>")]]view<V> && (N > 0) && is_object_v<F> &&
             [[redoc("`:c>")]]regular_invocable<F&, [[redoc("*>")]]REPEAT(range_reference_t<V>, N)...> &&
             [[redoc("*:c>")]]can-reference<invoke_result_t<F&, [[redoc("*>")]]REPEAT(range_reference_t<V>, N)...>>
  template<bool Const>
  class adjacent_transform_view<V, F, N>::[[redoc("*>")]]sentinel {
    [[redoc("*>")]]inner-sentinel<Const> [[redoc("*>")]]inner_;                               // [=expos]
    constexpr explicit [[redoc("*>")]]sentinel([[redoc("*>")]]inner-sentinel<Const> inner);   // [=expos]

  public:
    [[redoc("*>")]]sentinel() = default;
    constexpr [[redoc("*>")]]sentinel([[redoc("*>")]]sentinel<!Const> i)
      requires Const && [[redoc("`:c>")]]convertible_to<[[redoc("*>")]]inner-sentinel<false>, [[redoc("*>")]]inner-sentinel<Const>>;

    template<bool OtherConst>
      requires [[redoc("`:c>")]]sentinel_for<[[redoc("*>")]]inner-sentinel<Const>, [[redoc("*>")]]inner-iterator<OtherConst>>
    friend constexpr bool operator==(const [[redoc("*>")]]iterator<OtherConst>& x, const [[redoc("*>")]]sentinel& y);

    template<bool OtherConst>
      requires [[redoc("`:c>")]]sized_sentinel_for<[[redoc("*>")]]inner-sentinel<Const>, [[redoc("*>")]]inner-iterator<OtherConst>>
    friend constexpr range_difference_t<[[redoc("*>")]]maybe-const<OtherConst, [[redoc("*>")]]InnerView>>
      operator-(const [[redoc("*>")]]iterator<OtherConst>& x, const [[redoc("*>")]]sentinel& y);

    template<bool OtherConst>
      requires [[redoc("`:c>")]]sized_sentinel_for<[[redoc("*>")]]inner-sentinel<Const>, [[redoc("*>")]]inner-iterator<OtherConst>>
    friend constexpr range_difference_t<[[redoc("*>")]]maybe-const<OtherConst, [[redoc("*>")]]InnerView>>
      operator-(const [[redoc("*>")]]sentinel& x, const [[redoc("*>")]]iterator<OtherConst>& y);
  };
}
[codeblock:end]

[%@lib@ctor adjacent_transform_view::[*sentinel]]
[codeblock:declaration]
constexpr explicit [[redoc("*>")]]sentinel([[redoc("*>")]]inner-sentinel<Const> inner);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*inner_] with [`inner].
[:zh_CN] 以 [`inner] 初始化 [*inner_]。
[div:end]

[%@lib@ctor adjacent_transform_view::[*sentinel]]
[codeblock:declaration]
constexpr [[redoc("*>")]]sentinel([[redoc("*>")]]sentinel<!Const> i)
  requires Const && [[redoc("`:c>")]]convertible_to<[[redoc("*>")]]inner-sentinel<false>, [[redoc("*>")]]inner-sentinel<Const>>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*inner_] with [`std::move(i.[*inner_])].
[:zh_CN] 以 [`std::move(i.[*inner_])] 初始化 [*inner_]。
[div:end]

[codeblock:declaration]
template<bool OtherConst>
  requires [[redoc("`:c>")]]sentinel_for<[[redoc("*>")]]inner-sentinel<Const>, [[redoc("*>")]]inner-iterator<OtherConst>>
friend constexpr bool operator==(const [[redoc("*>")]]iterator<OtherConst>& x, const [[redoc("*>")]]sentinel& y);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return x.[*inner_] == y.[*inner_];]
[:zh_CN] 等价于：[`return x.[*inner_] == y.[*inner_];]
[div:end]

[codeblock:declaration]
template<bool OtherConst>
  requires [[redoc("`:c>")]]sized_sentinel_for<[[redoc("*>")]]inner-sentinel<Const>, [[redoc("*>")]]inner-iterator<OtherConst>>
friend constexpr range_difference_t<[[redoc("*>")]]maybe-const<OtherConst, [[redoc("*>")]]InnerView>>
  operator-(const [[redoc("*>")]]iterator<OtherConst>& x, const [[redoc("*>")]]sentinel& y);

template<bool OtherConst>
  requires [[redoc("`:c>")]]sized_sentinel_for<[[redoc("*>")]]inner-sentinel<Const>, [[redoc("*>")]]inner-iterator<OtherConst>>
friend constexpr range_difference_t<[[redoc("*>")]]maybe-const<OtherConst, [[redoc("*>")]]InnerView>>
  operator-(const [[redoc("*>")]]sentinel& x, const [[redoc("*>")]]iterator<OtherConst>& y);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return x.[*inner_] - y.[*inner_];]
[:zh_CN] 等价于：[`return x.[*inner_] - y.[*inner_];]
[div:end]
