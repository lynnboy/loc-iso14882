[section#range.elements.iterator
    [:en] Class template [`elements_view::[*iterator]]
    [:zh_CN] 类模板 [`elements_view::[*iterator]]
]

[%@lib elements_view::iterator]
[codeblock:synopsis]
namespace std::ranges {
  template<class V, size_t N>
  template<bool Const>
  class elements_view<V, N>::[[redoc("*>")]]iterator {                 // [=expos]
    using [[redoc("*>")]]base-t = conditional_t<Const, const V, V>;    // [=expos]
    friend [[redoc("*>")]]iterator<!Const>;

    iterator_t<[[redoc("*>")]]base-t> [[redoc("*>")]]current_;
  public:
    using iterator_category = typename iterator_traits<iterator_t<[[redoc("*>")]]base-t>>::iterator_category;
    using value_type = remove_cvref_t<tuple_element_t<N, range_value_t<[[redoc("*>")]]base-t>>>;
    using difference_type = range_difference_t<[[redoc("*>")]]base-t>;

    [[redoc("*>")]]iterator() = default;
    constexpr explicit [[redoc("*>")]]iterator(iterator_t<[[redoc("*>")]]base-t> current);
    constexpr [[redoc("*>")]]iterator([[redoc("*>")]]iterator<!Const> i)
      requires Const && convertible_to<iterator_t<V>, iterator_t<[[redoc("*>")]]base-t>>;

    constexpr iterator_t<[[redoc("*>")]]base-t> base() const &
      requires copyable<iterator_t<[[redoc("*>")]]base-t>>;
    constexpr iterator_t<[[redoc("*>")]]base-t> base() &&;

    constexpr decltype(auto) operator*() const
    { return get<N>(*[[redoc("*>")]]current_); }

    constexpr [[redoc("*>")]]iterator& operator++();
    constexpr void operator++(int) requires (!forward_range<[[redoc("*>")]]base-t>);
    constexpr [[redoc("*>")]]iterator operator++(int) requires forward_range<[[redoc("*>")]]base-t>;

    constexpr [[redoc("*>")]]iterator& operator--() requires bidirectional_range<[[redoc("*>")]]base-t>;
    constexpr [[redoc("*>")]]iterator operator--(int) requires bidirectional_range<[[redoc("*>")]]base-t>;

    constexpr [[redoc("*>")]]iterator& operator+=(difference_type x)
      requires random_access_range<[[redoc("*>")]]base-t>;
    constexpr [[redoc("*>")]]iterator& operator-=(difference_type x)
      requires random_access_range<[[redoc("*>")]]base-t>;

    constexpr decltype(auto) operator[](difference_type n) const
      requires random_access_range<[[redoc("*>")]]base-t>
    { return get<N>(*([[redoc("*>")]]current_ + n)); }

    friend constexpr bool operator==(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
      requires equality_comparable<iterator_t<[[redoc("*>")]]base-t>>;
    friend constexpr bool operator==(const [[redoc("*>")]]iterator& x, const sentinel_t<[[redoc("*>")]]base-t>& y);

    friend constexpr bool operator<(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
      requires random_access_range<[[redoc("*>")]]base-t>;
    friend constexpr bool operator>(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
      requires random_access_range<[[redoc("*>")]]base-t>;
    friend constexpr bool operator<=(const [[redoc("*>")]]iterator& y, const [[redoc("*>")]]iterator& y)
      requires random_access_range<[[redoc("*>")]]base-t>;
    friend constexpr bool operator>=(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
      requires random_access_range<[[redoc("*>")]]base-t>;
    friend constexpr compare_three_way_result_t<iterator_t<[[redoc("*>")]]base-t>>
      operator<=>(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
        requires random_access_range<[[redoc("*>")]]base-t> && three_way_comparable<iterator_t<[[redoc("*>")]]base-t>>;

    friend constexpr [[redoc("*>")]]iterator operator+(const [[redoc("*>")]]iterator& x, difference_type y)
      requires random_access_range<[[redoc("*>")]]base-t>;
    friend constexpr [[redoc("*>")]]iterator operator+(difference_type x, const [[redoc("*>")]]iterator& y)
      requires random_access_range<[[redoc("*>")]]base-t>;
    friend constexpr [[redoc("*>")]]iterator operator-(const [[redoc("*>")]]iterator& x, difference_type y)
      requires random_access_range<[[redoc("*>")]]base-t>;
    friend constexpr difference_type operator-(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
      requires random_access_range<[[redoc("*>")]]base-t>;

    friend constexpr difference_type
      operator-(const [[redoc("*>")]]iterator<Const>& x, const sentinel_t<[[redoc("*>")]]base-t>& y)
        requires sized_sentinel_for<sentinel_t<[[redoc("*>")]]base-t>, iterator_t<[[redoc("*>")]]base-t>>;
    friend constexpr difference_type
      operator-(const sentinel_t<[[redoc("*>")]]base-t>& x, const [[redoc("*>")]]iterator<Const>& y)
        requires sized_sentinel_for<sentinel_t<[[redoc("*>")]]base-t>, iterator_t<[[redoc("*>")]]base-t>>;
  };
}
[codeblock:end]

[%@lib@ctor elements_view::iterator]
[codeblock:declaration]
constexpr explicit [[redoc("*>")]]iterator(iterator_t<[[redoc("*>")]]base-t> current);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*current_] with [`std::move(current)].
[:zh_CN] 以 [`std::move(current)] 初始化 [*current_]。
[div:end]

[%@lib@ctor elements_view::iterator]
[codeblock:declaration]
constexpr [[redoc("*>")]]iterator([[redoc("*>")]]iterator<!Const> i)
  requires Const && convertible_to<iterator_t<V>, iterator_t<[[redoc("*>")]]base-t>>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*current_] with [`std::move(i.[*current_])].
[:zh_CN] 以 [`std::move(i.[*current_])] 初始化 [*current_]。
[div:end]

[%@lib@member base[!elements_view::iterator]]
[codeblock:declaration]
constexpr iterator_t<[[redoc("*>")]]base-t> base() const &
  requires copyable<iterator_t<[[redoc("*>")]]base-t>>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return [*current_];]
[:zh_CN] 等价于：[`return [*current_];]
[div:end]

[%@lib@member base[!elements_view::iterator]]
[codeblock:declaration]
constexpr iterator_t<[[redoc("*>")]]base-t> base() &&;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return std::move([*current_]);]
[:zh_CN] 等价于：[`return std::move([*current_]);]
[div:end]

[%@lib@member operator++[!elements_view::iterator]]
[codeblock:declaration]
constexpr [[redoc("*>")]]iterator& operator++();
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
++[[redoc("*>")]]current_;
return *this;
[codeblock:end]
[div:end]

[%@lib@member operator++[!elements_view::iterator]]
[codeblock:declaration]
constexpr void operator++(int) requires (!forward_range<[[redoc("*>")]]base-t>);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`++[*current_]].
[:zh_CN] 等价于：[`++[*current_]]。
[div:end]

[%@lib@member operator++[!elements_view::iterator]]
[codeblock:declaration]
constexpr [[redoc("*>")]]iterator operator++(int) requires forward_range<[[redoc("*>")]]base-t>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
auto temp = *this;
++[[redoc("*>")]]current_;
return temp;
[codeblock:end]
[div:end]

[%@lib@member operator--[!elements_view::iterator]]
[codeblock:declaration]
constexpr [[redoc("*>")]]iterator& operator--() requires bidirectional_range<[[redoc("*>")]]base-t>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
--[[redoc("*>")]]current_;
return *this;
[codeblock:end]
[div:end]

[%@lib@member operator--[!elements_view::iterator]]
[codeblock:declaration]
constexpr [[redoc("*>")]]iterator operator--(int) requires bidirectional_range<[[redoc("*>")]]base-t>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
auto temp = *this;
--[[redoc("*>")]]current_;
return temp;
[codeblock:end]
[div:end]

[%@lib@member operator+=[!elements_view::iterator]]
[codeblock:declaration]
constexpr [[redoc("*>")]]iterator& operator+=(difference_type n);
  requires random_access_range<[[redoc("*>")]]base-t>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
[[redoc("*>")]]current_ += n;
return *this;
[codeblock:end]
[div:end]

[%@lib@member operator-=[!elements_view::iterator]]
[codeblock:declaration]
constexpr [[redoc("*>")]]iterator& operator-=(difference_type n)
  requires random_access_range<[[redoc("*>")]]base-t>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
[[redoc("*>")]]current_ -= n;
return *this;
[codeblock:end]
[div:end]

[%@lib@member operator==[!elements_view::iterator]]
[codeblock:declaration]
friend constexpr bool operator==(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
  requires equality_comparable<[[redoc("*>")]]base-t>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return x.[*current_] == y.[*current_];]
[:zh_CN] 等价于：[`return x.[*current_] == y.[*current_];]
[div:end]

[%@lib@member operator==[!elements_view::iterator]]
[codeblock:declaration]
friend constexpr bool operator==(const [[redoc("*>")]]iterator& x, const sentinel_t<[[redoc("*>")]]base-t>& y);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return x.[*current_] == y;]
[:zh_CN] 等价于：[`return x.[*current_] == y;]
[div:end]

[%@lib@member operator<[!elements_view::iterator]]
[codeblock:declaration]
friend constexpr bool operator<(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
  requires random_access_range<[[redoc("*>")]]base-t>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return x.[*current_] < y.[*current_];]
[:zh_CN] 等价于：[`return x.[*current_] < y.[*current_];]
[div:end]

[%@lib@member operator>[!elements_view::iterator]]
[codeblock:declaration]
friend constexpr bool operator>(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
  requires random_access_range<[[redoc("*>")]]base-t>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return y < x;]
[:zh_CN] 等价于：[`return y < x;]
[div:end]

[%@lib@member operator<=[!elements_view::iterator]]
[codeblock:declaration]
friend constexpr bool operator<=(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
  requires random_access_range<[[redoc("*>")]]base-t>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return !(y < x);]
[:zh_CN] 等价于：[`return !(y < x);]
[div:end]

[%@lib@member operator>=[!elements_view::iterator]]
[codeblock:declaration]
friend constexpr bool operator>=(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
  requires random_access_range<[[redoc("*>")]]base-t>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return !(x < y);]
[:zh_CN] 等价于：[`return !(x < y);]
[div:end]

[%@lib@member operator<=>[!elements_view::iterator]]
[codeblock:declaration]
friend constexpr compare_three_way_result_t<iterator_t<[[redoc("*>")]]base-t>>
  operator<=>(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
    requires random_access_range<[[redoc("*>")]]base-t> && three_way_comparable<iterator_t<[[redoc("*>")]]base-t>>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return x.[*current_] <=> y.[*current_];]
[:zh_CN] 等价于：[`return x.[*current_] <=> y.[*current_];]
[div:end]

[%@lib@member operator+[!elements_view::iterator]]
[codeblock:declaration]
friend constexpr [[redoc("*>")]]iterator operator+(const [[redoc("*>")]]iterator& x, difference_type y)
  requires random_access_range<[[redoc("*>")]]base-t>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return iterator{x} += y;]
[:zh_CN] 等价于：[`return iterator{x} += y;]
[div:end]

[%@lib@member operator+[!elements_view::iterator]]
[codeblock:declaration]
friend constexpr [[redoc("*>")]]iterator operator+(difference_type x, const [[redoc("*>")]]iterator& y)
  requires random_access_range<[[redoc("*>")]]base-t>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return y + x;]
[:zh_CN] 等价于：[`return y + x;]
[div:end]

[%@lib@member operator-[!elements_view::iterator]]
[codeblock:declaration]
constexpr [[redoc("*>")]]iterator operator-(const [[redoc("*>")]]iterator& x, difference_type y)
  requires random_access_range<[[redoc("*>")]]base-t>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return iterator{x} -= y;]
[:zh_CN] 等价于：[`return iterator{x} -= y;]
[div:end]

[%@lib@member operator-[!elements_view::iterator]]
[codeblock:declaration]
constexpr difference_type operator-(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
  requires random_access_range<[[redoc("*>")]]base-t>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return x.[*current_] - y.[*current_];]
[:zh_CN] 等价于：[`return x.[*current_] - y.[*current_];]
[div:end]

[%@lib@member operator-[!elements_view::iterator]]
[codeblock:declaration]
friend constexpr difference_type
  operator-(const [[redoc("*>")]]iterator<Const>& x, const sentinel_t<[[redoc("*>")]]base-t>& y)
    requires sized_sentinel_for<sentinel_t<[[redoc("*>")]]base-t>, iterator_t<[[redoc("*>")]]base-t>>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return x.[*current_] - y;]
[:zh_CN] 等价于：[`return x.[*current_] - y;]
[div:end]

[%@lib@member operator-[!elements_view::iterator]]
[codeblock:declaration]
friend constexpr difference_type
  operator-(const sentinel_t<[[redoc("*>")]]base-t>& x, const [[redoc("*>")]]iterator<Const>& y)
    requires sized_sentinel_for<sentinel_t<[[redoc("*>")]]base-t>, iterator_t<[[redoc("*>")]]base-t>>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return -(y - x);]
[:zh_CN] 等价于：[`return -(y - x);]
[div:end]
