[section#coro.generator.members
    [:en] Members
    [:zh_CN] 成员
]

[%@lib@ctor generator]
[codeblock:declaration]
generator(generator&& other) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*coroutine_] with [`exchange(other.[*coroutine_], {})] and
[*active_] with [`exchange(other.active_, nullptr)].
[:zh_CN] 以 [`exchange(other.[*coroutine_], {})] 初始化 [*coroutine_] 并以
[`exchange(other.active_, nullptr)] 初始化 [*active_]。

[para]
[begin:note]
[:en] Iterators previously obtained from [`other] are not invalidated;
they become iterators into [`*this].
[:zh_CN] 之前从 [`other] 获得的迭代器并不会失效；它们变为 [`*this] 中的迭代器。
[end:note]
[div:end]

[%@lib@dtor generator]
[codeblock:declaration]
~generator();
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
if ([[redoc("*>")]]coroutine_) {
  [[redoc("*>")]]coroutine_.destroy();
}
[codeblock:end]

[para]
[begin:note]
[:en] Ownership of recursively yielded generators is held in awaitable objects
in the coroutine frame of the yielding generator, so destroying the root
generator effectively destroys the entire stack of yielded generators.
[:zh_CN] 被递归产出值的生成器的所有权，是在进行产出的生成器的协程栈帧中的可等待
对象中持有的，因此销毁根生成器实际上会销毁整个被产出的生成器的栈。
[end:note]
[div:end]

[%@lib@member operator=[!generator]]
[codeblock:declaration]
generator& operator=(generator other) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
swap([[redoc("*>")]]coroutine_, other.[[redoc("*>")]]coroutine_);
swap([[redoc("*>")]]active_, other.[[redoc("*>")]]active_);
[codeblock:end]

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。

[para]
[begin:note]
[:en] Iterators previously obtained from [`other] are not invalidated;
they become iterators into [`*this].
[:zh_CN] 之前从 [`other] 获得的迭代器并不会失效；它们变为 [`*this] 中的迭代器。
[end:note]
[div:end]

[%@lib@member begin[!generator]]
[codeblock:declaration]
[[redoc("*>")]]iterator begin();
[codeblock:end]

[div:description]
[para:expects]
[:en] [*coroutine_] refers to a coroutine suspended at its initial suspend
point ([#dcl.fct.def.coroutine]).
[:zh_CN] [*coroutine_] 指代暂停于初始暂停点的协程（[#dcl.fct.def.coroutine]）。

[para:effects]
[:en] Pushes [*coroutine_] into [`*[*active_]], then evaluates
[`[*coroutine_].resume()].
[:zh_CN] 将 [*coroutine_] 推入 [`*[*active_]]，然后求值 [`[*coroutine_].resume()]。

[para:returns]
[:en] An [*iterator] object whose member [*coroutine_] refers to the same
coroutine as does [*coroutine_].
[:zh_CN] 一个 [*iterator] 对象，其成员 [*coroutine_] 与 [*coroutine_] 指代同一个
协程。

[para]
[begin:note]
[:en] A program that calls [`begin] more than once on the same generator
has undefined behavior.
[:zh_CN] 在同一个生成器上多次调用 [`begin] 的程序具有未定义行为。
[end:note]
[div:end]

[%@lib@member end[!generator]]
[codeblock:declaration]
default_sentinel_t end() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`default_sentinel].
[:zh_CN] [`default_sentinel]。
[div:end]
