[section#range.drop.while.overview
    [:en] Overview
    [:zh_CN] 概述
]

[para]
[:en] Given a unary predicate [`pred] and a view [`r], [`drop_while_view]
produces a view of the range
[=range(ranges::find_if_not(r, pred),ranges::end(r))].
[:zh_CN] 给定一元谓词 [`pred] 和一个视图 [`r]，[`drop_while_view] 产生范围
[=range(ranges::find_if_not(r, pred),ranges::end(r))] 的视图。

[para]
[%@lib@member drop_while[!views]]
[:en] The name [`views::drop_while] denotes a range adaptor object
([#range.adaptor.object]).
[:zh_CN] 名字 [`views::drop_while] 代表一个范围适配器对象
（[#range.adaptor.object]）。

[:en] Given subexpressions [`E] and [`F], the expression
[`views::drop_while(E, F)] is expression-equivalent to [`drop_while_view(E, F)].
[:zh_CN] 给定子表达式 [`E] 和 [`F]，表达式 [`views::drop_while(E, F)] 按表达式
等价于 [`drop_while_view(E, F)]。

[para]
[begin:example]
[codeblock]
constexpr auto source = "  \t   \t   \t   hello there"sv;
auto is_invisible = [](const auto x) { return x == ' ' || x == '\t'; };
auto skip_ws = views::drop_while(source, is_invisible);
for (auto c : skip_ws) {
  cout << c;                                    // [:en] prints [`hello there] with no leading space \
                                                [:zh_CN] 打印 [`hello there] 而没有开头的空白
}
[codeblock:end]
[end:example]
