[section#range.istream.view
    [:en] Class template [`basic_istream_view]
    [:zh_CN] 类模板 [`basic_istream_view]
]

[%@lib basic_istream_view]
[codeblock:synopsis]
namespace std::ranges {
  template<class Val, class CharT, class Traits>
    concept [[redoc("*:c@def>")]]stream-extractable =                // [=expos]
      requires(basic_istream<CharT, Traits>& is, Val& t) {
         is >> t;
      };

  template<[[redoc("`:c>")]]movable Val, class CharT, class Traits = char_traits<CharT>>
    requires [[redoc("`:c>")]]default_initializable<Val> &&
             [[redoc("*:c>")]]stream-extractable<Val, CharT, Traits>
  class basic_istream_view : public view_interface<basic_istream_view<Val, CharT, Traits>> {
  public:
    constexpr explicit basic_istream_view(basic_istream<CharT, Traits>& stream);

    constexpr auto begin() {
      *[[redoc("*>")]]stream_ >> [[redoc("*>")]]value_;
      return [[redoc("*>")]]iterator{*this};
    }

    constexpr default_sentinel_t end() const noexcept;

  private:
    // [:en] [#range.istream.iterator], class [`basic_istream_view::[*iterator]] \
    [:zh_CN] [#range.istream.iterator]，类 [`basic_istream_view::[*iterator]]
    struct [[redoc("*>")]]iterator;                            // [=expos]
    basic_istream<CharT, Traits>* [[redoc("*>")]]stream_;      // [=expos]
    Val [[redoc("*>")]]value_ = Val();                         // [=expos]
  };
}
[codeblock:end]

[%@lib@ctor basic_istream_view]
[codeblock:declaration]
constexpr explicit basic_istream_view(basic_istream<CharT, Traits>& stream);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*stream_] with [`addressof(stream)].
[:zh_CN] 以 [`addressof(stream)] 初始化 [*stream_]。
[div:end]

[%@lib@member end[!basic_istream_view]]
[codeblock:declaration]
constexpr default_sentinel_t end() const noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return default_sentinel;]
[:zh_CN] 等价于：[`return default_sentinel;]
[div:end]
