[section#range.sized
    [:en] Sized ranges
    [:zh_CN] 有大小的范围
]

[para]
[:en] The [`:c sized_range] concept refines [`:c range] with the requirement
that the number of elements in the range can be determined in amortized constant
time using [`ranges::size].
[:zh_CN] [`:c sized_range] 概念精化了 [`:c range]，规定范围中元素的数量可以用
[`ranges::size] 函数在摊销常量时间内确定。

[codeblock:declaration]
template<class T>
  concept [[redoc("`:c@def>")]]sized_range =
    [[redoc("`:c>")]]range<T> &&
    requires(T& t) { ranges::size(t); };
[codeblock:end]

[div:description]
[para]
[:en] Given an lvalue [`t] of type [`remove_reference_t<T>], [`T] models
[`:c sized_range] only if
[:zh_CN] 给定某个 [`remove_reference_t<T>] 类型的左值 [`t]，仅当满足以下条件时，
[`T] 构成 [`:c sized_range]：

[list]
[item]
[:en@~] [`ranges::size(t)] is amortized [?bigoh 1], does not modify [`t], and is
equal to [`ranges::distance(t)], and
[:zh_CN@~] [`ranges::size(t)] 为摊销 [?bigoh 1]，不会修改 [`t]，且等于
[`ranges::distance(t)]，并且

[item]
[:en@~] if [`iterator_t<T>] models [`:c forward_iterator], [`ranges::size(t)] is
well-defined regardless of the evaluation of [`ranges::begin(t)].
[:zh_CN@~] 若 [`iterator_t<T>] 构成 [`:c forward_iterator]，则无论
[`ranges::begin(t)] 的求值如何，[`ranges::size(t)] 都是良构的。

[begin:note]
[:en] [`ranges::size(t)] is otherwise not required to be well-defined after
evaluating [`ranges::begin(t)].
[:zh_CN] 否则的话，在对 [`ranges::begin(t)] 求值之后并不要求 [`ranges::size(t)]
是良构的。

[:en] For example, it is possible for [`ranges::size(t)] to be well-defined for
a [`:c sized_range] whose iterator type does not model [`:c forward_iterator]
only if evaluated before the first call to [`ranges::begin(t)].
[:zh_CN] 例如，对于迭代器类型并不构成 [`:c forward_iterator] 的 [`:c sized_range]，
仅在对 [`ranges::begin(t)] 的首次调用之前求值时，[`ranges::size(t)] 有可能良构。
[end:note]
[list:end]
[div:end]

[%@lib disable_sized_range]
[codeblock:declaration]
template<class>
  inline constexpr bool disable_sized_range = false;
[codeblock:end]

[div:description]
[para:remarks]
[:en] Pursuant to [#namespace.std], users may specialize [`disable_sized_range]
for cv-unqualified program-defined types.
[:zh_CN] 根据 [#namespace.std]，用户可以针对无 cv 限定的程序定义的类型特化
[`disable_sized_range]。

[:en] Such specializations shall be usable in constant expressions ([#expr.const])
and have type [`const bool].
[:zh_CN] 这些特化式应当可以在常量表达式（[#expr.const]）中使用，并具有类型
[`const bool]。

[para]
[begin:note]
[:en] [`disable_sized_range] allows use of range types with the library that
satisfy but do not in fact model [`:c sized_range].
[:zh_CN] 可以利用 [`disable_sized_range] 来将符合但并不真正构成 [`:c sized_range]
的范围类型与程序库一起使用。
[end:note]
[div:end]
