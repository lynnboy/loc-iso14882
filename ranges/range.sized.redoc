[section#range.sized
    [:en] Sized ranges
    [:zh_CN] 有大小的范围
]

[para]
[:en] The [`sized_range] concept specifies the requirements of a [`range] type
that knows its size in constant time with the [`size] function.
[:zh_CN] [`sized_range] 概念对 [`range] 类型指定了规定，可以在常量时间内通过
[`size] 函数得知其大小。

[%@librry sized_range]
[codeblock:declaration]
template<class T>
  concept sized_range =
    Range<T> &&
    !disable_sized_range<remove_cvref_t<T>> &&
    requires(T& t) { ranges::size(t); };
[codeblock:end]

[enter:description]
[para]
[:en] Given an lvalue [`t] of type [`remove_reference_t<T>], [`T] models
[`sized_range] only if
[:zh_CN] 给定某个 [`remove_reference_t<T>] 类型的左值 [`t]，仅当满足以下条件时，
[`T] 构成 [`sized_range]：

[list]
[item]
[:en@~] [`ranges::size(t)] is [=O(1)], does not modify [`t], and is equal to
[`ranges::distance(t)], and
[:zh_CN@~] [`ranges::size(t)] 为 [=O(1)]，不会修改 [`t]，且等于
[`ranges::distance(t)]，并且

[item]
[:en@~] if [`iterator_t<T>] models [`forward_iterator], [`ranges::size(t)] is
well-defined regardless of the evaluation of [`ranges::begin(t)].
[:zh_CN@~] 若 [`iterator_t<T>] 构成 [`forward_iterator]，则无论
[`ranges::begin(t)] 的求值如何，[`ranges::size(t)] 都是良构的。

[enter:note]
[:en] [`ranges::size(t)] is otherwise not required to be well-defined after
evaluating [`ranges::begin(t)].
[:zh_CN] 否则的话，在对 [`ranges::begin(t)] 求值之后并不要求 [`ranges::size(t)]
是良构的。

[:en] For example, [`ranges::size(t)] might be well-defined for a [`sized_range]
whose iterator type does not model [`forward_iterator] only if evaluated before
the first call to [`ranges::begin(t)].
[:zh_CN] 例如，对于迭代器类型并不构成 [`forward_iterator] 的 [`sized_range]，仅在
对 [`ranges::begin(t)] 的首次调用之前求值时，[`ranges::size(t)] 才能是良构的。
[exit:note]
[list:end]

[para]
[enter:note]
[:en] The complexity requirement for the evaluation of [`ranges::size]
is non-amortized, unlike the case for the complexity of the evaluations of
[`ranges::begin] and [`ranges::end] in the [`range] concept.
[:zh_CN] 对于 [`ranges::size] 的求值的复杂度规定并非是均摊的，这点与 [`range]
概念的 [`ranges::begin] 和 [`ranges::end] 的求值的复杂度的情况并不相同。
[exit:note]

[%@library disable_sized_range]
[codeblock:declaration]
template<class>
  inline constexpr bool disable_sized_range = false;
[codeblock:end]

[enter:description]
[para:remarks]
[:en] Pursuant to [#namespace.std], users may specialize [`disable_sized_range]
for cv-unqualified program-defined types.
[:zh_CN] 根据 [#namespace.std]，用户可以针对无 cv 限定的程序定义的类型特化
[`disable_sized_range]。

[:en] Such specializations shall be usable in constant expressions ([#expr.const])
and have type [`const bool].
[:zh_CN] 这些特化式应当可以在常量表达式（[#expr.const]）中使用，并具有类型
[`const bool]。

[para]
[enter:note]
[:en] [`disable_sized_range] allows use of range types with the library that
satisfy but do not in fact model [`sized_range].
[:zh_CN] 可以利用 [`disable_sized_range] 来将符合但并不真正构成 [`sized_range]
的范围类型与程序库一起使用。
[exit:note]
[exit:description]
