[section#range.join.with.iterator
    [:en] Class template [`join_with_view::[*iterator]]
    [:zh_CN] 类模板 [`join_with_view::[*iterator]]
]

[codeblock:synopsis]
namespace std::ranges {
  template<[[redoc("`:c>")]]input_range V, [[redoc("`:c>")]]forward_range Pattern>
    requires [[redoc("`:c>")]]view<V> && [[redoc("`:c>")]]input_range<range_reference_t<V>>
          && [[redoc("`:c>")]]view<Pattern> && [[redoc("*:c>")]]compatible-joinable-ranges<range_reference_t<V>, Pattern>
  template<bool Const>
  class join_with_view<V, Pattern>::[[redoc("*>")]]iterator {
    using [[redoc("*>")]]Parent = [[redoc("*>")]]maybe-const<Const, join_with_view>;                  // [=expos]
    using [[redoc("*>")]]Base = [[redoc("*>")]]maybe-const<Const, V>;                                 // [=expos]
    using [[redoc("*>")]]InnerBase = range_reference_t<Base>;                          // [=expos]
    using [[redoc("*>")]]PatternBase = [[redoc("*>")]]maybe-const<Const, Pattern>;                    // [=expos]

    using [[redoc("*>")]]OuterIter = iterator_t<[[redoc("*>")]]Base>;                                 // [=expos]
    using [[redoc("*>")]]InnerIter = iterator_t<[[redoc("*>")]]InnerBase>;                            // [=expos]
    using [[redoc("*>")]]PatternIter = iterator_t<[[redoc("*>")]]PatternBase>;                        // [=expos]

    static constexpr bool [[redoc("*>")]]ref-is-glvalue = is_reference_v<[[redoc("*>")]]InnerBase>;   // [=expos]

    [[redoc("*>")]]Parent* [[redoc("*>")]]parent_ = nullptr;                                          // [=expos]
    [[redoc("*>")]]OuterIter [[redoc("*>")]]outer_it_ = [[redoc("*>")]]OuterIter();                                  // [=expos]
    variant<[[redoc("*>")]]PatternIter, [[redoc("*>")]]InnerIter> [[redoc("*>")]]inner_it_;                          // [=expos]

    constexpr [[redoc("*>")]]iterator([[redoc("*>")]]Parent& parent, iterator_t<[[redoc("*>")]]Base> outer);         // [=expos]
    constexpr auto&& [[redoc("*>")]]update-inner(const [[redoc("*>")]]OuterIter&);                    // [=expos]
    constexpr auto&& [[redoc("*>")]]get-inner(const [[redoc("*>")]]OuterIter&);                       // [=expos]
    constexpr void [[redoc("*>")]]satisfy();                                           // [=expos]

  public:
    using iterator_concept = [[redoc("[=seebelow]")]];
    using iterator_category = [[redoc("[=seebelow]", "_")]]_;                                // [:en] not always present \
                                                                                             [:zh_CN] 不总是出现
    using value_type = [[redoc("[=seebelow]")]];
    using difference_type = [[redoc("[=seebelow]")]];

    [[redoc("*>")]]iterator() requires [[redoc("`:c>")]]default_initializable<[[redoc("*>")]]OuterIter> = default;
    constexpr [[redoc("*>")]]iterator([[redoc("*>")]]iterator<!Const> i)
        requires Const && [[redoc("`:c>")]]convertible_to<iterator_t<V>, [[redoc("*>")]]OuterIter> &&
                 [[redoc("`:c>")]]convertible_to<iterator_t<[[redoc("*>")]]InnerRng>, [[redoc("*>")]]InnerIter> &&
                 [[redoc("`:c>")]]convertible_to<iterator_t<Pattern>, [[redoc("*>")]]PatternIter>;

    constexpr decltype(auto) operator*() const;

    constexpr [[redoc("*>")]]iterator& operator++();
    constexpr void operator++(int);
    constexpr [[redoc("*>")]]iterator operator++(int)
        requires [[redoc("*>")]]refs-glvalue && [[redoc("`:c>")]]forward_iterator<[[redoc("*>")]]OuterIter> &&
                 [[redoc("`:c>")]]forward_iterator<[[redoc("*>")]]InnerIter>;

    constexpr [[redoc("*>")]]iterator& operator--()
        requires [[redoc("*>")]]ref-is-glvalue && [[redoc("`:c>")]]bidirectional_range<[[redoc("*>")]]Base> &&
                 [[redoc("*:c>")]]bidirectional-common<[[redoc("*>")]]InnerBase> && [[redoc("*:c>")]]bidirectional-common<[[redoc("*>")]]PatternBase>;
    constexpr [[redoc("*>")]]iterator operator--(int)
        requires [[redoc("*>")]]ref-is-glvalue && [[redoc("`:c>")]]bidirectional_range<[[redoc("*>")]]Base> &&
                 [[redoc("*:c>")]]bidirectional-common<[[redoc("*>")]]InnerBase> && [[redoc("*:c>")]]bidirectional-common<[[redoc("*>")]]PatternBase>;

    friend constexpr bool operator==(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
        requires [[redoc("*>")]]ref-is-glvalue && [[redoc("`:c>")]]equality_comparable<[[redoc("*>")]]OuterIter> &&
                 [[redoc("`:c>")]]equality_comparable<[[redoc("*>")]]InnerIter>;

    friend constexpr decltype(auto) iter_move(const [[redoc("*>")]]iterator& x) {
      using rvalue_reference = common_reference_t<
        iter_rvalue_reference_t<[[redoc("*>")]]InnerIter>,
        iter_rvalue_reference_t<[[redoc("*>")]]PatternIter>>;
      return visit<rvalue_reference>(ranges::iter_move, x.[[redoc("*>")]]inner_it_);
    }

    friend constexpr void iter_swap(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
        requires [[redoc("`:c>")]]indirectly_swappable<[[redoc("*>")]]InnerIter, [[redoc("*>")]]PatternIter> {
      visit(ranges::iter_swap, x.[[redoc("*>")]]inner_it_, y.[[redoc("*>")]]inner_it_);
    }
  };
}
[codeblock:end]

[para]
[:en] [`[*iterator]::iterator_concept] is defined as follows:
[:zh_CN] [`[*iterator]::iterator_concept] 的定义如下：

[list]
[item]
[:en] If [*ref-is-glvalue] is [`true], [*Base] models [`:c bidirectional_range],
and [*InnerBase] and [*PatternBase] each model [*:c bidirectional-common], then
[`iterator_concept] denotes [`bidirectional_iterator_tag].
[:zh_CN] 若 [*ref-is-glvalue] 为 [`true]，[*Base] 构成 [`:c bidirectional_range]，
且 [*InnerBase] 和 [*PatternBase] 均构成 [*:c bidirectional-common]，则
[`iterator_concept] 代表 [`bidirectional_iterator_tag]。

[item]
[:en] Otherwise, if [*ref-is-glvalue] is [`true] and [*Base] and [*InnerBase]
each model [`:c forward_range], then [`iterator_concept] denotes
[`forward_iterator_tag].
[:zh_CN] 否则，若 [*ref-is-glvalue] 为 [`true] 且 [*Base] 和 [*InnerBase]
均构成 [`:c forward_range]，则 [`iterator_concept] 代表 [`forward_iterator_tag]。

[item]
[:en] Otherwise, [`iterator_concept] denotes [`input_iterator_tag].
[:zh_CN] 否则，[`iterator_concept] 代表 [`input_iterator_tag]。
[list:end]

[para]
[:en] The member [~typedef-name] [`iterator_category] is defined if and only if
[*ref-is-glvalue] is [`true], and [`Base] and [*InnerBase] each model
[`:c forward_range].
[:zh_CN] 当且仅当 [*ref-is-glvalue] 为 [`true]，且 [`Base] 和 [*InnerBase] 均
构成 [`:c forward_range] 时，成员 [~typedef-名] [`iterator_category] 被定义。

[:en] In that case, [`[*iterator]::iterator_category] is defined as follows:
[:zh_CN] 这种情况下，[`[*iterator]::iterator_category] 的定义如下：

[list]
[item]
[:en] Let [^OUTERC] denote [`iterator_traits<[*OuterIter]>::iterator_category],
let [^INNERC] denote [`iterator_traits<[*InnerIter]>::iterator_category], and
let [^PATTERNC] denote [`iterator_traits<[*PatternIter]>::iterator_category].
[:zh_CN] 令 [^OUTERC] 代表 [`iterator_traits<[*OuterIter]>::iterator_category]，
令 [^INNERC] 代表 [`iterator_traits<[*InnerIter]>::iterator_category]，并令
[^PATTERNC] 代表 [`iterator_traits<[*PatternIter]>::iterator_category]。

[item]
[:en] If
[:zh_CN] 如果
[codeblock]
is_lvalue_reference_v<common_reference_t<iter_reference_t<[[redoc("*>")]]InnerIter>,
                                         iter_reference_t<[[redoc("*>")]]PatternIter>>>
[codeblock:end]
[:en@~] is [`false], [`iterator_category] denotes [`input_iterator_tag].
[:zh_CN@~] 为 [`false]，则 [`iterator_category] 代表 [`input_iterator_tag]。

[item]
[:en] Otherwise, if [^OUTERC], [^INNERC], and [^PATTERNC] each model
[`[`:c derived_from]<bidirectional_iterator_category>] and [*InnerBase] and
[*PatternBase] each model [`:c common_range], [`iterator_category] denotes
[`bidirectional_iterator_tag].
[:zh_CN] 否则，若 [^OUTERC]，[^INNERC]，和 [^PATTERNC] 均构成
[`[`:c derived_from]<bidirectional_iterator_category>]，且 [*InnerBase] 和
[*PatternBase] 均构成 [`:c common_range]，则 [`iterator_category] 代表
[`bidirectional_iterator_tag]。

[item]
[:en] Otherwise, if [^OUTERC], [^INNERC], and [^PATTERNC] each model
[`[`:c derived_from]<forward_iterator_tag>], [`iterator_category] denotes
[`forward_iterator_tag].
[:zh_CN] 否则，若 [^OUTERC]，[^INNERC]，和 [^PATTERNC] 均构成
[`[`:c derived_from]<forward_iterator_tag>]，则 [`iterator_category] 代表
[`forward_iterator_tag]。

[item]
[:en] Otherwise, [`iterator_category] denotes [`input_iterator_tag].
[:zh_CN] 否则，[`iterator_category] 代表 [`input_iterator_tag]。
[list:end]

[para]
[:en] [`[*iterator]::value_type] denotes the type:
[:zh_CN] [`[*iterator]::value_type] 代表类型：
[codeblock]
common_type_t<iter_value_t<[[redoc("*>")]]InnerIter>, iter_value_t<[[redoc("*>")]]PatternIter>>
[codeblock:end]

[para]
[:en] [`[*iterator]::difference_type] denotes the type:
[:zh_CN] [`[*iterator]::difference_type] 代表类型：
[codeblock]
common_type_t<
    iter_difference_t<[[redoc("*>")]]OuterIter>,
    iter_difference_t<[[redoc("*>")]]InnerIter>,
    iter_difference_t<[[redoc("*>")]]PatternIter>>
[codeblock:end]

[codeblock:declaration]
constexpr auto&& [[redoc("*>")]]update-inner(const [[redoc("*>")]]OuterIter& x);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
if constexpr ([[redoc("*>")]]ref-is-glvalue)
  return *x;
else
  return [[redoc("*>")]]parent_->[[redoc("*>")]]inner_.[[redoc("*>")]]emplace-deref(x);
[codeblock:end]
[div:end]

[codeblock:declaration]
constexpr auto&& [[redoc("*>")]]get-inner(const [[redoc("*>")]]OuterIter& x);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
if constexpr ([[redoc("*>")]]ref-is-glvalue)
  return *x;
else
  return *[[redoc("*>")]]parent_->[[redoc("*>")]]inner_;
[codeblock:end]
[div:end]

[codeblock:declaration]
constexpr void [[redoc("*>")]]satisfy();
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
while (true) {
  if ([[redoc("*>")]]inner_it_.index() == 0) {
    if (std::get<0>([[redoc("*>")]]inner_it_) != ranges::end([[redoc("*>")]]parent_->[[redoc("*>")]]pattern_))
      break;
    auto&& inner = [[redoc("*>")]]update-inner([[redoc("*>")]]outer_it_);
    [[redoc("*>")]]inner_it_.emplace<1>(ranges::begin(inner));
  } else {
    auto&& inner = [[redoc("*>")]]get-inner([[redoc("*>")]]outer_it_);
    if (std::get<1>([[redoc("*>")]]inner_it_) != ranges::end(inner))
      break;
    if (++[[redoc("*>")]]outer_it_ == ranges::end([[redoc("*>")]]parent_->[[redoc("*>")]]base_)) {
      if constexpr ([[redoc("*>")]]ref-is-glvalue)
        [[redoc("*>")]]inner_it_.emplace<0>();
      break;
    }
    [[redoc("*>")]]inner_it_.emplace<0>(ranges::begin([[redoc("*>")]]parent_->[[redoc("*>")]]pattern_));
  }
}
[codeblock:end]

[begin:note]
[:en] [`join_with_view] iterators use the [*satisfy] function to skip over empty
inner ranges.
[:zh_CN] [`join_with_view] 的迭代器利用 [*satisfy] 函数以跳过空的内部范围。
[end:note]
[div:end]

[codeblock:declaration]
constexpr iterator([[redoc("*>")]]Parent& parent, iterator_t<[[redoc("*>")]]Base> outer)
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*parent_] with [`addressof(parent)] and [*outer_it_] with
[`std::move(outer)].
[:zh_CN] 以 [`addressof(parent)] 初始化 [*parent_] 并以 [`std::move(outer)]
初始化 [*outer_it_]。

[:en] Then equivalent to:
[:zh_CN] 然后等价于：
[codeblock]
if ([[redoc("*>")]]outer_it_ != ranges::end([[redoc("*>")]]parent_->[[redoc("*>")]]base_)) {
  auto&& inner = [[redoc("*>")]]update-inner([[redoc("*>")]]outer_it_);
  [[redoc("*>")]]inner_it_.emplace<1>(ranges::begin(inner));
  [[redoc("*>")]]satisfy();
}
[codeblock:end]
[div:end]

[codeblock:declaration]
constexpr [[redoc("*>")]]iterator([[redoc("*>")]]iterator<!Const> i)
    requires Const && convertible_to<iterator_t<V>, [[redoc("*>")]]OuterIter> &&
             convertible_to<iterator_t<[[redoc("*>")]]InnerRng>, [[redoc("*>")]]InnerIter> &&
             convertible_to<iterator_t<Pattern>, [[redoc("*>")]]PatternIter>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*outer_it_] with [`std::move(i.[*outer_it_])] and [*parent_]
with [`i.[*parent_]].
[:zh_CN] 以 [`std::move(i.[*outer_it])] 初始化 [*outer_it]，并以 [`i.[*parent_]]
初始化 [*parent_]。

[:en] Then equivalent to:
[:zh_CN] 然后等价于：
[codeblock]
if (i.[[redoc("*>")]]inner_it_.index() == 0)
  [[redoc("*>")]]inner_it_.emplace<0>(std::get<0>(std::move(i.[[redoc("*>")]]inner_it_)));
else
  [[redoc("*>")]]inner_it_.emplace<1>(std::get<1>(std::move(i.[[redoc("*>")]]inner_it_)));
[codeblock:end]
[div:end]

[codeblock:declaration]
constexpr decltype(auto) operator*() const;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
using reference =
  common_reference_t<iter_reference_t<[[redoc("*>")]]InnerIter>, iter_reference_t<[[redoc("*>")]]PatternIter>>;
return visit([](auto& it) -> reference { return *it; }, [[redoc("*>")]]inner_it_);
[codeblock:end]
[div:end]

[codeblock:declaration]
constexpr [[redoc("*>")]]iterator& operator++();
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
visit([](auto& it){ ++it; }, [[redoc("*>")]]inner_it_);
[[redoc("*>")]]satisfy();
return *this;
[codeblock:end]
[div:end]

[codeblock:declaration]
constexpr void operator++(int);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`++*this].
[:zh_CN] 等价于：[`++*this]。
[div:end]

[codeblock:declaration]
constexpr [[redoc("*>")]]iterator operator++(int)
  requires [[redoc("*>")]]ref-is-glvalue && [[redoc("`:c>")]]forward_iterator<[[redoc("*>")]]OuterIter> && [[redoc("`:c>")]]forward_iterator<[[redoc("*>")]]InnerIter>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
[[redoc("*>")]]iterator tmp = *this;
++*this;
return tmp;
[codeblock:end]
[div:end]

[codeblock:declaration]
constexpr [[redoc("*>")]]iterator& operator--()
  requires [[redoc("*>")]]ref-is-glvalue && [[redoc("`:c>")]]bidirectional_range<[[redoc("*>")]]Base> &&
           [[redoc("*:c>")]]bidirectional-common<[[redoc("*>")]]InnerBase> && [[redoc("*:c>")]]bidirectional-common<[[redoc("*>")]]PatternBase>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
if ([[redoc("*>")]]outer_it_ == ranges::end([[redoc("*>")]]parent_->[[redoc("*>")]]base_)) {
  auto&& inner = *--[[redoc("*>")]]outer_it_;
  [[redoc("*>")]]inner_it_.emplace<1>(ranges::end(inner));
}

while (true) {
  if ([[redoc("*>")]]inner_it_.index() == 0) {
    auto& it = std::get<0>([[redoc("*>")]]inner_it_);
    if (it == ranges::begin([[redoc("*>")]]parent_->[[redoc("*>")]]pattern_)) {
      auto&& inner = *--[[redoc("*>")]]outer_it_;
      [[redoc("*>")]]inner_it_.emplace<1>(ranges::end(inner));
    } else {
      break;
    }
  } else {
    auto& it = std::get<1>([[redoc("*>")]]inner_it_);
    auto&& inner = *[[redoc("*>")]]outer_it_;
    if (it == ranges::begin(inner)) {
      [[redoc("*>")]]inner_it_.emplace<0>(ranges::end([[redoc("*>")]]parent_->[[redoc("*>")]]pattern_));
    } else {
      break;
    }
  }
}
visit([](auto& it){ --it; }, [[redoc("*>")]]inner_it_);
return *this;
[codeblock:end]
[div:end]

[%@lib@member operator--[!join_view::iterator]]
[codeblock:declaration]
constexpr [[redoc("*>")]]iterator operator--(int)
  requires [[redoc("*>")]]ref-is-glvalue && [[redoc("`:c>")]]bidirectional_range<[[redoc("*>")]]Base> &&
           [[redoc("*:c>")]]bidirectional-common<[[redoc("*>")]]InnerBase> && [[redoc("*:c>")]]bidirectional-common<[[redoc("*>")]]PatternBase>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
[[redoc("*>")]]iterator tmp = *this;
--*this;
return tmp;
[codeblock:end]
[div:end]

[%@lib@member operator==[!join_view::iterator]]
[codeblock:declaration]
friend constexpr bool operator==(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
  requires [[redoc("*>")]]ref-is-glvalue && [[redoc("`:c>")]]equality_comparable<[[redoc("*>")]]OuterIter> &&
           [[redoc("`:c>")]]equality_comparable<@\exposid{InnerIter}@>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return x.[[redoc("*>")]]outer_it_ == y.[[redoc("*>")]]outer_it_ && x.[[redoc("*>")]]inner_it_ == y.[[redoc("*>")]]inner_it_;
[codeblock:end]
[div:end]
