[section#range.filter.sentinel
    [:en] Class [`filter_view::sentinel]
    [:zh_CN] 类 [`filter_view::sentinel]
]

[%@library sentinel[!filter_view]]
[codeblock:synopsis]
namespace std::ranges {
  template<class V, class Pred>
  class filter_view<V, Pred>::sentinel {
  private:
    sentinel_t<V> end_ = sentinel_t<V>();       // [=expos]
  public:
    sentinel() = default;
    constexpr explicit sentinel(filter_view& parent);

    constexpr sentinel_t<V> base() const;

    friend constexpr bool operator==(const iterator& x, const sentinel& y);
  };
}
[codeblock:end]

[%@library sentinel[!filter_view::sentinel]]
[codeblock:declaration]
constexpr explicit sentinel(filter_view& parent);
[codeblock:end]

[begin:description]
[para:effects]
[:en] Initializes [`end_] with [`ranges::end(parent.base_)].
[:zh_CN] 以 [`ranges::end(parent.base_)] 初始化 [`end_]。
[end:description]

[%@library base[!filter_view::sentinel]]
[codeblock:declaration]
constexpr sentinel_t<V> base() const;
[codeblock:end]

[begin:description]
[para:effects]
[:en] Equivalent to: [`return end_;]
[:zh_CN] 等价于：[`return end_;]
[end:description]

[%@library operator==[!filter_view::sentinel]]
[codeblock:declaration]
friend constexpr bool operator==(const iterator& x, const sentinel& y);
[codeblock:end]

[begin:description]
[para:effects]
[:en] Equivalent to: [`return x.current_ == y.end_;]
[:zh_CN] 等价于：[`return x.current_ == y.end_;]
[end:description]
