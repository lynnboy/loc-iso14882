[section#range.filter.sentinel
    [:en] Class [`filter_view::[*sentinel]]
    [:zh_CN] 类 [`filter_view::[*sentinel]]
]

[%@lib filter_view::[*sentinel]]
[%@lib@member sentinel[!filter_view]]
[codeblock:synopsis]
namespace std::ranges {
  template<[[redoc("`:c>")]]input_range V, [[redoc("`:c>")]]indirect_unary_predicate<iterator_t<V>> Pred>
    requires [[redoc("`:c>")]]view<V> && is_object_v<Pred>
  class filter_view<V, Pred>::[[redoc("*>")]]sentinel {
  private:
    sentinel_t<V> [[redoc("*>")]]end_ = sentinel_t<V>();       // [=expos]

  public:
    [[redoc("*>")]]sentinel() = default;
    constexpr explicit [[redoc("*>")]]sentinel(filter_view& parent);

    constexpr sentinel_t<V> base() const;

    friend constexpr bool operator==(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]sentinel& y);
  };
}
[codeblock:end]

[%@lib@ctor filter_view::[*sentinel]]
[codeblock:declaration]
constexpr explicit [[redoc("*>")]]sentinel(filter_view& parent);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*end_] with [`ranges::end(parent.[*base_])].
[:zh_CN] 以 [`ranges::end(parent.[*base_])] 初始化 [*end_]。
[div:end]

[%@lib@member base[!filter_view::[*sentinel]]]
[codeblock:declaration]
constexpr sentinel_t<V> base() const;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return [*end_];]
[:zh_CN] 等价于：[`return [*end_];]
[div:end]

[%@lib@member operator==[!filter_view::[*sentinel]]]
[codeblock:declaration]
friend constexpr bool operator==(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]sentinel& y);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return x.[*current_] == y.[*end_];]
[:zh_CN] 等价于：[`return x.[*current_] == y.[*end_];]
[div:end]
