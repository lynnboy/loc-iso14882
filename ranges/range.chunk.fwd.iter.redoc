[section#range.chunk.fwd.iter
    [:en] Class template [`chunk_view::[*iterator]] for forward ranges
    [:zh_CN] 针对前向范围的类模板 [`chunk_view::[*iterator]]
]

[codeblock:synopsis]
namespace std::ranges {
  template<[[redoc("`:c>")]]view V>
    requires [[redoc("`:c>")]]forward_range<V>
  template<bool Const>
  class chunk_view<V>::[[redoc("*>")]]iterator {
    using [[redoc("*>")]]Parent = [[redoc("*>")]]maybe-const<Const, chunk_view>;                      // [=expos]
    using [[redoc("*>")]]Base = [[redoc("*>")]]maybe-const<Const, V>;                                 // [=expos]

    iterator_t<[[redoc("*>")]]Base> [[redoc("*>")]]current_ = iterator_t<[[redoc("*>")]]Base>();                     // [=expos]
    sentinel_t<[[redoc("*>")]]Base> [[redoc("*>")]]end_ = sentinel_t<[[redoc("*>")]]Base>();                         // [=expos]
    range_difference_t<[[redoc("*>")]]Base> [[redoc("*>")]]n_ = 0;                                    // [=expos]
    range_difference_t<[[redoc("*>")]]Base> [[redoc("*>")]]missing_ = 0;                              // [=expos]

    constexpr [[redoc("*>")]]iterator([[redoc("*>")]]Parent* parent, iterator_t<[[redoc("*>")]]Base> current,       // [=expos]
                       range_difference_t<[[redoc("*>")]]Base> missing = 0);

  public:
    using iterator_category = input_iterator_tag;
    using iterator_concept = [[redoc("[=seebelow]")]];
    using value_type = decltype(views::take(subrange([[redoc("*>")]]current_, [[redoc("*>")]]end_), [[redoc("*>")]]n_));
    using difference_type = range_difference_t<[[redoc("*>")]]Base>;

    [[redoc("*>")]]iterator() = default;
    constexpr [[redoc("*>")]]iterator([[redoc("*>")]]iterator<!Const> i)
      requires Const && [[redoc("`:c>")]]convertible_to<iterator_t<V>, iterator_t<[[redoc("*>")]]Base>>
                     && [[redoc("`:c>")]]convertible_to<sentinel_t<V>, sentinel_t<[[redoc("*>")]]Base>>;

    constexpr iterator_t<[[redoc("*>")]]Base> base() const;

    constexpr value_type operator*() const;
    constexpr [[redoc("*>")]]iterator& operator++();
    constexpr [[redoc("*>")]]iterator operator++(int);

    constexpr [[redoc("*>")]]iterator& operator--() requires [[redoc("`:c>")]]bidirectional_range<[[redoc("*>")]]Base>;
    constexpr [[redoc("*>")]]iterator operator--(int) requires [[redoc("`:c>")]]bidirectional_range<[[redoc("*>")]]Base>;

    constexpr [[redoc("*>")]]iterator& operator+=(difference_type x)
      requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
    constexpr [[redoc("*>")]]iterator& operator-=(difference_type x)
      requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;

    constexpr value_type operator[](difference_type n) const
      requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;

    friend constexpr bool operator==(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y);
    friend constexpr bool operator==(const [[redoc("*>")]]iterator& x, default_sentinel_t);

    friend constexpr bool operator<(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
      requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
    friend constexpr bool operator>(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
      requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
    friend constexpr bool operator<=(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
      requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
    friend constexpr bool operator>=(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
      requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
    friend constexpr auto operator<=>(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
      requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base> &&
               [[redoc("`:c>")]]three_way_comparable<iterator_t<[[redoc("*>")]]Base>>;

    friend constexpr [[redoc("*>")]]iterator operator+(const [[redoc("*>")]]iterator& i, difference_type n)
      requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
    friend constexpr [[redoc("*>")]]iterator operator+(difference_type n, const [[redoc("*>")]]iterator& i)
      requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
    friend constexpr [[redoc("*>")]]iterator operator-(const [[redoc("*>")]]iterator& i, difference_type n)
      requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
    friend constexpr difference_type operator-(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
      requires [[redoc("`:c>")]]sized_sentinel_for<iterator_t<[[redoc("*>")]]Base>, iterator_t<[[redoc("*>")]]Base>>;

    friend constexpr difference_type operator-(default_sentinel_t y, const [[redoc("*>")]]iterator& x)
      requires [[redoc("`:c>")]]sized_sentinel_for<sentinel_t<[[redoc("*>")]]Base>, iterator_t<[[redoc("*>")]]Base>>;
    friend constexpr difference_type operator-(const [[redoc("*>")]]iterator& x, default_sentinel_t y)
      requires [[redoc("`:c>")]]sized_sentinel_for<sentinel_t<[[redoc("*>")]]Base>, iterator_t<[[redoc("*>")]]Base>>;
  };
}
[codeblock:end]

[para]
[:en] [`[*iterator]::iterator_concept] is defined as follows:
[:zh_CN] [`[*iterator]::iterator_concept] 的定义如下：

[list]
[item]
[:en] If [*Base] models [`:c random_access_range], then [`iterator_concept]
denotes [`random_access_iterator_tag].
[:zh_CN] 若 [*Base] 构成 [`:c random_access_range]，则 [`iterator_concept] 代表
[`random_access_iterator_tag]。

[item]
[:en] Otherwise, if [*Base] models [`:c bidirectional_range], then
[`iterator_concept] denotes [`bidirectional_iterator_tag].
[:zh_CN] 否则，若 [*Base] 构成 [`:c bidirectional_range]，则 [`iterator_concept]
代表 [`bidirectional_iterator_tag]。

[item]
[:en] Otherwise, [`iterator_concept] denotes [`forward_iterator_tag].
[:zh_CN] 否则，[`iterator_concept] 代表 [`forward_iterator_tag]。
[list:end]

[codeblock:declaration]
constexpr [[redoc("*>")]]iterator([[redoc("*>")]]Parent* parent, iterator_t<[[redoc("*>")]]Base> current,
                   range_difference_t<[[redoc("*>")]]Base> missing = 0);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*current_] with [`current], [*end_] with
[`ranges::end(parent->[*base_])], [*n_] with [`parent->[*n_]], and [*missing_]
with [`missing].
[:zh_CN] 以 [`current] 初始化 [*current_]，以 [`ranges::end(parent->[*base_])]
初始化 [*end_]，以 [`parent->[*n_]] 初始化 [*n_]，并以 [`missnig] 初始化
[*missing_]。
[div:end]

[codeblock:declaration]
constexpr [[redoc("*>")]]iterator([[redoc("*>")]]iterator<!Const> i)
  requires Const && [[redoc("`:c>")]]convertible_to<iterator_t<V>, iterator_t<[[redoc("*>")]]Base>>
                 && [[redoc("`:c>")]]convertible_to<sentinel_t<V>, sentinel_t<[[redoc("*>")]]Base>>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*current_] with [`std::move(i.[*current_])], [*end_] with
[`std::move(i.[*end_])], [*n_] with [`i.[*n_]], and [*missing_] with
[`i.[*missing_]].
[:zh_CN] 以 [`std::move(i.[*current_])] 初始化 [*current_]，以
[`std::move(i.[*end_])] 初始化 [*end_]，以 [`i.[*n_]] 初始化 [*n_]，并以
[`i.[*missing_]] 初始化 [*missing_]。
[div:end]

[codeblock:declaration]
constexpr iterator_t<[[redoc("*>")]]Base> base() const;
[codeblock:end]

[div:description]
[para:returns]
[:en] [*current_].
[:zh_CN] [*current_]。
[div:end]

[codeblock:declaration]
constexpr value_type operator*() const;
[codeblock:end]

[div:description]
[para:expects]
[:en] [`[*current_] != [*end_]] is [`true].
[:zh_CN] [`[*current_] != [*end_]] 为 [`true]。

[para:returns]
[:en] [`views::take(subrange([*current_], [*end_]), [*n_])].
[:zh_CN] [`views::take(subrange([*current_], [*end_]), [*n_])]。
[div:end]

[codeblock:declaration]
constexpr [[redoc("*>")]]iterator& operator++();
[codeblock:end]

[div:description]
[para:expects]
[:en] [`[*current_] != [*end_]] is [`true].
[:zh_CN] [`[*current_] != [*end_]] 为 [`true]。

[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
[[redoc("*>")]]missing_ = ranges::advance([[redoc("*>")]]current_, [[redoc("*>")]]n_, [[redoc("*>")]]end_);
return *this;
[codeblock:end]
[div:end]

[codeblock:declaration]
constexpr [[redoc("*>")]]iterator operator++(int);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
auto tmp = *this;
++*this;
return tmp;
[codeblock:end]
[div:end]

[codeblock:declaration]
constexpr [[redoc("*>")]]iterator& operator--() requires [[redoc("`:c>")]]bidirectional_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
ranges::advance([[redoc("*>")]]current_, [[redoc("*>")]]missing_ - [[redoc("*>")]]n_);
[[redoc("*>")]]missing_ = 0;
return *this;
[codeblock:end]
[div:end]

[codeblock:declaration]
constexpr [[redoc("*>")]]iterator operator--(int) requires [[redoc("`:c>")]]bidirectional_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
auto tmp = *this;
--*this;
return tmp;
[codeblock:end]
[div:end]

[codeblock:declaration]
constexpr [[redoc("*>")]]iterator& operator+=(difference_type x)
  requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:expects]
[:en] If [`x] is positive,
[`ranges::distance([*current_], [*end_]) > [*n_] * (x - 1)] is [`true].
[:zh_CN] 若 [`x] 为正数，则
[`ranges::distance([*current_], [*end_]) > [*n_] * (x - 1)] 为 [`true]。

[begin:note]
[:en] If [`x] is negative, the [=effects] paragraph implies a precondition.
[:zh_CN] 若 [`x] 为负数，则 [=effects] 段落蕴含一项前条件。
[end:note]

[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
if (x > 0) {
  ranges::advance([[redoc("*>")]]current_, [[redoc("*>")]]n_ * (x - 1));
  [[redoc("*>")]]missing_ = ranges::advance([[redoc("*>")]]current_, [[redoc("*>")]]n_, [[redoc("*>")]]end_);
} else if (x < 0) {
  ranges::advance([[redoc("*>")]]current_, [[redoc("*>")]]n_ * x + [[redoc("*>")]]missing_);
  [[redoc("*>")]]missing_ = 0;
}
return *this;
[codeblock:end]
[div:end]

[codeblock:declaration]
constexpr [[redoc("*>")]]iterator& operator-=(difference_type x)
  requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return *this += -x;]
[:zh_CN] 等价于：[`return *this += -x;]
[div:end]

[codeblock:declaration]
constexpr value_type operator[](difference_type n) const
  requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`*(*this + n)].
[:zh_CN] [`*(*this + n)]。
[div:end]

[codeblock:declaration]
friend constexpr bool operator==(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y);
[codeblock:end]

[div:description]
[para:returns]
[:en] [`x.[*current_] == y.[*current_]].
[:zh_CN] [`x.[*current_] == y.[*current_]]。
[div:end]

[codeblock:declaration]
friend constexpr bool operator==(const [[redoc("*>")]]iterator& x, default_sentinel_t);
[codeblock:end]

[div:description]
[para:returns]
[:en] [`x.[*current_] == x.[*end_]].
[:zh_CN] [`x.[*current_] == x.[*end_]]。
[div:end]

[codeblock:declaration]
friend constexpr bool operator<(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
  requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`x.[*current_] < y.[*current_]].
[:zh_CN] [`x.[*current_] < y.[*current_]]。
[div:end]

[codeblock:declaration]
friend constexpr bool operator>(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
  requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return y < x;]
[:zh_CN] 等价于：[`return y < x;]
[div:end]

[codeblock:declaration]
friend constexpr bool operator<=(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
  requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return !(y < x);]
[:zh_CN] 等价于：[`return !(y < x);]
[div:end]

[codeblock:declaration]
friend constexpr bool operator>=(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
  requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return !(x < y);]
[:zh_CN] 等价于：[`return !(x < y);]
[div:end]

[codeblock:declaration]
friend constexpr auto operator<=>(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
  requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base> &&
           [[redoc("`:c>")]]three_way_comparable<iterator_t<[[redoc("*>")]]Base>>;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`x.[*current_] <=> y.[*current_]].
[:zh_CN] [`x.[*current_] <=> y.[*current_]]。
[div:end]

[codeblock:declaration]
friend constexpr [[redoc("*>")]]iterator operator+(const [[redoc("*>")]]iterator& i, difference_type n)
  requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
friend constexpr [[redoc("*>")]]iterator operator+(difference_type n, const [[redoc("*>")]]iterator& i)
  requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
auto r = i;
r += n;
return r;
[codeblock:end]
[div:end]

[codeblock:declaration]
friend constexpr [[redoc("*>")]]iterator operator-(const [[redoc("*>")]]iterator& i, difference_type n)
  requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
auto r = i;
r -= n;
return r;
[codeblock:end]
[div:end]

[codeblock:declaration]
friend constexpr difference_type operator-(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
  requires [[redoc("`:c>")]]sized_sentinel_for<iterator_t<[[redoc("*>")]]Base>, iterator_t<[[redoc("*>")]]Base>>;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`(x.[*current_] - y.[*current_] + x.[*missing_] - y.[*missing_]) / x.[*n_]].
[:zh_CN] [`(x.[*current_] - y.[*current_] + x.[*missing_] - y.[*missing_]) / x.[*n_]]。
[div:end]

[codeblock:declaration]
friend constexpr difference_type operator-(default_sentinel_t y, const [[redoc("*>")]]iterator& x)
  requires [[redoc("`:c>")]]sized_sentinel_for<sentinel_t<[[redoc("*>")]]Base>, iterator_t<[[redoc("*>")]]Base>>;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`[*div-ceil](x.[*end_] - x.[*current_], x.[*n_])].
[:zh_CN] [`[*div-ceil](x.[*end_] - x.[*current_], x.[*n_])]。
[div:end]

[codeblock:declaration]
friend constexpr difference_type operator-(const [[redoc("*>")]]iterator& x, default_sentinel_t y)
  requires [[redoc("`:c>")]]sized_sentinel_for<sentinel_t<[[redoc("*>")]]Base>, iterator_t<[[redoc("*>")]]Base>>;
[codeblock:end]

[div:description]
[para:returns]
[:en] Equivalent to: [`return -(y - x);]
[:zh_CN] 等价于：[`return -(y - x);]
[div:end]
