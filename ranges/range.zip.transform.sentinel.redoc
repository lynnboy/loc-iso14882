[section#range.zip.transform.sentinel
    [:en] Class template [`zip_transform_view::[*sentinel]]
    [:zh_CN] 类模板 [`zip_transform_view::[*sentinel]]
]

[%@lib zip_transform_view::sentinel]
[codeblock:synopsis]
namespace std::ranges {
  template<[[redoc("`:c>")]]copy_constructible F, [[redoc("`:c>")]]input_range... Views>
    requires ([[redoc("`:c>")]]view<Views> && ...) && (sizeof...(Views) > 0) && is_object_v<F> &&
              [[redoc("`:c>")]]regular_invocable<F&, range_reference_t<Views>...> &&
              [[redoc("*:c>")]]can-reference<invoke_result_t<F&, range_reference_t<Views>...>>
  template<bool Const>
  class zip_transform_view<F, Views...>::[[redoc("*>")]]sentinel {
    [[redoc("*>")]]zentinel<Const> [[redoc("*>")]]inner_;                                     // [=expos]
    constexpr explicit [[redoc("*>")]]sentinel([[redoc("*>")]]zentinel<Const> inner);         // [=expos]

  public:
    [[redoc("*>")]]sentinel() = default;
    constexpr [[redoc("*>")]]sentinel([[redoc("*>")]]sentinel<!Const> i)
      requires Const && [[redoc("`:c>")]]convertible_to<[[redoc("*>")]]zentinel<false>, [[redoc("*>")]]zentinel<Const>>;

    template<bool OtherConst>
      requires [[redoc("`:c>")]]sentinel_for<[[redoc("*>")]]zentinel<Const>, [[redoc("*>")]]ziperator<OtherConst>>
    friend constexpr bool operator==(const [[redoc("*>")]]iterator<OtherConst>& x, const [[redoc("*>")]]sentinel& y);

    template<bool OtherConst>
      requires [[redoc("`:c>")]]sized_sentinel_for<[[redoc("*>")]]zentinel<Const>, [[redoc("*>")]]ziperator<OtherConst>>
    friend constexpr range_difference_t<[[redoc("*>")]]maybe-const<OtherConst, [[redoc("*>")]]InnerView>>
      operator-(const [[redoc("*>")]]iterator<OtherConst>& x, const [[redoc("*>")]]sentinel& y);

    template<bool OtherConst>
      requires [[redoc("`:c>")]]sized_sentinel_for<[[redoc("*>")]]zentinel<Const>, [[redoc("*>")]]ziperator<OtherConst>>
    friend constexpr range_difference_t<[[redoc("*>")]]maybe-const<OtherConst, [[redoc("*>")]]InnerView>>
      operator-(const [[redoc("*>")]]sentinel& x, const [[redoc("*>")]]iterator<OtherConst>& y);
  };
}
[codeblock:end]

[codeblock:declaration]
constexpr explicit [[redoc("*>")]]sentinel([[redoc("*>")]]zentinel<Const> inner);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*inner_] with [`inner].
[:zh_CN] 以 [`inner] 初始化 [*inner_]。
[div:end]

[codeblock:declaration]
constexpr [[redoc("*>")]]sentinel([[redoc("*>")]]sentinel<!Const> i)
  requires Const && [[redoc("`:c>")]]convertible_to<[[redoc("*>")]]zentinel<false>, [[redoc("*>")]]zentinel<Const>>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*inner_] with [`std::move(i.[*inner_])].
[:zh_CN] 以 [`std::move(i.[*inner_])] 初始化 [*inner_]。
[div:end]

[codeblock:declaration]
template<bool OtherConst>
  requires [[redoc("`:c>")]]sentinel_for<[[redoc("*>")]]zentinel<Const>, [[redoc("*>")]]ziperator<OtherConst>>
friend constexpr bool operator==(const [[redoc("*>")]]iterator<OtherConst>& x, const [[redoc("*>")]]sentinel& y);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return x.[*inner_] == y.[*inner_];]
[:zh_CN] 等价于：[`return x.[*inner_] == y.[*inner_];]
[div:end]

[codeblock:declaration]
template<bool OtherConst>
  requires [[redoc("`:c>")]]sized_sentinel_for<[[redoc("*>")]]zentinel<Const>, [[redoc("*>")]]ziperator<OtherConst>>
friend constexpr range_difference_t<[[redoc("*>")]]maybe-const<OtherConst, [[redoc("*>")]]InnerView>>
  operator-(const [[redoc("*>")]]iterator<OtherConst>& x, const [[redoc("*>")]]sentinel& y);
template<bool OtherConst>
  requires [[redoc("`:c>")]]sized_sentinel_for<[[redoc("*>")]]zentinel<Const>, [[redoc("*>")]]ziperator<OtherConst>>
friend constexpr range_difference_t<[[redoc("*>")]]maybe-const<OtherConst, [[redoc("*>")]]InnerView>>
  operator-(const [[redoc("*>")]]sentinel& x, const [[redoc("*>")]]iterator<OtherConst>& y);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return x.[*inner_] - y.[*inner_];]
[:zh_CN] 等价于：[`return x.[*inner_] - y.[*inner_];]
[div:end]
