[section#range.slide.overview
    [:en] Overview
    [:zh_CN] 概述
]

[para]
[:en] [`slide_view] takes a [`:c view] and a number [$N] and produces a [`:c view]
whose [$M^\text{th}] element is a [`:c view] over the [$M^\text{th}] through
[$(M + N - 1)] elements of the original [`:c view].
[:zh_CN] [`slide_view] 接受一个 [`:c view] 和一个数值 [$N] 并产生一个 [`:c view]，
其第 [$M] 个元素是在原 [`:c view] 的从第 [$M] 到第 [$(M + N - 1)] 个元素上的一个
[`:c view]。

[:en] If the original [`:c view] has fewer than [$N] elements, the resulting
[`:c view] is empty.
[:zh_CN] 如果原 [`:c view] 少于 [$N] 个元素，则结果 [`:c view] 为空。

[para]
[%@lib@member slide[!views]]
[:en] The name [`views::slide] denotes a range adaptor object
([#range.adaptor.object]).
[:zh_CN] 名字 [`views::slide] 代表一个范围适配器对象（[#range.adaptor.object]）。

[:en] Given subexpressions [`E] and [`N], the expression [`views::slide(E, N)]
is expression-equivalent to [`slide_view(E, N)].
[:zh_CN] 给定子表达式 [`E] 和 [`N]，表达式 [`views::slide(E, N)] 按表达式等价于
[`slide_view(E, N)]。

[para]
[begin:example]
[codeblock]
vector v = {1, 2, 3, 4};

for (auto i : v | views::slide(2)) {
  cout << '[' << i[0] << ", " << i[1] << "] ";          // [:en] prints [``[1, 2`] `[2, 3`] `[3, 4`]] \
                                                        [:zh_CN] 打印 [``[1, 2`] `[2, 3`] `[3, 4`]]
}
[codeblock:end]
[end:example]
