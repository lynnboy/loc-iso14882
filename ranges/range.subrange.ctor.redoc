[section#range.subrange.ctor
    [:en] Constructors and conversions
    [:zh_CN] 构造函数和转换
]

[%@lib@ctor subrange]
[codeblock:declaration]
constexpr subrange([[redoc("*:c>")]]convertible-to-non-slicing<I> auto i, S s) requires (![[redoc("*>")]]StoreSize);
[codeblock:end]

[div:description]
[para:expects]
[:en] [=range(i,s)] is a valid range.
[:zh_CN] [=range(i,s)] 为有效范围。

[para:effects]
[:en] Initializes [*begin_] with [`std::move(i)] and [*end_] with [`s].
[:zh_CN] 以 [`std::move(i)] 初始化 [*begin_] 并以 [`s] 初始化 [*end_]。
[div:end]

[%@lib@ctor subrange]
[codeblock:declaration]
constexpr subrange([[redoc("*:c>")]]convertible-to-non-slicing<I> auto i, S s,
                   [[redoc:("^>")]]make-unsigned-like-t<iter_difference_t<I>> n)
  requires (K == subrange_kind::sized);
[codeblock:end]

[div:description]
[para:expects]
[:en] [=range(i,s)] is a valid range, and
[`n == [^to-unsigned-like](ranges::distance(i, s))] is [`true].
[:zh_CN] [=range(i,s)] 为有效范围，且
[`n == [^to-unsigned-like](ranges::distance(i, s))] 为 [`true]。

[para:effects]
[:en] Initializes [*begin_] with [`std::move(i)] and [*end_] with [`s].
[:zh_CN] 以 [`std::move(i)] 初始化 [*begin_] 并以 [`s] 初始化 [*end_]。

[:en] If [*StoreSize] is [`true], initializes [*size_] with [`n].
[:zh_CN] 若 [*StoreSize] 为 [`true]，则以 [`n] 初始化 [*size_]。

[para]
[begin:note]
[:en] Accepting the length of the range and storing it to later return from
[`size()] enables [`subrange] to model [`:c sized_range] even when it stores an
iterator and sentinel that do not model [`:c sized_sentinel_for].
[:zh_CN] 接受范围的长度并予以存储以便之后从 [`size()] 返回，使得即便它所存储的
迭代器和哨位并不构成 [`:c sized_sentinel_for] 也可以令 [`subrange] 构成
[`:c sized_range]。
[end:note]
[div:end]

[%@lib@ctor subrange]
[codeblock:declaration]
template<[[redoc("*:c>")]]different-from<subrange> R>
  requires [[redoc("`:c>")]]borrowed_range<R> &&
           [[redoc("*:c>")]]convertible-to-non-slicing<iterator_t<R>, I> &&
           [[redoc("`:c>")]]convertible_to<sentinel_t<R>, S>
constexpr subrange(R&& r) requires (![[redoc("*>")]]StoreSize || [[redoc("`:c>")]]sized_range<R>);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：

[list]
[item]
[:en] If [*StoreSize] is [`true], [`subrange(r, ranges::size(r))].
[:zh_CN] 当 [*StoreSize] 为 [`true] 时，为 [`subrange(r, ranges::size(r))]。

[item]
[:en] Otherwise, [`subrange(ranges::begin(r), ranges::end(r))].
[:zh_CN] 否则为 [`subrange(ranges::begin(r), ranges::end(r))]。
[list:end]
[div:end]

[%@lib@member operator [^PairLike][!subrange]]
[codeblock:declaration]
template<[[redoc("*:c>")]]different-from<subrange> PairLike>
  requires [[redoc("*:c>")]]pair-like-convertible-from<PairLike, const I&, const S&>
constexpr operator PairLike() const;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return PairLike([*begin_], [*end_]);]
[:zh_CN] 等价于：[`return PairLike([*begin_], [*end_]);]
[div:end]
