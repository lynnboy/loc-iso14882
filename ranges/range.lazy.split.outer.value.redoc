[section#range.lazy.split.outer.value
    [:en] Class [`lazy_split_view::[*outer-iterator]::value_type]
    [:zh_CN] 类 [`lazy_split_view::[*outer-iterator]::value_type]
]

[%@lib lazy_split_view::[*outer-iterator]::value_type]
[codeblock:synopsis]
namespace std::ranges {
  template<[[redoc("`:c>")]]input_range V, [[redoc("`:c>")]]forward_range Pattern>
    requires [[redoc("`:c>")]]view<V> && [[redoc("`:c>")]]view<Pattern> &&
             [[redoc("`:c>")]]indirectly_comparable<iterator_t<V>, iterator_t<Pattern>, ranges::equal_to> &&
             ([[redoc("`:c>")]]forward_range<V> || [[redoc("*:c>")]]tiny-range<Pattern>)
  template<bool Const>
  struct lazy_split_view<V, Pattern>::[[redoc("*>")]]outer-iterator<Const>::value_type
    : view_interface<value_type> {
  private:
    [[redoc("*>")]]outer-iterator [[redoc("*>")]]i_ = [[redoc("*>")]]outer-iterator();               // [=expos]

    constexpr explicit value_type([[redoc("*>")]]outer-iterator i);    // [=expos]

  public:
    constexpr [[redoc("*>")]]inner-iterator<Const> begin() const;
    constexpr default_sentinel_t end() const noexcept;
  };
}
[codeblock:end]

[%@lib@ctor lazy_split_view::[*outer-iterator]::value_type]
[codeblock:declaration]
constexpr explicit value_type([[redoc("*>")]]outer-iterator i);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*i_] with [`std::move(i)].
[:zh_CN] 以 [`std::move(i)] 初始化 [*i_]。
[div:end]

[%@lib@member begin[!lazy_split_view::[*outer-iterator]::value_type]]
[codeblock:declaration]
constexpr [[redoc("*>")]]inner-iterator<Const> begin() const;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return [*inner-iterator]<Const>{[*i_]};]
[:zh_CN] 等价于：[`return [*inner-iterator]<Const>{[*i_]};]
[div:end]

[%@lib@member end[!lazy_split_view::[*outer-iterator]::value_type]]
[codeblock:declaration]
constexpr default_sentinel_t end() const noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return default_sentinel;]
[:zh_CN] 等价于：[`return default_sentinel;]
[div:end]
