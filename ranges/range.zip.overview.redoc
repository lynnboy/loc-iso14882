[section#range.zip.overview
    [:en] Overview
    [:zh_CN] 概述
]

[para]
[%@lib zip_view]
[:en] [`zip_view] takes any number of [`:c view]s and produces a [`:c view] of
tuples of references to the corresponding elements of the constituent views.
[:zh_CN] [`zip_view] 接受任意数量的 [`:c view] 并产生由指代其各成分视图的对应
元素的引用所构成的元组的 [`:c view]。

[%@lib@member zip[!views]]
[para]
[:en] The name [`views::zip] denotes a customization point object
([#customization.point.object]).
[:zh_CN] 名字 [`views::zip] 代表一个定制化点对象（[#customization.point.object]）。

[:en] Given a pack of subexpressions [`Es...], the expression [`views::zip(Es...)]
is expression-equivalent to
[:zh_CN] 给定子表达式的包组 [`Es...]，表达式 [`views::zip(Es...)] 按表达式等价于

[list]
[item]
[:en] [`auto(views::empty<tuple<>>)] if [`Es] is an empty pack,
[:zh_CN] 若 [`Es] 为空包组则为 [`auto(views::empty<tuple<>>)]，
[item]
[:en] otherwise, [`zip_view<views::all_t<decltype((Es))>...>(Es...)].
[:zh_CN] 否则为 [`zip_view<views::all_t<decltype((Es))>...>(Es...)]。
[list:end]

[para]
[begin:example]
[codeblock]
vector v = {1, 2};
list l = {'a', 'b', 'c'};

auto z = views::zip(v, l);
range_reference_t<decltype(z)> f = z.front();   // [:en] [`f] is a [`pair<int&, char&>] \
                                                [:zh_CN] [`f] 为 [`pair<int&, char&>]
                                                // [:en@~] that refers to the first element of [`v] and [`l] \
                                                [:zh_CN@~] 并指代 [`v] 和 [`v2] 的第一个元素

for (auto&& [x, y] : z) {
  cout << '(' << x << ", " << y << ") ";        // [:en] prints: (1, a) (2, b) \
                                                [:zh_CN] 打印：(1, a) (2, b)
}
[codeblock:end]
[end:example]
