[section#range.enumerate.iterator
    [:en] Class template [`enumerate_view::[*iterator]]
    [:zh_CN] 类模板 [`enumerate_view::[*iterator]]
]

[%@lib enumerate_view::[*iterator]]
[codeblock:synopsis]
namespace std::ranges {
  template<[[redoc("`:c>")]]view V>
    requires [[redoc("*:c>")]]range-with-movable-references<V>
  template<bool Const>
  class enumerate_view<V>::[[redoc("*>")]]iterator {
    using [[redoc("*>")]]Base = [[redoc("*>")]]maybe-const<Const, V>;                         // []=expos]

  public:
    using iterator_category = input_iterator_tag;
    using iterator_concept = [[redoc("[=seebelow]")]];
    using difference_type = range_difference_t<[[redoc("*>")]]Base>;
    using value_type = tuple<difference_type, range_value_t<[[redoc("*>")]]Base>>;

  private:
    using [[redoc("*>")]]reference-type =                                      // [=expos]
      tuple<difference_type, range_reference_t<[[redoc("*>")]]Base>>;
    iterator_t<[[redoc("*>")]]Base> [[redoc("*>")]]current_ = iterator_t<[[redoc("*>")]]Base>();             // [=expos]
    difference_type [[redoc("*>")]]pos_ = 0;                                   // [=expos]

    constexpr explicit
      [[redoc("*>")]]iterator(iterator_t<[[redoc("*>")]]Base> current, difference_type pos);  // [=expos]

  public:
    [[redoc("*>")]]iterator() requires [[redoc("`:c>")]]default_initializable<iterator_t<[[redoc("*>")]]Base>> = default;
    constexpr [[redoc("*>")]]iterator([[redoc("*>")]]iterator<!Const> i)
      requires Const && [[redoc("`:c>")]]convertible_to<iterator_t<V>, iterator_t<[[redoc("*>")]]Base>>;

    constexpr const iterator_t<[[redoc("*>")]]Base>& base() const & noexcept;
    constexpr iterator_t<[[redoc("*>")]]Base> base() &&;

    constexpr difference_type index() const noexcept;

    constexpr auto operator*() const {
      return [[redoc("*>")]]reference-type([[redoc("*>")]]pos_, *[[redoc("*>")]]current_);
    }

    constexpr [[redoc("*>")]]iterator& operator++();
    constexpr void operator++(int);
    constexpr [[redoc("*>")]]iterator operator++(int) requires [[redoc("`:c>")]]forward_range<[[redoc("*>")]]Base>;

    constexpr [[redoc("*>")]]iterator& operator--() requires [[redoc("`:c>")]]bidirectional_range<[[redoc("*>")]]Base>;
    constexpr [[redoc("*>")]]iterator operator--(int) requires [[redoc("`:c>")]]bidirectional_range<[[redoc("*>")]]Base>;

    constexpr [[redoc("*>")]]iterator& operator+=(difference_type x)
      requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
    constexpr [[redoc("*>")]]iterator& operator-=(difference_type x)
      requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;

    constexpr auto operator[](difference_type n) const
      requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>
    { return [[redoc("*>")]]reference-type([[redoc("*>")]]pos_ + n, [[redoc("*>")]]current_[n]); }

    friend constexpr bool operator==(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y) noexcept;
    friend constexpr strong_ordering operator<=>(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y) noexcept;

    friend constexpr [[redoc("*>")]]iterator operator+(const [[redoc("*>")]]iterator& x, difference_type y)
      requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
    friend constexpr [[redoc("*>")]]iterator operator+(difference_type x, const [[redoc("*>")]]iterator& y)
      requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
    friend constexpr [[redoc("*>")]]iterator operator-(const [[redoc("*>")]]iterator& x, difference_type y)
      requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
    friend constexpr difference_type operator-(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y) noexcept;

    friend constexpr auto iter_move(const [[redoc("*>")]]iterator& i)
      noexcept(noexcept(ranges::iter_move(i.[[redoc("*>")]]current_)) &&
               is_nothrow_move_constructible_v<range_rvalue_reference_t<[[redoc("*>")]]Base>>) {
      return tuple<difference_type,
                   range_rvalue_reference_t<[[redoc("*>")]]Base>>(i.[[redoc("*>")]]pos_, ranges::iter_move(i.[[redoc("*>")]]current_));
    }
  };
}
[codeblock:end]

[para]
[:en] The member [~typedef-name] [`iterator_concept] is defined as follows:
[:zh_CN] 成员 [~typedef-名] [`iterator_concept] 的定义如下：

[list]
[item]
[:en] If [*Base] models [`:c random_access_range], then [`iterator_concept]
denotes [`random_access_iterator_tag].
[:zh_CN] 若 [*Base] 构成 [`:c random_access_range]，则 [`iterator_concept] 代表
[`random_access_iterator_tag]。

[item]
[:en] Otherwise, if [*Base] models [`:c bidirectional_range], then
[`iterator_concept] denotes [`bidirectional_iterator_tag].
[:zh_CN] 否则，若 [*Base] 构成 [`:c bidirectional_range]，则 [`iterator_concept]
代表 [`bidirectional_iterator_tag]。

[item]
[:en] Otherwise, if [*Base] models [`:c forward_range], then [`iterator_concept]
denotes [`forward_iterator_tag].
[:zh_CN] 否则，若 [*Base] 构成 [`:c forward_range]，则 [`iterator_concept] 代表
[`forward_iterator_tag]。

[item]
[:en] Otherwise, [`iterator_concept] denotes [`input_iterator_tag].
[:zh_CN] 否则，[`iterator_concept] 代表 [`input_iterator_tag]。
[list:end]

[%@lib@ctor enumerate_view::[*iterator]]
[codeblock:declaration]
constexpr explicit [[redoc("*>")]]iterator(iterator_t<[[redoc("*>")]]Base> current, difference_type pos);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*current_] with [`std::move(current)] and [*pos_] with [`pos].
[:zh_CN] 以 [`std::move(current)] 初始化 [*current_] 并以 [`pos] 初始化 [*pos_]。
[div:end]

[%@lib@ctor enumerate_view::[*iterator]]
[codeblock:declaration]
constexpr [[redoc("*>")]]iterator([[redoc("*>")]]iterator<!Const> i)
  requires Const && [[redoc("`:c>")]]convertible_to<iterator_t<V>, iterator_t<[[redoc("*>")]]Base>>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*current_] with [`std::move(i.[*current_])] and [*pos_] with
[`i.[*pos_]].
[:zh_CN] 以 [`std::move(i.[*current_])] 初始化 [*current_] 并以 [`i.[*pos_]]
初始化 [*pos_]。
[div:end]

[%@lib@member base[!enumerate_view::[*iterator]]]
[codeblock:declaration]
constexpr const iterator_t<[[redoc("*>")]]Base>& base() const & noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return [*current_];]
[:zh_CN] 等价于：[`return [*current_];]
[div:end]

[%@lib@member base[!enumerate_view::[*iterator]]]
[codeblock:declaration]
constexpr iterator_t<[[redoc("*>")]]Base> base() &&;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return std::move([*current_]);]
[:zh_CN] 等价于：[`return std::move([*current_]);]
[div:end]

[%@lib@member index[!enumerate_view::[*iterator]]]
[codeblock:declaration]
constexpr difference_type index() const noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return [*pos_];]
[:zh_CN] 等价于：[`return [*pos_];]
[div:end]

[%@lib@member operator++[!enumerate_view::[*iterator]]]
[codeblock:declaration]
constexpr [[redoc("*>")]]iterator& operator++();
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
++[[redoc("*>")]]current_;
++[[redoc("*>")]]pos_;
return *this;
[codeblock:end]
[div:end]

[%@lib@member operator++[!enumerate_view::[*iterator]]]
[codeblock:declaration]
constexpr void operator++(int);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`++*this].
[:zh_CN] 等价于：[`++*this]。
[div:end]

[%@lib@member operator++[!enumerate_view::[*iterator]]]
[codeblock:declaration]
constexpr [[redoc("*>")]]iterator operator++(int) requires [[redoc("`:c>")]]forward_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
auto temp = *this;
++*this;
return temp;
[codeblock:end]
[div:end]

[%@lib@member operator--[!enumerate_view::[*iterator]]]
[codeblock:declaration]
constexpr [[redoc("*>")]]iterator& operator--() requires [[redoc("`:c>")]]bidirectional_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
--[[redoc("*>")]]current_;
--[[redoc("*>")]]pos_;
return *this;
[codeblock:end]
[div:end]

[%@lib@member operator--[!enumerate_view::[*iterator]]]
[codeblock:declaration]
constexpr [[redoc("*>")]]iterator operator--(int) requires [[redoc("`:c>")]]bidirectional_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
auto temp = *this;
--*this;
return temp;
[codeblock:end]
[div:end]

[%@lib@member operator+=[!enumerate_view::[*iterator]]]
[codeblock:declaration]
constexpr [[redoc("*>")]]iterator& operator+=(difference_type n)
  requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
[[redoc("*>")]]current_ += n;
[[redoc("*>")]]pos_ += n;
return *this;
[codeblock:end]
[div:end]

[%@lib@member operator-=[!enumerate_view::[*iterator]]]
[codeblock:declaration]
constexpr [[redoc("*>")]]iterator& operator-=(difference_type n)
  requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
[[redoc("*>")]]current_ -= n;
[[redoc("*>")]]pos_ -= n;
return *this;
[codeblock:end]
[div:end]

[%@lib@member operator==[!enumerate_view::[*iterator]]]
[codeblock:declaration]
friend constexpr bool operator==(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return x.[*pos_] == y.[*pos_];]
[:zh_CN] 等价于：[`return x.[*pos_] == y.[*pos_];]
[div:end]

[%@lib@member operator<=>[!enumerate_view::[*iterator]]]
[codeblock:declaration]
friend constexpr strong_ordering operator<=>(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return x.[*pos_] <=> y.[*pos_];]
[:zh_CN] 等价于：[`return x.[*pos_] <=> y.[*pos_];]
[div:end]

[%@lib@member operator+[!enumerate_view::[*iterator]]]
[codeblock:declaration]
friend constexpr [[redoc("*>")]]iterator operator+(const [[redoc("*>")]]iterator& x, difference_type y)
  requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
auto temp = x;
temp += y;
return temp;
[codeblock:end]
[div:end]

[%@lib@member operator+[!enumerate_view::[*iterator]]]
[codeblock:declaration]
friend constexpr [[redoc("*>")]]iterator operator+(difference_type x, const [[redoc("*>")]]iterator& y)
  requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return y + x;]
[:zh_CN] 等价于：[`return y + x;]
[div:end]

[%@lib@member operator-[!enumerate_view::[*iterator]]]
[codeblock:declaration]
friend constexpr [[redoc("*>")]]iterator operator-(const [[redoc("*>")]]iterator& x, difference_type y)
  requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
auto temp = x;
temp -= y;
return temp;
[codeblock:end]
[div:end]

[%@lib@member operator-[!enumerate_view::[*iterator]]]
[codeblock:declaration]
friend constexpr difference_type operator-(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return x.[*pos_] - y.[*pos_];]
[:zh_CN] 等价于：[`return x.[*pos_] - y.[*pos_];]
[div:end]
