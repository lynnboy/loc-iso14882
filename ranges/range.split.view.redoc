[section#range.split.view
    [:en] Class template [`split_view]
    [:zh_CN] 类模板 [`split_view]
]

[%@lib split_view]
[codeblock:synopsis]
namespace std::ranges {
  template<[[redoc("`:c>")]]forward_range V, [[redoc("`:c>")]]forward_range Pattern>
    requires [[redoc("`:c>")]]view<V> && [[redoc("`:c>")]]view<Pattern> &&
             [[redoc("`:c>")]]indirectly_comparable<iterator_t<V>, iterator_t<Pattern>, ranges::equal_to>
  class split_view : public view_interface<split_view<V, Pattern>> {
  private:
    V [[redoc("*>")]]base_ = V();                              // [=expos]
    Pattern [[redoc("*>")]]pattern_ = Pattern();               // [=expos]

    // [:en] [#range.split.iterator], class [`split_view::[*iterator]] \
    [:zh_CN] [#range.split.iterator]，类 [`split_view::[*iterator]]
    struct [[redoc("*>")]]terator;                             // [=expos]

    // [:en] [#range.split.sentinel], class [`split_view::[*sentinel]] \
    [:zh_CN] [#range.split.sentinel]，类 [`split_view::[*sentinel]]
    struct [[redoc("*>")]]sentinel;                            // [=expos]

  public:
    split_view()
      requires [[redoc("`:c>")]]default_initializable<V> && [[redoc("`:c>")]]default_initializable<Pattern> = default;
    constexpr explicit split_view(V base, Pattern pattern);

    template<[[redoc("`:c>")]]forward_range R>
      requires [[redoc("`:c>")]]constructible_from<V, views::all_t<R>> &&
               [[redoc("`:c>")]]constructible_from<Pattern, single_view<range_value_t<R>>>
    constexpr explicit split_view(R&& r, range_value_t<R> e);

    constexpr V base() const & requires [[redoc("`:c>")]]copy_constructible<V> { return [[redoc("*>")]]base_; }
    constexpr V base() && { return std::move([[redoc("*>")]]base_); }

    constexpr [[redoc("*>")]]iterator begin();

    constexpr auto end() {
      if constexpr ([[redoc("`:c>")]]common_range<V>) {
        return [[redoc("*>")]]iterator{*this, ranges::end([[redoc("*>")]]base_), {}};
      } else {
        return [[redoc("*>")]]sentinel{*this};
      }
    }

    constexpr subrange<iterator_t<V>> [[redoc("*>")]]find-next(iterator_t<V>); // [=expos]
  };

  template<class R, class P>
    split_view(R&&, P&&) -> split_view<views::all_t<R>, views::all_t<P>>;

  template<[[redoc("`:c>")]]forward_range R>
    split_view(R&&, range_value_t<R>)
      -> split_view<views::all_t<R>, single_view<range_value_t<R>>>;
}
[codeblock:end]

[%@lib@ctor split_view]
[codeblock:declaration]
constexpr explicit split_view(V base, Pattern pattern);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*base_] with [`std::move(base)], and [*pattern_] with
[`std::move(pattern)].
[:zh_CN] 以 [`std::move(base)] 初始化 [*base_] 并以 [`std::move(pattern)] 初始化
[*pattern_]。
[div:end]

[%@lib@ctor split_view]
[codeblock:declaration]
template<[[redoc("`:c>")]]forward_range R>
  requires [[redoc("`:c>")]]constructible_from<V, views::all_t<R>> &&
           [[redoc("`:c>")]]constructible_from<Pattern, single_view<range_value_t<R>>>
constexpr explicit split_view(R&& r, range_value_t<R> e);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*base_] with [`views::all(std::forward<R>(r))] and [*pattern_]
with [`views::single(std::move(e))].
[:zh_CN] 以 [`views::all(std::forward<R>(r))] 初始化 [*base_] 并以
[`views::single(std::move(e))] 初始化 [*pattern_]。
[div:end]

[%@lib@member begin[!split_view]]
[codeblock:declaration]
constexpr [[redoc("*>")]]iterator begin();
[codeblock:end]

[div:description]
[para:returns]
[:en] [`{*this, ranges::begin([*base_]), [*find-next](ranges::begin([*base_]))}].
[:zh_CN] [`{*this, ranges::begin([*base_]), [*find-next](ranges::begin([*base_]))}]。

[para:remarks]
[:en] In order to provide the amortized constant time complexity required by the
[`:c range] concept, this function caches the result within the [`split_view]
for use on subsequent calls.
[:zh_CN] 为了提供 [`:c range] 概念所要求的摊销常量时间复杂度，这个函数会将
[`split_view] 中的结果进行缓存以备后续调用中使用。
[div:end]

[codeblock:declaration]
constexpr subrange<iterator_t<V>> [[redoc("*>")]]find-next(iterator_t<V> it);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
auto [b, e] = ranges::search(subrange(it, ranges::end([[redoc("*>")]]base_)), [[redoc("*>")]]pattern_);
if (b != ranges::end([[redoc("*>")]]base_) && ranges::empty([[redoc("*>")]]pattern_)) {
  ++b;
  ++e;
}
return {b, e};
[codeblock:end]
[div:end]
