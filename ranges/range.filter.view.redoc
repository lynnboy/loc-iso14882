[section#range.filter.view
    [:en] Class template [`filter_view]
    [:zh_CN] 类模板 [`filter_view]
]

[%@lib filter_view]
[%@lib@member base[!filter_view]]
[%@lib@member end[!filter_view]]
[codeblock:synopsis]
namespace std::ranges {
  template<[[redoc("`:c>")]]input_range V, [[redoc("`:c>")]]indirect_unary_predicate<iterator_t<V>> Pred>
    requires [[redoc("`:c>")]]view<V> && is_object_v<Pred>
  class filter_view : public view_interface<filter_view<V, Pred>> {
  private:
    V [[redoc("*>")]]base_ = V();                              // [=expos]
    [[redoc("*>")]]copyable-box<Pred> [[redoc("*>")]]pred_;                   // [=expos]

    // [:en] [#range.filter.iterator], class [`filter_view::[*iterator]] \
    [:zh_CN] [#range.filter.iterator]，类 [`filter_view::[*iterator]]
    class [[redoc("*>")]]iterator;                              // [=expos]
    // [:en] [#range.filter.sentinel], class [`filter_view::[*sentinel]] \
    [:zh_CN] [#range.filter.sentinel]，类 [`filter_view::[*sentinel]]
    class [[redoc("*>")]]sentinel;                              // [=expos]

  public:
    filter_view() requires [[redoc("`:c>")]]default_initializable<V> && [[redoc("`:c>")]]default_initializable<Pred> = default;
    constexpr filter_view(V base, Pred pred);

    constexpr V base() const& requires [[redoc("`:c>")]]copy_constructible<V> { return [[redoc("*>")]]base_; }
    constexpr V base() && { return std::move([[redoc("*>")]]base_); }

    constexpr const Pred& pred() const;

    constexpr [[redoc("*>")]]iterator begin();
    constexpr auto end() {
      if constexpr ([[redoc("`:c>")]]common_range<V>)
        return [[redoc("*>")]]iterator{*this, ranges::end([[redoc("*>")]]base_)};
      else
        return [[redoc("*>")]]sentinel{*this};
    }
  };

  template<class R, class Pred>
    filter_view(R&&, Pred) -> filter_view<views::all_t<R>, Pred>;
}
[codeblock:end]

[%@lib@ctor filter_view]
[codeblock:declaration]
constexpr filter_view(V base, Pred pred);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*base_] with [`std::move(base)] and initializes
[*pred_] with [`std::move(pred)].
[:zh_CN] 以 [`move(base)] 初始化 [*base_] 并以 [`std::move(pred)] 初始化 [*pred_]。
[div:end]

[%@lib@member pred[!filter_view]]
[codeblock:declaration]
constexpr const Pred& pred() const;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return *[*pred_];]
[:zh_CN] 等价于：[`return *[*pred_];]
[div:end]

[%@lib@member begin[!filter_view]]
[codeblock:declaration]
constexpr [[redoc("*>")]]iterator begin();
[codeblock:end]

[div:description]
[para:expects]
[:en] [`pred_.has_value()] is [`true].
[:zh_CN] [`pred_.has_value()] 为 [`true]。

[para:returns]
[:en] [`{*this, ranges::find_if([*base_], ref(*[*pred_]))}].
[:zh_CN] [`{*this, ranges::find_if([*base_], ref(*[*pred_]))}]。

[para:remarks]
[:en] In order to provide the amortized constant time complexity required by the
[`:c range] concept when [`filter_view] models [`:c forward_range], this
function caches the result within the [`filter_view] for use on subsequent calls.
[:zh_CN] 为了在 [`filter_view] 构成 [`:c forward_range] 时提供由 [`:c range]
概念所规定的均摊常量时间复杂度，这个函数在 [`filter_view] 之内将其结果进行缓存，
并在随后的调用中使用之。
[div:end]
