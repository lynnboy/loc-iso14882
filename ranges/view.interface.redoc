[section#view.interface
    [:en] view interface
    [:zh_CN] 视图接口
]

[para]
[:en] The class template [`view_interface] is a helper for defining [`view]-like
types that offer a container-like interface.
[:zh_CN] 类模板 [`view_interface] 用于辅助定义提供类似容器的接口的 [`view] 式
类型。

[:en] It is parameterized with the type that is derived from it.
[:zh_CN] 它是以从它派生的类型来参数化的。

[%@lib view_interface]
[codeblock:synopsis]
namespace std::ranges {
  template<class D>
    requires is_class_v<D> && same_as<D, remove_cv_t<D>>
  class view_interface : public view_base {
  private:
    constexpr D& derived() noexcept {                   // [=expos]
      return static_cast<D&>(*this);
    }
    constexpr const D& derived() const noexcept {       // [=expos]
      return static_cast<const D&>(*this);
    }
  public:
    constexpr bool empty() requires forward_range<D> {
      return ranges::begin(derived()) == ranges::end(derived());
    }
    constexpr bool empty() const requires forward_range<const D> {
      return ranges::begin(derived()) == ranges::end(derived());
    }

    constexpr explicit operator bool()
      requires requires { ranges::empty(derived()); } {
        return !ranges::empty(derived());
      }
    constexpr explicit operator bool() const
      requires requires { ranges::empty(derived()); } {
        return !ranges::empty(derived());
      }

    constexpr auto data() requires contiguous_iterator<iterator_t<D>> {
      return to_address(ranges::begin(derived()));
    }
    constexpr auto data() const
      requires Range<const D> && contiguous_iterator<iterator_t<const D>> {
        return to_address(ranges::begin(derived()));
      }

    constexpr auto size() requires forward_range<D> &&
      sized_sentinel_for<sentinel_t<D>, iterator_t<D>> {
        return ranges::end(derived()) - ranges::begin(derived());
      }
    constexpr auto size() const requires forward_range<const D> &&
      sized_sentinel_for<sentinel_t<const D>, iterator_t<const D>> {
        return ranges::end(derived()) - ranges::begin(derived());
      }

    constexpr decltype(auto) front() requires forward_range<D>;
    constexpr decltype(auto) front() const requires forward_range<const D>;

    constexpr decltype(auto) back() requires bidirectional_range<D> && common_range<D>;
    constexpr decltype(auto) back() const
      requires bidirectional_range<const D> && common_range<const D>;

    template<random_access_range R = D>
      constexpr decltype(auto) operator[](range_difference_t<R> n) {
        return ranges::begin(derived())[n];
      }[[redoc(";")]];
    template<random_access_range R = const D>
      constexpr decltype(auto) operator[](range_difference_t<R> n) const {
        return ranges::begin(derived())[n];
      }[[redoc(";")]];
  };
}
[codeblock:end]

[para]
[:en] The template parameter [`D] for [`view_interface] may be an incomplete
type.
[:zh_CN] [`view_interface] 的模板形参 [`D] 可以是不完整类型。

[:en] Before any member of the resulting specialization of [`view_interface]
other than special member functions is referenced, [`D] shall be complete, and
model both [`[`:c derived_from]<view_interface<D>>] and [`:c view].
[:zh_CN] 在对所造成的 [`view_interface] 的特例的任何除了特殊成员之外的成员进行
涉指之前，[`D] 应当是完整的，并且应当同时构成
[`[`:c derived_from]<view_interface<D>>] 和 [`:c view]。

[include view.interface.members]
