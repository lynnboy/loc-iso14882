[section#range.take.sentinel
    [:en] Class template [`take_view::[*sentinel]]
    [:zh_CN] 类模板 [`take_view::[*sentinel]]
]

[codeblock:synopsis]
namespace std::ranges {
  template<[[redoc("`:c>")]]view V>
  template<bool Const>
  class take_view<V>::[[redoc("*>")]]sentinel {
  private:
    using [[redoc("*>")]]Base = [[redoc("*>")]]maybe-const<Const, V>;                                     // [=expos]
    template<bool OtherConst>
      using [[redoc("*>")]]CI = counted_iterator<iterator_t<[[redoc("*>")]]maybe-const<OtherConst, V>>>;  // [=expos]
    sentinel_t<[[redoc("*>")]]Base> [[redoc("*>")]]end_ = sentinel_t<[[redoc("*>")]]Base>();                             // [=expos]

  public:
    [[redoc("*>")]]sentinel() = default;
    constexpr explicit [[redoc("*>")]]sentinel(sentinel_t<[[redoc("*>")]]Base> end);
    constexpr [[redoc("*>")]]sentinel([[redoc("*>")]]sentinel<!Const> s)
      requires Const && [[redoc("`:c>")]]convertible_to<sentinel_t<V>, sentinel_t<[[redoc("*>")]]Base>>;

    constexpr sentinel_t<[[redoc("*>")]]Base> base() const;

    friend constexpr bool operator==(const [[redoc("*>")]]CI<Const>& y, const [[redoc("*>")]]sentinel& x);

    template<bool OtherConst = !Const>
      requires [[redoc("`:c>")]]sentinel_for<sentinel_t<[[redoc("*>")]]Base>, iterator_t<[[redoc("*>")]]maybe-const<OtherConst, V>>>
    friend constexpr bool operator==(const [[redoc("*>")]]CI<OtherConst>& y, const [[redoc("*>")]]sentinel& x);
  };
}
[codeblock:end]

[%@lib@ctor take_view::[*sentinel]]
[codeblock:declaration]
constexpr explicit [[redoc("*>")]]sentinel(sentinel_t<[[redoc("*>")]]Base> end);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*end_] with [`end].
[:zh_CN] 以 [`end] 初始化 [*end_]。
[div:end]

[%@lib@ctor take_view::[*sentinel]]
[codeblock:declaration]
constexpr [[redoc("*>")]]sentinel([[redoc("*>")]]sentinel<!Const> s)
  requires Const && [[redoc("`:c>")]]convertible_to<sentinel_t<V>, sentinel_t<[[redoc("*>")]]Base>>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*end_] with [`std::move(s.[*end_])].
[:zh_CN] 以 [`std::move(s.[*end_])] 初始化 [*end_]。
[div:end]

[%@lib@member base[!take_view::[*sentinel]]]
[codeblock:declaration]
constexpr sentinel_t<[[redoc("*>")]]Base> base() const;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return [*end_];]
[:zh_CN] 等价于：[`return [*end_];]
[div:end]

[%@lib@member operator==[!take_view::[*sentinel]]]
[codeblock:declaration]
friend constexpr bool operator==(const [[redoc("*>")]]CI<Const>& y, const [[redoc("*>")]]sentinel& x);

template<bool OtherConst = !Const>
  requires [[redoc("`:c>")]]sentinel_for<sentinel_t<[[redoc("*>")]]Base>, iterator_t<[[redoc("*>")]]maybe-const<OtherConst, V>>>
friend constexpr bool operator==(const [[redoc("*>")]]CI<OtherConst>& y, const [[redoc("*>")]]sentinel& x);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return y.count() == 0 || y.base() == x.[*end_];]
[:zh_CN] 等价于：[`return y.count() == 0 || y.base() == x.[*end_];]
[div:end]
