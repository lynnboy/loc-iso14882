[section#range.adjacent.overview
    [:en] Overview
    [:zh_CN] 概述
]

[para]
[%@lib adjacent_view]
[:en] [`adjacent_view] takes a [`:c view] and produces a [`:c view] whose
[$M^\text{th}] element is a tuple of references to the [$M^\text{th}] through
[$(M + N - 1)^\text{th}] elements of the original view.
[:zh_CN] [`adjacent_view] 接受一个 [`:c view] 并产生一个 [`:c view]，其第 [$M]
个元素是指代原视图从第 [$M] 到第 [$M + N -1] 个元素的引用构成的元组。

[:en] If the original view has fewer than [$N] elements, the resulting view is
empty.
[:zh_CN] 如果原视图少于 [$N] 个元素，则结果视图为空。

[%@lib@member adjacent[!views]]
[para]
[:en] The name [`views::adjacent<N>] denotes a range adaptor object
([#range.adaptor.object]).
[:zh_CN] 名字 [`views::adjacent<N>] 代表一个范围适配器对象
（[#range.adaptor.object]）。

[:en] Given a subexpression [`E] and a constant expression [`N], the expression
[`views::adjacent<N>(E)] is expression-equivalent to
[:zh_CN] 给定一个子表达式 [`E] 和一个常量表达式 [`N]，表达式
[`views::adjacent<N>(E)] 按表达式等价于

[list]
[item]
[:en] [`((void)E, auto(views::empty<tuple<>>))] if [`N] is equal to [`0],
[:zh_CN] 若 [`N] 等于 [`0] 则为 [`((void)E, auto(views::empty<tuple<>>))]，
[item]
[:en] otherwise, [`adjacent_view<views::all_t<decltype((E))>, N>(E)].
[:zh_CN] 否则为 [`adjacent_view<views::all_t<decltype((E))>, N>(E)]。
[list:end]

[para]
[begin:example]
[codeblock]
vector v = {1, 2, 3, 4};

for (auto i : v | views::adjacent<2>) {
  cout << "(" << i.first << ", " << i.second << ") ";   // [:en] prints: (1, 2) (2, 3) (3, 4) \
                                                        [:zh_CN] 打印：(1, 2) (2, 3) (3, 4)
}
[codeblock:end]
[end:example]

[para]
[:en] Define [`[*REPEAT](T, N)] as a pack of [`N] types, each of which denotes
the same type as [`T].
[:zh_CN] 定义 [`[*REPEAT](T, N)] 为 [`N] 个类型的包组，其每个类型均与 [`T] 相同。
