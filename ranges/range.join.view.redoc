[section#range.join.view
    [:en] Class template [`join_view]
    [:zh_CN] 类模板 [`join_view]
]

[%@lib join_view]
[%@lib@member base[!join_view]]
[%@lib@member begin[!join_view]]
[%@lib@member end[!join_view]]
[codeblock:synopsis]
namespace std::ranges {
  template<[[redoc("`:c>")]]input_range V>
    requires [[redoc("`:c>")]]view<V> && [[redoc("`:c>")]]input_range<range_reference_t<V>>
  class join_view : public view_interface<join_view<V>> {
  private:
    using [[redoc("*>")]]InnerRng = range_reference_t<V>;                  // [=expos]

    // [:en] [#range.join.iterator], class template [`join_view::[*iterator]] \
    [:zh_CN] [#range.join.iterator]，类模板 [`join_view::[*iterator]]
    template<bool Const>
      struct [[redoc("*>")]]iterator;                                      // [=expos]

    // [:en] [#range.join.sentinel], class template [`join_view::[*sentinel]] \
    [:zh_CN] [#range.join.sentinel]，类模板 [`join_view::[*sentinel]]
    template<bool Const>
      struct [[redoc("*>")]]sentinel;                                      // [=expos]

    V [[redoc("*>")]]base_ = V();                                          // [=expos]

    [[redoc("*>")]]non-propagating-cache<remove_cv_t<[[redoc("*>")]]InnerRng>> [[redoc("*>")]]inner_;    // [:en] [=expos], present only \
                                                                                                         [:zh_CN] [=expos]，仅当
                                                            // [:en@~] when [`!is_reference_v<[*InnerRng]>] \
                                                            [:zh_CN@~] [`!is_reference_v<[*InnerRng]>] 时出现

  public:
    join_view() requires [[redoc("`:c>")]]default_initializable<V> = default;
    constexpr explicit join_view(V base);

    constexpr V base() const & requires [[redoc("`:c>")]]copy_constructible<V> { return [[redoc("*>")]]base_; }
    constexpr V base() && { return std::move([[redoc("*>")]]base_); }

    constexpr auto begin() {
      constexpr bool use_const = [[redoc("*:c>")]]simple-view<V> &&
                                 is_reference_v<range_reference_t<V>>;
      return [[redoc("*>")]]iterator<use_const>{*this, ranges::begin([[redoc("*>")]]base_)};
    }

    constexpr auto begin() const
      requires [[redoc("`:c>")]]input_range<const V> &&
               is_reference_v<range_reference_t<const V>>
    { return [[redoc("*>")]]iterator<true>{*this, ranges::begin([[redoc("*>")]]base_)}; }

    constexpr auto end() {
      if constexpr ([[redoc("`:c>")]]forward_range<V> &&
                    is_reference_v<[[redoc("*>")]]InnerRng> && [[redoc("`:c>")]]forward_range<[[redoc("*>")]]InnerRng> &&
                    [[redoc("`:c>")]]common_range<V> && [[redoc("`:c>")]]common_range<[[redoc("*>")]]InnerRng>)
        return [[redoc("*>")]]iterator<[[redoc("*:c>")]]simple-view<V>>{*this, ranges::end([[redoc("*>")]]base_)};
      else
        return [[redoc("*>")]]sentinel<[[redoc("*:c>")]]simple-view<V>>{*this};
    }

    constexpr auto end() const
      requires [[redoc("`:c>")]]input_range<const V> &&
               is_reference_v<range_reference_t<const V>> {
      if constexpr ([[redoc("`:c>")]]forward_range<const V> &&
                    [[redoc("`:c>")]]forward_range<range_reference_t<const V>> &&
                    [[redoc("`:c>")]]common_range<const V> &&
                    [[redoc("`:c>")]]common_range<range_reference_t<const V>>)
        return [[redoc("*>")]]iterator<true>{*this, ranges::end([[redoc("*>")]]base_)};
      else
        return [[redoc("*>")]]sentinel<true>{*this};
    }
  };

  template<class R>
    explicit join_view(R&&) -> join_view<views::all_t<R>>;
}
[codeblock:end]

[%@lib@ctor join_view]
[codeblock:declaration]
constexpr explicit join_view(V base);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*base_] with [`std::move(base)].
[:zh_CN] 以 [`std::move(base)] 初始化 [*base_]。
[div:end]
