[section#range.join.view
    [:en] Class template [`join_view]
    [:zh_CN] 类模板 [`join_view]
]

[codeblock:synopsis [!:var simple-view]]
namespace std::ranges {
  template<InputRange V>
    requires View<V> && InputRange<iter_reference_t<iterator_t<V>>> &&
             (is_reference_v<iter_reference_t<iterator_t<V>>> ||
              View<iter_value_t<iterator_t<V>>>)
  class join_view : public view_interface<join_view<V>> {
  private:
    using InnerRng =                    // [=Expos]
      iter_reference_t<iterator_t<V>>;
    // [:en] [#range.join.iterator], class template [`join_view::iterator]
    // [|:zh_CN] [#range.join.iterator]，类模板 [`join_view::iterator]
    template<bool Const>
      struct iterator;                  // [=Expos]
    // [:en] [#range.join.sentinel], class template [`join_view::sentinel]
    // [|:zh_CN] [#range.join.sentinel]，类模板 [`join_view::sentinel]
    template<bool Const>
      struct sentinel;                  // [=Expos]

    V base_ = V();                      // [=Expos]
    all_view<InnerRng> inner_ =         // [:en] [=Expos], present only when [`!is_reference_v<InnerRng>]
                                        // [|:zh_CN] [=Expos]，仅当 [`!is_reference_v<InnerRng>] 时出现
      all_view<InnerRng>();
  public:
    join_view() = default;
    constexpr explicit join_view(V base);

    template<InputRange R>
      requires ViewableRange<R> && Constructible<V, all_view<R>>
    constexpr explicit join_view(R&& r);

    constexpr auto begin() {
      return iterator<[*simple-view]<V>>{*this, ranges::begin(base_)};
    }

    constexpr auto begin() const
    requires InputRange<const V> &&
             is_reference_v<iter_reference_t<iterator_t<const V>>> {
      return iterator<true>{*this, ranges::begin(base_)};
    }

    constexpr auto end() {
      if constexpr (ForwardRange<V> &&
                    is_reference_v<InnerRng> && ForwardRange<InnerRng> &&
                    CommonRange<V> && CommonRange<InnerRng>)
        return iterator<[*simple-view]<V>>{*this, ranges::end(base_)};
      else
        return sentinel<[*simple-view]<V>>{*this};
    }

    constexpr auto end() const
    requires InputRange<const V> &&
             is_reference_v<iter_reference_t<iterator_t<const V>>> {
      if constexpr (ForwardRange<const V> &&
                    is_reference_v<iter_reference_t<iterator_t<const V>>> &&
                    ForwardRange<iter_reference_t<iterator_t<const V>>> &&
                    CommonRange<const V> &&
                    CommonRange<iter_reference_t<iterator_t<const V>>>)
        return iterator<true>{*this, ranges::end(base_)};
      else
        return sentinel<true>{*this};
    }
  };

  template<class R>
    explicit join_view(R&&) -> join_view<all_view<R>>;
}
[codeblock:end]

[%@library join_view[!join_view]]
[codeblock:declaration]
constexpr explicit join_view(V base);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Initializes [`base_] with [`std::move(base)].
[:zh_CN] 以 [`std::move(base)] 初始化 [`base_]。
[exit:description]

[%@library join_view[!join_view]]
[codeblock:declaration]
template<InputRange R>
  requires ViewableRange<R> && Constructible<V, all_view<R>>
constexpr explicit join_view(R&& r);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Initializes [`base_] with [`view::all(std::forward<R>(r))].
[:zh_CN] 以 [`view::all(std::forward<R>(r))] 初始化 [`base_]。
[exit:description]
