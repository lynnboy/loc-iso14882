[section#range.adjacent.transform.view
    [:en] Class template [`adjacent_transform_view]
    [:zh_CN] 类模板 [`adjacent_transform_view]
]

[%@lib@member base[!adjacent_transform_view]]
[%@lib@member begin[!adjacent_transform_view]]
[%@lib@member end[!adjacent_transform_view]]
[codeblock:synopsis]
namespace std::ranges {
  template<[[redoc("`:c>")]]forward_range V, [[redoc("`:c>")]]move_constructible F, size_t N>
    requires [[redoc("`:c>")]]view<V> && (N > 0) && is_object_v<F> &&
             [[redoc("`:c>")]]regular_invocable<F&, [[redoc("*>")]]REPEAT(range_reference_t<V>, N)...> &&
             [[redoc("*:c>")]]can-reference<invoke_result_t<F&, [[redoc("*>")]]REPEAT(range_reference_t<V>, N)...>>
  class adjacent_transform_view : public view_interface<adjacent_transform_view<V, F, N>> {
    [[redoc("*>")]]movable-box<F> [[redoc("*>")]]fun_;                        // [=expos]
    adjacent_view<V, N> [[redoc("*>")]]inner_;                 // [=expos]

    using [[redoc("*>")]]InnerView = adjacent_view<V, N>;      // [=expos]
    template<bool Const>
      using [[redoc("*>")]]inner-iterator = iterator_t<[[redoc("*>")]]maybe-const<Const, [[redoc("*>")]]InnerView>>;         // [=expos]
    template<bool Const>
      using [[redoc("*>")]]inner-sentinel = sentinel_t<[[redoc("*>")]]maybe-const<Const, [[redoc("*>")]]InnerView>>;         // [=expos]

    // [:en] [#range.adjacent.transform.iterator], class template [`adjacent_transform_view::[*iterator]] \
    [:zh_CN] [#range.adjacent.transform.iterator]，类模板 [`adjacent_transform_view::[*iterator]]
    template<bool> class [[redoc("*>")]]iterator;              // [=expos]

    // [:en] [#range.adjacent.transform.sentinel], class template [`adjacent_transform_view::[*sentinel]] \
    [:zh_CN] [#range.adjacent.transform.sentinel]，类模板 [`adjacent_transform_view::[*sentinel]]
    template<bool> class [[redoc("*>")]]sentinel;              // [=expos]

  public:
    adjacent_transform_view() = default;
    constexpr explicit adjacent_transform_view(V base, F fun);

    constexpr V base() const & requires [[redoc("`:c>")]]copy_constructible<[[redoc("*>")]]InnerView> { return [[redoc("*>")]]inner_.base(); }
    constexpr V base() && { return std::move([[redoc("*>")]]inner_.base()); }

    constexpr auto begin() {
      return [[redoc("*>")]]iterator<false>(*this, [[redoc("*>")]]inner_.begin());
    }

    constexpr auto begin() const
      requires [[redoc("*:c>")]]range<const [[redoc("*>")]]InnerView> &&
               [[redoc("*:c>")]]regular_invocable<const F&, [[redoc("*>")]]REPEAT(range_reference_t<const V>, N)...> {
      return [[redoc("*>")]]iterator<true>(*this, [[redoc("*>")]]inner_.begin());
    }

    constexpr auto end() {
      if constexpr ([[redoc("*:c>")]]common_range<[[redoc("*>")]]InnerView>) {
        return [[redoc("*>")]]iterator<false>(*this, [[redoc("*>")]]inner_.end());
      } else {
        return [[redoc("*>")]]sentinel<false>([[redoc("*>")]]inner_.end());
      }
    }

    constexpr auto end() const
      requires [[redoc("*:c>")]]range<const [[redoc("*>")]]InnerView> &&
               [[redoc("*:c>")]]regular_invocable<const F&, [[redoc("*>")]]REPEAT(range_reference_t<const V>, N)...> {
      if constexpr ([[redoc("*:c>")]]common_range<const [[redoc("*>")]]InnerView>) {
        return [[redoc("*>")]]iterator<true>(*this, [[redoc("*>")]]inner_.end());
      } else {
        return [[redoc("*>")]]sentinel<true>([[redoc("*>")]]inner_.end());
      }
    }

    constexpr auto size() requires [[redoc("*:c>")]]sized_range<[[redoc("*>")]]InnerView> {
      return [[redoc("*>")]]inner_.size();
    }

    constexpr auto size() const requires [[redoc("*:c>")]]sized_range<const [[redoc("*>")]]InnerView> {
      return [[redoc("*>")]]inner_.size();
    }
  };
}
[codeblock:end]

[codeblock:declaration]
constexpr explicit adjacent_transform_view(V base, F fun);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*fun_] with [`std::move(fun)] and [*inner_] with
[`std::move(base)].
[:zh_CN] 以 [`std::move(fun)] 初始化 [*fun_] 并以 [`std::move(base)] 初始化
[*inner_]。
[div:end]
