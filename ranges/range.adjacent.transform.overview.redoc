[section#range.adjacent.transform.overview
    [:en] Overview
    [:zh_CN] 概述
]

[para]
[:en] [`adjacent_transform_view] takes an invocable object and a view and produces
a view whose [$M^\text{th}] element is the result of applying the invocable object
to the [$M^\text{th}] through [$(M + N - 1)^\text{th}] elements of the original view.
[:zh_CN] [`adjacent_transform_view] 接受一个可调用对象和一个视图，并产生一个视图，
其第 [$M] 个元素是对原视图从第 [$M] 到第 [$M + N -1] 个元素应用可调用对象的结果。

[:en] If the original view has fewer than [$N] elements, the resulting view is empty.
[:zh_CN] 如果原视图少于 [$N] 个元素，则结果视图为空。

[%@lib@member adjacent_transform[!views]]
[para]
[:en] The name [`views::adjacent_transform<N>] denotes a range adaptor object ([#range.adaptor.object]).
[:zh_CN] 名字 [`views::adjacent_transform<N>] 代表一个范围适配器对象（[#range.adaptor.object]）。

[:en] Given subexpressions [`E] and [`F] and a constant expression [`N]:
[:zh_CN] 给定子表达式 [`E] 和 [`F]，以及一个常量表达式 [`N]

[list]
[item]
[:en] If [`N] is equal to [`0] and [`decltype(E)] models [`:c forward_range],
[`views::adjacent_transform<N>(E, F)] is expression-equivalent to
[`((void)E, views::zip_transform(F))], except that the evaluations of [`E] and
[`F] are indeterminately sequenced. 
[:zh_CN] 若 [`N] 等于 [`0] 且 [`decltype(E)] 构成 [`:c forward_range]，则
[`views::adjacent_transform<N>(E, F)] 按表达式等价于
[`((void)E, views::zip_transform(F))]，但对 [`E] 和 [`F] 的求值之间顺序不确定。

[item]
[:en] Otherwise, the expression [`views::adjacent_transform<N>(E, F)] is
expression-equivalent to
[`adjacent_transform_view<views::all_t<decltype((E))>, decay_t<decltype((F))>, N>(E, F)].
[:zh_CN] 否则，表达式 [`views::adjacent_transform<N>(E, F)] 按表达式等价于
[`adjacent_transform_view<views::all_t<decltype((E))>, decay_t<decltype((F))>, N>(E, F)]。
[list:end]

[para]
[begin:example]
[codeblock]
vector v = {1, 2, 3, 4};

for (auto i : v | views::adjacent_transform<2>(std::multiplies())) {
  cout << i << ' ';     // [:en] prints [`2 6 12] [:zh_CN] 打印 [`2 6 12]
}
[codeblock:end]
[end:example]
