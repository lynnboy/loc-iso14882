[section#range.semi.wrap
    [:en] Semiregular wrapper
    [:zh_CN] 半正规包装器
]

[para]
[:en] Many types in this subclause are specified in terms of an exposition-only
class template [`[^semiregular-box]].
[:zh_CN] 本子条款中的许多类型，都是基于仅用于阐释的类模板 [`[^semiregular-box]]
来指定的。

[:en] [`[^semiregular-box]<T>] behaves exactly like [`optional<T>] with the
following differences:
[:zh_CN] [`[^semiregular-box]<T>] 的行为与 [`optional<T>] 十分相似，但具有以下
区别：

[list]
[item]
[:en] [`[^semiregular-box]<T>] constrains its type parameter [`T] with
[`[`:c copy_constructible]<T> && is_object_v<T>].
[:zh_CN] [`[^semiregular-box]<T>] 以
[`[`:c copy_constructible]<T> && is_object_v<T>] 来对其类型形参 [`T] 进行约束。

[item]
[:en] If [`T] models [`:c default_constructible], the default constructor of
[`[^semiregular-box]<T>] is equivalent to:
[:zh_CN] 如果 [`T] 构成了 [`:c default_constructible]，则 [`[^semiregular-box]<T>]
的默认构造函数等价于：
[codeblock:]
constexpr [[redoc("^>")]]semiregular-box() noexcept(is_nothrow_default_constructible_v<T>)
  : [[redoc("^>")]]semiregular-box{in_place}
{ }
[codeblock:end]

[item]
[:en] If [`[`:c assignable_from]<T&, const T&>] is not modeled, the copy
assignment operator is equivalent to:
[:zh_CN] 如果未能构成 [`[`:c assignable_from]<T&, const T&>]，则其复制赋值运算符
等价于：
[codeblock]
[[redoc("^>")]]semiregular-box& operator=(const [[redoc("^>")]]semiregular-box& that)
  noexcept(is_nothrow_copy_constructible_v<T>)
{
  if (that) emplace(*that);
  else reset();
  return *this;
}
[codeblock:end]

[item]
[:en] If [`[`:c assignable_from]<T&, T>] is not modeled, the move assignment
operator is equivalent to:
[:zh_CN] 如果未能构成 [`[`:c assignable_from]<T&, T>]，则其移动赋值运算符等价于：
[codeblock]
[[redoc("^>")]]semiregular-box& operator=([[redoc("^>")]]semiregular-box&& that)
  noexcept(is_nothrow_move_constructible_v<T>)
{
  if (that) emplace(std::move(*that));
  else reset();
  return *this;
}
[codeblock:end]
[list:end]
