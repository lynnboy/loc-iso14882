[section#ranges.syn
    [:en] Header [`<ranges>] synopsis
    [:zh_CN] 头文件 [`<ranges>] 纲要
]

[%@hdr@def ranges]
[codeblock:synopsis]
// [=mostly freestanding]
#include <compare>              // [:en] see [#compare.syn] [:zh_CN] 参见 [#compare.syn]
#include <initializer_list>     // [:en] see [#initializer.list.syn] [:zh_CN] 参见 [#initializer.list.syn]
#include <iterator>             // [:en] see [#iterator.synopsis] [:zh_CN] 参见 [#iterator.synopsis]

namespace std::ranges {
  inline namespace [[redoc("[=unspec]")]] {
    // [:en] [#range.access], range access \
    [:zh_CN] [#range.access]，范围访问
    inline constexpr [[redoc("[=unspec]")]] begin = [[redoc("[=unspec]")]];
    inline constexpr [[redoc("[=unspec]")]] end = [[redoc("[=unspec]")]];
    inline constexpr [[redoc("[=unspec]")]] cbegin = [[redoc("[=unspec]")]];
    inline constexpr [[redoc("[=unspec]")]] cend = [[redoc("[=unspec]")]];
    inline constexpr [[redoc("[=unspec]")]] rbegin = [[redoc("[=unspec]")]];
    inline constexpr [[redoc("[=unspec]")]] rend = [[redoc("[=unspec]")]];
    inline constexpr [[redoc("[=unspec]")]] crbegin = [[redoc("[=unspec]")]];
    inline constexpr [[redoc("[=unspec]")]] crend = [[redoc("[=unspec]")]];

    inline constexpr [[redoc("[=unspec]")]] size = [[redoc("[=unspec]")]];
    inline constexpr [[redoc("[=unspec]")]] reserve_hint = [[redoc("[=unspec]")]];
    inline constexpr [[redoc("[=unspec]")]] ssize = [[redoc("[=unspec]")]];
    inline constexpr [[redoc("[=unspec]")]] empty = [[redoc("[=unspec]")]];
    inline constexpr [[redoc("[=unspec]")]] data = [[redoc("[=unspec]")]];
    inline constexpr [[redoc("[=unspec]")]] cdata = [[redoc("[=unspec]")]];
  }

  // [:en] [#range.range], ranges \
  [:zh_CN] [#range.range]，范围
  template<class T>
    concept range = [[redoc("[=seebelow]")]];

  template<class T>
    constexpr bool enable_borrowed_range = false;

  template<class T>
    concept borrowed_range = [[redoc("[=seebelow]")]];

  template<class T>
    using iterator_t = decltype(ranges::begin(declval<T&>()));
  template<[[redoc("`:c>")]]range R>
    using sentinel_t = decltype(ranges::end(declval<R&>()));
  template<[[redoc("`:c>")]]range R>
    using const_iterator_t = decltype(ranges::cbegin(declval<R&>()));
  template<[[redoc("`:c>")]]range R>
    using const_sentinel_t = decltype(ranges::cend(declval<R&>()));
  template<[[redoc("`:c>")]]range R>
    using range_difference_t = iter_difference_t<iterator_t<R>>;
  template<[[redoc("`:c>")]]sized_range R>
    using range_size_t = decltype(ranges::size(declval<R&>()));
  template<[[redoc("`:c>")]]range R>
    using range_value_t = iter_value_t<iterator_t<R>>;
  template<[[redoc("`:c>")]]range R>
    using range_reference_t = iter_reference_t<iterator_t<R>>;
  template<[[redoc("`:c>")]]range R>
    using range_const_reference_t = iter_const_reference_t<iterator_t<R>>;
  template<[[redoc("`:c>")]]range R>
    using range_rvalue_reference_t = iter_rvalue_reference_t<iterator_t<R>>;
  template<[[redoc("`:c>")]]range R>
    using range_common_reference_t = iter_common_reference_t<iterator_t<R>>;

  // [:en] [#range.sized], sized ranges \
  [:zh_CN] [#range.sized]，有大小范围
  template<class>
    constexpr bool disable_sized_range = false;

  template<class T>
    concept approximately_sized_range = [[redoc("[=seebelow]")]];

  template<class T>
    concept sized_range = [[redoc("[=seebelow]")]];

  // [:en] [#range.view], views \
  [:zh_CN] [#range.view]，视图
  template<class T>
    constexpr bool enable_view = [[redoc("[=seebelow]")]];

  struct view_base {};

  template<class T>
    concept view = [[redoc("[=seebelow]")]];

  // [:en] [#range.refinements], other range refinements \
  [:zh_CN] [#range.refinements]，其他范围精炼概念
  template<class R, class T>
    concept output_range = [[redoc("[=seebelow]")]];

  template<class T>
    concept input_range = [[redoc("[=seebelow]")]];

  template<class T>
    concept forward_range = [[redoc("[=seebelow]")]];

  template<class T>
    concept bidirectional_range = [[redoc("[=seebelow]")]];

  template<class T>
    concept random_access_range = [[redoc("[=seebelow]")]];

  template<class T>
    concept contiguous_range = [[redoc("[=seebelow]")]];

  template<class T>
    concept common_range = [[redoc("[=seebelow]")]];

  template<class T>
    concept viewable_range = [[redoc("[=seebelow]")]];

  template<class T>
    concept constant_range = [[redoc("[=seebelow]")]];

  // [:en] [#view.interface], class template [`view_interface] \
  [:zh_CN] [#view.interface]，类模板 [`view_interface]
  template<class D>
    requires is_class_v<D> && [[redoc("`:c>")]]same_as<D, remove_cv_t<D>>
  class view_interface;

  // [:en] [#range.subrange], sub-ranges \
  [:zh_CN] [#range.subrange]，子范围
  enum class [[redoc("`:lib>")]]subrange_kind : bool { [[redoc("[%@lib@member unsized[!subrange_kind]]")]]unsized, [[redoc("[%@lib@member sized[!subrange_kind]]")]]sized };

  template<[[redoc("`:c>")]]input_or_output_iterator I, [[redoc("`:c>")]]sentinel_for<I> S = I, subrange_kind K = [[redoc("[=seebelow]")]]>
    requires (K == subrange_kind::sized || ![[redoc("`:c>")]]sized_sentinel_for<S, I>)
  class subrange;

  template<class I, class S, subrange_kind K>
    constexpr bool [[redoc("%@lib@spec enable_borrowed_range[!subrange]")]]enable_borrowed_range<subrange<I, S, K>> = true;

  template<size_t N, class I, class S, subrange_kind K>
    requires ((N == 0 && [[redoc("`:c>")]]copyable<I>) || N == 1)
    constexpr auto get(const subrange<I, S, K>& r);

  template<size_t N, class I, class S, subrange_kind K>
    requires (N < 2)
    constexpr auto get(subrange<I, S, K>&& r);
}

namespace std {
  using ranges::get;
}

namespace std::ranges {
  // [:en] [#range.dangling], dangling iterator handling \
  [:zh_CN] [#range.dangling]，悬挂迭代器处理
  struct dangling;

  // [:en] [#range.elementsof], class template [`elements_of] \
  [:zh_CN] [#range.elementsof]，类模板 [`elements_of]
  template<[[redoc("`:c>")]]range R, class Allocator = allocator<byte>>
    struct elements_of;

  template<[[redoc("`:c>")]]range R>
    using borrowed_iterator_t = [[redoc("[=seebelow]")]];

  template<[[redoc("`:c>")]]range R>
    using borrowed_subrange_t = [[redoc("[=seebelow]")]];

  // [:en] [#range.utility.conv], range conversions \
  [:zh_CN] [#range.utility.conv]，范围转换
  template<class C, [[redoc("`:c>")]]input_range R, class... Args> requires (![[redoc("`:c>")]]view<C>)
    constexpr C to(R&& r, Args&&... args);
  template<template<class...> class C, [[redoc("`:c>")]]input_range R, class... Args>
    constexpr auto to(R&& r, Args&&... args);
  template<class C, class... Args> requires (![[redoc("`:c>")]]view<C>)
    constexpr auto to(Args&&... args);
  template<template<class...> class C, class... Args>
    constexpr auto to(Args&&... args);

  // [:en] [#range.empty], empty view \
  [:zh_CN] [#range.empty]，空视图
  template<class T>
    requires is_object_v<T>
  class empty_view;

  template<class T>
    constexpr bool [[redoc("%@lib@spec enable_borrowed_range[!empty_view]")]]enable_borrowed_range<empty_view<T>> = true;

  namespace views {
    template<class T>
      constexpr empty_view<T> [[redoc("[%@lib@member empty[!views]]")]]empty{};
  }

  // [:en] [#range.single], single view \
  [:zh_CN] [#range.single]，单对象视图
  template<[[redoc("`:c>")]]move_constructible T>
    requires is_object_v<T>
  class single_view;

  namespace views { inline constexpr [[redoc("[=unspec]")]] single = [[redoc("[=unspec]")]]; }

  template<bool Const, class T>
    using [[redoc("*>")]]maybe-const = conditional_t<Const, const T, T>;   // [=expos]

  // [:en] [#range.iota], iota view \
  [:zh_CN] [#range.iota]，iota 视图
  template<[[redoc("`:c>")]]weakly_incrementable W, [[redoc("`:c>")]]semiregular Bound = unreachable_sentinel_t>
    requires [[redoc("*:c>")]]weakly-equality-comparable-with<W, Bound> && [[redoc("`:c>")]]copyable<W>
  class iota_view;

  template<class W, class Bound>
    constexpr bool [[redoc("%@lib@spec enable_borrowed_range[!iota_view]")]]enable_borrowed_range<iota_view<W, Bound>> = true;

  namespace views { inline constexpr [[redoc("[=unspec]")]] iota = [[redoc("[=unspec]")]]; }

  // [:en] [#range.repeat], repeat view \
  [:zh_CN] [#range.repeat]，重复视图
  template<[[redoc("`:c>")]]move_constructible T, [[redoc("`:c>")]]semiregular Bound = unreachable_sentinel_t>
    requires [[redoc("[=seebelow]")]]
  class repeat_view;

  namespace views { inline constexpr [[redoc("[=unspec]")]] repeat = [[redoc("[=unspec]")]]; }

  // [:en] [#range.istream], istream view \
  [:zh_CN] [#range.istream]，istream 视图
  template<[[redoc("`:c>")]]movable Val, class CharT, class Traits = char_traits<CharT>>
    requires [[redoc("[=seebelow]")]]
  class basic_istream_view;                                                         // [=hosted]
  template<class Val>
    using istream_view = basic_istream_view<Val, char>;                             // [=hosted]
  template<class Val>
    using wistream_view = basic_istream_view<Val, wchar_t>;                         // [=hosted]

  namespace views {
    template<class T> constexpr [[redoc("[=unspec]")]] istream = [[redoc("[=unspec]")]];                  // [=hosted]
  }

  // [:en] [#range.adaptor.object], range adaptor objects \
  [:zh_CN] [#range.adaptor.object]，范围适配器对象
  template<class D>
    requires is_class_v<D> && [[redoc("`:c>")]]same_as<D, remove_cv_t<D>>
  class range_adaptor_closure { };

  // [:en] [#range.all], all view \
  [:zh_CN] [#range.all]，全视图
  namespace views {
    inline constexpr [[redoc("[=unspec]")]] all = [[redoc("[=unspec]")]];

    template<[[redoc("`:c>")]]viewable_range R>
      using all_t = decltype(all(declval<R>()));
  }

  // [:en] [#range.ref.view], ref view \
  [:zh_CN] [#range.ref.view]，引用视图
  template<[[redoc("`:c>")]]range R>
    requires is_object_v<R>
  class ref_view;

  template<class T>
    constexpr bool [[redoc("%@lib@spec enable_borrowed_range[!ref_view]")]]enable_borrowed_range<ref_view<T>> = true;

  // [:en] [#range.owning.view], owning view \
  [:zh_CN] [#range.owning.view]，所有权视图
  template<[[redoc("`:c>")]]range R>
    requires [[redoc("[=seebelow]")]]
  class owning_view;

  template<class T>
    constexpr bool [[redoc("%@lib@spec enable_borrowed_range[!owning_view]")]]enable_borrowed_range<owning_view<T>> =
      enable_borrowed_range<T>;

  // [:en] [#range.as.rvalue], as rvalue view \
  [:zh_CN] [#range.as.rvalue]，按右值视图
  template<[[redoc("`:c>")]]view V>
    requires [[redoc("`:c>")]]input_range<V>
  class as_rvalue_view;

  template<class T>
    constexpr bool [[redoc("%@lib@spec enable_borrowed_range[!as_rvalue_view]")]]enable_borrowed_range<as_rvalue_view<T>> =
      enable_borrowed_range<T>;

  namespace views { inline constexpr [[redoc("[=unspec]")]] as_rvalue = [[redoc("[=unspec]")]]; }

  // [:en] [#range.filter], filter view \
  [:zh_CN] [#range.filter]，过滤视图
  template<[[redoc("`:c>")]]input_range V, [[redoc("`:c>")]]indirect_unary_predicate<iterator_t<V>> Pred>
    requires [[redoc("`:c>")]]view<V> && is_object_v<Pred>
  class filter_view;

  namespace views { inline constexpr [[redoc("[=unspec]")]] filter = [[redoc("[=unspec]")]]; }

  // [:en] [#range.transform], transform view \
  [:zh_CN] [#range.transform]，变换视图
  template<[[redoc("`:c>")]]input_range V, [[redoc("`:c>")]]move_constructible F>
    requires [[redoc("`:c>")]]view<V> && is_object_v<F> &&
             [[redoc("`:c>")]]regular_invocable<F&, range_reference_t<V>> &&
             [[redoc("*:c>")]]can-reference<invoke_result_t<F&, range_reference_t<V>>>
  class transform_view;

  namespace views { inline constexpr [[redoc("[=unspec]")]] transform = [[redoc("[=unspec]")]]; }

  // [:en] [#range.take], take view \
  [:zh_CN] [#range.take]，采取视图
  template<[[redoc("`:c>")]]view> class take_view;

  template<class T>
    constexpr bool [[redoc("%@lib@spec enable_borrowed_range[!take_view]")]]enable_borrowed_range<take_view<T>> =                            // [=freestanding]
      enable_borrowed_range<T>;

  namespace views { inline constexpr [[redoc("[=unspec]")]] take = [[redoc("[=unspec]")]]; }

  // [:en] [#range.take.while], take while view \
  [:zh_CN] [#range.take.while]，条件采取视图
  template<[[redoc("`:c>")]]view V, class Pred>
    requires [[redoc("`:c>")]]input_range<V> && is_object_v<Pred> &&
             [[redoc("`:c>")]]indirect_unary_predicate<const Pred, iterator_t<V>>
    class take_while_view;

  namespace views { inline constexpr [[redoc("[=unspec]")]] take_while = [[redoc("[=unspec]")]]; }

  // [:en] [#range.drop], drop view \
  [:zh_CN] [#range.drop]，丢弃视图
  template<[[redoc("`:c>")]]view V>
    class drop_view;

  template<class T>
    constexpr bool [[redoc("%@lib@spec enable_borrowed_range[!drop_view]")]]enable_borrowed_range<drop_view<T>> =
      enable_borrowed_range<T>;

  namespace views { inline constexpr [[redoc("[=unspec]")]] drop = [[redoc("[=unspec]")]]; }

  // [:en] [#range.drop.while], drop while view \
  [:zh_CN] [#range.drop.while]，条件丢弃视图
  template<[[redoc("`:c>")]]view V, class Pred>
    requires [[redoc("`:c>")]]input_range<V> && is_object_v<Pred> &&
             [[redoc("`:c>")]]indirect_unary_predicate<const Pred, iterator_t<V>>
    class drop_while_view;

  template<class T, class Pred>
    constexpr bool [[redoc("%@lib@spec enable_borrowed_range[!drop_while_view]")]]enable_borrowed_range<drop_while_view<T, Pred>> =
      enable_borrowed_range<T>;

  namespace views { inline constexpr [[redoc("[=unspec]")]] drop_while = [[redoc("[=unspec]")]]; }

  // [:en] [#range.join], join view \
  [:zh_CN] [#range.join]，联接视图
  template<[[redoc("`:c>")]]input_range V>
    requires [[redoc("`:c>")]]view<V> && [[redoc("`:c>")]]input_range<range_reference_t<V>>
  class join_view;

  namespace views { inline constexpr [[redoc("[=unspec]")]] join = [[redoc("[=unspec]")]]; }

  // [:en] [#range.join.with], join with view \
  [:zh_CN] [#range.join.with]，联接于视图
  template<[[redoc("`:c>")]]input_range V, [[redoc("`:c>")]]forward_range Pattern>
    requires [[redoc("[=seebelow]")]]
  class join_with_view;

  namespace views { inline constexpr [[redoc("[=unspec]")]] join_with = [[redoc("[=unspec]")]]; }

  // [:en] [#range.lazy.split], lazy split view \
  [:zh_CN] [#range.lazy.split]，懒惰分割视图
  template<class R>
    concept [[redoc("*:c>")]]tiny-range = [[redoc("[=seebelow]")]];   // [=expos]

  template<[[redoc("`:c>")]]input_range V, [[redoc("`:c>")]]forward_range Pattern>
    requires [[redoc("`:c>")]]view<V> && [[redoc("`:c>")]]view<Pattern> &&
             [[redoc("`:c>")]]indirectly_comparable<iterator_t<V>, iterator_t<Pattern>, ranges::equal_to> &&
             ([[redoc("`:c>")]]forward_range<V> || [[redoc("*:c>")]]tiny-range<Pattern>)
  class lazy_split_view;

  // [:en] [#range.split], split view \
  [:zh_CN] [#range.split]，分割视图
  template<[[redoc("`:c>")]]forward_range V, [[redoc("`:c>")]]forward_range Pattern>
    requires [[redoc("`:c>")]]view<V> && [[redoc("`:c>")]]view<Pattern> &&
             [[redoc("`:c>")]]indirectly_comparable<iterator_t<V>, iterator_t<Pattern>, ranges::equal_to>
  class split_view;

  namespace views {
    inline constexpr [[redoc("[=unspec]")]] lazy_split = [[redoc("[=unspec]")]];
    inline constexpr [[redoc("[=unspec]")]] split = [[redoc("[=unspec]")]];
  }

  // [:en] [#range.concat], concat view \
  [:zh_CN] [#range.concat]，连接视图
  template<[[redoc("`:c>")]]input_range... Views>
    requires [[redoc("[=seebelow]")]]
  class concat_view;

  namespace views { inline constexpr [[redoc("[=unspec]")]] concat = [[redoc("[=unspec]")]]; }

  // [:en] [#range.counted], counted view \
  [:zh_CN] [#range.counted]，计数视图
  namespace views { inline constexpr [[redoc("[=unspec]")]] counted = [[redoc("[=unspec]")]]; }

  // [:en] [#range.common], common view \
  [:zh_CN] [#range.common]，公共视图
  template<[[redoc("`:c>")]]view V>
    requires (![[redoc("`:c>")]]common_range<V> && [[redoc("`:c>")]]copyable<iterator_t<V>>)
  class common_view;

  template<class T>
    constexpr bool [[redoc("%@lib@spec enable_borrowed_range[!common_view]")]]enable_borrowed_range<common_view<T>> =
      enable_borrowed_range<T>;

  namespace views { inline constexpr [[redoc("[=unspec]")]] common = [[redoc("[=unspec]")]]; }

  // [:en] [#range.reverse], reverse view \
  [:zh_CN] [#range.reverse]，逆向视图
  template<[[redoc("`:c>")]]view V>
    requires [[redoc("`:c>")]]bidirectional_range<V>
  class reverse_view;

  template<class T>
    constexpr bool [[redoc("%@lib@spec enable_borrowed_range[!reverse_view]")]]enable_borrowed_range<reverse_view<T>> =
      enable_borrowed_range<T>;

  namespace views { inline constexpr [[redoc("[=unspec]")]] reverse = [[redoc("[=unspec]")]]; }

  // [:en] [#range.as.const], as const view \
  [:zh_CN] [#range.as.const]，按常量视图
  template<[[redoc("`:c>")]]input_range R>
    constexpr auto& [[redoc("*>")]]possibly-const-range(R& r) noexcept { // [=expos]
      if constexpr ([[redoc("`:c>")]]input_range<const R>) {
        return const_cast<const R&>(r);
      } else {
        return r;
      }
    }

  template<[[redoc("`:c>")]]view V>
    requires [[redoc("`:c>")]]input_range<V>
  class as_const_view;

  template<class T>
    constexpr bool [[redoc("%@lib@spec enable_borrowed_range[!as_const_view]")]]enable_borrowed_range<as_const_view<T>> =
      enable_borrowed_range<T>;

  namespace views { inline constexpr [[redoc("[=unspec]")]] as_const = [[redoc("[=unspec]")]] }

  // [:en] [#range.elements], elements view \
  [:zh_CN] [#range.elements]，元素视图
  template<[[redoc("`:c>")]]input_range V, size_t N>
    requires [[redoc("[=seebelow]")]]
  class elements_view;

  template<class T, size_t N>
    constexpr bool [[redoc("%@lib@spec enable_borrowed_range[!elements_view]")]]enable_borrowed_range<elements_view<T, N>> =
      enable_borrowed_range<T>;

  template<class R>
    using [[redoc("`:lib>")]]keys_view = elements_view<R, 0>;
  template<class R>
    using [[redoc("`:lib>")]]values_view = elements_view<R, 1>;

  namespace views {
    template<size_t N>
      constexpr [[redoc("[=unspec]")]] elements = [[redoc("[=unspec]")]];
    inline constexpr auto [[redoc("[%@lib@member keys[!views]]")]]keys = elements<0>;
    inline constexpr auto [[redoc("[%@lib@member values[!views]]")]]values = elements<1>;
  }

  // [:en] [#range.enumerate], enumerate view \
  [:zh_CN] [#range.enumerate]，枚举视图
  template<[[redoc("`:c>")]]view View>
    requires [[redoc("[=seebelow]")]]
  class enumerate_view;

  template<class View>
    constexpr bool [[redoc("%@lib@spec enable_borrowed_range[!enumerate_view]")]]enable_borrowed_range<enumerate_view<View>> =
      enable_borrowed_range<View>;

  namespace views { inline constexpr [[redoc("[=unspec]")]] enumerate = [[redoc("[=unspec]")]] }

  // [:en] [#range.zip], zip view \
  [:zh_CN] [#range.zip]，zip 视图
  template<[[redoc("`:c>")]]input_range... Views>
    requires ([[redoc("`:c>")]]view<Views> && ...) && (sizeof...(Views) > 0)
  class zip_view;

  template<class... Views>
    constexpr bool [[redoc("%@lib@spec enable_borrowed_range[!zip_view]")]]enable_borrowed_range<zip_view<Views...>> =
      (enable_borrowed_range<Views> && ...);

  namespace views { inline constexpr [[redoc("[=unspec]")]] zip = [[redoc("[=unspec]")]]; }

  // [:en] [#range.zip.transform], zip transform view \
  [:zh_CN] [#range.zip.transform]，zip 转换视图
  template<[[redoc("`:c>")]]move_constructible F, [[redoc("`:c>")]]input_range... Views>
    requires ([[redoc("`:c>")]]view<Views> && ...) && (sizeof...(Views) > 0) && is_object_v<F> &&
             [[redoc("`:c>")]]regular_invocable<F&, range_reference_t<Views>...> &&
             [[redoc("*:c>")]]can-reference<invoke_result_t<F&, range_reference_t<Views>...>>
  class zip_transform_view;

  namespace views { inline constexpr [[redoc("[=unspec]")]] zip_transform = [[redoc("[=unspec]")]]; }

  // [:en] [#range.adjacent], adjacent view \
  [:zh_CN] [#range.adjacent]，邻接视图
  template<[[redoc("`:c>")]]forward_range V, size_t N>
    requires [[redoc("`:c>")]]view<V> && (N > 0)
  class adjacent_view;

  template<class V, size_t N>
    constexpr bool [[redoc("%@lib@spec enable_borrowed_range[!adjacent_view]")]]enable_borrowed_range<adjacent_view<V, N>> =
      enable_borrowed_range<V>;

  namespace views {
    template<size_t N>
      constexpr [[redoc("[=unspec]")]] adjacent = [[redoc("[=unspec]")]];
    inline constexpr auto [[redoc("%@lib@member pairwise[!views]")]]pairwise = adjacent<2>;
  }

  // [:en] [#range.adjacent.transform], adjacent transform view \
  [:zh_CN] [#range.adjacent.transform]，邻接转换视图
  template<[[redoc("`:c>")]]forward_range V, [[redoc("`:c>")]]move_constructible F, size_t N>
    requires [[redoc("[=seebelow]")]]
  class adjacent_transform_view;

  namespace views {
    template<size_t N>
      constexpr [[redoc("[=unspec]")]] adjacent_transform = [[redoc("[=unspec]")]];
    inline constexpr auto [[redoc("%@lib@member pairwise_transform[!views]")]]pairwise_transform = adjacent_transform<2>;
  }

  // [:en] [#range.chunk], chunk view \
  [:zh_CN] [#range.chunk]，区段视图
  template<[[redoc("`:c>")]]view V>
    requires [[redoc("`:c>")]]input_range<V>
  class chunk_view;

  template<[[redoc("`:c>")]]view V>
    requires [[redoc("`:c>")]]forward_range<V>
  class chunk_view<V>;

  template<class V>
    constexpr bool [[redoc("%@lib@spec enable_borrowed_range[!chunk_view]")]]enable_borrowed_range<chunk_view<V>> =
      [[redoc("`:c>")]]forward_range<V> && enable_borrowed_range<V>;

  namespace views { inline constexpr [[redoc("[=unspec]")]] chunk = [[redoc("[=unspec]")]]; }

  // [:en] [#range.slide], slide view \
  [:zh_CN] [#range.slide]，滑动视图
  template<[[redoc("`:c>")]]forward_range V>
    requires [[redoc("`:c>")]]view<V>
  class slide_view;

  template<class V>
    constexpr bool [[redoc("%@lib@spec enable_borrowed_range[!slide_view]")]]enable_borrowed_range<slide_view<V>> =
      enable_borrowed_range<V>;

  namespace views { inline constexpr [[redoc("[=unspec]")]] slide = [[redoc("[=unspec]")]]; }

  // [:en] [#range.chunk.by], chunk by view \
  [:zh_CN] [#range.chunk.by]，分段视图
  template<[[redoc("`:c>")]]forward_range V, [[redoc("`:c>")]]indirect_binary_predicate<iterator_t<V>, iterator_t<V>> Pred>
    requires [[redoc("`:c>")]]view<V> && is_object_v<Pred>
  class chunk_by_view;

  namespace views { inline constexpr [[redoc("[=unspec]")]] chunk_by = [[redoc("[=unspec]")]]; }

  // [:en] [#range.stride], stride view \
  [:zh_CN] [#range.stride]，跨步视图
  template<[[redoc("`:c>")]]input_range V>
    requires [[redoc("`:c>")]]view<V>
  class stride_view;

  template<class V>
    constexpr bool [[redoc("%@lib@spec enable_borrowed_range[!stride_view]")]]enable_borrowed_range<stride_view<V>> =
      enable_borrowed_range<V>;

  namespace views { inline constexpr [[redoc("[=unspec]")]] stride = [[redoc("[=unspec]")]]; }

  // [:en] [#range.cartesian], cartesian product view \
  [:zh_CN] [#range.cartesian]，笛卡尔积视图
  template<[[redoc("`:c>")]]input_range First, [[redoc("`:c>")]]forward_range... Vs>
    requires ([[redoc("`:c>")]]view<First> && ... && [[redoc("`:c>")]]view<Vs>)
  class cartesian_product_view;

  namespace views { inline constexpr [[redoc("[=unspec]")]] cartesian_product = [[redoc("[=unspec]")]]; }

  // [:en] [#range.cache.latest], cache latest view \
  [:zh_CN] [#range.cache.latest]，缓存末值视图
  template<[[redoc("`:c>")]]input_range V>
    requires [[redoc("`:c>")]]view<V>
  class cache_latest_view;

  namespace views { inline constexpr [[redoc("[=unspec]")]] cache_latest = [[redoc("[=unspec]")]]; }

  // [:en] [#range.to.input], to input view \
  [:zh_CN] [#range.to.input]，转为输入视图
  template<[[redoc("`:c>")]]input_range V>
    requires [[redoc("`:c>")]]view<V>
  class to_input_view;

  template<class V>
    constexpr bool enable_borrowed_range<to_input_view<V>> =
      enable_borrowed_range<V>;

  namespace views { inline constexpr [[redoc("[=unspec]")]] to_input = [[redoc("[=unspec]")]]; }
}

namespace std {
  namespace views = ranges::views;

  template<class T> struct tuple_size;
  template<size_t I, class T> struct tuple_element;

  template<class I, class S, ranges::subrange_kind K>
  struct tuple_size<ranges::subrange<I, S, K>>
    : integral_constant<size_t, 2> {};
  template<class I, class S, ranges::subrange_kind K>
  struct tuple_element<0, ranges::subrange<I, S, K>> {
    using type = I;
  };
  template<class I, class S, ranges::subrange_kind K>
  struct tuple_element<1, ranges::subrange<I, S, K>> {
    using type = S;
  };
  template<class I, class S, ranges::subrange_kind K>
  struct tuple_element<0, const ranges::subrange<I, S, K>> {
    using type = I;
  };
  template<class I, class S, ranges::subrange_kind K>
  struct tuple_element<1, const ranges::subrange<I, S, K>> {
    using type = S;
  };

  struct from_range_t { explicit from_range_t() = default; };
  inline constexpr from_range_t from_range{};
}
[codeblock:end]

[para]
[%[*to-unsigned-like]] [%[*make-unsigned-like-t]]
[:en] Within this Clause, for an integer-like type [`X] ([#iterator.concept.winc]),
[`[^make-unsigned-like-t]<X>] denotes [`make_unsigned_t<X>] if [`X] is an
integer type; otherwise, it denotes a corresponding unspecified
unsigned-integer-like type of the same width as [`X].
[:zh_CN] 本章中，对于整数式类型 [`X]（[#iterator.concept.winc]），当 [`X] 为整数
类型时，[`[^make-unsigned-like-t]<X>] 代表 [`make_unsigned_t<X>]；否则代表与
[`X] 具有相同宽度的某个未指明的对应无符号整数式类型。

[:en] For an expression [`x] of type [`X], [`[^to-unsigned-like](x)] is [`x]
explicitly converted to [`[^make-unsigned-like-t]<X>].
[:zh_CN] 对于 [`X] 类型的表达式 [`x]，[`[^to-unsigned-like](x)] 为 [`x] 显式转换
到 [`[^make-unsigned-like-t]<X>]。

[para]
[:en] Also within this Clause, [`[*make-signed-like-t]<X>] for an integer-like type [`X]
denotes [`make_signed_t<X>] if [`X] is an integer type; otherwise, it denotes a
corresponding unspecified signed-integer-like type of the same width as [`X].
[:zh_CN] 同样在本章中，对于整数式类型 [`X]，当 [`X] 为整数类型时，
[`[*make-signed-like-t]<X>] 代表 [`make_signed_t<X>]；否则代表与 [`X] 具有相同
宽度的某个未指明的对应有符号整数式类型。
