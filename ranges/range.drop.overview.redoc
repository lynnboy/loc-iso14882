[section#range.drop.overview
    [:en] Overview
    [:zh_CN] 概述
]

[para]
[:en] [`drop_view] produces a view excluding the first [$N] elements from
another view, or an empty range if the adapted view contains fewer than [$N]
elements.
[:zh_CN] [`drop_view] 产生另一个视图排除前 [$N] 个元素的视图，若所适配的视图包含
少于 [$N] 个元素则为空范围。

[para]
[%@lib@member drop[!views]]
[:en] The name [`views::drop] denotes a range adaptor object
([#range.adaptor.object]).
[:zh_CN] 名字 [`views::drop] 代表一个范围适配器对象（[#range.adaptor.object]）。

[:en] Let [`E] and [`F] be expressions, let [`T] be [`remove_cvref_t<decltype((E))>],
and let [`D] be [`range_difference_t<decltype((E))>].
[:zh_CN] 令 [`E] 和 [`F] 为表达式，令 [`T] 为 [`remove_cvref_t<decltype((E))>]，
并令 [`D] 为 [`range_difference_t<decltype((E))>]。

[:en] If [`decltype((F))] does not model [`[`:c convertible_to]<D>],
[`views::drop(E, F)] is ill-formed.
[:zh_CN] 若 [`decltype((F))] 并不构成 [`[`:c convertible_to]<D>]，则
[`views::drop(E, F)] 非良构。

[:en] Otherwise, the expression [`views::drop(E, F)] is expression-equivalent to:
[:zh_CN] 否则，表达式 [`views::drop(E, F)] 按表达式等价于：

[list]
[item]
[:en] If [`T] is a specialization of [`empty_view] ([#range.empty.view]), then
[`((void)F, [^decay-copy](E))], except that the evaluations of [`E] and [`F] are
indeterminately sequenced.
[:zh_CN] 若 [`T] 为 [`empty_view] 的特例（[#range.empty.view]），则为
[`((void)F, [^decay-copy](E))]，但 [`E] 和 [`F] 的执行是顺序不确定的。

[item]
[:en] Otherwise, if [`T] models [`:c random_access_range] and [`:c sized_range]
and is
[:zh_CN] 否则，若 [`T] 构成 [`:c random_access_range] 和 [`:c sized_range]，并且
为
[list]
[item]
[:en@~] a specialization of [`span] ([#views.span]),
[:zh_CN@~] [`span]（[#views.span]）的特例，
[item]
[:en@~] a specialization of [`basic_string_view] ([#string.view]),
[:zh_CN@~] [`basic_string_view]（[#string.view]）的特例，
[item]
[:en@~] a specialization of [`iota_view] ([#range.iota.view]), or
[:zh_CN@~] [`iota_view]（[#range.iota.view]）的特例，或
[item]
[:en@~] a specialization of [`subrange] ([#range.subrange]) where
[`T::[*StoreSize]] is [`false],
[:zh_CN@~] [`subrange]（[#range.subrange]）的特例，其中 [`T::[*StoreSize]] 为
[`false]，
[list:end]
[:en@~] then
[`U(ranges::begin(E) + std::min<D>(ranges::distance(E), F), ranges::end(E))],
except that [`E] is evaluated only once, where [`U] is
[`span<typename T::element_type>] if [`T] is a specialization of [`span] and
[`T] otherwise.
[:zh_CN@~] 则为
[`U(ranges::begin(E) + std::min<D>(ranges::distance(E), F), ranges::end(E))]，
但 [`E] 仅进行一次求值，其中 [`U] 当 [`T] 为 [`span] 的特例时为
[`span<typename T::element_type>] 否则为 [`T]。

[item]
[:en] Otherwise, if [`T] is a specialization of [`subrange] that models
[`:c random_access_range] and [`:c sized_range], then
[`T(ranges::begin(E) + std::min<D>(ranges::distance(E), F), ranges::end(E),
[*to-unsigned-like](ranges::distance(E) - std::min<D>(ranges::distance(E), F)))],
except that [`E] and [`F] are each evaluated only once.
[:zh_CN] 否则，若 [`T] 是 [`subrange] 的特例，并构成 [`:c random_access_range]
和 [`:c sized_range]，则为
[`T(ranges::begin(E) + std::min<D>(ranges::distance(E), F), ranges::end(E),
[*to-unsigned-like](ranges::distance(E) - std::min<D>(ranges::distance(E), F)))]，
但 [`E] 和 [`F] 仅进行一次求值。

[item]
[:en] Otherwise, if [`T] is a specialization of [`repeat_view]
([#range.repeat.view]):
[:zh_CN] 否则，若 [`T] 为 [`repeat_view]（[#range.repeat.view]）的特例：
[list]
[item]
[:en@~] if [`T] models [`:c sized_range], then
[:zh_CN@~] 若 [`T] 构成 [`:c sized_range]，则为
[codeblock]
views::repeat(*E.[[redoc("*>")]]value_, ranges::distance(E) - std::min<D>(ranges::distance(E), F))
[codeblock:end]
[:en@~] except that [`E] is evaluated only once;
[:zh_CN@~] 但 [`E] 仅进行一次求值；
[item]
[:en@~] otherwise, [`((void)F, [^decay-copy](E))], except that the evaluations
of [`E] and [`F] are indeterminately sequenced.
[:zh_CN@~] 否则，为 [`((void)F, [^decay-copy](E))]，但对 [`E] 和 [`F] 的求值
顺序不确定。
[list:end]

[item]
[:en] Otherwise, [`drop_view(E, F)].
[:zh_CN] 否则，为 [`drop_view(E, F)]。
[list:end]

[para]
[begin:example]
[codeblock]
auto ints = views::iota(0) | views::take(10);
for (auto i : ints | views::drop(5)) {
  cout << i << ' ';                             // [:en] prints [`5 6 7 8 9] \
                                                [:zh_CN] 打印：[`5 6 7 8 9]
}
[codeblock:end]
[end:example]
