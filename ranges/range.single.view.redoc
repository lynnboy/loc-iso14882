[section#range.single.view
    [:en] Class template [`single_view]
    [:zh_CN] 类模板 [`single_view]
]

[%@lib single_view]
[codeblock:synopsis]
namespace std::ranges {
  template<[[redoc("`:c>")]]move_constructible T>
    requires is_object_v<T>
  class single_view : public view_interface<single_view<T>> {
  private:
    [[redoc("*>")]]movable-box<T> [[redoc("*>")]]value_;              // [:en] [=expos] (see [#range.move.wrap]) \
                                                                      [:zh_CN] [=expos] （见 [#range.move.wrap]）

  public:
    single_view() requires [[redoc("`:c>")]]default_initializable<T> = default;
    constexpr explicit single_view(const T& t) requires [[redoc("`:c>")]]copy_constructible<T>;
    constexpr explicit single_view(T&& t);
    template<class... Args>
      requires [[redoc("`:c>")]]constructible_from<T, Args...>
    constexpr explicit single_view(in_place_t, Args&&... args);

    constexpr T* begin() noexcept;
    constexpr const T* begin() const noexcept;
    constexpr T* end() noexcept;
    constexpr const T* end() const noexcept;
    static constexpr bool empty() noexcept;
    static constexpr size_t size() noexcept;
    constexpr T* data() noexcept;
    constexpr const T* data() const noexcept;
  };

  template<class T>
    single_view(T) -> single_view<T>;
}
[codeblock:end]

[%@lib@ctor single_view]
[codeblock:declaration]
constexpr explicit single_view(const T& t) requires [[redoc("`:c>")]]copy_constructible<T>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*value_] with [`t].
[:zh_CN] 以 [`t] 初始化 [*value_]。
[div:end]

[%@lib@ctor single_view]
[codeblock:declaration]
constexpr explicit single_view(T&& t);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*value_] with [`std::move(t)].
[:zh_CN] 以 [`std::move(t)] 初始化 [*value_]。
[div:end]

[%@lib@ctor single_view]
[codeblock:declaration]
template<class... Args>
  requires [[redoc("`:c>")]]constructible_from<T, Args...>
constexpr explicit single_view(in_place_t, Args&&... args);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*value_] as if by
[`[*value_]{in_place, std::forward<Args>(args)...}].
[:en] 如同以 [`[*value_]{in_place, std::forward<Args>(args)...}] 来初始化
[*value_]。
[div:end]

[%@lib@member begin[!single_view]]
[codeblock:declaration]
constexpr T* begin() noexcept;
constexpr const T* begin() const noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return data();]
[:zh_CN] 等价于：[`return data();]
[div:end]

[%@lib@member end[!single_view]]
[codeblock:declaration]
constexpr T* end() noexcept;
constexpr const T* end() const noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return data() + 1;]
[:zh_CN] 等价于：[`return data() + 1;]
[div:end]

[%@lib@member empty[!single_view]]
[codeblock:declaration]
static constexpr bool empty() noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return false;]
[:zh_CN] 等价于：[`return false;]
[div:end]

[%@lib@member size[!single_view]]
[codeblock:declaration]
static constexpr size_t size() noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return 1;]
[:zh_CN] 等价于：[`return 1;]
[div:end]

[%@lib@member data[!single_view]]
[codeblock:declaration]
constexpr T* data() noexcept;
constexpr const T* data() const noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return [*value_].operator->();]
[:zh_CN] 等价于：[`return [*value_].operator->();]
[div:end]
