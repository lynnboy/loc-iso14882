[section#range.single.view
    [:en] Class template [`single_view]
    [:zh_CN] 类模板 [`single_view]
]

[codeblock:synopsis [!:var semiregular-box]]
namespace std::ranges {
  template<CopyConstructible T>
    requires is_object_v<T>
  class single_view : public view_interface<single_view<T>> {
  private:
    [*semiregular-box]<T> value_;      // [:en] [=Expos] (see [#range.semi.wrap])
                                       // [|:zh_CN] [=Expos] （见 [#range.semi.wrap]）
  public:
    single_view() = default;
    constexpr explicit single_view(const T& t);
    constexpr explicit single_view(T&& t);
    template<class... Args>
      requires Constructible<T, Args...>
    constexpr single_view(in_place_t, Args&&... args);

    constexpr T* begin() noexcept;
    constexpr const T* begin() const noexcept;
    constexpr T* end() noexcept;
    constexpr const T* end() const noexcept;
    static constexpr ptrdiff_t size() noexcept;
    constexpr T* data() noexcept;
    constexpr const T* data() const noexcept;
  };
}
[codeblock:end]

[%@library single_view[!single_view]]
[codeblock:declaration]
constexpr explicit single_view(const T& t);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Initializes [`value_] with [`t].
[:zh_CN] 以 [`t] 初始化 [`value_]。
[exit:description]

[%@library single_view[!single_view]]
[codeblock:declaration]
constexpr explicit single_view(T&& t);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Initializes [`value_] with [`std::move(t)].
[:zh_CN] 以 [`std::move(t)] 初始化 [`value_]。
[exit:description]

[%@library single_view[!single_view]]
[codeblock:declaration]
template<class... Args>
constexpr single_view(in_place_t, Args&&... args);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Initializes [`value_] as if by [`value_{in_place, std::forward<Args>(args)...}].
[:en] 如同以 [`value_{in_place, std::forward<Args>(args)...}] 来初始化 [`value_]。
[exit:description]

[%@library begin[!single_view]]
[codeblock:declaration]
constexpr T* begin() noexcept;
constexpr const T* begin() const noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to: [`return data();]
[:zh_CN] 等价于：[`return data();]
[exit:description]

[%@library end[!single_view]]
[codeblock:declaration]
constexpr T* end() noexcept;
constexpr const T* end() const noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to: [`return data() + 1;]
[:zh_CN] 等价于：[`return data() + 1;]
[exit:description]

[%@library size[!single_view]]
[codeblock:declaration]
static constexpr ptrdiff_t size() noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to: [`return 1;]
[:zh_CN] 等价于：[`return 1;]
[exit:description]

[%@library data[!single_view]]
[codeblock:declaration]
constexpr T* data() noexcept;
constexpr const T* data() const noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to: [`return value_.operator->();]
[:zh_CN] 等价于：[`return value_.operator->();]
[exit:description]
