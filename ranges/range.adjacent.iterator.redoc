[section#range.adjacent.iterator
    [:en] Class [`adjacent_view::[*iterator]]
    [:zh_CN] 类 [`adjacent_view::[*iterator]]
]

[codeblock:synopsis]
namespace std::ranges {
  template<[[redoc("`:c>")]]forward_range V, size_t N>
    requires [[redoc("`:c>")]]view<V> && (N > 0)
  template<bool Const>
  class adjacent_view<V, N>::[[redoc("*>")]]iterator {
    using [[redoc("*>")]]Base = [[redoc("*>")]]maybe-const<Const, V>;                                         // [=expos]
    array<iterator_t<[[redoc("*>")]]Base>, N> @\exposid{current_}@ = array<iterator_t<[[redoc("*>")]]Base>, N>();         // [=expos]
    constexpr [[redoc("*>")]]iterator(iterator_t<[[redoc("*>")]]Base> first, sentinel_t<[[redoc("*>")]]Base> last);          // [=expos]
    constexpr [[redoc("*>")]]iterator([[redoc("*>")]]as-sentinel, iterator_t<[[redoc("*>")]]Base> first, iterator_t<[[redoc("*>")]]Base> last);
                                                                                // [=expos]
  public:
    using iterator_category = input_iterator_tag;
    using iterator_concept  = [[redoc("[=seebelow]")]];
    using value_type = tuple<[[redoc("*>")]]REPEAT(range_value_t<[[redoc("*>")]]Base>, N)...>;
    using difference_type = range_difference_t<[[redoc("*>")]]Base>;

    [[redoc("*>")]]iterator() = default;
    constexpr [[redoc("*>")]]iterator([[redoc("*>")]]iterator<!Const> i)
      requires Const && [[redoc("`:c>")]]convertible_to<iterator_t<V>, iterator_t<[[redoc("*>")]]Base>>;

    constexpr auto operator*() const;
    constexpr [[redoc("*>")]]iterator& operator++();
    constexpr [[redoc("*>")]]iterator operator++(int);

    constexpr [[redoc("*>")]]iterator& operator--() requires [[redoc("`:c>")]]bidirectional_range<[[redoc("*>")]]Base>;
    constexpr [[redoc("*>")]]iterator operator--(int) requires [[redoc("`:c>")]]bidirectional_range<[[redoc("*>")]]Base>;

    constexpr [[redoc("*>")]]iterator& operator+=(difference_type x)
      requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
    constexpr [[redoc("*>")]]iterator& operator-=(difference_type x)
      requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;

    constexpr auto operator[](difference_type n) const
      requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;

    friend constexpr bool operator==(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y);
    friend constexpr bool operator<(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
      requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
    friend constexpr bool operator>(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
      requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
    friend constexpr bool operator<=(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
      requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
    friend constexpr bool operator>=(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
      requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
    friend constexpr auto operator<=>(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
      requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base> &&
               [[redoc("`:c>")]]three_way_comparable<iterator_t<[[redoc("*>")]]Base>>;

    friend constexpr [[redoc("*>")]]iterator operator+(const [[redoc("*>")]]iterator& i, difference_type n)
      requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
    friend constexpr [[redoc("*>")]]iterator operator+(difference_type n, const [[redoc("*>")]]iterator& i)
      requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
    friend constexpr [[redoc("*>")]]iterator operator-(const [[redoc("*>")]]iterator& i, difference_type n)
      requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
    friend constexpr difference_type operator-(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
      requires [[redoc("`:c>")]]sized_sentinel_for<iterator_t<[[redoc("*>")]]Base>, iterator_t<[[redoc("*>")]]Base>>;

    friend constexpr auto iter_move(const [[redoc("*>")]]iterator& i) noexcept([[redoc("[=seebelow]")]]);
    friend constexpr void iter_swap(const [[redoc("*>")]]iterator& l, const [[redoc("*>")]]iterator& r) noexcept([[redoc("[=seebelow]")]])
      requires [[redoc("`:c>")]]indirectly_swappable<iterator_t<[[redoc("*>")]]Base>>;
  };
}
[codeblock:end]

[para]
[:en] [`iterator::iterator_concept] is defined as follows:
[:zh_CN] [`iterator::iterator_concept] 的定义如下：

[list]
[item]
[:en] If [*Base] models [`:c random_access_range], then [`iterator_concept]
denotes [`random_access_iterator_tag].
[:zh_CN] 若 [*Base] 构成 [`:c random_access_range]，则 [`iterator_concept] 代表
[`random_access_iterator_tag]。

[item]
[:en] Otherwise, if [*Base] models [`:c bidirectional_range], then
[`iterator_concept] denotes [`bidirectional_iterator_tag].
[:zh_CN] 否则，若 [*Base] 构成 [`:c bidirectional_range]，则 [`iterator_concept]
代表 [`bidirectional_iterator_tag]。

[item]
[:en] Otherwise, [`iterator_concept] denotes [`forward_iterator_tag].
[:zh_CN] 否则，[`iterator_concept] 代表 [`forward_iterator_tag]。
[list:end]

[para]
[:en] If the invocation of any non-const member function of [*iterator]
exits via an exception, the [*iterator] acquires a singular value.
[:zh_CN] 如果有人任何 [*iterator] 的非 [`const] 成员函数的调用以异常退出，则
[*iterator] 获得一个孤立值。

[codeblock:declaration]
constexpr [[redoc("*>")]]iterator(iterator_t<[[redoc("*>")]]Base> first, sentinel_t<[[redoc("*>")]]Base> last);
[codeblock:end]

[div:description]
[para:ensures]
[:en] [`[*current_]`[0`] == first] is [`true], and for every integer
[$1 \leq i < [`N]],
[`[*current_]`[[$i]`] == ranges::next([`current_]`[[$i]-1`], 1, last)] is [`true].
[:zh_CN] [`[*current_]`[0`] == first] 为 [`true]，且对于每个整数 [$1 \leq i < [`N]]，
[`[*current_]`[[$i]`] == ranges::next([`current_]`[[$i]-1`], 1, last)] 为 [`true]。
[div:end]

[codeblock:declaration]
constexpr [[redoc("*>")]]iterator([[redoc("*>")]]as-sentinel, iterator_t<[[redoc("*>")]]Base> first, iterator_t<[[redoc("*>")]]Base> last);
[codeblock:end]

[div:description]
[para:ensures]
[:en] If [*Base] does not model [`:c bidirectional_range], each element of
[*current_] is equal to [*last].
[:zh_CN] 当 [*Base] 不构成 [`:c bidirectional_range] 时，[*current_] 的每个元素
均等于 [*last]。

[:en] Otherwise, [`[*current_]`[N-1`] == last] is [`true], and for every integer
[$0 \leq i < ([`N] - 1)],
[`[*current_]`[[$i]`] == ranges::prev([*current_]`[[$i]+1`], 1, first)] is [`true].
[:zh_CN] 否则，[`[*current_]`[N-1`] == last] 为 [`true]，且对于每个整数
[$0 \leq i < ([`N] - 1)]，
[`[*current_]`[[$i]`] == ranges::next([`current_]`[[$i]-1`], 1, first)] 为 [`true]。
[div:end]

[codeblock:declaration]
constexpr [[redoc("*>")]]iterator([[redoc("*>")]]iterator<!Const> i)
  requires Const && [[redoc("`:c>")]]convertible_to<iterator_t<V>, iterator_t<[[redoc("*>")]]Base>>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes each element of [*current_] with the corresponding element of
[`i.[*current_]] as an xvalue.
[:zh_CN] 以 [`i.[*current_]] 的各元素作为临限值初始化 [*current_] 的各对应元素。
[div:end]

[codeblock:declaration]
constexpr auto operator*() const;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return [[redoc("*>")]]tuple-transform([](auto& i) -> decltype(auto) { return *i; }, [[redoc("*>")]]current_);
[codeblock:end]
[div:end]

[codeblock:declaration]
constexpr [[redoc("*>")]]iterator& operator++();
[codeblock:end]

[div:description]
[para:expects]
[:en] [`[*current_].back()] is incrementable.
[:zh_CN] [`[*current_].back()] 可增量。

[para:ensures]
[:en] Each element of [*current_] is equal to [`ranges::next(i)], where [`i] is
the value of that element before the call.
[:zh_CN] [*current_] 的各个元素等于 [`ranges::next(i)]，其中 [`i] 为调用之前该
元素的值。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[codeblock:declaration]
constexpr [[redoc("*>")]]iterator operator++(int);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
auto tmp = *this;
++*this;
return tmp;
[codeblock:end]
[div:end]

[codeblock:declaration]
constexpr [[redoc("*>")]]iterator& operator--() requires [[redoc("`:c>")]]bidirectional_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:expects]
[:en] [`[*current_].front()] is decrementable.
[:zh_CN] [`[*current_].front()] 可减量。

[para:ensures]
[:en] Each element of [*current_] is equal to [`ranges::prev(i)], where [`i] is
the value of that element before the call.
[:zh_CN] [*current_] 的各个元素等于 [`ranges::prev(i)]，其中 [`i] 为调用之前该
元素的值。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[codeblock:declaration]
constexpr [[redoc("*>")]]iterator operator--(int) requires [[redoc("`:c>")]]bidirectional_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
auto tmp = *this;
--*this;
return tmp;
[codeblock:end]
[div:end]

[codeblock:declaration]
constexpr [[redoc("*>")]]iterator& operator+=(difference_type x)
  requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:expects]
[:en] [`[*current_].back() + x] has well-defined behavior.
[:zh_CN] [`[*current_].back() + x] 有恰当定义的行为。

[para:ensures]
[:en] Each element of [*current_] is equal to [`i + x], where [`i] is the value
of that element before the call.
[:zh_CN] [*current_] 的各个元素等于 [`i + x]，其中 [`i] 为调用之前该元素的值。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[codeblock:declaration]
constexpr [[redoc("*>")]]iterator& operator-=(difference_type x)
  requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:expects]
[:en] [`[*current_].front() - x] has well-defined behavior.
[:zh_CN] [`[*current_].front() - x] 有恰当定义的行为。

[para:ensures]
[:en] Each element of [*current_] is equal to [`i - x], where [`i] is the value
of that element before the call.
[:zh_CN] [*current_] 的各个元素等于 [`i - x]，其中 [`i] 为调用之前该元素的值。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[codeblock:declaration]
constexpr auto operator[](difference_type n) const
  requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return [[redoc("*>")]]tuple-transform([&](auto& i) -> decltype(auto) { return i[n]; }, [[redoc("*>")]]current_);
[codeblock:end]
[div:end]

[codeblock:declaration]
friend constexpr bool operator==(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y);
[codeblock:end]

[div:description]
[para:returns]
[:en] [`x.[*current_].back() == y.[*current_].back()].
[:zh_CN] [`x.[*current_].back() == y.[*current_].back()]。
[div:end]

[codeblock:declaration]
friend constexpr bool operator<(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
  requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`x.[*current_].back() < y.[*current_].back()].
[:zh_CN] [`x.[*current_].back() < y.[*current_].back()]。
[div:end]

[codeblock:declaration]
friend constexpr bool operator>(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
  requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return y < x;]
[:zh_CN] 等价于：[`return y < x;]
[div:end]

[codeblock:declaration]
friend constexpr bool operator<=(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
  requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return !(y < x);]
[:zh_CN] 等价于：[`return !(y < x);]
[div:end]

[codeblock:declaration]
friend constexpr bool operator>=(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
  requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return !(x < y);]
[:zh_CN] 等价于：[`return !(x < y);]
[div:end]

[codeblock:declaration]
friend constexpr auto operator<=>(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
  requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base> &&
           [[redoc("`:c>")]]three_way_comparable<iterator_t<[[redoc("*>")]]Base>>;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`x.[*current_].back() <=> y.[*current_].back()].
[:zh_CN] [`x.[*current_].back() <=> y.[*current_].back()]。
[div:end]

[codeblock:declaration]
friend constexpr [[redoc("*>")]]iterator operator+(const [[redoc("*>")]]iterator& i, difference_type n)
  requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
friend constexpr [[redoc("*>")]]iterator operator+(difference_type n, const [[redoc("*>")]]iterator& i)
  requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
auto r = i;
r += n;
return r;
[codeblock:end]
[div:end]

[codeblock:declaration]
friend constexpr [[redoc("*>")]]iterator operator-(const [[redoc("*>")]]iterator& i, difference_type n)
  requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
auto r = i;
r -= n;
return r;
[codeblock:end]
[div:end]

[codeblock:declaration]
friend constexpr difference_type operator-(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
  requires [[redoc("`:c>")]]sized_sentinel_for<iterator_t<[[redoc("*>")]]Base>, iterator_t<[[redoc("*>")]]Base>>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return x.[*current_].back() - y.[*current_].back();]
[:zh_CN] 等价于：[`return x.[*current_].back() - y.[*current_].back();]
[div:end]

[codeblock:declaration]
friend constexpr auto iter_move(const [[redoc("*>")]]iterator& i) noexcept([[redoc("[=seebelow]")]]);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return [*tuple-transform](ranges::iter_move, i.[*current_]);]
[:zh_CN] 等价于：[`return [*tuple-transform](ranges::iter_move, i.[*current_]);]

[para:remarks]
[:en] The exception specification is equivalent to:
[:zh_CN] 其异常说明等价于：
[codeblock]
noexcept(ranges::iter_move(declval<const iterator_t<[[redoc("*>")]]Base>&>())) &&
is_nothrow_move_constructible_v<range_rvalue_reference_t<[[redoc("*>")]]Base>>
[codeblock:end]
[div:end]

[codeblock:declaration]
friend constexpr void iter_swap(const [[redoc("*>")]]iterator& l, const [[redoc("*>")]]iterator& r) noexcept([[redoc("[=seebelow]")]])
  requires [[redoc("`:c>")]]indirectly_swappable<iterator_t<[[redoc("*>")]]Base>>;
[codeblock:end]

[div:description]
[para:expects]
[:en] None of the iterators in [`l.[*current_]] is equal to an iterator in
[`r.[*current_]].
[:zh_CN] [`l.[*current_]] 中没有迭代器等于任何 [`r.[*current_]] 中的迭代器。

[para:effects]
[:en] For every integer [$0 \leq i < [`N]], performs
[`ranges::iter_swap(l.[*current_]`[[$i]`], r.[*current_]`[[$i]`])].
[:zh_CN] 对于每个整数 [$0 \leq i < [`N]]，实施
[`ranges::iter_swap(l.[*current_]`[[$i]`], r.[*current_]`[[$i]`])]。

[para:remarks]
[:en] The exception specification is equivalent to:
[:zh_CN] 其异常说明等价于：
[codeblock]
noexcept(ranges::iter_swap(declval<iterator_t<[[redoc("*>")]]Base>>(), declval<iterator_t<[[redoc("*>")]]Base>>()))
[codeblock:end]
[div:end]
