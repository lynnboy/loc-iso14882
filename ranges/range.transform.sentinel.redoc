[section#range.transform.sentinel
    [:en] Class template [`transform_view::[*sentinel]]
    [:zh_CN] 类模板 [`transform_view::[*sentinel]]
]

[%@lib transform_view::sentinel]
[codeblock:synopsis]
namespace std::ranges {
  template<[[redoc("`:c>")]]input_range V, [[redoc("`:c>")]]copy_constructible F>
    requires view<V> && is_object_v<F> &&
             regular_invocable<F&, range_reference_t<V>> &&
             [[redoc("*:c>")]]inovke_result_t<F&, range_reference_t<V>>>
  template<bool Const>
  class transform_view<V, F>::[[redoc("*>")]]sentinel {
  private:
    using [[redoc("*>")]]Parent =                                      // [=expos]
      conditional_t<Const, const transform_view, transform_view>;
    using [[redoc("*>")]]Base = conditional_t<Const, const V, V>;      // [=expos]
    sentinel_t<[[redoc("*>")]]Base> [[redoc("*>")]]end_ = sentinel_t<[[redoc("*>")]]Base>();         // [=expos]
  public:
    [[redoc("*>")]]sentinel() = default;
    constexpr explicit [[redoc("*>")]]sentinel(sentinel_t<[[redoc("*>")]]Base> end);
    constexpr [[redoc("*>")]]sentinel([[redoc("*>")]]sentinel<!Const> i)
      requires Const && [[redoc("`:c>")]]convertible_to<sentinel_t<V>, sentinel_t<[[redoc("*>")]]Base>>;

    constexpr sentinel_t<[[redoc("*>")]]Base> base() const;

    friend constexpr bool operator==(const [[redoc("*>")]]iterator<Const>& x, const [[redoc("*>")]]sentinel& y);

    friend constexpr range_difference_t<[[redoc("*>")]]Base>
      operator-(const [[redoc("*>")]]iterator<Const>& x, const [[redoc("*>")]]sentinel& y)
        requires [[redoc("`:c>")]]sized_sentinel_for<sentinel_t<[[redoc("*>")]]Base>, iterator_t<[[redoc("*>")]]Base>>;
    friend constexpr range_difference_t<[[redoc("*>")]]Base>
      operator-(const [[redoc("*>")]]sentinel& y, const [[redoc("*>")]]iterator<Const>& x)
        requires [[redoc("`:c>")]]sized_sentinel_for<sentinel_t<[[redoc("*>")]]Base>, iterator_t<[[redoc("*>")]]Base>>;
  };
}
[codeblock:end]

[%@lib@ctor transform_view::sentinel]
[codeblock:declaration]
constexpr explicit [[redoc("*>")]]sentinel(sentinel_t<[[redoc("*>")]]Base> end);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*end_] with [`end].
[:zh_CN] 以 [`end] 初始化 [*end_]。
[div:end]

[%@lib@ctor transform_view::sentinel]
[codeblock:declaration]
constexpr [[redoc("*>")]]sentinel([[redoc("*>")]]sentinel<!Const> i)
  requires Const && [[redoc("`:c>")]]convertible_to<sentinel_t<V>, sentinel_t<[[redoc("*>")]]Base>>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*end_] with [`std::move(i.end_)].
[:zh_CN] 以 [`std::move(i.end_)] 初始化 [*end_]。
[div:end]

[%@lib@member base[!transform_view::sentinel]]
[codeblock:declaration]
constexpr sentinel_t<[[redoc("*>")]]Base> base() const;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return [*end_];]
[:zh_CN] 等价于：[`return [*end_];]
[div:end]

[%@lib@member operator==[!transform_view::sentinel]]
[codeblock:declaration]
friend constexpr bool operator==(const [[redoc("*>")]]iterator<Const>& x, const [[redoc("*>")]]sentinel& y);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return x.[*current_] == y.[*end_];]
[:zh_CN] 等价于：[`return x.[*current_] == y.[*end_];]
[div:end]

[%@lib@member operator-[!transform_view::sentinel]]
[codeblock:declaration]
friend constexpr range_difference_t<[[redoc("*>")]]Base>
  operator-(const [[redoc("*>")]]iterator<Const>& x, const [[redoc("*>")]]sentinel& y)
    requires [[redoc("`:c>")]]sized_sentinel_for<sentinel_t<[[redoc("*>")]]Base>, iterator_t<[[redoc("*>")]]Base>>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return x.[*current_] - y.[*end_];]
[:zh_CN] 等价于：[`return x.[*current_] - y.[*end_];]
[div:end]

[%@lib@member operator-[!transform_view::sentinel]]
[codeblock:declaration]
friend constexpr range_difference_t<[[redoc("*>")]]Base>
  operator-(const [[redoc("*>")]]sentinel& y, const [[redoc("*>")]]iterator<Const>& x)
    requires [[redoc("`:c>")]]sized_sentinel_for<sentinel_t<[[redoc("*>")]]Base>, iterator_t<[[redoc("*>")]]Base>>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return y.[*end_] - x.[*current_];]
[:zh_CN] 等价于：[`return y.[*end_] - x.[*current_];]
[div:end]
