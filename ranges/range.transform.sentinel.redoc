[section#range.transform.sentinel
    [:en] Class template [`transform_view::sentinel]
    [:zh_CN] 类模板 [`transform_view::sentinel]
]

[%@lib transform_view::sentinel]
[codeblock:synopsis]
namespace std::ranges {
  template<class V, class F>
  template<bool Const>
  class transform_view<V, F>::sentinel {
  private:
    using Parent =                                      // [=expos]
      conditional_t<Const, const transform_view, transform_view>;
    using Base = conditional_t<Const, const V, V>;      // [=expos]
    sentinel_t<Base> end_ = sentinel_t<Base>();         // [=expos]
  public:
    sentinel() = default;
    constexpr explicit sentinel(sentinel_t<Base> end);
    constexpr sentinel(sentinel<!Const> i)
      requires Const && convertible_to<sentinel_t<V>, sentinel_t<Base>>;

    constexpr sentinel_t<Base> base() const;

    friend constexpr bool operator==(const iterator<Const>& x, const sentinel& y);

    friend constexpr range_difference_t<Base>
      operator-(const iterator<Const>& x, const sentinel& y)
        requires sized_sentinel_for<sentinel_t<Base>, iterator_t<Base>>;
    friend constexpr range_difference_t<Base>
      operator-(const sentinel& y, const iterator<Const>& x)
        requires sized_sentinel_for<sentinel_t<Base>, iterator_t<Base>>;
  };
}
[codeblock:end]

[%@lib@ctor transform_view::sentinel]
[codeblock:declaration]
constexpr explicit sentinel(sentinel_t<Base> end);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [`end_] with [`end].
[:zh_CN] 以 [`end] 初始化 [`end_]。
[div:end]

[%@lib@ctor transform_view::sentinel]
[codeblock:declaration]
constexpr sentinel(sentinel<!Const> i)
  requires Const && convertible_to<sentinel_t<V>, sentinel_t<Base>>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [`end_] with [`std::move(i.end_)].
[:zh_CN] 以 [`std::move(i.end_)] 初始化 [`end_]。
[div:end]

[%@lib@member base[!transform_view::sentinel]]
[codeblock:declaration]
constexpr sentinel_t<Base> base() const;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return end_;]
[:zh_CN] 等价于：[`return end_;]
[div:end]

[%@lib@member operator==[!transform_view::sentinel]]
[codeblock:declaration]
friend constexpr bool operator==(const iterator<Const>& x, const sentinel& y);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return x.current_ == y.end_;]
[:zh_CN] 等价于：[`return x.current_ == y.end_;]
[div:end]

[%@lib@member operator-[!transform_view::sentinel]]
[codeblock:declaration]
friend constexpr range_difference_t<Base>
  operator-(const iterator<Const>& x, const sentinel& y)
    requires sized_sentinel_for<sentinel_t<Base>, iterator_t<Base>>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return x.current_ - y.end_;]
[:zh_CN] 等价于：[`return x.current_ - y.end_;]
[div:end]

[%@lib@member operator-[!transform_view::sentinel]]
[codeblock:declaration]
friend constexpr range_difference_t<Base>
  operator-(const sentinel& y, const iterator<Const>& x)
    requires sized_sentinel_for<sentinel_t<Base>, iterator_t<Base>>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return x.end_ - y.current_;]
[:zh_CN] 等价于：[`return x.end_ - y.current_;]
[div:end]
