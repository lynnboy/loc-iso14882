[section#range.ref.view
    [:en] Class template [`ref_view]
    [:zh_CN] 类模板 [`ref_view]
]

[para]
[:en] [`ref_view] is a view of the elements of some other range.
[:zh_CN] [`ref_view] 是在某个其他范围中的元素上的一个视图。

[%@lib ref_view]
[codeblock:synopsis]
namespace std::ranges {
  template<[[redoc("`:c>")]]range R>
    requires is_object_v<R>
  class ref_view : public view_interface<ref_view<R>> {
  private:
    R* [[redoc("*>")]]r_;                      // [=expos]

  public:
    template<[[redoc("*:c>")]]different-from<ref_view> T>
      requires [[redoc("[=seebelow]")]]
    constexpr ref_view(T&& t);

    constexpr R& base() const { return *[[redoc("*>")]]r_; }

    constexpr iterator_t<R> begin() const { return ranges::begin(*[[redoc("*>")]]r_); }
    constexpr sentinel_t<R> end() const { return ranges::end(*[[redoc("*>")]]r_); }

    constexpr bool empty() const
      requires requires { ranges::empty(*[[redoc("*>")]]r_); }
    { return ranges::empty(*[[redoc("*>")]]r_); }

    constexpr auto size() const requires [[redoc("`:c>")]]sized_range<R>
    { return ranges::size(*[[redoc("*>")]]r_); }

    constexpr auto reserve_hint() const requires [[redoc("`:c>")]]approximately_sized_range<R>
    { return ranges::reserve_hint(*[[redoc("*>")]]r_); }

    constexpr auto data() const requires [[redoc("`:c>")]]contiguous_range<R>
    { return ranges::data(*[[redoc("*>")]]r_); }
  };

  template<class R>
    ref_view(R&) -> ref_view<R>;
}
[codeblock:end]

[%@lib@ctor ref_view]
[codeblock:declaration]
template<[[redoc("*:c>")]]different-from<ref_view> T>
  requires [[redoc("[=seebelow]")]]
constexpr ref_view(T&& t);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*r_] with [`addressof(static_cast<R&>(std::forward<T>(t)))].
[:zh_CN] 以 [`addressof(static_cast<R&>(std::forward<T>(t)))] 初始化 [*r_]。

[para:remarks]
[:en] Let [`[^FUN]] denote the exposition-only functions
[:zh_CN] 令 [`[^FUN]] 代表仅用于阐释的函数
[codeblock]
void [[redoc("^>")]]FUN(R&);
void [[redoc("^>")]]FUN(R&&) = delete;
[codeblock:end]

[:en] The expression in the [~requires-clause] is equivalent to:
[:zh_CN] [~requires-子句]中的表达式等价于：
[codeblock]
[[redoc("`:c>")]]convertible_to<T, R&> && requires { [[redoc("^>")]]FUN(declval<T>()); }
[codeblock:end]
[div:end]
