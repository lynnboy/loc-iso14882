[section#range.ref.view
    [:en] Class template [`ref_view]
    [:zh_CN] 类模板 [`ref_view]
]

[para]
[:en]
[`ref_view] is a [`view] of the elements of some other [`range].
[:zh_CN]
[`ref_view] 是对某个其他 [`range] 中的元素的一个 [`view]。

[codeblock:synopsis [!:var not-same-as]]
namespace std::ranges {
  template<range R>
    requires is_object_v<R>
  class ref_view : public view_interface<ref_view<R>> {
  private:
    R* r_ = nullptr;            // [=Expos]
  public:
    constexpr ref_view() noexcept = default;

    template<[*not-same-as]<ref_view> T>
      requires [=SeeBelow]
    constexpr ref_view(T&& t);

    constexpr R& base() const { return *r_; }

    constexpr iterator_t<R> begin() const { return ranges::begin(*r_); }
    constexpr sentinel_t<R> end() const { return ranges::end(*r_); }

    constexpr bool empty() const
      requires requires { ranges::empty(*r_); }
    { return ranges::empty(*r_); }

    constexpr auto size() const requires sized_range<R>
    { return ranges::size(*r_); }

    constexpr auto data() const requires contiguous_range<R>
    { return ranges::data(*r_); }

    friend constexpr iterator_t<R> begin(ref_view r)
    { return r.begin(); }

    friend constexpr sentinel_t<R> end(ref_view r)
    { return r.end(); }
  };
}
[codeblock:end]

[%@library ref_view]
[codeblock:declaration]
template<[*not-same-as]<ref_view> T>
  requires [=SeeBelow]
constexpr ref_view(T&& t);
[codeblock:end]

[begin:description]
[para:remarks]
[:en] Let [`[*FUN]] denote the exposition-only functions
[:zh_CN] 令 [`[*FUN]] 代表仅用于阐释的函数
[codeblock:notation [!:var FUN]]
void [*FUN](R&);
void [*FUN](R&&) = delete;
[codeblock:end]

[:en] The expression in the [~requires-clause] is equivalent to
[:zh_CN] [~requires-子句]中的表达式等价于：
[codeblock:notation [!:var FUN]]
convertible_to<T, R&> && requires { [*FUN](declval<T>()); }
[codeblock:end]

[para:effects]
[:en] Initializes [`r_] with [`addressof(static_cast<R&>(std::forward<T>(t)))].
[:zh_CN] 以 [`addressof(static_cast<R&>(std::forward<T>(t)))] 初始化 [`r_]。
[end:description]
