[section#range.reverse.view
    [:en] Class template [`reverse_view]
    [:zh_CN] 类模板 [`reverse_view]
]

[%@lib reverse_view]
[%@lib@member base[!reverse_view]]
[%@lib@member size[!reverse_view]]
[codeblock:synopsis]
namespace std::ranges {
  template<[[redoc("`:c>")]]view V>
    requires [[redoc("`:c>")]]bidirectional_range<V>
  class reverse_view : public view_interface<reverse_view<V>> {
  private:
    V [[redoc("*>")]]base_ = V();  // [=expos]

  public:
    reverse_view() requires [[redoc("`:c>")]]default_initializable<V> = default;

    constexpr explicit reverse_view(V r);

    constexpr V base() const & requires [[redoc("`:c>")]]copy_constructible<V> { return [[redoc("*>")]]base_; }
    constexpr V base() && { return std::move([[redoc("*>")]]base_); }

    constexpr reverse_iterator<iterator_t<V>> begin();
    constexpr reverse_iterator<iterator_t<V>> begin() requires [[redoc("`:c>")]]common_range<V>;
    constexpr auto begin() const requires [[redoc("`:c>")]]common_range<const V>;

    constexpr reverse_iterator<iterator_t<V>> end();
    constexpr auto end() const requires [[redoc("`:c>")]]common_range<const V>;

    constexpr auto size() requires [[redoc("`:c>")]]sized_range<V> {
      return ranges::size([[redoc("*>")]]base_);
    }

    constexpr auto size() const requires [[redoc("`:c>")]]sized_range<const V> {
      return ranges::size([[redoc("*>")]]base_);
    }
  };

  template<class R>
    reverse_view(R&&) -> reverse_view<views::all_t<R>>;
}
[codeblock:end]

[%@lib@ctor reverse_view]
[codeblock:declaration]
constexpr explicit reverse_view(V base);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*base_] with [`std::move(base)].
[:zh_CN] 以 [`std::move(base)] 初始化 [*base_]。
[div:end]

[%@lib@member begin[!reverse_view]]
[codeblock:declaration]
constexpr reverse_iterator<iterator_t<V>> begin();
[codeblock:end]

[div:description]
[para:returns]
[codeblock]
make_reverse_iterator(ranges::next(ranges::begin([[redoc("*>")]]base_), ranges::end([[redoc("*>")]]base_)))
[codeblock:end]

[para:remarks]
[:en] In order to provide the amortized constant time complexity required by
the [`:c range] concept, this function caches the result within the
[`reverse_view] for use on subsequent calls.
[:zh_CN] 为了提供由 [`:c range] 概念所规定的均摊常量时间复杂度，这个函数在
[`reverse_view] 中对其结果进行了缓存以便用在随后的调用中。
[div:end]

[%@lib@member begin[!reverse_view]]
[codeblock:declaration]
constexpr reverse_iterator<iterator_t<V>> begin() requires [[redoc("`:c>")]]common_range<V>;
constexpr auto begin() const requires [[redoc("`:c>")]]common_range<const V>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return make_reverse_iterator(ranges::end([*base_]));]
[:zh_CN] 等价于：[`return make_reverse_iterator(ranges::end([*base_]));]
[div:end]

[%@lib@member end[!reverse_view]]
[codeblock:declaration]
constexpr reverse_iterator<iterator_t<V>> end();
constexpr auto end() const requires [[redoc("`:c>")]]common_range<const V>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return make_reverse_iterator(ranges::begin([*base_]));]
[:zh_CN] 等价于：[`return make_reverse_iterator(ranges::begin([*base_]));]
[div:end]
