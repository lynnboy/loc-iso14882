[section#range.reverse.view
    [:en] Class template [`reverse_view]
    [:zh_CN] 类模板 [`reverse_view]
]

[%@lib reverse_view]
[codeblock:synopsis]
namespace std::ranges {
  template<view V>
    requires bidirectional_range<V>
  class reverse_view : public view_interface<reverse_view<V>> {
  private:
    V base_ = V();  // [=expos]
  public:
    reverse_view() = default;

    constexpr explicit reverse_view(V r);

    template<viewable_range R>
      requires bidirectional_range<R> && constructible_from<V, all_view<R>>
    constexpr explicit reverse_view(R&& r);

    constexpr V base() const;

    constexpr reverse_iterator<iterator_t<V>> begin();
    constexpr reverse_iterator<iterator_t<V>> begin() requires common_range<V>;
    constexpr reverse_iterator<iterator_t<const V>> begin() const
      requires common_range<const V>;

    constexpr reverse_iterator<iterator_t<V>> end();
    constexpr reverse_iterator<iterator_t<const V>> end() const
      requires common_range<const V>;

    constexpr auto size() requires sized_range<V> {
      return ranges::size(base_);
    }
    constexpr auto size() const requires sized_range<const V> {
      return ranges::size(base_);
    }
  };

  template<class R>
    reverse_view(R&&) -> reverse_view<all_view<R>>;
}
[codeblock:end]

[%@lib@ctor reverse_view]
[codeblock:declaration]
constexpr explicit reverse_view(V base);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [`base_] with [`std::move(base)].
[:zh_CN] 以 [`std::move(base)] 初始化 [`base_]。
[div:end]

[%@lib@ctor reverse_view]
[codeblock:declaration]
template<viewable_range R>
  requires bidirectional_range<R> && constructible_from<V, all_view<R>>
constexpr explicit reverse_view(R&& r);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [`base_] with [`views::all(std::forward<R>(r))].
[:zh_CN] 以 [`views::all(std::forward<R>(r))] 初始化 [`base_]。
[div:end]

[%@lib@member base[!reverse_view]]
[codeblock:declaration]
constexpr V base() const;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return base_;]
[:zh_CN] 等价于：[`return base_;]
[div:end]

[%@lib@member begin[!reverse_view]]
[codeblock:declaration]
constexpr reverse_iterator<iterator_t<V>> begin();
[codeblock:end]

[div:description]
[para:returns]
[codeblock]
make_reverse_iterator(ranges::next(ranges::begin(base_), ranges::end(base_)))
[codeblock:end]

[para:remarks]
[:en] In order to provide the amortized constant time complexity required by
the [`:c range] concept, this function caches the result within the
[`reverse_view] for use on subsequent calls.
[:zh_CN] 为了提供由 [`:c range] 概念所规定的均摊常量时间复杂度，这个函数在
[`reverse_view] 中对其结果进行了缓存以便用在随后的调用中。
[div:end]

[%@lib@member begin[!reverse_view]]
[codeblock:declaration]
constexpr reverse_iterator<iterator_t<V>> begin() requires common_range<V>;
constexpr reverse_iterator<iterator_t<const V>> begin() const
  requires common_range<const V>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return make_reverse_iterator(ranges::end(base_));]
[:zh_CN] 等价于：[`return make_reverse_iterator(ranges::end(base_));]
[div:end]

[%@lib@member end[!reverse_view]]
[codeblock:declaration]
constexpr reverse_iterator<iterator_t<V>> end();
constexpr reverse_iterator<iterator_t<const V>> end() const
  requires common_range<const V>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return make_reverse_iterator(ranges::begin(base_));]
[:zh_CN] 等价于：[`return make_reverse_iterator(ranges::begin(base_));]
[div:end]
