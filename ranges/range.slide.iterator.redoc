[section#range.slide.iterator
    [:en] Class template [`slide_view::[*iterator]]
    [:zh_CN] 类模板 [`slide_view::[*iterator]]
]

[%@lib slide_view::[*iterator]]
[codeblock:synopsis]
namespace std::ranges {
  template<[[redoc("`:c>")]]forward_range V>
    requires [[redoc("`:c>")]]view<V>
  template<bool Const>
  class slide_view<V>::[[redoc("*>")]]iterator {
    using [[redoc("*>")]]Base = [[redoc("*>")]]maybe-const<Const, V>;                 // [=expos]
    iterator_t<[[redoc("*>")]]Base> [[redoc("*>")]]current_   = iterator_t<[[redoc("*>")]]Base>();   // [=expos]
    iterator_t<[[redoc("*>")]]Base> [[redoc("*>")]]last_ele_  = iterator_t<[[redoc("*>")]]Base>();   // [=expos]
                                               // [:en@~] present only if [*Base] models [`[*:c slide-caches-first]] \
                                               [:zh_CN@~] 仅当 [*Base] 构成 [`[*:c slide-caches-first]] 时提供
    range_difference_t<[[redoc("*>")]]Base> [[redoc("*>")]]n_ = 0;                    // [=expos]

    constexpr [[redoc("*>")]]iterator(iterator_t<[[redoc("*>")]]Base> current, range_difference_t<[[redoc("*>")]]Base> n) // [=expos]
      requires (![[redoc("*:c>")]]slide-caches-first<[[redoc("*>")]]Base>);

    constexpr [[redoc("*>")]]iterator(iterator_t<[[redoc("*>")]]Base> current, iterator_t<[[redoc("*>")]]Base> last_ele,  // [=expos]
                       range_difference_t<[[redoc("*>")]]Base> n)
      requires [[redoc("*:c>")]]slide-caches-first<[[redoc("*>")]]Base>;

  public:
    using iterator_category = input_iterator_tag;
    using iterator_concept = [[redoc("[=seebelow]")]];
    using value_type = decltype(views::counted([[redoc("*>")]]current_, [[redoc("*>")]]n_));
    using difference_type = range_difference_t<[[redoc("*>")]]Base>;

    [[redoc("*>")]]iterator() = default;
    constexpr [[redoc("*>")]]iterator([[redoc("*>")]]iterator<!Const> i)
      requires Const && [[redoc("`:c>")]]convertible_to<iterator_t<V>, iterator_t<[[redoc("*>")]]Base>>;

    constexpr auto operator*() const;
    constexpr [[redoc("*>")]]iterator& operator++();
    constexpr [[redoc("*>")]]iterator operator++(int);

    constexpr [[redoc("*>")]]iterator& operator--() requires [[redoc("`:c>")]]bidirectional_range<[[redoc("*>")]]Base>;
    constexpr [[redoc("*>")]]iterator operator--(int) requires [[redoc("`:c>")]]bidirectional_range<[[redoc("*>")]]Base>;

    constexpr [[redoc("*>")]]iterator& operator+=(difference_type x)
      requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
    constexpr [[redoc("*>")]]iterator& operator-=(difference_type x)
      requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;

    constexpr auto operator[](difference_type n) const
      requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;

    friend constexpr bool operator==(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y);

    friend constexpr bool operator<(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
      requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
    friend constexpr bool operator>(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
      requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
    friend constexpr bool operator<=(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
      requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
    friend constexpr bool operator>=(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
      requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
    friend constexpr auto operator<=>(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
      requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base> &&
               [[redoc("`:c>")]]three_way_comparable<iterator_t<[[redoc("*>")]]Base>>;

    friend constexpr [[redoc("*>")]]iterator operator+(const [[redoc("*>")]]iterator& i, difference_type n)
      requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
    friend constexpr [[redoc("*>")]]iterator operator+(difference_type n, const [[redoc("*>")]]iterator& i)
      requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
    friend constexpr [[redoc("*>")]]iterator operator-(const [[redoc("*>")]]iterator& i, difference_type n)
      requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
    friend constexpr difference_type operator-(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
      requires [[redoc("`:c>")]]sized_sentinel_for<iterator_t<[[redoc("*>")]]Base>, iterator_t<[[redoc("*>")]]Base>>;
  };
}
[codeblock:end]

[para]
[:en] [`[*iterator]::iterator_concept] is defined as follows:
[:zh_CN] [`[*iterator]::iterator_concept] 的定义如下：

[list]
[item]
[:en] If [*Base] models [`:c random_access_range], then [`iterator_concept]
denotes [`random_access_iterator_tag].
[:zh_CN] 若 [*Base] 构成 [`:c random_access_range]，则 [`iterator_concept] 代表
[`random_access_iterator_tag]。

[item]
[:en] Otherwise, if [*Base] models [`:c bidirectional_range], then
[`iterator_concept] denotes [`bidirectional_iterator_tag].
[:zh_CN] 否则，若 [*Base] 构成 [`:c forward_range]，则 [`bidirectional_range]
代表 [`bidirectional_iterator_tag]。

[item]
[:en] Otherwise, [`iterator_concept] denotes [`forward_iterator_tag].
[:zh_CN] 否则，[`iterator_concept] 代表 [`forward_iterator_tag]。
[list:end]

[%@lib@ctor slide_view::[*iterator]]
[codeblock:declaration]
constexpr [[redoc("*>")]]iterator(iterator_t<[[redoc("*>")]]Base> current, range_difference_t<[[redoc("*>")]]Base> n)
  requires (![[redoc("*:c>")]]slide-caches-first<[[redoc("*>")]]Base>);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*current_] with [`current] and [*n_] with [`n].
[:zh_CN] 以 [`current] 初始化 [*current_] 并以 [`n] 初始化 [*n_]。
[div:end]

[%@lib@ctor slide_view::[*iterator]]
[codeblock:declaration]
constexpr [[redoc("*>")]]iterator(iterator_t<[[redoc("*>")]]Base> current, iterator_t<[[redoc("*>")]]Base> last_ele,
                   range_difference_t<[[redoc("*>")]]Base> n)
  requires (![[redoc("*:c>")]]slide-caches-first<[[redoc("*>")]]Base>);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*current_] with [`current], [*last_ele_] with [`last_ele], and [*n_] with [`n].
[:zh_CN] 以 [`current] 初始化 [*current_]，以 [`last_ele] 初始化 [*last_ele_]，并以 [`n] 初始化 [*n_]。
[div:end]

[%@lib@ctor slide_view::[*iterator]]
[codeblock:declaration]
constexpr [[redoc("*>")]]iterator([[redoc("*>")]]iterator<!Const> i)
  requires Const && [[redoc("*:c>")]]convertible_to<iterator_t<V>, iterator_t<[[redoc("*>")]]Base>>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*current_] with [`std::move(i.[*current_])] and [*n_] with [`i.[*n_]].
[:zh_CN] 以 [`std::move(i.[*current_])] 初始化 [*current_] 并以 [`i.[*n_]] 初始化 [*n_]。

[begin:note]
[:en] [`[*iterator]<true>] can only be formed when [`Base] models
[*:c slide-caches-nothing], in which case [*last_ele_] is not present.
[:zh_CN] 仅当 [`Base] 构成 [*:c slide-caches-nothing] 时才能形成
[`[*iterator]<true>]，这种情况下不提供 [*last_ele_]。
[div:end]

[%@lib@member operator*[!slide_view::[*iterator]]]
[codeblock:declaration]
constexpr auto operator*() const;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`views::counted([*current_], [*n_])].
[:zh_CN] [`views::counted([*current_], [*n_])]。
[div:end]

[%@lib@member operator++[!slide_view::[*iterator]]]
[codeblock:declaration]
constexpr [[redoc("*>")]]iterator& operator++();
[codeblock:end]

[div:description]
[para:expects]
[:en] [*current_] and [*last_ele_] (if present) are incrementable.
[:zh_CN] [*current_] 和 [*last_ele_]（如果提供）可增量。

[para:ensures]
[:en] [*current_] and [*last_ele_] (if present) are each equal to
[`ranges::next(i)], where [`i] is the value of that data member before the call.
[:zh_CN] [*current_] 和 [*last_ele_]（如果提供）各自等于 [`ranges::next(i)]，
其中 [`i] 为该数据成员在调用之前的值。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@lib@member operator++[!slide_view::[*iterator]]]
[codeblock:declaration]
constexpr [[redoc("*>")]]iterator& operator++(int);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
auto tmp = *this;
++*this;
return tmp;
[codeblock:end]
[div:end]

[%@lib@member operator--[!slide_view::[*iterator]]]
[codeblock:declaration]
constexpr [[redoc("*>")]]iterator& operator--() requires [[redoc("`:c>")]]bidirectional_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:expects]
[:en] [*current_] and [*last_ele_] (if present) are decrementable.
[:zh_CN] [*current_] 和 [*last_ele_]（如果提供）可减量。

[para:ensures]
[:en] [*current_] and [*last_ele_] (if present) are each equal to
[`ranges::prev(i)], where [`i] is the value of that data member before the call.
[:zh_CN] [*current_] 和 [*last_ele_]（如果提供）各自等于 [`ranges::prev(i)]，
其中 [`i] 为该数据成员在调用之前的值。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@lib@member operator--[!slide_view::[*iterator]]]
[codeblock:declaration]
constexpr [[redoc("*>")]]iterator operator--(int) requires [[redoc("`:c>")]]bidirectional_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
auto tmp = *this;
--*this;
return tmp;
[codeblock:end]
[div:end]

[%@lib@member operator+=[!slide_view::[*iterator]]]
[codeblock:declaration]
constexpr [[redoc("*>")]]iterator& operator+=(difference_type x)
  requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:expects]
[:en] [`[*current_] + x] and [`[*last_ele_] + x] (if [*last_ele_] is present)
have well-defined behavior.
[:zh_CN] [`[*current_] + x] 和 [`[*last_ele_] + x]（如果提供了 [*last_ele_]）
具有良定义的行为。

[para:ensures]
[:en] [*current_] and [*last_ele_] (if present) are each equal to [`i + x],
where [`i] is the value of that data member before the call.
[:zh_CN] [*current_] 和 [*last_ele_]（如果提供）各自等于 [`i + x]，其中 [`i] 为
该数据成员在调用之前的值。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@lib@member operator-=[!slide_view::[*iterator]]]
[codeblock:declaration]
constexpr [[redoc("*>")]]iterator& operator-=(difference_type x)
  requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:expects]
[:en] [`[*current_] - x] and [`[*last_ele_] - x] (if [*last_ele_] is present)
have well-defined behavior.
[:zh_CN] [`[*current_] - x] 和 [`[*last_ele_] - x]（如果提供了 [*last_ele_]）具有良定义的行为。

[para:ensures]
[:en] [*current_] and [*last_ele_] (if present) are each equal to [`i - x],
where [`i] is the value of that data member before the call.
[:zh_CN] [*current_] 和 [*last_ele_]（如果提供）各自等于 [`i - x]，其中 [`i] 为
该数据成员在调用之前的值。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@lib@member operator`[`][!slide_view::[*iterator]]]
[codeblock:declaration]
constexpr auto operator[](difference_type n) const
  requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return views::counted([*current_] + n, [*n_]);]
[:zh_CN] 等价于：[`return views::counted([*current_] + n, [*n_]);]
[div:end]

[%@lib@member operator==[!slide_view::[*iterator]]]
[codeblock:declaration]
friend constexpr bool operator==(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y);
[codeblock:end]

[div:description]
[para:returns]
[:en] If [*last_ele_] is present, [`x.[*last_ele_] == y.[*last_ele_]]; otherwise,
[`x.[*current_] == y.[*current_]].
[:zh_CN] 如果提供了 [*last_ele_]，则返回 [`x.[*last_ele_] == y.[*last_ele_]]；
否则返回 [`x.[*current_] == y.[*current_]]。
[div:end]

[%@lib@member operator<[!slide_view::[*iterator]]]
[codeblock:declaration]
friend constexpr bool operator<(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
  requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`x.[*current_] < y.[*current_]].
[:zh_CN] [`x.[*current_] < y.[*current_]]。
[div:end]

[%@lib@member operator>[!slide_view::[*iterator]]]
[codeblock:declaration]
friend constexpr bool operator>(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
  requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return y < x;]
[:zh_CN] 等价于：[`return y < x;]
[div:end]

[%@lib@member operator<=[!slide_view::[*iterator]]]
[codeblock:declaration]
friend constexpr bool operator<=(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
  requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return !(y < x);]
[:zh_CN] 等价于：[`return !(y < x);]
[div:end]

[%@lib@member operator>=[!slide_view::[*iterator]]]
[codeblock:declaration]
friend constexpr bool operator>=(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
  requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return !(x < y);]
[:zh_CN] 等价于：[`return !(x < y);]
[div:end]

[%@lib@member operator<=>[!slide_view::[*iterator]]]
[codeblock:declaration]
friend constexpr bool operator<=>(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
  requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base> &&
           [[redoc("`:c>")]]three_way_comparable<iterator_t<[[redoc("*>")]]Base>>;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`x.[*current_] <=> y.[*current_]].
[:zh_CN] [`x.[*current_] <=> y.[*current_]]。
[div:end]

[%@lib@member operator+[!slide_view::[*iterator]]]
[codeblock:declaration]
friend constexpr [[redoc("*>")]]iterator operator+(const [[redoc("*>")]]iterator& i, difference_type n)
  requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
friend constexpr [[redoc("*>")]]iterator operator+(difference_type n, const [[redoc("*>")]]iterator& i)
  requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
auto r = i;
r += n;
return r;
[codeblock:end]
[div:end]

[%@lib@member operator-[!slide_view::[*iterator]]]
[codeblock:declaration]
friend constexpr [[redoc("*>")]]iterator operator-(const [[redoc("*>")]]iterator& i, difference_type n)
  requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
auto r = i;
r -= n;
return r;
[codeblock:end]
[div:end]

[%@lib@member operator-[!slide_view::[*iterator]]]
[codeblock:declaration]
friend constexpr difference_type operator-(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
  requires [[redoc("`:c>")]]sized_sentinel_for<iterator_t<[[redoc("*>")]]Base>, iterator_t<[[redoc("*>")]]Base>>;
[codeblock:end]

[div:description]
[para:returns]
[:en] If [*last_ele_] is present, [`x.[*last_ele_] - y.[*last_ele_]]; otherwise,
[`x.[*current_] - y.[*current_]].
[:zh_CN] 如果提供了 [*last_ele_]，则返回 [`x.[*last_ele_] - y.[*last_ele_]]；
否则返回 [`x.[*current_] - y.[*current_]]。
[div:end]
