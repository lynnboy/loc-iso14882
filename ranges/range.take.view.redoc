[section#range.take.view
    [:en] Class template [`take_view]
    [:zh_CN] 类模板 [`take_view]
]

[%@lib take_view]
[%@lib@member base[!take_view]]
[%@lib@member begin[!take_view]]
[%@lib@member end[!take_view]]
[%@lib@member size[!take_view]]
[codeblock:synopsis]
namespace std::ranges {
  template<[[redoc("`:c>")]]view V>
  class take_view : public view_interface<take_view<V>> {
  private:
    V [[redoc("*>")]]base_ = V();                                      // [=expos]
    range_difference_t<V> [[redoc("*>")]]count_ = 0;                   // [=expos]

    // [:en] [#range.take.sentinel], class template [`take_view::[*sentinel]] \
    [:zh_CN] [#range.take.sentinel]，类模板 [`take_view::[*sentinel]]
    template<bool> class [[redoc("*>")]]sentinel;                      // [=expos]

  public:
    take_view() requires [[redoc("`:c>")]]default_initializable<V> = default;
    constexpr explicit take_view(V base, range_difference_t<V> count);

    constexpr V base() const & requires [[redoc("`:c>")]]copy_constructible<V> { return [[redoc("*>")]]base_; }
    constexpr V base() && { return std::move([[redoc("*>")]]base_); }

    constexpr auto begin() requires (![[redoc("*:c>")]]simple-view<V>) {
      if constexpr ([[redoc("`:c>")]]sized_range<V>) {
        if constexpr ([[redoc("`:c>")]]random_access_range<V>) {
          return ranges::begin([[redoc("*>")]]base_);
        } else {
          auto sz = range_difference_t<V>(size());
          return counted_iterator(ranges::begin([[redoc("*>")]]base_), size());
        }
      } else if constexpr ([[redoc("`:c>")]]sized_sentinel_for<sentinel_t<V>, iterator_t<V>>) {
        auto it = ranges::begin([[redoc("*>")]]base_);
        auto sz = std::min([[redoc("*>")]]count_, ranges::end([[redoc("*>")]]base_) - it);
        return counted_iterator(std::move(it), sz);
      } else {
        return counted_iterator(ranges::begin([[redoc("*>")]]base_), [[redoc("*>")]]count_);
      }
    }

    constexpr auto begin() const requires [[redoc("`:c>")]]range<const V> {
      if constexpr ([[redoc("`:c>")]]sized_range<const V>) {
        if constexpr ([[redoc("`:c>")]]random_access_range<const V>) {
          return ranges::begin([[redoc("*>")]]base_);
        } else {
          auto sz = range_difference_t<const V>(size());
          return counted_iterator(ranges::begin([[redoc("*>")]]base_), size());
        }
      } else if constexpr ([[redoc("`:c>")]]sized_sentinel_for<sentinel_t<const V>, iterator_t<const V>>) {
        auto it = ranges::begin([[redoc("*>")]]base_);
        auto sz = std::min([[redoc("*>")]]count_, ranges::end([[redoc("*>")]]base_) - it);
        return counted_iterator(std::move(it), sz);
      } else {
        return counted_iterator(ranges::begin([[redoc("*>")]]base_), [[redoc("*>")]]count_);
      }
    }

    constexpr auto end() requires (![[redoc("*:c>")]]simple-view<V>) {
      if constexpr ([[redoc("`:c>")]]sized_range<V>) {
        if constexpr ([[redoc("`:c>")]]random_access_range<V>)
          return ranges::begin([[redoc("*>")]]base_) + range_difference_t<V>(size());
        else
          return default_sentinel;
      } else if constexpr ([[redoc("`:c>")]]sized_sentinel_for<sentinel_t<V>, iterator_t<V>>) {
        return default_sentinel;
      } else {
        return [[redoc("*>")]]sentinel<false>{ranges::end([[redoc("*>")]]base_)};
      }
    }

    constexpr auto end() const requires [[redoc("`:c>")]]range<const V> {
      if constexpr ([[redoc("`:c>")]]sized_range<const V>) {
        if constexpr ([[redoc("`:c>")]]random_access_range<const V>)
          return ranges::begin([[redoc("*>")]]base_) + range_difference_t<const V>(size());
        else
          return default_sentinel;
      } else if constexpr ([[redoc("`:c>")]]sized_sentinel_for<sentinel_t<const V>, iterator_t<const V>>) {
        return default_sentinel;
      } else {
        return [[redoc("*>")]]sentinel<true>{ranges::end([[redoc("*>")]]base_)};
      }
    }

    constexpr auto size() requires [[redoc("`:c>")]]sized_range<V> {
      auto n = ranges::size([[redoc("*>")]]base_);
      return ranges::min(n, static_cast<decltype(n)>([[redoc("*>")]]count_));
    }

    constexpr auto size() const requires [[redoc("`:c>")]]sized_range<const V> {
      auto n = ranges::size([[redoc("*>")]]base_);
      return ranges::min(n, static_cast<decltype(n)>([[redoc("*>")]]count_));
    }

    constexpr auto reserve_hint() {
      if constexpr ([[redoc("`:c>")]]approximately_sized_range<V>) {
        auto n = static_cast<range_difference_t<V>>(ranges::reserve_hint([[redoc("*>")]]base_));
        return [[redoc("*>")]]to-unsigned-like(ranges::min(n, [[redoc("*>")]]count_));
      }
      return [[redoc("*>")]]to-unsigned-like([[redoc("*>")]]count_);
    }

    constexpr auto reserve_hint() const {
      if constexpr ([[redoc("`:c>")]]approximately_sized_range<const V>) {
        auto n = static_cast<range_difference_t<const V>>(ranges::reserve_hint([[redoc("*>")]]base_));
        return [[redoc("*>")]]to-unsigned-like(ranges::min(n, [[redoc("*>")]]count_));
      }
      return [[redoc("*>")]]to-unsigned-like([[redoc("*>")]]count_);
    }
  };

  template<class R>
    take_view(R&&, range_difference_t<R>)
      -> take_view<views::all_t<R>>;
}
[codeblock:end]

[%@lib@ctor take_view]
[codeblock:declaration]
constexpr explicit take_view(V base, range_difference_t<V> count);
[codeblock:end]

[div:description]
[para:expects]
[:en] [`count >= 0] is [`true].
[:zh_CN] [`count >= 0] 为 [`true]。

[para:effects]
[:en] Initializes [*base_] with [`base] and [*count_] with [`count].
[:zh_CN] 以 [`base] 初始化 [*base_] 并以 [`count] 初始化 [*count_]。
[div:end]
