[section#range.take.view
    [:en] Class template [`take_view]
    [:zh_CN] 类模板 [`take_view]
]

[codeblock:synopsis [!:var simple-view]]
namespace std::ranges {
  template<view V>
  class take_view : public view_interface<take_view<V>> {
  private:
    V base_ = V();                                      // [=expos]
    range_difference_t<V> count_ = 0;                   // [=expos]
    // [:en] [#range.take.sentinel], class template [`take_view::sentinel] \
       [:zh_CN] [#range.take.sentinel]，类模板 [`take_view::sentinel]
    template<bool> struct sentinel;                     // [=expos]
  public:
    take_view() = default;
    constexpr take_view(V base, range_difference_t<V> count);
    template<viewable_range R>
      requires constructible_from<V, all_view<R>>
    constexpr take_view(R&& r, range_difference_t<V> count);

    constexpr V base() const;

    constexpr auto begin() requires (![*simple-view]<V>) {
      if constexpr (sized_range<V>) {
        if constexpr (random_access_range<V>)
          return ranges::begin(base_);
        else
          return counted_iterator{ranges::begin(base_), size()};
      } else
        return counted_iterator{ranges::begin(base_), count_};
    }

    constexpr auto begin() const requires range<const V> {
      if constexpr (sized_range<const V>) {
        if constexpr (random_access_range<const V>)
          return ranges::begin(base_);
        else
          return counted_iterator{ranges::begin(base_), size()};
      } else
        return counted_iterator{ranges::begin(base_), count_};
    }

    constexpr auto end() requires (![*simple-view]<V>) {
      if constexpr (sized_range<V>) {
        if constexpr (random_access_range<V>)
          return ranges::begin(base_) + size();
        else
          return default_sentinel;
      } else
        return sentinel<false>{ranges::end(base_)};
    }

    constexpr auto end() const requires range<const V> {
      if constexpr (sized_range<const V>) {
        if constexpr (random_access_range<const V>)
          return ranges::begin(base_) + size();
        else
          return default_sentinel;
      } else
        return sentinel<true>{ranges::end(base_)};
    }

    constexpr auto size() requires sized_range<V> {
      auto n = ranges::size(base_);
      return ranges::min(n, static_cast<decltype(n)>(count_));
    }

    constexpr auto size() const requires sized_range<const V> {
      auto n = ranges::size(base_);
      return ranges::min(n, static_cast<decltype(n)>(count_));
    }
  };

  template<range R>
    take_view(R&&, range_difference_t<R>)
      -> take_view<all_view<R>>;
}
[codeblock:end]

[%@library take_view[!take_view]]
[codeblock:declaration]
constexpr take_view(V base, range_difference_t<V> count);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [`base_] with [`base] and [`count_] with [`count].
[:zh_CN] 以 [`base] 初始化 [`base_] 并以 [`count] 初始化 [`count_]。
[div:end]

[%@library take_view[!take_view]]
[codeblock:declaration]
template<viewable_range R>
  requires constructible_from<V, all_view<R>>
constexpr take_view(R&& r, range_difference_t<V> count);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [`base_] with [`views::all(std::forward<R>(r))] and [`count_]
with [`count].
[:zh_CN] 以 [`views::all(std::forward<R>(r))] 初始化 [`base_] 并以 [`count]
初始化 [`count_]。
[div:end]

[%@library base[!take_view]]
[codeblock:declaration]
constexpr V base() const;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return base_;]
[:zh_CN] 等价于：[`return base_;]
[div:end]
