[section#range.transform.iterator
    [:en] Class template [`transform_view::[*iterator]]
    [:zh_CN] 类模板 [`transform_view::[*iterator]]
]

[%@lib transform_view::iterator]
[codeblock:synopsis]
namespace std::ranges {
  template<class V, class F>
  template<bool Const>
  class transform_view<V, F>::[[redoc("*>")]]iterator {
  private:
    using [[redoc("*>")]]Parent =                              // [=expos]
      conditional_t<Const, const transform_view, transform_view>;
    using [[redoc("*>")]]Base   =                              // [=expos]
      conditional_t<Const, const V, V>;
    iterator_t<[[redoc("*>")]]Base> [[redoc("*>")]]current_ =                 // [=expos]
      iterator_t<[[redoc("*>")]]Base>();
    [[redoc("*>")]]Parent* [[redoc("*>")]]parent_ = nullptr;                  // [=expos]
  public:
    using iterator_concept  = [[redoc("[=seebelow]")]];
    using iterator_category = [[redoc("[=seebelow]")]];
    using value_type        =
      remove_cvref_t<invoke_result_t<F&, range_reference_t<[[redoc("*>")]]Base>>>;
    using difference_type   = range_difference_t<[[redoc("*>")]]Base>;

    [[redoc("*>")]]iterator() = default;
    constexpr [[redoc("*>")]]iterator([[redoc("*>")]]Parent& parent, iterator_t<[[redoc("*>")]]Base> current);
    constexpr [[redoc("*>")]]iterator([[redoc("*>")]]iterator<!Const> i)
      requires Const && convertible_to<iterator_t<V>, iterator_t<[[redoc("*>")]]Base>>;

    constexpr iterator_t<[[redoc("*>")]]Base> base() const &
      requires copyable<iterator_t<[[redoc("*>")]]Base>>;
    constexpr iterator_t<[[redoc("*>")]]Base> base() &&;
    constexpr decltype(auto) operator*() const
    { return invoke(*[[redoc("*>")]]parent_->[[redoc("*>")]]fun_, *[[redoc("*>")]]current_); }

    constexpr [[redoc("*>")]]iterator& operator++();
    constexpr void operator++(int);
    constexpr [[redoc("*>")]]iterator operator++(int) requires forward_range<[[redoc("*>")]]Base>;

    constexpr [[redoc("*>")]]iterator& operator--() requires bidirectional_range<[[redoc("*>")]]Base>;
    constexpr [[redoc("*>")]]iterator operator--(int) requires bidirectional_range<[[redoc("*>")]]Base>;

    constexpr [[redoc("*>")]]iterator& operator+=(difference_type n)
      requires random_access_range<[[redoc("*>")]]Base>;
    constexpr [[redoc("*>")]]iterator& operator-=(difference_type n)
      requires random_access_range<[[redoc("*>")]]Base>;
    constexpr decltype(auto) operator[](difference_type n) const
      requires random_access_range<[[redoc("*>")]]Base>;
    { return invoke(*[[redoc("*>")]]parent_->[[redoc("*>")]]fun_, [[redoc("*>")]]current_[n]); }

    friend constexpr bool operator==(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
      requires equality_comparable<iterator_t<[[redoc("*>")]]Base>>;

    friend constexpr bool operator<(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
      requires random_access_range<[[redoc("*>")]]Base>;
    friend constexpr bool operator>(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
      requires random_access_range<[[redoc("*>")]]Base>;
    friend constexpr bool operator<=(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
      requires random_access_range<[[redoc("*>")]]Base>;
    friend constexpr bool operator>=(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
      requires random_access_range<[[redoc("*>")]]Base>;
    friend constexpr compare_three_way_result_t<iterator_t<[[redoc("*>")]]Base>>
      operator<=>(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
        requires random_access_range<[[redoc("*>")]]Base> && three_way_comparable<iterator_t<[[redoc("*>")]]Base>>;

    friend constexpr [[redoc("*>")]]iterator operator+([[redoc("*>")]]iterator i, difference_type n)
      requires random_access_range<[[redoc("*>")]]Base>;
    friend constexpr [[redoc("*>")]]iterator operator+(difference_type n, [[redoc("*>")]]iterator i)
      requires random_access_range<[[redoc("*>")]]Base>;

    friend constexpr [[redoc("*>")]]iterator operator-([[redoc("*>")]]iterator i, difference_type n)
      requires random_access_range<[[redoc("*>")]]Base>;
    friend constexpr difference_type operator-(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
      requires random_access_range<[[redoc("*>")]]Base>;

    friend constexpr decltype(auto) iter_move(const [[redoc("*>")]]iterator& i)
      noexcept(noexcept(invoke(*i.[[redoc("*>")]]parent_->[[redoc("*>")]]fun_, *i.[[redoc("*>")]]current_)))
    {
      if constexpr (is_lvalue_reference_v<decltype(*i)>)
        return std::move(*i);
      else
        return *i;
    }

    friend constexpr void iter_swap(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
      noexcept(noexcept(ranges::iter_swap(x.[[redoc("*>")]]current_, y.[[redoc("*>")]]current_)))
      requires indirectly_swappable<iterator_t<[[redoc("*>")]]Base>>;
  };
}
[codeblock:end]

[para]
[:en] [`iterator::iterator_concept] is defined as follows:
[:zh_CN] [`iterator::iterator_concept] 的定义如下：

[list]
[item]
[:en] If [`V] models [`:c random_access_range], then [`iterator_concept] denotes
[`random_access_iterator_tag].
[:zh_CN] 若 [`V] 构成 [`:c random_access_range]，则 [`iterator_concept] 代表
[`random_access_iterator_tag]。

[item]
[:en] Otherwise, if [`V] models [`:c bidirectional_range], then
[`iterator_concept] denotes [`bidirectional_iterator_tag].
[:zh_CN] 否则，若 [`V] 构成 [`:c bidirectional_range]，则 [`iterator_concept]
代表 [`bidirectional_iterator_tag]。

[item]
[:en] Otherwise, if [`V] models [`:c forward_range], then [`iterator_concept]
denotes [`forward_iterator_tag].
[:zh_CN] 否则，若 [`V] 构成 [`:c forward_range]，则 [`iterator_concept] 代表
[`forward_iterator_tag]。

[item]
[:en] Otherwise, [`iterator_concept] denotes [`input_iterator_tag].
[:zh_CN] 否则，[`iterator_concept] 代表 [`input_iterator_tag]。
[list:end]

[para]
[:en] Let [`C] denote the type
[`iterator_traits<iterator_t<[*Base]>>::iterator_category].
[:zh_CN] 令 [`C] 代表类型
[`iterator_traits<iterator_t<[*Base]>>::iterator_category]。

[:en] If [`C] models [`[`:c derived_from]<contiguous_iterator_tag>], then
[`iterator_category] denotes [`random_access_iterator_tag]; otherwise,
[`iterator_category] denotes [`C].
[:zh_CN] 若 [`C] 构成 [`[`:c derived_from]<bidirectional_iterator_tag>]，则
[`iterator_category] 代表 [`random_access_iterator_tag]；否则，
[`iterator_category] 代表 [`C].

[%@lib@ctor transform_view::iterator]
[codeblock:declaration]
constexpr [[redoc("*>")]]iterator([[redoc("*>")]]Parent& parent, iterator_t<[[redoc("*>")]]Base> current);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*current_] with [`std::move(current)] and [*parent_] with
[`addressof(parent)].
[:zh_CN] 以 [`std::move(current)] 初始化 [*current_] 并以 [`addressof(parent)]
初始化 [*parent_]。
[div:end]

[%@lib@ctor transform_view::iterator]
[codeblock:declaration]
constexpr [[redoc("*>")]]iterator([[redoc("*>")]]iterator<!Const> i)
  requires Const && convertible_to<iterator_t<V>, iterator_t<[[redoc("*>")]]Base>>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*current_] with [`std::move(i.[*current_])] and [*parent_]
with [`i.[*parent_]].
[:zh_CN] 以 [`std::move(i.[*current_])] 初始化 [*current_] 并以 [`i.[*parent_]]
初始化 [*parent_]。
[div:end]

[%@lib@member base[!transform_view::iterator]]
[codeblock:declaration]
constexpr iterator_t<[[redoc("*>")]]Base> base() const &
  requires copyable<iterator_t<[[redoc("*>")]]Base>>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return [*current_];]
[:zh_CN] 等价于：[`return [*current_];]
[div:end]

[%@lib@member base[!transform_view::iterator]]
[codeblock:declaration]
constexpr iterator_t<[[redoc("*>")]]Base> base() &&;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return std::move(current_);]
[:zh_CN] 等价于：[`return std::move(current_);]
[div:end]

[%@lib@member operator++[!transform_view::iterator]]
[codeblock:declaration]
constexpr [[redoc("*>")]]iterator& operator++();
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
++[[redoc("*>")]]current_;
return *this;
[codeblock:end]
[div:end]

[%@lib@member operator++[!transform_view::iterator]]
[codeblock:declaration]
constexpr void operator++(int);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`++current_].
[:zh_CN] 等价于：[`++current_]。
[div:end]

[%@lib@member operator++[!transform_view::iterator]]
[codeblock:declaration]
constexpr [[redoc("*>")]]iterator operator++(int) requires forward_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
auto tmp = *this;
++*this;
return tmp;
[codeblock:end]
[div:end]

[%@lib@member operator--[!transform_view::iterator]]
[codeblock:declaration]
constexpr [[redoc("*>")]]iterator& operator--() requires bidirectional_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
--[[redoc("*>")]]current_;
return *this;
[codeblock:end]
[div:end]

[%@lib@member operator--[!transform_view::iterator]]
[codeblock:declaration]
constexpr [[redoc("*>")]]iterator operator--(int) requires bidirectional_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
auto tmp = *this;
--*this;
return tmp;
[codeblock:end]
[div:end]

[%@lib@member operator+=[!transform_view::iterator]]
[codeblock:declaration]
constexpr [[redoc("*>")]]iterator& operator+=(difference_type n)
  requires random_access_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
[[redoc("*>")]]current_ += n;
return *this;
[codeblock:end]
[div:end]

[%@lib@member operator-=[!transform_view::iterator]]
[codeblock:declaration]
constexpr [[redoc("*>")]]iterator& operator-=(difference_type n)
  requires random_access_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
[[redoc("*>")]]current_ -= n;
return *this;
[codeblock:end]
[div:end]

[%@lib@member operator==[!transform_view::iterator]]
[codeblock:declaration]
friend constexpr bool operator==(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
  requires equality_comparable<iterator_t<[[redoc("*>")]]Base>>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return x.[*current_] == y.[*current_];]
[:zh_CN] 等价于：[`return x.[*current_] == y.[*current_];]
[div:end]

[%@lib@member operator<[!transform_view::iterator]]
[codeblock:declaration]
friend constexpr bool operator<(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
  requires random_access_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return x.[*current_] < y.[*current_];]
[:zh_CN] 等价于：[`return x.[*current_] < y.[*current_];]
[div:end]

[%@lib@member operator>[!transform_view::iterator]]
[codeblock:declaration]
friend constexpr bool operator>(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
  requires random_access_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return y < x;]
[:zh_CN] 等价于：[`return y < x;]
[div:end]

[%@lib@member operator<=[!transform_view::iterator]]
[codeblock:declaration]
friend constexpr bool operator<=(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
  requires random_access_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return !(y < x);]
[:zh_CN] 等价于：[`return !(y < x);]
[div:end]

[%@lib@member operator>=[!transform_view::iterator]]
[codeblock:declaration]
friend constexpr bool operator>=(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
  requires random_access_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return !(x < y);]
[:zh_CN] 等价于：[`return !(x < y);]
[div:end]

[%@lib@member operator<=>[!transform_view::iterator]]
[codeblock:declaration]
friend constexpr compare_three_way_result_t<iterator_t<[[redoc("*>")]]Base>>
  operator<=>(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
    requires random_access_range<[[redoc("*>")]]Base> && three_way_comparable<iterator_t<[[redoc("*>")]]Base>>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return x.[*current_] <=> y.[*current_];]
[:zh_CN] 等价于：[`return x.[*current_] <=> y.[*current_];]
[div:end]

[%@lib@member operator+[!transform_view::iterator]]
[codeblock:declaration]
friend constexpr [[redoc("*>")]]iterator operator+([[redoc("*>")]]iterator i, difference_type n)
  requires random_access_range<[[redoc("*>")]]Base>;
friend constexpr [[redoc("*>")]]iterator operator+(difference_type n, [[redoc("*>")]]iterator i)
  requires random_access_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return iterator{*i.[*parent_], i.[*current_] + n};]
[:zh_CN] 等价于：[`return iterator{*i.[*parent_], i.[*current_] + n};]
[div:end]

[%@lib@member operator-[!transform_view::iterator]]
[codeblock:declaration]
friend constexpr [[redoc("*>")]]iterator operator-([[redoc("*>")]]iterator i, difference_type n)
  requires random_access_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return iterator{*i.[*parent_], i.[*current_] - n};]
[:zh_CN] 等价于：[`return iterator{*i.[*parent_], i.[*current_] - n};]
[div:end]

[%@lib@member operator-[!transform_view::iterator]]
[codeblock:declaration]
friend constexpr difference_type operator-(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
  requires random_access_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return x.[*current_] - y.[*current_];]
[:zh_CN] 等价于：[`return x.[*current_] - y.[*current_];]
[div:end]

[%@lib@member iter_swap[!transform_view::iterator]]
[codeblock:declaration]
friend constexpr void iter_swap(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
  noexcept(noexcept(ranges::iter_swap(x.[[redoc("*>")]]current_, y.[[redoc("*>")]]current_)))
  requires indirectly_swappable<iterator_t<[[redoc("*>")]]Base>>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to [`ranges::iter_swap(x.[*current_], y.[*current_])].
[:zh_CN] 等价于 [`ranges::iter_swap(x.[*current_], y.[*current_])]。
[div:end]
