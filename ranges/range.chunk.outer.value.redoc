[section#range.chunk.outer.value
    [:en] Class [`chunk_view::[*outer-iterator]::value_type]
    [:zh_CN] 类 [`chunk_view::[*outer-iterator]::value_type]
]

[%@lib chunk_view::outer-iterator::value_type]
[codeblock:synopsis]
namespace std::ranges {
  template<[[redoc("`:c>")]]view V>
    requires [[redoc("`:c>")]]input_range<V>
  struct chunk_view<V>::[[redoc("*>")]]outer-iterator::value_type : view_interface<value_type> {
  private:
    chunk_view* [[redoc("*>")]]parent_;                                        // [=expos]

    constexpr explicit value_type(chunk_view& parent);          // [=expos]

  public:
    constexpr [[redoc("*>")]]inner-iterator begin() const noexcept;
    constexpr default_sentinel_t end() const noexcept;

    constexpr auto size() const
      requires [[redoc("`:c>")]]sized_sentinel_for<sentinel_t<V>, iterator_t<V>>;
  };
}
[codeblock:end]

[codeblock:declaration]
constexpr explicit value_type(chunk_view& parent);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*parent_] with [`addressof(parent)].
[:zh_CN] 以 [`addressof(parent)] 初始化 [*parent_]。
[div:end]

[codeblock:declaration]
constexpr [[redoc("*>")]]inner-iterator begin() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`[*inner-iterator](*[*parent_])].
[:zh_CN] [`[*inner-iterator](*[*parent_])]。
[div:end]

[codeblock:declaration]
constexpr default_sentinel_t end() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`default_sentinel].
[:zh_CN] [`default_sentinel]。
[div:end]

[codeblock:declaration]
constexpr auto size() const
  requires [[redoc("`:c>")]]sized_sentinel_for<sentinel_t<V>, iterator_t<V>>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return [[redoc("*>")]]to-unsigned-like(ranges::min([[redoc("*>")]]parent_->[[redoc("*>")]]remainder_,
	                            ranges::end([[redoc("*>")]]parent_->[[redoc("*>")]]base_) - *[[redoc("*>")]]parent_->[[redoc("*>")]]current_));
[codeblock:end]
[div:end]
