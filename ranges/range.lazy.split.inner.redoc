[section#range.lazy.split.inner
    [:en] Class template [`lazy_split_view::[*inner-iterator]]
    [:zh_CN] 类模板 [`lazy_split_view::[*inner-iterator]]
]

[%@lib lazy_split_view::[*inner-iterator]]
[codeblock:synopsis]
namespace std::ranges {
  template<[[redoc("`:c>")]]input_range V, [[redoc("`:c>")]]forward_range Pattern>
    requires [[redoc("`:c>")]]view<V> && [[redoc("`:c>")]]view<Pattern> &&
             [[redoc("`:c>")]]indirectly_comparable<iterator_t<V>, iterator_t<Pattern>, ranges::equal_to> &&
             ([[redoc("`:c>")]]forward_range<V> || [[redoc("*:c>")]]tiny-range<Pattern>)
  template<bool Const>
  struct lazy_split_view<V, Pattern>::[[redoc("*>")]]inner-iterator {
  private:
    using [[redoc("*>")]]Base = [[redoc("*>")]]maybe-const<Const, V>;                     // [=expos]
    [[redoc("*>")]]outer-iterator<Const> [[redoc("*>")]]i_ = [[redoc("*>")]]outer-iterator<Const>();     // [=expos]
    bool [[redoc("*>")]]incremented_ = false;                              // [=expos]

  public:
    using iterator_concept  = typename [[redoc("*>")]]outer-iterator<Const>::iterator_concept;

    using iterator_category = [[redoc("[=seebelow]", "_")]]_;                    // [:en] [=expos], present only if [`Base] \
                                                                                 [:zh_CN] [=expos]，仅当 [`Base] 构成
                                                            // [:en@~] models [`:c forward_range] \
                                                            [:zh_CN@~] [`:c forward_range] 时出现
    using value_type        = range_value_t<[[redoc("*>")]]Base>;
    using difference_type   = range_difference_t<[[redoc("*>")]]Base>;

    [[redoc("*>")]]inner-iterator() = default;
    constexpr explicit [[redoc("*>")]]inner-iterator([[redoc("*>")]]outer-iterator<Const> i);

    constexpr const iterator_t<[[redoc("*>")]]Base>& base() const & noexcept;
    constexpr iterator_t<[[redoc("*>")]]Base> base() && requires [[redoc("^:c>")]]forward_range<V>;

    constexpr decltype(auto) operator*() const { return *[[redoc("*>")]]i_.[[redoc("^>")]]current; }

    constexpr [[redoc("*>")]]inner-iterator& operator++();
    constexpr decltype(auto) operator++(int) {
      if constexpr ([[redoc("`:c>")]]forward_range<[[redoc("*>")]]Base>) {
        auto tmp = *this;
        ++*this;
        return tmp;
      } else
        ++*this;
    }

    friend constexpr bool operator==(const [[redoc("*>")]]inner-iterator& x, const [[redoc("*>")]]inner-iterator& y)
      requires [[redoc("`:c>")]]forward_range<[[redoc("*>")]]Base>;

    friend constexpr bool operator==(const [[redoc("*>")]]inner-iterator& x, default_sentinel_t);

    friend constexpr decltype(auto) iter_move(const [[redoc("*>")]]inner-iterator& i)
    noexcept(noexcept(ranges::iter_move(i.[[redoc("*>")]]i_.[[redoc("^>")]]current))) {
      return ranges::iter_move(i.[[redoc("*>")]]i_.[[redoc("^>")]]current);
    }

    friend constexpr void iter_swap(const [[redoc("*>")]]inner-iterator& x, const [[redoc("*>")]]inner-iterator& y)
      noexcept(noexcept(ranges::iter_swap(x.[[redoc("*>")]]i_.[[redoc("^>")]]current, y.i_.[[redoc("^>")]]current)))
      requires [[redoc("`:c>")]]indirectly_swappable<iterator_t<[[redoc("*>")]]Base>>;
  };
}
[codeblock:end]

[para]
[:en] If [*Base] does not model [`:c forward_range] there is no member
[`iterator_category].
[:zh_CN] 若 [*Base] 并不构成 [`:c forward_range] 则没有成员 [`iterator_category]。

[:en] Otherwise, the [~typedef-name] [`iterator_category] denotes:
[:zh_CN] 否则，[~typedef-名] [`iterator_category] 代表：
[list]
[item]
[:en@~] [`forward_iterator_tag] if
[`iterator_traits<iterator_t<[*Base]>>::iterator_category] models
[`[`:c derived_from]<forward_iterator_tag>];
[:zh_CN@~] 当 [`iterator_traits<iterator_t<[*Base]>>::iterator_category] 构成
[`[`:c derived_from]<forward_iterator_tag>] 时，为 [`forward_iterator_tag]；
[item]
[:en@~] otherwise, [`iterator_traits<iterator_t<[*Base]>>::iterator_category].
[:zh_CN@~] 否则代表 [`iterator_traits<iterator_t<[*Base]>>::iterator_category]。
[list:end]

[%@lib@ctor lazy_split_view::[*inner-iterator]]
[codeblock:declaration]
constexpr explicit [[redoc("*>")]]inner-iterator([[redoc("*>")]]outer-iterator<Const> i);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*i_] with [`std::move(i)].
[:zh_CN] 以 [`std::move(i)] 初始化 [*i_]。
[div:end]

[%@lib@member base[!lazy_split_view::[*inner-iterator]]]
[codeblock:declaration]
constexpr const iterator_t<[[redoc("*>")]]Base>& base() const & noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return [*i_].[^current];]
[:zh_CN] 等价于：[`return [*i_].[^current];]
[div:end]

[%@lib@member base[!lazy_split_view::[*inner-iterator]]]
[codeblock:declaration]
constexpr iterator_t<[[redoc("*>")]]Base>& base() && requires [[redoc("^:c>")]]forward_range<V>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return std::move([*i_].[^current]);]
[:zh_CN] 等价于：[`return std::move([*i_].[^current]);]
[div:end]

[%@lib@member operator++[!lazy_split_view::[*inner-iterator]]]
[codeblock:declaration]
constexpr [[redoc("*>")]]inner-iterator& operator++();
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
[[redoc("*>")]]incremented_ = true;
if constexpr (![[redoc("`:c>")]]forward_range<[[redoc("*>")]]Base>) {
  if constexpr (Pattern::size() == 0) {
    return *this;
  }
}
++[[redoc("*>")]]i_.[[redoc("^>")]]current;
return *this;
[codeblock:end]
[div:end]

[%@lib@member operator==[!lazy_split_view::[*inner-iterator]]]
[codeblock:declaration]
friend constexpr bool operator==(const [[redoc("*>")]]inner-iterator& x, const [[redoc("*>")]]inner-iterator& y)
  requires [[redoc("`:c>")]]forward_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return x.[*i_].[^current] == y.[*i_].[^current];]
[:zh_CN] 等价于：[`return x.[*i_].[^current] == y.[*i_].[^current];]
[div:end]

[%@lib@member operator==[!lazy_split_view::[*inner-iterator]]]
[codeblock:declaration]
friend constexpr bool operator==(const [[redoc("*>")]]inner-iterator& x, default_sentinel_t);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
auto [pcur, pend] = subrange{x.[[redoc("*>")]]i_.[[redoc("*>")]]parent_->[[redoc("*>")]]pattern_};
auto end = ranges::end(x.[[redoc("*>")]]i_.[[redoc("*>")]]parent_->[[redoc("*>")]]base_);
if constexpr ([[redoc("*:c>")]]tiny-range<Pattern>) {
  const auto & cur = x.[[redoc("*>")]]i_.[[redoc("^>")]]current;
  if (cur == end) return true;
  if (pcur == pend) return x.[[redoc("*>")]]incremented_;
  return *cur == *pcur;
} else {
  auto cur = x.[[redoc("*>")]]i_.[[redoc("^>")]]current;
  if (cur == end) return true;
  if (pcur == pend) return x.[[redoc("*>")]]incremented_;
  do {
    if (*cur != *pcur) return false;
    if (++pcur == pend) return true;
  } while (++cur != end);
  return false;
}
[codeblock:end]
[div:end]

[%@lib@member iter_swap[!lazy_split_view::[*inner-iterator]]]
[codeblock:declaration]
friend constexpr void iter_swap(const [[redoc("*>")]]inner-iterator& x, const [[redoc("*>")]]inner-iterator& y)
  noexcept(noexcept(ranges::iter_swap(x.[[redoc("*>")]]i_.[[redoc("^>")]]current, y.[[redoc("*>")]]i_.[[redoc("^>")]]current)))
  requires [[redoc("`:c>")]]indirectly_swappable<iterator_t<[[redoc("*>")]]Base>>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to [`ranges::iter_swap(x.[*i_].[^current], y.[*i_].[^current])].
[:zh_CN] 等价于 [`ranges::iter_swap(x.[*i_].[^current], y.[*i_].[^current])]。
[div:end]
