[section#view.interface.general
    [:en] General
    [:zh_CN] 概述
]

[para]
[:en] The class template [`view_interface] is a helper for defining
[`:c view]-like types that offer a container-like interface.
[:zh_CN] 类模板 [`view_interface] 用于辅助定义提供类似容器的接口的 [`:c view] 式
类型。

[:en] It is parameterized with the type that is derived from it.
[:zh_CN] 它是以从它派生的类型来参数化的。

[%@lib view_interface]
[codeblock:synopsis]
namespace std::ranges {
  template<class D>
    requires is_class_v<D> && [[redoc("`:c>")]]same_as<D, remove_cv_t<D>>
  class view_interface {
  private:
    constexpr D& [[redoc("*>")]]derived() noexcept {               // [=expos]
      return static_cast<D&>(*this);
    }
    constexpr const D& [[redoc("*>")]]derived() const noexcept {   // [=expos]
      return static_cast<const D&>(*this);
    }

  public:
    constexpr bool empty() requires [[redoc("`:c>")]]forward_range<D> {
      return ranges::begin([[redoc("*>")]]derived()) == ranges::end([[redoc("*>")]]derived());
    }
    constexpr bool empty() const requires [[redoc("`:c>")]]forward_range<const D> {
      return ranges::begin([[redoc("*>")]]derived()) == ranges::end([[redoc("*>")]]derived());
    }

    constexpr explicit operator bool()
      requires requires { ranges::empty([[redoc("*>")]]derived()); } {
        return !ranges::empty([[redoc("*>")]]derived());
      }
    constexpr explicit operator bool() const
      requires requires { ranges::empty([[redoc("*>")]]derived()); } {
        return !ranges::empty([[redoc("*>")]]derived());
      }

    constexpr auto data() requires [[redoc("`:c>")]]contiguous_iterator<iterator_t<D>> {
      return to_address(ranges::begin([[redoc("*>")]]derived()));
    }
    constexpr auto data() const
      requires [[redoc("`:c>")]]range<const D> && [[redoc("`:c>")]]contiguous_iterator<iterator_t<const D>> {
        return to_address(ranges::begin([[redoc("*>")]]derived()));
      }

    constexpr auto size() requires [[redoc("`:c>")]]forward_range<D> &&
      [[redoc("`:c>")]]sized_sentinel_for<sentinel_t<D>, iterator_t<D>> {
        return ranges::end([[redoc("*>")]]derived()) - ranges::begin([[redoc("*>")]]derived());
      }
    constexpr auto size() const requires [[redoc("`:c>")]]forward_range<const D> &&
      [[redoc("`:c>")]]sized_sentinel_for<sentinel_t<const D>, iterator_t<const D>> {
        return ranges::end([[redoc("*>")]]derived()) - ranges::begin([[redoc("*>")]]derived());
      }

    constexpr decltype(auto) front() requires [[redoc("`:c>")]]forward_range<D>;
    constexpr decltype(auto) front() const requires [[redoc("`:c>")]]forward_range<const D>;

    constexpr decltype(auto) back() requires [[redoc("`:c>")]]bidirectional_range<D> && [[redoc("`:c>")]]common_range<D>;
    constexpr decltype(auto) back() const
      requires [[redoc("`:c>")]]bidirectional_range<const D> && [[redoc("`:c>")]]common_range<const D>;

    template<[[redoc("`:c>")]]random_access_range R = D>
      constexpr decltype(auto) operator[](range_difference_t<R> n) {
        return ranges::begin([[redoc("*>")]]derived())[n];
      }[[redoc(";")]];
    template<[[redoc("`:c>")]]random_access_range R = const D>
      constexpr decltype(auto) operator[](range_difference_t<R> n) const {
        return ranges::begin([[redoc("*>")]]derived())[n];
      }[[redoc(";")]];
  };
}
[codeblock:end]

[para]
[:en] The template parameter [`D] for [`view_interface] may be an incomplete
type.
[:zh_CN] [`view_interface] 的模板形参 [`D] 可以是不完整类型。

[:en] Before any member of the resulting specialization of [`view_interface]
other than special member functions is referenced, [`D] shall be complete, and
model both [`[`:c derived_from]<view_interface<D>>] and [`:c view].
[:zh_CN] 在对所造成的 [`view_interface] 特例除了特殊成员之外的任何成员进行涉指
之前，[`D] 应当是完整的，并且应当同时构成
[`[`:c derived_from]<view_interface<D>>] 和 [`:c view]。
