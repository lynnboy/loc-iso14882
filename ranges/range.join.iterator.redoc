[section#range.join.iterator
    [:en] Class template [`join_view::[*iterator]]
    [:zh_CN] 类模板 [`join_view::[*iterator]]
]

[codeblock:synopsis]
namespace std::ranges {
  template<[[redoc("`:c>")]]input_range V>
    requires [[redoc("`:c>")]]view<V> && [[redoc("`:c>")]]input_range<range_reference_t<V>>
  template<bool Const>
  struct join_view<V>::[[redoc("*>")]]iterator {
  private:
    using [[redoc("*>")]]Parent    = [[redoc("*>")]]maybe-const<Const, join_view>;            // [=expos]
    using [[redoc("*>")]]Base      = [[redoc("*>")]]maybe-const<Const, V>;                    // [=expos]
    using [[redoc("*>")]]OuterIter = iterator_t<[[redoc("*>")]]Base>;                         // [=expos]
    using [[redoc("*>")]]InnerIter = iterator_t<range_reference_t<[[redoc("*>")]]Base>>;      // [=expos]

    static constexpr bool [[redoc("*>")]]ref-is-glvalue =                      // [=expos]
      is_reference_v<range_reference_t<[[redoc("*>")]]Base>>;

    [[redoc("*>")]]OuterIter [[redoc("*>")]]outer_ = [[redoc("*>")]]OuterIter();                     // [:en] [=expos], present only \
                                                                                                     [:zh_CN] [=expos]，仅当
                                                        // [:en@~] if [*Base] models [`:c forward_range] \
                                                        [:zh_CN@~] [*Base] 构成 [`:c forward_range] 时提供
    optional<[[redoc("*>")]]InnerIter> [[redoc("*>")]]inner_;                                 // [=expos]
    [[redoc("*>")]]Parent* [[redoc("*>")]]parent_  = nullptr;                                 // [=expos]

    constexpr void [[redoc("*>")]]satisfy();                                   // [=expos]

    constexpr [[redoc("*>")]]OuterIter& [[redoc("*>")]]outer();                               // [=expos]
    constexpr const [[redoc("*>")]]OuterIter& [[redoc("*>")]]outer() const;                   // [=expos]

    constexpr [[redoc("*>")]]iterator([[redoc("*>")]]Parent& parent, [[redoc("*>")]]OuterIter outer)
      requires [[redoc("`:c>")]]forward_range<[[redoc("*>")]]Base>;                             // [=expos]
    constexpr explicit [[redoc("*>")]]iterator([[redoc("*>")]]Parent& parent)
      requires (![[redoc("`:c>")]]forward_range<[[redoc("*>")]]Base>);                          // [=expos]

  public:
    using iterator_concept  = [[redoc("[=seebelow]")]];
    using iterator_category = [[redoc("[=seebelow]", "_")]]_;                        // [:en] not always present \
                                                                                     [:zh_CN] 不总是出现
    using value_type        = range_value_t<range_reference_t<[[redoc("*>")]]Base>>;
    using difference_type   = [[redoc("[=seebelow]")]];

    [[redoc("*>")]]iterator() = default;
    constexpr [[redoc("*>")]]iterator([[redoc("*>")]]iterator<!Const> i)
      requires Const &&
               [[redoc("`:c>")]]convertible_to<iterator_t<V>, [[redoc("*>")]]OuterIter> &&
               [[redoc("`:c>")]]convertible_to<iterator_t<[[redoc("*>")]]InnerRng>, [[redoc("*>")]]InnerIter>;

    constexpr decltype(auto) operator*() const { return **[[redoc("*>")]]inner_; }

    constexpr [[redoc("*>")]]InnerIter operator->() const
      requires [[redoc("*:c>")]]has-arrow<[[redoc("*>")]]InnerIter> && [[redoc("`:c>")]]copyable<[[redoc("*>")]]InnerIter>;

    constexpr [[redoc("*>")]]iterator& operator++();
    constexpr void operator++(int);
    constexpr [[redoc("*>")]]iterator operator++(int)
      requires [[redoc("*>")]]ref-is-glvalue && [[redoc("`:c>")]]forward_range<[[redoc("*>")]]Base> &&
               [[redoc("`:c>")]]forward_range<range_reference_t<[[redoc("*>")]]Base>>;

    constexpr [[redoc("*>")]]iterator& operator--()
      requires [[redoc("*>")]]ref-is-glvalue && [[redoc("`:c>")]]bidirectional_range<[[redoc("*>")]]Base> &&
               [[redoc("`:c>")]]bidirectional_range<range_reference_t<[[redoc("*>")]]Base>> &&
               [[redoc("`:c>")]]common_range<range_reference_t<[[redoc("*>")]]Base>>;

    constexpr [[redoc("*>")]]iterator operator--(int)
      requires [[redoc("*>")]]ref-is-glvalue && [[redoc("`:c>")]]bidirectional_range<[[redoc("*>")]]Base> &&
               [[redoc("`:c>")]]bidirectional_range<range_reference_t<[[redoc("*>")]]Base>> &&
               [[redoc("`:c>")]]common_range<range_reference_t<[[redoc("*>")]]Base>>;

    friend constexpr bool operator==(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
      requires [[redoc("*>")]]ref-is-glvalue && [[redoc("`:c>")]]forward_range<[[redoc("*>")]]Base> &&
               [[redoc("`:c>")]]equality_comparable<iterator_t<range_reference_t<[[redoc("*>")]]Base>>>;

    friend constexpr decltype(auto) iter_move(const [[redoc("*>")]]iterator& i)
    noexcept(noexcept(ranges::iter_move(*i.[[redoc("*>")]]inner_))) {
      return ranges::iter_move(*i.[[redoc("*>")]]inner_);
    }

    friend constexpr void iter_swap(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
      noexcept(noexcept(ranges::iter_swap(*x.[[redoc("*>")]]inner_, *y.[[redoc("*>")]]inner_)))
      requires [[redoc("`:c>")]]indirectly_swappable<[[redoc("*>")]]InnerIter>;
  };
}
[codeblock:end]

[para]
[:en] [`[*iterator]::iterator_concept] is defined as follows:
[:zh_CN] [`[*iterator]::iterator_concept] 的定义如下：

[list]
[item]
[:en] If [*ref-is-glvalue] is [`true], [*Base] models [`:c bidirectional_range],
and [`range_reference_t<[*Base]>] models both [`:c bidirectional_range] and
[`:c common_range], then [`iterator_concept] denotes [`bidirectional_iterator_tag].
[:zh_CN] 若 [*ref-is-glvalue] 为 [`true]，[*Base] 构成 [`:c bidirectional_range]，
且 [`range_reference_t<[*Base]>] 同时构成 [`:c bidirectional_range] 和
[`:c common_range]，则 [`iterator_concept] 代表 [`bidirectional_iterator_tag]。

[item]
[:en] Otherwise, if [*ref-is-glvalue] is [`true] and [*Base] and
[`range_reference_t<[*Base]>] each model [`:c forward_range], then
[`iterator_concept] denotes [`forward_iterator_tag].
[:zh_CN] 否则，若 [*ref-is-glvalue] 为 [`true] 且 [*Base] 和
[`range_reference_t<[*Base]>] 均构成 [`:c forward_range]，则 [`iterator_concept]
代表 [`forward_iterator_tag]。

[item]
[:en] Otherwise, [`iterator_concept] denotes [`input_iterator_tag].
[:zh_CN] 否则，[`iterator_concept] 代表 [`input_iterator_tag]。
[list:end]

[para]
[:en] The member [~typedef-name] [`iterator_category] is defined if and only if
[*ref-is-glvalue] is [`true], [`Base] models [`:c forward_range], and
[`range_reference_t<[*Base]>] models [`:c forward_range].
[:zh_CN] 当且仅当 [*ref-is-glvalue] 为 [`true]，[`Base] 构成 [`:c forward_range]，
并且 [`range_reference_t<[*Base]>] 构成 [`:c forward_range] 时，成员 [~typedef-名]
[`iterator_category] 被定义。

[:en] In that case, [`iterator::iterator_category] is defined as follows:
[:zh_CN] 这种情况下，[`iterator::iterator_category] 的定义如下：

[list]
[item]
[:en] Let [^OUTERC] denote
[`iterator_traits<iterator_t<[*Base]>>::iterator_category], and let [^INNERC]
denote
[`iterator_traits<iterator_t<range_reference_t<[*Base]>>>::iterator_category].
[:zh_CN] 令 [^OUTERC] 代表
[`iterator_traits<iterator_t<[*Base]>>::iterator_category]，并令 [^INNERC] 代表
[`iterator_traits<iterator_t<range_reference_t<[*Base]>>>::iterator_category]。

[item]
[:en] If [^OUTERC] and [^INNERC] each model
[`[`:c derived_from]<bidirectional_iterator_tag>] and
[`range_reference_t<[*Base]>] models [`:c common_range], [`iterator_category]
denotes [`bidirectional_iterator_tag].
[:zh_CN] 若 [^OUTERC] 和 [^INNERC] 均构成
[`[`:c derived_from]<bidirectional_iterator_tag>] 且 [`range_reference_t<[*Base]>]
构成 [`:c common_range]，则 [`iterator_category] 代表
[`bidirectional_iterator_tag]。

[item]
[:en] Otherwise, if [^OUTERC] and [^INNERC] each model
[`[`:c derived_from]<forward_iterator_tag>], [`iterator_category] denotes
[`forward_iterator_tag].
[:zh_CN] 否则，若 [^OUTERC] 和 [^INNERC] 均构成
[`[`:c derived_from]<forward_iterator_tag>]，则 [`iterator_category] 代表
[`forward_iterator_tag]。

[item]
[:en] Otherwise, [`iterator_category] denotes [`input_iterator_tag].
[:zh_CN] 否则，[`iterator_category] 代表 [`input_iterator_tag]。
[list:end]

[para]
[:en] [`iterator::difference_type] denotes the type:
[:zh_CN] [`iterator::difference_type] 代表类型：
[codeblock]
common_type_t<
  range_difference_t<[[redoc("*>")]]Base>,
  range_difference_t<range_reference_t<[[redoc("*>")]]Base>>>
[codeblock:end]

[para]
[:en] [`join_view] iterators use the [*satisfy] function to skip over empty
inner ranges.
[:zh_CN] [`join_view] 迭代器使用 [*satisfy] 函数以跳过空的内部范围。

[codeblock:declaration]
constexpr [[redoc("*>")]]OuterIter& [[redoc("*>")]]outer();
constexpr const [[redoc("*>")]]OuterIter& [[redoc("*>")]]outer() const;
[codeblock:end]

[div:description]
[para:returns]
[:en] [*outer_] if [*Base] models [`:c forward_range]; otherwise,
[`*[*parent_]->[*outer_]].
[:zh_CN] 若 [*Base] 构成 [`:c forward_range] 则返回 [*outer_]；否则返回
[`*[*parent_]->[*outer_]]。
[div:end]

[codeblock:declaration]
constexpr void [[redoc("*>")]]satisfy();
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
auto update_inner = [this](const iterator_t<[[redoc("*>")]]Base> x) -> auto& {
  if constexpr ([[redoc("*>")]]ref-is-glvalue)     // [:en] [`x] is a reference \
                                                   [:zh_CN] [`x] 是引用
    return *x;
  else
    return [[redoc("*>")]]parent_->[[redoc("*>")]]inner_.[[redoc("*>")]]emplace-deref(x);
};

for (; [[redoc("*>")]]outer() != ranges::end([[redoc("*>")]]parent_->[[redoc("*>")]]base_); ++[[redoc("*>")]]outer()) {
  auto&& inner = update_inner([[redoc("*>")]]outer());
  [[redoc("*>")]]inner_ = ranges::begin(inner);
  if (*[[redoc("*>")]]inner_ != ranges::end(inner))
    return;
}
if constexpr ([[redoc("*>")]]ref-is-glvalue)
  [[redoc("*>")]]inner_.reset();
[codeblock:end]
[div:end]

[%@lib@ctor join_view::[*iterator]]
[codeblock:declaration]
constexpr [[redoc("*>")]]iterator([[redoc("*>")]]Parent& parent, [[redoc("*>")]]OuterIter outer)
  requires [[redoc("`:c>")]]forward_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*outer_] with [`std::move(outer)] and [*parent_] with
[`addressof(parent)]; then calls [`[*satisfy]()].
[:zh_CN] 以 [`std::move(outer)] 初始化 [*outer_] 并以 [`addressof(parent)]
初始化 [*parent_]；然后调用 [`[*satisfy]()]。
[div:end]

[%@lib@ctor join_view::[*iterator]]
[codeblock:declaration]
constexpr explicit [[redoc("*>")]]iterator([[redoc("*>")]]Parent& parent)
  requires (![[redoc("`:c>")]]forward_range<[[redoc("*>")]]Base>);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*parent_] with [`addressof(parent)]; then calls [`[*satisfy]()].
[:zh_CN] 以 [`addressof(parent)] 初始化 [*parent_]；然后调用 [`[*satisfy]()]。
[div:end]

[%@lib@ctor join_view::[*iterator]]
[codeblock:declaration]
constexpr [[redoc("*>")]]iterator([[redoc("*>")]]iterator<!Const> i)
  requires Const &&
           [[redoc("`:c>")]]convertible_to<iterator_t<V>, [[redoc("*>")]]OuterIter> &&
           [[redoc("`:c>")]]convertible_to<iterator_t<[[redoc("*>")]]InnerRng>, [[redoc("*>")]]InnerIter>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*outer_] with [`std::move(i.[*outer_])], [*inner_] with
[`std::move(i.[*inner_])], and [*parent_] with [`i.[*parent_]].
[:zh_CN] 以 [`std::move(i.[*outer_])] 初始化 [*outer_]，以
[`std::move(i.[*inner_])] 初始化 [*inner_]，并以 [`i.[*parent_]] 初始化 [*parent_]。

[para]
[begin:note]
[:en] [`Const] can only be [`true] when [*Base] models [`:c forward_range].
[:zh_CN] [`Const] 仅能在 [*Base] 构成 [`:c forward_range] 时为 [`true]。
[end:note]
[div:end]

[%@lib@member operator->[!join_view::[*iterator]]]
[codeblock:declaration]
constexpr [[redoc("*>")]]InnerIter operator->() const
  requires [[redoc("*:c>")]]has-arrow<[[redoc("*>")]]InnerIter> && [[redoc("`:c>")]]copyable<[[redoc("*>")]]InnerIter>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to [`return *[*inner_];]
[:zh_CN] 等价于 [`return *[*inner_];]
[div:end]

[%@lib@member operator++[!join_view::[*iterator]]]
[codeblock:declaration]
constexpr [[redoc("*>")]]iterator& operator++();
[codeblock:end]

[div:description]
[para]
[:en] Let [`[^inner-range]] be:
[:zh_CN] 令 [`[^inner-range]] 为：
[list]
[item]
[:en] If [*ref-is-glvalue] is [`true], [`*[*outer]()].
[:zh_CN] 当 [*ref-is-glvalue] 为 [`true] 时，为 [`*[*outer]()]。
[item]
[:en] Otherwise, [`*[*parent_]->[*inner_]].
[:zh_CN] 否则，为 [`*[*parent_]->[*inner_]]。
[list:end]

[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
if (++*[[redoc("*>")]]inner_ == ranges::end([[redoc("*>")]]as-lvalue([[redoc("^>")]]inner-range))) {
  ++[[redoc("*>")]]outer();
  [[redoc("*>")]]satisfy();
}
return *this;
[codeblock:end]
[div:end]

[%@lib@member operator++[!join_view::[*iterator]]]
[codeblock:declaration]
constexpr void operator++(int);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`++*this].
[:zh_CN] 等价于：[`++*this]。
[div:end]

[%@lib@member operator++[!join_view::[*iterator]]]
[codeblock:declaration]
constexpr [[redoc("*>")]]iterator operator++(int)
  requires [[redoc("*>")]]ref-is-glvalue && [[redoc("`:c>")]]forward_range<[[redoc("*>")]]Base> &&
           [[redoc("`:c>")]]forward_range<range_reference_t<[[redoc("*>")]]Base>>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
auto tmp = *this;
++*this;
return tmp;
[codeblock:end]
[div:end]

[%@lib@member operator--[!join_view::[*iterator]]]
[codeblock:declaration]
constexpr [[redoc("*>")]]iterator& operator--()
  requires [[redoc("*>")]]ref-is-glvalue && [[redoc("`:c>")]]bidirectional_range<[[redoc("*>")]]Base> &&
           [[redoc("`:c>")]]bidirectional_range<range_reference_t<[[redoc("*>")]]Base>> &&
           [[redoc("`:c>")]]common_range<range_reference_t<[[redoc("*>")]]Base>>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
if ([[redoc("*>")]]outer_ == ranges::end([[redoc("*>")]]parent_->vbase_))
  [[redoc("*>")]]inner_ = ranges::end([[redoc("*>")]]as-lvalue(*--[[redoc("*>")]]outer_));
while (*[[redoc("*>")]]inner_ == ranges::begin([[redoc("*>")]]as-lvalue(*[[redoc("*>")]]outer_)))
  *[[redoc("*>")]]inner_ = ranges::end([[redoc("*>")]]as-lvalue(*--[[redoc("*>")]]outer_));
--*[[redoc("*>")]]inner_;
return *this;
[codeblock:end]
[div:end]

[%@lib@member operator--[!join_view::[*iterator]]]
[codeblock:declaration]
constexpr [[redoc("*>")]]iterator operator--(int)
  requires [[redoc("*>")]]ref-is-glvalue && [[redoc("`:c>")]]bidirectional_range<[[redoc("*>")]]Base> &&
           [[redoc("`:c>")]]bidirectional_range<range_reference_t<[[redoc("*>")]]Base>> &&
           [[redoc("`:c>")]]common_range<range_reference_t<[[redoc("*>")]]Base>>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
auto tmp = *this;
--*this;
return tmp;
[codeblock:end]
[div:end]

[%@lib@member operator==[!join_view::[*iterator]]]
[codeblock:declaration]
friend constexpr bool operator==(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
  requires [[redoc("*>")]]ref-is-glvalue && [[redoc("`:c>")]]forward_range<[[redoc("*>")]]Base> &&
           [[redoc("`:c>")]]equality_comparable<iterator_t<range_reference_t<[[redoc("*>")]]Base>>>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[`return x.[*outer_] == y.[*outer_] && x.[*inner_] == y.[*inner_];]
[:zh_CN] 等价于：
[`return x.[*outer_] == y.[*outer_] && x.[*inner_] == y.[*inner_];]
[div:end]

[%@lib@member iter_swap[!join_view::[*iterator]]]
[codeblock:declaration]
friend constexpr void iter_swap(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
  noexcept(noexcept(ranges::iter_swap(*x.[[redoc("*>")]]inner_, *y.[[redoc("*>")]]inner_)))
  requires [[redoc("`:c>")]]indirectly_swappable<[[redoc("*>")]]InnerIter>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return ranges::iter_swap(*x.[*inner_], *y.[*inner_]);]
[:zh_CN] 等价于：[`return ranges::iter_swap(*x.[*inner_], *y.[*inner_]);]
[div:end]
