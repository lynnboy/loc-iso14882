[section#range.subrange.access
    [:en] Accessors
    [:zh_CN] 访问器
]

[%@lib@member begin[!subrange]]
[codeblock:declaration]
constexpr I begin() const requires copyable<I>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return [*begin_];]
[:zh_CN] 等价于：[`return [*begin_];]
[div:end]

[%@lib@member begin[!subrange]]
[codeblock:declaration]
[[nodiscard]] constexpr I begin() requires (!copyable<I>);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return std::move([*begin_]);]
[:zh_CN] 等价于：[`return std::move([*begin_]);]
[div:end]

[%@lib@member end[!subrange]]
[codeblock:declaration]
constexpr S end() const;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return [*end_];]
[:zh_CN] 等价于：[`return [*end_];]
[div:end]

[%@lib@member empty[!subrange]]
[codeblock:declaration]
constexpr bool empty() const;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return [*begin_] == [*end_];]
[:zh_CN] 等价于：[`return [*begin_] == [*end_];]
[div:end]

[%@lib@member size[!subrange]]
[codeblock:declaration]
constexpr [[redoc("^>")]]make-unsigned-like-t<iter_difference_t<I>> size() const
  requires (K == subrange_kind::sized);
[codeblock:end]

[div:description]
[para:effects]
[list]
[item]
[:en] If [*StoreSize] is [`true], equivalent to: [`return [*size_];]
[:zh_CN] 当 [*StoreSize] 为 [`true] 时，等价于：[`return [*size_];]
[item]
[:en] Otherwise, equivalent to: [`return [^to-unsigned-like]([*end_] - [*begin_]);]
[:zh_CN] 否则，等价于：[`return [^to-unsigned-like]([*end_] - [*begin_]);]
[list:end]
[div:end]

[%@lib@member next[!subrange]]
[codeblock:declaration]
[[nodiscard]] constexpr subrange next(iter_difference_t<I> n = 1) const &
  requires forward_iterator<I>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
auto tmp = *this;
tmp.advance(n);
return tmp;
[codeblock:end]
[div:end]

[%@lib@member next[!subrange]]
[codeblock:declaration]
[[nodiscard]] constexpr subrange next(iter_difference_t<I> n = 1) &&;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
advance(n);
return std::move(*this);
[codeblock:end]
[div:end]

[%@lib@member prev[!subrange]]
[codeblock:declaration]
[[nodiscard]] constexpr subrange prev(iter_difference_t<I> n = 1) const
  requires [[redoc("`:c>")]]bidirectional_iterator<I>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
auto tmp = *this;
tmp.advance(-n);
return tmp;
[codeblock:end]
[div:end]

[%@lib@member advance[!subrange]]
[codeblock:declaration]
constexpr subrange& advance(iter_difference_t<I> n);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[list]
[item]
[:en] If [*StoreSize] is [`true],
[:zh_CN] 当 [*StoreSize] 为 [`true] 时，为
[codeblock]
auto d = n - ranges::advance([[redoc("*>")]]begin_, n, [[redoc("*>")]]end_);
if (d >= 0)
  [[redoc("*>")]]size_ -= [[redoc("^>")]]to-unsigned-like(d);
else
  [[redoc("*>")]]size_ += [[redoc("^>")]]to-unsigned-like(-d);
return *this;
[codeblock:end]

[item]
[:en] Otherwise,
[:zh_CN] 否则，
[codeblock]
ranges::advance([[redoc("*>")]]begin_, n, [[redoc("*>")]]end_);
return *this;
[codeblock:end]
[list:end]
[div:end]

[%@lib@member get[!subrange]]
[codeblock:declaration]
template<size_t N, class I, class S, subrange_kind K>
  requires (N < 2)
  constexpr auto get(const subrange<I, S, K>& r);
template<size_t N, class I, class S, subrange_kind K>
  requires (N < 2)
  constexpr auto get(subrange<I, S, K>&& r);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
if constexpr (N == 0)
  return r.begin();
else
  return r.end();
[codeblock:end]
[div:end]
