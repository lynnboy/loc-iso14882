[section#range.subrange.access
    [:en] Accessors
    [:zh_CN] 访问器
]

[%@library begin[!subrange]]
[codeblock:declaration]
constexpr I begin() const;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to: [`return begin_;]
[:zh_CN] 等价于：[`return begin_;]
[exit:description]

[%@library end[!subrange]]
[codeblock:declaration]
constexpr S end() const;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to: [`return end_;]
[:zh_CN] 等价于：[`return end_;]
[exit:description]

[%@library empty[!subrange]]
[codeblock:declaration]
constexpr bool empty() const;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to: [`return begin_ == end_;]
[:zh_CN] 等价于：[`return begin_ == end_;]
[exit:description]

[%@library size[!subrange]]
[codeblock:declaration]
constexpr [*make-unsigned-like-t](iter_difference_t<I>) size() const
  requires (K == subrange_kind::sized);
[codeblock:end]

[enter:description]
[para:effects]
[list]
[item]
[:en] If [`StoreSize] is [`true], equivalent to: [`return size_;]
[:zh_CN] 当 [`StoreSize] 为 [`true] 时，等价于：[`return size_;]
[item]
[:en] Otherwise, equivalent to: [`return [*make-unsigned-like](end_ - begin_);]
[:zh_CN] 否则，等价于：[`return [*make-unsigned-like](end_ - begin_);]
[list:end]
[exit:description]

[%@library next[!subrange]]
[codeblock:declaration]
[[nodiscard]] constexpr subrange next(iter_difference_t<I> n = 1) const;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock:notation]
auto tmp = *this;
tmp.advance(n);
return tmp;
[codeblock:end]

[enter:note]
[:en] If [`I] does not model [`forward_iterator], [`next] can invalidate [`*this].
[:zh_CN] 若 [`I] 并不构成 [`forward_iterator]，则 [`next] 将使 [`*this] 失效。
[exit:note]
[exit:description]

[%@library prev[!subrange]]
[codeblock:declaration]
[[nodiscard]] constexpr subrange prev(iter_difference_t<I> n = 1) const
  requires bidirectional_iterator<I>;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock:notation]
auto tmp = *this;
tmp.advance(-n);
return tmp;
[codeblock:end]
[exit:description]

[%@library advance[!subrange]]
[codeblock:declaration]
constexpr subrange& advance(iter_difference_t<I> n);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[list]
[item]
[:en] If [`StoreSize] is [`true],
[:zh_CN] 当 [`StoreSize] 为 [`true] 时，为
[codeblock:notation]
auto d = n - ranges::advance(begin_, n, end_);
if (d >= 0)
  size_ -= [*make-unsigned-like](d);
else
  size_ += [*make-unsigned-like](-d);
return *this;
[codeblock:end]

[item]
[codeblock:notation]
ranges::advance(begin_, n, end_);
return *this;
[codeblock:end]
[list:end]
[exit:description]

[%@library get[!subrange]]
[codeblock:declaration]
template<size_t N, class I, class S, subrange_kind K>
  requires (N < 2)
constexpr auto get(const subrange<I, S, K>& r);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock:notation]
if constexpr (N == 0)
  return r.begin();
else
  return r.end();
[codeblock:end]
[exit:description]
