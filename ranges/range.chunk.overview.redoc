[section#range.chunk.overview
    [:en] Overview
    [:zh_CN] 概述
]

[para]
[:en] [`adjacent_view] takes a [`:c view] and a number [`N] and produces a range
of [`:c view]s that are [`N]-sized non-overlapping successive chunks of the
elements of the original [`:c view], in order.
[:zh_CN] [`adjacent_view] 接受一个 [`:c view] 和一个数值 [`N]，并产生一个
[`:c view] 的范围，它们是原 [`:c view] 的元素的不交叠的 [`N] 大小的连续区段，
保留顺序。

[:en] The last [`:c view] in the range can have fewer than [`N] elements.
[:zh_CN] 范围中的最后一个 [`:c view] 可能少于 [`N] 个元素。

[%@lib@member chunk[!views]]
[para]
[:en] The name [`views::chunk] denotes a range adaptor object
([#range.adaptor.object]).
[:zh_CN] 名字 [`views::chunk] 代表一个范围适配器对象（[#range.adaptor.object]）。

[:en] Given subexpressions [`E] and [`N], the expression [`views::chunk(E, N)]
is expression-equivalent to [`chunk_view(E, N)].
[:zh_CN] 给定子表达式 [`E] 和 [`N]，表达式 [`views::chunk(E, N)] 按表达式等价于
[`chunk_view(E, N)]。

[para@~]
[begin:example]
[codeblock]
vector v = {1, 2, 3, 4, 5};

for (auto r : v | views::chunk(2)) {
  cout << '[';
  auto sep = "";
  for(auto i : r) {
    cout << sep << i;
    sep = ", ";
  }
  cout << "] ";
}
[codeblock:end]
[end:example]

[:en] The above prints: [``[1, 2`] `[3, 4`] `[5`]]
[:zh_CN] 以上代码打印：[``[1, 2`] `[3, 4`] `[5`]]
