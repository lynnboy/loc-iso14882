[section#range.prim.size
    [`ranges::size]
]

[%@lib size]

[para]
[:en] The name [`ranges::size] denotes a customization point object
([#customization.point.object]).
[:zh_CN] 名字 [`ranges::size] 代表一个定制化点（[#customization.point.object]）。

[para]
[:en] Given a subexpression [`E] with type [`T], let [`t] be an lvalue that
denotes the reified object for [`E].
[:zh_CN] 给定一个类型为 [`T] 的子表达式 [`E]，令 [`t] 为一个代表 [`E] 的具象化
对象的左值。

[:en] Then:
[:zh_CN] 则有：

[list]
[item]
[:en] If [`T] is an array of unknown bound ([#dcl.array]), [`ranges::size(E)] is
ill-formed.
[:zh_CN] 若 [`T] 为未知边界的数组类型（[#dcl.array]），则 [`ranges::size(E)]
非良构。

[item]
[:en] Otherwise, if [`T] is an array type, [`ranges::size(E)] is
expression-equivalent to [`[^decay-copy](extent_v<T>)].
[:zh_CN] 否则，若 [`T] 为数组类型，则 [`ranges::size(E)] 按表达式等价于
[`[^decay-copy](extent_v<T>)]。

[item]
[:en] Otherwise, if [`disable_sized_range<remove_cv_t<T>>] ([#range.sized]) is
[`false] and [`[^decay-copy](t.size())] is a valid expression of integer-like
type ([#iterator.concept.winc]), [`ranges::size(E)] is expression-equivalent to
[`[^decay-copy](t.size())].
[:zh_CN] 否则，若 [`disable_sized_range<remove_cv_t<T>>]（[#range.sized]）为
[`false]，且 [`[^decay-copy](E.size())] 为整数式类型（[#iterator.concept.winc]）
的有效表达式，则 [`ranges::size(E)] 按表达式等价于 [`[^decay-copy](t.size())]。

[item]
[:en] Otherwise, if [`T] is a class or enumeration type,
[`disable_sized_range<remove_cv_t<T>>] is [`false] and [`[^decay-copy](size(t))]
is a valid expression of integer-like type with overload resolution performed in
a context in which unqualified lookup for [`size] finds only the declarations
[:zh_CN] 否则，若 [`T] 为类或枚举类型，且在某个对 [`size] 进行无限定查找仅会找到
以下声明式的语境中进行重载决议的条件下 [`[^decay-copy](size(t))] 为整数式类型
的有效表达式，
[codeblock]
void size(auto&) = delete;
void size(const auto&) = delete;
[codeblock:end]
[:en@~] then [`ranges::size(E)] is expression-equivalent to
[`[^decay-copy](size(t))] with overload resolution performed in the above
context.
[:zh_CN@~] 则 [`ranges::size(E)] 在上述语境中进行重载决议的条件下按表达式等价于
[`[^decay-copy](size(t))]。

[item]
[:en] Otherwise, if [`[^to-unsigned-like](ranges::end(t) - ranges::begin(t))]
([#ranges.syn]) is a valid expression and the types [`I] and [`S] of
[`ranges::begin(t)] and [`ranges::end(t)] (respectively) model both
[`[`:c sized_sentinel_for]<S, I>] ([#iterator.concept.sizedsentinel]) and
[`[`:c forward_iterator]<I>], then [`ranges::size(E)] is expression-equivalent
to [`[^to-unsigned-like](ranges::end(t) - ranges::begin(t))].
[:zh_CN] 否则，若 [`[^to-unsigned-like](ranges::end(t) - ranges::begin(t))]
（[#ranges.syn]）为有效表达式，且 [`ranges::begin(t)] 和 [`ranges::end(t)] 各自
的类型 [`I] 和 [`S] 同时构成 [`[`:c sized_sentinel_for]<S, I>]
（[#iterator.concept.sizedsentinel]）和 [`[`:c forward_iterator]<I>]，则
[`ranges::size(E)] 按表达式等价于
[`[^to-unsigned-like](ranges::end(t) - ranges::begin(t))]。

[item]
[:en] Otherwise, [`ranges::size(E)] is ill-formed.
[:zh_CN] 否则，[`ranges::size(E)] 非良构。
[list:end]

[para]
[begin:note]
[:en] Diagnosable ill-formed cases above result in substitution failure when
[`ranges::size(E)] appears in the immediate context of a template instantiation.
[:zh_CN] 以上各种可诊断的非良构情况，当 [`ranges::size(E)] 出现在某个模板实例化
的直接语境中时会导致替换失败。
[end:note]

[para]
[begin:note]
[:en] Whenever [`ranges::size(E)] is a valid expression, its type is
integer-like.
[:zh_CN] 只要 [`ranges::size(E)] 是有效表达式，则其类型就是整数式类型。
[end:note]
