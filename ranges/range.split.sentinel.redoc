[section#range.split.sentinel
    [:en] Class [`split_view::[*sentinel]]
    [:zh_CN] 类 [`split_view::[*sentinel]]
]

[%@lib split_view::[*sentinel]]
[codeblock:synopsis]
namespace std::ranges {
  template<[[redoc("`:c>")]]forward_range V, [[redoc("`:c>")]]forward_range Pattern>
    requires [[redoc("`:c>")]]view<V> && [[redoc("`:c>")]]view<Pattern> &&
             [[redoc("`:c>")]]indirectly_comparable<iterator_t<V>, iterator_t<Pattern>, ranges::equal_to>
  struct split_view<V, Pattern>::[[redoc("*>")]]sentinel {
  private:
    sentinel_t<V> [[redoc("*>")]]end_ = sentinel_t<V>();               // [=expos]

  public:
    [[redoc("*>")]]sentinel() = default;
    constexpr explicit [[redoc("*>")]]sentinel(split_view& parent);

    friend constexpr bool operator==(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]sentinel& y);
  };
}
[codeblock:end]

[%@lib@ctor split_view::[*sentinel]]
[codeblock:declaration]
constexpr explicit [[redoc("*>")]]sentinel(split_view& parent);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*end_] with [`ranges::end(parent.[*base_])].
[:zh_CN] 以 [`ranges::end(parent.[*base_])] 初始化 [*end_]。
[div:end]

[%@lib@member operator==[!split_view::[*sentinel]]]
[codeblock:declaration]
friend constexpr bool operator==(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]sentinel& y);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return x.[*cur_] == y.[*end_] && !x.[*trailing_empty_];]
[:zh_CN] 等价于：[`return x.[*cur_] == y.[*end_] && !x.[*trailing_empty_];]
[div:end]
