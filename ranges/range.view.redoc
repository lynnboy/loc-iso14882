[section#range.view
    [:en] Views
    [:zh_CN] 视图
]

[para]
[:en] The [`:c view] concept specifies the requirements of a [`:c range] type
that has constant time move construction, move assignment, and destruction;
that is, the cost of these operations is independent of the number of elements
in the [`:c view].
[:zh_CN] [`:c view] 概念指定针对某个 [`:c range] 类型的规定，其具有常量时间的
移动构造、移动赋值和销毁；就是说，这些操作的成本与 [`:c view] 中的元素数量无关。

[codeblock:declaration]
template<class T>
  concept [[redoc("`:c@def>")]]view =
    [[redoc("`:c>")]]range<T> && [[redoc("`:c>")]]movable<T> && enable_view<T>;
[codeblock:end]

[div:description]
[para]
[:en] [`T] models [`:c view] only if:
[:zh_CN] 仅当满足以下条件时，[`T] 构成 [`:c view]：

[list]
[item]
[:en@~] [`T] has [?bigoh 1] move construction; and
[:zh_CN@~] [`T] 具有 [?bigoh 1] 的移动构造；且
[item]
[:en@~] [`T] has [?bigoh 1] move assignment; and
[:zh_CN@~] [`T] 具有 [?bigoh 1] 的移动赋值；且
[item]
[:en@~] [`T] has [?bigoh 1] destruction; and
[:zh_CN@~] [`T] 具有 [?bigoh 1] 的销毁；且
[item]
[:en@~] [`[`:c copy_constructible]<T>] is [`false], or [`T] has [?bigoh 1] copy
construction; and
[:zh_CN@~] [`[`:c copy_constructible]<T>] 为 [`false]，或者 [`T] 具有 [?bigoh 1]
的复制构造；且
[item]
[:en@~] [`[`:c copyable]<T>] is [`false], or [`T] has [?bigoh 1] copy assignment.
[:zh_CN@~] [`[`:c copyable]<T>] 为 [`false]，或者 [`T] 具有 [?bigoh 1] 的复制赋值。
[list:end]

[para]
[begin:example]
[:en] Examples of [`:c view]s are:
[:zh_CN] [`:c view] 的例子包括：

[list]
[item]
[:en] A [`:c range] type that wraps a pair of iterators.
[:zh_CN] 包装一对迭代器的 [`:c range] 类型。
[item]
[:en] A [`:c range] type that holds its elements by [`shared_ptr] and shares
ownership with all its copies.
[:zh_CN] 通过 [`shared_ptr] 持有其各个元素并与它的所有其他副本共享所有权的
[`:c range] 类型。
[item]
[:en] A [`:c range] type that generates its elements on demand.
[:zh_CN] 按需生成元素的 [`:c range] 类型。
[list:end]

[:en] Most containers ([#containers]) are not views since destruction of the
container destroys the elements, which cannot be done in constant time.
[:zh_CN] 大多数容器（[#containers]）都不是视图，因为容器的销毁都要销毁其元素，而
这无法在常量时间内完成。
[end:example]
[div:end]

[para]
[:en] Since the difference between [`:c range] and [`:c view] is largely
semantic, the two are differentiated with the help of [`enable_view].
[:zh_CN] 由于 [`:c range] 和 [`:c view] 之间的差别很大程度上是语义上的，所以借助
[`enable_view] 来区分二者。

[%@lib enable_view]
[codeblock:declaration]
template<class T>
  inline constexpr bool [[redoc("*>")]]is-derived-from-view-interface = [[redoc("[=seebelow]")]];     // [=expos]
template<class T>
  inline constexpr bool enable_view =
    [[redoc("`:c>")]]derived_from<T, view_base> || [[redoc("*>")]]is-derived-from-view-interface<T>;
[codeblock:end]

[div:description]
[para]
[:en] For a type [`T], [`[*is-derived-from-view-interface]<T>] is [`true] if and
only if [`T] has exactly one public base class [`view_interface<U>] for some
type [`U] and [`T] has no base classes of type [`view_interface<V>] for any
other type [`V].
[:zh_CN] 对于类型 [`T]，当且仅当 [`T] 对于某个类型 [`U] 刚好具有一个公开基类
[`view_interface<U>]，且对于任何其他类型 [`V]，[`T] 都没有 [`view_interface<V>]
类型的基类时，[`[*is-derived-from-view-interface]<T>] 为 [`true]。

[para:remarks]
[:en] Pursuant to [#namespace.std], users may specialize [`enable_view] to
[`true] for cv-unqualified program-defined types which model [`:c view], and
[`false] for types which do not.
[:zh_CN] 根据 [#namespace.std]，用户可以针对无 cv 限定的程序定义类型中构成
[`:c view] 的类型将 [`enable_view] 特化为 [`true]，而为并非如此的类型特化为
[`false]。

[:en] Such specializations shall be usable in constant expressions ([#expr.const])
and have type [`const bool].
[:zh_CN] 这些特例应当可以在常量表达式（[#expr.const]）中使用，并具有类型
[`const bool]。
[div:end]
