[section#range.prim.empty
    [`ranges::empty]
]

[%@lib empty]

[para]
[:en] The name [`ranges::empty] denotes a customization point object
([#customization.point.object]).
[:zh_CN] 名字 [`ranges::empty] 代表一个定制化点（[#customization.point.object]）。

[para]
[:en] Given a subexpression [`E] with type [`T], let [`t] be an lvalue that
denotes the reified object for [`E].
[:zh_CN] 给定一个类型为 [`T] 的子表达式 [`E]，令 [`t] 为一个代表 [`E] 的具象化
对象的左值。

[:en] Then:
[:zh_CN] 则有：

[list]
[item]
[:en] If [`T] is an array of unknown bound ([#dcl.array]), [`ranges::empty(E)]
is ill-formed.
[:zh_CN] 若 [`T] 为未知边界的数组类型（[#dcl.array]），则 [`ranges::empty(E)]
非良构。

[item]
[:en] [`bool((E).empty())] if it is a valid expression.
[:zh_CN] 若 [`bool((E).empty())] 为有效表达式则为该表达式。

[item]
[:en] Otherwise, if [`(ranges::size(t) == 0)] is a valid expression,
[`ranges::empty(E)] is expression-equivalent to [`(ranges::size(t) == 0)].
[:zh_CN] 否则，若 [`(ranges::size(t) == 0)] 为有效表达式，则 [`ranges::empty(E)]
按表达式等价于 [`(ranges::size(t) == 0)]。

[item]
[:en] Otherwise, if [`bool(ranges::begin(t) == ranges::end(t))] is a valid
expression and the type of [`ranges::begin(t)] models [`:c forward_iterator],
[`ranges::empty(E)] is expression-equivalent to
[`bool(ranges::begin(t) == ranges::end(t))].
[:zh_CN] 否则，若 [`bool(ranges::begin(t) == ranges::end(t))] 为有效表达式，且
[`ranges::begin(E)] 的类型构成 [`:c forward_iterator]，则 [`ranges::empty(E)]
按表达式等价于 [`bool(ranges::begin(t) == ranges::end(t))]。

[item]
[:en] Otherwise, [`ranges::empty(E)] is ill-formed.
[:zh_CN] 否则，[`ranges::empty(E)] 非良构。
[list:end]

[para]
[begin:note]
[:en] Diagnosable ill-formed cases above result in substitution failure when
[`ranges::empty(E)] appears in the immediate context of a template instantiation.
[:zh_CN] 以上各种可诊断的非良构情况，当 [`ranges::empty(E)] 出现在某个模板实例化
的直接语境中时会导致代换失败。
[end:note]

[para]
[begin:note]
[:en] Whenever [`ranges::empty(E)] is a valid expression, it has type [`bool].
[:zh_CN] 只要 [`ranges::empty(E)] 是有效表达式，其类型就为 [`bool]。
[end:note]
