[section#range.elements.view
    [:en] Class template [`elements_view]
    [:zh_CN] 类模板 [`elements_view]
]

[%@lib elements_view]
[%@lib@member base[!elements_view]]
[%@lib@member begin[!elements_view]]
[%@lib@member end[!elements_view]]
[%@lib@member size[!elements_view]]
[codeblock:synopsis]
namespace std::ranges {
  template<class T, size_t N>
  concept [[redoc("*:c@def>")]]has-tuple-element =                   // [=expos]
    requires(T t) {
      typename tuple_size<T>::type;
      requires N < tuple_size_v<T>;
      typename tuple_element_t<N, T>;
      { std::get<N>(t) } -> [[redoc("`:c>")]]convertible_to<const tuple_element_t<N, T>&>;
    };

  template<class T, size_t N>
  concept [[redoc("*:c@def>")]]returnable-element =                  // [=expos]
    is_reference_v<T> || move_constructible<tuple_element_t<N, T>>;

  template<[[redoc("`:c>")]]input_range V, size_t N>
    requires [[redoc("`:c>")]]view<V> && [[redoc("*:c>")]]has-tuple-element<range_value_t<V>, N> &&
             [[redoc("*:c>")]]has-tuple-element<remove_reference_t<range_reference_t<V>>, N> &&
             [[redoc("*:c>")]]returnable-element<range_reference_t<V>, N>
  class elements_view : public view_interface<elements_view<V, N>> {
  public:
    elements_view() requires [[redoc("`:c>")]]default_initializable<V> = default;
    constexpr explicit elements_view(V base);

    constexpr V base() const& requires [[redoc("`:c>")]]copy_constructible<V> { return [[redoc("*>")]]base_; }
    constexpr V base() && { return std::move([[redoc("*>")]]base_); }

    constexpr auto begin() requires (![[redoc("*:c>")]]simple-view<V>)
    { return [[redoc("*>")]]iterator<false>(ranges::begin([[redoc("*>")]]base_)); }

    constexpr auto begin() const requires [[redoc("`:c>")]]range<const V>
    { return [[redoc("*>")]]iterator<true>(ranges::begin([[redoc("*>")]]base_)); }

    constexpr auto end() requires (![[redoc("*:c>")]]simple-view<V> && ![[redoc("`:c>")]]common_range<V>)
    { return [[redoc("*>")]]sentinel<false>{ranges::end([[redoc("*>")]]base_)}; }

    constexpr auto end() requires (![[redoc("*:c>")]]simple-view<V> && [[redoc("`:c>")]]common_range<V>)
    { return [[redoc("*>")]]iterator<false>{ranges::end([[redoc("*>")]]base_)}; }

    constexpr auto end() const requires [[redoc("`:c>")]]range<const V>
    { return [[redoc("*>")]]sentinel<true>{ranges::end([[redoc("*>")]]base_)}; }

    constexpr auto end() const requires [[redoc("`:c>")]]common_range<const V>
    { return [[redoc("*>")]]iterator<true>{ranges::end([[redoc("*>")]]base_)}; }

    constexpr auto size() requires [[redoc("`:c>")]]sized_range<V>
    { return ranges::size([[redoc("*>")]]base_); }

    constexpr auto size() const requires [[redoc("`:c>")]]sized_range<const V>
    { return ranges::size([[redoc("*>")]]base_); }

  private:
    // [:en] [#range.elements.iterator], class template [`elements_view::[^iterator]] \
    [:zh_CN] [#range.elements.iterator]，类模板 [`elements_view::[^iterator]]
    template<bool> struct [[redoc("*>")]]iterator;                     // [=expos]
    // [:en] [#range.elements.sentinel], class template [`elements_view::[^sentinel]] \
    [:zh_CN] [#range.elements.sentinel]，类模板 [`elements_view::[^sentinel]]
    template<bool> struct [[redoc("*>")]]sentinel;
    V [[redoc("*>")]]base_ = V();                                      // [=expos]
  };
}
[codeblock:end]

[%@lib@ctor elements_view]
[codeblock:declaration]
constexpr explicit elements_view(V base);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*base_] with [`std::move(base)].
[:zh_CN] 以 [`std::move(base)] 初始化 [*base_]。
[div:end]
