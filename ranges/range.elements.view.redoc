[section#range.elements.view
    [:en] Class template [`elements_view]
    [:zh_CN] 类模板 [`elements_view]
]

[%@lib elements_view]
[%@lib@member base[!elements_view]]
[%@lib@member begin[!elements_view]]
[%@lib@member end[!elements_view]]
[%@lib@member size[!elements_view]]
[codeblock:synopsis]
namespace std::ranges {
  template<class T, size_t N>
  concept [[redoc("*:c@def>")]]has-tuple-element =                   // [=expos]
    requires(T t) {
      typename tuple_size<T>::type;
      requires N < tuple_size_v<T>;
      typename tuple_element_t<N, T>;
      { get<N>(t) } -> const tuple_element_t<N, T>&;
    };


  template<input_range V, size_t N>
    requires view<V> && [[redoc("^>")]]has-tuple-element<range_value_t<V>, N> &&
      [[redoc("^>")]]has-tuple-element<remove_reference_t<range_reference_t<V>>, N>
  class elements_view : public view_interface<elements_view<V, N>> {
  public:
    elements_view() = default;
    constexpr explicit elements_view(V base);

    constexpr V base() const& requires copy_constructible<V> { return base_; }
    constexpr V base() && { return std::move(base_); }

    constexpr auto begin() requires (![[redoc("^>")]]simple-view<V>)
    { return iterator<false>(ranges::begin(base_)); }

    constexpr auto begin() const requires [[redoc("^>")]]simple-view<V>
    { return iterator<true>(ranges::begin(base_)); }

    constexpr auto end() requires (![[redoc("^>")]]simple-view<V>)
    { return ranges::end(base_); }

    constexpr auto end() const requires [[redoc("^>")]]simple-view<V>
    { return ranges::end(base_); }

    constexpr auto size() requires sized_range<V>
    { return ranges::size(base_); }

    constexpr auto size() const requires sized_range<const V>
    { return ranges::size(base_); }

  private:
    template<bool> struct iterator;                     // [=expos]
    V base_ = V();                                      // [=expos]
  };
}
[codeblock:end]

[%@lib@ctor elements_view]
[codeblock:declaration]
constexpr explicit elements_view(V base);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [`base_] with [`std::move(base)].
[:zh_CN] 以 [`std::move(base)] 初始化 [`base_]。
[div:end]
