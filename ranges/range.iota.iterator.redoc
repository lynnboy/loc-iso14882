[section#range.iota.iterator
    [:en] Class [`iota_view::iterator]
    [:zh_CN] 类 [`iota_view::iterator]
]

[codeblock:synopsis [!:var Advanceable Decrementable]]
namespace std::ranges {
  template<class W, class Bound>
  struct iota_view<W, Bound>::iterator {
  private:
    W value_ = W();             // [=Expos]
  public:
    using iterator_category = [=SeeBelow];
    using value_type = W;
    using difference_type = [*IOTA-DIFF-T](W);

    iterator() = default;
    constexpr explicit iterator(W value);

    constexpr W operator*() const noexcept(is_nothrow_copy_constructible_v<W>);

    constexpr iterator& operator++();
    constexpr void operator++(int);
    constexpr iterator operator++(int) requires incrementable<W>;

    constexpr iterator& operator--() requires [*decrementable]<W>;
    constexpr iterator operator--(int) requires [*decrementable]<W>;

    constexpr iterator& operator+=(difference_type n)
      requires [*advanceable]<W>;
    constexpr iterator& operator-=(difference_type n)
      requires [*advanceable]<W>;
    constexpr W operator[](difference_type n) const
      requires [*advanceable]<W>;

    friend constexpr bool operator==(const iterator& x, const iterator& y)
      requires equality_comparable<W>;

    friend constexpr bool operator<(const iterator& x, const iterator& y)
      requires totally_ordered<W>;
    friend constexpr bool operator>(const iterator& x, const iterator& y)
      requires totally_ordered<W>;
    friend constexpr bool operator<=(const iterator& x, const iterator& y)
      requires totally_ordered<W>;
    friend constexpr bool operator>=(const iterator& x, const iterator& y)
      requires totally_ordered<W>;
    friend constexpr compare_three_way_result_t<W> operator<=>(
        const iterator& x, const iterator& y)
      requires totally_ordered<W> && three_way_comparable<W>;

    friend constexpr iterator operator+(iterator i, difference_type n)
      requires [*advanceable]<W>;
    friend constexpr iterator operator+(difference_type n, iterator i)
      requires [*advanceable]<W>;

    friend constexpr iterator operator-(iterator i, difference_type n)
      requires [*advanceable]<W>;
    friend constexpr difference_type operator-(const iterator& x, const iterator& y)
      requires [*advanceable]<W>;
  };
}
[codeblock:end]

[para]
[:en] [`iterator::iterator_category] is defined as follows:
[:zh_CN] [`iterator::iterator_category] 的定义如下：

[list]
[item]
[:en] If [`W] models [`[*advanceable]], then [`iterator_category] is
[`random_access_iterator_tag].
[:zh_CN] 若 [`W] 构成 [`[*advanceable]]，则 [`iterator_category] 为
[`random_access_iterator_tag]。

[item]
[:en] Otherwise, if [`W] models [`[*decrementable]], then [`iterator_category]
is [`bidirectional_iterator_tag].
[:zh_CN] 否则，若 [`W] 构成 [`[*decrementable]]，则 [`iterator_category] 为
[`bidirectional_iterator_tag]。

[item]
[:en] Otherwise, if [`W] models [`incrementable], then [`iterator_category]
is [`forward_iterator_tag].
[:zh_CN] 否则，若 [`W] 构成 [`incrementable]，则 [`iterator_category] 为
[`forward_iterator_tag]。

[item]
[:en] Otherwise, [`iterator_category] is [`input_iterator_tag].
[:zh_CN] 否则，[`iterator_category] 为 [`input_iterator_tag]。
[list:end]

[para]
[begin:note]
[:en] Overloads for [`iter_move] and [`iter_swap] are omitted intentionally.
[:zh_CN] 有意忽略了对 [`iter_move] 和 [`iter_swap] 的重载。
[end:note]

[%@library iterator[!iota_view::iterator]]
[codeblock:declaration]
constexpr explicit iterator(W value);
[codeblock:end]

[begin:description]
[para:effects]
[:en] Initializes [`value_] with [`value].
[:zh_CN] 以 [`value] 初始化 [`value_]。
[end:description]

[%@library operator*[!iota_view::iterator]]
[codeblock:declaration]
constexpr W operator*() const noexcept(is_nothrow_copy_constructible_v<W>);
[codeblock:end]

[begin:description]
[para:effects]
[:en] Equivalent to: [`return value_;]
[:zh_CN] 等价于：[`return value_;]

[para]
[begin:note]
[:en] The [`noexcept] clause is needed by the default [`iter_move]
implementation.
[:zh_CN] [`noexcept] 子句是由于 [`iter_move] 的默认实现所需要的。
[end:note]
[end:description]

[%@library operator++[!iota_view::iterator]]
[codeblock:declaration]
constexpr iterator& operator++();
[codeblock:end]

[begin:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock:notation]
++value_;
return *this;
[codeblock:end]
[end:description]

[%@library operator++[!iota_view::iterator]]
[codeblock:declaration]
constexpr void operator++(int);
[codeblock:end]

[begin:description]
[para:effects]
[:en] Equivalent to: [`++*this].
[:zh_CN] 等价于：[`++*this]。
[end:description]

[%@library operator++[!iota_view::iterator]]
[codeblock:declaration]
constexpr iterator operator++(int) requires incrementable<W>;
[codeblock:end]

[begin:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock:notation]
auto tmp = *this;
++*this;
return tmp;
[codeblock:end]
[end:description]

[%@library operator--[!iota_view::iterator]]
[codeblock:declaration [!:var decrementable]]
constexpr iterator& operator--() requires [*decrementable]<W>;
[codeblock:end]

[begin:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock:notation]
--value_;
return *this;
[codeblock:end]
[end:description]

[%@library operator--[!iota_view::iterator]]
[codeblock:declaration [!:var decrementable]]
constexpr iterator operator--(int) requires [*decrementable]<W>;
[codeblock:end]

[begin:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock:notation]
auto tmp = *this;
--*this;
return tmp;
[codeblock:end]
[end:description]

[%@library operator+=[!iota_view::iterator]]
[codeblock:declaration [!:var advanceable]]
constexpr iterator& operator+=(difference_type n)
  requires [*advanceable]<W>;
[codeblock:end]

[begin:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock:notation]
if constexpr ([*is-integer-like]<W> && ![*is-signed-integer-like]<W>) {
  if (n >= difference_type(0))
    value_ += static_cast<W>(n);
  else
    value_ -= static_cast<W>(-n);
} else {
  value_ += n;
}
return *this;
[codeblock:end]
[end:description]

[%@library operator-=[!iota_view::iterator]]
[codeblock:declaration [!:var advanceable]]
constexpr iterator& operator-=(difference_type n)
  requires [*advanceable]<W>;
[codeblock:end]

[begin:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock:notation]
if constexpr ([*is-integer-like]<W> && ![*is-signed-integer-like]<W>) {
  if (n >= difference_type(0))
    value_ -= static_cast<W>(n);
  else
    value_ += static_cast<W>(-n);
} else {
  value_ -= n;
}
return *this;
[codeblock:end]
[end:description]

[%@library operator`[`][!iota_view::iterator]]
[codeblock:declaration [!:var advanceable]]
constexpr W operator[](difference_type n) const
  requires [*advanceable]<W>;
[codeblock:end]

[begin:description]
[para:effects]
[:en] Equivalent to: [`return W(value_ + n);]
[:zh_CN] 等价于：[`return W(value_ + n);]
[end:description]

[%@library operator==[!iota_view::iterator]]
[codeblock:declaration]
friend constexpr bool operator==(const iterator& x, const iterator& y)
  requires equality_comparable<W>;
[codeblock:end]

[begin:description]
[para:effects]
[:en] Equivalent to: [`return x.value_ == y.value_;]
[:zh_CN] 等价于：[`return x.value_ == y.value_;]
[end:description]

[%@library operator<[!iota_view::iterator]]
[codeblock:declaration]
friend constexpr bool operator<(const iterator& x, const iterator& y)
  requires totally_ordered<W>;
[codeblock:end]

[begin:description]
[para:effects]
[:en] Equivalent to: [`return x.value_ < y.value_;]
[:zh_CN] 等价于：[`return x.value_ < y.value_;]
[end:description]

[%@library operator>[!iota_view::iterator]]
[codeblock:declaration]
friend constexpr bool operator>(const iterator& x, const iterator& y)
  requires totally_ordered<W>;
[codeblock:end]

[begin:description]
[para:effects]
[:en] Equivalent to: [`return y < x;]
[:zh_CN] 等价于：[`return y < x;]
[end:description]

[%@library operator<=[!iota_view::iterator]]
[codeblock:declaration]
friend constexpr bool operator<=(const iterator& x, const iterator& y)
  requires totally_ordered<W>;
[codeblock:end]

[begin:description]
[para:effects]
[:en] Equivalent to: [`return !(y < x);]
[:zh_CN] 等价于：[`return !(y < x);]
[end:description]

[%@library operator>=[!iota_view::iterator]]
[codeblock:declaration]
friend constexpr bool operator>=(const iterator& x, const iterator& y)
  requires totally_ordered<W>;
[codeblock:end]

[begin:description]
[para:effects]
[:en] Equivalent to: [`return !(x < y);]
[:zh_CN] 等价于：[`return !(x < y);]
[end:description]

[%@library operator<=>[!iota_view::iterator]]
[codeblock:declaration]
friend constexpr compare_three_way_result_t<W>
  operator<=>(const iterator& x, const iterator& y)
    requires totally_ordered<W> && three_way_comparable<W>;
[codeblock:end]

[begin:description]
[para:effects]
[:en] Equivalent to: [`return x.value_ <=> y.value_;]
[:zh_CN] 等价于：[`return x.value_ <=> y.value_;]
[end:description]

[%@library operator+[!iota_view::iterator]]
[codeblock:declaration [!:var advanceable]]
friend constexpr iterator operator+(iterator i, difference_type n)
  requires [*advanceable]<W>;
[codeblock:end]

[begin:description]
[para:effects]
[:en] Equivalent to: [`return i += n;]
[:zh_CN] 等价于：[`return i += n;]
[end:description]

[%@library operator+[!iota_view::iterator]]
[codeblock:declaration [!:var advanceable]]
friend constexpr iterator operator+(difference_type n, iterator i)
  requires [*advanceable]<W>;
[codeblock:end]

[begin:description]
[para:effects]
[:en] Equivalent to: [`return i + n;]
[:zh_CN] 等价于：[`return i + n;]
[end:description]

[%@library operator-[!iota_view::iterator]]
[codeblock:declaration [!:var advanceable]]
friend constexpr iterator operator-(iterator i, difference_type n)
  requires [*advanceable]<W>;
[codeblock:end]

[begin:description]
[para:effects]
[:en] Equivalent to: [`return i -= n;]
[:zh_CN] 等价于：[`return i -= n;]
[end:description]

[%@library operator-[!iota_view::iterator]]
[codeblock:declaration [!:var advanceable]]
friend constexpr difference_type operator-(const iterator& x, const iterator& y)
  requires [*advanceable]<W>;
[codeblock:end]

[begin:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock:notation]
using D = difference_type;
if constexpr ([*is-integer-like]<W>) {
  if constexpr ([*is-signed-integer-like]<W>)
    return D(D(x.value_) - D(y.value_));
  else
    return (y.value_ > x.value_)
      ? D(-D(y.value_ - x.value_))
      : D(x.value_ - y.value_);
} else {
  return x.value_ - y.value_;
}
[codeblock:end]
[end:description]
