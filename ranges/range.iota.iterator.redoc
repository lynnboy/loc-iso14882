[section#range.iota.iterator
    [:en] Class [`iota_view::[*iterator]]
    [:zh_CN] 类 [`iota_view::[*iterator]]
]

[%@lib iota_view::iterator]
[codeblock:synopsis]
namespace std::ranges {
  template<[[redoc("`:c>")]]weakly_incrementable W, [[redoc("`:c>")]]semiregular Bound>
    requires [[redoc("*:c>")]]weakly-equality-comparable-with<W, Bound> && [[redoc("`:c>")]]semiregular<W>
  struct iota_view<W, Bound>::[[redoc("*>")]]iterator {
  private:
    W [[redoc("*>")]]value_ = W();             // [=expos]
  public:
    using iterator_concept = [[redoc("[=seebelow]")]];
    using iterator_category = input_iterator_tag;       // [:en] present only if [`W] models [`:c incrementable] \
                                                        [:zh_CN] 仅当 [`W] 构成 [`:c incrementable] 时出现
    using value_type = W;
    using difference_type = [[redoc("^>")]]IOTA-DIFF-T(W);

    [[redoc("*>")]]iterator() = default;
    constexpr explicit [[redoc("*>")]]iterator(W value);

    constexpr W operator*() const noexcept(is_nothrow_copy_constructible_v<W>);

    constexpr [[redoc("*>")]]iterator& operator++();
    constexpr void operator++(int);
    constexpr [[redoc("*>")]]iterator operator++(int) requires [[redoc("`:c>")]]incrementable<W>;

    constexpr [[redoc("*>")]]iterator& operator--() requires [[redoc("*:c>")]]decrementable<W>;
    constexpr [[redoc("*>")]]iterator operator--(int) requires [[redoc("*:c>")]]decrementable<W>;

    constexpr [[redoc("*>")]]iterator& operator+=(difference_type n)
      requires [[redoc("*:c>")]]advanceable<W>;
    constexpr [[redoc("*>")]]iterator& operator-=(difference_type n)
      requires [[redoc("*:c>")]]advanceable<W>;
    constexpr W operator[](difference_type n) const
      requires [[redoc("*:c>")]]advanceable<W>;

    friend constexpr bool operator==(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
      requires [[redoc("`:c>")]]equality_comparable<W>;

    friend constexpr bool operator<(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
      requires [[redoc("`:c>")]]totally_ordered<W>;
    friend constexpr bool operator>(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
      requires [[redoc("`:c>")]]totally_ordered<W>;
    friend constexpr bool operator<=(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
      requires [[redoc("`:c>")]]totally_ordered<W>;
    friend constexpr bool operator>=(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
      requires [[redoc("`:c>")]]totally_ordered<W>;
    friend constexpr auto operator<=>(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
      requires [[redoc("`:c>")]]totally_ordered<W> && [[redoc("`:c>")]]three_way_comparable<W>;

    friend constexpr [[redoc("*>")]]iterator operator+([[redoc("*>")]]iterator i, difference_type n)
      requires [[redoc("*:c>")]]advanceable<W>;
    friend constexpr [[redoc("*>")]]iterator operator+(difference_type n, [[redoc("*>")]]iterator i)
      requires [[redoc("*:c>")]]advanceable<W>;

    friend constexpr [[redoc("*>")]]iterator operator-([[redoc("*>")]]iterator i, difference_type n)
      requires [[redoc("*:c>")]]advanceable<W>;
    friend constexpr difference_type operator-(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
      requires [[redoc("*:c>")]]advanceable<W>;
  };
}
[codeblock:end]

[para]
[:en] [`[*iterator]::iterator_concept] is defined as follows:
[:zh_CN] [`[*iterator]::iterator_concept] 的定义如下：

[list]
[item]
[:en] If [`W] models [*:c advanceable], then [`iterator_concept] is
[`random_access_iterator_tag].
[:zh_CN] 若 [`W] 构成 [*:c advanceable]，则 [`iterator_concept] 为
[`random_access_iterator_tag]。

[item]
[:en] Otherwise, if [`W] models [*:c decrementable], then [`iterator_concept]
is [`bidirectional_iterator_tag].
[:zh_CN] 否则，若 [`W] 构成 [*:c decrementable]，则 [`iterator_concept] 为
[`bidirectional_iterator_tag]。

[item]
[:en] Otherwise, if [`W] models [`:c incrementable], then [`iterator_concept]
is [`forward_iterator_tag].
[:zh_CN] 否则，若 [`W] 构成 [`:c incrementable]，则 [`iterator_concept] 为
[`forward_iterator_tag]。

[item]
[:en] Otherwise, [`iterator_concept] is [`input_iterator_tag].
[:zh_CN] 否则，[`iterator_concept] 为 [`input_iterator_tag]。
[list:end]

[para]
[begin:note]
[:en] Overloads for [`iter_move] and [`iter_swap] are omitted intentionally.
[:zh_CN] 有意忽略了对 [`iter_move] 和 [`iter_swap] 的重载。
[end:note]

[%@lib@ctor iota_view::iterator]
[codeblock:declaration]
constexpr explicit [[redoc("*>")]]iterator(W value);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*value_] with [`value].
[:zh_CN] 以 [`value] 初始化 [*value_]。
[div:end]

[%@lib@member operator*[!iota_view::iterator]]
[codeblock:declaration]
constexpr W operator*() const noexcept(is_nothrow_copy_constructible_v<W>);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return [*value_];]
[:zh_CN] 等价于：[`return [*value_];]

[para]
[begin:note]
[:en] The [`noexcept] clause is needed by the default [`iter_move]
implementation.
[:zh_CN] [`noexcept] 子句是由于 [`iter_move] 的默认实现所需要的。
[end:note]
[div:end]

[%@lib@member operator++[!iota_view::iterator]]
[codeblock:declaration]
constexpr [[redoc("*>")]]iterator& operator++();
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
++[[redoc("*>")]]value_;
return *this;
[codeblock:end]
[div:end]

[%@lib@member operator++[!iota_view::iterator]]
[codeblock:declaration]
constexpr void operator++(int);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`++*this].
[:zh_CN] 等价于：[`++*this]。
[div:end]

[%@lib@member operator++[!iota_view::iterator]]
[codeblock:declaration]
constexpr [[redoc("*>")]]iterator operator++(int) requires [[redoc("`:c>")]]incrementable<W>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
auto tmp = *this;
++*this;
return tmp;
[codeblock:end]
[div:end]

[%@lib@member operator--[!iota_view::iterator]]
[codeblock:declaration]
constexpr [[redoc("*>")]]iterator& operator--() requires [[redoc("*:c>")]]decrementable<W>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
--[[redoc("*>")]]value_;
return *this;
[codeblock:end]
[div:end]

[%@lib@member operator--[!iota_view::iterator]]
[codeblock:declaration]
constexpr [[redoc("*>")]]iterator operator--(int) requires [[redoc("*:c>")]]decrementable<W>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
auto tmp = *this;
--*this;
return tmp;
[codeblock:end]
[div:end]

[%@lib@member operator+=[!iota_view::iterator]]
[codeblock:declaration]
constexpr [[redoc("*>")]]iterator& operator+=(difference_type n)
  requires [[redoc("*:c>")]]advanceable<W>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
if constexpr ([[redoc("*>")]]is-integer-like<W> && ![[redoc("*>")]]is-signed-integer-like<W>) {
  if (n >= difference_type(0))
    [[redoc("*>")]]value_ += static_cast<W>(n);
  else
    [[redoc("*>")]]value_ -= static_cast<W>(-n);
} else {
  [[redoc("*>")]]value_ += n;
}
return *this;
[codeblock:end]
[div:end]

[%@lib@member operator-=[!iota_view::iterator]]
[codeblock:declaration]
constexpr [[redoc("*>")]]iterator& operator-=(difference_type n)
  requires [[redoc("*:c>")]]advanceable<W>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
if constexpr ([[redoc("*>")]]is-integer-like<W> && ![[redoc("*>")]]is-signed-integer-like<W>) {
  if (n >= difference_type(0))
    [[redoc("*>")]]value_ -= static_cast<W>(n);
  else
    [[redoc("*>")]]value_ += static_cast<W>(-n);
} else {
  [[redoc("*>")]]value_ -= n;
}
return *this;
[codeblock:end]
[div:end]

[%@lib@member operator`[`][!iota_view::iterator]]
[codeblock:declaration]
constexpr W operator[](difference_type n) const
  requires [[redoc("*:c>")]]advanceable<W>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return W([*value_] + n);]
[:zh_CN] 等价于：[`return W([*value_] + n);]
[div:end]

[%@lib@member operator==[!iota_view::iterator]]
[codeblock:declaration]
friend constexpr bool operator==(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
  requires [[redoc("`:c>")]]equality_comparable<W>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return x.[*value_] == y.[*value_];]
[:zh_CN] 等价于：[`return x.[*value_] == y.[*value_];]
[div:end]

[%@lib@member operator<[!iota_view::iterator]]
[codeblock:declaration]
friend constexpr bool operator<(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
  requires [[redoc("`:c>")]]totally_ordered<W>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return x.[*value_] < y.[*value_];]
[:zh_CN] 等价于：[`return x.[*value_] < y.[*value_];]
[div:end]

[%@lib@member operator>[!iota_view::iterator]]
[codeblock:declaration]
friend constexpr bool operator>(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
  requires [[redoc("`:c>")]]totally_ordered<W>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return y < x;]
[:zh_CN] 等价于：[`return y < x;]
[div:end]

[%@lib@member operator<=[!iota_view::iterator]]
[codeblock:declaration]
friend constexpr bool operator<=(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
  requires [[redoc("`:c>")]]totally_ordered<W>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return !(y < x);]
[:zh_CN] 等价于：[`return !(y < x);]
[div:end]

[%@lib@member operator>=[!iota_view::iterator]]
[codeblock:declaration]
friend constexpr bool operator>=(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
  requires [[redoc("`:c>")]]totally_ordered<W>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return !(x < y);]
[:zh_CN] 等价于：[`return !(x < y);]
[div:end]

[%@lib@member operator<=>[!iota_view::iterator]]
[codeblock:declaration]
friend constexpr auto operator<=>(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
  requires [[redoc("`:c>")]]totally_ordered<W> && [[redoc("`:c>")]]three_way_comparable<W>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return x.[*value_] <=> y.[*value_];]
[:zh_CN] 等价于：[`return x.[*value_] <=> y.[*value_];]
[div:end]

[%@lib@member operator+[!iota_view::iterator]]
[codeblock:declaration]
friend constexpr [[redoc("*>")]]iterator operator+([[redoc("*>")]]iterator i, difference_type n)
  requires [[redoc("*:c>")]]advanceable<W>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return i += n;]
[:zh_CN] 等价于：[`return i += n;]
[div:end]

[%@lib@member operator+[!iota_view::iterator]]
[codeblock:declaration]
friend constexpr [[redoc("*>")]]iterator operator+(difference_type n, [[redoc("*>")]]iterator i)
  requires [[redoc("*:c>")]]advanceable<W>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return i + n;]
[:zh_CN] 等价于：[`return i + n;]
[div:end]

[%@lib@member operator-[!iota_view::iterator]]
[codeblock:declaration]
friend constexpr [[redoc("*>")]]iterator operator-([[redoc("*>")]]iterator i, difference_type n)
  requires [[redoc("*:c>")]]advanceable<W>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return i -= n;]
[:zh_CN] 等价于：[`return i -= n;]
[div:end]

[%@lib@member operator-[!iota_view::iterator]]
[codeblock:declaration]
friend constexpr difference_type operator-(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
  requires [[redoc("*:c>")]]advanceable<W>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
using D = difference_type;
if constexpr ([[redoc("*>")]]is-integer-like<W>) {
  if constexpr ([[redoc("*>")]]is-signed-integer-like<W>)
    return D(D(x.[[redoc("*>")]]value_) - D(y.[[redoc("*>")]]value_));
  else
    return (y.[[redoc("*>")]]value_ > x.[[redoc("*>")]]value_)
      ? D(-D(y.[[redoc("*>")]]value_ - x.[[redoc("*>")]]value_))
      : D(x.[[redoc("*>")]]value_ - y.[[redoc("*>")]]value_);
} else {
  return x.[[redoc("*>")]]value_ - y.[[redoc("*>")]]value_;
}
[codeblock:end]
[div:end]
