[section#range.dangling
    [:en] Dangling iterator handling
    [:zh_CN] 悬挂迭代器处理
]

[para]
[:en]
The tag type [`dangling] is used together with the template aliases
[`borrowed_iterator_t] and [`borrowed_subrange_t].
[:zh_CN]
标签类型 [`dangling] 与模板别名 [`borrowed_iterator_t] 和 [`borrowed_subrange_t]
一起使用。

[:en]
When an algorithm that typically returns an iterator into, or a subrange of,
a range argument is called with an rvalue range argument that does not model
[`:c borrowed_range] ([#range.range]), the return value possibly refers to a
range whose lifetime has ended.
[:zh_CN]
当通常返回某个范围实参之中的迭代器或其子范围的算法，是以某个并未构成
[`:c borrowed_range]（[#range.range]）的右值范围实参调用的，则其所返回的值可能
指代一个生存期已结束的范围。

[:en]
In such cases, the tag type [`dangling] is returned instead of an iterator or
subrange.
[:zh_CN]
这种情况下，会返回标记类型 [`dangling] 代替迭代器或子范围。

[%@lib dangling]
[codeblock:synopsis]
namespace std::ranges {
  struct dangling {
    constexpr dangling() noexcept = default;
    template<class... Args>
      constexpr dangling(Args&&...) noexcept { }
  };
}
[codeblock:end]

[para]
[begin:example]
[codeblock]
vector<int> f();
auto result1 = ranges::find(f(), 42);                                   // #1
static_assert([[redoc("`:c>")]]same_as<decltype(result1), ranges::dangling>);
auto vec = f();
auto result2 = ranges::find(vec, 42);                                   // #2
static_assert([[redoc("`:c>")]]same_as<decltype(result2), vector<int>::iterator>);
auto result3 = ranges::find(subrange{vec}, 42);                         // #3
static_assert([[redoc("`:c>")]]same_as<decltype(result3), vector<int>::iterator>);
[codeblock:end]

[:en]
The call to [`ranges::find] at #1 returns [`ranges::dangling] since [`f()] is an
rvalue [`vector]; it is possible for the [`vector] to be destroyed before a
returned iterator is dereferenced.
[:zh_CN]
由于 [`f()] 是一个 [`vector] 右值，因此在 #1 处调用 [`ranges::find] 返回的是
[`ranges::dangling]；这个 [`vector] 有可能在返回的迭代器被解引用之前就被销毁。

[:en]
However, the calls at #2 and #3 both return iterators since the lvalue [`vec]
and specializations of [`subrange] model [`:c borrowed_range].
[:zh_CN]
但是，由于 [`vec] 是左值且 [`subrange] 的特例构成 [`:c borrowed_range]，因此在
#2 和 #3 处的调用所返回的都是迭代器。
[end:example]
