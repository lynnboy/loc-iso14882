[section#range.chunk.by.iter
    [:en] Class [`chunk_by_view::[*iterator]]
    [:zh_CN] 类 [`chunk_by_view::[*iterator]]
]

[codeblock:synopsis]
namespace std::ranges {
  template<[[redoc("`:c>")]]forward_range V, [[redoc("`:c>")]]indirect_binary_predicate<iterator_t<V>, iterator_t<V>> Pred>
    requires [[redoc("`:c>")]]view<V> && is_object_v<Pred>
  class chunk_by_view<V, Pred>::[[redoc("*>")]]iterator {
    chunk_by_view* [[redoc("*>")]]parent_ = nullptr;                                   // [=expos]
    iterator_t<V> [[redoc("*>")]]current_ = iterator_t<V>();                           // [=expos]
    iterator_t<V> [[redoc("*>")]]next_    = iterator_t<V>();                           // [=expos]

    constexpr [[redoc("*>")]]iterator(chunk_by_view& parent, iterator_t<V> current,    // [=expos]
                       iterator_t<V> next);

  public:
    using value_type = subrange<iterator_t<V>>;
    using difference_type  = range_difference_t<V>;
    using iterator_category = input_iterator_tag;
    using iterator_concept = [[redoc("[=seebelow]")]];

    [[redoc("*>")]]iterator() = default;

    constexpr value_type operator*() const;
    constexpr [[redoc("*>")]]iterator& operator++();
    constexpr [[redoc("*>")]]iterator operator++(int);

    constexpr [[redoc("*>")]]iterator& operator--() requires [[redoc("`:c>")]]bidirectional_range<V>;
    constexpr [[redoc("*>")]]iterator operator--(int) requires [[redoc("`:c>")]]bidirectional_range<V>;

    friend constexpr bool operator==(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y);
    friend constexpr bool operator==(const [[redoc("*>")]]iterator& x, default_sentinel_t);
  };
}
[codeblock:end]

[para]
[:en] [`[*iterator]::iterator_concept] is defined as follows:
[:zh_CN] [`[*iterator]::iterator_concept] 的定义如下：

[list]
[item]
[:en] If [`V] models [`:c bidirectional_range], then [`iterator_concept] denotes
[`bidirectional_iterator_tag].
[:zh_CN] 若 [`V] 构成 [`:c forward_range]，则 [`bidirectional_range] 代表
[`bidirectional_iterator_tag]。

[item]
[:en] Otherwise, [`iterator_concept] denotes [`forward_iterator_tag].
[:zh_CN] 否则，[`iterator_concept] 代表 [`forward_iterator_tag]。
[list:end]

[codeblock:declaration]
constexpr [[redoc("*>")]]iterator(chunk_by_view& parent, iterator_t<V> current, iterator_t<V> next);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*parent_] with [`addressof(parent)], [*current_] with
[`current], and [*next_] with [`next].
[:zh_CN] 以 [`addressof(parent)] 初始化 [*parent_]，以 [`current] 初始化
[*current_]，并以 [`next] 初始化 [*next_]。
[div:end]

[codeblock:declaration]
constexpr value_type operator*() const;
[codeblock:end]

[div:description]
[para:expects]
[:en] [*current_] is not equal to [*next_].
[:zh_CN] [*current_] 不等于 [*next_]。

[para:returns]
[:en] [`subrange([*current_], [*next_])].
[:zh_CN] [`subrange([*current_], [*next_])]。
[div:end]

[codeblock:declaration]
constexpr [[redoc("*>")]]iterator& operator++();
[codeblock:end]

[div:description]
[para:expects]
[:en] [*current_] is not equal to [*next_].
[:zh_CN] [*current_] 不等于 [*next_]。

[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
[[redoc("*>")]]current_ = [[redoc("*>")]]next_;
[[redoc("*>")]]next_ = [[redoc("*>")]]parent_->[[redoc("*>")]]find-next([[redoc("*>")]]current_);
return *this;
[codeblock:end]
[div:end]

[codeblock:declaration]
constexpr [[redoc("*>")]]iterator operator++(int);
[codeblock:end]

[div:description]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
auto tmp = *this;
++*this;
return tmp;
[codeblock:end]
[div:end]

[codeblock:declaration]
constexpr [[redoc("*>")]]iterator& operator--() requires [[redoc("`:c>")]]bidirectional_range<V>;
[codeblock:end]

[div:description]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
[[redoc("*>")]]next_ = [[redoc("*>")]]current_;
[[redoc("*>")]]current_ = [[redoc("*>")]]parent_->[[redoc("*>")]]find-prev([[redoc("*>")]]next_);
return *this;
[codeblock:end]
[div:end]

[codeblock:declaration]
constexpr [[redoc("*>")]]iterator operator--(int) requires [[redoc("`:c>")]]bidirectional_range<V>;
[codeblock:end]

[div:description]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
auto tmp = *this;
--*this;
return tmp;
[codeblock:end]
[div:end]

[codeblock:declaration]
friend constexpr bool operator==(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y);
[codeblock:end]

[div:description]
[para:returns]
[:en] [`x.[*current_] == y.[*current_]].
[:zh_CN] [`x.[*current_] == y.[*current_]]。
[div:end]

[codeblock:declaration]
friend constexpr bool operator==(const [[redoc("*>")]]iterator& x, default_sentinel_t);
[codeblock:end]

[div:description]
[para:returns]
[:en] [`x.[*current_] == x.[*next_]].
[:zh_CN] [`x.[*current_] == x.[*next_]]。
[div:end]
