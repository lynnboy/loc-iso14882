[section#range.stride.iterator
    [:en] Class template [`stride_view::[*iterator]]
    [:zh_CN] 类模板 [`stride_view::[*iterator]]
]

[codeblock:synopsis]
namespace std::ranges {
  template<[[redoc("`:c>")]]input_range V>
    requires [[redoc("`:c>")]]view<V>
  template<bool Const>
  class stride_view<V>::[[redoc("*>")]]iterator {
    using [[redoc("*>")]]Parent = [[redoc("*>")]]maybe-const<Const, stride_view>;                      // [=expos]
    using [[redoc("*>")]]Base = [[redoc("*>")]]maybe-const<Const, V>;                                  // [=expos]

    iterator_t<[[redoc("*>")]]Base> [[redoc("*>")]]current_ = iterator_t<[[redoc("*>")]]Base>();                      // [=expos]
    sentinel_t<[[redoc("*>")]]Base> [[redoc("*>")]]end_ = sentinel_t<[[redoc("*>")]]Base>();                          // [=expos]
    range_difference_t<[[redoc("*>")]]Base> [[redoc("*>")]]stride_ = 0;                                // [=expos]
    range_difference_t<[[redoc("*>")]]Base> [[redoc("*>")]]missing_ = 0;                               // [=expos]

    constexpr [[redoc("*>")]]iterator([[redoc("*>")]]Parent* parent, iterator_t<[[redoc("*>")]]Base> current,        // [=expos]
                       range_difference_t<[[redoc("*>")]]Base> missing = 0);
  public:
    using difference_type = range_difference_t<[[redoc("*>")]]Base>;
    using value_type = range_value_t<[[redoc("*>")]]Base>;
    using iterator_concept = [[redoc("[=seebelow]")]];
    using iterator_category = [[redoc("[=seebelow]")]];    // [:en] not always present [:zh_CN] 不总是提供

    [[redoc("*>")]]iterator() requires [[redoc("`:c>")]]default_initializable<iterator_t<[[redoc("*>")]]Base>> = default;

    constexpr [[redoc("*>")]]iterator([[redoc("*>")]]iterator<!Const> other)
      requires Const && [[redoc("`:c>")]]convertible_to<iterator_t<V>, iterator_t<[[redoc("*>")]]Base>>
                     && [[redoc("`:c>")]]convertible_to<sentinel_t<V>, sentinel_t<[[redoc("*>")]]Base>>;

    constexpr iterator_t<[[redoc("*>")]]Base> base() &&;
    constexpr const iterator_t<[[redoc("*>")]]Base>& base() const & noexcept;

    constexpr decltype(auto) operator*() const { return *[[redoc("*>")]]current_; }

    constexpr [[redoc("*>")]]iterator& operator++();
    constexpr void operator++(int);
    constexpr [[redoc("*>")]]iterator operator++(int) requires [[redoc("`:c>")]]forward_range<[[redoc("*>")]]Base>;

    constexpr [[redoc("*>")]]iterator& operator--() requires [[redoc("`:c>")]]bidirectional_range<[[redoc("*>")]]Base>;
    constexpr [[redoc("*>")]]iterator operator--(int) requires [[redoc("`:c>")]]bidirectional_range<[[redoc("*>")]]Base>;

    constexpr [[redoc("*>")]]iterator& operator+=(difference_type n) requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
    constexpr [[redoc("*>")]]iterator& operator-=(difference_type n) requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;

    constexpr decltype(auto) operator[](difference_type n) const
      requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>
    { return *(*this + n); }

    friend constexpr bool operator==(const [[redoc("*>")]]iterator& x, default_sentinel_t);

    friend constexpr bool operator==(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
      requires [[redoc("`:c>")]]equality_comparable<iterator_t<[[redoc("*>")]]Base>>;

    friend constexpr bool operator<(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
      requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;

    friend constexpr bool operator>(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
      requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;

    friend constexpr bool operator<=(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
      requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;

    friend constexpr bool operator>=(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
      requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;

    friend constexpr auto operator<=>(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
      requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base> && [[redoc("`:c>")]]three_way_comparable<iterator_t<[[redoc("*>")]]Base>>;

    friend constexpr [[redoc("*>")]]iterator operator+(const [[redoc("*>")]]iterator& x, difference_type n)
      requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
    friend constexpr [[redoc("*>")]]iterator operator+(difference_type n, const [[redoc("*>")]]iterator& x)
      requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
    friend constexpr [[redoc("*>")]]iterator operator-(const [[redoc("*>")]]iterator& x, difference_type n)
      requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
    friend constexpr difference_type operator-(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
      requires [[redoc("`:c>")]]sized_sentinel_for<iterator_t<[[redoc("*>")]]Base>, iterator_t<[[redoc("*>")]]Base>>;

    friend constexpr difference_type operator-(default_sentinel_t y, const [[redoc("*>")]]iterator& x)
      requires [[redoc("`:c>")]]sized_sentinel_for<sentinel_t<[[redoc("*>")]]Base>, iterator_t<[[redoc("*>")]]Base>>;
    friend constexpr difference_type operator-(const [[redoc("*>")]]iterator& x, default_sentinel_t y)
      requires [[redoc("`:c>")]]sized_sentinel_for<sentinel_t<[[redoc("*>")]]Base>, iterator_t<[[redoc("*>")]]Base>>;

    friend constexpr range_rvalue_reference_t<[[redoc("*>")]]Base> iter_move(const [[redoc("*>")]]iterator& i)
      noexcept(noexcept(ranges::iter_move(i.[[redoc("*>")]]current_)));

    friend constexpr void iter_swap(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
      noexcept(noexcept(ranges::iter_swap(x.[[redoc("*>")]]current_, y.[[redoc("*>")]]current_)))
      requires [[redoc("`:c>")]]indirectly_swappable<iterator_t<[[redoc("*>")]]Base>>;
  };
}
[codeblock:end]

[para]
[:en] [`[*iterator]::iterator_concept] is defined as follows:
[:zh_CN] [`[*iterator]::iterator_concept] 的定义如下：

[list]
[item]
[:en] If [*Base] models [`:c random_access_range], then [`iterator_concept]
denotes [`random_access_iterator_tag].
[:zh_CN] 若 [*Base] 构成 [`:c random_access_range]，则 [`iterator_concept] 代表
[`random_access_iterator_tag]。

[item]
[:en] Otherwise, if [*Base] models [`:c bidirectional_range], then
[`iterator_concept] denotes [`bidirectional_iterator_tag].
[:zh_CN] 否则，若 [*Base] 构成 [`:c forward_range]，则 [`bidirectional_range]
代表 [`bidirectional_iterator_tag]。

[item]
[:en] Otherwise, if [*Base] models [`:c forward_range], then [`iterator_concept]
denotes [`forward_iterator_tag].
[:zh_CN] 否则，若 [*Base] 构成 [`:c forward_range]，则 [`forward_range] 代表
[`forward_iterator_tag]。

[item]
[:en] Otherwise, [`iterator_concept] denotes [`input_iterator_tag].
[:zh_CN] 否则，[`iterator_concept] 代表 [`input_iterator_tag]。
[list:end]

[para]
[:en] The member [~typedef-name] [`iterator_category] is defined if and only if
[`Base] models [`:c forward_range].
[:zh_CN] 当且仅当 [`Base] 构成 [`:c forward_range] 时，成员 [~typedef-名]
[`iterator_category] 被定义。

[:en] In that case, [`[*iterator]::iterator_category] is defined as follows:
[:zh_CN] 这种情况下，[`[*iterator]::iterator_category] 的定义如下：

[list]
[item]
[:en] Let [`C] denote the type
[`iterator_traits<iterator_t<[*Base]>>::iterator_category].
[:zh_CN] 令 [`C] 代表类型
[`iterator_traits<iterator_t<[*Base]>>::iterator_category]。

[item]
[:en] If [`C] models [`[`:c derived_from]<random_access_iterator_tag>], then
[`iterator_category] denotes [`random_access_iterator_tag];
[:zh_CN] 若 [`C] 构成 [`[`:c derived_from]<random_access_iterator_tag>]，则
[`iterator_category] 代表 [`random_access_iterator_tag]；

[item]
[:en] Otherwise, [`iterator_category] denotes [`C].
[:zh_CN] 否则，[`iterator_category] 代表 [`C].
[list:end]

[%@lib@ctor stride_view::[*iterator]]
[codeblock:declaration]
constexpr [[redoc("*>")]]iterator([[redoc("*>")]]Parent* parent, iterator_t<[[redoc("*>")]]Base> current,
                   range_difference_t<[[redoc("*>")]]Base> missing = 0);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*current_] with [`std::move(current)], [*end_] with
[`ranges::end(parent->[*base_])], [*stride_] with [`parent->[*stride_]], and
[*missing_] with [`missing].
[:zh_CN] 以 [`std::move(current)] 初始化 [*current_]，以
[`ranges::end(parent->[*base_])] 初始化 [*end_]，以 [`parent->[*stride_]] 初始化
[*stride_]，并以 [`missing] 初始化 [*missing_]。
[div:end]

[%@lib@ctor stride_view::[*iterator]]
[codeblock:declaration]
constexpr [[redoc("*>")]]iterator([[redoc("*>")]]iterator<!Const> i)
  requires Const && [[redoc("`:c>")]]convertible_to<iterator_t<V>, iterator_t<[[redoc("*>")]]Base>>
                 && [[redoc("`:c>")]]convertible_to<sentinel_t<V>, sentinel_t<[[redoc("*>")]]Base>>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*current_] with [`std::move(i.[*current_])], [*end_] with
[`std::move(i.[*end_])], [*stride_] with [`std::move(i.[*stride_])], and
[*missing_] with [`std::move(i.[*missing_])].
[:zh_CN] 以 [`std::move(i.[*current_])] 初始化 [*current_]，以
[`std::move(i.[*end_])] 初始化 [*end_]，以 [`std::move(i.[*stride_])] 初始化
[*stride_]，并以 [`std::move(i.[*missing_])] 初始化 [*missing_]。
[div:end]

[%@lib@member base[!stride_view::[*iterator]]]
[codeblock:declaration]
constexpr iterator_t<[[redoc("*>")]]Base> base() &&;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`std::move([*current_])].
[:zh_CN] [`std::move([*current_])]。
[div:end]

[%@lib@member base[!stride_view::[*iterator]]]
[codeblock:declaration]
constexpr const iterator_t<[[redoc("*>")]]Base>& base() const & noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [*current_].
[:zh_CN] [*current_]。
[div:end]

[%@lib@member operator++[!stride_view::[*iterator]]]
[codeblock:declaration]
constexpr [[redoc("*>")]]iterator& operator++();
[codeblock:end]

[div:description]
[para:expects]
[:en] [`[*current_] != [*end_]] is [`true].
[:zh_CN] [`[*current_] != [*end_]] 为 [`true]。

[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
[[redoc("*>")]]missing_ = ranges::advance([[redoc("*>")]]current_, [[redoc("*>")]]stride_, [[redoc("*>")]]end_);
return *this;
[codeblock:end]
[div:end]

[%@lib@member operator++[!stride_view::[*iterator]]]
[codeblock:declaration]
constexpr void operator++(int);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`++*this;]
[:zh_CN] 等价于：[`++*this;]
[div:end]

[%@lib@member operator++[!stride_view::[*iterator]]]
[codeblock:declaration]
constexpr [[redoc("*>")]]iterator operator++(int) requires [[redoc("`:c>")]]forward_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
auto tmp = *this;
++*this;
return tmp;
[codeblock:end]
[div:end]

[%@lib@member operator--[!stride_view::[*iterator]]]
[codeblock:declaration]
constexpr [[redoc("*>")]]iterator& operator--() requires [[redoc("`:c>")]]bidirectional_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
ranges::advance([[redoc("*>")]]current_, [[redoc("*>")]]missing_ - [[redoc("*>")]]stride_);
[[redoc("*>")]]missing_ = 0;
return *this;
[codeblock:end]
[div:end]

[%@lib@member operator--[!stride_view::[*iterator]]]
[codeblock:declaration]
constexpr [[redoc("*>")]]iterator operator--(int) requires [[redoc("`:c>")]]bidirectional_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
auto tmp = *this;
--*this;
return tmp;
[codeblock:end]
[div:end]

[%@lib@member operator+=[!stride_view::[*iterator]]]
[codeblock:declaration]
constexpr [[redoc("*>")]]iterator& operator+=(difference_type n) requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:expects]
[:en] If [`n] is positive,
[`ranges::distance([*current_], [*end_]) > [*stride_] * (n - 1)] is [`true].
[:zh_CN] 当 [`n] 为正数时，
[`ranges::distance([*current_], [*end_]) > [*stride_] * (n - 1)] 为 [`true]。

[begin:note]
[:en] If [`n] is negative, the [=Effects] paragraph implies a precondition.
[:zh_CN] 当 [`n] 为负数时，[=Effects] 段落蕴含了前条件。
[end:note]

[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
if (n > 0) {
  [[redoc("*>")]]missing_ = ranges::advance([[redoc("*>")]]current_, [[redoc("*>")]]stride_ * n, [[redoc("*>")]]end_);
} else if (n < 0) {
  ranges::advance([[redoc("*>")]]current_, [[redoc("*>")]]stride_ * n + [[redoc("*>")]]missing_);
  [[redoc("*>")]]missing_ = 0;
}
return *this;
[codeblock:end]
[div:end]

[%@lib@member operator-=[!stride_view::[*iterator]]]
[codeblock:declaration]
constexpr [[redoc("*>")]]iterator& operator-=(difference_type x)
  requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return *this += -x;]
[:zh_CN] 等价于：[`return *this += -x;]
[div:end]

[%@lib@member operator==[!stride_view::[*iterator]]]
[codeblock:declaration]
friend constexpr bool operator==(const [[redoc("*>")]]iterator& x, default_sentinel_t);
[codeblock:end]

[div:description]
[para:returns]
[:en] [`x.[*current_] == x.[*end_]].
[:zh_CN] [`x.[*current_] == x.[*end_]]。
[div:end]

[%@lib@member operator==[!stride_view::[*iterator]]]
[codeblock:declaration]
friend constexpr bool operator==(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
      requires [[redoc("`:c>")]]equality_comparable<iterator_t<[[redoc("*>")]]Base>>;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`x.[*current_] == y.[*current_]].
[:zh_CN] [`x.[*current_] == y.[*current_]]。
[div:end]

[%@lib@member operator<[!stride_view::[*iterator]]]
[codeblock:declaration]
friend constexpr bool operator<(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
  requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`x.[*current_] < y.[*current_]].
[:zh_CN] [`x.[*current_] < y.[*current_]]。
[div:end]

[%@lib@member operator>[!stride_view::[*iterator]]]
[codeblock:declaration]
friend constexpr bool operator>(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
  requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return y < x;]
[:zh_CN] 等价于：[`return y < x;]
[div:end]

[%@lib@member operator<=[!stride_view::[*iterator]]]
[codeblock:declaration]
friend constexpr bool operator<=(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
  requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return !(y < x);]
[:zh_CN] 等价于：[`return !(y < x);]
[div:end]

[%@lib@member operator>=[!stride_view::[*iterator]]]
[codeblock:declaration]
friend constexpr bool operator>=(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
  requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return !(x < y);]
[:zh_CN] 等价于：[`return !(x < y);]
[div:end]

[%@lib@member operator<=>[!stride_view::[*iterator]]]
[codeblock:declaration]
friend constexpr auto operator<=>(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
  requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base> && [[redoc("`:c>")]]three_way_comparable<iterator_t<[[redoc("*>")]]Base>>;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`x.[*current_] <=> y.[*current_]].
[:zh_CN] [`x.[*current_] <=> y.[*current_]]。
[div:end]

[%@lib@member operator+[!stride_view::[*iterator]]]
[codeblock:declaration]
friend constexpr [[redoc("*>")]]iterator operator+(const [[redoc("*>")]]iterator& i, difference_type n)
  requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
friend constexpr [[redoc("*>")]]iterator operator+(difference_type n, const [[redoc("*>")]]iterator& i)
  requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
auto r = i;
r += n;
return r;
[codeblock:end]
[div:end]

[%@lib@member operator-[!stride_view::[*iterator]]]
[codeblock:declaration]
friend constexpr [[redoc("*>")]]iterator operator-(const [[redoc("*>")]]iterator& i, difference_type n)
  requires [[redoc("`:c>")]]random_access_range<[[redoc("*>")]]Base>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
auto r = i;
r -= n;
return r;
[codeblock:end]
[div:end]

[%@lib@member operator-[!stride_view::[*iterator]]]
[codeblock:declaration]
friend constexpr difference_type operator-(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
  requires [[redoc("`:c>")]]sized_sentinel_for<iterator_t<[[redoc("*>")]]Base>, iterator_t<[[redoc("*>")]]Base>>;
[codeblock:end]

[div:description]
[para:returns]
[:en] Let [`N] be [`(x.[*current_] - y.[*current_])].
[:zh_CN] 令 [`N] 为 [`(x.[*current_] - y.[*current_])]。

[list]
[item]
[:en] If [*Base] models [`:c forward_range],
[`(N + x.[*missing_] - y.[*missing_]) / x.[*stride_]].
[:zh_CN] 如果 [*Base] 构成 [`:c forward_range]，则返回
[`(N + x.[*missing_] - y.[*missing_]) / x.[*stride_]]。
[item]
[:en] Otherwise, if [`N] is negative, [`-[*div-ceil](-N, x.[*stride_])].
[:zh_CN] 否则，当 [`N] 为负数时，返回 [`-[*div-ceil](-N, x.[*stride_])]。
[item]
[:en] Otherwise, [`[*div-ceil](N, x.[*stride_])].
[:zh_CN] 否则，返回 [`[*div-ceil](N, x.[*stride_])]。
[div:end]

[%@lib@member operator-[!stride_view::[*iterator]]]
[codeblock:declaration]
friend constexpr difference_type operator-(default_sentinel_t y, const [[redoc("*>")]]iterator& x)
  requires [[redoc("`:c>")]]sized_sentinel_for<sentinel_t<[[redoc("*>")]]Base>, iterator_t<[[redoc("*>")]]Base>>;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`[*div-ceil](x.[*end_] - x.[*current_], x.[*stride_])].
[:zh_CN] [`[*div-ceil](x.[*end_] - x.[*current_], x.[*stride_])]。
[div:end]

[%@lib@member operator-[!stride_view::[*iterator]]]
[codeblock:declaration]
friend constexpr difference_type operator-(const [[redoc("*>")]]iterator& x, default_sentinel_t y)
  requires [[redoc("`:c>")]]sized_sentinel_for<sentinel_t<[[redoc("*>")]]Base>, iterator_t<[[redoc("*>")]]Base>>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return -(y - x);]
[:zh_CN] 等价于：[`return -(y - x);]
[div:end]

[%@lib@member iter_move[!stride_view::[*iterator]]]
[codeblock:declaration]
friend constexpr range_rvalue_reference_t<[[redoc("*>")]]Base> iter_move(const [[redoc("*>")]]iterator& i)
  noexcept(noexcept(ranges::iter_move(i.[[redoc("*>")]]current_)));
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return ranges::iter_move(i.[*current_]);]
[:zh_CN] 等价于：[`return ranges::iter_move(i.[*current_]);]
[div:end]

[%@lib@member iter_swap[!stride_view::[*iterator]]]
[codeblock:declaration]
friend constexpr void iter_swap(const [[redoc("*>")]]iterator& x, const [[redoc("*>")]]iterator& y)
  noexcept(noexcept(ranges::iter_swap(x.[[redoc("*>")]]current_, y.[[redoc("*>")]]current_)))
  requires [[redoc("`:c>")]]indirectly_swappable<iterator_t<[[redoc("*>")]]Base>>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`ranges::iter_swap(x.[*current_], y.[*current_]);]
[:zh_CN] 等价于：[`ranges::iter_swap(x.[*current_], y.[*current_]);]
[div:end]
