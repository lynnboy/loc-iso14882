[section#range.reverse.overview
    [:en] Overview
    [:zh_CN] 概述
]

[para]
[:en] [`reverse_view] takes a bidirectional [`:c view] and produces another
[`:c view] that iterates the same elements in reverse order.
[:zh_CN] [`reverse_view] 接受一个双向 [`:c view] 并产生另一个 [`:c view] 来对
相同的元素按相反顺序进行迭代。

[para]
[%@lib@member reverse[!views]]
[:en] The name [`views::reverse] denotes a range adaptor object
([#range.adaptor.object]).
[:zh_CN] 名字 [`views::reverse] 代表一个范围适配器对象（[#range.adaptor.object]）。

[:en] Given a subexpression [`E], the expression [`views::reverse(E)] is
expression-equivalent to:
[:zh_CN] 给定子表达式 [`E]，表达式 [`views::reverse(E)] 按表达式等价于：

[list]
[item]
[:en] If the type of [`E] is a (possibly cv-qualified) specialization of
[`reverse_view], equivalent to [`E.base()].
[:zh_CN] 如果 [`E] 的类型是（可能被 cv 限定的）[`reverse_view] 的特例，则等价于
[`E.base()]。

[item]
[:en] Otherwise, if the type of [`E] is
[=cv] [`subrange<reverse_iterator<I>, reverse_iterator<I>, K>] for some iterator
type [`I] and value [`K] of type [`subrange_kind],
[:zh_CN] 否则，如果 [`E] 的类型对于某个迭代器类型 [`I] 和 [`subrange_kind] 类型
的值 [`K] 为 [=cv] [`subrange<reverse_iterator<I>, reverse_iterator<I>, K>]，则
[list]
[item]
[:en@~] if [`K] is [`subrange_kind::sized], equivalent to:
[:zh_CN@~] 当 [`K] 为 [`subrange_kind::sized] 时，等价于：
[codeblock]
subrange<I, I, K>(E.end().base(), E.begin().base(), E.size())
[codeblock:end]
[item]
[:en@~] otherwise, equivalent to:
[:zh_CN@~] 否则，等价于：
[codeblock]
subrange<I, I, K>(E.end().base(), E.begin().base())
[codeblock:end]
[list:end]

[:en] However, in either case [`E] is evaluated only once.
[:zh_CN] 不过，无论哪种情况下 [`E] 都仅求值一次。

[item]
[:en] Otherwise, equivalent to [`reverse_view{E}].
[:zh_CN] 否则，等价于 [`reverse_view{E}]。
[list:end]

[para]
[begin:example]
[codeblock]
vector<int> is {0,1,2,3,4};
for (int i : is | views::reverse)
  cout << i << ' '; // [:en] prints: 4 3 2 1 0 \
                    [:zh_CN] 打印：4 3 2 1 0
[codeblock:end]
[end:example]
