[section#range.take.overview
    [:en] Overview
    [:zh_CN] 概述
]

[para]
[:en] [`take_view] produces a view of the first [$N] elements from another view,
or all the elements if the adapted view contains fewer than [$N].
[:zh_CN] [`take_view] 产生另一个视图的前 [$N] 个元素上的视图，若所适配的视图包含
元素少于 [$N] 个则为其所有元素。

[%@lib@member take[!views]]
[para]
[:en] The name [`views::take] denotes a range adaptor object
([#range.adaptor.object]).
[:zh_CN] 名字 [`views::take] 代表一个范围适配器对象（[#range.adaptor.object]）。

[:en] Let [`E] and [`F] be expressions, let [`T] be [`remove_cvref_t<decltype((E))>],
and let [`D] be [`range_difference_t<decltype((E))>].
[:zh_CN] 令 [`E] 和 [`F] 为表达式，令 [`T] 为 [`remove_cvref_t<decltype((E))>]，
并令 [`D] 为 [`range_difference_t<decltype((E))>]。

[:en] If [`decltype((F))] does not model [`[`:c convertible_to]<D>],
[`views::take(E, F)] is ill-formed.
[:zh_CN] 若 [`decltype((F))] 并不构成 [`[`:c convertible_to]<D>]，则
[`views::take(E, F)] 非良构。

[:en] Otherwise, the expression [`views::take(E, F)] is expression-equivalent to:
[:zh_CN] 否则，表达式 [`views::take(E, F)] 按表达式等价于：

[list]
[item]
[:en] If [`T] is a specialization of [`ranges::empty_view] ([#range.empty.view]),
then [`((void)F, [^decay-copy](E))], except that the evaluations of [`E] and [`F]
are indeterminately sequenced.
[:zh_CN] 若 [`T] 为 [`ranges::empty_view] 的特例（[#range.empty.view]），则为
[`((void)F, [^decay-copy](E))]，但 [`E] 和 [`F] 的求值是顺序不确定的。

[item]
[:en] Otherwise, if [`T] models [`:c random_access_range] and [`:c sized_range]
and is a specialization of [`span] ([#views.span]), [`basic_string_view]
([#string.view]), or [`ranges::subrange] ([#range.subrange]), then
[`U(ranges::begin(E), ranges::begin(E) + std::min<D>(ranges::distance(E), F))],
except that [`E] is evaluated only once, where [`U] is a type determined as
follows:
[:zh_CN] 否则，若 [`T] 构成 [`:c random_access_range] 和 [`:c sized_range]，并且
是 [`span]（[#views.span]），[`basic_string_view]（[#string.view]），或
[`ranges::subrange]（[#range.subrange]）的特例，则为
[`U(ranges::begin(E), ranges::begin(E) + std::min<D>(ranges::distance(E), F))]，
但 [`E] 仅进行一次求值，其中 [`U] 为如下所确定的类型：

[list]
[item]
[:en@~] if [`T] is a specialization of [`span], then [`U] is
[`span<typename T::element_type>];
[:zh_CN@~] 若 [`T] 是 [`span] 的特例，则 [`U] 为 [`span<typename T::element_type>]；
[item]
[:en@~] otherwise, if [`T] is a specialization of [`basic_string_view], then [`U]
is [`T];
[:zh_CN@~] 否则，若 [`T] 为 [`basic_string_view] 的特例，则 [`U] 为 [`T]；
[item]
[:en@~] otherwise, [`T] is a specialization of [`ranges::subrange], and [`U] is
[`ranges::subrange<iterator_t<T>>];
[:zh_CN@~] 否则，[`T] 为 [`ranges::subrange] 的特例，而 [`U] 为
[`ranges::subrange<iterator_t<T>>]；
[list:end]

[item]
[:en] otherwise, if [`T] is a specialization of [`ranges::iota_view]
([#range.iota.view]) that models [`:c random_access_range] and [`:c sized_range],
then
[`ranges::iota_view(*ranges::begin(E), *(ranges::begin(E) + std::min<D>(ranges::distance(E), F)))],
except that [`E] is evaluated only once.
[:zh_CN] 否则，若 [`T] 为 [`ranges::iota_view]（[#range.iota.view]）的特例，并
构成 [`:c random_access_range] 和 [`:c sized_range]，则为
[`ranges::iota_view(*ranges::begin(E), *(ranges::begin(E) + std::min<D>(ranges::distance(E), F)))]，
但 [`E] 仅进行一次求值。

[item]
[:en] otherwise, if [`T] is a specialization of [`ranges::repeat_view]
([#range.repeat.view]):
[:zh_CN] 否则，若 [`T] 为 [`ranges::repeat_view]（[#range.repeat.view]）的特例：
[list]
[item]
[:en@~] if [`T] models [`:c sized_range], then
[:zh_CN@~] 若 [`T] 构成 [`:c sized_range]，则为
[codeblock]
views::repeat(*E.[[redoc("*>")]]value_, std::min<D>(ranges::distance(E), F))
[codeblock:end]
[:en@~] except that [`E] is evaluated only once;
[:zh_CN@~] 但 [`E] 仅进行一次求值；
[item]
[:en@~] otherwise, [`views::repeat(*E.[*value_], static_cast<D>(F))].
[:zh_CN@~] 否则，为 [`views::repeat(*E.[*value_], static_cast<D>(F))]。
[list:end]

[item]
[:en] Otherwise, [`ranges::take_view(E, F)].
[:zh_CN] 否则，为 [`ranges::take_view(E, F)]。
[list:end]

[para]
[begin:example]
[codeblock]
vector<int> is{0,1,2,3,4,5,6,7,8,9};
for (int i : is | views::take(5))
  cout << i << ' '; // [:en] prints [`0 1 2 3 4] \
                    [:zh_CN] 打印 [`0 1 2 3 4]
[codeblock:end]
[end:example]
