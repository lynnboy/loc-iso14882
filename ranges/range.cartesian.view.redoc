[section#range.cartesian.view
    [:en] Class template [`cartesian_product_view]
    [:zh_CN] 类模板 [`cartesian_product_view]
]

[codeblock:synopsis]
namespace std::ranges {
  template<bool Const, class First, class... Vs>
  concept [[redoc("*:c@def>")]]cartesian-product-is-random-access =          // [=expos]
    ([[redoc("`:c>")]]random_access_range<[[redoc("*>")]]maybe-const<Const, First>> && ... &&
      ([[redoc("`:c>")]]random_access_range<[[redoc("*>")]]maybe-const<Const, Vs>>
        && [[redoc("`:c>")]]sized_range<[[redoc("*>")]]maybe-const<Const, Vs>>));

  template<class R>
  concept [[redoc("*:c@def>")]]cartesian-product-common-arg =                // [=expos]
    [[redoc("`:c>")]]common_range<R> || ([[redoc("`:c>")]]sized_range<R> && [[redoc("`:c>")]]random_access_range<R>);

  template<bool Const, class First, class... Vs>
  concept [[redoc("*:c@def>")]]cartesian-product-is-bidirectional =          // [=expos]
    ([[redoc("`:c>")]]bidirectional_range<[[redoc("*>")]]maybe-const<Const, First>> && ... &&
      ([[redoc("`:c>")]]bidirectional_range<[[redoc("*>")]]maybe-const<Const, Vs>>
        && [[redoc("*:c>")]]cartesian-product-common-arg<[[redoc("*>")]]maybe-const<Const, Vs>>));

  template<class First, class... Vs>
  concept [[redoc("*:c@def>")]]cartesian-product-is-common =                 // [=expos]
    [[redoc("*:c>")]]cartesian-product-common-arg<First>;

  template<class... Vs>
  concept [[redoc("*:c@def>")]]cartesian-product-is-sized =                  // [=expos]
    ([[redoc("`:c>")]]sized_range<Vs> && ...);

  template<bool Const, template<class> class FirstSent, class First, class... Vs>
    concept [[redoc("*:c@def>")]]cartesian-is-sized-sentinel =               // [=expos]
      ([[redoc("`:c>")]]sized_sentinel_for<FirstSent<[[redoc("*>")]]maybe-const<Const, First>>,
          iterator_t<[[redoc("*>")]]maybe-const<Const, First>>> && ...
        && ([[redoc("`:c>")]]sized_range<[[redoc("*>")]]maybe-const<Const, Vs>>
          && [[redoc("`:c>")]]sized_sentinel_for<iterator_t<[[redoc("*>")]]maybe-const<Const, Vs>>,
              iterator_t<[[redoc("*>")]]maybe-const<Const, Vs>>>));

  template<[[redoc("*:c>")]]cartesian-product-common-arg R>
  constexpr auto [[redoc("*>")]]cartesian-common-arg-end(R& r) {       // [=expos]
    if constexpr ([[redoc("`:c>")]]common_range<R>) {
      return ranges::end(r);
    } else {
      return ranges::begin(r) + ranges::distance(r);
    }
  }

  template<[[redoc("`:c>")]]input_range First, [[redoc("`:c>")]]forward_range... Vs>
    requires ([[redoc("`:c>")]]view<First> && ... && [[redoc("`:c>")]]view<Vs>)
  class cartesian_product_view : public view_interface<cartesian_product_view<First, Vs...>> {
  private:
    tuple<First, Vs...> [[redoc("*>")]]bases_;                 // [=expos]
    // [:en] [#ranges.cartesian.iterator], class template [`cartesian_product_view::[*iterator]] \
    [:zh_CN] [#ranges.cartesian.iterator]，类模板 [`cartesian_product_view::[*iterator]]
    template<bool Const> class [[redoc("*>")]]iterator;       // [=expos]

  public:
    constexpr cartesian_product_view() = default;
    constexpr explicit cartesian_product_view(First first_base, Vs... bases);

    constexpr [[redoc("*>")]]iterator<false> begin()
      requires (![[redoc("*:c>")]]simple-view<First> || ... || ![[redoc("*:c>")]]simple-view<Vs>);
    constexpr [[redoc("*>")]]iterator<true> begin() const
      requires ([[redoc("`:c>")]]range<const First> && ... && [[redoc("`:c>")]]range<const Vs>);

    constexpr [[redoc("*>")]]iterator<false> end()
      requires ((![[redoc("*:c>")]]simple-view<First> || ... || ![[redoc("*:c>")]]simple-view<Vs>) &&
        [[redoc("*:c>")]]cartesian-product-is-common<First, Vs...>);
    constexpr [[redoc("*>")]]iterator<true> end() const
      requires [[redoc("*:c>")]]cartesian-product-is-common<const First, const Vs...>;
    constexpr default_sentinel_t end() const noexcept;

    constexpr [[redoc("[=seebelow]")]] size()
      requires [[redoc("*:c>")]]cartesian-product-is-sized<First, Vs...>;
    constexpr [[redoc("[=seebelow]")]] size() const
      requires [[redoc("*:c>")]]cartesian-product-is-sized<const First, const Vs...>;
  };

  template<class... Vs>
    cartesian_product_view(Vs&&...) -> cartesian_product_view<views::all_t<Vs>...>;
}
[codeblock:end]

[codeblock:declaration]
constexpr explicit cartesian_product_view(First first_base, Vs... bases);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*bases_] with [`std::move(first_base), std::move(bases)...].
[:zh_CN] 以 [`std::move(first_base), std::move(bases)...] 初始化 [*bases_]。
[div:end]

[codeblock:declaration]
constexpr [[redoc("*>")]]iterator<false> begin()
  requires (![[redoc("*:c>")]]simple-view<First> || ... || ![[redoc("*:c>")]]simple-view<Vs>);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return [[redoc("*>")]]iterator<false>(*this, [[redoc("*>")]]tuple-transform(ranges::begin, [[redoc("*>")]]bases_));
[codeblock:end]
[div:end]

[codeblock:declaration]
constexpr [[redoc("*>")]]iterator<true> begin() const
  requires ([[redoc("`:c>")]]range<const First> && ... && [[redoc("`:c>")]]range<const Vs>);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return [[redoc("*>")]]iterator<true>(*this, [[redoc("*>")]]tuple-transform(ranges::begin, [[redoc("*>")]]bases_));
[codeblock:end]
[div:end]

[codeblock:declaration]
constexpr [[redoc("*>")]]iterator<false> end()
  requires ((![[redoc("*:c>")]]simple-view<First> || ... || ![[redoc("*:c>")]]simple-view<Vs>)
    && [[redoc("*:c>")]]cartesian-product-is-common<First, Vs...>);
constexpr [[redoc("*>")]]iterator<true> end() const
  requires [[redoc("*:c>")]]cartesian-product-is-common<const First, const Vs...>;
[codeblock:end]

[div:description]
[para]
[:en] Let:
[:zh_CN] 令：

[list]
[item]
[:en] [*is-const] be [`true] for the const-qualified overload, and [`false]
otherwise;
[:zh_CN] 对于 const 限定的重载，[*is-const] 为 [`true]，否则为 [`false]；
[item]
[:en] [*is-empty] be [`true] if the expression [`ranges::empty(rng)] is [`true]
for any [`rng] among the underlying ranges except the first one and [`false]
otherwise; and
[:zh_CN] 如果对于除了第一个的各底层范围 [`rng]，表达式 [`ranges::empty(rng)]
均为 [`true]，则 [*is-empty] 为 [`true]，否则为 [`false]；以及
[item]
[:en] [`[*begin-or-first-end](rng)] be expression-equivalent to
[`[*is-empty] ? ranges::begin(rng) : [*cartesian-common-arg-end](rng)] if [`rng]
is the first underlying range and [`ranges::begin(rng)] otherwise.
[:zh_CN] [`[*begin-or-first-end](rng)] 对于第一个底层范围为
[`[*is-empty] ? ranges::begin(rng) : [*cartesian-common-arg-end](rng)]，否则为
[`ranges::begin(rng)]。
[list:end]

[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
[[redoc("*>")]]iterator<[[redoc("*>")]]is-const> it(*this, [[redoc("*>")]]tuple-transform(
  [](auto& rng){ return [[redoc("*>")]]begin-or-first-end(rng); }, [[redoc("*>")]]bases_));
return it;
[codeblock:end]
[div:end]

[codeblock:declaration]
constexpr default_sentinel_t end() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`default_sentinel].
[:zh_CN] [`default_sentinel]。
[div:end]

[codeblock:declaration]
constexpr [[redoc("[=seebelow]")]] size()
  requires [[redoc("*:c>")]]cartesian-product-is-sized<First, Vs...>;
constexpr [[redoc("[=seebelow]")]] size() const
  requires [[redoc("*:c>")]]cartesian-product-is-sized<const First, const Vs...>;
[codeblock:end]

[div:description]
[para]
[:en] The return type is an [?impldef return type of
[`cartesian_product_view::size]] unsigned-integer-like type.
[:zh_CN] 返回类型为[?impldef [`cartesian_product_view::size] 的返回类型]无符号
整数式类型。

[para:recommended]
[:en] The return type should be the smallest unsigned-integer-like type
that is sufficiently wide to store the product of the maximum sizes of
all the underlying ranges, if such a type exists.
[:zh_CN] 返回类型最好是宽度足以存储所有底层范围的最大大小的乘积的最小的无符号
整数式类型，如果存在这种类型的话。

[para]
[:en] Let [$p] be the product of the sizes of all the ranges in [*bases_].
[:zh_CN] 令 [$p] 为 [*bases_] 中所有范围的大小的乘积。

[para:expects]
[:en] [$p] can be represented by the return type.
[:zh_CN] [$p] 可以由返回类型表示。

[para:returns]
[:en] [$p].
[:zh_CN] [$p]。
[div:end]
