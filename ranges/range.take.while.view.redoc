[section#range.take.while.view
    [:en] Class template [`take_while_view]
    [:zh_CN] 类模板 [`take_while_view]
]

[%@lib take_while_view]
[%@lib@member base[!take_while_view]]
[%@lib@member begin[!take_while_view]]
[%@lib@member end[!take_while_view]]
[codeblock:synopsis]
namespace std::ranges {
  template<[[redoc("`:c>")]]view V, class Pred>
    requires [[redoc("`:c>")]]input_range<V> && is_object_v<Pred> &&
             [[redoc("`:c>")]]indirect_unary_predicate<const Pred, iterator_t<V>>
  class take_while_view : public view_interface<take_while_view<V, Pred>> {
    // [:en] [#range.take.while.sentinel], class template [`take_while_view::[*sentinel]] \
       [:zh_CN] [#range.take.while.sentinel]，类模板 [`take_while_view::[*sentinel]]
    template<bool> class [[redoc("*>")]]sentinel;                      // [=expos]

    V [[redoc("*>")]]base_ = V();                                      // [=expos]
    [[redoc("^>")]]copyable-box<Pred> [[redoc("*>")]]pred_;                           // [=expos]

  public:
    take_while_view() requires [[redoc("`:c>")]]default_initializable<V> && [[redoc("`:c>")]]default_initializable<Pred> = default;
    constexpr take_while_view(V base, Pred pred);

    constexpr V base() const& requires [[redoc("`:c>")]]copy_constructible<V> { return [[redoc("*>")]]base_; }
    constexpr V base() && { return std::move([[redoc("*>")]]base_); }

    constexpr const Pred& pred() const;

    constexpr auto begin() requires (![[redoc("*:c>")]]simple-view<V>)
    { return ranges::begin([[redoc("*>")]]base_); }

    constexpr auto begin() const
      requires [[redoc("`:c>")]]range<const V> &&
               [[redoc("`:c>")]]indirect_unary_predicate<const Pred, iterator_t<const V>>
    { return ranges::begin([[redoc("*>")]]base_); }

    constexpr auto end() requires (![[redoc("*:c>")]]simple-view<V>)
    { return [[redoc("*>")]]sentinel<false>(ranges::end([[redoc("*>")]]base_), addressof(*[[redoc("*>")]]pred_)); }

    constexpr auto end() const
      requires [[redoc("`:c>")]]range<const V> &&
               [[redoc("`:c>")]]indirect_unary_predicate<const Pred, iterator_t<const V>>
    { return [[redoc("*>")]]sentinel<true>(ranges::end([[redoc("*>")]]base_), addressof(*[[redoc("*>")]]pred_)); }
  };

  template<class R, class Pred>
    take_while_view(R&&, Pred) -> take_while_view<views::all_t<R>, Pred>;
}
[codeblock:end]

[%@lib@ctor take_while_view]
[codeblock:declaration]
constexpr take_while_view(V base, Pred pred);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*base_] with [`std::move(base)] and [*pred_] with
[`std::move(pred)].
[:zh_CN] 以 [`std::move(base)] 初始化 [*base_] 并以 [`std::move(pred)] 初始化
[*pred_]。
[div:end]

[%@lib@member pred[!take_while_view]]
[codeblock:declaration]
constexpr const Pred& pred() const;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return *[*pred_];]
[:zh_CN] 等价于：[`return *[*pred_];]
[div:end]
