[section#format.fmt.string
    [:en] Class template [`basic_format_string]
    [:zh_CN] 类模板 [`basic_format_string]
]

[codeblock:synopsis]
namespace std {
  template<class charT, class... Args>
  struct [[redoc("`:lib>")]]basic_format_string {
  private:
    basic_string_view<charT> [[redoc("*>")]]str;         // [=expos]

  public:
    template<class T> consteval basic_format_string(const T& s);
    basic_format_string([[redoc("*>")]]runtime-format-string<charT> s) noexcept : str(s.[[redoc("*>")]]str) {}

    constexpr basic_string_view<charT> get() const noexcept { return [[redoc("*>")]]str; }
  };
}
[codeblock:end]

[codeblock:declaration]
template<class T> consteval basic_format_string(const T& s);
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`const T&] models [`[`:c convertible_to]<basic_string_view<charT>>].
[:zh_CN] [`const T&] 构成 [`[`:c convertible_to]<basic_string_view<charT>>]。

[para:effects]
[:en] Direct-non-list-initializes [*str] with [`s].
[:zh_CN] 以 [`s] 直接非列表初始化 [*str]。

[para:remarks]
[:en] A call to this function is not a core constant expression ([#expr.const])
unless there exist [`args] of types [`Args] such that [*str] is a format string
for [`args].
[:zh_CN] 除非存在 [`Args] 类型的 [`args] 使得 [*str] 是针对 [`args] 的格式字符串，
否则对这个函数的调用不是核心常量表达式（[#expr.const]）。
[div:end]
