[section#re.results.const
    [:en] Constructors
    [:zh_CN] 构造函数
]

[para]
[:en] [#:tab#re.results.const] lists the postconditions of [`match_results]
copy/move constructors and copy/move assignment operators.
[:zh_CN] [#:tab#re.results.const] 列出 [`match_results] 的复制/移动构造函数和
复制/移动赋值运算符的后条件。

[:en] For move operations, the results of the expressions depending on the
parameter [`m] denote the values they had before the respective function calls.
[:zh_CN] 对于移动操作，依赖于形参 [`m] 的表达式的结果，代表其在进行相应函数调用之前的值。

[%@lib@ctor match_results]
[codeblock:declaration]
explicit match_results(const Allocator& a);
[codeblock:end]

[div:description]
[para:effects]
[:en] The stored [`Allocator] value is constructed from [`a].
[:zh_CN] 以 [`a] 构造所存储的 [`Allocator] 值。

[para:ensures]
[:en] [`ready()] returns [`false].
[:zh_CN] [`ready()] 返回 [`false]，

[:en] [`size()] returns [`0].
[:zh_CN] [`size()] 返回 [`0]。
[div:end]

[%@lib@ctor match_results]
[codeblock:declaration]
match_results(const match_results& m);
match_results(const match_results& m, const Allocator& a);
[codeblock:end]

[div:description]
[para:effects]
[:en] For the first form, the stored [`Allocator] value is obtained as specified
in [#container.reqmts].
[:zh_CN] 对于第一种形式，按照 [#container.reqmts] 总的规定获取所存储的 [`Allocator] 值。

[:en] For the second form, the stored [`Allocator] value is constructed from [`a].
[:zh_CN] 对于第二种形式，从 [`a] 构造所存储的 [`Allocator] 值。

[para:ensures]
[:en] As specified in [#:tab#re.results.const].
[:zh_CN] 如 [#:tab#re.results.const] 中所述。
[div:end]

[%@lib@ctor match_results]
[codeblock:declaration]
match_results(match_results&& m) noexcept;
match_results(match_results&& m, const Allocator& a);
[codeblock:end]

[div:description]
[para:effects]
[:en] For the first form, the stored [`Allocator] value is move constructed from
[`m.get_allocator()].
[:zh_CN] 对于第一种形式，从 [`m.get_allocator()] 移动构造其所存储的 [`Allocator] 值。

[:en] For the second form, the stored [`Allocator] value is constructed from [`a].
[:zh_CN] 对于第二种形式，从 [`a] 构造所存储的 [`Allocator] 值。

[para:ensures]
[:en] As specified in [#:tab#re.results.const].
[:zh_CN] 如 [#:tab#re.results.const] 中所述。

[para:throws]
[:en] The second form throws nothing if [`a == m.get_allocator()] is [`true].
[:zh_CN] 第二种形式在当 [`a == m.get_allocator()] 为 [`true] 时不抛出任何异常。
[div:end]

[%@lib@member match_results[!operator=]]
[codeblock:declaration]
match_results& operator=(const match_results& m);
[codeblock:end]

[div:description]
[para:ensures]
[:en] As specified in [#:tab#re.results.const].
[:zh_CN] 如 [#:tab#re.results.const] 中所述。
[div:end]

[%@lib@member match_results[!operator=]]
[codeblock:declaration]
match_results& operator=(match_results&& m);
[codeblock:end]

[div:description]
[para:ensures]
[:en] As specified in [#:tab#re.results.const].
[:zh_CN] 如 [#:tab#re.results.const] 中所述。
[div:end]

[table:grid#re.results.const
    [:en] [`match_results] copy/move operation postconditions
    [:zh_CN] [`match_results] 复制/移动操作的后条件
    [|  [:en] Element
        [:zh_CN] 元素 ]
    [|  [:en] Value
        [:zh_CN] 值 ]
]
[|] [`ready()]
[|] [`m.ready()]
[-]

[|] [`size()]
[|] [`m.size()]
[-]

[|] [`str(n)]
[|] [:en] [`m.str(n)] for all non-negative integers [`n < m.size()]
    [:zh_CN] 对于任何非负整数 [`n < m.size()] 为 [`m.str(n)]
[-]

[|] [`prefix()]
[|] [`m.prefix()]
[-]

[|] [`suffix()]
[|] [`m.suffix()]
[-]

[|] [`(*this)`[n`]]
[|] [:en] [`m`[n`]] for all non-negative integers [`n < m.size()]
    [:zh_CN] 对于任何非负整数 [`n < m.size()] 为 [`m`[n`]]
[-]
[|] [`length(n)]
[|] [:en] [`m.length(n)] for all non-negative integers [`n < m.size()]
    [:zh_CN] 对于任何非负整数 [`n < m.size()] 为 [`m.length(n)]
[-]

[|] [`position(n)]
[|] [:en] [`m.position(n)] for all non-negative integers [`n < m.size()]
    [:zh_CN] 对于任何非负整数 [`n < m.size()] 为 [`m.position(n)]
[-]
[table:end]
