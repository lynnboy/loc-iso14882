[section#locale.cons
    [:en] Constructors and destructor
    [:zh_CN] 构造函数和析构函数
]

[%@lib@ctor locale]
[codeblock:declaration]
locale() noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Constructs a copy of the argument last passed to [`locale::global(locale&)],
if it has been called; else, the resulting facets have virtual function
semantics identical to those of [`locale::classic()].
[:zh_CN] 为最后传递给 [`locale::global(locale&)] 的实参构造一个副本（如果曾经进行
过调用）；否则，其结果的各刻面具有与 [`locale::classic()] 中的刻面等同的虚函数语义。

[begin:note]
[:en] This constructor yields a copy of the current global locale.
[:zh_CN] 这个构造函数产生当前全局地域的一个副本。

[:en] It is commonly used as a default argument for function parameters of type
[`const locale&].
[:zh_CN] 它通常用作 [`const locale&] 类型的函数形参的默认实参。
[end:note]
[div:end]

[%@lib@ctor locale]
[codeblock:declaration]
explicit locale(const char* std_name);
[codeblock:end]

[div:description]
[para:effects]
[:en] Constructs a locale using standard C locale names, e.g., [`"POSIX"].
[:zh_CN] 用标准 C 地域的名字（如 [`"POSIX"]）构造一个地域。

[:en] The resulting locale implements semantics defined to be associated with
that name.
[:zh_CN] 其结果地域实现了被定义为与该名字相关联的语义。

[para:throws]
[:en] [`runtime_error] if the argument is not valid, or is null.
[:zh_CN] 当其实参无效或者为空时抛出 [`runtime_error]。

[para:remarks]
[:en] The set of valid string argument values is [`"C"], [`""], and any
[?impldef locale names] values.
[:zh_CN] 有效的字符串实参值的集合包括 [`"C"]，[`""]，以及任何[?impldef 地域的名字]值。
[div:end]

[%@lib@ctor locale]
[codeblock:declaration]
explicit locale(const string& std_name);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to [`locale(std_name.c_str())].
[:zh_CN] 等价于 [`locale(std_name.c_str())]。
[div:end]

[%@lib@ctor locale]
[codeblock:declaration]
locale(const locale& other, const char* std_name, category cats);
[codeblock:end]

[div:description]
[para:expects]
[:en] [`cats] is a valid [`category] value ([#locale.category]).
[:zh_CN] [`cats] 为有效的 [`category] 值（[#locale.category]）。

[para:effects]
[:en] Constructs a locale as a copy of [`other] except for the facets identified
by the [`category] argument, which instead implement the same semantics as
[`locale(std_name)].
[:zh_CN] 构造一个 [`other] 的副本，但其中由 [`category] 实参所指定的刻面改为实现
与 [`locale(std_name)] 相同的语义。

[para:throws]
[:en] [`runtime_error] if the second argument is not valid, or is null.
[:zh_CN] 如果第二个实参无效或为空则抛出 [`runtime_error]。

[para:remarks]
[:en] The locale has a name if and only if [`other] has a name.
[:zh_CN] 当且仅当 [`other] 有名字时这个地域具有名字。
[div:end]

[%@lib@ctor locale]
[codeblock:declaration]
locale(const locale& other, const string& std_name, category cats);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to [`locale(other, std_name.c_str(), cats)].
[:zh_CN] 等价于 [`locale(other, std_name.c_str(), cats)]。
[div:end]

[%@lib@ctor locale]
[codeblock:declaration]
template<class Facet> locale(const locale& other, Facet* f);
[codeblock:end]

[div:description]
[para:effects]
[:en] Constructs a locale incorporating all facets from the first argument except
that of type [`Facet], and installs the second argument as the remaining facet.
[:zh_CN] 构造一个包含来自其第一个实参的除了类型 [`Facet] 之外的所有刻面的地域，
并将其第二个实参安装为剩余的刻面。

[:en] If [`f] is null, the resulting object is a copy of [`other].
[:zh_CN] 若 [`f] 为空，则结果对象即为 [`other] 的副本。

[para:remarks]
[:en] If [`f] is null, the resulting locale has the same name as [`other].
[:zh_CN] 若 [`f] 为空，则结果地域与 [`other] 的名字相同。

[:en] Otherwise, the resulting locale has no name.
[:zh_CN] 否则，结果地域没有名字。
[div:end]

[%@lib@ctor locale]
[codeblock:declaration]
locale(const locale& other, const locale& one, category cats);
[codeblock:end]

[div:description]
[para:expects]
[:en] [`cats] is a valid [`category] value.
[:zh_CN] [`cats] 为有效的 [`category] 值。

[para:effects]
[:en] Constructs a locale incorporating all facets from the first argument
except those that implement [`cats], which are instead incorporated from the
second argument.
[:zh_CN] 构造一个包含来自其第一个实参的所有刻面的地域，但其中实现 [`cats] 的刻面
改为由其第二个实参所包含的刻面。

[para:remarks]
[:en] If [`cats] is equal to [`locale::none], the resulting locale has a name if
and only if the first argument has a name.
[:zh_CN] 如果 [`cats] 等于 [`locale::none]，则当且仅当第一个实参具有名字时，结果
地域具有名字。

[:en] Otherwise, the resulting locale has a name if and only if the first two
arguments both have names.
[:zh_CN] 否则，当且仅当其前两个实参均具有名字时，结果地域具有名字。
[div:end]

[%@lib@member operator=[!locale]]
[codeblock:declaration]
const locale& operator=(const locale& other) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Creates a copy of [`other], replacing the current value.
[:zh_CN] 创建 [`other] 的副本，并以之替换其当前值。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]
