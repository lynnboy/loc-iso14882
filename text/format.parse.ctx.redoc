[section#format.parse.ctx
    [:en] Class template [`basic_format_parse_context]
    [:zh_CN] 类模板 [`basic_format_parse_context]
]

[%@lib basic_format_parse_context]
[%@lib@member char_type[!basic_format_parse_context]]
[%@lib@member const_iterator[!basic_format_parse_context]]
[%@lib@member iterator[!basic_format_parse_context]]
[codeblock:synopsis]
namespace std {
  template<class charT>
  class basic_format_parse_context {
  public:
    using char_type = charT;
    using const_iterator = typename basic_string_view<charT>::const_iterator;
    using iterator = const_iterator;

  private:
    iterator begin_;                                    // [=expos]
    iterator end_;                                      // [=expos]
    enum indexing { unknown, manual, automatic };       // [=expos]
    indexing indexing_;                                 // [=expos]
    size_t next_arg_id_;                                // [=expos]
    size_t num_args_;                                   // [=expos]

  public:
    constexpr explicit basic_format_parse_context(basic_string_view<charT> fmt) noexcept;
    basic_format_parse_context(const basic_format_parse_context&) = delete;
    basic_format_parse_context& operator=(const basic_format_parse_context&) = delete;

    constexpr const_iterator begin() const noexcept;
    constexpr const_iterator end() const noexcept;
    constexpr void advance_to(const_iterator it);

    constexpr size_t next_arg_id();
    constexpr void check_arg_id(size_t id);

    template<class... Ts>
      constexpr void check_dynamic_spec(size_t id) noexcept;
    constexpr void check_dynamic_spec_integral(size_t id) noexcept;
    constexpr void check_dynamic_spec_string(size_t id) noexcept;
  };
}
[codeblock:end]

[para]
[:en] An instance of [`basic_format_parse_context] holds the format string
parsing state, consisting of the format string range being parsed and the
argument counter for automatic indexing.
[:zh_CN] [`basic_format_parse_context] 的实例中持有格式字符串解析状态，包括所
解析的格式字符串范围，以及用于自动索引的实参计数器。

[para]
[:en] If a program declares an explicit or partial specialization of
[`basic_format_parse_context], the program is ill-formed, no diagnostic required.
[:zh_CN] 如果程序声明了 [`basic_format_parse_context] 的显式或部分特化式，则程序
非良构，无须诊断。

[%@lib@ctor basic_format_parse_context]
[codeblock:declaration]
constexpr explicit basic_format_parse_context(basic_string_view<charT> fmt) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [`begin_] with [`fmt.begin()], [`end_] with [`fmt.end()],
[`indexing_] with [`unknown], [`next_arg_id_] with [`0], and [`num_args_] with [`0].
[:zh_CN] 以 [`fmt.begin()] 初始化 [`begin_]，以 [`fmt.end()] 初始化 [`end_]，以
[`unknown] 初始化 [`indexing_]，以 [`0] 初始化 [`next_arg_id_]，并以 [`0] 初始化
[`num_args_]。

[begin:note]
[:en] Any call to [`next_arg_id], [`check_arg_id], or [`check_dynamic_spec] on
an instance of [`basic_format_parse_context] initialized using this constructor
is not a core constant expression.
[:zh_CN] 在以这个构造函数所初始化的 [`basic_format_parse_context] 实例上对
[`next_arg_id]，[`check_arg_id]，或 [`check_dynamic_spec] 的任何调用均不是核心
常量表达式。
[end:note]
[div:end]

[%@lib@member begin[!basic_format_parse_context]]
[codeblock:declaration]
constexpr const_iterator begin() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`begin_].
[:zh_CN] [`begin_]。
[div:end]

[%@lib@member end[!basic_format_parse_context]]
[codeblock:declaration]
constexpr const_iterator end() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`end_].
[:zh_CN] [`end_]。
[div:end]

[%@lib@member advance_to[!basic_format_parse_context]]
[codeblock:declaration]
constexpr void advance_to(const_iterator it);
[codeblock:end]

[div:description]
[para:expects]
[:en] [`end()] is reachable from [`it].
[:zh_CN] 从 [`it] 可达 [`end()]。

[para:effects]
[:en] Equivalent to: [`begin_ = it;]
[:zh_CN] 等价于：[`begin_ = it;]
[div:end]

[%@lib@member next_arg_id[!basic_format_parse_context]]
[codeblock:declaration]
constexpr size_t next_arg_id();
[codeblock:end]

[div:description]
[para:effects]
[:en] If [`indexing_ != manual] is [`true], equivalent to:
[:zh_CN] 当 [`indexing_ != manual] 为 [`true] 时，等价于：
[codeblock]
if (indexing_ == unknown)
  indexing_ = automatic;
return next_arg_id_++;
[codeblock:end]

[para:throws]
[:en] [`format_error] if [`indexing_ == manual] is [`true].
[:zh_CN] 当 [`indexing_ == manual] 为 [`true] 时抛出 [`format_error]。

[begin:note]
[:en] This indicates mixing of automatic and manual argument indexing.
[:zh_CN] 这指出混合了自动和手动实参索引。
[end:note]

[para:remarks]
[:en] Let [`[^cur-arg-id]] be the value of [`next_arg_id_] prior to this call.
[:zh_CN] 令 [`[^cur-arg-id]] 为此调用之前 [`next_arg_id_] 的值。

[:en] Call expressions where [`[^cur-arg-id] >= num_args_] is [`true]
are not core constant expressions ([#expr.const]).
[:zh_CN] [`[^cur-arg-id] >= num_args_] 为 [`true] 时的调用表达式不是核心常量
表达式（[#expr.const]）。
[div:end]

[%@lib@member check_arg_id[!basic_format_parse_context]]
[codeblock:declaration]
constexpr void check_arg_id(size_t id);
[codeblock:end]

[div:description]
[para:effects]
[:en] If [`indexing_ != manual] is [`true], equivalent to:
[:zh_CN] 当 [`indexing_ != manual] 为 [`true] 时，等价于：
[codeblock]
if (indexing_ == unknown)
  indexing_ = manual;
[codeblock:end]

[para:throws]
[:en] [`format_error] if [`indexing_ == manual] is [`true].
[:zh_CN] 当 [`indexing_ == manual] 为 [`true] 时抛出 [`format_error]。

[begin:note]
[:en] This indicates mixing of automatic and manual argument indexing.
[:zh_CN] 这指出混合了自动和手动实参索引。
[end:note]

[para:remarks]
[:en] A call to this function is a core constant expression ([#expr.const])
only if [`id < num_args_] is [`true].
[:zh_CN] 仅当 [`id >= num_args_] 为 [`true] 时，对此函数的调用才是核心常量表达式（[#expr.const]）。
[div:end]

[%@lib@member check_dynamic_spec[!basic_format_parse_context]]
[codeblock:declaration]
template<class... Ts>
  constexpr void check_dynamic_spec(size_t id) noexcept;
[codeblock:end]

[div:description]
[para:mandates]
[:en] [$[`sizeof...(Ts)] \gt 1].
[:zh_CN] [$[`sizeof...(Ts)] \gt 1]。

[:en] The types in [`Ts...] are unique.
[:zh_CN] [`Ts...] 中的各类型均唯一。

[:en] Each type in [`Ts...] is one of [`:key bool], [`char_type], [`:key int],
[`[`:key unsigned] [`:key int]], [`[`:key long] [`:key long] [`:key int]],
[`[`:key unsigned] [`:key long] [`:key long] [`:key int]], [`:key float],
[`:key double], [`[`:key long] [`:key double]], [`[`:key const] char_type*],
[`basic_string_view<char_type>], or [`[`:key const] [`:key void]*].
[:zh_CN] [`Ts...] 中的各类型为以下之一：[`:key bool]，[`char_type]，[`:key int]，
[`[`:key unsigned] [`:key int]]，[`[`:key long] [`:key long] [`:key int]]，
[`[`:key unsigned] [`:key long] [`:key long] [`:key int]]，[`:key float]，
[`:key double]，[`[`:key long] [`:key double]]，[`[`:key const] char_type*]，
[`basic_string_view<char_type>]，以及 [`[`:key const] [`:key void]*]。

[para:remarks]
[:en] A call to this function is a core expression only if
[:zh_CN] 仅当
[list]
[item]
[:en@~] [`id < num_args_] is [`true] and
[:zh_CN@~] [`id < num_args_] 为 [`true]，且
[item]
[:en@~] the type of the corresponding format argument (after conversion to
[`basic_format_arg<Context>]) is one of the types in [`Ts...].
[:zh_CN@~] 对应格式化参数的类型（转换为 [`basic_format_arg<Context>] 之后）是
[`Ts...] 中的类型之一，
[list:end]
[:zh_CN@~] 对此函数的调用才是核心常量表达式。
[div:end]

[%@lib@member check_dynamic_spec_integral[!basic_format_parse_context]]
[codeblock:declaration]
constexpr void check_dynamic_spec_integral(size_t id) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
check_dynamic_spec<int, unsigned int, long long int, unsigned long long int>(id);
[codeblock:end]
[div:end]

[%@lib@member check_dynamic_spec_string[!basic_format_parse_context]]
[codeblock:declaration]
constexpr void check_dynamic_spec_string(size_t id) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
check_dynamic_spec<const char_type*, basic_string_view<char_type>>(id);
[codeblock:end]
[div:end]
