[section#text.encoding.overview
    [:en] Overview
    [:zh_CN] 概要
]

[para]
[:en] The class [`text_encoding] describes an interface for accessing the IANA
Character Sets registry[#:cite@super#iana-charset].
[:zh_CN] 类 [`text_encoding] 描述一种用于访问 IANA 字符集注册表
[#:cite@super#iana-charset]的接口。

[%@lib text_encoding]
[codeblock:synopsis]
namespace std {
  struct text_encoding {
    static constexpr size_t max_name_length = 63;

    // [:en] [#text.encoding.id], enumeration [`text_encoding::id] \
    [:zh_CN] [#text.encoding.id]，枚举 [`text_encoding::id]
    enum class id : int_least32_t {
      [[redoc("[=seebelow]")]]
    };
    using enum id;

    constexpr text_encoding() = default;
    constexpr explicit text_encoding(string_view enc) noexcept;
    constexpr text_encoding(id i) noexcept;

    constexpr id mib() const noexcept;
    constexpr const char* name() const noexcept;

    struct aliases_view;
    constexpr aliases_view aliases() const noexcept;

    friend constexpr bool operator==(const text_encoding& a,
                                     const text_encoding& b) noexcept;
    friend constexpr bool operator==(const text_encoding& encoding, id i) noexcept;

    static consteval text_encoding literal() noexcept;
    static text_encoding environment();
    template<id i> static bool environment_is();

  private:
    id [[redoc("*>")]]mib_ = id::unknown;                                              // [=expos]
    char [[redoc("*>")]]name_[max_name_length + 1] = {0};                              // [=expos]
    static constexpr bool [[redoc("*>")]]comp-name(string_view a, string_view b);      // [=expos]
  };
}
[codeblock:end]

[para]
[:en] Class [`text_encoding] is a trivially copyable type
([#term.trivially.copyable.type]).
[:zh_CN] 类 [`text_encoding] 是可平凡复制类型（[#term.trivially.copyable.type]）。
