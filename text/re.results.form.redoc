[section#re.results.form
    [:en] Formatting
    [:zh_CN] 格式化
]

[%@lib@member match_results[!format]]
[codeblock:declaration]
template<class OutputIter>
  OutputIter format(
      OutputIter out,
      const char_type* fmt_first, const char_type* fmt_last,
      regex_constants::match_flag_type flags = regex_constants::format_default) const;
[codeblock:end]

[div:description]
[para:expects]
[:en] [`ready() == true] and [`OutputIter] meets the requirements for a
[^:oc OutputIterator] ([#output.iterators]).
[:zh_CN] [`ready() == true]，并且 [`OutputIter] 满足 [^:oc OutputIterator]
的规定（[#output.iterators]）。

[para:effects]
[:en] Copies the character sequence [=range(fmt_first,fmt_last)] to OutputIter [`out].
[:zh_CN] 将字符序列 [=range(fmt_first,fmt_last)] 复制到 [`OutputIter out]。

[:en] Replaces each format specifier or escape sequence in the copied range with
either the character(s) it represents or the sequence of characters within
[`*this] to which it refers.
[:zh_CN] 所复制的范围中的每个格式说明符或转义序列，都被替换为其所代表的字符或
[`*this] 中其所指代的字符序列。

[:en] The bitmasks specified in [`flags] determine which format specifiers and
escape sequences are recognized.
[:zh_CN] 识别哪些格式说明符和转义序列是由 [`flags] 中所指定的掩码决定的。

[para:returns]
[:en] [`out].
[:zh_CN] [`out]。
[div:end]

[%@lib@member match_results[!format]]
[codeblock:declaration]
template<class OutputIter, class ST, class SA>
  OutputIter format(
      OutputIter out,
      const basic_string<char_type, ST, SA>& fmt,
      regex_constants::match_flag_type flags = regex_constants::format_default) const;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return format(out, fmt.data(), fmt.data() + fmt.size(), flags);
[codeblock:end]
[div:end]

[%@lib@member match_results[!format]]
[codeblock:declaration]
template<class ST, class SA>
  basic_string<char_type, ST, SA> format(
      const basic_string<char_type, ST, SA>& fmt,
      regex_constants::match_flag_type flags = regex_constants::format_default) const;
[codeblock:end]

[div:description]
[para:expects]
[:en] [`ready() == true].
[:zh_CN] [`ready() == true]。

[para:effects]
[:en] Constructs an empty string [`result] of type
[`basic_string<char_type, ST, SA>] and calls:
[:zh_CN] 构造类型 [`basic_string<char_type, ST, SA>] 的一个空字符串 [`result] 并调用：
[codeblock]
format(back_inserter(result), fmt, flags);
[codeblock:end]

[para:returns]
[:en] [`result].
[:zh_CN] [`result]。
[div:end]

[%@lib@member match_results[!format]]
[codeblock:declaration]
string_type format(
    const char_type* fmt,
    regex_constants::match_flag_type flags = regex_constants::format_default) const;
[codeblock:end]

[div:description]
[para:expects]
[:en] [`ready() == true].
[:zh_CN] [`ready() == true]。

[para:effects]
[:en] Constructs an empty string [`result] of type [`string_type] and calls:
[:zh_CN] 构造类型 [`string_type] 的一个空字符串 [`result] 并调用：
[codeblock]
format(back_inserter(result), fmt, fmt + char_traits<char_type>::length(fmt), flags);
[codeblock:end]

[para:returns]
[:en] [`result].
[:zh_CN] [`result]。
[div:end]
