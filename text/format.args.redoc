[section#format.args
    [:en] Class template [`basic_format_args]
    [:zh_CN] 类模板 [`basic_format_args]
]

[codeblock:synopsis]
namespace std {
  template<class Context>
  class basic_format_args {
    size_t size_;                               // [=expos]
    const basic_format_arg<Context>* data_;     // [=expos]

  public:
    template<class... Args>
      basic_format_args(const [[redoc("*>")]]format-arg-store<Context, Args...>& store) noexcept;

    basic_format_arg<Context> get(size_t i) const noexcept;
  };

  template<class Context, class... Args>
    basic_format_args([[redoc("*>")]]format-arg-store<Context, Args...>) -> basic_format_args<Context>;
}
[codeblock:end]

[para]
[:en] An instance of [`basic_format_args] provides access to formatting
arguments.
[:zh_CN] [`basic_format_args] 的实例提供对所格式化的实参的访问能力。

[:en] Implementations should optimize the representation of [`basic_format_args]
for a small number of formatting arguments.
[:zh_CN] 实现应当针对少量的格式化实参优化 [`basic_format_args] 的表示。

[begin:note]
[:en] For example, by storing indices of type alternatives separately from
values and packing the former.
[:zh_CN] 例如，可以将各类型候选项与各值的索引分开存储并将前者打包存储。
[end:note]

[%@lib@ctor basic_format_args]
[codeblock:declaration]
template<class... Args>
  basic_format_args(const [[redoc("*>")]]format-arg-store<Context, Args...>& store) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [`size_] with [`sizeof...(Args)] and [`data_] with
[`store.args.data()].
[:zh_CN] 以 [`sizeof...(Args)] 初始化 [`size_] 并以 [`store.args.data()] 初始化
[`data_]。
[div:end]

[%@lib@member get[!basic_format_args]]
[codeblock:declaration]
basic_format_arg<Context> get(size_t i) const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`i < size_ ? data_`[i`] : basic_format_arg<Context>()].
[:zh_CN] [`i < size_ ? data_`[i`] : basic_format_arg<Context>()]。
[div:end]
