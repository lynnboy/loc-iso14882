[section#re.traits
    [:en] Class template [`regex_traits]
    [:zh_CN] 类模板 [`regex_traits]
]

[%@library regex_traits]
[codeblock:synopsis [!:var bitmask_type] ]
namespace std {
  template<class charT>
    struct regex_traits {
      using char_type       = charT;
      using string_type     = basic_string<char_type>;
      using locale_type     = locale;
      using char_class_type = [*bitmask_type];

      regex_traits();
      static size_t length(const char_type* p);
      charT translate(charT c) const;
      charT translate_nocase(charT c) const;
      template<class ForwardIterator>
        string_type transform(ForwardIterator first, ForwardIterator last) const;
      template<class ForwardIterator>
        string_type transform_primary(
          ForwardIterator first, ForwardIterator last) const;
      template<class ForwardIterator>
        string_type lookup_collatename(
          ForwardIterator first, ForwardIterator last) const;
      template<class ForwardIterator>
        char_class_type lookup_classname(
          ForwardIterator first, ForwardIterator last, bool icase = false) const;
      bool isctype(charT c, char_class_type f) const;
      int value(charT ch, int radix) const;
      locale_type imbue(locale_type l);
      locale_type getloc() const;
    };
}
[codeblock:end]

[para]
[:en]
[%regular expression traits[!requirements]]
[%requirements[!regular expression traits]]
[%[`regex_traits][!specializations]]
The specializations [`regex_traits<char>] and [`regex_traits<wchar_t>] shall be
valid and shall meet the requirements for a regular expression traits class
([#re.req]).
[:zh_CN]
[%正则表达式特征[!规定]]
[%规定[!正则表达式特征]]
[%[`regex_traits][!特例]]
特例 [`regex_traits<char>] 和 [`regex_traits<wchar_t>] 应当有效，且应当满足对
正则表达式特征类的规定（[#re.req]）。

[%@library regex_traits[!char_class_type]]
[%@library char_class_type[!regex_traits]]
[codeblock:declaration [!:var bitmask_type] ]
using char_class_type = [*bitmask_type];
[codeblock:end]

[div:description]
[para]
[:en] The type [`char_class_type] is used to represent a character
classification and is capable of holding an implementation specific set returned
by [`lookup_classname].
[:zh_CN] 类型 [`char_class_type] 用于表示一种字符分类，且有能力持有
[`lookup_classname] 所返回的实现特有的集合。
[div:end]

[%@library regex_traits[!length]]
[%@library length[!regex_traits]]
[codeblock:declaration]
static size_t length(const char_type* p);
[codeblock:end]

[div:description]
[para:returns]
[:en] [`char_traits<charT>::length(p)].
[:zh_CN] [`char_traits<charT>::length(p)]。
[div:end]

[%@library regex_traits[!translate]]
[%@library translate[!regex_traits]]
[codeblock:declaration]
charT translate(charT c) const;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`c].
[:zh_CN] [`c]。
[div:end]

[%@library regex_traits[!translate_nocase]]
[%@library translate_nocase[!regex_traits]]
[codeblock:declaration]
charT translate_nocase(charT c) const;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`use_facet<ctype<charT>>(getloc()).tolower(c)].
[:zh_CN] [`use_facet<ctype<charT>>(getloc()).tolower(c)]。
[div:end]

[%@library regex_traits[!transform]]
[%@library transform[!regex_traits]]
[codeblock:declaration]
template<class ForwardIterator>
  string_type transform(ForwardIterator first, ForwardIterator last) const;
[codeblock:end]

[div:description]
[para:effects]
[:en] As if by:
[:zh_CN] 如同执行：

[codeblock:notation]
string_type str(first, last);
return use_facet<collate<charT>>(
  getloc()).transform(str.data(), str.data() + str.length());
[codeblock:end]
[div:end]

[%@library regex_traits[!transform_primary]]
[%@library transform_primary[!regex_traits]]
[codeblock:declaration]
template<class ForwardIterator>
  string_type transform_primary(ForwardIterator first, ForwardIterator last) const;
[codeblock:end]

[div:description]
[para:effects]
[:en] If
[:zh_CN] 如果

[codeblock:notation]
typeid(use_facet<collate<charT>>) == typeid(collate_byname<charT>)
[codeblock:end]

[:en@~] and the form of the sort key returned by
[`collate_byname<charT>::transform(first, last)] is known and can be converted
into a primary sort key then returns that key, otherwise returns an empty
string.
[:zh_CN@~] 并且已知 [`collate_byname<charT>::transform(first, last)] 所返回的
排序键值的形式可以被转换为某种基本排序键值，则返回该键值，否则返回空字符串。
[div:end]

[%@library regex_traits[!lookup_collatename]]
[%@library lookup_collatename[!regex_traits]]
[codeblock:declaration]
template<class ForwardIterator>
  string_type lookup_collatename(ForwardIterator first, ForwardIterator last) const;
[codeblock:end]

[div:description]
[para:returns]
[:en] a sequence of one or more characters that represents the collating element
consisting of the character sequence designated by the iterator range
[=range(first,last)].
[:zh_CN] 一个或多个字符的序列，表示由迭代器范围 [=range(first,last)] 所代表的
字符序列所构成的校排元素。

[:en] Returns an empty string if the character sequence is not a valid collating
element.
[:zh_CN] 若该字符序列不是有效的校排元素则返回空字符串。
[div:end]

[%@library regex_traits[!lookup_classname]]
[%@library lookup_classname[!regex_traits]]
[codeblock:declaration]
template<class ForwardIterator>
  char_class_type lookup_classname(
    ForwardIterator first, ForwardIterator last, bool icase = false) const;
[codeblock:end]

[div:description]
[para:returns]
[:en] an unspecified value that represents the character classification named by
the character sequence designated by the iterator range [=range(first,last)].
[:zh_CN] 一个未指明的值，表示由迭代器范围 [=range(first,last)] 所代表的字符序列
所指名的字符类别。

[:en] If the parameter [`icase] is [`true] then the returned mask identifies the
character classification without regard to the case of the characters being
matched, otherwise it does honor the case of the characters being matched.
[#:note#fn:$1]
[:zh_CN] 若形参 [`icase] 为 [`true]，则所返回的掩码所标明的字符类别，不考虑所
匹配的各字符的大小写，否则它将遵守所匹配的各字符的大小写。[#:note#fn:$1]

[note:foot#fn:$1]
[:en] For example, if the parameter [`icase] is [`true] then [``[`[:lower:`]`]]
is the same as [``[`[:alpha:`]`]].
[:zh_CN] 例如，当形参 [`icase] 为 [`true] 时，[``[`[:lower:`]`]] 与
[``[`[:alpha:`]`]] 相同。
[note:end]

[:en] The value returned shall be independent of the case of the characters in
the character sequence.
[:zh_CN] 所返回的值应当与字符序列中的各字符的大小写无关。

[:en] If the name is not recognized then returns [`char_class_type()].
[:zh_CN] 当无法识别其名字时返回 [`char_class_type()]。

[para:remarks]
[:en] For [`regex_traits<char>], at least the narrow character names in
[#:tab#re.traits.classnames] shall be recognized.
[:zh_CN] 对于 [`regex_traits<char>]，应当至少识别 [#:tab#re.traits.classnames] 中的
各个窄字符名。

[:en] For [`regex_traits<wchar_t>], at least the wide character names in
[#:tab#re.traits.classnames] shall be recognized.
[:zh_CN] 对于 [`regex_traits<wchar_t>]，应当至少识别 [#:tab#re.traits.classnames]
中的各个宽字符名。
[div:end]

[%@library regex_traits[!isctype]]
[%@library isctype[!regex_traits]]
[codeblock:declaration]
bool isctype(charT c, char_class_type f) const;
[codeblock:end]

[div:description]
[para:effects]
[:en] Determines if the character [`c] is a member of the character
classification represented by [`f].
[:zh_CN] 确定字符 [`c] 是否是由 [`f] 所表示的字符类别的成员。

[para:returns]
[:en] Given the following function declaration:
[:zh_CN] 给定以下函数声明：

[codeblock]
// [:en] for exposition only \
   [:zh_CN] 仅为阐释目的
template<class C>
  ctype_base::mask convert(typename regex_traits<C>::char_class_type f);
[codeblock:end]

[:en@~] that returns a value in which each [`ctype_base::mask] value
corresponding to a value in [`f] named in [#:tab#re.traits.classnames] is set,
then the result is determined as if by:
[:zh_CN@~] 其所返回的值中，每个对应于 [`f] 在 [#:tab#re.traits.classnames] 中所
指名的值的 [`ctype_base::mask] 值都被设置，然后如同以如下方式确定其结果：

[codeblock:notation]
ctype_base::mask m = convert<charT>(f);
const ctype<charT>& ct = use_facet<ctype<charT>>(getloc());
if (ct.is(m, c)) {
  return true;
} else if (c == ct.widen('_')) {
  charT w[1] = { ct.widen('w') };
  char_class_type x = lookup_classname(w, w+1);
  return (f&x) == x;
} else {
  return false;
}
[codeblock:end]

[begin:example]
[codeblock:notation]
regex_traits<char> t;
string d("d");
string u("upper");
regex_traits<char>::char_class_type f;
f = t.lookup_classname(d.begin(), d.end());
f |= t.lookup_classname(u.begin(), u.end());
ctype_base::mask m = convert<char>(f);  // [`m == ctype_base::digit|ctype_base::upper]
[codeblock:end]
[end:example]

[begin:example]
[codeblock]
regex_traits<char> t;
string w("w");
regex_traits<char>::char_class_type f;
f = t.lookup_classname(w.begin(), w.end());
t.isctype('A', f);  // [:en] returns [`true] \
                       [:zh_CN] 返回 [`true]
t.isctype('_', f);  // [:en] returns [`true] \
                       [:zh_CN] 返回 [`true]
t.isctype(' ', f);  // [:en] returns [`false] \
                       [:zh_CN] 返回 [`false]
[codeblock:end]
[end:example]

[div:end]

[%@library value[!regex_traits]]
[%@library regex_traits[!value]]
[codeblock:declaration]
int value(charT ch, int radix) const;
[codeblock:end]

[div:description]
[para:requires]
[:en] The value of [`radix] shall be 8, 10, or 16.
[:zh_CN] [`radix] 的值应当为 8、10 或 16。

[para:returns]
[:en] the value represented by the digit [`ch] in base [`radix] if the character
[`ch] is a valid digit in base [`radix]; otherwise returns [`-1].
[:zh_CN] 当字符 [`ch] 是以 [`radix] 为基的有效数字时，返回以 [`radix] 为基的数字
[`ch] 所表示的值；否则返回 [`-1]。
[div:end]

[%@library locale]
[%@library imbue]
[codeblock:declaration]
locale_type imbue(locale_type loc);
[codeblock:end]

[div:description]
[para:effects]
[:en] Imbues [`this] with a copy of the locale [`loc].
[:zh_CN] 对 [`this] 浸染地域 [`loc] 的一个副本。

[begin:note]
[:en] Calling [`imbue] with a different locale than the one currently in use
invalidates all cached data held by [`*this].
[:zh_CN] 以与当前所用的地域不同的地域来调用 [`imbue]，将导致 [`*this] 所持有的
所有缓存数据失效。
[end:note]

[para:returns]
[:en] if no locale has been previously imbued then a copy of the global locale
in effect at the time of construction of [`*this], otherwise a copy of the last
argument passed to [`imbue].
[:zh_CN] 如果之前尚未浸染过任何地域，则返回当 [`*this] 构造时有效的全局地域的
副本，否则返回最后一次传递给 [`imbue] 的实参的副本。

[para:ensures]
[:en] [`getloc() == loc].
[:zh_CN] [`getloc() == loc]。
[div:end]

[%@library locale]
[%@library getloc]
[codeblock:declaration]
locale_type getloc() const;
[codeblock:end]

[div:description]
[para:returns]
[:en] if no locale has been imbued then a copy of the global locale in effect at
the time of construction of [`*this], otherwise a copy of the last argument
passed to [`imbue].
[:zh_CN] 如果尚未浸染过任何地域，则返回当 [`*this] 构造时有效的全局地域的副本，
否则返回最后一次传递给 [`imbue] 的实参的副本。
[div:end]

[table:grid#re.traits.classnames
    [:en] Character class names and corresponding [`ctype] masks
    [:zh_CN] 字符类名及其对应的 [`ctype] 掩码
    [|@code
        [:en] Narrow character name
        [:zh_CN] 窄字符名 ]
    [|@code
        [:en] Wide character name
        [:zh_CN] 宽字符名 ]
    [|@code
        [:en] Corresponding [`ctype_base::mask] value
        [:zh_CN] 对应的 [`ctype_base::mask] 值 ]
]
[|] "alnum"  [|] L"alnum"  [|] ctype_base::alnum  [-]
[|] "alpha"  [|] L"alpha"  [|] ctype_base::alpha  [-]
[|] "blank"  [|] L"blank"  [|] ctype_base::blank  [-]
[|] "cntrl"  [|] L"cntrl"  [|] ctype_base::cntrl  [-]
[|] "digit"  [|] L"digit"  [|] ctype_base::digit  [-]
[|] "d"      [|] L"d"      [|] ctype_base::digit  [-]
[|] "graph"  [|] L"graph"  [|] ctype_base::graph  [-]
[|] "lower"  [|] L"lower"  [|] ctype_base::lower  [-]
[|] "print"  [|] L"print"  [|] ctype_base::print  [-]
[|] "punct"  [|] L"punct"  [|] ctype_base::punct  [-]
[|] "space"  [|] L"space"  [|] ctype_base::space  [-]
[|] "s"      [|] L"s"      [|] ctype_base::space  [-]
[|] "upper"  [|] L"upper"  [|] ctype_base::upper  [-]
[|] "w"      [|] L"w"      [|] ctype_base::alnum  [-]
[|] "xdigit" [|] L"xdigit" [|] ctype_base::xdigit [-]
[table:end]
