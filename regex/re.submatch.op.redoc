[section#re.submatch.op
    [:en] Non-member operators
    [:zh_CN] 非成员运算符
]

[para]
[:en] Let [`[^SM-CAT](I)] be
[:zh_CN] 令 [`[^SM-CAT](I)] 为
[codeblock]
compare_three_way_result_t<basic_string<typename iterator_traits<I>::value_type>>
[codeblock:end]

[%@lib@member sub_match[!operator==]]
[codeblock:declaration]
template<class BiIter>
  bool operator==(const sub_match<BiIter>& lhs, const sub_match<BiIter>& rhs);
[codeblock:end]

[div:description]
[para:returns]
[:en] [`lhs.compare(rhs) == 0].
[:zh_CN] [`lhs.compare(rhs) == 0]。
[div:end]

[%@lib@member sub_match[!operator<=>]]
[codeblock:declaration]
template<class BiIter>
  auto operator<=>(const sub_match<BiIter>& lhs, const sub_match<BiIter>& rhs);
[codeblock:end]

[div:description]
[para:returns]
[:en] [`static_cast<[^SM-CAT](BiIter)>(lhs.compare(rhs) <=> 0)].
[:zh_CN] [`static_cast<[^SM-CAT](BiIter)>(lhs.compare(rhs) <=> 0)]。
[div:end]

[%@lib@member operator==[!sub_match]]
[codeblock:declaration]
template<class BiIter, class ST, class SA>
  bool operator==(
      const sub_match<BiIter>& lhs,
      const basic_string<typename iterator_traits<BiIter>::value_type, ST, SA>& rhs);
[codeblock:end]

[div:description]
[para:returns]
[codeblock]
lhs.compare(typename sub_match<BiIter>::string_type(rhs.data(), rhs.size())) == 0
[codeblock:end]
[div:end]

[%@lib@member operator<=>[!sub_match]]
[codeblock:declaration]
template<class BiIter, class ST, class SA>
  bool operator<=>(
      const sub_match<BiIter>& lhs,
      const basic_string<typename iterator_traits<BiIter>::value_type, ST, SA>& rhs);
[codeblock:end]

[div:description]
[para:returns]
[codeblock]
static_cast<[[redoc("^", "n>")]]SM-CAT(BiIter)>(lhs.compare(
    typename sub_match<BiIter>::string_type(rhs.data(), rhs.size()))
      <=> 0
    )
[codeblock:end]
[div:end]

[%@lib@member sub_match[!operator==]]
[codeblock:declaration]
template<class BiIter>
  bool operator==(const sub_match<BiIter>& lhs,
                  const typename iterator_traits<BiIter>::value_type* rhs);
[codeblock:end]

[div:description]
[para:returns]
[:en] [`lhs.compare(rhs) == 0].
[:zh_CN] [`lhs.compare(rhs) == 0]。
[div:end]

[%@lib@member sub_match[!operator<=>]]
[codeblock:declaration]
template<class BiIter>
  auto operator<=>(const sub_match<BiIter>& lhs,
                   const typename iterator_traits<BiIter>::value_type* rhs);
[codeblock:end]

[div:description]
[para:returns]
[:en] [`static_cast<[^SM-CAT](BiIter)>(lhs.compare(rhs) <=> 0)].
[:zh_CN] [`static_cast<[^SM-CAT](BiIter)>(lhs.compare(rhs) <=> 0)]。
[div:end]

[%@lib@member sub_match[!operator==]]
[codeblock:declaration]
template<class BiIter>
  bool operator==(const sub_match<BiIter>& lhs,
                  const typename iterator_traits<BiIter>::value_type& rhs);
[codeblock:end]

[div:description]
[para:returns]
[:en] [`lhs.compare(typename sub_match<BiIter>::string_type(1, rhs)) == 0].
[:zh_CN] [`lhs.compare(typename sub_match<BiIter>::string_type(1, rhs)) == 0]。
[div:end]

[%@lib@member sub_match[!operator<=>]]
[codeblock:declaration]
template<class BiIter>
  auto operator<=>(const sub_match<BiIter>& lhs,
                   const typename iterator_traits<BiIter>::value_type& rhs);
[codeblock:end]

[div:description]
[para:returns]
[codeblock]
static_cast<[[redoc("^", "n>")]]SM-CAT(BiIter)>(lhs.compare(
    typename sub_match<BiIter>::string_type(1, rhs))
      <=> 0
    )
[codeblock:end]
[div:end]

[%@lib basic_ostream]
[%@lib@member sub_match[!operator<<]]
[codeblock:declaration]
template<class charT, class ST, class BiIter>
  basic_ostream<charT, ST>&
    operator<<(basic_ostream<charT, ST>& os, const sub_match<BiIter>& m);
[codeblock:end]

[div:description]
[para:returns]
[:en] [`os << m.str()].
[:zh_CN] [`os << m.str()]。
[div:end]
