[section#re.regex
    [:en] Class template [`basic_regex]
    [:zh_CN] 类模板 [`basic_regex]
]

[%@lib basic_regex]

[para]
[:en] For a char-like type [`charT], specializations of class template
[`basic_regex] represent regular expressions constructed from character
sequences of [`charT] characters.
[:zh_CN] 对于某种字符式类型 [`charT]，类模板 [`basic_regex] 的特例表示从
[`charT] 字符的字符序列所构造的正则表达式。

[:en] In the rest of [#re.regex], [`charT] denotes a given char-like type.
[:zh_CN] [#re.regex] 的余下部分中，[`charT] 代表某种给定的字符式类型。

[:en] Storage for a regular expression is allocated and freed as necessary by
the member functions of class [`basic_regex].
[:zh_CN] 类 [`basic_regex] 的各成员函数根据需要为正则表达式进行存储的分配和释放。

[para]
[:en] Objects of type specialization of [`basic_regex] are responsible for
converting the sequence of [`charT] objects to an internal representation.
[:zh_CN] 类型为 [`basic_regex] 的特例的对象负责将 [`charT] 对象的序列转换为某种
内部表示。

[:en] It is not specified what form this representation takes, nor how it is
accessed by algorithms that operate on regular expressions.
[:zh_CN] 这种表示具有何种形式，以及操作正则表达式的各算法如何对其进行访问，都是
未指明的。

[begin:note]
[:en] Implementations will typically declare some function templates as friends
of [`basic_regex] to achieve this.
[:zh_CN] 各实现通常会将一些函数模板声明为 [`basic_regex] 的友元以达成这点。
[end:note]

[para]
[%@lib regex_error]
[:en] The functions described in this Clause report errors by throwing
exceptions of type [`regex_error].
[:zh_CN] 本章中所描述的各个函数通过抛出 [`regex_error] 类型的异常来报告错误。

[%@lib basic_regex]
[codeblock:synopsis]
namespace std {
  template<class charT, class traits = regex_traits<charT>>
    class basic_regex {
    public:
      // [:en] types \
         [:zh_CN] 类型
      using value_type  =          charT;
      using traits_type =          traits;
      using string_type = typename traits::string_type;
      using flag_type   =          regex_constants::syntax_option_type;
      using locale_type = typename traits::locale_type;

      // [:en] [#re.regex.const], constants \
         [:zh_CN] [#re.regex.const]，常量
      static constexpr flag_type icase = regex_constants::icase;
      static constexpr flag_type nosubs = regex_constants::nosubs;
      static constexpr flag_type optimize = regex_constants::optimize;
      static constexpr flag_type collate = regex_constants::collate;
      static constexpr flag_type ECMAScript = regex_constants::ECMAScript;
      static constexpr flag_type basic = regex_constants::basic;
      static constexpr flag_type extended = regex_constants::extended;
      static constexpr flag_type awk = regex_constants::awk;
      static constexpr flag_type grep = regex_constants::grep;
      static constexpr flag_type egrep = regex_constants::egrep;
      static constexpr flag_type multiline = regex_constants::multiline;

      // [:en] [#re.regex.construct], construct/copy/destroy \
         [:zh_CN] [#re.regex.construct]，构造/复制/销毁
      basic_regex();
      explicit basic_regex(const charT* p, flag_type f = regex_constants::ECMAScript);
      basic_regex(const charT* p, size_t len, flag_type f = regex_constants::ECMAScript);
      basic_regex(const basic_regex&);
      basic_regex(basic_regex&&) noexcept;
      template<class ST, class SA>
        explicit basic_regex(const basic_string<charT, ST, SA>& s,
                             flag_type f = regex_constants::ECMAScript);
      template<class ForwardIterator>
        basic_regex(ForwardIterator first, ForwardIterator last,
                    flag_type f = regex_constants::ECMAScript);
      basic_regex(initializer_list<charT> il, flag_type = regex_constants::ECMAScript);

      ~basic_regex();

      // [:en] [#re.regex.assign], assign \
         [:zh_CN] [#re.regex.assign]，赋值
      basic_regex& operator=(const basic_regex& e);
      basic_regex& operator=(basic_regex&& e) noexcept;
      basic_regex& operator=(const charT* p);
      basic_regex& operator=(initializer_list<charT> il);
      template<class ST, class SA>
        basic_regex& operator=(const basic_string<charT, ST, SA>& s);

      basic_regex& assign(const basic_regex& e);
      basic_regex& assign(basic_regex&& e) noexcept;
      basic_regex& assign(const charT* p, flag_type f = regex_constants::ECMAScript);
      basic_regex& assign(const charT* p, size_t len, flag_type f);
      template<class ST, class SA>
        basic_regex& assign(const basic_string<charT, ST, SA>& s,
                            flag_type f = regex_constants::ECMAScript);
      template<class InputIterator>
        basic_regex& assign(InputIterator first, InputIterator last,
                            flag_type f = regex_constants::ECMAScript);
      basic_regex& assign(initializer_list<charT>,
                          flag_type f = regex_constants::ECMAScript);

      // [:en] [#re.regex.operations], const operations \
         [:zh_CN] [#re.regex.operations]，常量操作
      unsigned mark_count() const;
      flag_type flags() const;

      // [:en] [#re.regex.locale], locale \
         [:zh_CN] [#re.regex.locale]，地域
      locale_type imbue(locale_type loc);
      locale_type getloc() const;

      // [:en] [#re.regex.swap], swap \
         [:zh_CN] [#re.regex.swap]，交换
      void swap(basic_regex&);
    };

  template<class ForwardIterator>
    basic_regex(ForwardIterator, ForwardIterator,
                regex_constants::syntax_option_type = regex_constants::ECMAScript)
      -> basic_regex<typename iterator_traits<ForwardIterator>::value_type>;
}
[codeblock:end]

[include re.regex.construct]

[include re.regex.assign]

[include re.regex.operations]

[include re.regex.locale]

[include re.regex.swap]

[include re.regex.nonmemb]
