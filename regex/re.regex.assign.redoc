[section#re.regex.assign
    [:en] Assignment
    [:zh_CN] 赋值
]

[%@library basic_regex[!operator=]]
[%@library operator=[!basic_regex]]
[codeblock:declaration]
basic_regex& operator=(const basic_regex& e);
[codeblock:end]

[div:description]
[para:effects]
[:en] Copies [`e] into [`*this] and returns [`*this].
[:zh_CN] 将 [`e] 复制到 [`*this] 并返回 [`*this]。

[para:ensures]
[:en] [`flags()] and [`mark_count()] return [`e.flags()] and [`e.mark_count()],
respectively.
[:zh_CN] [`flags()] 和 [`mark_count()] 分别返回 [`e.flags()] 和
[`e.mark_count()]。
[div:end]

[%@library basic_regex[!operator=]]
[%@library operator=[!basic_regex]]
[codeblock:declaration]
basic_regex& operator=(basic_regex&& e) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Move assigns from [`e] into [`*this] and returns [`*this].
[:zh_CN] 从 [`e] 移动赋值给 [`*this] 并返回 [`*this]。

[para:ensures]
[:en] [`flags()] and [`mark_count()] return the values that [`e.flags()] and
[`e.mark_count()], respectively, had before assignment.
[:zh_CN] [`flags()] 和 [`mark_count()] 分别返回 [`e.flags()] 和
[`e.mark_count()] 在赋值之前的值。

[:en] [`e] is in a valid state with unspecified value.
[:zh_CN] [`e] 处于有效状态但具有未指明的值。
[div:end]

[%@library basic_regex[!operator=]]
[%@library operator=[!basic_regex]]
[codeblock:declaration]
basic_regex& operator=(const charT* p);
[codeblock:end]

[div:description]
[para:requires]
[:en] [`p] shall not be a null pointer.
[:zh_CN] [`p] 不能是空指针。

[para:effects]
[:en] Returns [`assign(p)].
[:zh_CN] 返回 [`assign(p)]。
[div:end]

[%@library basic_regex[!operator=]]
[%@library operator=[!basic_regex]]
[codeblock:declaration]
basic_regex& operator=(initializer_list<charT> il);
[codeblock:end]

[div:description]
[para:effects]
[:en] Returns [`assign(il.begin(), il.end())].
[:zh_CN] 返回 [`assign(il.begin(), il.end())]。
[div:end]

[%@library basic_regex[!operator=]]
[%@library operator=[!basic_regex]]
[codeblock:declaration]
template<class ST, class SA>
  basic_regex& operator=(const basic_string<charT, ST, SA>& s);
[codeblock:end]

[div:description]
[para:effects]
[:en] Returns [`assign(s)].
[:zh_CN] 返回 [`assign(s)]。
[div:end]

[%@library basic_regex[!assign]]
[%@library assign[!basic_regex]]
[codeblock:declaration]
basic_regex& assign(const basic_regex& e);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return *this = e;]
[:zh_CN] 等价于：[`return *this = e;]
[div:end]

[%@library basic_regex[!assign]]
[%@library assign[!basic_regex]]
[codeblock:declaration]
basic_regex& assign(basic_regex&& e) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return *this = std::move(e);]
[:zh_CN] 等价于：[`return *this = std::move(e);]
[div:end]

[%@library basic_regex[!assign]]
[%@library assign[!basic_regex]]
[codeblock:declaration]
basic_regex& assign(const charT* p, flag_type f = regex_constants::ECMAScript);
[codeblock:end]

[div:description]
[para:returns]
[:en] [`assign(string_type(p), f)].
[:zh_CN] [`assign(string_type(p), f)]。
[div:end]

[%@library basic_regex[!assign]]
[%@library assign[!basic_regex]]
[codeblock:declaration]
basic_regex& assign(const charT* p, size_t len, flag_type f = regex_constants::ECMAScript);
[codeblock:end]

[div:description]
[para:returns]
[:en] [`assign(string_type(p, len), f)].
[:zh_CN] [`assign(string_type(p, len), f)]。
[div:end]

[%@library basic_regex[!assign]]
[%@library assign[!basic_regex]]
[codeblock:declaration]
template<class string_traits, class A>
  basic_regex& assign(const basic_string<charT, ST, SA>& s,
                      flag_type f = regex_constants::ECMAScript);
[codeblock:end]

[div:description]
[para:throws]
[:en] [`regex_error] if [`s] is not a valid regular expression.
[:zh_CN] 当 [`p] 不是有效正则表达式时抛出 [`regex_error]。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。

[para:effects]
[:en] Assigns the regular expression contained in the string [`s], interpreted
according the flags specified in [`f].
[:zh_CN] 将字符串 [`s] 中所包含的正则表达式赋值，并根据 [`f] 中所指定的各标记来
进行解释。

[:en] If an exception is thrown, [`*this] is unchanged.
[:zh_CN] 若抛出了异常，[`*this] 不会被改变。

[para:ensures]
[:en] If no exception is thrown, [`flags()] returns [`f] and [`mark_count()]
returns the number of marked sub-expressions within the expression.
[:zh_CN] 若未抛出异常，[`flags()] 将返回 [`f] 而 [`mark_count()] 将返回表达式中
标记的子表达式个数。
[div:end]

[%@library basic_regex[!assign]]
[%@library assign[!basic_regex]]
[codeblock:declaration]
template<class InputIterator>
  basic_regex& assign(InputIterator first, InputIterator last,
                      flag_type f = regex_constants::ECMAScript);
[codeblock:end]

[div:description]
[para:requires]
[:en] [`InputIterator] shall meet the [^:oc InputIterator] requirements
([#input.iterators]).
[:zh_CN] [`InputIterator] 应当满足 [^:oc InputIterator] 的规定
（[#input.iterators]）。

[para:returns]
[:en] [`assign(string_type(first, last), f)].
[:zh_CN] [`assign(string_type(first, last), f)]。
[div:end]

[%@library assign[!basic_regex]]
[%@library basic_regex[!assign]]
[codeblock:declaration]
basic_regex& assign(initializer_list<charT> il,
                    flag_type f = regex_constants::ECMAScript);
[codeblock:end]

[div:description]
[para:effects]
[:en] Same as [`assign(il.begin(), il.end(), f)].
[:zh_CN] 与 [`assign(il.begin(), il.end(), f)] 相同。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]
