[section#re.regex.construct
    [:en] [`basic_regex] constructors
    [:zh_CN] [`basic_regex] 构造函数
]

[%@library basic_regex[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
basic_regex();
[codeblock:end]

[enter:description]
[para:effects]
[:en] Constructs an object of class [`basic_regex] that does not match any
character sequence.
[:zh_CN] 构造类 [`basic_regex] 的对象，使其不与任何字符序列匹配。
[exit:description]

[%@library basic_regex[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
explicit basic_regex(const charT* p, flag_type f = regex_constants::ECMAScript);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`p] shall not be a null pointer.
[:zh_CN] [`p] 不能是空指针。

[para:throws]
[:en] [`regex_error] if [`p] is not a valid regular expression.
[:zh_CN] 当 [`p] 不是有效正则表达式时抛出 [`regex_error]。

[para:effects]
[:en] Constructs an object of class [`basic_regex]; the object[=']s internal
finite state machine is constructed from the regular expression contained in the
array of [`charT] of length [`char_traits<charT>::length(p)] whose first element
is designated by [`p], and interpreted according to the flags [`f].
[:zh_CN] 构造类 [`basic_regex] 的对象；以 [`p] 代表第一个元素且长度为
[`char_traits<charT>::length(p)] 的 [`charT] 数组中所包含的正则表达式来构造该
对象内部的有限状态机，并根据标记 [`f] 来进行解释。

[para:postconditions]
[:en] [`flags()] returns [`f].
[:zh_CN] [`flags()] 返回 [`f]。

[:en] [`mark_count()] returns the number of marked sub-expressions within the
expression.
[:zh_CN] [`mark_count()] 返回表达式中标记的子表达式个数。
[exit:description]

[%@library basic_regex[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
basic_regex(const charT* p, size_t len, flag_type f = regex_constants::ECMAScript);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`p] shall not be a null pointer.
[:zh_CN] [`p] 不能是空指针。

[para:throws]
[:en] [`regex_error] if [`p] is not a valid regular expression.
[:zh_CN] 当 [`p] 不是有效正则表达式时抛出 [`regex_error]。

[para:effects]
[:en] Constructs an object of class [`basic_regex]; the object[=']s internal
finite state machine is constructed from the regular expression contained in the
sequence of characters [=range(p,p+len)], and interpreted according the flags
specified in [`f].
[:zh_CN] 构造类 [`basic_regex] 的对象；以字符序列 [=range(p,p+len)] 中所包含的
正则表达式来构造该对象内部的有限状态机，并根据 [`f] 中所指定的各标记来进行解释。

[para:postconditions]
[:en] [`flags()] returns [`f].
[:zh_CN] [`flags()] 返回 [`f]。

[:en] [`mark_count()] returns the number of marked sub-expressions within the
expression.
[:zh_CN] [`mark_count()] 返回表达式中标记的子表达式个数。
[exit:description]

[%@library basic_regex[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
basic_regex(const basic_regex& e);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Constructs an object of class [`basic_regex] as a copy of the object [`e].
[:zh_CN] 构造类 [`regex_error] 的对象作为对象 [`e] 的副本。

[para:postconditions]
[:en] [`flags()] and [`mark_count()] return [`e.flags()] and [`e.mark_count()],
respectively.
[:zh_CN] [`flags()] 和 [`mark_count()] 分别返回 [`e.flags()] 和
[`e.mark_count()]。
[exit:description]

[%@library basic_regex[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
basic_regex(basic_regex&& e) noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Move constructs an object of class [`basic_regex] from [`e].
[:zh_CN] 从 [`e] 移动构造类 [`basic_regex] 的对象。

[para:postconditions]
[:en] [`flags()] and [`mark_count()] return the values that [`e.flags()] and
[`e.mark_count()], respectively, had before construction.
[:zh_CN] [`flags()] 和 [`mark_count()] 分别返回 [`e.flags()] 和
[`e.mark_count()] 在构造之前的值。

[:en] [`e] is in a valid state with unspecified value.
[:zh_CN] [`e] 处于有效状态但具有未指明的值。
[exit:description]

[%@library basic_regex[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
template<class ST, class SA>
  explicit basic_regex(const basic_string<charT, ST, SA>& s,
                       flag_type f = regex_constants::ECMAScript);
[codeblock:end]

[enter:description]
[para:throws]
[:en] [`regex_error] if [`s] is not a valid regular expression.
[:zh_CN] 当 [`s] 不是有效正则表达式时抛出 [`regex_error]。

[para:effects]
[:en] Constructs an object of class [`basic_regex]; the object[=']s internal
finite state machine is constructed from the regular expression contained in the
string [`s], and interpreted according to the flags specified in [`f].
[:zh_CN] 构造类 [`basic_regex] 的对象；以字符串 [`s] 中所包含的正则表达式来构造
该对象内部的有限状态机，并根据 [`f] 中所指定的各标记来进行解释。

[para:postconditions]
[:en] [`flags()] returns [`f].
[:zh_CN] [`flags()] 返回 [`f]。

[:en] [`mark_count()] returns the number of marked sub-expressions within the
expression.
[:zh_CN] [`mark_count()] 返回表达式中标记的子表达式个数。
[exit:description]

[%@library basic_regex[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
template<class ForwardIterator>
  basic_regex(ForwardIterator first, ForwardIterator last,
              flag_type f = regex_constants::ECMAScript);
[codeblock:end]

[enter:description]
[para:throws]
[:en] [`regex_error] if the sequence [=range(first,last)] is not a valid regular
expression.
[:zh_CN] 当序列 [=range(first,last)] 不是有效正则表达式时抛出 [`regex_error]。

[para:effects]
[:en] Constructs an object of class [`basic_regex]; the object[=']s internal
finite state machine is constructed from the regular expression contained in the
sequence of characters [=range(first,last)], and interpreted according to the
flags specified in [`f].
[:zh_CN] 构造类 [`basic_regex] 的对象；以字符序列 [=range(first,last)] 中所包含
的正则表达式来构造该对象内部的有限状态机，并根据 [`f] 中所指定的各标记来进行解释。

[para:postconditions]
[:en] [`flags()] returns [`f].
[:zh_CN] [`flags()] 返回 [`f]。

[:en] [`mark_count()] returns the number of marked sub-expressions within the
expression.
[:zh_CN] [`mark_count()] 返回表达式中标记的子表达式个数。
[exit:description]

[%@library basic_regex[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
basic_regex(initializer_list<charT> il, flag_type f = regex_constants::ECMAScript);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Same as [`basic_regex(il.begin(), il.end(), f)].
[:zh_CN] 与 [`basic_regex(il.begin(), il.end(), f)] 相同。
[exit:description]
