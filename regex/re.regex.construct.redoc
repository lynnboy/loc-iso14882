[section#re.regex.construct
    [:en] Constructors
    [:zh_CN] 构造函数
]

[%@lib@ctor basic_regex]
[codeblock:declaration]
basic_regex();
[codeblock:end]

[div:description]
[para:ensures]
[:en] [`*this] does not match any character sequence.
[:zh_CN] [`*this] 不与任何字符序列匹配。
[div:end]

[%@lib@ctor basic_regex]
[codeblock:declaration]
explicit basic_regex(const charT* p, flag_type f = regex_constants::ECMAScript);
[codeblock:end]

[div:description]
[para:expects]
[:en] [=range(p,p + char_traits<charT>::length(p))] is a valid range.
[:zh_CN] [=range(p,p + char_traits<charT>::length(p))] 为有效范围。

[para:effects]
[:en] The object[=']s internal finite state machine is constructed from the
regular expression contained in the sequence of characters
[=range(p,p + char_traits<charT>::length(p))], and interpreted according to the
flags [`f].
[:zh_CN] 以字符序列 [=range(p,p + char_traits<charT>::length(p))] 中所包含的
正则表达式来构造该对象内部的有限状态机，并根据标记 [`f] 来进行解释。

[para:ensures]
[:en] [`flags()] returns [`f].
[:zh_CN] [`flags()] 返回 [`f]。

[:en] [`mark_count()] returns the number of marked sub-expressions within the
expression.
[:zh_CN] [`mark_count()] 返回表达式中标记的子表达式个数。

[para:throws]
[:en] [`regex_error] if [=range(p,p + char_traits<charT>::length(p))] is not a
valid regular expression.
[:zh_CN] 当 [=range(p,p + char_traits<charT>::length(p))] 不是有效正则表达式时
抛出 [`regex_error]。
[div:end]

[%@lib@ctor basic_regex]
[codeblock:declaration]
basic_regex(const charT* p, size_t len, flag_type f = regex_constants::ECMAScript);
[codeblock:end]

[div:description]
[para:expects]
[:en] [=range(p,p + len)] is a valid range.
[:zh_CN] [=range(p,p + len)] 为有效范围。

[para:effects]
[:en] The object[=']s internal finite state machine is constructed from the
regular expression contained in the sequence of characters [=range(p,p + len)],
and interpreted according the flags specified in [`f].
[:zh_CN] 以字符序列 [=range(p,p + len)] 中所包含的正则表达式来构造该对象内部的
有限状态机，并根据 [`f] 中所指定的各标记来进行解释。

[para:ensures]
[:en] [`flags()] returns [`f].
[:zh_CN] [`flags()] 返回 [`f]。

[:en] [`mark_count()] returns the number of marked sub-expressions within the
expression.
[:zh_CN] [`mark_count()] 返回表达式中标记的子表达式个数。

[para:throws]
[:en] [`regex_error] if [=range(p,p + len)] is not a valid regular expression.
[:zh_CN] 当 [=range(p,p + len)] 不是有效正则表达式时抛出 [`regex_error]。
[div:end]

[%@lib@ctor basic_regex]
[codeblock:declaration]
basic_regex(const basic_regex& e);
[codeblock:end]

[div:description]
[para:ensures]
[:en] [`flags()] and [`mark_count()] return [`e.flags()] and [`e.mark_count()],
respectively.
[:zh_CN] [`flags()] 和 [`mark_count()] 分别返回 [`e.flags()] 和 [`e.mark_count()]。
[div:end]

[%@lib@ctor basic_regex]
[codeblock:declaration]
basic_regex(basic_regex&& e) noexcept;
[codeblock:end]

[div:description]
[para:ensures]
[:en] [`flags()] and [`mark_count()] return the values that [`e.flags()] and
[`e.mark_count()], respectively, had before construction.
[:zh_CN] [`flags()] 和 [`mark_count()] 分别返回 [`e.flags()] 和
[`e.mark_count()] 在构造之前的值。
[div:end]

[%@lib@ctor basic_regex]
[codeblock:declaration]
template<class ST, class SA>
  explicit basic_regex(const basic_string<charT, ST, SA>& s,
                       flag_type f = regex_constants::ECMAScript);
[codeblock:end]

[div:description]
[para:effects]
[:en] The object[=']s internal finite state machine is constructed from the
regular expression contained in the string [`s], and interpreted according to
the flags specified in [`f].
[:zh_CN] 以字符串 [`s] 中所包含的正则表达式来构造该对象内部的有限状态机，并根据
[`f] 中所指定的各标记来进行解释。

[para:ensures]
[:en] [`flags()] returns [`f].
[:zh_CN] [`flags()] 返回 [`f]。

[:en] [`mark_count()] returns the number of marked sub-expressions within the
expression.
[:zh_CN] [`mark_count()] 返回表达式中标记的子表达式个数。

[para:throws]
[:en] [`regex_error] if [`s] is not a valid regular expression.
[:zh_CN] 当 [`s] 不是有效正则表达式时抛出 [`regex_error]。
[div:end]

[%@lib@ctor basic_regex]
[codeblock:declaration]
template<class ForwardIterator>
  basic_regex(ForwardIterator first, ForwardIterator last,
              flag_type f = regex_constants::ECMAScript);
[codeblock:end]

[div:description]
[para:effects]
[:en] The object[=']s internal finite state machine is constructed from the
regular expression contained in the sequence of characters [=range(first,last)],
and interpreted according to the flags specified in [`f].
[:zh_CN] 以字符序列 [=range(first,last)] 中所包含的正则表达式来构造该对象内部的
有限状态机，并根据 [`f] 中所指定的各标记来进行解释。

[para:ensures]
[:en] [`flags()] returns [`f].
[:zh_CN] [`flags()] 返回 [`f]。

[:en] [`mark_count()] returns the number of marked sub-expressions within the
expression.
[:zh_CN] [`mark_count()] 返回表达式中标记的子表达式个数。

[para:throws]
[:en] [`regex_error] if the sequence [=range(first,last)] is not a valid regular
expression.
[:zh_CN] 当序列 [=range(first,last)] 不是有效正则表达式时抛出 [`regex_error]。
[div:end]

[%@lib@ctor basic_regex]
[codeblock:declaration]
basic_regex(initializer_list<charT> il, flag_type f = regex_constants::ECMAScript);
[codeblock:end]

[div:description]
[para:effects]
[:en] Same as [`basic_regex(il.begin(), il.end(), f)].
[:zh_CN] 与 [`basic_regex(il.begin(), il.end(), f)] 相同。
[div:end]
