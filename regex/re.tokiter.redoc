[section#re.tokiter
    [:en] Class template [`regex_token_iterator]
    [:zh_CN] 类模板 [`regex_token_iterator]
]

[para]
[%@lib regex_token_iterator]
[:en] The class template [`regex_token_iterator] is an iterator adaptor; that
is to say it represents a new view of an existing iterator sequence,
by enumerating all the occurrences of a regular expression within that sequence,
and presenting one or more sub-expressions for each match found.
[:zh_CN] 类模板 [`regex_token_iterator] 是一种迭代器适配器；这就是说它用来表示
某个现存迭代器序列的一个新视图，列举该序列中某个正则表达式所有出现的匹配，并为
每个所找到的匹配给出一个或多个子表达式。

[:en] Each position enumerated by the iterator is a [`sub_match] class template
instance that represents what matched a particular sub-expression within the
regular expression.
[:zh_CN] 由该迭代器所列举的每个位置，都是表示正则表达式中某个特定子表达式所匹配
的部分的类模板 [`sub_match] 的一个实例。

[para]
[:en] When class [`regex_token_iterator] is used to enumerate a single
sub-expression with index -1 the iterator performs field splitting: that is to
say it enumerates one sub-expression for each section of the character container
sequence that does not match the regular expression specified.
[:zh_CN] 当使用 [`regex_token_iterator] 以索引 -1 来列举单个子表达式时，该迭代器
进行字段拆分：这是说它为字符容器序列中与所指定的正则表达式并不匹配的每个部分列举
一个子表达式。

[para]
[%@lib match_results]
[:en] After it is constructed, the iterator finds and stores a value
[`regex_iterator<BidirectionalIterator> position] and sets the internal count
[`N] to zero.
[:zh_CN] 迭代器被构造之后，它查找并存储一个值
[`regex_iterator<BidirectionalIterator> position]，并将内部计数 [`N] 设为零。

[:en] It also maintains a sequence [`subs] which contains a list of the
sub-expressions which will be enumerated.
[:zh_CN] 它还维护一个包含将被列举的子表达式的列表的序列 [`subs]。

[:en] Every time [`operator++] is used the count [`N] is incremented; if [`N]
exceeds or equals [`subs.size()], then the iterator increments member
[`position] and sets count [`N] to zero.
[:zh_CN] 每次使用 [`operator++] 时都增加 [`N]；若 [`N] 超过或等于 [`subs.size()]
则迭代器增加成员 [`position] 并将计数 [`N] 设为零。

[para]
[:en]
[%[`regex_token_iterator][!end-of-sequence]]
If the end of sequence is reached ([`position] is equal to the end of sequence
iterator), the iterator becomes equal to the end-of-sequence iterator value,
unless the sub-expression being enumerated has index -1, in which case the
iterator enumerates one last sub-expression that contains all the characters
from the end of the last regular expression match to the end of the input
sequence being enumerated, provided that this would not be an empty
sub-expression.
[:zh_CN]
[%[`regex_token_iterator][!序列末尾]]
如果到达了序列末尾（[`position] 等于序列末尾迭代器），则迭代器变为与序列末尾
迭代器值相等，除非所列举的子表达式具有索引 -1，这种情况下迭代器列举最后一个
子表达式，它包含从最后一个正则表达式匹配的末尾到所列举的输入序列的末尾的所有
字符，只要这不是一个空子表达式。

[para]
[:en]
[%@lib@raw [`regex_token_iterator][!end-of-sequence]]
The default constructor constructs an end-of-sequence iterator object, which is
the only legitimate iterator to be used for the end condition.
[:zh_CN]
[%@lib@raw [`regex_token_iterator][!序列末尾]]
默认构造函数所构造的是序列末尾迭代器对象，它是用于结束条件的唯一正当的迭代器。

[:en] The result of [`operator*] on an end-of-sequence iterator is not defined.
[:zh_CN] 对序列末尾迭代器进行 [`operator*] 的结果是未定义的。

[:en] For any other iterator value a [`const sub_match<BidirectionalIterator>&]
is returned.
[:zh_CN] 对于任何其他迭代器值，都返回一个
[`const sub_match<BidirectionalIterator>&]。

[:en] The result of [`operator->] on an end-of-sequence iterator is not defined.
[:zh_CN] 对序列末尾迭代器进行 [`operator->] 的结果是未定义的。

[:en] For any other iterator value a [`const sub_match<BidirectionalIterator>*]
is returned.
[:zh_CN] 对于任何其他迭代器值，都返回一个
[`const sub_match<BidirectionalIterator>*]。

[para]
[%@lib@member regex_token_iterator[!operator==]]
[:en] It is impossible to store things into [`regex_token_iterator]s.
[:zh_CN] 不可能向 [`regex_token_iterator] 中存储东西。

[:en] Two end-of-sequence iterators are always equal.
[:zh_CN] 两个序列末尾迭代器总是相等。

[:en] An end-of-sequence iterator is not equal to a non-end-of-sequence
iterator.
[:zh_CN] 序列末尾迭代器与非序列末尾迭代器不相等。

[:en] Two non-end-of-sequence iterators are equal when they are constructed from
the same arguments.
[:zh_CN] 两个非序列末尾迭代器，当它们从相同的实参构造时，它们相等。

[codeblock:synopsis]
namespace std {
  template<class BidirectionalIterator,
            class charT = typename iterator_traits<BidirectionalIterator>::value_type,
            class traits = regex_traits<charT>>
    class regex_token_iterator {
    public:
      using regex_type        = basic_regex<charT, traits>;
      using iterator_category = forward_iterator_tag;
      using value_type        = sub_match<BidirectionalIterator>;
      using difference_type   = ptrdiff_t;
      using pointer           = const value_type*;
      using reference         = const value_type&;

      regex_token_iterator();
      regex_token_iterator(BidirectionalIterator a, BidirectionalIterator b,
                           const regex_type& re,
                           int submatch = 0,
                           regex_constants::match_flag_type m =
                             regex_constants::match_default);
      regex_token_iterator(BidirectionalIterator a, BidirectionalIterator b,
                           const regex_type& re,
                           const vector<int>& submatches,
                           regex_constants::match_flag_type m =
                             regex_constants::match_default);
      regex_token_iterator(BidirectionalIterator a, BidirectionalIterator b,
                           const regex_type& re,
                           initializer_list<int> submatches,
                           regex_constants::match_flag_type m =
                             regex_constants::match_default);
      template<size_t N>
        regex_token_iterator(BidirectionalIterator a, BidirectionalIterator b,
                             const regex_type& re,
                             const int (&submatches)[N],
                             regex_constants::match_flag_type m =
                               regex_constants::match_default);
      regex_token_iterator(BidirectionalIterator a, BidirectionalIterator b,
                           const regex_type&& re,
                           int submatch = 0,
                           regex_constants::match_flag_type m =
                             regex_constants::match_default) = delete;
      regex_token_iterator(BidirectionalIterator a, BidirectionalIterator b,
                           const regex_type&& re,
                           const vector<int>& submatches,
                           regex_constants::match_flag_type m =
                             regex_constants::match_default) = delete;
      regex_token_iterator(BidirectionalIterator a, BidirectionalIterator b,
                           const regex_type&& re,
                           initializer_list<int> submatches,
                           regex_constants::match_flag_type m =
                             regex_constants::match_default) = delete;
      template<size_t N>
      regex_token_iterator(BidirectionalIterator a, BidirectionalIterator b,
                           const regex_type&& re,
                           const int (&submatches)[N],
                           regex_constants::match_flag_type m =
                             regex_constants::match_default) = delete;
      regex_token_iterator(const regex_token_iterator&);
      regex_token_iterator& operator=(const regex_token_iterator&);
      bool operator==(const regex_token_iterator&) const;
      const value_type& operator*() const;
      const value_type* operator->() const;
      regex_token_iterator& operator++();
      regex_token_iterator operator++(int);

    private:
      using position_iterator =
        regex_iterator<BidirectionalIterator, charT, traits>;   // [=expos]
      position_iterator position;                               // [=expos]
      const value_type* result;                                 // [=expos]
      value_type suffix;                                        // [=expos]
      size_t N;                                                 // [=expos]
      vector<int> subs;                                         // [=expos]
    };
}
[codeblock:end]

[para]
[:en] A [+suffix iterator[%]] is a [`regex_token_iterator] object that points to
a final sequence of characters at the end of the target sequence.
[:zh_CN] [+后缀迭代器[%]]是指向目标序列末尾处的最后的字符序列的
[`regex_token_iterator]。

[:en] In a suffix iterator the member [`result] holds a pointer to the data
member [`suffix], the value of the member [`suffix.match] is [`true],
[`suffix.first] points to the beginning of the final sequence, and
[`suffix.second] points to the end of the final sequence.
[:zh_CN] 后缀迭代器中的 [`result] 成员持有指向数据成员 [`suffix] 的指针，成员
[`suffix.match] 的值为 [`true]，[`suffix.first] 指向最终序列的开始，而
[`suffix.second] 指向最终序列的末尾。

[para]
[begin:note]
[:en] For a suffix iterator, data member [`suffix.first] is the same as the end
of the last match found, and [`suffix.second] is the same as the end of the
target sequence
[:zh_CN] 对于后缀迭代器来说，数据成员 [`suffix.first] 与最后一次找到的匹配的末尾
相同，而 [`suffix.second] 则与目标序列的末尾相同。
[end:note]

[para]
[:en] The [+current match[%]] is [`(*position).prefix()] if [`subs`[N`] == -1],
or [`(*position)`[subs`[N`]`]] for any other value of [`subs`[N`]].
[:zh_CN] [+当前匹配[%]]，当 [`subs`[N`] == -1] 时为 [`(*position).prefix()]，
或者对于任何其他的 [`subs`[N`]] 值为 [`(*position)`[subs`[N`]`]]。

[include re.tokiter.cnstr]

[include re.tokiter.comp]

[include re.tokiter.deref]

[include re.tokiter.incr]
