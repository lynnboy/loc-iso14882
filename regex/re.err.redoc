[section#re.err
    [:en] Implementation-defined [`error_type]
    [:zh_CN] 由实现定义的 [`error_type]
]

[%@lib error_type]
[%@lib@member regex_constants[!error_type]]
[codeblock:synopsis]
namespace std::regex_constants {
  using error_type = [[redoc("*", "n>")]]T3;
  inline constexpr error_type error_collate = [[redoc("=unspec")]];
  inline constexpr error_type error_ctype = [[redoc("=unspec")]];
  inline constexpr error_type error_escape = [[redoc("=unspec")]];
  inline constexpr error_type error_backref = [[redoc("=unspec")]];
  inline constexpr error_type error_brack = [[redoc("=unspec")]];
  inline constexpr error_type error_paren = [[redoc("=unspec")]];
  inline constexpr error_type error_brace = [[redoc("=unspec")]];
  inline constexpr error_type error_badbrace = [[redoc("=unspec")]];
  inline constexpr error_type error_range = [[redoc("=unspec")]];
  inline constexpr error_type error_space = [[redoc("=unspec")]];
  inline constexpr error_type error_badrepeat = [[redoc("=unspec")]];
  inline constexpr error_type error_complexity = [[redoc("=unspec")]];
  inline constexpr error_type error_stack = [[redoc("=unspec")]];
}
[codeblock:end]

[para]
[%@lib error_type]
[%@lib@member regex_constants[!error_type]]
[:en] The type [`error_type] is an [?impldef type of
[`regex_constants::error_type]] enumerated type ([#enumerated.types]).
[:zh_CN] 类型 [`error_type] 是一种[?impldef [`regex_constants::error_type] 的
类型]列举类型（[#enumerated.types]）。

[:en] Values of type [`error_type] represent the error conditions described in
[#:tab#re.err]:
[:zh_CN] 类型 [`error_type] 的各个值表示 [#:tab#re.err] 中所述的错误条件：

[table:grid#re.err
    [:en] [`error_type] values in the C locale
    [:zh_CN] [`error_type] 在 C 地域中的值
    [|@code
        [:en] Value
        [:zh_CN] 值
    ]
    [|
        [:en] Error condition
        [:zh_CN] 错误条件
    ]
]

[|] error_collate
[|] [:en] The expression contained an invalid collating element name.
    [:zh_CN] 表达式包含无效的校排元素名。
[-]

[|] error_ctype
[|] [:en] The expression contained an invalid character class name.
    [:zh_CN] 表达式包含无效的字符类名。
[-]

[|] error_escape
[|] [:en] The expression contained an invalid escaped character, or a trailing
    escape.
    [:zh_CN] 表达式包含无效的转义字符或处于末尾的转义。
[-]

[|] error_backref
[|] [:en] The expression contained an invalid back reference.
    [:zh_CN] 表达式包含无效的后向引用。
[-]

[|] error_brack
[|] [:en] The expression contained mismatched [``[] and [``]].
    [:zh_CN] 表达式包含未匹配的 [``[] 和 [``]]。
[-]

[|] error_paren
[|] [:en] The expression contained mismatched [`(] and [`)].
    [:zh_CN] 表达式包含未匹配的 [`(] 和 [`)]。
[-]

[|] error_brace
[|] [:en] The expression contained mismatched [`{] and [`}].
    [:zh_CN] 表达式包含未匹配的 [`{] 和 [`}]。
[-]

[|] error_badbrace
[|] [:en] The expression contained an invalid range in a [`{}] expression.
    [:zh_CN] 表达式中的某个 [`{}] 包含无效的范围。
[-]

[|] error_range
[|] [:en] The expression contained an invalid character range, such as
    [``[b-a`]] in most encodings.
    [:zh_CN] 表达式中包含无效的字符范围，比如大多数编码中的 [``[b-a`]]。
[-]

[|] error_space
[|] [:en] There was insufficient memory to convert the expression into a finite
    state machine.
    [:zh_CN] 没有足够的内存将表达式转换为有限状态机。
[-]

[|] error_badrepeat
[|] [:en] One of [`*?+{] was not preceded by a valid regular expression.
    [:zh_CN] [`*?+{] 之一并未跟在有效的正则表达式之后。
[-]

[|] error_complexity
[|] [:en] The complexity of an attempted match against a regular expression
    exceeded a pre-set level.
    [:zh_CN] 试图对某个正则表达式进行匹配的复杂度超过了某个预置的等级。
[-]

[|] error_stack
[|] [:en] There was insufficient memory to determine whether the regular
    expression could match the specified character sequence.
    [:zh_CN] 没有足够的内存用以确定正则表达式是否与指定的字符序列匹配。
[-]
[table:end]
