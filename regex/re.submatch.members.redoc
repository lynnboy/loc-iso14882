[section#re.submatch.members
    [:en] Members
    [:zh_CN] 成员
]

[%@lib@ctor sub_match]
[codeblock:declaration]
constexpr sub_match();
[codeblock:end]

[div:description]
[para:effects]
[:en] Value-initializes the [`pair] base class subobject and the member
[`matched].
[:zh_CN] 值初始化 [`pair] 基类子对象和 [`matched] 成员。
[div:end]

[%@lib@member sub_match[!length]]
[codeblock:declaration]
difference_type length() const;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`matched ? distance(first, second) : 0].
[:zh_CN] [`matched ? distance(first, second) : 0]。
[div:end]

[%@lib@member operator basic_string[!sub_match]]
[codeblock:declaration]
operator string_type() const;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`matched ? string_type(first, second) : string_type()].
[:zh_CN] [`matched ? string_type(first, second) : string_type()]。
[div:end]

[%@lib@member sub_match[!str]]
[codeblock:declaration]
string_type str() const;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`matched ? string_type(first, second) : string_type()].
[:zh_CN] [`matched ? string_type(first, second) : string_type()]。
[div:end]

[%@lib@member sub_match[!compare]]
[codeblock:declaration]
int compare(const sub_match& s) const;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`str().compare(s.str())].
[:zh_CN] [`str().compare(s.str())]。
[div:end]

[%@lib@member sub_match[!compare]]
[codeblock:declaration]
int compare(const string_type& s) const;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`str().compare(s)].
[:zh_CN] [`str().compare(s)]。
[div:end]

[%@lib@member sub_match[!compare]]
[codeblock:declaration]
int compare(const value_type* s) const;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`str().compare(s)].
[:zh_CN] [`str().compare(s)]。
[div:end]

[%@lib@member sub_match[!swap]]
[codeblock:declaration]
void swap(sub_match& s) noexcept([[redoc("[=seebelow]")]]);
[codeblock:end]

[div:description]
[para:expects]
[:en] [`BidirectionalIterator] meets the [^:oc Swappable] requirements
([#swappable.requirements]).
[:zh_CN] [`BidirectionalIterator] 满足 [^:oc Swappable] 的规定
（[#swappable.requirements]）。

[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
this->pair<BidirectionalIterator, BidirectionalIterator>::swap(s);
std::swap(matched, s.matched);
[codeblock:end]

[para:remarks]
[:en] The exception specification is equivalent to
[`is_nothrow_swappable_v<BidirectionalIterator>].
[:zh_CN] 其异常说明等价于 [`is_nothrow_swappable_v<BidirectionalIterator>]。
[div:end]
