[section#dcl.ambig.res
    [:en] Ambiguity resolution
    [:zh_CN] 歧义消解

[:en]
[%ambiguity[!declaration versus cast]]
[%declaration[!parentheses in]]
[:zh_CN]
[%歧义[!声明式与转型]]
[%声明式[!～中的括号]]
]

[para]
[:en]
The ambiguity arising from the similarity between a function-style cast and a
declaration mentioned in [#stmt.ambig] can also occur in the context of a
declaration.
[:zh_CN]
[#stmt.ambig] 中所提到的由函数风格的转型和声明式之间的相似性所引起的歧义，也会在
声明式的语境中出现。

[:en]
In that context, the choice is between a function declaration with a redundant
set of parentheses around a parameter name and an object declaration with a
function-style cast as the initializer.
[:zh_CN]
在这个语境中，其选择介于一个带有一组围绕形参名的多余括号的函数声明式，和一个以
函数风格的转型作为其初始化式的对象声明式之间。

[:en]
Just as for the ambiguities mentioned in [#stmt.ambig], the resolution is to
consider any construct that could possibly be a declaration a declaration.
[:zh_CN]
正如 [#stmt.ambig] 中所提到的歧义那样，其解决办法是把可能是声明式的任何构造都
当作声明式看待。

[begin:note]
[:en]
A declaration can be explicitly disambiguated by adding parentheses around the
argument.
[:zh_CN]
要明确消解声明式的歧义，可以为实参加上括号。

[:en]
The ambiguity can be avoided by use of copy-initialization or
list-initialization syntax, or by use of a non-function-style cast.
[:zh_CN]
这种歧义也可以通过使用复制初始化或者列表初始化的语法，或者使用非函数式的转型来
予以消解。
[end:note]

[begin:example]
[codeblock]
struct S {
  S(int);
};

void foo(double a) {
  S w(int(a));                  // [:en] function declaration \
                                   [:zh_CN] 函数声明式
  S x(int());                   // [:en] function declaration \
                                   [:zh_CN] 函数声明式
  S y((int(a)));                // [:en] object declaration \
                                   [:zh_CN] 对象声明式
  S y((int)a);                  // [:en] object declaration \
                                   [:zh_CN] 对象声明式
  S z = int(a);                 // [:en] object declaration \
                                   [:zh_CN] 对象声明式
}
[codeblock:end]
[end:example]

[para]
[:en]
An ambiguity can arise from the similarity between a function-style cast and a
[~type-id].
[:zh_CN]
函数风格的转型和[~类型标识]之间的相似性也会造成歧义。

[:en]
The resolution is that any construct that could possibly be a [~type-id] in its
syntactic context shall be considered a [~type-id].
[:zh_CN]
其解决办法是，在其语法语境中能够被当作[~类型标识]的任何构造都被当作[~类型标识]。

[begin:example]
[codeblock]
template <class T> struct X {};
template <int N> struct Y {};
X<int()> a;                     // [:en] type-id \
                                   [:zh_CN] 类型标识
X<int(1)> b;                    // [:en] expression (ill-formed) \
                                   [:zh_CN] 表达式（非良构）
Y<int()> c;                     // [:en] type-id (ill-formed) \
                                   [:zh_CN] 类型标识（非良构）
Y<int(1)> d;                    // [:en] expression \
                                   [:zh_CN] 表达式

void foo(signed char a) {
  sizeof(int());                // [:en] type-id (ill-formed) \
                                   [:zh_CN] 类型标识（非良构）
  sizeof(int(a));               // [:en] expression \
                                   [:zh_CN] 表达式
  sizeof(int(unsigned(a)));     // [:en] type-id (ill-formed) \
                                   [:zh_CN] 类型标识（非良构）

  (int())+1;                    // [:en] type-id (ill-formed) \
                                   [:zh_CN] 类型标识（非良构）
  (int(a))+1;                   // [:en] expression \
                                   [:zh_CN] 表达式
  (int(unsigned(a)))+1;         // [:en] type-id (ill-formed) \
                                   [:zh_CN] 类型标识（非良构）
}
[codeblock:end]
[end:example]

[para]
[:en]
Another ambiguity arises in a [~parameter-declaration-clause] when a
[~type-name] is nested in parentheses.
[:zh_CN]
在[~形参声明子句]中，当[~类型名]嵌套于括号中时会产生另一种歧义。

[:en]
In this case, the choice is between the declaration of a parameter of type
pointer to function and the declaration of a parameter with redundant
parentheses around the [~declarator-id].
[:zh_CN]
在这些情况下，其选择介于一个类型为指向函数的指针的形参的声明式，和一个以多余的
括号包围其[~声明符标识]的形参声明式之间。

[:en]
The resolution is to consider the [~type-name] as a [~simple-type-specifier]
rather than a [~declarator-id].
[:zh_CN]
其解决办法是，把这个[~类型名]当作[~简单类型说明符]而不是[~声明符标识]。

[begin:example]
[codeblock]
class C { };
void f(int(C)) { }              // [`void f(int(*fp)(C c)) { }]
                                // [:en] not: [`void f(int C) { }] \
                                   [:zh_CN] 而不是：[`void f(int C) { }]

int g(C);

void foo() {
  f(1);                         // [:en] error: cannot convert [`1] to function pointer \
                                   [:zh_CN] 错误：不能把 [`1] 转换为函数指针
  f(g);                         // OK
}
[codeblock:end]

[:en]
For another example,
[:zh_CN]
又例如，

[codeblock]
class C { };
void h(int *(C[10]));           // [`void h(int *(*_fp)(C _parm`[10`]));]
                                // [:en] not: [`void h(int *C`[10`]);] \
                                   [:zh_CN] 而不是：[`void h(int *C`[10`]);]
[codeblock:end]
[end:example]
