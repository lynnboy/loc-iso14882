[section#namespace.udecl
    [:en] The [`using] declaration
    [:zh_CN] [`using] 声明式

[%:begin#using.declaration
    [:en] using-declaration
    [:zh_CN] using 声明式
]
]

[syntax]
[rule using-declaration [:zh_CN] using-声明式 ]
    [| [`:key using] using-declarator-list [`;] ]
[rule:end]

[rule using-declarator-list [:zh_CN] using-声明符列表 ]
    [| using-declarator [`:opt ...] ]
    [| using-declarator-list [`,] using-declarator [`:opt ...] ]
[rule:end]

[rule using-declarator [:zh_CN] using-声明符 ]
    [| [`:opt:key typename] nested-name-specifier unqualified-id ]
[rule:end]
[syntax:end]

[para]
[:en]
[%component name]
The component names of a [~using-declarator] are those of its
[~nested-name-specifier] and [~unqualified-id].
[:zh_CN]
[%成分名]
[~using-声明符]的成分名，为其[~嵌套名说明符]和[~无限定标识]的成分名。

[:en]
Each [~using-declarator] in a [~using-declaration][#:fn] names the set of
declarations found by lookup ([#basic.lookup.qual]) for the [~using-declarator],
except that class and enumeration declarations that would be discarded are
merely ignored when checking for ambiguity ([#basic.lookup]), conversion
function templates with a dependent return type are ignored, and certain
functions are hidden as described below.
[:zh_CN]
[~using-声明式]中的各个[~using-声明符][#:fn]，均指名对该[~using-声明式]查找所
找到的声明式集合，但在进行歧义检查（[#basic.lookup]）时，本将被丢弃的类和枚举的
声明式只是被忽略，忽略具有待决返回类型的转换函数模板，并且按下文所述隐藏了一些
函数。

[note:foot]
[:en]
A [~using-declaration] with more than one [~using-declarator] is equivalent to
a corresponding sequence of [~using-declaration]s with one [~using-declarator]
each.
[:zh_CN]
有多个 [~using-声明符]的[~using-声明式]，等价于其相应的一系列[~using-声明式]，
其中每个带有一个[~using-声明符]。
[note:end]

[:en]
If the terminal name of the [~using-declarator] is dependent ([#temp.dep.type]),
the [~using-declarator] is considered to name a constructor if and only if the
[~nested-name-specifier] has a terminal name that is the same as the
[~unqulaified-id].
[:zh_CN]
如果[~using-声明符]的终端名是待决的（[#temp.dep.type]），则当且仅当
其[~嵌套名说明符]具有与[~无限定标识]相同的终端名时，该[~using-声明符]被认为指名
构造函数。

[:en]
If the lookup in any instantiation finds that a [~using-declarator] that is not
considered to name a constructor does do so, or that a [~using-declarator] that
is considered to name a constructor does not, the program is ill-formed.
[:zh_CN]
如果在任何实例化中的查找找到了某个未被认为指名构造函数的 [~using-声明符]却指名了
构造函数，或者被认为指名构造函数的 [~using-声明符]并未指名构造函数，则程序非良构。

[para]
[:en]
[%inheritance[![~using-declaration] and]]
If the [~using-declarator] names a constructor, it declares that the class
[+inherits[%constructor[!inherited]]] the named set of constructor declarations
from the nominated base class.
[:zh_CN]
[%继承[![~using-声明式]与～]]
当[~using-声明符]指名构造函数时，它声明，这个类从所提名的基类中[+继承[%构造函数
[!继承～]]]所指名的构造函数声明式的集合。

[begin:note]
[:en]
Otherwise, the [~unqualified-id] in the [~using-declarator] is bound to the
[~using-declarator], which is replaced during name lookup with the declarations
it names ([#basic.lookup]).
[:zh_CN]
否则，[~using-声明符]中的[~无限定标识]与该 [~using-声明符]绑定，它将在名字查找中
被其所指名的声明式（[#basic.lookup]）所替换。

[:en]
If such a declaration is of an enumeration, the names of its enumerators are not
bound.
[:zh_CN]
如果这种声明式是某个枚举，则其各个枚举符的名字并未绑定。

[:en]
For the keyword [`:key typename], see [#temp.res].
[:zh_CN]
有关关键字 [`:key typename]，参见 [#temp.res]。
[end:note]

[para]
[:en]
In a [~using-declaration] used as a [~member-declaration], each
[~using-decoarator] shall either name an enumerator or have a
[~nested-name-specifier] naming a base class of the current class
([#expr.prim.this]).
[:zh_CN]
用作[~成员声明式]的 [~using-声明式]中，其各个[~using-声明符]应当要么指名某个
枚举符，要么带有指名当前类（[#expr.prim.this]）的某个基类的[~嵌套名说明符]。

[begin:example]
[codeblock]
enum class button { up, down };
struct S {
  using button::up;
  button b = up;                // OK
};
[codeblock:end]
[end:example]

[:en]
If a [~using-declarator] names a constructor, its [~nested-name-specifier] shall
name a direct base class of the current class.
[:zh_CN]
如果某个 [~using-声明符]指名了构造函数，则其[~嵌套名说明符]应当指名当前类的直接
基类。

[:en]
If the immediate (class) scope is associated with a class template, it shall
derive from the specified base class or have at least one dependent base class.
[:zh_CN]
如果直接（类）作用域与某个类模板相关联，则它应当派生于所指定的基类或者具有至少
一个待决基类。

[begin:example]
[codeblock]
struct B {
  void f(char);
  enum E { e };
  union { int x; };
};

struct C {
  int f();
};

struct D : public B {
  using B::f;                   // [:en] OK, [`B] is a base of [`D] \
                                [:zh_CN] OK，[`B] 是 [`D] 的基类
  using B::e;                   // [:en] OK, [`e] is an enumerator of base [`B] \
                                [:zh_CN] OK，[`e] 是基类 [`B] 的枚举符
  using B::x;                   // [:en] OK, [`x] is a union member of base [`B] \
                                [:zh_CN] OK，[`x] 是基类 [`B] 的联合体成员
  using C::f;                   // [:en] error: [`C] isn[=']t a base of [`D] \
                                [:zh_CN] 错误：[`C] 不是 [`D] 的基类
  void f(int) { f('c'); }       // [:en] calls [`B::f(char)] \
                                [:zh_CN] 调用 [`B::f(char)]
  void g(int) { g('c'); }       // [:en] recursively calls [`D::g(int)] \
                                [:zh_CN] 递归调用 [`D::g(int)]
};
template <typename... bases>
struct X : bases... {
  using bases::f...;
};
X<B, C> x;                      // [:en] OK, [`B::f] and [`C::f] named \
                                [:zh_CN] OK，指名了 [`B::f] 和 [`C::f]
[codeblock:end]
[end:example]

[para]
[begin:note]
[:en]
Since destructors do not have names, a [~using-declaration] cannot refer to a
destructor for a base class.
[:zh_CN]
由于析构函数没有名字，[~using-声明式]无法涉指基类的析构函数。
[end:note]

[:en]
If a constructor or assignment operator brought from a base class into a derived
class has the signature of a copy/move constructor or assignment operator for
the derived class ([#class.copy.ctor], [#class.copy.assign]), the
[~using-declaration] does not by itself suppress the implicit declaration of the
derived class member; the member from the base class is hidden or overridden by
the implicitly-declared copy/move constructor or assignment operator of the
derived class, as described below.
[:zh_CN]
当从基类带入派生类中的构造函数或赋值运算符具有派生类的复制/移动构造函数或赋值
运算符（[#class.copy.ctor]，[#class.copy.assign]）的签名时，[~using-声明式]
自身并不能抑制派生类的成员的隐含声明式；来自基类的成员将被派生类中隐式声明的
复制/移动构造函数或赋值运算符所隐藏或覆盖，如下文所述。

[para]
[:en]
A [~using-declaration] shall not name a [~template-id].
[:zh_CN]
[~using-声明式]不能指名[~模板标识]。

[begin:example]
[codeblock]
struct A {
  template <class T> void f(T);
  template <class T> struct X { };
};
struct B : A {
  using A::f<double>;           // [:en] error \
                                [:zh_CN] 错误
  using A::X<int>;              // [:en] error \
                                [:zh_CN] 错误
};
[codeblock:end]
[end:example]

[para]
[:en]
A [~using-declaration] shall not name a namespace.
[:zh_CN]
[~using-声明式]不能指名命名空间。

[para]
[:en]
A [~using-declaration] that names a class member other than an enumerator shall
be a [~member-declaration].
[:zh_CN]
指名并非枚举符的类成员的[~using-声明式]应当是[~成员声明式]。

[begin:example]
[codeblock]
struct X {
  int i;
  static int s;
};

void f() {
  using X::i;                   // [:en] error: [`X::i] is a class member and this is not a member declaration. \
                                [:zh_CN] 错误：[`X::i] 是类成员，而这并不是成员声明式。
  using X::s;                   // [:en] error: [`X::s] is a class member and this is not a member declaration. \
                                [:zh_CN] 错误：[`X::s] 是类成员，而这并不是成员声明式。
}
[codeblock:end]
[end:example]

[para]
[:en]
If a declaration is named by two [~using-declarator]s that inhabit the same
class scope, the program is ill-formed.
[:zh_CN]
如果居于相同类作用域的两个 [~using-声明符]指名了一个声明式，则程序非良构。

[begin:example]
[codeblock]
struct C {
  int i;
};

struct D1 : C { };
struct D2 : C { };

struct D3 : D1, D2 {
  using D1::i;                  // [:en] OK, equivalent to [`using C::i] \
                                [:zh_CN] OK，等价于 [`using C::i]
  using D1::i;                  // [:en] error: duplicate \
                                [:zh_CN] 错误：重复
  using D2::i;                  // [:en] error: duplicate, also names [`C::i] \
                                [:zh_CN] 错误：重复，同样指名 [`C::i]
};
[codeblock:end]
[end:example]

[para]
[begin:note]
[:en]
A [~using-declarator] whose [~nested-name-specifier] names a namespace does not
name declarations added to the namespace after it.
[:zh_CN]
[~嵌套名说明符]指名了命名空间的[~using-声明符]，并不会指名在其之后加入到命名空间
的声明式。

[:en]
Thus, additional overloads added after the [~using-declaration] are ignored, but
default function arguments ([#dcl.fct.default]), default template arguments
([#temp.param]), and template specializations ([#temp.spec.partial],
[#temp.expl.spec]) are considered.
[:zh_CN]
因此，于 [~using-声明式]之后添加的其他重载是不被考察的，但要考察默认函数实参
（[#dcl.fct.default]），默认模板实参（[#temp.param]），以及模板的特化式
（[#temp.spec.partial]，[#temp.expl.spec]）。
[end:note]

[begin:example]
[codeblock]
namespace A {
  void f(int);
}

using A::f;         // [:en] [`f] is a synonym for [`A::f]; that is, for [`A::f(int)]. \
                    [:zh_CN] [`f] 是 [`A::f] 的同义词；亦即代表 [`A::f(int)]。
namespace A {
  void f(char);
}

void foo() {
  f('a');           // [:en] calls [`f(int)], even though [`f(char)] exists. \
                    [:zh_CN] 调用 [`f(int)]，尽管有 [`f(char)] 存在。
}

void bar() {
  using A::f;       // [:en] [`f] is a synonym for [`A::f]; that is, for [`A::f(int)] and [`A::f(char)]. \
                    [:zh_CN] [`f] 是 [`A::f] 的同义词；亦即代表 [`A::f(int)] 和 [`A::f(char)]。
  f('a');           // [:en] calls [`f(char)] \
                    [:zh_CN] 调用 [`f(char)]
}
[codeblock:end]
[end:example]

[para]
[:en]
If a declaration named by a [~using-declaration] that inhabits the target scope
of another declaration [$B] potentially conflicts with it ([#basic.scope.scope]),
and either is reachable from the other, the program is ill-formed unless [$B] is
name-independent and the [~using-declaration] precedes [$B].
[:zh_CN]
如果指名某个声明式的 [~using-声明式]居于另一个与该声明式潜在冲突的声明式 [$B] 的
目标作用域（[#basic.scope.scope]），而两个声明式互相不可达，则程序非良构，除非
[$B] 名字独立并且该 [~using-声明式] 先于 [$B]。

[begin:example]
[codeblock]
int _;
void f() {
  int _;                // [$B]
  _ = 0;
  using ::_;            // [:en] error: [~using-declaration] does not precede [$B] \
                        [:zh_CN] 错误：[~using-声明式]并未先于 [$B]
}
[codeblock:end]
[end:example]

[:en]
If two declarations named by [~using-declaration]s that inhabit the same scope
potentially conflict, either is reachable from the other, and they do not both
declare functions or function templates, the program is ill-formed.
[:zh_CN]
如果被居于相同作用域的 [~using-声明式]所指名的两个声明式之间潜在冲突，其中有从
另一个可达者，且它们并非都声明函数或函数模板，则程序非良构。

[begin:note]
[:en]
Overload resolution possibly cannot distinguish between conflicting function
declarations.
[:zh_CN]
重载决议有可能无法在有冲突的函数声明式之间进行区分。
[end:note]

[begin:example]
[codeblock]
namespace A {
  int x;
  int f(int);
  int g;
  void h();
}

namespace B {
  int i;
  struct g { };
  struct x { };
  void f(int);
  void f(double);
  void g(char);                         // [:en] OK, hides [`struct g] \
                                        [:zh_CN] OK，隐藏了 [`struct g]
}

void func() {
  int i;
  using B::i;                           // [:en] error: conflicts \
                                        [:zh_CN] 错误：有冲突
  void f(char);
  using B::f;                           // [:en] OK, each [`f] is a function \
                                        [:zh_CN] OK，每个 [`f] 都是函数
  using A::f;                           // [:en] OK, but interferes with [`B::f(int)] \
                                        [:zh_CN] OK，但与 [`B::f(int)] 互有影响
  f(1);                                 // [:en] error: ambiguous \
                                        [:zh_CN] 错误：有歧义
  static_cast<int(*)(int)>(f)(1);       // [:en] OK, calls [`A::f] \
                                        [:zh_CN] OK，调用 [`A::f]
  f(3.5);                               // [:en] calls [`B::f(double)] \
                                        [:zh_CN] 调用 [`B::f(double)]
  using B::g;
  g('a');                               // [:en] calls [`B::g(char)] \
                                        [:zh_CN] 调用 [`B::g(char)]
  struct g g1;                          // [:en] [`g1] has class type [`B::g] \
                                        [:zh_CN] [`g1] 具有类类型 [`B::g]
  using A::g;                           // [:en] error: conflicts with [`B::g] \
                                        [:zh_CN] 错误：与 [`B::g] 冲突
  void h();
  using A::h;                           // [:en] error: conflicts \
                                        [:zh_CN] 错误：有冲突
  using B::x;
  using A::x;                           // [:en] OK, hides [`struct B::x] \
                                        [:zh_CN] OK，隐藏 [`struct B::x]
  using A::x;                           // [:en] OK, does not conflict with previous [`using A::x] \
                                        [:zh_CN] OK，与之前的 [`using A::x] 并不冲突
  x = 99;                               // [:en] assigns to [`A::x] \
                                        [:zh_CN] 对 [`A::x] 赋值
  struct x x1;                          // [:en] [`x1] has class type [`B::x] \
                                        [:zh_CN] [`X1] 具有类类型 [`B::x]
}
[codeblock:end]
[end:example]

[para]
[:en]
[%name hiding[!using-declaration and]]
The set of declarations named by a [~using-declarator] that inhabits a class [`C]
does not include member functions and member function templates of a base class
that correspond to (and thus would conflict with) a declaration of a function or
function template in [`C].
[:zh_CN]
[%名字隐藏[!using-声明式与～]]
由居于某个类 [`C] 的 [~using-声明符]所指名的声明式集合，并不包括那些对应于 [`C]
中的函数或函数模板的声明式（并因而会与之冲突）的基类成员函数和成员函数模板。

[begin:example]
[codeblock]
struct B {
  virtual void f(int);
  virtual void f(char);
  void g(int);
  void h(int);
};

struct D : B {
  using B::f;
  void f(int);      // [:en] OK, [`D::f(int)] overrides [`B::f(int)]; \
                    [:zh_CN] OK，[`D::f(int)] 覆盖了 [`B::f(int)]；

  using B::g;
  void g(char);     // OK

  using B::h;
  void h(int);      // [:en] OK, [`D::h(int)] hides [`B::h(int)] \
                    [:zh_CN] OK，[`D::h(int)] 隐藏了 [`B::h(int)]
};

void k(D* p)
{
  p->f(1);          // [:en] calls [`D::f(int)] \
                    [:zh_CN] 调用 [`D::f(int)]
  p->f('a');        // [:en] calls [`B::f(char)] \
                    [:zh_CN] 调用 [`B::f(char)]
  p->g(1);          // [:en] calls [`B::g(int)] \
                    [:zh_CN] 调用 [`B::g(int)]
  p->g('a');        // [:en] calls [`D::g(char)] \
                    [:zh_CN] 调用 [`D::g(char)]
}

struct B1 {
  B1(int);
};

struct B2 {
  B2(int);
};

struct D1 : B1, B2 {
  using B1::B1;
  using B2::B2;
};
D1 d1(0);           // [:en] error: ambiguous \
                    [:zh_CN] 错误：有歧义

struct D2 : B1, B2 {
  using B1::B1;
  using B2::B2;
  D2(int);          // [:en] OK, [`D2::D2(int)] hides [`B1::B1(int)] and [`B2::B2(int)] \
                    [:zh_CN] OK，[`D2::D2(int)] 隐藏了 [`B1::B1(int)] 和 [`B2::B2(int)]
};
D2 d2(0);           // [:en] calls [`D2::D2(int)] \
                    [:zh_CN] 调用了 [`D2::D2(int)]
[codeblock:end]
[end:example]

[para]
[begin:note]
[:en]
[%overloading[!using-declaration and]]
For the purpose of forming a set of candidates during overload resolution, the
functions named by a [~using-declaration] in a derived class are treated as
though they were direct members of the derived class ([#class.member.lookup]).
[:zh_CN]
[%重载[!using-声明式与～]]
为在进行重载决议之中构成候选集合，由派生类中的 [~using-声明式]所指名的函数，被
当成它们就是该派生类的直接成员（[#class.member.lookup]）。

[:en]
In particular, the implicit object parameter is treated as if it were a
reference to the derived class rather than to the base class ([#over.match.funcs]).
[:zh_CN]
尤其是，其隐含的对象形参被当作如同是指代派生类而不是基类的引用
（[#over.match.funcs]）。

[:en]
This has no effect on the type of the function, and in all other respects the
function remains part of the base class.
[:zh_CN]
这并不影响函数的类型，且在所有其他方面该函数仍为基类的一部分。
[end:note]

[para]
[:en]
Constructors that are named by a [~using-declaration] are treated as though
they were constructors of the derived class when looking up the constructors of
the derived class ([#class.qual]) or forming a set of overload candidates
([#over.match.ctor], [#over.match.copy], [#over.match.list]).
[:zh_CN]
当查找派生类的构造函数（[#class.qual]），或构成重载的候选集合
（[#over.match.ctor]，[#over.match.copy]，[#over.match.list]）时，[~using-声明式]
所指名的构造函数将被认为它们就是派生类的构造函数。

[begin:note]
[:en]
If such a constructor is selected to perform the initialization of an object of
class type, all subobjects other than the base class from which the constructor
originated are implicitly initialized ([#class.inhctor.init]).
[:zh_CN]
如果这样的构造函数被选中用于实施类类型的对象的初始化，则除了该构造函数源于的基类
之外的所有子对象，都进行隐式初始化（[#class.inhctor.init]）。

[:en]
A constructor of a derived class is sometimes preferred to a constructor of a
base class if they would otherwise be ambiguous ([#over.match.best]).
[:zh_CN]
派生类的构造函数有时候会优先于基类的构造函数，否则它们可能会造成歧义
（[#over.match.best]）。
[end:note]

[para]
[:en]
[%access control[!using-declaration and]]
In a [~using-declarator] that does not name a constructor, every declaration
named shall be accessible.
[:zh_CN]
[%访问控制[!using-声明式与～]]
对于不指名构造函数的[~using-声明符]，所指名的每个声明式都应当是可访问的。

[:en]
In a [~using-declarator] that names a constructor, no access check is performed.
[:zh_CN]
对于指名构造函数的 [~using-声明符]，不进行访问检查。

[para]
[begin:note]
[:en]
Because a [~using-declarator] designates a base class member (and not a member
subobject or a member function of a base class subobject), a [~using-declarator]
cannot be used to resolve inherited member ambiguities.
[:zh_CN]
由于 [~using-声明符]代表了基类成员（而不是基类子对象的成员子对象或成员函数），
[~using-声明符]不能用于解决所继承的成员的歧义。

[begin:example]
[codeblock]
struct A { int x(); };
struct B : A { };
struct C : A {
  using A::x;
  int x(int);
};

struct D : B, C {
  using C::x;
  int x(double);
};
int f(D* d) {
  return d->x();    // [:en] error: overload resolution selects [`A::x], but [`A] is an ambiguous base class \
                    [:zh_CN] 错误：重载决议选择了 [`A::x]，但 [`A] 是一个有歧义的基类
}
[codeblock:end]
[end:example]
[end:note]

[para]
[:en]
A [~using-declaration] has the usual accessibility for a [~member-declaration].
[:zh_CN]
[~using-声明式]具有常规的[~成员声明式]的可访问性。

[:en]
Base-class constructors considered because of a [~using-declarator] are
accessible if they would be accessible when used to construct an object of the
base class; the accessibility of the [~using-declaration] is ignored.
[:zh_CN]
因为某个 [~using-声明符]而被考察的基类构造函数，如果它们被用于构造基类的对象时
可以访问，则它们是可访问的；该 [~using-声明式]的可访问性则被忽略。

[begin:example]
[codeblock]
class A {
private:
    void f(char);
public:
    void f(int);
protected:
    void g();
};

class B : public A {
  using A::f;       // [:en] error: [`A::f(char)] is inaccessible \
                    [:zh_CN] 错误：[`A::f(char)] 不可访问
public:
  using A::g;       // [:en] [`B::g] is a public synonym for [`A::g] \
                    [:zh_CN] [`B::g] 是 [`A::g] 的公开同义词
};
[codeblock:end]
[end:example]

[%:end#using.declaration]
