[section#dcl.contract.func
    [:en] General
    [:zh_CN] 概述
]

[syntax]
[rule function-contract-specifier-seq [:zh_CN] 函数契约说明符序列 ]
    [| function-contract-specifier [~:opt function-contract-specifier-seq] ]
[rule:end]

[rule function-contract-specifier [:zh_CN] 函数契约说明符 ]
  [| precondition-specifier ]
  [| postcondition-specifier ]
[rule:end]

[rule precondition-specifier [:zh_CN] 前条件说明符 ]
    [| [`pre] [~:opt attribute-specifier-seq] [`{] conditional-expression [`}] ]
[rule:end]

[rule postcondition-specifier [:zh_CN] 后条件说明符 ]
    [| [`post] [~:opt attribute-specifier-seq] [`{] [~:opt result-name-introducer] conditional-expression [`}] ]
[rule:end]
[syntax:end]

[para]
[:en]
[%@defn contract assertion[!postcondition][%assertion[!postcondition]]]
[%@defn contract assertion[!precondition][%assertion[!precondition]]]
[:zh_CN]
[%@defn 契约断言[!后条件][%断言[!后条件]]]
[%@defn 契约断言[!前条件][%断言[!前条件]]]
[:en] A [+:adj function[!contract assertion]] is a contract assertion
([#basic.contract.general]) associated with a function.
[:zh_CN] [+:adj 函数[!契约断言]]是与函数关联的契约断言([#basic.contract.general])。

[:en] A [~precondition-specifier] introduces a [+:adj precondition[!assertion]],
which is a function contract assertion associated with entering a function.
[:zh_CN] [~前条件说明符]引入一个[+:adj 前条件[!断言]]，它是与函数进入关联的函数契约断言。

[:en] A [~postcondition-specifier] introduces a [+:adj postcondition[!assertion]],
which is a function contract assertion associated with exiting a function normally.
[:zh_CN] [~后条件说明符]引入一个[+:adj 后条件[!断言]]，它是与函数正常退出关联的函数契约断言。

[begin:note]
[:en] A postcondition assertion is not associated with exiting a function
in any other fashion, such as via an exception ([#expr.throw])
or via a call to [`longjmp] ([#csetjmp.syn]).
[:zh_CN] 后条件断言不与通过其他方式退出函数相关联，例如通过异常（[#expr.throw]）或通过调用
[`longjmp]（[#csetjmp.syn]）。
[end:note]

[para]
[:en] The predicate ([#basic.contract.general]) of a function contract assertion
is its [~conditional-expression] contextually converted to [`bool].
[:zh_CN] 函数契约断言的谓词（[#basic.contract.general]）是其[~条件表达式]按语境转换为 [`bool]。

[para]
[:en] Each [~function-contract-specifier] of a [~function-contract-specifier-seq]
(if any) of an unspecified first declaration ([#basic.def]) of a function
introduces a corresponding function contract assertion for that function.
[:zh_CN] 函数的未指定的首声明式（[#basic.def]）的[~函数契约说明符序列]（如果有）的每个
[~函数契约说明符]都引入该函数的一个相应函数契约断言。

[:en] The optional [~attribute-specifier-seq] following [`pre] or [`post]
appertains to the introduced contract assertion.
[:zh_CN] 跟随 [`pre] 或 [`post] 的可选[~属性说明符序列]属于其所引入的契约断言。

[begin:note]
[:en] The [~function-contract-specifier-seq] of a [~lambda-declarator]
applies to the function call operator or operator template
of the corresponding closure type ([#expr.prim.lambda.closure]).
[:zh_CN] [~lambda-声明符]的[~函数契约说明符序列]适用于相应闭包类型的函数调用运算符
或运算符模板（[#expr.prim.lambda.closure]）。
[end:note]

[para]
[:en] A declaration [$D] of a function or function template [^f] that is not a
first declaration shall have either no [~function-contract-specifier-seq]
or the same [~function-contract-specifier-seq] (see below)
as any first declaration [$F] reachable from [$D].
[:zh_CN] 函数或函数模板 [^f] 的不是首声明式的声明式 [$D]，应该要么没有[~函数契约说明符序列]，
要么与从 [$D] 可达的任何首声明式 [$F] 具有相同的[~函数契约说明符序列]（见下文）。

[:en] If [$D] and [$F] are in different translation units,
a diagnostic is required only if [$D] is attached to a named module.
[:zh_CN] 如果 [$D] 和 [$F] 在不同的翻译单元中，则只有当 [$D] 附加到具名模块时才需要诊断。

[:en] If a declaration [$F_1] is a first declaration of [`f] in one translation
unit and a declaration [$F_2] is a first declaration of [`f] in another
translation unit, [$F_1] and [$F_2] shall specify the same
[~function-contract-specifier-seq], no diagnostic required.
[:zh_CN] 如果声明式 [$F_1] 是 [`f] 在一个翻译单元中的首声明式，而声明式 [$F_2] 是 [`f]
在另一个翻译单元中的首声明式，则 [$F_1] 和 [$F_2] 应该指定相同的[~函数契约说明符序列]，无须诊断。

[para]
[:en] A [~function-contract-specifier-seq] [$S_1] is the same as
a [~function-contract-specifier-seq] [$S_2] if [$S_1] and [$S_2] consist of
the same [~function-contract-specifier]s in the same order.
[:zh_CN] 如果[~函数契约说明符序列] [$S_1] 与 [~函数契约说明符序列] [$S_2] 由相同的
[~函数契约说明符]按相同顺序组成，那么 [$S_1] 和 [$S_2] 相同。

[:en] A [~function-contract-specifier] [$C_1] on a function declaration [$D_1] is the
same as a [~function-contract-specifier] [$C_2] on a function declaration [$D_2] if
[:zh_CN] 以下情况下，函数声明式 [$D_1] 上的[~函数契约说明符] [$C_1] 与函数声明式 [$D_2]
上的[~函数契约说明符] [$C_2] 相同

[list]
[item]
[:en] their predicates [$P_1] and [$P_2] would satisfy the one-definition rule
([#basic.def.odr]) if placed in function definitions on the declarations [$D_1]
and [$D_2], respectively, except for
[:zh_CN] 如果将其分别放置在声明式 [$D_1] 和 [$D_2] 的函数定义式中，除了以下情况外，
它们的谓词 [$P_1] 和 [$P_2] 将满足单一定义规则（[#basic.def.odr]）
[list]
[item]
[:en@~] renaming of the parameters of [^f],
[:zh_CN@~] [^f] 的形参的重命名，
[item]
[:en@~] renaming of template parameters of a template enclosing [^f], and
[:zh_CN@~] [^f] 的外围模板的模板形参的重命名，以及
[item]
[:en@~] renaming of the result binding ([#dcl.contract.res]), if any,
[:zh_CN@~] 结果绑定的重命名（[#dcl.contract.res]），如果有的话，
[list:end]

[:en] and, if [$D_1] and [$D_2] are in different translation units,
corresponding entities defined within each predicate
behave as if there is a single entity with a single definition, and
[:zh_CN] 以及，如果 [$D_1] 和 [$D_2] 处于不同的翻译单元中，
在每个谓词中定义的对应实体的行为，都如同存在一个单一定义式的单一实体，而且

[item]
[:en] both [$C_1] and [$C_2] specify a [~result-name-introducer] or neither do.
[:zh_CN] [$C_1] 和 [$C_2] 都指定了[~结果名引入符]或两者都没有指定。
[list:end]

[:en] If this condition is not met solely due to the comparison of two
[~lambda-expression]s that are contained within [$P_1] and [$P_2],
no diagnostic is required.
[:zh_CN] 如果仅仅由于比较了包含在 [$P_1] 和 [$P_2] 中的两个 [~lambda-表达式] 而
未满足此条件，则无须诊断。

[para:~]
[begin:note]
[:en] Equivalent [~function-contract-specifier-seq]s apply to all uses and
definitions of a function across all translation units.
[:zh_CN] 等价的[~函数契约说明符序列]适用于一个函数跨越所有翻译单元中的所有使用和定义式。
[end:note]

[begin:example]
[codeblock]

bool b1, b2;

void f() pre (b1) pre ([]{ return b2; }());
void f();                       // [:en] OK, [~function-contract-specifier]s omitted [:zh_CN] 省略了[~函数契约说明符]
void f() pre (b1) pre ([]{ return b2; }()); // [:en] error: closures have different types. [:zh_CN] 错误：闭包具有不同的类型。
void f() pre (b1);              // [:en] error: [~function-contract-specifier]s only partially repeated \
                                [:zh_CN] 错误：[~函数契约说明符]只部分重复

int g() post(r : b1);
int g() post(b1);       // [:en] error: mismatched [~result-name-introducer] presence \
                        [:zh_CN] 错误：[~结果名引入符]存在与否不匹配

namespace N {
  void h() pre (b1);
  bool b1;
  void h() pre (b1);    // [:en] error: [~function-contract-specifier]s differ according to \
                        [:zh_CN] 错误：[~函数契约说明符]根据
                        // [:en@~] the one-definition rule ([#basic.def.odr]). \
                        [:zh_CN@~] 单一定义规则有所不同（[#basic.def.odr]）。
}
[codeblock:end]
[end:example]

[para]
[:en] A virtual function ([#class.virtual]), a deleted function ([#dcl.fct.def.delete]),
or a function defaulted on its first declaration ([#dcl.fct.def.default])
shall not have a [~function-contract-specifier-seq].
[:zh_CN] 虚函数（[#class.virtual]），已弃置函数（[#dcl.fct.def.delete]），或在其
首声明式上预置的函数（[#dcl.fct.def.default]）不应该有[~函数契约说明符序列]。

[para]
[:en] If the predicate of a postcondition assertion of a function [^f]
odr-uses ([#basic.def.odr]) a non-reference parameter of [^f], that parameter
and the corresponding parameter on all declarations of [^f] shall have [`const] type.
[:zh_CN] 如果函数 [^f] 的某个后条件断言的谓词 ODR 式使用（[#basic.def.odr]）了 [^f] 的
某个非引用形参，那么该形参和 [^f] 的所有声明式上的对应形参应该具有 [`const] 类型。

[begin:note]
[:en] This requirement applies even to declarations that do not specify the
[~postcondition-specifier].
[:zh_CN] 该要求甚至适用于未指定[~后条件说明符]的声明式。

[:en] Parameters with array or function type will decay to non-[`:key const]
types even if a [`:key const] qualifier is present.
[:zh_CN] 即使存在[`:key const] 限定符，具有数组或函数类型的形参也会退化为非 [`:key const] 类型。

[begin:example]
[codeblock]
int f(const int i[10])
  post(r : r == i[0]);  // [:en] error: [`i] has type [`const int *] (not [`int* const]). \
                        [:zh_CN] 错误：[`i] 具有类型 [`const int *]（而不是 [`int* const]）。
[codeblock:end]
[end:example]
[end:note]

[para]
[begin:note]
[:en] The function contract assertions of a function are evaluated even when invoked
indirectly, such as through a pointer to function or a pointer to member function.
[:zh_CN] 即使通过函数指针或成员函数指针间接调用，函数的函数契约断言也会被评估。

[:en] A pointer to function, pointer to member function, or function type alias
cannot have a [~function-contract-specifier-seq] associated directly with it.
[:zh_CN] 函数指针，成员函数指针，或函数类型别名不能有与其直接关联的[~函数契约说明符序列]。
[end:note]

[para]
[:en] The function contract assertions of a function are considered to be
[+needed[%needed[!function contract assertion]]] ([#temp.inst]) when
[:zh_CN] 以下情况下，认为[+需要[%需要[!函数取悦断言]]]函数的函数契约断言（[#temp.inst]）：
[list]
[item]
[:en@~] the function is odr-used ([#basic.def.odr]) or
[:zh_CN@~] 该函数被 ODR 式使用（[#basic.def.odr]），或者
[item]
[:en@~] the function is defined.
[:zh_CN@~] 该函数被定义。
[list:end]

[begin:note]
[:en] Overload resolution does not consider
[~function-contract-specifier]s ([#temp.deduct], [#temp.inst]).
[:zh_CN] 重载决议不考虑[~函数契约说明符]（[#temp.deduct]，[#temp.inst]）。

[begin:example]
[codeblock]
template <typename T>  void f(T t) pre( t == "" );
template <typename T>  void f(T&& t);
void g()
{
  f(5);     // [:en] error: ambiguous [:zh_CN] 错误：有歧义
}
[codeblock:end]
[end:example]
[end:note]
