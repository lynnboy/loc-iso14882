[section#dcl.array
    [:en] Arrays
    [:zh_CN] 数组

[%  [:en] declarator[!array]
    [:zh_CN] 声明符[!数组～] ]
]

[para]
[:en]
In a declaration [`T D] where [`D] has the form
[:zh_CN]
在声明式 [`T D] 中，其中 [`D] 的形式为

[syntax:explanation]
[`D1] [``[] [~:opt constant-expression] [``]] [~:opt attribute-specifier-seq]
[syntax:end]

[:en@~]
and the type of the contained [~declarator-id] in the declaration [`T D1] is
[=lq][^derived-declarator-type-list] [`T][=rq], the type of the [~declarator-id]
in [`D] [=lq][^derived-declarator-type-list] array of [`N] [`T][=rq].
[:zh_CN@~]
且声明式“[`T D1]”中所包含的[~声明符标识]的类型是“[`T] [^衍生的声明符类型列表]”，
则 [`D] 中的[~声明符标识]的类型为“[`T] 的 [`N] 元数组 [^衍生的声明符类型列表]”。

[:en]
[%bound[!of array]]
The [~constant-expression] shall be a converted constant expression of type
[`std::size_t] ([#expr.const]).
[:zh_CN]
[%边界[!数组～]]
[~常量表达式]应当是 [`std::size_t] 类型的经转换常量表达式（[#expr.const]）。

[:en]
Its value [`N] specifies the [+array bound[%array[!bound]]], i.e., the number of
elements in the array; [`N] shall be greater than zero.
[:zh_CN]
其值 [`N] 指定了[+数组边界[%数组[!～边界]]]，亦即数组中的元素个数；[`N] 应大于零。

[para]
[:en]
In a declaration [`T D] where [`D] has the form
[:zh_CN]
在声明式 [`T D] 中，其中 [`D] 的形式为

[syntax:explanation]
[`D1] [``[] [``]] [~:opt attribute-specifier-seq]
[syntax:end]

[:en@~]
and the type of the contained [~declarator-id] in the declaration [`T D1] is
[=lq][^derived-declarator-type-list] [`T][=rq], the type of the [~declarator-id]
in [`D] [=lq][^derived-declarator-type-list] array of unknown bound of [`T][=rq],
except as specified below.
[:zh_CN@~]
且声明式“[`T D1]”中所包含的[~声明符标识]的类型是“[`T] [^衍生的声明符类型列表]”，
则 [`D] 中的[~声明符标识]的类型为“[`T] 的未知边界数组 [^衍生的声明符类型列表]”，
但有下述例外。

[para]
[:en]
[%declaration[!array]]
A type of the form [=lq]array of [`N] [`U][=rq] or [=lq]array of unknown bound
of [`U][=rq] is an [+array type].
[:zh_CN]
[%声明[!数组～]]
形式为“[`U] 的 [`N] 元素数组”或“[`U] 的未知边界数组”的类型是[+数组类型]。

[:en]
The optional [~attribute-specifier-seq] appertains to the array type.
[:zh_CN]
可选的[~特性说明符序列]属于数组类型。

[para]
[:en]
[`U] is called the array [+element type]; this type shall not be a placeholder
type ([#dcl.spec.auto]), a reference type, a function type, an array of unknown
bound, or [=cv] [`void].
[:zh_CN]
[`U] 被称为数组的[+元素类型]；这个类型不能是占位符类型（[#dcl.spec.auto]），
引用类型，函数类型，未知边界的数组，或者 [=cv] [`void]。

[begin:note]
[:en]
An array can be constructed from one of the fundamental types (except [`void]),
from a pointer, from a pointer to member, from a class, from an enumeration type,
or from an array of known bound.
[:zh_CN]
数组可以从基础类型（除了 [`void]）之一，从指针，从成员指针，从类，从枚举类型，或
从已知边界的数组构造而成。
[end:note]

[begin:example]
[codeblock]
float fa[17], *afp[17];
[codeblock:end]

[:en]
declares an array of [`float] numbers and an array of pointers to [`float]
numbers.
[:zh_CN]
声明了一个 [`float] 数值的数组和一个 [`float] 数值的指针的数组。
[end:example]

[para]
[:en]
Any type of the form [=lq][~cv-qualifier-seq] array of [`N] [`U][=rq] is
adjusted to [=lq]array of [`N] [~cv-qualifier-seq] [`U][=rq], and similarly for
[=lq]array of unknown bound of [`U][=rq].
[:zh_CN]
任何形式为“[`U] 的 [`N] 元 [~cv-限定符序列]数组”的类型都被调整为
“[~cv-限定符序列] [`U] 的 [`N] 元数组”，“[`U] 的未知边界数组”与此相似。

[begin:example]
[codeblock]
typedef int A[5], AA[2][3];
typedef const A CA;             // [:en] type is [=lq]array of 5 [`const int][=rq] \
                                   [:zh_CN] 类型为“[`const int] 的 5 元数组”
typedef const AA CAA;           // [:en] type is [=lq]array of 2 array of 3 [`const int][=rq] \
                                   [:zh_CN] 类型为“[`const int] 的 3 元数组的 2 元数组”
[codeblock:end]
[end:example]

[begin:note]
[:en]
An [=lq]array of [`N] [~cv-qualifier-seq] [`U][=rq] has cv-qualified type; see
[#basic.type.qualifier].
[:zh_CN]
“[~cv-限定符序列] [`U] 的 [`N] 元数组”具有被 cv 限定的类型；参见
[#basic.type.qualifier]。
[end:note]

[para]
[:en]
An object of type [=lq]array of [`N] [`U][=rq] contains a contiguously allocated
non-empty set of [`N] subobjects of type [`U], known as the [+elements[%array
[!element]]] of the array, and numbered from [`0] to [`N-1].
[:zh_CN]
“[`U] 的 [`N] 元数组”类型的对象包含连续分配的 [`N] 个 [`U] 类型的子对象的非空
集合，它们被称为该数组的[+元素[%数组[!元素]]]，从 [`0] 到 [`N-1] 标号。

[para]
[:en]
In addition to declarations in which an incomplete object type is allowed, an
array bound may be omitted in some cases in the declaration of a function
parameter ([#dcl.fct]).
[:zh_CN]
除了一些允许使用不完整的对象类型的声明式之外，某些情况下函数形参的声明式
（[#dcl.fct]）中也可以省略一个数组边界。

[:en]
An array bound may also be omitted when an object (but not a non-static data
member) of array type is initialized and the declarator is followed by an
initializer ([#dcl.init], [#class.mem], [#expr.type.conv], [#expr.new]).
[:zh_CN]
当数组类型的对象（而非非静态数据成员）被初始化，且其声明符后面跟着一个初始化式时，
也可以省略一个数组边界（[#dcl.init]，[#class.mem]，[#expr.type.conv]，[#expr.new]）。

[:en]
[%array size[!default]]
In these cases, the array bound is calculated from the number of initial
elements (say, [`N]) supplied ([#dcl.init.aggr]), and the type of the array is
[=lq]array of [`N] [`U][=rq].
[:zh_CN]
[%数组大小[!缺省～]]
这些情况下，数组边界是从为其提供的初始元素的个数（令其为 [`N]）计算出来的
（[#dcl.init.aggr]），而该数组类型则为“[`U] 的 [`N] 元数组”。

[para]
[:en]
Furthermore, if there is a preceding declaration of the entity in the same scope
in which the bound was specified, an omitted array bound is taken to be the same
as in that earlier declaration, and similarly for the definition of a static
data member of a class.
[:zh_CN]
此外，如果相同作用域中包含这个实体的某个指明了边界的早前的声明式，则被省略的数组
边界被当作与这个早前的声明式中的相同，类的静态数据成员的定义式与此相似。

[begin:example]
[codeblock]
extern int x[10];
struct S {
  static int y[10];
};

int x[];                // [:en] OK: bound is 10 \
                           [:zh_CN] OK：边界是 10
int S::y[];             // [:en] OK: bound is 10 \
                           [:zh_CN] OK：边界是 10

void f() {
  extern int x[];
  int i = sizeof(x);    // [:en] error: incomplete object type \
                           [:zh_CN] 错误，不完整的对象类型
}
[codeblock:end]
[end:example]

[para]
[begin:note]
[:en]
[%declarator[!multidimensional array]]
When several [=lq]array of[=rq] specifications are adjacent, a multidimensional
array type is created; only the first of the constant expressions that specify
the bounds of the arrays can be omitted.
[:zh_CN]
[%声明符[!多维数组]]
当几个“……的数组”说明连续相邻时，就创建了多维数组类型；只有第一个用以指定数组边界
的常量表达式可以被省略。

[para]
[begin:example]
[codeblock]
int x3d[3][5][7];
[codeblock:end]

[:en]
declares an array of three elements, each of which is an array of five elements,
each of which is an array of seven integers.
[:zh_CN]
声明了一个三元素数组，其中每个元素都是五元素数组，后者中的每个元素都是七个整数
的数组。

[:en]
The overall array can be viewed as a three-dimensional array of integers, with
rank [$3 \times 5 \times 7].
[:zh_CN]
整个数组可以被看作一个整数的三维数组，其秩为 [$3 \times 5 \times 7]。

[:en]
Any of the expressions [`x3d], [`x3d`[i`]], [`x3d`[i`]`[j`]],
[`x3d`[i`]`[j`]`[k`]] can reasonably appear in an expression.
[:zh_CN]
表达式 [`x3d]、[`x3d`[i`]]、[`x3d`[i`]`[j`]]、[`x3d`[i`]`[j`]`[k`]] 的任何一个
都可合理地出现在表达式中。

[:en]
The expression [`x3d`[i`]] is equivalent to [`*(x3d + i)]; in that expression,
[`x3d] is subject to the array-to-pointer conversion ([#conv.array]) and is
first converted to a pointer to a 2-dimensional array with rank [$5 \times 7]
that points to the first element of [`x3d].
[:zh_CN]
表达式 [`x3d`[i`]] 等价于 [`*(x3d + i)]；该表达式中，[`x3d] 需要进行数组向指针
转换（[#conv.array]），并且它首先转换为指向具有秩 [$5 \times 7] 的二维数组的指针
并指向 [`x3d] 的首元素。

[:en]
Then [`i] is added, which on typical implementations involves multiplying [`i]
by the length of the object to which the pointer points, which is
[`sizeof(int)][$ \times 5 \times 7].
[:zh_CN]
然后加上 [`i]，这在典型的实现中涉及到将 [`i] 乘以该指针所指向的对象的长度，亦即
[`sizeof(int)][$ \times 5 \times 7]。

[:en]
The result of the addition and indirection is an lvalue denoting the
[$[`i]^\text{th}] array element of [`x3d] (an array of five arrays of seven
integers).
[:zh_CN]
这次相加再进行间接的结果是代表 [`x3d] 的第 [`i] 个数组元素（一个七个整数的数组
构成的五元数组）的左值。

[:en]
If there is another subscript, the same argument applies again, so
[`x3d`[i`]`[j`]] is an lvalue denoting the [$[`j]^\text{th}] array element of
the [$[`i]^\text{th}] array element of [`x3d] (an array of seven integers), and
[`x3d`[i`]`[j`]`[k`]] is an lvalue denoting the [$[`k]^\text{th}] array element
of the [$[`j]^\text{th}] array element of the [$[`i]^\text{th}] array element of
[`x3d] (an integer).
[:zh_CN]
如果有其他下标，则再次实施相同的做法，因此 [`x3d`[i`]`[j`]] 是代表 [`x3d] 的第
[`i] 个数组元素的第 [`j] 个数组元素（一个七个整数的数组）的左值，而
[`x3d`[i`]`[j`]`[k`]] 是代表 [`x3d] 的第 [`i] 个数组元素的第 [`j] 个数组元素的第
[`k] 个数组元素（一个整数）的左值。
[end:example]

[:en]
The first subscript in the declaration helps determine the amount of storage
consumed by an array but plays no other part in subscript calculations.
[:zh_CN]
声明式中的第一个下标辅助确定由数组所耗费的存储的数量，但不参与下标计算的其他部分。
[end:note]

[para]
[begin:note]
[:en]
Conversions affecting expressions of array type are described in [#conv.array].
[:zh_CN]
[#conv.array] 中说明对数组类型的表达式有影响的转换。
[end:note]

[para]
[begin:note]
[:en]
The subscript operator can be overloaded for a class ([#over.sub]).
[:zh_CN]
下标运算符可以为类进行重载（[#expr.sub]）。

[:en]
For the operator[=']s built-in meaning, see [#expr.sub].
[:zh_CN]
对于该运算符的内建含义，参见 [#expr.sub]。
[end:note]
