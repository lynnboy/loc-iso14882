[section:chapter#dcl.pre
    [:en] Preamble
    [:zh_CN] 前言
]

[para]
[:en]
Declarations generally specify how names are to be interpreted.
[:zh_CN]
通常声明式指定如何对名字进行判读。

[:en]
Declarations have the form
[:zh_CN]
声明式的形式为

[syntax]
[rule declaration-seq [:zh_CN] 声明式序列 ]
    [| declaration ]
    [| declaration-seq declaration ]
[rule:end]

[rule declaration [:zh_CN] 声明式 ]
    [| block-declaration ]
    [| nodeclspec-function-declaration ]
    [| function-definition ]
    [| template-declaration ]
    [| deduction-guide ]
    [| explicit-instantiation ]
    [| explicit-specialization ]
    [| export-declaration ]
    [| linkage-specification ]
    [| namespace-definition ]
    [| empty-declaration ]
    [| attribute-declaration ]
[rule:end]

[rule block-declaration [:zh_CN] 块声明式 ]
    [| simple-declaration ]
    [| asm-declaration ]
    [| namespace-alias-definition ]
    [| using-declaration ]
    [| using-enum-declaration ]
    [| using-directive ]
    [| static_assert-declaration ]
    [| alias-declaration ]
    [| opaque-enum-declaration ]
[rule:end]

[rule nodeclspec-function-declaration [:zh_CN] 无声明说明符函数声明式 ]
    [| [~:opt attribute-specifier-seq] declarator [`;] ]
[rule:end]

[rule alias-declaration [:zh_CN] 别名声明式 ]
    [| [`:key using] identifier [~:opt attribute-specifier-seq] [`=] defining-type-id
        [`;] ]
[rule:end]

[rule simple-declaration [:zh_CN] 简单声明式 ]
    [| decl-specifier-seq [~:opt init-declarator-list] [`;] ]
    [| attribute-specifier-seq decl-specifier-seq init-declarator-list [`;] ]
    [| [~:opt attribute-specifier-seq] decl-specifier-seq [~:opt ref-qualifier]
        [``[] identifier-list [``]] initializer [`;] ]
[rule:end]

[rule static_assert-declaration [:zh_CN] static_assert-声明式 ]
    [| [`:key static_assert] [`(] constant-expression [`)] [`;] ]
    [| [`:key static_assert] [`(] constant-expression [`,] string-literal [`)] [`;] ]
[rule:end]

[rule empty-declaration [:zh_CN] 空声明式 ]
    [| [`;] ]
[rule:end]

[rule attribute-declaration [:zh_CN] 特性标注声明式 ]
    [| attribute-specifier-seq [`;] ]
[rule:end]
[syntax:end]

[begin:note]
[:en]
[~asm-declaration]s are described in [#dcl.asm], and
[~linkage-specification]s are described in [#dcl.link];
[:zh_CN]
[~asm-声明式]在 [#dcl.asm] 中说明，[~连接说明]在 [#dcl.link] 中说明；

[:en@~]
[~function-definition]s are described in [#dcl.fct.def] and
[~template-declaration]s and [~deduction-guide]s are described in [#temp];
[:zh_CN@~]
[~函数定义式]在 [#dcl.fct.def] 中说明，[~模板声明式]和[~推断导引]在 [#temp]
中说明；

[:en@~]
[~namespace-definition]s are described in [#namespace.def],
[~using-declaration]s are described in [#namespace.udecl] and
[~using-directive]s are described in [#namespace.udir].
[:zh_CN@~]
[~命名空间定义式]在 [#namespace.def] 中说明，[~using-声明式]在
[#namespace.udecl] 中说明，而 [~using-指令]在 [#namespace.udir] 中说明。
[end:note]

[para]
[:en]
A [~simple-declaration] or [~nodeclspec-function-declaration] of the form
[:zh_CN]
如下形式的[~简单声明式]或[~无声明说明符函数声明式]

[syntax:explanation]
[~:opt attribute-specifier-seq] [~:opt decl-specifier-seq]
    [~:opt init-declarator-list] [`;]
[syntax:end]

[:en@~]
is divided into three parts.
[:zh_CN@~]
分为三个部分。

[:en]
Attributes are described in [#dcl.attr].
[:zh_CN]
特性标注在 [#dcl.attr] 中说明。

[:en]
[~decl-specifier]s, the principal components of a [~decl-specifier-seq], are
described in [#dcl.spec].
[:zh_CN]
[~声明说明符]（[~声明说明符序列]的主要成分）在 [#dcl.spec] 中说明。

[:en]
[~declarator]s, the components of an [~init-declarator-list], are described in
[#dcl.decl].
[:zh_CN]
[~声明符]（[~初始化声明符列表]的成分）在 [#dcl.decl] 中说明。

[:en]
The [~attribute-specifier-seq] appertains to each of the entities declared by
the [~declarator]s of the [~init-declarator-list].
[:zh_CN]
[~特性说明符序列]属于其[~初始化声明符列表]中每个[~声明符]所声明的实体。

[begin:note]
[:en]
In the declaration for an entity, attributes appertaining to that entity may
appear at the start of the declaration and after the [~declarator-id] for that
declaration.
[:zh_CN]
在一个实体的声明式中，属于这个实体的特性标注，既可以出现在声明式的开头，也可以
出现在这个声明式的[~声明符标识]之后。
[end:note]

[begin:example]
[codeblock]
[[noreturn]] void f [[noreturn]] ();    // OK
[codeblock:end]
[end:example]

[para]
[:en]
Except where otherwise specified, the meaning of an [~attribute-declaration] is
[%@impldef meaning of attribute declaration] implementation-defined.
[:zh_CN]
除非特别指明，[~特性标注声明式]的含义是[%@impldef 特性标注声明式的含义]由实现
定义的。

[para]
[:en]
[%declaration]
[%scope]
A declaration occurs in a scope ([#basic.scope]); the scope rules are summarized
in [#basic.lookup].
[:zh_CN]
[%声明式]
[%作用域]
声明式都出现于某个作用域之中（[#basic.scope]）；[#basic.lookup] 中总结了作用域的
规则。

[:en]
A declaration that declares a function or defines a class, namespace, template,
or function also has one or more scopes nested within it.
[:zh_CN]
在声明了函数，或定义了类、命名空间、模板或函数的声明式中，还嵌套了一个或多个作用
域。

[:en]
These nested scopes, in turn, can have declarations nested within them.
[:zh_CN]
这些嵌套的作用域中本身也可以带有嵌套的声明式。

[:en]
Unless otherwise stated, utterances in [#dcl.dcl] about components in, of, or
contained by a declaration or subcomponent thereof refer only to those
components of the declaration that are [em not] nested within scopes nested
within the declaration.
[:zh_CN]
除非另外指出，否则在 [#dcl.dcl] 中提到的，对声明式内的，声明式的，或者声明式
所包含的成分及其子成分的说法，所涉及的都[em 不是]声明式中所嵌套的作用域中的嵌套
声明式的成分。

[para]
[:en]
[%identifier]
[%declarator]
In a [~simple-declaration], the optional [~init-declarator-list] can be omitted
only when declaring a class ([#class]) or enumeration ([#dcl.enum]), that is,
when the [~decl-specifier-seq] contains either a [~class-specifier], an
[~elaborated-type-specifier] with a [~class-key] ([#class.name]), or an
[~enum-specifier].
[:zh_CN]
[%标识符]
[%声明符]
在[~简单声明式]中，仅当声明类（[#class]）或枚举（[#dcl.enum]）时，就是说，当其
[~声明说明符序列]中包含[~类说明符]，带有[~类关键字]（[#class.name]）的[~详细类型
说明符]，或者[~枚举说明符]时，才能省略可选的[~初始化声明符列表]。

[:en]
In these cases and whenever a [~class-specifier] or [~enum-specifier] is present
in the [~decl-specifier-seq], the identifiers in these specifiers are among the
names being declared by the declaration (as [~class-name]s, [~enum-name]s, or
[~enumerator]s, depending on the syntax).
[:zh_CN]
在这些情况中，以及一旦其[~声明说明符序列]中出现[~类说明符]或[~枚举说明符]时，
这些说明符中的标识符就是由该声明式所声明的名字（依赖其语法，作为[~类名]、
[~枚举名]或[~枚举符]）。

[:en]
In such cases, the [~decl-specifier-seq] shall introduce one or more names into
the program, or shall redeclare a name introduced by a previous declaration.
[:zh_CN]
在这些情况中，其[~声明说明符序列]都应当向程序中引入一个或多个名字，或应当重复
声明由之前的声明式所引入的名字。

[begin:example]
[codeblock]
enum { };           // [:en] ill-formed \
                       [:zh_CN] 非良构
typedef class { };  // [:en] ill-formed \
                       [:zh_CN] 非良构
[codeblock:end]
[end:example]

[para]
[%[~static_assert]]
[:en]
In a [~static_assert-declaration] the [~constant-expression] shall be a
contextually converted constant expression of type [`bool] ([#expr.const]).
[:zh_CN]
[~static_assert-声明式]中的[~常量表达式]应当为按语境转换为 [`bool] 的常量表达式
（[#expr.const]）。

[:en]
If the value of the expression when so converted is [`true], the declaration has
no effect.
[:zh_CN]
如果表达式经此转换后的值是 [`true]，则声明式没有效果。

[:en]
Otherwise, the program is ill-formed, and the resulting diagnostic message
([#intro.compliance]) shall include the text of the [~string-literal], if one is
supplied, except that characters not in the basic source character set
([#lex.charset]) are not required to appear in the diagnostic message.
[:zh_CN]
否则，程序是非良构的，且如果提供了[~字符串字面量]，则所产生的诊断消息
（[#intro.compliance]）应该包含其中的文本，但诊断信息中不必包括不属于基本源字符
集（[#lex.charset]）的字符。

[begin:example]
[codeblock]
static_assert(sizeof(int) == sizeof(void*), "wrong pointer size");
[codeblock:end]
[end:example]

[para]
[:en]
An [~empty-declaration] has no effect.
[:zh_CN]
[~空声明式]没有效果。

[para]
[:en]
A [~simple-declaration] with an [~identifier-list] is called a [+structured
binding declaration] ([#dcl.struct.bind]).
[:zh_CN]
带有[~标识符列表]的[~简单声明式]被称为[+结构化绑定声明式]（[#dcl.struct.bind]）。

[:en]
If the [~decl-specifier-seq] contains any [~type-specifier] other than
[`static], [`thread_local], [`auto] ([#dcl.spec.auto]), or [~cv-qualifier]s, the
program is ill-formed.
[:zh_CN]
如果[~声明说明符序列]包含了除 [`static]、[`thread_local]、[`auto]
（[#dcl.spec.auto]）或 [~cv-限定符]以外的任何[~类型说明符]，则程序非良构。

[:en]
The [~initializer] shall be of the form [=lq][`=] [~assignment-expression][=rq],
of the form [=lq][`{] [~assignment-expression] [`}][=rq], or of the form
[=lq][`(] [~assignment-expression] [`)][=rq], where the [~assignment-expression]
is of array or non-union class type.
[:zh_CN]
其[~初始化式]应当具有“[`=] [~赋值表达式]”的形式，“[`{] [~赋值表达式] [`}]”的形式
，或者“[`(] [~赋值表达式] [`)]”的形式，其中的[~赋值表达式]具有数组或非联合体
类类型。

[para]
[:en]
Each [~init-declarator] in the [~init-declarator-list] contains exactly one
[~declarator-id], which is the name declared by that [~init-declarator] and
hence one of the names declared by the declaration.
[:zh_CN]
[~初始化声明符列表]中的每个[~带初始化声明符]都包含恰好一个[~声明符标识]，它是由
该[~带初始化声明符]所声明的名字，也是由该声明式所声明的名字之一。

[:en]
The [~defining-type-specifier]s ([#dcl.type]) in the [~decl-specifier-seq] and
the recursive [~declarator] structure of the [~init-declarator] describe a type
([#dcl.meaning]), which is then associated with the name being declared by the
[~init-declarator].
[:zh_CN]
[~声明说明符序列]中的[~定义类型说明符]（[#dcl.type]），以及其[~带初始化声明符]中
递归的[~声明符]结构，描述了一个类型（[#dcl.meaning]），它与该[~带初始化声明符]所
声明的名字相关联。

[para]
[:en]
If the [~decl-specifier-seq] contains the [`typedef] specifier, the declaration
is called a [+typedef declaration[%declaration[!typedef]]] and the name of each
[~init-declarator] is declared to be a [~typedef-name], synonymous with its
associated type ([#dcl.typedef]).
[:zh_CN]
若[~声明说明符序列]包含 [`typedef] 说明符，则该声明式被称为 [+typedef 声明式
[%声明式[!typedef ～]]]，而每个[~带初始化声明符]的名字则被声明为 [~typedef-名]，
它们是其所关联的类型的同义词（[#dcl.typedef]）。

[:en]
If the [~decl-specifier-seq] contains no [`typedef] specifier, the declaration
is called a [+function declaration[%declaration[!function]]] if the type
associated with the name is a function type ([#dcl.fct]) and an [+object
declaration[%declaration[!object]]] otherwise.
[:zh_CN]
若[~声明说明符序列]不包含 [`typedef] 说明符，则当与该名字关联的类型是函数类型
（[#dcl.fct]）时，该声明式被称为[+函数声明式[%声明式[!函数～]]]，否则为
[+对象声明式[%声明式[!对象～]]]。

[para]
[:en]
[%definition[!declaration as]]
Syntactic components beyond those found in the general form of declaration are
added to a function declaration to make a [~function-definition].
[:zh_CN]
[%定义式[!声明式作为～]]
构成[~函数定义式]时，将对函数声明式添加不属于常规形式的声明式的语法成分。

[:en]
An object declaration, however, is also a definition unless it contains the
[`extern] specifier and has no initializer ([#basic.def]).
[:zh_CN]
然而，除非在对象声明式中含有 [`extern] 说明符且没有初始化式（[#basic.def]），
否则它也是定义式。

[:en]
[%initialization[!definition and]]
An object definition causes storage of appropriate size and alignment to be
reserved and any appropriate initialization ([#dcl.init]) to be done.
[:zh_CN]
[%初始化[!定义式与～]]
对象的定义式导致保留适当大小和对齐的存储，并进行任何适当的初始化（[#dcl.init]）。

[para]
[:en]
A [~nodeclspec-function-declaration] shall declare a constructor, destructor, or
conversion function.
[:zh_CN]
[~无声明说明符函数声明式]应当声明构造函数、析构函数或者转换函数。

[begin:note]
[:en]
A [~nodeclspec-function-declaration] can only be used in a
[~template-declaration] ([#temp]), [~explicit-instantiation] ([#temp.explicit]),
or [~explicit-specialization] ([#temp.expl.spec]).
[:zh_CN]
[~无声明说明符函数声明式]只能被用在[~模板声明式]（[#temp]），[~显式实例化式]
（[#temp.explicit]），或者[~显式特化式]（[#temp.expl.spec]）之中。
[end:note]
