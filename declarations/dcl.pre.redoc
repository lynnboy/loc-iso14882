[section:chapter#dcl.pre
    [:en] Preamble
    [:zh_CN] 前言
]

[para]
[:en] Declarations generally specify how names are to be interpreted.
[:zh_CN] 通常声明式指定如何对名字进行判读。

[:en] Declarations have the form
[:zh_CN] 声明式的形式为

[syntax]
[rule declaration-seq [:zh_CN] 声明式序列 ]
    [| declaration [~:opt declaration-seq] ]
[rule:end]

[rule declaration [:zh_CN] 声明式 ]
    [| name-declaration ]
    [| special-declaration ]
[rule:end]

[rule name-declaration [:zh_CN] 命名声明式 ]
    [| block-declaration ]
    [| nodeclspec-function-declaration ]
    [| function-definition ]
    [| friend-type-declaration ]
    [| template-declaration ]
    [| deduction-guide ]
    [| linkage-specification ]
    [| namespace-definition ]
    [| empty-declaration ]
    [| attribute-declaration ]
    [| module-import-declaration ]
[rule:end]

[rule special-declaration [:zh_CN] 特殊声明式 ]
    [| explicit-instantiation ]
    [| explicit-specialization ]
    [| export-declaration ]
[rule:end]

[rule block-declaration [:zh_CN] 块声明式 ]
    [| simple-declaration ]
    [| asm-declaration ]
    [| namespace-alias-definition ]
    [| using-declaration ]
    [| using-enum-declaration ]
    [| using-directive ]
    [| static_assert-declaration ]
    [| alias-declaration ]
    [| opaque-enum-declaration ]
[rule:end]

[rule nodeclspec-function-declaration [:zh_CN] 无声明说明符函数声明式 ]
    [| [~:opt attribute-specifier-seq] declarator [`;] ]
[rule:end]

[rule alias-declaration [:zh_CN] 别名声明式 ]
    [| [`:key using] identifier [~:opt attribute-specifier-seq] [`=] defining-type-id
        [`;] ]
[rule:end]

[rule sb-identifier [:zh_CN] sb-标识符 ]
    [| [`:opt ...] identifier [~:opt attribute-specifier-seq] ]
[rule:end]

[rule sb-identifier-list [:zh_CN] sb-标识符列表 ]
    [| sb-identifier ]
    [| sb-identifier-list [`,] sb-identifier ]
[rule:end]

[rule structured-binding-declaration [:zh_CN] 结构化绑定声明式 ]
    [| [~:opt attribute-specifier-seq] decl-specifier-seq [~:opt ref-qualifier] [``[] sb-identifier-list [``]] ]
[rule:end]

[rule simple-declaration [:zh_CN] 简单声明式 ]
    [| decl-specifier-seq [~:opt init-declarator-list] [`;] ]
    [| attribute-specifier-seq decl-specifier-seq init-declarator-list [`;] ]
    [| structured-binding-declaration initializer [`;] ]
[rule:end]

[rule static_assert-message [:zh_CN] static_assert-消息 ]
    [| unevaluated-string ]
    [| constant-expression ]
[rule:end]

[rule static_assert-declaration [:zh_CN] static_assert-声明式 ]
    [| [`:key static_assert] [`(] constant-expression [`)] [`;] ]
    [| [`:key static_assert] [`(] constant-expression [`,] static_assert-message [`)] [`;] ]
[rule:end]

[rule empty-declaration [:zh_CN] 空声明式 ]
    [| [`;] ]
[rule:end]

[rule attribute-declaration [:zh_CN] 属性声明式 ]
    [| attribute-specifier-seq [`;] ]
[rule:end]
[syntax:end]

[begin:note]
[:en] [~asm-declaration]s are described in [#dcl.asm], and
[~linkage-specification]s are described in [#dcl.link];
[:zh_CN] [~asm-声明式]在 [#dcl.asm] 中说明，[~连接说明]在 [#dcl.link] 中说明；

[:en@~] [~function-definition]s are described in [#dcl.fct.def] and
[~template-declaration]s and [~deduction-guide]s are described in
[#temp.deduct.guide];
[:zh_CN@~] [~函数定义式]在 [#dcl.fct.def] 中说明，[~模板声明式]和[~推断导引]在
[#temp.deduct.guide] 中说明；

[:en@~] [~namespace-definition]s are described in [#namespace.def],
[~using-declaration]s are described in [#namespace.udecl] and
[~using-directive]s are described in [#namespace.udir].
[:zh_CN@~] [~命名空间定义式]在 [#namespace.def] 中说明，[~using-声明式]在 [#namespace.udecl]
中说明，而 [~using-指令]在 [#namespace.udir] 中说明。
[end:note]

[para]
[:en] [%declaration] [%scope]
Certain declarations contain one or more scopes ([#basic.scope.scope]).
[:zh_CN] [%声明式] [%作用域]
一些声明式包含一个或更多作用域（[#basic.scope.scope]）。

[:en] Unless otherwise stated, utterances in [#dcl.dcl] about components in, of,
or contained by a declaration or subcomponent thereof refer only to those
components of the declaration that are [span:em not] nested within scopes nested
within the declaration.
[:zh_CN] 除非另外指出，否则在 [#dcl.dcl] 中提到的，对声明式内的，声明式的，或者
声明式所包含的成分及其子成分的说法，所涉及的都[span:em 不是]声明式中所嵌套的作用域
中的嵌套声明式的成分。

[para]
[:en] If a [~name-declaration] matches the syntactic requirements of
[~friend-type-declaration], it is a [~friend-type-declaration].
[:zh_CN] 如果[~命名声明式]匹配对于[~友元类型声明式]的语法规定匹配，则它是个
[~友元类型声明式]。

[para]
[:en] A [~simple-declaration] or [~nodeclspec-function-declaration] of the form
[:zh_CN] 如下形式的[~简单声明式]或[~无声明说明符函数声明式]
[syntax:explanation]
[~:opt attribute-specifier-seq] [~:opt decl-specifier-seq] [~:opt init-declarator-list] [`;]
[syntax:end]
[:en@~] is divided into three parts.
[:zh_CN@~] 分为三个部分。

[:en] Attributes are described in [#dcl.attr].
[:zh_CN] 属性在 [#dcl.attr] 中说明。

[:en] [~decl-specifier]s, the principal components of a [~decl-specifier-seq],
are described in [#dcl.spec].
[:zh_CN] [~声明说明符]（[~声明说明符序列]的主体成分）在 [#dcl.spec] 中说明。

[:en] [~declarator]s, the components of an [~init-declarator-list], are
described in [#dcl.decl].
[:zh_CN] [~声明符]（[~带初始化声明符列表]的成分）在 [#dcl.decl] 中说明。

[:en] The [~attribute-specifier-seq] appertains to each of the entities declared
by the [~declarator]s of the [~init-declarator-list].
[:zh_CN] [~属性说明符序列]属于[~带初始化声明符列表]中各个[~声明符]所声明的每个实体。

[begin:note]
[:en] In the declaration for an entity, attributes appertaining to that entity
can appear at the start of the declaration and after the [~declarator-id] for
that declaration.
[:zh_CN] 在一个实体的声明式中，属于这个实体的属性，既可以出现在声明式的开头，
也可以出现在这个声明式的[~声明符标识]之后。
[end:note]

[begin:example]
[codeblock]
[[noreturn]] void f [[noreturn]] ();    // OK
[codeblock:end]
[end:example]

[para]
[:en] If a [~declarator-id] is a name, the [~init-declarator] and (hence) the
declaration introduce that name.
[:zh_CN] 若[~声明符标识]是一个名字，则其[~带初始化声明符]（从而）以及该声明式就
引入这个名字。

[begin:note]
[:en] Otherwise, the [~declarator-id] is a [~qualified-id] or names a destructor
or its [~unqualified-id] is a [~template-id] and no name is introduced.
[:zh_CN] 否则，该[~声明符标识]是一个[~限定标识]，或指名析构函数，或其[~无限定标识]
是[~模板标识]，而不引入任何名字。
[end:note]

[:en] The [~defining-type-specifier]s ([#dcl.type]) in the [~decl-specifier-seq]
and the recursive [~declarator] structure describe a type ([#dcl.meaning]),
which is then associated with the [~declarator-id].
[:zh_CN] [~声明说明符序列]中的[~定义类型说明符]（[#dcl.type]）以及递归的
[~声明符]结构，描述了一个类型（[#dcl.meaning]），它与该[~声明符标识]相关联。

[para]
[:en] [%identifier] [%declarator]
In a [~simple-declaration], the optional [~init-declarator-list] can be omitted
only when declaring a class ([#class.pre]) or enumeration ([#dcl.enum]), that is,
when the [~decl-specifier-seq] contains either a [~class-specifier], an
[~elaborated-type-specifier] with a [~class-key] ([#class.name]), or an
[~enum-specifier].
[:zh_CN] [%标识符] [%声明符]
在[~简单声明式]中，仅当声明类（[#class.pre]）或枚举（[#dcl.enum]）时，就是说，
当其[~声明说明符序列]中包含[~类说明符]，带有[~类关键字]（[#class.name]）的
[~详述类型说明符]，或者[~枚举说明符]时，才能省略可选的[~带初始化声明符列表]。

[:en] In these cases and whenever a [~class-specifier] or [~enum-specifier] is
present in the [~decl-specifier-seq], the identifiers in these specifiers are
also declared (as [~class-name]s, [~enum-name]s, or [~enumerator]s, depending on
the syntax).
[:zh_CN] 在这些情况中，以及一旦其[~声明说明符序列]中出现[~类说明符]或[~枚举说明符]时，
这些说明符中的标识符也被声明（依赖其语法，作为[~类名]、[~枚举名]或[~枚举符]）。

[:en] In such cases, the [~decl-specifier-seq] shall (re)introduce one or more
names into the program.
[:zh_CN] 在这些情况中，其[~声明说明符序列]都应当向程序中（再次）引入一个或多个名字。

[begin:example]
[codeblock]
enum { };           // [:en] error [:zh_CN] 错误
typedef class { };  // [:en] error [:zh_CN] 错误
[codeblock:end]
[end:example]

[para]
[:en] A [~simple-declaration] or a [~condition] with a
[~structured-binding-declaration] is called a [+structured binding declaration]
([#dcl.struct.bind]).
[:zh_CN] 带有[~结构化绑定声明式]的[~简单声明式]或[~条件]被称为[+结构化绑定声明式]
（[#dcl.struct.bind]）。

[:en] Each [~decl-specifier] in the [~decl-specifier-seq] shall be [`constexpr],
[`constinit], [`static], [`thread_local], [`auto] ([#dcl.spec.auto]), or a
[~cv-qualifier].
[:zh_CN] [~声明说明符序列]的[~声明说明符]应当为 [`constexpr]，[`constinit]，
[`static]，[`thread_local]，[`auto]（[#dcl.spec.auto]），或者 [~cv-限定符]。

[:en] The declaration shall contain at most one [~sb-identifier] whose
[~identifier] is preceded by an ellipsis.
[:zh_CN] 声明式应当包含最多一个 [~sb-标识符]的[~标识符]以省略号开始。

[:en] If the declaration contains any such [~sb-identifier],
it shall declare a templated entity ([#temp.pre]).
[:zh_CN] 如果声明式中包含任何这样的 [~sb-标识符]，那么它应当声明模板化实体（[#temp.pre]）。

[begin:example]
[codeblock]
template<class T> concept C = true;
C auto [x, y] = std::pair{1, 2};    // [:en] error: constrained [~placeholder-type-specifier] \
                                    [:zh_CN] 错误：不允许在结构化绑定中
                                    // [:en@~] not permitted for structured bindings \
                                    [:zh_CN@~] 使用[~占位符类型说明符]
[codeblock:end]
[end:example]

[:en] The [~initializer] shall be of the form [=lq][`=] [~assignment-expression][=rq],
of the form [=lq][`{] [~assignment-expression] [`}][=rq], or of the form
[=lq][`(] [~assignment-expression] [`)][=rq].
[:zh_CN] 其[~初始化式]应当具有“[`=] [~赋值表达式]”的形式，“[`{] [~赋值表达式] [`}]”
的形式，或者“[`(] [~赋值表达式] [`)]”的形式。

[:en] If the [~structured-binding-declaration] appears as a [~condition],
the [~assignment-expression] shall be of non-union class type.
[:zh_CN] 如果[~结构化绑定声明式]作为[~条件]，则[~赋值表达式]应当具有非联合体类类型。

[:en] Otherwise, the [~assignment-expression] shall be of array or non-union
class type.
[:zh_CN] 否则，[~赋值表达式]应当具有数组或非联合体类类型。

[para]
[:en] If the [~decl-specifier-seq] contains the [`:key typedef] specifier, the
declaration is a [+typedef declaration[%declaration[!typedef]]] and each
[~declarator-id] is declared to be a [~typedef-name], synonymous with its
associated type ([#dcl.typedef]).
[:zh_CN] 若[~声明说明符序列]包含 [`:key typedef] 说明符，则该声明式为
[+typedef 声明式[%声明式[!typedef ～]]]，而每个[~声明符标识]则被声明为
[~typedef-名]，它们是其所关联的类型的同义词（[#dcl.typedef]）。

[begin:note]
[:en] Such a [~declarator-id] is an [~identifier] ([#class.conv.fct]).
[:zh_CN] 这种[~声明符标识]是一个[~标识符]（[#class.conv.fct]）。
[end:note]

[:en] Otherwise, if the type associated with a [~declarator-id] is a function type
([#dcl.fct]), the declaration is a [+function declaration[%declaration[!function]]].
[:zh_CN] 否则，如果与[~声明符标识]关联的类型为函数类型（[#dcl.fct]），则该
声明式是[+函数声明式[%声明式[!函数]]]。

[:en] Otherwise, if the type associated with a [~declarator-id] is an object or
reference type, the declaration is an [+object declaration[%declaration[!object]]].
[:zh_CN] 否则，如果与[~声明符标识]关联的类型为对象或引用类型，则该声明式是
[+对象声明式[%声明式[!对象]]]。

[:en] Otherwise, the program is ill-formed.
[:zh_CN] 否则，程序非良构。

[begin:example]
[codeblock]
int f(), x;             // [:en] OK, function declaration for [`f] and object declaration for [`x] \
                        [:zh_CN] OK，[`f] 的函数声明式和 [`x] 的对象声明式
extern void g(),        // [:en] OK, function declaration for [`g] \
                        [:zh_CN] OK，[`g] 的函数声明式
  y;                    // [:en] error: [`void] is not an object type \
                        [:zh_CN] 错误：[`void] 不是对象类型
[codeblock:end]
[end:example]

[para]
[:en] [%initialization[!definition and]]
An object definition causes storage of appropriate size and alignment to be
reserved and any appropriate initialization ([#dcl.init]) to be done.
[:zh_CN] [%初始化[!定义式与～]]
对象的定义式导致保留适当大小和对齐的存储，并进行任何适当的初始化（[#dcl.init]）。

[para]
[:en] [%definition[!declaration as]]
Syntactic components beyond those found in the general form of
[~simple-declaration] are added to a function declaration to make a
[~function-definition].
[:zh_CN] [%定义式[!声明式作为～]]
构成[~函数定义式]时，向函数声明式添加了不属于常规形式的[~简单声明式]的语法成分。

[:en] A token sequence starting with [`{] or [`=] is treated as a
[~function-body] ([#dcl.fct.def.general]) if the type of the [~declarator-id]
([#dcl.meaning.general]) is a function type, and is otherwise treated as a
[~brace-or-equal-initializer] ([#dcl.init.general]).
[:zh_CN] 以 [`{] 或 [`=] 开头的记号序列，在[~声明符标识]（[#dcl.meaning.general]）
的类型为函数类型时，被当作[~函数体]（[#dcl.fct.def.general]），否则被当作
[~花括号或等号初始化式]（[#dcl.init.general]）。

[begin:note]
[:en] If the declaration acquires a function type through template instantiation,
the program is ill-formed; see [#temp.spec.general].
[:zh_CN] 如果声明式通过模板实例化要求函数类型，则程序非良构；参见 [#temp.spec.general]。

[:en] The function type of a function definition cannot be specified with a
[~typedef-name] ([#dcl.fct]).
[:zh_CN] 不能用 [~typedef-名]来指定函数定义式的函数类型（[#dcl.fct]）。
[end:note]

[para]
[:en] A [~nodeclspec-function-declaration] shall declare a constructor,
destructor, or conversion function.
[:zh_CN] [~无声明说明符函数声明式]应当声明构造函数、析构函数或者转换函数。

[begin:note]
[:en] Because a member function cannot be subject to a non-defining declaration
outside of a class definition ([#class.mfct]),
a [~nodeclspec-function-declaration] can only be used in a
[~template-declaration] ([#temp.pre]), [~explicit-instantiation]
([#temp.explicit]), or [~explicit-specialization] ([#temp.expl.spec]).
[:zh_CN] 由于成员函数不能使用类定义式外的非定义声明式（[#class.mfct]），
[~无声明说明符函数声明式]只能被用在[~模板声明式]（[#temp.pre]），[~显式实例化式]
（[#temp.explicit]），或者[~显式特化式]（[#temp.expl.spec]）之中。
[end:note]

[para]
[:en] If a [~static_assert-message] matches the syntactic requirements of
[~unevaluated-string], it is an [~unevaluated-string] and the text of the
[~static_assert-message] is the text of the [~unevaluated-string].
[:zh_CN] 如果 [~static_assert-消息]与[~免求值字符串]的语法规定匹配，则它是个
[~免求值字符串]，且该 [~static_assert-消息]的文本即为该[~免求值字符串]的文本。

[:en] Otherwise, a [~static_assert-message] shall be an expression [$M] such that
[:zh_CN] 否则，[~static_assert-消息]应当为满足以下条件的表达式 [$M]：
[list]
[item]
[:en@~] the expression [`[$M].size()] is implicitly convertible to the type
[`std::size_t], and
[:zh_CN@~] 表达式 [`[$M].size()] 可以隐式转换为类型 [`std::size_t]，并且
[item]
[:en@~] the expression [`[$M].data()] is implicitly convertible to the type
[=lq]pointer to [`[`:key const] [`:key char]][=rq].
[:zh_CN@~] 表达式 [`[$M].data()] 可以隐式转换为类型
“[`[`:key const] [`:key char]] 的指针”。
[list:end]

[para]
[%[`static_assert]]
[:en] In a [~static_assert-declaration], the [~constant-expression] [$E] is
contextually converted to [`bool] and the converted expression shall be a
constant expression ([#expr.const]).
[:zh_CN] [~static_assert-声明式]中，[~常量表达式] [$E] 应当可按语境转换为 [`bool]
且经转换的表达式应当为常量表达式（[#expr.const]）。

[:en] If the value of the expression [$E] when so converted is [`true] or the
expression is evaluated in the conetxt of a template definition, the declaration
has no effect and the [~static_assert-message] is a unevaluated operand
([#term.unevaluated.operand]).
[:zh_CN] 如果表达式 [$E] 经此转换后的值是 [`true] 或者该表达式是在模板定义式的
语境中求值，则声明式没有效果，并且 [~static_assert-消息]是免求值操作数
（[#term.unevaluated.operand]）。

[:en] Otherwise, the [~static_assert-declaration] [+fails[%[`static_assert][!failed]]]
and
[:zh_CN] 否则，该 [~static_assert-声明式][+失败[%[`static_assert][!失败]]]，并且

[list]
[item]
[:en] the program is ill-formed, and
[:zh_CN] 程序非良构，并且

[item]
[:en] if the [~static_assert-message] is a [~constant-expression] [$M],
[:zh_CN] 当 [~static_assert-消息]是[~常量表达式] [$M] 时，

[list]
[item]
[:en] [`[$M].size()] shall be a converted constant expression of type
[`std::size_t] and let [$N] denote the value of that expression,
[:zh_CN] [`[$M].size()] 应当为 [`std::size_t] 类型的经转换常量表达式，并令 [$N]
代表该表达式的值，

[item]
[:en] [`[$M].data()], implicitly converted to the type [=lq]pointer to
[`[`:key const] [`:key char]][=rq], shall be a core constant expression and let
[$D] denote the converted expression,
[:zh_CN] [`[$M].data()] 隐式转换为类型“[`[`:key const] [`:key char]]的指针”后，
应当为核心常量表达式，并令 [$D] 代表经转换的表达式，

[item]
[:en] for each [$i] where [$0 \le i < N], [`[$D]`[[$i]`]] shall be an integral
constant expression, and
[:zh_CN] 对于 [$0 \le i < N] 的每个 [$i]，[`[$D]`[[$i]`]] 应当为整型常量表达式，并且

[item]
[:en] the text of the [~static_assert-message] is formed by the sequence of [$N]
code units, starting at [$D], of the ordinary literal encoding ([#lex.charset]).
[:zh_CN] [~static_assert-消息]的文本由从 [$D] 开始的 [$N] 个代码单元的序列，以
普通字面量编码（[#lex.charset]）所构成。
[list:end]
[list:end]

[para:recommended]
[:en] When a [~static_assert-declaration] fails, the resulting diagnostic
message should include the text of the [~static_assert-message], if one is
supplied.
[:zh_CN] 当 [~static_assert-声明式]失败时，且如果提供了 [~static_assert-消息]，
则所产生的诊断消息最好包含其中的文本。

[begin:example]
[codeblock]
static_assert(sizeof(int) == sizeof(void*), "wrong pointer size");
static_assert(sizeof(int[2]));          // [:en] OK, narrowing allowed [:zh_CN] OK，允许窄化

template <class T>
void f(T t) {
  if constexpr (sizeof(T) == sizeof(int)) {
    use(t);
  } else {
    static_assert(false, "must be int-sized");
  }
}

void g(char c) {
  f(0);             // OK
  f(c);             // [:en] error on implementations where [`sizeof(int) > 1]: must be [`int]-sized \
                    [:zh_CN] 在 [`sizeof(int) > 1] 的实现上发生错误：必须为 [`int] 的大小
}
[codeblock:end]
[end:example]

[para]
[:en] An [~empty-declaration] has no effect.
[:zh_CN] [~空声明式]没有效果。

[para]
[:en] Except where otherwise specified, the meaning of an
[~attribute-declaration] is [?impldef meaning of attribute declaration].
[:zh_CN] 除非特别指明，[~属性声明式]的含义是[?impldef 属性声明式的含义]。
