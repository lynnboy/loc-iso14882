[section#dcl.decl.general
    [:en] General
    [:zh_CN] 概述
]

[:en]
[%initialization[!class object][%constructor]]
[%[`*][%declarator[!pointer]]]
[%[`&][%declarator[!reference]]]
[%[`::*][%declarator[!pointer-to-member]]]
[%[``[`]][%declarator[!array]]]
[%[`()][%declarator[!function]]]
[:zh_CN]
[%初始化[!类对象～][%构造函数]]
[%[`*][%声明符[!指针～]]]
[%[`&][%声明符[!引用～]]]
[%[`::*][%声明符[!成员指针～]]]
[%[``[`]][%声明符[!数组～]]]
[%[`()][%声明符[!函数～]]]

[para]
[:en]
A declarator declares a single variable, function, or type, within a declaration.
[:zh_CN]
在声明式中，每个声明符声明一个变量、函数或类型。

[:en]
The [~init-declarator-list] appearing in a [~simple-declaration] is a
comma-separated sequence of declarators, each of which can have an initializer.
[:zh_CN]
[~简单声明式]中的[~初始化声明符列表]是由逗号分隔的声明符的序列，它们每个都可以
带有初始化式。

[syntax]
[rule  init-declarator-list [:zh_CN] 初始化声明符列表 ]
    [| init-declarator ]
    [| init-declarator-list [`,] init-declarator ]
[rule:end]

[rule init-declarator [:zh_CN] 初始化声明符 ]
    [| declarator [~:opt initializer] ]
    [| declarator requires-clause ]
[rule:end]
[syntax:end]

[para]
[:en]
In all contexts, a [~declarator] is interpreted as given below.
[:zh_CN]
所有语境中，对[~声明符]的判读在下文给出。

[:en]
Where an [~abstract-declarator] can be used (or omitted) in place of a
[~declarator] ([#dcl.fct], [#except.pre]), it is as if a unique identifier were
included in the appropriate place ([#dcl.name]).
[:zh_CN]
每当可以用一个[~抽象声明符]代替[~声明符]（或将之忽略）（[#dcl.fct]，[#except.pre]），
就如同在适当位置包含一个唯一标识符一样（[#dcl.name]）。

[:en]
The preceding specifiers indicate the type, storage class or other properties of
the entity or entities being declared.
[:zh_CN]
其之前的说明符指定了被声明的各实体的类型、存储类或其他属性。

[:en]
Each declarator specifies one entity and (optionally) names it and/or moidfies
the type of the specifiers with operators such as [`*] (pointer to) and [`()]
(function returning).
[:zh_CN]
每个声明符指定一个实体，并（可选地）为其命名，并用 [`*]（～的指针）和 [`()]
（～为返回类型的函数）等运算符来修改其说明符的类型。

[begin:note]
[:en]
An [~init-declarator] can also specify an initializer ([#dcl.init]).
[:zh_CN]
[~带初始化声明符]还可以指定一个初始化式（[#dcl.init]）。
[end:note]

[para]
[:en]
Each [~init-declarator] or [~member-declarator] in a declaration is analyzed
separately as if it were in a declaration by itself.
[:zh_CN]
声明式中的每个[~带初始化声明符]或[~成员声明符]都是分别进行分析的，如同它们被单独
声明那样。

[begin:note]
[:en]
A declaration with several declarators is usually equivalent to the
corresponding sequence of declarations each with a single declarator.
[:zh_CN]
带有多个声明符的声明式通常等价于相应的声明式序列，其中每个都带有单个的声明符。

[:en]
That is,
[:zh_CN]
就是说，

[codeblock:notation]
T D1, D2, ... Dn;
[codeblock:end]

[:en@~]
is usually equivalent to
[:zh_CN@~]
通常等价于

[codeblock:notation]
T D1; T D2; ... T Dn;
[codeblock:end]

[:en@~]
where [`T] is a [~decl-specifier-seq] and each [`Di] is an [~init-declarator] or
[~member-declarator].
[:zh_CN@~]
其中 [`T] 是[~声明说明符序列]，而每个 [`Di] 是[~带初始化声明符]或[~成员声明符]。

[:en]
One exception is when a name introduced by one of the [~declarator]s hides a
type name used by the [~decl-specifier]s, so that when the same
[~decl-specifier]s are used in a subsequent declaration, they do not have the
same meaning, as in
[:zh_CN]
一种例外是由[~声明符]之一所引入的名字隐藏了由[~声明说明符]所使用的类型名，此时
当相同的[~声明说明符]在后续的声明式中使用时，它们并不具有相同的含义，正如

[codeblock]
struct S { /* ... */ };
S S, T;                 // [:en] declare two instances of [`struct S] \
                           [:zh_CN] 声明两个 [`struct S] 的实例
[codeblock:end]

[:en@~]
which is not equivalent to
[:zh_CN@~]
并不等价于

[codeblock]
struct S { /* ... */ };
S S;
S T;                    // [:en] error \
                           [:zh_CN] 错误
[codeblock:end]

[:en]
Another exception is when [`T] is [`auto] ([#dcl.spec.auto]), for example:
[:zh_CN]
另一种例外是 [`T] 为 [`auto]（[#dcl.spec.auto]），例如：

[codeblock]
auto i = 1, j = 2.0;    // [:en] error: deduced types for [`i] and [`j] do not match \
                           [:zh_CN] 错误：为 [`i] 和 [`j] 推断的类型并不匹配
[codeblock:end]

[:en@~]
as opposed to
[:zh_CN@~]
相对而言

[codeblock]
auto i = 1;             // [:en] OK: [`i] deduced to have type [`int] \
                           [:zh_CN] OK：[`i] 被推断为具有类型 [`int]
auto j = 2.0;           // [:en] OK: [`j] deduced to have type [`double] \
                           [:zh_CN] OK：[`j] 被推断为具有类型 [`double]
[codeblock:end]
[end:note]

[para]
[:en]
The optional [~requires-clause] ([#temp.pre]) in an [~init-declarator] or
[~member-declarator] shall be present only if the declarator declares a
templated function ([#dcl.fct]).
[:zh_CN]
[~初始化声明符]或[~成员声明符]中可选的[~requires-子句]（[#temp.pre]），仅当该
声明符声明模板化函数（[#dcl.fct]）时才能出现。

[:en]
[%trailing [~requires-clause][%[~requires-clause][!trailing]]]
When present after a declarator, the [~requires-clause] is called the
[+trailing [~requires-clause][%[~requires-clause][!trailing]]].
[:zh_CN]
[%尾部[~requires-子句][%[~requires-子句][!尾部～]]]
当出现在声明符之后时，[~requires-子句]被称为
[+尾部[~requires-子句][%[~requires-子句][!尾部～]]]。

[:en]
The trailing [~requires-clause] introduces the [~constraint-expression] that
results from interpreting its [~constraint-logical-or-expression] as a
[~constraint-expression].
[:zh_CN]
尾部[~requires-子句]，将从对它的[~约束逻辑或表达式]进行解释所得的[~约束表达式]，
作为[~约束表达式]引入。

[begin:example]
[codeblock:notation]
void f1(int a) requires true;               // [:en] error: non-templated function \
                                               [:zh_CN] 错误：非模板化函数
template<typename T>
  auto f2(T a) -> bool requires true;       // OK
template<typename T>
  auto f3(T a) requires true -> bool;       // [:en] error: [~requires-clause] precedes [~trailing-return-type] \
                                               [:zh_CN] 错误：[~requires-子句]在[~尾部返回类型]之前
void (*pf)() requires true;                 // [:en] error: constraint on a variable \
                                               [:zh_CN] 错误：在变量上约束
void g(int (*)() requires true);            // [:en] error: constraint on a [~parameter-declaration] \
                                               [:zh_CN] 错误：在[~形参声明式]上约束

auto* p = new void(*)(char) requires true;  // [:en] error: not a function declaration \
                                               [:zh_CN] 错误：不是函数声明式

[codeblock:end]
[end:example]

[para]
[:en]
Declarators have the syntax
[:zh_CN]
声明符的语法是

[syntax]
[rule declarator [:zh_CN] 声明符 ]
    [| ptr-declarator ]
    [| noptr-declarator parameters-and-qualifiers trailing-return-type ]
[rule:end]

[rule ptr-declarator [:zh_CN] 指针声明符 ]
    [| noptr-declarator ]
    [| ptr-operator ptr-declarator ]
[rule:end]

[rule noptr-declarator [:zh_CN] 非指针声明符 ]
    [| declarator-id [~:opt attribute-specifier-seq] ]
    [| noptr-declarator parameters-and-qualifiers ]
    [| noptr-declarator [``[] [~:opt constant-expression] [``]]
        [~:opt attribute-specifier-seq] ]
    [| [`(] ptr-declarator [`)] ]
[rule:end]

[rule parameters-and-qualifiers [:zh_CN] 形参和限定符 ]
    [| [`(] parameter-declaration-clause [`)] [~:opt cv-qualifier-seq] [=br]
        [~:opt ref-qualifier] [~:opt noexcept-specifier]
        [~:opt attribute-specifier-seq] ]
[rule:end]

[rule trailing-return-type [:zh_CN] 尾部返回类型 ]
    [| [`->] type-id ]
[rule:end]

[rule ptr-operator [:zh_CN] 指针运算符 ]
    [| [`*] [~:opt attribute-specifier-seq] [~:opt cv-qualifier-seq] ]
    [| [`&] [~:opt attribute-specifier-seq] ]
    [| [`&&] [~:opt attribute-specifier-seq] ]
    [| nested-name-specifier [`*] [~:opt attribute-specifier-seq]
        [~:opt cv-qualifier-seq] ]
[rule:end]

[rule cv-qualifier-seq [:zh_CN] cv-限定符序列 ]
    [| cv-qualifier [~:opt cv-qualifier-seq] ]
[rule:end]

[rule cv-qualifier [:zh_CN] cv-限定符 ]
    [| [`:key const] ]
    [| [`:key volatile] ]
[rule:end]

[rule ref-qualifier [:zh_CN] 引用限定符 ]
    [| [`&] ]
    [| [`&&] ]
[rule:end]

[rule declarator-id [:zh_CN] 声明符标识 ]
    [| [`:opt ...] id-expression ]
[rule:end]
[syntax:end]
