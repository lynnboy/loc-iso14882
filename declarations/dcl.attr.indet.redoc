[section#dcl.attr.indet
    [:en] Indeterminate storage
    [:zh_CN] 非确定存储

[%  [:en] attribute[!indeterminate]
    [:zh_CN] 属性[!indeterminate] ]
]

[para]
[:en] The [~attribute-token] [`indeterminate] may be applied to the definition
of a block variable with automatic storage duration or to a
[~parameter-declaration] of a function declaration.
[:zh_CN] [~属性记号] [`indeterminate] 可以应用于具有自动存储期的块变量或者
函数声明式的[~形参声明式]。

[:en] No [~attribute-argument-clause] shall be present.
[:zh_CN] 不能带有[~属性实参子句]。

[:en] The attribute specifies that the storage of an object with automatic
storage duration is initially indeterminate rather than erroneous ([#basic.indet]).
[:zh_CN] 此属性指定具有自动存储期的对象的存储最初是不确定的，而不是错误的
（[#basic.indet]）。

[para]
[:en] If a function parameter is declared with the [`indeterminate] attribute,
it shall be so declared in the first declaration of its function.
[:zh_CN] 如果函数形参被声明带有 [`indeterminate] 属性，则应当在这个函数的首个
声明式中如此声明。

[:en] If a function parameter is declared with the [`indeterminate] attribute in
the first declaration of its function in one translation unit and the same
function is declared without the [`indeterminate] attribute on the same
parameter in its first declaration in another translation unit, the program is
ill-formed, no diagnostic required.
[:zh_CN] 如果函数形参在一个翻译单元中的该函数的第一个声明式中被声明为带有
[`indeterminate] 属性，而在另一个翻译单元中同一个函数的第一个声明中对相同形参
声明为不带有 [`indeterminate] 属性，则程序非良构，无须诊断。

[para]
[begin:note]
[:en] Reading from an uninitialized variable that is marked [``[`[indeterminate`]`]]
can cause undefined behavior.
[:zh_CN] 从标有 [``[`[indeterminate`]`]] 的未初始化变量进行读取会导致未定义行为。

[codeblock]
void f(int);
void g() {
  int x [[indeterminate]], y;
  f(y);                 // [:en] erroneous behavior ([#basic.indet]) [:zh_CN] 错误行为（[#basic.indet]）
  f(x);                 // [:en] undefined behavior [:zh_CN] 未定义行为
}

struct T {
  T() {}
  int x;
};
int h(T t [[indeterminate]]) {
  f(t.x);               // [:en] undefined behavior when called below [:zh_CN] 下面调用时有未定义行为
  return 0;
}
int _ = h(T());
[codeblock:end]
[end:note]
