[section#dcl.attr.assume
    [:en] Assumption attribute
    [:zh_CN] 假设属性
]

[para]
[:en]
The [~attribute-token] [`assume] may be applied to a null statement;
such a statement is an [+assumption].
[:zh_CN]
[~属性记号] [`assume] 可以应用于空语句；这种语句是一条[+假设]。

[:en]
An [~attribute-argument-clause] shall be present and shall have the form:
[:zh_CN]
应当带有[~属性实参子句]，且应具有如下形式：

[syntax:explanation]
[`(] [~conditional-literal] [`)]
[syntax:end]

[:en]
The expression is contextually converted to [`bool] ([#conv.general]).
[:zh_CN]
表达式按应转换为 [`bool]（[#conv.general]）。

[:en]
The expression is not evaluated.
[:zh_CN]
不对表达式求值。

[:en]
If the converted expression would evaluate to [`true] at the point where the
assumption appears, the assumption has no effect.
[:zh_CN]
如果转换后的表达式在出现假设之处本应求值为 [`true]，则该假设没有效果。

[:en]
Otherwise, the behavior is undefined.
[:zh_CN]
否则，其行为未定义。

[begin:note]
[:en]
The expression is potentially evaluated ([#basic.def.odr]).
[:zh_CN]
该表达式是潜在求值的（[#basic.def.odr]）。

[:en]
The use of assumptions is intended to allow implementations to analyze the form
of the expression and deduce information used to optimize the program.
[:zh_CN]
使用假设的目的在于允许实现分析表达式的形式并推导出用于优化程序的信息。

[:en]
Implementations are not required to deduce any information from any particular
assumption.
[:zh_CN]
不要求实现从任何特定的假设中推导出任何信息。
[end:note]

[begin:example]
[codeblock]
int divide_by_32(int x) {
  [[assume(x >= 0)]];
  return x/32;                  // [:en] The instructions produced for the division \
                                [:zh_CN] 为除法所产生的指令中
                                // [:en@~] may omit handling of negative values. \
                                [:zh_CN@~] 可以忽略负值处理。
}
int f(int y) {
  [[assume(++y == 43)]];        // [:en] [`y] is not incremented \
                                [:zh_CN] [`y] 并未增量
  return y;                     // [:en] statement may be replaced with [`return 42;] \
                                [:zh_CN] 可能将语句替换为 [`return 42;]
}
[codeblock:end]
[end:example]
