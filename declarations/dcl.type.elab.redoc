[section#dcl.type.elab
    [:en] Elaborated type specifiers
    [:zh_CN] 详述类型说明符

[:en]
[%[`typename]]
[%type specifier[!elaborated]]
[%type specifier[![`enum]]]
[:zh_CN]
[%[`typename]]
[%类型说明符[!详细～]]
[%类型说明符[![`enum]]]
]

[syntax]
[rule elaborated-type-specifier [:zh_CN] 详述类型说明符 ]
    [| class-key [~:opt attribute-specifier-seq] [~:opt nested-name-specifier]
        identifier ]
    [| class-key simple-template-id ]
    [| class-key nested-name-specifier [`:opt:key template] simple-template-id ]
    [| elaborated-enum-specifier ]
[rule:end]

[rule elaborated-enum-specifier [:zh_CN] 详述枚举说明符 ]
    [| [`:key enum] [~:opt nested-name-specifier] identifier ]
[rule:end]
[syntax:end]

[para]
[:en]
[%component name]
The component names of an [~elaborated-type-specifier] are its [~identifier]
(if any) and those of its [~nested-name-specifier] and [~simple-template-id]
(if any).
[:zh_CN]
[%成分名]
[~详述类型说明符]的成分名，为其[~标识符]（如果有），和其[~嵌套名说明符]和
[~简单模板标识]（如果有）的成分名。

[para]
[:en]
[%class name[!elaborated]]
[%name[!elaborated[![`enum]]]]
If an [~elaborated-type-specifier] is the sole constituent of a declaration, the
declaration is ill-formed unless it is an explicit specialization
([#temp.expl.spec]), an explicit instantiation ([#temp.explicit]) or it has one
of the following forms:
[:zh_CN]
[%类名[!详细]]
[%名字[!详细[![`enum]]]]
若[~详述类型说明符]是某个声明式的唯一成分，则该声明式非良构，除非该声明式是
显式特化式（[#temp.expl.spec]），显式实例化式（[#temp.explicit]），或者它具有
如下形式之一：

[syntax:explanation]
[| [~class-key] [~:opt attribute-specifier-seq] [~identifier] [`;] ]
[| [~class-key] [~:opt attribute-specifier-seq] [~simple-template-id] [`;] ]
[syntax:end]

[:en]
In the first case, the [~elaborated-type-specifier] declares the [~identifier]
as a [~class-name].
[:zh_CN]
第一种情况中，[~详述类型说明符]将[~标识符]声明为一个[~类名]。

[:en]
The second case shall appear only in an [~explicit-specialization]
([#temp.expl.spec]) or in a [~template-declaration] (where it declares a partial
specialization ([#temp.decls])).
[:zh_CN]
第二种情况只应出现在[~显式特化式]（[#temp.expl.spec]）中，或在[~模板声明式]中
（此时它声明的是部分特例（[#temp.decls]））。

[:en]
The [~attribute-specifier-seq], if any, appertains to the class or template
being declared.
[:zh_CN]
[~属性说明符序列]（如果有）属于所声明的类或模板。

[para]
[:en]
Otherwise, an [~elaborated-type-specifier] [$E] shall not have an
[~attribute-specifier-seq].
[:zh_CN]
否则，[~详述类型说明符] [$E] 不应带有[~属性说明符序列]。

[:en]
If [$E] contains an [~identifier] but no [~nested-name-specifier] and
(unqualified) lookup for the [~identifier] finds nothing, [$E] shall not be
introduced by the [`:key enum] keyword and declares the [~identifier] as a
[~class-name].
[:zh_CN]
如果 [$E] 包含[~标识符]但不包含[~嵌套名说明符]，且对[~标识符]进行（无限定）查找
未找到任何东西，则 [$E] 不应当以关键字 [`:key enum] 引入，且将[~标识符]声明为
一个[~类名]。

[:en]
The target scope of [$E] is the nearest enclosing namespace or block scope.
[:zh_CN]
[$E] 的目标作用域为最近的外围命名空间或块作用域。

[para]
[:en]
If an [~elaborated-type-specifier] appears with the [`:key friend] specifier as
an entire [~member-declaration], the [~member-declaration] shall have one of the
following forms:
[:zh_CN]
如果[~详述类型说明符]作为完整的[~成员声明式]出现并带有 [`:key friend] 说明符，则
该[~成员声明式]应当具有以下形式之一：

[syntax:explanation]
[| [`:key friend] [~class-key] [~:opt nested-name-specifier] [~identifier] [`;] ]
[| [`:key friend] [~class-key] [~simple-template-id] [`;] ]
[| [`:key friend] [~class-key] [~nested-name-specifier] [`:opt:key template] [~simple-template-id] [`;] ]
[syntax:end]

[:en]
Any unqualified lookup for the [~identifier] (in the first case) does not
consider scopes that contain the target scope; no name is bound.
[:zh_CN]
对（第一种情况中的）[~标识符]进行的任何无限定查找，都不考察包含其目标作用域的
作用域；不绑定任何名字。

[begin:note]
[:en]
A [~using-directive] in the target scope is ignored if it refers to a namespace
not contained by that scope.
[:zh_CN]
如果其目标作用域中的 [~using-指令]指代某个未被该作用域所包含的命名空间，则它被
忽略。

[:en]
[#basic.lookup.elab] describes how name lookup proceeds in an
[~elaborated-type-specifier].
[:zh_CN]
[#basic.lookup.elab] 说明如何对[~详述类型说明符]进行名字查找。
[end:note]


[para]
[begin:note]
[:en]
An [~elaborated-type-specifier] can be used to refer to a previously declared
[~class-name] or [~enum-name] even if the name has been hidden by a non-type
declaration.
[:zh_CN]
[~详述类型说明符]可以用于指代某个之前声明过的[~类名]或[~枚举名]，即使该名字已被
某个非类型声明式所隐藏。
[end:note]

[:en]
If the [~identifier] or [~simple-template-id] resolves to a [~class-name] or
[~enum-name], the [~elaborated-type-specifier] introduces it into the
declaration the same way a [~simple-type-specifier] introduces its [~type-name]
([#dcl.type.simple]).
[:zh_CN]
若此[~标识符]或[~简单模板标识]被判读为[~类名]或[~枚举名]，则该[~详述类型说明符]
以与[~简单类型说明符]引入其[~类型名]（[#dcl.type.simple]）相同的方式将它引入到
声明式中。

[:en]
If the [~identifier] or [~simple-template-id] resolves to a [~typedef-name]
([#dcl.typedef], [#temp.names]), the [~elaborated-type-specifier] is ill-formed.
[:zh_CN]
若此[~标识符]或[~简单模板标识]被判读为某个 [~typedef-名]（[#dcl.typedef]，
[#temp.names]），则该[~详述类型说明符]非良构。

[begin:note]
[:en]
This implies that, within a class template with a template [~type-parameter] [`T],
the declaration
[:zh_CN]
这表明，在带有模板[~类型形参] [`T] 的类模板中，声明式

[codeblock]
friend class T;
[codeblock:end]

[:en@~]
is ill-formed.
[:zh_CN@~]
非良构。

[:en]
However, the similar declaration [`friend T;] is allowed ([#class.friend]).
[:zh_CN]
然而，与此相似的声明式 [`friend T;] 却是被允许的（[#class.friend]）。
[end:note]

[para]
[:en]
The [~class-key] or [`:key enum] keyword present in the
[~elaborated-type-specifier] shall agree in kind with the declaration to which
the name in the [~elaborated-type-specifier] refers.
[:zh_CN]
在[~详述类型说明符]中出现的[~类关键字]或 [`:key enum] 关键字应当与
[~详述类型说明符]中的名字所涉指的声明式的种类一致。

[:en]
This rule also applies to the form of [~elaborated-type-specifier] that declares
a [~class-name] or friend class since it can be construed as referring to the
definition of the class.
[:zh_CN]
这条规则也适用于具有声明了[~类名]或友元类的形式的[~详述类型说明符]，这是由于可将
其当作涉指该类的定义式。

[:en]
Thus, in any [~elaborated-type-specifier], the [`:key enum] keyword shall be
used to refer to an enumeration ([#dcl.enum]), the [`:key union] [~class-key]
shall be used to refer to a union ([#class.union]), and either the [`:key class]
or [`:key struct] [~class-key] shall be used to refer to a non-union class
([#class.pre]).
[:zh_CN]
因此，在任意[~详述类型说明符]中，应当用 [`:key enum] 关键字提及枚举（[#dcl.enum]），
应当用[~类关键字] [`:key union] 提及联合体（[#class.union]），应当用[~类关键字]
[`:key class] 或 [`:key struct] 提及非联合体类（[#class.pre]）。

[begin:example]
[codeblock]
enum class E { a, b };
enum E x = E::a;                // OK
struct S { } s;
class S* p = &s;                // OK
[codeblock:end]
[end:example]
