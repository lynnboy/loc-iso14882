[section#dcl.type.auto.deduct
    [:en] Placeholder type deduction
    [:zh_CN] 占位符类型的推断
[%  [:en] deduction[!placeholder type]
    [:zh_CN] 推断[!占位符类型～] ]
]

[para]
[:en]
[+Placeholder type deduction[%placeholder type deduction]] is the process by
which a type containing a placeholder type is replaced by a deduced type.
[:zh_CN]
[+占位符类型推断]是将包含占位符类型的类型替换为所推断的类型的过程。

[para]
[:en]
A type [`T] containing a placeholder type, and a corresponding
[~initializer-clause] [$E], are determined as follows:
[:zh_CN]
包含占位符类型的类型，及其相应的[~初始化式子句] [$E]，按如下方式确定：

[list]
[item]
[:en]
For a non-discarded [`return] statement that occurs in a function declared with
a return type that contains a placeholder type, [`T] is the declared return type.
[:zh_CN]
对于以包含占位符类型的返回类型声明的函数之中的非弃用 [`return] 语句，[`T] 为
所声明的返回类型。

[list]
[item]
[:en]
If the [`return] statement has no operand, then [$E] is [`void()].
[:zh_CN]
如果 [`return] 语句没有操作数，则 [$E] 为 [`void()]。
[item]
[:en]
If the operand is a [~braced-init-list] ([#dcl.init.list]), the program is
ill-formed.
[:zh_CN]
如果其操作数为[~花括号初始化列表]（[#dcl.init.list]），则程序非良构。
[item]
[:en]
If the operand is an [~expression] [$X] that is not an [~assignment-expression],
[$E] is [`([$X])].
[:zh_CN]
如果其操作数为[~表达式] [$X] 且不是[~赋值表达式]，则 [$E] 为 [`([$X])]。
[begin:note]
[:en]
A comma expression ([#expr.comma]) is not an [~assignment-expression].
[:zh_CN]
逗号表达式（[#expr.comma]）并非[~赋值表达式]。
[end:note]
[item]
[:en]
Otherwise, [$E] is the operand of the [`return] statement.
[:zh_CN]
否则，[$E] 为 [`return] 语句的操作数。
[list:end]

[:en]
If [$E] has type [`:key void], [`T] shall be either [~:opt type-constraint]
[`decltype(auto)] or [=cv] [~:opt type-constraint] [`:key auto].
[:zh_CN]
如果 [$E] 类型为 [`:key void]，则 [`T] 应当或为“[~:opt 类型约束] [`decltype(auto)]”
或“[=cv] [~:opt 类型约束] [`:key auto]”。

[item]
[:en]
For a variable declared with a type that contains a placeholder type, [`T] is
the declared type of the variable.
[:zh_CN]
对于以包含占位符类型的类型声明的变量，[`T] 为变量所声明的类型。

[list]
[item]
[:en]
If the initializer of the variable is a [~brace-or-equal-initializer] of the
form [`= [~initializer-clause]], [$E] is the [~initializer-clause].
[:zh_CN]
如果变量的初始化式是形式为“[`= [~初始化式子句]]”的[~花括号或等号初始化式]，
则 [$E] 为该[~初始化式子句]。
[item]
[:en]
If the initializer is a [~braced-init-list], it shall consist of a single
brace-enclosed [~assignment-expression] and [$E] is the [~assignment-expression].
[:zh_CN]
如果其初始化式为[~花括号初始化列表]，它应当由花括号包围的单个[~赋值表达式]构成，
且 [$E] 为该[~赋值表达式]。
[item]
[:en]
If the initializer is a parenthesized [~expression-list], the [~expression-list]
shall be a single [~assignment-expression] and [$E] is the [~assignment-expression].
[:zh_CN]
如果其初始化式为带括号的[~表达式列表]，该[~表达式列表]应当为单个[~赋值表达式],
且 [$E] 为该[~赋值表达式]。
[list:end]

[item]
[:en]
For an explicit type conversion ([#expr.type.conv]), [`T] is the specified type,
which shall be [`:key auto].
[:zh_CN]
对于显式类型转换（[#expr.type.conv]），[`T] 为所指定的类型，其应当为 [`:key auto]。

[list]
[item]
[:en]
If the initializer is a [~braced-init-list], it shall consist of a single
brace-enclosed [~assignment-expression] and [$E] is the [~assignment-expression].
[:zh_CN]
如果其初始化式为[~花括号初始化列表]，它应当由花括号包围的单个[~赋值表达式]构成，
且 [$E] 为该[~赋值表达式]。
[item]
[:en]
If the initializer is a parenthesized [~expression-list], the [~expression-list]
shall be a single [~assignment-expression] and [$E] is the [~assignment-expression].
[:zh_CN]
如果其初始化式为带括号的[~表达式列表]，该[~表达式列表]应当为单个[~赋值表达式],
且 [$E] 为该[~赋值表达式]。
[list:end]

[item]
[:en]
For a non-type template parameter declared with a type that contains a
placeholder type, [`T] is the declared type of the non-type template parameter
and [$E] is the corresponding template argument.
[:zh_CN]
对于以包含占位符类型的类型声明的非类型模板形参，[`T] 为该非类型模板形参所声明的
类型，而 [$E] 为其对应的模板实参。
[list:end]

[:en]
[`T] shall not be an array type.
[:zh_CN]
[`T] 不能是数组类型。

[para]
[:en]
If the [~placeholder-type-specifier] is of the form [~:opt type-constraint]
[`:key auto], the deduced type [$[`T]'] replacing [`T] is determined using the
rules for template argument deduction.
[:zh_CN]
若[~占位符类型说明符]的形式为“[~:opt 类型约束] [`:key auto]”，则使用模板实参推断
的规则来确定用以替换 [`T] 的推断类型 [$[`T]']，。

[:en]
Obtain [`P] from [`T] by replacing the occurrences of [~:opt type-constraint]
[`:key auto] either with a new invented type template parameter [`U] or, if the
initialization is copy-list-initialization, with [`std::initializer_list<U>].
[:zh_CN]
令 [`P] 为把 [`T] 中出现的“[~:opt 类型约束] [`:key auto]”都替换为某个新的虚构
类型模板形参 [`U]，或者当其初始化是复制列表初始化时，替换为
[`std::initializer_list<U>]，所获得的类型。

[:en]
Deduce a value for [`U] using the rules of template argument deduction from a
function call ([#temp.deduct.call]), where [`P] is a function template parameter
type and the corresponding argument is [$E].
[:zh_CN]
使用从函数调用中进行模板实参推断（[#temp.deduct.call]）的规则对 [`U] 的值进行
推断，其中 [`P] 为函数模板形参类型，而其对应实参为 [$E]。

[:en]
If the deduction fails, the declaration is ill-formed.
[:zh_CN]
若推断失败，则该声明式非良构。

[:en]
Otherwise, [$[`T]'] is obtained by substituting the deduced [`U] into [`P].
[:zh_CN]
否则，[$[`T]'] 就是将 [`P] 代换为所推断的 [`U] 而获得的类型。

[begin:example]
[codeblock]
auto x1 = { 1, 2 };             // [:en] [`decltype(x1)] is [`std::initializer_list<int>] \
                                [:zh_CN] [`decltype(x1)] 为 [`std::initializer_list<int>]
auto x2 = { 1, 2.0 };           // [:en] error: cannot deduce element type \
                                [:zh_CN] 错误，无法推断元素类型
auto x3{ 1, 2 };                // [:en] error: not a single element \
                                [:zh_CN] 错误，不是单个元素
auto x4 = { 3 };                // [:en] [`decltype(x4)] is [`std::initializer_list<int>] \
                                [:zh_CN] [`decltype(x4)] 为 [`std::initializer_list<int>]
auto x5{ 3 };                   // [:en] [`decltype(x5)] is [`int] \
                                [:zh_CN] [`decltype(x5)] 为 [`int]
[codeblock:end]
[end:example]

[para:~]
[begin:example]
[codeblock]
const auto &i = expr;
[codeblock:end]

[:en]
The type of [`i] is the deduced type of the parameter [`u] in the call
[`f(expr)] of the following invented function template:
[:zh_CN]
[`i] 的类型是对如下虚构的函数模板的调用 [`f(expr)] 中对形参 [`u] 推断出的类型：

[codeblock]
template <class U> void f(const U& u);
[codeblock:end]
[end:example]

[para]
[:en]
If the [~placeholder-type-specifier] is of the form [~:opt type-constraint]
[`decltype(auto)], [`T] shall be the placeholder alone.
[:zh_CN]
若[~占位符类型说明符]的形式为“[~:opt 类型约束] [`decltype(auto)]”，则 [`T] 应当
就是占位符自身。

[:en]
The type deduced for [`T] is determined as described in [#dcl.type.decltype], as
though [$E] had been the operand of the [`:key decltype].
[:zh_CN]
为 [`T] 所推断的类型，如同将 [$E] 作为 [`:key decltype] 的操作数那样，根据
[#dcl.type.decltype] 中的说明进行确定。

[begin:example]
[codeblock]
int i;
int&& f();
auto           x2a(i);          // [:en] [`decltype(x2a)] is [`int] \
                                [:zh_CN] [`decltype(x2a)] 为 [`int]
decltype(auto) x2d(i);          // [:en] [`decltype(x2d)] is [`int] \
                                [:zh_CN] [`decltype(x2d)] 为 [`int]
auto           x3a = i;         // [:en] [`decltype(x3a)] is [`int] \
                                [:zh_CN] [`decltype(x3a)] 为 [`int]
decltype(auto) x3d = i;         // [:en] [`decltype(x3d)] is [`int] \
                                [:zh_CN] [`decltype(x3d)] 为 [`int]
auto           x4a = (i);       // [:en] [`decltype(x4a)] is [`int] \
                                [:zh_CN] [`decltype(x4a)] 为 [`int]
decltype(auto) x4d = (i);       // [:en] [`decltype(x4d)] is [`int&] \
                                [:zh_CN] [`decltype(x4d)] 为 [`int&]
auto           x5a = f();       // [:en] [`decltype(x5a)] is [`int] \
                                [:zh_CN] [`decltype(x5a)] 为 [`int]
decltype(auto) x5d = f();       // [:en] [`decltype(x5d)] is [`int&&] \
                                [:zh_CN] [`decltype(x5d)] 为 [`int&&]
auto           x6a = { 1, 2 };  // [:en] [`decltype(x6a)] is [`std::initializer_list<int>] \
                                [:zh_CN] [`decltype(x6a)] 为 [`std::initializer_list<int>]
decltype(auto) x6d = { 1, 2 };  // [:en] error: [`{ 1, 2 }] is not an expression \
                                [:zh_CN] 错误：[`{ 1, 2 }] 不是表达式
auto          *x7a = &i;        // [:en] [`decltype(x7a)] is [`int*] \
                                [:zh_CN] [`decltype(x7a)] 为 [`int*]
decltype(auto)*x7d = &i;        // [:en] error: declared type is not plain [`decltype(auto)] \
                                [:zh_CN] 错误：所声明的类型不是单纯的 [`decltype(auto)]
[codeblock:end]
[end:example]

[para]
[:en]
For a [~placeholder-type-specifier] with a [~type-constraint], the
immediately-declared constraint ([#temp.param]) of the [~type-constraint] for
the type deduced for the placeholder shall be satisfied.
[:zh_CN]
对于带有[~类型约束]的[~占位符类型说明符]，为占位符所推断的类型的[~类型约束]的
直接声明的约束（[#temp.param]）应当得以满足。
