[section#dcl.ref
    [:en] References
    [:zh_CN] 引用

[%  [:en] declarator[!reference]
    [:zh_CN] 声明符[!引用～] ]
]

[para]
[:en]
In a declaration [`T D] where [`D] has either of the forms
[:zh_CN]
在声明式“[`T D]”中，其中 [`D] 的形式为以下之一

[syntax:explanation]
[| [`&] [~:opt attribute-specifier-seq] [`D1] ]
[| [`&&] [~:opt attribute-specifier-seq] [`D1] ]
[syntax:end]

[:en@~]
and the type of the contained [~declarator-id] in the declaration [`T D1] is
[=lq][^derived-declarator-type-list] [`T][=rq], the type of the [~declarator-id]
in [`D] is [=lq][^derived-declarator-type-list] reference to [`T][=rq].
[:zh_CN@~]
且声明式“[`T D1]”中包含的[~声明符标识]的类型是“[`T] [^衍生的声明符类型列表]”，则
[`D] 中的[~声明符标识]的类型就为“[`T] 的引用 [^衍生的声明符类型列表]”。

[:en]
The optional [~attribute-specifier-seq] appertains to the reference type.
[:zh_CN]
可选的[~属性说明符序列]属于引用类型。

[:en]
Cv-qualified references are ill-formed except when the cv-qualifiers are
introduced through the use of a [~typedef-name] ([#dcl.typedef], [#temp.param])
or [~decltype-specifier] ([#dcl.type.decltype]), in which case the cv-qualifiers
are ignored.
[:zh_CN]
被 cv 限定的引用是非良构的，除非 cv 限定符是通过使用 [~typedef-名]
（[#dcl.typedef]，[#temp.param]）或者[~decltype-说明符]（[#dcl.type.decltype]）
所引入的，这些情况下忽略其 cv 限定符。

[begin:example]
[codeblock]
typedef int& A;
const A aref = 3;   // [:en] error: lvalue reference to non-[`:key const] initialized with rvalue \
                    [:zh_CN] 错误：非 [`:key const] 的左值引用被以右值进行初始化
[codeblock:end]

[:en]
The type of [`aref] is [=lq]lvalue reference to [`int][=rq], not [=lq]lvalue
reference to [`const int][=rq].
[:zh_CN]
[`aref] 的类型是“[`int] 的左值引用”，而不是“[`const int] 的左值引用”。
[end:example]

[begin:note]
[:en]
A reference can be thought of as a name of an object.
[:zh_CN]
引用可被当作是对象的名字。
[end:note]

[:en]
[%[`void&]]
Forming the type [=lq]reference to [=cv] [`:key void][=rq] is ill-formed.
[:zh_CN]
[%[`void&]]
构成“[=cv] [`:key void] 的引用”是非良构的。

[para]
[:en]
A reference type that is declared using [`&] is called an [+lvalue reference],
and a reference type that is declared using [`&&] is called an
[+rvalue reference].
[:zh_CN]
用 [`&] 声明的引用类型称作[+左值引用]，而用 [`&&] 声明的引用类型称作[+右值引用]。

[:en]
Lvalue references and rvalue references are distinct types.
[:zh_CN]
左值引用和右值引用是不同的类型。

[:en]
Except where explicitly noted, they are semantically equivalent and commonly
referred to as references.
[:zh_CN]
当没有明确注明时，它们在语义上是等价的，且通常都被叫做引用。

[para]
[:en]
[%declaration[!reference]]
[%parameter[!reference]]
[:zh_CN]
[%声明[!引用]]
[%形参[!引用]]
[begin:example]
[codeblock]
void f(double& a) { a += 3.14; }
// ...
double d = 0;
f(d);
[codeblock:end]

[:en]
declares [`a] to be a reference parameter of [`f] so the call [`f(d)] will add
[`3.14] to [`d].
[:zh_CN]
声明 [`a] 为 [`f] 的引用形参，故调用 [`f(d)] 将给 [`d] 加上 [`3.14]。

[codeblock]
int v[20];
// ...
int& g(int i) { return v[i]; }
// ...
g(3) = 7;
[codeblock:end]

[:en]
declares the function [`g()] to return a reference to an integer so [`g(3)=7]
will assign [`7] to the fourth element of the array [`v].
[:zh_CN]
声明函数 [`g()] 为返回整数的引用，故 [`g(3)=7] 将把数组 [`v] 的第四个元素赋值为
[`7]。

[:en]
For another example,
[:zh_CN]
又例如，

[codeblock]
struct link {
  link* next;
};

link* first;

void h(link*& p) {  // [:en] [`p] is a reference to pointer \
                    [:zh_CN] [`p] 是指针的引用
  p->next = first;
  first = p;
  p = 0;
}

void k() {
   link* q = new link;
   h(q);
}
[codeblock:end]

[:en]
declares [`p] to be a reference to a pointer to [`link] so [`h(q)] will leave
[`q] with the value zero.
[:zh_CN]
声明 [`p] 为 [`link] 的指针的引用，故 [`h(q)] 留给 [`q] 的值将为零。

[:en]
See also [#dcl.init.ref].
[:zh_CN]
另见 [#dcl.init.ref]。
[end:example]

[para]
[:en]
It is unspecified whether or not a reference requires storage ([#basic.stc]).
[:zh_CN]
引用是否需要存储（[#basic.stc]）是未指明的。

[para]
[:en]
[%restriction[!reference]]
There shall be no references to references, no arrays of references, and no
pointers to references.
[:zh_CN]
[%限制[!引用]]
不存在引用的引用，不存在引用的数组，不存在引用的指针。

[:en]
[%initialization[!reference]]
The declaration of a reference shall contain an [~initializer] ([#dcl.init.ref])
except when the declaration contains an explicit [`:key extern] specifier
([#dcl.stc]), is a class member ([#class.mem]) declaration within a class
definition, or is the declaration of a parameter or a return type ([#dcl.fct]);
see [#basic.def].
[:zh_CN]
[%初始化[!引用]]
引用的声明式应当包含[~初始化式]（[#dcl.init.ref]），除非声明式明确包含了
[`:key extern] 声明符（[#dcl.stc]），是处于类定义式之中的类成员（[#class.mem]）
声明式，或者是形参或返回类型的声明式（[#dcl.fct]）；参见 [#basic.def]。

[para]
[:en] Attempting to bind a reference to a function where the converted
initializer is a glvalue whose type is not call-compatible ([#expr.call])
with the type of the function[=']s definition results in undefined behavior.
[:zh_CN] 试图将引用绑定到函数，但其转换后的初始化式是泛左值，且其类型与
函数定义式的类型并非调用兼容（[#expr.call]），将造成未定义行为。

[:en] Attempting to bind a reference to an object where the converted
initializer is a glvalue through which the object is not type-accessible
([#basic.lval]) results in undefined behavior.
[:zh_CN] 试图将引用绑定到对象，但其转换后的初始化式是泛左值，且通过它对该对象
并非可类型访问（[#basic.lval]），将造成未定义行为。

[begin:note]
[:en]
[%reference[!null]]
The object designated by such a glvalue can be outside its lifetime ([#basic.life]).
[:zh_CN]
[%引用[!空～]]
由这样的泛左值表示的对象可能超出其生存期（[#basic.life]）。

[:en] Because a null pointer value or a pointer past the end of an object
does not point to an object, a reference in a well-defined program cannot refer
to such things; see [#expr.unary.op].
[:zh_CN] 因为空指针值或对象的尾后指针并不指向对象，所以良构程序中的引用不能指代
这样的东西；见 [#expr.unary.op]。

[:en] As described in [#class.bit], a reference cannot be bound directly to a
bit-field.
[:zh_CN] 如 [#class.bit] 中所述，引用不能直接绑定到位字段上。
[end:note]

[:en] The behavior of an evaluation of a reference ([#expr.prim.id], [#expr.ref])
that does not happen after ([#intro.races]) the initialization of the reference
is undefined.
[:zh_CN] 引用的求值（[#expr.prim.id]，[#expr.ref]）如果并非发生晚于（[#intro.races]）
引用的初始化，则其行为未定义。

[begin:example]
[codeblock]
int &f(int&);
int &g();
extern int &ir3;
int *ip = 0;
int &ir1 = *ip;                 // [:en] undefined behavior: null pointer [:zh_CN] 未定义行为：空指针
int &ir2 = f(ir3);              // [:en] undefined behavior: [`ir3] not yet initialized \
                                [:zh_CN] 未定义行为：[`ir3] 尚未初始化
int &ir3 = g();
int &ir4 = f(ir4);              // [:en] undefined behavior: [`ir4] used in its own initializer \
                                [:zh_CN] 未定义行为：[`ir4] 被用在其自身的初始化式中

char x alignas(int);
int &ir5 = *reinterpret_cast<int *>(&x);    // [:en] undefined behavior: initializer refers to char object \
                                            [:zh_CN] 未定义行为：初始化式指代 char 对象
[codeblock:end]
[end:example]

[para]
[:en]
[%reference collapsing]
If a [~typedef-name] ([#dcl.typedef], [#temp.param]) or a [~decltype-specifier]
([#dcl.type.decltype]) denotes a type [`TR] that is a reference to a type [`T],
an attempt to create the type [=lq]lvalue reference to [=cv] [`TR][=rq] creates
the type [=lq]lvalue reference to [`T][=rq], while an attempt to create the type
[=lq]rvalue reference to [=cv] [`TR][=rq] creates the type [`TR].
[:zh_CN]
[%引用坍缩]
如果由某个 [~typedef-名]（[#dcl.typedef]，[#temp.param]）或者 [~decltype-说明符]
（[#dcl.type.decltype]）所代表的类型 [`TR] 是类型 [`T] 的引用，则当试图生成类型
“[=cv] [`TR] 的左值引用”时将生成类型“[`T] 的左值引用”，而当试图生成类型
“[=cv] [`TR] 的右值引用”时将生成类型 [`TR]。

[begin:note]
[:en]
This rule is known as reference collapsing.
[:zh_CN]
这条规则被称为引用坍缩。
[end:note]

[begin:example]
[codeblock]
int i;
typedef int& LRI;
typedef int&& RRI;

LRI& r1 = i;                    // [:en] [`r1] has the type [`int&] \
                                [:zh_CN] [`r1] 的类型为 [`int&]
const LRI& r2 = i;              // [:en] [`r2] has the type [`int&] \
                                [:zh_CN] [`r2] 的类型为 [`int&]
const LRI&& r3 = i;             // [:en] [`r3] has the type [`int&] \
                                [:zh_CN] [`r3] 的类型为 [`int&]

RRI& r4 = i;                    // [:en] [`r4] has the type [`int&] \
                                [:zh_CN] [`r4] 的类型为 [`int&]
RRI&& r5 = 5;                   // [:en] [`r5] has the type [`int&&] \
                                [:zh_CN] [`r5] 的类型为 [`int&&]

decltype(r2)& r6 = i;           // [:en] [`r6] has the type [`int&] \
                                [:zh_CN] [`r6] 的类型为 [`int&]
decltype(r2)&& r7 = i;          // [:en] [`r7] has the type [`int&] \
                                [:zh_CN] [`r7] 的类型为 [`int&]
[codeblock:end]
[end:example]

[para]
[begin:note]
[:en]
Forming a reference to function type is ill-formed if the function type has
[~cv-qualifier]s or a [~ref-qualifier]; see [#dcl.fct].
[:zh_CN]
当函数类型带有 [~cv-限定符]或者[~引用限定符]时，函数类型的引用的形式是非良构的，
参见 [#dcl.fct]。
[end:note]
