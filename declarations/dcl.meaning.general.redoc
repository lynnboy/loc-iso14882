[section#dcl.meaning.general
    [:en] General
    [:zh_CN] 概述
]

[para]
[:en]
[%declaration[!type]]
A declarator contains exactly one [~declarator-id]; it names the identifier
that is declared.
[:zh_CN]
[%声明式[!类型]]
每个声明符恰好包含一个[~声明符标识]；它命名了被声明的标识符。

[:en]
An [~unqualified-id] occurring in a [~declarator-id] shall be a simple
[~identifier] except for the declaration of some special functions
([#class.ctor], [#class.conv], [#class.dtor], [#over.oper]) and for the
declaration of template specializations or partial specializations ([#temp.spec]).
[:zh_CN]
[~声明符标识]中包含的[~未限定标识]，除了用于某些特殊函数（[#class.ctor]，
[#class.conv]，[#class.dtor]，[#over.oper]）的声明式，以及用于模板特化或部分特化
（[#temp.spec]）的声明式之外，应当是单纯的[~标识符]。

[:en]
When the [~declarator-id] is qualified, the declaration shall refer to a
previously declared member of the class or namespace to which the qualifier
refers (or, in the case of a namespace, of an element of the inline namespace
set of that namespace ([#namespace.def])) or to a specialization thereof; the
member shall not merely have been introduced by a [~using-declaration] in the
scope of the class or namespace nominated by the [~nested-name-specifier] of the
[~declarator-id].
[:zh_CN]
当[~声明符标识]被限定时，该声明式应当涉指某个在这个限定符所指代的类或命名空间
（或者对于命名空间来说，其内联命名空间集合的某个成员（[#namespace.def]））中，
之前已经声明过的某个成员或其特例；该成员应当并非仅由这个[~声明符标识]的[~嵌套名
说明符]所提名的类或命名空间的作用域之中的某个 [~using-声明式]所引入的。

[:en]
The [~nested-name-specifier] of a qualified [~declarator-id] shall not begin
with a [~decltype-specifier].
[:zh_CN]
受限定的[~声明符标识]的[~嵌套名说明符]不能以 [~decltype-说明符]开头。

[begin:note]
[:en]
If the qualifier is the global [`::] scope resolution operator, the
[~declarator-id] refers to a name declared in the global namespace scope.
[:zh_CN]
若其限定符是全局作用域解析运算符 [`::]，则此[~声明符标识]涉指全局命名空间作用域
中所声明的名字。
[end:note]

[:en]
The optional [~attribute-specifier-seq] following a [~declarator-id] appertains
to the entity that is declared.
[:zh_CN]
跟在[~声明符标识]后面的可选的[~特性说明符序列]属于所声明的实体。

[para]
[:en]
A [`static], [`thread_local], [`extern], [`mutable], [`friend], [`inline],
[`virtual], [`constexpr], or [`typedef] specifier or an [~explicit-specifier]
applies directly to each [~declarator-id] in an [~init-declarator-list] or
[~member-declarator-list]; the type specified for each [~declarator-id] depends
on both the [~decl-specifier-seq] and its [~declarator].
[:zh_CN]
[`static]，[`thread_local]，[`extern]，[`mutable]，[`friend]，[`inline]，
[`virtual]，[`constexpr]，或 [`typedef] 说明符，以及 [~explicit-说明符]，直接
应用到[~初始化声明符列表]或者[~成员声明符列表]中的每个[~声明符标识]上；为每个
[~声明符标识]所指定的类型同时依赖于[~声明说明符序列]和其[~声明符]。

[para]
[:en]
Thus, a declaration of a particular identifier has the form
[:zh_CN]
由此，特定标识符的声明式的形式即为

[syntax:explanation]
[`T] [`D]
[syntax:end]

[:en@~]
where [`T] is of the form [~:opt attribute-specifier-seq] [~decl-specifier-seq]
and [`D] is a declarator.
[:zh_CN@~]
其中[`T] 的形式为“[~:opt 特性说明符序列] [~声明说明符序列]”，而 [`D] 是声明符。

[:en]
Following is a recursive procedure for determining the type specified for the
contained [~declarator-id] by such a declaration.
[:zh_CN]
下面是用以确定这种声明式为其所包含的[~声明符标识]所指定的类型的递归过程。

[para]
[:en]
First, the [~decl-specifier-seq] determines a type.
[:zh_CN]
首先，其[~声明说明符序列]决定了某个类型。

[:en]
In a declaration
[:zh_CN]
在声明式

[syntax:explanation]
[`T] [`D]
[syntax:end]

[:en@~]
the [~decl-specifier-seq] [`T] determines the type [`T].
[:zh_CN@~]
中，[~声明说明符序列] [`T] 确定了类型 [`T]。

[begin:example]
[:en]
In the declaration
[:zh_CN]
在声明式

[codeblock]
int unsigned i;
[codeblock:end]

[:en@~]
the type specifiers [`int unsigned] determine the type [=lq][`unsigned int][=rq]
([#dcl.type.simple]).
[:zh_CN@~]
中，类型说明符 [`int unsigned] 确定了类型“[`unsigned int]”（[#dcl.type.simple]）。
[end:example]

[para]
[:en]
In a declaration [~:opt attribute-specifier-seq] [`T D] where [`D] is an
unadorned identifier the type of this identifier is [=lq][`T][=rq].
[:zh_CN]
在声明式“[~:opt 特性说明符序列] [`T D]”中（其中 [`D] 为朴素的标识符），此标识符
的类型就是“[`T]”。

[para]
[:en]
In a declaration [`T D] where [`D] has the form
[:zh_CN]
在声明式“[`T D]”中，其中 [`D] 的形式为

[syntax:explanation]
[`(] [`D1] [`)]
[syntax:end]

[:en@~]
the type of the contained [~declarator-id] is the same as that of the contained
[~declarator-id] in the declaration
[:zh_CN@~]
其所包含的[~声明符标识]的类型与以下声明式所包含的[~声明符标识]的类型相同

[syntax:explanation]
[`T] [`D1]
[syntax:end]

[:en]
[%declaration[!parentheses in]]
Parentheses do not alter the type of the embedded [~declarator-id], but they can
alter the binding of complex declarators.
[:zh_CN]
[%声明式[!～中的括号]]
括号并不会改变其中的[~声明符标识]的类型，但它们可以改变复杂声明符的绑定方式。
