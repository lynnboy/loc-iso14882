[section#dcl.meaning.general
    [:en] General
    [:zh_CN] 概述
]

[para]
[:en]
[%declaration[!type]]
A declarator contains exactly one [~declarator-id]; it names the entity that is
declared.
[:zh_CN]
[%声明式[!类型]]
每个声明符恰好包含一个[~声明符标识]；它命名了被声明的实体。

[:en]
If the [~unqualified-id] occurring in a [~declarator-id] is a [~template-id],
the declarator shall appear in the [~declaration] of a [~template-declaration]
([#temp.decls]), [~explicit-specialization] ([#temp.expl.spec]), or
[~explicit-instantiation] ([#temp.explicit]).
[:zh_CN]
如果[~声明符标识]中包含的[~未限定标识]是[~模板标识]，则该声明符应当出现于
[~模板声明式]（[#temp.decls]），[~显式特化式]（[#temp.expl.spec]），或
[~显式实例化式]（[#temp.explicit]）的[~声明式]之中。

[begin:note]
[:en]
An [~unqualified-id] that is not an [~identifier] is used to declare certain
functions ([#class.conv.fct], [#class.dtor], [#over.oper], [#over.literal]).
[:zh_CN]
不是[~标识符]的[~未限定标识]用于声明特定的函数（[#class.conv.fct]，[#class.dtor]，
[#over.oper]，[#over.literal]）。
[end:note]

[:en]
The optional [~attribute-specifier-seq] following a [~declarator-id] appertains
to the entity that is declared.
[:zh_CN]
跟在[~声明符标识]后面的可选的[~特性说明符序列]属于所声明的实体。

[para]
[:en]
If the declaration is a friend declaration:
[:zh_CN]
如果声明式是友元声明式：

[list]
[item]
[:en]
The [~declarator] does not bind a name.
[:zh_CN]
[~声明符]不与任何名字绑定。

[item]
[:en]
If the [~id-expression] [$E] in the [~declarator-id] of the [~declarator] is
a [~qualified-id] or a [~template-id]:
[:zh_CN]
如果[~声明符]的[~声明符标识]中的[~标识表达式] [$E] 为[~限定标识]或[~模板标识]：

[list]
[item]
[:en]
If the friend declaration is not a template declaration, then in the lookup for
the terminal name of [$E]:
[:zh_CN]
如果该友元声明式并非模板声明式，则在 [$E] 的终端名的查找中：

[list]
[item]
[:en]
if the [~unqualified-id] in [$E] is a [~template-id], all function declarations
are discarded;
[:zh_CN]
若 [$E] 中的[~未限定标识]为[~模板标识]，则丢弃所有函数声明式；

[item]
[:en]
otherwise, if the [~declarator] corresponds ([#basic.scope.scope]) to any
declaration found of a non-template function, all function template declarations
are discarded;
[:zh_CN]
否则，若该[~声明符]对应于（[#basic.scope.scope]）所找到的非模板函数的任何声明式，
则丢弃所有函数模板声明式；

[item]
[:en]
each remaining function template is replaced with the specialization chosen by
deduction from the friend declaration ([#temp.deduct.decl]) or discarded if
deduction fails.
[:zh_CN]
每个剩余的函数模板均被替换为从该友元声明式进行推断所选择的特例
（[#temp.deduct.decl]），或当推断失败时被丢弃。
[list:end]

[item]
[:en]
The [~declarator] shall correspond to one or more declarations found by the
lookup; they shall all have the same target scope, and the target scope of the
[~declarator] is that scope.
[:zh_CN]
该[~声明符]应当对应于该查找所找到的一个或更多声明式；它们应当都具有相同的目标
作用域，且该[~声明符]的目标作用域即为此作用域。
[list:end]

[item]
[:en]
Otherwise, the terminal name of [$E] is not looked up.
[:zh_CN]
否则，不查找 [$E] 的终端名。

[:en]
The declaration[=']s target scope is the innermost enclosing namespace scope;
if the declaration is contained by a block scope, the declaration shall
correspond to a declaration that inhabits the innermost block scope.
[:zh_CN]
该声明式的目标作用域为最内层外围命名空间作用域；如果该声明式被某个块作用域包含，
则该声明式应当对应于某个居于最内层块作用域的声明式。
[list:end]

[para]
[:en]
Otherwise:
[:zh_CN]
否则：

[list]
[item]
[:en]
If the [~id-expression] in the [~declarator-id] of the [~declarator] is
a [~qualified-id] [$Q], let [$S] be its lookup context ([#basic.lookup.qual]);
the declaration shall inhabit a namespace scope.
[:zh_CN]
如果该[~声明符]的[~声明符标识]中的[~标识表达式]是[~限定标识] [$Q]，令 [$S] 为其
查找语境（[#basic.lookup.qual]）；该声明式应当居于命名空间作用域。

[item]
[:en]
Otherwise, let [$S] be the entity associated with the scope inhabited by
the [~declarator].
[:zh_CN]
否则，令 [$S] 为与该[~声明符]所居的逫向关联的实体。

[item]
[:en]
If the [~declarator] declares an explicit instantiation or a partial or explicit
specialization, the [~declarator] does not bind a name.
[:zh_CN]
如果该[~声明符]声明显式实例化式或者部分或显式特化式，则该[~声明符]不与任何名字
绑定。

[:en]
If it declares a class member, the terminal name of the [~declarator-id] is not
looked up; otherwise, only those lookup results that are nominable in [$S]
are considered when identifying any function template specialization being
declared ([#temp.deduct.decl]).
[:zh_CN]
如果它声明类成员，则不查找其[~声明符标识]的终端名；否则，在识别所声明的任何函数
模板特例（[#temp.deduct.decl]）中，仅考虑 [$S] 中提名了的那些查找结果。

[begin:example]
[codeblock]
namespace N {
  inline namespace O {
    template<class T> void f(T);        // #1
    template<class T> void g(T) {}
  }
  namespace P {
    template<class T> void f(T*);       // [:en] #2, more specialized than #1 \
                                        [:zh_CN] #2，比 #1 更特殊
    template<class> int g;
  }
  using P::f,P::g;
}
template<> void N::f(int*) {}           // [:en] OK: #2 is not nominable \
                                        [:zh_CN] OK：#2 未被提名
template void N::g(int);                // [:en] error: lookup is ambiguous \
                                        [:zh_CN] 错误：查找有歧义
[codeblock:end]
[end:example]

[item]
[:en]
Otherwise, the terminal name of the [~declarator-id] is not looked up.
[:zh_CN]
否则，不查找[~声明符标识]的终端名。

[:en]
If it is a qualified name, the [~declarator] shall correspond to one or more
declarations nominable in [$S]; all the declarations shall have the same target
scope and the target scope of the [~declarator] is that scope.
[:zh_CN]
如果它是限定名，则该[~声明符]应当对应于 [$S] 中所提名的一个或更多声明式；所有
这些声明式都应当具有相同的目标作用域，且该[~声明符]的目标作用域即为此作用域。

[begin:example]
[codeblock]
namespace Q {
  namespace V {
    void f();
  }
  void V::f() { /* ... */ }     // OK
  void V::g() { /* ... */ }     // [:en] error: [`g()] is not yet a member of [`V] \
                                [:zh_CN] 错误：[`g()] 还不是 [`V] 的成员
  namespace V {
    void g();
  }
}

namespace R {
  void Q::V::g() { /* ... */ }  // [:en] error: [`R] doesn[=']t enclose [`Q] \
                                [:zh_CN] 错误：[`R] 并不包围 [`Q]
}
[codeblock:end]
[end:example]

[item]
[:en]
If the declaration inhabits a block scope [$S] and declares a function
([#dcl.fct]) or uses the [`:key extern] specifier, the declaration shall not be
attached to a named module ([#module.unit]); its target scope is the innermost
enclosing namespace scope, but the name is bound in [$S].
[:zh_CN]
如果该声明式居于某个作用域 [$S] 并声明了函数（[#dcl.fct]）或使用了 [`:key extern]
说明符，则该声明式不应当附属于具名模块（[#module.unit]）；其目标作用域为最内层
外围命名空间作用域，但其名字在 [$S] 中绑定。

[begin:example]
[codeblock]
namespace X {
  void p() {
    q();                        // [:en] error: [`q] not yet declared \
                                [:zh_CN] 错误：[`q] 尚未声明
    extern void q();            // [:en] [`q] is a member of namespace [`X] \
                                [:zh_CN] [`q] 是命名空间 [`X] 的成员
    extern void r();            // [:en] [`r] is a member of namespace [`X] \
                                [:zh_CN] [`r] 是命名空间 [`X] 的成员
  }

  void middle() {
    q();                        // [:en] error: [`q] not found \
                                [:zh_CN] 错误：[`q] 未找到
  }

  void q() { /* ... */ }        // [:en] definition of [`X::q] \
                                [:zh_CN] [`X::q] 的定义式
}

void q() { /* ... */ }          // [:en] some other, unrelated [`q] \
                                [:zh_CN] 某个其他的无关的 [`q]
void X::r() { /* ... */ }       // [:en] error: [`r] cannot be declared by [~qualified-id] \
                                [:zh_CN] 错误：不能以[~限定标识]声明 [`r]
[codeblock:end]
[end:example]
[list:end]

[para]
[:en]
A [`:key static], [`:key thread_local], [`:key extern], [`:key mutable],
[`:key friend], [`:key inline], [`:key virtual], [`:key constexpr],
[`:key consteval], [`:key constinit], or [`typedef] specifier or an
[~explicit-specifier] applies directly to each [~declarator-id] in a declaration;
the type specified for each [~declarator-id] depends on both the
[~decl-specifier-seq] and its [~declarator].
[:zh_CN]
[`:key static]，[`:key thread_local]，[`:key extern]，[`:key mutable]，
[`:key friend]，[`:key inline]，[`:key virtual]，[`:key constexpr]，
[`:key consteval]，[`:key constinit]，或 [`typedef] 说明符，以及
[~explicit-说明符]，直接应用到声明式中的每个[~声明符标识]上；为每个[~声明符标识]
所指定的类型同时依赖于[~声明说明符序列]和其[~声明符]。

[para]
[:en]
Thus, (for each [~declarator]) a declaration has the form
[:zh_CN]
由此，（对于每个[~声明符]），声明式的形式即为

[syntax:explanation]
[`T] [`D]
[syntax:end]

[:en@~]
where [`T] is of the form [~:opt attribute-specifier-seq] [~decl-specifier-seq]
and [`D] is a declarator.
[:zh_CN@~]
其中[`T] 的形式为“[~:opt 特性说明符序列] [~声明说明符序列]”，而 [`D] 是声明符。

[:en]
Following is a recursive procedure for determining the type specified for the
contained [~declarator-id] by such a declaration.
[:zh_CN]
下面是用以确定这种声明式为其所包含的[~声明符标识]所指定的类型的递归过程。

[para]
[:en]
First, the [~decl-specifier-seq] determines a type.
[:zh_CN]
首先，其[~声明说明符序列]决定了某个类型。

[:en]
In a declaration
[:zh_CN]
在声明式

[syntax:explanation]
[`T] [`D]
[syntax:end]

[:en@~]
the [~decl-specifier-seq] [`T] determines the type [`T].
[:zh_CN@~]
中，[~声明说明符序列] [`T] 确定了类型 [`T]。

[begin:example]
[:en]
In the declaration
[:zh_CN]
在声明式

[codeblock]
int unsigned i;
[codeblock:end]

[:en@~]
the type specifiers [`int unsigned] determine the type [=lq][`unsigned int][=rq]
([#dcl.type.simple]).
[:zh_CN@~]
中，类型说明符 [`int unsigned] 确定了类型“[`unsigned int]”（[#dcl.type.simple]）。
[end:example]

[para]
[:en]
In a declaration [~:opt attribute-specifier-seq] [`T D] where [`D] is an
unadorned name, the type of the declared entity is [=lq][`T][=rq].
[:zh_CN]
在声明式“[~:opt 特性说明符序列] [`T D]”中（其中 [`D] 为朴素的名字），所声明实体
的类型就是“[`T]”。

[para]
[:en]
In a declaration [`T D] where [`D] has the form
[:zh_CN]
在声明式“[`T D]”中，其中 [`D] 的形式为

[syntax:explanation]
[`(] [`D1] [`)]
[syntax:end]

[:en@~]
the type of the contained [~declarator-id] is the same as that of the contained
[~declarator-id] in the declaration
[:zh_CN@~]
其所包含的[~声明符标识]的类型与以下声明式所包含的[~声明符标识]的类型相同

[syntax:explanation]
[`T] [`D1]
[syntax:end]

[:en]
[%declaration[!parentheses in]]
Parentheses do not alter the type of the embedded [~declarator-id], but they can
alter the binding of complex declarators.
[:zh_CN]
[%声明式[!～中的括号]]
括号并不会改变其中的[~声明符标识]的类型，但它们可以改变复杂声明符的绑定方式。
