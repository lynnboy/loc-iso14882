[section#dcl.constinit
    [:en] The [`:key constinit] specifier
    [:zh_CN] [`:key constinit] 说明符

[%  [:en] specifier[![`constinit]]
    [:zh_CN] 说明符[![`constinit]] ]
]

[para]
[:en] The [`:key constinit] specifier shall be applied only to a declaration of
a variable with static or thread storage duration or to a structured binding
declaration ([#dcl.struct.bind]).
[:zh_CN] [`:key constinit] 说明符只能施加于具有静态或线程存储期的变量的声明式，
或者结构化绑定声明式（[#dcl.struct.bind]）上。

[begin:note]
[:en] A structured binding declaration introduces a uniquely named variable,
to which the [`constinit] specifier applies.
[:zh_CN] 结构化绑定声明式引入一个唯一命名的变量，[`constinit] 说明符施加于其上。
[end:note]

[:en] If the specifier is applied to any declaration of a variable, it shall be
applied to the initializing declaration.
[:zh_CN] 若该说明符施加于某个变量的任何声明式上，则它也应当施加于进行初始化的声明式上。

[:en] No diagnostic is required if no [`:key constinit] declaration is reachable
at the point of the initializing declaration.
[:zh_CN] 如果在进行初始化的声明式的位置没有可达的 [`:key constinit] 声明式，则无需诊断。

[para]
[:en] If a variable declared with the [`:key constinit] specifier has dynamic
initialization ([#basic.start.dynamic]), the program is ill-formed, even if the
implementation would perform that initialization as a static initialization
([#basic.start.static]).
[:zh_CN] 如果声明时带有 [`:key constinit] 说明符的变量具有动态初始化（[#basic.start.dynamic]），
则程序非良构，即便实现可以将该初始化作为静态初始化（[#basic.start.static]）也是如此。

[begin:note]
[:en] The [`:key constinit] specifier ensures that the variable is initialized
during static initialization.
[:zh_CN] [`:key constinit] 说明符保证变量在静态初始化期间进行初始化。
[end:note]

[para]
[begin:example]
[codeblock]
const char * g() { return "dynamic initialization"; }
constexpr const char * f(bool p) { return p ? "constant initializer" : g(); }
constinit const char * c = f(true);     // OK
constinit const char * d = f(false);    // [:en] error [:zh_CN] 错误
[codeblock:end]
[end:example]
