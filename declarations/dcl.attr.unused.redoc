[section#dcl.attr.unused
    [:en] Maybe unused attribute
    [:zh_CN] maybe_unused 属性

[%  [:en] attribute[!maybe unused]
    [:zh_CN] 属性[!maybe_unused] ]
]

[para]
[:en]
The [~attribute-token] [`maybe_unused] indicates that a name, label, or entity
is possibly intentionally unused.
[:zh_CN]
[~属性记号] [`maybe_unused] 指出名字、标号或实体可能故意不被使用。

[:en]
No [~attribute-argument-clause] shall be present.
[:zh_CN]
不能带有[~属性实参子句]。

[para]
[:en] The attribute may be applied to the declaration of a class, [~typedef-name],
variable (including a structured binding declaration), structured binding,
non-static data member, function, enumeration, or enumerator, or to an
[~identifier] label ([#stmt.label]).
[:zh_CN] 这个属性能够应用于类，[~typedef-名]，变量（包括结构化绑定声明式），
结构化绑定，非静态数据成员，函数，枚举，或者枚举符，或者应用于[~标识符]标号
（[#stmt.label]）。

[para]
[:en]
A name or entity declared without the [`maybe_unused] attribute can later be
redeclared with the attribute and vice versa.
[:zh_CN]
声明时没有 [`maybe_unused] 属性的名字或实体，可以随后被重复声明为带有这个属性，
反之亦然。

[:en]
An entity is considered marked after the first declaration that marks it.
[:zh_CN]
在首次带有标记的声明式之后，实体即被认为是被标记了。

[para:recommended]
[:en]
For an entity marked [`maybe_unused], implementations should not emit a warning
that the entity or its structured bindings (if any) are used or unused.
[:zh_CN]
对于标记为 [`maybe_unused] 的实体，实现不应对其发出该实体或其各个结构化绑定
（如果有）是否被使用的警告消息。

[:en]
For a structured binding declaration not marked [`maybe_unused], implementations
should not emit such a warning unless all of its structured bindings are unused.
[:zh_CN]
对于未标记 [`maybe_unused] 的结构化绑定声明式，除非其所有结构化绑定均被使用，
否则实现不应发出一个这样的警告消息。

[:en] For a label to which [`maybe_unused] is applied, implementations should
not emit a warning that the label is used or unused.
[:zh_CN] 对于应用了 [`maybe_unused] 的标号，实现不应对其发出该标号是否被使用的
警告消息。

[:en] The value of a [~has-attribute-expression] for the [`maybe_unused]
attribute should be [`0] if the attribute does not cause suppression of such
warnings.
[:zh_CN] 如果该属性不能导致对这种警告的抑制，则针对 [`maybe_unused] 属性的
[~属性查询表达式]的值最好为 [`0]。

[para]
[begin:example]
[codeblock]
[[maybe_unused]] void f([[maybe_unused]] bool thing1,
                        [[maybe_unused]] bool thing2) {
  [[maybe_unused]] bool b = thing1 && thing2;
  assert(b);
#ifdef NDEBUG
  goto x;
#endif
  [[maybe_unused]] x:
}
[codeblock:end]

[:en]
Implementations should not warn that [`b] is unused, whether or not [`NDEBUG]
is defined.
[:zh_CN]
无论是否定义了 [`NDEBUG] 实现均不应对 [`b] 未被使用发出警告。
[end:example]
