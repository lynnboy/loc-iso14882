[section#dcl.attr.unused
    [:en] Maybe unused attribute
    [:zh_CN] maybe_unused 特性标注

[%  [:en] attribute[!maybe unused]
    [:zh_CN] 特性标注[!maybe_unused] ]
]

[para]
[:en]
The [~attribute-token] [`maybe_unused] indicates that a name or entity is
possibly intentionally unused.
[:zh_CN]
[~特性记号] [`maybe_unused] 指出名字或者实体可能故意不被使用。

[:en]
It shall appear at most once in each [~attribute-list] and no
[~attribute-argument-clause] shall be present.
[:zh_CN]
它在每个[~特性列表]中最多出现一次，且不能带有[~特性实参子句]。

[para]
[:en]
The attribute may be applied to the declaration of a class, a [~typedef-name],
a variable, a non-static data member, a function, an enumeration, or an
enumerator.
[:zh_CN]
这个特性标注能够应用于类，[~typedef-名]，变量，非静态数据成员，函数，枚举，或者
枚举符之上。

[para]
[enter:note]
[:en]
For an entity marked [`maybe_unused], implementations are encouraged not to emit
a warning that the entity is unused, or that the entity is used despite the
presence of the attribute.
[:zh_CN]
对于标记为 [`maybe_unused] 的实体，鼓励实现不对其发出实体未被使用的警告，或实体
被使用，而不管是否出现这个特性标注。
[exit:note]

[para]
[:en]
A name or entity declared without the [`maybe_unused] attribute can later be
redeclared with the attribute and vice versa.
[:zh_CN]
声明时没有 [`maybe_unused] 特性标注的名字或实体，可以随后被重复声明为带有这个
特性标注，反之亦然。

[:en]
An entity is considered marked after the first declaration that marks it.
[:zh_CN]
在首次带有标记的声明式之后，实体即被认为是被标记了。

[para]
[enter:example]
[codeblock]
[[maybe_unused]] void f([[maybe_unused]] bool thing1,
                        [[maybe_unused]] bool thing2) {
  [[maybe_unused]] bool b = thing1 && thing2;
  assert(b);
}
[codeblock:end]

[:en]
Implementations should not to warn that [`b] is unused, whether or not [`NDEBUG]
is defined.
[:zh_CN]
实现最好不对 [`b] 未被使用发出警告，无论是否定义了 [`NDEBUG]。
[exit:example]
