[section#dcl.name
    [:en] Type names
    [:zh_CN] 类型名
]

[para]
[:en]
[%type name]
To specify type conversions explicitly, [%operator[!cast]] and as an argument of
[`sizeof], [`alignof], [`:key new], or [`typeid], the name of a type shall be
specified.
[:zh_CN]
[%类型名]
当显式指定类型转换[%运算符[!转型～]]时，或者提供 [`sizeof]、[`alignof]、
[`:key new] 或 [`typeid] 的实参时，应该指定类型的名字。

[:en]
This can be done with a [~type-id] or [~new-type-id] ([#expr.new]), which is
syntactically a declaration for a variable or function of that type that omits
the name of the entity.
[:zh_CN]
这可以用[~类型标识]或 [~new-类型标识]（[#expr.new]）做到，它在语法上是变量或函数
的声明式，旦省略了实体的名字。

[syntax]
[rule type-id [:zh_CN] 类型标识 ]
    [| type-specifier-seq [~:opt abstract-declarator] ]
[rule:end]

[rule defining-type-id [:zh_CN] 定义类型标识 ]
    [| defining-type-specifier-seq [~:opt abstract-declarator] ]
[rule:end]

[rule abstract-declarator [:zh_CN] 抽象声明符 ]
    [| ptr-abstract-declarator ]
    [| [~:opt noptr-abstract-declarator] parameters-and-qualifiers
        trailing-return-type ]
    [| abstract-pack-declarator ]
[rule:end]

[rule ptr-abstract-declarator [:zh_CN] 指针抽象声明符 ]
    [| noptr-abstract-declarator ]
    [| ptr-operator [~:opt ptr-abstract-declarator] ]
[rule:end]

[rule noptr-abstract-declarator [:zh_CN] 非指针抽象声明符 ]
    [| [~:opt noptr-abstract-declarator] parameters-and-qualifiers ]
    [| [~:opt noptr-abstract-declarator] [``[] [~:opt constant-expression] [``]]
        [~:opt attribute-specifier-seq] ]
    [| [`(] ptr-abstract-declarator [`)] ]
[rule:end]

[rule abstract-pack-declarator [:zh_CN] 抽象包组声明符 ]
    [| noptr-abstract-pack-declarator ]
    [| ptr-operator abstract-pack-declarator ]
[rule:end]

[rule noptr-abstract-pack-declarator [:zh_CN] 非指针抽象包组声明符 ]
    [| noptr-abstract-pack-declarator parameters-and-qualifiers ]
    [| noptr-abstract-pack-declarator [``[] [~:opt constant-expression] [``]]
        [~:opt attribute-specifier-seq] ]
    [| [`...] ]
[rule:end]
[syntax:end]

[:en]
It is possible to identify uniquely the location in the [~abstract-declarator]
where the identifier would appear if the construction were a declarator in a
declaration.
[:zh_CN]
[~抽象声明符]中，能够唯一地指定一个位置，使得当这个语言构造变为某个声明式中的
声明符时，就是标识符应当出现的位置。

[:en]
The named type is then the same as the type of the hypothetical identifier.
[:zh_CN]
所指名的类型与这个假定的标识符的类型相同。

[begin:example]
[codeblock]
int                 // [`int i]
int *               // [`int *pi]
int *[3]            // [`int *p`[3`]]
int (*)[3]          // [`int (*p3i)`[3`]]
int *()             // [`int *f()]
int (*)(double);[[redoc("!<")]]     // [`int (*pf)(double)]
[codeblock:end]

[:en]
name respectively the types [=lq][`int][=rq], [=lq]pointer to [`int][=rq],
[=lq]array of 3 pointers to [`int][=rq], [=lq]pointer to array of 3 [`int][=rq],
[=lq]function of (no parameters) returning pointer to [`int][=rq], and
[=lq]pointer to a function of ([`double]) returning [`int][=rq].
[:zh_CN]
分别指名了类型“[`int]”、“[`int] 的指针”、“[`int] 的指针的 3 元数组”、“[`int] 的
3 元数组的指针”、“[`int] 的指针为返回类型的(无形参)的函数”和“[`int] 为返回
类型的 ([`double]) 的函数的指针”。
[end:example]

[para]
[:en]
A type can also be named (often more easily) by using a [`typedef]
([#dcl.typedef]).
[:zh_CN]
还可以（通常更便利地）用 [`typedef]（[#dcl.typedef]）来指名类型。
