[section#dcl.fct
    [:en] Functions
    [:zh_CN] 函数

[%:begin#declarator.function
    [:en] declarator[!function]
    [:zh_CN] 声明符[!函数～]
]
]

[para]
[:en]
[%type[!function]]
In a declaration [`T D] where [`D] has the form
[:zh_CN]
[%类型[!函数～]]
在声明式“[`T D]”中，其中 [`D] 的形式为

[syntax:explanation]
[| [`D1] [`(] [~parameter-declaration-clause] [`)] [~:opt cv-qualifier-seq] [br]
    [~:opt ref-qualifier] [~:opt noexcept-specifier]
    [~:opt attribute-specifier-seq] ]
[syntax:end]

[:en@~]
and the type of the contained [~declarator-id] in the declaration [`T D1] is
[=lq][^derived-declarator-type-list] [`T][=rq], the type of the [~declarator-id]
in [`D] is [=lq][^derived-declarator-type-list] [`:opt:key noexcept] function of
parameter-type-list [~:opt cv-qualifier-seq] [~:opt ref-qualifier] returning
[`T][=rq], where
[:zh_CN@~]
且声明式“[`T D1]”中包含的[~声明符标识]的类型为“[`T] [^衍生的声明符类型列表]”，则
[`D] 中的[~声明符标识]的类型是“[`T] 为返回类型的形参类型列表[~:opt cv-限定符序列]
[~:opt 引用限定符] 的 [`:opt:key noexcept] 函数 [^衍生的声明符类型列表]”，其中

[list]
[item]
[:en@~] the parameter-type-list is derived from the
[~parameter-declaration-clause] as described below and
[:zh_CN@~] 其形参类型列表是如下所述从[~形参声明子句]获得的，并且
[item]
[:en@~] the optional [`:key noexcept] is present if and only if the exception
specification ([#except.spec]) is non-throwing.
[:zh_CN@~] 可选的 [`:key noexcept] 当且仅当其具有无抛出异常说明（[#except.spec]）
时出现。
[list:end]

[:en]
The optional [~attribute-specifier-seq] appertains to the function type.
[:zh_CN]
可选的[~属性说明符序列]属于该函数类型。

[para]
[:en]
In a declaration [`T D] where [`D] has the form
[:zh_CN]
在声明式“[`T D]”中，其中 [`D] 的形式为

[syntax:explanation]
[| [`D1] [`(] [~parameter-declaration-clause] [`)] [~:opt cv-qualifier-seq] [br]
    [~:opt ref-qualifier] [~:opt noexcept-specifier]
    [~:opt attribute-specifier-seq] [~trailing-return-type] ]
[syntax:end]

[:en@~]
and the type of the contained [~declarator-id] in the declaration [`T D1] is
[=lq][^derived-declarator-type-list] [`T][=rq], [`T] shall be the single
[~type-specifier] [`:key auto].
[:zh_CN@~]
且声明式“[`T D1]”中包含的[~声明符标识]的类型为“[`T] [^衍生的声明符类型列表]”，
[`T] 应当为单个[~类型说明符] [`:key auto]。

[:en]
The type of the [~declarator-id] in [`D] is
[=lq][^derived-declarator-type-list] [`:opt:key noexcept] function of
parameter-type-list [~:opt cv-qualifier-seq] [~:opt ref-qualifier] returning
[`U][=rq], where
[:zh_CN]
则 [`D] 中的[~声明符标识]的类型是“[`U] 为返回类型的形参类型列表
[~:opt cv-限定符序列] [~:opt 引用限定符] 的 [`:opt:key noexcept] 函数
[^衍生的声明符类型列表]”，其中

[list]
[item]
[:en@~] the parameter-type-list is derived from the
[~parameter-declaration-clause] as described below,
[:zh_CN@~] 其形参类型列表是如下所述从[~形参声明子句]获得的，
[item]
[:en@~] [`U] is the type specified by the [~trailing-return-type], and
[:zh_CN@~] [`U] 为 [~尾部返回类型]所指定的类型，并且
[item]
[:en@~] the optional [`:key noexcept] is present if and only if the exception
specification ([#except.spec]) is non-throwing.
[:zh_CN@~] 可选的 [`:key noexcept] 当且仅当其具有无抛出异常说明（[#except.spec]）
时出现。
[list:end]

[:en]
The optional [~attribute-specifier-seq] appertains to the function type.
[:zh_CN]
可选的[~属性说明符序列]属于该函数类型。

[para]
[:en]
[%type[!function]]
A type of either form is a [+:% function type].[#:fn]
[:zh_CN]
[%类型[!函数～]]
这两种形式的类型都是[+:% 函数类型][#:fn]。

[note:foot]
[:en]
As indicated by syntax, cv-qualifiers are a significant component in function
return types.
[:zh_CN]
正如在语法中指出的，cv 限定符是函数返回类型中的有效成分。
[note:end]

[%  [:en] declaration[!function]
    [:zh_CN] 声明[!函数] ]
[syntax]
[rule parameter-declaration-clause [:zh_CN] 形参声明子句 ]
    [| [~:opt parameter-declaration-list] [`:opt ...] ]
    [| parameter-declaration-list [`,] [`...] ]
[rule:end]

[rule parameter-declaration-list [:zh_CN] 形参声明式列表 ]
    [| parameter-declaration ]
    [| parameter-declaration-list [`,] parameter-declaration ]
[rule:end]

[rule parameter-declaration [:zh_CN] 形参声明式 ]
    [| [~:opt attribute-specifier-seq] decl-specifier-seq declarator ]
    [| [~:opt attribute-specifier-seq] decl-specifier-seq declarator
        [`=] initializer-clause ]
    [| [~:opt attribute-specifier-seq] decl-specifier-seq
        [~:opt abstract-declarator] ]
    [| [~:opt attribute-specifier-seq] decl-specifier-seq
        [~:opt abstract-declarator] [`=] initializer-clause ]
[rule:end]
[syntax:end]

[:en]
The optional [~attribute-specifier-seq] in a [~parameter-declaration] appertains
to the parameter.
[:zh_CN]
[~形参声明式]中可选的[~属性说明符序列]属于这个形参。

[para]
[:en]
[%declaration[!parameter]]
The [~parameter-declaration-clause] determines the arguments that can be
specified, and their processing, when the function is called.
[:zh_CN]
[%声明[!形参]]
[~形参声明子句]决定了调用函数时可以指定给它的实参，以及它们的处理方式。

[begin:note]
[:en]
[%conversion[!argument]]
The [~parameter-declaration-clause] is used to convert the arguments specified
on the function call; see [#expr.call].
[:zh_CN]
[%转换[!实参]]
[~形参声明子句]用于对在函数调用中所指定的实参进行转换；参见 [#expr.call]。
[end:note]

[:en]
[%argument list[!empty]]
If the [~parameter-declaration-clause] is empty, the function takes no arguments.
[:zh_CN]
[%实参列表[!空～]]
若[~形参声明子句]为空，则函数不接受实参。

[:en]
A parameter list consisting of a single unnamed parameter of non-dependent type
[`:key void] is equivalent to an empty parameter list.
[:zh_CN]
由单个非待决类型 [`:key void] 的无名形参构成的形参列表等价于空形参列表。

[:en]
[%parameter[![`void]]]
Except for this special case, a parameter shall not have type [=cv] [`:key void].
[:zh_CN]
[%形参[![`void]]]
除了这种特殊情况外，形参类型不能为 [=cv] [`:key void]。

[:en]
A parameter with volatile-qualified type is deprecated; see [#depr.volatile.type].
[:zh_CN]
带有 [`volatile] 限定类型的形参是被摒弃的；参见 [#depr.volatile.type]。

[:en]
[%argument type[!unknown]]
[%[`...][% ellipsis]] [%declaration[!ellipsis in function]]
[%argument list[!variable]] [%parameter list[!variable]]
If the [~parameter-declaration-clause] terminates with an ellipsis or a function
parameter pack ([#temp.variadic]), the number of arguments shall be equal to or
greater than the number of parameters that do not have a default argument and
are not function parameter packs.
[:zh_CN]
[%实参类型[!未知的～]]
[%[`...][% 省略号]] [%声明式[!函数～中的省略号]]
[%实参列表[!可变的～]] [%形参列表[!可变的～]]
若[~形参声明子句]以省略号或函数形参包组（[#temp.variadic]）结尾，则实参的数量应
等于或者大于没有默认实参且不是函数形参包组的形参的数量。

[:en]
Where syntactically correct and where [=lq][`...][=rq] is not part of an
[~abstract-declarator], [=lq][`, ...][=rq] is synonymous with [=lq][`...][=rq].
[:zh_CN]
语法正确且“[`...]”不是[~抽象声明符]的一部分时，“[`, ...]”与“[`...]”同义。

[begin:example]
[:en]
The declaration
[:zh_CN]
声明式

[codeblock]
int printf(const char*, ...);
[codeblock:end]

[:en@~]
declares a function that can be called with varying numbers and types of
arguments.
[:zh_CN@~]
声明了可以用可变数量和类型的实参来调用的函数。

[codeblock]
printf("hello world");
printf("a=%d b=%d", a, b);
[codeblock:end]

[:en]
However, the first argument must be of a type that can be converted to a
[`:key const] [`char*].
[:zh_CN]
然而，其第一个实参必须具有可以转换为 [`:key const] [`char*] 的类型。
[end:example]

[begin:note]
[:en]
The standard header [?libheader@ref cstdarg] contains a mechanism for accessing
arguments passed using the ellipsis (see [#expr.call] and [#support.runtime]).
[:zh_CN]
标准头文件 [?libheader@ref cstdarg] 包含了对通过省略号传递的实参进行访问的机制
（参见 [#expr.call] 和 [#support.runtime]）。
[end:note]

[para]
[:en]
[%type[!function]]
The type of a function is determined using the following rules.
[:zh_CN]
[%类型[!函数～]]
函数的类型用下列规则确定。

[:en]
The type of each parameter (including function parameter packs) is determined
from its own [~parameter-declaration].
[:zh_CN]
每个形参（包括函数形参包组）的类型由各自的[~形参声明式]确定。

[:en]
After determining the type of each parameter, any parameter
[%array [!parameter of type]] of type [=lq]array of [`T][=rq] or
[%function[!parameter of type]] of function type [`T] is adjusted to be
[=lq]pointer to [`T][=rq].
[:zh_CN]
为每个形参确定类型之后，任何 [%数组[!～类型的形参]]“[`T] 的数组”或
[%函数[!～类型的形参]]函数类型 [`T] 的形参都要调整为“[`T] 的指针”。

[:en]
After producing the list of parameter types, any top-level [~cv-qualifier]s
modifying a parameter type are deleted when forming the function type.
[:zh_CN]
产生形参类型的列表之后，在构成函数类型时任何修饰形参类型的顶层 [~cv-限定符]都被
移除。

[:en]
The resulting list of transformed parameter types and the presence or absence of
the ellipsis or a function parameter pack is the function[=']s
[+parameter-type-list].
[:zh_CN]
由此所产生的经过变换的形参类型的列表，再加上可能出现的省略号或函数形参包组，即为
该函数的[+形参类型列表]。

[begin:note]
[:en]
This transformation does not affect the types of the parameters.
[:zh_CN]
这种变换并不会影响形参的类型。

[:en]
For example, [`int(*)(const int p, decltype(p)*)] and [`int(*)(int, const int*)]
are identical types.
[:zh_CN]
例如，[`int(*)(const int p, decltype(p)*)] 和 [`int(*)(int, const int*)] 是等价
的类型。
[end:note]

[begin:example]
[codeblock]
void f(char*);                  // #1
void f(char[]) {}               // [:en] defines #1 \
                                [:zh_CN] 定义了 #1
void f(const char*) {}          // [:en] OK: another overload \
                                [:zh_CN] OK：另一个重载
void f(char *const) {}          // [:en] error: redefines #1 \
                                [:zh_CN] 错误：重复定义 #1

void g(char(*)[2]);             // #2
void g(char[3][2]) {}           // [:en] defines #2 \
                                [:zh_CN] 定义了 #2
void g(char[3][3]) {}           // [:en] OK: another overload \
                                [:zh_CN] OK：另一个重载

void h(int x(const int));       // #3
void h(int (*)(int)) {}         // [:en] defines #3 \
                                [:zh_CN] 定义了 #3
[codeblock:end]
[end:example]

[para]
[:en]
A function type with a [~cv-qualifier-seq] or a [~ref-qualifier] (including a
type named by [~typedef-name] ([#dcl.typedef], [#temp.param])) shall appear only
as:
[:zh_CN]
包含[~cv-限定符序列]或[~引用限定符]的函数类型（包括由 [~typedef-名]
（[#dcl.typedef]，[#temp.param]）所指名的类型），只能被用作：

[list]
[item]
[:en] the function type for a non-static member function,
[:zh_CN] 非静态成员函数的函数类型，

[item]
[:en] the function type to which a pointer to member refers,
[:zh_CN] 成员指针所涉及的函数类型，

[item]
[:en] the top-level function type of a function typedef declaration or
[~alias-declaration],
[:zh_CN] 函数的 typedef 声明式或[~别名声明式]的顶层函数类型，

[item]
[:en] the [~type-id] in the default argument of a [~type-parameter]
([#temp.param]), or
[:zh_CN] [~类型形参]的默认实参中的[~类型标识]（[#temp.param]），或者

[item]
[:en] the [~type-id] of a [~template-argument] for a [~type-parameter]
([#temp.arg.type]).
[:zh_CN] [~类型形参]的某个[~模板实参]的[~类型标识]（[#temp.names]）。
[list:end]

[begin:example]
[codeblock]
typedef int FIC(int) const;
FIC f;              // [:en] error: does not declare a member function \
                       [:zh_CN] 错误：并未声明成员函数
struct S {
  FIC f;            // OK
};
FIC S::*pm = &S::f; // OK
[codeblock:end]
[end:example]

[para]
[:en]
The effect of a [~cv-qualifier-seq] in a function declarator is not the same as
adding cv-qualification on top of the function type.
[:zh_CN]
函数声明符中的 [~cv-限定符序列]的效果与在函数类型之上添加 cv 限定符不同。

[:en]
In the latter case, the cv-qualifiers are ignored.
[:zh_CN]
在后一种情况下，cv 限定符被忽略掉。

[begin:note]
[:en]
A function type that has a [~cv-qualifier-seq] is not a cv-qualified type; there
are no cv-qualified function types.
[:zh_CN]
带有 [~cv-限定符序列]的函数类型并不是被 cv 限定的类型；不存在 cv 限定的函数类型。
[end:note]

[begin:example]
[codeblock]
typedef void F();
struct S {
  const F f;        // [:en] OK: equivalent to: [`void f();] \
                       [:zh_CN] OK：等价于：[`void f();]
};
[codeblock:end]
[end:example]

[para]
[:en]
The return type, the parameter-type-list, the [~ref-qualifier], the
[~cv-qualifier-seq], and the exception specification, but not the default
arguments ([#dcl.fct.default]) or the trailing [~requires-clause]s ([#dcl.decl]),
are part of the function type.
[:zh_CN]
返回类型，形参类型列表，[~引用限定符]，异常说明，以及 [~cv-限定符序列]，但不包括
默认实参（[#dcl.fct.default]）或其尾部 [~requires-子句]（[#dcl.decl]），是函数
类型的组成部分。

[begin:note]
[:en]
Function types are checked during the assignments and initializations of
pointers to functions, references to functions, and pointers to member functions.
[:zh_CN]
在进行函数指针、函数引用以及成员函数指针的赋值和初始化时，要对函数类型进行检查。
[end:note]

[para]
[begin:example]
[:en]
The declaration
[:zh_CN]
声明式

[codeblock]
int fseek(FILE*, long, int);
[codeblock:end]

[:en@~]
declares a function taking three arguments of the specified types, and returning
[`int] ([#dcl.type]).
[:zh_CN@~]
声明了带有三个指定类型的实参的函数，并返回 [`int]（[#dcl.type]）。
[end:example]

[para]
[:en]
[begin:note]
[%overloading]
A single name can be used for several different functions in a single scope;
this is function overloading ([#over]).
[:zh_CN]
[%重载]
在一个作用域中可以为几个不同函数使用相同的名字；这就是函数重载（[#over]）。
[end:note]

[para]
[:en]
[%function return type[%return type]]
[%return type]
The return type shall be a non-array object type, a reference type, or
[=cv] [`:key void].
[:zh_CN]
[%函数返回类型[%返回类型]]
[%返回类型]
返回类型应当为非数组对象类型，引用类型，或 [=cv] [`:key void]。

[begin:note]
[:en]
An array of placeholder type is considered an array type.
[:zh_CN]
占位符类型的数组被当做数组类型。
[end:note]

[para]
[:en]
A volatile-qualified return type is deprecated; see [#depr.volatile.type].
[:zh_CN]
[`volatile] 限定的返回类型是被摒弃的；参见 [#depr.volatile.type]。

[para]
[:en]
Types shall not be defined in return or parameter types.
[:zh_CN]
不能在返回或形参类型中定义类型。

[para]
[:en]
[%typedef[!function]]
A typedef of function type may be used to declare a function but shall not be
used to define a function ([#dcl.fct.def]).
[:zh_CN]
[%typedef[!函数]]
函数类型的 typedef 可用于声明函数，但不能用于定义函数（[#dcl.fct.def]）。

[begin:example]
[codeblock]
typedef void F();
F  fv;              // [:en] OK: equivalent to [`void fv();] \
                       [:zh_CN] OK：等价于 [`void fv();]
F  fv { }           // [:en] error \
                       [:zh_CN] 错误
void fv() { }       // [:en] OK: definition of [`fv] \
                       [:zh_CN] OK：[`fv] 的定义式
[codeblock:end]
[end:example]

[para]
[:en]
An identifier can optionally be provided as a parameter name; if present in a
function definition ([#dcl.fct.def]), it names a parameter.
[:zh_CN]
可以可选地提供标识符作为形参名；若它出现在函数定义式中（[#dcl.fct.def]），则它
命名了一个形参。

[begin:note]
[:en]
In particular, parameter names are also optional in function definitions and
names used for a parameter in different declarations and the definition of a
function need not be the same.
[:zh_CN]
特别是，形参名在函数定义式中也是可选的，而且函数的不同声明式和它的定义式中用作
形参的名字也不必相同。
[end:note]

[para]
[begin:example]
[:en]
The declaration
[:zh_CN]
声明式

[codeblock]
int i,
    *pi,
    f(),
    *fpi(int),
    (*pif)(const char*, const char*),
    (*fpif(int))(int);
[codeblock:end]

[:en@~]
declares an integer [`i], a pointer [`pi] to an integer, a function [`f] taking
no arguments and returning an integer, a function [`fpi] taking an integer
argument and returning a pointer to an integer, a pointer [`pif] to a function
which takes two pointers to constant characters and returns an integer, a
function [`fpif] taking an integer argument and returning a pointer to a
function that takes an integer argument and returns an integer.
[:zh_CN@~]
声明了整数 [`i]，整数的指针 [`pi]，不获取实参而返回整数的函数 [`f]，获取一个整数
实参而返回整数指针的函数 [`fpi]，指向获取两个指向常量字符的指针而返回整数的函数
的指针 [`pif]，获取一个整数实参而返回指向获取一个整数实参而返回整数的函数的指针
的函数 [`fpif]。

[:en]
It is especially useful to compare [`fpi] and [`pif].
[:zh_CN]
对 [`fpi] 和 [`pif] 进行比较尤其有意义。

[:en]
The binding of [`*fpi(int)] is [`*(fpi(int))], so the declaration suggests, and
the same construction in an expression requires, the calling of a function
[`fpi], and then using indirection through the (pointer) result to yield an
integer.
[:zh_CN]
[`*fpi(int)] 的绑定是 [`*(fpi(int))]，因此这个声明式意味着，而且在表达式中的相同
构造也要求了，调用函数 [`fpi]，并随即对其（指针）结果进行间接来产生一个整数。

[:en]
In the declarator [`(*pif)(const char*, const char*)], the extra parentheses are
necessary to indicate that indirection through a pointer to a function yields a
function, which is then called.
[:zh_CN]
在声明符 [`(*pif)(const char*, const char*)] 中，必须用额外的括号来表明，通过对
指向函数的指针进行间接来产生一个函数，然后再调用它。
[end:example]

[begin:note]
[:en]
Typedefs and [~trailing-return-type]s are sometimes convenient when the return
type of a function is complex.
[:zh_CN]
当函数的返回类型比较复杂时，使用 typedef 和[~尾部返回类型]有时就很方便。

[:en]
For example, the function [`fpif] above can be declared
[:zh_CN]
例如，上面的函数 [`fpif] 可被声明为

[codeblock]
typedef int  IFUNC(int);
IFUNC*  fpif(int);
[codeblock:end]

[:en@~]
or
[:zh_CN@~]
或者

[codeblock]
auto fpif(int)->int(*)(int);
[codeblock:end]

[:en]
A [~trailing-return-type] is most useful for a type that would be more
complicated to specify before the [~declarator-id]:
[:zh_CN]
[~尾部返回类型]对于那些如果在[~声明符标识]之前指定就要复杂得多的类型最有用处：

[codeblock]
template <class T, class U> auto add(T t, U u) -> decltype(t + u);
[codeblock:end]

[:en@~]
rather than
[:zh_CN@~]
要好于

[codeblock]
template <class T, class U> decltype((*(T*)0) + (*(U*)0)) add(T t, U u);
[codeblock:end]
[end:note]

[para]
[:en]
A [+:adj non-template[!function]] is a function that is not a function template
specialization.
[:zh_CN]
[+:adj 非模板[!函数]]是并非函数模板特例的函数。

[begin:note]
[:en]
A function template is not a function.
[:zh_CN]
函数模板不是函数。
[end:note]

[para]
[:en]
[%abbreviated[!template function][%template[!function[!abbreviated]]]]
An [+abbreviated function template[%template[!function[!abbreviated]]]] is a
function declaration that has one or more generic parameter type placeholders
([#dcl.spec.auto]).
[:zh_CN]
[%简写[!函数模板～][%模板[!函数～[!简写～]]]]
[+简写函数模板[%模板[!函数～[!简写～]]]]是带有一个或多个泛型形参类型占位符
（[#dcl.spec.auto]）的函数声明式。

[:en]
An abbreviated function template is equivalent to a function template
([#temp.fct]) whose [~template-parameter-list] includes one invented type
[~template-parameter] for each generic parameter type placeholder of the
function declaration, in order of appearance.
[:zh_CN]
简写函数模板等价于一个函数模板（[#temp.fct]），对于函数定义式的每个泛型形参类型
占位符，以其出现的顺序，在其[~模板形参列表]中都包含一个虚构的类型[~模板形参]。

[:en]
For a [~placeholder-type-specifier] of the form [`:key auto], the invented
parameter is an unconstrained [~type-parameter].
[:zh_CN]
对于形式为 [`:key auto] 的[~占位符类型说明符]，虚构的形参是一个无约束[~类型形参]。

[:en]
For a [~placeholder-type-specifier] of the form [~type-constraint] [`:key auto],
the invented parameter is a [~type-parameter] with that [~type-constraint].
[:zh_CN]
对于形式为“[~类型约束] [`:key auto]”的[~占位符类型说明符]，虚构的形参是一个带有
该[~类型约束]的[~类型形参]。

[:en]
The invented type [~template-parameter] is a template parameter pack if the
corresponding [~parameter-declaration] declares a function parameter pack.
[:zh_CN]
当对应的[~形参声明式]所声明的是函数形参包组时，虚构的类型[~模板形参]是一个模板
形参包组。

[:en]
If the placeholder contains [`decltype(auto)], the program is ill-formed.
[:zh_CN]
如果占位符包含了 [`decltype(auto)]，则程序非良构。

[:en]
The adjusted function parameters of an abbreviated function template are derived
from the [~parameter-declaration-clause] by replacing each occurrence of a
placeholder with the name of the corresponding invented [~template-parameter].
[:zh_CN]
简写函数模板的调整后的各函数形参，是从其[~形参声明子句]中通过将各个占位符替换为
其对应的虚构[~模板形参]的名字而得出的。

[begin:example]
[codeblock]
template<typename T>     concept C1 = /* ... */;
template<typename T>     concept C2 = /* ... */;
template<typename... Ts> concept C3 = /* ... */;

void g1(const C1 auto*, C2 auto&);
void g2(C1 auto&...);
void g3(C3 auto...);
void g4(C3 auto);
[codeblock:end]

[:en]
These declarations are functionally equivalent (but not equivalent) to the
following declarations.
[:zh_CN]
这些声明式在功能上等价于（但并不等价于）以下声明式。

[codeblock]
template<C1 T, C2 U> void g1(const T*, U&);
template<C1... Ts>   void g2(Ts&...);
template<C3... Ts>   void g3(Ts...);
template<C3 T>       void g4(T);
[codeblock:end]

[:en]
Abbreviated function templates can be specialized like all function templates.
[:zh_CN]
简写函数模板可以和所有函数模板一样被特化。

[codeblock]
template<> void g1<int>(const int*, const double&); // [:en] OK, specialization of [`g1<int, const double>] \
                                                       [:zh_CN] OK，[`g1<int, const double>] 的特化式
[codeblock:end]
[end:example]

[para]
[:en]
An abbreviated function template can have a [~template-head].
[:zh_CN]
简写函数模板可以带有[~模板头]。

[:en]
The invented [~template-parameter]s are appended to the
[~template-parameter-list] after the explicitly declared [~template-parameter]s.
[:zh_CN]
各个虚构的[~模板形参]被追加到其[~模板形参列表]中明确声明的[~模板形参]的后面。

[begin:example]
[codeblock]
template<typename> concept C = /* ... */;

template <typename T, C U>
  void g(T x, U y, C auto z);
[codeblock:end]

[:en]
This is functionally equivalent to each of the following two declarations.
[:zh_CN]
这在功能上等价于以下两个声明式。

[codeblock]
template<typename T, C U, C W>
  void g(T x, U y, W z);

template<typename T, typename U, typename W>
  requires C<U> && C<W>
  void g(T x, U y, W z);
[codeblock:end]
[end:example]

[para]
[:en]
A function declaration at block scope shall not declare an abbreviated function
template.
[:zh_CN]
块作用域的函数声明式不能声明简写函数模板。

[para]
[:en]
A [~declarator-id] or [~abstract-declarator] containing an ellipsis shall only
be used in a [~parameter-declaration].
[:zh_CN]
包含省略号的[+声明符标识]或[~抽象声明符]只能在[~形参声明式]中使用。

[:en]
When it is part of a [~parameter-declaration-clause], the
[~parameter-declaration] declares a function parameter pack ([#temp.variadic]).
[:zh_CN]
当它是[~形参声明子句]的一部分时，该[~形参声明式]所声明的是函数形参包组
（[#temp.variadic]）。

[:en]
Otherwise, the [~parameter-declaration] is part of a [~template-parameter-list]
and declares a template parameter pack; see [#temp.param].
[:zh_CN]
否则，该[~形参声明式]就是[~模板形参列表]的一部分，且所声明的为模板形参包组；参见
[#temp.param]。

[:en]
A function parameter pack is a pack expansion ([#temp.variadic]).
[:zh_CN]
函数形参包组是包组展开式（[#temp.variadic]）。

[begin:example]
[codeblock]
template<typename... T> void f(T (* ...t)(int, int));

int add(int, int);
float subtract(int, int);

void g() {
  f(add, subtract);
}
[codeblock:end]
[end:example]

[para]
[:en]
There is a syntactic ambiguity when an ellipsis occurs at the end of a
[~parameter-declaration-clause] without a preceding comma.
[:zh_CN]
当在[~形参声明子句]的末尾出现省略号但前面没有逗号时会出现语法歧义。

[:en]
In this case, the ellipsis is parsed as part of the [~abstract-declarator] if
the type of the parameter either names a template parameter pack that has not
been expanded or contains [`:key auto]; otherwise, it is parsed as part of the
[~parameter-declaration-clause].[#:fn]
[:zh_CN]
这种情况下，若该形参的类型指名了还未展开的模板形参包组，或者包含了 [`:key auto]，
则这个省略号被解析为[~抽象声明符]的一部分；否则它被解析为[~形参声明子句]的一部分[#:fn]。

[note:foot]
[:en]
One can explicitly disambiguate the parse either by introducing a comma (so the
ellipsis will be parsed as part of the [~parameter-declaration-clause]) or by
introducing a name for the parameter (so the ellipsis will be parsed as part of
the [~declarator-id]).
[:zh_CN]
可以通过引入逗号（由此使得省略号被解析为[~形参声明子句]的一部分），或为形参引入
名字（由此使得省略号被解析为[~声明符标识]的一部分）明确地进行解析的歧义消解。
[note:end]

[%:end#declarator.function]
