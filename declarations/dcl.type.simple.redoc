[section#dcl.type.simple
    [:en] Simple type specifiers
    [:zh_CN] 简单类型说明符
[%  [:en] type specifier[!simple]
    [:zh_CN] 类型说明符[!简单～] ]
]

[para]
[:en]
The simple type specifiers are
[:zh_CN]
简单类型说明符有

[syntax]
[rule simple-type-specifier [:zh_CN] 简单类型说明符 ]
    [| [~:opt nested-name-specifier] type-name ]
    [| nested-name-specifier [`template] simple-template-id ]
    [| decltype-specifier ]
    [| placeholder-type-specifier ]
    [| [~:opt nested-name-specifier] template-name ]
    [| [`char] ]
    [| [`char8_t] ]
    [| [`char16_t] ]
    [| [`char32_t] ]
    [| [`wchar_t] ]
    [| [`bool] ]
    [| [`short] ]
    [| [`int] ]
    [| [`long] ]
    [| [`signed] ]
    [| [`unsigned] ]
    [| [`float] ]
    [| [`double] ]
    [| [`void] ]
[rule:end]

[rule type-name [:zh_CN] 类型名 ]
    [| class-name ]
    [| enum-name ]
    [| typedef-name ]
[rule:end]
[syntax:end]

[para]
[:en]
[%type specifier[![`char]]]
[%type specifier[![`char8_t]]]
[%type specifier[![`char16_t]]]
[%type specifier[![`char32_t]]]
[%type specifier[![`wchar_t]]]
[%type specifier[![`bool]]]
[%type specifier[![`short]]]
[%type specifier[![`int]]]
[%type specifier[![`long]]]
[%type specifier[![`signed]]]
[%type specifier[![`unsigned]]]
[%type specifier[![`float]]]
[%type specifier[![`double]]]
[%type specifier[![`void]]]
[%[~type-name]]
[%[~lambda-introducer]]
A [~placeholder-type-specifier] is a placeholder for a type to be deduced
([#dcl.spec.auto]).
[:zh_CN]
[%类型说明符[![`char]]]
[%类型说明符[![`char8_t]]]
[%类型说明符[![`char16_t]]]
[%类型说明符[![`char32_t]]]
[%类型说明符[![`wchar_t]]]
[%类型说明符[![`bool]]]
[%类型说明符[![`short]]]
[%类型说明符[![`int]]]
[%类型说明符[![`long]]]
[%类型说明符[![`signed]]]
[%类型说明符[![`unsigned]]]
[%类型说明符[![`float]]]
[%类型说明符[![`double]]]
[%类型说明符[![`void]]]
[%[~类型名]]
[%[~lambda-引导符]]
[~占位符类型说明符] 是将要被推断的类型的占位符（[#dcl.spec.auto]）。

[:en]
[%deduction[!class template arguments]]
A [~type-specifier] of the form [`:opt typename] [~:opt nested-name-specifier]
[~template-name] is a placeholder for a deduced class type
([#dcl.type.class.deduct]).
[:zh_CN]
[%推断[!类模板实参～]]
形式为“[`:opt typename] [~:opt 嵌套名说明符] [~模板名]”的[~类型说明符]，是对需要
推断的类类型的占位符（[#dcl.type.class.deduct]）。

[:en]
The [~nested-name-specifier], if any, shall be non-dependent and the
[~template-name] shall name a class template or is an alias template whose
[~defining-type-id] is of the form
[:zh_CN]
其[~嵌套名说明符]（如果有）应当非待决，且其[~模板名]应当指名某个类模板或某个具有
如下形式

[syntax:explanation]
[`:opt typename] [~:opt nested-name-specifier] [`:opt template] [~simple-template-id]
[syntax:end]

[:en@~]
where the [~nested-name-specifier] (if any) is non-dependent and the
[~template-name] of the [~simple-template-id] names a deducible template.
[:zh_CN@~]
的[~定义类型标识]的别名模板，其中的[~嵌套名说明符]（如果有）非待决，且其
[~简单模板标识]中的[~模板名]指名某个可推断的模板。

[enter:note]
[:en]
An injected-class-name is never interpreted as a [~template-name] in contexts
where class template argument deduction would be performed ([#temp.local]).
[:zh_CN]
在可以进行类模板实参推断（[#temp.local]）的语境中，注入类名不会被解释成[~模板名]。
[exit:note]

[:en]
The other [~simple-type-specifier]s specify either a previously-declared type, a
type determined from an expression, or one of the fundamental types
([#basic.fundamental]).
[:zh_CN]
其他[~简单类型说明符]指定之前已经声明过类型，根据某个表达式确定的类型，或者基础
类型之一（[#basic.fundamental]）。

[:en]
[#:tab dcl.type.simple] summarizes the valid combinations of
[~simple-type-specifier]s and the types they specify.
[:zh_CN]
[#:tab dcl.type.simple] 总结了[~简单类型说明符]的合法组合以及它们所指定的类型。

[table:listing@shape=?x1@fill=column#dcl.type.simple
    [:en] [~simple-type-specifier]s and the types they specify
    [:zh_CN] [~简单类型说明符]及其所指定的类型
    
    [|  [:en] Specifier(s)
        [:zh_CN] 说明符 ]
    [|  [:en] Type
        [:zh_CN] 类型 ]
]
[|] [~type-name]            [|] [:en] the type named
                                [:zh_CN] 被指名的类型
[|] [~simple-template-id]   [|] [:en] the type as defined in [#temp.names]
                                [:zh_CN] 根据 [#temp.names] 中定义的类型
[|] [~decltype-specifier]   [|] [:en] the type as defined in [#dcl.type.decltype]
                                [:zh_CN] 根据 [#dcl.type.decltype] 中定义的类型
[|] [~placeholder-type-specifier]   [|] [:en] the type as defined in [#dcl.spec.auto]
                                [:zh_CN] 根据 [#dcl.spec.auto] 中定义的类型
[|] [~template-name]        [|] [:en] the type as defined in [#dcl.type.class.deduct]
                                [:zh_CN] 根据 [#dcl.type.class.deduct] 中定义的类型

[|] [`char]                     [|] ["char]
[|] [`unsigned char]            [|] ["unsigned char]
[|] [`signed char]              [|] ["signed char]
[|] [`char8_t]                  [|] ["char8_t]
[|] [`char16_t]                 [|] ["char16_t]
[|] [`char32_t]                 [|] ["char32_t]
[|] [`bool]                     [|] ["bool]
[|] [`unsigned]                 [|] ["unsigned int]
[|] [`unsigned int]             [|] ["unsigned int]
[|] [`signed]                   [|] ["int]
[|] [`signed int]               [|] ["int]
[|] [`int]                      [|] ["int]
[|] [`unsigned short int]       [|] ["unsigned short int]
[|] [`unsigned short]           [|] ["unsigned short int]
[|] [`unsigned long int]        [|] ["unsigned long int]
[|] [`unsigned long]            [|] ["unsigned long int]
[|] [`unsigned long long int]   [|] ["unsigned long long int]
[|] [`unsigned long long]       [|] ["unsigned long long int]
[|] [`signed long int]          [|] ["long int]
[|] [`signed long]              [|] ["long int]
[|] [`signed long long int]     [|] ["long long int]
[|] [`signed long long]         [|] ["long long int]
[|] [`long long int]            [|] ["long long int]
[|] [`long long]                [|] ["long long int]
[|] [`long int]                 [|] ["long int]
[|] [`long]                     [|] ["long int]
[|] [`signed short int]         [|] ["short int]
[|] [`signed short]             [|] ["short int]
[|] [`short int]                [|] ["short int]
[|] [`short]                    [|] ["short int]
[|] [`wchar_t]                  [|] ["wchar_t]
[|] [`float]                    [|] ["float]
[|] [`double]                   [|] ["double]
[|] [`long double]              [|] ["long double]
[|] [`void]                     [|] ["void]
[table:end]

[para]
[:en]
When multiple [~simple-type-specifier]s are allowed, they can be freely
intermixed with other [~decl-specifier]s in any order.
[:zh_CN]
当允许多个[~简单类型说明符]时，它们可以以任意顺序与其他[~声明说明符]相混杂。

[enter:note]
[:en]
It is [%@impldef signedness of [`char]] implementation-defined whether objects
of [`char] type are represented as signed or unsigned quantities.
[:zh_CN]
[`char] 类型的对象被表示为有符号量还是无符号量是 [%@impldef [`char] 的符号性]
由实现定义的。

[:en]
The [`signed] specifier forces [`char] objects to be signed; it is redundant in
other contexts.
[:zh_CN]
[`signed] 说明符强迫 [`char] 对象为有符号的；它在其他语境中是多余的。
[exit:note]
