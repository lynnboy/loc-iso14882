[section#dcl.type.cv
    [:en] The [~cv-qualifier]s
    [:zh_CN] [~cv-限定符]

[:en]
[%specifier[!cv-qualifier]]
[%initialization[![`const]]]
[%type specifier[![`const]]]
[%type specifier[![`volatile]]]
[:zh_CN]
[%说明符[!cv-限定符]]
[%初始化[![`const]]]
[%类型说明符[![`const]]]
[%类型说明符[![`volatile]]]
]

[para]
[:en]
There are two [~cv-qualifier]s, [`:key const] and [`volatile].
[:zh_CN]
有两个 [~cv-限定符]，[`:key const] 和 [`volatile]。

[:en]
Each [~cv-qualifier] shall appear at most once in a [~cv-qualifier-seq].
[:zh_CN]
每个 [~cv-限定符]在 [~cv-限定符序列]中最多出现一次。

[:en]
If a [~cv-qualifier] appears in a [~decl-specifier-seq], the
[~init-declarator-list] or [~member-declarator-list] of the declaration shall
not be empty.
[:zh_CN]
若在[~声明说明符序列]中出现了 [~cv-限定符]，则该声明式的[~带初始化声明符列表]或
[~成员声明符列表]不应为空。

[begin:note]
[:en]
[#basic.type.qualifier] and [#dcl.fct] describe how cv-qualifiers affect object
and function types.
[:zh_CN]
[#basic.type.qualifier] 和 [#dcl.fct] 说明 cv 限定符如何影响对象和函数类型。
[end:note]

[:en]
Redundant cv-qualifications are ignored.
[:zh_CN]
多余的 cv 限定被忽略。

[begin:note]
[:en]
For example, these could be introduced by typedefs.
[:zh_CN]
例如，它们可能由 typedef 所引入。
[end:note]

[para]
[begin:note]
[:en]
Declaring a variable [`:key const] can affect its linkage ([#dcl.stc]) and its
usability in constant expressions ([#expr.const]).
[:zh_CN]
将一个变量声明为 [`:key const] 将会影响它的连接性（[#dcl.stc]）以及它是否可被
用在常量表达式中（[#expr.const]）。

[:en]
As described in [#dcl.init], the definition of an object or subobject of
const-qualified type must specify an initializer or be subject to
default-initialization.
[:zh_CN]
如在 [#dcl.init] 中所述，const 限定的类型的对象或子对象的定义式必须指定初始化式，
或允许进行默认初始化。
[end:note]

[para]
[:en]
A pointer or reference to a cv-qualified type need not actually point or refer
to a cv-qualified object, but it is treated as if it does; a const-qualified
access path cannot be used to modify an object even if the object referenced is
a non-const object and can be modified through some other access path.
[:zh_CN]
指向 cv 限定的类型的指针或引用不必真的指向或指代 cv 限定的对象，但它被认为是
这样；即使所指代的对象是非 const 对象且可以通过某些其他访问路径进行改动，也不能
使用 const 限定的访问路径来改动该对象。

[begin:note]
[:en]
Cv-qualifiers are supported by the type system so that they cannot be subverted
without casting ([#expr.const.cast]).
[:zh_CN]
cv 限定符是由类型系统所支持的，且不使用转型（[#expr.const.cast]）就不能推翻它们。
[end:note]

[para]
[:en]
[%const object[!undefined change to]]
Any attempt to modify ([#expr.ass], [#expr.post.incr], [#expr.pre.incr]) a const
object ([#basic.type.qualifier]) during its lifetime ([#basic.life]) results in
undefined behavior.
[:zh_CN]
[%const 对象[!未定义的改动～]]
在 const 对象（[#basic.type.qualifier]）的生存期（[#basic.life]）中对其进行改动
（[#expr.ass]，[#expr.post.incr]，[#expr.pre.incr]）的任何尝试都导致未定义的行为。

[begin:example]
[codeblock]
const int ci = 3;                       // [:en] cv-qualified (initialized as required) \
                                        [:zh_CN] cv 限定的（按要求进行了初始化）
ci = 4;                                 // [:en] error: attempt to modify [`:key const] \
                                        [:zh_CN] 错误：试图改动 [`:key const]

int i = 2;                              // [:en] not cv-qualified \
                                        [:zh_CN] 未被 cv 限定的
const int* cip;                         // [:en] pointer to [`const int] \
                                        [:zh_CN] [`const int] 的指针
cip = &i;                               // [:en] OK, cv-qualified access path to unqualified \
                                        [:zh_CN] OK，到无限定对象的 cv 限定的访问路径
*cip = 4;                               // [:en] error: attempt to modify through ptr to [`:key const] \
                                        [:zh_CN] 错误：试图通过 [`:key const] 指针进行改动

int* ip;
ip = const_cast<int*>(cip);             // [:en] cast needed to convert [`const int*] to [`int*] \
                                        [:zh_CN] 需要从 [`const int*] 到 [`int*] 的转型
*ip = 4;                                // [:en] defined: [`*ip] points to [`i], a non-const object \
                                        [:zh_CN] 有定义的：[`*ip] 指向了 [`i]，一个非 const 对象

const int* ciq = new const int (3);     // [:en] initialized as required \
                                        [:zh_CN] 按要求进行了初始化
int* iq = const_cast<int*>(ciq);        // [:en] cast required \
                                        [:zh_CN] 需要进行转型
*iq = 4;                                // [:en] undefined behavior: modifies a const object \
                                        [:zh_CN] 未定义行为：改动 const 对象
[codeblock:end]

[para]
[:en]
For another example
[:zh_CN]
又例如

[codeblock]
struct X {
  mutable int i;
  int j;
};
struct Y {
  X x;
  Y();
};

const Y y;
y.x.i++;                                // [:en] well-formed: [`:key mutable] member can be modified \
                                        [:zh_CN] 良构：可以改动 [`:key mutable] 成员
y.x.j++;                                // [:en] error: const-qualified member modified \
                                        [:zh_CN] 错误：改动了 const 限定的成员
Y* p = const_cast<Y*>(&y);              // [:en] cast away const-ness of [`y] \
                                        [:zh_CN] 强制移除 [`y] 的常量性
p->x.i = 99;                            // [:en] well-formed: [`:key mutable] member can be modified \
                                        [:zh_CN] 良构：可以改动 [`:key mutable] 成员
p->x.j = 99;                            // [:en] undefined behavior: modifies a const subobject \
                                        [:zh_CN] 未定义行为：改动了 const 子对象
[codeblock:end]
[end:example]

[para]
[:en]
The semantics of an access through a volatile glvalue are [?impldef semantics
of an access through a volatile glvalue].
[:zh_CN]
通过 volatile 泛左值进行访问的语义是[?impldef 通过 volatile 泛左值进行访问的语义]。

[:en]
If an attempt is made to access an object defined with a volatile-qualified type
through the use of a non-volatile glvalue, the behavior is undefined.
[:zh_CN]
如果试图通过使用非 volatile 泛左值来访问定义为带有 volatile 限定的类型的对象，
则其行为是未定义的。

[para]
[begin:note]
[:en]
[%type specifier[![`volatile]]]
[%[`volatile][!implementation-defined]]
[`volatile] is a hint to the implementation to avoid aggressive optimization
involving the object because the value of the object might be changed by means
undetectable by an implementation.
[:zh_CN]
[%类型说明符[![`volatile]]]
[%[`volatile][!由实现定义的]]
[`volatile] 是对实现的提示，用以避免对该对象的过度优化，因为该对象的值可能以实现
无法察觉的方式改变。

[:en]
Furthermore, for some implementations, [`volatile] might indicate that special
hardware instructions are required to access the object.
[:zh_CN]
此外，一些实现中可能用 [`volatile] 指出访问对象时需要特殊的硬件指令。

[:en]
See [#intro.execution] for detailed semantics.
[:zh_CN]
关于其语义的细节，参见 [#intro.execution]。

[:en]
In general, the semantics of [`volatile] are intended to be the same in [=Cpp]
as they are in C.
[:zh_CN]
总的来说，[`volatile] 在 [=Cpp] 中的语义特意与其在 C 中的语义保持一致。
[end:note]
