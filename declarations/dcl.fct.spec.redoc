[section#dcl.fct.spec
    [:en] Function specifiers
    [:zh_CN] 函数说明符
[%  [:en] specifier[!function]
    [:zh_CN] 说明符[!函数～] ]
[%  [:en] function [%friend function]
        [%member function]
        [%inline function]
        [%virtual function]
    [:zh_CN] 函数 [%友元函数]
        [%成员函数]
        [%内联函数]
        [%虚函数] ]
]

[para]
[:en]
A [~function-specifier] can be used only in a function declaration.
[:zh_CN]
只能在函数声明式中使用[~函数说明符]。

[syntax]
[rule function-specifier [:zh_CN] 函数说明符 ]
    [| [`:key virtual] ]
    [| explicit-specifier ]
[rule:end]

[rule explicit-specifier [:zh_CN] explicit-说明符 ]
    [| [`:key explicit] [`(] constant-expression [`)] ]
    [| [`:key explicit] ]
[rule:end]
[syntax:end]

[para]
[:en]
[%specifier[![`virtual]]]
The [`:key virtual] specifier shall be used only in the initial declaration of a
non-static member function; see [#class.virtual].
[:zh_CN]
[%说明符[![`virtual]]]
[`:key virtual] 说明符只能用在非静态成员函数的初始声明式之中；参见
[#class.virtual]。

[para]
[:en]
[%specifier[![`explicit]]]
An [~explicit-specifier] shall be used only in the declaration of a constructor
or conversion function within its class definition; see [#class.conv.ctor] and
[#class.conv.fct].
[:zh_CN]
[%说明符[![`explicit]]]
[~explicit-说明符]只能用在处于类定义式之内的构造函数或转换函数的声明式之中；参见
[#class.conv.ctor] 和 [#class.conv.fct]。

[para]
[:en]
In an [~explicit-specifier], the [~constant-expression], if supplied, shall be a
contextually converted constant expression of type [`bool] ([#expr.const]).
[:zh_CN]
在 [~explicit-说明符]中，如果提供了[~常量表达式]，它应当被按语境转换为 [`bool]
类型的常量表达式（[#expr.const]）。

[:en]
The [~explicit-specifier] [`explicit] without a [~constant-expression] is
equivalent to the [~explicit-specifier] [`explicit(true)].
[:zh_CN]
不带有[~常量表达式]的 [~explicit-说明符] [`explicit]，等价于 [~explicit-说明符]
[`explicit(true)]。

[:en]
If the constant expression evaluates to [`true], the function is explicit.
[:zh_CN]
如果该常量表达式求值为 [`true]，则函数是显式的。

[:en]
Otherwise, the function is not explicit.
[:zh_CN]
否则，函数不是显式的。

[:en]
A [`(] token that follows [`explicit] is parsed as part of the
[~explicit-specifier].
[:zh_CN]
跟在 [`explicit] 后面的 [`(] 记号被当做 [~explicit-说明符]的一部分进行解析。
