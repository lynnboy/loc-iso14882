[section#dcl.enum
    [:en] Enumeration declarations
    [:zh_CN] 枚举声明式

[:en]
[%enumeration]
[%[`{}][![`enum] declaration]]
[%[`enum][!type of]]
[:zh_CN]
[%枚举]
[%[`{}][![`enum] 声明式]]
[%[`enum][!～的类型]]
]

[para]
[:en]
An enumeration is a distinct type ([#basic.compound]) with named constants.
[:zh_CN]
枚举是带有具名常量的独立类型（[#basic.fundamental]）。

[:en]
Its name becomes an [~enum-name], within its scope.
[:zh_CN]其名字成为其作用域中的[~枚举名]。

[syntax]
[rule enum-name [:zh_CN] 枚举名 ]
    [| identifier ]
[rule:end]

[rule enum-specifier [:zh_CN] 枚举说明符 ]
    [| enum-head [`{] [~:opt enumerator-list] [`}] ]
    [| enum-head [`{] enumerator-list [`,] [`}] ]
[rule:end]

[rule enum-head [:zh_CN] 枚举头 ]
    [| enum-key [~:opt attribute-specifier-seq] [~:opt enum-head-name]
        [~:opt enum-base] ]
[rule:end]

[rule enum-head-name [:zh_CN] 枚举头名 ]
    [| [~:opt nested-name-specifier] identifier ]
[rule:end]

[rule opaque-enum-declaration [:zh_CN] 笼统枚举声明式 ]
    [| enum-key [~:opt attribute-specifier-seq] enum-head-name [~:opt enum-base] [`;] ]
[rule:end]

[rule enum-key [:zh_CN] 枚举关键字 ]
    [| [`:key enum] ]
    [| [`:key enum] [`:key class] ]
    [| [`:key enum] [`:key struct] ]
[rule:end]

[rule enum-base [:zh_CN] 枚举基 ]
    [| [`:] type-specifier-seq ]
[rule:end]

[rule enumerator-list [:zh_CN] 枚举符列表 ]
    [| enumerator-definition ]
    [| enumerator-list [`,] enumerator-definition ]
[rule:end]

[rule enumerator-definition [:zh_CN] 枚举符定义式 ]
    [| enumerator ]
    [| enumerator [`=] constant-expression ]
[rule:end]

[rule enumerator [:zh_CN] 枚举符 ]
    [| identifier [~:opt attribute-specifier-seq] ]
[rule:end]
[syntax:end]

[:en]
The optional [~attribute-specifier-seq] in the [~enum-head] and the
[~opaque-enum-declaration] appertains to the enumeration; the attributes in that
[~attribute-specifier-seq] are thereafter considered attributes of the
enumeration whenever it is named.
[:zh_CN]
[~枚举头]和[~笼统枚举声明式]中的可选的[~特性说明符序列]属于枚举；随即每当指名
这个枚举时，就认为该[~特性说明符序列]中的特性标注是这个枚举的特性标注。

[:en]
A [`:] following [=lq][`enum] [~:opt nested-name-specifier] [~identifier][=rq]
is parsed as part of an [~enum-base].
[:zh_CN]
跟在“[`enum] [~:opt 嵌套名说明符] [~标识符]”之后的 [`:] 被解析为[~枚举基]的
一部分。

[begin:note]
[:en]
This resolves a potential ambiguity between the declaration of an enumeration
with an [~enum-base] and the declaration of an unnamed bit-field of enumeration
type.
[:zh_CN]
这就解决了在带有[~枚举基]的枚举的声明式和具有枚举类型的无名位字段的声明式之间的
歧义。

[begin:example]
[codeblock]
struct S {
  enum E : int {};
  enum E : int {};              // [:en] error: redeclaration of enumeration \
                                   [:zh_CN] 错误：重复声明枚举
};
[codeblock:end]

[end:example]
[end:note]

[:en]
If the [~enum-head-name] of an [~opaque-enum-declaration] contains a
[~nested-name-specifier], the declaration shall be an explicit specialization
([#temp.expl.spec]).
[:zh_CN]
若[~笼统枚举声明式]的[~枚举头名]中包含[~嵌套名说明符]，则该声明式应当是一个显式
特化式（[#temp.expl.spec]）。

[para]
[:en]
[%constant[!enumeration]]
The enumeration type declared with an [~enum-key] of only [`enum] is an
[+:adj unscoped enumeration[%enumeration[!unscoped]]], and its [~enumerator]s
are [+unscoped enumerators[%enumerator[!unscoped]]].
[:zh_CN]
[%常量[!枚举～]]
以仅有 [`enum] 的[~枚举关键字]所声明的枚举为[+:adj 无作用域枚举[%枚举
[!无作用域～]]]，而其[~枚举符]为[+无作用域枚举符[%枚举符[!无作用域～]]]。

[:en]
The [~enum-key]s [`enum class] and [`enum struct] are semantically equivalent;
an enumeration type declared with one of these is a [+:adj scoped enumeration
[%enumeration[!scoped]]], and its [~enumerator]s are [+scoped enumerators
[%enumerator[!scoped]]].
[:zh_CN]
[~枚举关键字] [`enum class] 和 [`enum struct] 在语义上是等价的；以它们之一所声明
的枚举类型为[+:adj 有作用域枚举[%枚举[!有作用域～]]]，而其[~枚举符]为
[+有作用域枚举符[%枚举符[!有作用域～]]]。

[:en]
The optional [~enum-head-name] shall not be omitted in the declaration of a
scoped enumeration.
[:zh_CN]
有作用域枚举的声明式中不能省略可选的[~枚举头名]。

[:en]
The [~type-specifier-seq] of an [~enum-base] shall name an integral type; any
cv-qualification is ignored.
[:zh_CN]
[~枚举基]的[~类型说明符序列]应当指名某个整型类型；忽略其任何 cv 限定。

[:en]
An [~opaque-enum-declaration] declaring an unscoped enumeration shall not omit
the [~enum-base].
[:zh_CN]
声明无作用域枚举的[~笼统枚举声明式]不能省略[~枚举基]。

[:en]
The identifiers in an [~enumerator-list] are declared as constants, and can
appear wherever constants are required.
[:zh_CN]
[~枚举符列表]中的标识符被声明为常量，并且可以在需要常量之处使用。

[:en]
[%enumerator[!value of]]
An [~enumerator-definition] with [`=] gives the associated [~enumerator] the
value indicated by the [~constant-expression].
[:zh_CN]
[%枚举符[!～的值]]
带有 [`=] 的[~枚举符定义式]将其关联的[~枚举符]设为其[~常量表达式]所指定的值。

[:en]
If the first [~enumerator] has no [~initializer], the value of the corresponding
constant is zero.
[:zh_CN]
若第一个[~枚举符]没有[~初始化式]，则其对应常量的值为零。

[:en]
An [~enumerator-definition] without an [~initializer] gives the [~enumerator]
the value obtained by increasing the value of the previous [~enumerator] by one.
[:zh_CN]
不带[~初始化式]的[~枚举符定义式]将其[~枚举符]设为通过对前一个[~枚举符]的值加一
所得的值。

[begin:example]
[codeblock]
enum { a, b, c=0 };
enum { d, e, f=e+2 };
[codeblock:end]

[:en]
defines [`a], [`c], and [`d] to be zero, [`b] and [`e] to be [`1], and [`f] to
be [`3].
[:zh_CN]
将 [`a]、[`c] 和 [`d] 定义为零，将 [`b] 和 [`e] 定义为 [`1]，而将 [`f] 定义为
[`3]。
[end:example]

[:en]
The optional [~attribute-specifier-seq] in an [~enumerator] appertains to that
enumerator.
[:zh_CN]
[~枚举符]中可选的[~特性说明符序列]属于该枚举符。

[para]
[:en]
An [~opaque-enum-declaration] is either a redeclaration of an enumeration in the
current scope or a declaration of a new enumeration.
[:zh_CN]
[~笼统枚举声明式]要么重复声明当前作用域中的某个枚举，要么声明一个新枚举。

[begin:note]
[:en]
An enumeration declared by an [~opaque-enum-declaration] has a fixed underlying
type and is a complete type.
[:zh_CN]
由[~笼统枚举声明式]声明的枚举具有固定的底层类型，并且是完整类型。

[:en]
The list of enumerators can be provided in a later redeclaration with an
[~enum-specifier].
[:zh_CN]
可以稍候在带有[~枚举说明符]的重复声明式中提供其枚举符的列表。
[end:note]

[:en]
A scoped enumeration shall not be later redeclared as unscoped or with a
different underlying type.
[:zh_CN]
有作用域枚举不能在其后重新声明为无作用域枚举或具有不同的底层类型。

[:en]
An unscoped enumeration shall not be later redeclared as scoped and each
redeclaration shall include an [~enum-base] specifying the same underlying type
as in the original declaration.
[:zh_CN]
无作用域枚举不能在其后重新声明为有作用域的，并且所有重复声明式都应当包含指定与
它的初始声明式相同的底层类型的[~枚举基]。

[para]
[:en]
If an [~enum-head-name] contains a [~nested-name-specifier], it shall not begin
with a [~decltype-specifier] and the enclosing [~enum-specifier] or
[~opaque-enum-declaration] shall refer to an enumeration that was previously
declared directly in the class or namespace to which the
[~nested-name-specifier] refers, or in an element of the inline namespace set
([#namespace.def]) of that namespace (i.e., neither inherited nor introduced by
a [~using-declaration]), and the [~enum-specifier] or [~opaque-enum-declaration]
shall appear in a namespace enclosing the previous declaration.
[:zh_CN]
如果[~枚举头名]中包含[~嵌套名说明符]，它不能以一个 [~decltype-说明符]开头，并且
其外围[~枚举说明符]或[~笼统枚举声明式]应当指代之前曾经在由该[~嵌套名说明符]所
涉指的类或命名空间中，或该命名空间的内联命名空间集合（[#namespace.def]）的某个
成员中直接声明过的某个枚举（就是说，既不是继承来的，也不是由 [~using-声明式]所
引入的），并且该[~枚举说明符]或[~笼统枚举声明式]应当出现于包围其前一个声明式的
命名空间之中。

[para]
[:en]
[%[`enum][!type of]]
[%[`enum][!underlying type][%type[!underlying]]]
Each enumeration defines a type that is different from all other types.
[:zh_CN]
[%[`enum][!～的类型]]
[%[`enum][!～的底层类型][%类型[!底层～]]]
每个枚举都定义了一个与其他类型都不同的类型。

[:en]
Each enumeration also has an [+underlying type [%type[!underlying[!enumeration]]
]].
[:zh_CN]
每个枚举还具有一个[+底层类型[%类型[!底层～[!枚举]]]]。

[:en]
The underlying type can be explicitly specified using an [~enum-base].
[:zh_CN]
可以使用[~枚举基]来明确指定底层类型。

[:en]
For a scoped enumeration type, the underlying type is [`int] if it is not
explicitly specified.
[:zh_CN]
若未被明确指定，则有作用域枚举类型的底层类型为 [`int]。

[:en]
In both of these cases, the underlying type is said to be
[+fixed[%type[!underlying[!fixed]]]].
[:zh_CN]
在这些情况中，称其底层类型为[+固定的[%类型[!底层～[!固定的～]]]]。

[:en]
Following the closing brace of an [~enum-specifier], each enumerator has the
type of its enumeration.
[:zh_CN]
在[~枚举说明符]的闭花括号后面，它的所有枚举符的类型都为该枚举。

[:en]
If the underlying type is fixed, the type of each enumerator prior to the
closing brace is the underlying type and the [~constant-expression] in the
[~enumerator-definition] shall be a converted constant expression of the
underlying type ([#expr.const]).
[:zh_CN]
若其底层类型是固定的，则在闭花括号之前的每个枚举符的类型均为该底层类型，且其
[~枚举符定义式]中的[~常量表达式]应当是这个底层类型的经转换的常量表达式
（[#expr.const]）。

[:en]
If the underlying type is not fixed, the type of each enumerator prior to the
closing brace is determined as follows:
[:zh_CN]
若其底层类型不是固定的，则在闭花括号之前的每个枚举符的类型确定如下：

[list]
[item]
[:en]
If an initializer is specified for an enumerator, the [~constant-expression]
shall be an integral constant expression ([#expr.const]).
[:zh_CN]
若为某个枚举符指定了初始化式，则[~常量表达式]应当是整型常量表达式
（[#expr.const]）。

[:en]
If the expression has unscoped enumeration type, the enumerator has the
underlying type of that enumeration type, otherwise it has the same type as the
expression.
[:zh_CN]
若表达式具有无作用域枚举类型，则枚举符具有该枚举类型的底层类型，否则具有该表达式
的相同类型。

[item]
[:en]
If no initializer is specified for the first enumerator, its type is an
unspecified signed integral type.
[:zh_CN]
若未对第一个枚举符指定初始化式，则其初始化的值具有某个未指明的有符号整型类型。

[item]
[:en]
Otherwise the type of the enumerator is the same as that of the preceding
enumerator unless the incremented value is not representable in that type, in
which case the type is an unspecified integral type sufficient to contain the
incremented value.
[:zh_CN]
否则，枚举符的类型与其前一个枚举符的相同，除非增量后的值不能用该类型表示，这种
情况下其类型是满足包含增量后的值的某个未指明的整型类型。

[:en]
If no such type exists, the program is ill-formed.
[:zh_CN]
如果不存在这种类型，则程序非良构。
[list:end]

[para]
[:en]
An enumeration whose underlying type is fixed is an incomplete type from its
point of declaration ([#basic.scope.pdecl]) to immediately after its
[~enum-base] (if any), at which point it becomes a complete type.
[:zh_CN]
底层类型固定的枚举，从其声明点（[#basic.scope.pdecl]）开始是不完整类型，直到紧跟
其[~枚举基]（如果有）之后，此处它成为完整类型。

[:en]
An enumeration whose underlying type is not fixed is an incomplete type from its
point of declaration to immediately after the closing [`}] of its
[~enum-specifier], at which point it becomes a complete type.
[:zh_CN]
底层类型未固定的枚举，从其声明点开始是不完整类型，直到其紧跟[~枚举说明符]的闭花
括号 [`}] 之后，此处它成为完整类型。

[para]
[:en]
For an enumeration whose underlying type is not fixed, the underlying type is an
integral type that can represent all the enumerator values defined in the
enumeration.
[:zh_CN]
对于底层类型未固定的枚举，其底层类型是可以表示该枚举中所定义的所有枚举符的值的
整型类型。

[:en]
If no integral type can represent all the enumerator values, the enumeration is
ill-formed.
[:zh_CN]
若没有可以表示所有枚举符值的整型类型，则该枚举非良构。

[:en]
It is [?impldef underlying type for enumeration] which integral type is used as
the underlying type except that the underlying type shall not be larger than
[`int] unless the value of an enumerator cannot fit in an [`int] or
[`unsigned int].
[:zh_CN]
用哪个整型类型作为其底层类型是[?impldef 枚举的底层类型]，但除非有枚举符的值不能
适合 [`int] 或 [`unsigned int]，否则底层类型就不能比 [`int] 更大。

[:en]
If the [~enumerator-list] is empty, the underlying type is as if the enumeration
had a single enumerator with value 0.
[:zh_CN]
若[~枚举符列表]为空，则底层类型是把该枚举当作具有单个值为 0 的枚举符而得的。

[para]
[:en]
[%signed integer representation[!two's compement]]
For an enumeration whose underlying type is fixed, the values of the enumeration
are the values of the underlying type.
[:zh_CN]
[%有符号整数的表示[!二的补码]]
对于底层类型固定的枚举，枚举的值是其底层类型的值。

[:en]
Otherwise, the values of the enumeration are the values representable by a
hypothetical integer type with minimal width [$M] such that all enumerators can
be represented.
[:zh_CN]
否则，枚举的值就是某个假想的整数类型所能表示的值，它具有足以使得所有枚举符都能够
被表示的最小的宽度 [$M]。

[:en]
The width of the smallest bit-field large enough to hold all the values of the
enumeration type is [$M].
[:zh_CN]
足够持有该枚举类型的所有值的最小位字段的宽度为 [$M]。

[:en]
It is possible to define an enumeration that has values not defined by any of
its enumerators.
[:zh_CN]
定义一个其值没有被任何它的枚举符所定义的枚举是可能的。

[:en]
If the [~enumerator-list] is empty, the values of the enumeration are as if the
enumeration had a single enumerator with value 0.[#:note#fn:$1]
[:zh_CN]
若[~枚举符列表]为空，则枚举的值就如同该枚举具有单个值为 0 的枚举符一样。
[#:note#fn:$1]

[note:foot#fn:$1]
[:en]
This set of values is used to define promotion and conversion semantics for the
enumeration type.
[:zh_CN]
这个值集合用于对该枚举类型的提升和转换的语义进行定义。

[:en]
It does not preclude an expression of enumeration type from having a value that
falls outside this range.
[:zh_CN]
它并不阻止一个此枚举类型的表达式具有处于这个范围之外的值。
[note:end]

[para]
[:en]
Two enumeration types are [+layout-compatible enumerations [%layout-compatible
[!enumeration]]] if they have the same underlying type.
[:zh_CN]
若两个枚举类型具有相同的底层类型，则它们为[+布局兼容的枚举[%布局兼容[!枚举]]]。

[para]
[:en]
The value of an enumerator or an object of an unscoped enumeration type is
converted to an integer by integral promotion ([#conv.prom]).
[:zh_CN]
枚举符或无作用域的枚举类型的对象的值用整型提升转换为整数（[#conv.prom]）。

[begin:example]
[codeblock]
enum color { red, yellow, green=20, blue };
color col = red;
color* cp = &col;
if (*cp == blue)                // ...
[codeblock:end]

[:en]
makes [`color] a type describing various colors, and then declares [`col] as an
object of that type, and [`cp] as a pointer to an object of that type.
[:zh_CN]
[`color] 是描述不同颜色的类型，而 [`col] 被声明为该类型的对象，且 [`cp] 被声明为
指向该类型的对象的指针。

[:en]
The possible values of an object of type [`color] are [`red], [`yellow],
[`green], [`blue]; these values can be converted to the integral values [`0],
[`1], [`20], and [`21].
[:zh_CN]
类型 [`color] 的可能值是 [`red]、[`yellow]、[`green]、[`blue]；这些值可被转换为
整型值 [`0]、[`1]、[`20] 和 [`21]。

[:en]
Since enumerations are distinct types, objects of type [`color] can be assigned
only values of type [`color].
[:zh_CN]
由于枚举是独立的类型，类型 [`color] 的对象只能被赋以类型 [`color] 的值。

[codeblock]
color c = 1;                    // [:en] error: type mismatch, no conversion from [`int] to [`color] \
                                   [:zh_CN] 错误：类型不匹配，不存在从 [`int] 到 [`color] 的转换
int i = yellow;                 // [:en] OK: [`yellow] converted to integral value [`1], integral promotion \
                                   [:zh_CN] OK：[`yellow] 被转换为整型值 [`1]，整型提升
[codeblock:end]

[:en]
Note that this implicit [`enum] to [`int] conversion is not provided for a
scoped enumeration:
[:zh_CN]
注意，有作用域的枚举并不提供这种从 [`enum] 到 [`int] 的隐式转换：

[codeblock]
enum class Col { red, yellow, green };
int x = Col::red;               // [:en] error: no [`Col] to [`int] conversion \
                                   [:zh_CN] 错误：没有从 [`Col] 到 [`int] 的转换
Col y = Col::red;
if (y) { }                      // [:en] error: no [`Col] to [`bool] conversion \
                                   [:zh_CN] 错误：没有从 [`Col] 到 [`bool] 的转换
[codeblock:end]

[end:example]

[para]
[:en]
[%class[!scope of enumerator]]
Each [~enum-name] and each unscoped [~enumerator] is declared in the scope that
immediately contains the [~enum-specifier].
[:zh_CN]
[%类[!枚举符的作用域]]
每个[~枚举名]和每个无作用域[~枚举符]都是在直接包含该[~枚举说明符]的作用域中声明
的。

[:en]
Each scoped [~enumerator] is declared in the scope of the enumeration.
[:zh_CN]
每个有作用域[~枚举符]都是在其枚举的作用域中声明的。

[:en]
These names obey the scope rules defined for all names in [#basic.scope] and
[#basic.lookup].
[:zh_CN]
这些名字遵循在 [#basic.scope] 和 [#basic.lookup] 中为所有名字所定义的作用域规则。

[begin:example]
[codeblock]
enum direction { left='l', right='r' }; 

void g()  { 
  direction d;                  // OK 
  d = left;                     // OK 
  d = direction::right;         // OK 
} 

enum class altitude { high='h', low='l' }; 

void h()  { 
  altitude a;                   // OK 
  a = high;                     // [:en] error: [`high] not in scope  \
                                   [:zh_CN] 错误：[`high] 并不在作用域中
  a = altitude::low;            // OK 
}
[codeblock:end]
[end:example]

[:en]
[%member[!enumerator]]
An enumerator declared in class scope can be referred to using the class member
access operators ([`::], [`.] (dot) and [`->] (arrow)), see [#expr.ref].
[:zh_CN]
[%成员[!枚举符]]
在类作用域中声明的枚举符可以使用类成员访问运算符（[`::]、[`.]（点）和 [`->]
（箭头））来提及，参见 [#expr.ref]。

[begin:example]
[codeblock]
struct X {
  enum direction { left='l', right='r' };
  int f(int i) { return i==left ? 0 : i==right ? 1 : 2; }
};

void g(X* p) {
  direction d;                  // [:en] error: [`direction] not in scope \
                                   [:zh_CN] 错误：[`direction] 不在作用域中
  int i;
  i = p->f(left);               // [:en] error: [`left] not in scope \
                                   [:zh_CN] 错误：[`left] 不在作用域中
  i = p->f(X::right);           // OK
  i = p->f(p->left);            // OK
  // ...
}
[codeblock:end]
[end:example]
