[section#dcl.link
    [:en] Linkage specifications
    [:zh_CN] 连接说明

[%:begin#specification.linkage
    [:en] specification [!linkage]
    [:zh_CN] 说明[!连接～]
]
]

[para]
[:en] All functions and variables whose names have external linkage and all
function types have a [+language linkage].
[:zh_CN] 名字具有外部连接的所有函数和变量，以及所有函数类型，都有[+语言连接]。

[begin:note]
[:en] Some of the properties associated with an entity with language linkage are
specific to each implementation and are not described here.
[:zh_CN] 与带有语言连接的实体所关联的一些性质是各实现所特有的，并不在此处描述。

[:en] For example, a particular language linkage might be associated with a
particular form of representing names of objects and functions with external
linkage, or with a particular calling convention, etc.
[:zh_CN] 例如，某个特定的语言连接可能与某种用于表示带有外部连接的对象和函数的名字
的特定形式相关联，或者与某种特定的调用约定相关联，等等。
[end:note]

[:en] The default language linkage of all function types, functions, and
variables is [=Cpp] language linkage.
[:zh_CN] 所有函数类型、函数和变量的缺省语言连接是 [=Cpp] 语言连接。

[:en] Two function types with different language linkages are distinct types
even if they are otherwise identical.
[:zh_CN] 两个带有不同的语言连接的函数类型，即使他们相同也是不同的类型。

[para]
[:en] Linkage ([#basic.link]) between [=Cpp] and non-[=Cpp] code fragments can
be achieved using a [~linkage-specification]:
[:zh_CN] 可以通过使用[~连接说明]达成在 [=Cpp] 和非 [=Cpp] 代码片段之间的连接（[#basic.link]）：

[:en] [%[~linkage-specification]] [%specification[!linkage[![`extern]]]]
[:zh_CN] [%[~连接说明]] [%说明[!连接～[![`extern]]]]

[syntax]
[rule linkage-specification [:zh_CN] 连接说明 ]
    [| [`:key extern] unevaluated-string [`{] [~:opt declaration-seq] [`}] ]
    [| [`:key extern] unevaluated-string name-declaration ]
[rule:end]
[syntax:end]

[:en] The [~unevaluated-string] indicates the required language linkage.
[:zh_CN] 其[~免求值字符串]指定了所需的语言连接。

[begin:note]
[:en] Escape sequences and [~universal-character-name]s have been replaced
([#lex.string.uneval]).
[:zh_CN] 转义序列和[~通用字符名]均已被替换（[#lex.string.uneval]）。
[end:note]

[:en] This document specifies the semantics for the [~unevaluated-string]s [`"C"]
and [`"C++"].
[:zh_CN] 本文档指定了[~免求值字符串] [`"C"] 和 [`"C++"] 的语义。

[:en] Use of an [~unevaluated-string] other than [`"C"] or [`"C++"] is
conditionally-supported, with [?impldef semantics of linkage specifiers] semantics.
[:zh_CN] 使用除 [`"C"] 和 [`"C++"] 之外的[~免求值字符串]是有条件支持的，其含义是
[?impldef 连接说明符的语义]。

[begin:note]
[:en] Therefore, a [~linkage-specification] with a language linkage that is
unknown to the implementation requires a diagnostic.
[:zh_CN] 因此，带有对实现来说是未知的语言连接的[~连接说明]需要进行诊断。
[end:note]

[para:recommended]
[:en] The spelling of the language linkage should be taken from the document
defining that language.
[:zh_CN] 语言连接的拼写最好采用自该语言的定义性文件。

[:en] For example, [`Ada] (not [`ADA]) and [`Fortran] or [`FORTRAN], depending
on the vintage.
[:zh_CN] 例如 [`Ada]（而不是 [`ADA]），以及 [`Fortran] 或 [`FORTRAN]，依赖于其年代。

[para]
[:en] [%specification[!linkage[!implementation-defined]]]
Every implementation shall provide for linkage to the C programming language,
[%C[!linkage to]] [`"C"], and [=Cpp], [`"C++"].
[:zh_CN] [%说明[!连接～[!由实现定义的～]]]
每个实现都应当提供对 C 程序设计语言的连接，[%C[!到～的连接]][`"C"]，
以及对 [=Cpp] 的连接，[`"C++"]。

[begin:example]
[codeblock]
complex sqrt(complex);          // [:en] [=Cpp] language linkage by default [:zh_CN] 默认为 [=Cpp] 语言连接
extern "C" {
  double sqrt(double);          // [:en] C language linkage [:zh_CN] C 语言连接
}[[redoc("!>")]];
[codeblock:end]
[end:example]

[para]
[:en] A [~module-import-declaration] appearing in a linkage specification with other
than [=Cpp] language linkage is conditionally-supported with [?impldef support
for [~module-import-declaration]s with non-[=Cpp] language linkage] semantics.
[:zh_CN] 在具有除了 [=Cpp] 语言连接之外的连接说明中出现[~模块导入声明式]是有条件支持的，
并具有[?impldef 对具有非 [=Cpp] 语言连接的[~模块导入声明式]的支持]语义。

[para]
[:en] [%specification[!linkage[!nesting]]]
Linkage specifications nest.
[:zh_CN] [%说明[!连接～[!嵌套]]]
连接说明可以嵌套。

[:en] When linkage specifications nest, the innermost one determines the
language linkage.
[:zh_CN] 当连接说明进行嵌套时，由最内层的连接说明决定其语言连接。

[begin:note]
[:en] A linkage specification does not establish a scope.
[:zh_CN] 连接说明并不设立作用域。
[end:note]

[:en] A [~linkage-specification] shall inhabit in a namespace scope.
[:zh_CN] [~连接说明]应当居于命名空间作用域。

[:en] In a [~linkage-specification], the specified language linkage applies to
the function types of all function declarators and to all functions and
variables whose names have external linkage.
[:zh_CN] 在[~连接说明]中，其所指定的语言连接施加于所有函数说明符的函数类型，
以及所有名字具有外部连接的函数和变量上。

[begin:example]
[codeblock]
extern "C"                      // [:en] [`f1] and its function type have C language linkage; \
                                [:zh_CN] [`f1] 及其函数类型具有 C 语言连接；
  void f1(void(*pf)(int));      // [:en@~] [`pf] is a pointer to a C function \
                                [:zh_CN@~] [`pf] 是指向 C 函数的指针

extern "C" typedef void FUNC();
FUNC f2;                        // [:en] [`f2] has [=Cpp] language linkage and \
                                [:zh_CN] [`f2] 具有 [=Cpp] 语言连接而
                                // [:en@~] its type has C language linkage \
                                [:zh_CN@~] 其类型具有 C 语言连接

extern "C" FUNC f3;             // [:en] [`f3] and its type have C language linkage \
                                [:zh_CN] [`f3] 及其类型具有 C 语言连接

void (*pf2)(FUNC*);             // [:en] the variable [`pf2] has [=Cpp] language linkage; its type \
                                [:zh_CN] 变量 [`pf2] 具有 [=Cpp] 语言连接；其类型
                                // [:en@~] is [=lq]pointer to [=Cpp] function that takes one parameter of type \
                                [:zh_CN@~] 为“指向 [=Cpp] 函数的指针，该函数带有一个类型为
                                // [:en@~] pointer to C function[=rq] \
                                [:zh_CN@~] 指向 C 函数的指针的形参”
extern "C" {
  static void f4();             // [:en] the name of the function [`f4] has internal linkage, \
                                [:zh_CN] 函数 [`f4] 的名字具有内部连接，
                                // [:en@~] so [`f4] has no language linkage; its type has C language linkage. \
                                [:zh_CN@~] 因而 [`f4] 没有语言连接；其类型具有 C 语言连接。
}

extern "C" void f5() {
  extern void f4();             // [:en] OK, Name linkage (internal) and function type linkage (C language linkage) \
                                [:zh_CN] OK，名字连接（内部）和函数类型连接（C 语言连接）
                                // [:en@~] obtained from previous declaration. \
                                [:zh_CN@~] 来自之前的声明式。
}

extern void f4();               // [:en] OK, Name linkage (internal) and function type linkage (C language linkage) \
                                [:zh_CN] OK，名字连接（内部）和函数类型连接（C 语言连接）
                                // [:en@~] obtained from previous declaration. \
                                [:zh_CN@~] 来自之前的声明式。

void f6() {
  extern void f4();             // [:en] OK, Name linkage (internal) and function type linkage (C language linkage) \
                                [:zh_CN] OK，名字连接（内部）和函数类型连接（C 语言连接）
                                // [:en@~] obtained from previous declaration. \
                                [:zh_CN@~] 来自之前的声明式。
}[[redoc("!>")]];
[codeblock:end]
[end:example]

[:en] [%class[!linkage specification]]
A C language linkage is ignored in determining the language linkage of class
members, friend functions with a trailing [~requires-clause], and the function
type of non-static class member functions.
[:zh_CN] [%类[!连接说明]]
当确定类成员，具有尾部 [~requires-子句]的友元函数，和类的非静态成员函数的函数
类型的语言连接时，忽略 C 语言连接。

[begin:example]
[codeblock]
extern "C" typedef void FUNC_c();
class C {
  void mf1(FUNC_c*);            // [:en] the function [`mf1] and its type have [=Cpp] language linkage; \
                                [:zh_CN] 函数 [`mf1] 及其类型具有 [=Cpp] 语言连接；
                                // [:en@~] the parameter has type [=lq]pointer to C function[=rq] \
                                [:zh_CN@~] 其形参类型为“指向 C 函数的指针”

  FUNC_c mf2;                   // [:en] the function [`mf2] and its type have [=Cpp] language linkage \
                                [:zh_CN] 函数 [`mf2] 及其类型具有 [=Cpp] 语言连接

  static FUNC_c* q;             // [:en] the data member [`q] has [=Cpp] language linkage; \
                                [:zh_CN] 数据成员 [`q] 具有 [=Cpp] 语言连接；
                                // [:en@~] its type is [=lq]pointer to C function[=rq] \
                                [:zh_CN@~] 其类型是“指向 C 函数的指针”
};

extern "C" {
  class X {
    void mf();                  // [:en] the function [`mf] and its type have [=Cpp] language linkage \
                                [:zh_CN] 函数 [`mf] 及其类型具有 [=Cpp] 语言连接
    void mf2(void(*)());        // [:en] the function [`mf2] has [=Cpp] language linkage; \
                                [:zh_CN] 函数 [`mf2] 具有 [=Cpp] 语言连接；
                                // [:en@~] the parameter has type [=lq]pointer to C function[=rq] \
                                [:zh_CN@~] 其形参类型为“指向 C 函数的指针”
  };
}[[redoc("!>")]];
[codeblock:end]
[end:example]

[para]
[:en] If two declarations of an entity give it different language linkages, the
program is ill-formed; no diagnostic is required if neither declaration is
reachable from the other.
[:zh_CN] 若某个实体的两个声明式为其给出不同的语言连接，则程序非良构；如果这些声明式
互不可达则无须进行诊断。

[:en] [%consistency[!linkage specification]]
A redeclaration of an entity without a linkage specification inherits the
language linkage of the entity and (if applicable) its type.
[:zh_CN] [%一致性[!连接说明]]
实体的不带连接说明的重复声明式，继承该实体及其类型（如果适用）的语言连接。

[para]
[:en] [%function[!linkage specification overloaded]]
Two declarations declare the same entity if they (re)introduce the same name,
one declares a function or variable with C language linkage, and the other
declares such an entity or declares a variable that belongs to the global scope.
[:zh_CN] [%函数[!重载～的连接说明]]
如果两个声明式（重复）引入相同的名字，其一声明具有 C 语言连接的函数或变量，而
另一个也声明这样的实体，或声明属于全局命名空间的变量，则它们声明相同的实体。
[[redoc("!>")]];
[begin:example]
[codeblock]
int x;
namespace A {
  extern "C" int f();
  extern "C" int g() { return 1; }[[redoc("!>")]];
  extern "C" int h();
  extern "C" int x();               // [:en] error: same name as global-space object [`x] \
                                    [:zh_CN] 错误：与全局空间的对象 [`x] 名字相同
}

namespace B {
  extern "C" int f();               // [:en] [`A::f] and [`B::f] refer to the same function \
                                    [:zh_CN] [`A::f] 和 [`B::f] 代表相同的函数
  extern "C" int g() { return 1; }[[redoc("!>")]];  // [:en] error: the function [`g] with C language linkage has two definitions \
                                    [:zh_CN] 错误：带有 C 语言连接的函数 [`g] 有两个定义式
}

int A::f() { return 98; }           // [:en] definition for the function [`f] with C language linkage \
                                    [:zh_CN] 带有 C 语言连接的函数 [`f] 的定义式
extern "C" int h() { return 97; }[[redoc("!>")]];   // [:en] definition for the function [`h] with C language linkage \
                                    [:zh_CN] 带有 C 语言连接的函数 [`h] 的定义式
                                    // [:en] [`A::h] and [`::h] refer to the same function \
                                    [:zh_CN] [`A::h] 和 [`::h] 代表同一个函数
[codeblock:end]
[end:example]

[para]
[:en] A declaration directly contained in a [~linkage-specification] is treated
as if it contains the [`:key extern] specifier ([#dcl.stc]) for the purpose of
determining the linkage of the declared name and whether it is a definition.
[:zh_CN] 在确定被声明的名字的连接和确定它是否是定义式时，直接在[~连接说明]中包含的
声明式被当作如同它包含了 [`:key extern] 说明符（[#dcl.stc]）。

[:en] Such a declaration shall not have a [~storage-class-specifier].
[:zh_CN] 此种声明式不能有[~存储类说明符]。

[begin:example]
[codeblock]
extern "C" double f();
static double f();                  // [:en] error [:zh_CN] 错误
extern "C" int i;                   // [:en] declaration [:zh_CN] 声明式
extern "C" {
  int i;                            // [:en] definition [:zh_CN] 定义式
}[[redoc("!>")]];
extern "C" static void g();         // [:en] error [:zh_CN] 错误
[codeblock:end]
[end:example]

[para]
[begin:note]
[:en] Because the language linkage is part of a function type, when indirecting
through a pointer to C function, the function to which the resulting lvalue
refers is considered a C function.
[:zh_CN] 由于语言连接是函数类型的一部分，所以当对（比如）指向 C 函数的指针进行
间接时，其所指代的函数被认为是 C 函数。
[end:note]

[para]
[:en] [%object[!linkage specification]] [%linkage[!implementation-defined object]]
Linkage from [=Cpp] to objects defined in other languages and to objects defined
in [=Cpp] from other languages is [?impldef linkage of objects between [=Cpp]
and other languages] and language-dependent.
[:zh_CN] [%对象[!连接说明]] [%连接[!由实现定义的对象～]]
从 [=Cpp] 到其他语言中所定义的对象的连接，以及从其他语言到 [=Cpp] 中定义的对象的
连接，是[?impldef 对象在 [=Cpp] 和其他语言之间的连接]和语言相关的。

[:en] Only where the object layout strategies of two language implementations
are similar enough can such linkage be achieved.
[:zh_CN] 只有当两个语言实现的对象布局策略足够相像时才能进行这种连接。

[%:end#specification.linkage]
