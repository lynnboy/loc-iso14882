[section#dcl.constexpr
    [:en] The [`constexpr] and [`consteval] specifiers
    [:zh_CN] [`constexpr] 和 [`consteval] 说明符

[%  [:en] specifier[![`constexpr]]
    [:zh_CN] 说明符[![`constexpr]] ]
[%  [:en] specifier[![`consteval]]
    [:zh_CN] 说明符[![`consteval]] ]
]

[para]
[:en]
The [`constexpr] specifier shall be applied only to the definition of a variable
or variable template or the declaration of a function or function template.
[:zh_CN]
[`constexpr] 说明符只能施加于变量或变量模板的定义式或者函数或函数模板的声明式上。

[:en]
The [`consteval] specifier shall be applied only to the definition of a function
or function template.
[:zh_CN]
[`consteval] 说明符只能施加于函数或函数模板的声明式上。

[:en]
A function or static data member declared with the [`constexpr] or [`consteval]
specifier is implicitly an inline function or variable ([#dcl.inline]).
[:zh_CN]
声明带有 [`constexpr] 或 [`consteval] 说明符的函数或静态数据成员，隐含为内联函数
或变量（[#dcl.inline]）。

[:en]
If any declaration of a function or function template has a [`constexpr] or
[`consteval] specifier, then all its declarations shall contain the same
specifier.
[:zh_CN]
如果某个函数或函数模板的任何声明式带有 [`constexpr] 或 [`consteval] 说明符，则
它的所有声明式都应当带有同一个说明符。

[enter:note]
[:en]
An explicit specialization can differ from the template declaration with respect
to the [`constexpr] or [`consteval] specifier.
[:zh_CN]
在 [`constexpr] 或 [`consteval] 说明符方面，显式特化式可以与其模板声明式不相同。
[exit:note]

[enter:note]
[:en]
Function parameters cannot be declared [`constexpr].
[:zh_CN]
函数形参不能声明为 [`constexpr]。
[exit:note]

[enter:example]
[codeblock]
constexpr void square(int &x);  // [:en] OK: declaration
                                // [|:zh_CN] OK：声明式
constexpr int bufsz = 1024;     // [:en] OK: definition
                                // [|:zh_CN] OK：定义式
constexpr struct pixel {        // [:en] error: [`pixel] is a type
                                // [|:zh_CN] 错误：[`pixel] 是类型
  int x;
  int y;
  constexpr pixel(int);         // [:en] OK: declaration
                                // [|:zh_CN] OK：声明式
}; 
constexpr pixel::pixel(int a)
  : x(a), y(x)                  // [:en] OK: definition
                                // [|:zh_CN] OK：定义式
  { square(x); }
constexpr pixel small(2);       // [:en] error: [`square] not defined, so [`small(2)]
                                // [|:zh_CN] 错误：[`square] 未定义，所以 [`small(2)]
                                // [:en@~] not constant ([#expr.const]) so [`constexpr] not satisfied
                                // [|:zh_CN@~] 不是常量（[#expr.const]），故不满足 [`constexpr]

constexpr void square(int &x) { // [:en] OK: definition
                                // [|:zh_CN] OK：定义式
  x *= x;
}
constexpr pixel large(4);       // [:en] OK: [`square] defined
                                // [|:zh_CN] OK：[`square] 已定义
int next(constexpr int x) {     // [:en] error: not for parameters
                                // [|:zh_CN] 错误：不适用于形参
     return x + 1;
} 
extern constexpr int memsz;     // [:en] error: not a definition 
                                // [|:zh_CN] 错误：不是定义式
[codeblock:end]
[exit:example]

[para]
[:en]
A [`constexpr] or [`consteval] specifier used in the declaration of a function
declares that function to be a [+constexpr function
[%specifier[![`constexpr][!function]]]].
[:zh_CN]
用在函数的声明式中的 [`constexpr] 或 [`consteval] 说明符，将该函数声明为
[+constexpr 函数 [%说明符[![`constexpr][!～函数]]]]。

[:en]
A function or constructor declared with the [`consteval] specifier is called an
[+immediate function].
[:zh_CN]
以 [`consteval] 说明符声明的函数或构造函数被称为[+直接函数]。

[:en]
A destructor, an allocation function, or a deallocation function shall not be
declared with the [`consteval] specifier.
[:zh_CN]
析构函数，分配函数，或者回收函数，不能以 [`consteval] 说明符进行声明。

[para]
[:en]
[%specifier[![`constexpr][!function]]]
[%constexpr function]
The definition of a constexpr function shall satisfy the following requirements:
[:zh_CN]
[%说明符[![`constexpr][!～函数]]]
[%constexpr 函数]
constexpr 函数的定义式应当满足如下要求：

[list]
[item]
[:en] its return type (if any) shall be a literal type;
[:zh_CN] 其返回类型（如果有）应当是字面类型；

[item]
[:en] each of its parameter types shall be a literal type;
[:zh_CN] 它的每个形参类型均应当是字面类型；

[item]
[:en] it shall not be a coroutine ([#dcl.fct.def.coroutine]);
[:zh_CN] 它不能是协程（[#dcl.fct.def.coroutine]）；

[item]
[:en] if the function is a constructor or destructor, its class shall not have
any virtual base classes;
[:zh_CN] 若该函数时构造函数或析构函数，则其类不能具有任何虚基类；

[item]
[:en] its [~function-body] shall not enclose ([#stmt.stmt])
[:zh_CN] 其[~函数体]不能包含（[#stmt.stmt]）：

[list]
[item]
[:en@~] a [`goto] statement,
[:zh_CN@~] [`goto] 语句，
[item]
[:en@~] an identifier label ([#stmt.label]),
[:zh_CN@~] 标识符标号（[#stmt.label]），
[item]
[:en@~] a definition of a variable of non-literal type or of static or thread
storage duration.
[:zh_CN@~] 非字面类型的，或具有静态或线程存储期的变量的定义式。
[list:end]

[enter:note]
[:en] A [~function-body] that is [`= delete] or [`= default] encloses none of
the above.
[:zh_CN] [~函数体] [`= delete]，[`= default] 并不会包含以上各项。
[exit:note]
[list:end]

[enter:example]
[codeblock]
constexpr int square(int x) 
  { return x * x; }             // OK
constexpr long long_max() 
  { return 2147483647; }        // OK
constexpr int abs(int x) {
  if (x < 0)
    x = -x;
  return x;                     // OK
}
constexpr int first(int n) {
  static int value = n;         // [:en] error: variable has static storage duration
                                // [|:zh_CN] 错误：变量具有静态存储期
  return value;
}
constexpr int uninit() {
  struct { int a; } s;
  return s.a;                   // [:en] error: uninitialized read of [`s.a]
                                // [|:zh_CN] 错误：对 [`s.a] 的未初始化读取
}
constexpr int prev(int x)
  { return --x; }               // OK
constexpr int g(int x, int n) { // OK
  int r = 1;
  while (--n > 0) r *= x;
  return r;
}
[codeblock:end]
[exit:example]

[para]
[:en]
[%specifier[![`constexpr][!constructor]]]
The definition of a constexpr constructor whose [~function-body] is not
[`= delete] shall additionally satisfy the following requirements:
[:zh_CN]
[%说明符[![`constexpr][!～构造函数]]]
[~函数体]不是 [`= delete] 的 constexpr 构造函数的定义式还应当满足如下规定：

[list]
[item]
[:en]
if the class is a union having variant members ([#class.union]), exactly one of
them shall be initialized;
[:zh_CN]
若该类为具有可变成员的联合体（[#class.union]），则恰有一个已初始化；

[item]
[:en]
if the class is a union-like class, but is not a union, for each of its
anonymous union members having variant members, exactly one of them shall be
initialized;
[:zh_CN]
若该类是类似联合体的类但并非联合体，则其每个具有可变成员的匿名联合体成员，都应当
恰有一个可变成员已初始化；

[item]
[:en]
for a non-delegating constructor, every constructor selected to initialize
non-static data members and base class subobjects shall be a constexpr
constructor;
[:zh_CN]
对于非委派构造函数，被选择用以初始化非静态数据成员和基类子对象的每个构造函数都
应当是 constexpr 构造函数；

[item]
[:en]
for a delegating constructor, the target constructor shall be a constexpr
constructor.
[:zh_CN]
对于委派构造函数，其目标构造函数应当是 constexpr 构造函数。
[list:end]

[enter:example]
[codeblock]
struct Length { 
  constexpr explicit Length(int i = 0) : val(i) { }
private: 
  int val; 
}; 
[codeblock:end]
[exit:example]

[para]
[:en]
The definition of a constexpr destructor whose [~function-body] is not
[`= delete] shall additionally satisfy the following requirement:
[:zh_CN]
[~函数体]不是 [`= delete] 的 constexpr 析构函数的定义式还应当满足如下规定：

[list]
[item]
[:en]
for every subobject of class type or (possibly multi-dimensional) array thereof,
that class type shall have a constexpr destructor.
[:zh_CN]
对于每个类类型或其（可能多维）数组的子对象，这个类类型应当具有 constexpr
析构函数。
[list:end]

[para]
[:en]
For a constexpr function or constexpr constructor that is neither defaulted nor
a template, if no argument values exist such that an invocation of the function
or constructor could be an evaluated subexpression of a core constant expression
([#expr.const]), or, for a constructor, an evaluated subexpression of the
initialization full-expression of some constant-initialized object
([#basic.start.static]), the program is ill-formed, no diagnostic required.
[:zh_CN]
对于既非预置也非模板的 constexpr 函数或 constexpr 构造函数来说，如果不存在实参值
能够使得函数或构造函数的调用可以成为核心常量表达式（[#expr.const]）的求值
子表达式，或对于构造函数来说，使其可以成为某个被常量初始化的对象的初始化全表达式
（[#basic.start.static]），则程序非良构；无须诊断。

[enter:example]
[codeblock]
constexpr int f(bool b)
  { return b ? throw 0 : 0; }           // OK
constexpr int f() { return f(true); }   // [:en] ill-formed, no diagnostic required
                                        // [|:zh_CN] 非良构，无须诊断

struct B {
  constexpr B(int x) : i(0) { }         // [:en] [`x] is unused
                                        // [|:zh_CN] [`x] 未被使用
  int i;
};

int global;

struct D : B {
  constexpr D() : B(global) { }         // [:en] ill-formed, no diagnostic required
                                        // [|:zh_CN] 非良构，无须诊断
                                        // [:en@~] lvalue-to-rvalue conversion on non-constant [`global]
                                        // [|:zh_CN@~] 对非常量 [`global] 进行左值向右值转换
};
[codeblock:end]
[exit:example]

[para]
[:en]
If the instantiated template specialization of a constexpr function template or
member function of a class template would fail to satisfy the requirements for a
constexpr function, that specialization is still a constexpr function, even
though a call to such a function cannot appear in a constant expression.
[:zh_CN]
若某个 constexpr 的函数模板或类模板的成员函数的某个已实例化的模板特例，无法满足
constexpr 函数的规定，则该特例仍然是 constexpr 函数，尽管对这种函数的调用不能
出现于常量表达式中。

[:en]
If no specialization of the template would satisfy the requirements for a
constexpr function when considered as a non-template function, the template is
ill-formed, no diagnostic required.
[:zh_CN]
如果该模板不存在特例，使得当考察非模板函数时可以满足 constexpr 函数的规定，则该
模板非良构，无须诊断。

[para]
[:en]
A call to a constexpr function produces the same result as a call to an
equivalent non-constexpr function in all respects except that
[:zh_CN]
调用 constexpr 函数所产生的结果与调用等价的非 constexpr 函数在各方面都相同，但

[list]
[item]
[:en@~]
a call to a constexpr function can appear in a constant expression
([#expr.const]), and
[:zh_CN@~]
对 constexpr 函数的调用可以出现于常量表达式（[#expr.const]）之中，且

[item]
[:en@~]
copy elision is not performed in a constant expression ([#class.copy.elision]).
[:zh_CN@~]
常量表达式中不进行复制消除（[#class.copy.elision]）。
[list:end]

[para]
[:en]
The [`constexpr] and [`consteval] specifiers have no effect on the type of a
constexpr function.
[:zh_CN]
[`constexpr] 和 [`consteval] 说明符对 constexpr 函数的类型没有影响。

[enter:example]
[codeblock]
constexpr int bar(int x, int y)         // OK 
    { return x + y + x*y; } 
// ... 
int bar(int x, int y)                   // [:en] error: redefinition of [`bar]
                                        // [|:zh_CN] 错误：重新定义 [`bar]
    { return x * 2 + 3 * y; } 
[codeblock:end]
[exit:example]

[para]
[:en]
A [`constexpr] specifier used in an object declaration declares the object as
const.
[:zh_CN]
用在对象声明式中的 [`constexpr] 将该对象声明为 const。

[:en]
Such an object shall have literal type and shall be initialized.
[:zh_CN]
此种对象应当具有字面类型且应当进行初始化。

[:en]
In any [`constexpr] variable declaration, the full-expression of the
initialization shall be a constant expression ([#expr.const]).
[:zh_CN]
任何 [`constexpr] 对象声明式中，其初始化的全表达式应当是常量表达式
（[#expr.const]）。

[:en]
A [`constexpr] variable shall have constant destruction.
[:zh_CN]
[`constexpr] 变量应当具有常量销毁。

[enter:example]
[codeblock]
struct pixel { 
  int x, y; 
}; 
constexpr pixel ur = { 1294, 1024 };    // OK
constexpr pixel origin;                 // [:en] error: initializer missing
                                        // [|:zh_CN] 错误：缺少初始化式
[codeblock:end]
[exit:example]
