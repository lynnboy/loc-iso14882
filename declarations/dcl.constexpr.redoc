[section#dcl.constexpr
    [:en] The [`:key constexpr] and [`:key consteval] specifiers
    [:zh_CN] [`:key constexpr] 和 [`:key consteval] 说明符

[%  [:en] specifier[![`constexpr]]
    [:zh_CN] 说明符[![`constexpr]] ]
[%  [:en] specifier[![`consteval]]
    [:zh_CN] 说明符[![`consteval]] ]
]

[para]
[:en]
The [`:key constexpr] specifier shall be applied only to the definition of a
variable or variable template or the declaration of a function or function
template.
[:zh_CN]
[`:key constexpr] 说明符只能施加于变量或变量模板的定义式或者函数或函数模板的
声明式上。

[:en]
The [`:key consteval] specifier shall be applied only to the declaration of a
function or function template.
[:zh_CN]
[`:key consteval] 说明符只能施加于函数或函数模板的声明式上。

[:en] A function or static data member declared with the [`:key constexpr] or
[`:key consteval] specifier on its first declaration is implicitly an inline
function or variable ([#dcl.inline]).
[:zh_CN] 在首个声明式中以 [`:key constexpr] 或 [`:key consteval] 说明符声明的
函数或静态数据成员，隐含为内联函数或变量（[#dcl.inline]）。

[:en]
If any declaration of a function or function template has a [`:key constexpr] or
[`:key consteval] specifier, then all its declarations shall contain the same
specifier.
[:zh_CN]
如果某个函数或函数模板的任何声明式带有 [`:key constexpr] 或 [`:key consteval]
说明符，则它的所有声明式都应当带有同一个说明符。

[begin:note]
[:en]
An explicit specialization can differ from the template declaration with respect
to the [`:key constexpr] or [`:key consteval] specifier.
[:zh_CN]
在 [`:key constexpr] 或 [`:key consteval] 说明符方面，显式特化式可以与其模板
声明式不相同。
[end:note]

[begin:note]
[:en]
Function parameters cannot be declared [`:key constexpr].
[:zh_CN]
函数形参不能声明为 [`:key constexpr]。
[end:note]

[begin:example]
[codeblock]
constexpr void square(int &x);  // [:en] OK, declaration \
                                [:zh_CN] OK，声明式
constexpr int bufsz = 1024;     // [:en] OK, definition \
                                [:zh_CN] OK，定义式
constexpr struct pixel {        // [:en] error: [`pixel] is a type \
                                [:zh_CN] 错误：[`pixel] 是类型
  int x;
  int y;
  constexpr pixel(int);         // [:en] OK, declaration \
                                [:zh_CN] OK，声明式
};
constexpr pixel::pixel(int a)
  : x(a), y(x)                  // [:en] OK, definition \
                                [:zh_CN] OK，定义式
  { square(x); }
constexpr pixel small(2);       // [:en] error: [`square] not defined, so [`small(2)] \
                                [:zh_CN] 错误：[`square] 未定义，所以 [`small(2)]
                                // [:en@~] not constant ([#expr.const]) so [`:key constexpr] not satisfied \
                                [:zh_CN@~] 不是常量（[#expr.const]），故不满足 [`:key constexpr]

constexpr void square(int &x) { // [:en] OK, definition \
                                [:zh_CN] OK，定义式
  x *= x;
}
constexpr pixel large(4);       // [:en] OK, [`square] defined \
                                [:zh_CN] OK，[`square] 已定义
int next(constexpr int x) {     // [:en] error: not for parameters \
                                [:zh_CN] 错误：不适用于形参
     return x + 1;
}
extern constexpr int memsz;     // [:en] error: not a definition  \
                                [:zh_CN] 错误：不是定义式
[codeblock:end]
[end:example]

[para]
[:en]
A [`:key constexpr] or [`:key consteval] specifier used in the declaration of a
function declares that function to be a [+constexpr function
[%specifier[![`constexpr][!function]]]].
[:zh_CN]
在函数的声明式中使用 [`:key constexpr] 或 [`:key consteval] 说明符，将该函数声明
为[+constexpr 函数 [%说明符[![`constexpr][!～函数]]]]。

[begin:note]
[:en]
A function or constructor declared with the [`:key consteval] specifier is an
immediate function ([#expr.const]).
[:zh_CN]
以 [`:key consteval] 说明符声明的函数或构造函数是直接函数（[#expr.const]）。
[end:note]

[:en]
A destructor, an allocation function, or a deallocation function shall not be
declared with the [`:key consteval] specifier.
[:zh_CN]
析构函数，分配函数，或者回收函数，不能以 [`:key consteval] 说明符进行声明。

[para]
[:en]
[%specifier[![`constexpr][!function]]]
[%constexpr function]
A function is [+constexpr-suitable] if:
[:zh_CN]
[%说明符[![`constexpr][!～函数]]]
[%constexpr 函数]
以下情况下函数[+适于 constexpr]：

[list]
[item]
[:en] it is not a coroutine ([#dcl.fct.def.coroutine]), and
[:zh_CN] 它不是协程（[#dcl.fct.def.coroutine]），并且

[item]
[:en] if the function is a constructor or destructor, its class does not have
any virtual base classes.
[:zh_CN] 若该函数时构造函数或析构函数，则其类没有任何虚基类。
[list:end]

[:en]
Except for instantiated constexpr functions,
non-templated constexpr functions shall be constexpr-suitable.
[:zh_CN]
除了实例化的 constexpr 函数外，非模板 constexpr 函数应当适于 constexpr。

[begin:example]
[codeblock]
constexpr int square(int x) 
  { return x * x; }             // OK
constexpr long long_max() 
  { return 2147483647; }        // OK
constexpr int abs(int x) {
  if (x < 0)
    x = -x;
  return x;                     // OK
}
constexpr int constant_non_42(int n) {  // OK
  if (n == 42) {
    static int value = n;
    return value;
  }
  return n;
}
constexpr int uninit() {
  struct { int a; } s;
  return s.a;                   // [:en] error: uninitialized read of [`s.a] \
                                [:zh_CN] 错误：对 [`s.a] 的未初始化读取
}
constexpr int prev(int x)
  { return --x; }               // OK
constexpr int g(int x, int n) { // OK
  int r = 1;
  while (--n > 0) r *= x;
  return r;
}
[codeblock:end]
[end:example]

[para]
[:en]
An invocation of a constexpr function in a given context produces the same
result as an invocation of an equivalent non-constexpr function in the same
context in all respects except that
[:zh_CN]
在给定语境中调用 constexpr 函数所产生的结果与在相同语境中调用等价的非 constexpr
函数在各方面都相同，但

[list]
[item]
[:en@~]
an invocation of a constexpr function can appear in a constant expression
([#expr.const]), and
[:zh_CN@~]
对 constexpr 函数的调用可以出现于常量表达式（[#expr.const]）之中，且

[item]
[:en@~]
copy elision is not performed in a constant expression ([#class.copy.elision]).
[:zh_CN@~]
常量表达式中不进行复制消除（[#class.copy.elision]）。
[list:end]

[begin:note]
[:en]
Declaring a function constexpr can change whether an expression is a constant
expression.
[:zh_CN]
将函数声明为 constexpr 可以改变一个表达式是否是常量表达式。

[:en]
This can indirectly cause calls to [`std::is_constant_evaluated] within an
invocation of the function to produce a different value.
[:zh_CN]
这可能会间接导致该函数的某次调用中对 [`std::is_constant_evaluated] 的调用产生
不同的值。
[end:note]

[begin:note]
[:en]
It is possible to write a constexpr function for which
no invocation satisfies the requirements of a core constant expression.
[:zh_CN]
有可能编写一个 constexpr 函数，但它的所有调用都不满足对核心常量表达式的规定。
[end:note]

[para]
[:en]
The [`:key constexpr] and [`:key consteval] specifiers have no effect on the
type of a constexpr function.
[:zh_CN]
[`:key constexpr] 和 [`:key consteval] 说明符对 constexpr 函数的类型没有影响。

[begin:example]
[codeblock]
constexpr int bar(int x, int y)         // OK 
    { return x + y + x*y; } 
// ... 
int bar(int x, int y)                   // [:en] error: redefinition of [`bar] \
                                        [:zh_CN] 错误：重新定义 [`bar]
    { return x * 2 + 3 * y; } 
[codeblock:end]
[end:example]

[para]
[:en]
A [`:key constexpr] specifier used in an object declaration declares the object
as const.
[:zh_CN]
用在对象声明式中的 [`:key constexpr] 将该对象声明为 const。

[:en]
Such an object shall have literal type and shall be initialized.
[:zh_CN]
此种对象应当具有字面类型且应当进行初始化。

[:en]
In any [`:key constexpr] variable declaration, the full-expression of the
initialization shall be a constant expression ([#expr.const]).
[:zh_CN]
任何 [`:key constexpr] 对象声明式中，其初始化的全表达式应当是常量表达式
（[#expr.const]）。

[:en]
A [`:key constexpr] variable that is an object, as well as any temporary to
which a [`:key constexpr] reference is bound, shall have constant destruction.
[:zh_CN]
[`:key constexpr] 变量，如果是对象，或者由 [`:key constexpr] 引用所绑定的临时
对象，则应当具有常量销毁。

[begin:example]
[codeblock]
struct pixel { 
  int x, y; 
}; 
constexpr pixel ur = { 1294, 1024 };    // OK
constexpr pixel origin;                 // [:en] error: initializer missing \
                                        [:zh_CN] 错误：缺少初始化式
[codeblock:end]
[end:example]
