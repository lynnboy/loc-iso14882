[section#dcl.stc
    [:en] Storage class specifiers
    [:zh_CN] 存储类说明符

[%[:en] specifier[!storage class]
  [:zh_CN]  说明符[!存储类～] ]
[%[:en] declaration[!storage class]
  [:zh_CN]  声明[!存储类～] ]
[:]
[%[`static]]
[%[`thread_local]]
[%[`extern]]
[%[`mutable]]
]

[para]
[:en]
The storage class specifiers are
[:zh_CN]
存储类说明符是

[syntax]
[rule storage-class-specifier [:zh_CN] 存储类说明符 ]
    [| [`:key static] ]
    [| [`:key thread_local] ]
    [| [`:key extern] ]
    [| [`:key mutable] ]
[rule:end]
[syntax:end]

[:en]
At most one [~storage-class-specifier] shall appear in a given
[~decl-specifier-seq], except that [`thread_local] may appear with [`static] or 
[`extern].
[:zh_CN]
在给定的[~声明说明符序列]中，除了 [`thread_local] 可以与 [`static] 或 [`extern]
一起出现以外，最多可出现一个[~存储类说明符]。

[:en]
If [`thread_local] appears in any declaration of a variable it shall be present
in all declarations of that entity.
[:zh_CN]
如果某个变量的任何声明式中出现了 [`thread_local]，则它应当出现在该实体的所有声明
式中。

[:en]
If a [~storage-class-specifier] appears in a [~decl-specifier-seq], there can
be no [`typedef] specifier in the same [~decl-specifier-seq] and the
[~init-declarator-list] or [~member-declarator-list] of the declaration shall
not be empty (except for an anonymous union declared in a namespace scope
([#class.union.naon]).
[:zh_CN]
若在[~声明说明符序列]中出现了[~存储类说明符]，则在同一个[~声明说明符序列]中不能
有 [`typedef] 说明符，且该声明式的[~初始化声明符列表]或[~成员声明符列表]不应当为
空（除非是声明于命名空间作用域中的匿名联合体（[#class.union.anon]））。

[:en]
The [~storage-class-specifier] applies to the name declared by each
[~init-declarator] in the list and not to any names declared by other specifiers.
[:zh_CN]
[~存储类说明符]施加于列表中的每个[~带初始化声明符]所声明的名字，而不是任何由其他
说明符所声明的名字。

[begin:note]
[:en]
See [#temp.expl.spec] and [#temp.explicit] for restrictions in explicit
specializations and explicit instantiations, respectively.
[:zh_CN]
对于显式特化式和显式实例化式中的限制规定，请分别参见 [#temp.expl.spec] 和
[#temp.explicit]。
[end:note]

[para]
[begin:note]
[:en]
A variable declared without a [~storage-class-specifier] at block scope or
declared as a function parameter has automatic storage duration by default
([#basic.std.auto]).
[:zh_CN]
在块作用域中不带[~存储类说明符]所声明的变量，或被声明为函数形参的变量，默认地
具有自动存储期（[#basic.std.auto]）。
[end:note]

[para]
[:en]
The [`thread_local] specifier indicates that the named entity has thread storage
duration ([#basic.stc.thread]).
[:zh_CN]
[`thread_local] 说明符指定被指名的实体具有线程存储期（[#basic.stc.thread]）。

[:en]
It shall be applied only to the declaration of a variable of namespace or block
scope, to a structured binding declaration ([#dcl.struct.bind]), or to the
declaration of a static data member.
[:zh_CN]
它只能应用于命名空间或块作用域的变量的声明式中，结构化绑定声明式
（[#dcl.struct.bind]）中，或者应用于静态数据成员的声明式中。

[:en]
When [`thread_local] is applied to a variable of block scope the
[~storage-class-specifier] [`static] is implied if no other
[~storage-class-specifier] appears in the [~decl-specifier-seq].
[:zh_CN]
当对块作用域的变量应用 [`thread_local] 时，如果[~声明说明符序列]中没有其他
[~存储类说明符]，则隐含地也带有[~存储类说明符] [`static]。

[para]
[:en]
[%restriction[![`static]]]
The [`static] specifier shall be applied only to the declaration of a variable
or function, to a structured binding declaration ([#dcl.struct.bind]), or to the
declaration of an anonymous union ([#class.union.anon]).
[:zh_CN]
[%限制[![`static]]]
[`static] 说明符只能应用于变量或函数的声明式中，结构化绑定声明式
（[#dcl.struct.bind]）中，或者用于匿名联合体（[#class.union.anon]）的声明式中。

[:en]
There can be no [`static] function declarations within a block, nor any
[`static] function parameters.
[:zh_CN]
不能在语句块中出现 [`static] 函数声明式，也不存在任何 [`static] 函数形参。

[:en]
A [`static] specifier used in the declaration of a variable declares the
variable to have static storage duration ([#basic.stc.static]), unless
accompanied by the [`thread_local] specifier, which declares the variable to
have thread storage duration ([#basic.stc.thread]).
[:zh_CN]
在变量的声明式中使用 [`static] 说明符，将把该变量声明为具有静态存储期
（[#basic.stc.static]），但若和 [`thread_local] 说明符一起，则将把该变量声明为
具有线程存储期（[#basic.stc.thread]）。

[:en]
A [`static] specifier can be used in declarations of class members;
[#class.static] describes its effect.
[:zh_CN]
[`static] 说明符可以用在类成员的声明式中；[#class.static] 说明其效果。

[:en]
[%[`static][!linkage of]]
For the linkage of a name declared with a [`static] specifier, see [#basic.link].
[:zh_CN]
[%[`static][!～连接]]
关于带有 [`static] 说明符所声明的名字的连接，参见 [#basic.link]。

[para]
[:en]
[%restriction[![`extern]]]
The [`extern] specifier shall be applied only to the declaration of a variable
or function.
[:zh_CN]
[%限制[![`extern]]]
[`extern] 说明符只能应用于变量和函数的声明式中。

[:en]
The [`extern] specifier shall not be used in the declaration of a class member
or function parameter.
[:zh_CN]
[`extern] 说明符不能用在类成员或函数形参的声明式中。

[:en]
[%[`extern][!linkage of]]
[%consistency[!linkage]]
For the linkage of a name declared with an [`extern] specifier, see [#basic.link].
[:zh_CN]
[%[`extern][!～连接]]
[%一致性[!连接～]]
关于带有 [`extern] 说明符所声明的名字的连接，参见 [#basic.link]。

[begin:note]
[:en]
The [`extern] keyword can also be used in [~explicit-instantiation]s and
[~linkage-specification]s, but it is not a [~storage-class-specifier] in such
contexts.
[:zh_CN]
[`extern] 关键字还可用在[~显式实例化式]和[~连接说明]中，但它在这些语境中并不是
[~存储类说明符]。
[end:note]

[para]
[:en]
All declarations for a given entity shall give its name the same linkage.
[:zh_CN]
一个给定实体所有声明式都应当为它的名字给出相同的连接。

[begin:note]
[:en]
The linkage given by some declarations is affected by previous declarations.
[:zh_CN]
某些声明式给出的连接会受到之前声明式的影响。

[:en]
Overloads are distinct entities.
[:zh_CN]
重载都是不同的实体。
[end:note]

[begin:example]
[codeblock]
static char* f();               // [:en] [`f()] has internal linkage \
                                   [:zh_CN] [`f()] 具有内部连接
char* f()                       // [:en] [`f()] still has internal linkage \
                                   [:zh_CN] [`f()] 仍具有内部连接
  { /* ... */ }

char* g();                      // [:en] [`g()] has external linkage \
                                   [:zh_CN] [`g()] 具有外部连接
static char* g()                // [:en] error: inconsistent linkage \
                                   [:zh_CN] 错误：连接不一致
  { /* ... */ }

void h();
inline void h();                // [:en] external linkage \
                                   [:zh_CN] 外部连接

inline void l();
void l();                       // [:en] external linkage \
                                   [:zh_CN] 外部连接

inline void m();
extern void m();                // [:en] external linkage \
                                   [:zh_CN] 外部连接

static void n();
inline void n();                // [:en] internal linkage \
                                   [:zh_CN] 内部连接

static int a;                   // [:en] [`a] has internal linkage \
                                   [:zh_CN] [`a] 具有内部连接
int a;                          // [:en] error: two definitions \
                                   [:zh_CN] 错误：两个定义式

static int b;                   // [:en] [`b] has internal linkage \
                                   [:zh_CN] [`b] 具有内部连接
extern int b;                   // [:en] [`b] still has internal linkage \
                                   [:zh_CN] [`b] 仍具有内部连接

int c;                          // [:en] [`c] has external linkage \
                                   [:zh_CN] [`c] 具有外部连接
static int c;                   // [:en] error: inconsistent linkage \
                                   [:zh_CN] 错误：连接不一致

extern int d;                   // [:en] [`d] has external linkage \
                                   [:zh_CN] [`d] 具有外部连接
static int d;                   // [:en] error: inconsistent linkage \
                                   [:zh_CN] 错误：连接不一致
[codeblock:end]
[end:example]

[para]
[:en]
[%declaration[!forward]]
The name of a declared but undefined class can be used in an [`extern]
declaration.
[:zh_CN]
[%声明式[!前置～]]
[`extern] 声明式中可以使用已声明但尚未定义的类的名字。

[:en]
Such a declaration can only be used in ways that do not require a complete class
type.
[:zh_CN]
这种声明式只能以不需要完整类类型的方式进行使用。

[begin:example]
[codeblock]
struct S;
extern S a;
extern S f();
extern void g(S);

void h() {
  g(a);                         // [:en] error: [`s] is incomplete \
                                   [:zh_CN] 错误：[`s] 不完整
  f();                          // [:en] error: [`s] is incomplete \
                                   [:zh_CN] 错误：[`s] 不完整
}
[codeblock:end]
[end:example]

[para]
[:en]
The [`mutable] specifier shall appear only in the declaration of a non-static
data member ([#class.mem]) whose type is neither const-qualified nor a reference
type.
[:zh_CN]
[`mutable] 说明符只能出现于其类型既不是被 const 限定的，也不是引用类型的非静态
数据成员（[#class.mem]）的声明式中。

[begin:example]
[codeblock]
class X {
  mutable const int* p;         // OK
  mutable int* const q;         // [:en] error \
                                   [:zh_CN] 错误
};
[codeblock:end]
[end:example]

[para]
[begin:note]
[:en]
The [`mutable] specifier on a class data member nullifies a [`const] specifier
applied to the containing class object and permits modification of the mutable
class member even though the rest of the object is const ([#basic.type.qualifier],
[#dcl.type.cv]).
[:zh_CN]
类数据成员上的 [`mutable] 说明符抵消了施加于包含它的类对象上的 [`const] 说明符，
并允许对这个 mutable 类成员进行改动，尽管该对象的其他部分仍为 const
（[#basic.type.qualifier]，[#dcl.type.cv]）。
[end:note]
