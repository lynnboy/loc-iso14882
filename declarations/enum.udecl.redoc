[section#enum.udecl
    [:en] The [`using enum] declaration
    [:zh_CN] [`using enum] 声明式

[%  [:en] enumeration [!using declaration]
    [:zh_CN] 枚举 [!using 声明式] ]
]

[syntax]
[rule using-enum-declaration [:zh_CN] using-枚举声明式 ]
    [| [`using] elaborated-enum-specifier [`;] ]
[rule:end]
[syntax:end]

[para]
[:en]
The [~elaborated-enum-specifier] shall not name a dependent type and the type
shall have a reachable [~enum-specifier].
[:zh_CN]
[~详述枚举说明符]不能指名待决类型，且其类型应当具有可达的[~枚举说明符]。

[para]
[:en]
A [~using-enum-declaration] is equivalent to a [~using-declaration] for each
enumerator.
[:zh_CN]
[~using-枚举声明式]等价于每个枚举符有一条[~using-声明式]。

[para]
[begin:note]
[:en]
A [~using-enum-declaration] in class scope makes the enumerators of the named
enumeration available via member lookup.
[:zh_CN]
类作用域中的 [~using-枚举声明式]使得所指名的枚举的各枚举符对于成员查找是可访问的。

[begin:example]
[codeblock]
enum class fruit { orange, apple };
struct S {
  using enum fruit;             // [:en] OK, introduces [`orange] and [`apple] into [`S] \
                                [:zh_CN] OK，将 [`orange] 和 [`apple] 引入到 [`S] 中
};
void f() {
  S s;
  s.orange;                     // [:en] OK, names [`fruit::orange] \
                                [:zh_CN] OK，指名 [`fruit::orange]
  S::orange;                    // [:en] OK, names [`fruit::orange] \
                                [:zh_CN] OK，指名 [`fruit::orange]
}
[codeblock:end]
[end:example]
[end:note]

[para]
[begin:note]
[:en]
Two [~using-enum-declaration]s that introduce two enumerators of the same name
conflict.
[:zh_CN]
引入具有相同名字的两个枚举符的两个 [~using-枚举声明式]相冲突。

[begin:example]
[codeblock]
enum class fruit { orange, apple };
enum class color { red, orange };
void f() {
  using enum fruit;             // OK
  using enum color;             // [:en] error: [`color::orange] and [`fruit::orange] conflict \
                                [:zh_CN] 错误：[`color::orange] 与 [`fruit::orange] 相冲突
}
[codeblock:end]
[end:example]
[end:note]
