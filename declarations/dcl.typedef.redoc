[section#dcl.typedef
    [:en] The [`typedef] specifier
    [:zh_CN] [`typedef] 说明符

[%  [:en] specifier[![`typedef]]
    [:zh_CN] 说明符[![`typedef]] ]
]

[para]
[:en]
Declarations containing the [~decl-specifier] [`typedef] declare identifiers
that can be used later for naming fundamental ([#basic.fundamental]) or compound
([#basic.compound]) types.
[:zh_CN]
包含[~声明说明符] [`typedef] 的声明式所声明的标识符，可在其后用于指名基础类型
（[#basic.fundamental]）或复合类型（[#basic.compound]）。

[:en]
The [`typedef] specifier shall not be combined in a [~decl-specifier-seq] with
any other kind of specifier except a [~defining-type-specifier], and it shall
not be used in the [~decl-specifier-seq] of a [~parameter-declaration]
([#dcl.fct]) nor in the [~decl-specifier-seq] of a [~function-definition]
([#dcl.fct.def]).
[:zh_CN]
[`typedef] 说明符不能与除了[~类型说明符]之外的任何其他种类的说明符在[~声明说明符
序列]中进行组合，而且它既不能用在[~形参声明式]的[~声明说明符序列]中
（[#dcl.fct]），也不能用在[~函数定义式]的[~声明说明符序列]中（[#dcl.fct.def]）。

[:en]
If a [`typedef] specifier appears in a declaration without a [~declarator], the
program is ill-formed.
[:zh_CN]
如果包含 [`typedef] 说明符的声明式没有[~声明符]，则程序非良构。

[syntax]
[rule typedef-name [:zh_CN] typedef-名 ]
    [| identifier ]
    [| simple-template-id ]
[rule:end]
[syntax:end]

[:en]
A name declared with the [`typedef] specifier becomes a [~typedef-name].
[:zh_CN]
用 [`typedef] 说明符所声明的名字成为 [~typedef-名]。

[:en]
A [~typedef-name] names the type associated with the [~identifier] ([#dcl.decl])
or [~simple-template-id] ([#temp]);
[:zh_CN]
[~typedef-名]指名与该[~标识符]（[#dcl.decl]）或[~简单模板标识]（[#temp]）相关联
的类型；

[:en@~]
[%declaration[![`typedef] as type]]
[%equivalence[!type]]
[%synonym[!type name as]]
a [~typedef-name] is thus a synonym for another type.
[:zh_CN@~]
[%声明式[![`typedef] 作为类型～]]
[%等价[!类型～]]
[%同义词[!类型名作为～]]
因此 [~typedef-名]就是另一个类型的同义词。

[:en]
A [~typedef-name] does not introduce a new type the way a class declaration
([#class.name]) or enum declaration ([#dcl.enum]) does.
[:zh_CN]
[~typedef-名]并不像类声明式（[#class.name]）或枚举声明式（[#dcl.enum]）那样引入
新的类型。

[enter:example]
[:en]
After
[:zh_CN]
在

[codeblock]
typedef int MILES, *KLICKSP;
[codeblock:end]

[:en@~]
the constructions
[:zh_CN@~]
之后，如下的构造

[codeblock]
MILES distance;
extern KLICKSP metricp;
[codeblock:end]

[:en@~]
are all correct declarations; the type of [`distance] is [`int] and that of
[`metricp] is ["pointer to [`int]].
[:zh_CN@~]
都是正确的声明式；[`distance] 的类型是 [`int] 而 [`metricp] 的类型是“[`int] 的
指针”。
[exit:example]

[para]
[:en]
A [~typedef-name] can also be introduced by an [~alias-declaration].
[:zh_CN]
[~typedef-名]还可由[~别名声明式]引入。

[:en]
The [~identifier] following the [`using] keyword becomes a [~typedef-name] and
the optional [~attribute-specifier-seq] following the [~identifier] appertains
to that [~typedef-name].
[:zh_CN]
跟在 [`using] 关键字后面的[~标识符]成为 [~typedef-名]，而跟在[~标识符]后面的可选
的[~特性说明符序列]则属于这个 [~typedef-名]。

[:en]
Such a [~typedef-name] has the same semantics as if it were introduced by the
[`typedef] specifier.
[:zh_CN]
这样的 [~typedef-名]具有与当它通过 [`typedef] 说明符引入时相同的语义。

[:en]
In particular, it does not define a new type.
[:zh_CN]
尤其是，它并不定义新的类型。

[enter:example]
[codeblock]
using handler_t = void (*)(int);
extern handler_t ignore;
extern void (*ignore)(int);         // [:en] redeclare [`ignore]
                                    // [|:zh_CN] 重新声明 [`ignore]
using cell = pair<void*, cell*>;    // [:en] ill-formed
                                    // [|:zh_CN] 非良构
[codeblock:end]
[exit:example]

[:en]
The [~defining-type-specifier-seq] of the [~defining-type-id] shall not define
a class or enumeration if the [~alias-declaration] is the [~declaration] of a
[~template-declaration].
[:zh_CN]
当[~别名声明式]是[~模板声明式]的[~声明式]时，其[~定义类型标识]的[~定义类型说明符
序列]不能定义类或者枚举。

[para]
[:en]
[%redefinition[![`typedef]]]
In a given non-class scope, a [`typedef] specifier can be used to redeclare the
name of any type declared in that scope to refer to the type to which it already
refers.
[:zh_CN]
[%重新定义[![`typedef]]]
在给定的非类作用域中，[`typedef] 说明符可用于对该作用域中的任意类型的名字进行
重新声明，以代表其已经代表的类型。

[enter:example]
[codeblock]
typedef struct s { /* ... */ } s;
typedef int I;
typedef int I;
typedef I I;
[codeblock:end]
[exit:example]

[para]
[:en]
In a given class scope, a [`typedef] specifier can be used to redeclare any
[~class-name] declared in that scope that is not also a [~typedef-name] to refer
to the type to which it already refers.
[:zh_CN]
在给定的类作用域中，[`typedef] 说明符可用于把该作用域中所声明的不是
[~typedef-名]的任何[~类名]重新声明为代表其已经代表的类型。

[enter:example]
[codeblock]
struct S {
  typedef struct A { } A;       // OK
  typedef struct B B;           // OK
  typedef A A;                  // [:en] error
                                // [|:zh_CN] 错误
};
[codeblock:end]
[exit:example]

[para]
[:en]
If a [`typedef] specifier is used to redeclare in a given scope an entity that
can be referenced using an [~elaborated-type-specifier], the entity can continue
to be referenced by an [~elaborated-type-specifier] or as an enumeration or
class name in an enumeration or class definition respectively.
[:zh_CN]
如果在某个给定作用域中，用一个 [`typedef] 说明符来重新声明某个实体，而它可以在
其中通过使用[~详述类型说明符]而被涉指，则可以继续对该实体通过[~详述类型说明符]
进行涉指，或者在枚举或类的定义式中分别作为枚举或类的名字而被涉指。

[enter:example]
[codeblock]
struct S;
typedef struct S S;
int main() {
  struct S* p;                  // OK
}
struct S { };                   // OK
[codeblock:end]
[exit:example]

[para]
[:en]
In a given scope, a [`typedef] specifier shall not be used to redeclare the name
of any type declared in that scope to refer to a different type.
[:zh_CN]
在给定作用域中，[`typedef] 说明符不能用于对此作用域中所声明的任意类型的名字进行
重新声明为代表不同的类型。

[enter:example]
[codeblock]
class complex { /* ... */ };
typedef int complex;            // [:en] error: redefinition
                                // [|:zh_CN] 错误：重新定义
[codeblock:end]
[exit:example]

[para]
[:en]
Similarly, in a given scope, a class or enumeration shall not be declared with
the same name as a [~typedef-name] that is declared in that scope and refers to
a type other than the class or enumeration itself.
[:zh_CN]
相似地，在给定作用域中，如果该作用域中声明的 [~typedef-名]所代表的类型不同于某个
类或枚举本身，则该类或枚举不能用与之相同的名字来进行声明。

[enter:example]
[codeblock]
typedef int complex;
class complex { /* ... */ };    // [:en] error: redefinition
                                // [|:zh_CN] 错误：重新定义
[codeblock:end]
[exit:example]

[para]
[:en]
[%class name[![`typedef]]]
A [~simple-template-id] is only a [~typedef-name] if its [~template-name] names
an alias template or a template [~template-parameter].
[:zh_CN]
[%类名[![`typedef]]]
如果[~简单模板标识]的[~模板名]指名的是别名模板或模板[~模板形参]，则它仅是一个
[~typedef-名]。

[enter:note]
[:en]
A [~simple-template-id] that names a class template specialization is a
[~class-name] ([#class.name]).
[:zh_CN]
指名类模板特例的[~简单模板标识]，是[~类名]（[#class.name]）。

[:en]
If a [~typedef-name] is used to identify the subject of an
[~elaborated-type-specifier] ([#dcl.type.elab]), a class definition ([#class]),
a constructor declaration ([#class.ctor]), or a destructor declaration
([#class.dtor]), the program is ill-formed.
[:zh_CN]
若 [~typedef-名]被用于标识[~详述类型说明符]（[#dcl.type.elab]），类定义式
（[#class]），构造函数声明式（[#class.ctor]），或析构函数声明式（[#class.dtor]）
的主体，则程序非良构。
[exit:note]

[enter:example]
[codeblock]
struct S {
  S();
  ~S();
};

typedef struct S T;

S a = T();                      // OK
struct T * p;                   // [:en] error
                                // [|:zh_CN] 错误
[codeblock:end]
[exit:example]

[para]
[:en]
[%class name[![`typedef]]]
[%enum name[![`typedef]]]
[%class[!unnamed]]
If the typedef declaration defines an unnamed class (or enum), the first
[~typedef-name] declared by the declaration to be that class type (or enum type)
is used to denote the class type (or enum type) for linkage purposes only
([#basic.link]).
[:zh_CN]
[%类名[![`typedef]]]
[%枚举名[![`typedef]]]
[%类[!无名～]]
若某个 typedef 声明式定义了一个无名类（或枚举），则由该声明式声明为这个类类型
（或枚举类型）的第一个 [~typedef-名]，仅为连接的目的（[#basic.link]）时用于代表
这个类类型（或枚举类型）。

[enter:note]
[:en]
A typedef declaration involving a [~lambda-expression] does not itself define
the associated closure type, and so the closure type is not given a name for
linkage purposes.
[:zh_CN]
涉及 [~lambda-表达式]的 typedef 声明式自身并不会定义其所关联的闭包类型，因而该
闭包类型并未为连接目的被赋予名字。
[exit:note]

[enter:example]
[codeblock]
typedef struct { } *ps, S;      // [:en] [`S] is the class name for linkage purposes
                                // [|:zh_CN] [`S] 是为连接的目的而提供的类名
typedef decltype([]{}) C;       // [:en] the closure type has no name for linkage purposes
                                // [|:zh_CN] 闭包类型没有为连接目的存在的名字
[codeblock:end]
[exit:example]
