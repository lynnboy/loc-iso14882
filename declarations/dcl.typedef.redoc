[section#dcl.typedef
    [:en] The [`:key typedef] specifier
    [:zh_CN] [`:key typedef] 说明符

[%  [:en] specifier[![`typedef]]
    [:zh_CN] 说明符[![`typedef]] ]
]

[para]
[:en] Declarations containing the [~decl-specifier] [`:key typedef] declare
identifiers that can be used later for naming fundamental ([#basic.fundamental])
or compound ([#basic.compound]) types.
[:zh_CN] 包含[~声明说明符] [`:key typedef] 的声明式所声明的标识符，可在其后用于指名
基础类型（[#basic.fundamental]）或复合类型（[#basic.compound]）。

[:en] The [`:key typedef] specifier shall not be combined in a [~decl-specifier-seq]
with any other kind of specifier except a [~defining-type-specifier], and it shall
not be used in the [~decl-specifier-seq] of a [~parameter-declaration] ([#dcl.fct])
nor in the [~decl-specifier-seq] of a [~function-definition] ([#dcl.fct.def]).
[:zh_CN] [`:key typedef] 说明符不能与除了[~定义类型说明符]之外的任何其他种类的说明符在
[~声明说明符序列]中进行组合，而且它既不能用在[~形参声明式]的[~声明说明符序列]中（[#dcl.fct]），
也不能用在[~函数定义式]的[~声明说明符序列]中（[#dcl.fct.def]）。

[:en] If a [`:key typedef] specifier appears in a declaration without a [~declarator],
the program is ill-formed.
[:zh_CN] 如果包含 [`:key typedef] 说明符的声明式没有[~声明符]，则程序非良构。

[syntax]
[rule typedef-name [:zh_CN] typedef-名 ]
    [| identifier ]
    [| simple-template-id ]
[rule:end]
[syntax:end]

[:en] A name declared with the [`:key typedef] specifier becomes a [~typedef-name].
[:zh_CN] 用 [`:key typedef] 说明符所声明的名字成为 [~typedef-名]。

[:en] A [~typedef-name] names the type associated with the [~identifier] ([#dcl.decl])
or [~simple-template-id] ([#temp.pre]);
[:zh_CN] [~typedef-名]指名与该[~标识符]（[#dcl.decl]）或[~简单模板标识]（[#temp.pre]）
相关联的类型；

[:en@~] [%declaration[![`typedef] as type]] [%equivalence[!type]] [%synonym[!type name as]]
a [~typedef-name] is thus a synonym for another type.
[:zh_CN@~] [%声明式[![`typedef] 作为类型～]] [%等价[!类型～]] [%同义词[!类型名作为～]]
因此 [~typedef-名]就是另一个类型的同义词。

[:en] A [~typedef-name] does not introduce a new type the way a class declaration
([#class.name]) or enum declaration ([#dcl.enum]) does.
[:zh_CN] [~typedef-名]并不像类声明式（[#class.name]）或枚举声明式（[#dcl.enum]）
那样引入新的类型。

[begin:example]
[:en] After
[:zh_CN] 在
[codeblock]
typedef int MILES, *KLICKSP;
[codeblock:end]
[:en@~] the constructions
[:zh_CN@~] 之后，如下的构造
[codeblock]
MILES distance;
extern KLICKSP metricp;
[codeblock:end]
[:en@~] are all correct declarations; the type of [`distance] is [`int] and that of
[`metricp] is [=lq]pointer to [`int][=rq].
[:zh_CN@~] 都是正确的声明式；[`distance] 的类型是 [`int] 而 [`metricp] 的类型是“[`int] 的指针”。
[end:example]

[para]
[:en] A [~typedef-name] can also be introduced by an [~alias-declaration].
[:zh_CN] [~typedef-名]还可由[~别名声明式]引入。

[:en] The [~identifier] following the [`using] keyword is not looked up;
it becomes a [~typedef-name] and the optional [~attribute-specifier-seq] following
the [~identifier] appertains to that [~typedef-name].
[:zh_CN] 跟在 [`using] 关键词后面的[~标识符]不会被查找；它成为 [~typedef-名]，而跟在
[~标识符]后面的可选的[~属性说明符序列]则属于这个 [~typedef-名]。

[:en] Such a [~typedef-name] has the same semantics as if it were introduced by
the [`:key typedef] specifier.
[:zh_CN] 这样的 [~typedef-名]的语义与通过 [`:key typedef] 说明符引入时的语义相同。

[:en] In particular, it does not define a new type.
[:zh_CN] 尤其是，它并不定义新的类型。

[begin:example]
[codeblock]
using handler_t = void (*)(int);
extern handler_t ignore;
extern void (*ignore)(int);         // [:en] redeclare [`ignore] [:zh_CN] 重新声明 [`ignore]
template<class T> struct P { };
using cell = P<cell*>;              // [:en] error: [`cell] not found ([#basic.scope.pdecl]) \
                                    [:zh_CN] 错误：[`cell] 未找到（[#basic.scope.pdecl]）
[codeblock:end]
[end:example]

[:en] The [~defining-type-specifier-seq] of the [~defining-type-id] shall not
define a class or enumeration if the [~alias-declaration] is the [~declaration]
of a [~template-declaration].
[:zh_CN] 当[~别名声明式]是[~模板声明式]的[~声明式]时，其[~定义类型标识]的
[~定义类型说明符序列]不能定义类或者枚举。

[para]
[:en] [%class name[![`typedef]]]
A [~simple-template-id] is only a [~typedef-name] if its [~template-name] names
an alias template or a type template template parameter.
[:zh_CN] [%类名[![`typedef]]]
如果[~简单模板标识]的[~模板名]指名的是别名模板或类型模板模板形参，则它仅是一个 [~typedef-名]。

[begin:note]
[:en] A [~simple-template-id] that names a class template specialization is a
[~class-name] ([#class.name]).
[:zh_CN] 指名类模板特例的[~简单模板标识]，是[~类名]（[#class.name]）。

[:en] If a [~typedef-name] is used to identify the subject of an
[~elaborated-type-specifier] ([#dcl.type.elab]), a class definition ([#class]),
a constructor declaration ([#class.ctor]), or a destructor declaration
([#class.dtor]), the program is ill-formed.
[:zh_CN] 若 [~typedef-名]被用于标识[~详述类型说明符]（[#dcl.type.elab]），类定义式
（[#class]），构造函数声明式（[#class.ctor]），或析构函数声明式（[#class.dtor]）
的主体，则程序非良构。
[end:note]

[begin:example]
[codeblock]
struct S {
  S();
  ~S();
};

typedef struct S T;

S a = T();                      // OK
struct T * p;                   // [:en] error [:zh_CN] 错误
[codeblock:end]
[end:example]

[para]
[:en] [%class name[![`typedef]]] [%enum name[![`typedef]]] [%class[!unnamed]]
An unnamed class or enumeration [$C] defined in a typedef declaration has the
first [~typedef-name] declared by the declaration to be of type [$C] as its
[+typedef name for linkage purposes] ([#basic.link]).
[:zh_CN] [%类名[![`typedef]]] [%枚举名[![`typedef]]] [%类[!无名～]]
typedef 声明式中定义的无名类或枚举 [$C]，该声明式所声明的第一个代表 [$C] 的
[~typedef-名]，是它的[+用于连接的 typedef 名]（[#basic.link]）。

[begin:note]
[:en] A typedef declaration involving a [~lambda-expression] does not itself define
the associated closure type, and so the closure type is not given a typedef name
for linkage purposes.
[:zh_CN] 涉及 [~lambda-表达式]的 typedef 声明式自身并不会定义其所关联的闭包类型，因而该
闭包类型并未为被赋予用于连接的 typedef 名。
[end:note]

[begin:example]
[codeblock]
typedef struct { } *ps, S;      // [:en] [`S] is the typedef name for linkage purposes \
                                [:zh_CN] [`S] 是用于连接的 typedef 名
typedef decltype([]{}) C;       // [:en] the closure type has no typedef name for linkage purposes \
                                [:zh_CN] 闭包类型没有用于连接的 typedef 名
[codeblock:end]
[end:example]

[para]
[:en] An unnamed class with a typedef name for linkage purposes shall not
[:zh_CN] 带有用于连接的 typedef 名的结构体不能

[list]
[item]
[:en@~] declare any members other than non-static data members, member
enumerations, or member classes,
[:zh_CN@~] 声明除了非静态数据成员，成员枚举，或成员类之外的任何成员，
[item]
[:en@~] have any base classes or default member initializers, or
[:zh_CN@~] 具有任意基类或默认成员初始化式，或者
[item]
[:en@~] contain a [~lambda-expression],
[:zh_CN@~] 包含 [~lambda-表达式]，
[list:end]

[:en@~] and all member classes shall also satisfy these requirements (recursively).
[:zh_CN@~] 并且其所有成员类也都应当（递归地）符合这些规定。

[begin:example]
[codeblock]
typedef struct {
  int f() {}
} X;                            // [:en] error: struct with typedef name for linkage has member functions \
                                [:zh_CN] 错误：带有用于连接的 typedef 名的结构体，具有成员函数
[codeblock:end]
[end:example]
