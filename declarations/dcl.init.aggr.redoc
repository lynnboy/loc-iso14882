[section#dcl.init.aggr
    [:en] Aggregates
    [:zh_CN] 聚合

[:en]
[%aggregate]
[%initialization[!aggregate]]
[%aggregate initialization]
[%initialization[!array]]
[%initialization[!class object]]
[%class object initialization[%constructor]]
[%[`{}][!initializer list]]
[:zh_CN]
[%聚合]
[%初始化[!聚合～]]
[%聚合初始化]
[%初始化[!数组～]]
[%初始化[!类对象～]]
[%类对象初始化[%构造函数]]
[%[`{}][!初始化式列表]]
]

[para]
[:en]
An [+aggregate] is an array or a class ([#class]) with
[:zh_CN]
[+聚合]是数组，或者符合以下条件的类（[#class]）：

[list]
[item]
[:en@~]
no user-declared or inherited constructors ([#class.ctor]),
[:zh_CN@~]
没有用户声明的或者继承的构造函数（[#class.ctor]），

[item]
[:en@~]
no private or protected direct non-static data members ([#class.access]),
[:zh_CN@~]
没有私有或受保护非静态数据成员（[#class.access]），

[item]
[:en@~]
no virtual functions ([#class.virtual]), and
[:zh_CN@~]
没有虚函数（[#class.virtual]），并且

[item]
[:en@~]
no virtual, private, or protected base classes ([#class.mi]).
[:zh_CN@~]
没有虚的，私有或受保护的基类（[#class.mi]）。
[list:end]

[begin:note]
[:en]
Aggregate initialization does not allow accessing protected and private base
class[='] members or constructors.
[:zh_CN]
聚合初始化中不允许访问受保护和私有基类的成员或构造函数。
[end:note]

[para]
[:en]
The [+elements[%aggregate[!elements]]] of an aggregate are:
[:zh_CN]
聚合的[+元素[%聚合[!元素]]]为：

[list]
[item]
[:en@~]
for an array, the array elements in increasing subscript order, or
[:zh_CN@~]
对于数组来说，为按下标增长顺序的各个数组元素，或者

[item]
[:en@~]
for a class, the direct base classes in declaration order, followed by the
direct non-static data members ([#class.mem]) that are not members of an
anonymous union, in declaration order.
[:zh_CN@~]
对于类来说，为按照声明顺序的各个直接基类，再跟着按照声明顺序的各个并非匿名联合体
的成员的直接非静态数据成员（[#class.mem]）。
[list:end]

[para]
[:en]
When an aggregate is initialized by an initializer list as specified in
[#dcl.init.list], the elements of the initializer list are taken as initializers
for the members of the aggregate.
[:zh_CN]
当用初始化式列表对聚合进行初始化时（按 [#dcl.init.list] 所述），初始化式列表中的
元素，就作为该聚合的每个成员的初始化式。

[:en]
The [+explicitly initialized elements[%explicitly initialized elements
[!aggregate]]] of the aggregate are determined as follows:
[:zh_CN]
聚合中[+显式初始化的元素[%显式初始化的元素[!聚合]]]按如下确定：

[list]
[item]
[:en]
If the initializer list is a brace-enclosed [~designated-initializer-list], the
aggregate shall be of class type, the [~identifier] in each [~designator] shall
name a direct non-static data member of the class, and the explicitly
initialized elements of the aggregate are the elements that are, or contain,
those members.
[:zh_CN]
如果初始化式列表是一个被花括号包围的[~定名初始化式列表]，则聚合应当是类类型，
各个[~定名符]中的[~标识符]应当指名该类的一个直接非静态数据成员，而该聚合显式
初始化的元素就是（或包含）这些成员。
[item]
[:en]
If the initializer list is a brace-enclosed [~initializer-list], the explicitly
initialized elements of the aggregate are the first [$n] elements of the
aggregate, where [$n] is the number of elements in the initializer list.
[:zh_CN]
如果初始化式列表是一个被花括号包围的[~初始化式列表]，则该聚合显式初始化的元素为
该聚合的前 [$n] 个元素，其中 [$n] 为初始化式列表的元素数量。
[item]
[:en]
Otherwise, the initializer list must be [`{}], and there are no explicitly
initialized elements.
[:zh_CN]
否则，初始化式列表必然为 [`{}]，且没有显式初始化的元素。
[list:end]

[para]
[:en]
For each explicitly initialized element:
[:zh_CN]
对于每个显式初始化的元素：

[list]
[item]
[:en]
If the element is an anonymous union member and the initializer list is a
brace-enclosed [~designated-initializer-list], the element is initialized by the
[~designated-initializer-list] [`{ ][^D][` }], where [^D] is the
[~designated-initializer-clause] naming a member of the anonymous union member.
[:zh_CN]
如果该元素是一个匿名联合体成员且初始化式列表是一个被花括号包围的
[~定名初始化式列表]，则该元素以[~定名初始化式列表] [`{ ][^D][` }] 来初始化，其中
[^D] 为指名匿名联合体成员的一个成员的[~定名初始化式子句]。

[:en]
There shall be only one such [~designated-initializer-clause].
[:zh_CN]
应当只有一个这样的[~定名初始化式子句]。

[begin:example]
[codeblock]
struct C {
  union {
    int a;
    const char* p;
  };
  int x;
} c = { .a = 1, .x = 3 };
[codeblock:end]

[:en]
initializes [`c.a] with 1 and [`c.x] with 3.
[:zh_CN]
将 [`c.a] 初始化为 1 并将 [`c.x] 初始化为 3。
[end:example]

[item]
[:en]
Otherwise, the element is copy-initialized from the corresponding
[~initializer-clause] or is initialized with the [~brace-or-equal-initializer]
of the corresponding [~designated-initializer-clause].
[:zh_CN]
否则，该元素以其所对应的[~初始化式子句]进行复制初始化，或以对应的
[~定名初始化式子句]的[~花括号或等号初始化式]进行初始化。

[:en]
If that initializer is of the form [~assignment-expression] or
[`= ][~assignment-expression] and a narrowing conversion ([#dcl.init.list]) is
required to convert the expression, the program is ill-formed.
[:zh_CN]
如果该初始化式的形式为“[~赋值表达式]”或“[`= ][~赋值表达式]”，并且需要对表达式
进行窄化转换（[#dcl.init.list]），则程序是非良构的。

[begin:note]
[:en]
If an initializer is itself an initializer list, the element is list-initialized,
which will result in a recursive application of the rules in this subclause if
the element is an aggregate.
[:zh_CN]
如果初始化式本身也是个初始化式列表，则该元素被列表初始化，并且当该元素为聚合时
导致递归地对其实施本子条款中的规则。
[end:note]

[begin:example]
[codeblock]
struct A {
  int x;
  struct B {
    int i;
    int j;
  } b;
} a = { 1, { 2, 3 } };
[codeblock:end]

[:en]
initializes [`a.x] with 1, [`a.b.i] with 2, [`a.b.j] with 3.
[:zh_CN]
把 [`a.x] 初始化为 1，[`a.b.i] 为 2，[`a.b.j] 为 3。

[codeblock]
struct base1 { int b1, b2 = 42; };
struct base2 {
  base2() {
    b3 = 42;
  }
  int b3;
};
struct derived : base1, base2 {
  int d;
};

derived d1{{1, 2}, {}, 4};
derived d2{{}, {}, 4};
[codeblock:end]

[:en]
initializes [`d1.b1] with 1, [`d1.b2] with 2, [`d1.b3] with 42, [`d1.d] with 4,
and [`d2.b1] with 0, [`d2.b2] with 42, [`d2.b3] with 42, [`d2.d] with 4.
[:zh_CN]
把 [`d1.b1] 初始化为 1，[`d1.b2] 初始化为 2，[`d1.b3] 初始化为 42，[`d1.d]
初始化为 4，而把 [`d2.b1] 初始化为 0，[`d2.b2] 初始化为 42，[`d2.b3] 初始化为
42，[`d2.d] 初始化为 4。
[end:example]
[list:end]

[para]
[:en]
For a non-union aggregate, each element that is not an explicitly initialized
element is initialized as follows:
[:zh_CN]
对于非联合体聚合，其每个并非显式初始化元素的元素按如下进行初始化：

[list]
[item]
[:en]
If the element has a default member initializer ([#class.mem]), the element is
initialized from that initializer.
[:zh_CN]
如果该元素带有默认成员初始化式（[#class.mem]），则该元素以该初始化式进行初始化。
[item]
[:en]
Otherwise, if the element is not a reference, the element is copy-initialized
from an empty initializer list ([#dcl.init.list]).
[:zh_CN]
否则，如果该元素不是引用，则该元素从一个空初始化式列表（[#dcl.init.list]）进行
复制初始化。
[item]
[:en]
Otherwise, the program is ill-formed.
[:zh_CN]
否则，程序非良构。
[list:end]

[:en]
If the aggregate is a union and the initializer list is empty, then
[:zh_CN]
如果该聚合为联合体且初始化式列表为空，则

[list]
[item]
[:en]
if any variant member has a default member initializer, that member is
initialized from its default member initializer;
[:zh_CN]
如果有任何可变成员带有默认成员初始化式，则该成员以其默认成员初始化式进行初始化。
[item]
[:en]
otherwise, the first member of the union (if any) is copy-initialized from an
empty initializer list.
[:zh_CN]
否则，该联合体的第一个成员（如果有）从一个空初始化式列表进行复制初始化。
[list:end]

[begin:example]
[codeblock]
struct S { int a; const char* b; int c; int d = b[a]; };
S ss = { 1, "asdf" };
[codeblock:end]

[:en]
initializes [`ss.a] with 1, [`ss.b] with [`"asdf"], [`ss.c] with the value of an
expression of the form [`int{}] (that is, [`0]), and [`ss.d] with the value of
[`ss.b`[ss.a`]] (that is, [`'s']), and in
[:zh_CN]
以 1 初始化 [`ss.a]，以 [`"asdf"] 初始化 [`ss.b]，以形式为 [`int{}] 的表达式
（即 [`0]）初始化 [`ss.c]，并以 [`ss.b`[ss.a`]] 的值（即 [`'s']）初始化 [`ss.d]，
而在

[codeblock]
struct X { int i, j, k = 42; };
X a[] = { 1, 2, 3, 4, 5, 6 };
X b[2] = { { 1, 2, 3 }, { 4, 5, 6 } };
[codeblock:end]

[:en]
[`a] and [`b] have the same value
[:zh_CN]
中，[`a] 和 [`b] 有相同的值。

[codeblock]
struct A {
  string a;
  int b = 42;
  int c = -1;
};
[codeblock:end]

[:en]
[`A{.c=21}] has the following steps:
[:zh_CN]
[`A{.c=21}] 分为以下步骤：

[list]
[item]
[:en] Initialize [`a] with [`{}]
[:zh_CN] 以 [`{}] 初始化 [`a]
[item]
[:en] Initialize [`b] with [`= 42]
[:zh_CN] 以 [`= 42] 初始化 [`b]
[item]
[:en] Initialize [`c] with [`= 21]
[:zh_CN] 以 [`= 21] 初始化 [`c]
[list:end]
[end:example]

[para]
[:en]
The initializations of the elements of the aggregate are evaluated in the
element order.
[:zh_CN] 聚合的各元素的初始化是以元素顺序求值的。

[:en]
That is, all value computations and side effects associated with a given element
are sequenced before those of any element that follows it in order.
[:zh_CN]
就是说，与某个给定元素相关联的所有值计算和副作用都按顺序早于按顺序跟在其后的任何
元素。

[para]
[:en]
An aggregate that is a class can also be initialized with a single expression
not enclosed in braces, as described in [#dcl.init].
[:zh_CN]
当聚合是类时，它还可用未被花括号包围的单个表达式初始化，如 [#dcl.init] 中所述。

[para]
[:en]
The destructor for each element of class type is potentially invoked
([#class.dtor]) from the context where the aggregate initialization occurs.
[:zh_CN]
在发生聚合初始化的语境中潜在调用类类型的各个元素的析构函数（[#class.dtor]）。

[begin:note]
[:en]
This provision ensures that destructors can be called for fully-constructed
subobjects in case an exception is thrown ([#except.ctor]).
[:zh_CN]
这条规定确保在抛出了异常的情况下可以为构造完毕的子对象调用其析构函数
（[#except.ctor]）。
[end:note]

[para]
[:en]
An array of unknown bound initialized with a brace-enclosed [~initializer-list]
containing [`n] [~initializer-clause]s is defined as having [`n] elements
([#dcl.array]).
[:zh_CN]
由花括号包围的包含 [`n] 个[~初始化式子句]的[~初始化式列表]所初始化的未知边界的
数组，被定义为具有 [`n] 个元素（[#dcl.array]）。

[begin:example]
[codeblock]
int x[] = { 1, 3, 5 };
[codeblock:end]

[:en]
declares and initializes [`x] as a one-dimensional array that has three elements
since no size was specified and there are three initializers.
[:zh_CN]
声明并初始化 [`x] 为具有三个元素的一维数组，因为并未指定大小但带有三个初始化式。
[end:example]

[:en]
An array of unknown bound shall not be initialized with an empty
[~braced-init-list] [`{}].[#:fn]
[:zh_CN]
未知边界的数组不能以空的[~花括号初始化列表] [`{}] 来初始化[#:fn]。

[note:foot]
[:en]
The syntax provides for empty [~braced-init-list]s, but nonetheless [=Cpp] does
not have zero length arrays.
[:zh_CN]
虽然语法支持空的[~花括号初始化列表]，但无论如何 [=Cpp] 中是没有零长度的数组的。
[note:end]

[begin:note]
[:en] A default member initializer does not determine the bound for a member
array of unknown bound.
[:zh_CN] 默认成员初始化式不能决定未知边界的成员数组的边界。

[:en] Since the default member initializer is ignored if a suitable
[~mem-initializer] is present ([#class.base.init]), the default member
initializer is not considered to initialize the array of unknown bound.
[:zh_CN] 由于一旦有适当的[~成员初始化式]时就会忽略默认成员初始化式
（[#class.base.init]），因此不能认为默认成员初始化式初始化了未知边界的数组。

[begin:example]
[codeblock]
struct S {
  int y[] = { 0 };          // [:en] error: non-static data member of incomplete type \
                            [:zh_CN] 错误：不完整类型的非静态数据成员
};
[codeblock:end]
[end:example]
[end:note]

[para]
[begin:note]
[:en]
Static data members, non-static data members of anonymous union members, and
unnamed bit-fields are not considered elements of the aggregate.
[:zh_CN]
静态数据成员，匿名联合体成员的非静态数据成员，和无名位字段并不被当作是聚合的元素。

[begin:example]
[codeblock]
struct A {
  int i;
  static int s;
  int j;
  int :17;
  int k;
} a = { 1, 2, 3 };
[codeblock:end]

[:en]
Here, the second initializer 2 initializes [`a.j] and not the static data member
[`A::s], and the third initializer 3 initializes [`a.k] and not the unnamed
bit-field before it.
[:zh_CN]
此处，第二个初始化式 2 初始化了 [`a.j] 而不是静态数据成员 [`A::s]，而第三个初始
化式 3 初始化了 [`a.k] 而不是它前面的无名位字段。
[end:example]
[end:note]

[para]
[:en]
An [~initializer-list] is ill-formed if the number of [~initializer-clause]s 
exceeds the number of elements of the aggregate.
[:zh_CN]
若[~初始化式子句]的数量超过聚合的元素数量，则其[~初始化式列表]就是非良构的。

[begin:example]
[codeblock]
char cv[4] = { 'a', 's', 'd', 'f', 0 };     // [:en] error \
                                            [:zh_CN] 错误
[codeblock:end]

[:en]
is ill-formed.
[:zh_CN] 是非良构的。
[end:example]

[para]
[:en]
If a member has a default member initializer and a potentially-evaluated
subexpression thereof is an aggregate initialization that would use that default
member initializer, the program is ill-formed.
[:zh_CN]
如果某个成员具有默认成员初始化式，且其潜在求值的子表达式是使用该默认成员初始化式
的聚合初始化，则程序非良构。

[begin:example]
[codeblock]
struct A;
extern A a;
struct A {
  const A& a1 { A{a,a} };       // OK
  const A& a2 { A{} };          // [:en] error \
                                [:zh_CN] 错误
};
A a{a,a};                       // OK

struct B {
  int n = B{}.n;                // [:en] error \
                                [:zh_CN] 错误
};
[codeblock:end]
[end:example]

[para]
[:en]
If an aggregate class [`C] contains a subaggregate element [`e] with no elements,
the [~initializer-clause] for [`e] shall not be omitted from an
[~initializer-list] for an object of type [`C] unless the [~initializer-clause]s
for all elements of [`C] following [`e] are also omitted.
[:zh_CN]
若聚合类 [`C] 所包含的某个子聚合元素 [`e] 不含有任何元素，则在类型 [`C] 的对象的
[~初始化式列表]之中不能省略 [`e] 的[~初始化式子句]，除非 [`C] 中跟在 [`e] 后面的
所有元素的[~初始化式子句]也都被省略掉。

[begin:example]
[codeblock]
struct S { } s;
struct A {
  S s1;
  int i1;
  S s2;
  int i2;
  S s3;
  int i3;
} a = {
  { },              // [:en] Required initialization \
                    [:zh_CN] 所需要的初始化
  0,
  s,                // [:en] Required initialization \
                    [:zh_CN] 所需要的初始化
  0
};                  // [:en] Initialization not required for [`A::s3] because [`A::i3] is also not initialized \
                    [:zh_CN] 由于 [`A::i3] 也未被初始化，所以并不需要初始化 [`A::s3]
[codeblock:end]
[end:example]

[para]
[:en]
When initializing a multi-dimensional array, the [~initializer-clause]s
initialize the elements with the last (rightmost) index of the array varying the
fastest ([#dcl.array]).
[:zh_CN]
当初始化多维数组时，用[~初始化式子句]初始化其元素时数组的最末（最右）索引变化
最快（[#dcl.array]）。

[begin:example]
[codeblock]
int x[2][2] = { 3, 1, 4, 2 };
[codeblock:end]

[:en@~]
initializes [`x`[0`]`[0`]] to [`3], [`x`[0`]`[1`]] to [`1], [`x`[1`]`[0`]] to
[`4], and [`x`[1`]`[1`]] to [`2].
[:zh_CN@~]
初始化 [`x`[0`]`[0`]] 为 [`3]，[`x`[0`]`[1`]] 为 [`1]，[`x`[1`]`[0`]] 为 [`4]，
而 [`x`[1`]`[1`]] 为 [`2]。

[:en]
On the other hand,
[:zh_CN]
另一方面，

[codeblock]
float y[4][3] = {
  { 1 }, { 2 }, { 3 }, { 4 }
};
[codeblock:end]

[:en@~]
initializes the first column of [`y] (regarded as a two-dimensional array) and
leaves the rest zero.
[:zh_CN@~]
初始化 [`y] 的第一列（将其当作二维数组）而把其他列留为零。
[end:example]

[para]
[:en]
Braces can be elided in an [~initializer-list] as follows.
[:zh_CN]
可以按如下省略[~初始化式列表]中的花括号。

[:en]
If the [~initializer-list] begins with a left brace, then the succeeding
comma-separated list of [~initializer-clause]s initializes the elements of a
subaggregate; it is erroneous for there to be more [~initializer-clause]s than
elements.
[:zh_CN]
若[~初始化式列表]开始于左花括号，则后继的[~初始化式子句]的逗号分隔列表初始化某个
子聚合的元素；[~初始化式子句]比元素多是错误的。

[:en]
If, however, the [~initializer-list] for a subaggregate does not begin with a
left brace, then only enough [~initializer-clause]s from the list are taken to
initialize the elements of the subaggregate; any remaining
[~initializer-clause]s are left to initialize the next element of the aggregate
of which the current subaggregate is an element.
[:zh_CN]
然而，若子聚合的[~初始化式列表]并不开始于左花括号，则仅从该列表中获得足够的
[~初始化式子句]用于初始化该子聚合的各个元素；剩余的所有[~初始化式子句]，都留给
以当前子聚合为元素的聚合中的下一个元素进行初始化。

[begin:example]
[codeblock]
float y[4][3] = {
  { 1, 3, 5 },
  { 2, 4, 6 },
  { 3, 5, 7 },
};
[codeblock:end]

[:en]
is a completely-braced initialization:
[:zh_CN]
是带有完整花括号的初始化：

[:en]
1, 3, and 5 initialize the first row of the array [`y`[0`]], namely
[`y`[0`]`[0`]], [`y`[0`]`[1`]], and [`y`[0`]`[2`]].
[:zh_CN]
1，3，和 5 初始化了数组的第一行 [`y`[0`]]，亦即 [`y`[0`]`[0`]]、[`y`[0`]`[1`]]
和 [`y`[0`]`[2`]]。

[:en]
Likewise the next two lines initialize [`y`[1`]] and [`y`[2`]].
[:zh_CN]
相似地，下两行初始化了 [`y`[1`]] 和 [`y`[2`]]。

[:en]
The initializer ends early and therefore [`y`[3`]]s elements are initialized as
if explicitly initialized with an expression of the form [`float()], that is,
are initialized with [`0.0].
[:zh_CN]
该初始化较早地结束了，因此 [`y`[3`]] 的元素的初始化如同被显式地以形式为
[`float()] 的表达式初始化，也就是被初始化为 [`0.0]。

[:en]
In the following example, braces in the [~initializer-list] are elided; however
the [~initializer-list] has the same effect as the completely-braced
[~initializer-list] of the above example,
[:zh_CN]
在下面的例子中，[~初始化式列表]中的花括号被省略了；然而其[~初始化式列表]与上面
例子中的带有完整花括号的[~初始化式列表]的效果相同，

[codeblock]
float y[4][3] = {
  1, 3, 5, 2, 4, 6, 3, 5, 7
};
[codeblock:end]

[:en]
The initializer for [`y] begins with a left brace, but the one for [`y`[0`]]
does not, therefore three elements from the list are used.
[:zh_CN]
[`y] 的初始化式开始于左花括号，但 [`y`[0`]] 的却不是，因此使用了列表中的三个元素。

[:en]
Likewise the next three are taken successively for [`y`[1`]] and [`y`[2`]].
[:zh_CN]
相似地，[`y`[1`]] 和 [`y`[2`]] 相继获得三个初始化式。
[end:example]

[para]
[:en]
All implicit type conversions ([#conv]) are considered when initializing the
element with an [~assignment-expression].
[:zh_CN]
当用[~赋值表达式]来初始化一个元素时，所有隐式类型转换（[#conv]）都要考虑。

[:en]
If the [~assignment-expression] can initialize an element, the element is
initialized.
[:zh_CN]
若该[~赋值表达式]可以初始化这个元素，则该元素被初始化。

[:en]
Otherwise, if the element is itself a subaggregate, brace elision is assumed and
the [~assignment-expression] is considered for the initialization of the first
element of the subaggregate.
[:zh_CN]
否则，若该元素自身为子聚合，则假设省略了花括号且该[~赋值表达式]被当作用于该子
聚合的第一个元素的初始化。

[begin:note]
[:en]
As specified above, brace elision cannot apply to subaggregates with no elements;
an [~initializer-clause] for the entire subobject is required.
[:zh_CN]
正如上文所述，花括号省略是不能对不含有任何元素的子聚合实施的；需要为整个子对象
提供一个[~初始化式子句]。
[end:note]

[para:~]
[begin:example]
[codeblock]
struct A {
  int i;
  operator int();
};
struct B {
  A a1, a2;
  int z;
};
A a;
B b = { 4, a, a };
[codeblock:end]

[:en]
Braces are elided around the [~initializer-clause] for [`b.a1.i].
[:zh_CN]
[`b.a1.i] 的[~初始化式子句]周围的花括号被省略了。

[:en]
[`b.a1.i] is initialized with 4, [`b.a2] is initialized with [`a], [`b.z] is
initialized with whatever [`a.operator int()] returns.
[:zh_CN]
[`b.a1.i] 被初始化为 4，[`b.a2] 被初始化为 [`a]，[`b.z] 被初始化为
[`a.operator int()] 所返回的结果。
[end:example]

[para]
[%  [:en] initialization[!array of class objects]
    [:zh_CN] 初始化[!类对象的数组] ]
[begin:note]
[:en]
An aggregate array or an aggregate class can contain elements of a class type
with a user-declared constructor ([#class.ctor]).
[:zh_CN]
聚合数组或聚合类可以包含带有用户声明的构造函数（[#class.ctor]）的类类型的元素。

[:en]
Initialization of these aggregate objects is described in [#class.expl.init].
[:zh_CN]
这些聚合对象的初始化在 [#class.expl.init] 中描述。
[end:note]

[para]
[begin:note]
[:en]
Whether the initialization of aggregates with static storage duration is static
or dynamic is specified in [#basic.start.static], [#basic.start.dynamic], and
[#stmt.dcl].
[:zh_CN]
[#basic.start.static]，[#basic.start.dynamic]，和 [#stmt.dcl] 中说明具有静态
存储期的聚合的初始化需要静态进行还是动态进行。
[end:note]

[para]
[:en]
[%initialization[![`union]]]
When a union is initialized with an initializer list, there shall not be more
than one explicitly initialized element.
[:zh_CN]
[%初始化[![`union]]]
如果联合体以初始化式列表进行初始化，则显式初始化的元素不应当超过一个。

[begin:example]
[codeblock]
union u { int a; const char* b; };
u a = { 1 };
u b = a;
u c = 1;                        // [:en] error \
                                [:zh_CN] 错误
u d = { 0, "asdf" };            // [:en] error \
                                [:zh_CN] 错误
u e = { "asdf" };               // [:en] error \
                                [:zh_CN] 错误
u f = { .b = "asdf" };
u g = { .a = 1, .b = "asdf" };  // [:en] error \
                                [:zh_CN] 错误
[codeblock:end]
[end:example]

[para]
[begin:note]
[:en]
As described above, the braces around the [~initializer-clause] for a union
member can be omitted if the union is a member of another aggregate.
[:zh_CN]
如上所述，当联合体是另一个聚合的成员时，可以省略联合体成员的[~初始化式子句]外围
的花括号。
[end:note]
