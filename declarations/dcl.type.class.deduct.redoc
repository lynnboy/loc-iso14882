[section#dcl.type.class.deduct
    [:en] Deduced class template specialization types
    [:zh_CN] 推断的类模板特例类型
[%  [:en] deduction[!class template arguments]
    [:zh_CN] 推断[!类模板实参～] ]
]

[para]
[:en]
If a placeholder for a deduced class type appears as a [~decl-specifier] in the
[~decl-specifier-seq] of an initializing declaration ([#dcl.init]) of a
variable, the declared type of the variable shall be [$cv] [`T], where [`T] is
the placeholder.
[:zh_CN]
当针对被推断的类类型的占位符被用作某个变量的初始化声明式（[#dcl.init]）的[~声明
说明符序列]中的一个[~声明说明符]时，该变量的声明类型应当为 [$cv] [`T]，其中 [`T]
为该占位符。

[enter:example]
[codeblock]
template <class ...T> struct A {
  A(T...) {}
};
A x[29]{};    // [:en] error: no declarator operators allowed
              // [|:zh_CN] 错误：不允许使用声明符运算符
const A& y{}; // [:en] error: no declarator operators allowed
              // [|:zh_CN] 错误：不允许使用声明符运算符
[codeblock:end]
[exit:example]

[:en]
The placeholder is replaced by the return type of the function selected by
overload resolution for class template deduction ([#over.match.class.deduct]).
[:zh_CN]
这个占位符由通过对类模板推断所进行的重载决议所选择的函数的返回类型所替换
（[#over.match.class.deduct]）。

[:en]
If the [~decl-specifier-seq] is followed by an [~init-declarator-list] or
[~member-declarator-list] containing more than one [~declarator], the type that
replaces the placeholder shall be the same in each deduction.
[:zh_CN]
若该[~声明说明符序列]后面跟着一个包含了多个[~声明符]的[~初始化声明符列表]或
[~成员声明符列表]，则每次推断中用以替换占位符的类型应当相同。

[para]
[:en]
A placeholder for a deduced class type can also be used in the
[~type-specifier-seq] in the [~new-type-id] or [~type-id] of a [~new-expression]
([#expr.new]), as the [~simple-type-specifier] in an explicit type conversion
(functional notation) ([#expr.type.conv]), or as the [~type-specifier] in the
[~parameter-declaration] of a [~template-parameter] ([#temp.param]).
[:zh_CN]
针对被推断类类型的占位符，还可以用在 [~new-表达式]的 [~new-类型标识]或[~类型
标识]中的[~类型说明符序列]之中（[#expr.new]），用作显式类型转换（函数式记法）
中的[~简单类型说明符]（[#expr.type.conv]），或者用作[~模板形参]的[~形参声明式]
中的[~类型说明符]（[#temp.param]）。

[:en]
A placeholder for a deduced class type shall not appear in any other context.
[:zh_CN]
针对被推断类类型的占位符不能在其他任何语境中出现。

[para]
[enter:example]
[codeblock]
template<class T> struct container {
    container(T t) {}
    template<class Iter> container(Iter beg, Iter end);
};
template<class Iter>
container(Iter b, Iter e) -> container<typename std::iterator_traits<Iter>::value_type>;
std::vector<double> v = { /* ... */};

container c(7);                         // [:en] OK, deduces [`int] for [`T]
                                        // [|:zh_CN] OK，为 [`T] 推断出 [`int]
auto d = container(v.begin(), v.end()); // [:en] OK, deduces [`double] for [`T]
                                        // [|:zh_CN] OK，为 [`T] 推断出 [`double]
container e{5, 6};                      // [:en] error, [`int] is not an iterator
                                        // [|:zh_CN] 错误，[`int] 并非迭代器
[codeblock:end]
[exit:example]
