[section#dcl.type.splice
    [:en] Type splicing
    [:zh_CN] 类型拼接
]

[syntax]
[rule splice-type-specifier [:zh_CN] 拼接类型说明符 ]
    [| [`:opt:key typename] splice-specifier ]
    [| [`:opt:key typename] splice-specialization-specifier ]
[rule:end]
[syntax:end]

[para]
[:en] A [~splice-specifier] or [~splice-specialization-specifier] immediately
followed by [`::] is never interpreted as part of a [~splice-type-specifier].
[:zh_CN] [~拼接说明符]或[~拼接特例说明符]后面紧跟着[`::]时，永远不会被解释为
[~拼接类型说明符]的一部分。

[:en] A [~splice-specifier] or [~splice-specialization-specifier] not preceded
by [`:key typename] is only interpreted as a [~splice-type-specifier]
within a type-only context ([#temp.res.general]).
[:zh_CN] [~拼接说明符]或[~拼接特例说明符]前面没有 [`:key typename] 时，仅在
仅限类型语境（[#temp.res.general]）中被解释为[~拼接类型说明符]。

[begin:example]
[codeblock]
template<std::meta::info R> void tfn() {
  typename [:R:]::type m;       // [:en] OK, [`:key typename] applies to the qualified name \
                                [:zh_CN] OK，[`:key typename] 适用于限定名
}

struct S { using type = int; };
void fn() {
  [:^^S::type:] *var;           // [:en] error: [``[:^^ S::type:`]] is an expression \
                                [:zh_CN] 错误：[``[:^^ S::type:`]] 是表达式
  typename [:^^S::type:] *var;  // [:en] OK, declares variable with type [`int*] \
                                [:zh_CN] OK，声明变量类型为 [`int*]
}

using alias = [:^^S::type:];    // [:en] OK, type-only context [:zh_CN] OK，仅限类型语境
[codeblock:end]
[end:example]

[para]
[:en] For a [~splice-type-specifier] of the form [`:opt:key typename] [~splice-specifier],
the [~splice-specifier] shall designate a type, a class template, or an alias template.
[:zh_CN] 对于形式为“[`:opt:key typename] [~拼接说明符]”的[~拼接类型说明符]，
其[~拼接说明符]应指定一个类型、类模板或别名模板。

[:en] The [~splice-type-specifier] designates the same entity as the [~splice-specifier].
[:zh_CN] 该[~拼接类型说明符]指定与[~拼接说明符]相同的实体。

[para]
[:en] For a [~splice-type-specifier] of the form
[`:opt:key typename] [~splice-specialization-specifier], the [~splice-specifier]
of the [~splice-specialization-specifier] shall designate a template [`T]
that is either a class template or an alias template.
[:zh_CN] 对于形式为“[`:opt:key typename] [~拼接特例说明符]”的[~拼接类型说明符]，
其[~拼接特例说明符]的[~拼接说明符]应指定一个模板 [`T]，该模板要么是类模板，要么是别名模板。

[:en] The [~splice-type-specifier] designates the specialization of [`T] corresponding
to the template argument list of the [~splice-specialization-specifier].
[:zh_CN] 该[~拼接类型说明符]指定与[~拼接特例说明符]的模板实参列表对应的 [`T] 的特例。
