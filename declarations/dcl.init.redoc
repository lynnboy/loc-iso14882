[section#dcl.init
    [:en] Initializers
    [:zh_CN] 初始化式

[%:begin#initialization
    [:en] initialization
    [:zh_CN] 初始化
]
]

[para]
[:en]
The process of initialization described in this subclause applies to all
initializations regardless of syntactic context, including the initialization of
a function parameter ([#expr.call]), the initialization of a return value
([#stmt.return]), or when an initializer follows a declarator.
[:zh_CN]
本子条款中说明的初始化过程适用于所有的初始化，而无论其语法语境是什么，这包括对
函数形参的初始化（[#expr.call]），对返回值的初始化（[#stmt.return]），以及声明符
后面跟着初始化式等情况。

[syntax]
[rule initializer [:zh_CN] 初始化式 ]
    [| brace-or-equal-initializer ]
    [| [`(] expression-list [`)] ]
[rule:end]

[rule brace-or-equal-initializer [:zh_CN] 花括号或等号初始化式 ]
    [| [`=] initializer-clause ]
    [| braced-init-list ]
[rule:end]

[rule initializer-clause [:zh_CN] 初始化式子句 ]
    [| assignment-expression ]
    [| braced-init-list ]
[rule:end]

[rule braced-init-list [:zh_CN] 花括号初始化列表 ]
    [| [`{] initializer-list [`:opt ,] [`}] ]
    [| [`{] designated-initializer-list [`:opt ,] [`}] ]
    [| [`{] [`}] ]
[rule:end]

[rule initializer-list [:zh_CN] 初始化式列表 ]
    [| initializer-clause [`:opt ...] ]
    [| initializer-list [`,] initializer-clause [`:opt ...] ]
[rule:end]

[rule designated-initializer-list [:zh_CN] 定名初始化式列表 ]
    [| designated-initializer-clause ]
    [| designated-initializer-list [`,] designated-initializer-clause [`:opt ...] ]
[rule:end]

[rule designated-initializer-clause [:zh_CN] 定名初始化式子句 ]
    [| designator brace-or-equal-initializer ]
[rule:end]

[rule designator [:zh_CN] 定名符 ]
    [| [`.] identifier ]
[rule:end]

[rule expr-or-braced-init-list [:zh_CN] 表达式或花括号初始化列表 ]
    [| expression ]
    [| braced-init-list ]
[rule:end]
[syntax:end]

[begin:note]
[:en]
The rules in this subclause apply even if the grammar permits only the
[~brace-or-equal-initializer] form of [~initializer] in a given context.
[:zh_CN]
即便在给定语境中文法仅允许[~花括号或等号初始化式]形式的[~初始化式]，本子条款中的
规则也同样适用。
[end:note]

[para]
[:en]
Except for objects declared with the [`constexpr] specifier, for which see
[#dcl.constexpr], an [~initializer] in the definition of a variable can consist
of arbitrary
[%initialization[!automatic object]] [%initialization[![`static] object]]
expressions involving literals and previously declared variables and functions,
regardless of the variable[=']s storage duration.
[:zh_CN]
除了以 [`constexpr] 声明的对象（参见 [#dcl.constexpr]）之外，变量的定义式中的
[~初始化式]，[%初始化[!自动对象]] [%初始化[![`static] 对象]]可以由涉及字面量和
之前声明过的变量和函数的任意表达式构成，并与该变量的存储期无关。

[begin:example]
[codeblock]
int f(int);
int a = 2;
int b = f(a);
int c(b);
[codeblock:end]
[end:example]

[para]
[begin:note]
[:en]
Default arguments are more restricted; see [#dcl.fct.default].
[:zh_CN]
默认实参表达式受到更多的限制；参见 [#dcl.fct.default]。
[end:note]

[para]
[begin:note]
[:en]
The order of initialization of variables with static storage duration is
described in [#basic.start] and [#stmt.dcl].
[:zh_CN]
具有静态存储期的变量的初始化顺序在 [#basic.start] 和 [#stmt.dcl] 中说明。
[end:note]

[para]
[:en]
A declaration of a block-scope variable with external or internal linkage that
has an [~initializer] is ill-formed.
[:zh_CN]
具有外部或内部连接的块作用域变量的带有[~初始化式]的声明式是非良构的。

[para]
[:en]
[%initialization[![`static] object]] [%initialization[!default]]
[%variable[!indeterminate uninitialized]]
[%initialization[!zero-initialization]]
To [+zero-initialize[%zero-initialization]] an object or reference of type [`T]
means:
[:zh_CN]
[%初始化[![`static] 对象]] [%初始化[!默认～]]
[%变量[!不确定的未初始化～]]
[%初始化[!零初始化]]
[`T] 类型的对象或引用的[+零初始化]的含义是：

[list]
[item]
[:en]
if [`T] is a scalar type ([#basic.types]), the object is initialized to the
value obtained by converting the integer literal [`0] (zero) to [`T];
[#:note#fn:$1]
[:zh_CN]
若 [`T] 为标量类型（[#basic.types]），则对象被设置为将整型字面量 [`0]（零）转换
为 [`T] 所获得的值；[#:note#fn:$1]

[note:foot#fn:$1]
[:en]
As specified in [#conv.ptr], converting an integer literal whose value is [`0]
to a pointer type results in a null pointer value.
[:zh_CN]
如 [#conv.ptr] 所述，把值为 [`0] 的整型字面量转换为指针类型时产生空指针值。
[note:end]

[item]
[:en]
if [`T] is a (possibly cv-qualified) non-union class type, its padding bits
([#basic.types]) are initialized to zero bits and each non-static data member,
each non-virtual base class subobject, and, if the object is not a base class
subobject, each virtual base class subobject is zero-initialized;
[:zh_CN]
若 [`T] 为（可能被 cv 限定的）非联合体类类型，则其填充位（[#basic.types]）均被
初始化为零位，且其每个非静态数据成员，每个非虚基类子对象，以及当该对象不是基类
子对象时，其每个虚基类子对象，都被零初始化；

[item]
[:en]
if [`T] is a (possibly cv-qualified) union type, its padding bits
([#basic.types]) are initialized to zero bits and the object[=']s first
non-static named data member is zero-initialized;
[:zh_CN]
若 [`T] 为（可能被 cv 限定的）联合体类型，则其填充位（[#basic.types]）均被初始化
为零位，且对象的第一个非静态具名数据成员被零初始化；

[item]
[:en]
if [`T] is an array type, each element is zero-initialized;
[:zh_CN]
若 [`T] 为数组类型，则其每个元素都被零初始化；

[item]
[:en]
if [`T] is a reference type, no initialization is performed.
[:zh_CN]
若 [`T] 为引用类型，则不进行初始化。
[list:end]

[para]
[:en]
To [+default-initialize[%default-initialization]] an object of type [`T] means:
[:zh_CN]
[`T] 类型的对象的[+默认初始化]的含义是：

[list]
[item]
[:en]
If [`T] is a (possibly cv-qualified) class type ([#class]), constructors
are considered.
[:zh_CN]
若 [`T] 为（可能被 cv 限定的）类类型（[#class]），则考察期构造函数。

[:en]
The applicable constructors are enumerated ([#over.match.ctor]), and the best
one for the [~initializer] [`()] is chosen through overload resolution
([#over.match]).
[:zh_CN]
对所有可用的构造函数进行列举（[#over.match.ctor]），并通过重载决议
（[#over.match]）为初始化式 [`()] 选择最佳的一个。

[:en]
The constructor thus selected is called, with an empty argument list, to
initialize the object.
[:zh_CN]
所选择的构造函数被以空实参列表进行调用，以初始化该对象。

[item]
[:en]
If [`T] is an array type, each element is default-initialized.
[:zh_CN]
若 [`T] 为数组类型，则其每个元素进行默认初始化。

[item]
[:en]
Otherwise, no initialization is performed.
[:zh_CN]
否则，不进行初始化。
[list:end]

[:en]
A class type [`T] is [+const-default-constructible] if default-initialization of
[`T] would invoke a user-provided constructor of [`T] (not inherited from a base
class) or if
[:zh_CN]
类类型 [`T] 为[+可 const 默认构造的]，含义为 [`T] 的默认初始化将调用 [`T] 的某个
用户提供的构造函数（并非继承于某个基类），或者满足如下条件：

[list]
[item]
[:en]
each direct non-variant non-static data member [`M] of [`T] has a default member
initializer or, if [`M] is of class type [`X] (or array thereof), [`X] is
const-default-constructible,
[:zh_CN]
[`T] 的每个直接的非可变非静态数据成员 [`M]都带有默认成员初始化式，或者当 [`M] 为
类类型 [`X]（或其数组）时，[`X] 是可 const 默认构造的，

[item]
[:en]
if [`T] is a union with at least one non-static data member, exactly one variant
member has a default member initializer,
[:zh_CN]
若 [`T] 是带有至少一个非静态数据成员的联合体，则恰好有一个可变成员带有默认成员
初始化式，

[item]
[:en]
if [`T] is not a union, for each anonymous union member with at least one
non-static data member (if any), exactly one non-static data member has a
default member initializer, and
[:zh_CN]
若 [`T] 不是联合体，则每个带有至少一个非静态数据成员的匿名联合体成员（如果有），
都恰好有一个非静态数据成员带有默认成员初始化式，并且

[item]
[:en]
each potentially constructed base class of [`T] is const-default-constructible.
[:zh_CN]
[`T] 的每个潜在构造的基类都是可 const 默认构造的。
[list:end]

[:en]
If a program calls for the default initialization of an object of a
const-qualified type [`T], [`T] shall be a const-default-constructible class
type or array thereof.
[:zh_CN]
如果程序对具有 const 限定的类型 [`T] 的对象进行默认初始化，那么 [`T] 应当为可
const 默认构造的类类型或其数组。

[para]
[:en]
To [+value-initialize[%value-initialization]] an object of type [`T] means:
[:zh_CN]
[`T] 类型的对象的[+值初始化]的含义是：

[list]
[item]
[:en]
if [`T] is a (possibly cv-qualified) class type ([#class]) with either no
default constructor ([#class.default.ctor]) or a default constructor that is
user-provided or deleted, then the object is default-initialized;
[:zh_CN]
若 [`T] 为（可能被 cv 限定的）类类型（[#class]），且要么没默认构造函数
（[#class.default.ctor]），要么带有用户提供的或弃置的默认构造函数，则对象进行
值初始化；

[item]
[:en]
if [`T] is a (possibly cv-qualified) class type without a user-provided or
deleted default constructor, then the object is zero-initialized and the
semantic constraints for default-initialization are checked, and if [`T] has a
non-trivial default constructor, the object is default-initialized;
[:zh_CN]
若 [`T] 为（可能被 cv 限定的）类类型，且不带有用户提供的或弃置的默认构造函数，则
该对象进行零初始化并进行默认初始化的语义约束检查，而当 [`T] 带有非平凡默认构造
函数时，该对象进行默认初始化；

[item]
[:en]
if [`T] is an array type, then each element is value-initialized;
[:zh_CN]
若 [`T] 为数组类型，则其每个元素都被值初始化；

[item]
[:en]
otherwise, the object is zero-initialized.
[:zh_CN]
否则，该对象被零初始化
[list:end]

[para]
[:en]
A program that calls for default-initialization or value-initialization of an
entity of reference type is ill-formed.
[:zh_CN]
试图对引用类型的实体进行默认初始化或值初始化的程序是非良构的。

[para]
[begin:note]
[:en]
For every object of static storage duration, static initialization
([#basic.start.static]) is performed at program startup before any other
initialization takes place.
[:zh_CN]
对于每个静态存储期的对象，都在程序启动时发生任何其他初始化之前进行静态初始化
（[#basic.start.static]）。

[:en]
In some cases, additional initialization is done later.
[:zh_CN]
某些情况下，稍后还进行额外的初始化。
[end:note]

[para]
[:en]
An object whose initializer is an empty set of parentheses, i.e., [`()], shall
be value-initialized.
[:zh_CN]
初始化式为一组空括号（即 [`()]）的对象，应当进行值初始化。

[para:~]
[begin:note]
[:en]
[%ambiguity[!function declaration]]
Since [`()] is not permitted by the syntax for [~initializer],
[:zh_CN]
[%歧义[!函数声明式]]
由于[~初始化式]的语法中不允许 [`()]，故

[codeblock]
X a();
[codeblock:end]

[:en@~]
is not the declaration of an object of class [`X], but the declaration of a
function taking no argument and returning an [`X].
[:zh_CN@~]
并不是类 [`X] 的对象的声明式，而是不获取实参而返回 [`X] 的函数的声明式。

[:en]
The form [`()] is permitted in certain other initialization contexts
([#expr.new], [#expr.type.conv], [#class.base.init]).
[:zh_CN]
其他的特定初始化语境中允许 [`()] 的形式（[#expr.new]，[#expr.type.conv]，
[#class.base.init]）。
[end:note]

[para]
[:en]
If no initializer is specified for an object, the object is default-initialized.
[:zh_CN]
若未对对象指定初始化式，则该对象被默认初始化。

[para]
[:en]
[%initialization[!class member]]
An initializer for a static member is in the scope of the member[=']s class.
[:zh_CN]
[%初始化[!类成员的～]]
静态成员的初始化式处于该成员的类的作用域中。

[begin:example]
[codeblock]
int a;

struct X {
  static int a;
  static int b;
};

int X::a = 1;
int X::b = a;                   // [`X::b = X::a]
[codeblock:end]
[end:example]

[para]
[:en]
If the entity being initialized does not have class type, the [~expression-list]
in a parenthesized initializer shall be a single expression.
[:zh_CN]
如果所初始化的实体不具有类类型，则带括号的初始化式中的[~表达式列表]应当是单个
表达式。

[para]
[:en]
[%initialization[!copy]] [%initialization[!direct]]
The initialization that occurs in the [`=] form of a
[~brace-or-equal-initializer] or [~condition] ([#stmt.select]), as well as in
argument passing, function return, throwing an exception ([#except.throw]),
handling an exception ([#except.handle]), and aggregate member initialization
([#dcl.init.aggr]), is called [+copy-initialization].
[:zh_CN]
[%初始化[!复制～]] [%初始化[!直接～]]
发生于 [`=] 形式的[~花括号或等号初始化式]或[~条件]（[#stmt.select]）中，以及
发生于实参传递，函数返回，异常的抛出（[#except.throw]），异常的处理
（[#except.handle]），以及聚合成员初始化（[#dcl.init.aggr]）中初始化，被称为
[+复制初始化]。

[begin:note]
[:en]
Copy-initialization may invoke a move ([#class.copy.ctor]).
[:zh_CN]
复制初始化可能执行移动操作（[#class.copy.ctor]）。
[end:note]

[para]
[:en]
The initialization that occurs
[:zh_CN]
发生于以下情况中的初始化

[list]
[item]
[:en@~] for an [~initializer] that is a parenthesized [~expression-list] or a
[~braced-init-list],
[:zh_CN@~] 作为带有括号的[~表达式列表]或者[~花括号初始化列表]的[~初始化式]，
[item]
[:en@~] for a [~new-initializer] ([#expr.new]),
[:zh_CN@~] [~new-初始化式]（[#expr.new]），
[item]
[:en@~] in a [`static_cast] expression ([#expr.static.cast]),
[:zh_CN@~] [`static_cast] 表达式（[#expr.static.cast]）中，
[item]
[:en@~] in a functional notation type conversion ([#expr.type.conv]), and
[:zh_CN@~] 函数式写法的类型转换（[#expr.type.conv]）中，以及
[item]
[:en@~] in the [~braced-init-list] form of a [~condition]
[:zh_CN@~] 构成某个[~条件]的[~花括号初始化列表]中
[list:end]

[:en@~] is called [+direct-initialization].
[:zh_CN@~] 被称为[+直接初始化]。

[para]
[:en]
The semantics of initializers are as follows.
[:zh_CN]
初始化式的语义如下。

[:en]
The [%type[!destination]] [+:% destination type] is the type of the object or
reference being initialized and the [+:% source type] is the type of the
initializer expression.
[:zh_CN]
被初始化的对象或引用的类型是[%类型[!目标～]][+:% 目标类型]，而初始化式表达式的
类型为[+:% 源类型]。

[:en]
If the initializer is not a single (possibly parenthesized) expression, the
source type is not defined.
[:zh_CN]
当初始化式不是单个（可能带有括号的）表达式时，并未定义源类型。

[list]
[item]
[:en]
If the initializer is a (non-parenthesized) [~braced-init-list], or is [`=]
[~braced-init-list], the object or reference is list-initialized
([#dcl.init.list]).
[:zh_CN]
若初始化式为（未被括号包围的）[~花括号初始化列表]，或者是“[`=] [~花括号初始化
列表]”，则对象或引用进行列表初始化（[#dcl.init.list]）。

[item]
[:en]
If the destination type is a reference type, see [#dcl.init.ref].
[:zh_CN]
若目标类型为引用类型，参见 [#dcl.init.ref]。

[item]
[:en]
If the destination type is an array of characters, an array of [`char8_t],
an array of [`char16_t], an array of [`char32_t], or an array of [`wchar_t], and
the initializer is a string literal, see [#dcl.init.string].
[:zh_CN]
若目标类型为字符数组，[`char8_t] 的数组，[`char16_t] 的数组，[`char32_t] 的数组，
或者 [`wchar_t] 的数组，且其初始化式为字符串字面量，参见 [#dcl.init.string]。

[item]
[:en]
If the initializer is [`()], the object is value-initialized.
[:zh_CN]
若初始化式为 [`()]，则对象被值初始化。

[item]
[:en]
Otherwise, if the destination type is an array, the object is initialized as
follows.
[:zh_CN]
否则，若目标类型为数组，则对象进行如下初始化。

[:en]
Let [$x_1], [$\dotsc], [$x_k] be the elements of the [~expression-list].
[:zh_CN]
令 [$x_1], [$\dotsc], [$x_k] 为[~表达式列表]中的各个元素。

[:en]
If the destination type is an array of unknown bound, it is defined as having
[$k] elements.
[:zh_CN]
若目标类型为未知边界的数组，则它被定义为具有 [$k] 个元素。

[:en]
Let [$n] denote the array size after this potential adjustment.
[:zh_CN]
令 [$n] 代表经过这项潜在调整之后的数组大小。

[:en]
If [$k] is greater than [$n], the program is ill-formed.
[:zh_CN]
若 [$k] 大于 [$n]，则程序非良构。

[:en]
Otherwise, the [$i][^th] array element is copy-initialized with [$x_i] for each
[$1 \leq i \leq k], and value-initialized for each [$k < i \leq n].
[:zh_CN]
否则，对第 [$i] 个数组元素，对于每个 [$1 \leq i \leq k]，以 [$x_i] 进行复制
初始化，而对于每个 [$k < i \leq n] 则进行值初始化。

[:en]
For each [$1 \leq i < j \leq n], every value computation and side effect
associated with the initialization of the [$i][^th] element of the array
is sequenced before those associated with the initialization of the
[$j][^th] element.
[:zh_CN]
对于每对 [$1 \leq i < j \leq n]，与数组的第 [$i] 个元素的初始化相关联的每个
值计算和副作用，均按顺序早于与第 [$j] 个元素的初始化相关联的值计算与副作用。

[item]
[:en]
Otherwise, if the destination type is a (possibly cv-qualified) class type:
[:zh_CN]
否则，若目标类型为（可能被 cv 限定的）类类型：

[list]
[item]
[:en]
If the initializer expression is a prvalue and the cv-unqualified version of the
source type is the same class as the class of the destination, the initializer
expression is used to initialize the destination object.
[:zh_CN]
若初始化式表达式是纯右值，且源类型的 cv 未限定版本和目标的类是相同的类，则用这个
初始化式表达式初始化目标对象。

[begin:example]
[:en]
[`T x = T(T(T()));] calls the [`T] default constructor to initialize [`x].
[:zh_CN]
“[`T x = T(T(T()));]”调用 [`T] 的默认构造函数来初始化 [`x]。
[end:example]

[item]
[:en]
Otherwise, if the initialization is direct-initialization, or if it is
copy-initialization where the cv-unqualified version of the source type is the
same class as, or a derived class of, the class of the destination, constructors
are considered.
[:zh_CN]
若其初始化为直接初始化，或者若其为复制初始化，其中源类型的 cv 未限定的版本与目标
的类是相同的类或是其派生类，则考察其构造函数。
    
[:en]
The applicable constructors are enumerated ([#over.match.ctor]), and the best
one is chosen through overload resolution ([#over.match]).
[:zh_CN]
对所有可用的构造函数进行列举（[#over.match.ctor]），并通过重载决议
（[#over.match]）选取其中最佳的一个。

[:en]
Then:
[:zh_CN]
然后：

[list]
[item]
[:en]
If overload resolution is successful, the selected constructor is called to
initialize the object, with the initializer expression or [~expression-list] as
its argument(s).
[:zh_CN]
如果重载决议成功，则所选取的构造函数被以初始化式表达式或[~表达式列表]作为实参
进行调用，以初始化该对象。

[item]
[:en]
Otherwise, if no constructor is viable, the destination type is a (possibly
cv-qualified) aggregate class [`A], and the initializer is a parenthesized
[~expression-list], the object is initialized as follows.
[:zh_CN]
否则，若没有可行的构造函数，目标类型为（可能被 cv 限定的）聚合类型 [`A]，并且
初始化式是带有括号的[~表达式列表]，则以如下方式初始化该对象。

[:en]
Let [$e_1], [$\dotsc], [$e_n] be the elements of the aggregate
([#dcl.init.aggr]).
[:zh_CN]
令 [$e_1], [$\dotsc], [$e_n] 为聚合的各个元素（[#dcl.init.aggr]）。

[:en]
Let [$x_1], [$\dotsc], [$x_k] be the elements of the [~expression-list].
[:zh_CN]
令 [$x_1], [$\dotsc], [$x_k] 为[~表达式列表]的各个元素。

[:en]
If [$k] is greater than [$n], the program is ill-formed.
[:zh_CN]
如果 [$k] 大于 [$n]，则程序非良构。

[:en]
The element [$e_i] is copy-initialized with [$x_i] for [$1 \leq i \leq k].
[:zh_CN]
元素 [$e_i] 对于 [$1 \leq i \leq k] 以 [$x_i] 进行复制初始化。

[:en]
The remaining elements are initialized with their default member initializers,
if any, and otherwise are value-initialized.
[:zh_CN]
剩余各元素均以其默认成员初始化式（如果有）进行初始化，否则进行值初始化。

[:en]
For each [$1 \leq i < j \leq n], every value computation and side effect
associated with the initialization of [$e_i] is sequenced before those
associated with the initialization of [$e_j].
[:zh_CN]
对于每对 [$1 \leq i < j \leq n]，与 [$e_i] 的初始化相关联的每个值计算和副作用，
均按顺序早于与 [$e_j] 的初始化相关联的值计算与副作用。

[begin:note]
[:en]
By contrast with direct-list-initialization, narrowing conversions
([#dcl.init.list]) are permitted, designators are not permitted, a temporary
object bound to a reference does not have its lifetime extended
([#class.temporary]), and there is no brace elision.
[:zh_CN]
与直接列表初始化相比，这里允许进行窄化转换（[#dcl.init.list]），不允许使用定名符，
与绑定到引用的临时对象的生存期并不会被扩展（[#class.temporary]），而且没有
花括号省略。

[begin:example]
[codeblock]
struct A {
  int a;
  int&& r;
};

int f();
int n = 10;

A a1{1, f()};                   // OK, lifetime is extended
A a2(1, f());                   // well-formed, but dangling reference
A a3{1.0, 1};                   // error: narrowing conversion
A a4(1.0, 1);                   // well-formed, but dangling reference
A a5(1.0, std::move(n));        // OK
[codeblock:end]
[end:example]
[end:note]

[item]
[:en]
Otherwise, the initialization is ill-formed.
[:zh_CN]
否则，该初始化非良构。
[list:end]

[item]
[:en]
Otherwise (i.e., for the remaining copy-initialization cases), user-defined
conversions that can convert from the source type to the destination type or
(when a conversion function is used) to a derived class thereof are enumerated
as described in [#over.match.copy], and the best one is chosen through overload
resolution ([#over.match]).
[:zh_CN]
否则（就是说，对于其他复制初始化情况），对所有可以把源类型转换到目标类型，或
（当使用某个转换函数时）到其派生类的用户定义的转换，按照 [#over.match.copy]
所述进行列举，并通过重载决议（[#over.match]）选取其中最佳的一个。

[:en]
If the conversion cannot be done or is ambiguous, the initialization is
ill-formed.
[:zh_CN]
若不能进行转换或发生歧义，则该初始化非良构。

[:en]
The function selected is called with the initializer expression as its argument;
if the function is a constructor, the call is a prvalue of the cv-unqualified
version of the destination type whose result object is initialized by the
constructor.
[:zh_CN]
所选取的函数以初始化式表达式作为实参进行调用；若该函数是构造函数，则该调用是目标
类型的 cv-未限定版本的一个纯右值，其结果对象由该构造函数所初始化。

[:en]
The call is used to direct-initialize, according to the rules above, the object
that is the destination of the copy-initialization.
[:zh_CN]
随即用该调用对复制初始化的目标对象根据前文中的规则进行直接初始化。
[list:end]

[item]
[:en]
Otherwise, if the source type is a (possibly cv-qualified) class type,
conversion functions are considered.
[:zh_CN]
否则，若源对象为（可能被 cv 限定的）类类型，则考察转换函数。
  
[:en]
The applicable conversion functions are enumerated ([#over.match.conv]), and the
best one is chosen through overload resolution ([#over.match]).
[:zh_CN]
对所有可用的转换函数进行列举（[#over.match.conv]），并通过重载决议
（[#over.match]）选取其中最佳的一个。

[:en]
The user-defined conversion so selected is called to convert the initializer
expression into the object being initialized.
[:zh_CN]
调用所选取的用户定义转换来把初始化式表达式转换到所初始化的对象中。

[:en]
If the conversion cannot be done or is ambiguous, the initialization is
ill-formed.
[:zh_CN]
若不能进行转换或发生歧义，则该初始化非良构。

[item]
[:en]
Otherwise, if the initialization is direct-initialization, the source type is
[`std::nullptr_t], and the destination type is [`bool], the initial value of the
object being initialized is [`false].
[:zh_CN]
否则，若初始化为直接初始化，原类型为 [`std::nullptr_t]，且目标类型为 [`bool]，则
被初始化的对象的初始值为 [`false]。

[item]
[:en]
Otherwise, the initial value of the object being initialized is the (possibly
converted) value of the initializer expression.
[:zh_CN]
否则，被初始化的对象的初值为初始化式表达式的（可能经过转换的）值。

[:en]
A standard conversion sequence ([#conv]) will be used, if necessary, to convert
the initializer expression to the cv-unqualified version of the destination
type; no user-defined conversions are considered.
[:zh_CN]
如果需要，将使用标准转换序列（[#conv]）把初始化式表达式转换为目标类型的
cv 未限定版本；不考虑用户定义转换。

[:en]
If the conversion cannot be done, the initialization is ill-formed.
[:zh_CN]
若不能进行转换，则该初始化非良构。

[:en]
When initializing a bit-field with a value that it cannot represent, the
resulting value of the bit-field is [%@impldef value of bit-field that cannot
represent[!initializer]] implementation-defined.
[:zh_CN]
当用无法表示的值对位字段进行初始化时，该位字段的结果值是[%@impldef 无法表示的
位字段值[!初始化式]]由实现定义的。

[begin:note]
[:en]
[%initialization[![`const]]]
An expression of type [=lq][$cv1] [`T][=rq] can initialize an object of type
[=lq][$cv2] [`T][=rq] independently of the cv-qualifiers [$cv1] and [$cv2].
[:zh_CN]
[%初始化[![`const]]]
类型“[$cv] [`T]”的表达式可以初始化类型“[$cv2] [`T]”的对象，与其 cv 限定符 [$cv1]
和 [$cv2] 并不相关。

[codeblock]
int a;
const int b = a;
int c = b;
[codeblock:end]
[end:note]

[list:end]

[para]
[:en]
An [~initializer-clause] followed by an ellipsis is a pack expansion
([#temp.variadic]).
[:zh_CN]
后面跟着省略号的[~初始化式子句]是包组展开式（[#temp.variadic]）。

[para]
[:en]
If the initializer is a parenthesized [~expression-list], the expressions are
evaluated in the order specified for function calls ([#expr.call]).
[:zh_CN]
当初始化式是带有括号的[~表达式列表]时，根据函数调用所指定的顺序（[#expr.call]）
对各个表达式进行求值。

[para]
[:en]
The same [~identifier] shall not appear in multiple [~designator]s of a
[~designated-initializer-list].
[:zh_CN]
同一个[~标识符]不能出现于一个[~定名初始化式列表]的多个[~定名符]中。

[para]
[:en]
An object whose initialization has completed is deemed to be constructed, even
if the object is of non-class type or no constructor of the object[=']s class is
invoked for the initialization.
[:zh_CN]
初始化完成的对象被视为是已经构造的，即使该对象具有非类类型，或在初始化过程并未
调用该对象的任何构造函数也是如此。

[begin:note]
[:en]
Such an object might have been value-initialized or initialized by aggregate
initialization ([#dcl.init.aggr]) or by an inherited constructor
([#class.inhctor.init]).
[:zh_CN]
这样的对象可能是值初始化的，或者通过聚合初始化（[#dcl.init.aggr]）或某个继承构造
函数（[#class.inhctor.init]）进行的初始化。
[end:note]

[:en]
Destroying an object of class type invokes the destructor of the class.
[:zh_CN]
销毁类类型的对象时将调用该类的析构函数。

[:en]
Destroying a scalar type has no effect other than ending the lifetime of the
object ([#basic.life]).
[:zh_CN]
销毁标量类型，除了结束对象的生存期（[#basic.life]）外没有任何效果。

[:en]
Destroying an array destroys each element in reverse subscript order.
[:zh_CN]
销毁数组时将以下标相反顺序销毁其各个元素。

[para]
[:en]
A declaration that specifies the initialization of a variable, whether from an
explicit initializer or by default-initialization, is called the [+initializing
declaration] of that variable.
[:zh_CN]
指定了变量的初始化的声明式，无论以显式的初始化式还是通过默认初始化，称为该变量的
[+初始化声明式]。

[begin:note]
[:en]
In most cases this is the defining declaration ([#basic.def]) of the variable,
but the initializing declaration of a non-inline static data member
([#class.static.data]) might be the declaration within the class definition and
not the definition at namespace scope.
[:zh_CN]
大多数情况下，这即是变量的定义声明式（[#basic.def]），但非内联静态数据成员
（[#class.static.data]）的初始化声明式可能是类定义式之中的声明式，而并非命名空间
作用域中的定义式。
[end:note]

[include dcl.init.aggr]

[include dcl.init.string]

[include dcl.init.ref]

[include dcl.init.list]

[%:end#initialization]
