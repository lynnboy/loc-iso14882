[section#dcl.fct.def.delete
    [:en] Deleted definitions
    [:zh_CN] 弃置定义式

[%  [:en] definition[!function[!deleted]]
    [:zh_CN] 定义式[!函数[!弃置的～]] ]
]

[para]
[:en] A [+:adj deleted[!definition]] of a function is a function definition
whose [~function-body] is a [~deleted-function-body] or an explicitly-defaulted
definition of the function where the function is defined as deleted.
[:zh_CN] 函数的[+:adj 弃置[!定义式]]，是[~函数体]为[~弃置函数体]，或者函数被定义
为弃置的显式预置定义式。

[:en] A [+:adj deleted[!function]] is a function with a deleted definition or a
function that is implicitly defined as deleted.
[:zh_CN] [+:adj 弃置[!函数]]是具有弃置定义式或被隐式定义为弃置的函数。

[para]
[:en] A program that refers to a deleted function implicitly or explicitly,
other than to declare it, is ill-formed.
[:zh_CN] 除了对其进行声明之外，隐式或显式涉指弃置函数的程序，是非良构的。

[para:recommended:~]
[:en] The resulting diagnostic message should include the text of the
[~unevaluated-string], if one is supplied.
[:zh_CN] 如果提供了[~免求值字符串]，则所产生的诊断消息最好包含其中的文本。

[begin:note]
[:en] This includes calling the function implicitly or explicitly and forming a
pointer or pointer-to-member to the function.
[:zh_CN] 这包括对函数进行隐式或显式的调用，或者构成指向函数的指针或成员指针。

[:en] It applies even for references in expressions that are not
potentially-evaluated.
[:zh_CN] 即使是在并非潜在求值的表达式中所进行的涉指，这也同样适用。

[:en] For an overload set, only the function selected by overload resolution is
referenced.
[:zh_CN] 重载集合中，仅被重载决议所选择的函数是被涉指的。

[:en] The implicit odr-use ([#term.odr.use]) of a virtual function does not, by
itself, constitute a reference.
[:zh_CN] 对虚函数的隐含的 ODR 式使用（[#term.odr.use]），其自身并不构成一次涉指。

[:en] The [~unevaluated-string], if present, can be used to explain the
rationale for deletion and/or to suggest an alternative.
[:zh_CN] 如果出现[~免求值字符串]，则它可被用于解释进行弃置的理由并建议替代方案。
[end:note]

[para]
[begin:example]
[:en]
One can prevent default initialization and initialization by non-[`double]s with
[:zh_CN]
可以这样来避免默认初始化和以非 [`double] 进行的初始化：

[codeblock]
struct onlydouble {
  onlydouble() = delete;            // [:en] OK, but redundant \
                                    [:zh_CN] OK，但是多余的
  template<class T>
    onlydouble(T) = delete;
  onlydouble(double);
};
[codeblock:end]
[end:example]

[para:~]
[begin:example]
[:en]
One can prevent use of a class in certain [~new-expression]s by using deleted
definitions of a user-declared [`operator new] for that class.
[:zh_CN]
可以通过为类提供用户声明的 [`operator new] 的弃置定义式，来防止在特定的
[~new-表达式]中使用这个类。

[codeblock]
struct sometype {
  void* operator new(std::size_t) = delete;
  void* operator new[](std::size_t) = delete;
};
sometype* p = new sometype;     // [:en] error: deleted class [`operator new] \
                                [:zh_CN] 错误：弃置的类 [`operator new]
sometype* q = new sometype[3];  // [:en] error: deleted class [`operator new`[`]] \
                                [:zh_CN] 错误：弃置的类 [`operator new`[`]]
[codeblock:end]
[end:example]

[para:~]
[begin:example]
[:en]
One can make a class uncopyable, i.e., move-only, by using deleted definitions
of the copy constructor and copy assignment operator, and then providing
defaulted definitions of the move constructor and move assignment operator.
[:zh_CN]
可以通过为复制构造函数和复制赋值运算符使用弃置定义式，然后为移动构造函数和移动
赋值运算符提供预置定义式，来让一个类无法被复制（即只能被移动）。

[codeblock]
struct moveonly {
  moveonly() = default;
  moveonly(const moveonly&) = delete;
  moveonly(moveonly&&) = default;
  moveonly& operator=(const moveonly&) = delete;
  moveonly& operator=(moveonly&&) = default;
  ~moveonly() = default;
};
moveonly* p;
moveonly q(*p);                 // [:en] error: deleted copy constructor \
                                [:zh_CN] 错误：弃置的复制构造函数
[codeblock:end]
[end:example]

[para]
[:en]
A deleted function is implicitly an inline function ([#dcl.inline]).
[:zh_CN]
弃置函数隐含为内联函数（[#dcl.inline]）。

[begin:note]
[:en]
The one-definition rule ([#basic.def.odr]) applies to deleted definitions.
[:zh_CN]
单一定义规则（[#basic.def.odr]）适用于弃置定义式。
[end:note]

[:en]
A deleted definition of a function shall be the first declaration of the
function or, for an explicit specialization of a function template, the first
declaration of that specialization.
[:zh_CN]
某个函数的弃置定义式，应当为该函数的首个声明式，或者对于函数模板的显式特化式来说，
应当为该特例的首个声明式。

[:en]
An implicitly declared allocation or deallocation function ([#basic.stc.dynamic])
shall not be defined as deleted.
[:zh_CN]
隐式声明的分配或回收函数（[#basic.stc.dynamic]）不能为定义为弃置的。

[begin:example]
[codeblock]
struct sometype {
  sometype();
};
sometype::sometype() = delete;  // [:en] error: not first declaration \
                                [:zh_CN] 错误：不是其首个声明式
[codeblock:end]
[end:example]
