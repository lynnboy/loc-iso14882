[section#time.cal.ymwd.nonmembers
    [:en] Non-member functions
    [:zh_CN] 非成员函数
]

[%@library operator==[!year_month_weekday]]
[%@library year_month_weekday[!operator==]]
[codeblock:declaration]
constexpr bool operator==(const year_month_weekday& x, const year_month_weekday& y) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[codeblock:notation]
x.year() == y.year() && x.month() == y.month() && x.weekday_indexed() == y.weekday_indexed()
[codeblock:end]
[exit:description]

[%@library operator+[!year_month_weekday]]
[%@library year_month_weekday[!operator+]]
[codeblock:declaration]
constexpr year_month_weekday operator+(const year_month_weekday& ymwd, const months& dm) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`(ymwd.year() / ymwd.month() + dm) / ymwd.weekday_indexed()].
[:zh_CN] [`(ymwd.year() / ymwd.month() + dm) / ymwd.weekday_indexed()]。
[exit:description]

[%@library operator+[!year_month_weekday]]
[%@library year_month_weekday[!operator+]]
[codeblock:declaration]
constexpr year_month_weekday operator+(const months& dm, const year_month_weekday& ymwd) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`ymwd + dm].
[:zh_CN] [`ymwd + dm]。
[exit:description]

[%@library operator-[!year_month_weekday]]
[%@library year_month_weekday[!operator-]]
[codeblock:declaration]
constexpr year_month_weekday operator-(const year_month_weekday& ymwd, const months& dm) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`ymwd + (-dm)].
[:zh_CN] [`ymwd + (-dm)]。
[exit:description]

[%@library operator+[!year_month_weekday]]
[%@library year_month_weekday[!operator+]]
[codeblock:declaration]
constexpr year_month_weekday operator+(const year_month_weekday& ymwd, const years& dy) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`{ymwd.year()+dy, ymwd.month(), ymwd.weekday_indexed()}].
[:zh_CN] [`{ymwd.year()+dy, ymwd.month(), ymwd.weekday_indexed()}]。
[exit:description]

[%@library operator+[!year_month_weekday]]
[%@library year_month_weekday[!operator+]]
[codeblock:declaration]
constexpr year_month_weekday operator+(const years& dy, const year_month_weekday& ymwd) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`ymwd + dy].
[:zh_CN] [`ymwd + dy]。
[exit:description]

[%@library operator-[!year_month_weekday]]
[%@library year_month_weekday[!operator-]]
[codeblock:declaration]
constexpr year_month_weekday operator-(const year_month_weekday& ymwd, const years& dy) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`ymwd + (-dy)].
[:zh_CN] [`ymwd + (-dy)]。
[exit:description]

[%@library operator<<[!year_month_weekday]]
[%@library year_month_weekday[!operator<<]]
[codeblock:declaration]
template<class charT, class traits>
  basic_ostream<charT, traits>&
    operator<<(basic_ostream<charT, traits>& os, const year_month_weekday& ymwd);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock:notation]
return os << format(os.getloc(), [*STATICALLY-WIDEN]<charT>("{}/{}/{}"),
                    ymwd.year(), ymwd.month(), ymwd.weekday_indexed());
[codeblock:end]
[exit:description]
