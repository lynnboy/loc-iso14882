[section#time.zone.leap.nonmembers
    [:en] Non-member functions
    [:zh_CN] 非成员函数
]

[%@library operator==[!leap]]
[%@library leap[!operator==]]
[codeblock:declaration]
constexpr bool operator==(const leap& x, const leap& y) noexcept;
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`x.date() == y.date()].
[:zh_CN] [`x.date() == y.date()]。
[end:description]

[%@library operator<=>[!leap]]
[%@library leap[!operator<=>]]
[codeblock:declaration]
constexpr strong_ordering operator<=>(const leap& x, const leap& y) noexcept;
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`x.date() <=> y.date()].
[:zh_CN] [`x.date() <=> y.date()]。
[end:description]

[%@library operator==[!leap]]
[%@library leap[!operator==]]
[%@library operator==[!sys_time]]
[%@library sys_time[!operator==]]
[codeblock:declaration]
template<class Duration>
  constexpr bool operator==(const leap& x, const sys_time<Duration>& y) noexcept;
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`x.date() == y].
[:zh_CN] [`x.date() == y]。
[end:description]

[%@library operator<[!leap]]
[%@library leap[!operator<]]
[%@library operator<[!sys_time]]
[%@library sys_time[!operator<]]
[codeblock:declaration]
template<class Duration>
  constexpr bool operator<(const leap& x, const sys_time<Duration>& y) noexcept;
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`x.date() < y].
[:zh_CN] [`x.date() < y]。
[end:description]

[%@library operator<[!leap]]
[%@library leap[!operator<]]
[%@library operator<[!sys_time]]
[%@library sys_time[!operator<]]
[codeblock:declaration]
template<class Duration>
  constexpr bool operator<(const sys_time<Duration>& x, const leap& y) noexcept;
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`x < y.date()].
[:zh_CN] [`x < y.date()]。
[end:description]

[%@library operator>[!leap]]
[%@library leap[!operator>]]
[%@library operator>[!sys_time]]
[%@library sys_time[!operator>]]
[codeblock:declaration]
template<class Duration>
  constexpr bool operator>(const leap& x, const sys_time<Duration>& y) noexcept;
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`y < x].
[:zh_CN] [`y < x]。
[end:description]

[%@library operator>[!leap]]
[%@library leap[!operator>]]
[%@library operator>[!sys_time]]
[%@library sys_time[!operator>]]
[codeblock:declaration]
template<class Duration>
  constexpr bool operator>(const sys_time<Duration>& x, const leap& y) noexcept;
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`y < x].
[:zh_CN] [`y < x]。
[end:description]

[%@library operator<=[!leap]]
[%@library leap[!operator<=]]
[%@library operator<=[!sys_time]]
[%@library sys_time[!operator<=]]
[codeblock:declaration]
template<class Duration>
  constexpr bool operator<=(const leap& x, const sys_time<Duration>& y) noexcept;
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`!(y < x)].
[:zh_CN] [`!(y < x)]。
[end:description]

[%@library operator<=[!leap]]
[%@library leap[!operator<=]]
[%@library operator<=[!sys_time]]
[%@library sys_time[!operator<=]]
[codeblock:declaration]
template<class Duration>
  constexpr bool operator<=(const sys_time<Duration>& x, const leap& y) noexcept;
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`!(y < x)].
[:zh_CN] [`!(y < x)]。
[end:description]

[%@library operator>=[!leap]]
[%@library leap[!operator>=]]
[%@library operator>=[!sys_time]]
[%@library sys_time[!operator>=]]
[codeblock:declaration]
template<class Duration>
  constexpr bool operator>=(const leap& x, const sys_time<Duration>& y) noexcept;
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`!(x < y)].
[:zh_CN] [`!(x < y)]。
[end:description]

[%@library operator>=[!leap]]
[%@library leap[!operator>=]]
[%@library operator>=[!sys_time]]
[%@library sys_time[!operator>=]]
[codeblock:declaration]
template<class Duration>
  constexpr bool operator>=(const sys_time<Duration>& x, const leap& y) noexcept;
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`!(x < y)].
[:zh_CN] [`!(x < y)]。
[end:description]

[%@library operator<=>[!leap]]
[%@library leap[!operator<=>]]
[%@library operator<=>[!sys_time]]
[%@library sys_time[!operator<=>]]
[codeblock:declaration]
template<three_way_comparable_with<sys_seconds> Duration>
  constexpr auto operator<=>(const leap& x, const sys_time<Duration>& y) noexcept;
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`x.date() <=> y].
[:zh_CN] [`x.date() <=> y]。
[end:description]
