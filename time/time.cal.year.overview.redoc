[section#time.cal.year.overview
    [:en] Overview
    [:zh_CN] 概述
]

[%@lib year]

[codeblock:synopsis]
namespace std::chrono {
  class year {
    short y_;                   // [=expos]
  public:
    year() = default;
    constexpr explicit year(int y) noexcept;

    constexpr year& operator++()    noexcept;
    constexpr year  operator++(int) noexcept;
    constexpr year& operator--()    noexcept;
    constexpr year  operator--(int) noexcept;

    constexpr year& operator+=(const years& y) noexcept;
    constexpr year& operator-=(const years& y) noexcept;

    constexpr year operator+() const noexcept;
    constexpr year operator-() const noexcept;

    constexpr bool is_leap() const noexcept;

    constexpr explicit operator int() const noexcept;
    constexpr bool ok() const noexcept;

    static constexpr year min() noexcept;
    static constexpr year max() noexcept;
  };
}
[codeblock:end]

[para]
[:en] [`year] represents a year in the civil calendar.
[:zh_CN] [`year] 表示民用日历中的年份

[:en] It can represent values in the range [=crange(min(),max())].
[:zh_CN] 它可以表示范围 [=crange(min(),max())] 中的值。

[:en] It can be constructed with any [`int] value, which will be subsequently
truncated to fit into [`year][=']s unspecified internal storage.
[:zh_CN] 它可以从任意 [`int] 值构造，并随后被截断以适应 [`year] 的未指明的内部
存储中。

[:en] [`year] is [^:oc EqualityComparable] ([#:tab#cpp17.equalitycomparable])
and [^:oc LessThanComparable] ([#:tab#cpp17.lessthancomparable]), and
participates in basic arithmetic with [`years] objects, which represent a
difference between two [`year] objects.
[:zh_CN] [`year] 为 [^:oc EqualityComparable]（[#:tab#cpp17.equalitycomparable]）
和 [^:oc LessThanComparable]（[#:tab#cpp17.lessthancomparable]），并参与表示
两个 [`year] 的差的 [`years] 对象的基本算术运算。

[para]
[:en] [`years] is a trivially copyable and standard-layout class type.
[:zh_CN] [`years] 是平凡可复制和标准布局类类型。
