[section#time.cal.month.nonmembers
    [:en] Non-member functions
    [:zh_CN] 非成员函数
]

[%@library operator==[!month]]
[%@library month[!operator==]]
[codeblock:declaration]
constexpr bool operator==(const month& x, const month& y) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`unsigned{x} == unsigned{y}].
[:zh_CN] [`unsigned{x} == unsigned{y}]。
[exit:description]

[%@library operator<=>[!month]]
[%@library month[!operator<=>]]
[codeblock:declaration]
constexpr strong_ordering operator<=>(const month& x, const month& y) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`unsigned{x} <=> unsigned{y}].
[:zh_CN] [`unsigned{x} <=> unsigned{y}]。
[exit:description]

[%@library operator+[!month]]
[%@library month[!operator+]]
[codeblock:declaration]
constexpr month operator+(const month& x, const months& y) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[codeblock:notation]
month{modulo(static_cast<long long>(unsigned{x}) + (y.count() - 1), 12) + 1}
[codeblock:end]

[:en] where [`modulo(n, 12)] computes the remainder of [`n] divided by 12 using
Euclidean division.
[:zh_CN] 其中 [`modulo(n, 12)] 以欧几里得除法计算 [`n] 除以 12 的余数。

[enter:note]
[:en] Given a divisor of 12, Euclidean division truncates towards negative
infinity and always produces a remainder in the range of [=crange(0,11)].
[:zh_CN] 给定除数 12，欧几里得除法向负无限截断，且总是产生范围 [=crange(0,11)]
中的余数。

[:en] Assuming no overflow in the signed summation, this operation results in a
[`month] holding a value in the range [=crange(1,12)] even if [`!x.ok()].
[:zh_CN] 假定有符号加法不发生溢出，则即便 [`!x.ok()]，这种运算得到的 [`month]
持有范围 [=crange(1,12)] 中的值。
[exit:note]

[enter:example]
[:en] [`February + months{11} == January].
[:zh_CN] [`February + months{11} == January]。
[exit:example]
[exit:description]

[%@library operator+[!month]]
[%@library month[!operator+]]
[codeblock:declaration]
constexpr month operator+(const months& x, const month& y) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`y + x].
[:zh_CN] [`y + x]。
[exit:description]

[%@library operator-[!month]]
[%@library month[!operator-]]
[codeblock:declaration]
constexpr month operator-(const month& x, const months& y) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`x + -y].
[:zh_CN] [`x + -y]。
[exit:description]

[%@library operator-[!month]]
[%@library month[!operator-]]
[codeblock:declaration]
constexpr months operator-(const month& x, const month& y) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] If [`x.ok() == true] and [`y.ok() == true], returns a value [`m] in the
range [=crange(months{0},months{11})] satisfying [`y + m == x].
[:zh_CN] 如果 [`x.ok() == true] 且 [`y.ok() == true]，则返回范围
[=crange(months{0},months{11})] 中满足 [`y + m == x] 的值 [`m]。

[:en] Otherwise the value returned is unspecified.
[:zh_CN] 否则其返回值是未指明的。

[enter:example]
[:en] [`January - February == months{11}].
[:zh_CN] [`January - February == months{11}]。
[exit:example]
[exit:description]

[%@library operator<<[!month]]
[%@library month[!operator<<]]
[codeblock:declaration]
template<class charT, class traits>
  basic_ostream<charT, traits>&
    operator<<(basic_ostream<charT, traits>& os, const month& m);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock:notation]
return os << (m.ok() ?
  format(os.getloc(), [*STATICALLY-WIDEN]<charT>("{:%b}"), m) :
  format(os.getloc(), [*STATICALLY-WIDEN]<charT>("{} is not a valid month"),
         static_cast<unsigned>(m)));
[codeblock:end]
[exit:description]

[%@library from_stream[!month]]
[%@library month[!from_stream]]
[codeblock:declaration]
template<class charT, class traits, class Alloc = allocator<charT>>
  basic_istream<charT, traits>&
    from_stream(basic_istream<charT, traits>& is, const charT* fmt,
                month& m, basic_string<charT, traits, Alloc>* abbrev = nullptr,
                minutes* offset = nullptr);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Attempts to parse the input stream [`is] into the [`month] [`m] using
the format flags given in the NTCTS [`fmt] as specified in [#time.parse].
[:zh_CN] 尝试如 [#time.parse] 中所指定的方式使用由 [$:sc ntcts] [`fmt] 所给定的
格式标记将输入流 [`is] 解析到 [`month] [`m] 之中。

[:en] If the parse fails to decode a valid month,
[`is.setstate(ios_base::failbit)] shall be called and [`m] shall not be
modified.
[:zh_CN] 如果解析无法解码有效 [`month]，则应当调用
[`is.setstate(ios_base::failbit)] 且 [`m] 不应被改动。

[:en] If [`%Z] is used and successfully parsed, that value will be assigned to
[`*abbrev] if [`abbrev] is non-null.
[:zh_CN] 如果使用了 [`%Z] 并且成功进行了解析，则当 [`abbrev] 不为空值时将该值
赋值给 [`*abbrev]。

[:en] If [`%z] (or a modified variant) is used and successfully parsed,
that value will be assigned to [`*offset] if [`offset] is non-null.
[:zh_CN] 如果使用了 [`%z]（或其带修饰变体）并且成功进行了解析，则当 [`offset]
不为空值时将该值赋值给 [`*offset]。

[para:returns]
[:en] [`is].
[:zh_CN] [`is]。
[exit:description]
