[section#time.cal.ymd.members
    [:en] Member functions
    [:zh_CN] 成员函数
]

[%@lib@ctor year_month_day]
[codeblock:declaration]
constexpr year_month_day(const chrono::year& y, const chrono::month& m,
                         const chrono::day& d) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [`y_] with [`y], [`m_] with [`m], and [`d_] with [`d].
[:zh_CN] 以 [`y] 初始化 [`y_]，以 [`m] 初始化 [`m_]，并以 [`d] 初始化 [`d_]。
[div:end]

[%@lib@ctor year_month_day]
[codeblock:declaration]
constexpr year_month_day(const year_month_day_last& ymdl) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [`y_] with [`ymdl.year()], [`m_] with [`ymdl.month()], and
[`d_] with [`ymdl.day()].
[:zh_CN] 以 [`ymdl.year()] 初始化 [`y_]，以 [`ymdl.month()] 初始化 [`m_]，
并以 [`ymdl.day()] 初始化 [`d_]。

[begin:note]
[:en] This conversion from [`year_month_day_last] to [`year_month_day] can be
more efficient than converting a [`year_month_day_last] to a [`sys_days], and
then converting that [`sys_days] to a [`year_month_day].
[:zh_CN] 这种从 [`year_month_day_last] 到 [`year_month_day] 的转换可能比将
[`year_month_day_last] 转换为 [`sys_days] 然后再将该 [`sys_days] 转换为
[`year_month_day] 更加高效。
[end:note]
[div:end]

[%@lib@ctor year_month_day]
[codeblock:declaration]
constexpr year_month_day(const sys_days& dp) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Constructs an object of type [`year_month_day] that corresponds to the
date represented by [`dp].
[:zh_CN] 构造一个对应于 [`dp] 所表示的日期的 [`year_month_day] 类型的对象。

[para:remarks]
[:en] For any value [`ymd] of type [`year_month_day] for which [`ymd.ok()] is
[`true], [`ymd == year_month_day{sys_days{ymd}}] is [`true].
[:zh_CN] 对于任何 [`year_month_day] 类型的值 [`ymd]，其 [`ymd.ok()] 为 [`true]，
则 [`ymd == year_month_day{sys_days{ymd}}] 为 [`true]。
[div:end]

[%@lib@ctor year_month_day]
[codeblock:declaration]
constexpr explicit year_month_day(const local_days& dp) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to constructing with [`sys_days{dp.time_since_epoch()}].
[:zh_CN] 等价于以 [`sys_days{dp.time_since_epoch()}] 进行的构造。
[div:end]

[%@lib@member operator+=[!year_month_day]]
[codeblock:declaration]
constexpr year_month_day& operator+=(const months& m) noexcept;
[codeblock:end]

[div:description]
[para:constraints]
[:en] If the argument supplied by the caller for the [`months] parameter
is convertible to [`years], its implicit conversion sequence to [`years]
is worse than its implicit conversion sequence to [`months] ([#over.ics.rank]).
[:zh_CN] 如果调用方为 [`months] 形参所提供的实参可以转换为 [`years]，则它向
[`years] 的隐式转换序列比它向 [`months] 的隐式转换序列更差（[#over.ics.rank]）。

[para:effects]
[:en] [`*this = *this + m].
[:zh_CN] [`*this = *this + m]。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@lib@member operator-=[!year_month_day]]
[codeblock:declaration]
constexpr year_month_day& operator-=(const months& m) noexcept;
[codeblock:end]

[div:description]
[para:constraints]
[:en] If the argument supplied by the caller for the [`months] parameter
is convertible to [`years], its implicit conversion sequence to [`years]
is worse than its implicit conversion sequence to [`months] ([#over.ics.rank]).
[:zh_CN] 如果调用方为 [`months] 形参所提供的实参可以转换为 [`years]，则它向
[`years] 的隐式转换序列比它向 [`months] 的隐式转换序列更差（[#over.ics.rank]）。

[para:effects]
[:en] [`*this = *this - m].
[:zh_CN] [`*this = *this - m]。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@lib@member operator+=[!year_month_day]]
[codeblock:declaration]
constexpr year_month_day& year_month_day::operator+=(const years& y) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] [`*this = *this + y].
[:zh_CN] [`*this = *this + y]。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@lib@member operator-=[!year_month_day]]
[codeblock:declaration]
constexpr year_month_day& year_month_day::operator-=(const years& y) noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] [`*this = *this - y].
[:zh_CN] [`*this = *this - y]。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@lib@member year[!year_month_day]]
[codeblock:declaration]
constexpr chrono::year year() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`y_].
[:zh_CN] [`y_]。
[div:end]

[%@lib@member month[!year_month_day]]
[codeblock:declaration]
constexpr chrono::month month() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`m_].
[:zh_CN] [`m_]。
[div:end]

[%@lib@member day[!year_month_day]]
[codeblock:declaration]
constexpr chrono::day day() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`d_].
[:zh_CN] [`d_]。
[div:end]

[%@lib@member operator sys_days[!year_month_day]]
[codeblock:declaration]
constexpr operator sys_days() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] If [`ok()], returns a [`sys_days] holding a count of days from the
[`sys_days] epoch to [`*this] (a negative value if [`*this] represents a date
prior to the [`sys_days] epoch).
[:zh_CN] 如果 [`ok()]，则返回持有从 [`sys_days] 的纪元到 [`*this] 之间的天数
（当 [`*this] 代表 [`sys_days] 纪元之前的日期时为负值）的 [`sys_days]。

[:en] Otherwise, if [`y_.ok() && m_.ok()] is [`true], returns
[`sys_days{y_/m_/1d} + {d_ - 1d}].
[:zh_CN] 否则，如果 [`y_.ok() && m_.ok()] 为 [`true]，则返回
[`sys_days{y_/m_/1d} + {d_ - 1d}]。

[:en] Otherwise the value returned is unspecified.
[:zh_CN] 否则返回值是未指明的。

[para:remarks]
[:en] A [`sys_days] in the range [=crange(days{-12687428},days{11248737})]
which is converted to a [`year_month_day] has the same value when converted back
to a [`sys_days].
[:zh_CN] 处于范围 [=crange(days{-12687428},days{11248737})] 中的 [`sys_days]
转换为 [`year_month_day] 之后在转换回 [`sys_days] 时具有相同的值。

[para]
[begin:example]
[codeblock]
static_assert(year_month_day{sys_days{2017y/January/0}}  == 2016y/December/31);
static_assert(year_month_day{sys_days{2017y/January/31}} == 2017y/January/31);
static_assert(year_month_day{sys_days{2017y/January/32}} == 2017y/February/1);
[codeblock:end]
[end:example]
[div:end]

[%@lib@member operator local_days[!year_month_day]]
[codeblock:declaration]
constexpr explicit operator local_days() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`local_days{sys_days{*this}.time_since_epoch()}].
[:zh_CN] [`local_days{sys_days{*this}.time_since_epoch()}]。
[div:end]

[%@lib@member ok[!year_month_day]]
[codeblock:declaration]
constexpr bool ok() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] If [`y_.ok()] is [`true], and [`m_.ok()] is [`true], and [`d_] is in the
range [=crange(1d,(y_/m_/last).day())], then returns [`true]; otherwise returns
[`false].
[:zh_CN] 如果 [`y_.ok()] 为 [`true] 且 [`m_.ok()] 为 [`true]，并且 [`d_] 处于
范围 [=crange(1d,(y_/m_/last).day())] 之内，则返回 [`true]；否则返回 [`false]。
[div:end]
