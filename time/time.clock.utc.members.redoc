[section#time.clock.utc.members
    [:en] Member functions
    [:zh_CN] 成员函数
]

[%@library now[!utc_clock]]
[%@library utc_clock[!now]]
[codeblock:declaration]
static time_point now();
[codeblock:end]

[div:description]
[para:returns]
[:en] [`from_sys(system_clock::now())], or a more accurate value of [`utc_time].
[:zh_CN] [`from_sys(system_clock::now())]，或者某个更精确的 [`utc_time] 值。
[div:end]

[%@library to_sys[!utc_clock]]
[%@library utc_clock[!to_sys]]
[codeblock:declaration]
template<class Duration>
  static sys_time<common_type_t<Duration, seconds>>
    to_sys(const utc_time<Duration>& u);
[codeblock:end]

[div:description]
[para:returns]
[:en] A [`sys_time] [`t], such that [`from_sys(t) == u] if such a mapping exists.
[:zh_CN] 一个 [`sys_time] [`t]，使得 [`from_sys(t) == u]（若这种映射存在）。

[:en] Otherwise [`u] represents a [`time_point] during a leap second insertion
and the last representable value of [`sys_time] prior to the insertion of the
leap second is returned.
[:zh_CN] 否则 [`u] 就表示某个闰秒插入的 [`time_point]，并返回插入这个闰秒之前
最后一个可表示的 [`sys_time] 值。
[div:end]

[%@library from_sys[!utc_clock]]
[%@library utc_clock[!from_sys]]
[codeblock:declaration]
template<class Duration>
  static utc_time<common_type_t<Duration, seconds>>
    from_sys(const sys_time<Duration>& t);
[codeblock:end]

[div:description]
[para:returns]
[:en] A [`utc_time] [`u], such that
[`u.time_since_epoch() - t.time_since_epoch()] is equal to the number of leap
seconds that were inserted between [`t] and 1970-01-01.
[:zh_CN] 一个 [`utc_time] [`u]，使得
[`u.time_since_epoch() - t.time_since_epoch()] 等于在 [`t] 和 1970-01-01 之间所
插入的闰秒数。

[:en] If [`t] is exactly the date of leap second insertion, then the conversion
counts that leap second as inserted.
[:zh_CN] 如果 [`t] 恰好为插入闰秒的日期，则该转换认为已经插入了该闰秒。

[para:~]
[begin:example]
[codeblock]
auto t = sys_days{July/1/2015} - 2ns;
auto u = utc_clock::from_sys(t);
assert(u.time_since_epoch() - t.time_since_epoch() == 25s);
t += 1ns;
u = utc_clock::from_sys(t);
assert(u.time_since_epoch() - t.time_since_epoch() == 25s);
t += 1ns;
u = utc_clock::from_sys(t);
assert(u.time_since_epoch() - t.time_since_epoch() == 26s);
t += 1ns;
u = utc_clock::from_sys(t);
assert(u.time_since_epoch() - t.time_since_epoch() == 26s);
[codeblock:end]
[end:example]
[div:end]
