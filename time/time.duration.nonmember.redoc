[section#time.duration.nonmember
    [:en] Non-member arithmetic
    [:zh_CN] 非成员算术
]

[para]
[:en]
In the function descriptions that follow, unless stated otherwise, let [`CD]
represents the return type of the function.
[:zh_CN]
在以下函数说明中，除非另行说明，均令 [`CD] 表示函数的返回类型。

[%@lib common_type]
[codeblock:declaration]
template<class Rep1, class Period1, class Rep2, class Period2>
  constexpr common_type_t<duration<Rep1, Period1>, duration<Rep2, Period2>>
    operator+(const duration<Rep1, Period1>& lhs, const duration<Rep2, Period2>& rhs);
[codeblock:end]

[div:description]
[para:returns]
[:en] [`CD(CD(lhs).count() + CD(rhs).count())].
[:zh_CN] [`CD(CD(lhs).count() + CD(rhs).count())]。
[div:end]

[%@lib common_type]
[codeblock:declaration]
template<class Rep1, class Period1, class Rep2, class Period2>
  constexpr common_type_t<duration<Rep1, Period1>, duration<Rep2, Period2>>
  operator-(const duration<Rep1, Period1>& lhs, const duration<Rep2, Period2>& rhs);
[codeblock:end]

[div:description]
[para:returns]
[:en] [`CD(CD(lhs).count() - CD(rhs).count())].
[:zh_CN] [`CD(CD(lhs).count() - CD(rhs).count())]。
[div:end]

[%@lib@member operator*[!duration]]
[codeblock:declaration]
template<class Rep1, class Period, class Rep2>
  constexpr duration<common_type_t<Rep1, Rep2>, Period>
    operator*(const duration<Rep1, Period>& d, const Rep2& s);
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`is_convertible_v<const Rep2&, common_type_t<Rep1, Rep2>>] is [`true].
[:zh_CN] [`is_convertible_v<const Rep2&, common_type_t<Rep1, Rep2>>] 为 [`true]。

[para:returns]
[:en] [`CD(CD(d).count() * s)].
[:zh_CN] [`CD(CD(d).count() * s)]。
[div:end]

[%@lib@member operator*[!duration]]
[codeblock:declaration]
template<class Rep1, class Rep2, class Period>
  constexpr duration<common_type_t<Rep1, Rep2>, Period>
    operator*(const Rep1& s, const duration<Rep2, Period>& d);
[codeblock:end]

[div:description]
[para:remarks]
[para:constraints]
[:en] [`is_convertible_v<const Rep1&, common_type_t<Rep1, Rep2>>] is [`true].
[:zh_CN] [`is_convertible_v<const Rep1&, common_type_t<Rep1, Rep2>>] 为 [`true]。

[para:returns]
[:en] [`d * s].
[:zh_CN] [`d * s]。
[div:end]

[%@lib@member operator/[!duration]]
[codeblock:declaration]
template<class Rep1, class Period, class Rep2>
  constexpr duration<common_type_t<Rep1, Rep2>, Period>
    operator/(const duration<Rep1, Period>& d, const Rep2& s);
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`is_convertible_v<const Rep2&, common_type_t<Rep1, Rep2>>] is [`true] and
[`Rep2] is not an instantiation of [`duration].
[:zh_CN] [`is_convertible_v<const Rep2&, common_type_t<Rep1, Rep2>>] 为 [`true]，
并且 [`Rep2] 不是 [`duration] 的实例。

[para:returns]
[:en] [`CD(CD(d).count() / s)].
[:zh_CN] [`CD(CD(d).count() / s)]。
[div:end]

[%@lib@member operator/[!duration]]
[codeblock:declaration]
template<class Rep1, class Period1, class Rep2, class Period2>
  constexpr common_type_t<Rep1, Rep2>
    operator/(const duration<Rep1, Period1>& lhs, const duration<Rep2, Period2>& rhs);
[codeblock:end]

[div:description]
[para]
[:en] Let [`CD] be
[`common_type_t<duration<Rep1, Period1>, duration<Rep2, Period2>>].
[:zh_CN] 令 [`CD] 为
[`common_type_t<duration<Rep1, Period1>, duration<Rep2, Period2>>]。

[para:returns]
[:en] [`CD(lhs).count() / CD(rhs).count()].
[:zh_CN] [`CD(lhs).count() / CD(rhs).count()]。
[div:end]

[%@lib@member operator%[!duration]]
[codeblock:declaration]
template<class Rep1, class Period, class Rep2>
  constexpr duration<common_type_t<Rep1, Rep2>, Period>
    operator%(const duration<Rep1, Period>& d, const Rep2& s);
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`is_convertible_v<const Rep2&, common_type_t<Rep1, Rep2>>] is [`true] and
[`Rep2] is not an instantiation of [`duration].
[:zh_CN] [`is_convertible_v<const Rep2&, common_type_t<Rep1, Rep2>>] 为 [`true]，
并且 [`Rep2] 不是 [`duration] 的实例。

[para:returns]
[:en] [`CD(CD(d).count() % s)].
[:zh_CN] [`CD(CD(d).count() % s)]。
[div:end]

[%@lib@member operator%[!duration]]
[codeblock:declaration]
template<class Rep1, class Period1, class Rep2, class Period2>
  constexpr common_type_t<duration<Rep1, Period1>, duration<Rep2, Period2>>
    operator%(const duration<Rep1, Period1>& lhs, const duration<Rep2, Period2>& rhs);
[codeblock:end]

[div:description]
[para:returns]
[:en] [`CD(CD(lhs).count() % CD(rhs).count())].
[:zh_CN] [`CD(CD(lhs).count() % CD(rhs).count())]。
[div:end]
