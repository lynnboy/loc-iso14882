[section#time.clock.utc.nonmembers
    [:en] Non-member functions
    [:zh_CN] 非成员函数
]

[%@lib@member operator<<[!utc_time]]
[codeblock:declaration]
template<class charT, class traits, class Duration>
  basic_ostream<charT, traits>&
    operator<<(basic_ostream<charT, traits>& os, const utc_time<Duration>& t);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return os << format([[redoc("^>")]]STATICALLY-WIDEN<charT>("{:%F %T}"), t);
[codeblock:end]

[para]
[begin:example]
[codeblock]
auto t = sys_days{July/1/2015} - 500ms;
auto u = clock_cast<utc_clock>(t);
for (auto i = 0; i < 8; ++i, u += 250ms)
  cout << u << " UTC\n";
[codeblock:end]

[:en]
Produces this output:
[:zh_CN]
产生如下输出：

[codeblock:output]
2015-06-30 23:59:59.500 UTC
2015-06-30 23:59:59.750 UTC
2015-06-30 23:59:60.000 UTC
2015-06-30 23:59:60.250 UTC
2015-06-30 23:59:60.500 UTC
2015-06-30 23:59:60.750 UTC
2015-07-01 00:00:00.000 UTC
2015-07-01 00:00:00.250 UTC
[codeblock:end]
[end:example]
[div:end]

[%@lib@member from_stream[!utc_time]]
[codeblock:declaration]
template<class charT, class traits, class Duration, class Alloc = allocator<charT>>
  basic_istream<charT, traits>&
    from_stream(basic_istream<charT, traits>& is, const charT* fmt,
                utc_time<Duration>& tp, basic_string<charT, traits, Alloc>* abbrev = nullptr,
                minutes* offset = nullptr);
[codeblock:end]

[div:description]
[para:effects]
[:en] Attempts to parse the input stream [`is] into the [`utc_time] [`tp] using
the format flags given in the NTCTS [`fmt] as specified in [#time.parse].
[:zh_CN] 尝试如 [#time.parse] 中所指定的方式使用由 [span:sc ntcts] [`fmt] 所给定
的格式标记将输入流 [`is] 解析到 [`utc_time] [`tp] 之中。

[:en] If the parse fails to decode a valid date,
[`is.setstate(ios_base::failbit)] is called and [`tp] is not modified.
[:zh_CN] 如果解析无法解码有效日期，则调用 [`is.setstate(ios_base::failbit)] 且
[`tp] 不会被改动。

[:en] If [`%Z] is used and successfully parsed, that value will be assigned to
[`*abbrev] if [`abbrev] is non-null.
[:zh_CN] 如果使用了 [`%Z] 并且成功进行了解析，则当 [`abbrev] 不为空值时将该值
赋值给 [`*abbrev]。

[:en] If [`%z] (or a modified variant) is used and successfully parsed,
that value will be assigned to [`*offset] if [`offset] is non-null.
[:zh_CN] 如果使用了 [`%z]（或其带修饰变体）并且成功进行了解析，则当 [`offset]
不为空值时将该值赋值给 [`*offset]。

[:en] Additionally, the parsed offset will be subtracted from the successfully
parsed timestamp prior to assigning that difference to [`tp].
[:zh_CN] 此外，从成功解析到的时间戳中减去解析到的偏移量，再将其差值赋值给 [`tp]。

[para:returns]
[:en] [`is].
[:zh_CN] [`is]。
[div:end]

[%@lib leap_second_info]
[codeblock:declaration]
struct leap_second_info {
  bool    is_leap_second;
  seconds elapsed;
};
[codeblock:end]

[div:description]
[para]
[:en] The type [`leap_second_info] has data members and special members
specified above.
[:zh_CN] 类型 [`leap_second_info] 具有上面指定的各个数据成员和特殊成员。

[:en] It has no base classes or members other than those specified.
[:zh_CN] 除了所给出的之外，它没有别的基类或成员。
[div:end]

[%@lib get_leap_second_info]
[codeblock:declaration]
template<class Duration>
  leap_second_info get_leap_second_info(const utc_time<Duration>& ut);
[codeblock:end]

[div:description]
[para:returns]
[:en] A [`leap_second_info] where [`is_leap_second] is [`true] if [`ut] is
during a leap second insertion, and otherwise [`false].
[:zh_CN] 一个 [`leap_second_info]，当 [`ut] 处于闰秒插入期时，其
[`is_leap_second] 为 [`true]，否则为 [`false]。

[:en] [`elapsed] is the number of leap seconds between 1970-01-01 and [`ut].
[:zh_CN] [`elapsed] 为 1970-01-01 和 [`ut] 之间的闰秒数。

[:en] If [`is_leap_second] is [`true], the leap second referred to by [`ut] is
included in the count.
[:zh_CN] 当 [`is_leap_second] 为 [`true] 时，由 [`ut] 所指代的闰秒计入该计数。
[div:end]
