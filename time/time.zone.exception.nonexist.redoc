[section#time.zone.exception.nonexist
    [:en] Class [`nonexistent_local_time]
    [:zh_CN] 类 [`nonexistent_local_time]
]

[%@library nonexistent_local_time]

[codeblock:synopsis]
namespace std::chrono {
  class nonexistent_local_time : public runtime_error {
  public:
    template<class Duration>
      nonexistent_local_time(const local_time<Duration>& tp, const local_info& i);
  };
}
[codeblock:end]

[para]
[:en] [`nonexistent_local_time] is thrown when an attempt is made to convert a
non-existent [`local_time] to a [`sys_time] without specifying
[`choose::earliest] or [`choose::latest].
[:zh_CN] 每当试图将不存在的 [`local_time] 转换为 [`sys_time] 但未指定
[`choose::earliest] 或 [`choose::latest] 时，会抛出 [`nonexistent_local_time]。

[%@library nonexistent_local_time[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
template<class Duration>
  nonexistent_local_time(const local_time<Duration>& tp, const local_info& i);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`i.result == local_info::nonexistent].
[:zh_CN] [`i.result == local_info::nonexistent]。

[para:effects]
[:en] Constructs a [`nonexistent_local_time] by initializing the base class with
a sequence of [`char] equivalent to that produced by [`os.str()] initialized as
shown below:
[:zh_CN] 构造一个 [`nonexistent_local_time]，以等价于以下代码所初始化的
[`os.str()] 所产生的 [`char] 的序列来初始化其基类：

[codeblock:notation]
ostringstream os;
os << tp << " is in a gap between\n"
   << local_seconds{i.first.end.time_since_epoch()} + i.first.offset << ' '
   << i.first.abbrev << " and\n"
   << local_seconds{i.second.begin.time_since_epoch()} + i.second.offset << ' '
   << i.second.abbrev
   << " which are both equivalent to\n"
   << i.first.end << " UTC";
[codeblock:end]

[para]
[enter:example]
[codeblock]
#include <chrono>
#include <iostream>

int main() {
  using namespace std::chrono;
  try {
    auto zt = zoned_time{"America/New_York",
                         local_days{Sunday[2]/March/2016} + 2h + 30min};
  } catch (const nonexistent_local_time& e) {
    std::cout << e.what() << '\n';
  }
}
[codeblock:end]

[:en] Produces the output:
[:zh_CN] 产生输出：

[codeblock:output]
2016-03-13 02:30:00 is in a gap between
2016-03-13 02:00:00 EST and
2016-03-13 03:00:00 EDT which are both equivalent to
2016-03-13 07:00:00 UTC
[codeblock:end]
[exit:example]
[exit:description]
