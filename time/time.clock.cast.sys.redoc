[section#time.clock.cast.sys
    [:en] Conversions between [`system_clock] and other clocks
    [:zh_CN] [`system_clock] 和其他时钟之间的转换
]

[codeblock:synopsis]
template<class SourceClock>
struct clock_time_conversion<system_clock, SourceClock> {
  template<class Duration>
    auto operator()(const time_point<SourceClock, Duration>& t) const
      -> decltype(SourceClock::to_sys(t));
};
[codeblock:end]

[%@library operator()[!clock_time_conversion]]
[%@library clock_time_conversion[!operator()]]
[codeblock:declaration]
template<class Duration>
  auto operator()(const time_point<SourceClock, Duration>& t) const
    -> decltype(SourceClock::to_sys(t));
[codeblock:end]

[div:description]
[para:remarks]
[:en] This function does not participate in overload resolution unless
[`SourceClock::to_sys(t)] is well-formed.
[:zh_CN] 除非 [`SourceClock::to_sys(t)] 良构，否则这个函数不能参与重载决议。

[:en] If [`SourceClock::to_sys(t)] does not return [`sys_time<Duration>], where
[`Duration] is a valid [`chrono::duration] specialization, the program is
ill-formed.
[:zh_CN] 如果 [`SourceClock::to_sys(t)] 返回的不是 [`sys_time<Duration>]，其中
[`Duration] 为有效的 [`chrono::duration] 的特例，则程序非良构。

[para:returns]
[:en] [`SourceClock::to_sys(t)].
[:zh_CN] [`SourceClock::to_sys(t)]。
[div:end]

[codeblock:synopsis]
template<class DestClock>
struct clock_time_conversion<DestClock, system_clock> {
  template<class Duration>
    auto operator()(const sys_time<Duration>& t) const
      -> decltype(DestClock::from_sys(t));
};
[codeblock:end]

[%@library operator()[!clock_time_conversion]]
[%@library clock_time_conversion[!operator()]]
[codeblock:declaration]
template<class Duration>
  auto operator()(const sys_time<Duration>& t) const
    -> decltype(DestClock::from_sys(t));
[codeblock:end]

[div:description]
[para:remarks]
[:en] This function does not participate in overload resolution unless
[`DestClock::from_sys(t)] is well-formed.
[:zh_CN] 除非 [`DestClock::from_sys(t)] 良构，否则这个函数不能参与重载决议。

[:en] If [`DestClock::from_sys(t)] does not return
[`time_point<DestClock, Duration>], where [`Duration] is a valid
[`chrono::duration] specialization, the program is ill-formed.
[:zh_CN] 如果 [`DestClock::from_sys(t)] 返回的不是
[`time_point<DestClock, Duration>]，其中 [`Duration] 为有效的
[`chrono::duration] 的特例，则程序非良构。

[para:returns]
[:en] [`DestClock::from_sys(t)].
[:zh_CN] [`DestClock::from_sys(t)]。
[div:end]
