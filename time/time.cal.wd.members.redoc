[section#time.cal.wd.members
    [:en] Member functions
    [:zh_CN] 成员函数
]

[%@library weekday[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
constexpr explicit weekday(unsigned wd) noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Constructs an object of type [`weekday] by initializing [`wd_] with
[`wd == 7 ? 0 : wd].
[:zh_CN] 通过以 [`wd == 7 ? 0 : wd] 初始化 [`wd_] 构造 [`weekday] 类型的对象。

[:en] The value held is unspecified if [`wd] is not in the range
[=crange(0,255)].
[:zh_CN] 若 [`wd] 不在范围 [=crange(0,255)] 之中则未指明其所持有的值。
[exit:description]

[%@library weekday[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
constexpr weekday(const sys_days& dp) noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Constructs an object of type [`weekday] by computing what day of the week
corresponds to the [`sys_days] [`dp], and representing that day of the week in
[`wd_].
[:zh_CN] 通过计算对应于 [`sys_days] [`dp] 对应的周日期，并将该周日期由 [`wd_] 来
表示以构造 [`weekday] 类型的对象。

[para]
[enter:example]
[:en] If [`dp] represents 1970-01-01, the constructed [`weekday] represents
Thursday by storing [`4] in [`wd_].
[:zh_CN] 如果 [`dp] 表示 1970-01-01，则将 [`4] 存储到 [`wd_] 中来构造表示周四的
[`weekday]。
[exit:example]
[exit:description]

[%@library weekday[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
constexpr explicit weekday(const local_days& dp) noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Constructs an object of type [`weekday] by computing what day of the week
corresponds to the [`local_days] [`dp], and representing that day of the week in
[`wd_].
[:zh_CN] 通过计算对应于 [`local_days] [`dp] 对应的周日期，并将该周日期由 [`wd_]
来表示以构造 [`weekday] 类型的对象。

[para:remarks]
[:en] The value after construction is identical to that constructed from
[`sys_days{dp.time_since_epoch()}].
[:zh_CN] 构造之后的值与从 [`sys_days{dp.time_since_epoch()}] 所构造的值相同。
[exit:description]

[%@library operator++[!weekday]]
[%@library weekday[!operator++]]
[codeblock:declaration]
constexpr weekday& operator++() noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en] [`*this += days{1}].
[:zh_CN] [`*this += days{1}]。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[exit:description]

[%@library operator++[!weekday]]
[%@library weekday[!operator++]]
[codeblock:declaration]
constexpr weekday operator++(int) noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en] [`++(*this)].
[:zh_CN] [`++(*this)]。

[para:returns]
[:en] A copy of [`*this] as it existed on entry to this member function.
[:zh_CN] 返回 [`*this] 在进入该成员函数时的一个副本。
[exit:description]

[%@library operator--[!weekday]]
[%@library weekday[!operator--]]
[codeblock:declaration]
constexpr weekday& operator--() noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en] [`*this -= days{1}].
[:zh_CN] [`*this -= days{1}]。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[exit:description]

[%@library operator--[!weekday]]
[%@library weekday[!operator--]]
[codeblock:declaration]
constexpr weekday operator--(int) noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en] [`--(*this)].
[:zh_CN] [`--(*this)]。

[para:returns]
[:en] A copy of [`*this] as it existed on entry to this member function.
[:zh_CN] 返回 [`*this] 在进入该成员函数时的一个副本。
[exit:description]

[%@library operator+=[!weekday]]
[%@library weekday[!operator+=]]
[codeblock:declaration]
constexpr weekday& operator+=(const days& d) noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en] [`*this = *this + d].
[:zh_CN] [`*this = *this + d]。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[exit:description]

[%@library operator-=[!weekday]]
[%@library weekday[!operator-=]]
[codeblock:declaration]
constexpr weekday& operator-=(const days& d) noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en] [`*this = *this - d].
[:zh_CN] [`*this = *this - d]。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[exit:description]

[%@library c_encoding[!weekday]]
[%@library weekday[!c_encoding]]
[codeblock:declaration]
constexpr unsigned c_encoding() const noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`wd_].
[:zh_CN] [`wd_]。
[exit:description]

[%@library iso_encoding[!weekday]]
[%@library weekday[!iso_encoding]]
[codeblock:declaration]
constexpr unsigned iso_encoding() const noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`wd_ == 0u ? 7u : wd_].
[:zh_CN] [`wd_ == 0u ? 7u : wd_]。
[exit:description]

[%@library ok[!weekday]]
[%@library weekday[!ok]]
[codeblock:declaration]
constexpr bool ok() const noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`wd_ <= 6].
[:zh_CN] [`wd_ <= 6]。
[exit:description]

[%@library operator`[`][!weekday]]
[%@library weekday[!operator`[`]]]
[codeblock:declaration]
constexpr weekday_indexed operator[](unsigned index) const noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`{*this, index}].
[:zh_CN] [`{*this, index}]。
[exit:description]

[%@library operator`[`][!weekday]]
[%@library weekday[!operator`[`]]]
[codeblock:declaration]
constexpr weekday_last operator[](last_spec) const noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`weekday_last{*this}].
[:zh_CN] [`weekday_last{*this}]。
[exit:description]
