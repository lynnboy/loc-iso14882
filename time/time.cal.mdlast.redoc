[section#time.cal.mdlast
    [:en] Class [`month_day_last]
    [:zh_CN] 类 [`month_day_last]
]

[%@library month_day_last]

[codeblock:synopsis]
namespace std::chrono {
  class month_day_last {
    chrono::month m_;                   // [=Expos]

  public:
    constexpr explicit month_day_last(const chrono::month& m) noexcept;

    constexpr chrono::month month() const noexcept;
    constexpr bool ok() const noexcept;
  };
}
[codeblock:end]

[para]
[:en] [`month_day_last] represents the last day of a month.
[:zh_CN] [`month_day_last] 表示某月的最后一天。

[para]
[enter:note]
[:en] A [`month_day_last] object can be constructed using the expression
[`m/last] or [`last/m], where [`m] is an expression of type [`month].
[:zh_CN] 可以使用表达式 [`m/last] 或 [`last/m] 来构造 [`month_day_last]，其中
[`m] 为 [`month] 类型的表达式。
[exit:note]

[enter:example]
[codeblock]
constexpr auto mdl = February/last;     // [:en] [`mdl] is the last day of February of an as yet unspecified year
                                        // [|:zh_CN] [`mdl] 是某个尚未指定年份的二月最后一天
static_assert(mdl.month() == February);
[codeblock:end]
[exit:example]

[para]
[:en] [`month_day_last] is a trivially copyable and standard-layout class type.
[:zh_CN] [`month_day_last] 是平凡可复制和标准布局类类型。

[%@library month_day_last[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
constexpr explicit month_day_last(const chrono::month& m) noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Constructs an object of type [`month_day_last] by initializing [`m_] with
[`m].
[:zh_CN] 通过以 [`m] 初始化 [`m_] 构造 [`month_day_last] 类型的对象。
[exit:description]

[%@library month[!month_day_last]]
[%@library month_day_last[!month]]
[codeblock:declaration]
constexpr month month() const noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`m_].
[:zh_CN] [`m_]。
[exit:description]

[%@library ok[!month_day_last]]
[%@library month_day_last[!ok]]
[codeblock:declaration]
constexpr bool ok() const noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`m_.ok()].
[:zh_CN] [`m_.ok()]。
[exit:description]

[%@library operator==[!month_day_last]]
[%@library month_day_last[!operator==]]
[codeblock:declaration]
constexpr bool operator==(const month_day_last& x, const month_day_last& y) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`x.month() == y.month()].
[:zh_CN] [`x.month() == y.month()]。
[exit:description]

[%@library operator<=>[!month_day_last]]
[%@library month_day_last[!operator<=>]]
[codeblock:declaration]
constexpr strong_ordering operator<=>(const month_day_last& x, const month_day_last& y) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`x.month() <=> y.month()].
[:zh_CN] [`x.month() <=> y.month()]。
[exit:description]

[%@library operator<<[!month_day_last]]
[%@library month_day_last[!operator<<]]
[codeblock:declaration]
template<class charT, class traits>
  basic_ostream<charT, traits>&
    operator<<(basic_ostream<charT, traits>& os, const month_day_last& mdl);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock:notation]
return os << format(os.getloc(), [*STATICALLY-WIDEN]<charT>("{}/last"), mdl.month());
[codeblock:end]
[exit:description]
