[section#time.clock.cast.id
    [:en] Identity conversions
    [:zh_CN] 等同转换
]

[codeblock:synopsis]
template<typename Clock>
struct clock_time_conversion<Clock, Clock> {
  template<class Duration>
    time_point<Clock, Duration>
      operator()(const time_point<Clock, Duration>& t) const;
};
[codeblock:end]

[%@library operator()[!clock_time_conversion]]
[%@library clock_time_conversion[!operator()]]
[codeblock:declaration]
template<class Duration>
  time_point<Clock, Duration>
    operator()(const time_point<Clock, Duration>& t) const;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`t].
[:zh_CN] [`t]。
[exit:description]

[codeblock:synopsis]
template<>
struct clock_time_conversion<system_clock, system_clock> {
  template<class Duration>
    sys_time<Duration>
      operator()(const sys_time<Duration>& t) const;
};
[codeblock:end]

[%@library operator()[!clock_time_conversion]]
[%@library clock_time_conversion[!operator()]]
[codeblock:declaration]
template<class Duration>
  sys_time<Duration>
    operator()(const sys_time<Duration>& t) const;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`t].
[:zh_CN] [`t]。
[exit:description]

[codeblock:synopsis]
template<>
struct clock_time_conversion<utc_clock, utc_clock> {
  template<class Duration>
    utc_time<Duration>
      operator()(const utc_time<Duration>& t) const;
};
[codeblock:end]

[%@library operator()[!clock_time_conversion]]
[%@library clock_time_conversion[!operator()]]
[codeblock:declaration]
template<class Duration>
  utc_time<Duration>
    operator()(const utc_time<Duration>& t) const;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`t].
[:zh_CN] [`t]。
[exit:description]
