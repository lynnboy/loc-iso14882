[section#time.clock.system.nonmembers
    [:en] Non-member functions
    [:zh_CN] 非成员函数
]

[%@library operator<<[!sys_time]]
[%@library sys_time[!operator<<]]
[codeblock:declaration]
template<class charT, class traits, class Duration>
  basic_ostream<charT, traits>&
    operator<<(basic_ostream<charT, traits>& os, const sys_time<Duration>& tp);
[codeblock:end]

[begin:description]
[para:remarks]
[:en] This operator shall not participate in overload resolution if
[`treat_as_floating_point_v<typename Duration::rep>] is [`true], or if
[`Duration{1} >= days{1}].
[:zh_CN] 如果 [`treat_as_floating_point_v<typename Duration::rep>] 为 [`true]，
或者如果 [`Duration{1} >= days{1}]，则这个运算符不能参与重载决议。

[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock:notation]
auto const dp = floor<days>(tp);
return os << format(os.getloc(), [*STATICALLY-WIDEN]<charT>("{} {}"),
                    year_month_day{dp}, hh_mm_ss{tp-dp});
[codeblock:end]

[para]
[begin:example]
[codeblock]
cout << sys_seconds{0s} << '\n';                // 1970-01-01 00:00:00
cout << sys_seconds{946'684'800s} << '\n';      // 2000-01-01 00:00:00
cout << sys_seconds{946'688'523s} << '\n';      // 2000-01-01 01:02:03
[codeblock:end]
[end:example]
[end:description]

[%@library operator<<[!sys_days]]
[%@library sys_days[!operator<<]]
[codeblock:declaration]
template<class charT, class traits>
  basic_ostream<charT, traits>&
    operator<<(basic_ostream<charT, traits>& os, const sys_days& dp);
[codeblock:end]

[begin:description]
[para:effects]
[:en] [`os << year_month_day{dp}].
[:zh_CN] [`os << year_month_day{dp}]。

[para:returns]
[:en] [`os].
[:zh_CN] [`os]。
[end:description]

[%@library from_stream[!sys_time]]
[%@library sys_time[!from_stream]]
[codeblock:declaration]
template<class charT, class traits, class Duration, class Alloc = allocator<charT>>
  basic_istream<charT, traits>&
    from_stream(basic_istream<charT, traits>& is, const charT* fmt,
                sys_time<Duration>& tp, basic_string<charT, traits, Alloc>* abbrev = nullptr,
                minutes* offset = nullptr);
[codeblock:end]

[begin:description]
[para:effects]
[:en] Attempts to parse the input stream [`is] into the [`sys_time] [`tp] using
the format flags given in the NTCTS [`fmt] as specified in [#time.parse].
[:zh_CN] 尝试如 [#time.parse] 中所指定的方式使用由 [$:sc ntcts] [`fmt] 所给定的
格式标记将输入流 [`is] 解析到 [`sys_time] [`tp] 之中。

[:en] If the parse fails to decode a valid date,
[`is.setstate(ios_base::failbit)] shall be called and [`tp] shall not be
modified.
[:zh_CN] 如果解析无法解码有效日期，则应当调用 [`is.setstate(ios_base::failbit)]
且 [`tp] 不应被改动。

[:en] If [`%Z] is used and successfully parsed, that value will be assigned to
[`*abbrev] if [`abbrev] is non-null.
[:zh_CN] 如果使用了 [`%Z] 并且成功进行了解析，则当 [`abbrev] 不为空值时将该值
赋值给 [`*abbrev]。

[:en] If [`%z] (or a modified variant) is used and successfully parsed,
that value will be assigned to [`*offset] if [`offset] is non-null.
[:zh_CN] 如果使用了 [`%z]（或其带修饰变体）并且成功进行了解析，则当 [`offset]
不为空值时将该值赋值给 [`*offset]。

[:en] Additionally, the parsed offset will be subtracted from the successfully
parsed timestamp prior to assigning that difference to [`tp].
[:zh_CN] 此外，从成功解析到的时间戳中减去解析到的偏移量，再将其差值赋值给 [`tp]。

[para:returns]
[:en] [`is].
[:zh_CN] [`is]。
[end:description]
