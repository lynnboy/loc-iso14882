[section#time.cal.year.nonmembers
    [:en] Non-member functions
    [:zh_CN] 非成员函数
]

[%@lib@member operator==[!year]]
[codeblock:declaration]
constexpr bool operator==(const year& x, const year& y) noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`int{x} == int{y}].
[:zh_CN] [`int{x} == int{y}]。
[div:end]

[%@lib@member operator<=>[!year]]
[codeblock:declaration]
constexpr strong_ordering operator<=>(const year& x, const year& y) noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`int{x} <=> int{y}].
[:zh_CN] [`int{x} <=> int{y}]。
[div:end]

[%@lib@member operator+[!year]]
[codeblock:declaration]
constexpr year operator+(const year& x, const years& y) noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`year{int{x} + static_cast<int>(y.count())}].
[:zh_CN] [`year{int{x} + static_cast<int>(y.count())}]。
[div:end]

[%@lib@member operator+[!year]]
[codeblock:declaration]
constexpr year operator+(const years& x, const year& y) noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`y + x].
[:zh_CN] [`y + x]。
[div:end]

[%@lib@member operator-[!year]]
[codeblock:declaration]
constexpr year operator-(const year& x, const years& y) noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`x + -y].
[:zh_CN] [`x + -y]。
[div:end]

[%@lib@member operator-[!year]]
[codeblock:declaration]
constexpr years operator-(const year& x, const year& y) noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`years{int{x} - int{y}}].
[:zh_CN] [`years{int{x} - int{y}}]。
[div:end]

[%@lib@member operator<<[!year]]
[codeblock:declaration]
template<class charT, class traits>
  basic_ostream<charT, traits>&
    operator<<(basic_ostream<charT, traits>& os, const year& y);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return os << (y.ok() ?
  format([[redoc("^>")]]STATICALLY-WIDEN<charT>("{:%Y}"), y) :
  format([[redoc("^>")]]STATICALLY-WIDEN<charT>("{:%Y} is not a valid year"), y));
[codeblock:end]
[div:end]

[%@lib@member from_stream[!year]]
[codeblock:declaration]
template<class charT, class traits, class Alloc = allocator<charT>>
  basic_istream<charT, traits>&
    from_stream(basic_istream<charT, traits>& is, const charT* fmt,
                year& y, basic_string<charT, traits, Alloc>* abbrev = nullptr,
                minutes* offset = nullptr);
[codeblock:end]

[div:description]
[para:effects]
[:en] Attempts to parse the input stream [`is] into the [`year] [`y] using
the format flags given in the NTCTS [`fmt] as specified in [#time.parse].
[:zh_CN] 尝试如 [#time.parse] 中所指定的方式使用由 [span:sc ntcts] [`fmt] 所给定
的格式标记将输入流 [`is] 解析到 [`year] [`y] 之中。

[:en] If the parse fails to decode a valid year,
[`is.setstate(ios_base::failbit)] is called and [`y] is not modified.
[:zh_CN] 如果解析无法解码有效 [`year]，则调用 [`is.setstate(ios_base::failbit)]
且 [`y] 不会被改动。

[:en] If [`%Z] is used and successfully parsed, that value will be assigned to
[`*abbrev] if [`abbrev] is non-null.
[:zh_CN] 如果使用了 [`%Z] 并且成功进行了解析，则当 [`abbrev] 不为空值时将该值
赋值给 [`*abbrev]。

[:en] If [`%z] (or a modified variant) is used and successfully parsed,
that value will be assigned to [`*offset] if [`offset] is non-null.
[:zh_CN] 如果使用了 [`%z]（或其带修饰变体）并且成功进行了解析，则当 [`offset]
不为空值时将该值赋值给 [`*offset]。

[para:returns]
[:en] [`is].
[:zh_CN] [`is]。
[div:end]

[%@lib@member operator""y[!year]]
[codeblock:declaration]
constexpr chrono::year operator""y(unsigned long long y) noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`year{static_cast<int>(y)}].
[:zh_CN] [`year{static_cast<int>(y)}]。
[div:end]
