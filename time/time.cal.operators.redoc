[section#time.cal.operators
    [:en] Conventional syntax operators
    [:zh_CN] 约定用法的运算符
]
[%:begin@lib@raw#operator.caneldar.types
    [`operator/][![:en] calendar types [:zh_CN] 日历类型] ]

[para]
[:en]
A set of overloaded [`operator/] functions provides a conventional syntax for
the creation of civil calendar dates.
[:zh_CN]
一组重载的 [`operator/] 函数提供了一种创建民用日历日期的约定语法。

[para]
[begin:note]
[:en]
The year, month, and day are accepted in any of the following 3 orders:
[:zh_CN]
可以接受年份、月份和日期的以下任意三种顺序之一。

[codeblock:notation]
[*year]/[*month]/[*day]
[*month]/[*day]/[*year]
[*day]/[*month]/[*year]
[codeblock:end]

[:en]
Anywhere a [*day] is required, any of the following can also be specified:
[:zh_CN]
任何需要一个 [*day] 的地方都可以指定以下各项之一：

[codeblock:notation]
last
[*weekday][[*i]]
[*weekday][last]
[codeblock:end]
[end:note]

[para]
[begin:note]
[:en]
Partial-date types such as [`year_month] and [`month_day] can be created by not
applying the second division operator for any of the three orders.
[:zh_CN] 如 [`year_month] 和 [`month_day] 这样的部分日期类型，可以在这三中顺序中
不提供第二个除法运算符来创建。

[:en]
For example:
[:zh_CN]
例如：

[codeblock]
year_month ym = 2015y/April;
month_day md1 = April/4;
month_day md2 = 4d/April;
[codeblock:end]
[end:note]

[para]
[begin:example]
[codeblock]
auto a = 2015/4/4;          // [`a == int(125)]
auto b = 2015y/4/4;         // [`b == year_month_day{year(2015), month(4), day(4)}]
auto c = 2015y/4d/April;    // [:en] error: no viable [`operator/] for first [`/] \
                               [:zh_CN] 错误：第一个 [`/] 没有可行的 [`operator/]
auto d = 2015/April/4;      // [:en] error: no viable [`operator/] for first [`/] \
                               [:zh_CN] 错误：第一个 [`/] 没有可行的 [`operator/]
[codeblock:end]
[end:example]

[codeblock:declaration]
constexpr year_month
  operator/(const year& y, const month& m) noexcept;
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`{y, m}].
[:zh_CN] [`{y, m}]。
[end:description]

[codeblock:declaration]
constexpr year_month
  operator/(const year& y, int   m) noexcept;
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`y / month(m)].
[:zh_CN] [`y / month(m)]。
[end:description]

[codeblock:declaration]
constexpr month_day
  operator/(const month& m, const day& d) noexcept;
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`{m, d}].
[:zh_CN] [`{m, d}]。
[end:description]

[codeblock:declaration]
constexpr month_day
  operator/(const month& m, int d) noexcept;
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`m / day(d)].
[:zh_CN] [`m / day(d)]。
[end:description]

[codeblock:declaration]
constexpr month_day
  operator/(int m, const day& d) noexcept;
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`month(m) / d].
[:zh_CN] [`month(m) / d]。
[end:description]

[codeblock:declaration]
constexpr month_day
  operator/(const day& d, const month& m) noexcept;
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`m / d].
[:zh_CN] [`m / d]。
[end:description]

[codeblock:declaration]
constexpr month_day
  operator/(const day& d, int m) noexcept;
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`month(m) / d].
[:zh_CN] [`month(m) / d]。
[end:description]

[codeblock:declaration]
constexpr month_day_last
  operator/(const month& m, last_spec) noexcept;
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`month_day_last{m}].
[:zh_CN] [`month_day_last{m}]。
[end:description]

[codeblock:declaration]
constexpr month_day_last
  operator/(int m, last_spec) noexcept;
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`month(m) / last].
[:zh_CN] [`month(m) / last]。
[end:description]

[codeblock:declaration]
constexpr month_day_last
  operator/(last_spec, const month& m) noexcept;
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`m / last].
[:zh_CN] [`m / last]。
[end:description]

[codeblock:declaration]
constexpr month_day_last
  operator/(last_spec, int m) noexcept;
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`month(m) / last].
[:zh_CN] [`month(m) / last]。
[end:description]

[codeblock:declaration]
constexpr month_weekday
  operator/(const month& m, const weekday_indexed& wdi) noexcept;
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`{m, wdi}].
[:zh_CN] [`{m, wdi}]。
[end:description]

[codeblock:declaration]
constexpr month_weekday
  operator/(int m, const weekday_indexed& wdi) noexcept;
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`month(m) / wdi].
[:zh_CN] [`month(m) / wdi]。
[end:description]

[codeblock:declaration]
constexpr month_weekday
  operator/(const weekday_indexed& wdi, const month& m) noexcept;
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`m / wdi].
[:zh_CN] [`m / wdi]。
[end:description]

[codeblock:declaration]
constexpr month_weekday
  operator/(const weekday_indexed& wdi, int m) noexcept;
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`month(m) / wdi].
[:zh_CN] [`month(m) / wdi]。
[end:description]

[codeblock:declaration]
constexpr month_weekday_last
  operator/(const month& m, const weekday_last& wdl) noexcept;
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`{m, wdl}].
[:zh_CN] [`{m, wdl}]。
[end:description]

[codeblock:declaration]
constexpr month_weekday_last
  operator/(int m, const weekday_last& wdl) noexcept;
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`month(m) / wdl].
[:zh_CN] [`month(m) / wdl]。
[end:description]

[codeblock:declaration]
constexpr month_weekday_last
  operator/(const weekday_last& wdl, const month& m) noexcept;
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`m / wdl].
[:zh_CN] [`m / wdl]。
[end:description]

[codeblock:declaration]
constexpr month_weekday_last
  operator/(const weekday_last& wdl, int m) noexcept;
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`month(m) / wdl].
[:zh_CN] [`month(m) / wdl]。
[end:description]

[codeblock:declaration]
constexpr year_month_day
  operator/(const year_month& ym, const day& d) noexcept;
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`{ym.year(), ym.month(), d}].
[:zh_CN] [`{ym.year(), ym.month(), d}]。
[end:description]

[codeblock:declaration]
constexpr year_month_day
  operator/(const year_month& ym, int d) noexcept;
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`ym / day(d)].
[:zh_CN] [`ym / day(d)]。
[end:description]

[codeblock:declaration]
constexpr year_month_day
  operator/(const year& y, const month_day& md) noexcept;
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`y / md.month() / md.day()].
[:zh_CN] [`y / md.month() / md.day()]。
[end:description]

[codeblock:declaration]
constexpr year_month_day
  operator/(int y, const month_day& md) noexcept;
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`year(y) / md].
[:zh_CN] [`year(y) / md]。
[end:description]

[codeblock:declaration]
constexpr year_month_day
  operator/(const month_day& md, const year& y) noexcept;
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`y / md].
[:zh_CN] [`y / md]。
[end:description]

[codeblock:declaration]
constexpr year_month_day
  operator/(const month_day& md, int y) noexcept;
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`year(y) / md].
[:zh_CN] [`year(y) / md]。
[end:description]

[codeblock:declaration]
constexpr year_month_day_last
  operator/(const year_month& ym, last_spec) noexcept;
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`{ym.year(), month_day_last{ym.month()}}].
[:zh_CN] [`{ym.year(), month_day_last{ym.month()}}]。
[end:description]

[codeblock:declaration]
constexpr year_month_day_last
  operator/(const year& y, const month_day_last& mdl) noexcept;
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`{y, mdl}].
[:zh_CN] [`{y, mdl}]。
[end:description]

[codeblock:declaration]
constexpr year_month_day_last
  operator/(int y, const month_day_last& mdl) noexcept;
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`year(y) / mdl].
[:zh_CN] [`year(y) / mdl]。
[end:description]

[codeblock:declaration]
constexpr year_month_day_last
  operator/(const month_day_last& mdl, const year& y) noexcept;
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`y / mdl].
[:zh_CN] [`y / mdl]。
[end:description]

[codeblock:declaration]
constexpr year_month_day_last
  operator/(const month_day_last& mdl, int y) noexcept;
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`year(y) / mdl].
[:zh_CN] [`year(y) / mdl]。
[end:description]

[codeblock:declaration]
constexpr year_month_weekday
  operator/(const year_month& ym, const weekday_indexed& wdi) noexcept;
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`{ym.year(), ym.month(), wdi}].
[:zh_CN] [`{ym.year(), ym.month(), wdi}]。
[end:description]

[codeblock:declaration]
constexpr year_month_weekday
  operator/(const year& y, const month_weekday& mwd) noexcept;
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`{y, mwd.month(), mwd.weekday_indexed()}].
[:zh_CN] [`{y, mwd.month(), mwd.weekday_indexed()}]。
[end:description]

[codeblock:declaration]
constexpr year_month_weekday
  operator/(int y, const month_weekday& mwd) noexcept;
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`year(y) / mwd].
[:zh_CN] [`year(y) / mwd]。
[end:description]

[codeblock:declaration]
constexpr year_month_weekday
  operator/(const month_weekday& mwd, const year& y) noexcept;
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`y / mwd].
[:zh_CN] [`y / mwd]。
[end:description]

[codeblock:declaration]
constexpr year_month_weekday
  operator/(const month_weekday& mwd, int y) noexcept;
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`year(y) / mwd].
[:zh_CN] [`year(y) / mwd]。
[end:description]

[codeblock:declaration]
constexpr year_month_weekday_last
  operator/(const year_month& ym, const weekday_last& wdl) noexcept;
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`{ym.year(), ym.month(), wdl}].
[:zh_CN] [`{ym.year(), ym.month(), wdl}]。
[end:description]

[codeblock:declaration]
constexpr year_month_weekday_last
  operator/(const year& y, const month_weekday_last& mwdl) noexcept;
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`{y, mwdl.month(), mwdl.weekday_last()}].
[:zh_CN] [`{y, mwdl.month(), mwdl.weekday_last()}]。
[end:description]

[codeblock:declaration]
constexpr year_month_weekday_last
  operator/(int y, const month_weekday_last& mwdl) noexcept;
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`year(y) / mwdl].
[:zh_CN] [`year(y) / mwdl]。
[end:description]

[codeblock:declaration]
constexpr year_month_weekday_last
  operator/(const month_weekday_last& mwdl, const year& y) noexcept;
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`y / mwdl].
[:zh_CN] [`y / mwdl]。
[end:description]

[codeblock:declaration]
constexpr year_month_weekday_last
  operator/(const month_weekday_last& mwdl, int y) noexcept;
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`year(y) / mwdl].
[:zh_CN] [`year(y) / mwdl]。
[end:description]

[%:end@library#operator.caneldar.types]
