[section#time.point.cast
    [`time_point_cast]
]

[%@library time_point[!time_point_cast]]
[%@library time_point_cast]
[codeblock:declaration]
template<class ToDuration, class Clock, class Duration>
  constexpr time_point<Clock, ToDuration> time_point_cast(const time_point<Clock, Duration>& t);
[codeblock:end]

[div:description]
[para:remarks]
[:en] This function shall not participate in overload resolution unless
[`ToDuration] is an instantiation of [`duration].
[:zh_CN] 除非 [`ToDuration] 是 [`duration] 的实例，否则这个函数不能参与重载决议。

[para:returns]
[codeblock:notation]
time_point<Clock, ToDuration>(duration_cast<ToDuration>(t.time_since_epoch()))
[codeblock:end]
[div:end]

[%@library floor[!time_point]]
[%@library time_point[!floor]]
[codeblock:declaration]
template<class ToDuration, class Clock, class Duration>
  constexpr time_point<Clock, ToDuration> floor(const time_point<Clock, Duration>& tp);
[codeblock:end]

[div:description]
[para:remarks]
[:en] This function shall not participate in overload resolution unless
[`ToDuration] is a specialization of [`duration].
[:zh_CN] 除非 [`ToDuration] 是 [`duration] 的特例，否则这个函数不能参与重载决议。

[para:returns]
[:en]
[`time_point<Clock, ToDuration>(floor<ToDuration>(tp.time_since_epoch()))].
[:zh_CN]
[`time_point<Clock, ToDuration>(floor<ToDuration>(tp.time_since_epoch()))]。
[div:end]

[%@library ceil[!time_point]]
[%@library time_point[!ceil]]
[codeblock:declaration]
template<class ToDuration, class Clock, class Duration>
  constexpr time_point<Clock, ToDuration> ceil(const time_point<Clock, Duration>& tp);
[codeblock:end]

[div:description]
[para:remarks]
[:en] This function shall not participate in overload resolution unless
[`ToDuration] is a specialization of [`duration].
[:zh_CN] 除非 [`ToDuration] 是 [`duration] 的特例，否则这个函数不能参与重载决议。

[para:returns]
[:en]
[`time_point<Clock, ToDuration>(ceil<ToDuration>(tp.time_since_epoch()))].
[:zh_CN]
[`time_point<Clock, ToDuration>(ceil<ToDuration>(tp.time_since_epoch()))]。
[div:end]

[%@library round[!time_point]]
[%@library time_point[!round]]
[codeblock:declaration]
template<class ToDuration, class Clock, class Duration>
  constexpr time_point<Clock, ToDuration> round(const time_point<Clock, Duration>& tp);
[codeblock:end]

[div:description]
[para:remarks]
[:en] This function shall not participate in overload resolution unless
[`ToDuration] is a specialization of [`duration], and
[`treat_as_floating_point_v<typename ToDuration::rep>] is [`false].
[:zh_CN] 除非 [`ToDuration] 是 [`duration] 的特例，并且
[`treat_as_floating_point_v<typename ToDuration::rep>] 为 [`false]，否则这个函数
不能参与重载决议。

[para:returns]
[:en]
[`time_point<Clock, ToDuration>(round<ToDuration>(tp.time_since_epoch()))].
[:zh_CN]
[`time_point<Clock, ToDuration>(round<ToDuration>(tp.time_since_epoch()))]。
[div:end]
