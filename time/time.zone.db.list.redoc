[section#time.zone.db.list
    [:en] Class [`tzdb_list]
    [:zh_CN] 类 [`tzdb_list]
]

[%@lib tzdb_list]

[codeblock:synopsis]
namespace std::chrono {
  class tzdb_list {
  public:
    tzdb_list(const tzdb_list&) = delete;
    tzdb_list& operator=(const tzdb_list&) = delete;

    // [:en] unspecified additional constructors \
       [:zh_CN] 未指明的其他构造函数

    class const_iterator;

    const tzdb& front() const noexcept;

    const_iterator erase_after(const_iterator p);

    const_iterator begin() const noexcept;
    const_iterator end()   const noexcept;

    const_iterator cbegin() const noexcept;
    const_iterator cend()   const noexcept;
  };
}
[codeblock:end]

[para]
[:en] The [`tzdb_list] database is a singleton; the unique object of type
[`tzdb_list] can be accessed via the [`get_tzdb_list()] function.
[:zh_CN] [`tzdb_list] 数据库是一个单例对象；[`tzdb_list] 类型的唯一对象可以通过
[`get_tzdb_list()] 函数访问。

[begin:note]
[:en] This access is only needed for those applications that need to have long
uptimes and have a need to update the time zone database while running.
[:zh_CN] 只有那些需要长时间运行并且需要在运行过程中更新时区数据库的应用才需要
进行访问。

[:en] Other applications can implicitly access the [`front()] of this list
via the read-only namespace scope functions [`get_tzdb()], [`locate_zone()], and
[`current_zone()].
[:zh_CN] 其他应用可以通过只读的命名空间作用域函数 [`get_tzdb()]、
[`locate_zone()] 和 [`current_zone()] 来隐式访问这个列表的 [`front()]。
[end:note]

[:en] The [`tzdb_list] object contains a list of [`tzdb] objects.
[:zh_CN] [`tzdb_list] 对象包含一个 [`tzdb] 对象的列表。

[para]
[:en] [`tzdb_list::const_iterator] is a constant iterator which meets the
[^:oc ForwardIterator] requirements and has a value type of [`tzdb].
[:zh_CN] [`tzdb_list:const_iterator] 是常量迭代器，满足 [^:oc ForwardIterator]
的规定并具有值类型 [`tzdb]。

[%@lib@member front[!tzdb_list]]
[codeblock:declaration]
const tzdb& front() const noexcept;
[codeblock:end]

[div:description]
[para:sync]
[:en] This operation is thread-safe with respect to [`reload_tzdb()].
[:zh_CN] 这个操作对于 [`reload_tzdb()] 是线程安全的。

[begin:note]
[:en] [`reload_tzdb()] pushes a new [`tzdb] onto the front of this container.
[:zh_CN] [`reload_tzdb()] 会向这个容器的前面压入一个新的 [`tzdb]。
[end:note]

[para:returns]
[:en] A reference to the first [`tzdb] in the container.
[:zh_CN] 到容器中的第一个 [`tzdb] 的引用。
[div:end]

[%@lib@member erase_after[!tzdb_list]]
[codeblock:declaration]
const_iterator erase_after(const_iterator p);
[codeblock:end]

[div:description]
[para:expects]
[:en] The iterator following [`p] is dereferenceable.
[:zh_CN] [`p] 的后一个迭代器可以被解引用。

[para:effects]
[:en] Erases the [`tzdb] referred to by the iterator following [`p].
[:zh_CN] 擦除由 [`p] 的后一个迭代器所指代的 [`tzdb]。

[para:returns]
[:en] An iterator pointing to the element following the one that was erased,
or [`end()] if no such element exists.
[:zh_CN] 指向跟在被擦除的元素后面的元素的迭代器，或当不存在这种元素时返回
[`end()]。

[para:ensures]
[:en] No pointers, references, or iterators are invalidated except those
referring to the erased [`tzdb].
[:zh_CN] 不会使除了指代被擦除的 [`tzdb] 的迭代器之外的任何指针、引用或迭代器失效。

[begin:note]
[:en] It is not possible to erase the [`tzdb] referred to by [`begin()].
[:zh_CN] 不可能擦除由 [`begin()] 所指代的 [`tzdb]。
[end:note]

[para:throws]
[:en] Nothing.
[:zh_CN] 无。
[div:end]

[%@lib@member begin[!tzdb_list]]
[codeblock:declaration]
const_iterator begin() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] An iterator referring to the first [`tzdb] in the container.
[:zh_CN] 指代容器中的第一个 [`tzdb] 的迭代器。
[div:end]

[%@lib@member end[!tzdb_list]]
[codeblock:declaration]
const_iterator end() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] An iterator referring to the position one past the last [`tzdb] in the
container.
[:zh_CN] 指代越过容器中最后一个 [`tzdb] 一个位置的迭代器。
[div:end]

[%@lib@member cbegin[!tzdb_list]]
[codeblock:declaration]
const_iterator cbegin() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`begin()].
[:zh_CN] [`begin()]。
[div:end]

[%@lib@member cend[!tzdb_list]]
[codeblock:declaration]
const_iterator cend() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`end()].
[:zh_CN] [`end()]。
[div:end]
