[section#lex.pptoken
    [:en] Preprocessing tokens
    [:zh_CN] 预处理记号
]

[%:begin#token.preprocessing
    [:en] token [!preprocessing]
    [:zh_CN] 记号 [!预处理～]
]

[syntax]
[rule preprocessing-token [:zh_CN] 预处理记号 ]
    [| header-name ]
    [| import-keyword ]
    [| module-keyword ]
    [| export-keyword ]
    [| identifier ]
    [| pp-number ]
    [| character-literal ]
    [| user-defined-character-literal ]
    [| string-literal ]
    [| user-defined-string-literal ]
    [| preprocessing-op-or-punc ]
    [|:descriptive
        [:en] each non-whitespace character that cannot be one of the above
        [:zh_CN] 不是上述之一的每个非空白字符
    ]
[rule:end]
[syntax:end]

[para]
[:en] A preprocessing token is the minimal lexical element of the language in
translation phases 3 through 6.
[:zh_CN] 预处理记号是语言的第 3 到第 6 个翻译阶段中的最小词法元素。

[:en] In this document, glyphs are used to identify elements of the
basic character set ([#lex.charset]).
[:zh_CN] 本文档中，用字形来识别基本字符集中的元素（[#lex.charset]）。

[:en] The categories of preprocessing token are: header names, placeholder tokens
produced by preprocessing [`import] and [`module] directives ([~import-keyword],
[~module-keyword], and [~export-keyword]), identifiers, preprocessing numbers,
character literals (including user-defined character literals), string literals
(including user-defined string literals), preprocessing operators and
punctuators, and single non-whitespace characters that do not lexically match
the other preprocessing token categories.
[:zh_CN] 预处理记号有以下几类：头文件名，由对 [`import] 和 [`module] 指令
（[~导入关键词]、[~模块关键词] 和 [~导出关键词]）的处理所产生的占位符记号，标识符，
预处理数字，字符字面量（包括用户定义字符字面量），字符串字面量（包括用户定义字符串字面量），
预处理运算符或标点，词法上不符合其他分类的单个非空白字符。

[:en] If a [=unicode(0027,apostrophe)] or a [=unicode(0022,quotation mark)]
character matches the last category, the program is ill-formed.
[:zh_CN] 如果字符 [=unicode(0027,apostrophe)] 或 [=unicode(0022,quotation mark)]
符合最后一类，则程序非良构。

[:en] If any character not in the basic character set matches the last category,
the program is ill-formed.
[:zh_CN] 如果有基本字符集之外的任何字符符合最后一类，则程序非良构。

[:en] Preprocessing tokens can be separated by [%whitespace] whitespace;
[:zh_CN] 预处理记号可被[%空白]空白所分隔；

[:en@~] [%comment]
this consists of comments ([#lex.comment]), or whitespace characters
([=unicode(0020,space)], [=unicode(0009,character tabulation)], new-line,
[=unicode(000B,line tabulation)], and [=unicode(000C,form feed)]), or both.
[:zh_CN@~] [%注释]
空白由注释（[#lex.comment]），空白字符（[=unicode(0020,space)]，
[=unicode(0009,character tabulation)]，换行，[=unicode(000B,line tabulation)]，
和 [=unicode(000C,form feed)]），或者由两者共同构成。

[:en] As described in [#cpp], in certain circumstances during translation phase 4,
whitespace (or the absence thereof) serves as more than preprocessing token separation.
[:zh_CN] 如 [#cpp] 所述，第 4 阶段中的某些情况下，空白（或该处没有空白）不只是作为
预处理记号的分隔符。

[:en] Whitespace can appear within a preprocessing token only as part of a header
name or between the quotation characters in a character literal or string literal.
[:zh_CN] 只有在作为头文件名的一部分，或处于字符字面量或字符串字面量的引号字符之间时，
空白才可以出现在预处理记号的内部。

[para]
[:en] Each preprocessing token that is converted to a token ([#lex.token]) shall
have the lexical form of a keyword, an identifier, a literal, or an operator or punctuator.
[:zh_CN] 被转换为记号（[#lex.token]）的每个预处理记号都应当具有关键词、标识符、
字面量或者运算符或标点的词法形式。

[para]
[:en] The [~import-keyword] is produced by preprocessing an [`:key import]
directive ([#cpp.import]), the [~module-keyword] is produced by preprocessing a
[`:key module] directive ([#cpp.module]), and the [~export-keyword] is produced
by preprocessing either of the previous two directives.
[:zh_CN] [~导入关键词] 是预处理 [`:key import] 指令（[#cpp.import]）时产生的，
[~模块关键词]是预处理 [`:key module] 指令（[#cpp.module]）时产生的，而[~导出关键词]
是预处理之前两种指令时产生的。

[begin:note]
[:en] None has any observable spelling.
[:zh_CN] 这些均没有明显的拼写。
[end:note]

[para]
[:en] If the input stream has been parsed into preprocessing tokens up to a
given character:
[:zh_CN] 当已经将输入流直到某个给定字符都解析成预处理记号时：

[list]
[item]
[:en] [%literal[!string[!raw]]]
If the next character begins a sequence of characters that could be the prefix
and initial double quote of a raw string literal, such as [`R"], the next
preprocessing token shall be a raw string literal.
[:zh_CN] [%字面量[!字符串～[!原始～]]]
如果以下一个字符开始的字符序列可能是某个原始字符串字面量的前缀和起始双引号，如
[`R"]，则下一个预处理记号应当为一个原始字符串字面量。

[:en] Between the initial and final double quote characters of the raw string,
any transformations performed in phase 2 (line splicing) are reverted;
[:zh_CN] 这个原始字符串的起始和结束双引号之间，恢复阶段 2 中进行的任何变换（行接合）；

[:en@~] this reversion shall apply before any [~d-char], [~r-char], or delimiting
parenthesis is identified.
[:zh_CN@~] 应当在识别 [~d-字符]，[~r-字符] 和分隔括号之前进行这种恢复。

[:en] The raw string literal is defined as the shortest sequence of characters
that matches the raw-string pattern
[:zh_CN] 原始字符串字面量被定义为能够匹配以下原始字符串模式的最短字符序列

[syntax:explanation]
[~:opt encoding-prefix] [`R] [~raw-string]
[syntax:end]

[item]
[:en] Otherwise, if the next three characters are [`<::] and the subsequent
character is neither [`:] nor [`>], the [`<] is treated as a preprocessor token
by itself and not as the first character of the alternative token [`<:].
[:zh_CN] 否则，如果随后的三个字符是 [`<::]，而接下来的字符既不是 [`:] 也不是 [`>]，
则将这个 [`<] 自身当作一个预处理记号，而不是代用记号 [`<:] 的第一个字符。

[item]
[:en] Otherwise, if the next three characters are [``[::] and
the subsequent character is not [`:], or if the next three characters are [``[:>],
the [``[] is treated as a preprocessing token by itself and
not as the first character of the preprocessing token [``[:].
[:zh_CN] 否则，如果随后的三个字符是 [``[::]，而接下来的字符不是 [`:]，或者如果
随后的三个字符是 [``[:>]，则将这个 [``[] 自身当作一个预处理记号，而不是记号序列
[``[:] 的第一个字符。

[begin:note]
[:en] The tokens [``[:] and [`:`]] cannot be composed from digraphs.
[:zh_CN] 记号[``[:] 和 [`:`]] 不能由二连符组成。
[end:note]

[item]
[:en] Otherwise, the next preprocessing token is the longest sequence of characters
that could constitute a preprocessing token, even if that would cause further
lexical analysis to fail, except that
[:zh_CN] 否则，下一个预处理记号将由能够组成预处理记号的最长字符序列组成，无论这是否
会导致进一步词法分析的失败，但

 [list]
 [item]
[:en] a [~string-literal] token is never formed when a [~header-name] token can be formed, and
[:zh_CN] 当可以构成[~头文件名]记号时永远不构成[~字符串字面量]，并且
 [item]
[:en] a [~header-name] ([#lex.header]) is only formed
[:zh_CN] [~头文件名]（[#lex.header]）仅能在以下语句中构成：
  [list]
  [item]
[:en@~] immediately after the [`include], [`embed], or [`import] preprocessing
token in a [`#include] ([#cpp.include]), [`#embed] ([#cpp.embed]), or
[`import] ([#cpp.import]) directive, respectively, or
[:zh_CN@~] 在 [`#include]（[#cpp.include]）、[`#embed]（[#cpp.embed]）或 [`import]（[#cpp.import]）
指令中分别紧跟预处理记号 [`include]、[`embed] 或 [`import] 之后，或者
  [item]
[:en@~] immediately after a preprocessing token sequence of [`__has_include]
or [`__has_embed] immediately followed by [`(] in a [`#if], [`#elif], or
[`#embed] directive ([#cpp.cond], [#cpp.embed]).
[:zh_CN@~] 在 [`#if]、[`#elif] 或 [`#embed] 指令（[#cpp.cond]，[#cpp.embed]）中，
紧跟紧接的 [`__has_include] 或 [`__has_embed] 和 [`(] 构成的预处理记号序列之后。
  [list:end]
 [list:end]
[list:end]

[para]
[begin:example]
[codeblock]
#define R "x"
const char* s = R"y";           // [:en] ill-formed raw string, not [`"x" "y"] \
                                [:zh_CN] 非良构的原始字符串，并非 [`"x" "y"]
[codeblock:end]
[end:example]

[para]
[begin:example]
[:en] The program fragment [`0xe+foo] is parsed as a preprocessing number token
(one that is not a valid [~integer-literal] or [~floating-point-literal] token),
even though a parse as three preprocessing tokens [`0xe], [`+], and [`foo] can
produce a valid expression (for example, if [`foo] is a macro defined as [`1]).
[:zh_CN] 程序片段 [`0xe+foo] 被解析为一个预处理数字记号（这是一个无效的[~整数字面量]
或[~浮点字面量]记号），尽管当其被解析为三个预处理记号 [`0xe]、[`+] 和 [`foo] 时
能够产生有效的表达式（如当 [`foo] 是定义为 [`1] 的宏时）。

[:en] Similarly, the program fragment [`1E1] is parsed as a preprocessing number
(one that is a valid [~floating-point-literal] token), whether or not [`E] is a macro name.
[:zh_CN] 类似地，程序片段 [`1E1] 被解析为预处理数字（这是一个有效的[~浮点字面量]记号），
无论 [`E] 是否是一个宏名。
[end:example]

[para]
[begin:example]
[:en] The program fragment [`x+++++y] is parsed as [`x ++ ++ + y], which, if [`x]
and [`y] have integral types, violates a constraint on increment operators, even
though the parse [`x ++ + ++ y] can yield a correct expression.
[:zh_CN] 程序片段 [`x+++++y] 被解析为 [`x ++ ++ + y]，且当 [`x] 和 [`y] 具有
整型类型时，这将违反增量运算符的规定，尽管当解析为 [`x ++ + ++ y] 时能够产生正确的表达式。
[end:example]

[%:end#token.preprocessing]
