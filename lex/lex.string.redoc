[section#lex.string
    [:en] String literals
    [:zh_CN] 字符串字面量
]

[%  [:en] literal[!string]
    [:zh_CN] 字面量[!字符串～] ]

[syntax]
[rule string-literal [:zh_CN] 字符串字面量 ]
    [| [~:opt encoding-prefix] [`"] [~:opt s-char-sequence] [`"] ]
    [| [~:opt encoding-prefix] [`R] raw-string ]
[rule:end]

[rule s-char-sequence [:zh_CN] s-字符序列 ]
    [| s-char ]
    [| s-char-sequence s-char ]
[rule:end]

[rule s-char [:zh_CN] s-字符 ]
    [| basic-s-char ]
    [| escape-sequence ]
    [| universal-character-name ]
[rule:end]

[rule basic-s-char [:zh_CN] 基本-s-字符 ]
    [|:descriptive
        [:en] any member of the basic source character set except the
            double-quote [`"], backslash [`\], or new-line character
        [:zh_CN] 基本源字符集中的任意成员，除了双引号 [`"]、反斜杠 [`\] 或换行字符
    ]
[rule:end]

[rule raw-string [:zh_CN] 原始字符串 ]
    [| [`"] [~:opt d-char-sequence] [`(] [~:opt r-char-sequence] [`)]
        [~:opt d-char-sequence] [`"] ]
[rule:end]

[rule r-char-sequence [:zh_CN] r-字符序列 ]
    [| r-char ]
    [| r-char-sequence r-char ]
[rule:end]

[rule r-char [:zh_CN] r-字符 ]
    [|:descriptive
        [:en] any member of the source character set, except a right parenthesis
            [`)] followed by [br]
            the initial [~d-char-sequence] (which may be empty) followed by a
            double quote [`"].
        [:zh_CN] 源字符集中的任何成员，除了右圆括号 [`)] 后面跟着 [br]
            开头的 [~d-字符序列]（可能为空）后面再跟着双引号 [`"]。
    ]
[rule:end]

[rule d-char-sequence [:zh_CN] d-字符序列 ]
    [| d-char ]
    [| d-char-sequence d-char ]
[rule:end]

[rule d-char [:zh_CN] s-字符 ]
    [|:descriptive
        [:en] any member of the source character set except: [br]
            space, the left parenthesis [`(], the right parenthesis [`)], the
            backslash [`\], and the control characters [br]
            representing horizontal tab, vertical tab, form feed, and newline.
        [:zh_CN] 源字符集中的任何成员，除了： [br]
            空格，左圆括号 [`(]，右圆括号 [`)]，反斜杠 [`\]，以及 [br]
            表示水平制表、垂直制表、换页和换行的控制字符。
    ]
[rule:end]

[syntax:end]

[para]
[:en]
[%literal[!string]]
[%character string]
[%string[!type of]]
[%type[![`wchar_t]]]
[%prefix![`L]]
[%literal[!string[![`char16_t]]]]
[%type[![`char16_t]]]
[%literal[!string[![`char32_t]]]]
[%type[![`char32_t]]]
[:zh_CN]
[%字面量[!字符串～]]
[%字符串]
[%字符串[!～的类型]]
[%类型[![`wchar_t]]]
[%前缀[![`L]]]
[%字面量[!字符串[![`char16_t]]]]
[%类型[![`char16_t]]]
[%字面量[!字符串[![`char32_t]]]]
[%类型[![`char32_t]]]

[:en]
The kind of a [~string-literal], its type, and its associated character
encoding are determined by its encoding prefix and sequence of [~s-char]s or
[~r-char]s as defined by [#:tab#lex.string.literal], where [$n] is the number
of encoded code units as described below.
[:zh_CN]
[~字符串字面量]的种类，它的类型，以及它所关联的字符编码，由其编码前缀和其
[~s-字符]或 [~r-字符]的序列决定，如 [#:tab#lex.ccon.literal] 中所定义，其中 [$n]
为如下所述的编码用代码单元的数量。

[table:grid#lex.string.literal
    [:en] String literals
    [:zh_CN] 字符字面量
    [|  [:en] Encoding prefix
        [:zh_CN] 编码前缀 ]
    [|  [:en] Kind
        [:zh_CN] 种类 ]
    [|  [:en] Type
        [:zh_CN] 类型 ]
    [|  [:en] Associated character encoding
        [:zh_CN] 关联的字符编码 ]
    [|  [:en] Examples
        [:zh_CN] 示例 ]
]
[|]
    [:en] none [:zh_CN] 无
[|] [:en] [+ordinary string literal[%literal[!string[!ordinary]]]]
    [:zh_CN] [+普通字符串字面量[%字面量[!字符串[!普通]]]]
[|] [:en] array of [$n] [`[`:key const] [`:key char]]
    [:zh_CN] [`[`:key const] [`:key char]] 的 [$n] 元数组
[|] [:en] encoding of the execution character set
    [:zh_CN] 执行字符集的编码
[|] [`"ordinary string"] [br] [`R"(ordinary raw string)"]
[-]

[|]
    [`L]
[|] [:en] [+wide string literal[%literal[!string[!wide]]]]
    [:zh_CN] [+宽字符串字面量[%字面量[!字符串[!宽]]]]
[|] [:en] array of [$n] [`[`:key const] [`:key wchar_t]]
    [:zh_CN] [`[`:key const] [`:key wchar_t]] 的 [$n] 元数组
[|] [:en] encoding of the execution wide-character set
    [:zh_CN] 执行宽字符集的编码
[|] [`L"wide string"] [br] [`LR"w(wide raw string)w"]
[-]

[|] [`u8]
[|] [:en] [+UTF-8 string literal[%literal[!string[!UTF-8]]]]
    [:zh_CN] [+UTF-8 字符串字面量[%字面量[!字符串[!UTF-8]]]]
[|] [:en] array of [$n] [`[`:key const] [`:key char8_t]]
    [:zh_CN] [`[`:key const] [`:key char8_t]] 的 [$n] 元数组
[|] UTF-8
[|] [`u8"UTF-8 string"] [br] [`u8R"x(UTF-8 raw string)x"]
[-]

[|] [`u]
[|] [:en] [+UTF-16 string literal[%literal[!string[!UTF-16]]]]
    [:zh_CN] [+UTF-16 字符串字面量[%字面量[!字符串[!UTF-16]]]]
[|] [:en] array of [$n] [`[`:key const] [`:key char16_t]]
    [:zh_CN] [`[`:key const] [`:key char16_t]] 的 [$n] 元数组
[|] UTF-16
[|] [`u"UTF-16 string"] [br] [`uR"y(UTF-16 raw string)y"]
[-]

[|] [`U]
[|] [:en] [+UTF-32 string literal[%literal[!string[!UTF-32]]]]
    [:zh_CN] [+UTF-32 字符串字面量[%字面量[!字符串[!UTF-32]]]]
[|] [:en] array of [$n] [`[`:key const] [`:key char32_t]]
    [:zh_CN] [`[`:key const] [`:key char32_t]] 的 [$n] 元数组
[|] UTF-32
[|] [`U"UTF-32 string"] [br] [`UR"z(UTF-32 raw string)z"]
[-]
[table:end]

[para]
[:en]
[%literal[!string[!raw]]]
A [~string-literal] that has [%prefix[![`R]]] an [`R] in the prefix is a
[+raw string literal].
[:zh_CN]
[%字面量[!字符串～[!原始～]]]
前缀中带有 [%前缀[![`R]]] [`R] 的[~字符串字面量]是[+原始字符串字面量]。

[:en]
The [~d-char-sequence] serves as a delimiter.
[:zh_CN]
[~d-字符序列]用作分隔符。

[:en]
The terminating [~d-char-sequence] of a [~raw-string] is the same sequence of
characters as the initial [~d-char-sequence].
[:zh_CN]
[~原始字符串]结尾的 [~d-字符序列]与其开头的 [~d-字符序列]是相同的字符序列。

[:en]
A [~d-char-sequence] shall consist of at most 16 characters.
[:zh_CN]
[~d-字符序列]应由最多 16 个字符构成。

[para]
[begin:note]
[:en]
The characters [`'('] and [`')'] are permitted in a [~raw-string].
[:zh_CN]
[~原始字符串]中允许出现字符 [`'('] 和 [`')']。

[:en]
Thus, [`R"delimiter((a|b))delimiter"] is equivalent to [`"(a|b)"].
[:zh_CN]
因此 [`R"delimiter((a|b))delimiter"] 等价于 [`"(a|b)"]。
[end:note]

[para]
[begin:note]
[:en]
A source-file new-line in a raw string literal results in a new-line in the
resulting execution string literal.
[:zh_CN]
原始字符串字面量中的源文件换行字符，在所生成的执行字符串字面量中产生换行字符。

[:en]
Assuming no whitespace at the beginning of lines in the following example, the
assert will succeed:
[:zh_CN]
假设在下例中每行开始没有空白，其断言将会成功：

[codeblock]
const char* p = R"(a\
b
c)";
assert(std::strcmp(p, "a\\\nb\nc") == 0);
[codeblock:end]

[end:note]

[para]
[begin:example]
[:en]
The raw string
[:zh_CN]
原始字符串

[codeblock]
R"a(
)\
a"
)a"
[codeblock:end]

[:en@~]
is equivalent to [`"\n)\\\na\"\n"].
[:zh_CN@~]
等价于 [`"\n)\\\na\"\n"]。

[:en]
The raw string
[:zh_CN]
原始字符串

[codeblock]
R"(x = "\"y\"")"
[codeblock:end]

[:en@~]
is equivalent to [`"x = \"\\\"y\\\"\""].
[:zh_CN@~]
等价于 [`"x = \"\\\"y\\\"\""]。
[end:example]

[para]
[:en]
[%literal[!string[!narrow]]]
[%literal[!narrow-character]]
Ordinary string literals and UTF-8 string literals are also referred to as
narrow string literals.
[:zh_CN]
[%字面量[!字符串～[!窄～]]]
[%字面量[!窄字符～]]
普通字符串字面量和 UTF-8 字符串字面量也称为窄字符串字面量。

[para]
[:en]
[%concatenation[!string]]
In translation phase 6 ([#lex.phases]), adjacent [~string-literal]s are
concatenated.
[:zh_CN]
[%拼接[!字符串～]]
在翻译阶段 6 中（[#lex.phases]），相邻的[~字符串字面量]进行了拼接。

[:en]
If both [~string-literal]s have the same [~encoding-prefix], the resulting
concatenated [~string-literal] has that [~encoding-prefix].
[:zh_CN]
若两个[~字符串字面量]具有相同的[~编码前缀]，则拼接后的[~字符串字面量]具有该
[~编码前缀]。

[:en]
If one [~string-literal] has no [~encoding-prefix], it is treated as a
[~string-literal] of the same [~encoding-prefix] as the other operand.
[:zh_CN]
若一个[~字符串字面量]没有[~编码前缀]，则把它当作与另一个操作数具有相同的
[~编码前缀]的[~字符串字面量]。

[:en]
Any other concatenations are ill-formed.
[:zh_CN]
任何其他拼接都是非良构的。

[begin:note]
[:en]
This concatenation is an interpretation, not a conversion.
[:zh_CN]
这种拼接是一种解释，而不是转换。

[:en]
Because the interpretation happens in translation phase 6 (after the string
literal contents have been encoded in the [~string-literal][=']s associated
character encoding), a [~string-literal][=']s initial rawness has no effect on
the interpretation or well-formedness of the concatenation.
[:zh_CN]
因为该解释发生于翻译阶段 6（已经将字符串字面量的内容以该[~字符串字面量]的关联
字符编码进行了编码），所以[~字符串字面量]开始时是否是原始的，并不会影响对拼接的
解释或其良构性。
[end:note]

[:en]
[#:tab#lex.string.concat] has some examples of valid concatenations.
[:zh_CN]
[#:tab#lex.string.concat] 中有一些合法拼接的例子。

[table:listing@code@shape=3x3@fill=column@border=side#lex.string.concat
    [:en] String literal concatenations
    [:zh_CN] 字符串字面量的拼接
    [|@headerspan=2
        [:en] Source
        [:zh_CN] 源代码
    ]
    [|]
    [|
        [:en] Means
        [:zh_CN] 含义
    ]
]
[|] u"a"    [|] u"b"    [|] u"ab"
[|] u"a"    [|] "b"     [|] u"ab"
[|] "a"     [|] u"b"    [|] u"ab"

[|] U"a"    [|] U"b"    [|] U"ab"
[|] U"a"    [|] "b"     [|] U"ab"
[|] "a"     [|] U"b"    [|] U"ab"

[|] L"a"    [|] L"b"    [|] L"ab"
[|] L"a"    [|] "b"     [|] L"ab"
[|] "a"     [|] L"b"    [|] L"ab"

[table:end]

[para:~]
[:en]
Characters in concatenated strings are kept distinct.
[:zh_CN]
拼接而成的字符串中的字符保持独立性。

[para:~]
[begin:example]

[codeblock]
"\xA" "B"
[codeblock:end]

[:en]
contains the two characters [`'\xA'] and [`'B'] after concatenation (and not the
single hexadecimal character [`'\xAB']).
[:zh_CN]
在拼接后将包含两个字符 [`'\xA'] 和 [`'B']（而不是单个十六进制字符 [`'\xAB']）。
[end:example]

[para]
[:en]
[%[`0] [%zero[!null]]]
[%[`0] [!string terminator]]
[%[`0] [!null character][%character[!null]]]
In translation phase 6 ([#lex.phases]), after adjacent [~string-literal]s are
concatenated, a null character is appended to the result.
[:zh_CN]
[%[`0] [%零[!空]]]
[%[`0] [!字符串终止符]]
[%[`0] [!空字符][%字符[!空～]]]
在翻译阶段 6 中（[#lex.phases]），经过相邻[~字符串字面量]的拼接之后，向其结果
追加一个空字符。

[para]
[:en]
Evaluating a [~string-literal] results in a string literal object with static
storage duration ([#basic.stc]).
[:zh_CN]
[~字符串字面量]的求值结果是一个具有静态存储期的字符串字面量对象（[#basic.stc]）。

[:en]
[%string[!distinct]]
Whether all [~string-literal]s are distinct (that is, are stored in
nonoverlapping objects) and whether successive evaluations of a [~string-literal]
yield the same or a different object is unspecified.
[:zh_CN]
[%字符串[!相互独立的～]]
是否所有[~字符串字面量]都是相互独立的（就是说，存储于互不交叠的对象中），以及对
某个[~字符串字面量]的相继求值产生相同还是不同的对象，是未指明的。

[begin:note]
[:en]
[%literal[!string[!undefined change to]]]
The effect of attempting to modify a string literal object is undefined.
[:zh_CN]
[%字面量[!字符串～[!未定义的～的改动]]]
试图修改字符串字面量对象的效果是未定义的。
[end:note]

[para]
[:en]
String literal objects are initialized with the sequence of code unit values
corresponding to the [~string-literal][=']s sequence of [~s-char]s (for a
non-raw string literal) and [~r-char]s (for a raw string literal) in order as
follows:
[:zh_CN]
字符串字面量对象以对应于该[~字符串字面量]的 [~s-字符]（对于非原始字符串字面量）
或 [~r-字符]（原始字符串字面量）的序列的代码单元的值的序列依序初始化如下：

[list]
[item]
[:en]
The sequence of characters denoted by each contiguous sequence of
[~basic-s-char]s, [~r-char]s, [~simple-escape-sequence]s ([#lex.ccon]), and
[~universal-character-name]s ([#lex.charset]) is encoded to a code unit sequence
using the [~string-literal][=']s associated character encoding.
[:zh_CN]
由各个[~基本-s-字符]，[~r-字符]，[~简单转义序列]（[#lex.con]），和[~通用字符名]
（[#lex.charset]）的连续序列所代表的字符的序列，使用该[~字符字面量]的关联字符
编码编码为代码单元的序列。

[:en]
If a character lacks representation in the associated character encoding, then:
[:zh_CN]
如果某个字符在关联字符编码中缺乏表示，则：

[list]
[item]
[:en]
If the [~string-literal][=']s [~encoding-prefix] is absent or [`L], then the
[~string-literal] is conditionally-supported and an [?impldef code unit sequence
for non-representable [~string-literal]] code unit sequence is encoded.
[:zh_CN]
如果该[~字符串字面量]的[~编码前缀]没有或为 [`L]，则该[~字符串字面量]是有条件
支持的，并编码一个[?impldef 用于不可表示的[~字符串字面量]的代码单元序列]代码单元
序列。

[item]
[:en]
Otherwise, the [~string-literal] is ill-formed.
[:zh_CN]
否则，该[~字符串字面量]非良构。
[list]

[:en]
When encoding a stateful character encoding, implementations should encode the
first such sequence beginning with the initial encoding state and encode
subsequent sequences beginning with the final encoding state of the prior
sequence.
[:zh_CN]
当编码一个有状态字符编码时，实现应当以初始编码状态开始这种徐略的编码，并以之前的
最终编码状态开始后续序列的编码。

[begin:note]
[:en]
The encoded code unit sequence can differ from the sequence of code units that
would be obtained by encoding each character independently.
[:zh_CN]
编码后的代码单元序列，与对每个字符单独编码所获得的代码单元序列会有不同。
[end:note]

[item]
[:en]
Each [~numeric-escape-sequence] ([#lex.ccon]) that specifies an integer value
[$v] contributes a single code unit with a value as follows:
[:zh_CN]
每个指定某个整数值 [$v] 的[~数值转义序列]（[#lex.ccon]）贡献具有如下值的单个代码
单元：

[list]
[item]
[:en]
If [$v] does not exceed the range of representable values of the
[~string-literal][=']s array element type, then the value is [$v].
[:zh_CN]
若 [$v] 并未超出该[~字符串字面量]的数组元素类型的可表示值范围，则其值为 [$v]。

[item]
[:en]
Otherwise, if the [~string-literal][=']s [~encoding-prefix] is absent or [`L],
and [$v] does not exceed the range of representable values of the corresponding
unsigned type for the underlying type of the [~string-literal][=']s array
element type, then the value is the unique value of the [~string-literal][=']s
array element type [`T] that is congruent to [$v] modulo [$2^N], where [$N] is
the width of [`T].
[:zh_CN]
否则，若该[~字符串字面量]的[~编码前缀]没有或为 [`L]，且 [$v] 并未超出该
[~字符串字面量]的数组元素类型的底层类型的对应无符号类型的可表示值范围，则其值为
该[~字符串字面量]的数组元素类型 [`T] 中等于 [$v] 对 [$2^N] 取模的唯一值，其中
[$N] 为 [`T] 的宽度。

[item]
[:en]
Otherwise, the [~string-literal] is ill-formed.
[:zh_CN]
否则，该[~字符串字面量]非良构。
[list:end]

[:en]
When encoding a stateful character encoding, these sequences should have no
effect on encoding state.
[:zh_CN]
当编码一个有状态字符编码时，这些序列应当对编码状态没有影响。

[item]
[:en]
Each [~conditional-escape-sequence] ([#lex.ccon]) contributes an [?impldef
code unit sequence for [~conditional-escape-sequence]] code unit sequence.
[:zh_CN]
每个[~有条件转义序列]（[#lex.ccon]贡献一个[?impldef [~有条件转义序列]的代码单元
序列]代码单元序列。

[:en]
When encoding a stateful character encoding, it is [?impldef effect of
[~conditional-escape-sequence] on encoding state] what effect these sequences
have on encoding state.
[:zh_CN]
当编码一个有状态字符编码时，这些序列对编码状态有怎样的影响是[?impldef
[~有条件转义序列]对编码状态的影响]。
[list:end]
