[section#lex.ext
    [:en] User-defined literals
    [:zh_CN] 用户定义字面量
]

[%  [:en] literal[!user defined]
    [:zh_CN] 字面量[!用户定义～] ]

[syntax]
[rule user-defined-literal [:zh_CN] 用户定义字面量 ]
    [| user-defined-integer-literal ]
    [| user-defined-floating-point-literal ]
    [| user-defined-string-literal ]
    [| user-defined-character-literal ]
[rule:end]

[rule user-defined-integer-literal [:zh_CN] 用户定义整数字面量 ]
    [| decimal-literal ud-suffix ]
    [| octal-literal ud-suffix ]
    [| hexadecimal-literal ud-suffix ]
    [| binary-literal ud-suffix ]
[rule:end]

[rule user-defined-floating-point-literal [:zh_CN] 用户定义浮点字面量 ]
    [| fractional-constant [~:opt exponent-part] ud-suffix ]
    [| digit-sequence exponent-part ud-suffix ]
    [| hexadecimal-prefix hexadecimal-fractional-constant
        binary-exponent-part ud-suffix ]
    [| hexadecimal-prefix hexadecimal-digit-constant
        binary-exponent-part ud-suffix ]
[rule:end]

[rule user-defined-string-literal [:zh_CN] 用户定义字符串字面量 ]
    [| string-literal ud-suffix ]
[rule:end]

[rule user-defined-character-literal [:zh_CN] 用户定义字符字面量 ]
    [| character-literal ud-suffix ]
[rule:end]

[rule ud-suffix [:zh_CN] ud-后缀 ]
    [| identifier ]
[rule:end]
[syntax:end]

[para]
[:en]
If a token matches both [~user-defined-literal] and another [~literal] kind, it
is treated as the latter.
[:zh_CN]
如果某个记号同时匹配[~用户定义字面量]和另一个[~字面量]种类，则将其看作后者。

[begin:example]
[:en]
[`123_km] is a [~user-defined-literal], but [`12LL] is an [~integer-literal].
[:zh_CN]
[`123_km] 是[~用户定义字面量]，但 [`12LL] 是[~整数字面量]。
[end:example]

[:en]
The syntactic non-terminal preceding the [~ud-suffix] in a
[~user-defined-literal] is taken to be the longest sequence of characters that
could match that non-terminal.
[:zh_CN]
[~用户定义字面量]中处于[~ud-后缀]之前的语法非终结符，接受能够匹配这个非终结符的
最长的字符序列。

[para]
[:en]
A [~user-defined-literal] is treated as a call to a literal operator or literal
operator template ([#over.literal]).
[:zh_CN]
[~用户定义字面量]被当作是对字面量运算符或字面量运算符模板的一次调用
（[#over.literal]）。

[:en]
To determine the form of this call for a given [~user-defined-literal] [^L] with
[~ud-suffix] [^X], first let [^S] be the set of declarations found by
unqualified lookup for the [~literal-operator-id] whose literal suffix
identifier is [^X] ([#basic.lookup.unqual]).
[:zh_CN]
对于给定的带有[~ud-后缀][^X] 的[~用户定义字面量] [^L]，为确定该调用的形式，首先
令 [^S] 为针对以 [^X] 为字面量后缀标识符的[~字面量运算符标识]进行无限定查找所
找到的声明式集合（[#basic.lookup.unqual]）。

[:en]
[^S] shall not be empty.
[:zh_CN]
[^S] 不能为空。

[para]
[:en]
If [^L] is a [~user-defined-integer-literal], let [^n] be the literal without
its [~ud-suffix].
[:zh_CN]
若 [^L] 是一个[~用户定义整数字面量]，则令 [^n] 为不带有[~ud-后缀]的字面量。

[:en]
If [^S] contains a literal operator with parameter type [`unsigned long long],
the literal [^L] is treated as a call of the form
[:zh_CN]
若 [^S] 包含一个形参类型为 [`unsigned long long] 的字面量运算符，则将字面量 [^L]
当作如下形式的调用

[codeblock:notation]
operator "" [^X]([^n]ULL)
[codeblock:end]

[:en]
Otherwise, [^S] shall contain a raw literal operator or a numeric literal
operator template ([#over.literal]) but not both.
[:zh_CN]
否则，[^S] 应当包含一个原始字面量运算符或一个数值字面量运算符模板
（[#over.literal]），但不能同时包含二者。

[:en]
If [^S] contains a raw literal operator, the literal [^L] is treated as a call
of the form
[:zh_CN]
若 [^S] 包含一个原始字面量运算符，则将字面量 [^L] 当作如下形式的调用

[codeblock:notation]
operator "" [^X]("[^n]")
[codeblock:end]

[:en]
Otherwise ([^S] contains a numeric literal operator template), [^L] is treated
as a call of the form
[:zh_CN]
否则（[^S] 包含一个数值字面量运算符模板），将字面量 [^L] 当作如下形式的调用

[codeblock:notation]
operator "" [^X]<'[$c_1]', '[$c_2]', ... '[$c_k]'>()
[codeblock:end]

[:en]
where [^n] is the source character sequence [$c_1c_2...c_k].
[:zh_CN]
其中 [^n] 为源代码字符序列 [$c_1c_2...c_k]。

[begin:note]
[:en]
The sequence [$c_1c_2...c_k] can only contain characters from the basic source
character set.
[:zh_CN]
序列 [$c_1c_2...c_k] 只能包含基本源字符集中的字符。
[end:note]

[para]
[:en]
If [^L] is a [~user-defined-floating-point-literal], let [^f] be the literal
without its [~ud-suffix].
[:zh_CN]
若 [^L] 是一个[~用户定义浮点字面量]，则令 [^f] 为不带有[~ud-后缀]的字面量。

[:en]
If [^S] contains a literal operator with parameter type [`long double], the
literal [^L] is treated as a call of the form
[:zh_CN]
若 [^S] 包含一个形参类型为 [`long double] 的字面量运算符，则将字面量 [^L] 当作
如下形式的调用

[codeblock:notation]
operator "" [^X]([^f]L)
[codeblock:end]

[:en]
Otherwise, [^S] shall contain a raw literal operator or a numeric literal
operator template ([#over.literal]) but not both.
[:zh_CN]
否则，[^S] 应当包含一个原始字面量运算符或一个数值字面量运算符模板
（[#over.literal]），但不能同时包含二者。

[:en]
If [^S] contains a raw literal operator, the [~literal] [^L] is treated as a
call of the form
[:zh_CN]
若 [^S] 包含一个原始字面量运算符，则将[~字面量] [^L] 当作如下形式的调用

[codeblock:notation]
operator "" [^X]("[^f]")
[codeblock:end]

[:en]
Otherwise ([^S] contains a numeric literal operator template), [^L] is treated
as a call of the form
[:zh_CN]
否则（[^S] 包含一个数值字面量运算符模板），将字面量 [^L] 当作如下形式的调用

[codeblock:notation]
operator "" [^X]<'[$c_1]', '[$c_2]', ... '[$c_k]'>()
[codeblock:end]

[:en]
where [^f] is the source character sequence [$c_1c_2...c_k].
[:zh_CN]
其中 [^f] 为源代码字符序列 [$c_1c_2...c_k]。

[begin:note]
[:en]
The sequence [$c_1c_2...c_k] can only contain characters from the basic source
character set.
[:zh_CN]
序列 [$c_1c_2...c_k] 只能包含基本源字符集中的字符。
[end:note]

[para]
[:en]
If [^L] is a [~user-defined-string-literal], let [^str] be the literal without
its [~ud-suffix] and let [^len] be the number of code units in [^str] (i.e., its
length excluding the terminating null character).
[:zh_CN]
若 [^L] 是一个[~用户定义字符串字面量]，则令 [^str] 为不带有[~ud-后缀]的字面量，
又令 [^len] 为 [^str] 中的代码单元的数量（就是说，不包括结尾的空字符的长度）。

[:en]
If [^S] contains a literal operator template with a non-type template parameter
for which [^str] is a well-formed [~template-argument], the literal [^L] is
treated as a call of the form
[:zh_CN]
如果 [^S] 包含一个字面量运算符模板，其具有非类型模板形参且 [^str] 是其良构的
[~模板实参]，则将字面量 [^L] 当作如下形式的调用

[codeblock:notation]
operator "" [^X]<[^str]>()
[codeblock:end]

[:en]
Otherwise, the literal [^L] is treated as a call of the form
[:zh_CN]
否则，将字面量 [^L] 当作如下形式的调用

[codeblock:notation]
operator "" [^X]([^str], [^len])
[codeblock:end]

[para]
[:en]
If [^L] is a [~user-defined-character-literal], let [^ch] be the literal without
its [~ud-suffix].
[:zh_CN]
若 [^L] 是一个[~用户定义字符字面量]，则令 [^ch] 为不带有[~ud-后缀]的字面量。

[:en]
[^S] shall contain a literal operator ([#over.literal]) whose only parameter has
the type of [^ch] and the literal [^L] is treated as a call of the form
[:zh_CN]
[^S] 应当包含一个其唯一形参的类型为 [^ch] 的类型的字面量运算符
（[#over.literal]），并将字面量 [^L] 当作如下形式的调用

[codeblock:notation]
operator "" [^X]([^ch])
[codeblock:end]

[para]
[begin:example]
[codeblock]
long double operator "" _w(long double);
std::string operator "" _w(const char16_t*, std::size_t);
unsigned operator "" _w(const char*);
int main() {
  1.2_w;            // [:en] calls [`operator "" _w(1.2L)] \
                       [:zh_CN] 调用 [`operator "" _w(1.2L)]
  u"one"_w;         // [:en] calls [`operator "" _w(u"one", 3)] \
                       [:zh_CN] 调用 [`operator "" _w(u"one", 3)]
  12_w;             // [:en] calls [`operator "" _w("12")] \
                       [:zh_CN] 调用 [`operator "" _w("12")]
  "two"_w;          // [:en] error: no applicable literal operator \
                       [:zh_CN] 错误：没有适用的字面量运算符
}
[codeblock:end]
[end:example]

[para]
[:en]
In translation phase 6 ([#lex.phases]), adjacent [~string-literal]s are
concatenated and [~user-defined-string-literal]s are considered
[~string-literal]s for that purpose.
[:zh_CN]
在翻译阶段 6 中（[#lex.phases]），相邻的[~字符串字面量]要进行拼接，而
[~用户定义字符串字面量]也被当作其中的[~字符串字面量]。

[:en]
During concatenation, [~ud-suffix]es are removed and ignored and the
concatenation process occurs as described in [#lex.string].
[:zh_CN]
进行拼接时，移除并忽略所有 [~ud-后缀]，而拼接过程按照 [#lex.string] 的描述进行。

[:en]
At the end of phase 6, if a [~string-literal] is the result of a concatenation
involving at least one [~user-defined-string-literal], all the participating
[~user-defined-string-literal]s shall have the same [~ud-suffix] and that suffix
is applied to the result of the concatenation.
[:zh_CN]
阶段 6 结束时，若某个[~字符串字面量]是由至少涉及一个[~用户定义字符串字面量]的
拼接所产生的，则其中所有参与的[~用户定义字符串字面量]都应当带有相同的 [~ud-后缀]，
并将这个后缀应用到拼接的结果上。

[para]
[begin:example]
[codeblock]
int main() {
  L"A" "B" "C"_x;   // [:en] OK: same as [`L"ABC"_x] \
                       [:zh_CN] OK：与 [`L"ABC"_x] 相同
  "P"_x "Q" "R"_y;  // [:en] error: two different [~ud-suffix]es \
                       [:zh_CN] 错误：两个不同的 [~ud-后缀]
}
[codeblock:end]
[end:example]
