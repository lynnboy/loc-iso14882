[section#lex.phases
    [:en] Phases of translation
    [:zh_CN] 翻译的阶段
]

[%:begin#translation.phases
    [:en] translation [!phases]
    [:zh_CN] 翻译 [!阶段]
]

[para]
[:en] The precedence among the syntax rules of translation is specified by the
following phases.[#:fn]
[:zh_CN] 下列各阶段指定了所翻译的语法规则之间的先后次序[#:fn]。

[note:foot]
[:en] Implementations behave as if these separate phases occur, although in
practice different phases can be folded together.
[:zh_CN] 实现应当表现为如同这些阶段是分别发生的，但实际上可以将不同的阶段合并进行。
[note:end]

[list:ol@ndot]
[item]
[:en] [%character[!source file]]
An implementation shall support input files that are a sequence of UTF-8 code
units (UTF-8 files).
[:zh_CN] [%字符[!源文件～]]
实现应当支持 UTF-8 代码单元序列构成的输入文件（UTF-8 文件）。

[:en] It may also support an [?impldef supported input files] set of other kinds
of input files, and, if so, the kind of an input file is determined in an
[?impldef determination of kind of input file] manner that includes a means of
designating input files as UTF-8 files, independent of their content.
[:zh_CN] 实现还可以支持其他种类输入文件的[?impldef 支持的输入文件]集合，并且若是如此，
通过某种[?impldef 确定输入文件的种类]方式确定输入文件的种类，这包括将输入文件
指定为 UTF-8 文件而与文件内容无关的方法。

[begin:note]
[:en] In other words, recognizing the [=unicode(feff,byte order mark)] is not
sufficient.
[:zh_CN] 换句话说，仅识别 [=unicode(feff,byte order mark)] 是不够的。
[end:note]

[:en] If an input file is determined to be a UTF-8 file, then it shall be a
well-formed UTF-8 code unit sequence and it is decoded to produce a sequence of
Unicode[#:fn] scalar values.
[:zh_CN] 如果输入文件被确定为 UTF-8 文件，则它应当是良构的 UTF-8 代码单元序列，
并对其解码以产生一个 Unicode[#:fn] 标量值的序列。

[note:foot]
[:en] Unicode[=Reg] is a registered trademark of Unicode, Inc.
[:zh_CN] Unicode[=Reg] 是 Unicode 有限公司的注册商标。

[:en] This information is given for the convenience of users of this document
and does not constitute an endorsement by ISO or IEC of this product.
[:zh_CN] 这条信息是为本文档的用户的便利而提供的，并不构成 ISO 或 IEC 对此产品的宣传。
[note:end]

[:en] A sequence of translation character set elements is then formed by mapping
each Unicode scalar value to the corresponding translation character set element.
[:zh_CN] 然后通过将每个 Unicode 标量值映射为对应的翻译字符集元素的方式构成翻译字符集
元素序列。

[:en] In the resulting sequence, each pair of characters in the input sequence
consisting of [=unicode(000d,carriage return)] followed by
[=unicode(000a,line feed)], as well as each [=unicode(000d,carriage return)] not
immediately followed by a [=unicode(000a,line feed)], is replaced by a single
new-line character.
[:zh_CN] 在结果序列中，输入序列中由 [=unicode(000d,carriage return)] 跟着
[=unicode(000a,line feed)] 构成的每对字符，和每个后面并未紧跟
[=unicode(000a,line feed)] 的 [=unicode(000d,carriage return)] 字符，均被替换为
单个换行字符。

[para:~]
[:en] For any other kind of input file supported by the implementation, characters
are mapped, in an [?impldef mapping physical source file characters to translation
character set] manner, to a sequence of translation character set elements ([#lex.charset]),
representing end-of-line indicators as new-line characers.
[:zh_CN] 对于实现支持的任何其他种类的输入文件，以一种[?impldef 将物理源文件字符
映射到翻译字符集]方式将各字符映射到一个翻译字符集（[#lex.charset]）成员的序列中，
其中将行尾指示符表示为换行字符。

[item]
[:en] [%line splicing]
If the first translation character is [=unicode(feff,byte order mark)], it is
deleted.
[:zh_CN] [%行接合]
如果第一个翻译字符为 [=unicode(feff,byte order mark)]，则将之删除。

[:en] Each sequence of a backslash character (\) immediately followed by zero or
more whitespace characters other than new-line followed by a new-line character
is deleted, splicing physical source lines to form [+logical source lines
[%source line[!logical]]].
[:zh_CN] 删除所有反斜杠字符（\）及其后紧跟的零个或更多除换行之外的空白字符再跟着一个
换行字符所构成的序列，将物理的源文本行接合成[+逻辑源文本行[%源文本行[!逻辑]]]。

[:en] Only the last backslash on any physical source line shall be eligible for
being part of such a splice.
[:zh_CN] 在任何物理源文本行中，只有末尾的反斜杠适用于这种接合。

[begin:note]
[:en] Line splicing can form a [~universal-character-name] ([#lex.charset]).
[:zh_CN] 行接合可能产生[~通用字符名]（[#lex.charset]）。
[end:note]

[:en] A source file that is not empty and that (after splicing) does not end in
a new-line character, or that ends in a splice, shall be processed as if an
additional new-line character were appended to the file.
[:zh_CN] 如果非空的源文件（接合完成后）不以换行字符结尾，或以一个接合结尾，则
对其进行处理时应当如同该文件追加了一个额外的换行字符一样。

[item]
[:en] The source file is decomposed into preprocessing tokens ([#lex.pptoken])
and sequences of whitespace characters (including comments).
[:zh_CN] 将源文件分解为预处理记号（[#lex.pptoken]）和空白字符（包括注释）的序列。

[:en] A source file shall not end in a partial preprocessing token or in a
partial comment.[#:fn]
[:zh_CN] 源文件不应该在不完整的预处理记号或不完整的注释中结束[#:fn]。

[note:foot]
[:en] A partial preprocessing token would arise from a source file ending in the
first portion of a multi-character token that requires a terminating sequence of
characters, such as a [~header-name] that is missing the closing [`"] or [`>].
[:zh_CN] 当源文件在某个需要终结字符序列的多字符记号的前一部分处结束时，就会出现不完整的
预处理记号，比如缺失闭合的 [`"] 或 [`>] 的[~头文件名]。

[:en] A partial comment would arise from a source file ending with an unclosed
[`/*] comment.
[:zh_CN] 当源文件在没闭合的 [`/*] 注释中结束时，就会出现不完整的注释。
[note:end]

[:en] Each comment is replaced by one space character.
[:zh_CN] 把每个注释都替换为一个空格字符。

[:en] New-line characters are retained.
[:zh_CN] 保留换行字符。

[:en] Whether each nonempty sequence of whitespace characters other than
new-line is retained or replaced by one space character is unspecified.
[:zh_CN] 是否将除换行字符以外的空白字符的非空序列保留或将其替换为一个空格字符是未指明的。

[:en] As characters from the source file are consumed to form the next
preprocessing token (i.e., not being consumed as part of a comment or other forms
of whitespace), except when matching a [~c-char-sequence], [~s-char-sequence],
[~r-char-sequence], [~h-char-sequence], or [~q-char-sequence],
[~universal-character-name]s are recognized and replaced by the designated
element of the translation character set.
[:zh_CN] 从源文件中消耗字符以构成下一个预处理记号（亦即，并非在注释或任何其他形式的
空白中消耗的字符），当所匹配的不是 [~c-字符序列]、[~s-字符序列]、[~r-字符序列]、
[~h-字符序列] 或 [~q-字符序列] 时，[~通用字符名]被识别并替换为翻译字符集中其所
代表的元素。

[:en] The process of dividing a source file[=']s characters into preprocessing
tokens is context-dependent.
[:zh_CN] 将源文件的字符分割成预处理记号的过程是上下文相关的。

[begin:example]
[:en] See the handling of [`<] within a [`#include] preprocessing directive ([#cpp.include]).
[:zh_CN] 参见 [`#include] 预处理指令中对 [`<] 的处理（[#cpp.include]）。
[end:example]

[item]
[:en] Preprocessing directives are executed, macro invocations are expanded, and
[`_Pragma] unary operator expressions are executed.
[:zh_CN] 执行预处理指令，对宏调用进行展开，并执行 [`_Pragma] 一元运算符表达式。

[:en] A [`#include] preprocessing directive causes the named header or source
file to be processed from phase 1 through phase 4, recursively.
[:zh_CN] [`#include] 预处理指令将导致递归地对被指名的头文件或源文件进行从阶段 1 到
阶段 4 的处理。

[:en] All preprocessing directives are then deleted.
[:zh_CN] 随后即删除所有预处理指令。

[item]
[:en] For a sequence of two or more adjacent [~string-literal] tokens, a common
[~encoding-prefix] is determined as specified in [#lex.string].
[:zh_CN] 对于相邻的两个或更多[~字符串字面量]记号，根据 [#lex.string] 的规定以确定
一个共同[~编码前缀]。

[:en] Each such [~string-literal] token is then considered to have that common
[~encoding-prefix].
[:zh_CN] 每个这种[~字符串字面量]记号随机均认为具有这个共同[~编码前缀]。

[item]
[:en] Adjacent [~string-literal] tokens are concatenated ([#lex.string]).
[:zh_CN] 拼接相邻的[~字符串字面量]记号（[#lex.string]）。

[item]
[:en] Whitespace characters separating tokens are no longer significant.
[:zh_CN] 用于分隔记号的空白字符不再有意义。

[:en] Each preprocessing token is converted into a token ([#lex.token]).
[:zh_CN] 把每个预处理记号转换为一个记号（[#lex.token]）。

[:en] The resulting tokens constitute a [+translation unit] and syntactically
and semantically analyzed and translated.
[:zh_CN] 所产生的这些记号构成一个[+翻译单元]，并对之进行语法和语义的分析和翻译。

[begin:note]
[:en] The process of analyzing and translating the tokens can occasionally
result in one token being replaced by a sequence of other tokens ([#temp.names]).
[:zh_CN] 分析和翻译的过程可能偶尔会导致某个记号被替换为一系列其他记号（[#temp.names]）。
[end:note]

[:en] It is [?impldef whether the sources for module units and header units on
which the current translation unit has an interface dependency are required to
be available during translation] whether the sources for module units and header
units on which the current translation unit has an interface dependency
([#module.unit], [#module.import]) are required to be available.
[:zh_CN] 当前翻译单元对之存在接口依赖（[#module.unit]，[#module.import]）的模块单元
和头文件单元的源代码是否应当可用是[?impldef 翻译过程中当前翻译单元对之存在
接口依赖的模块单元和头文件单元的源代码是否应当可用]。

[begin:note]
[:en] Source files, translation units and translated translation units need not
necessarily be stored as files, nor need there be any one-to-one correspondence
between these entities and any external representation.
[:zh_CN] 源文件、翻译单元和已翻译过的翻译单元不必存储为文件，也不必在这些实体和其
外部表示之间进行一一对应。

[:en] The description is conceptual only, and does not specify any particular
implementation.
[:zh_CN] 这仅是个概念上的描述，而并非对任何特定的实现的说明。
[end:note]

[item]
[:en] Translated translation units and instantiation units are combined as follows:
[:zh_CN] 已翻译过的翻译单元和实例化单元按如下方式合并：

[begin:note]
[:en] Some or all of these can be supplied from a library.
[:zh_CN] 其中的某些或全部单元都可以由程序库提供。
[end:note]

[:en] Each translated translation unit is examined to produce a list of required
instantiations.
[:zh_CN] 检查每个已翻译过的翻译单元以产生其所需的实例化的列表。

[begin:note]
[:en] This can include instantiations which have been explicitly requested ([#temp.explicit]).
[:zh_CN] 其中可以包括经由显式要求（[#temp.explicit]）的实例化。
[end:note]

[:en] The definitions of the required templates are located.
[:zh_CN] 对所需要的模板定义进行定位。

[:en] It is [?impldef whether source of translation units must be available to
locate template definitions] whether the source of the translation units
containing these definitions is required to be available.
[:zh_CN] 包含这些定义的翻译单元的源文件此时是否应当可用是[?impldef 当对模板定义
进行定位时翻译单元的源文件是否必须可用]。

[begin:note]
[:en] An implementation can choose to encode sufficient information into the
translated translation unit so as to ensure the source is not required here.
[:zh_CN] 实现可以选择将充分的信息编码进已翻译过的翻译单元，以确保此时不需要源文件。
[end:note]

[:en] All the required instantiations are performed to produce [+instantiation units].
[:zh_CN] 实施所有需要的实例化以产生[+实例化单元]。

[begin:note]
[:en] These are similar to translated translation units, but contain no
references to uninstantiated templates and no template definitions.
[:zh_CN] 它们类似于已翻译过的翻译单元，但不包含对任何未实例化的模板的引用和任何模板定义。
[end:note]

[:en] The program is ill-formed if any instantiation fails.
[:zh_CN] 如果任何实例化失败，则程序是非良构的。

[item]
[:en] All external entity references are resolved.
[:zh_CN] 解决所有对外部实体的引用。

[:en] Library components are linked to satisfy external references to entities
not defined in the current translation.
[:zh_CN] 将程序库组件连接进程序，以满足在当前翻译中未定义的实体的外部引用。

[:en] All such translator output is collected into a program image which
contains information needed for execution in its execution environment.
[:zh_CN] 所有这些翻译器输出都汇集到一个程序映像中，它包含在其执行环境中执行所需要的信息。

[list:end]

[%:end#translation.phases]
