[section#lex.digraph
    [:en] Alternative tokens
    [:zh_CN] 代用记号
]

[%:begin#alternative.token
    [:en] token [!alternative]
    [:zh_CN] 记号 [!代用～]
]

[para]
[:en]
Alternative token representations are provided for some operators and
punctuators.[#:fn]
[:zh_CN]
某些运算符和标点具有可替代的记号表示形式[#:fn]。

[note:foot]
[:en]
[%digraph]
These include [=lq]digraphs[=rq] and additional reserved words.
[:zh_CN]
[%二联符]
包括“二联符”和额外的保留字。

[:en]
The term [=lq]digraphs[=rq] (token consisting of two characters) is not perfectly
descriptive, since one of the alternative [~preprocessing-token]s is [`%:%:] and
of course several primary tokens contain two characters.
[:zh_CN]
术语“二联符”（由两个字符构成的记号）的表达效果并不完美，因为代用的[~预处理记号]
中有一个是 [`%:%:]，而且好几个首选记号也有两个字符。

[:en]
Nonetheless, those alternative tokens that aren[=']t lexical keywords are
colloquially known as [=lq]digraphs[=rq].
[:zh_CN]
虽然如此，这些不是词法关键字的代用记号还是通俗地被称为“二联符”。
[note:end]

[para]
[:en]
In all respects of the language, each alternative token behaves the same,
respectively, as its primary token, except for its spelling.[#:fn]
[:zh_CN]
除了拼写之外，每个代用记号和它所对应的首选记号的行为，在语言的所有方面都相同[#:fn]。

[note:foot]
[:en]
Thus the [=lq]stringized[=rq] values ([#cpp.stringize]) of [``[] and [`<:] will
be different, maintaining the source spelling, but the tokens can otherwise be
freely interchanged.
[:zh_CN]
[``[] 和 [`<:] 的“字符串化”的值（[#cpp.stringize]）有所不同（维持其在源文件中的
拼写），但除此之外这些记号可以自由互换。
[note:end]

[:en]
The set of alternative tokens is defined in [#:tab#lex.digraph].
[:zh_CN]
[#:tab#lex.digraph] 定义了代用记号的集合。

[table:listing@shape=6x?@fill=column@border=row+side#lex.digraph
    [:en] Alternative tokens
    [:zh_CN] 代用记号
    [|@code@center
        [:en] Alternative
        [:zh_CN] 代用记号
    ]
    [|@code@center
        [:en] Primary
        [:zh_CN] 首选记号
    ]
]
[|] <%      [|] {
[|] %>      [|] }
[|] <:      [|] [
[|] :>      [|] ]
[|] %:      [|] #
[|] %:%:    [|] ##

[|] [`:key and]     [|] &&
[|] [`:key bitor]   [|] |
[|] [`:key or]      [|] ||
[|] [`:key xor]     [|] ^
[|] [`:key compl]   [|] ~
[|] [`:key bitand]  [|] &

[|] [`:key and_eq]  [|] &=
[|] [`:key or_eq]   [|] |=
[|] [`:key xor_eq]  [|] ^=
[|] [`:key not]     [|] !
[|] [`:key not_eq]  [|] !=
[table:end]

[%:end#alternative.token]
