[section#alg.unique
    [:en] Unique
    [:zh_CN] 唯一
]

[%@lib unique]
[codeblock:declaration]
template<class ForwardIterator>
  constexpr ForwardIterator unique(ForwardIterator first, ForwardIterator last);
template<class ExecutionPolicy, class ForwardIterator>
  ForwardIterator unique(ExecutionPolicy&& exec,
                         ForwardIterator first, ForwardIterator last);

template<class ForwardIterator, class BinaryPredicate>
  constexpr ForwardIterator unique(ForwardIterator first, ForwardIterator last,
                                   BinaryPredicate pred);
template<class ExecutionPolicy, class ForwardIterator, class BinaryPredicate>
  ForwardIterator unique(ExecutionPolicy&& exec,
                         ForwardIterator first, ForwardIterator last,
                         BinaryPredicate pred);

template<permutable I, sentinel_for<I> S, class Proj = identity,
         indirect_relation<projected<I, Proj>> C = ranges::equal_to>
  constexpr subrange<I> ranges::unique(I first, S last, C comp = {}, Proj proj = {});
template<forward_range R, class Proj = identity,
         indirect_relation<projected<iterator_t<R>, Proj>> C = ranges::equal_to>
  requires permutable<iterator_t<R>>
  constexpr safe_subrange_t<R>
    ranges::unique(R&& r, C comp = {}, Proj proj = {});
[codeblock:end]

[div:description]
[para]
[:en] Let [`pred] be [`equal_to{}] for the overloads with no parameter [`pred],
and let [$E] be
[:zh_CN] 令 [`pred] 对于没有形参 [`pred] 的各重载为 [`equal_to{}]，并令 [$E]：
[list]
[item]
[:en@~] [`bool(pred(*(i - 1), *i))] for the overloads in namespace [`std], or
[:zh_CN@~] 对于命名空间 [`std] 中的各重载为 [`bool(pred(*(i - 1), *i))]，
[item]
[:en@~] [`bool(invoke(comp, invoke(proj, *(i - 1)), invoke(proj, *i)))] for the
overloads in namespace [`ranges].
[:zh_CN@~] 对于命名空间 [`ranges] 中的各重载为
[`bool(invoke(comp, invoke(proj, *(i - 1)), invoke(proj, *i)))]。
[list:end]

[para:requires]
[:en] For the overloads in namespace [`std], [`pred] shall be an equivalence
relation and the type of [`*first] shall meet the [^:oc MoveAssignable]
requirements ([#:tab#cpp17.moveassignable]).
[:en] The type of [`*first] shall meet the 
[:zh_CN] 对于命名空间 [`std] 中的各重载，[`pred] 应当为一种等价关系，并且
[`*first] 的类型应当满足 [^:oc MoveAssignable] 的规定
（[#:tab#cpp17.moveassignable]）。

[para:effects]
[:en] For a nonempty range, eliminates all but the first element from every
consecutive group of equivalent elements referred to by the iterator [`i] in the
range [=range(first + 1,last)] for which [$E] is [`true].
[:zh_CN] 对于非空范围，清除每个等价元素的连续组中除第一个元素外的所有元素，其中
元素为由范围 [=range(first + 1,last)] 中的迭代器 [`i] 所指代的，且使得 [$E] 为
[`true]。

[para:returns]
[:en] Let [$j] be the end of the resulting range.
[:zh_CN] 令 [$j] 为结果范围的末尾。

[:en] Returns:
[:zh_CN] 返回：
[list]
[item]
[:en@~] [$j] for the overloads in namespace [`std], or
[:zh_CN@~] 对于命名空间 [`std] 中的重载，返回 [$j]，或
[item]
[:en@~] [`{[$j], last}] for the overloads in namespace [`ranges].
[:zh_CN@~] 对于命名空间 [`ranges] 中的重载，返回 [`{[$j], last}]。
[list:end]

[para:complexity]
[:en] For nonempty ranges, exactly [`(last - first) - 1] applications of the
corresponding predicate and no more than twice as many applications of any
projection.
[:zh_CN] 对于非空范围，恰好进行 [`(last - first) - 1] 次对应谓词的运用，以及
不多于两倍的任何投射的运用。
[div:end]

[%@lib unique_copy]
[codeblock:declaration]
template<class InputIterator, class OutputIterator>
  constexpr OutputIterator
    unique_copy(InputIterator first, InputIterator last,
                OutputIterator result);
template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2>
  ForwardIterator2
    unique_copy(ExecutionPolicy&& exec,
                ForwardIterator1 first, ForwardIterator1 last,
                ForwardIterator2 result);

template<class InputIterator, class OutputIterator,
         class BinaryPredicate>
  constexpr OutputIterator
    unique_copy(InputIterator first, InputIterator last,
                OutputIterator result, BinaryPredicate pred);
template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2,
         class BinaryPredicate>
  ForwardIterator2
    unique_copy(ExecutionPolicy&& exec,
                ForwardIterator1 first, ForwardIterator1 last,
                ForwardIterator2 result, BinaryPredicate pred);

template<input_iterator I, sentinel_for<I> S, weakly_incrementable O,
         class Proj = identity, indirect_relation<projected<I, Proj>> C = ranges::equal_to>
  requires indirectly_copyable<I, O> &&
           (forward_iterator<I> ||
            (input_iterator<O> && same_as<iter_value_t<I>, iter_value_t<O>>) ||
            indirectly_copyable_storable<I, O>)
  constexpr ranges::unique_copy_result<I, O>
    ranges::unique_copy(I first, S last, O result, C comp = {}, Proj proj = {});
template<input_range R, weakly_incrementable O, class Proj = identity,
         indirect_relation<projected<iterator_t<R>, Proj>> C = ranges::equal_to>
  requires indirectly_copyable<iterator_t<R>, O> &&
           (forward_iterator<iterator_t<R>> ||
            (input_iterator<O> && same_as<range_value_t<R>, iter_value_t<O>>) ||
            indirectly_copyable_storable<iterator_t<R>, O>)
  constexpr ranges::unique_copy_result<safe_iterator_t<R>, O>
    ranges::unique_copy(R&& r, O result, C comp = {}, Proj proj = {});
[codeblock:end]

[div:description]
[para]
[:en] Let [`pred] be [`equal_to{}] for the overloads in namespace [`std] with no
parameter [`pred], and let [$E] be
[:zh_CN] 令 [`pred] 对于命名空间 [`std] 中的没有形参 [`pred] 的各重载为
[`equal_to{}]，并令 [$E]：
[list]
[item]
[:en@~] [`bool(pred(*i, *(i - 1)))] for the overloads in namespace [`std], or
[:zh_CN@~] 对于命名空间 [`std] 中的各重载为 [`bool(pred(*i, *(i - 1)))]，
[item]
[:en@~] [`bool(invoke(comp, invoke(proj, *i), invoke(proj, *(i - 1))))] for the
overloads in namespace [`ranges].
[:zh_CN@~] 对于命名空间 [`ranges] 中的各重载为
[`bool(invoke(comp, invoke(proj, *i), invoke(proj, *(i - 1))))]。
[list:end]

[para:requires]
[list]
[item]
[:en] The comparison function shall be an equivalence relation.
[:zh_CN] 比较函数应当提供等价关系。

[item]
[:en] The ranges [=range(first,last)] and [=range(result,result+(last-first))]
shall not overlap.
[:zh_CN] 范围 [=range(first,last)] 和 [=range(result,result+(last-first))] 不能
有重叠。

[item]
[:en] For the overloads in namespace [`std]:
[:zh_CN] 对于命名空间 [`std] 中的各重载：

[list]
[item]
[:en] The comparison function shall be an equivalence relation.
[:zh_CN] 比较函数应当是一种等价关系。

[item]
[:en] The expression [`*result = *first] shall be valid.
[:zh_CN] 表达式 [`*result = *first] 应当有效。

[item]
[:en] For the overloads with no [`ExecutionPolicy], let [`T] be the value type
of [`InputIterator].
[:zh_CN] 对于不带有 [`ExecutionPolicy] 的重载，令 [`T] 为 [`InputIterator] 的
值类型。

[:en] If [`InputIterator] meets the [^:oc ForwardIterator] requirements, then
there are no additional requirements for [`T].
[:zh_CN] 如果 [`InputIterator] 满足 [^:oc ForwardIterator] 的规定，则对 [`T]
没有其他的规定。

[:en] Otherwise, if [`OutputIterator] meets the [^:oc ForwardIterator]
requirements and its value type is the same as [`T], then [`T] shall meet the
[^:oc CopyAssignable] ([#:tab#cpp17.copyassignable]) requirements.
[:zh_CN] 否则，如果 [`OutputIterator] 满足 [^:oc ForwardIterator] 的规定，且其
值类型与 [`T] 相同，则 [`T] 应当满足 [^:oc CopyAssignable]
（[#:tab#cpp17.copyassignable]）
的规定。

[:en] Otherwise, [`T] shall meet both the [^:oc CopyConstructible]
([#:tab#cpp17.copyconstructible]) and [^:oc CopyAssignable] requirements.
[:zh_CN] 否则，[`T] 应当同时符合 [^:oc CopyConstructible]
（[#:tab#cpp17.copyconstructible]）和 [^:oc CopyAssignable] 的规定。

[begin:note]
[:en] For the overloads with an [`ExecutionPolicy], there may be a performance
cost if the value type of [`ForwardIterator1] does not meet both the
[^:oc CopyConstructible] and [^:oc CopyAssignable] requirements.
[:zh_CN] 对于带有 [`ExecutionPolicy] 的重载，当 [`ForwardIterator1] 的值类型并不
同时满足 [^:oc CopyConstructible] 和 [^:oc CopyAssignable] 的规定时，可能存在
性能损耗。
[end:note]
[list:end]
[list:end]

[para:effects]
[:en] Copies only the first element from every consecutive group of equal
elements referred to by the iterator [`i] in the range [=range(first,last)]
for which [$E] holds.
[:zh_CN] 对每个相等元素的连续组的第一个元素进行复制，其中元素为由范围
[=range(first + 1,last)] 中的迭代器 [`i] 所指代的，且使得 [$E] 成立。

[para:returns]
[list]
[item]
[:en@~] [`result + [$N]], for the overloads in namespace [`std], or
[:zh_CN@~] 对于命名空间 [`std] 中的各重载，返回 [`result + [$N]]，或者
[item]
[:en@~] [`{last, result + [$N]}], for the overloads in namespace [`ranges].
[:zh_CN@~] 对于命名空间 [`ranges] 中的各重载，返回 [`{last, result + [$N]}]。
[list:end]

[para:complexity]
[:en] Exactly [`last - first - 1] applications of the corresponding predicate
and no more than twice as many applications of any projection.
[:zh_CN] 恰好进行 [`last - first - 1] 次对应谓词的运用，以及不多于两倍的任何投射
的运用。
[div:end]
