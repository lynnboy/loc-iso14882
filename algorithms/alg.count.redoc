[section#alg.count
    [:en] Count
    [:zh_CN] 计数
]

[%@lib count]
[%@lib count_if]
[codeblock:declaration]
template<class InputIterator, class T>
  constexpr typename iterator_traits<InputIterator>::difference_type
    count(InputIterator first, InputIterator last, const T& value);
template<class ExecutionPolicy, class ForwardIterator, class T>
  typename iterator_traits<ForwardIterator>::difference_type
    count(ExecutionPolicy&& exec,
          ForwardIterator first, ForwardIterator last, const T& value);

template<class InputIterator, class Predicate>
  constexpr typename iterator_traits<InputIterator>::difference_type
    count_if(InputIterator first, InputIterator last, Predicate pred);
template<class ExecutionPolicy, class ForwardIterator, class Predicate>
  typename iterator_traits<ForwardIterator>::difference_type
    count_if(ExecutionPolicy&& exec,
             ForwardIterator first, ForwardIterator last, Predicate pred);

template<input_iterator I, sentinel_for<I> S, class T, class Proj = identity>
  requires indirect_relation<ranges::equal_to, projected<I, Proj>, const T*>
  constexpr iter_difference_t<I>
    ranges::count(I first, S last, const T& value, Proj proj = {});
template<input_range R, class T, class Proj = identity>
  requires indirect_relation<ranges::equal_to, projected<iterator_t<R>, Proj>, const T*>
  constexpr range_difference_t<R>
    ranges::count(R&& r, const T& value, Proj proj = {});
template<input_iterator I, sentinel_for<I> S, class Proj = identity,
         indirect_unary_predicate<projected<I, Proj>> Pred>
  constexpr iter_difference_t<I>
    ranges::count_if(I first, S last, Pred pred, Proj proj = {});
template<input_range R, class Proj = identity,
         indirect_unary_predicate<projected<iterator_t<R>, Proj>> Pred>
  constexpr range_difference_t<R>
    ranges::count_if(R&& r, Pred pred, Proj proj = {});
[codeblock:end]

[div:description]
[para]
[:en] Let [$E] be:
[:zh_CN] 令 [$E]：

[list]
[item]
[:en@~] [`*i == value] for the overloads with no parameter [`pred] or [`proj],
[:zh_CN@~] 对于没有形参 [`pred] 或 [`proj] 的重载为 [`*i == value]，
[item]
[:en@~] [`pred(*i) != false] for the overloads with a parameter [`pred] but no
parameter [`proj],
[:zh_CN@~] 对于带有一个形参 [`pred] 但没有形参 [`proj] 的重载为
[`pred(*i) != false]，
[item]
[:en@~] [`invoke(proj, *i) == value] for the overloads with a parameter [`proj]
but no parameter [`pred],
[:zh_CN@~] 对于带有一个形参 [`proj] 但没有形参 [`pred] 的重载为
[`invoke(proj, *i) == value]，
[item]
[:en@~] [`invoke(pred, invoke(proj, *i)) != false] for the overloads with both
parameters [`proj] and [`pred].
[:zh_CN@~] 对于同时带有形参 [`proj] 和 [`pred] 的重载为
[`invoke(pred, invoke(proj, *i)) != false]。
[list:end]

[para:effects]
[:en] Returns the number of iterators [`i] in the range [=range(first,last)] for
which [$E] holds.
[:zh_CN] 返回范围 [=range(first,last)] 中使 [$E] 成立的迭代器 [`i] 的数量。

[para:complexity]
[:en] Exactly [`last - first] applications of the corresponding predicate and
any projection.
[:zh_CN] 恰好进行 [`last - first] 次相应谓词和任意投射的运用。
[div:end]
