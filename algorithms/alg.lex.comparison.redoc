[section#alg.lex.comparison
    [:en] Lexicographical comparison
    [:zh_CN] 字典序比较
]

[%@lib lexicographical_compare]
[codeblock:declaration]
template<class InputIterator1, class InputIterator2>
  constexpr bool
    lexicographical_compare(InputIterator1 first1, InputIterator1 last1,
                            InputIterator2 first2, InputIterator2 last2);
template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2>
  bool
    lexicographical_compare(ExecutionPolicy&& exec,
                            ForwardIterator1 first1, ForwardIterator1 last1,
                            ForwardIterator2 first2, ForwardIterator2 last2);

template<class InputIterator1, class InputIterator2, class Compare>
  constexpr bool
    lexicographical_compare(InputIterator1 first1, InputIterator1 last1,
                            InputIterator2 first2, InputIterator2 last2,
                            Compare comp);
template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2,
         class Compare>
  bool
    lexicographical_compare(ExecutionPolicy&& exec,
                            ForwardIterator1 first1, ForwardIterator1 last1,
                            ForwardIterator2 first2, ForwardIterator2 last2,
                            Compare comp);

template<input_iterator I1, sentinel_for<I1> S1, input_iterator I2, sentinel_for<I2> S2,
         class Proj1 = identity, class Proj2 = identity,
         indirect_strict_weak_order<projected<I1, Proj1>,
                                    projected<I2, Proj2>> Comp = ranges::less>
  constexpr bool
    ranges::lexicographical_compare(I1 first1, S1 last1, I2 first2, S2 last2,
                                    Comp comp = {}, Proj1 proj1 = {}, Proj2 proj2 = {});
template<input_range R1, input_range R2, class Proj1 = identity,
         class Proj2 = identity,
         indirect_strict_weak_order<projected<iterator_t<R1>, Proj1>,
                                    projected<iterator_t<R2>, Proj2>> Comp = ranges::less>
  constexpr bool
    ranges::lexicographical_compare(R1&& r1, R2&& r2, Comp comp = {},
                                    Proj1 proj1 = {}, Proj2 proj2 = {});
[codeblock:end]

[div:description]
[para:returns]
[:en] [`true] if and only if the sequence of elements defined by the range
[=range(first1,last1)] is lexicographically less than the sequence of elements
defined by the range [=range(first2,last2)].
[:zh_CN] 当且仅当由范围 [=range(first1,last1)] 所定义的元素序列按字典序小于由
范围 [=range(first2,last2)] 所定义的元素序列时返回 [`true]。

[para:complexity]
[:en] At most [$2 \min([`last1 - first1], [`last2 - first2])] applications of
the corresponding comparison and each projection, if any.
[:zh_CN] 最多进行 [$2 \min([`last1 - first1], [`last2 - first2])] 次对应比较
的运用和（如果有）每种投射。

[para:remarks]
[:en] If two sequences have the same number of elements and their corresponding
elements (if any) are equivalent, then neither sequence is lexicographically
less than the other.
[:zh_CN] 如果两个序列具有相同数量的元素，并且它们的对应元素（如果有则）等价，则
两个序列按字典序没有任何一个小于另一个。

[:en] If one sequence is a proper prefix of the other, then the shorter sequence
is lexicographically less than the longer sequence.
[:zh_CN] 如果一个序列是另一个的真前缀，则较短的序列按字典序小于较长的序列。

[:en] Otherwise, the lexicographical comparison of the sequences yields the same
result as the comparison of the first corresponding pair of elements that are
not equivalent.
[:zh_CN] 否则，对序列进行字典序比较的结果与对其中第一对不等价的元素对进行比较的
结果相同。

[para]
[begin:example]
[:en] [`ranges::lexicographical_compare(I1, S1, I2, S2, Comp, Proj1, Proj2)]
could be implemented as:
[:zh_CN] [`ranges::lexicographical_compare(I1, S1, I2, S2, Comp, Proj1, Proj2)]
可以实现为：

[codeblock:notation]
for ( ; first1 != last1 && first2 != last2 ; ++first1, (void) ++first2) {
  if (invoke(comp, invoke(proj1, *first1), invoke(proj2, *first2))) return true;
  if (invoke(comp, invoke(proj2, *first2), invoke(proj1, *first1))) return false;
}
return first1 == last1 && first2 != last2;
[codeblock:end]
[end:example]

[para]
[begin:note]
[:en] An empty sequence is lexicographically less than any non-empty sequence,
but not less than any empty sequence.
[:zh_CN] 空序列按字典序小于任何非空序列，但不小于任何空序列。
[end:note]
[div:end]
