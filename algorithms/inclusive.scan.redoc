[section#inclusive.scan
    [:en] Inclusive scan
    [:zh_CN] 内含扫描
]

[%@library inclusive_scan]
[codeblock:declaration]
template<class InputIterator, class OutputIterator>
  OutputIterator inclusive_scan(InputIterator first, InputIterator last, OutputIterator result);
[codeblock:end]

[begin:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：

[codeblock:notation]
return inclusive_scan(first, last, result, plus<>());
[codeblock:end]
[end:description]

[%@library inclusive_scan]
[codeblock:declaration]
template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2>
  ForwardIterator2 inclusive_scan(ExecutionPolicy&& exec,
                                ForwardIterator1 first, ForwardIterator1 last,
                                ForwardIterator2 result);
[codeblock:end]

[begin:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：

[codeblock:notation]
return inclusive_scan(std::forward<ExecutionPolicy>(exec), first, last, result, plus<>());
[codeblock:end]
[end:description]

[%@library inclusive_scan]
[codeblock:declaration]
template<class InputIterator, class OutputIterator, class BinaryOperation>
  OutputIterator inclusive_scan(InputIterator first, InputIterator last,
                                OutputIterator result, BinaryOperation binary_op);
template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2,
         class BinaryOperation>
  ForwardIterator2 inclusive_scan(ExecutionPolicy&& exec,
                                  ForwardIterator1 first, ForwardIterator1 last,
                                  ForwardIterator2 result, BinaryOperation binary_op);

template<class InputIterator, class OutputIterator, class BinaryOperation, class T>
  OutputIterator inclusive_scan(InputIterator first, InputIterator last,
                                OutputIterator result, BinaryOperation binary_op, T init);
template<class ExecutionPolicy,
         class ForwardIterator1, class ForwardIterator2, class BinaryOperation, class T>
  ForwardIterator2 inclusive_scan(ExecutionPolicy&& exec,
                                  ForwardIterator1 first, ForwardIterator1 last,
                                  ForwardIterator2 result, BinaryOperation binary_op, T init);
[codeblock:end]

[begin:description]
[para:requires]
[list]
[item]
[:en] If [`init] is provided, [`T] shall be [^:oc MoveConstructible]
([#:tab#cpp17.moveconstructible]); otherwise, [`ForwardIterator1][=']s value
type shall be [^:oc MoveConstructible].
[:zh_CN] 若提供了 [`init]，则 [`T] 应当为 [^:oc MoveConstructible]
（[#:tab#cpp17.moveconstructible]）；否则 [`ForwardIterator1] 的值类型应当为
[^:oc MoveConstructible]。
[item]
[:en] If [`init] is provided, all of [`binary_op(init, init)],
[`binary_op(init, *first)], and [`binary_op(*first, *first)] shall be
convertible to [`T]; otherwise, [`binary_op(*first, *first)] shall be
convertible to [`ForwardIterator1][=']s value type.
[:zh_CN] 若提供了 [`init]，则 [`binary_op(init, init)]，
[`binary_op(init, *first)]，以及 [`binary_op(*first, *first)]，都应当可以转换为
[`T]；否则 [`binary_op(*first, *first)] 应当可以转换为 [`ForwardIterator1] 的
值类型。
[item]
[:en] [`binary_op] shall neither invalidate iterators or subranges, nor modify
elements in the ranges [=crange(first,last)] or
[=crange(result,result + (last - first))].
[:zh_CN] [`binary_op] 在范围 [=crange(first,last)] 或
[=crange(result,result + (last - first))] 中既不能无效化任何迭代器或子范围，也
不能改动任何元素。
[list:end]

[para:effects]
[:en] For each integer [`K] in [=range(0,last - first)] assigns through
[`result + K] the value of
[:zh_CN] 对于 [=range(0,last - first)] 中的每个整数 [`K]，将以下值经由
[`result + K] 进行赋值：

[list]
[item]
[codeblock:notation]
[*GENERALIZED_NONCOMMUTATIVE_SUM](
    binary_op, init, *(first + 0), *(first + 1), ..., *(first + K))
[codeblock:end]
[:en@~] if [`init] is provided, or
[:zh_CN@~] 若提供了 [`init]，否则

[item]
[codeblock:notation]
[*GENERALIZED_NONCOMMUTATIVE_SUM](
    binary_op, *(first + 0), *(first + 1), ..., *(first + K))
[codeblock:end]
[:en@~] otherwise.
[:zh_CN@~] 。
[list:end]

[para:returns]
[:en] The end of the resulting range beginning at [`result].
[:zh_CN] 其所产生的由 [`result] 开始的范围的末尾。

[para:complexity]
[:en] [?bigoh [`last - first]] applications of [`binary_op].
[:zh_CN] [?bigoh [`last - first]] 次运用 [`binary_op]。

[para:remarks]
[:en] [`result] may be equal to [`first].
[:zh_CN] [`result] 有可能等于 [`first]。

[para]
[begin:note]
[:en] The difference between [`exclusive_scan] and [`inclusive_scan] is that
[`inclusive_scan] includes the [`i][^th] input element in the [`i][^th] sum.
[:zh_CN] [`exclusive_scan] 和 [`inclusive_scan] 之间的差别在于，
[`inclusive_scan] 在其第 [`i] 次求和中包括第 [`i] 个输入元素。

[:en] If [`binary_op] is not mathematically associative, the behavior of
[`inclusive_scan] may be nondeterministic.
[:zh_CN] 当 [`binary_op] 不具有数学可结合性时，[`exclusive_scan] 的行为可能具有
不确定性。
[end:note]
[end:description]
