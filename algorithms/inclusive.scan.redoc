[section#inclusive.scan
    [:en] Inclusive scan
    [:zh_CN] 内含扫描
]

[%@lib inclusive_scan]
[codeblock:declaration]
template<class InputIterator, class OutputIterator>
  constexpr OutputIterator
    inclusive_scan(InputIterator first, InputIterator last,
                   OutputIterator result);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return inclusive_scan(first, last, result, plus<>());
[codeblock:end]
[div:end]

[%@lib inclusive_scan]
[codeblock:declaration]
template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2>
  ForwardIterator2
    inclusive_scan(ExecutionPolicy&& exec,
                   ForwardIterator1 first, ForwardIterator1 last,
                   ForwardIterator2 result);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return inclusive_scan(std::forward<ExecutionPolicy>(exec), first, last, result, plus<>());
[codeblock:end]
[div:end]

[%@lib inclusive_scan]
[codeblock:declaration]
template<class InputIterator, class OutputIterator, class BinaryOperation>
  constexpr OutputIterator
    inclusive_scan(InputIterator first, InputIterator last,
                   OutputIterator result, BinaryOperation binary_op);
template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2,
         class BinaryOperation>
  ForwardIterator2
    inclusive_scan(ExecutionPolicy&& exec,
                   ForwardIterator1 first, ForwardIterator1 last,
                   ForwardIterator2 result, BinaryOperation binary_op);

template<class InputIterator, class OutputIterator, class BinaryOperation, class T>
  constexpr OutputIterator
    inclusive_scan(InputIterator first, InputIterator last,
                   OutputIterator result, BinaryOperation binary_op, T init);
template<class ExecutionPolicy,
         class ForwardIterator1, class ForwardIterator2, class BinaryOperation, class T>
  ForwardIterator2
    inclusive_scan(ExecutionPolicy&& exec,
                   ForwardIterator1 first, ForwardIterator1 last,
                   ForwardIterator2 result, BinaryOperation binary_op, T init);
[codeblock:end]

[div:description]
[para]
[:en] Let [`U] be the value type of [`decltype(first)].
[:zh_CN] 令 [`U] 为 [`decltype(first)] 的值类型。

[para:mandates]
[:en] If [`init] is provided, all of
[:zh_CN] 若提供了 [`init]，则以下全部
[list]
[item]
[:en@~] [`binary_op(init, init)],
[:zh_CN@~] [`binary_op(init, init)]，
[item]
[:en@~] [`binary_op(init, *first)], and
[:zh_CN@~] [`binary_op(init, *first)]，以及
[item]
[:en@~] [`binary_op(*first, *first)]
[:zh_CN@~] [`binary_op(*first, *first)]
[list:end]
[:en@~] are convertible to [`T]; otherwise, [`binary_op(*first, *first)] is
convertible to [`U].
[:zh_CN@~] 都可以转换为 [`T]；否则，[`binary_op(*first, *first)] 可以转换为 [`U]。

[para:expects]
[list]
[item]
[:en] If [`init] is provided, [`T] meets the [^:oc MoveConstructible]
([#:tab#cpp17.moveconstructible]) requirements; otherwise, [`U] meets the
[^:oc MoveConstructible] requirements.
[:zh_CN] 若提供了 [`init]，则 [`T] 满足 [^:oc MoveConstructible]
（[#:tab#cpp17.moveconstructible]）的规定；否则 [`U] 满足
[^:oc MoveConstructible] 的规定。
[item]
[:en] [`binary_op] neither invalidates iterators or subranges, nor modifies
elements in the ranges [=crange(first,last)] or
[=crange(result,result + (last - first))].
[:zh_CN] [`binary_op] 在范围 [=crange(first,last)] 或
[=crange(result,result + (last - first))] 中既不会无效化任何迭代器或子范围，也
不会改动任何元素。
[list:end]

[para:effects]
[:en] For each integer [`K] in [=range(0,last - first)] assigns through
[`result + K] the value of
[:zh_CN] 对于 [=range(0,last - first)] 中的每个整数 [`K]，将以下值经由
[`result + K] 进行赋值：

[list]
[item]
[codeblock]
[[redoc("^>")]]GENERALIZED_NONCOMMUTATIVE_SUM(
    binary_op,
    init, *(first + 0), *(first + 1), ..., *(first + K))
[codeblock:end]
[:en@~] if [`init] is provided, or
[:zh_CN@~] 若提供了 [`init]，否则

[item]
[codeblock]
[[redoc("^>")]]GENERALIZED_NONCOMMUTATIVE_SUM(
    binary_op,
    *(first + 0), *(first + 1), ..., *(first + K))
[codeblock:end]
[:en@~] otherwise.
[:zh_CN@~] 。
[list:end]

[para:returns]
[:en] The end of the resulting range beginning at [`result].
[:zh_CN] 其所产生的由 [`result] 开始的范围的末尾。

[para:complexity]
[:en] [?bigoh [`last - first]] applications of [`binary_op].
[:zh_CN] [?bigoh [`last - first]] 次运用 [`binary_op]。

[para:remarks]
[:en] [`result] may be equal to [`first].
[:zh_CN] [`result] 有可能等于 [`first]。

[para]
[begin:note]
[:en] The difference between [`exclusive_scan] and [`inclusive_scan] is that
[`inclusive_scan] includes the [$i^\text{th}] input element in the [$i^\text{th}]
sum.
[:zh_CN] [`exclusive_scan] 和 [`inclusive_scan] 之间的差别在于，
[`inclusive_scan] 在其第 [$i] 次求和中包括第 [$i] 个输入元素。

[:en] If [`binary_op] is not mathematically associative, the behavior of
[`inclusive_scan] can be nondeterministic.
[:zh_CN] 当 [`binary_op] 不具有数学可结合性时，[`exclusive_scan] 的行为可以具有
不确定性。
[end:note]
[div:end]
