[section#alg.remove
    [:en] Remove
    [:zh_CN] 移除
]

[%@lib remove]
[%@lib remove_if]
[codeblock:declaration]
template<class ForwardIterator, class T>
  constexpr ForwardIterator remove(ForwardIterator first, ForwardIterator last,
                                   const T& value);
template<class ExecutionPolicy, class ForwardIterator, class T>
  ForwardIterator remove(ExecutionPolicy&& exec,
                         ForwardIterator first, ForwardIterator last,
                         const T& value);

template<class ForwardIterator, class Predicate>
  constexpr ForwardIterator remove_if(ForwardIterator first, ForwardIterator last,
                                      Predicate pred);
template<class ExecutionPolicy, class ForwardIterator, class Predicate>
  ForwardIterator remove_if(ExecutionPolicy&& exec,
                            ForwardIterator first, ForwardIterator last,
                            Predicate pred);

template<permutable I, sentinel_for<I> S, class T, class Proj = identity>
  requires indirect_relation<ranges::equal_to, projected<I, Proj>, const T*>
  constexpr subrange<I> ranges::remove(I first, S last, const T& value, Proj proj = {});
template<forward_range R, class T, class Proj = identity>
  requires permutable<iterator_t<R>> &&
           indirect_relation<ranges::equal_to, projected<iterator_t<R>, Proj>, const T*>
  constexpr safe_subrange_t<R>
    ranges::remove(R&& r, const T& value, Proj proj = {});
template<permutable I, sentinel_for<I> S, class Proj = identity,
         indirect_unary_predicate<projected<I, Proj>> Pred>
  constexpr subrange<I> ranges::remove_if(I first, S last, Pred pred, Proj proj = {});
template<forward_range R, class Proj = identity,
         indirect_unary_predicate<projected<iterator_t<R>, Proj>> Pred>
  requires permutable<iterator_t<R>>
  constexpr safe_subrange_t<R>
    ranges::remove_if(R&& r, Pred pred, Proj proj = {});
[codeblock:end]

[div:description]
[para]
[:en] Let [$E] be
[:zh_CN] 令 [$E]：
[list]
[item]
[:en@~] [`bool(*i == value)] for [`remove],
[:zh_CN@~] 对于 [`remove] 为 [`bool(*i == value)]，
[item]
[:en@~] [`bool(pred(*i))] for [`remove_if],
[:zh_CN@~] 对于 [`remove_if] 为 [`bool(pred(*i))]，
[item]
[:en@~] [`bool(invoke(proj, *i) == value)] for [`ranges::remove], or
[:zh_CN@~] 对于 [`ranges::remove] 为 [`bool(invoke(proj, *i) == value)]，或者
[item]
[:en@~] [`bool(invoke(pred, invoke(proj, *i)))] for [`ranges::remove_if].
[:zh_CN@~] 对于 [`ranges::remove_if] 为 [`bool(invoke(pred, invoke(proj, *i)))]。
[list:end]

[para:requires]
[:en] For the algorithms in namespace [`std], the type of [`*first] shall
meet the [^:oc MoveAssignable] requirements ([#:tab#cpp17.moveassignable]).
[:zh_CN] 对于命名空间 [`std] 中的各算法，[`*first] 的类型应当满足
[^:oc MoveAssignable] 的规定（[#:tab#cpp17.moveassignable]）。

[para:effects]
[:en] Eliminates all the elements referred to by iterator [`i] in the range
[=range(first,last)] for which [$E] holds.
[:zh_CN] 将范围 [=range(first,last)] 中的迭代器 [`i] 所指代的所有使得 [$E] 成立
的元素排除。

[para:returns]
[:en] Let [$j] be the end of the resulting range.
[:zh_CN] 令 [$j] 为结果范围的末尾。

[:en] Returns:
[:zh_CN] 返回：
[list]
[item]
[:en@~] [$j] for the overloads in namespace [`std], or
[:zh_CN@~] 对于命名空间 [`std] 中的重载，返回 [$j]，或
[item]
[:en@~] [`{[$j], last}] for the overloads in namespace [`ranges].
[:zh_CN@~] 对于命名空间 [`ranges] 中的重载，返回 [`{[$j], last}]。
[list:end]

[para:remarks]
[:en] Stable ([#algorithm.stable]).
[:zh_CN] 稳定的（[#algorithm.stable]）。

[para:complexity]
[:en] Exactly [`last - first] applications of the corresponding predicate and
any projection.
[:zh_CN] 恰好进行 [`last - first] 次对应谓词和任何投射的运用。

[para]
[begin:note]
[:en] Each element in the range [=range(ret,last)], where [`ret] is the returned
value, has a valid but unspecified state, because the algorithms can eliminate
elements by moving from elements that were originally in that range.
[:zh_CN] 范围 [=range(ret,last)] 中的各个元素（其中 [`ret] 为返回值），均具有
有效但未指明的状态，这是由于算法可以将原来处于这个范围中的元素移走而将元素消除。
[end:note]
[div:end]

[%@lib remove_copy]
[%@lib remove_copy_if]
[codeblock:declaration]
template<class InputIterator, class OutputIterator, class T>
  constexpr OutputIterator
    remove_copy(InputIterator first, InputIterator last,
                OutputIterator result, const T& value);
template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2,
         class T>
  ForwardIterator2
    remove_copy(ExecutionPolicy&& exec,
                ForwardIterator1 first, ForwardIterator1 last,
                ForwardIterator2 result, const T& value);

template<class InputIterator, class OutputIterator, class Predicate>
  constexpr OutputIterator
    remove_copy_if(InputIterator first, InputIterator last,
                   OutputIterator result, Predicate pred);
template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2,
         class Predicate>
  ForwardIterator2
    remove_copy_if(ExecutionPolicy&& exec,
                   ForwardIterator1 first, ForwardIterator1 last,
                   ForwardIterator2 result, Predicate pred);

template<input_iterator I, sentinel_for<I> S, weakly_incrementable O, class T,
         class Proj = identity>
  requires indirectly_copyable<I, O> &&
           indirect_relation<ranges::equal_to, projected<I, Proj>, const T*>
  constexpr ranges::remove_copy_result<I, O>
    ranges::remove_copy(I first, S last, O result, const T& value, Proj proj = {});
template<input_range R, weakly_incrementable O, class T, class Proj = identity>
  requires indirectly_copyable<iterator_t<R>, O> &&
           indirect_relation<ranges::equal_to, projected<iterator_t<R>, Proj>, const T*>
  constexpr ranges::remove_copy_result<safe_iterator_t<R>, O>
    ranges::remove_copy(R&& r, O result, const T& value, Proj proj = {});
template<input_iterator I, sentinel_for<I> S, weakly_incrementable O,
         class Proj = identity, indirect_unary_predicate<projected<I, Proj>> Pred>
  requires indirectly_copyable<I, O>
  constexpr ranges::remove_copy_if_result<I, O>
    ranges::remove_copy_if(I first, S last, O result, Pred pred, Proj proj = {});
template<input_range R, weakly_incrementable O, class Proj = identity,
         indirect_unary_predicate<projected<iterator_t<R>, Proj>> Pred>
  requires indirectly_copyable<iterator_t<R>, O>
  constexpr ranges::remove_copy_if_result<safe_iterator_t<R>, O>
    ranges::remove_copy_if(R&& r, O result, Pred pred, Proj proj = {});
[codeblock:end]

[div:description]
[para]
[:en] Let [$E] be
[:zh_CN] 令 [$E]：
[list]
[item]
[:en@~] [`bool(*i == value)] for [`remove_copy],
[:zh_CN@~] 对于 [`remove_copy] 为 [`bool(*i == value)]，
[item]
[:en@~] [`bool(pred(*i))] for [`remove_copy_if],
[:zh_CN@~] 对于 [`remove_copy_if] 为 [`bool(pred(*i))]，
[item]
[:en@~] [`bool(invoke(proj, *i) == value)] for [`ranges::remove_copy], or
[:zh_CN@~] 对于 [`ranges::remove_copy] 为 [`bool(invoke(proj, *i) == value)]，
或者
[item]
[:en@~] [`bool(invoke(pred, invoke(proj, *i)))] for [`ranges::remove_copy_if],
[:zh_CN@~] 对于 [`ranges::remove_copy_if] 为
[`bool(invoke(pred, invoke(proj, *i)))]。
[list:end]

[para]
[:en] Let [$N] be the number of elements in [=range(first,last)] for which [$E]
is [`false].
[:zh_CN] 令 [$N] 为 [=range(first,last)] 中使得 [$E] 为 [`false] 的元素的数量。

[para:requires]
[:en] The ranges [=range(first,last)] and
[=range(result,result + (last - first))] shall not overlap.
[:zh_CN] 范围 [=range(first,last)] 和 [=range(result,result + (last - first))]
不能有重叠。

[:en] The expression [`*result = *first] shall be valid.
[:zh_CN] 表达式 [`*result - *first] 应当有效。

[begin:note]
[:en] For the overloads with an [`ExecutionPolicy], there may be a performance
cost if [`iterator_traits<ForwardIterator1>::value_type] does not meet the
[^:oc MoveConstructible] ([#:tab#cpp17.moveconstructible]) requirements.
[:zh_CN] 对于带有 [`ExecutionPolicy] 的重载，当
[`iterator_traits<ForwardIterator1>::value_type] 不符合 [^:oc MoveConstructible]
的规定（[#:tab#cpp17.moveconstructible]）时，可能存在性能损耗。
[end:note]

[para:effects]
[:en] Copies all the elements referred to by the iterator [`i] in the range
[=range(first,last)] for which [$E] is [`false].
[:zh_CN] 对范围 [=range(first,last)] 中的迭代器 [`i] 所指代的所有使得 [$E] 为
[`false] 的元素进行复制。

[para:returns]
[list]
[item]
[:en@~] [`result + [$N]], for the algorithms in namespace [`std], or
[:zh_CN@~] 对于命名空间 [`std] 中的各算法，返回 [`result + [$N]]，或者
[item]
[:en@~] [`{last, result + [$N]}], for the algorithms in namespace [`ranges].
[:zh_CN@~] 对于命名空间 [`ranges] 中的各算法，返回 [`{last, result + [$N]}]。
[list:end]

[para:complexity]
[:en] Exactly [`last - first] applications of the corresponding predicate and
any projection.
[:zh_CN] 恰好进行 [`last - first] 次对应谓词和任何投射的运用。

[para:remarks]
[:en] Stable ([#algorithm.stable]).
[:zh_CN] 稳定的（[#algorithm.stable]）。
[div:end]
