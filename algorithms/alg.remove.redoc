[section#alg.remove
    [:en] Remove
    [:zh_CN] 移除
]

[%@lib remove]
[%@lib remove_if]
[codeblock:declaration]
template<class ForwardIterator, class T = iterator_traits<ForwardIterator>::value_type>
  constexpr ForwardIterator remove(ForwardIterator first, ForwardIterator last,
                                   const T& value);
template<class ExecutionPolicy, class ForwardIterator,
         class T = iterator_traits<ForwardIterator>::value_type>
  ForwardIterator remove(ExecutionPolicy&& exec,
                         ForwardIterator first, ForwardIterator last,
                         const T& value);

template<class ForwardIterator, class Predicate>
  constexpr ForwardIterator remove_if(ForwardIterator first, ForwardIterator last,
                                      Predicate pred);
template<class ExecutionPolicy, class ForwardIterator, class Predicate>
  ForwardIterator remove_if(ExecutionPolicy&& exec,
                            ForwardIterator first, ForwardIterator last,
                            Predicate pred);

template<[[redoc("`:c>")]]permutable I, [[redoc("`:c>")]]sentinel_for<I> S, class Proj = identity,
         class T = projected_value_t<I, Proj>>
  requires [[redoc("`:c>")]]indirect_binary_predicate<ranges::equal_to, projected<I, Proj>, const T*>
  constexpr subrange<I> ranges::remove(I first, S last, const T& value, Proj proj = {});
template<[[redoc("`:c>")]]forward_range R, class Proj = identity,
         class T = projected_value_t<iterator_t<R>, Proj>>
  requires [[redoc("`:c>")]]permutable<iterator_t<R>> &&
           [[redoc("`:c>")]]indirect_binary_predicate<ranges::equal_to, projected<iterator_t<R>, Proj>, const T*>
  constexpr borrowed_subrange_t<R>
    ranges::remove(R&& r, const T& value, Proj proj = {});

template<[[redoc("*:c>")]]execution-policy Ep, [[redoc("`:c>")]]random_access_iterator I, [[redoc("`:c>")]]sized_sentinel_for<I> S,
         class Proj = identity, class T = projected_value_t<I, Proj>>
  requires [[redoc("·:c>")]]indirect_binary_predicate<ranges::equal_to, projected<I, Proj>, const T*>
  subrange<I>
    ranges::remove(Ep&& exec, I first, S last, const T& value, Proj proj = {});
template<[[redoc("*:c>")]]execution-policy Ep, [[redoc("*:c>")]]sized-random-access-range R, class Proj = identity,
         class T = projected_value_t<iterator_t<R>, Proj>>
  requires [[redoc("`:c>")]]permutable<iterator_t<R>> &&
           [[redoc("·:c>")]]indirect_binary_predicate<ranges::equal_to,
                                      projected<iterator_t<R>, Proj>, const T*>
  borrowed_subrange_t<R>
    ranges::remove(Ep&& exec, R&& r, const T& value, Proj proj = {});

template<[[redoc("`:c>")]]permutable I, [[redoc("`:c>")]]sentinel_for<I> S, class Proj = identity,
         [[redoc("`:c>")]]indirect_unary_predicate<projected<I, Proj>> Pred>
  constexpr subrange<I> ranges::remove_if(I first, S last, Pred pred, Proj proj = {});
template<[[redoc("`:c>")]]forward_range R, class Proj = identity,
         [[redoc("`:c>")]]indirect_unary_predicate<projected<iterator_t<R>, Proj>> Pred>
  requires [[redoc("`:c>")]]permutable<iterator_t<R>>
  constexpr borrowed_subrange_t<R>
    ranges::remove_if(R&& r, Pred pred, Proj proj = {});

template<[[redoc("*:c>")]]execution-policy Ep, [[redoc("`:c>")]]random_access_iterator I, [[redoc("`:c>")]]sized_sentinel_for<I> S,
         class Proj = identity, [[redoc("`:c>")]]indirect_unary_predicate<projected<I, Proj>> Pred>
  subrange<I>
    ranges::remove_if(Ep&& exec, I first, S last, Pred pred, Proj proj = {});
template<[[redoc("*:c>")]]execution-policy Ep, [[redoc("*:c>")]]sized-random-access-range R, class Proj = identity,
         [[redoc("`:c>")]]indirect_unary_predicate<projected<iterator_t<R>, Proj>> Pred>
  requires [[redoc("`:c>")]]permutable<iterator_t<R>>
  borrowed_subrange_t<R>
    ranges::remove_if(Ep&& exec, R&& r, Pred pred, Proj proj = {});
[codeblock:end]

[div:description]
[para]
[:en] Let [$E] be
[:zh_CN] 令 [$E]：
[list]
[item]
[:en@~] [`bool(*i == value)] for [`remove];
[:zh_CN@~] 对于 [`remove] 为 [`bool(*i == value)]；
[item]
[:en@~] [`bool(pred(*i))] for [`remove_if];
[:zh_CN@~] 对于 [`remove_if] 为 [`bool(pred(*i))]；
[item]
[:en@~] [`bool(invoke(proj, *i) == value)] for [`ranges::remove];
[:zh_CN@~] 对于 [`ranges::remove] 为 [`bool(invoke(proj, *i) == value)]；
[item]
[:en@~] [`bool(invoke(pred, invoke(proj, *i)))] for [`ranges::remove_if].
[:zh_CN@~] 对于 [`ranges::remove_if] 为 [`bool(invoke(pred, invoke(proj, *i)))]。
[list:end]

[para:expects]
[:en] For the algorithms in namespace [`std], the type of [`*first] meets the
[^:oc MoveAssignable] requirements ([#:tab#cpp17.moveassignable]).
[:zh_CN] 对于命名空间 [`std] 中的各算法，[`*first] 的类型满足
[^:oc MoveAssignable] 的规定（[#:tab#cpp17.moveassignable]）。

[para:effects]
[:en] Eliminates all the elements referred to by iterator [`i] in the range
[=range(first,last)] for which [$E] holds.
[:zh_CN] 将范围 [=range(first,last)] 中的迭代器 [`i] 所指代的所有使得 [$E] 成立的元素排除。

[para:returns]
[:en] Let [$j] be the end of the resulting range.
[:zh_CN] 令 [$j] 为结果范围的末尾。

[:en] Returns:
[:zh_CN] 返回：
[list]
[item]
[:en@~] [$j] for the overloads in namespace [`std].
[:zh_CN@~] 对于命名空间 [`std] 中的重载，返回 [$j]。
[item]
[:en@~] [`{[$j], last}] for the overloads in namespace [`ranges].
[:zh_CN@~] 对于命名空间 [`ranges] 中的重载，返回 [`{[$j], last}]。
[list:end]

[para:complexity]
[:en] Exactly [`last - first] applications of the corresponding predicate and any projection.
[:zh_CN] 恰好进行 [`last - first] 次对应谓词和任何投射的运用。

[para:remarks]
[:en] Stable ([#algorithm.stable]).
[:zh_CN] 稳定的（[#algorithm.stable]）。

[para]
[begin:note]
[:en] Each element in the range [=range(ret,last)], where [`ret] is the returned
value, has a valid but unspecified state, because the algorithms can eliminate
elements by moving from elements that were originally in that range.
[:zh_CN] 范围 [=range(ret,last)] 中的各个元素（其中 [`ret] 为返回值），均具有
有效但未指明的状态，这是由于算法可以将原来处于这个范围中的元素移走而将元素消除。
[end:note]
[div:end]

[%@lib remove_copy]
[%@lib remove_copy_if]
[codeblock:declaration]
template<class InputIterator, class OutputIterator,
         class T = iterator_traits<InputIterator>::value_type>
  constexpr OutputIterator
    remove_copy(InputIterator first, InputIterator last,
                OutputIterator result, const T& value);
template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2,
         class T = iterator_traits<ForwardIterator1>::value_type>
  ForwardIterator2
    remove_copy(ExecutionPolicy&& exec,
                ForwardIterator1 first, ForwardIterator1 last,
                ForwardIterator2 result, const T& value);

template<class InputIterator, class OutputIterator, class Predicate>
  constexpr OutputIterator
    remove_copy_if(InputIterator first, InputIterator last,
                   OutputIterator result, Predicate pred);
template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2,
         class Predicate>
  ForwardIterator2
    remove_copy_if(ExecutionPolicy&& exec,
                   ForwardIterator1 first, ForwardIterator1 last,
                   ForwardIterator2 result, Predicate pred);

template<[[redoc("`:c>")]]input_iterator I, [[redoc("`:c>")]]sentinel_for<I> S, [[redoc("`:c>")]]weakly_incrementable O,
         class Proj = identity, class T = projected_value_t<I, Proj>>
  requires [[redoc("`:c>")]]indirectly_copyable<I, O> &&
           [[redoc("`:c>")]]indirect_binary_predicate<ranges::equal_to, projected<I, Proj>, const T*>
  constexpr ranges::remove_copy_result<I, O>
    ranges::remove_copy(I first, S last, O result, const T& value, Proj proj = {});
template<[[redoc("`:c>")]]input_range R, [[redoc("`:c>")]]weakly_incrementable O, class Proj = identity,
         class T = projected_value_t<iterator_t<R>, Proj>>
  requires [[redoc("`:c>")]]indirectly_copyable<iterator_t<R>, O> &&
           [[redoc("`:c>")]]indirect_binary_predicate<ranges::equal_to, projected<iterator_t<R>, Proj>, const T*>
  constexpr ranges::remove_copy_result<borrowed_iterator_t<R>, O>
    ranges::remove_copy(R&& r, O result, const T& value, Proj proj = {});

template<[[redoc("*:c>")]]execution-policy Ep, [[redoc("`:c>")]]random_access_iterator I, [[redoc("`:c>")]]sized_sentinel_for<I> S,
         [[redoc("`:c>")]]random_access_iterator O, [[redoc("`:c>")]]sized_sentinel_for<O> OutS,
         class Proj = identity, class T = projected_value_t<I, Proj>>
  requires [[redoc("`:c>")]]indirectly_copyable<I, O> &&
           [[redoc("·:c>")]]indirect_binary_predicate<ranges::equal_to, projected<I, Proj>, const T*>
  ranges::remove_copy_result<I, O>
    ranges::remove_copy(Ep&& exec, I first, S last, O result, OutS result_last,
                        const T& value, Proj proj = {});
template<[[redoc("*:c>")]]execution-policy Ep, [[redoc("*:c>")]]sized-random-access-range R, [[redoc("*:c>")]]sized-random-access-range OutR,
         class Proj = identity, class T = projected_value_t<iterator_t<R>, Proj>>
  requires [[redoc("`:c>")]]indirectly_copyable<iterator_t<R>, iterator_t<OutR>> &&
           [[redoc("·:c>")]]indirect_binary_predicate<ranges::equal_to,
                                      projected<iterator_t<R>, Proj>, const T*>
  ranges::remove_copy_result<borrowed_iterator_t<R>, borrowed_iterator_t<OutR>>
    ranges::remove_copy(Ep&& exec, R&& r, OutR&& result_r, const T& value, Proj proj = {});

template<[[redoc("`:c>")]]input_iterator I, [[redoc("`:c>")]]sentinel_for<I> S, [[redoc("`:c>")]]weakly_incrementable O,
         class Proj = identity, [[redoc("`:c>")]]indirect_unary_predicate<projected<I, Proj>> Pred>
  requires [[redoc("`:c>")]]indirectly_copyable<I, O>
  constexpr ranges::remove_copy_if_result<I, O>
    ranges::remove_copy_if(I first, S last, O result, Pred pred, Proj proj = {});
template<[[redoc("`:c>")]]input_range R, [[redoc("`:c>")]]weakly_incrementable O, class Proj = identity,
         [[redoc("`:c>")]]indirect_unary_predicate<projected<iterator_t<R>, Proj>> Pred>
  requires [[redoc("`:c>")]]indirectly_copyable<iterator_t<R>, O>
  constexpr ranges::remove_copy_if_result<borrowed_iterator_t<R>, O>
    ranges::remove_copy_if(R&& r, O result, Pred pred, Proj proj = {});

template<[[redoc("*:c>")]]execution-policy Ep, [[redoc("`:c>")]]random_access_iterator I, [[redoc("`:c>")]]sized_sentinel_for<I> S,
         [[redoc("`:c>")]]random_access_iterator O, [[redoc("`:c>")]]sized_sentinel_for<O> OutS,
         class Proj = identity, [[redoc("`:c>")]]indirect_unary_predicate<projected<I, Proj>> Pred>
  requires [[redoc("`:c>")]]indirectly_copyable<I, O>
  ranges::remove_copy_if_result<I, O>
    ranges::remove_copy_if(Ep&& exec, I first, S last, O result, OutS result_last,
                           Pred pred, Proj proj = {});
template<[[redoc("*:c>")]]execution-policy Ep, [[redoc("*:c>")]]sized-random-access-range R, [[redoc("*:c>")]]sized-random-access-range OutR,
         class Proj = identity,
         [[redoc("`:c>")]]indirect_unary_predicate<projected<iterator_t<R>, Proj>> Pred>
  requires [[redoc("`:c>")]]indirectly_copyable<iterator_t<R>, iterator_t<OutR>>
  ranges::remove_copy_if_result<borrowed_iterator_t<R>, borrowed_iterator_t<OutR>>
    ranges::remove_copy_if(Ep&& exec, R&& r, OutR&& result_r, Pred pred, Proj proj = {});
[codeblock:end]

[div:description]
[para]
[:en] Let [$E([`i])] be
[:zh_CN] 令 [$E([`i])]：
[list]
[item]
[:en@~] [`bool(*i == value)] for [`remove_copy];
[:zh_CN@~] 对于 [`remove_copy] 为 [`bool(*i == value)]；
[item]
[:en@~] [`bool(pred(*i))] for [`remove_copy_if];
[:zh_CN@~] 对于 [`remove_copy_if] 为 [`bool(pred(*i))]；
[item]
[:en@~] [`bool(invoke(proj, *i) == value)] for [`ranges::remove_copy];
[:zh_CN@~] 对于 [`ranges::remove_copy] 为 [`bool(invoke(proj, *i) == value)]；
[item]
[:en@~] [`bool(invoke(pred, invoke(proj, *i)))] for [`ranges::remove_copy_if],
[:zh_CN@~] 对于 [`ranges::remove_copy_if] 为 [`bool(invoke(pred, invoke(proj, *i)))]。
[list:end]

[para]
[:en] Let:
[:zh_CN] 令：
[list]
[item]
[:en] [$M] be the number of iterators [`i] in [=range(first,last)] for which [$E([`i])] is [`false];
[:zh_CN] [$M] 为 [=range(first,last)] 中使得 [$E([`i])] 为 [`false] 的迭代器 [`i] 的数量；
[item]
[:en] [`result_last] be [`result + [$M]] for the overloads with no parameter
[`result_last] or [`result_r];
[:zh_CN] 对于没有形参 [`result_last] 或 [`result_r] 的重载，令 [`result_last] 为 [`result + [$M]]；
[item]
[:en] [$N] be [$\min(M, \ [`result_last - result])].
[:zh_CN] 令 [$N] 为 [$\min(M, \ [`result_last - result])]。
[list:end]

[para:mandates]
[:en] [`*first] is writable ([#iterator.requirements.general]) to [`result].
[:zh_CN] [`*first] 可向 [`result] 写出（[#iterator.requirements.general]）。

[para:expects]
[:en] The ranges [=range(first,last)] and [=range(result,result + [$N])] do not overlap.
[:zh_CN] 范围 [=range(first,last)] 和 [=range(result,result + [$N])] 没有重叠。

[begin:note]
[:en] For the parallel algorithm overloads in namespace [`std], there can be a
performance cost if [`iterator_traits<ForwardIterator1>::value_type] does not meet
the [^:oc MoveConstructible] ([#:tab#cpp17.moveconstructible]) requirements.
[:zh_CN] 对于命名空间 [`std] 中的并行算法重载，当
[`iterator_traits<ForwardIterator1>::value_type] 不符合 [^:oc MoveConstructible]
的规定（[#:tab#cpp17.moveconstructible]）时，可能存在性能损耗。

[:en] For the parallel algorithm overloads in namespace [`ranges], there can be a
performance cost if [`iter_value_t<I>] does not model [`:c move_constructible].
[:zh_CN] 对于命名空间 [`ranges] 中的并行算法重载，当 [`iter_value_t<I>] 不构成
[`:c move_constructible] 时，可能存在性能损耗。
[end:note]

[para:effects]
[:en] Copies the first [$N] elements referred to by the iterator [`i] in the range
[=range(first,last)] for which [$E([`i])] is [`false] into the range [=range(result, result + [$N])].
[:zh_CN] 将范围 [=range(first,last)] 中的前 [$N] 个使得 [$E([`i])] 为 [`false] 的
迭代器 [`i] 所指代的元素，复制到范围 [=range(result, result + [$N])] 中。

[para:returns]
[list]
[item]
[:en] [`result + [$N]], for the algorithms in namespace [`std].
[:zh_CN] 对于命名空间 [`std] 中的各算法，返回 [`result + [$N]]。
[item]
[:en] [`{last, result + [$N]}], for the algorithms in namespace [`ranges], if [$N] is equal to [$M].
[:zh_CN] 对于命名空间 [`ranges] 中的各算法，当 [$N] 等于 [$M] 时返回 [`{last, result + [$N]}]。
[item]
[:en] Otherwise, [`{j, result_last}], for the algorithms in namespace [`ranges],
where [`j] is the iterator in [=range(first, last)] for which [$E([`j])] is [`false]
and there are exactly [$N] iterators [`i] in [=range(first, i)] for which [$E([`i])] is [`false].
[:zh_CN] 否则，对于命名空间 [`ranges] 中的各算法，返回 [`{j, result_last}]，其中 [`j] 是
[=range(first, last)] 中使得 [$E([`j])] 为 [`false] 的迭代器，并且在 [=range(first, last)]
中有恰好 [$N] 个迭代器 [`i] 使得 [$E([`i])] 为 [`false]。
[list:end]

[para:complexity]
[:en] At most [`last - first] applications of the corresponding predicate and
any projection.
[:zh_CN] 最多进行 [`last - first] 次对应谓词和任何投射的运用。

[para:remarks]
[:en] Stable ([#algorithm.stable]).
[:zh_CN] 稳定的（[#algorithm.stable]）。
[div:end]
