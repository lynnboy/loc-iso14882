[section#alg.foreach
    [:en] For each
    [:zh_CN] 对每个……（For each）
]

[%@library for_each]
[codeblock:declaration]
template<class InputIterator, class Function>
  constexpr Function for_each(InputIterator first, InputIterator last, Function f);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`Function] shall meet the [*Cpp17MoveConstructible] requirements
([#cpp17.moveconstructible]).
[:zh_CN] [`Function] 应当满足 [*Cpp17MoveConstructible] 的规定
（[#cpp17.moveconstructible]）。

[enter:note]
[:en] [`Function] need not meet the requirements of [*Cpp17CopyConstructible]
([#cpp17.copyconstructible]).
[:zh_CN] [`Function] 并不需要满足 [*Cpp17CopyConstructible] 的规定
（[#cpp17.copyconstructible]）。
[exit:note]

[para:effects]
[:en] Applies [`f] to the result of dereferencing every iterator in the range
[=range(first,last)], starting from [`first] and proceeding to [`last - 1].
[:zh_CN] 对范围 [=range(first,last)] 中的每个迭代器的解引用结果运用 [`f]，开始于
[`frist] 并进行到 [`last - 1]。

[enter:note]
[:en] If the type of [`first] meets the requirements of a mutable iterator,
[`f] may apply non-constant functions through the dereferenced iterator.
[:zh_CN] 如果 [`first] 的类型满足可改动迭代器的规定，则 [`f] 可以通过所解引用的
迭代器运用非常量函数。
[exit:note]

[para:returns]
[:en] [`f].
[:zh_CN] [`f]。

[para:complexity]
[:en] Applies [`f] exactly [`last - first] times.
[:zh_CN] 恰好进行 [`last - first] 次 [`f] 的运用。

[para:remarks]
[:en] If [`f] returns a result, the result is ignored.
[:zh_CN] 如果 [`f] 返回结果，则该结果被忽略。
[exit:description]

[%@library for_each]
[codeblock:declaration]
template<class ExecutionPolicy, class ForwardIterator, class Function>
  void for_each(ExecutionPolicy&& exec,
                ForwardIterator first, ForwardIterator last,
                Function f);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`Function] shall meet the [*Cpp17CopyConstructible] requirements.
[:zh_CN] [`Function] 应当满足 [*Cpp17CopyConstructible] 的规定。

[para:effects]
[:en] Applies [`f] to the result of dereferencing every iterator in the range
[=range(first,last)].
[:zh_CN] 对范围 [=range(first,last)] 中的每个迭代器的解引用结果运用 [`f]。

[enter:note]
[:en] If the type of [`first] meets the requirements of a mutable iterator,
[`f] may apply non-constant functions through the dereferenced iterator.
[:zh_CN] 如果 [`first] 的类型满足可改动迭代器的规定，则 [`f] 可以通过所解引用的
迭代器运用非常量函数。
[exit:note]

[para:complexity]
[:en] Applies [`f] exactly [`last - first] times.
[:zh_CN] 恰好进行 [`last - first] 次 [`f] 的运用。

[para:remarks]
[:en] If [`f] returns a result, the result is ignored.
[:zh_CN] 如果 [`f] 返回结果，则该结果被忽略。

[:en] Implementation do not have the freedom granted under
[#algorithms.parallel.exec] to make arbitrary copies of elements from the input
sequence.
[:zh_CN] 实现不具有 [#algorithms.parallel.exec] 中所授予的对输入序列中的元素进行
任意复制的自由度。

[para]
[enter:note]
[:en] Does not return a copy of its [`Function] parameter, since parallelization
may not permit efficient state accumulation.
[:zh_CN] 并不返回其 [`Function] 形参的副本，这是由于并行化可能无法允许进行高效的
状态累加。
[exit:note]
[exit:description]

[%@library for_each]
[codeblock:declaration]
template<InputIterator I, Sentinel<I> S, class Proj = identity,
         IndirectUnaryInvocable<projected<I, Proj>> Fun>
  constexpr ranges::for_each_result<I, Fun>
    ranges::for_each(I first, S last, Fun f, Proj proj = {});
template<InputRange R, class Proj = identity,
         IndirectUnaryInvocable<projected<iterator_t<R>, Proj>> Fun>
  constexpr ranges::for_each_result<safe_iterator_t<R>, Fun>
    ranges::for_each(R&& r, Fun f, Proj proj = {});
[codeblock:end]

[enter:description]
[para:effects]
[:en] Calls [`invoke(f, invoke(proj, *i))] for every iterator [`i] in the range
[=range(first,last)], starting from [`first] and proceeding to [`last - 1].
[:zh_CN] 对范围 [=range(first,last)] 中从 [`first] 开始直到 [`last - 1] 的每个
迭代器 [`i]，调用 [`invoke(f, invoke(proj, *i))]。

[enter:note]
[:en] If the result of [`invoke(proj, *i)] is a mutable reference, [`f] may
apply non-constant functions.
[:zh_CN] 如果 [`invoke(proj, *i)] 的结果是一个可改动的引用，则 [`f] 可以运用
非常量函数。
[exit:note]

[para:returns]
[:en] [`{last, std::move(f)}].
[:zh_CN] [`{last, std::move(f)}]。

[para:complexity]
[:en] Applies [`f] and [`proj] exactly [`last - first] times.
[:zh_CN] 恰好进行 [`last - first] 次 [`f] 和 [`proj] 的运用。

[para:remarks]
[:en] If [`f] returns a result, the result is ignored.
[:zh_CN] 如果 [`f] 返回结果，则该结果被忽略。

[para]
[enter:note]
[:en] The overloads in namespace [`ranges] require [`Fun] to model
[`CopyConstructible].
[:zh_CN] 命名空间 [`ranges] 中的各个重载均要求 [`Fun] 符合 [`CopyConstructible]。
[exit:note]
[exit:description]

[%@library for_each_n]
[codeblock:declaration]
template<class InputIterator, class Size, class Function>
  constexpr InputIterator for_each_n(InputIterator first, Size n, Function f);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`Function] shall meet the [*Cpp17MoveConstructible] requirements
[:zh_CN] [`Function] 应当满足 [*Cpp17MoveConstructible] 的规定。

[enter:note]
[:en] [`Function] need not meet the requirements of [*Cpp17CopyConstructible].
[:zh_CN] [`Function] 并不需要满足 [*Cpp17CopyConstructible] 的规定。
[exit:note]

[para:requires]
[:en] [`n >= 0].
[:zh_CN] [`n >= 0]。

[para:effects]
[:en] Applies [`f] to the result of dereferencing every iterator in the range
[=range(first,first + n)] in order.
[:zh_CN] 对范围 [=range(first,first + n)] 中的每个迭代器的解引用结果依次运用
[`f]。

[enter:note]
[:en] If the type of [`first] meets the requirements of a mutable iterator,
[`f] may apply non-constant functions through the dereferenced iterator.
[:zh_CN] 如果 [`first] 的类型满足可改动迭代器的规定，则 [`f] 可以通过所解引用的
迭代器运用非常量函数。
[exit:note]

[para:returns]
[:en] [`first + n].
[:zh_CN] [`first + n]。

[para:remarks]
[:en] If [`f] returns a result, the result is ignored.
[:zh_CN] 如果 [`f] 返回结果，则该结果被忽略。
[exit:description]

[%@library for_each_n]
[codeblock:declaration]
template<class ExecutionPolicy, class ForwardIterator, class Size, class Function>
  ForwardIterator for_each_n(ExecutionPolicy&& exec, ForwardIterator first, Size n,
                             Function f);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`Function] shall meet the [*Cpp17CopyConstructible] requirements.
[:zh_CN] [`Function] 应当满足 [*Cpp17CopyConstructible] 的规定。

[para:requires]
[:en] [`n >= 0].
[:zh_CN] [`n >= 0]。

[para:effects]
[:en] Applies [`f] to the result of dereferencing every iterator in the range
[=range(first,first + n)].
[:zh_CN] 对范围 [=range(first,first + n)] 中的每个迭代器的解引用结果运用 [`f]。

[enter:note]
[:en] If the type of [`first] meets the requirements of a mutable iterator,
[`f] may apply non-constant functions through the dereferenced iterator.
[:zh_CN] 如果 [`first] 的类型满足可改动迭代器的规定，则 [`f] 可以通过所解引用的
迭代器运用非常量函数。
[exit:note]

[para:returns]
[:en] [`first + n].
[:zh_CN] [`first + n]。

[para:remarks]
[:en] If [`f] returns a result, the result is ignored.
[:zh_CN] 如果 [`f] 返回结果，则该结果被忽略。

[:en] Implementation do not have the freedom granted under
[#algorithms.parallel.exec] to make arbitrary copies of elements from the input
sequence.
[:zh_CN] 实现不具有 [#algorithms.parallel.exec] 中所授予的对输入序列中的元素进行
任意复制的自由度。
[exit:description]
