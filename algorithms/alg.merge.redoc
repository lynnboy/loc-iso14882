[section#alg.merge
    [:en] Merge
    [:zh_CN] 归并
]

[%@library merge]
[codeblock:declaration]
template<class InputIterator1, class InputIterator2,
         class OutputIterator>
  constexpr OutputIterator
    merge(InputIterator1 first1, InputIterator1 last1,
          InputIterator2 first2, InputIterator2 last2,
          OutputIterator result);
template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2,
         class ForwardIterator>
  ForwardIterator
    merge(ExecutionPolicy&& exec,
          ForwardIterator1 first1, ForwardIterator1 last1,
          ForwardIterator2 first2, ForwardIterator2 last2,
          ForwardIterator result);

template<class InputIterator1, class InputIterator2,
         class OutputIterator, class Compare>
  constexpr OutputIterator
    merge(InputIterator1 first1, InputIterator1 last1,
          InputIterator2 first2, InputIterator2 last2,
          OutputIterator result, Compare comp);
template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2,
         class ForwardIterator, class Compare>
  ForwardIterator
    merge(ExecutionPolicy&& exec,
          ForwardIterator1 first1, ForwardIterator1 last1,
          ForwardIterator2 first2, ForwardIterator2 last2,
          ForwardIterator result, Compare comp);

template<InputIterator I1, Sentinel<I1> S1, InputIterator I2, Sentinel<I2> S2,
         WeaklyIncrementable O, class Comp = ranges::less, class Proj1 = identity,
         class Proj2 = identity>
  requires Mergeable<I1, I2, O, Comp, Proj1, Proj2>
  constexpr ranges::merge_result<I1, I2, O>
    ranges::merge(I1 first1, S1 last1, I2 first2, S2 last2, O result,
                  Comp comp = {}, Proj1 proj1 = {}, Proj2 proj2 = {});
template<InputRange R1, InputRange R2, WeaklyIncrementable O, class Comp = ranges::less,
         class Proj1 = identity, class Proj2 = identity>
  requires Mergeable<iterator_t<R1>, iterator_t<R2>, O, Comp, Proj1, Proj2>
  constexpr ranges::merge_result<safe_iterator_t<R1>, safe_iterator_t<R2>, O>
    ranges::merge(R1&& r1, R2&& r2, O result,
                  Comp comp = {}, Proj1 proj1 = {}, Proj2 proj2 = {});
[codeblock:end]

[enter:description]
[para]
[:en] Let [$N] be [`(last1 - first1) + (last2 - first2)].
[:zh_CN] 令 [$N] 为 [`(last1 - first1) + (last2 - first2)]。

[:e] Let [`comp] be [`less{}], [`proj1] be [`identity{}], and [`proj2] be
[`identity{}], for the overloads with no parameters by those names.
[:zh_CN] 对于不带有这些名字的形参的重载，令 [`comp] 为 [`less()]，[`proj1] 为
[`identity{}]，以及 [`proj2] 为 [`identity{}]。

[para:requires]
[:en] The ranges [=range(first1,last1)] and [=range(first2,last2)] shall be
sorted with respect to [`comp] and [`proj1] or [`proj2], respectively.
[:zh_CN] 范围 [=range(first1,last1)] 和 [=range(first2,last2)] 分别应当根据
[`comp] 和 [`proj1] 或 [`proj2] 有序。

[:en] The resulting range shall not overlap with either of the original ranges.
[:zh_CN] 结果范围不能与任何一个源范围有重叠。

[para:effects]
[:en] Copies all the elements of the two ranges [=range(first1,last1)] and
[=range(first2,last2)] into the range [=range(result,result_last)], where
[`result_last] is [`result + [$N]].
[:zh_CN] 将两个范围 [=range(first1,last1)] 和 [=range(first2,last2)] 中的所有
元素复制到范围 [=range(result,result_last)] 中，其中 [`result_last] 为
[`result + [$N]]。

[:en] If an element [`a] precedes [`b] in an input range, [`a] is copied into
the output range before [`b].

[:en] If [`e1] is an element of [=range(first1,last1)] and [`e2] of
[=range(first2,last2)], [`e2] is copied into the output range before [`e1] if
and only if [`bool(invoke(comp, invoke(proj2, e2), invoke(proj1, e1)))] is
[`true].
[:zh_CN] 若 [`e1] 为 [=range(first1,last1)] 中的元素，而 [`e2] 为
[=range(first2,last2)] 中的元素，则当且仅当
[`bool(invoke(comp, invoke(proj2, e2), invoke(proj1, e1)))] 为 [`true] 时，
[`e2] 在 [`e1] 之前被复制到输出范围之中。

[para:returns]
[list]
[item]
[:en] [`result_last] for the overloads in namespace [`std], or
[:zh_CN] 命名空间 [`std] 中的各重载返回 [`result_last]，或者
[item]
[:en] [`{last1, last2, result_last}] for the overloads in namespace [`ranges].
[:zh_CN] 命名空间 [`ranges] 中的各重载返回 [`{last1, last2, result_last}]。
[list:end]

[para:complexity]
[list]
[item]
[:en] For the overloads with no [`ExecutionPolicy], at most [$N - 1]
comparisons and applications of each projection.
[:zh_CN] 对于不带有 [`ExecutionPolicy] 的重载，最多进行 [$N - 1] 次比较和每种
投射的运用。

[item]
[:en] For the overloads with an [`ExecutionPolicy], [$[=O](N)] comparisons.
[:zh_CN] 对于带有 [`ExecutionPolicy] 的重载，进行 [$[=O](N)] 次比较。
[list:end]

[para:remarks]
[:en] Stable ([#algorithm.stable]).
[:zh_CN] 稳定的（[#algorithm.stable]）。
[exit:description]

[%@library inplace_merge]
[codeblock:declaration]
template<class BidirectionalIterator>
  void inplace_merge(BidirectionalIterator first,
                     BidirectionalIterator middle,
                     BidirectionalIterator last);
template<class ExecutionPolicy, class BidirectionalIterator>
  void inplace_merge(ExecutionPolicy&& exec,
                     BidirectionalIterator first,
                     BidirectionalIterator middle,
                     BidirectionalIterator last);

template<class BidirectionalIterator, class Compare>
  void inplace_merge(BidirectionalIterator first,
                     BidirectionalIterator middle,
                     BidirectionalIterator last, Compare comp);
template<class ExecutionPolicy, class BidirectionalIterator, class Compare>
  void inplace_merge(ExecutionPolicy&& exec,
                     BidirectionalIterator first,
                     BidirectionalIterator middle,
                     BidirectionalIterator last, Compare comp);

template<BidirectionalIterator I, Sentinel<I> S, class Comp = ranges::less,
         class Proj = identity>
  requires Sortable<I, Comp, Proj>
  I ranges::inplace_merge(I first, I middle, S last, Comp comp = {}, Proj proj = {});
[codeblock:end]

[enter:description]
[para]
[:e] Let [`comp] be [`less{}] and [`proj] be [`identity{}] for the overloads
with no parameters by those names.
[:zh_CN] 对于不带有这些名字的形参的重载，令 [`comp] 为 [`less()]，以及 [`proj]
为 [`identity{}]。

[para:requires]
[:en] [=range(first,middle)] and [=range(middle,last)] shall be valid ranges
sorted with respect to [`comp] and [`proj].
[:zh_CN] [=range(first,middle)] 和 [=range(middle,last)] 应当均为有效范围，并
根据 [`comp] 和 [`proj] 有序。

[:en] For the overloads in namespace [`std], [`BidirectionalIterator] shall
meet the [*Cpp17ValueSwappable] requirements ([#swappable.requirements]) and the
type of [`*first] shall meet the [*Cpp17MoveConstructible]
([#cpp17.moveconstructible]) and [*Cpp17MoveAssignable] ([#cpp17.moveassignable])
requirements.
[:zh_CN] 对于命名空间 [`std] 中的各重载，[`BidirectionalIterator] 应当满足
[*Cpp17ValueSwappable] 的规定（[#swappable.requirements]），并且 [`*first] 的
类型应当满足 [*Cpp17MoveConstructible]（[#cpp17.moveconstructible]）和
[*Cpp17MoveAssignable]（[#cpp17.moveassignable]）的规定。

[para:effects]
[:en] Merges two sorted consecutive ranges [=range(first,middle)] and
[=range(middle,last)], putting the result of the merge into the range
[=range(first,last)].
[:zh_CN] 对两个连续的范围 [=range(first,middle)] 和 [=range(middle,last)] 进行
归并，并将归并的结果置于范围 [=range(first,last)] 中。

[:en] The resulting range is sorted respect to [`comp] and [`proj].
[:zh_CN] 结果范围根据 [`comp] 和 [`proj] 排序。

[para:returns]
[:en] [`last] for the overload in namespace [`ranges].
[:zh_CN] 命名空间 [`ranges] 中的各重载返回 [`last]。

[para:complexity]
[:en] Let [$N = [`last - first]]:
[:zh_CN] 令 [$N = [`last - first]]：

[list]
[item]
[:en] For the overloads with no [`ExecutionPolicy], and if enough additional
memory is available, exactly [$N - 1] comparisons.
[:zh_CN] 对于不带有 [`ExecutionPolicy] 的重载，并且当有足够的额外内存时，恰好
进行 [$N - 1] 次比较。

[item]
[:en] Otherwise, [$[=O](N \log N)] comparisons.
[:zh_CN] 否则，进行 [$[=O](N \log N)] 次比较。
[list:end]

[:en] In either case, twice as many projections as comparisons.
[:zh_CN] 任何情况中，都进行两倍于比较次数的投射。

[para:remarks]
[:en] Stable ([#algorithm.stable]).
[:zh_CN] 稳定的（[#algorithm.stable]）。
[exit:description]

[codeblock:declaration]
template<BidirectionalRange R, class Comp = ranges::less, class Proj = identity>
  requires Sortable<iterator_t<R>, Comp, Proj>
  safe_iterator_t<R>
    ranges::inplace_merge(R&& r, iterator_t<R> middle, Comp comp = {}, Proj proj = {});
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：

[codeblock:notation]
return ranges::inplace_merge(ranges::begin(r), middle, ranges::end(r), comp, proj);
[codeblock:end]
[exit:description]
