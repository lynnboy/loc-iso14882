[section#alg.merge
    [:en] Merge
    [:zh_CN] 归并
]

[%@library merge]
[codeblock:declaration]
template<class InputIterator1, class InputIterator2,
         class OutputIterator>
  constexpr OutputIterator
    merge(InputIterator1 first1, InputIterator1 last1,
          InputIterator2 first2, InputIterator2 last2,
          OutputIterator result);
template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2,
         class ForwardIterator>
  ForwardIterator
    merge(ExecutionPolicy&& exec,
          ForwardIterator1 first1, ForwardIterator1 last1,
          ForwardIterator2 first2, ForwardIterator2 last2,
          ForwardIterator result);

template<class InputIterator1, class InputIterator2,
         class OutputIterator, class Compare>
  constexpr OutputIterator
    merge(InputIterator1 first1, InputIterator1 last1,
          InputIterator2 first2, InputIterator2 last2,
          OutputIterator result, Compare comp);
template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2,
         class ForwardIterator, class Compare>
  ForwardIterator
    merge(ExecutionPolicy&& exec,
          ForwardIterator1 first1, ForwardIterator1 last1,
          ForwardIterator2 first2, ForwardIterator2 last2,
          ForwardIterator result, Compare comp);
[codeblock:end]

[enter:description]
[para:requires]
[:en] The ranges [=range(first1,last1)] and [=range(first2,last2)] shall be
sorted with respect to [`operator<] or [`comp].
[:zh_CN] 范围 [=range(first1,last1)] 和 [=range(first2,last2)] 都应当根据
[`operator<] 或 [`comp] 有序。

[:en] The resulting range shall not overlap with either of the original ranges.
[:zh_CN] 结果范围不能与任何一个源范围有重叠。

[para:effects]
[:en] Copies all the elements of the two ranges [=range(first1,last1)] and
[=range(first2,last2)] into the range [=range(result,result_last)], where
[`result_last] is [`result + (last1 - first1) + (last2 - first2)], such that the
resulting range satisfies [`is_sorted(result, result_last)] or
[`is_sorted(result, result_last, comp)], respectively.
[:zh_CN] 将两个范围 [=range(first1,last1)] 和 [=range(first2,last2)] 中的所有
元素复制到范围 [=range(result,result_last)] 中，其中 [`result_last] 为
[`result + (last1 - first1) + (last2 - first2)]，并使得结果范围符合
[`is_sorted(result, result_last)] 或者 [`is_sorted(result, result_last, comp)]。

[para:returns]
[:en] [`result + (last1 - first1) + (last2 - first2)].
[:zh_CN] [`result + (last1 - first1) + (last2 - first2)]。

[para:complexity]
[:en] Let [$N = [`(last1 - first1) + (last2 - first2)]]:
[:zh_CN] 令 [$N = [`(last1 - first1) + (last2 - first2)]]：

[list]
[item]
[:en] For the overloads with no [`ExecutionPolicy], at most [$N - 1]
comparisons.
[:zh_CN] 对于不带有 [`ExecutionPolicy] 的重载，最多进行 [$N - 1] 次比较。

[item]
[:en] For the overloads with an [`ExecutionPolicy], [$[=O](N)] comparisons.
[:zh_CN] 对于带有 [`ExecutionPolicy] 的重载，进行 [$[=O](N)] 次比较。
[list:end]

[para:remarks]
[:en] Stable ([#algorithm.stable]).
[:zh_CN] 稳定的（[#algorithm.stable]）。
[exit:description]

[%@library inplace_merge]
[codeblock:declaration]
template<class BidirectionalIterator>
  void inplace_merge(BidirectionalIterator first,
                     BidirectionalIterator middle,
                     BidirectionalIterator last);
template<class ExecutionPolicy, class BidirectionalIterator>
  void inplace_merge(ExecutionPolicy&& exec,
                     BidirectionalIterator first,
                     BidirectionalIterator middle,
                     BidirectionalIterator last);

template<class BidirectionalIterator, class Compare>
  void inplace_merge(BidirectionalIterator first,
                     BidirectionalIterator middle,
                     BidirectionalIterator last, Compare comp);
template<class ExecutionPolicy, class BidirectionalIterator, class Compare>
  void inplace_merge(ExecutionPolicy&& exec,
                     BidirectionalIterator first,
                     BidirectionalIterator middle,
                     BidirectionalIterator last, Compare comp);
[codeblock:end]

[enter:description]
[para:requires]
[:en] The ranges [=range(first,middle)] and [=range(middle,last)] shall be
sorted with respect to [`operator<] or [`comp].
[:zh_CN] 范围 [=range(first,middle)] 和 [=range(middle,last)] 应当根据
[`operator<] 或 [`comp] 有序。

[:en] [`BidirectionalIterator] shall satisfy the [*Cpp17ValueSwappable]
requirements ([#swappable.requirements]).
[:zh_CN] [`BidirectionalIterator] 应当满足 [*Cpp17ValueSwappable]
（[#swappable.requirements]）的规定。

[:en] The type of [`*first] shall satisfy the [*Cpp17MoveConstructible]
([#moveconstructible]) and [*Cpp17MoveAssignable] ([#moveassignable])
requirements.
[:zh_CN] [`*first] 的类型应当满足 [*Cpp17MoveConstructible]
（[#moveconstructible]）和 [*Cpp17MoveAssignable]（[#moveassignable]）的规定。

[para:effects]
[:en] Merges two sorted consecutive ranges [=range(first,middle)] and
[=range(middle,last)], putting the result of the merge into the range
[=range(first,last)].
[:zh_CN] 对两个连续的范围 [=range(first,middle)] 和 [=range(middle,last)] 进行
归并，并将归并的结果置于范围 [=range(first,last)] 中。

[:en] The resulting range will be in non-decreasing order; that is, for every
iterator [`i] in [=range(first,last)] other than [`first], the condition
[`*i < *(i - 1)] or, respectively, [`comp(*i, *(i - 1))] will be [`false].
[:zh_CN] 结果范围将具有非降序；就是说，对于 [=range(first,last)] 中除了 [`first]
之外的每个迭代器 [`i]，条件 [`*i < *(i - 1)] 或者 [`comp(*i, *(i - 1))] 将分别
为 [`false]。

[para:complexity]
[:en] Let [$N = [`last - first]]:
[:zh_CN] 令 [$N = [`last - first]]：

[list]
[item]
[:en] For the overloads with no [`ExecutionPolicy], if enough additional memory
is available, exactly [$N - 1] comparisons.
[:zh_CN] 对于不带有 [`ExecutionPolicy] 的重载，当有足够的额外内存时，恰好进行
[$N - 1] 次比较。

[item]
[:en] For the overloads with no [`ExecutionPolicy], if no additional memory is
available, [$[=O](N \log N)] comparisons.
[:zh_CN] 对于不带有 [`ExecutionPolicy] 的重载，如果没有额外内存，则进行
[$[=O](N \log N)] 次比较。

[item]
[:en] For the overloads with an [`ExecutionPolicy], [$[=O](N \log N)]
comparisons.
[:zh_CN] 对于带有 [`ExecutionPolicy] 的重载，进行 [$[=O](N \log N)] 次比较。
[list:end]

[para:remarks]
[:en] Stable ([#algorithm.stable]).
[:zh_CN] 稳定的（[#algorithm.stable]）。
[exit:description]
