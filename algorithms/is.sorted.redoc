[section#is.sorted
    [`is_sorted]
]

[%@lib is_sorted]
[codeblock:declaration]
template<class ForwardIterator>
  constexpr bool is_sorted(ForwardIterator first, ForwardIterator last);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return is_sorted_until(first, last) == last;]
[:zh_CN] 等价于：[`return is_sorted_until(first, last) == last;]
[div:end]

[%@lib is_sorted]
[codeblock:declaration]
template<class ExecutionPolicy, class ForwardIterator>
  bool is_sorted(ExecutionPolicy&& exec,
                 ForwardIterator first, ForwardIterator last);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return is_sorted_until(std::forward<ExecutionPolicy>(exec), first, last) == last;
[codeblock:end]
[div:end]

[%@lib is_sorted]
[codeblock:declaration]
template<class ForwardIterator, class Compare>
  constexpr bool is_sorted(ForwardIterator first, ForwardIterator last,
                           Compare comp);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return is_sorted_until(first, last, comp) == last;]
[:zh_CN] 等价于：[`return is_sorted_until(first, last, comp) == last;]
[div:end]

[%@lib is_sorted]
[codeblock:declaration]
template<class ExecutionPolicy, class ForwardIterator, class Compare>
  bool is_sorted(ExecutionPolicy&& exec,
                 ForwardIterator first, ForwardIterator last,
                 Compare comp);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return is_sorted_until(std::forward<ExecutionPolicy>(exec), first, last, comp) == last
[codeblock:end]
[div:end]

[%@lib is_sorted]
[codeblock:declaration]
template<[[redoc("`:c>")]]forward_iterator I, [[redoc("`:c>")]]sentinel_for<I> S, class Proj = identity,
         [[redoc("`:c>")]]indirect_strict_weak_order<projected<I, Proj>> Comp = ranges::less>
  constexpr bool ranges::is_sorted(I first, S last, Comp comp = {}, Proj proj = {});
template<[[redoc("`:c>")]]forward_range R, class Proj = identity,
         [[redoc("`:c>")]]indirect_strict_weak_order<projected<iterator_t<R>, Proj>> Comp = ranges::less>
  constexpr bool ranges::is_sorted(R&& r, Comp comp = {}, Proj proj = {});
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[`return ranges::is_sorted_until(first, last, comp, proj) == last;]
[:zh_CN] 等价于：
[`return ranges::is_sorted_until(first, last, comp, proj) == last;]
[div:end]
 
[codeblock:declaration]
template<[[redoc("*:c>")]]execution-policy Ep, [[redoc("`:c>")]]random_access_iterator I, [[redoc("`:c>")]]sized_sentinel_for<I> S,
         class Proj = identity,
         [[redoc("`:c>")]]indirect_strict_weak_order<projected<I, Proj>> Comp = ranges::less>
  bool ranges::is_sorted(Ep&& exec, I first, S last, Comp comp = {}, Proj proj = {});
template<[[redoc("*:c>")]]execution-policy Ep, [[redoc("*:c>")]]sized-random-access-range R, class Proj = identity,
         [[redoc("`:c>")]]indirect_strict_weak_order<projected<iterator_t<R>, Proj>> Comp = ranges::less>
  bool ranges::is_sorted(Ep&& exec, R&& r, Comp comp = {}, Proj proj = {});
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return ranges::is_sorted_until(std::forward<Ep>(exec), first, last, comp, proj) == last;
[codeblock:end]
[div:end]
 
[%@lib is_sorted_until]
[codeblock:declaration]
template<class ForwardIterator>
  constexpr ForwardIterator
    is_sorted_until(ForwardIterator first, ForwardIterator last);
template<class ExecutionPolicy, class ForwardIterator>
  ForwardIterator
    is_sorted_until(ExecutionPolicy&& exec,
                    ForwardIterator first, ForwardIterator last);

template<class ForwardIterator, class Compare>
  constexpr ForwardIterator
    is_sorted_until(ForwardIterator first, ForwardIterator last,
                    Compare comp);
template<class ExecutionPolicy, class ForwardIterator, class Compare>
  ForwardIterator
    is_sorted_until(ExecutionPolicy&& exec,
                    ForwardIterator first, ForwardIterator last,
                    Compare comp);

template<[[redoc("`:c>")]]forward_iterator I, [[redoc("`:c>")]]sentinel_for<I> S, class Proj = identity,
         [[redoc("`:c>")]]indirect_strict_weak_order<projected<I, Proj>> Comp = ranges::less>
  constexpr I ranges::is_sorted_until(I first, S last, Comp comp = {}, Proj proj = {});
template<[[redoc("`:c>")]]forward_range R, class Proj = identity,
         [[redoc("`:c>")]]indirect_strict_weak_order<projected<iterator_t<R>, Proj>> Comp = ranges::less>
  constexpr borrowed_iterator_t<R>
    ranges::is_sorted_until(R&& r, Comp comp = {}, Proj proj = {});

template<[[redoc("*:c>")]]execution-policy Ep, [[redoc("`:c>")]]random_access_iterator I, [[redoc("`:c>")]]sized_sentinel_for<I> S,
         class Proj = identity,
         [[redoc("`:c>")]]indirect_strict_weak_order<projected<I, Proj>> Comp = ranges::less>
  I ranges::is_sorted_until(Ep&& exec, I first, S last, Comp comp = {},
                    Proj proj = {});
template<[[redoc("*:c>")]]execution-policy Ep, [[redoc("*:c>")]]sized-random-access-range R, class Proj = identity,
         [[redoc("`:c>")]]indirect_strict_weak_order<projected<iterator_t<R>, Proj>> Comp = ranges::less>
  borrowed_iterator_t<R>
    ranges::is_sorted_until(Ep&& exec, R&& r, Comp comp = {}, Proj proj = {});
[codeblock:end]

[div:description]
[para]
[:en] Let [`comp] be [`less{}] and [`proj] be [`identity{}] for the overloads
with no parameters by those names.
[:zh_CN] 对于没有名为 [`comp] 和 [`proj] 的形参的各重载，令 [`comp] 为 [`less{}]
并令 [`proj] 为 [`identity{}]。

[para:returns]
[:en] The last iterator [`i] in [=crange(first,last)] for which the range
[=range(first,i)] is sorted with respect to [`comp] and [`proj].
[:zh_CN] [=crange(first,last)] 中的最后一个使范围 [=range(first,i)] 根据 [`comp]
和 [`proj] 有序的迭代器 [`i]。

[para:complexity]
[:en] Linear.
[:zh_CN] 线性。
[div:end]
