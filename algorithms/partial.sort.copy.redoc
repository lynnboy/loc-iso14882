[section#partial.sort.copy
    [`partial_sort_copy]
]

[%@lib partial_sort_copy]
[codeblock:declaration]
template<class InputIterator, class RandomAccessIterator>
  constexpr RandomAccessIterator
    partial_sort_copy(InputIterator first, InputIterator last,
                      RandomAccessIterator result_first,
                      RandomAccessIterator result_last);
template<class ExecutionPolicy, class ForwardIterator, class RandomAccessIterator>
  RandomAccessIterator
    partial_sort_copy(ExecutionPolicy&& exec,
                      ForwardIterator first, ForwardIterator last,
                      RandomAccessIterator result_first,
                      RandomAccessIterator result_last);

template<class InputIterator, class RandomAccessIterator,
         class Compare>
  constexpr RandomAccessIterator
    partial_sort_copy(InputIterator first, InputIterator last,
                      RandomAccessIterator result_first,
                      RandomAccessIterator result_last,
                      Compare comp);
template<class ExecutionPolicy, class ForwardIterator, class RandomAccessIterator,
         class Compare>
  RandomAccessIterator
    partial_sort_copy(ExecutionPolicy&& exec,
                      ForwardIterator first, ForwardIterator last,
                      RandomAccessIterator result_first,
                      RandomAccessIterator result_last,
                      Compare comp);

template<[[redoc("`:c>")]]input_iterator I1, [[redoc("`:c>")]]sentinel_for<I1> S1, [[redoc("`:c>")]]random_access_iterator I2, [[redoc("`:c>")]]sentinel_for<I2> S2,
         class Comp = ranges::less, class Proj1 = identity, class Proj2 = identity>
  requires [[redoc("`:c>")]]indirectly_copyable<I1, I2> && [[redoc("`:c>")]]sortable<I2, Comp, Proj2> &&
           [[redoc("`:c>")]]indirect_strict_weak_order<Comp, projected<I1, Proj1>, projected<I2, Proj2>>
  constexpr ranges::partial_sort_copy_result<I1, I2>
    ranges::partial_sort_copy(I1 first, S1 last, I2 result_first, S2 result_last,
                              Comp comp = {}, Proj1 proj1 = {}, Proj2 proj2 = {});
template<[[redoc("`:c>")]]input_range R1, [[redoc("`:c>")]]random_access_range R2, class Comp = ranges::less,
         class Proj1 = identity, class Proj2 = identity>
  requires [[redoc("`:c>")]]indirectly_copyable<iterator_t<R1>, iterator_t<R2>> &&
           [[redoc("`:c>")]]sortable<iterator_t<R2>, Comp, Proj2> &&
           [[redoc("`:c>")]]indirect_strict_weak_order<Comp, projected<iterator_t<R1>, Proj1>,
                                      projected<iterator_t<R2>, Proj2>>
  constexpr ranges::partial_sort_copy_result<borrowed_iterator_t<R1>, borrowed_iterator_t<R2>>
    ranges::partial_sort_copy(R1&& r, R2&& result_r, Comp comp = {},
                              Proj1 proj1 = {}, Proj2 proj2 = {});
[codeblock:end]

[div:description]
[para]
[:en] Let [$N] be [$\min([`last - first], \ [`result_last - result_first])].
[:zh_CN] 令 [$N] 为 [$\min([`last - first], \ [`result_last - result_first])]。

[:en] Let [`comp] be [`less{}] and [`proj1] and [`proj2] be [`identity{}] for
the overloads with no parameters by those names.
[:zh_CN] 对于没有具有名字 [`comp] 和 [`proj1] 和 [`proj2] 的形参的各重载，令
[`comp] 为 [`less{}] 并令 [`proj1] 和 [`proj2] 为 [`identity{}]。

[para:mandates]
[:en] For the overloads in namespace [`std], the expression [`*first] is
writable ([#iterator.requirements.general]) to [`result_first].
[:zh_CN] 对于命名空间 [`std] 中的各重载，表达式 [`*first] 可向 [`result_first]
写出（[#iterator.requirements.general]）。

[para:expects]
[:en] For the overloads in namespace [`std], [`RandomAccessIterator] meets the
[^:oc ValueSwappable] requirements ([#swappable.requirements]), the type of
[`*result_first] meets the [^:oc MoveConstructible]
([#:tab#cpp17.moveconstructible]) and [^:oc MoveAssignable]
([#:tab#cpp17.moveassignable]) requirements.
[:zh_CN] 对于命名空间 [`std] 中的各重载，[`RandomAccessIterator] 满足
[^:oc ValueSwappable] 的规定（[#swappable.requirements]），而 [`*result_first]
的类型满足 [^:oc MoveConstructible]（[#:tab#cpp17.moveconstructible]）和
[^:oc MoveAssignable]（[#:tab#cpp17.moveassignable]）的规定。

[para]
[:en] For iterators [`a1] and [`b1] in [=range(first,last)], and iterators
[`x2] and [`y2] in [=range(result_first,result_last)], after evaluating the
assignment [`*y2 = *b1], let [$E] be the value of
[:zh_CN] 对于 [=range(first,last)] 中的迭代器 [`a1] 和 [`b1]，以及
[=range(result_first,result_last)] 中的迭代器 [`x2] 和 [`y2]，经过对赋值
[`*y2 = *b1] 的求值之后，令 [$E] 为以下表达式的值：

[codeblock]
bool(invoke(comp, invoke(proj1, *a1), invoke(proj2, *y2)))
[codeblock:end]

[:en] Then, after evaluating the assignment [`*x2 = *a1], [$E] is equal to
[:zh_CN] 然后，经过对赋值 [`*x2 = *a1] 的求值之后，令 [$E] 等于

[codeblock]
bool(invoke(comp, invoke(proj2, *x2), invoke(proj2, *y2)))
[codeblock:end]

[begin:note]
[:en] Writing a value from the input range into the output range does not affect
how it is ordered by [`comp] and [`proj1] or [`proj2].
[:zh_CN] 将输入范围中的值写入到输出范围中，并不会影响其是否根据 [`comp] 和
[`proj1] 或 [`proj2] 的排序状态。
[end:note]

[para:effects]
[:en] Places the first [$N] elements as sorted with respect to [`comp] and
[`proj2] into the range [=range(result_first,result_first + `[$N`])].
[:zh_CN] 将前 [$N] 个元素当做根据 [`comp] 和 [`proj2] 有序，并置于范围
[=range(result_first,result_first + `[$N`])] 之中。

[para:returns]
[list]
[item]
[:en] [`result_first + [$N]] for the overloads in namespace [`std].
[:zh_CN] 对于命名空间 [`std] 中的各重载，返回 [`result_first + [$N]]。
[item]
[:en] [`{last, result_first + [$N]}] for the overloads in namespace [`ranges].
[:zh_CN] 对于命名空间 [`ranges] 中的各重载，返回 [`{last, result_first + [$N]}]。
[list:end]

[para:complexity]
[:en] Approximately [`(last - first) * log [$N]] comparisons, and twice as many
projections.
[:zh_CN] 大约 [`(last - first) * log [$N]] 次比较，以及两倍次数的投射。
[div:end]
