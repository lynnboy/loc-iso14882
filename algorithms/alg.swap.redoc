[section#alg.swap
    [:en] Swap
    [:zh_CN] 交换
]

[%@library swap_ranges]
[codeblock:declaration]
template<class ForwardIterator1, class ForwardIterator2>
  constexpr ForwardIterator2
    swap_ranges(ForwardIterator1 first1, ForwardIterator1 last1,
                ForwardIterator2 first2);
template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2>
  ForwardIterator2
    swap_ranges(ExecutionPolicy&& exec,
                ForwardIterator1 first1, ForwardIterator1 last1,
                ForwardIterator2 first2);

namespace ranges {
  template<InputIterator I1, Sentinel<I1> S1, InputIterator I2, Sentinel<I2> S2>
    requires IndirectlySwappable<I1, I2>
    constexpr swap_ranges_result<I1, I2>
      swap_ranges(I1 first1, S1 last1, I2 first2, S2 last2);
  template<InputRange R1, InputRange R2>
    requires IndirectlySwappable<iterator_t<R1>, iterator_t<R2>>
    constexpr swap_ranges_result<safe_iterator_t<R1>, safe_iterator_t<R2>>
      swap_ranges(R1&& r1, R2&& r2);
}
[codeblock:end]

[enter:description]
[para]
[:en] Let:
[:zh_CN] 令：
[list]
[item]
[:en@~] [`last2] be [`first2 + (last1 - first1)] for the overloads with no
parameter named [`last2], and
[:zh_CN] 令 [`last2] 对于没有名为 [`last2] 的形参的重载为
[`first2 + (last1 - first1)]，以及
[item]
[:en@~] [$M] be [$\min([`last1 - first1], \ [`last2 - first2])].
[:zh_CN@~] [$M] 为 [$\min([`last1 - first1], \ [`last2 - first2])]。
[list:end]

[para:requires]
[:en] The two ranges [=range(first1,last1)] and [=range(first2,last2)] shall not
overlap.
[:zh_CN] 两个范围 [=range(first1,last1)] 和 [=range(first2,last2)] 不能有重叠。

[:en] For the overloads in namespace [`std], [`*(first1 + [$n])] shall be
swappable with ([#swappable.requirements]) [`*(first2 + [$n])].
[:zh_CN] 对于命名空间 [`std] 中的重载，[`*(first1 + [$n])] 应当可以与
[`*(first2 + [$n])] 进行交换（[#swappable.requirements]）。

[para:effects]
[:en] For each non-negative integer [$n < M] performs:
[:zh_CN] 对于每个非负整数 [$n < M]：
[list]
[item]
[:en@~] [`swap(*(first1 + [$n]), *(first2 + [$n]))] for the overloads in
namespace [`std], or
[:zh_CN@~] 对于命名空间 [`std] 中的重载，实施
[`swap(*(first1 + [$n]), *(first2 + [$n]))]，或者
[item]
[:en@~] [`ranges::iter_swap(first1 + [$n], first2 + [$n])] for the overloads in
namespace [`ranges].
[:zh_CN@~] 对于命名空间 [`ranges] 中的重载，实施
[`ranges::iter_swap(first1 + [$n], first2 + [$n])]。
[list:end]

[para:returns]
[list]
[item]
[:en@~] [`last2] for the overloads in namespace [`std], or
[:zh_CN@~] 对于命名空间 [`std] 中的重载，返回 [`last2]，或者
[item]
[:en@~] [`{first1 + [$M], first2 + [$M]}] for the overloads in namespace
[`ranges].
[:zh_CN@~] 对于命名空间 [`ranges] 中的重载，返回
[`{first1 + [$M], first2 + [$M]}]。
[list:end]

[para:complexity]
[:en] Exactly [$M] swaps.
[:zh_CN] 恰好进行 [$M] 次交换。
[exit:description]

[%@library iter_swap]
[codeblock:declaration]
template<class ForwardIterator1, class ForwardIterator2>
  constexpr void iter_swap(ForwardIterator1 a, ForwardIterator2 b);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`a] and [`b] shall be dereferenceable.
[:zh_CN] [`a] 和 [`b] 应当可解引用。

[:en] [`*a] shall be swappable with ([#swappable.requirements]) [`*b].
[:zh_CN] [`*a] 应当可以与 [`*b] 进行交换（[#swappable.requirements]）。

[para:effects]
[:en] As if by [`swap(*a, *b)].
[:zh_CN] 如同执行 [`swap(*a, *b)]。
[exit:description]
