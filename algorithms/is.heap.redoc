[section#is.heap
    [`is_heap]
]

[%@lib is_heap]
[codeblock:declaration]
template<class RandomAccessIterator>
  constexpr bool is_heap(RandomAccessIterator first, RandomAccessIterator last);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return is_heap_until(first, last) == last;]
[:zh_CN] 等价于：[`return is_heap_until(first, last) == last;]
[div:end]

[%@lib is_heap]
[codeblock:declaration]
template<class ExecutionPolicy, class RandomAccessIterator>
  bool is_heap(ExecutionPolicy&& exec,
               RandomAccessIterator first, RandomAccessIterator last);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return is_heap_until(std::forward<ExecutionPolicy>(exec), first, last) == last;
[codeblock:end]
[div:end]

[%@lib is_heap]
[codeblock:declaration]
template<class RandomAccessIterator, class Compare>
  constexpr bool is_heap(RandomAccessIterator first, RandomAccessIterator last,
                         Compare comp);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return is_heap_until(first, last, comp) == last;]
[:zh_CN] 等价于：[`return is_heap_until(first, last, comp) == last;]
[div:end]

[%@lib is_heap]
[codeblock:declaration]
template<class ExecutionPolicy, class RandomAccessIterator, class Compare>
  bool is_heap(ExecutionPolicy&& exec,
               RandomAccessIterator first, RandomAccessIterator last,
               Compare comp);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return is_heap_until(std::forward<ExecutionPolicy>(exec), first, last, comp) == last;
[codeblock:end]
[div:end]

[%@lib is_heap]
[codeblock:declaration]
template<[[redoc("`:c>")]]random_access_iterator I, [[redoc("`:c>")]]sentinel_for<I> S, class Proj = identity,
         [[redoc("`:c>")]]indirect_strict_weak_order<projected<I, Proj>> Comp = ranges::less>
  constexpr bool ranges::is_heap(I first, S last, Comp comp = {}, Proj proj = {});
template<[[redoc("`:c>")]]random_access_range R, class Proj = identity,
         [[redoc("`:c>")]]indirect_strict_weak_order<projected<iterator_t<R>, Proj>> Comp = ranges::less>
  constexpr bool ranges::is_heap(R&& r, Comp comp = {}, Proj proj = {});
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[`return ranges::is_heap_until(first, last, comp, proj) == last;]
[:zh_CN] 等价于：
[`return ranges::is_heap_until(first, last, comp, proj) == last;]
[div:end]

[%@lib is_heap_until]
[codeblock:declaration]
template<class RandomAccessIterator>
  constexpr RandomAccessIterator
    is_heap_until(RandomAccessIterator first, RandomAccessIterator last);
template<class ExecutionPolicy, class RandomAccessIterator>
  RandomAccessIterator
    is_heap_until(ExecutionPolicy&& exec,
                  RandomAccessIterator first, RandomAccessIterator last);

template<class RandomAccessIterator, class Compare>
  constexpr RandomAccessIterator
    is_heap_until(RandomAccessIterator first, RandomAccessIterator last,
                  Compare comp);
template<class ExecutionPolicy, class RandomAccessIterator, class Compare>
  RandomAccessIterator
    is_heap_until(ExecutionPolicy&& exec,
                  RandomAccessIterator first, RandomAccessIterator last,
                  Compare comp);

template<[[redoc("`:c>")]]random_access_iterator I, [[redoc("`:c>")]]sentinel_for<I> S, class Proj = identity,
         [[redoc("`:c>")]]indirect_strict_weak_order<projected<I, Proj>> Comp = ranges::less>
  constexpr I ranges::is_heap_until(I first, S last, Comp comp = {}, Proj proj = {});
template<[[redoc("`:c>")]]random_access_range R, class Proj = identity,
         [[redoc("`:c>")]]indirect_strict_weak_order<projected<iterator_t<R>, Proj>> Comp = ranges::less>
  constexpr borrowed_iterator_t<R>
    ranges::is_heap_until(R&& r, Comp comp = {}, Proj proj = {});
[codeblock:end]

[div:description]
[para]
[:en] Let [`comp] be [`less{}] and [`proj] be [`identity{}] for the overloads
with no parameters by those names.
[:zh_CN] 对于没有名为 [`comp] 和 [`proj] 的形参的重载，令 [`comp] 为 [`less()]，
[`proj] 为 [`identity{}]。

[para:returns]
[:en] The last iterator [`i] in [=crange(first,last)] for which the range
[=range(first,i)] is a heap with respect to [`comp] and [`proj].
[:zh_CN] [=crange(first,last)] 中最后一个使得范围 [=range(first,i)] 根据 [`comp]
和 [`proj] 是一个堆的迭代器 [`i]。

[para:complexity]
[:en] Linear.
[:zh_CN] 线性。
[div:end]
