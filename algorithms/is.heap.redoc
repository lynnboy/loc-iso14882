[section#is.heap
    [`is_heap]
]

[%@library is_heap]
[codeblock:declaration]
template<class RandomAccessIterator>
  constexpr bool is_heap(RandomAccessIterator first, RandomAccessIterator last);
[codeblock:end]

[enter:description]
[para:returns]
[`is_heap_until(first, last) == last]
[exit:description]

[%@library is_heap]
[codeblock:declaration]
template<class ExecutionPolicy, class RandomAccessIterator>
  bool is_heap(ExecutionPolicy&& exec,
               RandomAccessIterator first, RandomAccessIterator last);
[codeblock:end]

[enter:description]
[para:returns]
[`is_heap_until(std::forward<ExecutionPolicy>(exec), first, last) == last]
[exit:description]

[%@library is_heap]
[codeblock:declaration]
template<class RandomAccessIterator, class Compare>
  constexpr bool is_heap(RandomAccessIterator first, RandomAccessIterator last,
                         Compare comp);
[codeblock:end]

[enter:description]
[para:returns]
[`is_heap_until(first, last, comp) == last]
[exit:description]

[%@library is_heap]
[codeblock:declaration]
template<class ExecutionPolicy, class RandomAccessIterator, class Compare>
  bool is_heap(ExecutionPolicy&& exec,
               RandomAccessIterator first, RandomAccessIterator last,
               Compare comp);
[codeblock:end]

[enter:description]
[para:returns]
[codeblock:notation]
is_heap_until(std::forward<ExecutionPolicy>(exec), first, last, comp) == last
[codeblock:end]
[exit:description]

[%@library is_heap_until]
[codeblock:declaration]
template<class RandomAccessIterator>
  constexpr RandomAccessIterator
    is_heap_until(RandomAccessIterator first, RandomAccessIterator last);
template<class ExecutionPolicy, class RandomAccessIterator>
  RandomAccessIterator
    is_heap_until(ExecutionPolicy&& exec,
                  RandomAccessIterator first, RandomAccessIterator last);

template<class RandomAccessIterator, class Compare>
  constexpr RandomAccessIterator
    is_heap_until(RandomAccessIterator first, RandomAccessIterator last,
                  Compare comp);
template<class ExecutionPolicy, class RandomAccessIterator, class Compare>
  RandomAccessIterator
    is_heap_until(ExecutionPolicy&& exec,
                  RandomAccessIterator first, RandomAccessIterator last,
                  Compare comp);
[codeblock:end]

[enter:description]
[para:returns]
[:en] If [`(last - first) < 2], returns [`last].
[:zh_CN] 如果 [`(last - first) < 2]，则返回 [`last]。

[:en] Otherwise, returns the last iterator [`i] in [=crange(first,last)] for
which the range [=range(first,i)] is a heap.
[:zh_CN] 否则，返回 [=crange(first,last)] 中最后一个使得范围 [=range(first,i)]
是一个堆的迭代器 [`i]。

[para:complexity]
[:en] Linear.
[:zh_CN] 线性。
[exit:description]
