[section#alg.find
    [:en] Find
    [:zh_CN] 查找
]

[%@lib find]
[%@lib find_if]
[%@lib find_if_not]
[codeblock:declaration]
template<class InputIterator, class T = iterator_traits<InputIterator>::value_type>
  constexpr InputIterator find(InputIterator first, InputIterator last,
                               const T& value);
template<class ExecutionPolicy, class ForwardIterator,
         class T = iterator_traits<ForwardIterator>::value_type>
  ForwardIterator find(ExecutionPolicy&& exec, ForwardIterator first, ForwardIterator last,
                       const T& value);

template<class InputIterator, class Predicate>
  constexpr InputIterator find_if(InputIterator first, InputIterator last,
                                  Predicate pred);
template<class ExecutionPolicy, class ForwardIterator, class Predicate>
  ForwardIterator find_if(ExecutionPolicy&& exec, ForwardIterator first, ForwardIterator last,
                          Predicate pred);

template<class InputIterator, class Predicate>
  constexpr InputIterator find_if_not(InputIterator first, InputIterator last,
                                      Predicate pred);
template<class ExecutionPolicy, class ForwardIterator, class Predicate>
  ForwardIterator find_if_not(ExecutionPolicy&& exec,
                              ForwardIterator first, ForwardIterator last,
                              Predicate pred);

template<[[redoc("`:c>")]]input_iterator I, [[redoc("`:c>")]]sentinel_for<I> S, class Proj = identity,
         class T = projected_value_t<I, Proj>>
  requires [[redoc("`:c>")]]indirect_binary_predicate<ranges::equal_to, projected<I, Proj>, const T*>
  constexpr I ranges::find(I first, S last, const T& value, Proj proj = {});
template<[[redoc("`:c>")]]input_range R, class Proj = identity, class T = projected_value_t<iterator_t<R>, Proj>>
  requires [[redoc("`:c>")]]indirect_binary_predicate<ranges::equal_to, projected<iterator_t<R>, Proj>, const T*>
  constexpr borrowed_iterator_t<R>
    ranges::find(R&& r, const T& value, Proj proj = {});

template<[[redoc("*:c>")]]execution-policy Ep, [[redoc("`:c>")]]random_access_iterator I, [[redoc("`:c>")]]sized_sentinel_for<I> S,
         class Proj = identity, class T = projected_value_t<I, Proj>>
  requires [[redoc("`:c>")]]indirect_binary_predicate<ranges::equal_to, projected<I, Proj>, const T*>
  I ranges::find(Ep&& exec, I first, S last, const T& value, Proj proj = {});
template<[[redoc("*:c>")]]execution-policy Ep, [[redoc("`:c>")]]sized-random-access-range R, class Proj = identity,
         class T = projected_value_t<iterator_t<R>, Proj>>
  requires [[redoc("`:c>")]]indirect_binary_predicate<ranges::equal_to,
                                     projected<iterator_t<R>, Proj>, const T*>
  borrowed_iterator_t<R> ranges::find(Ep&& exec, R&& r, const T& value, Proj proj = {});

template<[[redoc("`:c>")]]input_iterator I, [[redoc("`:c>")]]sentinel_for<I> S, class Proj = identity,
         [[redoc("`:c>")]]indirect_unary_predicate<projected<I, Proj>> Pred>
  constexpr I ranges::find_if(I first, S last, Pred pred, Proj proj = {});
template<[[redoc("`:c>")]]input_range R, class Proj = identity,
         [[redoc("`:c>")]]indirect_unary_predicate<projected<iterator_t<R>, Proj>> Pred>
  constexpr borrowed_iterator_t<R>
    ranges::find_if(R&& r, Pred pred, Proj proj = {});

template<[[redoc("*:c>")]]execution-policy Ep, [[redoc("`:c>")]]random_access_iterator I, [[redoc("`:c>")]]sized_sentinel_for<I> S,
         class Proj = identity, [[redoc("*:c>")]]indirect_unary_predicate<projected<I, Proj>> Pred>
  I ranges::find_if(Ep&& exec, I first, S last, Pred pred, Proj proj = {});
template<[[redoc("*:c>")]]execution-policy Ep, [[redoc("*:c>")]]sized-random-access-range R, class Proj = identity,
         [[redoc("`:c>")]]indirect_unary_predicate<projected<iterator_t<R>, Proj>> Pred>
  borrowed_iterator_t<R> ranges::find_if(Ep&& exec, R&& r, Pred pred, Proj proj = {});

template<[[redoc("`:c>")]]input_iterator I, [[redoc("`:c>")]]sentinel_for<I> S, class Proj = identity,
         [[redoc("`:c>")]]indirect_unary_predicate<projected<I, Proj>> Pred>
  constexpr I ranges::find_if_not(I first, S last, Pred pred, Proj proj = {});
template<[[redoc("`:c>")]]input_range R, class Proj = identity,
         [[redoc("`:c>")]]indirect_unary_predicate<projected<iterator_t<R>, Proj>> Pred>
  constexpr borrowed_iterator_t<R>
    ranges::find_if_not(R&& r, Pred pred, Proj proj = {});

template<[[redoc("*:c>")]]execution-policy Ep, [[redoc("`:c>")]]random_access_iterator I, [[redoc("`:c>")]]sized_sentinel_for<I> S,
         class Proj = identity, [[redoc("`:c>")]]indirect_unary_predicate<projected<I, Proj>> Pred>
  I ranges::find_if_not(Ep&& exec, I first, S last, Pred pred, Proj proj = {});
template<[[redoc("*:c>")]]execution-policy Ep, [[redoc("*:c>")]]sized-random-access-range R, class Proj = identity,
         [[redoc("`:c>")]]indirect_unary_predicate<projected<iterator_t<R>, Proj>> Pred>
  borrowed_iterator_t<R> ranges::find_if_not(Ep&& exec, R&& r, Pred pred, Proj proj = {});
[codeblock:end]

[div:description]
[para]
[:en] Let [$E] be:
[:zh_CN] 令 [$E]：

[list]
[item]
[:en@~] [`*i == value] for [`find];
[:zh_CN@~] 对于 [`find] 为 [`*i == value]；
[item]
[:en@~] [`pred(*i) != false] for [`find_if];
[:zh_CN@~] 对于 [`find_if] 为 [`pred(*i) != false]；
[item]
[:en@~] [`pred(*i) == false] for [`find_if_not];
[:zh_CN@~] 对于 [`find_if_not] 为 [`pred(*i) == false]；
[item]
[:en@~] [`bool(invoke(proj, *i) == value)] for [`ranges::find];
[:zh_CN@~] 对于 [`ranges::find] 为 [`bool(invoke(proj, *i) == value)]；
[item]
[:en@~] [`bool(invoke(pred, invoke(proj, *i)))] for [`ranges::find_if];
[:zh_CN@~] 对于 [`ranges::find_if] 为 [`bool(invoke(pred, invoke(proj, *i)))]；
[item]
[:en@~] [`bool(!invoke(pred, invoke(proj, *i)))] for [`ranges::find_if_not].
[:zh_CN@~] 对于 [`ranges::find_if_not] 为 [`bool(!invoke(pred, invoke(proj, *i)))]。
[list:end]

[para:returns]
[:en] The first iterator [`i] in the range [=range(first,last)] for which
[$E] is [`true].
[:zh_CN] 范围 [=range(first,last)] 中第一个使 [$E] 为 [`true] 的迭代器 [`i]。

[:en] Returns [`last] if no such iterator is found.
[:zh_CN] 如果未找到这种迭代器则返回 [`last]。

[para:complexity]
[:en] At most [`last - first] applications of the corresponding predicate and
any projection.
[:zh_CN] 最多进行 [`last - first] 次相应谓词和任何投射的运用。
[div:end]
