[section#alg.nth.element
    [:en] Nth element
    [:zh_CN] 第 N 位元素
]

[%@library nth_element]
[codeblock:declaration]
template<class RandomAccessIterator>
  constexpr void nth_element(RandomAccessIterator first, RandomAccessIterator nth,
                             RandomAccessIterator last);
template<class ExecutionPolicy, class RandomAccessIterator>
  void nth_element(ExecutionPolicy&& exec,
                   RandomAccessIterator first, RandomAccessIterator nth,
                   RandomAccessIterator last);

template<class RandomAccessIterator, class Compare>
  constexpr void nth_element(RandomAccessIterator first, RandomAccessIterator nth,
                             RandomAccessIterator last,  Compare comp);
template<class ExecutionPolicy, class RandomAccessIterator, class Compare>
  void nth_element(ExecutionPolicy&& exec,
                   RandomAccessIterator first, RandomAccessIterator nth,
                   RandomAccessIterator last, Compare comp);

template<random_access_iterator I, sentinel_for<I> S, class Comp = ranges::less,
         class Proj = identity>
  requires sortable<I, Comp, Proj>
  constexpr I
    ranges::nth_element(I first, I nth, S last, Comp comp = {}, Proj proj = {});
[codeblock:end]

[begin:description]
[para]
[:en] Let [`comp] be [`less{}] and [`proj] be [`identity{}] for the overloads
with no parameters by those names.
[:zh_CN] 对于没有具有名字 [`comp] 和 [`proj] 的形参的各重载，令 [`comp] 为
[`less{}] 并令 [`proj] 为 [`identity{}]。

[para:requires]
[:en] [=range(first,nth)] and [=range(nth,last)] shall be valid ranges.
[:zh_CN] [=range(first,nth)] 和 [=range(nth,last)] 都应当是有效范围。

[:en] For the overloads in namespace [`std], [`RandomAccessIterator] shall meet
the [*Cpp17ValueSwappable] requirements ([#swappable.requirements]) and the type
of [`*first] shall meet the [*Cpp17MoveConstructible]
([#:tab#cpp17.moveconstructible]) and [*Cpp17MoveAssignable]
([#:tab#cpp17.moveassignable]) requirements.
[:zh_CN] 对于命名空间 [`std] 中的各重载，[`RandomAccessIterator] 应当满足
[*Cpp17ValueSwappable] 的规定（[#swappable.requirements]），而 [`*first] 的类型
应当满足 [*Cpp17MoveConstructible]（[#:tab#cpp17.moveconstructible]）和
[*Cpp17MoveAssignable]（[#:tab#cpp17.moveassignable]）的规定。

[para]
[:en] After [`nth_element] the element in the position pointed to by [`nth] is
the element that would be in that position if the whole range were sorted with
respect to [`comp] and [`proj], unless [`nth == last].
[:zh_CN] [`nth_element] 之后，除非 [`nth == last]，由 [`nth] 所指向的位置中的
元素，是当整个序列根据 [`comp] 和 [`proj] 排序后将会置于该位置的元素。

[:en] Also for every iterator [`i] in the range [=range(first,nth)] and every
iterator [`j] in the range [=range(nth,last)] it holds that:
[`bool(invoke(comp, invoke(proj, *j), invoke(proj, *i)))] is [`false].
[:zh_CN] 并且对于范围 [=range(first,nth)] 中的每个迭代器 [`i] 以及范围
[=range(nth,last)] 中的每个迭代器 [`j]，以下条件成立：
[`bool(invoke(comp, invoke(proj, *j), invoke(proj, *i)))] 为 [`false]。

[para:returns]
[:en] [`last] for the overloads in namespace [`ranges].
[:zh_CN] 命名空间 [`ranges] 中的各重载返回 [`last]。

[para:complexity]
[:en] For the overloads with no [`ExecutionPolicy], linear on average.
[:zh_CN] 对于不带有 [`ExecutionPolicy] 的重载，平均为线性的。

[:en] For the overloads with an [`ExecutionPolicy], [?bigoh N] applications of
the predicate, and [?bigoh N \log N] swaps, where [$N = [`last - first]].
[:zh_CN] 对于带有 [`ExecutionPolicy] 的重载，[?bigoh N] 次对相应谓词的应用，以及
[?bigoh N \log N] 次交换，其中 [$N = [`last - first]]。
[end:description]

[codeblock:declaration]
template<random_access_range R, class Comp = ranges::less, class Proj = identity>
  requires sortable<iterator_t<R>, Comp, Proj>
  constexpr safe_iterator_t<R>
    ranges::nth_element(R&& r, iterator_t<R> nth, Comp comp = {}, Proj proj = {});
[codeblock:end]

[begin:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：

[codeblock:notation]
return ranges::nth_element(ranges::begin(r), nth, ranges::end(r), comp, proj);
[codeblock:end]
[end:description]
