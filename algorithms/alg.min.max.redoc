[section#alg.min.max
    [:en] Minimum and maximum
    [:zh_CN] 最大值和最小值
]

[%@library min]
[codeblock:declaration]
template<class T> constexpr const T& min(const T& a, const T& b);
template<class T, class Compare>
  constexpr const T& min(const T& a, const T& b, Compare comp);

template<class T, class Proj = identity,
         indirect_strict_weak_order<projected<const T*, Proj>> Comp = ranges::less>
  constexpr const T& ranges::min(const T& a, const T& b, Comp comp = {}, Proj proj = {});
[codeblock:end]

[begin:description]
[para:requires]
[:en] For the first form, Type [`T] shall be [*Cpp17LessThanComparable]
([#:tab#cpp17.lessthancomparable]).
[:zh_CN] 对于第一种形式，类型 [`T] 应当为 [*Cpp17LessThanComparable]
（[#:tab#cpp17.lessthancomparable]）。

[para:returns]
[:en] The smaller value.
[:zh_CN] 较小值。

[para:remarks]
[:en] Returns the first argument when the arguments are equivalent.
[:zh_CN] 当两个实参等价时返回第一个实参。

[:en] An invocation may explicitly specify an argument for the template
parameter [`T] of the overloads in namespace [`std].
[:zh_CN] 在调用中可以为命名空间 [`std] 中的各重载的模板形参 [`T] 明确指定其实参。

[para:complexity]
[:en] Exactly one comparison and two applications of the projection, if any.
[:zh_CN] 恰好进行一次比较，以及（如果有）两次投射的运用。
[end:description]

[%@library min]
[codeblock:declaration]
template<class T>
  constexpr T min(initializer_list<T> r);
template<class T, class Compare>
  constexpr T min(initializer_list<T> r, Compare comp);

template<copyable T, class Proj = identity,
         indirect_strict_weak_order<projected<const T*, Proj>> Comp = ranges::less>
  constexpr T ranges::min(initializer_list<T> r, Comp comp = {}, Proj proj = {});
template<input_range R, class Proj = identity,
         indirect_strict_weak_order<projected<iterator_t<R>, Proj>> Comp = ranges::less>
  requires indirectly_copyable_storable<iterator_t<R>, range_value_t<R>*>
  constexpr range_value_t<R>
    ranges::min(R&& r, Comp comp = {}, Proj proj = {});
[codeblock:end]

[begin:description]
[para:requires]
[:en] [`ranges::distance(r) > 0].
[:zh_CN] [`ranges::distance(r) > 0]。

[:en] For the overloads in namespace [`std], [`T] shall be
[*Cpp17CopyConstructible].
[:zh_CN] 对于命名空间 [`std] 中的各重载，[`T] 应当为 [*Cpp17CopyConstructible]。

[:en] For the first form, Type [`T] shall be [*Cpp17LessThanComparable].
[:zh_CN] 对于第一种形式，类型 [`T] 应当为 [*Cpp17LessThanComparable]。

[para:returns]
[:en] The smallest value in the input range.
[:zh_CN] 输入范围中的最小值。

[para:remarks]
[:en] Returns a copy of the leftmost element when several elements are
equivalent to the smallest.
[:zh_CN] 当多个元素都等价于最小值时返回最左边的元素的副本。

[:en] An invocation may explicitly specify an argument for the template
parameter [`T] of the overloads in namespace [`std].
[:zh_CN] 在调用中可以为命名空间 [`std] 中的各重载的模板形参 [`T] 明确指定其实参。

[para:complexity]
[:en] Exactly [`ranges::distance(r) - 1] comparisons and twice as many
applications of the projection, if any.
[:zh_CN] 恰好进行 [`ranges::distance(r) - 1] 次比较，以及（如果有）两倍于此的
投射的运用。
[end:description]

[%@library max]
[codeblock:declaration]
template<class T> constexpr const T& max(const T& a, const T& b);
template<class T, class Compare>
  constexpr const T& max(const T& a, const T& b, Compare comp);

template<class T, class Proj = identity,
         indirect_strict_weak_order<projected<const T*, Proj>> Comp = ranges::less>
  constexpr const T& ranges::max(const T& a, const T& b, Comp comp = {}, Proj proj = {});
[codeblock:end]

[begin:description]
[para:requires]
[:en] For the first form, Type [`T] shall be [*Cpp17LessThanComparable]
([#:tab#cpp17.lessthancomparable]).
[:zh_CN] 对于第一种形式，类型 [`T] 应当为 [*Cpp17LessThanComparable]
（[#:tab#cpp17.lessthancomparable]）。

[para:returns]
[:en] The larger value.
[:zh_CN] 较大值。

[para:remarks]
[:en] Returns the first argument when the arguments are equivalent.
[:zh_CN] 当两个实参等价时返回第一个实参。

[:en] An invocation may explicitly specify an argument for the template
parameter [`T] of the overloads in namespace [`std].
[:zh_CN] 在调用中可以为命名空间 [`std] 中的各重载的模板形参 [`T] 明确指定其实参。

[para:complexity]
[:en] Exactly one comparison and two applications of the projection, if any.
[:zh_CN] 恰好进行一次比较，以及（如果有）两次投射的运用。
[end:description]

[%@library max]
[codeblock:declaration]
template<class T>
  constexpr T max(initializer_list<T> r);
template<class T, class Compare>
  constexpr T max(initializer_list<T> r, Compare comp);

template<copyable T, class Proj = identity,
         indirect_strict_weak_order<projected<const T*, Proj>> Comp = ranges::less>
  constexpr T ranges::max(initializer_list<T> r, Comp comp = {}, Proj proj = {});
template<input_range R, class Proj = identity,
         indirect_strict_weak_order<projected<iterator_t<R>, Proj>> Comp = ranges::less>
  requires indirectly_copyable_storable<iterator_t<R>, range_value_t<R>*>
  constexpr range_value_t<R>
    ranges::max(R&& r, Comp comp = {}, Proj proj = {});
[codeblock:end]

[begin:description]
[para:requires]
[:en] [`ranges::distance(r) > 0].
[:zh_CN] [`ranges::distance(r) > 0]。

[:en] For the overloads in namespace [`std], [`T] shall be
[*Cpp17CopyConstructible].
[:zh_CN] 对于命名空间 [`std] 中的各重载，[`T] 应当为 [*Cpp17CopyConstructible]。

[:en] For the first form, Type [`T] shall be [*Cpp17LessThanComparable].
[:zh_CN] 对于第一种形式，类型 [`T] 应当为 [*Cpp17LessThanComparable]。

[para:returns]
[:en] The largest value in the input range.
[:zh_CN] 输入范围中的最大值。

[para:remarks]
[:en] Returns a copy of the leftmost element when several elements are
equivalent to the largest.
[:zh_CN] 当多个元素都等价于最大值时返回最左边的元素的副本。

[:en] An invocation may explicitly specify an argument for the template
parameter [`T] of the overloads in namespace [`std].
[:zh_CN] 在调用中可以为命名空间 [`std] 中的各重载的模板形参 [`T] 明确指定其实参。

[para:complexity]
[:en] Exactly [`ranges::distance(r) - 1] comparisons and twice as many
applications of the projection, if any.
[:zh_CN] 恰好进行 [`ranges::distance(r) - 1] 次比较，以及（如果有）两倍于此的
投射的运用。
[end:description]

[%@library minmax]
[codeblock:declaration]
template<class T> constexpr pair<const T&, const T&> minmax(const T& a, const T& b);
template<class T, class Compare>
  constexpr pair<const T&, const T&> minmax(const T& a, const T& b, Compare comp);

template<class T, class Proj = identity,
         indirect_strict_weak_order<projected<const T*, Proj>> Comp = ranges::less>
  constexpr ranges::minmax_result<const T&>
    ranges::minmax(const T& a, const T& b, Comp comp = {}, Proj proj = {});
[codeblock:end]

[begin:description]
[para:requires]
[:en] For the first form, Type [`T] shall be [*Cpp17LessThanComparable]
([#:tab#cpp17.lessthancomparable]).
[:zh_CN] 对于第一种形式，类型 [`T] 应当为 [*Cpp17LessThanComparable]
（[#:tab#cpp17.lessthancomparable]）。

[para:returns]
[:en] [`{b, a}] if [`b] is smaller than [`a], and [`{a, b}] otherwise.
[:zh_CN] 如果 [`b] 小于 [`a] 则返回 [`{b, a}]，否则返回 [`{a, b}]。

[para:remarks]
[:en] An invocation may explicitly specify an argument for the template
parameter [`T] of the overloads in namespace [`std].
[:zh_CN] 在调用中可以为命名空间 [`std] 中的各重载的模板形参 [`T] 明确指定其实参。

[para:complexity]
[:en] Exactly one comparison and two applications of the projection, if any.
[:zh_CN] 恰好进行一次比较，以及（如果有）两次投射的运用。
[end:description]

[%@library minmax]
[codeblock:declaration]
template<class T>
  constexpr pair<T, T> minmax(initializer_list<T> t);
template<class T, class Compare>
  constexpr pair<T, T> minmax(initializer_list<T> t, Compare comp);

template<copyable T, class Proj = identity,
         indirect_strict_weak_order<projected<const T*, Proj>> Comp = ranges::less>
  constexpr ranges::minmax_result<T>
    ranges::minmax(initializer_list<T> r, Comp comp = {}, Proj proj = {});
template<input_range R, class Proj = identity,
         indirect_strict_weak_order<projected<iterator_t<R>, Proj>> Comp = ranges::less>
  requires indirectly_copyable_storable<iterator_t<R>, range_value_t<R>*>
  constexpr ranges::minmax_result<range_value_t<R>>
    ranges::minmax(R&& r, Comp comp = {}, Proj proj = {});
[codeblock:end]

[begin:description]
[para:requires]
[:en] [`ranges::distance(r) > 0].
[:zh_CN] [`ranges::distance(r) > 0]。

[:en] For the overloads in namespace [`std], [`T] shall be
[*Cpp17CopyConstructible].
[:zh_CN] 对于命名空间 [`std] 中的各重载，[`T] 应当为 [*Cpp17CopyConstructible]。

[:en] For the first form, Type [`T] shall be [*Cpp17LessThanComparable].
[:zh_CN] 对于第一种形式，类型 [`T] 应当为 [*Cpp17LessThanComparable]。

[para:returns]
[:en] Let [`x] be the return type.
[:zh_CN] 令 [`x] 为返回类型。

[:en] [`X{x, y}], where [`x] is a copy of the leftmost element with the smallest
and [`y] a copy of the rightmost element with the largest value in the input
range.
[:zh_CN] [`X{x, y}]，其中 [`x] 为输入范围中具有最小值的最左边元素的副本，[`y] 为
具有最大值的最右边元素的副本。

[para:remarks]
[:en] An invocation may explicitly specify an argument for the template
parameter [`T] of the overloads in namespace [`std].
[:zh_CN] 在调用中可以为命名空间 [`std] 中的各重载的模板形参 [`T] 明确指定其实参。

[para:complexity]
[:en] At most [$(3/2)[`ranges::distance(r)]] applications of the corresponding
predicate and twice as many applications of the projection, if any.
[:zh_CN] 最多进行 [$(3/2)[`ranges::distance(r)]] 次对应谓词的运用，以及（如果有）
两倍于此的投射的运用。
[end:description]

[%@library min_element]
[codeblock:declaration]
template<class ForwardIterator>
  constexpr ForwardIterator min_element(ForwardIterator first, ForwardIterator last);

template<class ExecutionPolicy, class ForwardIterator>
  ForwardIterator min_element(ExecutionPolicy&& exec,
                              ForwardIterator first, ForwardIterator last);

template<class ForwardIterator, class Compare>
  constexpr ForwardIterator min_element(ForwardIterator first, ForwardIterator last,
                                        Compare comp);
template<class ExecutionPolicy, class ForwardIterator, class Compare>
  ForwardIterator min_element(ExecutionPolicy&& exec,
                              ForwardIterator first, ForwardIterator last,
                              Compare comp);

template<forward_iterator I, sentinel_for<I> S, class Proj = identity,
         indirect_strict_weak_order<projected<I, Proj>> Comp = ranges::less>
  constexpr I ranges::min_element(I first, S last, Comp comp = {}, Proj proj = {});
template<forward_range R, class Proj = identity,
         indirect_strict_weak_order<projected<iterator_t<R>, Proj>> Comp = ranges::less>
  constexpr safe_iterator_t<R>
    ranges::min_element(R&& r, Comp comp = {}, Proj proj = {});
[codeblock:end]

[begin:description]
[para]
[:e] Let [`comp] be [`less{}] and [`proj] be [`identity{}] for the overloads
with no parameters by those names.
[:zh_CN] 对于不带有这些名字的形参的重载，令 [`comp] 为 [`less()]，[`proj] 为
[`identity{}]。

[para:returns]
[:en] The first iterator [`i] in the range [=range(first,last)] such that for
every iterator [`j] in the range [=range(first,last)],
[:zh_CN] 范围 [=range(first,last)] 中的第一个迭代器 [`i]，使得对于范围
[=range(first,last)] 中的每个迭代器 [`j]，

[codeblock:notation]
bool(invoke(comp, invoke(proj, *j), invoke(proj, *i)))
[codeblock:end]

[:en@~] is [`false].
[:zh_CN@~] 均为 [`false]。

[:en] Returns [`last] if [`first == last].
[:zh_CN] 当 [`first == last] 时返回 [`last]。

[para:complexity]
[:en] Exactly [$\max([`last - first - 1], 0)] comparisons and twice as many
projections.
[:zh_CN] 恰好进行 [$\max([`last - first - 1], 0)] 次比较和两倍于此的投射。
[end:description]

[%@library max_element]
[codeblock:declaration]
template<class ForwardIterator>
  constexpr ForwardIterator max_element(ForwardIterator first, ForwardIterator last);
template<class ExecutionPolicy, class ForwardIterator>
  ForwardIterator max_element(ExecutionPolicy&& exec,
                              ForwardIterator first, ForwardIterator last);

template<class ForwardIterator, class Compare>
  constexpr ForwardIterator max_element(ForwardIterator first, ForwardIterator last,
                                        Compare comp);
template<class ExecutionPolicy, class ForwardIterator, class Compare>
  ForwardIterator max_element(ExecutionPolicy&& exec,
                              ForwardIterator first, ForwardIterator last,
                              Compare comp);

template<forward_iterator I, sentinel_for<I> S, class Proj = identity,
         indirect_strict_weak_order<projected<I, Proj>> Comp = ranges::less>
  constexpr I ranges::max_element(I first, S last, Comp comp = {}, Proj proj = {});
template<forward_range R, class Proj = identity,
         indirect_strict_weak_order<projected<iterator_t<R>, Proj>> Comp = ranges::less>
  constexpr safe_iterator_t<R>
    ranges::max_element(R&& r, Comp comp = {}, Proj proj = {});
[codeblock:end]

[begin:description]
[para]
[:e] Let [`comp] be [`less{}] and [`proj] be [`identity{}] for the overloads
with no parameters by those names.
[:zh_CN] 对于不带有这些名字的形参的重载，令 [`comp] 为 [`less()]，[`proj] 为
[`identity{}]。

[para:returns]
[:en] The first iterator [`i] in the range [=range(first,last)] such that for
every iterator [`j] in the range [=range(first,last)],
[:zh_CN] 范围 [=range(first,last)] 中的第一个迭代器 [`i]，使得对于范围
[=range(first,last)] 中的每个迭代器 [`j]，

[codeblock:notation]
bool(invoke(comp, invoke(proj, *i), invoke(proj, *j)))
[codeblock:end]

[:en@~] is [`false].
[:zh_CN@~] 均为 [`false]。

[:en] Returns [`last] if [`first == last].
[:zh_CN] 当 [`first == last] 时返回 [`last]。

[para:complexity]
[:en] Exactly [$\max([`last - first - 1], 0] comparisons and twice as many
projections.
[:zh_CN] 恰好进行 [$\max([`last - first - 1], 0] 次比较和两倍于此的投射。
[end:description]

[%@library minmax_element]
[codeblock:declaration]
template<class ForwardIterator>
  constexpr pair<ForwardIterator, ForwardIterator>
    minmax_element(ForwardIterator first, ForwardIterator last);
template<class ExecutionPolicy, class ForwardIterator>
  pair<ForwardIterator, ForwardIterator>
    minmax_element(ExecutionPolicy&& exec,
                   ForwardIterator first, ForwardIterator last);

template<class ForwardIterator, class Compare>
  constexpr pair<ForwardIterator, ForwardIterator>
    minmax_element(ForwardIterator first, ForwardIterator last, Compare comp);
template<class ExecutionPolicy, class ForwardIterator, class Compare>
  pair<ForwardIterator, ForwardIterator>
    minmax_element(ExecutionPolicy&& exec,
                   ForwardIterator first, ForwardIterator last, Compare comp);

template<forward_iterator I, sentinel_for<I> S, class Proj = identity,
         indirect_strict_weak_order<projected<I, Proj>> Comp = ranges::less>
  constexpr ranges::minmax_result<I>
    ranges::minmax_element(I first, S last, Comp comp = {}, Proj proj = {});
template<forward_range R, class Proj = identity,
         indirect_strict_weak_order<projected<iterator_t<R>, Proj>> Comp = ranges::less>
  constexpr ranges::minmax_result<safe_iterator_t<R>>
    ranges::minmax_element(R&& r, Comp comp = {}, Proj proj = {});
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`{first, first}] if [=range(first,last)] is empty, otherwise [`{m, M}],
where [`m] is the first iterator in [=range(first,last)] such that no iterator
in the range refers to a smaller element, and where [`M] is the last iterator
[#:note#fn:$1] in [=range(first,last)] such that no iterator in the range refers
to a larger element.
[:zh_CN] 如果 [=range(first,last)] 为空则返回 [`{first,first}]，否则返回
[`{m, M}]，其中 [`m] 是范围 [=range(first,last)] 中的第一个迭代器，使得范围中
不存在指代更小元素的迭代器，而 [`M] 是范围 [=range(first,last)] 中的最后一个
迭代器[#:note#fn:$1]，使得范围中不存在指代更大元素的迭代器。

[note:foot#fn:$1]
[:en] This behavior intentionally differs from [`max_element].
[:zh_CN] 这个行为特意与 [`max_element] 不同。
[note:end]

[para:complexity]
[:en] Let [$N] be [`last - first].
[:zh_CN] 令 [$N] 为 [`last - first]。

[:en] At most [$\max(\bigl\lfloor{\frac{3}{2}} (N-1)\bigr\rfloor, 0)]
comparisons and twice as many applications of the projection, if any.
[:zh_CN] 最多进行 [$\max(\bigl\lfloor{\frac{3}{2}} (N-1)\bigr\rfloor, 0)] 次比较
和（如果有）两倍于此的投射的运用。
[end:description]
