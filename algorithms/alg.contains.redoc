[section#alg.contains
    [:en] Contains
    [:zh_CN] 包含
]

[%@lib contains]
[codeblock:declaration]
template<[[redoc("`:c>")]]input_iterator I, [[redoc("`:c>")]]sentinel_for<I> S, class Proj = identity,
         class T = projected_value_t<I, Proj>>
  requires [[redoc("`:c>")]]indirect_binary_predicate<ranges::equal_to, projected<I, Proj>, const T*>
  constexpr bool ranges::contains(I first, S last, const T& value, Proj proj = {});
template<[[redoc("`:c>")]]input_range R, class Proj = identity, class T = projected_value_t<iterator_t<R>, Proj>>
  requires [[redoc("`:c>")]]indirect_binary_predicate<ranges::equal_to, projected<iterator_t<R>, Proj>, const T*>
  constexpr bool ranges::contains(R&& r, const T& value, Proj proj = {});
[codeblock:end]

[div:description]
[para:returns]
[:en] [`ranges::find(std::move(first), last, value, proj) != last].
[:zh_CN] [`ranges::find(std::move(first), last, value, proj) != last]。
[div:end]

[codeblock:declaration]
template<[[redoc("*:c>")]]execution-policy Ep, [[redoc("`:c>")]]random_access_iterator I, [[redoc("`:c>")]]sized_sentinel_for<I> S,
         class Proj = identity, class T = projected_value_t<I, Proj>>
  requires [[redoc("`:c>")]]indirect_binary_predicate<ranges::equal_to, projected<I, Proj>, const T*>
  bool ranges::contains(Ep&& exec, I first, S last, const T& value, Proj proj = {});
template<[[redoc("*:c>")]]execution-policy Ep, [[redoc("*:c>")]]sized-random-access-range R, class Proj = identity,
         class T = projected_value_t<iterator_t<R>, Proj>>
  requires
    [[redoc("`:c>")]]indirect_binary_predicate<ranges::equal_to, projected<iterator_t<R>, Proj>, const T*>
  bool ranges::contains(Ep&& exec, R&& r, const T& value, Proj proj = {});
[codeblock:end]

[div:description]
[para:returns]
[:en] [`ranges::find(std::forward<Ep>(exec), first, last, value, proj) != last].
[:zh_CN] [`ranges::find(std::forward<Ep>(exec), first, last, value, proj) != last]。
[div:end]

[%@lib contains_subrange]
[codeblock:declaration]
template<[[redoc("`:c>")]]forward_iterator I1, [[redoc("`:c>")]]sentinel_for<I1> S1,
         [[redoc("`:c>")]]forward_iterator I2, [[redoc("`:c>")]]sentinel_for<I2> S2,
         class Pred = ranges::equal_to, class Proj1 = identity, class Proj2 = identity>
  requires [[redoc("`:c>")]]indirectly_comparable<I1, I2, Pred, Proj1, Proj2>
  constexpr bool ranges::contains_subrange(I1 first1, S1 last1, I2 first2, S2 last2,
                                           Pred pred = {}, Proj1 proj1 = {}, Proj2 proj2 = {});
template<[[redoc("`:c>")]]forward_range R1, [[redoc("`:c>")]]forward_range R2,
         class Pred = ranges::equal_to, class Proj1 = identity, class Proj2 = identity>
  requires [[redoc("`:c>")]]indirectly_comparable<iterator_t<R1>, iterator_t<R2>, Pred, Proj1, Proj2>
  constexpr bool ranges::contains_subrange(R1&& r1, R2&& r2, Pred pred = {},
                                           Proj1 proj1 = {}, Proj2 proj2 = {});
[codeblock:end]

[div:description]
[para:returns]
[codeblock]
first2 == last2 || !ranges::search(first1, last1, first2, last2,
                                   pred, proj1, proj2).empty()
[codeblock:end]
[div:end]

[codeblock:declaration]
template<[[redoc("*:c>")]]execution-policy Ep, [[redoc("`:c>")]]random_access_iterator I1, [[redoc("`:c>")]]sized_sentinel_for<I1> S1,
         [[redoc("`:c>")]]random_access_iterator I2, [[redoc("`:c>")]]sized_sentinel_for<I2> S2,
         class Pred = ranges::equal_to, class Proj1 = identity, class Proj2 = identity>
  requires [[redoc("`:c>")]]indirectly_comparable<I1, I2, Pred, Proj1, Proj2>
  bool ranges::contains_subrange(Ep&& exec, I1 first1, S1 last1, I2 first2, S2 last2,
                                 Pred pred = {}, Proj1 proj1 = {}, Proj2 proj2 = {});
template<[[redoc("*:c>")]]execution-policy Ep, [[redoc("*:c>")]]sized-random-access-range R1, [[redoc("*:c>")]]sized-random-access-range R2,
         class Pred = ranges::equal_to, class Proj1 = identity, class Proj2 = identity>
  requires [[redoc("`:c>")]]indirectly_comparable<iterator_t<R1>, iterator_t<R2>, Pred, Proj1, Proj2>
  bool ranges::contains_subrange(Ep&& exec, R1&& r1, R2&& r2, Pred pred = {},
                                 Proj1 proj1 = {}, Proj2 proj2 = {});
[codeblock:end]

[div:description]
[para:returns]
[codeblock]
first2 == last2 || !ranges::search(std::forward<Ep>(exec), first1, last1,
                                   first2, last2, pred, proj1, proj2).empty()
[codeblock:end]
[div:end]
