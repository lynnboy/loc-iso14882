[section#algorithms.parallel.exec
    [:en] Effect of execution policies on algorithm execution
    [:zh_CN] 各执行策略在算法的执行上的效果
]

[para]
[:en] An execution policy template parameter describes
the manner in which the execution of a parallel algorithm may be
parallelized and the manner in which it applies the element access functions.
[:zh_CN] 执行策略模板形参说明并行算法的执行可被并行化的方式，以及它们运用元素访问函数的方式。

[para]
[:en] If an object is modified by an element access function, the algorithm will
perform no other unsynchronized accesses to that object.
[:zh_CN] 一旦对象被元素访问函数所修改，该算法不会再对该对象进行无同步的访问。

[:en] The modifying element access functions are those which are specified as
modifying the object.
[:zh_CN] 进行改动的元素访问函数，是被指定会改动对象的那些函数。

[begin:note]
[:en] For example, [`swap], [`++], [`--], [`@=], and assignments modify the object.
[:zh_CN] 例如，[`swap]，[`++]，[`--]，[`@=]，以及赋值都会改动对象。

[:en] For the assignment and [`@=] operators, only the left argument is modified.
[:zh_CN] 对于赋值和 [`@=] 运算符，只有左边的实参被改动。
[end:note]

[para]
[:en] Unless otherwise stated, implementations may make arbitrary copies of elements
(with type [`T]) from sequences where [`is_trivially_copy_constructible_v<T>]
and [`is_trivially_destructible_v<T>] are [`true].
[:zh_CN] 除非另行说明，否则当 [`is_trivially_copy_constructible_v<T>] 和
[`is_trivially_destructible_v<T>] 为 [`true] 时，实现可以对序列中的（[`T] 类型
的）元素任意进行复制。

[begin:note]
[:en] This implies that user-supplied function objects cannot rely on object
identity of arguments for such input sequences.
[:zh_CN] 这意味着用户为这种输入序列所提供的函数对象不能依赖于其实参的同一性。

[:en] If object identity of the arguments to these function objects is important,
a wrapping iterator that returns a non-copied implementation object such as
[`reference_wrapper<T>] ([#refwrap]) or some equivalent solution, can be used.
[:zh_CN] 如果函数对象的实参的对象同一性很重要，可以使用如 [`reference_wrapper<T>]
（[#refwrap]）这样的可以返回不进行复制的实现对象的包装迭代器，或某种等价的解决方案。
[end:note]

[para]
[:en] The invocations of element access functions in parallel algorithms invoked
with an execution policy object of type [`execution::sequenced_policy] all occur
in the calling thread of execution.
[:zh_CN] 在以 [`execution::sequenced_policy] 类型的执行策略对象调用的并行算法中，
对成员访问函数的调用都发生于调用方执行线程之中。

[begin:note]
[:en] The invocations are not interleaved; see [#intro.execution].
[:zh_CN] 这些调用不会交错执行；参见 [#intro.execution]。
[end:note]

[para]
[:en] The invocations of element access functions in parallel algorithms invoked
with an execution policy object of type [`execution::unsequenced_policy] are
permitted to execute in an unordered fashion in the calling thread of execution,
unsequenced with respect to one another in the calling thread of execution.
[:zh_CN] 在以 [`execution::unsequenced_policy] 类型的执行策略对象调用的并行算法
中，对成员访问函数的调用，允许在调用方执行线程之中以无序的方式执行，并且在
调用方执行线程中互为无顺序的。

[begin:note]
[:en] This means that multiple function object invocations can be interleaved on
a single thread of execution, which overrides the usual guarantee from
[#intro.execution] that function executions do not overlap with one another.
[:zh_CN] 这意味着单个执行线程中的多次函数对象的调用也可以交错进行，这一点取代了
[#intro.execution] 中关于函数执行不能互相交叠的一般性保证。
[end:note]

[:en] The behavior of a program is undefined if it invokes
a vectorization-unsafe standard library function from user code called from
an [`execution::unsequenced_policy] algorithm.
[:zh_CN] 如果在某个 [`execution::unsequenced_policy] 算法所调用的用户代码中调用
了向量化不安全的标准程序库函数，则程序的行为是未定义的。

[begin:note]
[:en] Because [`execution::unsequenced_policy] allows the execution of element
access functions to be interleaved on a single thread of execution, blocking
synchronization, including the use of mutexes, risks deadlock.
[:zh_CN] 由于 [`execution::unsequenced_policy] 允许单个执行线程中对元素访问函数
的执行交错进行，因此有阻塞的同步操作（包括使用互斥体）存在死锁风险。
[end:note]

[para]
[:en] The invocations of element access functions in parallel algorithms invoked
with an execution policy object of type [`execution::parallel_policy] are permitted
to execute either in the invoking thread of execution or in a thread of execution
implicitly created by the library to support parallel algorithm execution.
[:zh_CN] 在以 [`execution::parallel_policy] 类型的执行策略对象调用的并行算法中，
对成员访问函数的调用，既允许在调用方执行线程之中执行，也允许在由程序库所隐含创建
的用以支持并行算法的执行的执行线程中执行。

[:en] If the threads of execution created by [`thread] ([#thread.thread.class])
or [`jthread] ([#thread.jthread.class]) provide concurrent forward progress
guarantees ([#intro.progress]), then a thread of execution implicitly created by
the library will provide parallel forward progress guarantees; otherwise, the
provided forward progress guarantee is [?impldef forward progress guarantees
for implicit threads of parallel algorithms (if not defined for [`thread])].
[:zh_CN] 如果由 [`thread]（[#thread.thread.class]）或 [`jthread]（[#thread.jthread.class]）
所创建的执行线程提供了并发向前进展保证（[#intro.progress]），则由程序库所隐含创建的
执行线程将提供并行向前进展保证；否则其所提供的向前进展保证是
[?impldef （当 [`thread] 未予定义时）并行算法的隐含线程的向前进展保证]。

[:en] Any such invocations executing in the same thread of execution are
indeterminately sequenced with respect to each other.
[:zh_CN] 在同一个执行线程中所执行的任何这种调用，其互相之间是未定顺序的。

[begin:note]
[:en] It is the caller[=']s responsibility to ensure that the invocation does
not introduce data races or deadlocks.
[:zh_CN] 调用方有责任确保其调用不会引入数据竞争或死锁。
[end:note]

[begin:example]
[codeblock]
int a[] = {0,1};
std::vector<int> v;
std::for_each(std::execution::par, std::begin(a), std::end(a), [&](int i) {
  v.push_back(i*2+1);                   // [:en] incorrect: data race [:zh_CN] 不正确：数据竞争
});
[codeblock:end]

[:en] The program above has a data race because of the unsynchronized access to
the container [`v].
[:zh_CN] 上面的程序中，由于对容器 [`v] 的未同步访问而有一个数据竞争。
[end:example]

[begin:example]
[codeblock]
std::atomic<int> x{0};
int a[] = {1,2};
std::for_each(std::execution::par, std::begin(a), std::end(a), [&](int) {
  x.fetch_add(1, std::memory_order::relaxed);
  // [:en] spin wait for another iteration to change the value of [`x] \
  [:zh_CN] 自旋等待另一次重复中改变 [`x] 的值
  while (x.load(std::memory_order::relaxed) == 1) { }           // [:en] incorrect: assumes execution order \
                                                                [:zh_CN] 不正确：假定了执行顺序
});
[codeblock:end]

[:en] The above example depends on the order of execution of the iterations, and
will not terminate if both iterations are executed sequentially on the same
thread of execution.
[:zh_CN] 上面的示例依赖于各次重复之间的执行顺序，且若两次重复都是在同一个执行
线程中顺序执行，它将不会终止。
[end:example]

[begin:example]
[codeblock]
int x = 0;
std::mutex m;
int a[] = {1,2};
std::for_each(std::execution::par, std::begin(a), std::end(a), [&](int) {
  std::lock_guard<mutex> guard(m);
  ++x;
});
[codeblock:end]

[:en] The above example synchronizes access to object [`x] ensuring that it is
incremented correctly.
[:zh_CN] 上面的示例对对象 [`x] 的访问进行了同步，以确保它能够正确进行增量。
[end:example]

[para]
[:en] The invocations of element access functions in parallel algorithms invoked
with an execution policy object of type [`execution::parallel_unsequenced_policy]
are permitted to execute in an unordered fashion in unspecified threads of execution,
and unsequenced with respect to one another within each thread of execution.
[:zh_CN] 在以 [`execution::parallel_unsequenced_policy] 类型的执行策略对象调用的
并行算法中，对成员访问函数的调用，允许在一组未指明的执行线程中以无序方式执行，
并且在每个执行线程之内互相之间也是无顺序的。

[:en] These threads of execution are either the invoking thread of execution or
threads of execution implicitly created by the library; the latter will provide
weakly parallel forward progress guarantees.
[:zh_CN] 这些执行线程既可以为调用方执行线程，也可以为由程序库所隐含创建的执行
线程；后者将提供弱并行向前进展保证。

[begin:note]
[:en] This means that multiple function object invocations can be interleaved on
a single thread of execution, which overrides the usual guarantee from
[#intro.execution] that function executions do not overlap with one another.
[:zh_CN] 这意味着单个执行线程中的多次函数对象的调用也可以交错进行，这一点取代了
[#intro.execution] 中关于函数执行不能互相交叠的一般性保证。
[end:note]

[:en] The behavior of a program is undefined if it invokes
a vectorization-unsafe standard library function from user code called from
an [`execution::parallel_unsequenced_policy] algorithm.
[:zh_CN] 如果在某个 [`execution::parallel_unsequenced_policy] 算法所调用的
用户代码中调用了向量化不安全的标准程序库函数，则程序的行为是未定义的。

[begin:note]
[:en] Because [`execution::parallel_unsequenced_policy] allows the execution of
element access functions to be interleaved on a single thread of execution,
blocking synchronization, including the use of mutexes, risks deadlock.
[:zh_CN] 由于 [`execution::parallel_unsequenced_policy] 允许对成员访问函数的执行
在单个执行线程中交错执行，因此有阻塞的同步操作，包括使用互斥体，具有死锁的风险。
[end:note]

[para]
[begin:note]
[:en] The semantics of invocation with [`execution::unsequenced_policy],
[`execution::parallel_policy], or [`execution::parallel_unsequenced_policy]
allow the implementation to fall back to sequential execution if the system
cannot parallelize an algorithm invocation, e.g., due to lack of resources.
[:zh_CN] 以 [`execution::unsequenced_policy]、[`execution::parallel_policy] 或
[`execution::parallel_unsequenced_policy] 进行调用的语义，允许实现在系统（比如
由于缺乏资源而）无法将算法的执行并行化时回退为顺序执行。
[end:note]

[para]
[:en] If an invocation of a parallel algorithm uses threads of execution
implicitly created by the library, then the invoking thread of execution will either
[:zh_CN] 当对并行算法的调用使用了由程序库所隐含创建的执行线程时，其调用方执行线程，可以

[list]
[item]
[:en@~] temporarily block with forward progress guarantee delegation ([#intro.progress])
on the completion of these library-managed threads of execution, or
[:zh_CN@~] 临时地带有向前进展保证委托地阻塞（[#intro.progress]）于这些由程序库所
管理的执行线程的完成，或者

[item]
[:en@~] eventually execute an element access function;
[:zh_CN@~] 终将执行某个成员访问函数；
[list:end]

[:en@~] the thread of execution will continue to do so until the algorithm is finished.
[:zh_CN@~] 这个执行线程将在该算法完成前持续如此作为。

[begin:note]
[:en] In blocking with forward progress guarantee delegation in this context,
a thread of execution created by the library is considered to have finished
execution as soon as it has finished the execution of the particular element
access function that the invoking thread of execution logically depends on.
[:zh_CN] 这种语境下的带有向前进展保证委托地阻塞之中，某个由程序库所创建的执行
线程，一旦其完成了对由调用方执行线程逻辑上所依赖的特定的元素访问函数的执行，则它
即被认为完成了执行。
[end:note]

[para]
[:en] The semantics of parallel algorithms invoked with an execution policy
object of [?impldef additional execution policies supported by parallel
algorithms] type are [?impldef semantics of parallel algorithms invoked with
implementation-defined execution policies].
[:zh_CN] 以[?impldef 各并行算法所支持的额外的执行策略]类型的执行策略对象所调用的
并行算法的语义是[?impldef 以由实现定义的执行策略调用的并行算法的语义]。
