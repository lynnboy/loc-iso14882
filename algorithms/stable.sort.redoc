[section#stable.sort
    [`stable_sort]
]

[%@library stable_sort]
[codeblock:declaration]
template<class RandomAccessIterator>
  void stable_sort(RandomAccessIterator first, RandomAccessIterator last);
template<class ExecutionPolicy, class RandomAccessIterator>
  void stable_sort(ExecutionPolicy&& exec,
                   RandomAccessIterator first, RandomAccessIterator last);

template<class RandomAccessIterator, class Compare>
  void stable_sort(RandomAccessIterator first, RandomAccessIterator last,
                   Compare comp);
template<class ExecutionPolicy, class RandomAccessIterator, class Compare>
  void stable_sort(ExecutionPolicy&& exec,
                   RandomAccessIterator first, RandomAccessIterator last,
                   Compare comp);

template<RandomAccessIterator I, Sentinel<I> S, class Comp = ranges::less,
         class Proj = identity>
  requires Sortable<I, Comp, Proj>
  I ranges::stable_sort(I first, S last, Comp comp = {}, Proj proj = {});
template<RandomAccessRange R, class Comp = ranges::less, class Proj = identity>
  requires Sortable<iterator_t<R>, Comp, Proj>
  safe_iterator_t<R>
    ranges::stable_sort(R&& r, Comp comp = {}, Proj proj = {});
[codeblock:end]

[enter:description]
[para]
[:en] Let [`comp] be [`less{}] and [`proj] be [`identity{}] for the overloads
with no parameters by those names.
[:zh_CN] 对于没有具有名字 [`comp] 和 [`proj] 的形参的各重载，令 [`comp] 为
[`less{}] 并令 [`proj] 为 [`identity{}]。

[para:requires]
[:en] For the overloads in namespace [`std], [`RandomAccessIterator] shall meet
the [*Cpp17ValueSwappable] requirements ([#swappable.requirements]) and the type
of [`*first] shall meet the [*Cpp17MoveConstructible] ([#cpp17.moveconstructible])
and [*Cpp17MoveAssignable] ([#cpp17.moveassignable]) requirements.
[:zh_CN] 对于命名空间 [`std] 中的各重载，[`RandomAccessIterator] 应当满足
[*Cpp17ValueSwappable] 的规定（[#swappable.requirements]），而 [`*first] 的类型
应当满足 [*Cpp17MoveConstructible]（[#cpp17.moveconstructible]）和
[*Cpp17MoveAssignable]（[#cpp17.moveassignable]）的规定。

[para:effects]
[:en] Sorts the elements in the range [=range(first,last)] with respect to
[`comp] and [`proj].
[:zh_CN] 根据 [`comp] 和 [`proj] 对范围 [=range(first,last)] 中的元素进行排序。

[para:returns]
[:en] [`last], for the overloads in namespace [`ranges].
[:zh_CN] 命名空间 [`ranges] 中的各重载返回 [`last]。

[para:complexity]
[:en] Let [$N] be [`last - first].
[:zh_CN] 令 [$N] 为 [`last - first]。

[:en] If enough extra memory is available, [$N \log(N)] comparisons.
[:zh_CN] 如果有足够的额外内存，则进行 [$N \log(N)] 次比较。

[:en] Otherwise, at most [$N \log^2(N)] comparisons.
[:zh_CN] 否则，最多 [$N \log^2(N)] 次比较。

[:en] In either case, twice as many projections as the number of comparisons.
[:zh_CN] 两种情况下，都进行两倍于比较次数的投射。

[para:remarks]
[:en] Stable ([#algorithm.stable]).
[:zh_CN] 稳定的（[#algorithm.stable]）。
[exit:description]
