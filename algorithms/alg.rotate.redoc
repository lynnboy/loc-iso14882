[section#alg.rotate
    [:en] Rotate
    [:zh_CN] 旋转
]

[%@lib rotate]
[codeblock:declaration]
template<class ForwardIterator>
  constexpr ForwardIterator
    rotate(ForwardIterator first, ForwardIterator middle, ForwardIterator last);
template<class ExecutionPolicy, class ForwardIterator>
  ForwardIterator
    rotate(ExecutionPolicy&& exec,
           ForwardIterator first, ForwardIterator middle, ForwardIterator last);

template<permutable I, sentinel_for<I> S>
  constexpr subrange<I> ranges::rotate(I first, I middle, S last);
[codeblock:end]

[div:description]
[para:expects]
[:en] [=range(first,middle)] and [=range(middle,last)] are valid ranges.
[:zh_CN] [=range(first,middle)] 和 [=range(middle,last)] 是有效范围。

[:en] [`ForwardIterator] meets the [^:oc ValueSwappable] requirements
([#swappable.requirements]), and the type of [`*first] meets the
[^:oc MoveConstructible] ([#:tab#cpp17.moveconstructible]) and
[^:oc MoveAssignable] ([#:tab#cpp17.moveassignable]) requirements.
[:zh_CN] [`ForwardIterator] 满足 [^:oc ValueSwappable] 的规定
（[#swappable.requirements]），并且 [`*first] 的类型满足 [^:oc MoveConstructible]
（[#:tab#cpp17.moveconstructible]）和 [^:oc MoveAssignable]
（[#:tab#cpp17.moveassignable]）的规定。

[para:effects]
[:en] For each non-negative integer [`i < (last - first)], places the element
from the position [`first + i] into position
[`first + (i + (last - middle)) % (last - first)].
[:zh_CN] 对于每个非负整数 [`i < (last - first)]，将位置 [`first + i] 中的元素
置于位置 [`first + (i + (last - middle)) % (last - first)] 中。

[begin:note]
[:en] This is a left rotate.
[:zh_CN] 这是左旋操作。
[end:note]

[para:returns]
[list]
[item]
[:en@~] [`first + (last - middle)], for the overloads in namespace [`std], or
[:zh_CN@~] 对于命名空间 [`std] 中的各重载，返回 [`first + (last - middle)]，或者
[item]
[:en@~] [`{first + (last - middle), last}], for the overloads in namespace
[`ranges].
[:zh_CN@~] 对于命名空间 [`ranges] 中的各重载，返回
[`{first + (last - middle), last}]。
[list:end]

[para:complexity]
[:en] At most [`last - first] swaps.
[:zh_CN] 最多进行 [`last - first] 次交换。
[div:end]

[codeblock:declaration]
template<forward_range R>
  requires permutable<iterator_t<R>>
  constexpr safe_subrange_t<R> ranges::rotate(R&& r, iterator_t<R> middle);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[`return ranges::rotate(ranges::begin(r), middle, ranges::end(r));]
[:zh_CN] 等价于：
[`return ranges::rotate(ranges::begin(r), middle, ranges::end(r));]
[div:end]

[%@lib rotate_copy]
[codeblock:declaration]
template<class ForwardIterator, class OutputIterator>
  constexpr OutputIterator
    rotate_copy(ForwardIterator first, ForwardIterator middle, ForwardIterator last,
                OutputIterator result);
template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2>
  ForwardIterator2
    rotate_copy(ExecutionPolicy&& exec,
                ForwardIterator1 first, ForwardIterator1 middle, ForwardIterator1 last,
                ForwardIterator2 result);

  template<forward_iterator I, sentinel_for<I> S, weakly_incrementable O>
    requires indirectly_copyable<I, O>
    constexpr ranges::rotate_copy_result<I, O>
      ranges::rotate_copy(I first, I middle, S last, O result);
[codeblock:end]

[div:description]
[para]
[:en] Let [$N] be [`last - first].
[:zh_CN] 令 [$N] 为 [`last - first]。

[para:expects]
[:en] [=range(first,middle)] and [=range(middle,last)] are valid ranges.
[:zh_CN] [=range(first,middle)] 和 [=range(middle,last)] 是有效范围。

[:en] The ranges [=range(first,last)] and [=range(result,result + `[$N`])] do
not overlap.
[:zh_CN] 范围 [=range(first,last)] 和 [=range(result,result + `[$N`])] 没有重叠。

[para:effects]
[:en] Copies the range [=range(first,last)] to the range
[=range(result,result + `[$N`])] such that for each non-negative integer [$i < N]
the following assignment takes place:
[`*(result + [$i]) =  *(first + ([$i] + (middle - first)) % [$N])].
[:zh_CN] 将范围 [=range(first,last)] 复制到范围 [=range(result,result + `[$N`])]
中，其中对于每个非负整数 [$i < N]，都进行了以下赋值：
[`*(result + [$i]) =  *(first + ([$i] + (middle - first)) % [$N])]。

[para:returns]
[list]
[item]
[:en@~] [`result + [$N]], for the overloads in namespace [`std], or
[:zh_CN@~] 对于命名空间 [`std] 中的各重载，返回 [`result + [$N]]，或者
[item]
[:en@~] [`{last, result + [$N]}], for the overloads in namespace [`ranges].
[:zh_CN@~] 对于命名空间 [`ranges] 中的各重载，返回 [`{last, result + [$N]}]。
[list:end]

[para:complexity]
[:en] Exactly [$N] assignments.
[:zh_CN] 恰好进行 [$N] 次赋值。
[div:end]

[codeblock:declaration]
template<forward_range R, weakly_incrementable O>
  requires indirectly_copyable<iterator_t<R>, O>
  constexpr ranges::rotate_copy_result<safe_iterator_t<R>, O>
    ranges::rotate_copy(R&& r, iterator_t<R> middle, O result);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return ranges::rotate_copy(ranges::begin(r), middle, ranges::end(r), result);
[codeblock:end]
[div:end]
