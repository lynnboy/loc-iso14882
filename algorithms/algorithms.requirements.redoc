[section#algorithms.requirements
    [:en] Algorithms requirements
    [:zh_CN] 算法的规定
]

[para]
[:en] All of the algorithms are separated from the particular implementations of
data structures and are parameterized by iterator types.
[:zh_CN] 所有算法均与数据结构的特定实现分离，并以迭代器类型进行参数化。

[:en] Because of this, they can work with program-defined data structures, as
long as these data structures have iterator types satisfying the assumptions on
the algorithms.
[:zh_CN] 因此，它们可以与由程序定义的数据结构一起工作，只要这些数据结构具有符合
算法假设的迭代器类型即可。

[para]
[:en] The entities defined in the [`std::ranges] namespace in this Clause are
not found by argument-dependent name lookup ([#basic.lookup.argdep]).
[:zh_CN] 本章中定义于 [`std::ranges] 命名空间中的各个实体，并不会被依赖于实参的
名字查找（[#basic.lookup.argdep]）所找到。

[:en] When found by unqualified ([#basic.lookup.unqual]) name lookup for the
[~postfix-expression] in a function call ([#expr.call]), they inhibit
argument-dependent name lookup.
[:zh_CN] 当针对函数调用（[#expr.call]）中的[~后缀表达式]的无限定名查找
（[#basic.lookup.unqual]）找到了它们时，它们将禁止进行依赖于实参的名字查找。

[begin:example]
[codeblock]
void foo() {
  using namespace std::ranges;
  std::vector<int> vec{1,2,3};
  find(begin(vec), end(vec), 2);        // #1
}
[codeblock:end]

[:en] The function call expression at [`#1] invokes [`std::ranges::find],
not [`std::find], despite that (a) the iterator type returned from [`begin(vec)]
and [`end(vec)] may be associated with namespace [`std] and (b) [`std::find] is
more specialized ([#temp.func.order]) than [`std::ranges::find] since the former
requires its first two parameters to have the same type.
[:zh_CN] [`#1] 处的函数调用表达式调用的是 [`std::ranges::find] 而不是
[`std::find]，尽管 (a) 从 [`begin(vec)] 和 [`end(vec)] 所返回的迭代器类型可能是
与命名空间 [`std] 相关联的，并且 (b) [`std::find] 比 [`std::ranges::find] 更加
特殊（[#temp.func.order]），这是由于前者要求其前两个形参具有相同的类型。
[end:example]

[para]
[:en] For purposes of determining the existence of data races, algorithms shall
not modify objects referenced through an iterator argument unless the
specification requires such modification.
[:zh_CN] 当确定是否存在数据竞争时，算法不能通过迭代器实参改动其所引用的对象，
除非其规范中要求进行这种改动。

[para]
[:en] Throughout this Clause, where the template parameters are not constrained,
the names of template parameters are used to express type requirements.
[:zh_CN] 本章通篇中，对于未被约束的模板形参，均利用模板形参的名字来表达类型规定。

[list]
[item]
[:en] If an algorithm[=']s [=Effects] element specifies that a value pointed to
by any iterator passed as an argument is modified, then the type of that
argument shall meet the requirements of a mutable iterator
([#iterators.requirements]).
[:zh_CN] 如果算法的 [=Effects] 要素规定改变任何作为实参传递的迭代器所指向的值，
则该实参的类型应当满足可改动迭代器的规定（[#iterators.requirements]）。

[item]
[:en] If an algorithm[=']s template parameter is named [`InputIterator],
[`InputIterator1], or [`InputIterator2], the template argument shall meet the
[^:oc InputIterator] requirements ([#input.iterators]).
[:zh_CN] 如果算法的模板形参名为 [`InputIterator]、[`InputIterator1] 或
[`InputIterator2]，则其模板实参应当满足 [^:oc InputIterator] 的规定
（[#input.iterators]）。

[item]
[:en] If an algorithm[=']s template parameter is named [`OutputIterator],
[`OutputIterator1], or [`OutputIterator2], the template argument shall meet
the [^:oc OutputIterator] requirements ([#output.iterators]).
[:zh_CN] 如果算法的模板形参名为 [`OutputIterator]、[`OutputIterator1] 或
[`OutputIterator2]，则其模板实参应当满足 [^:oc OutputIterator] 的规定
（[#output.iterators]）。

[item]
[:en] If an algorithm[=']s template parameter is named [`ForwardIterator],
[`ForwardIterator1], [`ForwardIterator2], or [`NoThrowForwardIterator], the
template argument shall meet the [^:oc ForwardIterator] requirements
([#forward.iterators]) if it is required to be a mutable iterator, or model
[`:c forward_iterator] ([#iterator.concept.forward]) otherwise.
[:zh_CN] 如果算法的模板形参名为 [`ForwardIterator]、[`ForwardIterator1]、
[`ForwardIterator2] 或 [`NoThrowForwardIterator]，则当其模板实参必须为可改动
迭代器时应当满足 [^:oc ForwardIterator] 的规定（[#forward.iterators]），否则应当
构成 [`:c forward_iterator]（[#iterator.concept.forward]）。

[item]
[:en] If an algorithm[=']s template parameter is named [`NoThrowForwardIterator],
the template argument is also required to have the property that no exceptions
are thrown from increment, assignment, or comparison of, or indirection through,
valid iterators.
[:zh_CN] 如果算法的模板形参名为 [`NoThrowForwardIterator]，则其模板实参还应当
具有下列性质：对有效迭代器的增量、赋值或比较，或者通过它间接访问，不能抛出异常。

[item]
[:en] If an algorithm[=']s template parameter is named [`BidirectionalIterator],
[`BidirectionalIterator1], or [`BidirectionalIterator2], the template argument
shall meet the [^:oc BidirectionalIterator] requirements
([#bidirectional.iterators]) if it is required to be a mutable iterator, or
model [`:c bidirectional_iterator] ([#iterator.concept.bidir]) otherwise.
[:zh_CN] 如果算法的模板形参名为 [`BidirectionalIterator]、
[`BidirectionalIterator1] 或 [`BidirectionalIterator2]，则当其模板实参必须为
可改动迭代器时应当满足 [^:oc BidirectionalIterator] 的规定
（[#bidirectional.iterators]），否则应当构成 [`:c bidirectional_iterator]
（[#iterator.concept.bidir]）。

[item]
[:en] If an algorithm[=']s template parameter is named [`RandomAccessIterator],
[`RandomAccessIterator1], or [`RandomAccessIterator2], the template argument
shall meet the [^:oc RandomAccessIterator] requirements
([#random.access.iterators]) if it is required to be a mutable iterator, or
model [`:c random_access_iterator] ([#iterator.concept.random.access]) otherwise.
[:zh_CN] 如果算法的模板形参名为 [`RandomAccessIterator]、
[`RandomAccessIterator1] 或 [`RandomAccessIterator2]，则当其模板实参必须为可改动
迭代器时应当满足 [^:oc RandomAccessIterator] 的规定（[#random.access.iterators]），
否则应当构成 [`:c random_access_iterator]（[#iterator.concept.random.access]）。
[list:end]

[begin:note]
[:en] These requirements do not affect iterator arguments that are constrained,
for which iterator category and mutability requirements are expressed explicitly.
[:zh_CN] 这些规定并不会影响受约束的迭代器实参，它们都明确表达了迭代器类别和对
可改动性的要求。
[end:note]

[para]
[:en] Both in-place and copying versions are provided for certain algorithms.
[#:fn]
[:zh_CN] 一些算法同时提供了就地版本和复制版本[#:fn]。

[note:foot]
[:en] The decision whether to include a copying version was usually based on
complexity considerations.
[:zh_CN] 是否包括复制版本的决策通常依据其复杂度考虑。

[:en] When the cost of doing the operation dominates the cost of copy, the
copying version is not included.
[:zh_CN] 如果实施运算的代价主要由复制成本所支配，则不包括其复制版本。

[:en] For example, [`sort_copy] is not included because the cost of sorting is
much more significant, and users can invoke [`copy] followed by [`sort].
[:zh_CN] 例如，由于进行排序的成本太高，因此并未包括 [`sort_copy]，而用户可以调用
[`copy] 之后跟着调用 [`sort]。
[note:end]

[:en] When such a version is provided for [^algorithm] it is called
[`[^algorithm]_copy].
[:zh_CN] 当为 [^algorithm] 提供这种版本时它将叫做 [`[^algorithm]_copy]。

[:en] Algorithms that take predicates end with the suffix [`_if] (which follows
the suffix [`_copy]).
[:zh_CN] 接受谓词的算法以 [`_if] 后缀结尾（跟在后缀 [`_copy] 之后）。

[para]
[:en] When not otherwise constrained, the [`Predicate] parameter is used
whenever an algorithm expects a function object ([#function.objects]) that, when
applied to the result of dereferencing the corresponding iterator, returns
a value testable as [`true].
[:zh_CN] 除非被另行约束，否则 [`Predicate] 形参均被用于当算法预期一个函数对象
（[#function.objects]）之时，当它被施加于对应迭代器的解引用的结果时，将返回一个
可以检验是否为 [`true] 的值。

[:en] If an algorithm takes [`Predicate pred] as its argument and [`first] as
its iterator argument with value type [`T], the expression [`pred(*first)] shall
be well-formed and the type [`decltype(pred(*first))] shall model
[*:c boolean-testable] ([#concept.booleantestable]).
[:zh_CN] 如果算法接受 [`Predicate pred] 作为实参，并接受 [`first] 作为其具有
值类型 [`T] 的迭代器实参，则表达式 [`pred(*first)] 应当良构，且类型
[`decltype(pred(*first))] 应当构成 [*:c boolean-testable]
（[#concept.booleantestable]）。

[:en] The function object [`pred] shall not apply any non-constant function
through its argument.
[:zh_CN] 函数对象 [`pred] 不能通过其实参调用任何非 const 函数。

[:en] Given a glvalue [`u] of type (possibly const) [`T] that designates
the same object as [`*first], [`pred(u)] shall be a valid expression that is
equal to [`pred(*first)].
[:zh_CN] 给定一个类型为（可能为 const）[`T] 的泛左值 [`u] 并与 [`*first]
代表相同的对象，则 [`pred(u)] 应当是有效的表达式并等于 [`pred(*first)]。

[para]
[:en] When not otherwise constrained, the [`BinaryPredicate] parameter is used
whenever an algorithm expects a function object that, when applied to the result
of dereferencing two corresponding iterators or to dereferencing an iterator and
type [`T] when [`T] is part of the signature, returns a value testable as [`true].
[:zh_CN] 除非被另行约束，否则 [`BinaryPredicate] 形参被用于当算法预期一个函数
对象之时，当它被施加于两个对应迭代器的解引用的结果时，或当 [`T] 为其签名的一部分
时它被施加于一个迭代器的解引用值和一个 [`T] 类型的值时，将返回一个可以检验是否为
[`true] 的值。

[:en] If an algorithm takes [`BinaryPredicate binary_pred] as its argument and
[`first1] and [`first2] as its iterator arguments with respective value types
[`T1] and [`T2], the expression [`binary_pred(*first1, *first2)] shall be
well-formed and the type [`decltype(binary_pred(*first1, *first2))] shall model
[*:c boolean-testable].
[:zh_CN] 如果算法接受 [`BinaryPredicate binary_pred] 作为实参，并接受 [`first1]
和 [`first2] 作为其迭代器实参并具有相应的值类型 [`T1] 和 [`T2]，则表达式
[`binary_pred(*first1, *first2)] 应当良构，且类型
[`decltype(binary_pred(*first1, *first2))] 应当构成 [*:c boolean-testable]。

[:en] Unless otherwise specified, [`BinaryPredicate] always takes the first
iterator[=']s [`value_type] as its first argument, that is, in those cases when
[`T value] is part of the signature, the expression [`binary_pred(*first1, value)]
shall be well-formed and the type [`decltype(binary_pred(*first1, value))] shall
model [*:c boolean-testable].
[:zh_CN] 除非另有规定，否则 [`BinaryPredicate] 总是接受其第一个迭代器的
[`value_type] 作为其第一个实参，就是说，当 [`T value] 属于签名的一部分时，表达式
[`binary_pred(*first1, value)] 应当良构，且类型
[`decltype(binary_pred(*first1, value))] 应当构成 [*:c boolean-testable]。

[:en] [`binary_pred] shall not apply any non-constant function through any of
its arguments.
[:zh_CN] [`binary_pred] 不能通过其任何实参调用任何非 const 函数。

[:en] Given a glvalue [`u] of type (possibly const) [`T1] that designates the
same object as [`*first1], and a glvalue [`v] of type (possibly const) [`T2]
that designates the same object as [`*first2], [`binary_pred(u, *first2)],
[`binary_pred(*first1, v)], and [`binary_pred(u, v)] shall each be a valid
expression that is equal to [`binary_pred(*first1, *first2)], and
[`binary_pred(u, value)] shall be a valid expression that is equal to
[`binary_pred(*first1, value)].
[:zh_CN] 给定一个类型为（可能为 const）[`T1] 的泛左值 [`u] 并与 [`*first1] 代表
相同的对象，以及一个类型为（可能为 const）[`T2] 的泛左值 [`v] 并与 [`*first2]
代表相同的对象，则 [`binary_pred(u, *first2)]，[`binary_pred(*first1, v)]，和
[`binary_pred(u, v)] 都应当是有效的表达式并等于 [`binary_pred(*first1, *first2)]，
而 [`binary_pred(u, value)] 应当是有效的表达式并等于 [`binary_pred(*first1, value)]。

[para]
[:en] The parameters [`UnaryOperation], [`BinaryOperation], [`BinaryOperation1],
and [`BinaryOperation2] are used whenever an algorithm expects a function object
([#function.objects]).
[:zh_CN] 每当某个算法预期函数对象（[#function.objects]）时，就使用形参
[`UnaryOperation]，[`BinaryOperation]，[`BinaryOperation1] 和
[`BinaryOperation2]。

[para]
[begin:note]
[:en] Unless otherwise specified, algorithms that take function objects as
arguments can copy those function objects freely.
[:zh_CN] 除非另有规定，否则接受函数对象为其实参的算法都可以对这些函数对象进行
随意复制。

[:en] If object identity is important, a wrapper class that points to a
non-copied implementation object such as [`reference_wrapper<T>] ([#refwrap]), or
some equivalent solution, can be used.
[:zh_CN] 如果对象同一性很重要，可以使用一种指向不被复制的实现对象的包装类，比如
[`reference_wrapper<T>]（[#refwrap]），或者某个等价的方案。
[end:note]

[para]
[:en] When the description of an algorithm gives an expression such as
[`*first == value] for a condition, the expression shall evaluate to either
[`true] or [`false] in boolean contexts.
[:zh_CN] 如果算法的说明中将表达式（比如 [`*first == value]）提出为某种条件，则
该表达式应当在布尔语境中求值为 [`true] 或为 [`false]。

[para]
[:en] In the description of the algorithms, operator [`+] is used for some of
the iterator categories for which it does not have to be defined.
[:zh_CN] 在算法的说明中，对于某些迭代器类别使用了运算符 [`+]，但它并不必是
有定义的。

[:en] In these cases the semantics of [`a + n] are the same as those of
[:zh_CN] 这些情况下，[`a + n] 的语义与以下代码相同

[codeblock]
auto tmp = a;
for (; n < 0; ++n) --tmp;
for (; n > 0; --n) ++tmp;
return tmp;
[codeblock:end]

[:en] Similarly, operator [`-] is used for some combinations of iterators and
sentinel types for which it does not have to be defined.
[:zh_CN] 类似地，对迭代器和哨位类型的某些组合使用了运算符 [`-]，它也不必是
有定义的。

[:en] If [=range(a,b)] denotes a range, the semantics of [`b - a] in these cases
are the same as those of
[:zh_CN] 若 [=range(a,b)] 代表一个范围，则 [`b - a] 的语义与以下代码相同

[codeblock]
iter_difference_t<decltype(a)> n = 0;
for (auto tmp = a; tmp != b; ++tmp) ++n;
return n;
[codeblock:end]

[:en@~] and if [=range(b,a)] denotes a range, the same as those of
[:zh_CN@~] 并且若 [=range(b,a)] 代表一个范围，则其语义与以下代码相同

[codeblock]
iter_difference_t<decltype(b)> n = 0;
for (auto tmp = b; tmp != a; ++tmp) --n;
return n;
[codeblock:end]

[para]
[:en] In the description of the algorithms,
given an iterator [`a] whose difference type is [`D], and
an expression [`n] of integer-like type other than [=cv] [`D],
the semantics of [`a + n] and [`a - n] are, respectively,
those of [`a + D(n)] and [`a - D(n)].
[:zh_CN] 在各算法的说明中，给定一种差类型为 [`D] 的迭代器 [`a]，一个并非
[=cv] [`D] 的整数式类型的表达式 [`n]，[`a + n] 和 [`a - n] 的语义分别为
[`a + D(n)] 和 [`a - D(n)] 的语义。

[para]
[:en] In the description of algorithm return values, a sentinel value [`s]
denoting the end of a range [=range(i,s)] is sometimes returned where an
iterator is expected.
[:zh_CN] 在有返回值的算法的说明中，若预期获得迭代器，有时候返回的是代表范围
[=range(i,s)] 的末尾的哨位值 [`s]。

[:en] In these cases, the semantics are as if the sentinel is converted into an
iterator using [`ranges::next(i, s)].
[:zh_CN] 这些情况下，其语义如同通过使用 [`ranges::next(i, s)] 将该哨位值转换为
一个迭代器一样。

[para]
[:en] Overloads of algorithms that take [`:c range] arguments ([#range.range])
behave as if they are implemented by calling [`ranges::begin] and [`ranges::end]
on the [`:c range](s) and dispatching to the overload in namespace [`ranges]
that takes separate iterator and sentinel arguments.
[:zh_CN] 接受 [`:c range] 实参（[#range.range]）的算法重载，其行为如同被实现为：
在各个 [`:c range] 上调用 [`ranges::begin] 和 [`ranges::end]，并将调用分派给
[`ranges] 命名空间中的接受独立的迭代器和哨位实参的重载。

[para]
[:en] The well-formedness and behavior of a call to an algorithm with an
explicitly-specified template argument list is unspecified, except where
explicitly stated otherwise.
[:zh_CN] 除非明确指定，显式指定模板实参列表的算法调用的良构性及其行为
是未指明的。

[begin:note]
[:en] Consequently, an implementation can declare an algorithm with different
template parameters than those presented.
[:zh_CN] 结果是，实现可以将一个算法声明为具有与所给出的不同的模板形参。
[end:note]
