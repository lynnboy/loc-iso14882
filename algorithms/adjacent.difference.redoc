[section#adjacent.difference
    [:en] Adjacent difference
    [:zh_CN] 临差
]

[%@library adjacent_difference]
[codeblock:declaration]
template<class InputIterator, class OutputIterator>
  OutputIterator
    adjacent_difference(InputIterator first, InputIterator last, OutputIterator result);
template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2>
  ForwardIterator2
    adjacent_difference(ExecutionPolicy&& exec,
                        ForwardIterator1 first, ForwardIterator1 last, ForwardIterator2 result);

template<class InputIterator, class OutputIterator, class BinaryOperation>
  OutputIterator
    adjacent_difference(InputIterator first, InputIterator last,
                        OutputIterator result, BinaryOperation binary_op);
template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2,
         class BinaryOperation>
  ForwardIterator2
    adjacent_difference(ExecutionPolicy&& exec,
                        ForwardIterator1 first, ForwardIterator1 last,
                        ForwardIterator2 result, BinaryOperation binary_op);
[codeblock:end]

[begin:description]
[para]
[:en] Let [`T] be the value type of [`decltype(first)].
[:zh_CN] 令 [`T] 为 [`decltype(first)] 的值类型。

[:en] For the overloads that do not take an argument [`binary_op], let
[`binary_op] be an lvalue that denotes an object of type [`minus<>].
[:zh_CN] 对于不解释 [`binary_op] 实参的重载，令 [`binary_op] 为代表 [`minus<>]
类型的对象的左值。

[para:requires]
[list]
[item]
[:en] For the overloads with no [`ExecutionPolicy], [`T] shall be
[*Cpp17MoveAssignable] ([#:tab#cpp17.moveassignable]) and shall be constructible
from the type of [`*first].
[:zh_CN] 对于不带有 [`ExecutionPolicy] 的重载，[`T] 应当为
[*Cpp17MoveAssignable]（[#:tab#cpp17.moveassignable]），并且 [`*first] 的类型
应当可以转换为该值类型。

[:en] [`acc] (defined below) shall be writable to the [`result] output iterator.
[:zh_CN] [`acc]（定义如下）应当可以向输出迭代器 [`result] 写出。

[:en] The result of the expression [`binary_op(val, std::move(acc))] shall be
writable to the [`result] output iterator.
[:zh_CN] 表达式 [`binary_op(val, std::move(acc))] 的结果应当可以向输出迭代器
[`result] 写出。

[item]
[:en] For the overloads with an [`ExecutionPolicy], the result of the expression
[`binary_op(*first, *first)] and [`*first] shall be writable to [`result].
[:zh_CN] 对于带有 [`ExecutionPolicy] 的重载，表达式 [`binary_op(*first, *first)]
和 [`*first] 的结果应当可以向 [`result] 写出。

[item]
[:en] For all overloads, in the ranges [=crange(first,last)] and
[=crange(result,result + (last - first))], [`binary_op] shall neither modify
elements nor invalidate iterators or subranges.[#:note#fn:$1]
[:zh_CN] 对于所有重载，在范围 [=crange(first,last)] 和
[=crange(result,result + (last - first))] 之中，[`binary_op] 既不能改动任何元素，
也不能使任何迭代器或子范围失效。[#:note#fn:$1]

[note:foot#fn:$1]
[:en] The use of fully closed ranges is intentional.
[:zh_CN] 特意使用全闭合范围。
[note:end]
[list:end]

[para:effects]
[:en] For the overloads with no [`ExecutionPolicy] and a non-empty range, the
function creates an accumulator [`acc] of type [`T], initializes it with
[`*first], and assigns the result to [`*result].
[:zh_CN] 对于不带有 [`ExecutionPolicy] 而带有一个非空范围的重载，函数创建一个
[`T] 类型的累加数 [`acc]，以 [`*first] 对其初始化，并将其结果赋值给 [`*result]。

[:en] For every iterator [`i] in [=range(first + 1,last)] in order, creates an
object [`val] whose type is [`T], initializes it with [`*i], computes
[`binary_op(val, std::move(acc))], assigns the result to
[`*(result + (i - first))], and move assigns from [`val] to [`acc].
[:zh_CN] 对于 [=range(first + 1,last)] 中的每个迭代器 [`i]，依序创建 [`T] 类型的
对象 [`val]，以 [`*i] 对其初始化，计算 [`binary_op(val, std::move(acc))]，将其
结果赋值给 [`*(result + (i - first))]，并将 [`val] 移动赋值给 [`acc]。

[para]
[:en] For the overloads with an [`ExecutionPolicy] and a non-empty range,
performs [`*result = *first].
[:zh_CN] 对于带有 [`ExecutionPolicy] 而带有一个非空范围的重载，执行
[`*result = *first]。

[:en] Then, for every [`d] in [``[1, last - first - 1`]], performs
[`*(result + d) = binary_op(*(first + d), *(first + (d - 1)))].
[:zh_CN] 对于 [``[1, last - first - 1`]] 中的每个 [`d]，执行
[`*(result + d) = binary_op(*(first + d), *(first + (d - 1)))]。

[para:returns]
[:en] [`result + (last - first)].
[:zh_CN] [`result + (last - first)]。

[para:complexity]
[:en] Exactly [`(last - first) - 1] applications of the binary operation.
[:zh_CN]恰好 [`(last - first) - 1] 次运用二元运算。

[para:remarks]
[:en] For the overloads with no [`ExecutionPolicy], [`result] may be equal to
[`first].
[:en] 对于不带有 [`ExecutionPolicy] 的重载，[`result] 有可能等于 [`first]。

[:en] For the overloads with an [`ExecutionPolicy], the ranges
[=range(first,last)] and [=range(result,result + (last - first))] shall not
overlap.
[:en] 对于带有 [`ExecutionPolicy] 的重载，范围 [=range(first,last)] 和
[=range(result,result + (last - first))] 不能重叠。
[end:description]
