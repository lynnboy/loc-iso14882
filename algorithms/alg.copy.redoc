[section#alg.copy
    [:en] Copy
    [:zh_CN] 复制
]

[%@lib copy]
[codeblock:declaration]
template<class InputIterator, class OutputIterator>
  constexpr OutputIterator copy(InputIterator first, InputIterator last,
                                OutputIterator result);

template<[[redoc("`:c>")]]input_iterator I, [[redoc("`:c>")]]sentinel_for<I> S, [[redoc("`:c>")]]weakly_incrementable O>
  requires [[redoc("`:c>")]]indirectly_copyable<I, O>
  constexpr ranges::copy_result<I, O> ranges::copy(I first, S last, O result);
template<[[redoc("`:c>")]]input_range R, [[redoc("`:c>")]]weakly_incrementable O>
  requires [[redoc("`:c>")]]indirectly_copyable<iterator_t<R>, O>
  constexpr ranges::copy_result<borrowed_iterator_t<R>, O> ranges::copy(R&& r, O result);
[codeblock:end]

[div:description]
[para]
[:en] Let [$N] be [`last - first].
[:zh_CN] 令 [$N] 为 [`last - first]。

[para:expects]
[:en] [`result] is not in the range [=range(first,last)].
[:zh_CN] [`result] 不处于范围 [=range(first,last)] 之中。

[para:effects]
[:en] Copies elements in the range [=range(first,last)] into the range
[=range(result,result + `[$N`])] starting from [`first] and proceeding to [`last].
[:zh_CN] 将范围 [=range(first,last)] 中的元素复制到范围
[=range(result,result + `[$N`])] 中，开始于 [`first] 并进行到 [`last]。

[:en] For each non-negative integer [$n < N], performs
[`*(result + [$n]) = *(first + [$n])].
[:zh_CN] 对于每个非负整数 [$n < N]，实施 [`*(result + [$n]) = *(first + [$n])]。

[para:returns]
[list]
[item]
[:en@~] [`result + [$N]] for the overload in namespace [`std].
[:zh_CN@~] 对于命名空间 [`std] 中的重载，返回 [`result + [$N]]。
[item]
[:en@~] [`{last, result + [$N]}] for the overloads in namespace [`ranges].
[:zh_CN@~] 对于命名空间 [`ranges] 中的重载，返回 [`{last, result + [$N]}]。
[list:end]

[para:complexity]
[:en] Exactly [$N] assignments.
[:zh_CN] 恰好进行 [$N] 次赋值。
[div:end]

[%@lib copy]
[codeblock:declaration]
template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2>
  ForwardIterator2 copy(ExecutionPolicy&& policy,
                        ForwardIterator1 first, ForwardIterator1 last,
                        ForwardIterator2 result);
[codeblock:end]

[div:description]
[para:expects]
[:en] The ranges [=range(first,last)] and [=range(result,result + (last - first)]
do not overlap.
[:zh_CN] 范围 [=range(first,last)] 和 [=range(result,result + (last - first)]
没有重叠。

[para:effects]
[:en] Copies elements in the range [=range(first,last)] into the range
[=range(result,result + (last - first))].
[:zh_CN] 将范围 [=range(first,last)] 中的元素复制到范围 [=range(result,result +
(last - first))] 中。

[:en] For each non-negative integer [`n < (last - first)], performs
[`*(result + n) = *(first + n)].
[:zh_CN] 对于每个非负整数 [`n < (last - first)]，实施
[`*(result + n) = *(first + n)]。

[para:returns]
[:en] [`result + (last - first)].
[:zh_CN] [`result + (last - first)]。

[para:complexity]
[:en] Exactly [`last - first] assignments.
[:zh_CN] 恰好进行 [`last - first] 次赋值。
[div:end]

[%@lib copy_n]
[codeblock:declaration]
template<class InputIterator, class Size, class OutputIterator>
  constexpr OutputIterator copy_n(InputIterator first, Size n,
                                  OutputIterator result);
template<class ExecutionPolicy, class ForwardIterator1, class Size, class ForwardIterator2>
  ForwardIterator2 copy_n(ExecutionPolicy&& exec,
                          ForwardIterator1 first, Size n,
                          ForwardIterator2 result);

template<[[redoc("`:c>")]]input_iterator I, [[redoc("`:c>")]]weakly_incrementable O>
  requires [[redoc("`:c>")]]indirectly_copyable<I, O>
  constexpr ranges::copy_n_result<I, O>
    ranges::copy_n(I first, iter_difference_t<I> n, O result);
[codeblock:end]

[div:description]
[para]
[:en] Let [$N] be [$\max(0, [`n])].
[:zh_CN] 令 [$N] 为 [$\max(0, [`n])]。

[para:mandates]
[:en] The type [`Size] is convertible to an integral type ([#conv.integral],
[#class.conv]).
[:zh_CN] 类型 [`Size] 可以转换为整型类型（[#conv.integral]，[#class.conv]）。

[para:effects]
[:en] For each non-negative integer [$i < N], performs
[`*(result + [$i]) = *(first + [$i])].
[:zh_CN] 对于每个非负整数 [$i < N]，实施 [`*(result + [$i]) = *(first + [$i])]。

[para:returns]
[list]
[item]
[:en@~] [`result + [$N]] for the overload in namespace [`std].
[:zh_CN@~] 对于命名空间 [`std] 中的重载，返回 [`result + [$N]]。
[item]
[:en@~] [`{first + [$N], result + [$N]}] for the overloads in namespace [`ranges].
[:zh_CN@~] 对于命名空间 [`ranges] 中的重载，返回 [`{first + [$N], result + [$N]}]。
[list:end]

[para:complexity]
[:en] Exactly [$N] assignments.
[:zh_CN] 恰好进行 [$N] 次赋值。
[div:end]

[%@lib copy_if]
[codeblock:declaration]
template<class InputIterator, class OutputIterator, class Predicate>
  constexpr OutputIterator copy_if(InputIterator first, InputIterator last,
                                   OutputIterator result, Predicate pred);
template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2,
         class Predicate>
  ForwardIterator2 copy_if(ExecutionPolicy&& exec,
                           ForwardIterator1 first, ForwardIterator1 last,
                           ForwardIterator2 result, Predicate pred);

template<[[redoc("`:c>")]]input_iterator I, [[redoc("`:c>")]]sentinel_for<I> S, [[redoc("`:c>")]]weakly_incrementable O, class Proj = identity,
         [[redoc("`:c>")]]indirect_unary_predicate<projected<I, Proj>> Pred>
  requires [[redoc("`:c>")]]indirectly_copyable<I, O>
  constexpr ranges::copy_if_result<I, O>
    ranges::copy_if(I first, S last, O result, Pred pred, Proj proj = {});
template<[[redoc("`:c>")]]input_range R, [[redoc("`:c>")]]weakly_incrementable O, class Proj = identity,
         [[redoc("`:c>")]]indirect_unary_predicate<projected<iterator_t<R>, Proj>> Pred>
  requires [[redoc("`:c>")]]indirectly_copyable<iterator_t<R>, O>
  constexpr ranges::copy_if_result<borrowed_iterator_t<R>, O>
    ranges::copy_if(R&& r, O result, Pred pred, Proj proj = {});
[codeblock:end]

[div:description]
[para]
[:en] Let [$E] be:
[:zh_CN] 令 [$E]：

[list]
[item]
[:en@~] [`bool(pred(*i))] for the overloads in namespace [`std].
[:zh_CN@~] 对于命名空间 [`std] 中的重载，为 [`bool(pred(*i))]。
[item]
[:en@~] [`bool(invoke(pred, invoke(proj, *i)))] for the overloads in namespace
[`ranges],
[:zh_CN@~] 对于命名空间 [`ranges] 中的重载，为
[`bool(invoke(pred, invoke(proj, *i)))]，
[list:end]

[:en@~] and [$N] be the number of iterators [`i] in the range [=range(first,last)]
for which the condition [$E] holds.
[:zh_CN@~] 并令 [$N] 为范围 [=range(first,last)] 中使得条件 [$E] 成立的迭代器
[`i] 的数量。

[para:expects]
[:en] The ranges [=range(first,last)] and [=range(result,result + (last - first))]
do not overlap.
[:zh_CN] 范围 [=range(first,last)] 和 [=range(result,result + (last - first))]
没有重叠。

[begin:note]
[:en] For the overload with an [`ExecutionPolicy], there might be a performance
cost if [`iterator_traits<ForwardIterator1>::value_type] is not
[^:oc MoveConstructible] ([#:tab#cpp17.moveconstructible]).
[:zh_CN] 对于带有 [`ExecutionPolicy] 的重载，当
[`iterator_traits<ForwardIterator1>::value_type] 不为 [^:oc MoveConstructible]
（[#:tab#cpp17.moveconstructible]）时可能存在一些性能损耗。
[end:note]

[para:effects]
[:en] Copies all of the elements referred to by the iterator [`i] in the range
[=range(first,last)] for which [$E] is [`true].
[:zh_CN] 对范围 [=range(first,last)] 中由迭代器 [`i] 所指代的所有使 [$E] 为
[`true] 的元素进行复制。

[para:returns]
[list]
[item]
[:en@~] [`result + [$N]] for the overload in namespace [`std].
[:zh_CN@~] 对于命名空间 [`std] 中的重载，返回 [`result + [$N]]。
[item]
[:en@~] [`{last, result + [$N]}] for the overloads in namespace [`ranges].
[:zh_CN@~] 对于命名空间 [`ranges] 中的重载，返回 [`{last, result + [$N]}]。
[list:end]

[para:complexity]
[:en] Exactly [`last - first] applications of the corresponding predicate and
any projection.
[:zh_CN] 恰好进行 [`last - first] 次对应谓词和任何投射的运用。

[para:remarks]
[:en] Stable ([#algorithm.stable]).
[:zh_CN] 稳定的（[#algorithm.stable]）。
[div:end]

[%@lib copy_backward]
[codeblock:declaration]
template<class BidirectionalIterator1, class BidirectionalIterator2>
  constexpr BidirectionalIterator2
    copy_backward(BidirectionalIterator1 first,
                  BidirectionalIterator1 last,
                  BidirectionalIterator2 result);

template<[[redoc("`:c>")]]bidirectional_iterator I1, [[redoc("`:c>")]]sentinel_for<I1> S1, [[redoc("`:c>")]]bidirectional_iterator I2>
  requires [[redoc("`:c>")]]indirectly_copyable<I1, I2>
  constexpr ranges::copy_backward_result<I1, I2>
    ranges::copy_backward(I1 first, S1 last, I2 result);
template<[[redoc("`:c>")]]bidirectional_range R, [[redoc("`:c>")]]bidirectional_iterator I>
  requires [[redoc("`:c>")]]indirectly_copyable<iterator_t<R>, I>
  constexpr ranges::copy_backward_result<borrowed_iterator_t<R>, I>
    ranges::copy_backward(R&& r, I result);
[codeblock:end]

[div:description]
[para]
[:en] Let [$N] be [`last - first].
[:zh_CN] 令 [$N] 为 [`last - first]。

[para:expects]
[:en] [`result] is not in the range [=brange(first,last)].
[:zh_CN] [`result] 不处于范围 [=brange(first,last)] 之中。

[para:effects]
[:en] Copies elements in the range [=range(first,last)] into the range
[=range(result - `[$N`],result)] starting from [`last - 1] and proceeding
to [`first].[#:fn#]
[:zh_CN] 将范围 [=range(first,last)] 中的元素复制到范围
[=range(result - `[$N`],result)] 中，开始于 [`last - 1] 并进行到 [`first]。[#:fn#]

[note:foot]
[:en] [`copy_backward] can be used instead of [`copy] when [`last] is in
the range [=range(result - `[$N`],result)].
[:zh_CN] 如果 [`last] 处于范围 [=range(result - `[$N`],result)] 之中，则可以用
[`copy_backward] 来代替 [`copy]。
[note:end]

[:en] For each positive integer [$n \le N], performs
[`*(result - [$n]) = *(last - [$n])].
[:zh_CN] 对于每个正整数 [$n \le N]，实施 [`*(result - [$n]) = *(last - [$n])]。

[para:returns]
[list]
[item]
[:en@~] [`result - [$N]] for the overload in namespace [`std].
[:zh_CN@~] 对于命名空间 [`std] 中的重载，返回 [`result - [$N]]。
[item]
[:en@~] [`{last, result - [$N]}] for the overloads in namespace [`ranges].
[:zh_CN@~] 对于命名空间 [`ranges] 中的重载，返回 [`{last, result - [$N]}]。
[list:end]

[para:complexity]
[:en] Exactly [$N] assignments.
[:zh_CN] 恰好进行 [$N] 次赋值。
[div:end]
