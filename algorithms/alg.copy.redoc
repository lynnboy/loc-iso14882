[section#alg.copy
    [:en] Copy
    [:zh_CN] 复制
]

[%@library copy]
[codeblock:declaration]
template<class InputIterator, class OutputIterator>
  OutputIterator copy(InputIterator first, InputIterator last,
                      OutputIterator result);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`result] shall not be in the range [=range(first,last)].
[:zh_CN] [`result] 不能处于范围 [=range(first,last)] 之中。

[para:effects]
[:en] Copies elements in the range [=range(first,last)] into the range
[=range(result,result + (last - first))] starting from [`first] and proceeding
to [`last].
[:zh_CN] 将范围 [=range(first,last)] 中的元素复制到范围 [=range(result,result +
(last - first))] 中，开始于 [`first] 并进行到 [`last]。

[:en] For each non-negative integer [`n < (last - first)], performs
[`*(result + n) = *(first + n)].
[:zh_CN] 对于每个非负整数 [`n < (last - first)]，实施
[`*(result + n) = *(first + n)]。

[para:returns]
[:en] [`result + (last - first)].
[:zh_CN] [`result + (last - first)]。

[para:complexity]
[:en] Exactly [`last - first] assignments.
[:zh_CN] 恰好进行 [`last - first] 次赋值。
[exit:description]

[%@library copy]
[codeblock:declaration]
template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2>
  ForwardIterator2 copy(ExecutionPolicy&& policy,
                        ForwardIterator1 first, ForwardIterator1 last,
                        ForwardIterator2 result);
[codeblock:end]

[enter:description]
[para:requires]
[:en] The ranges [=range(first,last)] and
[=range(result,result + (last - first)] shall not overlap.
[:zh_CN] 范围 [=range(first,last)] 和 [=range(result,result + (last - first)]
不能有重叠。

[para:effects]
[:en] Copies elements in the range [=range(first,last)] into the range
[=range(result,result + (last - first))].
[:zh_CN] 将范围 [=range(first,last)] 中的元素复制到范围 [=range(result,result +
(last - first))] 中。

[:en] For each non-negative integer [`n < (last - first)], performs
[`*(result + n) = *(first + n)].
[:zh_CN] 对于每个非负整数 [`n < (last - first)]，实施
[`*(result + n) = *(first + n)]。

[para:returns]
[:en] [`result + (last - first)].
[:zh_CN] [`result + (last - first)]。

[para:complexity]
[:en] Exactly [`last - first] assignments.
[:zh_CN] 恰好进行 [`last - first] 次赋值。
[exit:description]

[%@library copy_n]
[codeblock:declaration]
template<class InputIterator, class Size, class OutputIterator>
  OutputIterator copy_n(InputIterator first, Size n,
                        OutputIterator result);
template<class ExecutionPolicy, class ForwardIterator1, class Size, class ForwardIterator2>
  ForwardIterator2 copy_n(ExecutionPolicy&& exec,
                          ForwardIterator1 first, Size n,
                          ForwardIterator2 result);
[codeblock:end]

[enter:description]
[para:effects]
[:en] For each non-negative integer [$i < n], performs
[`*(result + i) = *(first + i)].
[:zh_CN] 对于每个非负整数 [$i < n]，实施 [`*(result + i) = *(first + i)]。

[para:returns]
[:en] [`result + n].
[:zh_CN] [`result + n]。

[para:complexity]
[:en] Exactly [`n] assignments.
[:zh_CN] 恰好进行 [`n] 次赋值。
[exit:description]

[%@library copy_if]
[codeblock:declaration]
template<class InputIterator, class OutputIterator, class Predicate>
  OutputIterator copy_if(InputIterator first, InputIterator last,
                         OutputIterator result, Predicate pred);
template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2, class Predicate>
  ForwardIterator2 copy_if(ExecutionPolicy&& exec,
                           ForwardIterator1 first, ForwardIterator1 last,
                           ForwardIterator2 result, Predicate pred);
[codeblock:end]

[enter:description]
[para:requires]
[:en] The ranges [=range(first,last)] and
[=range(result,result + (last - first))] shall not overlap.
[:zh_CN] 范围 [=range(first,last)] 和 [=range(result,result + (last - first))]
不能有重叠。

[enter:note]
[:en] For the overload with an [`ExecutionPolicy], there may be a performance
cost if [`iterator_traits<ForwardIterator1>::value_type] is not
[`MoveConstructible] (Table [#tab:moveconstructible]).
[:zh_CN] 对于带有 [`ExecutionPolicy] 的重载，当
[`iterator_traits<ForwardIterator1>::value_type] 不为 [`MoveConstructible]
（表 [#tab:moveconstructible]）时可能存在一些性能损耗。
[exit:note]

[para:effects]
[:en] Copies all of the elements referred to by the iterator [`i] in the range
[=range(first,last)] for which [`pred(*i)] is [`true].
[:zh_CN] 对范围 [=range(first,last)] 中由迭代器 [`i] 所指代的所有符合
[`pred(*i)] 为 [`true] 的元素进行复制。

[para:returns]
[:en] The end of the resulting range.
[:zh_CN] 结果范围的末尾。

[para:complexity]
[:en] Exactly [`last - first] applications of the corresponding predicate.
[:zh_CN] 恰好进行 [`last - first] 次对应谓词的运用。

[para:remarks]
[:en] Stable ([#algorithm.stable]).
[:zh_CN] 稳定的（[#algorithm.stable]）。
[exit:description]

[%@library copy_backward]
[codeblock:declaration]
template<class BidirectionalIterator1, class BidirectionalIterator2>
  BidirectionalIterator2
    copy_backward(BidirectionalIterator1 first,
                  BidirectionalIterator1 last,
                  BidirectionalIterator2 result);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`result] shall not be in the range [=brange(first,last)].
[:zh_CN] [`result] 不能处于范围 [=brange(first,last)] 之中。

[para:effects]
[:en] Copies elements in the range [=range(first,last)] into the range
[=range(result - (last-first),result)] starting from [`last - 1] and proceeding
to [`first].[#:note#fn:$section.1]
[:zh_CN] 将范围 [=range(first,last)] 中的元素复制到范围 [=range(result -
(last-first),result)] 中，开始于 [`last - 1] 并进行到 [`first]。
[#:note#fn:$section.1]

[note:foot#fn:$section.1]
[:en] [`copy_backward] should be used instead of [`copy] when [`last] is in
the range [=range(result - (last - first),result)].
[:zh_CN] 如果 [`last] 处于范围 [=range(result - (last - first),result)] 之中，则
应该用 [`copy_backward] 来代替 [`copy]。
[note:end]

[:en] For each positive integer [`n <= (last - first)], performs
[`*(result - n) = *(last - n)].
[:zh_CN] 对于每个正整数 [`n <= (last - first)]，实施
[`*(result - n) = *(last - n)]。

[para:returns]
[:en] [`result - (last - first)].
[:zh_CN] [`result - (last - first)]。

[para:complexity]
[:en] Exactly [`last - first] assignments.
[:zh_CN] 恰好进行 [`last - first] 次赋值。
[exit:description]
