[section#alg.find.end
    [:en] Find end
    [:zh_CN] 末端查找
]

[%@library find_end]
[codeblock:declaration]
template<class ForwardIterator1, class ForwardIterator2>
  constexpr ForwardIterator1
    find_end(ForwardIterator1 first1, ForwardIterator1 last1,
             ForwardIterator2 first2, ForwardIterator2 last2);
template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2>
  ForwardIterator1
    find_end(ExecutionPolicy&& exec,
             ForwardIterator1 first1, ForwardIterator1 last1,
             ForwardIterator2 first2, ForwardIterator2 last2);

template<class ForwardIterator1, class ForwardIterator2,
         class BinaryPredicate>
  constexpr ForwardIterator1
    find_end(ForwardIterator1 first1, ForwardIterator1 last1,
             ForwardIterator2 first2, ForwardIterator2 last2,
             BinaryPredicate pred);
template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2,
         class BinaryPredicate>
  ForwardIterator1
    find_end(ExecutionPolicy&& exec,
             ForwardIterator1 first1, ForwardIterator1 last1,
             ForwardIterator2 first2, ForwardIterator2 last2,
             BinaryPredicate pred);

template<forward_iterator I1, sentinel_for<I1> S1, forward_iterator I2, sentinel_for<I2> S2,
         class Pred = ranges::equal_to, class Proj1 = identity, class Proj2 = identity>
  requires indirectly_comparable<I1, I2, Pred, Proj1, Proj2>
  constexpr subrange<I1>
    ranges::find_end(I1 first1, S1 last1, I2 first2, S2 last2, Pred pred = {},
                     Proj1 proj1 = {}, Proj2 proj2 = {});
template<forward_range R1, forward_range R2,
         class Pred = ranges::equal_to, class Proj1 = identity, class Proj2 = identity>
  requires indirectly_comparable<iterator_t<R1>, iterator_t<R2>, Pred, Proj1, Proj2>
  constexpr safe_subrange_t<R1>
    ranges::find_end(R1&& r1, R2&& r2, Pred pred = {},
                     Proj1 proj1 = {}, Proj2 proj2 = {});
[codeblock:end]

[div:description]
[para]
[:en] Let:
[:zh_CN] 令：

[list]
[item]
[:en@~] [`pred] be [`equal_to{}] for the overloads with no parameter [`pred].
[:zh_CN@~] [`pred] 对于没有 [`pred] 形参的重载为 [`equal_to{}]。
[item]
[:en@~] [$E] be:
[:zh_CN@~] 令 [$E]：

[list]
[item]
[:en@~] [`pred(*(i + n), *(first2 + n))] for the overloads in namespace [`std],
[:zh_CN@~] 对于命名空间 [`std] 中的重载为 [`pred(*(i + n), *(first2 + n))]，
[item]
[:en@~] [`invoke(pred, invoke(proj1, *(i + n)), invoke(proj2, *(first2 + n)))]
for the overloads in namespace [`ranges].
[:zh_CN@~] 对于命名空间 [`ranges] 中的重载为
[`invoke(pred, invoke(proj1, *(i + n)), invoke(proj2, *(first2 + n)))]。
[list:end]

[item]
[:en] [`i] be [`last1] if [=range(first2,last2)] is empty, or if
[`(last2 - first2) > (last1 - first1)] is [`true], or if there is no iterator
in the range [=range(first1,last1 - (last2 - first2))] such that for every
non-negative integer [`n < (last2 - first2)], [$E] is [`true].
[:zh_CN] 当 [=range(first2,last2)] 为空，或当
[`(last2 - first2) > (last1 - first1)] 为 [`true]，或当范围
[=range(first1,last1 - (last2 - first2))] 中不存在使得对于每个符合
[`n < (last2 - first2)] 的非负整数都有 [$E] 为 [`true] 的迭代器时，令 [`i] 为
[`last1]。

[:en] Otherwise [`i] is the last such iterator in
[=range(first1,last1 - (last2 - first2))].
[:zh_CN] 否则，[`i] 为 [=range(first1,last1 - (last2 - first2))] 中的最后一个
这样的迭代器。
[list:end]

[para:returns]
[list]
[item]
[:en] [`i] for the overloads in namespace [`std], and
[:zh_CN] 命名空间 [`std] 中的重载返回 [`i]，而
[item]
[:en] [`{i, i + (i == last1 ? 0 : last2 - first2)}] for the overloads in
namespace [`ranges].
[:zh_CN] 命名空间 [`ranges] 中的重载返回
[`{i, i + (i == last1 ? 0 : last2 - first2)}]。
[list:end]

[para:complexity]
[:en] At most [`(last2 - first2) * (last1 - first1 - (last2 - first2) + 1)]
applications of the corresponding predicate and any projection.
[:zh_CN] 最多进行 [`(last2 - first2) * (last1 - first1 - (last2 - first2) + 1)]
次相应谓词和任何投射的运用。
[div:end]
