[section#reduce
    [:en] Reduce
    [:zh_CN] 归约
]

[%@library reduce]
[codeblock:declaration]
template<class InputIterator>
  typename iterator_traits<InputIterator>::value_type
    reduce(InputIterator first, InputIterator last);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：

[codeblock:notation]
return reduce(first, last,
              typename iterator_traits<InputIterator>::value_type{});
[codeblock:end]
[exit:description]

[%@library reduce]
[codeblock:declaration]
template<class ExecutionPolicy, class ForwardIterator>
  typename iterator_traits<ForwardIterator>::value_type
    reduce(ExecutionPolicy&& exec,
           ForwardIterator first, ForwardIterator last);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：

[codeblock:notation]
return reduce(std::forward<ExecutionPolicy>(exec), first, last,
              typename iterator_traits<ForwardIterator>::value_type{});
[codeblock:end]
[exit:description]

[%@library reduce]
[codeblock:declaration]
template<class InputIterator, class T>
  T reduce(InputIterator first, InputIterator last, T init);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：

[codeblock:notation]
return reduce(first, last, init, plus<>());
[codeblock:end]
[exit:description]

[%@library reduce]
[codeblock:declaration]
template<class ExecutionPolicy, class ForwardIterator, class T>
  T reduce(ExecutionPolicy&& exec,
           ForwardIterator first, ForwardIterator last, T init);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：

[codeblock:notation]
return reduce(std::forward<ExecutionPolicy>(exec), first, last, init, plus<>());
[codeblock:end]
[exit:description]

[%@library reduce]
[codeblock:declaration]
template<class InputIterator, class T, class BinaryOperation>
  T reduce(InputIterator first, InputIterator last, T init,
           BinaryOperation binary_op);
template<class ExecutionPolicy, class ForwardIterator, class T, class BinaryOperation>
  T reduce(ExecutionPolicy&& exec,
           ForwardIterator first, ForwardIterator last, T init,
           BinaryOperation binary_op);
[codeblock:end]

[enter:description]
[para:requires]
[list]
[item]
[:en] [`I] shall be [*Cpp17MoveConstructible] ([#moveconstructible]).
[:zh_CN] [`I] 应当为 [*Cpp17MoveConstructible]（[#moveconstructible]）。

[item]
[:en] All of [`binary_op(init, *first)], [`binary_op(*first, init)],
[`binary_op(init, init)], and [`binary_op(*first, *first)] shall be
convertible to [`T].
[:zh_CN] [`binary_op(init, *first)]，[`binary_op(*first, init)]，
[`binary_op(init, init)]，以及 [`binary_op(*first, *first)] 都应当可以转换为
[`T]。

[item]
[:en] [`binary_op] shall neither invalidate iterators or subranges, nor modify
elements in the range [=crange(first,last)].
[:zh_CN] [`binary_op] 应当既不会使任何迭代器或子范围失效，也不会改动范围
[=crange(first,last)] 中的任何元素。
[list:end]

[para:returns]
[:en] [`[*GENERALIZED_SUM](binary_op, init, *i, ...)] for every [`i] in
[=range(first,last)].
[:zh_CN] [`[*GENERALIZED_SUM](binary_op, init, *i, ...)]（对于
[=range(first,last)] 中的每个 [`i]）。

[para:complexity]
[:en] [$[=O]([`last - first])] applications of [`binary_op].
[:zh_CN] [$[=O]([`last - first])] 次运用 [`binary_op]。

[para]
[enter:note]
[:en] The difference between [`reduce] and [`accumulate] is that [`reduce]
applies [`binary_op] in an unspecified order, which yields a nondeterministic
result for non-associative or non-commutative [`binary_op] such as
floating-point addition.
[:zh_CN] [`reduce] 和 [`accumulate] 之间的差别在于，[`reduce] 以某种未指明的顺序
运用 [`binary_op]，这对于比如浮点加这样的非可结合或者非可交换的 [`binary_op]
的情况下可能会产生非确定的结果。
[exit:note]
[exit:description]
