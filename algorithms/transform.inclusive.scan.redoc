[section#transform.inclusive.scan
    [:en] Transform inclusive scan
    [:zh_CN] 变换内含扫描
]

[%@lib transform_inclusive_scan]
[codeblock:declaration]
template<class InputIterator, class OutputIterator,
         class BinaryOperation, class UnaryOperation>
  constexpr OutputIterator
    transform_inclusive_scan(InputIterator first, InputIterator last,
                             OutputIterator result,
                             BinaryOperation binary_op, UnaryOperation unary_op);
template<class ExecutionPolicy,
         class ForwardIterator1, class ForwardIterator2,
         class BinaryOperation, class UnaryOperation>
  ForwardIterator2
    transform_inclusive_scan(ExecutionPolicy&& exec,
                             ForwardIterator1 first, ForwardIterator1 last,
                             ForwardIterator2 result,
                             BinaryOperation binary_op, UnaryOperation unary_op);
template<class InputIterator, class OutputIterator,
         class BinaryOperation, class UnaryOperation, class T>
  constexpr OutputIterator
    transform_inclusive_scan(InputIterator first, InputIterator last,
                             OutputIterator result,
                             BinaryOperation binary_op, UnaryOperation unary_op,
                             T init);
template<class ExecutionPolicy,
         class ForwardIterator1, class ForwardIterator2,
         class BinaryOperation, class UnaryOperation, class T>
  ForwardIterator2
    transform_inclusive_scan(ExecutionPolicy&& exec,
                             ForwardIterator1 first, ForwardIterator1 last,
                             ForwardIterator2 result,
                             BinaryOperation binary_op, UnaryOperation unary_op,
                             T init);
[codeblock:end]

[div:description]
[para]
[:en] Let [`U] be the value type of [`decltype(first)].
[:zh_CN] 令 [`U] 为 [`decltype(first)] 的值类型。

[para:mandates]
[:en] If [`init] is provided, all of
[:zh_CN] 若提供了 [`init]，则以下全部
[list]
[item]
[:en@~] [`binary_op(init, init)],
[:zh_CN@~] [`binary_op(init, init)]，
[item]
[:en@~] [`binary_op(init, unary_op(*first))], and
[:zh_CN@~] [`binary_op(init, unary_op(*first))]，以及
[item]
[:en@~] [`binary_op(unary_op(*first), unary_op(*first))]
[:zh_CN@~] [`binary_op(unary_op(*first), unary_op(*first))]
[list:end]
[:en@~] are convertible to [`T]; otherwise,
[`binary_op(unary_op(*first), unary_op(*first))] is convertible to [`U].
[:zh_CN@~] 都可以转换为 [`T]；否则，
[`binary_op(unary_op(*first), unary_op(*first))] 可以转换为 [`U]。

[para:expects]
[list]
[item]
[:en] If [`init] is provided, [`T] meets the [^:oc MoveConstructible]
([#:tab#cpp17.moveconstructible]) requirements; otherwise, [`U] meets the
[^:oc MoveConstructible] requirements.
[:zh_CN] 若提供了 [`init]，则 [`T] 满足 [^:oc MoveConstructible]
（[#:tab#cpp17.moveconstructible]）的规定；否则 [`U] 满足
[^:oc MoveConstructible] 的规定。

[item]
[:en] Neither [`unary_op] nor [`binary_op] shall invalidate iterators or
subranges, or modify elements in the ranges [=crange(first,last)] or
[=crange(result,result + (last - first))].
[:zh_CN] [`unary_op] 和 [`binary_op] 在范围 [=crange(first,last)] 或
[=crange(result,result + (last - first))] 中都既不能无效化任何迭代器或子范围，也
不能改动任何元素。
[list:end]

[para:effects]
[:en] For each integer [`K] in [=range(0,last - first)] assigns through
[`result + K] the value of
[:zh_CN] 对于 [=range(0,last - first)] 中的每个整数 [`K]，将以下值经由
[`result + K] 进行赋值：

[list]
[item]
[codeblock:notation]
[^GENERALIZED_NONCOMMUTATIVE_SUM](
    binary_op, init,
	unary_op(*(first + 0)), unary_op(*(first + 1)), ..., unary_op(*(first + K)))
[codeblock:end]
[:en@~] if [`init] is provided, or
[:zh_CN@~] 若提供了 [`init]，否则

[item]
[codeblock:notation]
[^GENERALIZED_NONCOMMUTATIVE_SUM](
    binary_op,
	unary_op(*(first + 0)), unary_op(*(first + 1)), ..., unary_op(*(first + K)))
[codeblock:end]
[:en@~] otherwise.
[:zh_CN@~] 。
[list:end]

[para:returns]
[:en] The end of the resulting range beginning at [`result].
[:zh_CN] 其所产生的由 [`result] 开始的范围的末尾。

[para:complexity]
[:en] [?bigoh [`last - first]] applications each of [`unary_op] and [`binary_op].
[:zh_CN] [`unary_op] 和 [`binary_op] 各进行 [?bigoh [`last - first]] 次运用。

[para:remarks]
[:en] [`result] may be equal to [`first].
[:zh_CN] [`result] 有可能等于 [`first]。

[para]
[begin:note]
[:en] The difference between [`transform_exclusive_scan] and
[`transform_inclusive_scan] is that [`transform_inclusive_scan] includes the
[$i^\text{th}] input element in the [$i^\text{th}] sum.
[:zh_CN] [`transform_exclusive_scan] 和 [`transform_inclusive_scan] 之间的差别
在于，[`transform_inclusive_scan] 在其第 [$i] 次求和中包括第 [$i] 个输入元素。

[:en] If [`binary_op] is not mathematically associative, the behavior of
[`transform_inclusive_scan] may be nondeterministic.
[:zh_CN] 当 [`binary_op] 不具有数学可结合性时，[`transform_inclusive_scan] 的
行为可能具有不确定性。

[:en] [`transform_inclusive_scan] does not apply [`unary_op] to [`init].
[:zh_CN] [`transform_inclusive_scan] 并不对 [`init] 运用 [`unary_op]。
[end:note]
[div:end]
