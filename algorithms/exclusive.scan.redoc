[section#exclusive.scan
    [:en] Exclusive scan
    [:zh_CN] 排除扫描
]

[%@lib exclusive_scan]
[codeblock:declaration]
template<class InputIterator, class OutputIterator, class T>
  constexpr OutputIterator
    exclusive_scan(InputIterator first, InputIterator last,
                   OutputIterator result, T init);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return exclusive_scan(first, last, result, init, plus<>());
[codeblock:end]
[div:end]

[%@lib exclusive_scan]
[codeblock:declaration]
template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2, class T>
  ForwardIterator2
    exclusive_scan(ExecutionPolicy&& exec,
                   ForwardIterator1 first, ForwardIterator1 last,
                   ForwardIterator2 result, T init);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return exclusive_scan(std::forward<ExecutionPolicy>(exec),
                      first, last, result, init, plus<>());
[codeblock:end]
[div:end]

[%@lib exclusive_scan]
[codeblock:declaration]
template<class InputIterator, class OutputIterator, class T, class BinaryOperation>
  constexpr OutputIterator
    exclusive_scan(InputIterator first, InputIterator last,
                   OutputIterator result, T init, BinaryOperation binary_op);
template<class ExecutionPolicy,
         class ForwardIterator1, class ForwardIterator2, class T, class BinaryOperation>
  ForwardIterator2
    exclusive_scan(ExecutionPolicy&& exec,
                   ForwardIterator1 first, ForwardIterator1 last,
                   ForwardIterator2 result, T init, BinaryOperation binary_op);
[codeblock:end]

[div:description]
[para:mandates]
[:en] All of
[:zh_CN] 以下全部
[list]
[item]
[:en@~] [`binary_op(init, init)],
[:zh_CN@~] [`binary_op(init, init)]，
[item]
[:en@~] [`binary_op(init, *first)], and
[:zh_CN@~] [`binary_op(init, *first)]，以及
[item]
[:en@~] [`binary_op(*first, *first)]
[:zh_CN@~] [`binary_op(*first, *first)]
[list:end]
[:en@~] are convertible to [`T].
[:zh_CN@~] 都可以转换为 [`T]。

[para:expects]
[list]
[item]
[:en] [`T] meets the [^:oc MoveConstructible] ([#:tab#cpp17.moveconstructible])
requirements.
[:zh_CN] [`T] 满足 [^:oc MoveConstructible]（[#:tab#cpp17.moveconstructible]）
的规定。
[item]
[:en] [`binary_op] neither invalidates iterators or subranges, nor modifies
elements in the ranges [=crange(first,last)] or
[=crange(result,result + (last - first))].
[:zh_CN] [`binary_op] 在范围 [=crange(first,last)] 或
[=crange(result,result + (last - first))] 中既不会无效化任何迭代器或子范围，也
不会改动任何元素。
[list:end]

[para:effects]
[:en] For each integer [`K] in [=range(0,last - first)] assigns through
[`result + K] the value of:
[:zh_CN] 对于 [=range(0,last - first)] 中的每个整数 [`K]，将以下值经由
[`result + K] 进行赋值：

[codeblock:notation]
[^GENERALIZED_NONCOMMUTATIVE_SUM](
    binary_op, init, *(first + 0), *(first + 1), ..., *(first + K - 1))
[codeblock:end]

[para:returns]
[:en] The end of the resulting range beginning at [`result].
[:zh_CN] 其所产生的由 [`result] 开始的范围的末尾。

[para:complexity]
[:en] [?bigoh [`last - first]] applications of [`binary_op].
[:zh_CN] [?bigoh [`last - first]] 次运用 [`binary_op]。

[para:remarks]
[:en] [`result] may be equal to [`first].
[:zh_CN] [`result] 有可能等于 [`first]。

[para]
[begin:note]
[:en] The difference between [`exclusive_scan] and [`inclusive_scan] is that
[`exclusive_scan] excludes the [$i^\text{th}] input element from the
[$i^\text{th}] sum.
[:zh_CN] [`exclusive_scan] 和 [`inclusive_scan] 之间的差别在于，
[`exclusive_scan] 在其第 [$i] 次求和中不包括第 [$i] 个输入元素。

[:en] If [`binary_op] is not mathematically associative, the behavior of
[`exclusive_scan] can be nondeterministic.
[:zh_CN] 当 [`binary_op] 不具有数学可结合性时，[`exclusive_scan] 的行为可以具有
不确定性。
[end:note]
[div:end]
