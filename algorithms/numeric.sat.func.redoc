[section#numeric.sat.func
    [:en] Arithmetic functions
    [:zh_CN] 算术函数
]

[para]
[begin:note]
[:en] In the following descriptions, an arithmetic operation
is performed as a mathematical operation with infinite range and then
it is determined whether the mathematical result fits into the result type.
[:zh_CN] 以下描述中，各算术运算以无穷范围进行数学运算，然后确定其数学结果是否
适于结果类型。
[end:note]

[%@lib add_sat]
[codeblock:declaration]
template<class T>
  constexpr T add_sat(T x, T y) noexcept;
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`T] is a signed or unsigned integer type ([#basic.fundamental]).
[:zh_CN] [`T] 为有符号或无符号整数类型（[#basic.fundamental]）。

[para:returns]
[:en] If [$[`x] + [`y]] is representable as a value of type [`T], [$[`x] + [`y]];
otherwise, either the largest or smallest representable value of type [`T],
whichever is closer to the value of [$[`x] + [`y]].
[:zh_CN] 若 [$[`x] + [`y]] 可以表示为 [`T] 类型的值，则为 [$[`x] + [`y]]；否则，
为 [`T] 类型的最大或最小可表示值中与 [$[`x] + [`y]] 的值较接近者。
[div:end]

[%@lib sub_sat]
[codeblock:declaration]
template<class T>
  constexpr T sub_sat(T x, T y) noexcept;
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`T] is a signed or unsigned integer type ([#basic.fundamental]).
[:zh_CN] [`T] 为有符号或无符号整数类型（[#basic.fundamental]）。

[para:returns]
[:en] If [$[`x] - [`y]] is representable as a value of type [`T], [$[`x] - [`y]];
otherwise, either the largest or smallest representable value of type [`T],
whichever is closer to the value of [$[`x] - [`y]].
[:zh_CN] 若 [$[`x] - [`y]] 可以表示为 [`T] 类型的值，则为 [$[`x] - [`y]]；否则，
为 [`T] 类型的最大或最小可表示值中与 [$[`x] - [`y]] 的值较接近者。
[div:end]

[%@lib mul_sat]
[codeblock:declaration]
template<class T>
  constexpr T mul_sat(T x, T y) noexcept;
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`T] is a signed or unsigned integer type ([#basic.fundamental]).
[:zh_CN] [`T] 为有符号或无符号整数类型（[#basic.fundamental]）。

[para:returns]
[:en] If [$[`x] \times [`y]] is representable as a value of type [`T],
[$[`x] \times [`y]]; otherwise, either the largest or smallest representable
value of type [`T], whichever is closer to the value of [$[`x] \times [`y]].
[:zh_CN] 若 [$[`x] \times [`y]] 可以表示为 [`T] 类型的值，则为 [$[`x] \times [`y]]；
否则，为 [`T] 类型的最大或最小可表示值中与 [$[`x] \times [`y]] 的值较接近者。
[div:end]

[%@lib div_sat]
[codeblock:declaration]
template<class T>
  constexpr T div_sat(T x, T y) noexcept;
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`T] is a signed or unsigned integer type ([#basic.fundamental]).
[:zh_CN] [`T] 为有符号或无符号整数类型（[#basic.fundamental]）。

[para:expects]
[:en] [`y != 0] is [`true].
[:zh_CN] [`y != 0] 为 [`true]。

[para:returns]
[:en] If [`T] is a signed integer type and
[`x == numeric_limits<T>::min() && y == -1] is [`true],
[`numeric_limits<T>::max()], otherwise, [`x / y].
[:zh_CN] 若 [`T] 为有符号整数类型且 [`x == numeric_limits<T>::min() && y == -1]
为 [`true]，则为 [`numeric_limits<T>::max()]，否则为 [`x / y]。

[para:remarks]
[:en] A function call expression that violates the precondition in the
[=Preconditions] element is not a core constant expression ([#expr.const]).
[:zh_CN] 违反 [=Preconditions] 要素中的前条件的函数调用表达式不是核心常量表达式
（[#expr.const]）。
[div:end]
