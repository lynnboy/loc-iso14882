[section#alg.replace
    [:en] Replace
    [:zh_CN] 替换
]

[%@lib replace]
[%@lib replace_if]
[codeblock:declaration]
template<class ForwardIterator, class T = iterator_traits<ForwardIterator>::value_type>
  constexpr void replace(ForwardIterator first, ForwardIterator last,
                         const T& old_value, const T& new_value);
template<class ExecutionPolicy, class ForwardIterator,
         class T = iterator_traits<ForwardIterator>::value_type>
  void replace(ExecutionPolicy&& exec,
               ForwardIterator first, ForwardIterator last,
               const T& old_value, const T& new_value);

template<class ForwardIterator, class Predicate,
         class T = iterator_traits<ForwardIterator>::value_type>
  constexpr void replace_if(ForwardIterator first, ForwardIterator last,
                            Predicate pred, const T& new_value);
template<class ExecutionPolicy, class ForwardIterator, class Predicate,
         class T = iterator_traits<ForwardIterator>::value_type>
  void replace_if(ExecutionPolicy&& exec,
                  ForwardIterator first, ForwardIterator last,
                  Predicate pred, const T& new_value);

template<[[redoc("`:c>")]]input_iterator I, [[redoc("`:c>")]]sentinel_for<I> S, class Proj = identity,
         class T1 = projected_value_t<I, Proj>, class T2 = T1>
  requires [[redoc("`:c>")]]indirectly_writable<I, const T2&> &&
           [[redoc("`:c>")]]indirect_binary_predicate<ranges::equal_to, projected<I, Proj>, const T1*>
  constexpr I
    ranges::replace(I first, S last, const T1& old_value, const T2& new_value, Proj proj = {});
template<[[redoc("`:c>")]]input_range R, class Proj = identity,
         class T1 = projected_value_t<iterator_t<R>, Proj>, class T2 = T1>
  requires [[redoc("`:c>")]]indirectly_writable<iterator_t<R>, const T2&> &&
           [[redoc("`:c>")]]indirect_binary_predicate<ranges::equal_to, projected<iterator_t<R>, Proj>, const T1*>
  constexpr borrowed_iterator_t<R>
    ranges::replace(R&& r, const T1& old_value, const T2& new_value, Proj proj = {});
template<[[redoc("`:c>")]]input_iterator I, [[redoc("`:c>")]]sentinel_for<I> S, class Proj = identity,
         class T = projected_value_t<I, Proj>,
         [[redoc("`:c>")]]indirect_unary_predicate<projected<I, Proj>> Pred>
  requires [[redoc("`:c>")]]indirectly_writable<I, const T&>
  constexpr I ranges::replace_if(I first, S last, Pred pred, const T& new_value, Proj proj = {});
template<[[redoc("`:c>")]]input_range R, class Proj = identity, class T = projected_value_t<iterator_t<R>, Proj>,
         [[redoc("`:c>")]]indirect_unary_predicate<projected<iterator_t<R>, Proj>> Pred>
  requires [[redoc("`:c>")]]indirectly_writable<iterator_t<R>, const T&>
  constexpr borrowed_iterator_t<R>
    ranges::replace_if(R&& r, Pred pred, const T& new_value, Proj proj = {});
[codeblock:end]

[div:description]
[para]
[:en] Let [$E] be
[:zh_CN] 令 [$E]：
[list]
[item]
[:en@~] [`bool(*i == old_value)] for [`replace];
[:zh_CN@~] 对于 [`replace] 为 [`bool(*i == old_value)]；
[item]
[:en@~] [`bool(pred(*i))] for [`replace_if];
[:zh_CN@~] 对于 [`replace_if] 为 [`bool(pred(*i))]；
[item]
[:en@~] [`bool(invoke(proj, *i) == old_value)] for [`ranges::replace];
[:zh_CN@~] 对于 [`ranges::replace] 为 [`bool(invoke(proj, *i) == old_value)]；
[item]
[:en@~] [`bool(invoke(pred, invoke(proj, *i)))] for [`ranges::replace_if].
[:zh_CN@~] 对于 [`ranges::replace_if] 为 [`bool(invoke(pred, invoke(proj, *i)))]。
[list:end]

[para:mandates]
[:en] [`new_value] is writable ([#iterator.requirements.general]) to [`first].
[:zh_CN] [`new_value] 为可向 [`first] 写出（[#iterator.requirements.general]）。

[para:effects]
[:en] Substitutes elements referred by the iterator [`i] in the range
[=range(first,last)] with [`new_value], when [$E] is [`true].
[:zh_CN] 将范围 [=range(first,last)] 中由迭代器 [`i] 所指代的使 [$E] 为 [`true]
的元素代换为 [`new_value]。

[para:returns]
[:en] [`last] for the overloads in namespace [`ranges].
[:zh_CN] 对于命名空间 [`ranges] 中的重载，返回 [`last]。

[para:complexity]
[:en] Exactly [`last - first] applications of the corresponding predicate and
any projection.
[:zh_CN] 恰好进行 [`last - first] 次对应谓词和任何投射的运用。
[div:end]

[%@lib replace_copy]
[%@lib replace_copy_if]
[codeblock:declaration]
template<class InputIterator, class OutputIterator,
         class T = iterator_traits<OutputIterator>::value_type>
  constexpr OutputIterator
    replace_copy(InputIterator first, InputIterator last,
                 OutputIterator result,
                 const T& old_value, const T& new_value);
template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2,
         class T = iterator_traits<ForwardIterator2>::value_type>
  ForwardIterator2
    replace_copy(ExecutionPolicy&& exec,
                 ForwardIterator1 first, ForwardIterator1 last,
                 ForwardIterator2 result,
                 const T& old_value, const T& new_value);

template<class InputIterator, class OutputIterator, class Predicate, class T>
  constexpr OutputIterator
    replace_copy_if(InputIterator first, InputIterator last,
                    OutputIterator result,
                    Predicate pred, const T& new_value);
template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2,
         class Predicate, class T>
  ForwardIterator2
    replace_copy_if(ExecutionPolicy&& exec,
                    ForwardIterator1 first, ForwardIterator1 last,
                    ForwardIterator2 result,
                    Predicate pred, const T& new_value);

template<[[redoc("`:c>")]]input_iterator I, [[redoc("`:c>")]]sentinel_for<I> S, class O,
         class Proj = identity, class T1 = projected_value_t<I, Proj>, class T2 = iter_value_t<O>>
  requires [[redoc("`:c>")]]indirectly_copyable<I, O> &&
           [[redoc("`:c>")]]indirect_binary_predicate<ranges::equal_to, projected<I, Proj>, const T1*> &&
           [[redoc("`:c>")]]output_iterator<O, const T2&>
  constexpr ranges::replace_copy_result<I, O>
    ranges::replace_copy(I first, S last, O result, const T1& old_value, const T2& new_value,
                         Proj proj = {});
template<[[redoc("`:c>")]]input_range R, class O, class Proj = identity,
         class T1 = projected_value_t<iterator_t<R>, Proj>, class T2 = iter_value_t<O>>
  requires [[redoc("`:c>")]]indirectly_copyable<iterator_t<R>, O> &&
           [[redoc("`:c>")]]indirect_binary_predicate<ranges::equal_to, projected<iterator_t<R>, Proj>, const T1*>
           && [[redoc("`:c>")]]output_iterator<O, const T2&>
  constexpr ranges::replace_copy_result<borrowed_iterator_t<R>, O>
    ranges::replace_copy(R&& r, O result, const T1& old_value, const T2& new_value,
                         Proj proj = {});

template<[[redoc("`:c>")]]input_iterator I, [[redoc("`:c>")]]sentinel_for<I> S, class O, class T = iter_value_t<O>,
         class Proj = identity, [[redoc("`:c>")]]indirect_unary_predicate<projected<I, Proj>> Pred>
  requires [[redoc("`:c>")]]indirectly_copyable<I, O> && [[redoc("`:c>")]]output_iterator<O, const T&>
  constexpr ranges::replace_copy_if_result<I, O>
    ranges::replace_copy_if(I first, S last, O result, Pred pred, const T& new_value,
                            Proj proj = {});
template<[[redoc("`:c>")]]input_range R, class O, class T = iter_value_t<O>, class Proj = identity,
         [[redoc("`:c>")]]indirect_unary_predicate<projected<iterator_t<R>, Proj>> Pred>
  requires [[redoc("`:c>")]]indirectly_copyable<iterator_t<R>, O> && [[redoc("`:c>")]]output_iterator<O, const T&>
  constexpr ranges::replace_copy_if_result<borrowed_iterator_t<R>, O>
    ranges::replace_copy_if(R&& r, O result, Pred pred, const T& new_value,
                            Proj proj = {});
[codeblock:end]

[div:description]
[para]
[:en] Let [$E] be
[:zh_CN] 令 [$E]：
[list]
[item]
[:en@~] [`bool(*(first + (i - result)) == old_value)] for [`replace_copy];
[:zh_CN@~] 对于 [`replace_copy] 为 [`bool(*(first + (i - result)) == old_value)]；
[item]
[:en@~] [`bool(pred(*(first + (i - result))))] for [`replace_copy_if];
[:zh_CN@~] 对于 [`replace_copy_if] 为 [`bool(pred(*(first + (i - result))))]；
[item]
[:en@~] [`bool(invoke(proj, *(first + (i - result))) == old_value)] for
[`ranges::replace_copy];
[:zh_CN@~] 对于 [`ranges::replace_copy] 为
[`bool(invoke(proj, *(first + (i - result))) == old_value)]；
[item]
[:en@~] [`bool(invoke(pred, invoke(proj, *(first + (i - result)))))] for
[`ranges::replace_copy_if].
[:zh_CN@~] 对于 [`ranges::replace_copy_if] 为
[`bool(invoke(pred, invoke(proj, *(first + (i - result)))))]。
[list:end]

[para:mandates]
[:en] The results of the expressions [`*first] and [`new_value] are writable
([#iterator.requirements.general]) to [`result].
[:zh_CN] 表达式 [`*first] 的结果和 [`new_value] 都可以向 [`result] 写出
（[#iterator.requirements.general]）。

[para:expects]
[:en] The ranges [=range(first,last)] and [=range(result,result + (last - first))]
do not overlap.
[:zh_CN] 范围 [=range(first,last)] 和 [=range(result,result + (last - first))]
没有重叠。

[para:effects]
[:en] Assigns through every iterator [`i] in the range
[=range(result,result + (last - first))] a new corresponding value
[:zh_CN] 通过范围 [=range(result,result + (last - first))] 中的每个迭代器 [`i]：
[list]
[item]
[:en@~] [`new_value] if [$E] is [`true] or
[:zh_CN@~] 当 [$E] 为 [`true] 时赋值 [`new_value]，
[item]
[:en@~] [`*(first + (i - result))] otherwise.
[:zh_CN@~] 否则赋值 [`*(first + (i - result))]。
[list:end]

[para:returns]
[list]
[item]
[:en@~] [`result + (last - first)] for the overload in namespace [`std].
[:zh_CN@~] 对于命名空间 [`std] 中的重载，返回 [`result + (last - first)]。
[item]
[:en@~] [`{last, result + (last - first)}] for the overloads in namespace
[`ranges].
[:zh_CN@~] 对于命名空间 [`ranges] 中的重载，返回
[`{last, result + (last - first)}]。
[list:end]

[para:complexity]
[:en] Exactly [`last - first] applications of the corresponding predicate and
any projection.
[:zh_CN] 恰好进行 [`last - first] 次对应谓词和任何投射的运用。
[div:end]
