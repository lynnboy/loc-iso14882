[section#alg.generate
    [:en] Generate
    [:zh_CN] 生成
]

[%@lib generate]
[%@lib generate_n]
[codeblock:declaration]
template<class ForwardIterator, class Generator>
  constexpr void generate(ForwardIterator first, ForwardIterator last,
                          Generator gen);
template<class ExecutionPolicy, class ForwardIterator, class Generator>
  void generate(ExecutionPolicy&& exec,
                ForwardIterator first, ForwardIterator last,
                Generator gen);

template<class OutputIterator, class Size, class Generator>
  constexpr OutputIterator generate_n(OutputIterator first, Size n, Generator gen);
template<class ExecutionPolicy, class ForwardIterator, class Size, class Generator>
  ForwardIterator generate_n(ExecutionPolicy&& exec,
                             ForwardIterator first, Size n, Generator gen);

template<[[redoc("`:c>")]]input_or_output_iterator O, [[redoc("`:c>")]]sentinel_for<O> S, [[redoc("`:c>")]]copy_constructible F>
  requires [[redoc("`:c>")]]invocable<F&> && [[redoc("`:c>")]]indirectly_writable<O, invoke_result_t<F&>>
  constexpr O ranges::generate(O first, S last, F gen);
template<class R, [[redoc("`:c>")]]copy_constructible F>
  requires [[redoc("`:c>")]]invocable<F&> && [[redoc("`:c>")]]output_range<R, invoke_result_t<F&>>
  constexpr borrowed_iterator_t<R> ranges::generate(R&& r, F gen);
template<[[redoc("`:c>")]]input_or_output_iterator O, [[redoc("`:c>")]]copy_constructible F>
  requires [[redoc("`:c>")]]invocable<F&> && [[redoc("`:c>")]]indirectly_writable<O, invoke_result_t<F&>>
  constexpr O ranges::generate_n(O first, iter_difference_t<O> n, F gen);

template<[[redoc("*:c>")]]execution-policy Ep, [[redoc("`:c>")]]random_access_iterator O, [[redoc("`:c>")]]sized_sentinel_for<O> S,
         [[redoc("`:c>")]]copy_constructible F>
  requires [[redoc("`:c>")]]invocable<F&> && [[redoc("`:c>")]]indirectly_writable<O, invoke_result_t<F&>>
  O ranges::generate(Ep&& exec, O first, S last, F gen);
template<[[redoc("*:c>")]]execution-policy Ep, [[redoc("*:c>")]]sized-random-access-range R, [[redoc("`:c>")]]copy_constructible F>
  requires [[redoc("`:c>")]]invocable<F&> && [[redoc("`:c>")]]indirectly_writable<iterator_t<R>, invoke_result_t<F&>>
  borrowed_iterator_t<R> ranges::generate(Ep&& exec, R&& r, F gen);
template<[[redoc("*:c>")]]execution-policy Ep, [[redoc("`:c>")]]random_access_iterator O, [[redoc("`:c>")]]copy_constructible F>
  requires [[redoc("`:c>")]]invocable<F&> && [[redoc("`:c>")]]indirectly_writable<O, invoke_result_t<F&>>
  O ranges::generate_n(Ep&& exec, O first, iter_difference_t<O> n, F gen);
[codeblock:end]

[div:description]
[para]
[:en] Let [$N] be [$\max(0, [`n])] for the [`generate_n] algorithms, and
[`last - first] for the [`generate] algorithms.
[:zh_CN] 令 [$N] 对于各 [`generate_n] 算法为 [$\max(0, [`n])]，而对于各
[`generate] 算法为 [`last - first]。

[para:mandates]
[:en] [`Size] is convertible to an integral type ([#conv.integral], [#class.conv]).
[:zh_CN] [`Size] 可以转换为整型类型（[#conv.integral]，[#class.conv]）。

[para:effects]
[:en] Assigns the result of successive evaluations of [`gen()] through each
iterator in the range [=range(first,first + `[$N`])].
[:zh_CN] 通过范围 [=range(first,first + `[$N`])] 中的每个迭代器，将对 [`gen()]
的连续求值的结果对其进行赋值。

[para:returns]
[:en] [`first + [$N]].
[:zh_CN] [`first + [$N]]。

[para:complexity]
[:en] Exactly [$N] evaluations of [`gen()] and assignments.
[:zh_CN] 恰好进行 [$N] 次对 [`gen()] 的求值和赋值。

[para:remarks]
[:en] [`gen] may modify objects via its arguments for parallel algorithm
overloads ([#algorithms.parallel.user]).
[:zh_CN] 对于并行算法重载（[#algorithms.parallel.user]），[`gen] 可能会通过其实参修改对象。
[div:end]
