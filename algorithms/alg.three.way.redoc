[section#alg.three.way
    [:en] Three-way comparison algorithms
    [:zh_CN] 三路比较算法
]

[%@lib lexicographical_compare_three_way]
[codeblock:declaration]
template<class InputIterator1, class InputIterator2, class Cmp>
  constexpr auto
    lexicographical_compare_three_way(InputIterator1 b1, InputIterator1 e1,
                                      InputIterator2 b2, InputIterator2 e2,
                                      Cmp comp)
      -> decltype(comp(*b1, *b2));
[codeblock:end]

[div:description]
[para]
[:en] Let [$N] be [$\min([`e1 - b1], [`e2 - b2])].
[:zh_CN] 令 [$N] 为 [$\min([`e1 - b1], [`e2 - b2])]。

[:en] Let [$E(n)] be [`comp(*(b1 + [$n]), *(b2 + [$n]))].
[:zh_CN] 令 [$E(n)] 为 [`comp(*(b1 + [$n]), *(b2 + [$n]))]。

[para:mandates]
[:en] [`decltype(comp(*b1, *b2))] is a comparison category type.
[:zh_CN] [`decltype(comp(*b1, *b2))] 为比较类别类型。

[para:returns]
[:en] [$E(i)], where [$i] is the smallest integer in [=range(0,`[$N`])] such
that [`[$E(i)] != 0] is [`true], or [`(e1 - b1) <=> (e2 - b2)] if no such
integer exists.
[:zh_CN] [$E(i)]，其中 [$i] 为 [=range(0,`[$N`])] 中使得 [`[$E(i)] != 0] 为
[`true] 的最小整数，或当不存在这种整数时返回 [`(e1 - b1) <=> (e2 - b2)]。

[para:complexity]
[:en] At most [$N] applications of [`comp].
[:zh_CN] 最多 [$N] 次对 [`comp] 的运用。
[div:end]

[%@lib lexicographical_compare_three_way]
[codeblock:declaration]
template<class InputIterator1, class InputIterator2>
  constexpr auto
    lexicographical_compare_three_way(InputIterator1 b1, InputIterator1 e1,
                                      InputIterator2 b2, InputIterator2 e2);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return lexicographical_compare_three_way(b1, e1, b2, e2, compare_three_way());
[codeblock:end]
[div:end]
