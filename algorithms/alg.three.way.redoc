[section#alg.three.way
    [:en] Three-way comparison algorithms
    [:zh_CN] 三路比较算法
]

[%@lib lexicographical_compare_three_way]
[codeblock:declaration]
template<class InputIterator1, class InputIterator2, class Cmp>
  constexpr auto
    lexicographical_compare_three_way(InputIterator1 b1, InputIterator1 e1,
                                      InputIterator2 b2, InputIterator2 e2,
                                      Cmp comp)
      -> common_comparison_category_t<decltype(comp(*b1, *b2)), strong_ordering>;
[codeblock:end]

[div:description]
[para:mandates]
[:en] [`decltype(comp(*b1, *b2))] is a comparison category type.
[:zh_CN] [`decltype(comp(*b1, *b2))] 为比较类别类型。

[para:effects]
[:en] Lexicographically compares two ranges and produces a result of the
strongest applicable comparison category type.
[:zh_CN] 对两个范围进行字典序比较并产生具有最强的适用比较类别类型的结果。

[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
for ( ; b1 != e1 && b2 != e2; void(++b1), void(++b2) )
  if (auto cmp = comp(*b1,*b2); cmp != 0)
    return cmp;
return b1 != e1 ? strong_ordering::greater :
       b2 != e2 ? strong_ordering::less :
                  strong_ordering::equal;
[codeblock:end]
[div:end]

[%@lib lexicographical_compare_three_way]
[codeblock:declaration]
template<class InputIterator1, class InputIterator2>
  constexpr auto
    lexicographical_compare_three_way(InputIterator1 b1, InputIterator1 e1,
                                      InputIterator2 b2, InputIterator2 e2);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return lexicographical_compare_three_way(b1, e1, b2, e2, compare_three_way());
[codeblock:end]
[div:end]
