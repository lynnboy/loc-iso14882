[section#alg.permutation.generators
    [:en] Permutation generators
    [:zh_CN] 排列产生器
]

[%@library next_permutation]
[codeblock:declaration]
template<class BidirectionalIterator>
  constexpr bool next_permutation(BidirectionalIterator first,
                                  BidirectionalIterator last);

template<class BidirectionalIterator, class Compare>
  constexpr bool next_permutation(BidirectionalIterator first,
                                  BidirectionalIterator last, Compare comp);

template<bidirectional_iterator I, sentinel_for<I> S, class Comp = ranges::less,
         class Proj = identity>
  requires sortable<I, Comp, Proj>
  constexpr ranges::next_permutation_result<I>
    ranges::next_permutation(I first, S last, Comp comp = {}, Proj proj = {});
template<bidirectional_range R, class Comp = ranges::less,
         class Proj = identity>
  requires sortable<iterator_t<R>, Comp, Proj>
  constexpr ranges::next_permutation_result<safe_iterator_t<R>>
    ranges::next_permutation(R&& r, Comp comp = {}, Proj proj = {});
[codeblock:end]

[begin:description]
[para]
[:e] Let [`comp] be [`less{}] and [`proj] be [`identity{}] for the overloads
with no parameters by those names.
[:zh_CN] 对于不带有这些名字的形参的重载，令 [`comp] 为 [`less()]，[`proj] 为
[`identity{}]。

[para:requires]
[:en] For the overloads in namespace [`std], [`BidirectionalIterator] shall meet
the [*Cpp17ValueSwappable] requirements ([#swappable.requirements]).
[:zh_CN] 对于命名空间 [`std] 中的各重载，[`BidirectionalIterator] 应当满足
[*Cpp17ValueSwappable] 的规定（[#swappable.requirements]）。

[para:effects]
[:en] Takes a sequence defined by the range [=range(first,last)] and transforms
it into the next permutation.
[:zh_CN] 接受由范围 [=range(first,last)] 所定义的序列，并将其变换为其下一个排列。

[:en] The next permutation is found by assuming that the set of all permutations
is lexicographically sorted with respect to [`comp] and [`proj].
[:zh_CN] 下一个排列是通过假定所有排列的集合是根据 [`comp] 和 [`proj] 进行字典序
排序而找到的。

[:en] If no such permutation exists, transforms the sequence into the first
permutation; that is, the ascendingly-sorted one.
[:zh_CN] 如果不存在这种排列，则将序列变换为第一个排列；亦即按升序排列。

[para:returns]
[:en] Let [`B] be [`true] if a next permutation was found and otherwise [`false].
[:zh_CN] 令 [`B] 当找到了下一个排列时为 [`true] 否则为 [`false]。

[:en] Returns:
[:zh_CN] 返回：

[list]
[item]
[:en@~] [`B] for the overloads in namespace [`std], or
[:zh_CN@~] 对于命名空间 [`std] 中的各重载，返回 [`B]，或者
[item]
[:en@~] [`{ B, last }] for the overloads in namespace [`ranges].
[:zh_CN@~] 对于命名空间 [`ranges] 中的各重载，返回 [`{ B, last }]。
[list:end]

[para:complexity]
[:en] At most [`(last - first) / 2] swaps.
[:zh_CN] 最多进行 [`(last - first) / 2] 次交换。
[end:description]

[%@library prev_permutation]
[codeblock:declaration]
template<class BidirectionalIterator>
  constexpr bool prev_permutation(BidirectionalIterator first,
                                  BidirectionalIterator last);

template<class BidirectionalIterator, class Compare>
  constexpr bool prev_permutation(BidirectionalIterator first,
                                  BidirectionalIterator last, Compare comp);

template<bidirectional_iterator I, sentinel_for<I> S, class Comp = ranges::less,
         class Proj = identity>
  requires sortable<I, Comp, Proj>
  constexpr ranges::prev_permutation_result<I>
    ranges::prev_permutation(I first, S last, Comp comp = {}, Proj proj = {});
template<bidirectional_range R, class Comp = ranges::less,
         class Proj = identity>
  requires sortable<iterator_t<R>, Comp, Proj>
  constexpr ranges::prev_permutation_result<safe_iterator_t<R>>
    ranges::prev_permutation(R&& r, Comp comp = {}, Proj proj = {});
[codeblock:end]

[begin:description]
[para]
[:e] Let [`comp] be [`less{}] and [`proj] be [`identity{}] for the overloads
with no parameters by those names.
[:zh_CN] 对于不带有这些名字的形参的重载，令 [`comp] 为 [`less()]，[`proj] 为
[`identity{}]。

[para:requires]
[:en] For the overloads in namespace [`std], [`BidirectionalIterator] shall meet
the [*Cpp17ValueSwappable] requirements ([#swappable.requirements]).
[:zh_CN] 对于命名空间 [`std] 中的各重载，[`BidirectionalIterator] 应当满足
[*Cpp17ValueSwappable] 的规定（[#swappable.requirements]）。

[para:effects]
[:en] Takes a sequence defined by the range [=range(first,last)] and transforms
it into the previous permutation.
[:zh_CN] 接受由范围 [=range(first,last)] 所定义的序列，并将其变换为其前一个排列。

[:en] The previous permutation is found by assuming that the set of all
permutations is lexicographically sorted with respect to [`comp] and [`proj].
[:zh_CN] 前一个排列是通过假定所有排列的集合是根据 [`comp] 和 [`proj] 进行字典序
排序而找到的。

[:en] If no such permutation exists, transforms the sequence into the last
permutation; that is, the descendingly-sorted one.
[:zh_CN] 如果不存在这种排列，则将序列变换为最后一个排列；亦即按降序排列。

[para:returns]
[:en] Let [`B] be [`true] if a previous permutation was found and otherwise
[`false].
[:zh_CN] 令 [`B] 当找到了前一个排列时为 [`true] 否则为 [`false]。

[:en] Returns:
[:zh_CN] 返回：

[list]
[item]
[:en@~] [`B] for the overloads in namespace [`std], or
[:zh_CN@~] 对于命名空间 [`std] 中的各重载，返回 [`B]，或者
[item]
[:en@~] [`{ B, last }] for the overloads in namespace [`ranges].
[:zh_CN@~] 对于命名空间 [`ranges] 中的各重载，返回 [`{ B, last }]。
[list:end]

[para:complexity]
[:en] At most [`(last - first) / 2] swaps.
[:zh_CN] 最多进行 [`(last - first) / 2] 次交换。
[end:description]
