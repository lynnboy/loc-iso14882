[section#algorithms.parallel.defns
    [:en] Terms and definitions
    [:zh_CN] 术语和定义
]

[para]
[:en] A [+parallel algorithm] is a function template listed in this document
with a template parameter named [`ExecutionPolicy].
[:zh_CN] [+并行算法]，是本文档中所列出的带有一个名为 [`ExecutionPolicy] 的模板
形参的函数模板。

[para]
[:en] Parallel algorithms access objects indirectly accessible via their
arguments by invoking the following functions:
[:zh_CN] 并行算法通过调用下列函数来访问可间接访问的对象：

[list]
[item]
[:en] All operations of the categories of the iterators that the algorithm is
instantiated with.
[:zh_CN] 用以实例化该算法的迭代器的所属类别的所有操作。

[item]
[:en] Operations on those sequence elements that are required by its
specification.
[:zh_CN] 由其说明中所规定的对于这些序列元素的操作。

[item]
[:en] User-provided function objects to be applied during the execution of the
algorithm, if required by the specification.
[:zh_CN] 当说明有所规定时，由用户提供的用以在算法的执行过程中运用的函数对象。

[item]
[:en] Operations on those function objects required by the specification.
[:zh_CN] 由其说明所规定的对这些函数对象的操作。

[begin:note]
[:en] See [#algorithms.requirements].
[:zh_CN] 参见 [#algorithms.requirements]。
[end:note]
[list:end]

[:en] These functions are herein called [+element access functions].
[:zh_CN] 这些函数自此将被称为[+元素访问函数]。

[begin:example]
[:en] The [`sort] function may invoke the following element access functions:
[:zh_CN] [`sort] 函数可以调用下列各元素访问函数：

[list]
[item]
[:en] Operations of the random-access iterator of the actual template argument
(as per [#random.access.iterators]), as implied by the name of the template
parameter [`RandomAccessIterator].
[:zh_CN] 对其实际的模板实参上的各种随机访问迭代器的操作
（据 [#random.access.iterators]），这是由模板形参 [`RandomAccessIterator] 的名字
所要求的。

[item]
[:en] The [`swap] function on the elements of the sequence (as per the
preconditions specified in [#sort]).
[:zh_CN] 对序列的个元素的 [`swap] 函数（根据 [#sort] 中所指定的前条件）。

[item]
[:en] The user-provided [`Compare] function object.
[:zh_CN] 用户提供的 [`Compare] 函数对象。
[list:end]
[end:example]

[para]
[:en] A standard library function is [+vectorization-unsafe] if it is specified
to synchronize with another function invocation, or another function invocation
is specified to synchronize with it, and if it is not a memory allocation or
deallocation function.
[:zh_CN] 如果某个标准程序库函数被指定为同步于其他函数调用，或者有其他函数被指定
为调用同步于它，并且它并非是内存分配或回收函数，则它是[+向量化不安全]的。

[begin:note]
[:en] Implementations must ensure that internal synchronization inside standard
library functions does not prevent forward progress when those functions are
executed by threads of execution with weakly parallel forward progress
guarantees.
[:zh_CN] 各实现必须保证标准程序库函数间的内部同步操作，当这些函数在具有弱并行
向前进展保证的执行线程中执行时，不会妨碍向前进展保证。
[end:note]

[begin:example]
[codeblock]
int x = 0;
std::mutex m;
void f() {
  int a[] = {1,2};
  std::for_each(std::execution::par_unseq, std::begin(a), std::end(a), [&](int) {
    std::lock_guard<mutex> guard(m);            // [:en] incorrect: [`lock_guard] constructor calls [`m.lock()] \
                                                   [:zh_CN] 不正确：[`lock_guard] 的构造函数调用了 [`m.lock()]
  ++x;
  });
}
[codeblock:end]

[:en] The above program may result in two consecutive calls to [`m.lock()] on
the same thread of execution (which may deadlock), because the applications of
the function object are not guaranteed to run on different threads of execution.
[:zh_CN] 以上程序可能导致在同一个执行线程上连续两次调用 [`m.lock()]（这可能导致
死锁），这是由于并未保证在不同的执行线程中运用函数对象。
[end:example]
