[section#special.mem.concepts
    [:en] Special memory concepts
    [:zh_CN] 专门的内存概念
]

[para]
[:en] Some algorithms in this subclause are constrained with the following
exposition-only concepts:
[:zh_CN] 本子条款中的某些算法是被以下仅用于阐释的概念所约束的：

[codeblock:declaration]
template<class I>
concept [[redoc("*:c@def>")]]nothrow-input-iterator = // [=expos]
  [[redoc("`:c>")]]input_iterator<I> &&
  is_lvalue_reference_v<iter_reference_t<I>> &&
  [[redoc("`:c>")]]same_as<remove_cvref_t<iter_reference_t<I>>, iter_value_t<I>>;
[codeblock:end]

[div:description]
[para]
[:en] A type [`I] models [*:c nothrow-input-iterator] only if no exceptions are
thrown from increment, copy construction, move construction, copy assignment,
move assignment, or indirection through valid iterators.
[:zh_CN] 仅当增量，复制构造，移动构造，复制赋值，移动赋值，或者通过有效迭代器所
进行的间接等操作，都不抛出异常时，类型 [`I] 构成 [*:c nothrow-input-iterator]。

[para]
[begin:note]
[:en] This concept allows some [`:c input_iterator] ([#iterator.concept.input])
operations to throw exceptions.
[:zh_CN] 这个概念允许某些 [`:c input_iterator]（[#iterator.concept.input]）的
操作抛出异常。
[end:note]
[div:end]

[codeblock:declaration]
template<class S, class I>
concept [[redoc("*:c@def>")]]nothrow-sentinel-for = [[redoc("`:c>")]]sentinel_for<S, I>; // [=expos]
[codeblock:end]

[div:description]
[para]
[:en] Types [`S] and [`I] model [*:c nothrow-sentinel-for] only if no exceptions
are thrown from copy construction, move construction, copy assignment, move
assignment, or comparisons between valid values of type [`I] and [`S].
[:zh_CN] 仅当类型 [`I] 和 [`S] 的复制构造，移动构造，复制赋值，移动赋值，或者在
[`I] 和 [`S] 类型的有效值之间进行的比较等操作，都不抛出异常时，它们构成
[*:c nothrow-sentinel-for]。

[para]
[begin:note]
[:en] This concept allows some [`:c sentinel_for] ([#iterator.concept.sentinel])
operations to throw exceptions.
[:zh_CN] 这个概念允许某些 [`:c sentinel_for]（[#iterator.concept.sentinel]）的操作抛出异常。
[end:note]
[div:end]

[codeblock:declaration]
template<class S, class I>
concept [[redoc("*:c@def>")]]nothrow-sized-sentinel-for = // [=expos]
  [[redoc("*:c>")]]nothrow-sentinel-for<S, I> &&
  [[redoc("`:c>")]]sized_sentinel_for<S, I>;
[codeblock:end]

[div:description]
[para]
[:en] Types [`S] and [`I] model [*:c nothrow-sized-sentinel-for] only if no
exceptions are thrown from the [`-] operator for valid values of type [`I] and [`S].
[:zh_CN] 仅当类型 [`I] 和 [`S] 的 [`-] 运算符对 [`I] 和 [`S] 类型的有效值不抛出异常时，
它们构成 [*:c nothrow-sized-sentinel-for]。

[para]
[begin:note]
[:en] This concept allows some [`:c sized_sentinel_for] ([#iterator.concept.sizedsentinel])
operations to throw exceptions.
[:zh_CN] 这个概念允许某些 [`:c sized_sentinel_for]（[#iterator.concept.sizedsentinel]）
的操作抛出异常。
[end:note]
[div:end]

[codeblock:declaration]
template<class R>
concept [[redoc("*:c@def>")]]nothrow-input-range = // [=expos]
  [[redoc("`:c>")]]range<R> &&
  [[redoc("*:c>")]]nothrow-input-iterator<iterator_t<R>> &&
  [[redoc("*:c>")]]nothrow-sentinel-for<sentinel_t<R>, iterator_t<R>>;
[codeblock:end]

[div:description]
[para]
[:en] A type [`R] models [*:c nothrow-input-range] only if no exceptions are
thrown from calls to [`ranges::begin] and [`ranges::end] on an object of type [`R].
[:zh_CN] 仅当在 [`R] 类型的对象上调用的 [`ranges::begin] 和 [`ranges::end] 不
抛出异常时，类型 [`R] 构成 [*:c nothrow-input-range]。
[div:end]

[codeblock:declaration]
template<class I>
concept [[redoc("*:c@def>")]]nothrow-forward-iterator = // [=expos]
  [[redoc("*:c>")]]nothrow-input-iterator<I> &&
  [[redoc("`:c>")]]forward_iterator<I> &&
  [[redoc("*:c>")]]nothrow-sentinel-for<I, I>;
[codeblock:end]

[div:description]
[para]
[begin:note]
[:en] This concept allows some [`:c forward_iterator]
([#iterator.concept.forward]) operations to throw exceptions.
[:zh_CN] 这个概念允许某些 [`:c forward_iterator]（[#iterator.concept.forward]）
的操作抛出异常。
[end:note]
[div:end]

[codeblock:declaration]
template<class R>
concept [[redoc("*:c@def>")]]nothrow-forward-range = // [=expos]
  [[redoc("*:c>")]]nothrow-input-range<R> &&
  [[redoc("*:c>")]]nothrow-forward-iterator<iterator_t<R>>;
[codeblock:end]

[codeblock:declaration]
template<class I>
concept [[redoc("*:c@def>")]]nothrow-bidirectional-iterator = // [=expos]
  [[redoc("*:c>")]]nothrow-forward-iterator<I> &&
  [[redoc("`:c>")]]bidirectional_iterator<I>;
[codeblock:end]

[div:description]
[para]
[:en] A type [`I] models [*:c nothrow-bidirectional-iterator] only if no
exceptions are thrown from decrementing valid iterators.
[:zh_CN] 仅当在对有效迭代器的减量不抛出异常时，类型 [`I] 构成
[*:c nothrow-bidirectional-iterator]。

[begin:note]
[:en] This concept allows some [`:c bidirectional_iterator]
([#iterator.concept.bidir]) operations to throw exceptions.
[:zh_CN] 这个概念允许某些 [`:c bidirectional_iterator]（[#iterator.concept.bidir]）
的操作抛出异常。
[end:note]
[div:end]

[codeblock:declaration]
template<class R>
concept [[redoc("*:c@def>")]]nothrow-bidirectional-range = // [=expos]
  [[redoc("*:c>")]]nothrow-forward-range<R> &&
  [[redoc("*:c>")]]nothrow-bidirectional-iterator<iterator_t<R>>;
[codeblock:end]

[codeblock:declaration]
template<class I>
concept [[redoc("*:c@def>")]]nothrow-random-access-iterator = // [=expos]
  [[redoc("*:c>")]]nothrow-bidirectional-iterator<I> &&
  [[redoc("`:c>")]]random_access_iterator<I> &&
  [[redoc("*:c>")]]nothrow-sized-sentinel-for<I, I> &&
[codeblock:end]

[div:description]
[para]
[:en] A type [`I] models [*:c nothrow-random-access-iterator] only if no
exceptions are thrown from comparisons of valid iterators,
or the [`-], [`+], [`-=], [`+=], [``[`]] operators
on valid values of type [`I] and [`iter_difference_t<T>].
[:zh_CN] 仅当在有效迭代器的比较，或对类型 [`I] 和 [`iter_difference_t<T>] 的有效值的
[`-]、[`+]、[`-=]、[`+=] 和 [``[`]] 等运算符不抛出异常时，类型 [`I] 构成
[*:c nothrow-random-access-iterator]。

[begin:note]
[:en] This concept allows some [`:c random_access_iterator]
([#iterator.concept.random.access]) operations to throw exceptions.
[:zh_CN] 这个概念允许某些 [`:c random_access_iterator]（[#iterator.concept.random.access]）
的操作抛出异常。
[end:note]
[div:end]

[codeblock:declaration]
template<class R>
concept [[redoc("*:c@def>")]]nothrow-random-access-range = // [=expos]
  [[redoc("*:c>")]]nothrow-bidirectional-range<R> &&
  [[redoc("*:c>")]]nothrow-random-access-iterator<iterator_t<R>>;

template<class R>
concept @\defexposconcept{nothrow-sized-random-access-range}@ = // \expos
  @\exposconcept{nothrow-random-access-range}@<R> && @\libconcept{sized_range}@<R>;
[codeblock:end]

[div:description]
[para]
[:en] A type [`R] models [*:c nothrow-sized-random-access-range] only if no
exceptions are thrown from the call to [`ranges::size] on an object of type [`R].
[:zh_CN] 仅当对类型 [`R] 的对象调用 [`ranges::size] 不抛出异常时，类型 [`R] 构成
[*:c nothrow-sized-random-access-range]。
[div:end]
