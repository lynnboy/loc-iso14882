[section#alg.find.first.of
    [:en] Find first
    [:zh_CN] 查找首个……
]

[%@lib find_first_of]
[codeblock:declaration]
template<class InputIterator, class ForwardIterator>
  constexpr InputIterator
    find_first_of(InputIterator first1, InputIterator last1,
                  ForwardIterator first2, ForwardIterator last2);
template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2>
  ForwardIterator1
    find_first_of(ExecutionPolicy&& exec,
                  ForwardIterator1 first1, ForwardIterator1 last1,
                  ForwardIterator2 first2, ForwardIterator2 last2);

template<class InputIterator, class ForwardIterator,
         class BinaryPredicate>
  constexpr InputIterator
    find_first_of(InputIterator first1, InputIterator last1,
                  ForwardIterator first2, ForwardIterator last2,
                  BinaryPredicate pred);
template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2,
         class BinaryPredicate>
  ForwardIterator1
    find_first_of(ExecutionPolicy&& exec,
                  ForwardIterator1 first1, ForwardIterator1 last1,
                  ForwardIterator2 first2, ForwardIterator2 last2,
                  BinaryPredicate pred);

template<[[redoc("`:c>")]]input_iterator I1, [[redoc("`:c>")]]sentinel_for<I1> S1, [[redoc("`:c>")]]forward_iterator I2, [[redoc("`:c>")]]sentinel_for<I2> S2,
         class Pred = ranges::equal_to, class Proj1 = identity, class Proj2 = identity>
  requires [[redoc("`:c>")]]indirectly_comparable<I1, I2, Pred, Proj1, Proj2>
  constexpr I1 ranges::find_first_of(I1 first1, S1 last1, I2 first2, S2 last2,
                                     Pred pred = {},
                                     Proj1 proj1 = {}, Proj2 proj2 = {});
template<[[redoc("`:c>")]]input_range R1, [[redoc("`:c>")]]forward_range R2,
         class Pred = ranges::equal_to, class Proj1 = identity, class Proj2 = identity>
  requires [[redoc("`:c>")]]indirectly_comparable<iterator_t<R1>, iterator_t<R2>, Pred, Proj1, Proj2>
  constexpr borrowed_iterator_t<R1>
    ranges::find_first_of(R1&& r1, R2&& r2,
                          Pred pred = {},
                          Proj1 proj1 = {}, Proj2 proj2 = {});
[codeblock:end]

[div:description]
[para]
[:en] Let [$E] be:
[:zh_CN] 令 [$E]：

[list]
[item]
[:en@~] [`*i == *j] for the overloads with no parameter [`pred];
[:zh_CN@~] 对于没有形参 [`pred] 的重载为 [`*i == *j]；
[item]
[:en@~] [`pred(*i, *j) != false] for the overloads with a parameter [`pred] and
no parameter [`proj1];
[:zh_CN@~] 对于带有形参 [`pred] 且没有形参 [`proj1] 的重载为
[`pred(*i, *j) != false]；
[item]
[:en@~] [`bool(invoke(pred, invoke(proj1, *i), invoke(proj2, *j)))] for the
overloads with parameters [`pred] and [`proj1].
[:zh_CN@~] 对于带有形参 [`pred] 和 [`proj1] 的重载为
[`bool(invoke(pred, invoke(proj, *i), invoke(proj2, *j)))]。
[list:end]

[para:effects]
[:en] Finds an element that matches one of a set of values.
[:zh_CN] 查找与一组值之一相匹配的元素。

[para:returns]
[:en] The first iterator [`i] in the range [=range(first1,last1)] such that for
some iterator [`j] in the range [=range(first2,last2)] [$E] holds.
[:zh_CN] 范围 [=range(first1,last1)] 中第一个迭代器 [`i]，使得对于范围
[=range(first2,last2)] 中的某个迭代器 [`j]，[$E] 成立。

[:en] Returns [`last1] if [=range(first2,last2)] is empty or if no such iterator
is found.
[:zh_CN] 如果 [=range(first2,last2)] 为空或者如果未找到这种迭代器，则返回
[`last1]。

[para:complexity]
[:en] At most [`(last1-first1) * (last2-first2)] applications of the
corresponding predicate and any projections.
[:zh_CN] 最多进行 [`(last1-first1) * (last2-first2)] 次相应谓词和任何投射的运用。
[div:end]
