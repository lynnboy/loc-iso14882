[section#includes
    [`includes]
]

[%@lib includes]
[codeblock:declaration]
template<class InputIterator1, class InputIterator2>
  constexpr bool includes(InputIterator1 first1, InputIterator1 last1,
                          InputIterator2 first2, InputIterator2 last2);
template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2>
  bool includes(ExecutionPolicy&& exec,
                ForwardIterator1 first1, ForwardIterator1 last1,
                ForwardIterator2 first2, ForwardIterator2 last2);

template<class InputIterator1, class InputIterator2, class Compare>
  constexpr bool includes(InputIterator1 first1, InputIterator1 last1,
                          InputIterator2 first2, InputIterator2 last2,
                          Compare comp);
template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2, class Compare>
  bool includes(ExecutionPolicy&& exec,
                ForwardIterator1 first1, ForwardIterator1 last1,
                ForwardIterator2 first2, ForwardIterator2 last2,
                Compare comp);

template<input_iterator I1, sentinel_for<I1> S1, input_iterator I2, sentinel_for<I2> S2,
         class Proj1 = identity, class Proj2 = identity,
         indirect_strict_weak_order<projected<I1, Proj1>,
                                    projected<I2, Proj2>> Comp = ranges::less>
  constexpr bool ranges::includes(I1 first1, S1 last1, I2 first2, S2 last2, Comp comp = {},
                                  Proj1 proj1 = {}, Proj2 proj2 = {});
template<input_range R1, input_range R2, class Proj1 = identity,
         class Proj2 = identity,
         indirect_strict_weak_order<projected<iterator_t<R1>, Proj1>,
                                    projected<iterator_t<R2>, Proj2>> Comp = ranges::less>
  constexpr bool ranges::includes(R1&& r1, R2&& r2, Comp comp = {},
                                  Proj1 proj1 = {}, Proj2 proj2 = {});
[codeblock:end]

[div:description]
[para]
[:en] Let [`comp] be [`less{}], [`proj1] be [`identity{}], and [`proj2] be
[`identity{}], for the overloads with no parameters by those names.
[:zh_CN] 对于不带有这些名字的形参的重载，令 [`comp] 为 [`less()]，[`proj1] 为
[`identity{}]，以及 [`proj2] 为 [`identity{}]。

[para:expects]
[:en] The ranges [=range(first1,last1)] and [=range(first2,last2)] are sorted
with respect to [`comp] and [`proj1] or [`proj2], respectively.
[:zh_CN] 范围 [=range(first1,last1)] 和 [=range(first2,last2)] 分别根据
[`comp] 和 [`proj1] 或 [`proj2] 有序。

[para:returns]
[:en] [`true] if and only if [=range(first2,last2)] is a subsequence of
[=range(first1,last1)].
[:zh_CN] 当且仅当 [=range(first2,last2)] 是 [=range(first1,last1)] 的子序列时
返回 [`true]。

[begin:note]
[:en] A sequence [$S] is a subsequence of another sequence [$T] if [$S] can be
obtained from [$T] by removing some, all, or none of [$T][=']s elements and
keeping the remaining elements in the same order.
[:zh_CN] 如果某个序列 [$S]，可以通过从另一个序列 [$T] 中，将某些、全部或零个
[$T] 的元素移除并保持剩余的元素顺序不变，而得到 [$S]，则 [$S] 是 [$T] 的子序列。
[end:note]

[para:complexity]
[:en] At most [`2 * ((last1 - first1) + (last2 - first2)) - 1] comparisons and
applications of each projection.
[:zh_CN] 最多进行 [`2 * ((last1 - first1) + (last2 - first2)) - 1] 次比较和每种
投射的运用。
[div:end]
