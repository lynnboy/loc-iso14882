[section#numeric.iota
    [:en] Iota
    [:zh_CN] iota
]

[%@lib iota]
[codeblock:declaration]
template<class ForwardIterator, class T>
  constexpr void iota(ForwardIterator first, ForwardIterator last, T value);
[codeblock:end]

[div:description]
[para:mandates]
[:en] [`T] is convertible to [`ForwardIterator][=']s value type.
[:zh_CN] [`T] 可以转换为 [`ForwardIterator] 的值类型。

[:en] The expression [`++val], where [`val] has type [`T], is well-formed.
[:zh_CN] 表达式 [`++val]（其中 [`val] 类型为 [`T]）是良构的。

[para:effects]
[:en] For each element referred to by the iterator [`i] in the range
[=range(first,last)], assigns [`*i = value] and increments [`value] as if by
[`++value].
[:zh_CN] 对于范围 [=range(first,last)] 中的迭代器 [`i] 所指代的每个元素，进行
赋值 [`*i = value] 并以如同 [`++value] 来对 [`value] 增量。

[para:complexity]
[:en] Exactly [`last - first] increments and assignments.
[:zh_CN] 恰好 [`last - first] 次增量和赋值。
[div:end]

[codeblock:declaration]
template<[[redoc("`:c>")]]input_or_output_iterator O, [[redoc("`:c>")]]sentinel_for<O> S, [[redoc("`:c>")]]weakly_incrementable T>
  requires [[redoc("`:c>")]]indirectly_writable<O, const T&>
  constexpr ranges::iota_result<O, T> ranges::iota(O first, S last, T value);
template<[[redoc("`:c>")]]weakly_incrementable T, [[redoc("`:c>")]]output_range<const T&> R>
  constexpr ranges::iota_result<borrowed_iterator_t<R>, T> ranges::iota(R&& r, T value);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
while (first != last) {
  *first = as_const(value);
  ++first;
  ++value;
}
return {std::move(first), std::move(value)};
[codeblock:end]
[div:end]
