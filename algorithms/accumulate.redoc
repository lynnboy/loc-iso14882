[section#accumulate
    [:en] Accumulate
    [:zh_CN] 累加
]

[%@lib accumulate]
[codeblock:declaration]
template<class InputIterator, class T>
  constexpr T accumulate(InputIterator first, InputIterator last, T init);
template<class InputIterator, class T, class BinaryOperation>
  constexpr T accumulate(InputIterator first, InputIterator last, T init,
                         BinaryOperation binary_op);
[codeblock:end]

[div:description]
[para:expects]
[:en] [`T] meets the [^:oc CopyConstructible] ([#:tab#cpp17.copyconstructible])
and [^:oc CopyAssignable] ([#:tab#cpp17.copyassignable]) requirements.
[:zh_CN] [`T] 满足 [^:oc CopyConstructible]（[#:tab#cpp17.copyconstructible]）
和 [^:oc CopyAssignable]（[#:tab#cpp17.copyassignable]）的规定。

[:en] In the range [=crange(first,last)], [`binary_op] neither modifies elements
nor invalidate iterators or subranges.[#:fn#]
[:zh_CN] 在范围 [=crange(first,last)] 中，[`binary_op] 既不会改动任何元素也不会
使任何迭代器或子范围失效。[#:fn#]

[note:foot]
[:en] The use of fully closed ranges is intentional
[:zh_CN] 特意使用全闭合范围。
[note:end]

[para:effects]
[:en] Computes its result by initializing the accumulator [`acc] with the
initial value [`init] and then modifies it with [`acc = std::move(acc) + *i] or
[`acc = binary_op(std::move(acc), *i)] for every iterator [`i] in the range
[=range(first,last)] in order.[#:fn#]
[:zh_CN] 这样来计算其结果：以初始值 [`init] 来初始化累加数 [`acc]，然后对于范围
[=range(first,last)] 中的每个迭代器 [`i]，依次通过 [`acc = std::move(acc) + *i]
或 [`acc = binary_op(std::move(acc), *i)] 对其进行改动。[#:fn#]

[note:foot]
[:en] [`accumulate] is similar to the APL reduction operator and Common Lisp
reduce function, but it avoids the difficulty of defining the result of
reduction on an empty sequence by always requiring an initial value.
[:zh_CN] [`accumulate] 和 APL 的归约运算符以及 Common Lisp 的归约函数很相似，但
它通过总是要求一个初始值的方式避免了在空序列上定义归约结果的麻烦。
[note:end]
[div:end]
