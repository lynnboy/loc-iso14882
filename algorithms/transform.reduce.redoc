[section#transform.reduce
    [:en] Transform reduce
    [:zh_CN] 变换归约
]

[%@library transform_reduce]
[codeblock:declaration]
template<class InputIterator1, class InputIterator2, class T>
  T transform_reduce(InputIterator1 first1, InputIterator1 last1,
                     InputIterator2 first2,
                     T init);
[codeblock:end]

[begin:description]
[para:effects]
[:en] Equivalent to:

[codeblock:notation]
return transform_reduce(first1, last1, first2, init, plus<>(), multiplies<>());
[codeblock:end]
[end:description]

[%@library transform_reduce]
[codeblock:declaration]
template<class ExecutionPolicy,
          class ForwardIterator1, class ForwardIterator2, class T>
  T transform_reduce(ExecutionPolicy&& exec,
                     ForwardIterator1 first1, ForwardIterator1 last1,
                     ForwardIterator2 first2,
                     T init);
[codeblock:end]

[begin:description]
[para:effects]
[:en] Equivalent to:

[codeblock:notation]
return transform_reduce(std::forward<ExecutionPolicy>(exec),
                        first1, last1, first2, init, plus<>(), multiplies<>());
[codeblock:end]
[end:description]

[%@library transform_reduce]
[codeblock:declaration]
template<class InputIterator1, class InputIterator2, class T,
         class BinaryOperation1, class BinaryOperation2>
  T transform_reduce(InputIterator1 first1, InputIterator1 last1,
                     InputIterator2 first2,
                     T init,
                     BinaryOperation1 binary_op1,
                     BinaryOperation2 binary_op2);
template<class ExecutionPolicy,
         class ForwardIterator1, class ForwardIterator2, class T,
         class BinaryOperation1, class BinaryOperation2>
  T transform_reduce(ExecutionPolicy&& exec,
                     ForwardIterator1 first1, ForwardIterator1 last1,
                     ForwardIterator2 first2,
                     T init,
                     BinaryOperation1 binary_op1,
                     BinaryOperation2 binary_op2);
[codeblock:end]

[begin:description]
[para:requires]
[list]
[item]
[:en] [`T] shall be [^:oc MoveConstructible] ([#:tab#cpp17.moveconstructible]).
[:zh_CN] [`T] 应当为 [^:oc MoveConstructible]（[#:tab#cpp17.moveconstructible]）。

[item]
[:en] All of
[:zh_CN] 以下全部
[list]
[item]
[:en@~] [`binary_op1(init, init)],
[:zh_CN@~] [`binary_op1(init, init)]，
[item]
[:en@~] [`binary_op1(init, binary_op2(*first1, *first2))],
[:zh_CN@~] [`binary_op1(init, binary_op2(*first1, *first2))]，
[item]
[:en@~] [`binary_op1(binary_op2(*first1, *first2), init)], and
[:zh_CN@~] [`binary_op1(binary_op2(*first1, *first2), init)]，以及
[item]
[:en@~] [`binary_op1(binary_op2(*first1, *first2), binary_op2(*first1, *first2))]
[:zh_CN@~] [`binary_op1(binary_op2(*first1, *first2), binary_op2(*first1, *first2))]
[list:end]
[:en@~] shall be convertible to [`T].
[:zh_CN@~] 都应当可以转换为 [`T]。

[item]
[:en] Neither [`binary_op1] nor [`binary_op2] shall invalidate subranges, nor
modify elements in the ranges [=crange(first1,last1)] and
[=crange(first2,first2 + (last1 - first1))].
[:zh_CN] [`binary_op1] 和 [`binary_op2] 在范围 [=crange(first1,last1)] 和
[=crange(first2,first2 + (last1 - first1))] 中都不能使任何子范围失效或者改动任何
元素。
[list:end]

[para:returns]
[codeblock:notation]
[*GENERALIZED_SUM](binary_op1, init, binary_op2(*i, *(first2 + (i - first1))), ...)
[codeblock:end]

[:en] for every iterator [`i] in [=range(first1,last1)].
[:zh_CN] 对于 [=range(first1,last1)] 中的每个迭代器 [`i] 执行的结果。

[para:complexity]
[:en] [?bigoh [`last1 - first1]] applications each of [`binary_op1] and
[`binary_op2].
[:zh_CN] [`binary_op1] 和 [`binary_op2] 各运用 [?bigoh [`last1 - first1]] 次。
[end:description]

[%@library transform_reduce]
[codeblock:declaration]
template<class InputIterator, class T,
         class BinaryOperation, class UnaryOperation>
  T transform_reduce(InputIterator first, InputIterator last, T init,
                     BinaryOperation binary_op, UnaryOperation unary_op);
template<class ExecutionPolicy,
         class ForwardIterator, class T,
         class BinaryOperation, class UnaryOperation>
  T transform_reduce(ExecutionPolicy&& exec,
                     ForwardIterator first, ForwardIterator last,
                     T init, BinaryOperation binary_op, UnaryOperation unary_op);
[codeblock:end]

[begin:description]
[para:requires]
[list]
[item]
[:en] [`T] shall be [^:oc MoveConstructible] ([#:tab#cpp17.moveconstructible]).
[:zh_CN] [`T] 应当为 [^:oc MoveConstructible]（[#:tab#cpp17.moveconstructible]）。

[item]
[:en] All of
[:zh_CN] 以下全部
[list]
[item]
[:en@~] [`binary_op(init, init)],
[:zh_CN@~] [`binary_op(init, init)]，
[item]
[:en@~] [`binary_op(init, unary_op(*first))],
[:zh_CN@~] [`binary_op(init, unary_op(*first))]，
[item]
[:en@~] [`binary_op(unary_op(*first), init)], and
[:zh_CN@~] [`binary_op(unary_op(*first), init)]，以及
[item]
[:en@~] [`binary_op(unary_op(*first), unary_op(*first))]
[:zh_CN@~] [`binary_op(unary_op(*first), unary_op(*first))]
[list:end]
[:en@~] shall be convertible to [`T].
[:zh_CN@~] 都应当可以转换为 [`T]。

[item]
[:en] Neither [`unary_op] nor [`binary_op] shall invalidate subranges, nor
modify elements in the range [=crange(first,last)].
[:zh_CN] [`unary_op] 和 [`binary_op] 在范围 [=crange(first,last)] 中都不能使任何
子范围失效或者改动任何元素。
[list:end]

[para:returns]
[codeblock:notation]
[*GENERALIZED_SUM](binary_op, init, unary_op(*i), ...)
[codeblock:end]

[:en] for every iterator [`i] in [=range(first,last)].
[:zh_CN] 对于 [=range(first,last)] 中的每个迭代器 [`i] 执行的结果。

[para:complexity]
[:en] [?bigoh [`last - first]] applications each of [`unary_op] and [`binary_op].
[:zh_CN] [`unary_op] 和 [`binary_op] 各运用 [?bigoh [`last - first]] 次。

[para]
[begin:note]
[:en] [`transform_reduce] does not apply [`unary_op] to [`init].
[:zh_CN] [`transform_reduce] 并不向 [`init] 实施 [`unary_op]。
[end:note]
[end:description]
