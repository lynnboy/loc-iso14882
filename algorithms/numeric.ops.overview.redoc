[section#numeric.ops.overview
    [:en] Header [`<numeric>] synopsis
    [:zh_CN] 头文件 [`<numeric>] 纲要
]

[%@hdr@def numeric]
[codeblock:synopsis]
namespace std {
  // [:en] [#accumulate], accumulate \
  [:zh_CN] [#accumulate]，累加（accumulate）
  template<class InputIterator, class T>
    constexpr T accumulate(InputIterator first, InputIterator last, T init);
  template<class InputIterator, class T, class BinaryOperation>
    constexpr T accumulate(InputIterator first, InputIterator last, T init,
                           BinaryOperation binary_op);

  // [:en] [#reduce], reduce \
  [:zh_CN] [#reduce]，归约（reduce）
  template<class InputIterator>
    constexpr typename iterator_traits<InputIterator>::value_type
      reduce(InputIterator first, InputIterator last);
  template<class InputIterator, class T>
    constexpr T reduce(InputIterator first, InputIterator last, T init);
  template<class InputIterator, class T, class BinaryOperation>
    constexpr T reduce(InputIterator first, InputIterator last, T init,
                       BinaryOperation binary_op);
  template<class ExecutionPolicy, class ForwardIterator>
    typename iterator_traits<ForwardIterator>::value_type
      reduce(ExecutionPolicy&& exec,                            // [:en] see [#algorithms.parallel.overloads] \
                                                                [:zh_CN] 参见 [#algorithms.parallel.overloads]
             ForwardIterator first, ForwardIterator last);
  template<class ExecutionPolicy, class ForwardIterator, class T>
    T reduce(ExecutionPolicy&& exec,                            // [:en] see [#algorithms.parallel.overloads] \
                                                                [:zh_CN] 参见 [#algorithms.parallel.overloads]
             ForwardIterator first, ForwardIterator last, T init);
  template<class ExecutionPolicy, class ForwardIterator, class T, class BinaryOperation>
    T reduce(ExecutionPolicy&& exec,                            // [:en] see [#algorithms.parallel.overloads] \
                                                                [:zh_CN] 参见 [#algorithms.parallel.overloads]
             ForwardIterator first, ForwardIterator last, T init, BinaryOperation binary_op);

  // [:en] [#inner.product], inner product \
  [:zh_CN] [#inner.product]，内积
  template<class InputIterator1, class InputIterator2, class T>
    constexpr T inner_product(InputIterator1 first1, InputIterator1 last1,
                              InputIterator2 first2, T init);
  template<class InputIterator1, class InputIterator2, class T,
           class BinaryOperation1, class BinaryOperation2>
    constexpr T inner_product(InputIterator1 first1, InputIterator1 last1,
                              InputIterator2 first2, T init,
                              BinaryOperation1 binary_op1, BinaryOperation2 binary_op2);

  // [:en] [#transform.reduce], transform reduce \
  [:zh_CN] [#transform.reduce]，变换归约
  template<class InputIterator1, class InputIterator2, class T>
    constexpr T transform_reduce(InputIterator1 first1, InputIterator1 last1,
                                 InputIterator2 first2, T init);
  template<class InputIterator1, class InputIterator2, class T,
           class BinaryOperation1, class BinaryOperation2>
    constexpr T transform_reduce(InputIterator1 first1, InputIterator1 last1,
                                 InputIterator2 first2, T init,
                                 BinaryOperation1 binary_op1, BinaryOperation2 binary_op2);
  template<class InputIterator, class T,
           class BinaryOperation, class UnaryOperation>
    constexpr T transform_reduce(InputIterator first, InputIterator last, T init,
                                 BinaryOperation binary_op, UnaryOperation unary_op);
  template<class ExecutionPolicy,
           class ForwardIterator1, class ForwardIterator2, class T>
    T transform_reduce(ExecutionPolicy&& exec,                  // [:en] see [#algorithms.parallel.overloads] \
                                                                [:zh_CN] 参见 [#algorithms.parallel.overloads]
                       ForwardIterator1 first1, ForwardIterator1 last1,
                       ForwardIterator2 first2, T init);
  template<class ExecutionPolicy,
           class ForwardIterator1, class ForwardIterator2, class T,
           class BinaryOperation1, class BinaryOperation2>
    T transform_reduce(ExecutionPolicy&& exec,                  // [:en] see [#algorithms.parallel.overloads] \
                                                                [:zh_CN] 参见 [#algorithms.parallel.overloads]
                       ForwardIterator1 first1, ForwardIterator1 last1,
                       ForwardIterator2 first2, T init,
                       BinaryOperation1 binary_op1, BinaryOperation2 binary_op2);
  template<class ExecutionPolicy, class ForwardIterator, class T,
           class BinaryOperation, class UnaryOperation>
    T transform_reduce(ExecutionPolicy&& exec,                  // [:en] see [#algorithms.parallel.overloads] \
                                                                [:zh_CN] 参见 [#algorithms.parallel.overloads]
                       ForwardIterator first, ForwardIterator last, T init,
                       BinaryOperation binary_op, UnaryOperation unary_op);

  // [:en] [#partial.sum], partial sum \
  [:zh_CN] [#partial.sum]，部分和
  template<class InputIterator, class OutputIterator>
    constexpr OutputIterator
      partial_sum(InputIterator first, InputIterator last,
                  OutputIterator result);
  template<class InputIterator, class OutputIterator, class BinaryOperation>
    constexpr OutputIterator
      partial_sum(InputIterator first, InputIterator last,
                  OutputIterator result, BinaryOperation binary_op);

  // [:en] [#exclusive.scan], exclusive scan \
  [:zh_CN] [#exclusive.scan]，排除扫描
  template<class InputIterator, class OutputIterator, class T>
    constexpr OutputIterator
      exclusive_scan(InputIterator first, InputIterator last,
                     OutputIterator result, T init);
  template<class InputIterator, class OutputIterator, class T, class BinaryOperation>
    constexpr OutputIterator
      exclusive_scan(InputIterator first, InputIterator last,
                     OutputIterator result, T init, BinaryOperation binary_op);
  template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2, class T>
    ForwardIterator2
      exclusive_scan(ExecutionPolicy&& exec,                    // [:en] see [#algorithms.parallel.overloads] \
                                                                [:zh_CN] 参见 [#algorithms.parallel.overloads]
                     ForwardIterator1 first, ForwardIterator1 last,
                     ForwardIterator2 result, T init);
  template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2, class T,
           class BinaryOperation>
    ForwardIterator2
      exclusive_scan(ExecutionPolicy&& exec,                    // [:en] see [#algorithms.parallel.overloads] \
                                                                [:zh_CN] 参见 [#algorithms.parallel.overloads]
                     ForwardIterator1 first, ForwardIterator1 last,
                     ForwardIterator2 result, T init, BinaryOperation binary_op);

  // [:en] [#inclusive.scan], inclusive scan \
  [:zh_CN] [#inclusive.scan]，内含扫描
  template<class InputIterator, class OutputIterator>
    constexpr OutputIterator
      inclusive_scan(InputIterator first, InputIterator last,
                     OutputIterator result);
  template<class InputIterator, class OutputIterator, class BinaryOperation>
    constexpr OutputIterator
      inclusive_scan(InputIterator first, InputIterator last,
                     OutputIterator result, BinaryOperation binary_op);
  template<class InputIterator, class OutputIterator, class BinaryOperation, class T>
    constexpr OutputIterator
      inclusive_scan(InputIterator first, InputIterator last,
                     OutputIterator result, BinaryOperation binary_op, T init);
  template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2>
    ForwardIterator2
      inclusive_scan(ExecutionPolicy&& exec,                    // [:en] see [#algorithms.parallel.overloads] \
                                                                [:zh_CN] 参见 [#algorithms.parallel.overloads]
                     ForwardIterator1 first, ForwardIterator1 last,
                     ForwardIterator2 result);
  template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2,
           class BinaryOperation>
    ForwardIterator2
      inclusive_scan(ExecutionPolicy&& exec,                    // [:en] see [#algorithms.parallel.overloads] \
                                                                [:zh_CN] 参见 [#algorithms.parallel.overloads]
                     ForwardIterator1 first, ForwardIterator1 last,
                     ForwardIterator2 result, BinaryOperation binary_op);
  template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2,
           class BinaryOperation, class T>
    ForwardIterator2
      inclusive_scan(ExecutionPolicy&& exec,                    // [:en] see [#algorithms.parallel.overloads] \
                                                                [:zh_CN] 参见 [#algorithms.parallel.overloads]
                     ForwardIterator1 first, ForwardIterator1 last,
                     ForwardIterator2 result, BinaryOperation binary_op, T init);

  // [:en] [#transform.exclusive.scan], transform exclusive scan \
  [:zh_CN] [#transform.exclusive.scan]，变换排除扫描
  template<class InputIterator, class OutputIterator, class T,
           class BinaryOperation, class UnaryOperation>
    constexpr OutputIterator
      transform_exclusive_scan(InputIterator first, InputIterator last,
                               OutputIterator result, T init,
                               BinaryOperation binary_op, UnaryOperation unary_op);
  template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2, class T,
           class BinaryOperation, class UnaryOperation>
    ForwardIterator2
      transform_exclusive_scan(ExecutionPolicy&& exec,          // [:en] see [#algorithms.parallel.overloads] \
                                                                [:zh_CN] 参见 [#algorithms.parallel.overloads]
                               ForwardIterator1 first, ForwardIterator1 last,
                               ForwardIterator2 result, T init,
                               BinaryOperation binary_op, UnaryOperation unary_op);

  // [:en] [#transform.inclusive.scan], transform inclusive scan \
  [:zh_CN] [#transform.inclusive.scan]，变换内含扫描
  template<class InputIterator, class OutputIterator,
           class BinaryOperation, class UnaryOperation>
    constexpr OutputIterator
      transform_inclusive_scan(InputIterator first, InputIterator last,
                               OutputIterator result,
                               BinaryOperation binary_op, UnaryOperation unary_op);
  template<class InputIterator, class OutputIterator,
           class BinaryOperation, class UnaryOperation, class T>
    constexpr OutputIterator
      transform_inclusive_scan(InputIterator first, InputIterator last,
                               OutputIterator result,
                               BinaryOperation binary_op, UnaryOperation unary_op, T init);
  template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2,
           class BinaryOperation, class UnaryOperation>
    ForwardIterator2
      transform_inclusive_scan(ExecutionPolicy&& exec,          // [:en] see [#algorithms.parallel.overloads] \
                                                                [:zh_CN] 参见 [#algorithms.parallel.overloads]
                               ForwardIterator1 first, ForwardIterator1 last,
                               ForwardIterator2 result, BinaryOperation binary_op,
                               UnaryOperation unary_op);
  template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2,
           class BinaryOperation, class UnaryOperation, class T>
    ForwardIterator2
      transform_inclusive_scan(ExecutionPolicy&& exec,          // [:en] see [#algorithms.parallel.overloads] \
                                                                [:zh_CN] 参见 [#algorithms.parallel.overloads]
                               ForwardIterator1 first, ForwardIterator1 last,
                               ForwardIterator2 result,
                               BinaryOperation binary_op, UnaryOperation unary_op, T init);

  // [:en] [#adjacent.difference], adjacent difference \
  [:zh_CN] [#adjacent.difference]，临差
  template<class InputIterator, class OutputIterator>
    constexpr OutputIterator
      adjacent_difference(InputIterator first, InputIterator last,
                          OutputIterator result);
  template<class InputIterator, class OutputIterator, class BinaryOperation>
    constexpr OutputIterator
      adjacent_difference(InputIterator first, InputIterator last,
                          OutputIterator result, BinaryOperation binary_op);
  template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2>
    ForwardIterator2
      adjacent_difference(ExecutionPolicy&& exec,               // [:en] see [#algorithms.parallel.overloads] \
                                                                [:zh_CN] 参见 [#algorithms.parallel.overloads]
                          ForwardIterator1 first, ForwardIterator1 last,
                          ForwardIterator2 result);
  template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2,
           class BinaryOperation>
    ForwardIterator2
      adjacent_difference(ExecutionPolicy&& exec,               // [:en] see [#algorithms.parallel.overloads] \
                                                                [:zh_CN] 参见 [#algorithms.parallel.overloads]
                          ForwardIterator1 first, ForwardIterator1 last,
                          ForwardIterator2 result, BinaryOperation binary_op);

  // [:en] [#numeric.iota], iota \
  [:zh_CN] [#numeric.iota]，iota
  template<class ForwardIterator, class T>
    constexpr void iota(ForwardIterator first, ForwardIterator last, T value);

  namespace ranges {
    template<class O, class T>
      using iota_result = out_value_result<O, T>;

    template<[[redoc("`:c>")]]input_or_output_iterator O, [[redoc("`:c>")]]sentinel_for<O> S, [[redoc("`:c>")]]weakly_incrementable T>
      requires [[redoc("`:c>")]]indirectly_writable<O, const T&>
      constexpr iota_result<O, T> iota(O first, S last, T value);

    template<[[redoc("`:c>")]]weakly_incrementable T, [[redoc("`:c>")]]output_range<const T&> R>
      constexpr iota_result<borrowed_iterator_t<R>, T> iota(R&& r, T value);
  }

  // [:en] [#numeric.ops.gcd], greatest common divisor \
  [:zh_CN] [#numeric.ops.gcd]，最大公约数
  template<class M, class N>
    constexpr common_type_t<M, N> gcd(M m, N n);

  // [:en] [#numeric.ops.lcm], least common multiple \
  [:zh_CN] [#numeric.ops.lcm]，最小公倍数
  template<class M, class N>
    constexpr common_type_t<M, N> lcm(M m, N n);

  // [:en] [#numeric.ops.midpoint], midpoint \
  [:zh_CN] [#numeric.ops.midpoint]，中点
  template<class T>
    constexpr T midpoint(T a, T b) noexcept;
  template<class T>
    constexpr T* midpoint(T* a, T* b);

  // [:en] [#numeric.sat], saturation arithmetic \
  [:zh_CN] [#numeric.sat]，饱和算术
  template<class T>
    constexpr T add_sat(T x, T y) noexcept;                     // [=freestanding]
  template<class T>
    constexpr T sub_sat(T x, T y) noexcept;                     // [=freestanding]
  template<class T>
    constexpr T mul_sat(T x, T y) noexcept;                     // [=freestanding]
  template<class T>
    constexpr T div_sat(T x, T y) noexcept;                     // [=freestanding]
  template<class T, class U>
    constexpr T saturate_cast(U x) noexcept;                    // [=freestanding]
}
[codeblock:end]
