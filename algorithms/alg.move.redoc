[section#alg.move
    [:en] Move
    [:zh_CN] 移动
]

[%@lib@raw [`move][![:en]algorithm[:zh_CN]算法]]
[codeblock:declaration]
template<class InputIterator, class OutputIterator>
  constexpr OutputIterator move(InputIterator first, InputIterator last,
                                OutputIterator result);

template<[[redoc("`:c>")]]input_iterator I, [[redoc("`:c>")]]sentinel_for<I> S, [[redoc("`:c>")]]weakly_incrementable O>
  requires [[redoc("`:c>")]]indirectly_movable<I, O>
  constexpr ranges::move_result<I, O>
    ranges::move(I first, S last, O result);
template<[[redoc("`:c>")]]input_range R, [[redoc("`:c>")]]weakly_incrementable O>
  requires [[redoc("`:c>")]]indirectly_movable<iterator_t<R>, O>
  constexpr ranges::move_result<borrowed_iterator_t<R>, O>
    ranges::move(R&& r, O result);
[codeblock:end]

[div:description]
[para]
[:en] Let [$E] be
[:zh_CN] 令 [$E]：
[list]
[item]
[:en@~] [`std::move(*(first + [$n]))] for the overload in namespace [`std];
[:zh_CN@~] 对于命名空间 [`std] 中的重载为 [`std::move(*(first + [$n]))]；
[item]
[:en@~] [`ranges::iter_move(first + [$n])] for the overloads in namespace
[`ranges].
[:zh_CN@~] 对于命名空间 [`ranges] 中的重载为 [`ranges::iter_move(first + [$n])]。
[list:end]

[:en] Let [$N] be [`last - first].
[:zh_CN] 令 [$N] 为 [`last - first]。

[para:expects]
[:en] [`result] is not in the range [=range(first,last)].
[:zh_CN] [`result] 不处于范围 [=range(first,last)] 之中。

[para:effects]
[:en] Moves elements in the range [=range(first,last)] into the range
[=range(result,result + `[$N`])] starting from [`first] and proceeding to [`last].
[:zh_CN] 将范围 [=range(first,last)] 中的元素移动到范围
[=range(result,result + `[$N`])] 中，开始于 [`first] 并进行到 [`last]。

[:en] For each non-negative integer [$n < N], performs [`*(result + [$n]) = [$E]].
[:zh_CN] 对于每个非负整数 [$n < N]，实施 [`*(result + [$n]) = [$E]]。

[para:returns]
[list]
[item]
[:en@~] [`result + [$N]] for the overload in namespace [`std].
[:zh_CN@~] 对于命名空间 [`std] 中的重载，返回 [`result + [$N]]。
[item]
[:en@~] [`{last, result + [$N]}] for the overloads in namespace [`ranges].
[:zh_CN@~] 对于命名空间 [`ranges] 中的重载，返回 [`{last, result + [$N]}]。
[list:end]

[para:complexity]
[:en] Exactly [$N] assignments.
[:zh_CN] 恰好进行 [$N] 次赋值。
[div:end]

[%@lib@raw [`move][![:en]algorithm[:zh_CN]算法]]
[codeblock:declaration]
template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2>
  ForwardIterator2 move(ExecutionPolicy&& policy,
                        ForwardIterator1 first, ForwardIterator1 last,
                        ForwardIterator2 result);
[codeblock:end]

[div:description]
[para]
[:en] Let [$N] be [`last - first].
[:zh_CN] 令 [$N] 为 [`last - first]。

[para:expects]
[:en] The ranges [=range(first,last)] and [=range(result,result + `[$N`])] do
not overlap.
[:zh_CN] 范围 [=range(first,last)] 和 [=range(result,result + `[$N`])] 没有重叠。

[para:effects]
[:en] Moves elements in the range [=range(first,last)] into the range
[=range(result,result + `[$N`])].
[:zh_CN] 将范围 [=range(first,last)] 中的元素移动到范围
[=range(result,result + `[$N`])] 中。

[:en] For each non-negative integer [$n < N], performs
[`*(result + [$n]) = std::move(*(first + [$n]))].
[:zh_CN] 对于每个非负整数 [$n < N]，实施
[`*(result + [$n]) = std::move(*(first + [$n]))]。

[para:returns]
[:en] [`result + [$N]].
[:zh_CN] [`result + [$N]]。

[para:complexity]
[:en] Exactly [$N] assignments.
[:zh_CN] 恰好进行 [$N] 次赋值。
[div:end]

[%@lib move_backward]
[codeblock:declaration]
template<class BidirectionalIterator1, class BidirectionalIterator2>
  constexpr BidirectionalIterator2
    move_backward(BidirectionalIterator1 first, BidirectionalIterator1 last,
                  BidirectionalIterator2 result);

template<[[redoc("`:c>")]]bidirectional_iterator I1, [[redoc("`:c>")]]sentinel_for<I1> S1, [[redoc("`:c>")]]bidirectional_iterator I2>
  requires [[redoc("`:c>")]]indirectly_movable<I1, I2>
  constexpr ranges::move_backward_result<I1, I2>
    ranges::move_backward(I1 first, S1 last, I2 result);
template<[[redoc("`:c>")]]bidirectional_range R, [[redoc("`:c>")]]bidirectional_iterator I>
  requires [[redoc("`:c>")]]indirectly_movable<iterator_t<R>, I>
  constexpr ranges::move_backward_result<borrowed_iterator_t<R>, I>
    ranges::move_backward(R&& r, I result);
[codeblock:end]

[div:description]
[para]
[:en] Let [$E] be
[:zh_CN] 令 [$E]：
[list]
[item]
[:en@~] [`std::move(*(last - [$n]))] for the overload in namespace [`std];
[:zh_CN@~] 对于命名空间 [`std] 中的重载为 [`std::move(*(last - [$n]))]；
[item]
[:en@~] [`ranges::iter_move(last - [$n])] for the overloads in namespace
[`ranges].
[:zh_CN@~] 对于命名空间 [`ranges] 中的重载为 [`ranges::iter_move(last - [$n])]。
[list:end]

[:en] Let [$N] be [`last - first].
[:zh_CN] 令 [$N] 为 [`last - first]。

[para:expects]
[:en] [`result] is not in the range [=brange(first,last)].
[:zh_CN] [`result] 不处于范围 [=brange(first,last)] 之中。

[para:effects]
[:en] Moves elements in the range [=range(first,last)] into the range
[=range(result - `[$N`],result)] starting from [`last - 1] and proceeding
to [`first].[#:fn#]
[:zh_CN] 将范围 [=range(first,last)] 中的元素移动到范围
[=range(result - `[$N`],result)] 中，开始于 [`last - 1] 并进行到 [`first]。[#:fn#]

[note:foot]
[:en] [`move_backward] can be used instead of [`move] when [`last] is in the
range [=range(result - `[$N`],result)].
[:zh_CN] 如果 [`last] 处于范围 [=range(result - `[$N`],result)] 之中，则可以用
[`move_backward] 来代替 [`move]。
[note:end]

[:en] For each positive integer [$n \le N], performs [`*(result - [$n]) = [$E]].
[:zh_CN] 对于每个正整数 [$n \le N]，实施 [`*(result - [$n]) = [$E]]。

[para:returns]
[list]
[item]
[:en@~] [`result - [$N]] for the overload in namespace [`std].
[:zh_CN@~] 对于命名空间 [`std] 中的重载，返回 [`result - [$N]]。
[item]
[:en@~] [`{last, result - [$N]}] for the overloads in namespace [`ranges].
[:zh_CN@~] 对于命名空间 [`ranges] 中的重载，返回 [`{last, result - [$N]}]。
[list:end]

[para:complexity]
[:en] Exactly [$N] assignments.
[:zh_CN] 恰好进行 [$N] 次赋值。
[div:end]
