[section#alg.find.last
    [:en] Find last
    [:zh_CN] 查找最后一个
]

[%@lib find]
[%@lib find_if]
[%@lib find_if_not]
[codeblock:declaration]
template<[[redoc("`:c>")]]forward_iterator I, [[redoc("`:c>")]]sentinel_for<I> S, class Proj = identity,
         class T = projected_value_t<I, Proj>>
  requires [[redoc("`:c>")]]indirect_binary_predicate<ranges::equal_to, projected<I, Proj>, const T*>
  constexpr subrange<I> ranges::find_last(I first, S last, const T& value, Proj proj = {});
template<[[redoc("`:c>")]]forward_range R, class Proj = identity,
         class T = projected_value_t<iterator_t<R>, Proj>>
  requires [[redoc("`:c>")]]indirect_binary_predicate<ranges::equal_to, projected<iterator_t<R>, Proj>, const T*>
  constexpr borrowed_subrange_t<R> ranges::find_last(R&& r, const T& value, Proj proj = {});

template<[[redoc("*:c>")]]execution-policy Ep, [[redoc("`:c>")]]random_access_iterator I, [[redoc("`:c>")]]sized_sentinel_for<I> S,
         class Proj = identity, class T = projected_value_t<I, Proj>>
  requires [[redoc("`:c>")]]indirect_binary_predicate<ranges::equal_to, projected<I, Proj>, const T*>
  subrange<I> ranges::find_last(Ep&& exec, I first, S last, const T& value, Proj proj = {});
template<[[redoc("*:c>")]]execution-policy Ep, [[redoc("*:c>")]]sized-random-access-range R, class Proj = identity,
          class T = projected_value_t<iterator_t<R>, Proj>>
  requires
    [[redoc("`:c>")]]indirect_binary_predicate<ranges::equal_to, projected<iterator_t<R>, Proj>, const T*>
  borrowed_subrange_t<R> ranges::find_last(Ep&& exec, R&& r, const T& value, Proj proj = {});

template<[[redoc("`:c>")]]forward_iterator I, [[redoc("`:c>")]]sentinel_for<I> S, class Proj = identity,
         [[redoc("`:c>")]]indirect_unary_predicate<projected<I, Proj>> Pred>
  constexpr subrange<I> ranges::find_last_if(I first, S last, Pred pred, Proj proj = {});
template<[[redoc("`:c>")]]forward_range R, class Proj = identity,
         [[redoc("`:c>")]]indirect_unary_predicate<projected<iterator_t<R>, Proj>> Pred>
  constexpr borrowed_subrange_t<R> ranges::find_last_if(R&& r, Pred pred, Proj proj = {});

template<[[redoc("*:c>")]]execution-policy Ep, [[redoc("`:c>")]]random_access_iterator I, [[redoc("`:c>")]]sized_sentinel_for<I> S,
         class Proj = identity, [[redoc("`:c>")]]indirect_unary_predicate<projected<I, Proj>> Pred>
  subrange<I> ranges::find_last_if(Ep&& exec, I first, S last, Pred pred, Proj proj = {});
template<[[redoc("*:c>")]]execution-policy Ep, [[redoc("*:c>")]]sized-random-access-range R,
          class Proj = identity,
          [[redoc("`:c>")]]indirect_unary_predicate<projected<iterator_t<R>, Proj>> Pred>
  borrowed_subrange_t<R> ranges::find_last_if(Ep&& exec, R&& r, Pred pred, Proj proj = {});

template<[[redoc("`:c>")]]forward_iterator I, [[redoc("`:c>")]]sentinel_for<I> S, class Proj = identity,
         [[redoc("`:c>")]]indirect_unary_predicate<projected<I, Proj>> Pred>
  constexpr subrange<I> ranges::find_last_if_not(I first, S last, Pred pred, Proj proj = {});
template<[[redoc("`:c>")]]forward_range R, class Proj = identity,
         [[redoc("`:c>")]]indirect_unary_predicate<projected<iterator_t<R>, Proj>> Pred>
  constexpr borrowed_subrange_t<R> ranges::find_last_if_not(R&& r, Pred pred, Proj proj = {});

template<[[redoc("*:c>")]]execution-policy Ep, [[redoc("`:c>")]]random_access_iterator I, [[redoc("`:c>")]]sized_sentinel_for<I> S,
         class Proj = identity,
         [[redoc("`:c>")]]indirect_unary_predicate<projected<I, Proj>> Pred>
  subrange<I> ranges::find_last_if_not(Ep&& exec, I first, S last, Pred pred, Proj proj = {});
template<[[redoc("*:c>")]]execution-policy Ep, [[redoc("*:c>")]]sized-random-access-range R, class Proj = identity,
         [[redoc("`:c>")]]indirect_unary_predicate<projected<iterator_t<R>, Proj>> Pred>
  borrowed_subrange_t<R> ranges::find_last_if_not(Ep&& exec, R&& r, Pred pred, Proj proj = {});
[codeblock:end]

[div:description]
[para]
[:en] Let [$E] be:
[:zh_CN] 令 [$E]：

[list]
[item]
[:en@~] [`bool(invoke(proj, *i) == value)] for [`ranges::find_last];
[:zh_CN@~] 对于 [`ranges::find_last] 为 [`bool(invoke(proj, *i) == value)]；
[item]
[:en@~] [`bool(invoke(pred, invoke(proj, *i)))] for [`ranges::find_last_if];
[:zh_CN@~] 对于 [`ranges::find_last_if] 为 [`bool(invoke(pred, invoke(proj, *i)))]；
[item]
[:en@~] [`bool(!invoke(pred, invoke(proj, *i)))] for [`ranges::find_last_if_not].
[:zh_CN@~] 对于 [`ranges::find_last_if_not] 为 [`bool(!invoke(pred, invoke(proj, *i)))]。
[list:end]

[para:returns]
[:en] Let [`i] be the last iterator in the range [=range(first,last)] for which
[$E] is [`true].
[:zh_CN] 令 [`i] 为范围 [=range(first,last)] 中使 [$E] 为 [`true] 的最后一个迭代器。

[:en] Returns [`{i, last}] or [`{last, last}] if no such iterator is found.
[:zh_CN] 返回 [`{i, last}]，或当未找到这种迭代器时返回 [`{last, last}]。

[para:complexity]
[:en] At most [`last - first] applications of the corresponding predicate and
any projection.
[:zh_CN] 最多进行 [`last - first] 次相应谓词和任何投射的运用。
[div:end]
