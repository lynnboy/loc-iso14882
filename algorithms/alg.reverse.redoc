[section#alg.reverse
    [:en] Reverse
    [:zh_CN] 反转
]

[%@library reverse]
[codeblock:declaration]
template<class BidirectionalIterator>
  constexpr void reverse(BidirectionalIterator first, BidirectionalIterator last);
template<class ExecutionPolicy, class BidirectionalIterator>
  void reverse(ExecutionPolicy&& exec,
               BidirectionalIterator first, BidirectionalIterator last);

template<bidirectional_iterator I, sentinel_for<I> S>
  requires permutable<I>
  constexpr I ranges::reverse(I first, S last);
template<bidirectional_range R>
  requires permutable<iterator_t<R>>
  constexpr safe_iterator_t<R> ranges::reverse(R&& r);
[codeblock:end]

[begin:description]
[para:requires]
[:en] [`BidirectionalIterator] shall meet the [^:oc ValueSwappable]
requirements ([#swappable.requirements]).
[:zh_CN] [`BidirectionalIterator] 应当满足 [^:oc ValueSwappable] 的规定
（[#swappable.requirements]）。

[para:effects]
[:en] For each non-negative integer [`i < (last - first) / 2], applies
[`std::iter_swap], or [`ranges::iter_swap] for the overloads in namespace
[`ranges], to all pairs of iterators [`first + i], [`(last - i) - 1].
[:zh_CN] 对于每个非负整数 [`i < (last - first) / 2]，对每一对迭代器 [`first + i]
和 [`(last - i) - 1]，运用 [`iter_swap]，或者对于命名空间 [`ranges] 中的各重载，
运用 [`ranges::iter_swap]。

[para:returns]
[:en] [`last] for the overloads in namespace [`ranges].
[:zh_CN] 对于命名空间 [`ranges] 中的各重载，返回 [`last]。

[para:complexity]
[:en] Exactly [`(last - first)/2] swaps.
[:zh_CN] 恰好进行 [`(last - first)/2] 次交换。
[end:description]

[%@library reverse_copy]
[codeblock:declaration]
template<class BidirectionalIterator, class OutputIterator>
  constexpr OutputIterator
    reverse_copy(BidirectionalIterator first, BidirectionalIterator last,
                 OutputIterator result);
template<class ExecutionPolicy, class BidirectionalIterator, class ForwardIterator>
  ForwardIterator
    reverse_copy(ExecutionPolicy&& exec,
                 BidirectionalIterator first, BidirectionalIterator last,
                 ForwardIterator result);

template<bidirectional_iterator I, sentinel_for<I> S, weakly_incrementable O>
  requires indirectly_copyable<I, O>
  constexpr ranges::reverse_copy_result<I, O>
    ranges::reverse_copy(I first, S last, O result);
template<bidirectional_range R, weakly_incrementable O>
  requires indirectly_copyable<iterator_t<R>, O>
  constexpr ranges::reverse_copy_result<safe_iterator_t<R>, O>
    ranges::reverse_copy(R&& r, O result);
[codeblock:end]

[begin:description]
[para]
[:en] Let [$N] be [`last - first].
[:zh_CN] 令 [$N] 为 [`last - first]。

[para:requires]
[:en] The ranges [=range(first,last)] and [=range(result,result + `[$N`])] shall
not overlap.
[:zh_CN] 范围 [=range(first,last)] 和 [=range(result,result + `[$N`])] 不能有重叠。

[para:effects]
[:en] Copies the range [=range(first,last)] to the range
[=range(result,result + `[$N`])] such that for every non-negative integer
[`i < [$N]] the following assignment takes place:
[`*(result + [$N] - 1 - i) = *(first + i)].
[:zh_CN] 将范围 [=range(first,last)] 复制到范围 [=range(result,result + `[$N`])]
中，其中对于每个非负整数 [`i < [$N]]，都进行了以下赋值：
[`*(result + [$N] - 1 - i) = *(first + i)]。

[para:returns]
[list]
[item]
[:en@~] [`result + [$N]], for the overloads in namespace [`std], or
[:zh_CN@~] 对于命名空间 [`std] 中的各重载，返回 [`result + [$N]]，或者
[item]
[:en@~] [`{last, result + [$N]}], for the overloads in namespace [`ranges].
[:zh_CN@~] 对于命名空间 [`ranges] 中的各重载，返回 [`{last, result + [$N]}]。
[list:end]

[para:complexity]
[:en] Exactly [$N] assignments.
[:zh_CN] 恰好进行 [$N] 次赋值。
[end:description]
