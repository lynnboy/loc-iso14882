[section#alg.reverse
    [:en] Reverse
    [:zh_CN] 反转
]

[%@lib reverse]
[codeblock:declaration]
template<class BidirectionalIterator>
  constexpr void reverse(BidirectionalIterator first, BidirectionalIterator last);
template<class ExecutionPolicy, class BidirectionalIterator>
  void reverse(ExecutionPolicy&& exec,
               BidirectionalIterator first, BidirectionalIterator last);

template<[[redoc("`:c>")]]bidirectional_iterator I, [[redoc("`:c>")]]sentinel_for<I> S>
  requires [[redoc("`:c>")]]permutable<I>
  constexpr I ranges::reverse(I first, S last);
template<[[redoc("`:c>")]]bidirectional_range R>
  requires [[redoc("`:c>")]]permutable<iterator_t<R>>
  constexpr borrowed_iterator_t<R> ranges::reverse(R&& r);

template<[[redoc("*:c>")]]execution-policy Ep, [[redoc("`:c>")]]random_access_iterator I, [[redoc("`:c>")]]sized_sentinel_for<I> S>
  requires [[redoc("`:c>")]]permutable<I>
  I ranges::reverse(Ep&& exec, I first, S last);
template<[[redoc("*:c>")]]execution-policy Ep, [[redoc("*:c>")]]sized-random-access-range R>
  requires [[redoc("`:c>")]]permutable<iterator_t<R>>
  borrowed_iterator_t<R> ranges::reverse(Ep&& exec, R&& r);
[codeblock:end]

[div:description]
[para:expects]
[:en] For the overloads in namespace [`std], [`BidirectionalIterator] meets
the [^:oc ValueSwappable] requirements ([#swappable.requirements]).
[:zh_CN] 对于命名空间 [`std] 中的重载，[`BidirectionalIterator] 满足
[^:oc ValueSwappable] 的规定（[#swappable.requirements]）。

[para:effects]
[:en] For each non-negative integer [`i < (last - first) / 2], applies
[`std::iter_swap], or [`ranges::iter_swap] for the overloads in namespace
[`ranges], to all pairs of iterators [`first + i], [`(last - i) - 1].
[:zh_CN] 对于每个非负整数 [`i < (last - first) / 2]，对每一对迭代器 [`first + i]
和 [`(last - i) - 1]，运用 [`iter_swap]，或者对于命名空间 [`ranges] 中的各重载，
运用 [`ranges::iter_swap]。

[para:returns]
[:en] [`last] for the overloads in namespace [`ranges].
[:zh_CN] 对于命名空间 [`ranges] 中的各重载，返回 [`last]。

[para:complexity]
[:en] Exactly [`(last - first)/2] swaps.
[:zh_CN] 恰好进行 [`(last - first)/2] 次交换。
[div:end]

[%@lib reverse_copy]
[codeblock:declaration]
template<class BidirectionalIterator, class OutputIterator>
  constexpr OutputIterator
    reverse_copy(BidirectionalIterator first, BidirectionalIterator last,
                 OutputIterator result);
template<class ExecutionPolicy, class BidirectionalIterator, class ForwardIterator>
  ForwardIterator
    reverse_copy(ExecutionPolicy&& exec,
                 BidirectionalIterator first, BidirectionalIterator last,
                 ForwardIterator result);

template<[[redoc("`:c>")]]bidirectional_iterator I, [[redoc("`:c>")]]sentinel_for<I> S, [[redoc("`:c>")]]weakly_incrementable O>
  requires [[redoc("`:c>")]]indirectly_copyable<I, O>
  constexpr ranges::reverse_copy_result<I, O>
    ranges::reverse_copy(I first, S last, O result);
template<[[redoc("`:c>")]]bidirectional_range R, [[redoc("`:c>")]]weakly_incrementable O>
  requires [[redoc("`:c>")]]indirectly_copyable<iterator_t<R>, O>
  constexpr ranges::reverse_copy_result<borrowed_iterator_t<R>, O>
    ranges::reverse_copy(R&& r, O result);
[codeblock:end]

[div:description]
[para]
[:en] Let [$N] be [`last - first].
[:zh_CN] 令 [$N] 为 [`last - first]。

[para:expects]
[:en] The ranges [=range(first,last)] and [=range(result,result + `[$N`])] do
not overlap.
[:zh_CN] 范围 [=range(first,last)] 和 [=range(result,result + `[$N`])] 没有重叠。

[para:effects]
[:en] Copies the range [=range(first,last)] to the range
[=range(result,result + `[$N`])] such that for every non-negative integer
[`i < [$N]] the following assignment takes place:
[`*(result + [$N] - 1 - i) = *(first + i)].
[:zh_CN] 将范围 [=range(first,last)] 复制到范围 [=range(result,result + `[$N`])]
中，其中对于每个非负整数 [`i < [$N]]，都进行了以下赋值：
[`*(result + [$N] - 1 - i) = *(first + i)]。

[para:returns]
[list]
[item]
[:en@~] [`result + [$N]], for the overloads in namespace [`std].
[:zh_CN@~] 对于命名空间 [`std] 中的各重载，返回 [`result + [$N]]。
[item]
[:en@~] [`{last, result + [$N]}], for the overloads in namespace [`ranges].
[:zh_CN@~] 对于命名空间 [`ranges] 中的各重载，返回 [`{last, result + [$N]}]。
[list:end]

[para:complexity]
[:en] Exactly [$N] assignments.
[:zh_CN] 恰好进行 [$N] 次赋值。
[div:end]

[codeblock:declaration]
template<[[redoc("*:c>")]]execution-policy Ep, [[redoc("`:c>")]]random_access_iterator I, [[redoc("`:c>")]]sized_sentinel_for<I> S,
         [[redoc("`:c>")]]random_access_iterator O, [[redoc("`:c>")]]sized_sentinel_for<O> OutS>
  requires [[redoc("`:c>")]]indirectly_copyable<I, O>
  ranges::reverse_copy_truncated_result<I, O>
    ranges::reverse_copy(Ep&& exec, I first, S last, O result,
                         OutS result_last);
template<[[redoc("*:c>")]]execution-policy Ep, [[redoc("*:c>")]]sized-random-access-range R, [[redoc("*:c>")]]sized-random-access-range OutR>
  requires [[redoc("`:c>")]]indirectly_copyable<iterator_t<R>, iterator_t<OutR>>
  ranges::reverse_copy_truncated_result<borrowed_iterator_t<R>, borrowed_iterator_t<OutR>>
    ranges::reverse_copy(Ep&& exec, R&& r, OutR&& result_r);
[codeblock:end]

[div:description]
[para]
[:en] Let [$N] be [$\min([`last - first], \ [`result_last - result])], and
let [*NEW_FIRST] be [`first + (last - first) - [$N]].
[:zh_CN] 令 [$N] 为 [$\min([`last - first], \ [`result_last - result])]，并令
[*NEW_FIRST] 为 [`first + (last - first) - [$N]]。

[para:expects]
[:en] The ranges [=range(first,last)] and [=range(result,result + `[$N`])] do not overlap.
[:zh_CN] 范围 [=range(first,last)] 和 [=range(result,result + `[$N`])] 没有重叠。

[para:effects]
[:en] Copies the range [=range([*NEW_FIRST],last)] to the range
[=range(result,result + `[$N`])] such that for every non-negative integer
[$i < N] the following assignment takes place:
[`*(result + [$N] - 1 - [$i]) = *([*NEW_FIRST] + [$i])].
[:zh_CN] 将范围 [=range([*NEW_FIRST],last)] 复制到范围 [=range(result,result + `[$N`])]
中，其中对于每个非负整数 [`i < N]，都进行了以下赋值：
[`*(result + [$N] - 1 - [$i]) = *([*NEW_FIRST] + [$i])]。

[para:returns]
[:en] [`{last, [*NEW_FIRST], result + [$N]}].
[:zh_CN] [`{last, [*NEW_FIRST], result + [$N]}]。

[para:complexity]
[:en] Exactly [$N] assignments.
[:zh_CN] 恰好进行 [$N] 次赋值。
[div:end]
