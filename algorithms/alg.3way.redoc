[section#alg.3way
    [:en] Three-way comparison algorithms
    [:zh_CN] 三路比较算法
]

[%@library compare_3way]
[codeblock:declaration]
template<class T, class U> constexpr auto compare_3way(const T& a, const U& b);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Compares two values and produces a result of the strongest applicable
comparison category type:
[:zh_CN] 比较两个值并产生具有最强的适用比较类别类型的结果：

[list]
[item]
[:en] Returns [`a <=> b] if that expression is well-formed.
[:zh_CN] 如果 [`a <=> b] 良构则返回该表达式。
[item]
[:en] Otherwise, if the expressions [`a == b] and [`a < b] are each well-formed
and convertible to [`bool], returns [`strong_ordering::equal] when [`a == b] is
[`true], otherwise returns [`strong_ordering::less] when [`a < b] is [`true],
and otherwise returns [`strong_ordering::greater].
[:zh_CN] 否则，如果表达式 [`a == b] 和 [`a < b] 都良构且可以转换为 [`bool]，则当
[`a == b] 为 [`true] 时返回 [`strong_ordering::equal]，否则当 [`a < b] 为
[`true] 时返回 [`strong_ordering::less]，否则返回 [`strong_ordering::greater]。
[item]
[:en] Otherwise, if the expression [`a == b] is well-formed and convertible to
[`bool], returns [`strong_equality::equal] when [`a == b] is [`true], and
otherwise returns [`strong_equality::nonequal].
[:zh_CN] 否则，如果表达式 [`a == b] 良构且可以转换为 [`bool]，则当 [`a == b] 为
[`true] 时返回 [`strong_equality::equal]，否则返回 [`strong_equality::nonequal]。
[item]
[:en] Otherwise, the function is defined as deleted.
[:en] 否则，该函数被定义为弃置的。
[list:end]
[exit:description]

[%@library lexicographical_compare_3way]
[codeblock:declaration]
template<class InputIterator1, class InputIterator2, class Cmp>
  constexpr auto
    lexicographical_compare_3way(InputIterator1 b1, InputIterator1 e1,
                                 InputIterator2 b2, InputIterator2 e2,
                                 Cmp comp)
      -> common_comparison_category_t<decltype(comp(*b1, *b2)), strong_ordering>;
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`Cmp] shall be a function object type whose return type is a comparison
category type.
[:zh_CN] [`Cmp] 应当函数对象类型，且其返回类型为比较类别类型。

[para:effects]
[:en] Lexicographically compares two ranges and produces a result of the
strongest applicable comparison category type.
[:zh_CN] 对两个范围进行字典序比较并产生具有最强的适用比较类别类型的结果。

[:en] Equivalent to:
[:zh_CN] 等价于：

[codeblock:notation]
for ( ; b1 != e1 && b2 != e2; void(++b1), void(++b2) )
  if (auto cmp = comp(*b1,*b2); cmp != 0)
    return cmp;
return b1 != e1 ? strong_ordering::greater :
       b2 != e2 ? strong_ordering::less :
                  strong_ordering::equal;
[codeblock:end]
[exit:description]

[%@library lexicographical_compare_3way]
[codeblock:declaration]
template<class InputIterator1, class InputIterator2>
  constexpr auto
    lexicographical_compare_3way(InputIterator1 b1, InputIterator1 e1,
                                 InputIterator2 b2, InputIterator2 e2);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：

[codeblock:notation]
return lexicographical_compare_3way(b1, e1, b2, e2,
                                    [](const auto& t, const auto& u) {
                                      return compare_3way(t, u);
                                    });
[codeblock:end]
[exit:description]
