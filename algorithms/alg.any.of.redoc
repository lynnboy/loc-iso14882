[section#alg.any.of
    [:en] Any of
    [:zh_CN] 任意……为……（Any Of）
]

[%@lib any_of]
[codeblock:declaration]
template<class InputIterator, class Predicate>
  constexpr bool any_of(InputIterator first, InputIterator last, Predicate pred);
template<class ExecutionPolicy, class ForwardIterator, class Predicate>
  bool any_of(ExecutionPolicy&& exec, ForwardIterator first, ForwardIterator last,
              Predicate pred);

template<[[redoc("`:c>")]]input_iterator I, [[redoc("`:c>")]]sentinel_for<I> S, class Proj = identity,
         [[redoc("`:c>")]]indirect_unary_predicate<projected<I, Proj>> Pred>
  constexpr bool ranges::any_of(I first, S last, Pred pred, Proj proj = {});
template<[[redoc("`:c>")]]input_range R, class Proj = identity,
         [[redoc("`:c>")]]indirect_unary_predicate<projected<iterator_t<R>, Proj>> Pred>
  constexpr bool ranges::any_of(R&& r, Pred pred, Proj proj = {});

template<[[redoc("*:c>")]]execution-policy Ep, [[redoc("`:c>")]]random_access_iterator I, [[redoc("`:c>")]]sized_sentinel_for<I> S,
         class Proj = identity, [[redoc("`:c>")]]indirect_unary_predicate<projected<I, Proj>> Pred>
  bool ranges::any_of(Ep&& exec, I first, S last, Pred pred, Proj proj = {});
template<[[redoc("*:c>")]]execution-policy Ep, [[redoc("*:c>")]]sized-random-access-range R, class Proj = identity,
         [[redoc("`:c>")]]indirect_unary_predicate<projected<iterator_t<R>, Proj>> Pred>
  bool ranges::any_of(Ep&& exec, R&& r, Pred pred, Proj proj = {});
[codeblock:end]

[div:description]
[para]
[:en] Let [$E] be:
[:zh_CN] 令 [$E]：
[list]
[item]
[:en@~] [`pred(*i)] for the overloads in namespace [`std];
[:zh_CN@~] 对于命名空间 [`std] 中的各重载为 [`pred(*i)]；
[item]
[:en@~] [`invoke(pred, invoke(proj, *i))] for the overloads in namespace [`ranges].
[:zh_CN@~] 对于命名空间 [`ranges] 中的各重载为 [`invoke(pred, invoke(proj, *i))]。
[list:end]

[para:returns]
[:en] [`true] if [$E] is [`true] for some iterator [`i] in the range
[=range(first,last)], and [`false] otherwise.
[:zh_CN] 若范围 [=range(first,last)] 中有某个迭代器 [`i] 使 [$E] 为 [`true]
则为 [`true]，否则为 [`false]。

[para:complexity]
[:en] At most [`last - first] applications of the predicate and any projection.
[:zh_CN] 最多进行 [`last - first] 次谓词和任何投射的运用。
[div:end]
