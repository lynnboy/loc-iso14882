[section#alg.random.sample
    [:en] Sample
    [:zh_CN] 抽样
]

[%@lib sample]
[codeblock:declaration]
template<class PopulationIterator, class SampleIterator,
         class Distance, class UniformRandomBitGenerator>
  SampleIterator sample(PopulationIterator first, PopulationIterator last,
                        SampleIterator out, Distance n,
                        UniformRandomBitGenerator&& g);

template<[[redoc("`:c>")]]input_iterator I, [[redoc("`:c>")]]sentinel_for<I> S, [[redoc("`:c>")]]weakly_incrementable O, class Gen>
  requires ([[redoc("`:c>")]]forward_iterator<I> || [[redoc("`:c>")]]random_access_iterator<O>) &&
           [[redoc("`:c>")]]indirectly_copyable<I, O> &&
           [[redoc("`:c>")]]uniform_random_bit_generator<remove_reference_t<Gen>>
  O ranges::sample(I first, S last, O out, iter_difference_t<I> n, Gen&& g);
template<[[redoc("`:c>")]]input_range R, [[redoc("`:c>")]]weakly_incrementable O, class Gen>
  requires ([[redoc("`:c>")]]forward_range<R> || [[redoc("`:c>")]]random_access_iterator<O>) &&
           [[redoc("`:c>")]]indirectly_copyable<iterator_t<R>, O> &&
           [[redoc("`:c>")]]uniform_random_bit_generator<remove_reference_t<Gen>>
  O ranges::sample(R&& r, O out, range_difference_t<R> n, Gen&& g);
[codeblock:end]

[div:description]
[para:mandates]
[:en] For the overload in namespace [`std], [`Distance] is an integer type and
[`*first] is writable ([#iterator.requirements.general]) to [`out].
[:zh_CN] 对于命名空间 [`std] 中的重载，[`Distance] 为整数类型，且 [`*first] 可向
[`out] 写出（[#iterator.requirements.general]）。

[para:expects]
[:en] [`out] is not in the range [=range(first,last)].
[:zh_CN] [`out] 不处于范围 [=range(first,last)] 之内。

[:en] For the overload in namespace [`std]:
[:zh_CN] 对于命名空间 [`std] 中的重载：
[list]
[item]
[:en] [`PopulationIterator] meets the [^:oc InputIterator] requirements
([#input.iterators]).
[:zh_CN] [`PopulationIterator] 满足 [^:oc InputIterator] 的规定
（[#input.iterators]）。

[item]
[:en] [`SampleIterator] meets the [^:oc OutputIterator] requirements
([#output.iterators]).
[:zh_CN] [`SampleIterator] 满足 [^:oc OutputIterator] 的规定
（[#output.iterators]）。

[item]
[:en] [`SampleIterator] meets the [^:oc RandomAccessIterator] requirements
([#random.access.iterators]) unless [`PopulationIterator] models
[`:c forward_iterator] ([#iterator.concept.forward]).
[:zh_CN] 除非 [`PopulationIterator] 构成 [`:c forward_iterator]
（[#iterator.concept.forward]），否则 [`SampleIterator] 满足
[^:oc RandomAccessIterator] 的规定（[#random.access.iterators]）。

[item]
[:en] [`remove_reference_t<UniformRandomBitGenerator>] meets the
requirements of a uniform random bit generator type ([#rand.req.urng]).
[:zh_CN] [`remove_reference_t<UniformRandomBitGenerator>] 满足对均匀随机位生成器
类型的规定（[#rand.req.urng]）。
[list:end]

[para:effects]
[:en] Copies [$\min([`last - first], \ [`n])] elements (the [+sample]) from
[=range(first,last)] (the [+population]) to [`out] such that each possible
sample has equal probability of appearance.
[:zh_CN] 从 [=range(first,last)]（[+总体]）向 [`out] 复制
[$\min([`last - first], \ [`n])] 个元素（[+样本]），每个可能的样本均具有相等的
出现概率。

[begin:note]
[:en] Algorithms that obtain such effects include [+:% selection sampling] and
[+:% reservoir sampling].
[:zh_CN] 能够体现这种效果的算法包括[+:% 选择抽样]和[+:% 水塘抽样]。
[end:note]

[para:returns]
[:en] The end of the resulting sample range.
[:zh_CN] 结果的样本范围的末尾。

[para:complexity]
[:en] [?bigoh[`last - first]].
[:zh_CN] [?bigoh[`last - first]]。

[para:remarks]
[list]
[item]
[:en] For the overload in namespace [`std], stable if and only if
[`PopulationIterator] models [`:c forward_iterator].
[:zh_CN] 对于命名空间 [`std] 中的重载，当且仅当 [`PopulationIterator] 构成
[`:c forward_iterator] 时为稳定算法。

[:en] For the first overload in namespace [`ranges], stable if and only if [`I]
models [`:c forward_iterator].
[:zh_CN] 对于命名空间 [`std] 中的重载，当且仅当 [`I] 构成 [`:c forward_iterator]
的规定时为稳定算法。

[item]
[:en] To the extent that the implementation of this function makes use of random
numbers, the object [`g] serves as the implementation[=']s source of randomness.
[:zh_CN] 在这个函数使用随机数的方面来说，对象 [`g] 作为该实现的随机性的来源。
[list:end]
[div:end]
