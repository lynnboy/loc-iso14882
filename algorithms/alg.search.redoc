[section#alg.search
    [:en] Search
    [:zh_CN] 搜索
]

[%@lib search]
[codeblock:declaration]
template<class ForwardIterator1, class ForwardIterator2>
  constexpr ForwardIterator1
    search(ForwardIterator1 first1, ForwardIterator1 last1,
           ForwardIterator2 first2, ForwardIterator2 last2);
template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2>
  ForwardIterator1
    search(ExecutionPolicy&& exec,
           ForwardIterator1 first1, ForwardIterator1 last1,
           ForwardIterator2 first2, ForwardIterator2 last2);

template<class ForwardIterator1, class ForwardIterator2,
         class BinaryPredicate>
  constexpr ForwardIterator1
    search(ForwardIterator1 first1, ForwardIterator1 last1,
           ForwardIterator2 first2, ForwardIterator2 last2,
           BinaryPredicate pred);
template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2,
         class BinaryPredicate>
  ForwardIterator1
    search(ExecutionPolicy&& exec,
           ForwardIterator1 first1, ForwardIterator1 last1,
           ForwardIterator2 first2, ForwardIterator2 last2,
           BinaryPredicate pred);
[codeblock:end]

[div:description]
[para:returns]
[:en] The first iterator [`i] in the range
[=range(first1,last1 - (last2-first2))] such that for every non-negative integer
[`n] less than [`last2 - first2] the following corresponding conditions hold:
[`*(i + n) == *(first2 + n)], [`pred(*(i + n), *(first2 + n)) != false].
[:zh_CN] 范围 [=range(first1,last1 - (last2-first2))] 中的第一个迭代器 [`i]，
使得对于每个小于 [`last2 - first2] 的非负整数 [`n]，以下的对应条件均成立：
[`*(i + n) == *(first2 + n)]，[`pred(*(i + n), *(first2 + n)) != false]。

[:en] Returns [`first1] if [=range(first2,last2)] is empty, otherwise returns
[`last1] if no such iterator is found.
[:zh_CN] 如果 [=range(first2,last2)] 为空则返回 [`first1]，否则如果未找到这种
迭代器，则返回 [`last1]。

[para:complexity]
[:en] At most [`(last1 - first1) * (last2 - first2)] applications of the
corresponding predicate.
[:zh_CN] 最多进行 [`(last1 - first1) * (last2 - first2)] 次相应谓词的运用。
[div:end]

[%@lib search]
[codeblock:declaration]
template<forward_iterator I1, sentinel_for<I1> S1, forward_iterator I2,
         sentinel_for<I2> S2, class Pred = ranges::equal_to,
         class Proj1 = identity, class Proj2 = identity>
  requires indirectly_comparable<I1, I2, Pred, Proj1, Proj2>
  constexpr subrange<I1>
    ranges::search(I1 first1, S1 last1, I2 first2, S2 last2, Pred pred = {},
                   Proj1 proj1 = {}, Proj2 proj2 = {});
template<forward_range R1, forward_range R2, class Pred = ranges::equal_to,
         class Proj1 = identity, class Proj2 = identity>
  requires indirectly_comparable<iterator_t<R1>, iterator_t<R2>, Pred, Proj1, Proj2>
  constexpr safe_subrange_t<R1>
    ranges::search(R1&& r1, R2&& r2, Pred pred = {},
                   Proj1 proj1 = {}, Proj2 proj2 = {});
[codeblock:end]

[div:description]
[para:returns]
[list]
[item]
[:en] [`{i, i + (last2 - first2)}], where [`i] is the first iterator in the
range [=range(first1,last1 - (last2 - first2))] such that for every non-negative
integer [`n] less than [`last2 - first2] the condition
[:zh_CN] [`{i, i + (last2 - first2)}]，其中 [`i] 为范围
[=range(first1,last1 - (last2 - first2))] 中的第一个迭代器，使得对每个小于
[`last2 - first2] 的整数 [`n]，条件
[codeblock]
bool(invoke(pred, invoke(proj1, *(i + n)), invoke(proj2, *(first2 + n))))
[codeblock:end]
[:en@~] is [`true]:
[:zh_CN@~] 均为 [`true]。

[item]
[:en] Returns [`{last1, last1}] if no such iterator exists.
[:zh_CN] 如果不存在这种迭代器则返回 [`{last1, last1}]。
[list:end]

[para:complexity]
[:en] At most [`(last1 - first1) * (last2 - first2)] applications of the
corresponding predicate and projections.
[:zh_CN] 最多进行 [`(last1 - first1) * (last2 - first2)] 次相应谓词和投射的运用。
[div:end]

[%@lib search_n]
[codeblock:declaration]
template<class ForwardIterator, class Size, class T>
  constexpr ForwardIterator
    search_n(ForwardIterator first, ForwardIterator last,
             Size count, const T& value);
template<class ExecutionPolicy, class ForwardIterator, class Size, class T>
  ForwardIterator
    search_n(ExecutionPolicy&& exec,
             ForwardIterator first, ForwardIterator last,
             Size count, const T& value);

template<class ForwardIterator, class Size, class T,
         class BinaryPredicate>
  constexpr ForwardIterator
    search_n(ForwardIterator first, ForwardIterator last,
             Size count, const T& value,
             BinaryPredicate pred);
template<class ExecutionPolicy, class ForwardIterator, class Size, class T,
         class BinaryPredicate>
  ForwardIterator
    search_n(ExecutionPolicy&& exec,
             ForwardIterator first, ForwardIterator last,
             Size count, const T& value,
             BinaryPredicate pred);
[codeblock:end]

[div:description]
[para:mandates]
[:en] The type [`Size] is convertible to an integral type ([#conv.integral],
[#class.conv]).
[:zh_CN] 类型 [`Size] 可以转换为整型类型（[#conv.integral]，[#class.conv]）。

[para:returns]
[:en] The first iterator [`i] in the range [=range(first,last-count)] such that
for every non-negative integer [`n] less than [`count] the following
corresponding conditions hold:
[`*(i + n) == value], [`pred(*(i + n),value) != false].
[:zh_CN] 范围 [=range(first,last-count)] 中的第一个迭代器 [`i]，使得对于每个小于
[`count] 的非负整数 [`n]，以下的对应条件均成立：
[`*(i + n) == value]，[`pred(*(i + n),value) != false]。

[:en] Returns [`last] if no such iterator is found.
[:zh_CN] 如果未找到这种迭代器，则返回 [`last]。

[para:complexity]
[:en] At most [`last - first] applications of the corresponding predicate.
[:zh_CN] 最多进行 [`last - first] 次相应谓词的运用。
[div:end]

[%@lib search_n]
[codeblock:declaration]
template<forward_iterator I, sentinel_for<I> S, class T,
         class Pred = ranges::equal_to, class Proj = identity>
  requires indirectly_comparable<I, const T*, Pred, Proj>
  constexpr subrange<I>
    ranges::search_n(I first, S last, iter_difference_t<I> count,
                     const T& value, Pred pred = {}, Proj proj = {});
template<forward_range R, class T, class Pred = ranges::equal_to,
         class Proj = identity>
  requires indirectly_comparable<iterator_t<R>, const T*, Pred, Proj>
  constexpr safe_subrange_t<R>
    ranges::search_n(R&& r, range_difference_t<R> count,
                     const T& value, Pred pred = {}, Proj proj = {});
[codeblock:end]

[div:description]
[para:returns]
[list]
[item]
[:en] [`{i, i + count}], where [`i] is the first iterator in the range
[=range(first,last - count)] such that for every non-negative integer [`n]
less than [`count], the following condition holds:
[`invoke(pred, invoke(proj1, *(i + n)), value)].

[:zh_CN] [`{i, i + count}]，其中 [`i] 为范围 [=range(first,last - count)] 中的
第一个迭代器，使得对每个小于 [`count] 的整数 [`n]，以下条件成立：
[`invoke(pred, invoke(proj1, *(i + n)), value)]。

[item]
[:en] Returns [`{last1, last1}] if no such iterator is found.
[:zh_CN] 如果未找到这种迭代器，则返回 [`{last1, last1}]。
[list:end]

[para:complexity]
[:en] At most [`last - first] applications of the corresponding predicate and
projection.
[:zh_CN] 最多进行 [`last - first] 次相应谓词和投射的运用。
[div:end]

[%@lib search]
[codeblock:declaration]
template<class ForwardIterator, class Searcher>
  constexpr ForwardIterator
    search(ForwardIterator first, ForwardIterator last, const Searcher& searcher);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return searcher(first, last).first;]
[:zh_CN] 等价于：[`return searcher(first, last).first;]

[para:remarks]
[:en] [`Searcher] need not meet the [^:oc CopyConstructible] requirements.
[:zh_CN] [`Searcher] 并不需要满足 [^:oc CopyConstructible] 的规定。
[div:end]
