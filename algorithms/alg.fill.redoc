[section#alg.fill
    [:en] Fill
    [:zh_CN] 填充
]

[%@lib fill]
[%@lib fill_n]
[codeblock:declaration]
template<class ForwardIterator, class T = iterator_traits<ForwardIterator>::value_type>
  constexpr void fill(ForwardIterator first, ForwardIterator last, const T& value);
template<class ExecutionPolicy, class ForwardIterator,
         class T = iterator_traits<ForwardIterator>::value_type>
  void fill(ExecutionPolicy&& exec,
            ForwardIterator first, ForwardIterator last, const T& value);

template<class OutputIterator, class Size, class T = iterator_traits<OutputIterator>::value_type>
  constexpr OutputIterator fill_n(OutputIterator first, Size n, const T& value);
template<class ExecutionPolicy, class ForwardIterator, class Size,
         class T = iterator_traits<ForwardIterator>::value_type>
  ForwardIterator fill_n(ExecutionPolicy&& exec,
                         ForwardIterator first, Size n, const T& value);

template<class O, [[redoc("`:c>")]]sentinel_for<O> S, class T = iter_value_t<O>>
  requires [[redoc("`:c>")]]output_iterator<O, const T&>
  constexpr O ranges::fill(O first, S last, const T& value);
template<class R, class T = range_value_t<R>>
  requires [[redoc("`:c>")]]output_iterator<R, const T&>
  constexpr borrowed_iterator_t<R> ranges::fill(R&& r, const T& value);
template<class O, class T = iter_value_t<O>>
  requires [[redoc("`:c>")]]output_iterator<O, const T&>
  constexpr O ranges::fill_n(O first, iter_difference_t<O> n, const T& value);

template<[[redoc("*:c>")]]execution-policy Ep, [[redoc("`:c>")]]random_access_iterator O, [[redoc("`:c>")]]sized_sentinel_for<O> S,
         class T = iter_value_t<O>>
  requires [[redoc("`:c>")]]indirectly_writable<O, const T&>
  O ranges::fill(Ep&& exec, O first, S last, const T& value);
template<[[redoc("*:c>")]]execution-policy Ep, [[redoc("*:c>")]]sized-random-access-range R, class T = range_value_t<R>>
  requires [[redoc("`:c>")]]indirectly_writable<iterator_t<R>, const T&>
  borrowed_iterator_t<R> fill(Ep&& exec, R&& r, const T& value);
template<[[redoc("*:c>")]]execution-policy Ep, [[redoc("`:c>")]]random_access_iterator O, class T = iter_value_t<O>>
  requires [[redoc("`:c>")]]indirectly_writable<O, const T&>
  O ranges::fill_n(Ep&& exec, O first, iter_difference_t<O> n, const T& value);
[codeblock:end]

[div:description]
[para]
[:en] Let [$N] be [$\max(0, [`n])] for the [`fill_n] algorithms, and
[`last - first] for the [`fill] algorithms.
[:zh_CN] 令 [$N] 对于各 [`fill_n] 算法为 [$\max(0, [`n])]，而对于各 [`fill] 算法为 [`last - first]。

[para:mandates]
[:en] The expression [`value] is writable ([#iterator.requirements.general]) to
the output iterator.
[:zh_CN] 表达式 [`value] 可以向输出迭代器写出（[#iterator.requirements.general]）。

[:en] The type [`Size] is convertible to an integral type ([#conv.integral], [#class.conv]).
[:zh_CN] 类型 [`Size] 可以转换为整型类型（[#conv.integral]，[#class.conv]）。

[para:effects]
[:en] Assigns [`value] through all the iterators in the range [=range(first,first + `[$N`])].
[:zh_CN] 将 [`value] 通过范围 [=range(first,first + `[$N`])] 中的每个迭代器进行赋值。

[para:returns]
[:en] [`first + [$N]].
[:zh_CN] [`first + [$N]]。

[para:complexity]
[:en] Exactly [$N] assignments.
[:zh_CN] 恰好进行 [$N] 次赋值。
[div:end]
