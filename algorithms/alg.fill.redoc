[section#alg.fill
    [:en] Fill
    [:zh_CN] 填充
]

[%@library fill]
[%@library fill_n]
[codeblock:declaration]
template<class ForwardIterator, class T>
  void fill(ForwardIterator first, ForwardIterator last, const T& value);
template<class ExecutionPolicy, class ForwardIterator, class T>
  void fill(ExecutionPolicy&& exec,
            ForwardIterator first, ForwardIterator last, const T& value);

template<class OutputIterator, class Size, class T>
  OutputIterator fill_n(OutputIterator first, Size n, const T& value);
template<class ExecutionPolicy, class ForwardIterator, class Size, class T>
  ForwardIterator fill_n(ExecutionPolicy&& exec,
                         ForwardIterator first, Size n, const T& value);
[codeblock:end]

[enter:description]
[para:requires]
[:en] The expression [`value] shall be writable
([#iterator.requirements.general]) to the output iterator.
[:zh_CN] 表达式 [`value] 应当可以向输出迭代器写出
（[#iterator.requirements.general]）。

[:en] The type [`Size] shall be convertible to an integral type
([#conv.integral], [#class.conv]).
[:zh_CN] 类型 [`Size] 应当可以转换为整型类型（[#conv.integral]，[#class.conv]）。

[para:effects]
[:en] The [`fill] algorithms assign [`value] through all the iterators in the
range [=range(first,last)].
[:zh_CN] 算法 [`fill] 将 [`value] 通过范围 [=range(first,last)] 中的每个迭代器
进行赋值。

[:en] The [`fill_n] algorithms assign [`value] through all the iterators in the
range [=range(first,first + n)] if [`n] is positive, otherwise it does nothing.
[:zh_CN] 当 [`n] 为正时，算法 [`fill_n] 将 [`value] 通过范围
[=range(first,first + n)] 中的每个迭代器进行赋值，否则不做任何事。

[para:returns]
[:en] [`fill_n] returns [`first + n] for non-negative values of [`n] and
[`first] for negative values.
[:zh_CN] [`fill_n] 对于非负的 [`n] 返回 [`first + n]，而对于负值则返回 [`first]。

[para:complexity]
[:en] Exactly [`last - first], [`n], or 0 assignments, respectively.
[:zh_CN] 分别恰好进行 [`last - first]，[`n] 或 0 次赋值。
[exit:description]
