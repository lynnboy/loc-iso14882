[section#alg.equal
    [:en] Equal
    [:zh_CN] 相等
]

[%@library equal]
[codeblock:declaration]
template<class InputIterator1, class InputIterator2>
  constexpr bool equal(InputIterator1 first1, InputIterator1 last1,
                       InputIterator2 first2);
template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2>
  bool equal(ExecutionPolicy&& exec,
             ForwardIterator1 first1, ForwardIterator1 last1,
             ForwardIterator2 first2);

template<class InputIterator1, class InputIterator2,
         class BinaryPredicate>
  constexpr bool equal(InputIterator1 first1, InputIterator1 last1,
                       InputIterator2 first2, BinaryPredicate pred);
template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2,
         class BinaryPredicate>
  bool equal(ExecutionPolicy&& exec,
             ForwardIterator1 first1, ForwardIterator1 last1,
             ForwardIterator2 first2, BinaryPredicate pred);

template<class InputIterator1, class InputIterator2>
  constexpr bool equal(InputIterator1 first1, InputIterator1 last1,
                       InputIterator2 first2, InputIterator2 last2);
template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2>
  bool equal(ExecutionPolicy&& exec,
             ForwardIterator1 first1, ForwardIterator1 last1,
             ForwardIterator2 first2, ForwardIterator2 last2);

template<class InputIterator1, class InputIterator2,
         class BinaryPredicate>
  constexpr bool equal(InputIterator1 first1, InputIterator1 last1,
                       InputIterator2 first2, InputIterator2 last2,
                       BinaryPredicate pred);
template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2,
         class BinaryPredicate>
  bool equal(ExecutionPolicy&& exec,
             ForwardIterator1 first1, ForwardIterator1 last1,
             ForwardIterator2 first2, ForwardIterator2 last2,
             BinaryPredicate pred);

template<input_iterator I1, sentinel_for<I1> S1, input_iterator I2, sentinel_for<I2> S2,
         class Pred = ranges::equal_to, class Proj1 = identity, class Proj2 = identity>
  requires indirectly_comparable<I1, I2, Pred, Proj1, Proj2>
  constexpr bool ranges::equal(I1 first1, S1 last1, I2 first2, S2 last2,
                               Pred pred = {},
                               Proj1 proj1 = {}, Proj2 proj2 = {});
template<input_range R1, input_range R2, class Pred = ranges::equal_to,
         class Proj1 = identity, class Proj2 = identity>
  requires indirectly_comparable<iterator_t<R1>, iterator_t<R2>, Pred, Proj1, Proj2>
  constexpr bool ranges::equal(R1&& r1, R2&& r2, Pred pred = {},
                               Proj1 proj1 = {}, Proj2 proj2 = {});
[codeblock:end]

[enter:description]
[para]
[:en] Let:
[:zh_CN] 令：

[list]
[item]
[:en@~] [`last2] be [`first2 + (last1 - first1)] for the overloads with no
parameter [`last2] or [`r2],
[:zh_CN@~] [`last2] 对于没有形参 [`last2] 或 [`r2] 的重载为
[`first2 + (last1 - first1)]，

[item]
[:en@~] [`pred] be [`equal_to{}] for the overloads with no parameter [`pred],
[:zh_CN@~] [`pred] 对于没有形参 [`pred] 的重载为 [`equal_to{}]，

[item]
[:en] [$E] be:
[:zh_CN] 令 [$E]：
[list]
[item]
[:en@~] [`pred(*i, *(first2 + (i - first1)))] for the overloads with
no parameter [`proj1],
[:zh_CN@~] 对于没有形参 [`proj1] 的重载为 [`pred(*i, *(first2 + (i - first1)))]，
[item]
[:en@~]
[`invoke(pred, invoke(proj1, *i), invoke(proj2, *(first2 + (i - first1))))]
for the overloads with parameter [`proj1].
[:zh_CN@~] 对于带有形参 [`proj1] 的重载为
[`invoke(pred, invoke(proj1, *i), invoke(proj2, *(first2 + (i - first1))))]。
[list:end]
[list:end]

[para:remarks]
[:en] If [`last2] was not given in the argument list, it denotes
[`first2 + (last1 - first1)] below.
[:zh_CN] 如果实参列表中未给出 [`last2]，则它在下文中代表
[`first2 + (last1 - first1)]。

[para:returns]
[:en] If [`last1 - first1 != last2 - first2], return [`false].
[:zh_CN] 如果 [`last1 - first1 != last2 - first2],，则返回 [`false]。

[:en] Otherwise return [`true] if [$E] holds for every iterator [`i] in the
range [=range(first1,last1)].
[:zh_CN] 否则如果 [$E] 对于范围 [=range(first1,last1)] 中的每个迭代器 [`i] 均
成立，则返回 [`true]。

[:en] Otherwise, returns [`false].
[:zh_CN] 否则，返回 [`false]。

[para:complexity]
[:en] If the types of [`first1], [`last1], [`first2], and [`last2]:
[:zh_CN] 如果 [`first1]，[`last1]，[`first2]，和 [`last2] 的类型：

[list]
[item]
[:en@~] meet the [*Cpp17RandomAccessIterator] requirements
([#random.access.iterators]) for the overloads in namespace [`std], or
[:zh_CN@~] 对于命名空间 [`std] 中的各重载满足 [*Cpp17RandomAccessIterator] 的
规定（[#random.access.iterators]），或者
[item]
[:en@~] pairwise model [`@libconcept sized_sentinel_for]
([#iterator.concept.sizedsentinel]) for the overloads in namespace [`ranges],
[:zh_CN@~] 对于命名空间 [`ranges] 中的各重载配对构成了
[`@libconcept sized_sentinel_for]（[#iterator.concept.sizedsentinel]），
[list:end]

[:en@~] and [`last1 - first1 != last2 - first2], then no applications of the
corresponding predicate and each projection; otherwise,
[:zh_CN@~] 并且有 [`last1 - first1 != last2 - first2]，则不对相应谓词和各个投射
进行运用；否则，

[list]
[item]
[:en] For the overloads with no [`ExecutionPolicy], at most
[$\min([`last1 - first1], \ [`last2 - first2])] applications of the
corresponding predicate and any projections.
[:zh_CN] 对于不带有 [`ExecutionPolicy] 的重载，最多进行
[$\min([`last1 - first1], \ [`last2 - first2])] 次相应谓词和任何投射的运用。

[item]
[:en] For the overloads with an [`ExecutionPolicy],
[$[=O](\min([`last1 - first1], \ [`last2 - first2]))] applications of the
corresponding predicate.
[:zh_CN] 对于带有 [`ExecutionPolicy] 的重载，
[$[=O](\min([`last1 - first1], \ [`last2 - first2]))] 次相应谓词的运用。
[list:end]
[exit:description]
