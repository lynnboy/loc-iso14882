[section#alg.equal
    [:en] Equal
    [:zh_CN] 相等
]

[%@lib equal]
[codeblock:declaration]
template<class InputIterator1, class InputIterator2>
  constexpr bool equal(InputIterator1 first1, InputIterator1 last1,
                       InputIterator2 first2);
template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2>
  bool equal(ExecutionPolicy&& exec,
             ForwardIterator1 first1, ForwardIterator1 last1,
             ForwardIterator2 first2);

template<class InputIterator1, class InputIterator2,
         class BinaryPredicate>
  constexpr bool equal(InputIterator1 first1, InputIterator1 last1,
                       InputIterator2 first2, BinaryPredicate pred);
template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2,
         class BinaryPredicate>
  bool equal(ExecutionPolicy&& exec,
             ForwardIterator1 first1, ForwardIterator1 last1,
             ForwardIterator2 first2, BinaryPredicate pred);

template<class InputIterator1, class InputIterator2>
  constexpr bool equal(InputIterator1 first1, InputIterator1 last1,
                       InputIterator2 first2, InputIterator2 last2);
template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2>
  bool equal(ExecutionPolicy&& exec,
             ForwardIterator1 first1, ForwardIterator1 last1,
             ForwardIterator2 first2, ForwardIterator2 last2);

template<class InputIterator1, class InputIterator2,
         class BinaryPredicate>
  constexpr bool equal(InputIterator1 first1, InputIterator1 last1,
                       InputIterator2 first2, InputIterator2 last2,
                       BinaryPredicate pred);
template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2,
         class BinaryPredicate>
  bool equal(ExecutionPolicy&& exec,
             ForwardIterator1 first1, ForwardIterator1 last1,
             ForwardIterator2 first2, ForwardIterator2 last2,
             BinaryPredicate pred);

template<[[redoc("`:c>")]]input_iterator I1, [[redoc("`:c>")]]sentinel_for<I1> S1, [[redoc("`:c>")]]input_iterator I2, [[redoc("`:c>")]]sentinel_for<I2> S2,
         class Pred = ranges::equal_to, class Proj1 = identity, class Proj2 = identity>
  requires [[redoc("`:c>")]]indirectly_comparable<I1, I2, Pred, Proj1, Proj2>
  constexpr bool ranges::equal(I1 first1, S1 last1, I2 first2, S2 last2,
                               Pred pred = {},
                               Proj1 proj1 = {}, Proj2 proj2 = {});
template<[[redoc("`:c>")]]input_range R1, [[redoc("`:c>")]]input_range R2, class Pred = ranges::equal_to,
         class Proj1 = identity, class Proj2 = identity>
  requires [[redoc("`:c>")]]indirectly_comparable<iterator_t<R1>, iterator_t<R2>, Pred, Proj1, Proj2>
  constexpr bool ranges::equal(R1&& r1, R2&& r2, Pred pred = {},
                               Proj1 proj1 = {}, Proj2 proj2 = {});

template<[[redoc("*:c>")]]execution-policy Ep, [[redoc("`:c>")]]random_access_iterator I1, [[redoc("`:c>")]]sized_sentinel_for<I1> S1,
         [[redoc("`:c>")]]random_access_iterator I2, [[redoc("`:c>")]]sized_sentinel_for<I2> S2,
         class Pred = ranges::equal_to, class Proj1 = identity, class Proj2 = identity>
  requires [[redoc("`:c>")]]indirectly_comparable<I1, I2, Pred, Proj1, Proj2>
  bool ranges::equal(Ep&& exec, I1 first1, S1 last1, I2 first2, S2 last2,
                     Pred pred = {}, Proj1 proj1 = {}, Proj2 proj2 = {});
template<[[redoc("*:c>")]]execution-policy Ep, [[redoc("*:c>")]]sized-random-access-range R1, [[redoc("*:c>")]]sized-random-access-range R2,
         class Pred = ranges::equal_to, class Proj1 = identity, class Proj2 = identity>
  requires [[redoc("`:c>")]]indirectly_comparable<iterator_t<R1>, iterator_t<R2>, Pred, Proj1, Proj2>
  bool ranges::equal(Ep&& exec, R1&& r1, R2&& r2,
                     Pred pred = {}, Proj1 proj1 = {}, Proj2 proj2 = {});
[codeblock:end]

[div:description]
[para]
[:en] Let:
[:zh_CN] 令：

[list]
[item]
[:en@~] [`last2] be [`first2 + (last1 - first1)] for the overloads in namespace
[`std] with no parameter [`last2];
[:zh_CN@~] [`last2] 对于命名空间 [`std] 中没有形参 [`last2] 的重载为
[`first2 + (last1 - first1)]；

[item]
[:en@~] [`pred] be [`equal_to{}] for the overloads with no parameter [`pred];
[:zh_CN@~] [`pred] 对于没有形参 [`pred] 的重载为 [`equal_to{}]；

[item]
[:en] [$E] be:
[:zh_CN] 令 [$E]：
[list]
[item]
[:en@~] [`pred(*i, *(first2 + (i - first1)))] for the overloads with
no parameter [`proj1];
[:zh_CN@~] 对于没有形参 [`proj1] 的重载为 [`pred(*i, *(first2 + (i - first1)))]；
[item]
[:en@~]
[`invoke(pred, invoke(proj1, *i), invoke(proj2, *(first2 + (i - first1))))]
for the overloads with parameter [`proj1].
[:zh_CN@~] 对于带有形参 [`proj1] 的重载为
[`invoke(pred, invoke(proj1, *i), invoke(proj2, *(first2 + (i - first1))))]。
[list:end]
[list:end]

[para:returns]
[:en] If [`last1 - first1 != last2 - first2], return [`false].
[:zh_CN] 如果 [`last1 - first1 != last2 - first2]，则返回 [`false]。

[:en] Otherwise return [`true] if [$E] holds for every iterator [`i] in the
range [=range(first1,last1)].
[:zh_CN] 否则如果 [$E] 对于范围 [=range(first1,last1)] 中的每个迭代器 [`i] 均
成立，则返回 [`true]。

[:en] Otherwise, returns [`false].
[:zh_CN] 否则，返回 [`false]。

[para:complexity]
[:en] If
[:zh_CN] 如果

[list]
[item]
[:en@~] the types of [`first1], [`last1], [`first2], and [`last2] meet the
[^:oc RandomAccessIterator] requirements ([#random.access.iterators]) and
[`last1 - first1 != last2 - first2] for the overloads in namespace [`std];
[:zh_CN@~] 对于命名空间 [`std] 中的各重载，[`first1]，[`last1]，[`first2]，和
[`last2] 的类型满足 [^:oc RandomAccessIterator] 的规定（[#random.access.iterators]），
并且有 [`last1 - first1 != last2 - first2]；
[item]
[:en@~] the types of [`first1], [`last1], [`first2], and [`last2] pairwise model
[`:c sized_sentinel_for] ([#iterator.concept.sizedsentinel]) and
[`last1 - first1 != last2 - first2] for the first and third overloads in
namespace [`ranges], or
[:zh_CN@~] 对于命名空间 [`ranges] 中的第一和第三个重载，[`first1]，[`last1]，[`first2]，
和 [`last2] 的类型配对构成了 [`:c sized_sentinel_for]（[#iterator.concept.sizedsentinel]），
并且有 [`last1 - first1 != last2 - first2]，或者
[item]
[:en@~] [`R1] and [`R2] each model [`:c sized_range] and
[`ranges::distance(r1) != ranges::distance(r2)] for the second and fourth overloads
in namespace [`ranges],
[:zh_CN@~] 对于命名空间 [`ranges] 中的第二和第四个重载，[`R1] 和 [`R2] 各自构成
[`:c sized_range]，且有 [`ranges::distance(r1) != ranges::distance(r2)]，
[list:end]

[:en@~] then no applications of the corresponding predicate and each projection;
otherwise, at most [$\min([`last1 - first1], [`last2 - first2])]
applications of the corresponding predicate and any projections.
[:zh_CN@~] 则不对相应谓词和各个投射进行运用；否则，最多进行
[$\min([`last1 - first1], [`last2 - first2])] 次相应谓词和任何投射的运用。
[div:end]
