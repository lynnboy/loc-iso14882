[section#alg.equal
    [:en] Equal
    [:zh_CN] 相等
]

[%@library equal]
[codeblock:declaration]
template<class InputIterator1, class InputIterator2>
  constexpr bool equal(InputIterator1 first1, InputIterator1 last1,
                       InputIterator2 first2);
template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2>
  bool equal(ExecutionPolicy&& exec,
             ForwardIterator1 first1, ForwardIterator1 last1,
             ForwardIterator2 first2);

template<class InputIterator1, class InputIterator2,
         class BinaryPredicate>
  constexpr bool equal(InputIterator1 first1, InputIterator1 last1,
                       InputIterator2 first2, BinaryPredicate pred);
template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2,
         class BinaryPredicate>
  bool equal(ExecutionPolicy&& exec,
             ForwardIterator1 first1, ForwardIterator1 last1,
             ForwardIterator2 first2, BinaryPredicate pred);

template<class InputIterator1, class InputIterator2>
  constexpr bool equal(InputIterator1 first1, InputIterator1 last1,
                       InputIterator2 first2, InputIterator2 last2);
template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2>
  bool equal(ExecutionPolicy&& exec,
             ForwardIterator1 first1, ForwardIterator1 last1,
             ForwardIterator2 first2, ForwardIterator2 last2);

template<class InputIterator1, class InputIterator2,
         class BinaryPredicate>
  constexpr bool equal(InputIterator1 first1, InputIterator1 last1,
                       InputIterator2 first2, InputIterator2 last2,
                       BinaryPredicate pred);
template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2,
         class BinaryPredicate>
  bool equal(ExecutionPolicy&& exec,
             ForwardIterator1 first1, ForwardIterator1 last1,
             ForwardIterator2 first2, ForwardIterator2 last2,
             BinaryPredicate pred);
[codeblock:end]

[enter:description]
[para:remarks]
[:en] If [`last2] was not given in the argument list, it denotes
[`first2 + (last1 - first1)] below.
[:zh_CN] 如果实参列表中未给出 [`last2]，则它在下文中代表
[`first2 + (last1 - first1)]。

[para:returns]
[:en] If [`last1 - first1 != last2 - first2], return [`false].
[:zh_CN] 如果 [`last1 - first1 != last2 - first2],，则返回 [`false]。

[:en] Otherwise return [`true] if for every iterator [`i] in the range
[=range(first1,last1)] the following corresponding conditions hold:
[`*i == *(first2 + (i - first1))],
[`pred(*i, *(first2 + (i - first1))) != false].
[:zh_CN] 否则如果对于范围 [=range(first1,last1)] 中的每个迭代器 [`i]，以下的对应
条件均成立则返回 [`true]：
[`*i == *(first2 + (i - first1))]，
[`pred(*i, *(first2 + (i - first1))) != false]。

[:en] Otherwise, returns [`false].
[:zh_CN] 否则，返回 [`false]。

[para:complexity]
[list]
[item]
[:en] For the overloads with no [`ExecutionPolicy],
[:zh_CN] 对于不带有 [`ExecutionPolicy] 的重载，

[list]
[item]
[:en] if [`InputIterator1] and [`InputIterator2] meet the
[*Cpp17RandomAccessIterator] requirements ([#random.access.iterators]) and
[`last1 - first1 != last2 - first2], then no applications of the corresponding
predicate; otherwise,
[:zh_CN] 如果 [`InputIterator1] 和 [`InputIterator2] 满足
[*Cpp17RandomAccessIterator] 的规定（[#random.access.iterators]），并且
[`last1 - first1 != last2 - first2]，则不对相应谓词进行运用；否则，

[item]
[:en] at most [$min([`last1 - first1], [`last2 - first2])] applications of the
corresponding predicate.
[:zh_CN] 最多进行 [$min([`last1 - first1], [`last2 - first2])] 次相应谓词的运用。
[list:end]

[item]
[:en] For the overloads with an [`ExecutionPolicy],
[:zh_CN] 对于带有 [`ExecutionPolicy] 的重载，

[list]
[item]
[:en] if [`ForwardIterator1] and [`ForwardIterator2] meet the
[*Cpp17RandomAccessIterator] requirements and
[`last1 - first1 != last2 - first2], then no applications of the corresponding
predicate; otherwise,
[:zh_CN] 如果 [`ForwardIterator1] 和 [`ForwardIterator2] 满足
[*Cpp17RandomAccessIterator] 的规定，并且 [`last1 - first1 != last2 - first2]，
则不对相应谓词进行运用；否则，

[item]
[:en] [$[=O](\min([`last1 - first1], [`last2 - first2]))] applications of the
corresponding predicate.
[:zh_CN] [$[=O](\min([`last1 - first1], [`last2 - first2]))] 次相应谓词的运用。
[list:end]

[list:end]
[exit:description]
