[section#specialized.algorithms.general
    [:en] General
    [:zh_CN] 概述
]

[para]
[:en] The contents specified in [#specialized.algorithms] are declared in the
header [?libheader@ref memory].
[:zh_CN] [#specialized.algorithms] 中所指定的内容声明于头文件
[?libheader@ref memory] 中。

[para]
[:en] Unless otherwise specified, if an exception is thrown in the following
algorithms, objects constructed by a placement [~new-expression] ([#expr.new])
are destroyed in an unspecified order before allowing the exception to propagate.
[:zh_CN] 除非另有规定，否则当下列算法中抛出异常时，以放置式 [~new-表达式]（[#expr.new]）
所构造的各个对象，在允许异常进行传播之前，以某个未指明的顺序进行销毁。

[para]
[begin:note]
[:en] When new objects are created by the algorithms specified in [#specialized.algorithms],
the lifetime ends for any existing objects (including potentially-overlapping
subobjects [#intro.object]) in storage that is reused [#basic.life].
[:zh_CN] 当 [#specialized.algorithms] 中指定的算法创建新对象时，所重用存储
（[#basic.life]）中的任何现存对象（包括潜在重叠子对象 [#intro.object]）的
生存期都终止。
[end:note]

[para]
[:en] Some algorithms defined in [#specialized.algorithms] make use of the
following exposition-only function templates:
[:zh_CN] [#specialized.algorithms] 中所定义的某些算法，用到了下列仅用于阐释的
函数模板：
[codeblock]
template<class T>
  constexpr void* [[redoc("^>")]]voidify(T& obj) noexcept {
    return addressof(obj);
  }

template<class I>
  decltype(auto) [[redoc("*>")]]deref-move(I& it) {
    if constexpr (is_lvalue_reference_v<decltype(*it)>)
      return std::move(*it);
    else
      return *it;
  }
[codeblock:end]
