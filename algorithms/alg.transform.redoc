[section#alg.transform
    [:en] Transform
    [:zh_CN] 变换
]

[%@lib transform]
[codeblock:declaration]
template<class InputIterator, class OutputIterator,
         class UnaryOperation>
  constexpr OutputIterator
    transform(InputIterator first1, InputIterator last1,
              OutputIterator result, UnaryOperation op);
template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2,
         class UnaryOperation>
  ForwardIterator2
    transform(ExecutionPolicy&& exec,
              ForwardIterator1 first1, ForwardIterator1 last1,
              ForwardIterator2 result, UnaryOperation op);

template<class InputIterator1, class InputIterator2,
         class OutputIterator, class BinaryOperation>
  constexpr OutputIterator
    transform(InputIterator1 first1, InputIterator1 last1,
              InputIterator2 first2, OutputIterator result,
              BinaryOperation binary_op);
template<class ExecutionPolicy, class ForwardIterator1, class ForwardIterator2,
         class ForwardIterator, class BinaryOperation>
  ForwardIterator
    transform(ExecutionPolicy&& exec,
              ForwardIterator1 first1, ForwardIterator1 last1,
              ForwardIterator2 first2, ForwardIterator result,
              BinaryOperation binary_op);

template<input_iterator I, sentinel_for<I> S, weakly_incrementable O,
         copy_constructible F, class Proj = identity>
  requires writable<O, indirect_result_t<F&, projected<I, Proj>>>
  constexpr ranges::unary_transform_result<I, O>
    ranges::transform(I first1, S last1, O result, F op, Proj proj = {});
template<input_range R, weakly_incrementable O, copy_constructible F,
         class Proj = identity>
  requires writable<O, indirect_result_t<F&, projected<iterator_t<R>, Proj>>>
  constexpr ranges::unary_transform_result<safe_iterator_t<R>, O>
    ranges::transform(R&& r, O result, F op, Proj proj = {});
template<input_iterator I1, sentinel_for<I1> S1, input_iterator I2, sentinel_for<I2> S2,
         weakly_incrementable O, copy_constructible F, class Proj1 = identity,
         class Proj2 = identity>
  requires writable<O, indirect_result_t<F&, projected<I1, Proj1>,
                                         projected<I2, Proj2>>>
  constexpr ranges::binary_transform_result<I1, I2, O>
    ranges::transform(I1 first1, S1 last1, I2 first2, S2 last2, O result,
                      F binary_op, Proj1 proj1 = {}, Proj2 proj2 = {});
template<input_range R1, input_range R2, weakly_incrementable O,
         copy_constructible F, class Proj1 = identity, class Proj2 = identity>
  requires writable<O, indirect_result_t<F&, projected<iterator_t<R1>, Proj1>,
                                         projected<iterator_t<R2>, Proj2>>>
  constexpr ranges::binary_transform_result<safe_iterator_t<R1>, safe_iterator_t<R2>, O>
    ranges::transform(R1&& r1, R2&& r2, O result,
                      F binary_op, Proj1 proj1 = {}, Proj2 proj2 = {});
[codeblock:end]

[div:description]
[para]
[:en] Let:
[:zh_CN] 令：
[list]
[item]
[:en@~] [`last2] be [`first2 + (last1 - first1)] for the overloads with
parameter [`first2] but no parameter [`last2],
[:zh_CN] 令 [`last2] 对于带有形参 [`first2] 但没有形参 [`last2] 的重载为
[`first2 + (last1 - first1)]，
[item]
[:en@~] [$N] be [`last1 - first1] for unary transforms, or
[$\min([`last1 - first1], \ [`last2 - first2])] for binary transforms, and
[:zh_CN@~] [$N] 对于一元变换为 [`last1 - first1]，或对于二元变换为
[$\min([`last1 - first1], \ [`last2 - first2])]，以及

[item]
[:en] [$E] be:
[:zh_CN] 令 [$E]：

[list]
[item]
[:en@~] [`op(*(first1 + (i - result)))] for unary transforms defined in
namespace [`std],
[:zh_CN@~] 对于定义于命名空间 [`std] 中的一元变换为
[`op(*(first1 + (i - result)))]，
[item]
[:en@~] [`binary_op(*(first1 + (i - result)), *(first2 + (i - result)))] for
binary transforms defined in namespace [`std],
[:zh_CN@~] 对于定义于命名空间 [`std] 中的二元变换为
[`binary_op(*(first1 + (i - result)), *(first2 + (i - result)))]，
[item]
[:en@~] [`invoke(op, invoke(proj, *(first1 + (i - result))))] for unary
transforms defined in namespace [`ranges], or
[:zh_CN@~] 对于定义于命名空间 [`ranges] 中的一元变换为
[`invoke(op, invoke(proj, *(first1 + (i - result))))]，或者
[item]
[:en@~]
[`invoke(binary_op, invoke(proj1, *(first1 + (i - result))),
invoke(proj2, *(first2 + (i - result))))]
for binary transforms defined in namespace [`ranges].
[:zh_CN@~] 对于定义于命名空间 [`ranges] 中的二元变换为
[`invoke(binary_op, invoke(proj1, *(first1 + (i - result))),
invoke(proj2, *(first2 + (i - result))))]。
[list:end]
[list:end]

[para:requires]
[:en] [`op] and [`binary_op] shall not invalidate iterators or subranges, nor
modify elements in the ranges
[:zh_CN] [`op] 和 [`binary_op] 不能使以下各范围的迭代器或子范围无效，也不能对
其中的元素进行改动：

[list]
[item]
[:en@~] [=crange(first1,first1 + `[$N`])],
[:zh_CN@~] [=crange(first1,first1 + `[$N`])]，
[item]
[:en@~] [=crange(first2,first2 + `[$N`])], and
[:zh_CN@~] [=crange(first2,first2 + `[$N`])]，以及
[item]
[:en@~] [=crange(result,result + `[$N`])].[#:note#fn:$1]
[:zh_CN@~] [=crange(result,result + `[$N`])]。[#:note#fn:$1]
[list:end]

[note:foot#fn:$1]
[:en] The use of fully closed ranges is intentional.
[:zh_CN] 此处有意使用了全闭范围。
[note:end]

[para:effects]
[:en] Assigns through every iterator [`i] in the range
[=range(result,result + `[$N`])] a new corresponding value equal to [$E].
[:zh_CN] 通过范围 [=range(result,result + `[$N`])] 中的每个迭代器 [`i]，以一个
新的等于 [$E] 的对应值进行赋值。

[para:returns]
[list]
[item]
[:en@~] [`result + [$N]] for the overloads defined in namespace [`std],
[:zh_CN@~] 对于定义于命名空间 [`std] 中的重载，返回 [`result + [$N]]，
[item]
[:en@~] [`{first1 + [$N], result + [$N]}] for unary transforms defined in
namespace [`ranges], or
[:zh_CN@~] 对于定义于命名空间 [`ranges] 中的一元变换，返回
[`{first1 + [$N], result + [$N]}]，或者
[item]
[:en@~] [`{first1 + [$N], first2 + [$N], result + [$N]}] for binary transforms
defined in namespace [`ranges].
[:zh_CN@~] 对于定义于命名空间 [`ranges] 中的二元变换，返回
[`{first1 + [$N], first2 + [$N], result + [$N]}]。
[list:end]

[para:complexity]
[:en] Exactly [$N] applications of [`op] or [`binary_op], and any projections.
[:zh_CN] 恰好进行 [$N] 次 [`op] 或 [`binary_op]，以及任何投射的运用。

[:en] This requirement also applies to the overload with an [`ExecutionPolicy].
[:zh_CN] 这项规定同样适用于带有 [`ExecutionPolicy] 的重载。

[para:remarks]
[:en] [`result] may be equal to [`first1] or [`first2].
[:zh_CN] [`result] 可以等于 [`first1] 或者 [`first2]。
[div:end]
