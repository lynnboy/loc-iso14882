[section#alg.partitions
    [:en] Partitions
    [:zh_CN] 分区
]

[%@library is_partitioned]
[codeblock:declaration]
template<class InputIterator, class Predicate>
  constexpr bool is_partitioned(InputIterator first, InputIterator last, Predicate pred);
template<class ExecutionPolicy, class ForwardIterator, class Predicate>
  bool is_partitioned(ExecutionPolicy&& exec,
                      ForwardIterator first, ForwardIterator last, Predicate pred);

template<input_iterator I, sentinel_for<I> S, class Proj = identity,
         indirect_unary_predicate<projected<I, Proj>> Pred>
  constexpr bool ranges::is_partitioned(I first, S last, Pred pred, Proj proj = {});
template<input_range R, class Proj = identity,
         indirect_unary_predicate<projected<iterator_t<R>, Proj>> Pred>
  constexpr bool ranges::is_partitioned(R&& r, Pred pred, Proj proj = {});
[codeblock:end]

[begin:description]
[para]
[:en] Let [`proj] be [`identity{}] for the overloads with no parameter named
[`proj].
[:zh_CN] 令 [`proj] 对于没有名为 [`proj] 的形参的重载为 [`identity{}]。

[para:returns]
[:en] [`true] if and only if the elements [`e] of [=range(first,last)] are
partitioned with respect to the expression
[`bool(invoke(pred, invoke(proj, e)))].
[:zh_CN] 当且仅当 [=range(first,last)] 中的各元素 [`e] 根据表达式
[`bool(invoke(pred, invoke(proj, e)))] 进行了分区时返回 [`true]。

[para:complexity]
[:en] Linear.
[:zh_CN] 线性。

[:en] At most [`last - first] applications of [`pred] and [`proj].
[:zh_CN] 最多进行 [`last - first] 次 [`pred] 和 [`proj] 的运用。
[end:description]

[%@library partition]
[codeblock:declaration]
template<class ForwardIterator, class Predicate>
  constexpr ForwardIterator
    partition(ForwardIterator first, ForwardIterator last, Predicate pred);
template<class ExecutionPolicy, class ForwardIterator, class Predicate>
  ForwardIterator
    partition(ExecutionPolicy&& exec,
              ForwardIterator first, ForwardIterator last, Predicate pred);

template<permutable I, sentinel_for<I> S, class Proj = identity,
         indirect_unary_predicate<projected<I, Proj>> Pred>
  constexpr subrange<I>
    ranges::partition(I first, S last, Pred pred, Proj proj = {});
template<forward_range R, class Proj = identity,
         indirect_unary_predicate<projected<iterator_t<R>, Proj>> Pred>
  requires permutable<iterator_t<R>>
  constexpr safe_subrange_t<R>
    ranges::partition(R&& r, Pred pred, Proj proj = {});
[codeblock:end]

[begin:description]
[para]
[:en] Let [`proj] be [`identity{}] for the overloads with no parameter named
[`proj] and let [$E(x)] be [`bool(invoke(pred, invoke(proj, [$x])))].
[:zh_CN] 令 [`proj] 对于没有名为 [`proj] 的形参的重载为 [`identity{}]，并令
[$E(x)] 为 [`bool(invoke(pred, invoke(proj, [$x])))]。

[para:requires]
[:en] For the overloads in namespace [`std], [`ForwardIterator] shall meet the
[*Cpp17ValueSwappable] requirements ([#swappable.requirements]).
[:zh_CN] 对于命名空间 [`std] 中的各重载，[`ForwardIterator] 应当满足
[*Cpp17ValueSwappable] 的规定（[#swappable.requirements]）。

[para:effects]
[:en] Places all the elements [`e] in [=range(first,last)] that satisfy
[$E([`e])] before all the elements that do not.
[:zh_CN] 将 [=range(first,last)] 中的所有符合 [$E([`e])] 的元素 [`e] 置于所有
不符合的元素之前。

[para:returns]
[:en] Let [`i] be an iterator such that [$E([`*j])] is [`true] for every
iterator [`j] in [=range(first,i)] and [`false] for every iterator [`j] in
[=range(i,last)].
[:zh_CN] 令 [`i] 为使得 [$E([`*j])] 对于 [=range(first,i)] 中的每个迭代器 [`j]
均为 [`false]，而对于 [=range(i,last)] 中的每个迭代器 [`j] 均为 [`false] 的
迭代器。

[:en] Returns:
[:zh_CN] 返回：

[list]
[item]
[:en@~] [`i] for the overloads in namespace [`std], or
[:zh_CN@~] 对于命名空间 [`std] 中的各重载返回 [`i]，或者
[item]
[:en@~] [`{i, last}] for the overloads in namespace [`ranges].
[:zh_CN@~] 对于命名空间 [`ranges] 中的各重载返回 [`{i, last}]。
[list:end]

[para:complexity]
[:en] Let [$N = [`last - first]]:
[:zh_CN] 令 [$N = [`last - first]]：

[list]
[item]
[:en] For the overload with no [`ExecutionPolicy], exactly [$N] applications of
the predicate and projection.
[:zh_CN] 对于不带有 [`ExecutionPolicy] 的重载，恰好进行 [$N] 次谓词和投射的运用。

[:en] At most [$N / 2] swaps if the type of [`first] meets the
[*Cpp17BidirectionalIterator] requirements for the overloads in namespace [`std]
or models [`bidirectional_iterator] for the overloads in namespace [`ranges],
and at most [$N] swaps otherwise.
[:zh_CN] 当 [`first] 的类型对于命名空间 [`std] 中的各重载满足
[*Cpp17BidirectionalIterator] 的规定，或对于命名空间 [`ranges] 中的各重载构成
[`bidirectional_iterator] 时，最多进行 [$N / 2] 次交换；否则最多进行 [$N] 次交换。

[item]
[:en] For the overload with an [`ExecutionPolicy], [$[=O](N \log N)] swaps and
[$[=O](N)] applications of the predicate.
[:zh_CN] 对于带有 [`ExecutionPolicy] 的重载，[$[=O](N \log N)] 次交换和
[$[=O](N)] 次谓词的运用。
[list:end]
[end:description]

[%@library stable_partition]
[codeblock:declaration]
template<class BidirectionalIterator, class Predicate>
  BidirectionalIterator
    stable_partition(BidirectionalIterator first, BidirectionalIterator last, Predicate pred);
template<class ExecutionPolicy, class BidirectionalIterator, class Predicate>
  BidirectionalIterator
    stable_partition(ExecutionPolicy&& exec,
                     BidirectionalIterator first, BidirectionalIterator last, Predicate pred);

template<bidirectional_iterator I, sentinel_for<I> S, class Proj = identity,
         indirect_unary_predicate<projected<I, Proj>> Pred>
  requires permutable<I>
  subrange<I> ranges::stable_partition(I first, S last, Pred pred, Proj proj = {});
template<bidirectional_range R, class Proj = identity,
         indirect_unary_predicate<projected<iterator_t<R>, Proj>> Pred>
  requires permutable<iterator_t<R>>
  safe_subrange_t<R> ranges::stable_partition(R&& r, Pred pred, Proj proj = {});
[codeblock:end]

[begin:description]
[para]
[:en] Let [`proj] be [`identity{}] for the overloads with no parameter named
[`proj] and let [$E(x)] be [`bool(invoke(pred, invoke(proj, [$x])))].
[:zh_CN] 令 [`proj] 对于没有名为 [`proj] 的形参的重载为 [`identity{}]，并令
[$E(x)] 为 [`bool(invoke(pred, invoke(proj, [$x])))]。

[para:requires]
[:en] For the overloads in namespace [`std], [`BidirectionalIterator] shall meet
the [*Cpp17ValueSwappable] requirements ([#swappable.requirements]) and the type
of [`*first] shall meet the [*Cpp17MoveConstructible]
([#:tab#cpp17.moveconstructible]) and [*Cpp17MoveAssignable]
([#:tab#cpp17.moveassignable]) requirements.
[:zh_CN] 对于命名空间 [`std] 中的各重载，[`BidirectionalIterator] 应当满足
[*Cpp17ValueSwappable] 的规定（[#swappable.requirements]），并且 [`*first] 的
类型应当满足 [*Cpp17MoveConstructible]（[#:tab#cpp17.moveconstructible]）和
[*Cpp17MoveAssignable]（[#:tab#cpp17.moveassignable]）的规定。

[para:effects]
[:en] Places all the elements [`e] in [=range(first,last)] that satisfy
[$E([`e])] before all the elements that do not.
[:zh_CN] 将 [=range(first,last)] 中的所有符合 [$E([`e])] 的元素 [`e] 置于所有
不符合的元素之前。

[:en] The relative order of the elements in both groups is preserved.
[:zh_CN] 两个分组中，各元素之间的相对顺序均被保留。

[para:returns]
[:en] Let [`i] be an iterator such that for every iterator [`j] in
[=range(first,i)], [$E([`*j])] is [`true], and for every iterator [`j] in the
range [=range(i,last)], [$E([`*j])] is [`false].
[:zh_CN] 令 [`i] 为使得对于 [=range(first,i)] 中的每个迭代器 [`j]，[$E([`*j])]
均为 [`true]，而对于范围 [=range(i,last)] 中的每个迭代器 [`j]，[$E([`*j])] 均为
[`false] 的迭代器。

[:en] Returns:
[:zh_CN] 返回：

[list]
[item]
[:en@~] [`i] for the overloads in namespace [`std], or
[:zh_CN@~] 对于命名空间 [`std] 中的各重载返回 [`i]，或者
[item]
[:en@~] [`{i, last}] for the overloads in namespace [`ranges].
[:zh_CN@~] 对于命名空间 [`ranges] 中的各重载返回 [`{i, last}]。
[list:end]

[para:complexity]
[:en] Let [$N] = [`last - first]:
[:zh_CN] 令 [$N] = [`last - first]：

[list]
[item]
[:en] For the overloads with no [`ExecutionPolicy], at most [$N \log N] swaps,
but only [$[=O](N)] swaps if there is enough extra memory.
[:zh_CN] 对于不带有 [`ExecutionPolicy] 的重载，最多进行 [$N \log N] 次交换，但当
有足够的额外内存时仅进行 [$[=O](N)] 次交换。

[:en] Exactly [$N] applications of the predicate and projection.
[:zh_CN] 恰好进行 [$N] 次谓词和投射的运用。

[item]
[:en] For the overload with an [`ExecutionPolicy], [$[=O](N \log N)] swap and
[$[=O](N)] applications of the predicate.
[:zh_CN] 对于带有 [`ExecutionPolicy] 的重载，进行 [$[=O](N \log N)] 次交换和
[$[=O](N)] 次谓词的运用。
[list:end]
[end:description]

[%@library partition_copy]
[codeblock:declaration]
template<class InputIterator, class OutputIterator1,
         class OutputIterator2, class Predicate>
  constexpr pair<OutputIterator1, OutputIterator2>
    partition_copy(InputIterator first, InputIterator last,
                   OutputIterator1 out_true, OutputIterator2 out_false, Predicate pred);
template<class ExecutionPolicy, class ForwardIterator, class ForwardIterator1,
         class ForwardIterator2, class Predicate>
  pair<ForwardIterator1, ForwardIterator2>
    partition_copy(ExecutionPolicy&& exec,
                   ForwardIterator first, ForwardIterator last,
                   ForwardIterator1 out_true, ForwardIterator2 out_false, Predicate pred);

template<input_iterator I, sentinel_for<I> S, weakly_incrementable O1, weakly_incrementable O2,
         class Proj = identity, indirect_unary_predicate<projected<I, Proj>> Pred>
  requires indirectly_copyable<I, O1> && indirectly_copyable<I, O2>
  constexpr ranges::partition_copy_result<I, O1, O2>
    ranges::partition_copy(I first, S last, O1 out_true, O2 out_false, Pred pred,
                           Proj proj = {});
template<input_range R, weakly_incrementable O1, weakly_incrementable O2,
         class Proj = identity,
         indirect_unary_predicate<projected<iterator_t<R>, Proj>> Pred>
  requires indirectly_copyable<iterator_t<R>, O1> &&
           indirectly_copyable<iterator_t<R>, O2>
  constexpr ranges::partition_copy_result<safe_iterator_t<R>, O1, O2>
    ranges::partition_copy(R&& r, O1 out_true, O2 out_false, Pred pred, Proj proj = {});
[codeblock:end]

[begin:description]
[para]
[:en] Let [`proj] be [`identity{}] for the overloads with no parameter named
[`proj] and let [$E(x)] be [`bool(invoke(pred, invoke(proj, [$x])))].
[:zh_CN] 令 [`proj] 对于没有名为 [`proj] 的形参的重载为 [`identity{}]，并令
[$E(x)] 为 [`bool(invoke(pred, invoke(proj, [$x])))]。

[para:requires]
[:en] The input range and output ranges shall not overlap.
[:zh_CN] 输入范围和各输出范围不能重叠。

[:en] For the overloads in namespace [`std], the expression [`*first] shall be
writable ([#iterator.requirements.general]) to [`out_true] and [`out_false].
[:zh_CN] 对于命名空间 [`std] 中的各重载，表达式 [`*first] 应当可以向 [`out_true]
和 [`out_false] 写出（[#iterator.requirements.general]）。

[begin:note]
[:en] For the overload with an [`ExecutionPolicy], there may be a performance
cost if [`first][=']s value type does not meet the [*Cpp17CopyConstructible]
requirements.
[:zh_CN] 对于带有一个 [`ExecutionPolicy] 的重载，如果 [`first] 的值类型不满足
[*Cpp17CopyConstructible] 的规定时，可能存在性能损耗。
[end:note]

[para:effects]
[:en] For each iterator [`i] in [=range(first,last)], copies [`*i] to the output
range beginning with [`out_true] if [$E([`*i])] is [`true], or to the output
range beginning with [`out_false] otherwise.
[:zh_CN] 对于范围 [=range(first,last)] 中的每个迭代器 [`i]，如果 [$E([`*i])] 为
[`true]，则将 [`*i] 复制到以 [`out_true] 开始的输出范围，否则就将其复制到以
[`out_false] 开始的输出范围。

[para:returns]
[:en] Let [`o1] be the end of the output range beginning at [`out_true], and
[`o2] the end of the output range beginning at [`out_false].
[:zh_CN] 令 [`o1] 为以 [`out_true] 开始的输出范围的末尾，而 [`o2] 为以
[`out_false] 开始的输出范围的末尾。

[:en] Returns
[:zh_CN] 返回：

[list]
[item]
[:en@~] [`{o1, o2}] for the overloads in namespace [`std], or
[:zh_CN@~] 对于命名空间 [`std] 中的各重载返回 [`{o1, o2}]，或者
[item]
[:en@~] [`{last, o1, o2}] for the overloads in namespace [`ranges].
[:zh_CN@~] 对于命名空间 [`ranges] 中的各重载返回 [`{last, o1, o2}]。
[list:end]

[para:complexity]
[:en] Exactly [`last - first] applications of [`pred] and [`proj].
[:zh_CN] 恰好进行 [`last - first] 次 [`pred] 和 [`proj] 的运用。
[end:description]

[%@library partition_point]
[codeblock:declaration]
template<class ForwardIterator, class Predicate>
  constexpr ForwardIterator
    partition_point(ForwardIterator first, ForwardIterator last, Predicate pred);

template<forward_iterator I, sentinel_for<I> S, class Proj = identity,
         indirect_unary_predicate<projected<I, Proj>> Pred>
  constexpr I ranges::partition_point(I first, S last, Pred pred, Proj proj = {});
template<forward_range R, class Proj = identity,
         indirect_unary_predicate<projected<iterator_t<R>, Proj>> Pred>
  constexpr safe_iterator_t<R>
    ranges::partition_point(R&& r, Pred pred, Proj proj = {});
[codeblock:end]

[begin:description]
[para]
[:en] Let [`proj] be [`identity{}] for the overloads with no parameter named
[`proj] and let [$E(x)] be [`bool(invoke(pred, invoke(proj, [$x])))].
[:zh_CN] 令 [`proj] 对于没有名为 [`proj] 的形参的重载为 [`identity{}]，并令
[$E(x)] 为 [`bool(invoke(pred, invoke(proj, [$x])))]。

[para:requires]
[:en] The elements [`e] of [=range(first,last)] shall be partitioned with
respect to [$E([`e])].
[:zh_CN] [=range(first,last)] 中的元素 [`e] 应当已经根据 [$E([`e])] 进行了分区。

[para:returns]
[:en] An iterator [`mid] such that [$E([`*i])] is [`true] for all iterators [`i]
in [=range(first,mid)], and [`false] for all iterators [`i] in
[=range(mid,last)].
[:zh_CN] 迭代器 [`mid]，使得 [$E([`*i])] 对 [=range(first,mid)] 中的每个迭代器
[`i] 均为 [`true]，而对 [=range(mid,last)] 中的每个迭代器 [`i] 均为 [`false]。

[para:complexity]
[:en] [$[=O](\log([`last - first]))] applications of [`pred] and [`proj].
[:zh_CN] [$[=O](\log([`last - first]))] 次 [`pred] 和 [`proj] 的运用。
[end:description]
