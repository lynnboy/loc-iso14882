[section#alg.partitions
    [:en] Partitions
    [:zh_CN] 分区
]

[%@lib is_partitioned]
[codeblock:declaration]
template<class InputIterator, class Predicate>
  constexpr bool is_partitioned(InputIterator first, InputIterator last, Predicate pred);
template<class ExecutionPolicy, class ForwardIterator, class Predicate>
  bool is_partitioned(ExecutionPolicy&& exec,
                      ForwardIterator first, ForwardIterator last, Predicate pred);

template<[[redoc("`:c>")]]input_iterator I, [[redoc("`:c>")]]sentinel_for<I> S, class Proj = identity,
         [[redoc("`:c>")]]indirect_unary_predicate<projected<I, Proj>> Pred>
  constexpr bool ranges::is_partitioned(I first, S last, Pred pred, Proj proj = {});
template<[[redoc("`:c>")]]input_range R, class Proj = identity,
         [[redoc("`:c>")]]indirect_unary_predicate<projected<iterator_t<R>, Proj>> Pred>
  constexpr bool ranges::is_partitioned(R&& r, Pred pred, Proj proj = {});

template<[[redoc("*:c>")]]execution-policy Ep, [[redoc("`:c>")]]random_access_iterator I, [[redoc("`:c>")]]sized_sentinel_for<I> S,
         class Proj = identity, [[redoc("`:c>")]]indirect_unary_predicate<projected<I, Proj>> Pred>
  bool ranges::is_partitioned(Ep&& exec, I first, S last, Pred pred, Proj proj = {});
template<[[redoc("*:c>")]]execution-policy Ep, [[redoc("*:c>")]]sized-random-access-range R, class Proj = identity,
         [[redoc("`:c>")]]indirect_unary_predicate<projected<iterator_t<R>, Proj>> Pred>
  bool ranges::is_partitioned(Ep&& exec, R&& r, Pred pred, Proj proj = {});
[codeblock:end]

[div:description]
[para]
[:en] Let [`proj] be [`identity{}] for the overloads with no parameter named [`proj].
[:zh_CN] 令 [`proj] 对于没有名为 [`proj] 的形参的重载为 [`identity{}]。

[para:returns]
[:en] [`true] if and only if the elements [`e] of [=range(first,last)] are
partitioned with respect to the expression [`bool(invoke(pred, invoke(proj, e)))].
[:zh_CN] 当且仅当 [=range(first,last)] 中的各元素 [`e] 根据表达式
[`bool(invoke(pred, invoke(proj, e)))] 进行了分区时返回 [`true]。

[para:complexity]
[:en] Linear.
[:zh_CN] 线性。

[:en] At most [`last - first] applications of [`pred] and [`proj].
[:zh_CN] 最多进行 [`last - first] 次 [`pred] 和 [`proj] 的运用。
[div:end]

[%@lib partition]
[codeblock:declaration]
template<class ForwardIterator, class Predicate>
  constexpr ForwardIterator
    partition(ForwardIterator first, ForwardIterator last, Predicate pred);
template<class ExecutionPolicy, class ForwardIterator, class Predicate>
  ForwardIterator
    partition(ExecutionPolicy&& exec, ForwardIterator first, ForwardIterator last, Predicate pred);

template<[[redoc("`:c>")]]permutable I, [[redoc("`:c>")]]sentinel_for<I> S, class Proj = identity,
         [[redoc("`:c>")]]indirect_unary_predicate<projected<I, Proj>> Pred>
  constexpr subrange<I>
    ranges::partition(I first, S last, Pred pred, Proj proj = {});
template<[[redoc("`:c>")]]forward_range R, class Proj = identity,
         [[redoc("`:c>")]]indirect_unary_predicate<projected<iterator_t<R>, Proj>> Pred>
  requires [[redoc("`:c>")]]permutable<iterator_t<R>>
  constexpr borrowed_subrange_t<R>
    ranges::partition(R&& r, Pred pred, Proj proj = {});

template<[[redoc("*:c>")]]execution-policy Ep, [[redoc("`:c>")]]random_access_iterator I, [[redoc("`:c>")]]sized_sentinel_for<I> S,
         class Proj = identity, [[redoc("`:c>")]]indirect_unary_predicate<projected<I, Proj>> Pred>
  subrange<I> ranges::partition(Ep&& exec, I first, S last, Pred pred, Proj proj = {});
template<[[redoc("*:c>")]]execution-policy Ep, [[redoc("*:c>")]]sized-random-access-range R, class Proj = identity,
         [[redoc("`:c>")]]indirect_unary_predicate<projected<iterator_t<R>, Proj>> Pred>
  requires [[redoc("`:c>")]]permutable<iterator_t<R>>
  borrowed_subrange_t<R> ranges::partition(Ep&& exec, R&& r, Pred pred, Proj proj = {});
[codeblock:end]

[div:description]
[para]
[:en] Let [`proj] be [`identity{}] for the overloads with no parameter named
[`proj] and let [$E(x)] be [`bool(invoke(pred, invoke(proj, [$x])))].
[:zh_CN] 令 [`proj] 对于没有名为 [`proj] 的形参的重载为 [`identity{}]，并令
[$E(x)] 为 [`bool(invoke(pred, invoke(proj, [$x])))]。

[para:expects]
[:en] For the overloads in namespace [`std], [`ForwardIterator] meets the
[^:oc ValueSwappable] requirements ([#swappable.requirements]).
[:zh_CN] 对于命名空间 [`std] 中的各重载，[`ForwardIterator] 满足
[^:oc ValueSwappable] 的规定（[#swappable.requirements]）。

[para:effects]
[:en] Places all the elements [`e] in [=range(first,last)] that satisfy
[$E([`e])] before all the elements that do not.
[:zh_CN] 将 [=range(first,last)] 中的所有符合 [$E([`e])] 的元素 [`e] 置于所有不符合的元素之前。

[para:returns]
[:en] Let [`i] be an iterator such that [$E([`*j])] is [`true] for every iterator [`j]
in [=range(first,i)] and [`false] for every iterator [`j] in [=range(i,last)].
[:zh_CN] 令 [`i] 为使得 [$E([`*j])] 对于 [=range(first,i)] 中的每个迭代器 [`j] 均为
[`false]，而对于 [=range(i,last)] 中的每个迭代器 [`j] 均为 [`false] 的迭代器。

[:en] Returns:
[:zh_CN] 返回：

[list]
[item]
[:en@~] [`i] for the overloads in namespace [`std].
[:zh_CN@~] 对于命名空间 [`std] 中的各重载返回 [`i]。
[item]
[:en@~] [`{i, last}] for the overloads in namespace [`ranges].
[:zh_CN@~] 对于命名空间 [`ranges] 中的各重载返回 [`{i, last}]。
[list:end]

[para:complexity]
[:en] Let [$N = [`last - first]]:
[:zh_CN] 令 [$N = [`last - first]]：

[list]
[item]
[:en] For the non-parallel algorithm overloads, exactly [$N] applications of
the predicate and projection.
[:zh_CN] 对于各非并行算法重载，恰好进行 [$N] 次谓词和投射的运用。

[:en] At most [$N / 2] swaps if the type of [`first] meets the
[^:oc BidirectionalIterator] requirements for the overloads in namespace [`std]
or models [`:c bidirectional_iterator] for the overloads in namespace [`ranges],
and at most [$N] swaps otherwise.
[:zh_CN] 当 [`first] 的类型对于命名空间 [`std] 中的各重载满足
[^:oc BidirectionalIterator] 的规定，或对于命名空间 [`ranges] 中的各重载构成
[`:c bidirectional_iterator] 时，最多进行 [$N / 2] 次交换；否则最多进行 [$N] 次交换。

[item]
[:en] For the parallel algorithm overloads, [?bigoh N \log N] swaps and
[?bigoh N] applications of the predicate.
[:zh_CN] 对于各并行算法重载，[?bigoh N \log N] 次交换和 [?bigoh N] 次谓词的运用。
[list:end]
[div:end]

[%@lib stable_partition]
[codeblock:declaration]
template<class BidirectionalIterator, class Predicate>
  BidirectionalIterator
    constexpr stable_partition(BidirectionalIterator first, BidirectionalIterator last,
                               Predicate pred);
template<class ExecutionPolicy, class BidirectionalIterator, class Predicate>
  BidirectionalIterator
    stable_partition(ExecutionPolicy&& exec,
                     BidirectionalIterator first, BidirectionalIterator last, Predicate pred);

template<[[redoc("`:c>")]]bidirectional_iterator I, [[redoc("`:c>")]]sentinel_for<I> S, class Proj = identity,
         [[redoc("`:c>")]]indirect_unary_predicate<projected<I, Proj>> Pred>
  requires [[redoc("`:c>")]]permutable<I>
  constexpr subrange<I> ranges::stable_partition(I first, S last, Pred pred, Proj proj = {});
template<[[redoc("`:c>")]]bidirectional_range R, class Proj = identity,
         [[redoc("`:c>")]]indirect_unary_predicate<projected<iterator_t<R>, Proj>> Pred>
  requires [[redoc("`:c>")]]permutable<iterator_t<R>>
  constexpr borrowed_subrange_t<R> ranges::stable_partition(R&& r, Pred pred, Proj proj = {});

template<[[redoc("*:c>")]]execution-policy Ep, [[redoc("`:c>")]]random_access_iterator I, [[redoc("`:c>")]]sized_sentinel_for<I> S,
         class Proj = identity, [[redoc("`:c>")]]indirect_unary_predicate<projected<I, Proj>> Pred>
  requires [[redoc("`:c>")]]permutable<I>
  subrange<I>
    ranges::stable_partition(Ep&& exec, I first, S last, Pred pred, Proj proj = {});
template<[[redoc("*:c>")]]execution-policy Ep, [[redoc("*:c>")]]sized-random-access-range R, class Proj = identity,
         [[redoc("`:c>")]]indirect_unary_predicate<projected<iterator_t<R>, Proj>> Pred>
  requires [[redoc("`:c>")]]permutable<iterator_t<R>>
  borrowed_subrange_t<R>
    ranges::stable_partition(Ep&& exec, R&& r, Pred pred, Proj proj = {});
[codeblock:end]

[div:description]
[para]
[:en] Let [`proj] be [`identity{}] for the overloads with no parameter named
[`proj] and let [$E(x)] be [`bool(invoke(pred, invoke(proj, [$x])))].
[:zh_CN] 令 [`proj] 对于没有名为 [`proj] 的形参的重载为 [`identity{}]，并令
[$E(x)] 为 [`bool(invoke(pred, invoke(proj, [$x])))]。

[para:expects]
[:en] For the overloads in namespace [`std], [`BidirectionalIterator] meets the
[^:oc ValueSwappable] requirements ([#swappable.requirements]) and the type of
[`*first] meets the [^:oc MoveConstructible] ([#:tab#cpp17.moveconstructible])
and [^:oc MoveAssignable] ([#:tab#cpp17.moveassignable]) requirements.
[:zh_CN] 对于命名空间 [`std] 中的各重载，[`BidirectionalIterator] 满足
[^:oc ValueSwappable] 的规定（[#swappable.requirements]），并且 [`*first] 的
类型满足 [^:oc MoveConstructible]（[#:tab#cpp17.moveconstructible]）和
[^:oc MoveAssignable]（[#:tab#cpp17.moveassignable]）的规定。

[para:effects]
[:en] Places all the elements [`e] in [=range(first,last)] that satisfy
[$E([`e])] before all the elements that do not.
[:zh_CN] 将 [=range(first,last)] 中的所有符合 [$E([`e])] 的元素 [`e] 置于所有不符合的元素之前。

[:en] The relative order of the elements in both groups is preserved.
[:zh_CN] 两个分组中，各元素之间的相对顺序均被保留。

[para:returns]
[:en] Let [`i] be an iterator such that for every iterator [`j] in
[=range(first,i)], [$E([`*j])] is [`true], and for every iterator [`j] in the
range [=range(i,last)], [$E([`*j])] is [`false].
[:zh_CN] 令 [`i] 为使得对于 [=range(first,i)] 中的每个迭代器 [`j]，[$E([`*j])] 均为 [`true]，
而对于范围 [=range(i,last)] 中的每个迭代器 [`j]，[$E([`*j])] 均为 [`false] 的迭代器。

[:en] Returns:
[:zh_CN] 返回：

[list]
[item]
[:en@~] [`i] for the overloads in namespace [`std].
[:zh_CN@~] 对于命名空间 [`std] 中的各重载返回 [`i]。
[item]
[:en@~] [`{i, last}] for the overloads in namespace [`ranges].
[:zh_CN@~] 对于命名空间 [`ranges] 中的各重载返回 [`{i, last}]。
[list:end]

[para:complexity]
[:en] Let [$N] = [`last - first]:
[:zh_CN] 令 [$N] = [`last - first]：

[list]
[item]
[:en] For the non-parallel algorithm overloads, at most [$N \log_2 N] swaps,
but only [?bigoh N] swaps if there is enough extra memory.
[:zh_CN] 对于各非并行算法重载，最多进行 [$N \log_2 N] 次交换，
但当有足够的额外内存时仅进行 [?bigoh N] 次交换。

[:en] Exactly [$N] applications of the predicate and projection.
[:zh_CN] 恰好进行 [$N] 次谓词和投射的运用。

[item]
[:en] For the parallel algorithm overloads, [?bigoh N \log N] swap and
[?bigoh N] applications of the predicate.
[:zh_CN] 对于各并行算法重载，进行 [?bigoh N \log N] 次交换和 [?bigoh N] 次谓词的运用。
[list:end]
[div:end]

[%@lib partition_copy]
[codeblock:declaration]
template<class InputIterator, class OutputIterator1, class OutputIterator2, class Predicate>
  constexpr pair<OutputIterator1, OutputIterator2>
    partition_copy(InputIterator first, InputIterator last,
                   OutputIterator1 out_true, OutputIterator2 out_false, Predicate pred);
template<class ExecutionPolicy, class ForwardIterator, class ForwardIterator1,
         class ForwardIterator2, class Predicate>
  pair<ForwardIterator1, ForwardIterator2>
    partition_copy(ExecutionPolicy&& exec,
                   ForwardIterator first, ForwardIterator last,
                   ForwardIterator1 out_true, ForwardIterator2 out_false, Predicate pred);

template<[[redoc("`:c>")]]input_iterator I, [[redoc("`:c>")]]sentinel_for<I> S, [[redoc("`:c>")]]weakly_incrementable O1, [[redoc("`:c>")]]weakly_incrementable O2,
         class Proj = identity, [[redoc("`:c>")]]indirect_unary_predicate<projected<I, Proj>> Pred>
  requires [[redoc("`:c>")]]indirectly_copyable<I, O1> && [[redoc("`:c>")]]indirectly_copyable<I, O2>
  constexpr ranges::partition_copy_result<I, O1, O2>
    ranges::partition_copy(I first, S last, O1 out_true, O2 out_false, Pred pred,
                           Proj proj = {});
template<[[redoc("`:c>")]]input_range R, [[redoc("`:c>")]]weakly_incrementable O1, [[redoc("`:c>")]]weakly_incrementable O2,
         class Proj = identity,
         [[redoc("`:c>")]]indirect_unary_predicate<projected<iterator_t<R>, Proj>> Pred>
  requires [[redoc("`:c>")]]indirectly_copyable<iterator_t<R>, O1> &&
           [[redoc("`:c>")]]indirectly_copyable<iterator_t<R>, O2>
  constexpr ranges::partition_copy_result<borrowed_iterator_t<R>, O1, O2>
    ranges::partition_copy(R&& r, O1 out_true, O2 out_false, Pred pred, Proj proj = {});

template<[[redoc("*:c>")]]execution-policy Ep, [[redoc("`:c>")]]random_access_iterator I, [[redoc("`:c>")]]sized_sentinel_for<I> S,
         [[redoc("`:c>")]]random_access_iterator O1, [[redoc("`:c>")]]sized_sentinel_for<O1> OutS1,
         [[redoc("`:c>")]]random_access_iterator O2, [[redoc("`:c>")]]sized_sentinel_for<O2> OutS2,
         class Proj = identity, [[redoc("`:c>")]]indirect_unary_predicate<projected<I, Proj>> Pred>
  requires [[redoc("`:c>")]]indirectly_copyable<I, O1> && [[redoc("`:c>")]]indirectly_copyable<I, O2>
  ranges::partition_copy_result<I, O1, O2>
    ranges::partition_copy(Ep&& exec, I first, S last, O1 out_true, OutS1 last_true,
                           O2 out_false, OutS2 last_false, Pred pred, Proj proj = {});
template<[[redoc("*:c>")]]execution-policy Ep, [[redoc("*:c>")]]sized-random-access-range R,
         [[redoc("*:c>")]]sized-random-access-range OutR1, [[redoc("*:c>")]]sized-random-access-range OutR2,
         class Proj = identity,
         [[redoc("`:c>")]]indirect_unary_predicate<projected<iterator_t<R>, Proj>> Pred>
  requires [[redoc("`:c>")]]indirectly_copyable<iterator_t<R>, iterator_t<OutR1>> &&
            [[redoc("`:c>")]]indirectly_copyable<iterator_t<R>, iterator_t<OutR2>>
  ranges::partition_copy_result<borrowed_iterator_t<R>, borrowed_iterator_t<OutR1>,
                                borrowed_iterator_t<OutR2>>
    ranges::partition_copy(Ep&& exec, R&& r, OutR1&& out_true_r, OutR2&& out_false_r,
                           Pred pred, Proj proj = {});
[codeblock:end]

[div:description]
[para]
[:en] Let [`proj] be [`identity{}] for the overloads with no parameter named
[`proj] and let [$E(x)] be [`bool(invoke(pred, invoke(proj, [$x])))].
[:zh_CN] 令 [`proj] 对于没有名为 [`proj] 的形参的重载为 [`identity{}]，并令
[$E(x)] 为 [`bool(invoke(pred, invoke(proj, [$x])))]。

[para]
[:en] For the overloads with no parameters [`last_true], [`last_false],
[`out_true_r], or [`out_false_r], let
[:zh_CN] 对于没有形参 [`last_true]、[`last_false]、[`out_true_r] 或
[`out_false_r] 的各重载，令
[list]
[item]
[:en@~] [$M] be the number of iterators [`i] in [=range(first,last)] for which
[$E([`*i])] is [`true], and [$K] be [`last - first - [$M]];
[:zh_CN@~] [$M] 为 [=range(first,last)] 中使得 [$E([`*i])] 为 [`true] 的迭代器
[`i] 的数量，而 [$K] 为 [`last - first - [$M]]；
[item]
[:en@~] [`last_true] be [`out_true + [$M]], and [`last_false] be [`out_false + [$K]].
[:zh_CN@~] [`last_true] 为p[`out_true + [$M]]，而 [`last_false] 为 [`out_false + [$K]]。
[list:end]

[para]
[:en] For the overloads with parameters [`last_true], [`last_false], [`out_true_r],
or [`out_false_r], let [$M] be [`last_true - out_true] and [$K] be [`last_false - out_false].
[:zh_CN] 对于带有形参 [`last_true]、[`last_false]、[`out_true_r] 或 [`out_false_r]
的各重载，令 [$M] 为 [`last_true - out_true]，而 [$K] 为 [`last_false - out_false]。

[para]
[:en] Let:
[:zh_CN] 令：
[list]
[item]
[:en@~] [`i1] be the iterator in [=range(first,last)] for which [$E([`*i1])] is
[`true] and there are exactly [$M] iterators [`j] in [=range(first,[`i1])] for
which [$E([`*j])] is [`true], or [`last] if no such iterator exists;
[:zh_CN@~] [`i1] 为 [=range(first,last)] 中使得 [$E([`*i1])] 为 [`true] 且在
[=range(first,[`i1])] 中恰有 [$M] 个迭代器 [`j] 使得 [$E([`*j])] 为 [`true] 的
迭代器，或者如果不存在这样的迭代器则为 [`last]；
[item]
[:en@~] [`i2] be the iterator in [=range(first,last)] for which [$E([`*i2])] is
[`false] and there are exactly [$K] iterators [`j] in [=range(first,[`i2])] for
which [$E([`*j])] is [`false], or [`last] if no such iterator exists;
[:zh_CN@~] [`i2] 为 [=range(first,last)] 中使得 [$E([`*i2])] 为 [`false] 且在
[=range(first,[`i2])] 中恰有 [$K] 个迭代器 [`j] 使得 [$E([`*j])] 为 [`false] 的
迭代器，或者如果不存在这样的迭代器则为 [`last]；
[item]
[:en@~] [$N] be [$\min([`i1 - first], \ [`i2 - first])].
[:zh_CN@~] [$N] 为 [$\min([`i1 - first], \ [`i2 - first])]。
[list:end]

[para:mandates]
[:en] For the overloads in namespace [`std], the expression [`*first] is
writable ([#iterator.requirements.general]) to [`out_true] and [`out_false].
[:zh_CN] 对于命名空间 [`std] 中的各重载，表达式 [`*first] 可以向 [`out_true]
和 [`out_false] 写出（[#iterator.requirements.general]）。

[para:expects]
[:en] The input range and output ranges do not overlap.
[:zh_CN] 输入范围和各输出范围没有重叠。

[para:~]
[begin:note]
[:en] For the parallel algorithm overload in namespace [`std], there can be a performance
cost if [`first][=']s value type does not meet the [^:oc CopyConstructible] requirements.
[:zh_CN] 对于命名空间 [`std] 中的并行算法重载，如果 [`first] 的值类型不满足
[^:oc CopyConstructible] 的规定，则可能存在性能损耗。

[:en] For the parallel algorithm overload in namespace [`ranges], there can be a
performance cost if [`first][=']s value type does not model [`:c copy_constructible].
[:zh_CN] 对于命名空间 [`std] 中的并行算法重载，如果 [`first] 的值类型不构成
[`:c copy_constructible]，则可能存在性能损耗。
[end:note]

[para:effects]
[:en] For each iterator [`i] in [=range(first,first + [$N])], copies [`*i] to the
output range [=range(out_true,last_true)] if [$E([`*i])] is [`true], or to the
output range [=range(out_false,last_false)] otherwise.
[:zh_CN] 对于范围 [=range(first,first + [$N])] 中的每个迭代器 [`i]，如果 [$E([`*i])]
为 [`true]，则将 [`*i] 复制到输出范围 [=range(out_true,last_true)]，否则就将其复制到
输出范围 [=range(out_false,last_false)]。

[para:returns]
[:en] Let [`o1] be the iterator past the last copied element in the output range
[=range(out_true,last_true)], and [`o2] be the iterator past the last copied
element in the output range [=range(out_false,last_false)].
[:zh_CN] 令 [`o1] 为输出范围 [=range(out_true,last_true)] 中最后一个被复制元素之后的迭代器，
而 [`o2] 为输出范围 [=range(out_false,last_false)] 中最后一个被复制元素之后的迭代器。

[:en] Returns
[:zh_CN] 返回：

[list]
[item]
[:en@~] [`{o1, o2}] for the overloads in namespace [`std].
[:zh_CN@~] 对于命名空间 [`std] 中的各重载返回 [`{o1, o2}]。
[item]
[:en@~] [`{first + [$N], o1, o2}] for the overloads in namespace [`ranges].
[:zh_CN@~] 对于命名空间 [`ranges] 中的各重载返回 [`{first + [$N], o1, o2}]。
[list:end]

[para:complexity]
[:en] At most [`last - first] applications of [`pred] and [`proj].
[:zh_CN] 最多进行 [`last - first] 次 [`pred] 和 [`proj] 的运用。
[div:end]

[%@lib partition_point]
[codeblock:declaration]
template<class ForwardIterator, class Predicate>
  constexpr ForwardIterator
    partition_point(ForwardIterator first, ForwardIterator last, Predicate pred);

template<[[redoc("`:c>")]]forward_iterator I, [[redoc("`:c>")]]sentinel_for<I> S, class Proj = identity,
         [[redoc("`:c>")]]indirect_unary_predicate<projected<I, Proj>> Pred>
  constexpr I ranges::partition_point(I first, S last, Pred pred, Proj proj = {});
template<[[redoc("`:c>")]]forward_range R, class Proj = identity,
         [[redoc("`:c>")]]indirect_unary_predicate<projected<iterator_t<R>, Proj>> Pred>
  constexpr borrowed_iterator_t<R>
    ranges::partition_point(R&& r, Pred pred, Proj proj = {});
[codeblock:end]

[div:description]
[para]
[:en] Let [`proj] be [`identity{}] for the overloads with no parameter named
[`proj] and let [$E(x)] be [`bool(invoke(pred, invoke(proj, [$x])))].
[:zh_CN] 令 [`proj] 对于没有名为 [`proj] 的形参的重载为 [`identity{}]，并令
[$E(x)] 为 [`bool(invoke(pred, invoke(proj, [$x])))]。

[para:expects]
[:en] The elements [`e] of [=range(first,last)] are partitioned with respect to [$E([`e])].
[:zh_CN] [=range(first,last)] 中的元素 [`e] 已经根据 [$E([`e])] 进行了分区。

[para:returns]
[:en] An iterator [`mid] such that [$E([`*i])] is [`true] for all iterators [`i]
in [=range(first,mid)], and [`false] for all iterators [`i] in [=range(mid,last)].
[:zh_CN] 迭代器 [`mid]，使得 [$E([`*i])] 对 [=range(first,mid)] 中的每个迭代器
[`i] 均为 [`true]，而对 [=range(mid,last)] 中的每个迭代器 [`i] 均为 [`false]。

[para:complexity]
[:en] [?bigoh \log([`last - first])] applications of [`pred] and [`proj].
[:zh_CN] [?bigoh \log([`last - first])] 次 [`pred] 和 [`proj] 的运用。
[div:end]
