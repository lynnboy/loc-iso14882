[section#alg.is.permutation
    [:en] Is permutation
    [:zh_CN] 是排列（Is permutation）
]

[%@lib is_permutation]
[codeblock:declaration]
template<class ForwardIterator1, class ForwardIterator2>
  constexpr bool is_permutation(ForwardIterator1 first1, ForwardIterator1 last1,
                                ForwardIterator2 first2);
template<class ForwardIterator1, class ForwardIterator2,
         class BinaryPredicate>
  constexpr bool is_permutation(ForwardIterator1 first1, ForwardIterator1 last1,
                                ForwardIterator2 first2, BinaryPredicate pred);
template<class ForwardIterator1, class ForwardIterator2>
  constexpr bool is_permutation(ForwardIterator1 first1, ForwardIterator1 last1,
                                ForwardIterator2 first2, ForwardIterator2 last2);
template<class ForwardIterator1, class ForwardIterator2,
         class BinaryPredicate>
  constexpr bool is_permutation(ForwardIterator1 first1, ForwardIterator1 last1,
                                ForwardIterator2 first2, ForwardIterator2 last2,
                                BinaryPredicate pred);
[codeblock:end]

[div:description]
[para]
[:en] Let [`last2] be [`first2 + (last1 - first1)] for the overloads with no
parameter named [`last2], and let [`pred] be [`equal_to{}] for the overloads
with no parameter [`pred].
[:zh_CN] 令 [`last2] 对于没有名为 [`last2] 的形参的重载为
[`first2 + (last1 - first1)]，并令 [`pred] 对于没有 [`pred] 形参的重载为
[`equal_to]。

[para:mandates]
[:en] [`ForwardIterator1] and [`ForwardIterator2] have the same value type.
[:zh_CN] [`ForwardIterator1] 和 [`ForwardIterator2] 具有相同的值类型。

[para:expects]
[:en] The comparison function is an equivalence relation.
[:zh_CN] 比较函数代表等价关系。

[para:returns]
[:en] If [`last1 - first1 != last2 - first2], return [`false].
[:zh_CN] 如果 [`last1 - first1 != last2 - first2]，则返回 [`false]。

[:en] Otherwise return [`true] if there exists a permutation of the elements in
the range [=range(first2,last2)], beginning with [`ForwardIterator2 begin], such
that [`equal(first1, last1, begin, pred)] returns [`true]; otherwise, returns
[`false].
[:zh_CN] 否则如果对于范围 [=range(first2,last2)] 中的元素，存在以
[`ForwardIterator2 begin] 开始的一种排列，使得
[`equal(first1, last1, begin, pred)] 返回 [`true]，则该函数返回 [`true]；否则就
返回 [`false]。

[para:complexity]
[:en] No applications of the corresponding predicate if [`ForwardIterator1] and
[`ForwardIterator2] meet the requirements of random access iterators and
[`last1 - first1 != last2 - first2].
[:zh_CN] 如果 [`ForwardIterator1] 和 [`ForwardIterator2] 符合随机访问迭代器的
规定，并且 [`last1 - first1 != last2 - first2]，则不对相应谓词进行运用。

[:en] Otherwise, exactly [`last1 - first1] applications of the corresponding
predicate if [`equal(first1, last1, first2, last2, pred)] would return [`true];
otherwise, at worst [?bigoh N^2], where [$N] has the value [`last1 - first1].
[:zh_CN] 否则，如果当实参列表中未给出 [`pred] 时
[`equal(first1, last1, first2, last2, pred)] 返回 [`true]，则恰好进行
[`last1 - first1] 次对应谓词的运用；否则，最差为 [?bigoh N^2]，其中 [$N] 的值为
[`last1 - first1]。
[div:end]

[%@lib is_permutation]
[codeblock:declaration]
template<[[redoc("`:c>")]]forward_iterator I1, [[redoc("`:c>")]]sentinel_for<I1> S1, [[redoc("`:c>")]]forward_iterator I2,
         [[redoc("`:c>")]]sentinel_for<I2> S2, class Proj1 = identity, class Proj2 = identity,
         [[redoc("`:c>")]]indirect_equivalence_relation<projected<I1, Proj1>,
                                       projected<I2, Proj2>> Pred = ranges::equal_to>
  constexpr bool ranges::is_permutation(I1 first1, S1 last1, I2 first2, S2 last2,
                                        Pred pred = {},
                                        Proj1 proj1 = {}, Proj2 proj2 = {});
template<[[redoc("`:c>")]]forward_range R1, [[redoc("`:c>")]]forward_range R2,
         class Proj1 = identity, class Proj2 = identity,
         [[redoc("`:c>")]]indirect_equivalence_relation<projected<iterator_t<R1>, Proj1>,
                                       projected<iterator_t<R2>, Proj2>> Pred = ranges::equal_to>
  constexpr bool ranges::is_permutation(R1&& r1, R2&& r2, Pred pred = {},
                                        Proj1 proj1 = {}, Proj2 proj2 = {});
[codeblock:end]

[div:description]
[para:returns]
[:en] If [`last1 - first1 != last2 - first2], return [`false].
[:zh_CN] 如果 [`last1 - first1 != last2 - first2]，则返回 [`false]。

[:en] Otherwise return [`true] if there exists a permutation of the elements in
the range [=range(first2,last2)], bounded by [=range(pfirst,plast)], such that
[`ranges::equal(first1, last1, pfirst, plast, pred, proj1, proj2)] returns
[`true]; otherwise, returns [`false].
[:zh_CN] 否则如果对于范围 [=range(first2,last2)] 中的元素，存在一种排列（绑定为
[=range(pfirst,plast)]）使得
[`ranges::equal(first1, last1, pfirst, plast, pred, proj1, proj2)] 返回 [`true]，
则返回 [`true]；否则返回 [`false]。

[para:complexity]
[:en] No applications of the corresponding predicate and projections if:
[:zh_CN] 如下情况下，不对相应谓词和投影进行运用：
[list]
[item]
[:en@~] [`S1] and [`I1] model [`[`:c sized_sentinel_for]<S1, I1>],
[:zh_CN@~] [`S1] 和 [`I1] 构成 [`[`:csized_sentinel_for]<S1, I1>]，
[item]
[:en@~] [`S2] and [`I2] model [`[`:csized_sentinel_for]<S2, I2>], and
[:zh_CN@~] [`S2] 和 [`I2] 构成 [`[`:csized_sentinel_for]<S2, I2>]，并且
[item]
[:en@~] [`last1 - first1 != last2 - first2].
[:zh_CN@~] [`last1 - first1 != last2 - first2]。
[list:end]

[:en] Otherwise, exactly [`last1 - first1] applications of the corresponding
predicate and projections if
[`ranges::equal(first1, last1, first2, last2, pred, proj1, proj2)] would return
[`true]; otherwise, at worst [?bigoh N^2], where [$N] has the value
[`last1 - first1].
[:zh_CN] 否则，如果
[`ranges::equal(first1, last1, first2, last2, pred, proj1, proj2)] 返回 [`true]，
则恰好进行 [`last1 - first1] 次对应谓词和投影的运用；否则，最差为 [?bigoh N^2]，
其中 [$N] 的值为 [`last1 - first1]。
[div:end]
