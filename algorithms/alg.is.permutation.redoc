[section#alg.is.permutation
    [:en] Is permutation
    [:zh_CN] 是排列（Is permutation）
]

[%@library is_permutation]
[codeblock:declaration]
template<class ForwardIterator1, class ForwardIterator2>
  constexpr bool is_permutation(ForwardIterator1 first1, ForwardIterator1 last1,
                                ForwardIterator2 first2);
template<class ForwardIterator1, class ForwardIterator2,
                 class BinaryPredicate>
  constexpr bool is_permutation(ForwardIterator1 first1, ForwardIterator1 last1,
                                ForwardIterator2 first2, BinaryPredicate pred);
template<class ForwardIterator1, class ForwardIterator2>
  constexpr bool is_permutation(ForwardIterator1 first1, ForwardIterator1 last1,
                                ForwardIterator2 first2, ForwardIterator2 last2);
template<class ForwardIterator1, class ForwardIterator2,
                 class BinaryPredicate>
  constexpr bool is_permutation(ForwardIterator1 first1, ForwardIterator1 last1,
                                ForwardIterator2 first2, ForwardIterator2 last2,
                                BinaryPredicate pred);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`ForwardIterator1] and [`ForwardIterator2] shall have the same value
type.
[:zh_CN] [`ForwardIterator1] 和 [`ForwardIterator2] 应当具有相同的值类型。

[:en] The comparison function shall be an equivalence relation.
[:zh_CN] 比较函数应当代表等价关系。

[para:remarks]
[:en] If [`last2] was not given in the argument list, it denotes
[`first2 + (last1 - first1)] below.
[:zh_CN] 如果实参列表中未给出 [`last2]，则它在下文中代表
[`first2 + (last1 - first1)]。

[para:returns]
[:en] If [`last1 - first1 != last2 - first2], return [`false].
[:zh_CN] 如果 [`last1 - first1 != last2 - first2]，则返回 [`false]。

[:en] Otherwise return [`true] if there exists a permutation of the elements in
the range [=range(first2,first2 + (last1 - first1))], beginning with
[`ForwardIterator2 begin], such that [`equal(first1, last1, begin)] returns
[`true] or [`equal(first1, last1, begin, pred)] returns [`true]; otherwise,
returns [`false].
[:zh_CN] 否则如果对于范围 [=range(first2,first2 + (last1 - first1))] 中的元素，
存在以 [`ForwardIterator2 begin] 开始的一种排列，使得
[`equal(first1, last1, begin)] 返回 [`true] 或者
[`equal(first1, last1, begin, pred)] 返回 [`true]，则该函数返回 [`true]；否则就
返回 [`false]。

[para:complexity]
[:en] No applications of the corresponding predicate if [`ForwardIterator1] and
[`ForwardIterator2] meet the requirements of random access iterators and
[`last1 - first1 != last2 - first2].
[:zh_CN] 如果 [`ForwardIterator1] 和 [`ForwardIterator2] 符合随机访问迭代器的
规定，并且 [`last1 - first1 != last2 - first2]，则不对相应谓词进行运用。

[:en] Otherwise, exactly [`distance(first1, last1)] applications of the
corresponding predicate if [`equal(first1, last1, first2, last2)] would return
[`true] if [`pred] was not given in the argument list or
[`equal(first1, last1, first2, last2, pred)] would return [`true] if [`pred] was
given in the argument list; otherwise, at worst [$[=O](N^2)], where [$N] has the
value [`last1 - first1].
[:zh_CN] 否则，如果当实参列表中未给出 [`pred] 时
[`equal(first1, last1, first2, last2)] 返回 [`true]，或当实参列表中给出了
[`pred] 时 [`equal(first1, last1, first2, last2, pred)] 返回 [`true]，则恰好进行
[`distance(first1, last1)] 次对应谓词的运用；否则，最差为 [$[=O](N^2)]，其中
[$N] 的值为 [`last1 - first1]。
[exit:description]

[%@library is_permutation]
[codeblock:declaration]
template<ForwardIterator I1, Sentinel<I1> S1, ForwardIterator I2,
         Sentinel<I2> S2, class Pred = ranges::equal_to, class Proj1 = identity,
         class Proj2 = identity>
  requires IndirectlyComparable<I1, I2, Pred, Proj1, Proj2>
  constexpr bool ranges::is_permutation(I1 first1, S1 last1, I2 first2, S2 last2,
                                        Pred pred = {},
                                        Proj1 proj1 = {}, Proj2 proj2 = {});
template<ForwardRange R1, ForwardRange R2, class Pred = ranges::equal_to,
         class Proj1 = identity, class Proj2 = identity>
  requires IndirectlyComparable<iterator_t<R1>, iterator_t<R2>, Pred, Proj1, Proj2>
  constexpr bool ranges::is_permutation(R1&& r1, R2&& r2, Pred pred = {},
                                        Proj1 proj1 = {}, Proj2 proj2 = {});
[codeblock:end]

[enter:description]
[para:returns]
[:en] If [`last1 - first1 != last2 - first2], return [`false].
[:zh_CN] 如果 [`last1 - first1 != last2 - first2]，则返回 [`false]。

[:en] Otherwise return [`true] if there exists a permutation of the elements in
the range [=range(first2,last2)], bounded by [=range(pfirst,plast)], such that
[`ranges::equal(first1, last1, pfirst, plast, pred, proj1, proj2)] returns
[`true]; otherwise, returns [`false].
[:zh_CN] 否则如果对于范围 [=range(first2,last2)] 中的元素，存在一种排列（绑定为
[=range(pfirst,plast)]）使得
[`ranges::equal(first1, last1, pfirst, plast, pred, proj1, proj2)] 返回 [`true]，
则返回 [`true]；否则返回 [`false]。

[para:complexity]
[:en] No applications of the corresponding predicate and projections if:
[:zh_CN] 如下情况下，不对相应谓词和投影进行运用：
[list]
[item]
[:en@~] [`S1] and [`I1] model [`SizedSentinel],
[:zh_CN@~] [`S1] 和 [`I1] 构成 [`SizedSentinel]，
[item]
[:en@~] [`S2] and [`I2] model [`SizedSentinel], and
[:zh_CN@~] [`S2] 和 [`I2] 构成 [`SizedSentinel]，并且
[item]
[:en@~] [`last1 - first1 != last2 - first2].
[:zh_CN@~] [`last1 - first1 != last2 - first2]。
[list:end]

[:en] Otherwise, exactly [`last1 - first1] applications of the corresponding
predicate and projections if
[`ranges::equal(first1, last1, first2, last2, pred, proj1, proj2)] would return
[`true]; otherwise, at worst [$[=O](N^2)], where [$N] has the value
[`last1 - first1].
[:zh_CN] 否则，如果
[`ranges::equal(first1, last1, first2, last2, pred, proj1, proj2)] 返回 [`true]，
则恰好进行 [`last1 - first1] 次对应谓词和投影的运用；否则，最差为 [$[=O](N^2)]，
其中 [$N] 的值为 [`last1 - first1]。
[exit:description]
