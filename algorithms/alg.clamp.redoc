[section#alg.clamp
    [:en] Bounded value
    [:zh_CN] 有界值
]

[%@lib clamp]
[codeblock:declaration]
template<class T>
  constexpr const T& clamp(const T& v, const T& lo, const T& hi);
template<class T, class Compare>
  constexpr const T& clamp(const T& v, const T& lo, const T& hi, Compare comp);
template<class T, class Proj = identity,
         [[redoc("`:c>")]]indirect_strict_weak_order<projected<const T*, Proj>> Comp = ranges::less>
  constexpr const T&
    ranges::clamp(const T& v, const T& lo, const T& hi, Comp comp = {}, Proj proj = {});
[codeblock:end]

[div:description]
[para]
[:en] Let [`comp] be [`less{}] for the overloads with no parameter [`comp], and
let [`proj] be [`identity{}] for the overloads with no parameter [`proj].
[:zh_CN] 令 [`comp] 对于没有形参 [`comp] 的重载为 [`less{}]，并令 [`proj] 对于
没有形参 [`proj] 的重载为 [`identity{}]。

[para:expects]
[:en] [`bool(invoke(comp, invoke(proj, hi), invoke(proj, lo)))] is [`false].
[:zh_CN] [`bool(invoke(comp, invoke(proj, hi), invoke(proj, lo)))] 为 [`false]。

[:en] For the first form, type [`T] meets the [^:oc LessThanComparable]
requirements ([#cpp17.lessthancomparable]).
[:zh_CN] 对于第一种形式，类型 [`T] 满足 [^:oc LessThanComparable] 的规定
（[#cpp17.lessthancomparable]）。

[para:returns]
[:en] [`lo] if [`bool(invoke(comp, invoke(proj, v), invoke(proj, lo)))] is
[`true], [`hi] if [`bool(invoke(comp, invoke(proj, hi), invoke(proj, v)))] is
[`true], otherwise [`v].
[:zh_CN] 当 [`bool(invoke(comp, invoke(proj, v), invoke(proj, lo)))] 为 [`true]
时返回 [`lo]，当 [`bool(invoke(comp, invoke(proj, hi), invoke(proj, v)))] 为
[`true] 时返回 [`hi]，否则返回 [`v]。

[para]
[begin:note]
[:en] If NaN is avoided, [`T] can be a floating-point type.
[:zh_CN] 若是可以避免 NaN，则 [`T] 可以为浮点类型。
[end:note]

[para:complexity]
[:en] At most two comparisons and three applications of the projections.
[:zh_CN] 最多两次比较和三次投射的运用。
[div:end]
