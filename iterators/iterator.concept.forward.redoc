[section#iterator.concept.forward
    [:en] Concept [`:cname forward_iterator]
    [:zh_CN] 概念 [`:cname forward_iterator]
]

[para]
[:en] The [`:c forward_iterator] concept adds copyability, equality comparison,
and the multi-pass guarantee, specified below.
[:zh_CN] [`:c forward_iterator] 概念增加了可复制性，相等性比较，以及多遍保证，如
下文所述。

[codeblock:synopsis]
template<class I>
  concept [[redoc("`:c@def>")]]forward_iterator =
    input_iterator<I> &&
    derived_from<[[redoc("^>")]]ITER_CONCEPT(I), forward_iterator_tag> &&
    incrementable<I> &&
    sentinel_for<I, I>;
[codeblock:end]

[para]
[:en] The domain of [`==] for forward iterators is that of iterators over the
same underlying sequence.
[:zh_CN] 前向迭代器的 [`==] 的定义域就是同一个底层序列的迭代器的各个迭代器。

[:en] However, value-initialized iterators of the same type may be compared and
shall compare equal to other value-initialized iterators of the same type.
[:zh_CN] 不过，值初始化的相同类型的迭代器可以进行比较，并且应当与相同类型的其他
值初始化的迭代器比较为相等。

[begin:note]
[:en] Value-initialized iterators behave as if they refer past the end of the
same empty sequence.
[:zh_CN] 值初始化迭代器表现为如同它们指代同一个空序列的越过末尾位置一样。
[end:note]

[para]
[:en] Pointers and references obtained from a forward iterator into a range
[=range(i,s)] shall remain valid while [=range(i,s)] continues to denote a range.
[:zh_CN] 从指向范围 [=range(i,s)] 中的前向迭代器所获得的指针和引用，在
[=range(i,s)] 仍然代表一个范围时应当保持有效。

[para]
[:en] Two dereferenceable iterators [`a] and [`b] of type [`X] offer the
[+multi-pass guarantee] if:
[:zh_CN] 当符合以下条件时，两个 [`X] 类型的可解引用迭代器 [`a] 和 [`b] 提供
[+多遍保证]：

[list]
[item]
[:en] [`a == b] implies [`++a == ++b] and
[:zh_CN] [`a == b] 蕴含 [`++a == ++b] 并且
[item]
[:en] The expression [`((void)`[`](X x){++x;}(a), *a)] is equivalent to the
expression [`*a].
[:zh_CN] 表达式 [`((void)`[`](X x){++x;}(a), *a)] 等价于表达式 [`*a]。
[list:end]

[para]
[begin:note]
[:en] The requirement that [`a == b] implies [`++a == ++b] and the removal of
the restrictions on the number of assignments through a mutable iterator (which
applies to output iterators) allow the use of multi-pass one-directional
algorithms with forward iterators.
[:zh_CN] 对于 [`a == b] 蕴含 [`++a == ++b] 的规定，以及移除对通过可改动迭代器
进行赋值的次数的限制（这适用于输出迭代器），允许对前向迭代器使用多遍单向算法。
[end:note]
