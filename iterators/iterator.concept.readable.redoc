[section#iterator.concept.readable
    [:en] Concept [`:cname indirectly_readable]
    [:zh_CN] 概念 [`:cname indirectly_readable]
]

[para]
[:en] Types that are indirectly readable by applying [`operator*] model the
[`:c indirectly_readable] concept, including pointers, smart pointers, and
iterators.
[:zh_CN] 可以通过运用 [`operator*] 进行间接读取的类型构成
[`:c indirectly_readable] 概念，包括指针、智能指针和迭代器。

[codeblock:synopsis]
template<class In>
  concept [[redoc("*:c@def>")]]indirectly-readable-impl =                    // [=expos]
    requires {
      typename iter_value_t<In>;
      typename iter_reference_t<In>;
      typename iter_rvalue_reference_t<In>;
      { *in } -> [[redoc("`:c>")]]same_as<iter_reference_t<In>>;
      { ranges::iter_move(in) } -> [[redoc("`:c>")]]same_as<iter_rvalue_reference_t<In>>;
    } &&
    [[redoc("`:c>")]]common_reference_with<iter_reference_t<In>&&, iter_value_t<In>&> &&
    [[redoc("`:c>")]]common_reference_with<iter_reference_t<In>&&, iter_rvalue_reference_t<In>&&> &&
    [[redoc("`:c>")]]common_reference_with<iter_rvalue_reference_t<In>&&, const iter_value_t<In>&>;
[codeblock:end]

[codeblock:synopsis]
template<class In>
  concept [[redoc("`:c@def>")]]indirectly-readable =
    [[redoc("*:c>")]]indirectly-readable-impl<remove_cvref_t<In>>;
[codeblock:end]

[para]
[:en] Given a value [`i] of type [`I], [`I] models [`:c indirectly-readable]
only if the expression [`*i] is equality-preserving.
[:zh_CN] 给定 [`I] 类型的值 [`i]，仅当表达式 [`*i] 维持相等性时 [`I] 构成
[`:c indirectly-readable]。
