[section#iterator.concept.sizedsentinel
    [:en] Concept [`:c sized_sentinel_for]
    [:zh_CN] 概念 [`:c sized_sentinel_for]
]

[para]
[:en] The [`:c sized_sentinel_for] concept specifies requirements on an
[`:c input_or_output_iterator] and a [`:c sentinel_for] that allow the use of
the [`-] operator to compute the distance between them in constant time.
[:zh_CN] [`:c sized_sentinel_for] 概念针对允许使用 [`-] 运算符以常量时间来计算其
距离的一个 [`:c input_or_output_iterator] 和一个 [`:c sentinel_for] 给出了规定。

[codeblock:declaration]
template<class S, class I>
  concept [[redoc("`:c@def>")]]sized_sentinel_for =
    sentinel_for<S, I> &&
    !disable_sized_sentinel<remove_cv_t<S>, remove_cv_t<I>> &&
    requires(const I& i, const S& s) {
      { s - i } -> same_as<iter_difference_t<I>>;
      { i - s } -> same_as<iter_difference_t<I>>;
    };
[codeblock:end]

[div:description]
[para]
[:en] Let [`i] be an iterator of type [`I], and [`s] a sentinel of type [`S]
such that [=range(i,s)] denotes a range.
[:zh_CN] 令 [`i] 为 [`I] 类型的迭代器，并令 [`s] 为 [`S] 类型的哨位，使得
[=range(i,s)] 代表一个范围。

[:en] Let [$N] be the smallest number of applications of [`++i] necessary to
make [`bool(i == s)] be [`true].
[:zh_CN] 令 [$N] 为使得 [`bool(i == s)] 为 [`true] 所必须运用 [`++i] 的最小次数。

[:en] [`S] and [`I] model [`[`:c sized_sentinel_for]<S, I>] only if
[:zh_CN] 仅当符合以下条件时 [`S] 和 [`I] 构成 [`[`:c sized_sentinel_for]<S, I>]：

[list]
[item]
[:en] If [$N] is representable by [`iter_difference_t<I>], then [`s - i] is
well-defined and equals [$N].
[:zh_CN] 若 [$N] 可以由 [`iter_difference_t<I>] 表示，则 [`s - i] 良构并等于
[$N]。

[item]
[:en] If [$-N] is representable by [`iter_difference_t<I>], then [`i - s] is
well-defined and equals [$-N].
[:zh_CN] 若 [$-N] 可以由 [`iter_difference_t<I>] 表示，则 [`i - s] 良构并等于
[$-N]。
[list:end]
[div:end]

[%@lib disable_sized_sentinel]
[codeblock:declaration]
template<class S, class I>
  inline constexpr bool disable_sized_sentinel = false;
[codeblock:end]

[div:description]
[para:remarks]
[:en] Pursuant to [#namespace.std], users may specialize
[`disable_sized_sentinel] for cv-unqualified non-array object types [`S] and [`I]
if [`S] and/or [`I] is a program-defined type.
[:zh_CN] 根据 [#namespace.std]，若无 cv 限定的非数组对象类型 [`S] 和/或 [`I] 是
程序定义的类型，则用户可以针对 [`S] 和 [`I] 特化 [`disable_sized_sentinel]。

[:en] Such specializations shall be usable in constant expressions ([#expr.const])
and have type [`const bool].
[:zh_CN] 这种特例应当可以在常量表达式中使用（[#expr.const]），并具有类型
[`const bool]。

[para]
[begin:note]
[:en] [`disable_sized_sentinel] allows use of sentinels and iterators with the
library that satisfy but do not in fact model [`:c sized_sentinel_for].
[:zh_CN] 通过 [`disable_sized_sentinel] 可以对程序库使用满足但并不真正构成
[`:c sized_sentinel_for] 的哨位和迭代器。
[end:note]

[para]
[begin:example]
[:en] The [`:c sized_sentinel_for] concept is modeled by pairs of
[`:c random_access_iterator]s ([#iterator.concept.random.access]) and by counted
iterators and their sentinels ([#counted.iterator]).
[:zh_CN] 一对 [`:c random_access_iterator]（[#iterator.concept.random.access]），
以及计数的迭代器及其哨位（[#counted.iterator]），均可以构成
[`:c sized_sentinel_for] 概念。
[end:example]
[div:end]
