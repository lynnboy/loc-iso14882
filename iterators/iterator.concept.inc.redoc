[section#iterator.concept.inc
    [:en] Concept [`Incrementable]
    [:zh_CN] 概念 [`Incrementable]
]

[para]
[:en] The [`Incrementable] concept specifies requirements on types that can be
incremented with the pre- and post-increment operators.
[:zh_CN] [`Incrementable] 概念针对可以用前缀和后缀增量运算符进行增量操作的类型
给出了规定。

[:en] The increment operations are required to be equality-preserving, and the
type is required to be [`EqualityComparable].
[:zh_CN] 这些增量操作要求是维持相等性的，并要求该类型为 [`EqualityComparable]。

[enter:note]
[:en] This supersedes the annotations on the increment expressions in the
definition of [`WeaklyIncrementable].
[:zh_CN] 这一点取代了在 [`WeaklyIncrementable] 的定义中对增量表达式的标注。
[exit:note]

[%@library Incrementable]
[codeblock:synopsis]
template<class I>
  concept Incrementable =
    Regular<I> &&
    WeaklyIncrementable<I> &&
    requires(I i) {
      { i++ } -> Same<I>;
    };
[codeblock:end]

[para]
[:en] Let [`a] and [`b] be incrementable objects of type [`I].
[:zh_CN] 令 [`a] 和 [`b] 为 [`I] 类型的可增量对象。

[:en] [`I] models [`Incrementable] only if
[:zh_CN] 仅当符合以下条件时 [`I] 构成 [`Incrementable]：

[list]
[item]
[:en] If [`bool(a == b)] then [`bool(a++ == b)].
[:zh_CN] 若 [`bool(a == b)] 则有 [`bool(a++ == b)]。
[item]
[:en] If [`bool(a == b)] then [`bool(((void)a++, a) == ++b)].
[:zh_CN] 若 [`bool(a == b)] 则有 [`bool(((void)a++, a) == ++b)]。
[list:end]

[para]
[enter:note]
[:en] The requirement that [`a] equals [`b] implies [`++a] equals [`++b] (which
is not true for weakly incrementable types) allows the use of multi-pass
one-directional algorithms with types that model [`Incrementable].
[:zh_CN] 对于 [`a] 等于 [`b] 蕴含 [`++a] 等于 [`++b] 的规定（这对于弱可增量类型
并不为真），允许对构成 [`Incrementable] 的类型使用多遍单向算法。
[exit:note]
