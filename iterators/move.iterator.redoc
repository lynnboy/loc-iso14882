[section#move.iterator
    [:en] Class template [`move_iterator]
    [:zh_CN] 类模板 [`move_iteratr]
]

[%@lib move_iterator]
[codeblock:synopsis]
namespace std {
  template<class Iterator>
  class move_iterator {
  public:
    using iterator_type     = Iterator;
    using iterator_concept  = [[redoc("[=seebelow]")]];
    using iterator_category = [[redoc("[=seebelow]")]];                      // [:en] not always present [:zh_CN] 并不总是提供
    using value_type        = iter_value_t<Iterator>;
    using difference_type   = iter_difference_t<Iterator>;
    using pointer           = Iterator;
    using reference         = iter_rvalue_reference_t<Iterator>;

    constexpr move_iterator();
    constexpr explicit move_iterator(Iterator i);
    template<class U> constexpr move_iterator(const move_iterator<U>& u);
    template<class U> constexpr move_iterator& operator=(const move_iterator<U>& u);

    constexpr const Iterator& base() const & noexcept;
    constexpr Iterator base() &&;
    constexpr reference operator*() const;

    constexpr move_iterator& operator++();
    constexpr auto operator++(int);
    constexpr move_iterator& operator--();
    constexpr move_iterator operator--(int);

    constexpr move_iterator operator+(difference_type n) const;
    constexpr move_iterator& operator+=(difference_type n);
    constexpr move_iterator operator-(difference_type n) const;
    constexpr move_iterator& operator-=(difference_type n);
    constexpr reference operator[](difference_type n) const;

    template<[[redoc("`:c>")]]sentinel_for<Iterator> S>
      friend constexpr bool
        operator==(const move_iterator& x, const move_sentinel<S>& y);
    template<[[redoc("`:c>")]]sized_sentinel_for<Iterator> S>
      friend constexpr iter_difference_t<Iterator>
        operator-(const move_sentinel<S>& x, const move_iterator& y);
    template<[[redoc("`:c>")]]sized_sentinel_for<Iterator> S>
      friend constexpr iter_difference_t<Iterator>
        operator-(const move_iterator& x, const move_sentinel<S>& y);
    friend constexpr iter_rvalue_reference_t<Iterator>
      iter_move(const move_iterator& i)
        noexcept(noexcept(ranges::iter_move(i.current)));
    template<[[redoc("`:c>")]]indirectly_swappable<Iterator> Iterator2>
      friend constexpr void
        iter_swap(const move_iterator& x, const move_iterator<Iterator2>& y)
          noexcept(noexcept(ranges::iter_swap(x.current, y.current)));

  private:
    Iterator current;   // [=expos]
  };
}
[codeblock:end]

[para]
[:en] The member [~typedef-name] [`iterator_concept] is defined as follows:
[:zh_CN] 成员 [~typedef-名] [`iterator_category] 定义如下：

[list]
[item]
[:en] If [`Iterator] models [`:c random_access_iterator], then
[`iterator_concept] denotes [`random_access_iterator_tag].
[:zh_CN] 若 [`Iterator] 构成 [`:c random_access_iterator]，则
[`iterator_concept] 代表 [`random_access_iterator_tag]。
[item]
[:en] Otherwise, if [`Iterator] models [`:c bidirectional_iterator], then
[`iterator_concept] denotes [`bidirectional_iterator_tag].
[:zh_CN] 否则，若 [`Iterator] 构成 [`:c bidirectional_iterator]，则
[`iterator_concept] 代表 [`bidirectional_iterator_tag]。
[item]
[:en] Otherwise, if [`Iterator] models [`:c forward_iterator], then
[`iterator_concept] denotes [`forward_iterator_tag].
[:zh_CN] 否则，若 [`Iterator] 构成 [`:c forward_iterator]，则
[`iterator_concept] 代表 [`forward_iterator_tag]。
[item]
[:en] Otherwise, [`iterator_concept] denotes [`input_iterator_tag].
[:zh_CN] 否则，[`iterator_concept] 代表 [`input_iterator_tag]。
[list:end]

[para]
[:en] The member [~typedef-name] [`iterator_category] is defined if and only if
the [~qualified-id] [`iterator_traits<Iterator>::iterator_category] is valid and
denotes a type.
[:zh_CN] 当且仅当[~限定标识] [`iterator_traits<Iterator>::iterator_category]
有效且代表某个类型时，成员 [~typedef-名] [`iterator_category] 有定义。

[:en] In that case, [`iterator_category] denotes
[:zh_CN] 这种情况下，[`iterator_category]
[list]
[item]
[:en@~] [`random_access_iterator_tag] if the type
[`iterator_traits<Iterator>::iterator_category] models
[`[`:c derived_from]<random_access_iterator_tag>], and
[:zh_CN@~] 当类型 [`iterator_traits<Iterator>::iterator_category] 构成
[`[`:c derived_from]<random_access_iterator_tag>] 时，代表
[`random_access_iterator_tag]，
[item]
[:en@~] [`iterator_traits<Iterator>::iterator_category] otherwise.
[:zh_CN@~] 否则代表 [`iterator_traits<Iterator>::iterator_category]。
[list:end]
