[section#unreachable.sentinels
    [:en] Class [`unreachable_sentinel_t]
    [:zh_CN] 类 [`unreachable_sentinel_t]
]

[%@lib unreachable_sentinel_t]
[para]
[:en] Class [`unreachable_sentinel_t] can be used with any
[`:c weakly_incrementable] type to denote the [=lq]upper bound[=rq] of an
unbounded interval.
[:zh_CN] 类 [`unreachable_sentinel_t] 可以用于与任何 [`:c weakly_incrementable]
类型一同代表一个未绑定区间的“上界”。

[para]
[begin:example]
[codeblock]
char* p;
// [:en] set [`p] to point to a character buffer containing newlines \
   [:zh_CN] 设 [`p] 为指向某个包含换行的字符缓冲区
char* nl = find(p, unreachable_sentinel, '\n');
[codeblock:end]

[:en] Provided a newline character really exists in the buffer, the use of
[`unreachable_sentinel] above potentially makes the call to [`find] more
efficient since the loop test against the sentinel does not require a
conditional branch.
[:zh_CN] 只要缓冲区中确实存在一个换行字符，则上面使用 [`unreachable_sentinel]
潜在可能会使得对 [`find] 的调用更加高效，因为其中对哨位的循环测试并不需要进行
条件分支。
[end:example]

[%@lib@member unreachable_sentinel_t[!operator==]]
[codeblock:synopsis]
namespace std {
  struct unreachable_sentinel_t {
    template<weakly_incrementable I>
      friend constexpr bool operator==(unreachable_sentinel_t, const I&) noexcept
      { return false; }
  };
}
[codeblock:end]
