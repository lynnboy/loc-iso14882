[section#move.sent.ops
    [:en] Operations
    [:zh_CN] 操作
]

[%@library move_sentinel[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
constexpr move_sentinel();
[codeblock:end]

[enter:description]
[para:effects]
[:en] Value-initializes [`last].
[:zh_CN] 值初始化 [`last]。

[:en] If [`is_trivially_default_constructible_v<S>] is [`true], then this
constructor is a [`constexpr] constructor.
[:zh_CN] 当 [`is_trivially_default_constructible_v<S>] 为 [`true] 时，这个
构造函数是 [`constexpr] 构造函数。
[exit:description]

[%@library move_sentinel[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
constexpr explicit move_sentinel(S s);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Initializes [`last] with [`std::move(s)].
[:zh_CN] 以 [`std::move(s)] 初始化 [`last]。
[exit:description]

[%@library move_sentinel[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
template<class S2>
  requires ConvertibleTo<const S2&, S>
    constexpr move_sentinel(const move_sentinel<S2>& s);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Initializes [`last] with [`s.last].
[:zh_CN] 以 [`s.last] 初始化 [`last]。
[exit:description]

[%@library operator=[!move_sentinel]]
[%@library move_sentinel[!operator=]]
[codeblock:declaration]
template<class S2>
  requires Assignable<S&, const S2&>
    constexpr move_sentinel& operator=(const move_sentinel<S2>& s);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to: [`last = s.last; return *this;]
[:zh_CN] 等价于：[`last = s.last; return *this;]
[exit:description]
