[section#reverse.iter.nonmember
    [:en] Non-member functions
    [:zh_CN] 非成员函数
]

[%@library operator-[!reverse_iterator]]
[%@library reverse_iterator[!operator-]]
[codeblock:declaration]
template<class Iterator1, class Iterator2>
  constexpr auto operator-(
    const reverse_iterator<Iterator1>& x,
    const reverse_iterator<Iterator2>& y) -> decltype(y.base() - x.base());
[codeblock:end]

[div:description]
[para:returns]
[:en] [`y.base() - x.base()].
[:zh_CN] [`y.base() - x.base()]。
[div:end]

[%@library operator+[!reverse_iterator]]
[%@library reverse_iterator[!operator+]]
[codeblock:declaration]
template<class Iterator>
  constexpr reverse_iterator<Iterator> operator+(
    typename reverse_iterator<Iterator>::difference_type n,
    const reverse_iterator<Iterator>& x);
[codeblock:end]

[div:description]
[para:returns]
[:en] [`reverse_iterator<Iterator>(x.base() - n)].
[:zh_CN] [`reverse_iterator<Iterator>(x.base() - n)]。
[div:end]

[%@library iter_move[!reverse_iterator]]
[%@library reverse_iterator[!iter_move]]
[codeblock:declaration]
friend constexpr iter_rvalue_reference_t<Iterator>
  iter_move(const reverse_iterator& i) noexcept([[redoc("=seebelow")]]);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock:notation]
auto tmp = i.base();
return ranges::iter_move(--tmp);
[codeblock:end]

[para:remarks]
[:en] The expression in [`noexcept] is equivalent to:
[:zh_CN] [`noexcept] 中的表达式等价于：
[codeblock:notation]
is_nothrow_copy_constructible_v<Iterator> &&
noexcept(ranges::iter_move(--declval<Iterator&>()))
[codeblock:end]
[div:end]

[%@library iter_swap[!reverse_iterator]]
[%@library reverse_iterator[!iter_swap]]
[codeblock:declaration]
template<indirectly_swappable<Iterator> Iterator2>
  friend constexpr void
    iter_swap(const reverse_iterator& x,
              const reverse_iterator<Iterator2>& y) noexcept([[redoc("=seebelow")]]);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock:notation]
auto xtmp = x.base();
auto ytmp = y.base();
ranges::iter_swap(--xtmp, --ytmp);
[codeblock:end]

[para:remarks]
[:en] The expression in [`noexcept] is equivalent to:
[:zh_CN] [`noexcept] 中的表达式等价于：
[codeblock:notation]
is_nothrow_copy_constructible_v<Iterator> &&
is_nothrow_copy_constructible_v<Iterator2> &&
noexcept(ranges::iter_swap(--declval<Iterator&>(), --declval<Iterator2&>()))
[codeblock:end]
[div:end]

[%@lib@raw [`reverse_iterator]
    [! [:en] [`make_reverse_iterator] non-member function
      [:zh_CN] [`make_reverse_iterator] 非成员函数 ]]
[%@library make_reverse_iterator]
[codeblock:declaration]
template<class Iterator>
  constexpr reverse_iterator<Iterator> make_reverse_iterator(Iterator i);
[codeblock:end]

[div:description]
[para:returns]
[:en] [`reverse_iterator<Iterator>(i)].
[:zh_CN] [`reverse_iterator<Iterator>(i)]。
[div:end]
