[section#common.iter.cust
    [:en] Customizations
    [:zh_CN] 定制化
]

[%@lib@member iter_move[!common_iterator]]
[codeblock:declaration]
friend constexpr decltype(auto) iter_move(const common_iterator& i)
  noexcept(noexcept(ranges::iter_move(declval<const I&>())))
    requires [[redoc("`:c>")]]input_iterator<I>;
[codeblock:end]

[div:description]
[para:expects]
[:en] [`holds_alternative<I>(i.v_)] is [`true].
[:zh_CN] [`holds_alternative<I>(i.v_)] 为 [`true]。

[para:effects]
[:en] Equivalent to: [`return ranges::iter_move(get<I>(i.v_));]
[:zh_CN] 等价于：[`return ranges::iter_move(get<I>(i.v_));]
[div:end]

[%@lib@member iter_swap[!common_iterator]]
[codeblock:declaration]
template<[[redoc("`:c>")]]indirectly_swappable<I> I2, class S2>
  friend constexpr void iter_swap(const common_iterator& x, const common_iterator<I2, S2>& y)
    noexcept(noexcept(ranges::iter_swap(declval<const I&>(), declval<const I2&>())));
[codeblock:end]

[div:description]
[para:expects]
[:en] [`holds_alternative<I>(x.v_)] and [`holds_alternative<I2>(y.v_)] are
each [`true].
[:zh_CN] [`holds_alternative<I>(x.v_)] 和 [`holds_alternative<I2>(y.v_)]
均为 [`true]。

[para:effects]
[:en] Equivalent to: [`ranges::iter_swap(get<I>(x.v_), get<I2>(y.v_))].
[:zh_CN] 等价于：[`ranges::iter_swap(get<I>(x.v_), get<I2>(y.v_))]。
[div:end]
