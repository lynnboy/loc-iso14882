[section#projected
    [:en] Alias template [`projected]
    [:zh_CN] 别名模板 [`projected]
]

[para]
[:en] Alias template [`projected] is used to constrain algorithms that accept
callable objects and projections ([#defns.projection]).
[:zh_CN] 类模板 [`projected] 用于约束一些算法，它们接受可调用对象和投射（[#defns.projection]）。

[:en] It combines an [`:c indirectly_readable] type [`I] and a callable object
type [`Proj] into a new [`:c indirectly_readable] type whose [`reference] type
is the result of applying [`Proj] to the [`iter_reference_t] of [`I].
[:zh_CN] 它将一个 [`:c indirectly_readable] 类型 [`I] 和一个可调用对象类型
[`Proj] 组合成一个新的 [`:c indirectly_readable] 类型，其 [`reference] 类型为将
[`Proj] 运用到 [`I] 的 [`iter_reference_t] 之上的结果。

[%@lib projected]
[codeblock:synopsis]
namespace std {
  template<class I, class Proj>
  struct [[redoc("*>")]]projected-impl {                               // [=expos]
    struct [[redoc("*>")]]type {                                       // [=expos]
      using value_type = remove_cvref_t<indirect_result_t<Proj&, I>>;
      using difference_type = iter_difference_t<I>;     // [:en] present only if [`I] [:zh_CN] 仅当 [`I] 构成
                                                        // [:en@~] models [`:c weakly_incrementable] [:zh_CN@~] [`:c weakly_incrementable] 时提供
      indirect_result_t<Proj&, I> operator*() const;    // [=notdef]
    };
  };

  template<[[redoc("`:c>")]]indirectly_readable I, [[redoc("`:c>")]]indirectly_regular_unary_invocable<I> Proj>
    using projected = [[redoc("*>")]]projected-impl<I, Proj>::[[redoc("*>")]]type;
}
[codeblock:end]
