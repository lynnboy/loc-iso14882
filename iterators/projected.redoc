[section#projected
    [:en] Class template [`projected]
    [:zh_CN] 类模板 [`projected]
]

[para]
[:en] Class template [`projected] is used to constrain algorithms that accept
callable objects and projections ([#defns.projection]).
[:zh_CN] 类模板 [`projected] 用于约束一些算法，它们接受可调用对象和投射
（[#defns.projection]）。

[:en] It combines an [`:c indirectly_readable] type [`I] and a callable object
type [`Proj] into a new [`:c indirectly_readable] type whose [`reference] type
is the result of applying [`Proj] to the [`iter_reference_t] of [`I].
[:zh_CN] 它将一个 [`:c indirectly_readable] 类型 [`I] 和一个可调用对象类型
[`Proj] 组合成一个新的 [`:c indirectly_readable] 类型，其 [`reference] 类型为将
[`Proj] 运用到 [`I] 的 [`iter_reference_t] 之上的结果。

[%@lib projected]
[codeblock:synopsis]
namespace std {
  template<[[redoc("`:c>")]]indirectly_readable I, [[redoc("`:c>")]]indirectly_regular_unary_invocable<I> Proj>
  struct projected {
    using value_type = remove_cvref_t<indirect_result_t<Proj&, I>>;
    indirect_result_t<Proj&, I> operator*() const;              // [=notdef]
  };

  template<[[redoc("`:c>")]]weakly_incrementable I, class Proj>
  struct incrementable_traits<projected<I, Proj>> {
    using difference_type = iter_difference_t<I>;
  };
}
[codeblock:end]
