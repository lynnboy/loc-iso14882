[section#range.iter.op.distance
    [:] [`ranges::distance]
]

[%@lib distance]
[codeblock:declaration]
template<class I, [[redoc("`:c>")]]sentinel_for<I> S>
  requires (![[redoc("`:c>")]]sized_sentinel_for<S, I>)
  constexpr iter_difference_t<I> ranges::distance(I first, S last);
[codeblock:end]

[div:description]
[para:expects]
[:en] [=range(first,last)] denotes a range.
[:zh_CN] [=range(first,last)] 代表一个范围。

[para:effects]
[:en] Increments [`first] until [`last] is reached and returns the number of increments.
[:zh_CN] 使 [`first] 增量直到到达 [`last] 并返回增量次数。
[div:end]

[%@lib distance]
[codeblock:declaration]
template<class I, [[redoc("`:c>")]]sized_sentinel_for<decay_t<I>> S>
  constexpr iter_difference_t<decay_t<I>> ranges::distance(I&& first, S last);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
if constexpr (!is_array_v<remove_reference_t<I>>)
  return last - first;
else
  return last - static_cast<decay_t<I>>(first);
[codeblock:end]
[div:end]

[%@lib distance]
[codeblock:declaration]
template<[[redoc("`:c>")]]range R>
  constexpr range_difference_t<R> ranges::distance(R&& r);
[codeblock:end]

[div:description]
[para:effects]
[:en] If [`R] models [`:c sized_range], equivalent to:
[:zh_CN] 当 [`R] 构成 [`:c sized_range] 时，等价于：

[codeblock]
return static_cast<range_difference_t<R>>(ranges::size(r));     // [#range.prim.size]
[codeblock:end]

[:en] Otherwise, equivalent to:
[:zh_CN] 否则，等价于：

[codeblock]
return ranges::distance(ranges::begin(r), ranges::end(r));      // [#range.access]
[codeblock:end]
[div:end]
