[section#reverse.iter.elem
    [:en] Element access
    [:zh_CN] 成员访问
]

[%@library operator*[!reverse_iterator]]
[%@library reverse_iterator[!operator*]]
[codeblock:declaration]
constexpr reference operator*() const;
[codeblock:end]

[div:description]
[para:effects]
[:en] As if by:
[:zh_CN] 如同执行：

[codeblock:notation]
Iterator tmp = current;
return *--tmp;
[codeblock:end]
[div:end]

[%@library operator->[!reverse_iterator]]
[%@library reverse_iterator[!operator->]]
[codeblock:declaration]
constexpr pointer operator->() const
  requires (is_pointer_v<Iterator> ||
            requires (const Iterator i) { i.operator->(); });
[codeblock:end]

[div:description]
[para:effects]
[list]
[item]
[:en] If [`Iterator] is a pointer type, equivalent to: [`return prev(current);]
[:zh_CN] 当 [`Iterator] 为指针类型时，等价于：[`return prev(current);]

[item]
[:en] Otherwise, equivalent to: [`return prev(current).operator->();]
[:zh_CN] 否则，等价于：[`return prev(current).operator->();]
[list:end]
[div:end]

[%@library operator`[`][!reverse_iterator]]
[%@library reverse_iterator[!operator`[`]]]
[codeblock:declaration]
constexpr [[redoc("=unspec")]] operator[](difference_type n) const;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`current`[-n-1`]].
[:zh_CN] [`current`[-n-1`]]。
[div:end]
