[section#istream.iterator.cons
    [:en] Constructors and destructor
    [:zh_CN] 构造函数和析构函数
]

[%@lib@ctor istream_iterator]
[codeblock:declaration]
constexpr istream_iterator();
constexpr istream_iterator(default_sentinel_t);
[codeblock:end]

[div:description]
[para:effects]
[:en] Constructs the end-of-stream iterator, value-initializing [`value].
[:zh_CN] 构造流结束迭代器，值初始化 [`value]。

[para:ensures]
[:en] [`in_stream == nullptr] is [`true].
[:zh_CN] [`in_stream == nullptr] 为 [`true]。

[para:remarks]
[:en] If the initializer [`T()] in the declaration [`auto x = T();] is a
constant initializer ([#expr.const]), then these constructors are
[`:key constexpr] constructors.
[:zh_CN] 若声明式“[`auto x = T();]”中的初始化式 [`T()] 是常量初始化式
（[#expr.const]），则这些构造函数均为 [`:key constexpr] 构造函数。
[div:end]

[%@lib@ctor istream_iterator]
[codeblock:declaration]
istream_iterator(istream_type& s);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [`in_stream] with [`addressof(s)], value-initializes [`value],
and then calls [`operator++()].
[:zh_CN] 以 [`addressof(s)] 初始化 [`in_stream]，值初始化 [`value]，然后调用
[`operator++()]。
[div:end]

[%@lib@ctor istream_iterator]
[codeblock:declaration]
consexpr istream_iterator(const istream_iterator& x) noexcept([[redoc("[=seebelow]")]]);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [`in_stream] with [`x.in_stream] and initializes [`value] with
[`x.value].
[:zh_CN] 以 [`x.in_stream] 初始化 [`in_stream] 并以 [`x.value] 初始化 [`value]。

[para:remarks]
[:en] An invocation of this constructor may be used in a core constant
expression if and only if the initialization of [`value] from [`x.value]
is a constant subexpression ([#defns.const.subexpr]).
[:zh_CN] 当且仅当以 [`x.value] 对 [`value] 的初始化是常量子表达式
（[#defns.const.subexpr]）时，本构造函数的调用可以用在核心常量表达式中。

[:en] The exception specification is equivalent to
[`is_nothrow_copy_constructible_v<T>].
[:zh_CN] 其异常说明等价于 [`is_nothrow_copy_constructible_v<T>]。
[div:end]

[%@lib@dtor istream_iterator]
[codeblock:declaration]
~istream_iterator() = default;
[codeblock:end]

[div:description]
[para:remarks]
[:en] If [`is_trivially_destructible_v<T>] is [`true], then this destructor is
trivial.
[:zh_CN] 当 [`is_trivially_destructible_v<T>] 为 [`true]时，这个析构函数是平凡的。
[div:end]
