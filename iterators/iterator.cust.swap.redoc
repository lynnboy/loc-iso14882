[section#iterator.cust.swap
    [:] [`ranges::iter_swap]
]

[%@lib iter_swap]
[para]
[:en] The name [`ranges::iter_swap] denotes a customization point object
([#customization.point.object]) that exchanges the values ([#concept.swappable])
denoted by its arguments.
[:zh_CN] 名字 [`ranges::iter_swap] 代表一个定制化点对象，
（[#customization.point.object]），将其实参所代表的值进行互换
（[#concept.swappable]）。

[para]
[:en] Let [*:c iter-exchange-move] be the exposition-only function:
[:zh_CN] 令 [*:c iter-exchange-move] 为仅用于阐释的函数：

[codeblock:declaration]
template<class X, class Y>
  constexpr iter_value_t<X> [[redoc("*>")]]iter-exchange-move(X&& x, Y&& y)
    noexcept(noexcept(iter_value_t<X>(iter_move(x))) &&
             noexcept(*x = iter_move(y)));
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
iter_value_t<X> old_value(iter_move(x));
*x = iter_move(y);
return old_value;
[codeblock:end]
[div:end]

[:en] The expression [`ranges::iter_swap(E1, E2)] for subexpressions [`E1]
and [`E2] is expression-equivalent to:
[:zh_CN] 表达式 [`ranges::iter_swap(E1, E2)] 对于子表达式 [`E1] 和 [`E2]，
按表达式等价于：

[list]
[item]
[:en] [`(void)iter_swap(E1, E2)], if either [`E1] or [`E2] has class or
enumeration type and [`iter_swap(E1, E2)] is well-formed expression with
overload resolution performed in a context that includes the declaration
[:zh_CN] 若 [`E1] 或 [`E2] 具有类或枚举类型，且 [`iter_swap(E1, E2)] 是良构
表达式，则为 [`(void)iter_swap(E1, E2)]，其重载决议在包含声明式

[codeblock]
template<class I1, class I2>
  void iter_swap(I1, I2) = delete;
[codeblock:end]

[:en@~] and does not include a declaration of [`ranges::iter_swap].
[:zh_CN@~] 且不包含 [`ranges::iter_move] 的声明式的语境中进行。

[:en] If the function selected by overload resolution does not exchange the
values denoted by [`E1] and [`E2], the program is ill-formed, no diagnostic
required.
[:zh_CN] 如果由重载决议所选择的函数并不交换由 [`E1] 和 [`E2] 所代表的值，则程序
非良构，无须诊断。

[item]
[:en] Otherwise, if the types of [`E1] and [`E2] each model
[`indirectly_readable], and if the reference types of [`E1] and [`E2] model
[`:c swappable_with] ([#concept.swappable]), then [`ranges::swap(*E1, *E2)].
[:zh_CN] 否则，如果 [`E1] 和 [`E2] 的类型都构成了 [`indirectly_readable]，并且
如果 [`E1] 和 [`E2] 的引用类型都构成了 [`:c swappable_with]（[#concept.swappable]），
则为 [`ranges::swap(*E1, *E2)]。

[item]
[:en] Otherwise, if the types [`T1] and [`T2] of [`E1] and [`E2] model
[`[`:c indirectly_movable_storable]<T1, T2>] and
[`[`:c indirectly_movable_storable]<T2, T1>], then
[`(void)(*E1 = [^iter-exchange-move](E2, E1))], except that [`E1] is evaluated
only once.
[:zh_CN] 否则，如果 [`E1] 和 [`E2] 的类型 [`T1] 和 [`T2] 构成了
[`[`:c indirectly_movable_storable]<T1, T2>] 和
[`[`:c indirectly_movable_storable]<T2, T1>]，则为
[`(void)(*E1 = [^iter-exchange-move](E2, E1))]，但 [`E1] 仅被求值一次。

[item]
[:en] Otherwise, [`ranges::iter_swap(E1, E2)] is ill-formed.
[:zh_CN] 否则，[`ranges::iter_swap(E1, E2)] 非良构。

[begin:note]
[:en] This case can result in substitution failure when
[`ranges::iter_swap(E1, E2)] appears in the immediate context of a template
instantiation.
[:zh_CN] 这种情况可能在当 [`ranges::iter_swap(E1, E2)] 出现于模板实例化的直接
语境中时导致发生替换失败。
[end:note]
[list:end]
