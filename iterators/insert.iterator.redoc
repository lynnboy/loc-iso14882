[section#insert.iterator
    [:en] Class template [`insert_iterator]
    [:zh_CN] 类模板 [`insert_iterator]
]

[%@library insert_iterator]
[codeblock:synopsis]
namespace std {
  template<class Container>
  class insert_iterator {
  protected:
    Container* container = nullptr;
    iterator_t<Container> iter = iterator_t<Container>();

  public:
    using iterator_category = output_iterator_tag;
    using value_type        = void;
    using difference_type   = ptrdiff_t;
    using pointer           = void;
    using reference         = void;
    using container_type    = Container;

    insert_iterator() = default;
    constexpr insert_iterator(Container& x, iterator_t<Container> i);
    constexpr insert_iterator& operator=(const typename Container::value_type& value);
    constexpr insert_iterator& operator=(typename Container::value_type&& value);

    constexpr insert_iterator& operator*();
    constexpr insert_iterator& operator++();
    constexpr insert_iterator& operator++(int);
  };
}
[codeblock:end]

[include insert.iter.ops]

[include inserter]
