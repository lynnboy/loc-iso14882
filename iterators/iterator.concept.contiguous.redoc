[section#iterator.concept.contiguous
    [:en] Concept [`:cname contiguous_iterator]
    [:zh_CN] 概念 [`:cname contiguous_iterator]
]

[para]
[:en] The [`:c contiguous_iterator] concept provides a guarantee that the
denoted elements are stored contiguously in memory.
[:zh_CN] [`:c contiguous_iterator] 概念提供保证，其所代表的各个元素在内存中连续
存储。

[codeblock:synopsis]
template<class I>
  concept [[redoc("`:c@def>")]]contiguous_iterator =
    [[redoc("`:c>")]]random_access_iterator<I> &&
    [[redoc("`:c>")]]derived_from<[[redoc("^>")]]ITER_CONCEPT(I), contiguous_iterator_tag> &&
    is_lvalue_reference_v<iter_reference_t<I>> &&
    [[redoc("`:c>")]]same_as<iter_value_t<I>, remove_cvref_t<iter_reference_t<I>>> &&
    requires(const I& i) {
      { to_address(i) } -> [[redoc("`:c>")]]same_as<add_pointer_t<iter_reference_t<I>>>;
    };
[codeblock:end]

[para]
[:en] Let [`a] and [`b] be dereferenceable iterators and [`c] be
non-dereferenceable iterator of type [`I] such that [`b] is reachable from [`a]
and [`c] is reachable from [`b], and let [`D] be [`iter_difference_t<I>].
[:zh_CN] 令 [`a] 和 [`b] 为 [`I] 类型的可解引用迭代器，[`c] 为不可解引用迭代器，
使得从 [`a] 可达 [`b]，从 [`b] 可达 [`c]，并令 [`D] 为 [`iter_difference_t<I>]。

[:en] The type [`I] models [`:c contiguous_iterator] only if
[:zh_CN] 仅当满足以下条件时，[`I] 构成 [`:c contiguous_iterator]：

[list]
[item]
[:en@~] [`to_address(a) == addressof(*a)],
[:zh_CN@~] [`to_address(a) == addressof(*a)]，
[item]
[:en@~] [`to_address(b) == to_address(a) + D(b - a)],
[:zh_CN@~] [`to_address(b) == to_address(a) + D(b - a)]，
[item]
[:en@~] [`to_address(c) == to_address(a) + D(c - a)],
[:zh_CN@~] [`to_address(c) == to_address(a) + D(c - a)]，
[item]
[:en@~] [`to_address(I{})] is well-defined,
[:zh_CN@~] [`to_address(I{})] 良构，
[item]
[:en@~] [`ranges::iter_move(a)] has the same type, value category, and effects
as [`std::move(*a)], and
[:zh_CN@~] [`ranges::iter_move(a)] 与 [`std::move(*a)] 具有相同的类型，值类别，
和效果，并且
[item]
[:en@~] if [`ranges::iter_swap(a, b)] is well-formed, it has effects equivalent
to [`ranges::swap(*a, *b)].
[:zh_CN@~] 如果 [`ranges::iter_swap(a, b)] 良构，则其效果等价于
[`ranges::swap(*a, *b)]。
[list:end]
