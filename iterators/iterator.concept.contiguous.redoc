[section#iterator.concept.contiguous
    [:en] Concept [`ContiguousIterator]
    [:zh_CN] 概念 [`ContiguousIterator]
]

[para]
[:en] The [`ContiguousIterator] concept provides a guarantee that the denoted
elements are stored contiguously in memory.
[:zh_CN] [`ContiguousIterator] 概念提供了所代表的各个元素在内存正连续存储的保证。

[%@library ContiguousIterator]
[codeblock:synopsis [!:var ITER_CONCEPT]]
template<class I>
  concept ContiguousIterator =
    RandomAccessIterator<I> &&
    DerivedFrom<[*ITER_CONCEPT](I), contiguous_iterator_tag> &&
    is_lvalue_reference_v<iter_reference_t<I>> &&
    Same<iter_value_t<I>, remove_cvref_t<iter_reference_t<I>>>;
[codeblock:end]

[para]
[:en] Let [`a] and [`b] be dereferenceable iterators of type [`I] such that [`b]
is reachable from [`a], and let [`D] be [`iter_difference_t<I>].
[:zh_CN] 令 [`a] 和 [`b] 为 [`I] 类型的可解引用迭代器，使得从 [`a] 可达 [`b]，
并令 [`D] 为 [`iter_difference_t<I>]。

[:en] The type [`I] models [`ContiguousIterator] only if
[`addressof(*(a + D(b - a)))] is equal to [`addressof(*a) + D(b - a)].
[:zh_CN] 仅当 [`addressof(*(a + D(b - a)))] 等于 [`addressof(*a) + D(b - a)] 时，
[`I] 构成 [`ContiguousIterator]。
