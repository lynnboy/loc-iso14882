[section#move.iter.nonmember
    [:en] Non-member functions
    [:zh_CN] 非成员函数
]

[%@library operator-[!move_iterator]]
[%@library move_iterator[!operator-]]
[codeblock:declaration]
template<class Iterator1, class Iterator2>
  constexpr auto operator-(const move_iterator<Iterator1>& x,
                           const move_iterator<Iterator2>& y)
    -> decltype(x.base() - y.base());
template<sized_sentinel_for<Iterator> S>
  friend constexpr iter_difference_t<Iterator>
    operator-(const move_sentinel<S>& x, const move_iterator& y);
template<sized_sentinel_for<Iterator> S>
  friend constexpr iter_difference_t<Iterator>
    operator-(const move_iterator& x, const move_sentinel<S>& y);
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`x.base() - y.base()].
[:zh_CN] [`x.base() - y.base()]。
[end:description]

[%@library operator+[!move_iterator]]
[%@library move_iterator[!operator+]]
[codeblock:declaration]
template<class Iterator>
  constexpr move_iterator<Iterator>
    operator+(iter_difference_t<Iterator> n, const move_iterator<Iterator>& x);
[codeblock:end]

[begin:description]
[para:constraints]
[:en] [`x + n] is well-formed and has type [`Iterator].
[:zh_CN] [`x + n] 良构且类型为 [`Iterator]。

[para:returns]
[:en] [`x + n].
[:zh_CN] [`x + n]。
[end:description]

[%@library iter_move[!move_iterator]]
[%@library move_iterator[!iter_move]]
[codeblock:declaration]
friend constexpr iter_rvalue_reference_t<Iterator>
  iter_move(const move_iterator& i)
    noexcept(noexcept(ranges::iter_move(i.current)));
[codeblock:end]

[begin:description]
[para:effects]
[:en] Equivalent to: [`return ranges::iter_move(i.current);]
[:zh_CN] 等价于：[`return ranges::iter_move(i.current);]
[end:description]

[%@library iter_swap[!move_iterator]]
[%@library move_iterator[!iter_swap]]
[codeblock:declaration]
template<indirectly_swappable<Iterator> Iterator2>
  friend constexpr void
    iter_swap(const move_iterator& x, const move_iterator<Iterator2>& y)
      noexcept(noexcept(ranges::iter_swap(x.current, y.current)));
[codeblock:end]

[begin:description]
[para:effects]
[:en] Equivalent to: [`ranges::iter_swap(x.current, y.current)].
[:zh_CN] 等价于：[`ranges::iter_swap(x.current, y.current)]。
[end:description]

[%@library make_move_iterator]
[codeblock:declaration]
template<class Iterator>
constexpr move_iterator<Iterator> make_move_iterator(Iterator i);
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`move_iterator<Iterator>(i)].
[:zh_CN] [`move_iterator<Iterator>(i)]。
[end:description]
