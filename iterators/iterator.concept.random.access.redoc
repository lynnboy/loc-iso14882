[section#iterator.concept.random.access
    [:en] Concept [`RandomAccessIterator]
    [:zh_CN] 概念 [`RandomAccessIterator]
]

[para]
[:en] The [`RandomAccessIterator] concept adds support for constant-time
advancement with [`+=], [`+], [`-=], and [`-], as well as the computation of
distance in constant time with [`-].
[:zh_CN] [`RandomAccessIterator] 概念添加了以常量时间进行 [`+=]，[`+]，[`-=]，
和 [`-] 的推进，以及以常量时间通过 [`-] 计算距离的支持。

[:en] Random access iterators also support array notation via subscripting.
[:zh_CN] 随机访问迭代器还支持下标方式的数组语法。

[%@library RandomAccessIterator]
[codeblock:synopsis [!:var ITER_CONCEPT]]
template<class I>
  concept RandomAccessIterator =
    BidirectionalIterator<I> &&
    DerivedFrom<[*ITER_CONCEPT](I), random_access_iterator_tag> &&
    StrictTotallyOrdered<I> &&
    SizedSentinel<I, I> &&
    requires(I i, const I j, const iter_difference_t<I> n) {
      { i += n } -> Same<I&>;
      { j +  n } -> Same<I>;
      { n +  j } -> Same<I>;
      { i -= n } -> Same<I&>;
      { j -  n } -> Same<I>;
      {  j[n]  } -> Same<iter_reference_t<I>>;
    };
[codeblock:end]

[para]
[:en] Let [`a] and [`b] be valid iterators of type [`I] such that [`b] is
reachable from [`a] after [`n] applications of [`++a], let [`D] be
[`iter_difference_t<I>], and let [`n] denote a value of type [`D].
[:zh_CN] 令 [`a] 和 [`b] 为 [`I] 类型的有效迭代器，使得从 [`a] 经过 [`n] 次运用
[`++a] 后可达 [`b]，令 [`D] 为 [`iter_difference_t<I>]，并令 [`n] 代表 [`D] 类型
的值。

[:en] [`I] models [`RandomAccessIterator] only if:
[:zh_CN] 仅当符合以下条件时 [`I] 构成 [`RandomAccessIterator]：

[list]
[item]
[:en] [`(a += n)] is equal to [`b].
[:zh_CN] [`(a += n)] 等于 [`b]。
[item]
[:en] [`addressof(a += n)] is equal to [`addressof(a)].
[:zh_CN] [`addressof(a += n)] 等于 [`addressof(a)]。
[item]
[:en] [`(a + n)] is equal to [`(a += n)].
[:zh_CN] [`(a + n)] 等于 [`(a += n)]。
[item]
[:en] For any two positive values [`x] and [`y] of type [`D], if
[`(a + D(x + y))] is valid, then [`(a + D(x + y))] is equal to [`((a + x) + y)].
[:zh_CN] 对于 [`D] 类型的任意两个正数 [`x] 和 [`y]，若 [`(a + D(x + y))] 有效，
则 [`(a + D(x + y))] 等于 [`((a + x) + y)]。
[item]
[:en] [`(a + D(0))] is equal to [`a].
[:zh_CN] [`(a + D(0))] 等于 [`a]。
[item]
[:en] If [`(a + D(n - 1))] is valid, then [`(a + n)] is equal to
[`++(a + D(n - 1))].
[:zh_CN] 若 [`(a + D(n - 1))] 有效，则 [`(a + n)] 等于 [`++(a + D(n - 1))]。
[item]
[:en] [`(b += -n)] is equal to [`a].
[:zh_CN] [`(b += -n)] 等于 [`a]。
[item]
[:en] [`(b -= n)] is equal to [`a].
[:zh_CN] [`(b -= n)] 等于 [`a]。
[item]
[:en] [`addressof(b -= n)] is equal to [`addressof(b)].
[:zh_CN] [`addressof(b -= n)] 等于 [`addressof(b)]。
[item]
[:en] [`(b - n)] is equal to [`(b -= n)].
[:zh_CN] [`(b - n)] 等于 [`(b -= n)]。
[item]
[:en] If [`b] is dereferenceable, then [`a`[n`]] is valid and is equal to [`*b].
[:zh_CN] 若 [`b] 可解引用，则 [`a`[n`]] 有效且等于 [`*b]。
[item]
[:en] [`bool(a <= b)] is [`true].
[:zh_CN] [`bool(a <= b)] 为 [`true]。
[list:end]
