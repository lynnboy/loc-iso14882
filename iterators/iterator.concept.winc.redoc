[section#iterator.concept.winc
    [:en] Concept [`WeaklyIncrementable]
    [:zh_CN] 概念 [`WeaklyIncrementable]
]

[para]
[:en] The [`WeaklyIncrementable] concept specifies the requirements on types
that can be incremented with the pre- and post-increment operators.
[:zh_CN] [`WeaklyIncrementable] 概念针对可以用前缀和后缀增量运算符进行增量操作的
类型给出了规定。

[:en] The increment operations are not required to be equality-preserving,
nor is the type required to be [`EqualityComparable].
[:zh_CN] 这些增量操作并未被要求是维持相等性的，也未要求该类型为
[`EqualityComparable]。

[%@library WeaklyIncrementable]
[codeblock:synopsis]
template<class I>
  concept WeaklyIncrementable =
    Semiregular<I> &&
    requires(I i) {
      typename iter_difference_t<I>;
      requires SignedIntegral<iter_difference_t<I>>;
      { ++i } -> Same<I&>; // [:en] not required to be equality-preserving
                           // [|:zh_CN] 不必是维持相等性的
      i++; // [:en] not required to be equality-preserving
           // [|:zh_CN] 不必是维持相等性的
    };
[codeblock:end]

[para]
[:en] Let [`i] be an object of type [`I].
[:zh_CN] 令 [`i] 为 [`I] 类型的对象。

[:en] When [`i] is in the domain of both pre- and post-increment, [`i] is said
to be [+incrementable[%]].
[:zh_CN] 当 [`i] 同时处于前缀和后缀增量的定义域中时，称 [`i] [+可增量[%]]。

[:en] [`I] models [`WeaklyIncrementable<I>] only if
[:zh_CN] 仅当符合以下条件时 [`I] 构成 [`WeaklyIncrementable<I>]：

[list]
[item]
[:en] The expressions [`++i] and [`i++] have the same domain.
[:zh_CN] 表达式 [`++i] 和 [`i++] 具有相同的定义域。

[item]
[:en] If [`i] is incrementable, then both [`++i] and [`i++] advance [`i] to the
next element.
[:zh_CN] 当 [`i] 可增量时，[`++i] 和 [`i++] 都将 [`i] 推进到下一个元素。

[item]
[:en] If [`i] is incrementable, then [`addressof(++i)] is equal to
[`addressof(i)].
[:zh_CN] 当 [`i] 可增量时，[`addressof(++i)] 等于 [`addressof(i)]。
[list:end]

[para]
[enter:note]
[:en] For [`WeaklyIncrementable] types, [`a] equals [`b] does not imply that
[`++a] equals [`++b].
[:zh_CN] 对于 [`WeaklyIncrementable] 的类型，[`a] 等于 [`b] 并不蕴含 [`++a] 等于
[`++b]。

[:en] (Equality does not guarantee the substitution property or referential
transparency.)
[:zh_CN] （相等性并不保证代换属性或者引用透明性。）

[:en] Algorithms on weakly incrementable types should never attempt to pass
through the same incrementable value twice.
[:zh_CN] 针对弱可增量类型的算法不能试图将同一个可增量值传递两次。

[:en] They should be single-pass algorithms.
[:zh_CN] 它们应当是单遍的算法。

[:en] These algorithms can be used with istreams as the source of the input data
through the [`istream_iterator] class template.
[:zh_CN] 这些算法可以用在通过 [`istream_iterator] 类模板将输入流作为输入数据的
来源的情形中。
[exit:note]
