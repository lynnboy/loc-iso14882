[section#iterator.concept.winc
    [:en] Concept [`:cname weakly_incrementable]
    [:zh_CN] 概念 [`:cname weakly_incrementable]
]

[para]
[:en] The [`:c weakly_incrementable] concept specifies the requirements on types
that can be incremented with the pre- and post-increment operators.
[:zh_CN] [`:c weakly_incrementable] 概念针对可以用前置和后置增量运算符进行增量
操作的类型给出了规定。

[:en] The increment operations are not required to be equality-preserving,
nor is the type required to be [`:c equality_comparable].
[:zh_CN] 这些增量操作并未被要求是维持相等性的，也未要求该类型为
[`:c equality_comparable]。

[codeblock:synopsis]
template<class T>
  inline constexpr bool [[redoc("*>")]]is-integer-like = [[redoc("[=seebelow]")]];            // [=expos]

template<class T>
  inline constexpr bool [[redoc("*>")]]is-signed-integer-like = [[redoc("[=seebelow]")]];     // [=expos]

template<class I>
  concept [[redoc("`:c@def>")]]weakly_incrementable =
    [[redoc("`:c>")]]movable<I> &&
    requires(I i) {
      typename iter_difference_t<I>;
      requires [[redoc("*>")]]is-signed-integer-like<iter_difference_t<I>>;
      { ++i } -> [[redoc("`:c>")]]same_as<I&>;   // [:en] not required to be equality-preserving \
                                                 [:zh_CN] 不必是维持相等性的
      i++;                      // [:en] not required to be equality-preserving \
                                [:zh_CN] 不必是维持相等性的
    };
[codeblock:end]

[para]
[:en] A type [`I] is an [+:adj integer-class[!type]] if it is in a set of
[?impldef integer-class type] types that behave as integer types do, as
defined in below.
[:zh_CN] 如果类型 [`I] 属于行为类似于整数类型的[?impldef 整数类类型]类型集合
（如下文定义），则它是[+:adj 整数类[!类型]]。

[begin:note]
[:en] An integer-class type is not necessarily a class type.
[:zh_CN] 整数类类型不一定是类类型。
[end:note]

[para]
[:en] The range of representable values of an integer-class type is the
continuous set of values over which it is defined.
[:zh_CN] 整数类类型的可表示的值的范围，是其所定义的值的连续集合。

[:en] For any integer-class type, its range of representable values is either
[$-2^{N-1}] to [$2^{N-1}-1] (inclusive) for some integer [$N], in which case it
is a [+:adj signed-integer-class[!type]], or [$0] to [$2^{N}-1] (inclusive) for
some integer [$N], in which case it is an [+:adj unsigned-integer-class[!type]].
[:zh_CN] 对于任意整数类类型，其可表示值范围，要么对于某个整数 [$N] 为
[$-2^{N-1}] 到 [$2^{N-1}-1]（含边界），这种情况它是[+:adj 有符号整数类[!类型]]，
要么为 [$0] 到 [$2^{N}-1]（含边界），这种情况它是[+:adj 无符号整数类[!类型]]。

[:en] In both cases, [$N] is called the
[+width[%:adj width[!of integer-class type]]] of the integer-class type.
[:zh_CN] 两种情况下 [$N] 均被称为该整数类类型的[+宽度[%:adj 宽度[!整数类类型]]]。

[:en] The width of an integer-class type is greater than that of every integral
type of the same signedness.
[:zh_CN] 整数类类型的宽度大于所有相同符号性的整型类型的宽度。

[para]
[:en] A type [`I] other than [=cv] [`bool] is [+integer-like] if it models
[`[`:c integral]<I>] or if it is an integer-class type.
[:zh_CN] 如果并非 [=cv] [`bool] 的类型 [`I] 构成 [`[`:c integral]<I>]，或它是
整数类类型，则它是[+整数式]类型。

[:en] An integer-like type [`I] is [+signed-integer-like] if it models
[`[`:c signed_integral]<I>] or if it is an signed-integer-class type.
[:zh_CN] 如果整数式类型 [`I] 构成 [`[`:c signed_integral]<I>]，或它是有符号整数
类类型，则它是[+有符号整数式]类型。

[:en] An integer-like type [`I] is [+unsigned-integer-like] if it models
[`[`:c unsigned_integral]<I>] or if it is an unsigned-integer-class type.
[:zh_CN] 如果整数式类型 [`I] 构成 [`[`:c unsigned_integral]<I>]，或它是无符号整数
类类型，则它是[+无符号整数式]类型。

[para]
[:en] For every integer-class type [`I], let [`B(I)] be a unique hypothetical
extended integer type of the same signedness with the same width
([#basic.fundamental]) as [`I].
[:zh_CN] 对于每个整数类类型 [`I]，令 [`B(I)] 为虚构的具有相同符号性且宽度
（[#basic.fundamental]）与 [`I] 相同的唯一扩充整数类型。

[begin:note]
[:en] The corresponding hypothetical specialization [`numeric_limits<B(I)>]
meets the requirements on [`numeric_limits] specializations for integral types
([#numeric.limits]).
[:zh_CN] 对应的虚构特例 [`numeric_limits<B(I)>] 满足 [`numeric_limits] 对于整型
类型的特例的规定（[#numeric.limits]）。
[end:note]

[:en] For every integral type [`J], let [`B(J)] be the same type as [`J].
[:zh_CN] 对于每种整型类型 [`J]，令 [`B(J)] 与 [`J] 为相同类型。

[para]
[:en] Expressions of integer-class type are explicitly convertible to any
integer-like type, and implicitly convertible to any integer-class type
of equal or greater width and the same signedness.
[:zh_CN] 整数类类型的表达式可以显式转换为任何整数式类型，也可以隐式转换为任何
具有相等或更大宽度和相同符号性的整数式类型。

[:en] Expressions of integral type are both implicitly and explicitly
convertible to any integer-class type.
[:zh_CN] 整型类型的表达式可以隐式或显式转换为任何整数类类型。

[:en] Conversions between integral and integer-class types and between two
integer-class types do not exit via an exception.
[:zh_CN] 整型和整数类类型之间的转换，和两种整数类类型之间的转换，不会以异常退出。

[:en] The result of such a conversion is the unique value of the destination
type that is congruent to the source modulo [$2^N], where [$N] is the width of
the destination type.
[:zh_CN] 这种转换的结果，是目标类型中与原值按模 [$2^N] 同余的唯一值，其中 [$N]
为目标类型的宽度。

[para]
[:en] Let [`a] be an object of integer-class type [`I], let [`b] be an object of
integer-like type [`I2] such that the expression [`b] is implicitly convertible
to [`I], let [`x] and [`y] be, respectively, objects of type [`B(I)] and [`B(I2)]
as described above that represent the same values as [`a] and [`b], and let [`c]
be an lvalue of any integral type.
[:zh_CN] 令 [`a] 为整数类类型 [`I] 的对象，令 [`b] 为整数式类型 [`I2] 的对象并
使得表达式 [`b] 可以隐式转换为 [`I]，令 [`x] 和 [`y] 分别为如上述的类型 [`B(I)]
和 [`B(I2)] 的对象并与 [`a] 和 [`b] 表示相同的值，并令 [`c] 为任意整型类型的左值。

[list]
[item]
[:en] The expressions [`a++] and [`a--] shall be prvalues of type [`I] whose
values are equal to that of [`a] prior to the evaluation of the expressions.
[:zh_CN] 表达式 [`a++] 和 [`a--] 应当为 [`I] 类型的纯右值，等于表达式求值之前
[`a] 的值。

[:en] The expression [`a++] shall modify the value of [`a] by adding [`1] to it.
[:zh_CN] 表达式 [`a++] 应当以加 [`1] 而改动 [`a] 的值。

[:en] The expression [`a--] shall modify the value of [`a] by subtracting [`1]
from it.
[:zh_CN] 表达式 [`a--] 应当以减 [`1] 而改动 [`a] 的值。

[item]
[:en] The expressions [`++a], [`--a], and [`&a] shall be expression-equivalent
to [`a += 1], [`a -= 1], and [`addressof(a)], respectively.
[:zh_CN] 表达式 [`++a]，[`--a] 和 [`&a] 应当分别按表达式等价于 [`a += 1]，
[`a -= 1]，和 [`addressof(a)]。

[item]
[:en] For every [~unary-operator] [`@] other than [`&] for which the expression
[`@x] is well-formed, [`@a] shall also be well-formed and have the same value,
effects, and value category as [`@x].
[:zh_CN] 对于使表达式 [`@x] 良构的每个并非 [`&] 的[~一元运算符] [`@]，[`@a] 应当
同样良构，且与 [`@x] 具有相同的值，效果和值类别。

[:en] If [`@x] has type [`bool], so too does [`@a];
[:zh_CN] 若 [`@x] 类型为 [`bool]，则 [`@a] 也是如此；
[:en@~] if [`@x] has type [`B(I)], then [`@a] has type [`I].
[:zh_CN@~] 若 [`@x] 类型为 [`B(I)]，则 [`@a] 类型为 [`I]。

[item]
[:en] For every assignment operator [`@=] for which [`c @= x] is well-formed,
[`c @= a] shall also be well-formed and shall have the same value and effects as
[`c @= x].
[:zh_CN] 对于使 [`c @= x] 良构的每个赋值运算符 [`@=]，则 [`c @= a] 应当同样良构，
且与 [`c @= x] 具有相同的值和效果。

[:en] The expression [`c @= a] shall be an lvalue referring to [`c].
[:zh_CN] 表达式 [`c @= a] 应当为指代 [`c] 的左值。

[item]
[:en] For every assignment operator [`@=] for which [`x @= y] is well-formed,
[`a @= b] shall also be well-formed and shall have the same effects as [`x @= y],
except that the value that would be stored into [`x] is stored into [`a].
[:zh_CN] 对于使 [`x @= y] 良构的每个赋值运算符 [`@=]，则 [`a @= b] 应当同样良构，
且与 [`x @= x] 具有相同的效果，只不过本存储给 [`x] 的值将存储给 [`a]。

[:en] The expression [`a @= b] shall be an lvalue referring to [`a].
[:zh_CN] 表达式 [`a @= b] 应当为指代 [`a] 的左值。

[item]
[:en] For every non-assignment binary operator [`@] for which [`x @ y] and
[`y @ x] are well-formed, [`a @ b] and [`b @ a] shall also be well-formed and
shall have the same value, effects, and value category as [`x @ y] and [`y @ x],
respectively.
[:zh_CN] 对于使 [`x @ y] 和 [`y @ x] 均良构的每个非赋值二元运算符 [`@]，[`a @ b]
和 [`b @ a] 应当同样良构，且分别与 [`x @ y] 和 [`y @ x] 具有相同的值，效果和值类别。

[:en] If [`x @ y] or [`y @ x] has type [`B(I)], then [`a @ b] or [`b @ a],
respectively, has type [`I];
[:zh_CN] 若 [`x @ y] 或 [`y @ x] 类型为 [`B(I)]，则 [`a @ b] 或 [`b @ a] 的类型
分别为 [`I]；
[:en] if [`x @ y] or [`y @ x] has type [`B(I2)], then [`a @ b] or [`b @ a],
respectively, has type [`I2];
[:zh_CN] 若 [`x @ y] 或 [`y @ x] 类型为 [`B(I2)]，则 [`a @ b] 或 [`b @ a] 的类型
分别为 [`I2]；
[:en] If [`x @ y] or [`y @ x] has any other type, then [`a @ b] or [`b @ a],
respectively, has that type.
[:zh_CN] 若 [`x @ y] 或 [`y @ x] 为任何其他类型，则 [`a @ b] 或 [`b @ a] 也分别
为这个类型。
[list:end]

[para]
[:en] An expression [`E] of integer-class types [`I] is contextually convertible
to [`bool] as if by [`bool(E != I(0))].
[:zh_CN] 整型类类型 [`I] 的表达式 [`E] 可以按语境转换为 [`bool]，行为如同
[`bool(a != I(0))]。

[para]
[:en] All integer-class types model [`:c regular] ([#concepts.object]) and
[`[`:c three_way_comparable]<strong_odering>] ([#cmp.concept]).
[:zh_CN] 所有的整数类类型都构成 [`:c regular]（[#concepts.object]）和
[`[`:c three_way_comparable]<strong_odering>]（[#cmp.concept]）。

[para]
[:en] A value-initialized object of integer-class type has value 0.
[:zh_CN] 整数类类型的经过值初始化的对象具有 0 值。

[para]
[:en] For every (possibly cv-qualified) integer-class type [`I],
[`numeric_limits<I>] is specialized such that each static data member [`m] has
the same value as [`numeric_limits<B(I)>::m], and each static member function
[`f] returns [`I(numeric_limits<B(I)>::f())].
[:zh_CN] 对每个（可能 cv 限定的）整数类类型 [`I]，均对 [`numeric_limits<I>] 进行
特化，使得每个静态数据成员 [`m] 具有与 [`numeric_limits<B(I)>::m] 相同的值，且
每个静态成员函数 [`f] 返回 [`I(numeric_limits<B(I)>::f())]。

[para]
[:en] For any two integer-like types [`I1] and [`I2], at least one of which is
an integer-class type, [`common_type_t<I1, I2>] denotes an integer-class type
whose width is not less than that of [`I1] or [`I2].
[:zh_CN] 对于任意两个整数式类型 [`I1] 和 [`I2]，其中至少一个是整数类类型，则
[`common_type_t<I1, I2>] 代表一种宽度不小于 [`I1] 和 [`I2] 的整数类类型。

[:en] If both [`I1] and [`I2] are signed-integer-like types, then
[`common_type_t<I1, I2>] is also a signed-integer-like type.
[:zh_CN] 当 [`I1] 和 [`I2] 均为有符号整数式类型时，[`common_type_t<I1, I2>] 也是
有符号整数式类型。

[para]
[:en] [`[*is-integer-like]<I>] is [`true] if and only if [`I] is an integer-like
type.
[:zh_CN] 当且仅当 [`I] 是整数式类型时，[`[*is-integer-like]<I>] 为 [`true]。

[:en] [`[*is-signed-integer-like]<I>] is [`true] if and only if [`I] is a
signed-integer-like type.
[:zh_CN] 当且仅当 [`I] 是有符号整数式类型时，[`[*is-signed-integer-like]<I>] 为
[`true]。

[para]
[:en] Let [`i] be an object of type [`I].
[:zh_CN] 令 [`i] 为 [`I] 类型的对象。

[:en] When [`i] is in the domain of both pre- and post-increment, [`i] is said
to be [+incrementable].
[:zh_CN] 当 [`i] 同时处于前置和后置增量的定义域中时，称 [`i] [+可增量]。

[:en] [`I] models [`[`:c weakly_incrementable]<I>] only if
[:zh_CN] 仅当符合以下条件时 [`I] 构成 [`[`:c weakly_incrementable]<I>]：

[list]
[item]
[:en] The expressions [`++i] and [`i++] have the same domain.
[:zh_CN] 表达式 [`++i] 和 [`i++] 具有相同的定义域。

[item]
[:en] If [`i] is incrementable, then both [`++i] and [`i++] advance [`i] to the
next element.
[:zh_CN] 当 [`i] 可增量时，[`++i] 和 [`i++] 都将 [`i] 推进到下一个元素。

[item]
[:en] If [`i] is incrementable, then [`addressof(++i)] is equal to
[`addressof(i)].
[:zh_CN] 当 [`i] 可增量时，[`addressof(++i)] 等于 [`addressof(i)]。
[list:end]

[para:recommended]
[:en] The implementation of an algorithm on a weakly incrementable type should
never attempt to pass through the same incrementable value twice; such an
algorithm should be a single-pass algorithm.
[:zh_CN] 针对某个弱可增量类型的算法的实现不能试图将同一个可增量值传递两次；这种
算法应当是单遍算法。

[begin:note]
[:en] For [`:c weakly_incrementable] types, [`a] equals [`b] does not imply that
[`++a] equals [`++b].
[:zh_CN] 对于 [`:c weakly_incrementable] 的类型，[`a] 等于 [`b] 并不蕴含 [`++a]
等于 [`++b]。

[:en] (Equality does not guarantee the substitution property or referential
transparency.)
[:zh_CN] （相等性并不保证代换属性或者引用透明性。）

[:en] These algorithms can be used with istreams as the source of the input data
through the [`istream_iterator] class template.
[:zh_CN] 这些算法可以用在通过 [`istream_iterator] 类模板将输入流作为输入数据的
来源的情形中。
[end:note]
