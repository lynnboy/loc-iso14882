[section#reverse.iter.cmp
    [:en] Comparisons
    [:zh_CN] 比较
]

[%@library operator==[!reverse_iterator]]
[%@library reverse_iterator[!operator==]]
[codeblock:declaration]
template<class Iterator1, class Iterator2>
  constexpr bool operator==(
    const reverse_iterator<Iterator1>& x,
    const reverse_iterator<Iterator2>& y);
[codeblock:end]

[enter:description]
[para:constraints]
[:en] The expression [`x.current == y.current] shall be valid and convertible to
[`bool].
[:zh_CN] 表达式 [`x.current == y.current] 应当有效且可以转换为 [`bool]。

[para:returns]
[:en] [`x.current == y.current].
[:zh_CN] [`x.current == y.current]。
[exit:description]

[%@library operator!=[!reverse_iterator]]
[%@library reverse_iterator[!operator!=]]
[codeblock:declaration]
template<class Iterator1, class Iterator2>
  constexpr bool operator!=(
    const reverse_iterator<Iterator1>& x,
    const reverse_iterator<Iterator2>& y);
[codeblock:end]

[enter:description]
[para:constraints]
[:en] The expression [`x.current != y.current] shall be valid and convertible to
[`bool].
[:zh_CN] 表达式 [`x.current != y.current] 应当有效且可以转换为 [`bool]。

[para:returns]
[:en] [`x.current != y.current].
[:zh_CN] [`x.current != y.current]。
[exit:description]

[%@library operator<[!reverse_iterator]]
[%@library reverse_iterator[!operator<]]
[codeblock:declaration]
template<class Iterator1, class Iterator2>
  constexpr bool operator<(
    const reverse_iterator<Iterator1>& x,
    const reverse_iterator<Iterator2>& y);
[codeblock:end]

[enter:description]
[para:constraints]
[:en] The expression [`x.current > y.current] shall be valid and convertible to
[`bool].
[:zh_CN] 表达式 [`x.current > y.current] 应当有效且可以转换为 [`bool]。

[para:returns]
[:en] [`x.current > y.current].
[:zh_CN] [`x.current > y.current]。
[exit:description]

[%@library operator>[!reverse_iterator]]
[%@library reverse_iterator[!operator>]]
[codeblock:declaration]
template<class Iterator1, class Iterator2>
  constexpr bool operator>(
    const reverse_iterator<Iterator1>& x,
    const reverse_iterator<Iterator2>& y);
[codeblock:end]

[enter:description]
[para:constraints]
[:en] The expression [`x.current < y.current] shall be valid and convertible to
[`bool].
[:zh_CN] 表达式 [`x.current < y.current] 应当有效且可以转换为 [`bool]。

[para:returns]
[:en] [`x.current < y.current].
[:zh_CN] [`x.current < y.current]。
[exit:description]

[%@library operator<=[!reverse_iterator]]
[%@library reverse_iterator[!operator<=]]
[codeblock:declaration]
template<class Iterator1, class Iterator2>
  constexpr bool operator<=(
    const reverse_iterator<Iterator1>& x,
    const reverse_iterator<Iterator2>& y);
[codeblock:end]

[enter:description]
[para:constraints]
[:en] The expression [`x.current >= y.current] shall be valid and convertible to
[`bool].
[:zh_CN] 表达式 [`x.current >= y.current] 应当有效且可以转换为 [`bool]。

[para:returns]
[:en] [`x.current >= y.current].
[:zh_CN] [`x.current >= y.current]。
[exit:description]

[%@library operator>=[!reverse_iterator]]
[%@library reverse_iterator[!operator>=]]
[codeblock:declaration]
template<class Iterator1, class Iterator2>
  constexpr bool operator>=(
    const reverse_iterator<Iterator1>& x,
    const reverse_iterator<Iterator2>& y);
[codeblock:end]

[enter:description]
[para:constraints]
[:en] The expression [`x.current <= y.current] shall be valid and convertible to
[`bool].
[:zh_CN] 表达式 [`x.current <= y.current] 应当有效且可以转换为 [`bool]。

[para:returns]
[:en] [`x.current <= y.current].
[:zh_CN] [`x.current <= y.current]。
[exit:description]
