[section#reverse.iter.cmp
    [:en] Comparisons
    [:zh_CN] 比较
]

[%@library operator==[!reverse_iterator]]
[%@library reverse_iterator[!operator==]]
[codeblock:declaration]
template<class Iterator1, class Iterator2>
  constexpr bool operator==(
    const reverse_iterator<Iterator1>& x,
    const reverse_iterator<Iterator2>& y);
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`x.base() == y.base()] is well-formed and convertible to [`bool].
[:zh_CN] [`x.base() == y.base()] 良构且可以转换为 [`bool]。

[para:returns]
[:en] [`x.base() == y.base()].
[:zh_CN] [`x.base() == y.base()]。
[div:end]

[%@library operator!=[!reverse_iterator]]
[%@library reverse_iterator[!operator!=]]
[codeblock:declaration]
template<class Iterator1, class Iterator2>
  constexpr bool operator!=(
    const reverse_iterator<Iterator1>& x,
    const reverse_iterator<Iterator2>& y);
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`x.base() != y.base()] is well-formed and convertible to [`bool].
[:zh_CN] [`x.base() != y.base()] 良构且可以转换为 [`bool]。

[para:returns]
[:en] [`x.base() != y.base()].
[:zh_CN] [`x.base() != y.base()]。
[div:end]

[%@library operator<[!reverse_iterator]]
[%@library reverse_iterator[!operator<]]
[codeblock:declaration]
template<class Iterator1, class Iterator2>
  constexpr bool operator<(
    const reverse_iterator<Iterator1>& x,
    const reverse_iterator<Iterator2>& y);
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`x.base() > y.base()] is well-formed and convertible to [`bool].
[:zh_CN] [`x.base() > y.base()] 良构且可以转换为 [`bool]。

[para:returns]
[:en] [`x.base() > y.base()].
[:zh_CN] [`x.base() > y.base()]。
[div:end]

[%@library operator>[!reverse_iterator]]
[%@library reverse_iterator[!operator>]]
[codeblock:declaration]
template<class Iterator1, class Iterator2>
  constexpr bool operator>(
    const reverse_iterator<Iterator1>& x,
    const reverse_iterator<Iterator2>& y);
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`x.base() < y.base()] is well-formed and convertible to [`bool].
[:zh_CN] [`x.base() < y.base()] 良构且可以转换为 [`bool]。

[para:returns]
[:en] [`x.base() < y.base()].
[:zh_CN] [`x.base() < y.base()]。
[div:end]

[%@library operator<=[!reverse_iterator]]
[%@library reverse_iterator[!operator<=]]
[codeblock:declaration]
template<class Iterator1, class Iterator2>
  constexpr bool operator<=(
    const reverse_iterator<Iterator1>& x,
    const reverse_iterator<Iterator2>& y);
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`x.base() >= y.base()] is well-formed and convertible to [`bool].
[:zh_CN] [`x.base() >= y.base()] 良构且可以转换为 [`bool]。

[para:returns]
[:en] [`x.base() >= y.base()].
[:zh_CN] [`x.base() >= y.base()]。
[div:end]

[%@library operator>=[!reverse_iterator]]
[%@library reverse_iterator[!operator>=]]
[codeblock:declaration]
template<class Iterator1, class Iterator2>
  constexpr bool operator>=(
    const reverse_iterator<Iterator1>& x,
    const reverse_iterator<Iterator2>& y);
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`x.base() <= y.base()] is well-formed and convertible to [`bool].
[:zh_CN] [`x.base() <= y.base()] 良构且可以转换为 [`bool]。

[para:returns]
[:en] [`x.base() <= y.base()].
[:zh_CN] [`x.base() <= y.base()]。
[div:end]

[%@library operator<=>[!reverse_iterator]]
[%@library reverse_iterator[!operator<=>]]
[codeblock:declaration]
template<class Iterator1, three_way_comparable_with<Iterator1, weak_equality> Iterator2>
  constexpr compare_three_way_result_t<Iterator1, Iterator2>
    operator<=>(const reverse_iterator<Iterator1>& x,
                const reverse_iterator<Iterator2>& y);
[codeblock:end]

[div:description]
[para:returns]
[:en] [`y.base() <=> x.base()].
[:zh_CN] [`y.base() <=> x.base()]。

[para]
[begin:note]
[:en] The argument order in the [=returns] element is reversed because this is a
reverse iterator.
[:zh_CN] 由于这是逆序迭代器，故 [=returns] 条目中的实参顺序被反转。
[end:note]
[div:end]
