[section#counted.iter.nav
    [:en] Navigation
    [:zh_CN] 导航
]

[%@library operator++[!counted_iterator]]
[%@library counted_iterator[!operator++]]
[codeblock:declaration]
constexpr counted_iterator& operator++();
[codeblock:end]

[enter:description]
[para:expects]
[:en] [`length > 0].
[:zh_CN] [`length > 0]。

[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock:notation]
++current;
--length;
return *this;
[codeblock:end]
[exit:description]

[%@library operator++[!counted_iterator]]
[%@library counted_iterator[!operator++]]
[codeblock:declaration]
decltype(auto) operator++(int);
[codeblock:end]

[enter:description]
[para:expects]
[:en] [`length > 0].
[:zh_CN] [`length > 0]。

[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock:notation]
--length;
try { return current++; }
catch(...) { ++length; throw; }
[codeblock:end]
[exit:description]

[%@library operator++[!counted_iterator]]
[%@library counted_iterator[!operator++]]
[codeblock:declaration]
constexpr counted_iterator operator++(int)
  requires ForwardIterator<I>;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock:notation]
counted_iterator tmp = *this;
++*this;
return tmp;
[codeblock:end]
[exit:description]

[%@library operator--[!counted_iterator]]
[%@library counted_iterator[!operator--]]
[codeblock:declaration]
  constexpr counted_iterator& operator--();
    requires BidirectionalIterator<I>
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock:notation]
--current;
++length;
return *this;
[codeblock:end]
[exit:description]

[%@library operator--[!counted_iterator]]
[%@library counted_iterator[!operator--]]
[codeblock:declaration]
  constexpr counted_iterator operator--(int)
    requires BidirectionalIterator<I>;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock:notation]
counted_iterator tmp = *this;
--*this;
return tmp;
[codeblock:end]
[exit:description]

[%@library operator+[!counted_iterator]]
[%@library counted_iterator[!operator+]]
[codeblock:declaration]
  constexpr counted_iterator operator+(iter_difference_t<I> n) const
    requires RandomAccessIterator<I>;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to: [`return counted_iterator(current + n, length - n);]
[:zh_CN] 等价于：[`return counted_iterator(current + n, length - n);]
[exit:description]

[%@library operator+[!counted_iterator]]
[%@library counted_iterator[!operator+]]
[codeblock:declaration]
friend constexpr counted_iterator operator+(
  iter_difference_t<I> n, const counted_iterator& x)
    requires RandomAccessIterator<I>;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to: [`return x + n;]
[:zh_CN] 等价于：[`return x + n;]
[exit:description]

[%@library operator+=[!counted_iterator]]
[%@library counted_iterator[!operator+=]]
[codeblock:declaration]
  constexpr counted_iterator& operator+=(iter_difference_t<I> n)
    requires RandomAccessIterator<I>;
[codeblock:end]

[enter:description]
[para:expects]
[:en] [`n <= length].
[:zh_CN] [`n <= length]。

[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock:notation]
current += n;
length -= n;
return *this;
[codeblock:end]
[exit:description]

[%@library operator-[!counted_iterator]]
[%@library counted_iterator[!operator-]]
[codeblock:declaration]
  constexpr counted_iterator operator-(iter_difference_t<I> n) const
    requires RandomAccessIterator<I>;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to: [`return counted_iterator(current - n, length + n);]
[:zh_CN] 等价于：[`return counted_iterator(current - n, length + n);]
[exit:description]

[%@library operator-[!counted_iterator]]
[%@library counted_iterator[!operator-]]
[codeblock:declaration]
template<Common<I> I2>
  friend constexpr iter_difference_t<I2> operator-(
    const counted_iterator& x, const counted_iterator<I2>& y);
[codeblock:end]

[enter:description]
[para:expects]
[:en] [`x] and [`y] refer to elements of the same sequence
([#counted.iterator]).
[:zh_CN] [`x] 和 [`y] 指代同一个序列中的元素（[#counted.iterator]）。

[para:effects]
[:en] Equivalent to: [`return y.length - x.length;]
[:zh_CN] 等价于：[`return y.length - x.length;]
[exit:description]

[%@library operator-[!counted_iterator]]
[%@library counted_iterator[!operator-]]
[codeblock:declaration]
friend constexpr iter_difference_t<I> operator-(
  const counted_iterator& x, default_sentinel_t);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to: [`return -x.length;]
[:zh_CN] 等价于：[`return -x.length;]
[exit:description]

[%@library operator-[!counted_iterator]]
[%@library counted_iterator[!operator-]]
[codeblock:declaration]
friend constexpr iter_difference_t<I> operator-(
  default_sentinel_t, const counted_iterator& y);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to: [`return y.length;]
[:zh_CN] 等价于：[`return y.length;]
[exit:description]

[%@library operator-=[!counted_iterator]]
[%@library counted_iterator[!operator-=]]
[codeblock:declaration]
constexpr counted_iterator& operator-=(iter_difference_t<I> n)
  requires RandomAccessIterator<I>;
[codeblock:end]

[enter:description]
[para:expects]
[:en] [`-n <= length].
[:zh_CN] [`-n <= length]。

[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock:notation]
current -= n;
length += n;
return *this;
[codeblock:end]
[exit:description]

