[section#iterator.concept.input
    [:en] Concept [`input_iterator]
    [:zh_CN] 概念 [`input_iterator]
]

[para]
[:en] The [`input_iterator] concept defines requirements for a type whose
referenced values can be read (from the requirement for [`readable]
([#iterator.concept.readable])) and which can be both pre- and post-incremented.
[:zh_CN] [`input_iterator] 概念针对可以读取其所引用的值（源于 [`readable] 的规定
（[#iterator.concept.readable]）），并同时可以进行前缀和后缀增量的类型定义了一组
规定。

[enter:note]
[:en] Unlike the [*Cpp17InputIterator] requirements ([#input.iterators]), the
[`input_iterator] concept does not need equality comparison since iterators are
typically compared to sentinels.
[:zh_CN] 与 [*Cpp17InputIterator] 的规定（[#input.iterators]）不同，由于迭代器
通常是与哨位相比较，[`input_iterator] 概念并不需要相等性比较。
[exit:note]

[%@library input_iterator]
[codeblock:synopsis [!:var ITER_CONCEPT]]
template<class I>
  concept input_iterator =
    input_or_output_iterator<I> &&
    readable<I> &&
    requires { typename [*ITER_CONCEPT](I); } &&
    derived_from<[*ITER_CONCEPT](I), input_iterator_tag>;
[codeblock:end]
