[section#reverse.iterator
    [:en] Class template [`reverse_iterator]
    [:zh_CN] 类模板 [`reverse_iterator]
]

[%@library reverse_iterator]
[codeblock:synopsis [!:mark UnSpec SeeBelow] ]
namespace std {
  template<class Iterator>
  class reverse_iterator {
  public:
    using iterator_type     = Iterator;
    using iterator_concept  = [=SeeBelow];
    using iterator_category = [=SeeBelow];
    using value_type        = iter_value_t<Iterator>;
    using difference_type   = iter_difference_t<Iterator>;
    using pointer           = typename iterator_traits<Iterator>::pointer;
    using reference         = iter_reference_t<Iterator>;

    constexpr reverse_iterator();
    constexpr explicit reverse_iterator(Iterator x);
    template<class U> constexpr reverse_iterator(const reverse_iterator<U>& u);
    template<class U> constexpr reverse_iterator& operator=(const reverse_iterator<U>& u);

    constexpr Iterator base() const;
    constexpr reference operator*() const;
    constexpr pointer   operator->() const requires [=SeeBelow];

    constexpr reverse_iterator& operator++();
    constexpr reverse_iterator  operator++(int);
    constexpr reverse_iterator& operator--();
    constexpr reverse_iterator  operator--(int);

    constexpr reverse_iterator  operator+ (difference_type n) const;
    constexpr reverse_iterator& operator+=(difference_type n);
    constexpr reverse_iterator  operator- (difference_type n) const;
    constexpr reverse_iterator& operator-=(difference_type n);
    constexpr [=UnSpec] operator[](difference_type n) const;

    friend constexpr iter_rvalue_reference_t<Iterator>
      iter_move(const reverse_iterator& i) noexcept([=SeeBelow]);
    template<indirectly_swappable<Iterator> Iterator2>
      friend constexpr void
        iter_swap(const reverse_iterator& x,
                  const reverse_iterator<Iterator2>& y) noexcept([=SeeBelow]);

  protected:
    Iterator current;
  };
}
[codeblock:end]

[para]
[:en] The member [~typedef-name] [`iterator_concept] denotes
[:zh_CN] 成员 [~typedef-名] [`iterator_concept]

[list]
[item]
[:en] [`random_access_iterator_tag] if [`Iterator] models
[`random_access_iterator], and
[:zh_CN] 当 [`Iterator] 构成 [`random_access_iterator] 时，代表
[`random_access_iterator_tag]，

[item]
[:en] [`bidirectional_iterator_tag] otherwise.
[:zh_CN] 否则，代表 [`bidirectional_iterator_tag]。
[list:end]

[para]
[:en] The member [~typedef-name] [`iterator_category] denotes
[:zh_CN] 成员 [~typedef-名] [`iterator_category]

[list]
[item]
[:en] [`random_access_iterator_tag] if the type
[`iterator_traits<Iterator>::iterator_category] models
[`derived_from<random_access_iterator_tag>], and
[:zh_CN] 当类型 [`iterator_traits<Iterator>::iterator_category] 构成
[`derived_from<random_access_iterator_tag>] 时，代表
[`random_access_iterator_tag]，
[item]
[:en] [`iterator_traits<Iterator>::iterator_category] otherwise.
[:zh_CN] 否则，代表 [`iterator_traits<Iterator>::iterator_category]。
[list:end]
