[section#ostream.iterator
    [:en] Class template [`ostream_iterator]
    [:zh_CN] 类模板 [`ostream_iterator]
]

[para]
[%@library ostream_iterator]
[:en] [`ostream_iterator] writes (using [`operator<<]) successive elements onto
the output stream from which it was constructed.
[:zh_CN] [`ostream_iterator] 向用以构造它的输出流中（通过使用 [`operator<<]）
写出连续的元素。

[:en] If it was constructed with [`charT*] as a constructor argument, this
string, called a [+delimiter string[%]], is written to the stream after every
[`T] is written.
[:zh_CN] 如果它是以 [`charT*] 作为构造函数实参而构造的，这个字符串被称为其[+分隔
字符串[%]]，将在每次写出 [`T] 之后被写出。

[:en] It is not possible to get a value out of the output iterator.
[:zh_CN] 不可能从输出迭代器中获得值。

[:en] Its only use is as an output iterator in situations like
[:zh_CN] 其仅有用法是在如下列情况下被使用

[codeblock:notation]
while (first != last)
  *result++ = *first++;
[codeblock:end]

[para]
[:en] [`ostream_iterator] is defined as:
[:zh_CN] [`ostream_iterator] 被定义为：

[codeblock:synopsis]
namespace std {
  template <class T, class charT = char, class traits = char_traits<charT>>
  class ostream_iterator {
  public:
    using iterator_category = output_iterator_tag;
    using value_type        = void;
    using difference_type   = void;
    using pointer           = void;
    using reference         = void;
    using char_type         = charT;
    using traits_type       = traits;
    using ostream_type      = basic_ostream<charT,traits>;

    ostream_iterator(ostream_type& s);
    ostream_iterator(ostream_type& s, const charT* delimiter);
    ostream_iterator(const ostream_iterator& x);
    ~ostream_iterator();
    ostream_iterator& operator=(const T& value);

    ostream_iterator& operator*();
    ostream_iterator& operator++();
    ostream_iterator& operator++(int);
  private:
    basic_ostream<charT,traits>* out_stream;  // [=Expos]
    const charT* delim;                       // [=Expos]
  };
}
[codeblock:end]

[include ostream.iterator.cons.des]

[include ostream.iterator.ops]
