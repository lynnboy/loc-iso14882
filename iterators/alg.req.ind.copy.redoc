[section#alg.req.ind.copy
    [:en] Concept [`:cname indirectly_copyable]
    [:zh_CN] 概念 [`:cname indirectly_copyable]
]

[para]
[:en] The [`:c indirectly_copyable] concept specifies the relationship between
an [`:c indirectly_readable] type and an [`:c indirectly_writable] type between
which values may be copied.
[:zh_CN] [`:c indirectly_copyable] 概念指定一个 [`:c indirectly_readable] 类型和
一个 [`:c indirectly_writable] 类型之间的关系，可以在其间进行值的复制。

[codeblock:synopsis]
template<class In, class Out>
  concept [[redoc("`:c@def>")]]indirectly_copyable =
    [[redoc("`:c>")]]indirectly_readable<In> &&
    [[redoc("`:c>")]]indirectly_writable<Out, iter_reference_t<In>>;
[codeblock:end]

[para]
[:en] The [`:c indirectly_copyable_storable] concept augments
[`:c indirectly_copyable] with additional requirements enabling the transfer to
be performed through an intermediate object of the [`:c indirectly_readable]
type[=']s value type.
[:zh_CN] [`:c indirectly_copyable_storable] 概念增强了 [`:c indirectly_copyable]，
添加了新的规定以使得可以通过 [`:c indirectly_readable] 类型的值类型的一个中间
对象来实施值的传送。

[:en] It also requires the capability to make copies of values.
[:zh_CN] 它还规定了制造值的副本的能力。

[codeblock:synopsis]
template<class In, class Out>
  concept [[redoc("`:c@def>")]]indirectly_copyable_storable =
    [[redoc("`:c>")]]indirectly_copyable<In, Out> &&
    [[redoc("`:c>")]]indirectly_writable<Out, iter_value_t<In>&> &&
    [[redoc("`:c>")]]indirectly_writable<Out, const iter_value_t<In>&> &&
    [[redoc("`:c>")]]indirectly_writable<Out, iter_value_t<In>&&> &&
    [[redoc("`:c>")]]indirectly_writable<Out, const iter_value_t<In>&&> &&
    [[redoc("`:c>")]]copyable<iter_value_t<In>> &&
    [[redoc("`:c>")]]constructible_from<iter_value_t<In>, iter_reference_t<In>> &&
    [[redoc("`:c>")]]assignable_to<iter_value_t<In>&, iter_reference_t<In>>;
[codeblock:end]

[para]
[:en] Let [`i] be a dereferenceable value of type [`In].
[:zh_CN] 令 [`i] 为 [`In] 类型的一个可解引用的值。

[:en] [`In] and [`Out] model [`[`:c indirectly_copyable_storable]<In, Out>] only
if after the initialization of the object [`obj] in
[:zh_CN] 仅当以下代码

[codeblock]
iter_value_t<In> obj(*i);
[codeblock:end]

[:en@~] [`obj] is equal to the value previously denoted by [`*i].
[:zh_CN@~] 中的对象 [`obj] 经过初始化之后，[`obj] 等于由 [`*i] 之前所代表的值时，
[`In] 和 [`Out] 构成 [`[`:c indirectly_copyable_storable]<In, Out>]。

[:en] If [`iter_reference_t<In>] is an rvalue reference type, the resulting
state of the value denoted by [`*i] is valid but unspecified
([#lib.types.movedfrom]).
[:zh_CN] 当 [`iter_reference_t<In>] 为右值引用类型时，由 [`*i] 所代表的值的结果
状态是有效但未指明的（[#lib.types.movedfrom]）。
