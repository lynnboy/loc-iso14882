[section#iterator.concept.output
    [:en] Concept [`:c output_iterator]
    [:zh_CN] 概念 [`:c output_iterator]
]

[para]
[:en] The [`:c output_iterator] concept defines requirements for a type that can be
used to write values (from the requirement for [`:c writable]
([#iterator.concept.writable])) and which can be both pre- and post-incremented.
[:zh_CN] [`:c output_iterator] 概念针对可以用于写入值（源于 [`:c writable] 的
规定（[#iterator.concept.writable]））的类型定义了一组规定。

[begin:note]
[:en] Output iterators are not required to model [`:c equality_comparable].
[:zh_CN] 输出迭代器并不要求构成 [`:c equality_comparable]。
[end:note]

[codeblock:synopsis]
template<class I, class T>
  concept [[redoc("`:c@def", "i>")]]output_iterator =
    input_or_output_iterator<I> &&
    writable<I, T> &&
    requires(I i, T&& t) {
      *i++ = std::forward<T>(t);        // [:en] not required to be equality-preserving \
                                           [:zh_CN] 并不要求维持相等性
    };
[codeblock:end]

[para]
[:en] Let [`E] be an expression such that [`decltype((E))] is [`T], and let [`i]
be a dereferenceable object of type [`I].
[:zh_CN] 令 [`E] 为使得 [`decltype((E))] 为 [`T] 的表达式，并令 [`i] 为 [`I]
类型的可解引用对象。

[:en] [`I] and [`T] model [`[`:c output_iterator]<I, T>] only if [`*i++ = E;]
has effects equivalent to:
[:zh_CN] 仅当 [`*i++ = E;] 具有等价于以下代码的效果时，[`I] 和 [`T] 构成
[`[`:c output_iterator]<I, T>]：

[codeblock]
*i = E;
++i;
[codeblock:end]

[para]
[begin:note]
[:en] Algorithms on output iterators should never attempt to pass through the
same iterator twice.
[:zh_CN] 针对输出迭代器的算法不能尝试将同一个迭代器进行两次传递。

[:en] They should be single-pass algorithms.
[:zh_CN] 它们应当是单遍算法。
[end:note]
