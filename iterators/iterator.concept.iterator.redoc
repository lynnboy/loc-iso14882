[section#iterator.concept.iterator
    [:en] Concept [`input_or_output_iterator]
    [:zh_CN] 概念 [`input_or_output_iterator]
]

[para]
[:en] The [`input_or_output_iterator] concept forms the basis of the iterator
concept taxonomy; every iterator models [`input_or_output_iterator].
[:zh_CN] [`input_or_output_iterator] 概念构成了迭代器概念分类法的基础；所有
迭代器都构成 [`input_or_output_iterator]。

[:en] This concept specifies operations for dereferencing and incrementing
an iterator.
[:zh_CN] 这个概念规定了迭代器的解引用和增量操作。

[:en] Most algorithms will require additional operations to compare iterators
with sentinels ([#iterator.concept.sentinel]), to read
([#iterator.concept.input]) or write ([#iterator.concept.output]) values, or
to provide a richer set of iterator movements ([#iterator.concept.forward],
[#iterator.concept.bidir], [#iterator.concept.random.access]).
[:zh_CN] 大多数的算法都会要求额外的操作以进行迭代器和哨位的比较
（[#iterator.concept.sentinel]），进行值的读取（[#iterator.concept.input]）或
写入（[#iterator.concept.output]），或者提供一组更加丰富的迭代器移动操作
（[#iterator.concept.forward]，[#iterator.concept.bidir]，
[#iterator.concept.random.access]）。

[%@library input_or_output_iterator]
[codeblock:synopsis [!:var can-reference] ]
template<class I>
  concept input_or_output_iterator =
    requires(I i) {
      { *i } -> [*can-reference];
    } &&
    weakly_incrementable<I>;
[codeblock:end]

[para]
[begin:note]
[:en] Unlike the [*Cpp17Iterator] requirements, the [`input_or_output_iterator]
concept does not require copyability.
[:zh_CN] 与 [*Cpp17Iterator] 规定不同，[`input_or_output_iterator] 概念并不要求
可复制性。
[end:note]
