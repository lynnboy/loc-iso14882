[section#move.iter.cons
    [:en] Construction and assignment
    [:zh_CN] 构造与赋值
]

[%@lib@ctor move_iterator]
[codeblock:declaration]
constexpr move_iterator();
[codeblock:end]

[div:description]
[para:effects]
[:en] Constructs a [`move_iterator], value initializing [`current].
[:zh_CN] 构造一个 [`move_iterator]，并值初始化 [`current]。

[:en] Iterator operations applied to the resulting iterator have defined
behavior if and only if the corresponding operations are defined on a
value-initialized iterator of type [`Iterator].
[:zh_CN] 当且仅当对应的操作在值初始化的 [`Iterator] 类型的迭代器上是有定义的，
实施在其结果迭代器上的迭代器操作具有定义的行为。
[div:end]

[%@lib@ctor move_iterator]
[codeblock:declaration]
constexpr explicit move_iterator(Iterator i);
[codeblock:end]

[div:description]
[para:effects]
[:en] Constructs a [`move_iterator], initializing [`current] with [`std::move(i)].
[:zh_CN] 构造一个 [`move_iterator]，并以 [`std::move(i)] 初始化 [`current]。
[div:end]

[%@lib@ctor move_iterator]
[codeblock:declaration]
template<class U> constexpr move_iterator(const move_iterator<U>& u);
[codeblock:end]

[div:description]
[para:mandates]
[:en] [`U] is convertible to [`Iterator].
[:zh_CN] [`U] 可以转换为 [`Iterator]。

[para:effects]
[:en] Constructs a [`move_iterator], initializing [`current] with [`u.base()].
[:zh_CN] 构造一个 [`move_iterator]，并以 [`u.base()] 初始化 [`current]。
[div:end]

[%@lib@member operator=[!move_iterator]]
[codeblock:declaration]
template<class U> constexpr move_iterator& operator=(const move_iterator<U>& u);
[codeblock:end]

[div:description]
[para:mandates]
[:en] [`U] is convertible to [`Iterator].
[:zh_CN] [`U] 可以转换为 [`Iterator]。

[para:effects]
[:en] Assigns [`u.base()] to [`current].
[:zh_CN] 将 [`u.base()] 赋值给 [`current]。
[div:end]
