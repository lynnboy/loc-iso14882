[section#range.iter.op.next
    [:] [`ranges::next]
]

[%@library next]
[codeblock:declaration]
template<input_or_output_iterator I>
  constexpr I ranges::next(I x);
[codeblock:end]

[begin:description]
[para:expects]
[:en] Equivalent to: [`++x; return x;]
[:zh_CN] 等价于：[`++x; return x;]
[end:description]

[%@library next]
[codeblock:declaration]
template<input_or_output_iterator I>
  constexpr I ranges::next(I x, iter_difference_t<I> n);
[codeblock:end]

[begin:description]
[:en] Equivalent to: [`ranges::advance(x, n); return x;]
[:zh_CN] 等价于：[`ranges::advance(x, n); return x;]
[end:description]

[%@library next]
[codeblock:declaration]
template<input_or_output_iterator I, sentinel_for<I> S>
  constexpr I ranges::next(I x, S bound);
[codeblock:end]

[begin:description]
[:en] Equivalent to: [`ranges::advance(x, bound); return x;]
[:zh_CN] 等价于：[`ranges::advance(x, bound); return x;]
[end:description]

[%@library next]
[codeblock:declaration]
template<input_or_output_iterator I, sentinel_for<I> S>
  constexpr I ranges::next(I x, iter_difference_t<I> n, S bound);
[codeblock:end]

[begin:description]
[:en] Equivalent to: [`ranges::advance(x, n, bound); return x;]
[:zh_CN] 等价于：[`ranges::advance(x, n, bound); return x;]
[end:description]
