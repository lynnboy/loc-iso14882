[section#back.insert.iter.ops
    [:en] Operations
    [:zh_CN] 操作
]

[%@library back_insert_iterator[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
constexpr explicit back_insert_iterator(Container& x);
[codeblock:end]

[begin:description]
[para:effects]
[:en] Initializes [`container] with [`addressof(x)].
[:zh_CN] 以 [`addressof(x)] 初始化 [`container]。
[end:description]

[%@library operator=[!back_insert_iterator]]
[%@library back_insert_iterator[!operator=]]
[codeblock:declaration]
constexpr back_insert_iterator& operator=(const typename Container::value_type& value);
[codeblock:end]

[begin:description]
[para:effects]
[:en] As if by: [`container->push_back(value);]
[:zh_CN] 如同执行：[`container->push_back(value);]

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[end:description]

[%@library operator=[!back_insert_iterator]]
[%@library back_insert_iterator[!operator=]]
[codeblock:declaration]
constexpr back_insert_iterator& operator=(typename Container::value_type&& value);
[codeblock:end]

[begin:description]
[para:effects]
[:en] As if by: [`container->push_back(std::move(value));]
[:zh_CN] 如同执行：[`container->push_back(std::move(value));]

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[end:description]

[%@library operator*[!back_insert_iterator]]
[%@library back_insert_iterator[!operator*]]
[codeblock:declaration]
constexpr back_insert_iterator& operator*();
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[end:description]

[%@library operator++[!back_insert_iterator]]
[%@library back_insert_iterator[!operator++]]
[codeblock:declaration]
constexpr back_insert_iterator& operator++();
constexpr back_insert_iterator  operator++(int);
[codeblock:end]

[begin:description]
[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[end:description]
