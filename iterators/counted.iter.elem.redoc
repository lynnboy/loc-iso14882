[section#counted.iter.elem
    [:en] Element access
    [:zh_CN] 成员访问
]

[%@lib@member operator*[!counted_iterator]]
[codeblock:declaration]
constexpr decltype(auto) operator*();
constexpr decltype(auto) operator*() const
  requires [[redoc("*:c>")]]dereferenceable<const I>;
[codeblock:end]

[div:description]
[para:hardexpects]
[:en] [`length > 0] is [`true].
[:zh_CN] [`length > 0] 为 [`true]。

[para:effects]
[:en] Equivalent to: [`return *current;]
[:zh_CN] 等价于：[`return *current;]
[div:end]

[%@lib@member operator->[!counted_iterator]]
[codeblock:declaration]
constexpr auto operator->() const noexcept
  requires [[redoc("`:c>")]]contiguous_iterator<const I>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return to_address(current);]
[:zh_CN] 等价于：[`return to_address(current);]
[div:end]

[%@lib@member operator`[`][!counted_iterator]]
[codeblock:declaration]
constexpr decltype(auto) operator[](iter_difference_t<I> n) const
  requires [[redoc("`:c>")]]random_access_iterator<I>;
[codeblock:end]

[div:description]
[para:hardexpects]
[:en] [`n < length] is [`true].
[:zh_CN] [`n < length] 为 [`true]。

[para:effects]
[:en] Equivalent to: [`return current`[n`];]
[:zh_CN] 等价于：[`return current`[n`];]
[div:end]
