[section#move.iter.op.comp
    [:en] Comparisons
    [:zh_CN] 比较
]

[%@library operator==[!move_iterator]]
[%@library move_iterator[!operator==]]
[codeblock:declaration]
template<class Iterator1, class Iterator2>
  constexpr bool operator==(const move_iterator<Iterator1>& x,
                            const move_iterator<Iterator2>& y);
template<Sentinel<Iterator> S>
  friend constexpr bool operator==(const move_iterator& x,
                                   const move_sentinel<S>& y);
template<Sentinel<Iterator> S>
  friend constexpr bool operator==(const move_sentinel<S>& x,
                                   const move_iterator& y);
[codeblock:end]

[enter:description]
[para:constraints]
[:en] The expression [`x.base() == y.base()] shall be valid and convertible to
[`bool].
[:zh_CN] 表达式 [`x.base() == y.base()] 应当有效且可以转换为 [`bool]。

[para:returns]
[:en] [`x.base() == y.base()].
[:zh_CN] [`x.base() == y.base()]。
[exit:description]

[%@library operator!=[!move_iterator]]
[%@library move_iterator[!operator!=]]
[codeblock:declaration]
template<class Iterator1, class Iterator2>
  constexpr bool operator!=(const move_iterator<Iterator1>& x,
                            const move_iterator<Iterator2>& y);
template<Sentinel<Iterator> S>
  friend constexpr bool operator!=(const move_iterator& x,
                                   const move_sentinel<S>& y);
template<Sentinel<Iterator> S>
  friend constexpr bool operator!=(const move_sentinel<S>& x,
                                   const move_iterator& y);
[codeblock:end]

[enter:description]
[para:constraints]
[:en] The expression [`x.base() == y.base()] shall be valid and convertible to
[`bool].
[:zh_CN] 表达式 [`x.base() == y.base()] 应当有效且可以转换为 [`bool]。

[para:returns]
[:en] [`!(x == y)].
[:zh_CN] [`!(x == y)]。
[exit:description]

[%@library operator<[!move_iterator]]
[%@library move_iterator[!operator<]]
[codeblock:declaration]
template<class Iterator1, class Iterator2>
constexpr bool operator<(const move_iterator<Iterator1>& x, const move_iterator<Iterator2>& y);
[codeblock:end]

[enter:description]
[para:constraints]
[:en] The expression [`x.base() < y.base()] shall be valid and convertible to
[`bool].
[:zh_CN] 表达式 [`x.base() < y.base()] 应当有效且可以转换为 [`bool]。

[para:returns]
[:en] [`x.base() < y.base()].
[:zh_CN] [`x.base() < y.base()]。
[exit:description]

[%@library operator>[!move_iterator]]
[%@library move_iterator[!operator>]]
[codeblock:declaration]
template<class Iterator1, class Iterator2>
constexpr bool operator>(const move_iterator<Iterator1>& x, const move_iterator<Iterator2>& y);
[codeblock:end]

[enter:description]
[para:constraints]
[:en] The expression [`y.base() < x.base()] shall be valid and convertible to
[`bool].
[:zh_CN] 表达式 [`y.base() < x.base()] 应当有效且可以转换为 [`bool]。

[para:returns]
[:en] [`y < x].
[:zh_CN] [`y < x]。
[exit:description]

[%@library operator<=[!move_iterator]]
[%@library move_iterator[!operator<=]]
[codeblock:declaration]
template<class Iterator1, class Iterator2>
constexpr bool operator<=(const move_iterator<Iterator1>& x, const move_iterator<Iterator2>& y);
[codeblock:end]

[enter:description]
[para:constraints]
[:en] The expression [`y.base() < x.base()] shall be valid and convertible to
[`bool].
[:zh_CN] 表达式 [`y.base() < x.base()] 应当有效且可以转换为 [`bool]。

[para:returns]
[:en] [`!(y < x)].
[:zh_CN] [`!(y < x)]。
[exit:description]

[%@library operator>=[!move_iterator]]
[%@library move_iterator[!operator>=]]
[codeblock:declaration]
template<class Iterator1, class Iterator2>
constexpr bool operator>=(const move_iterator<Iterator1>& x, const move_iterator<Iterator2>& y);
[codeblock:end]

[enter:description]
[para:constraints]
[:en] The expression [`x.base() < y.base()] shall be valid and convertible to
[`bool].
[:zh_CN] 表达式 [`x.base() < y.base()] 应当有效且可以转换为 [`bool]。

[para:returns]
[:en] [`!(x < y)].
[:zh_CN] [`!(x < y)]。
[exit:description]
