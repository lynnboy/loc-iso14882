[section#indirectcallable.indirectinvocable
    [:en] General
    [:zh_CN] 综述
]

[para]
[:en] The indirect callable concepts are used to constrain those algorithms
that accept callable objects ([#func.def]) as arguments.
[:zh_CN] 可间接调用的概念用于对接受可调用对象（[#func.def]）作为其实参的算法进行
约束。

[codeblock:synopsis]
namespace std {
  template<class F, class I>
    concept [[redoc("`:c@def>")]]indirectly_unary_invocable =
      [[redoc("`:c>")]]indirectly_readable<I> &&
      [[redoc("`:c>")]]copy_constructible<F> &&
      [[redoc("`:c>")]]invocable<F&, iter_value_t<I>&> &&
      [[redoc("`:c>")]]invocable<F&, iter_reference_t<I>> &&
      [[redoc("`:c>")]]invocable<F&, iter_common_reference_t<I>> &&
      [[redoc("`:c>")]]common_reference_with<
        invoke_result_t<F&, iter_value_t<I>&>,
        invoke_result_t<F&, iter_reference_t<I>>>;

  template<class F, class I>
    concept [[redoc("`:c@def>")]]indirectly_regular_unary_invocable =
      [[redoc("`:c>")]]indirectly_readable<I> &&
      [[redoc("`:c>")]]copy_constructible<F> &&
      [[redoc("`:c>")]]regular_invocable<F&, iter_value_t<I>&> &&
      [[redoc("`:c>")]]regular_invocable<F&, iter_reference_t<I>> &&
      [[redoc("`:c>")]]regular_invocable<F&, iter_common_reference_t<I>> &&
      [[redoc("`:c>")]]common_reference_with<
        invoke_result_t<F&, iter_value_t<I>&>,
        invoke_result_t<F&, iter_reference_t<I>>>;

  template<class F, class I>
    concept [[redoc("`:c@def>")]]indirect_unary_predicate =
      [[redoc("`:c>")]]indirectly_readable<I> &&
      [[redoc("`:c>")]]copy_constructible<F> &&
      [[redoc("`:c>")]]predicate<F&, iter_value_t<I>&> &&
      [[redoc("`:c>")]]predicate<F&, iter_reference_t<I>> &&
      [[redoc("`:c>")]]predicate<F&, iter_common_reference_t<I>>;

  template<class F, class I1, class I2>
    concept [[redoc("`:c@def>")]]indirect_binary_predicate =
      [[redoc("`:c>")]]indirectly_readable<I1> && [[redoc("`:c>")]]indirectly_readable<I2> &&
      [[redoc("`:c>")]]copy_constructible<F> &&
      [[redoc("`:c>")]]predicate<F&, iter_value_t<I1>&, iter_value_t<I2>&> &&
      [[redoc("`:c>")]]predicate<F&, iter_value_t<I1>&, iter_reference_t<I2>> &&
      [[redoc("`:c>")]]predicate<F&, iter_reference_t<I1>, iter_value_t<I2>&> &&
      [[redoc("`:c>")]]predicate<F&, iter_reference_t<I1>, iter_reference_t<I2>> &&
      [[redoc("`:c>")]]predicate<F&, iter_common_reference_t<I1>, iter_common_reference_t<I2>>;

  template<class F, class I1, class I2 = I1>
    concept [[redoc("`:c@def>")]]indirect_equivalence_relation =
      [[redoc("`:c>")]]indirectly_readable<I1> && [[redoc("`:c>")]]indirectly_readable<I2> &&
      [[redoc("`:c>")]]copy_constructible<F> &&
      [[redoc("`:c>")]]equivalence_relation<F&, iter_value_t<I1>&, iter_value_t<I2>&> &&
      [[redoc("`:c>")]]equivalence_relation<F&, iter_value_t<I1>&, iter_reference_t<I2>> &&
      [[redoc("`:c>")]]equivalence_relation<F&, iter_reference_t<I1>, iter_value_t<I2>&> &&
      [[redoc("`:c>")]]equivalence_relation<F&, iter_reference_t<I1>, iter_reference_t<I2>> &&
      [[redoc("`:c>")]]equivalence_relation<F&, iter_common_reference_t<I1>, iter_common_reference_t<I2>>;

  template<class F, class I1, class I2 = I1>
    concept [[redoc("`:c@def>")]]indirect_strict_weak_order =
      [[redoc("`:c>")]]indirectly_readable<I1> && [[redoc("`:c>")]]indirectly_readable<I2> &&
      [[redoc("`:c>")]]copy_constructible<F> &&
      [[redoc("`:c>")]]strict_weak_order<F&, iter_value_t<I1>&, iter_value_t<I2>&> &&
      [[redoc("`:c>")]]strict_weak_order<F&, iter_value_t<I1>&, iter_reference_t<I2>> &&
      [[redoc("`:c>")]]strict_weak_order<F&, iter_reference_t<I1>, iter_value_t<I2>&> &&
      [[redoc("`:c>")]]strict_weak_order<F&, iter_reference_t<I1>, iter_reference_t<I2>> &&
      [[redoc("`:c>")]]strict_weak_order<F&, iter_common_reference_t<I1>, iter_common_reference_t<I2>>;
}
[codeblock:end]
