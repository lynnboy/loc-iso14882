[section#indirectcallable.indirectinvocable
    [:en] General
    [:zh_CN] 综述
]

[para]
[:en] The indirect callable concepts are used to constrain those algorithms
that accept callable objects ([#func.def]) as arguments.
[:zh_CN] 可间接调用的概念用于对接受可调用对象（[#func.def]）作为其实参的算法进行
约束。

[%@library indirectly_unary_invocable]
[%@library indirectly_regular_unary_invocable]
[%@library indirect_unary_predicate]
[%@library indirect_relation]
[%@library indirect_strict_weak_order]
[codeblock:synopsis]
namespace std {
  template<class F, class I>
    concept indirectly_unary_invocable =
      readable<I> &&
      copy_constructible<F> &&
      invocable<F&, iter_value_t<I>&> &&
      invocable<F&, iter_reference_t<I>> &&
      invocable<F&, iter_common_reference_t<I>> &&
      common_reference_with<
        invoke_result_t<F&, iter_value_t<I>&>,
        invoke_result_t<F&, iter_reference_t<I>>>;

  template<class F, class I>
    concept indirectly_regular_unary_invocable =
      readable<I> &&
      copy_constructible<F> &&
      regular_invocable<F&, iter_value_t<I>&> &&
      regular_invocable<F&, iter_reference_t<I>> &&
      regular_invocable<F&, iter_common_reference_t<I>> &&
      common_reference_with<
        invoke_result_t<F&, iter_value_t<I>&>,
        invoke_result_t<F&, iter_reference_t<I>>>;

  template<class F, class I>
    concept indirect_unary_predicate =
      readable<I> &&
      copy_constructible<F> &&
      predicate<F&, iter_value_t<I>&> &&
      predicate<F&, iter_reference_t<I>> &&
      predicate<F&, iter_common_reference_t<I>>;

  template<class F, class I1, class I2 = I1>
    concept indirect_relation =
      readable<I1> && readable<I2> &&
      copy_constructible<F> &&
      relation<F&, iter_value_t<I1>&, iter_value_t<I2>&> &&
      relation<F&, iter_value_t<I1>&, iter_reference_t<I2>> &&
      relation<F&, iter_reference_t<I1>, iter_value_t<I2>&> &&
      relation<F&, iter_reference_t<I1>, iter_reference_t<I2>> &&
      relation<F&, iter_common_reference_t<I1>, iter_common_reference_t<I2>>;

  template<class F, class I1, class I2 = I1>
    concept indirect_strict_weak_order =
      readable<I1> && readable<I2> &&
      copy_constructible<F> &&
      strict_weak_order<F&, iter_value_t<I1>&, iter_value_t<I2>&> &&
      strict_weak_order<F&, iter_value_t<I1>&, iter_reference_t<I2>> &&
      strict_weak_order<F&, iter_reference_t<I1>, iter_value_t<I2>&> &&
      strict_weak_order<F&, iter_reference_t<I1>, iter_reference_t<I2>> &&
      strict_weak_order<F&, iter_common_reference_t<I1>, iter_common_reference_t<I2>>;
}
[codeblock:end]
