[section#counted.iter.const
    [:en] Constructors and conversions
    [:zh_CN] 构造函数和转换
]

[%@library counted_iterator[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
constexpr counted_iterator(I i, iter_difference_t<I> n);
[codeblock:end]

[enter:description]
[para:expects]
[:en] [`n >= 0].
[:zh_CN] [`n >= 0]。

[para:effects]
[:en] Initializes [`current] with [`i] and [`length] with [`n].
[:zh_CN] 以 [`i] 初始化 [`current] 并以 [`n] 初始化 [`length]。
[exit:description]

[%@library counted_iterator[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
template<class I2>
  requires convertible_to<const I2&, I>
    constexpr counted_iterator(const counted_iterator<I2>& x);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Initializes [`current] with [`x.current] and [`length] with [`x.length].
[:zh_CN] 以 [`x.current] 初始化 [`current] 并以 [`x.length] 初始化 [`length]。
[exit:description]

[%@library operator=[!counted_iterator]]
[%@library counted_iterator[!operator=]]
[codeblock:declaration]
template<class I2>
  requires assignable_from<I&, const I2&>
    constexpr counted_iterator& operator=(const counted_iterator<I2>& x);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Assigns [`x.current] to [`current] and [`x.length] to [`length].
[:zh_CN] 将 [`x.current] 赋值给 [`current] 并将 [`x.length] 赋值给 [`length]。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[exit:description]
