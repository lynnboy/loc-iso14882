[section#iterator.requirements.general
    [:en] In general
    [:zh_CN] 综述
]

[para]
[:en]
[%requirements[!iterator]]
Iterators are a generalization of pointers that allow a [=Cpp] program to work
with different data structures (for example, containers and ranges) in a uniform
manner.
[:zh_CN]
[%规定[!迭代器]]
迭代器是对指针的泛化，允许 [=Cpp] 以统一的方式在不同的数据结构（例如容器和范围）
上工作。

[:en] To be able to construct template algorithms that work correctly and
efficiently on different types of data structures, the library formalizes not
just the interfaces but also the semantics and complexity assumptions of
iterators.
[:zh_CN] 为了能够构造出可以在不同类型的数据结构上正确并高效工作的模板算法，程序
库不仅对迭代器的接口，同时也对其语义和复杂度假设进行了形式化。

[:en] An input iterator [`i] supports the expression [`*i], resulting in a
value of some object type [`T], called the [+value type] of the iterator.
[:zh_CN] 输入迭代器 [`i] 支持表达式 [`*i]，其结果为某个对象类型 [`T] 的值，该
类型被称之为这个迭代器的[+值类型]。

[:en] An output iterator [`i] has a non-empty set of types that are
[`:c indirectly_writable] to the iterator; for each such type [`T], the
expression [`*i = o] is valid where [`o] is a value of type [`T].
[:zh_CN] 输出迭代器 [`i] 具有一组可向该迭代器 [`:c indirectly_writable] 的非空的
类型集合；对于每个这种类型 [`T]，表达式 [`*i = 0] 均有效，其中 [`o] 为 [`T] 类型
的值。

[:en] For every iterator type [`X], there is a corresponding signed integer-like
type ([#iterator.concept.winc]) called the [+difference type] of the iterator.
[:zh_CN] 对于每个迭代器类型 [`X]，都有一个对应的有符号正数式的类型
（[#iterator.concept.winc]），被称为该迭代器的[+差类型]。

[para]
[:en] Since iterators are an abstraction of pointers, their semantics are
a generalization of most of the semantics of pointers in [=Cpp].
[:zh_CN] 由于迭代器是对指针的抽象，所以它们的语义是对 [=Cpp] 中的指针的大多数
语义的一种泛化。

[:en] This ensures that every function template that takes iterators works as
well with regular pointers.
[:zh_CN] 这保证了每个接受迭代器的函数模板都能与普通指针正常工作。

[:en] This document defines six categories of iterators, according to the
operations defined on them: [+:% input iterators], [+:% output iterators],
[+:% forward iterators], [+:% bidirectional iterators],
[+:% random access iterators], and [+:% contiguous iterators] as shown in
[#:tab#iterators.relations].
[:zh_CN] 本文档根据在其上所定义的操作定义了五个迭代器类别：[+:% 输入迭代器]，
[+:% 输出迭代器]，[+:% 前向迭代器]，[+:% 双向迭代器]，[+:% 随机访问迭代器]，以及
[+:% 连续迭代器]，如 [#:tab#iterators.relations] 所示。

[table:grid@border=none#iterators.relations
    [:en] Relations among iterator categories
    [:zh_CN] 迭代器类别之间的关系
]

[|@rowspan=2]
    [:en] [span:bf Contiguous]
    [:zh_CN] [span:bf 连续]
[|@rowspan=2]
    [:en] [$\rightarrow] [span:bf Random Access]
    [:zh_CN] [$\rightarrow] [span:bf 随机访问]
[|@rowspan=2]
    [:en] [$\rightarrow] [span:bf Bidirectional]
    [:zh_CN] [$\rightarrow] [span:bf 双向]
[|@rowspan=2]
    [:en] [$\rightarrow] [span:bf Forward]
    [:zh_CN] [$\rightarrow] [span:bf 前向]
[|] [:en] [$\rightarrow] [span:bf Input]
    [:zh_CN] [$\rightarrow] [span:bf 输入]
[-]
[|] [:en] [$\rightarrow] [span:bf Output]
    [:zh_CN] [$\rightarrow] [span:bf 输出]
[-]

[table:end]

[para]
[:en] The six categories of iterators correspond to the iterator concepts
[:zh_CN] 这六个迭代器类别分别对应于迭代器概念
[list]
[item]
[:en@~] [`:c input_iterator] ([#iterator.concept.input]),
[:zh_CN@~] [`:c input_iterator]（[#iterator.concept.input]），
[item]
[:en@~] [`:c output_iterator] ([#iterator.concept.output]),
[:zh_CN@~] [`:c output_iterator]（[#iterator.concept.output]），
[item]
[:en@~] [`:c forward_iterator] ([#iterator.concept.forward]),
[:zh_CN@~] [`:c forward_iterator]（[#iterator.concept.forward]），
[item]
[:en@~] [`:c bidirectional_iterator] ([#iterator.concept.bidir]),
[:zh_CN@~] [`:c bidirectional_iterator]（[#iterator.concept.bidir]），
[item]
[:en@~] [`:c random_access_iterator] ([#iterator.concept.random.access]), and
[:zh_CN@~] [`:c random_access_iterator]（[#iterator.concept.random.access]），以及
[item]
[:en@~] [`:c contiguous_iterator] ([#iterator.concept.contiguous]),
[:zh_CN@~] [`:c contiguous_iterator]（[#iterator.concept.contiguous]）
[list:end]
[:en@~] respectively.
[:zh_CN@~] 。

[:en] The generic term [+iterator] refers to any type that models the
[`:c input_or_output_iterator] concept ([#iterator.concept.iterator]).
[:zh_CN] 泛化的术语[+迭代器]代表任何构成 [`:c input_or_output_iterator] 概念
（[#iterator.concept.iterator]）的迭代器。

[para]
[:en] Forward iterators meet all the requirements of input iterators and can be
used whenever an input iterator is specified; Bidirectional iterators also meet
all the requirements of forward iterators and can be used whenever a forward
iterator is specified; Random access iterators also meet all the requirements of
bidirectional iterators and can be used whenever a bidirectional iterator is
specified; Contiguous iterators also meet all the requirements of random access
iterators and can be used whenever a random access iterator is specified.
[:zh_CN] 前向迭代器满足输入迭代器的所有规定，且可以用在指定输入迭代器的地方；
双向迭代器也满足前向迭代器的所有规定，且可以用在指定前向迭代器的地方；随机访问
迭代器也满足双向迭代器的所有规定，且可以用在指定双向迭代器的地方；连续迭代器也
满足随机访问迭代器的所有规定，且可以用在指定随机访问迭代器的地方。

[para]
[:en] Iterators that further meet the requirements of output iterators are
called [+mutable iterators[%mutable iterator]].
[:zh_CN] 同时满足输出迭代器的规定的迭代器被称为[+可改动迭代器]。

[:en] Nonmutable iterators are referred to as [+constant iterators[%constant
iterator]].
[:zh_CN] 不可改动的迭代器被称为[+常量迭代器]。

[para]
[:en] In addition to the requirements in this subclause, the nested
[~typedef-name]s specified in [#iterator.traits] shall be provided for the
iterator type.
[:zh_CN] 除了本子条款中的规定之外，还应当为迭代器类型提供在 [#iterator.traits]
中所指定的各嵌套 [~typedef-名]。

[begin:note]
[:en] Either the iterator type must provide the [~typedef-name]s directly
(in which case [`iterator_traits] pick them up automatically), or
an [`iterator_traits] specialization must provide them.
[:zh_CN] 要么迭代器类型必须直接提供这些 [~typedef-名]（这种情况下
[`iterator_traits] 会自动取用它们），要么必须在某个 [`iterator_traits] 的特化式
中提供它们。
[end:note]

[para]
[:en]
[%past-the-end iterator[%iterator[!past-the-end]]]
[%dereferenceable iterator[%iterator[!dereferenceable]]]
[:zh_CN]
[%越过末尾迭代器[%迭代器[!越过末尾～]]]
[%可解引用迭代器[%迭代器[!可解引用～]]]
[:en] Just as a regular pointer to an array guarantees that there is a pointer
value pointing past the last element of the array, so for any iterator type
there is an iterator value that points past the last element of a corresponding
sequence.
[:zh_CN] 与普通指向数组的指针保证存在指向越过数组最后一个元素的指针值一样，对于
任何迭代器类型，也存在指向越过其对应序列最后一个元素的迭代器值。

[:en] Such a value is called a [+past-the-end value[%iterator[!past-the-end]]].
[:zh_CN] 这些值被称为[+越过末尾值[%迭代器[!越过末尾～]]]。

[:en] Values of an iterator [`i] for which the expression [`*i] is defined are
called [+dereferenceable[%iterator[!dereferenceable]]].
[:zh_CN] 表达式 [`*i] 有定义的迭代器 [`i] 的值被称为是[+可解引用[%迭代器
[!可解引用～]]]的。

[:en] The library never assumes that past-the-end values are dereferenceable.
[:zh_CN] 程序库假设越过末尾值总不可解引用。

[:en] Iterators can also have singular values that are not associated with any
sequence.
[:zh_CN] 迭代器还可以具有不与任何序列关联的奇异值。

[:en] Results of most expressions are undefined for singular values; the only
exceptions are destroying an iterator that holds a singular value, the
assignment of a non-singular value to an iterator that holds a singular value,
and, for iterators that meet the [^:oc DefaultConstructible] requirements,
using a value-initialized iterator as the source of a copy or move operation.
[:zh_CN] 奇异值的大多数表达式的结果都是未定义的；仅有的例外是销毁一个持有奇异值
的迭代器，向持有奇异值的迭代器赋值为一个非奇异值，以及对于满足
[^:oc DefaultConstructible] 规定的迭代器，使用经过值初始化的迭代器作为复制或
移动操作的源。

[begin:note]
[:en] This guarantee is not offered for default initialization, although the
distinction only matters for types with trivial default constructors such as
pointers or aggregates holding pointers.
[:zh_CN] 这项保证并未对默认初始化给出，虽然其区别仅影响具有平凡默认构造函数的
类型，如指针和持有指针的聚合。
[end:note]

[:en] In these cases the singular value is overwritten the same way as any other
value.
[:zh_CN] 这些情况下奇异值都以同其他值相同的方式被覆盖。

[:en] Dereferenceable values are always non-singular.
[:zh_CN] 可解引用的值总是非奇异的。

[para]
[:en] Most of the library[=']s algorithmic templates that operate on data
structures have interfaces that use ranges.
[:zh_CN] 程序库中的大多数对数据结构进行操作的算法模板，都具有使用范围的接口。

[:en] A [+range] is an iterator and a [+sentinel] that designate the beginning
and end of the computation, or an iterator and a count that designate the
beginning and the number of elements to which the computation is to be applied.
[#:fn]
[:zh_CN] 一个[+范围]是一个迭代器和一个[+哨位]，代表计算的开始和结尾，或者一个
迭代器和一个计数，代表所要实施计算的元素的开始和数量。[#:fn]

[note:foot]
[:en] The sentinel denoting the end of a range can have the same type as the
iterator denoting the beginning of the range, or a different type.
[:zh_CN] 代表范围结尾的哨位可以与代表范围开始的迭代器具有相同类型，也可以为不同
类型。
[note:end]

[para]
[:en] An iterator and a sentinel denoting a range are comparable.
[:zh_CN] 代表一个范围的迭代器和哨位可以进行比较。

[:en] A range [=range(i,s)] is empty if [`i == s]; otherwise, [=range(i,s)]
refers to the elements in the data structure starting with the element pointed
to by [`i] and up to but not including the element, if any, pointed to by the
first iterator [`j] such that [`j == s].
[:zh_CN] 当 [`i == s] 时范围 [=range(i,s)] 为空；否则，[=range(i,s)] 指代
数据结构中的元素，开始于 [`i] 所指向的元素，直到但并不包括由迭代器 [`j] 所指向的
元素，其中 [`j == s]（如果有）。

[para]
[:en] A sentinel [`s] is called [+reachable from] an iterator [`i] if and only
if there is a finite sequence of applications of the expression [`++i] that
makes [`i == s].
[:zh_CN] 当且仅当存在对表达式 [`++i] 的有限次运用序列使得 [`i == s] 时，称哨位
[`s] 从迭代器 [`i] [+可达]。

[:en] If [`s] is reachable from [`i], [=range(i,s] denotes a [+:adj valid range
[%valid[!range]]].
[:zh_CN] 当 [`s] 从 [`i] 可达时，[=range(i,s)] 代表一个[+:adj 有效范围
[%有效[!范围]]]。

[para]
[:en] A [+:adj counted range [%range[!counted]]] [=countedrange(i,n)] is empty
if [`n == 0]; otherwise, [=countedrange(i,n)] refers to the [`n] elements in the
data structure starting with the element pointed to by [`i] and up to but not
including the element, if any, pointed to by the result of [`n] applications of
[`++i].
[:zh_CN] [+:adj 计数范围[%范围[!计数～]]] [=countedrange(i,n)] 当 [`n == 0] 时
为空；否则，[=countedrange(i,n)] 指代数据结构中的 [`n] 个元素，开始于 [`i] 所
指向的元素，直到但并不包括 [`n] 次实施 [`++i] 的结果所指向的元素（如果有）。

[:en] A counted range [=countedrange(i,n)] is [+valid[%range[!counted[!valid]]]]
if and only if [`n == 0]; or [`n] is positive, [`i] is dereferenceable, and
[=countedrange(++i,--n)] is valid.
[:zh_CN] 当且仅当 [`n == 0]，或者 [`n] 为正数，[`i] 可解引用，并且
[=countedrange(++i,--n)] [+有效[%范围[!计数～[!有效]]]]时，计数范围
[=countedrange(i,n)] 有效。

[para]
[:en] The result of the application of library functions to invalid ranges is
undefined.
[:zh_CN] 对无效范围运用程序库函数的结果是未定义的。

[para]
[:en] All the categories of iterators require only those functions that are
realizable for a given category in constant time (amortized).
[:zh_CN] 所有的迭代器类别仅要求对于给定类别可以实现为（摊销）常量时间的函数。

[:en] Therefore, requirement tables and concept definitions for the iterators
do not specify complexity.
[:zh_CN] 因此，迭代器的规定表格和概念定义中都没有指定复杂度。

[para]
[:en] Destruction of a non-forward iterator may invalidate pointers and
references previously obtained from that iterator.
[:zh_CN] 非前向迭代器的销毁，将会使此前从该迭代器中获得的指针和引用失效。

[para]
[:en] An [+:adj invalid iterator[%invalid[!iterator]]] is an iterator that may
be singular.[#:fn]
[:zh_CN] [+:adj 无效迭代器[%无效[!迭代器]]]是可能为奇异的迭代器。[#:fn]

[note:foot]
[:en] This definition applies to pointers, since pointers are iterators.
[:zh_CN] 这条定义也适用于指针，因为指针也是迭代器。

[:en] The effect of dereferencing an iterator that has been invalidated is
undefined.
[:zh_CN] 对已经失效的迭代器进行解引用的效果是未定义的。
[note:end]

[para]
[:en]
[%iterator[!constexpr]]
Iterators are called [+constexpr iterators] if all operations provided to meet
iterator category requirements are constexpr functions.
[:zh_CN]
[%迭代器[!constexpr]]
如果迭代器为满足迭代器类别的规定所提供的所有操作都是 constexpr 函数，则称其为
[+constexpr 迭代器]。

[begin:note]
[:en] For example, the types [=lq]pointer to [`int][=rq] and
[`reverse_iterator<int*>] are constexpr iterators.
[:zh_CN] 例如，类型“[`int] 的指针”和 [`reverse_iterator<int*>] 都是 constexpr
迭代器。
[end:note]
