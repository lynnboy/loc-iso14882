[section#iterator.cust.move
    [:] [`ranges::iter_move]
]

[%@lib iter_move]
[para]
[:en] The name [`ranges::iter_move] denotes a customization point object
([#customization.point.object]).
[:zh_CN] 名字 [`ranges::iter_move] 代表一个定制化点对象
（[#customization.point.object]）。

[:en] The expression [`ranges::iter_move(E)] for a subexpression [`E] is
expression-equivalent to:
[:zh_CN] 表达式 [`ranges::iter_move(E)] 对于某个子表达式 [`E] 等价于：

[list]
[item]
[:en] [`iter_move(E)], if [`E] has class or enumeration type and [`iter_move(E)]
is a well-formed expression when treated as an unevaluated operand, with
overload resolution performed in a context that does not include a declaration
of [`ranges::iter_move] but does include the declaration
[:zh_CN] 若 [`E] 具有类或枚举类型，且当 [`iter_move(E)] 被当做免求值操作数时是
良构表达式，则为 [`iter_move(E)]，其重载决议在不包含 [`ranges::iter_move] 的
声明式但包含以下声明式的语境中进行：
[codeblock]
void iter_move();
[codeblock:end]

[item]
[:en] Otherwise, if the expression [`*E] is well-formed:
[:zh_CN] 否则，当表达式 [`*E] 良构时：

[list]
[item]
[:en] if [`*E] is an lvalue, [`std::move(*E)];
[:zh_CN] 当 [`*E] 是左值时为 [`std::move(*E)]；

[item]
[:en] otherwise, [`*E].
[:zh_CN] 否则为 [`*E]。
[list:end]

[item]
[:en] Otherwise, [`ranges::iter_move(E)] is ill-formed.
[:zh_CN] 否则，[`ranges::iter_move(E)] 非良构。

[begin:note]
[:en] This case can result in substitution failure when [`ranges::iter_move(E)]
appears in the immediate context of a template instantiation.
[:zh_CN] 这种情况可能在当 [`ranges::iter_move(E)] 出现于模板实例化的直接语境中时
导致发生代换失败。
[end:note]
[list:end]

[para]
[:en] If [`ranges::iter_move(E)] is not equal to [`*E], the program is
ill-formed, no diagnostic required.
[:zh_CN] 如果 [`ranges::iter_move(E)] 不等于 [`*E]，则程序非良构，无须诊断。
