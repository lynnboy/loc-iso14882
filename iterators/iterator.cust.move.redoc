[section#iterator.cust.move
    [:] [`iter_move]
]

[%@library iter_move]
[para]
[:en] The name [`iter_move] denotes a customization point object
([#customization.point.object]).
[:zh_CN] 名字 [`iter_move] 代表一个定制化点对象
（[#customization.point.object]）。

[:en] The expression [`ranges::iter_move(E)] for some subexpression [`E] is
expression-equivalent to the following:
[:zh_CN] 表达式 [`ranges::iter_move(E)] 对于某个子表达式 [`E] 与下列各项按表达式
等价：

[list]
[item]
[:en] [`iter_move(E)], if that expression is valid, with overload resolution
performed in a context that does not include a declaration of
[`ranges::iter_move].
[:zh_CN] 当 [`iter_move(E)] 有效时为该表达式，其重载决议在不包含
[`ranges::iter_move] 的声明式的语境中进行。

[item]
[:en] Otherwise, if the expression [`*E] is well-formed:
[:zh_CN] 否则，当表达式 [`*E] 良构时：

[list]
[item]
[:en] if [`*E] is an lvalue, [`std::move(*E)];
[:zh_CN] 当 [`*E] 是左值时为 [`std::move(*E)]；

[item]
[:en] otherwise, [`*E].
[:zh_CN] 否则为 [`*E]。
[list:end]

[item]
[:en] Otherwise, [`ranges::iter_move(E)] is ill-formed.
[:zh_CN] 否则，[`ranges::iter_move(E)] 非良构。

[enter:note]
[:en] This case can result in substitution failure when [`ranges::iter_move(E)]
appears in the immediate context of a template instantiation.
[:zh_CN] 这种情况可能在当 [`ranges::iter_move(E)] 出现于模板实例化的直接语境中时
导致发生替换失败。
[exit:note]
[list:end]

[para]
[:en] If [`ranges::iter_move(E)] is not equal to [`*E], the program is
ill-formed with no diagnostic required.
[:zh_CN] 如果 [`ranges::iter_move(E)] 不等于 [`*E]，则程序非良构且无需诊断。
