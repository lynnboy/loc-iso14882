[section#iterator.container
    [:en] Container access
    [:zh_CN] 容器访问
]

[para]
[:en] In addition to being available via inclusion of the [`<iterator>] header,
the function templates in [#iterator.container] are available when any of the
following headers are included: [`<array>], [`<deque>], [`<forward_list>],
[`<list>], [`<map>], [`<regex>], [`<set>], [`<string>], [`<unordered_map>],
[`<unordered_set>], and [`<vector>].
[:zh_CN] 除了通过包含 [`<iterator>] 头文件使其可用之外，[#iterator.container]
中的函数模板在包含了下列任何头文件时也可用：[`<array>]，[`<deque>]，
[`<forward_list>]，[`<list>]，[`<map>]，[`<regex>]，[`<set>]，[`<string>]，
[`<unordered_map>]，[`<unordered_set>]，以及 [`<vector>]。

[%@library size(C& c)]
[codeblock:declaration]
template<class C> constexpr auto size(const C& c) -> decltype(c.size());
[codeblock:end]
[enter:description]
[para:returns]
[:en] [`c.size()].
[:zh_CN] [`c.size()]。
[exit:description]

[%@library size(T (&array)`[N`])]
[codeblock:declaration]
template<class T, size_t N> constexpr size_t size(const T (&array)[N]) noexcept;
[codeblock:end]
[enter:description]
[para:returns]
[:en] [`N].
[:zh_CN] [`N]。
[exit:description]

[%@library empty(C& c)]
[codeblock:declaration]
template<class C> constexpr auto empty(const C& c) -> decltype(c.empty());
[codeblock:end]
[enter:description]
[para:returns]
[:en] [`c.empty()].
[:zh_CN] [`c.empty()]。
[exit:description]

[%@library empty(T (&array)`[N`])]
[codeblock:declaration]
template<class T, size_t N> constexpr bool empty(const T (&array)[N]) noexcept;
[codeblock:end]
[enter:description]
[para:returns]
[:en] [`false].
[:zh_CN] [`false]。
[exit:description]

[%@library empty(initializer_list<E>)]
[codeblock:declaration]
template<class E> constexpr bool empty(initializer_list<E> il) noexcept;
[codeblock:end]
[enter:description]
[para:returns]
[:en] [`il.size() == 0].
[:zh_CN] [`il.size() == 0]。
[exit:description]

[%@library data(C& c)]
[codeblock:declaration]
template<class C> constexpr auto data(C& c) -> decltype(c.data());
template<class C> constexpr auto data(const C& c) -> decltype(c.data());
[codeblock:end]
[enter:description]
[para:returns]
[:en] [`c.data()].
[:zh_CN] [`c.data()]。
[exit:description]

[%@library data(T (&array)`[N`])]
[codeblock:declaration]
template<class T, size_t N> constexpr T* data(T (&array)[N]) noexcept;
[codeblock:end]
[enter:description]
[para:returns]
[:en] [`array].
[:zh_CN] [`array]。
[exit:description]

[%@library data(initializer_list<E>)]
[codeblock:declaration]
template<class E> constexpr const E* data(initializer_list<E> il) noexcept;
[codeblock:end]
[enter:description]
[para:returns]
[:en] [`il.begin()].
[:zh_CN] [`il.begin()]。
[exit:description]
