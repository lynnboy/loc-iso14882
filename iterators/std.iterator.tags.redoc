[section#std.iterator.tags
    [:en] Standard iterator tags
    [:zh_CN] 标准迭代器标签
]

[para]
[%@library output_iterator_tag]
[%@library input_iterator_tag]
[%@library forward_iterator_tag]
[%@library bidirectional_iterator_tag]
[%@library random_access_iterator_tag]
[%@library contiguous_iterator_tag]
[:en] It is often desirable for a function template specialization to find out
what is the most specific category of its iterator argument, so that the
function can select the most efficient algorithm at compile time.
[:zh_CN] 函数模板特化式经常需要确定其迭代器实参的最专门的类别，以便该函数可以
在编译期选择最高效的算法。

[:en] To facilitate this, the library introduces [+category tag[%]] classes
which are used as compile time tags for algorithm selection.
[:zh_CN] 为对此提供支持，程序库引入了[+类别标签[%]]类，并用作算法选择所需的
编译期标签。

[:en] They are: [`output_iterator_tag], [`input_iterator_tag],
[`forward_iterator_tag], [`bidirectional_iterator_tag],
[`random_access_iterator_tag], and [`contiguous_iterator_tag].
[:zh_CN] 它们是：[`output_iterator_tag]，[`input_iterator_tag]，
[`forward_iterator_tag]，[`bidirectional_iterator_tag]，
[`random_access_iterator_tag] 和 [`contiguous_iterator_tag]。

[:en] For every iterator of type [`I], [`iterator_traits<I>::iterator_category]
shall be defined to be a category tag that describes the iterator[=']s behavior.
[:zh_CN] 对于每个 [`I] 类型的迭代器，[`iterator_traits<I>::iterator_category]
应当被定义为可以描述该迭代器的行为的类别标签。

[codeblock:synopsis]
namespace std {
  struct output_iterator_tag { };
  struct input_iterator_tag { };
  struct forward_iterator_tag: public input_iterator_tag { };
  struct bidirectional_iterator_tag: public forward_iterator_tag { };
  struct random_access_iterator_tag: public bidirectional_iterator_tag { };
  struct contiguous_iterator_tag: public random_access_iterator_tag { };
}
[codeblock:end]

[para]
[begin:example]
[:en] For a program-defined iterator [`BinaryTreeIterator], it could be included
into the bidirectional iterator category by specializing the [`iterator_traits]
template:
[:zh_CN] 对于由程序定义的迭代器 [`BinaryTreeIterator]，它可以通过特化
[`iterator_traits] 模板使其加入到双向迭代器类别之中：

[codeblock]
template<class T> struct iterator_traits<BinaryTreeIterator<T>> {
  using iterator_category = bidirectional_iterator_tag;
  using difference_type   = ptrdiff_t;
  using value_type        = T;
  using pointer           = T*;
  using reference         = T&;
};
[codeblock:end]
[end:example]

[para]
[begin:example]
[:en] If [`evolve()] is well-defined for bidirectional iterators, but can be
implemented more efficiently for random access iterators, then the
implementation is as follows:
[:zh_CN] 如果 [`evolve()] 对于双向迭代器具有良好定义，但它可以对随机访问迭代器
提供更高效的实现，则其实现可以如下：

[codeblock]
template<class BidirectionalIterator>
inline void
evolve(BidirectionalIterator first, BidirectionalIterator last) {
  evolve(first, last,
    typename iterator_traits<BidirectionalIterator>::iterator_category());
}

template<class BidirectionalIterator>
void evolve(BidirectionalIterator first, BidirectionalIterator last,
  bidirectional_iterator_tag) {
  // [:en] more generic, but less efficient algorithm \
     [:zh_CN] 更通用，但较为不高效的算法
}

template<class RandomAccessIterator>
void evolve(RandomAccessIterator first, RandomAccessIterator last,
  random_access_iterator_tag) {
  // [:en] more efficient, but less generic algorithm \
     [:zh_CN] 更高效，但较为不通用的算法
}
[codeblock:end]
[end:example]
