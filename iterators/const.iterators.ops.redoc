[section#const.iterators.ops
    [:en] Operations
    [:zh_CN] 操作
]

[%@lib@ctor basic_const_iterator]
[codeblock:declaration]
constexpr basic_const_iterator(Iterator current);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*current_] with [`std::move(current)].
[:zh_CN] 以 [`std::move(current)] 初始化 [*current_]。
[div:end]

[%@lib@ctor basic_const_iterator]
[codeblock:declaration]
template<[[redoc("`:c>")]]convertible_to<Iterator> U>
  constexpr basic_const_iterator(basic_const_iterator<U> current);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*current_] with [`std::move(current.[*current_])].
[:zh_CN] 以 [`std::move(current.[*current_])] 初始化 [*current_]。
[div:end]

[%@lib@ctor basic_const_iterator]
[codeblock:declaration]
template<[[redoc("*:c>")]]different-from<basic_const_iterator> T>
  requires [[redoc("`:c>")]]convertible_to<T, Iterator>
  constexpr basic_const_iterator(T&& current);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [*current_] with [`std::forward<T>(current)].
[:zh_CN] 以 [`std::forward<T>(current)] 初始化 [*current_]。
[div:end]

[%@lib@member base[!basic_const_iterator]]
[codeblock:declaration]
constexpr const Iterator& base() const & noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return [*current_];]
[:zh_CN] 等价于：[`return [*current_];]
[div:end]

[%@lib@member base[!basic_const_iterator]]
[codeblock:declaration]
constexpr Iterator base() &&;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return std::move([*current_]);]
[:zh_CN] 等价于：[`return std::move([*current_]);]
[div:end]

[%@lib@member operator*[!basic_const_iterator]]
[codeblock:declaration]
constexpr [[redoc("*>")]]reference operator*() const;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return static_cast<[*reference]>([*current_]);]
[:zh_CN] 等价于：[`return static_cast<[*reference]>([*current_]);]
[div:end]

[%@lib@member operator->[!basic_const_iterator]]
[codeblock:declaration]
constexpr const auto* operator->() const
  requires is_lvalue_reference_v<iter_reference_t<Iterator>> &&
           [[redoc("`:c>")]]same_as<remove_cvref_t<iter_reference_t<Iterator>>, value_type>;
[codeblock:end]

[div:description]
[para:returns]
[:en] If [`Iterator] models [`:c contiguous_iterator], [`to_address([*current_])];
otherwise, [`addressof(*[*current_])].
[:zh_CN] 如果 [`Iterator] 构成 [`:c contiguous_iterator]，则返回
[`to_address([*current_])]；否则返回 [`addressof(*[*current_])]。
[div:end]

[%@lib@member operator++[!basic_const_iterator]]
[codeblock:declaration]
constexpr basic_const_iterator& operator++();
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
++[[redoc("*>")]]current_;
return *this;
[codeblock:end]
[div:end]

[%@lib@member operator++[!basic_const_iterator]]
[codeblock:declaration]
constexpr void operator++(int);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`++[*current_];]
[:zh_CN] 等价于：[`++[*current_];]
[div:end]

[%@lib@member operator++[!basic_const_iterator]]
[codeblock:declaration]
constexpr basic_const_iterator operator++(int) requires [[redoc("`:c>")]]forward_iterator<Iterator>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
auto tmp = *this;
++*this;
return tmp;
[codeblock:end]
[div:end]

[%@lib@member operator--[!basic_const_iterator]]
[codeblock:declaration]
constexpr basic_const_iterator& operator--() requires [[redoc("`:c>")]]bidirectional_iterator<Iterator>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
--[[redoc("*>")]]current_;
return *this;
[codeblock:end]
[div:end]

[%@lib@member operator--[!basic_const_iterator]]
[codeblock:declaration]
constexpr basic_const_iterator operator--(int) requires [[redoc("`:c>")]]bidirectional_iterator<Iterator>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
auto tmp = *this;
--*this;
return tmp;
[codeblock:end]
[div:end]

[%@lib@member operator+=[!basic_const_iterator]]
[%@lib@member operator-=[!basic_const_iterator]]
[codeblock:declaration]
constexpr basic_const_iterator& operator+=(difference_type n)
  requires [[redoc("`:c>")]]random_access_iterator<Iterator>;
constexpr basic_const_iterator& operator-=(difference_type n)
  requires [[redoc("`:c>")]]random_access_iterator<Iterator>;
[codeblock:end]

[div:description]
[para]
[:en] Let [^op] be the operator.
[:zh_CN] 令 [^op] 为该运算符。

[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
[[redoc("*>")]]current_ [[redoc("^>")]]op n;
return *this;
[codeblock:end]
[div:end]

[%@lib@member operator`[`][!basic_const_iterator]]
[codeblock:declaration]
constexpr [[redoc("*>")]]reference operator[](difference_type n) const requires [[redoc("`:c>")]]random_access_iterator<Iterator>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return static_cast<[*reference]>([*current_]`[n`]);]
[:zh_CN] 等价于：[`return static_cast<[*reference]>([*current_]`[n`]);]
[div:end]

[%@lib@member operator==[!basic_const_iterator]]
[codeblock:declaration]
template<[[redoc("`:c>")]]sentinel_for<Iterator> S>
  constexpr bool operator==(const S& s) const;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return [*current_] == s;]
[:zh_CN] 等价于：[`return [*current_] == s;]
[div:end]

[codeblock:declaration]
template<[[redoc("*:c>")]]not-a-const-iterator CI>
  requires [[redoc("*:c>")]]constant-iterator<CI> && [[redoc("`:c>")]]convertible_to<Iterator const&, CI>
constexpr operator CI() const &;
[codeblock:end]

[div:description]
[para:returns]
[:en] [*current_].
[:zh_CN] [*current_]。
[div:end]

[codeblock:declaration]
template<[[redoc("*:c>")]]not-a-const-iterator CI>
  requires [[redoc("*:c>")]]constant-iterator<CI> && [[redoc("`:c>")]]convertible_to<Iterator, CI>
constexpr operator CI() &&;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`std::move([*current_])].
[:zh_CN] [`std::move([*current_])]。
[div:end]

[%@lib@member operator<[!basic_const_iterator]]
[%@lib@member operator>[!basic_const_iterator]]
[%@lib@member operator<=[!basic_const_iterator]]
[%@lib@member operator>=[!basic_const_iterator]]
[%@lib@member operator<=>[!basic_const_iterator]]
[codeblock:declaration]
constexpr bool operator<(const basic_const_iterator& y) const
  requires [[redoc("`:c>")]]random_access_iterator<Iterator>;
constexpr bool operator>(const basic_const_iterator& y) const
  requires [[redoc("`:c>")]]random_access_iterator<Iterator>;
constexpr bool operator<=(const basic_const_iterator& y) const
  requires [[redoc("`:c>")]]random_access_iterator<Iterator>;
constexpr bool operator>=(const basic_const_iterator& y) const
  requires [[redoc("`:c>")]]random_access_iterator<Iterator>;
constexpr bool operator<=>(const basic_const_iterator& y) const
  requires [[redoc("`:c>")]]random_access_iterator<Iterator> && [[redoc("`:c>")]]three_way_comparable<Iterator>;
[codeblock:end]

[div:description]
[para]
[:en] Let [^op] be the operator.
[:zh_CN] 令 [^op] 为该运算符。

[para:effects]
[:en] Equivalent to: [`return [*current_] [^op] y.[*current_];]
[:zh_CN] 等价于：[`return [*current_] [^op] y.[*current_];]
[div:end]

[%@lib@member operator<[!basic_const_iterator]]
[%@lib@member operator>[!basic_const_iterator]]
[%@lib@member operator<=[!basic_const_iterator]]
[%@lib@member operator>=[!basic_const_iterator]]
[%@lib@member operator<=>[!basic_const_iterator]]
[codeblock:declaration]
template<[[redoc("*:c>")]]different-from<basic_const_iterator> I>
  constexpr bool operator<(const I& y) const
    requires [[redoc("`:c>")]]random_access_iterator<Iterator> && [[redoc("`:c>")]]totally_ordered_with<Iterator, I>;
template<[[redoc("*:c>")]]different-from<basic_const_iterator> I>
  constexpr bool operator>(const I& y) const
    requires [[redoc("`:c>")]]random_access_iterator<Iterator> && [[redoc("`:c>")]]totally_ordered_with<Iterator, I>;
template<[[redoc("*:c>")]]different-from<basic_const_iterator> I>
  constexpr bool operator<=(const I& y) const
    requires [[redoc("`:c>")]]random_access_iterator<Iterator> && [[redoc("`:c>")]]totally_ordered_with<Iterator, I>;
template<[[redoc("*:c>")]]different-from<basic_const_iterator> I>
  constexpr bool operator>=(const I& y) const
    requires [[redoc("`:c>")]]random_access_iterator<Iterator> && [[redoc("`:c>")]]totally_ordered_with<Iterator, I>;
template<[[redoc("*:c>")]]different-from<basic_const_iterator> I>
  constexpr bool operator<=>(const I& y) const
    requires [[redoc("`:c>")]]random_access_iterator<Iterator> && [[redoc("`:c>")]]totally_ordered_with<Iterator, I> &&
             [[redoc("`:c>")]]three_way_comparable_with<Iterator, I>;
[codeblock:end]

[div:description]
[para]
[:en] Let [^op] be the operator.
[:zh_CN] 令 [^op] 为该运算符。

[para:effects]
[:en] Equivalent to: [`return [*current_] [^op] y;]
[:zh_CN] 等价于：[`return [*current_] [^op] y;]
[div:end]

[%@lib@member operator<[!basic_const_iterator]]
[%@lib@member operator>[!basic_const_iterator]]
[%@lib@member operator<=[!basic_const_iterator]]
[%@lib@member operator>=[!basic_const_iterator]]
[codeblock:declaration]
template<[[redoc("*:c>")]]not-a-const-iterator I>
  friend constexpr bool operator<(const I& x, const basic_const_iterator& y)
    requires [[redoc("`:c>")]]random_access_iterator<Iterator> && [[redoc("`:c>")]]totally_ordered_with<Iterator, I>;
template<[[redoc("*:c>")]]not-a-const-iterator I>
  friend constexpr bool operator>(const I& x, const basic_const_iterator& y)
    requires [[redoc("`:c>")]]random_access_iterator<Iterator> && [[redoc("`:c>")]]totally_ordered_with<Iterator, I>;
template<[[redoc("*:c>")]]not-a-const-iterator I>
  friend constexpr bool operator<=(const I& x, const basic_const_iterator& y)
    requires [[redoc("`:c>")]]random_access_iterator<Iterator> && [[redoc("`:c>")]]totally_ordered_with<Iterator, I>;
template<[[redoc("*:c>")]]not-a-const-iterator I>
  friend constexpr bool operator>=(const I& x, const basic_const_iterator& y)
    requires [[redoc("`:c>")]]random_access_iterator<Iterator> && [[redoc("`:c>")]]totally_ordered_with<Iterator, I>;
[codeblock:end]

[div:description]
[para]
[:en] Let [^op] be the operator.
[:zh_CN] 令 [^op] 为该运算符。

[para:effects]
[:en] Equivalent to: [`return x [^op] y.[*current_];]
[:zh_CN] 等价于：[`return x [^op] y.[*current_];]
[div:end]

[%@lib@member operator+[!basic_const_iterator]]
[codeblock:declaration]
friend constexpr basic_const_iterator operator+(const basic_const_iterator& i, difference_type n)
  requires [[redoc("`:c>")]]random_access_iterator<Iterator>;
friend constexpr basic_const_iterator operator+(difference_type n, const basic_const_iterator& i)
  requires [[redoc("`:c>")]]random_access_iterator<Iterator>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return basic_const_iterator(i.[*current_] + n);]
[:zh_CN] 等价于：[`return basic_const_iterator(i.[*current_] + n);]
[div:end]

[%@lib@member operator-[!basic_const_iterator]]
[codeblock:declaration]
friend constexpr basic_const_iterator operator-(const basic_const_iterator& i, difference_type n)
  requires [[redoc("`:c>")]]random_access_iterator<Iterator>;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return basic_const_iterator(i.[*current_] - n);]
[:zh_CN] 等价于：[`return basic_const_iterator(i.[*current_] - n);]
[div:end]

[%@lib@member operator-[!basic_const_iterator]]
[codeblock:declaration]
template<[[redoc("`:c>")]]sized_sentinel_for<Iterator> S>
  constexpr difference_type operator-(const S& y) const;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return [*current_] - y;]
[:zh_CN] 等价于：[`return [*current_] - y;]
[div:end]

[%@lib@member operator-[!basic_const_iterator]]
[codeblock:declaration]
template<[[redoc("*:c>")]]not-a-const-iterator S>
  requires [[redoc("`:c>")]]sized_sentinel_for<S, Iterator>
  friend constexpr difference_type operator-(const S& x, const basic_const_iterator& y);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return x - y.[*current_];]
[:zh_CN] 等价于：[`return x - y.[*current_];]
[div:end]
