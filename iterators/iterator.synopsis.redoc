[section#iterator.synopsis
    [:en] Header [`<iterator>] synopsis
    [:zh_CN] 头文件 [`<iterator>] 纲要
]

[%@hdr@def iterator]
[codeblock:synopsis]
#include <compare>              // [:en] see [#compare.syn] [:zh_CN] 参见 [#compare.syn]
#include <concept>              // [:en] see [#concepts.syn] [:zh_CN] 参见 [#concepts.syn]

namespace std {
  template<class T> using [[redoc("*>")]]with-reference = T&;  // [=expos]
  template<class T> concept [[redoc("*:c@def>")]]can-reference       // [=expos]
    = requires { typename [[redoc("^>")]]with-reference<T>; };
  template<class T> concept [[redoc("*:c@def>")]]dereferenceable     // [=expos]
    = requires(T& t) {
      { *t } -> [[redoc("*:c>")]]can-reference;  // [:en] not required to be equality-preserving \
                                                 [:zh_CN] 不必是维持相等性的
    };

  // [:en] [#iterator.assoc.types], associated types \
  [:zh_CN] [#iterator.assoc.types]，关联类型
  // [:en] [#incrementable.traits], incrementable traits \
  [:zh_CN] [#incrementable.traits]，可增量操作特征
  template<class> struct incrementable_traits;                                      // [=freestanding]
  template<class T>
    using iter_difference_t = [[redoc("[=seebelow]")]];                                            // [=freestanding]

  // [:en] [#readable.traits], indirectly readable traits \
  [:zh_CN] [#readable.traits]，可间接读取特征
  template<class> struct indirectly_readable_traits;                                // [=freestanding]
  template<class T>
    using iter_value_t = [[redoc("[=seebelow]")]];                                                 // [=freestanding]

  // [:en] [#iterator.traits], iterator traits \
  [:zh_CN] [#iterator.traits]，迭代器特征
  template<class I> struct iterator_traits;                                         // [=freestanding]
  template<class T> requires is_object_v<T> struct iterator_traits<T*>;             // [=freestanding]

  template<[[redoc("*:c>")]]dereferenceable T>
    using [[redoc("`:lib>")]]iter_reference_t = decltype(*declval<T&>());                              // [=freestanding]

  namespace ranges {
    // [:en] [#iterator.cust], customization point objects \
    [:zh_CN] [#iterator.cust]，定制化点对象
    inline namespace [[redoc("[=unspec]")]] {
      // [#iterator.cust.move], [`ranges::iter_move]
      inline constexpr [[redoc("[=unspec]")]] iter_move = [[redoc("[=unspec]")]];                         // [=freestanding]

      // [#iterator.cust.swap], [`ranges::iter_swap]
      inline constexpr [[redoc("[=unspec]")]] iter_swap = [[redoc("[=unspec]")]];                         // [=freestanding]
    }
  }

  template<[[redoc("*:c>")]]dereferenceable T>
    requires requires(T& t) {
      { ranges::iter_move(t) } -> [[redoc("*:c>")]]can-reference;
    }
  using [[redoc("`:lib>")]]iter_rvalue_reference_t                                                     // [=freestanding]
    = decltype(ranges::iter_move(declval<T&>()));

  // [:en] [#iterator.concepts], iterator concepts \
  [:zh_CN] [#iterator.concepts]，迭代器的概念
  // [:en] [#iterator.concept.readable], concept [`:c indirectly_readable] \
  [:zh_CN] [#iterator.concept.readable]，概念 [`:c indirectly_readable]
  template<class In>
    concept indirectly_readable = [[redoc("[=seebelow]")]];                                        // [=freestanding]

  // [:en] [#indirectcallable.traits], indirect callable traits \
  [:zh_CN] [#indirectcallable.traits]，可间接调用特征
  template<[[redoc("`:c>")]]indirectly_readable T>
    using [[redoc("*>")]]indirect-value-t = [[redoc("[=seebelow]")]];         // [=expos]

  template<[[redoc("`:c>")]]indirectly_readable T>
    using [[redoc("`:lib>")]]iter_common_reference_t =                                                 // [=freestanding]
      common_reference_t<iter_reference_t<T>, [[redoc("*>")]]indirect-value-t<T>&>;

  // [:en] [#iterator.concept.writable], concept [`:c indirectly_writable] \
  [:zh_CN] [#iterator.concept.writable]，概念 [`:c indirectly_writable]
  template<class Out, class T>
    concept indirectly_writable = [[redoc("[=seebelow]")]];                                        // [=freestanding]

  // [:en] [#iterator.concept.winc], concept [`:c weakly_incrementable] \
  [:zh_CN] [#iterator.concept.winc]，概念 [`:c weakly_incrementable]
  template<class I>
    concept weakly_incrementable = [[redoc("[=seebelow]")]];                                       // [=freestanding]

  // [:en] [#iterator.concept.inc], concept [`:c incrementable] \
  [:zh_CN] [#iterator.concept.inc]，概念 [`:c incrementable]
  template<class I>
    concept incrementable = [[redoc("[=seebelow]")]];                                              // [=freestanding]

  // [:en] [#iterator.concept.iterator], concept [`:c input_or_output_iterator] \
  [:zh_CN] [#iterator.concept.iterator]，概念 [`:c input_or_output_iterator]
  template<class I>
    concept input_or_output_iterator = [[redoc("[=seebelow]")]];                                   // [=freestanding]

  // [:en] [#iterator.concept.sentinel], concept [`:c sentinel_for] \
  [:zh_CN] [#iterator.concept.sentinel]，概念 [`:c sentinel_for]
  template<class S, class I>
    concept sentinel_for = [[redoc("[=seebelow]")]];                                               // [=freestanding]

  // [:en] [#iterator.concept.sizedsentinel], concept [`:c sized_sentinel_for] \
  [:zh_CN] [#iterator.concept.sizedsentinel]，概念 [`:c sized_sentinel_for]
  template<class S, class I>
    constexpr bool disable_sized_sentinel_for = false;                              // [=freestanding]

  template<class S, class I>
    concept sized_sentinel_for = [[redoc("[=seebelow]")]];                                         // [=freestanding]

  // [:en] [#iterator.concept.input], concept [`:c input_iterator] \
  [:zh_CN] [#iterator.concept.input]，概念 [`:c input_iterator]
  template<class I>
    concept input_iterator = [[redoc("[=seebelow]")]];                                             // [=freestanding]

  // [:en] [#iterator.concept.output], concept [`:c output_iterator] \
  [:zh_CN] [#iterator.concept.output]，概念 [`:c output_iterator]
  template<class I, class T>
    concept output_iterator = [[redoc("[=seebelow]")]];                                            // [=freestanding]

  // [:en] [#iterator.concept.forward], concept [`:c forward_iterator] \
  [:zh_CN] [#iterator.concept.forward]，概念 [`:c forward_iterator]
  template<class I>
    concept forward_iterator = [[redoc("[=seebelow]")]];                                           // [=freestanding]

  // [:en] [#iterator.concept.bidir], concept [`:c bidirectional_iterator] \
  [:zh_CN] [#iterator.concept.bidir]，概念 [`:c bidirectional_iterator]
  template<class I>
    concept bidirectional_iterator = [[redoc("[=seebelow]")]];                                     // [=freestanding]

  // [:en] [#iterator.concept.random.access], concept [`:c random_access_iterator] \
  [:zh_CN] [#iterator.concept.random.access]，概念 [`:c random_access_iterator]
  template<class I>
    concept random_access_iterator = [[redoc("[=seebelow]")]];                                     // [=freestanding]

  // [:en] [#iterator.concept.contiguous], concept [`:c contiguous_iterator] \
  [:zh_CN] [#iterator.concept.contiguous]，概念 [`:c contiguous_iterator]
  template<class I>
    concept contiguous_iterator = [[redoc("[=seebelow]")]];                                        // [=freestanding]

  // [:en] [#indirectcallable], indirect callable requirements \
  [:zh_CN] [#indirectcallable]，可间接调用规定
  // [:en] [#indirectcallable.indirectinvocable], indirect callables \
  [:zh_CN] [#indirectcallable.indirectinvocable]，可间接调用
  template<class F, class I>
    concept indirectly_unary_invocable = [[redoc("[=seebelow]")]];                                 // [=freestanding]

  template<class F, class I>
    concept indirectly_regular_unary_invocable = [[redoc("[=seebelow]")]];                         // [=freestanding]

  template<class F, class I>
    concept indirect_unary_predicate = [[redoc("[=seebelow]")]];                                   // [=freestanding]

  template<class F, class I1, class I2>
    concept indirect_binary_predicate = [[redoc("[=seebelow]")]];                                  // [=freestanding]

  template<class F, class I1, class I2 = I1>
    concept indirect_equivalence_relation = [[redoc("[=seebelow]")]];                              // [=freestanding]

  template<class F, class I1, class I2 = I1>
    concept indirect_strict_weak_order = [[redoc("[=seebelow]")]];                                 // [=freestanding]

  template<class F, class... Is>
    requires ([[redoc("`:c>")]]indirectly_readable<Is> && ...) && [[redoc("`:c>")]]invocable<F, iter_reference_t<Is>...>
      using [[redoc("`:lib>")]]indirect_result_t = invoke_result_t<F, iter_reference_t<Is>...>;        // [=freestanding]

  // [:en] [#projected], projected \
  [:zh_CN] [#projected]，投射
  template<[[redoc("`:c>")]]indirectly_readable I, [[redoc("`:c>")]]indirectly_regular_unary_invocable<I> Proj>
    using projected = [[redoc("[=seebelow]")]];                                                    // [=freestanding]

  template<[[redoc("`:c>")]]indirectly_readable I, [[redoc("`:c>")]]indirectly_regular_unary_invocable<I> Proj>
  using projected_value_t =                                                         // [=freestanding]
    remove_cvref_t<invoke_result_t<Proj&, iter_value_t<I>&>>;

  // [:en] [#alg.req], common algorithm requirements \
  [:zh_CN] [#alg.req]，一般算法规定
  // [:en] [#alg.req.ind.move], concept [`:c indirectly_movable] \
  [:zh_CN] [#alg.req.ind.move]，概念 [`:c indirectly_movable]
  template<class In, class Out>
    concept indirectly_movable = [[redoc("[=seebelow]")]];                                         // [=freestanding]

  template<class In, class Out>
    concept indirectly_movable_storable = [[redoc("[=seebelow]")]];                                // [=freestanding]

  // [:en] [#alg.req.ind.copy], concept [`:c indirectly_copyable] \
  [:zh_CN] [#alg.req.ind.copy]，概念 [`:c indirectly_copyable]
  template<class In, class Out>
    concept indirectly_copyable = [[redoc("[=seebelow]")]];                                        // [=freestanding]

  template<class In, class Out>
    concept indirectly_copyable_storable = [[redoc("[=seebelow]")]];                               // [=freestanding]

  // [:en] [#alg.req.ind.swap], concept [`:c indirectly_swappable] \
  [:zh_CN] [#alg.req.ind.swap]，概念 [`:c indirectly_swappable]
  template<class I1, class I2 = I1>
    concept indirectly_swappable = [[redoc("[=seebelow]")]];                                       // [=freestanding]

  // [:en] [#alg.req.ind.cmp], concept [`:c indirectly_comparable] \
  [:zh_CN] [#alg.req.ind.cmp]，概念 [`:c indirectly_comparable]
  template<class I1, class I2, class R, class P1 = identity, class P2 = identity>
    concept indirectly_comparable = [[redoc("[=seebelow]")]];                                      // [=freestanding]

  // [:en] [#alg.req.permutable], concept [`:c permutable] \
  [:zh_CN] [#alg.req.permutable]，概念 [`:c permutable]
  template<class I>
    concept permutable = [[redoc("[=seebelow]")]];                                                 // [=freestanding]

  // [:en] [#alg.req.mergeable], concept [`:c mergeable] \
  [:zh_CN] [#alg.req.mergeable]，概念 [`:c mergeable]
  template<class I1, class I2, class Out,
           class R = ranges::less, class P1 = identity, class P2 = identity>
    concept mergeable = [[redoc("[=seebelow]")]];                                                  // [=freestanding]

  // [:en] [#alg.req.sortable], concept [`:c sortable] \
  [:zh_CN] [#alg.req.sortable]，概念 [`:c sortable]
  template<class I, class R = ranges::less, class P = identity>
    concept sortable = [[redoc("[=seebelow]")]];                                                   // [=freestanding]

  // [:en] [#iterator.primitives], primitives \
  [:zh_CN] [#iterator.primitives]，原语
  // [:en] [#std.iterator.tags], iterator tags \
  [:zh_CN] [#std.iterator.tags]，迭代器标签
  struct input_iterator_tag { };                                                    // [=freestanding]
  struct output_iterator_tag { };                                                   // [=freestanding]
  struct forward_iterator_tag: public input_iterator_tag { };                       // [=freestanding]
  struct bidirectional_iterator_tag: public forward_iterator_tag { };               // [=freestanding]
  struct random_access_iterator_tag: public bidirectional_iterator_tag { };         // [=freestanding]
  struct contiguous_iterator_tag: public random_access_iterator_tag { };            // [=freestanding]

  // [:en] [#iterator.operations], iterator operations \
  [:zh_CN] [#iterator.operations]，迭代器的操作
  template<class InputIterator, class Distance>
    constexpr void
      advance(InputIterator& i, Distance n);                                        // [=freestanding]
  template<class InputIterator>
    constexpr typename iterator_traits<InputIterator>::difference_type
      distance(InputIterator first, InputIterator last);                            // [=freestanding]
  template<class InputIterator>
    constexpr InputIterator
      next(InputIterator x,                                                         // [=freestanding]
           typename iterator_traits<InputIterator>::difference_type n = 1);
  template<class BidirectionalIterator>
    constexpr BidirectionalIterator
      prev(BidirectionalIterator x,                                                 // [=freestanding]
           typename iterator_traits<BidirectionalIterator>::difference_type n = 1);

  // [:en] [#range.iter.ops], range iterator operations \
  [:zh_CN] [#range.iter.ops]，范围迭代器操作
  namespace ranges {
    // [#range.iter.op.advance], [`ranges::advance]
    template<[[redoc("`:c>")]]input_or_output_iterator I>
      constexpr void advance(I& i, iter_difference_t<I> n);                         // [=freestanding]
    template<[[redoc("`:c>")]]input_or_output_iterator I, [[redoc("`:c>")]]sentinel_for<I> S>
      constexpr void advance(I& i, S bound);                                        // [=freestanding]
    template<[[redoc("`:c>")]]input_or_output_iterator I, [[redoc("`:c>")]]sentinel_for<I> S>
      constexpr iter_difference_t<I> advance(I& i, iter_difference_t<I> n,          // [=freestanding]
                                             S bound);

    // [#range.iter.op.distance], [`ranges::distance]
    template<class I, [[redoc("`:c>")]]sentinel_for<I> S>
      requires (![[redoc("`:c>")]]sized_sentinel_for<S, I>)
      constexpr iter_difference_t<I> distance(I first, S last);                     // [=freestanding]
    template<class I, [[redoc("`:c>")]]sized_sentinel_for<decay_t<I>> S>
      constexpr iter_difference_t<decay_t<I>> distance(I&& first, S last);          // [=freestanding]
    template<[[redoc("`:c>")]]range R>
      constexpr range_difference_t<R> distance(R&& r);                              // [=freestanding]

    // [#range.iter.op.next], [`ranges::next]
    template<[[redoc("`:c>")]]input_or_output_iterator I>
      constexpr I next(I x);                                                        // [=freestanding]
    template<[[redoc("`:c>")]]input_or_output_iterator I>
      constexpr I next(I x, iter_difference_t<I> n);                                // [=freestanding]
    template<[[redoc("`:c>")]]input_or_output_iterator I, [[redoc("`:c>")]]sentinel_for<I> S>
      constexpr I next(I x, S bound);                                               // [=freestanding]
    template<[[redoc("`:c>")]]input_or_output_iterator I, [[redoc("`:c>")]]sentinel_for<I> S>
      constexpr I next(I x, iter_difference_t<I> n, S bound);                       // [=freestanding]

    // [#range.iter.op.prev], [`ranges::prev]
    template<[[redoc("`:c>")]]bidirectional_iterator I>
      constexpr I prev(I x);                                                        // [=freestanding]
    template<[[redoc("`:c>")]]bidirectional_iterator I>
      constexpr I prev(I x, iter_difference_t<I> n);                                // [=freestanding]
    template<[[redoc("`:c>")]]bidirectional_iterator I>
      constexpr I prev(I x, iter_difference_t<I> n, I bound);                       // [=freestanding]
  }

  // [:en] [#predef.iterators], predefined iterators and sentinels \
  [:zh_CN] [#predef.iterators]，预定义的迭代器和哨位
  // [:en] [#reverse.iterators], reverse iterators \
  [:zh_CN] [#reverse.iterators]，反向迭代器
  template<class Iterator> class reverse_iterator;                                  // [=freestanding]

  template<class Iterator1, class Iterator2>
    constexpr bool operator==(                                                      // [=freestanding]
      const reverse_iterator<Iterator1>& x,
      const reverse_iterator<Iterator2>& y);
  template<class Iterator1, class Iterator2>
    constexpr bool operator!=(                                                      // [=freestanding]
      const reverse_iterator<Iterator1>& x,
      const reverse_iterator<Iterator2>& y);
  template<class Iterator1, class Iterator2>
    constexpr bool operator<(                                                       // [=freestanding]
      const reverse_iterator<Iterator1>& x,
      const reverse_iterator<Iterator2>& y);
  template<class Iterator1, class Iterator2>
    constexpr bool operator>(                                                       // [=freestanding]
      const reverse_iterator<Iterator1>& x,
      const reverse_iterator<Iterator2>& y);
  template<class Iterator1, class Iterator2>
    constexpr bool operator<=(                                                      // [=freestanding]
      const reverse_iterator<Iterator1>& x,
      const reverse_iterator<Iterator2>& y);
  template<class Iterator1, class Iterator2>
    constexpr bool operator>=(                                                      // [=freestanding]
      const reverse_iterator<Iterator1>& x,
      const reverse_iterator<Iterator2>& y);
  template<class Iterator1, [[redoc("`:c>")]]three_way_comparable_with<Iterator1> Iterator2>
    constexpr compare_three_way_result_t<Iterator1, Iterator2>
      operator<=>(const reverse_iterator<Iterator1>& x,                             // [=freestanding]
                  const reverse_iterator<Iterator2>& y);

  template<class Iterator1, class Iterator2>
    constexpr auto operator-(                                                       // [=freestanding]
      const reverse_iterator<Iterator1>& x,
      const reverse_iterator<Iterator2>& y) -> decltype(y.base() - x.base());
  template<class Iterator>
    constexpr reverse_iterator<Iterator> operator+(                                 // [=freestanding]
      iter_difference_t<Iterator> n,
      const reverse_iterator<Iterator>& x);

  template<class Iterator>
    constexpr reverse_iterator<Iterator> make_reverse_iterator(Iterator i);         // [=freestanding]

  template<class Iterator1, class Iterator2>
    requires (![[redoc("`:c>")]]sized_sentinel_for<Iterator1, Iterator2>)
    constexpr bool [[redoc("%@lib@spec disable_sized_sentinel_for[reverse_iterator]")]]disable_sized_sentinel_for<reverse_iterator<Iterator1>,          // [=freestanding]
                                              reverse_iterator<Iterator2>> = true;

  // [:en] [#insert.iterators], insert iterators \
  [:zh_CN] [#insert.iterators]，插入迭代器
  template<class Container> class back_insert_iterator;                             // [=freestanding]
  template<class Container>
    constexpr back_insert_iterator<Container> back_inserter(Container& x);          // [=freestanding]

  template<class Container> class front_insert_iterator;                            // [=freestanding]
  template<class Container>
    constexpr front_insert_iterator<Container> front_inserter(Container& x);        // [=freestanding]

  template<class Container> class insert_iterator;                                  // [=freestanding]
  template<class Container>
    constexpr insert_iterator<Container>
      inserter(Container& x, ranges::iterator_t<Container> i);                      // [=freestanding]

  // [:en] [#const.iterators], constant iterators and sentinels \
  [:zh_CN] [#const.iterators]，常量迭代器和哨位
  // [:en] [#const.iterators.alias], alias templates \
  [:zh_CN] [#const.iterators.alias]，别名模板
  template<[[redoc("`:c>")]]indirectly_readable I>
    using iter_const_reference_t = [[redoc("[=seebelow]")]];                                       // [=freestanding]
  template<class Iterator>
    concept [[redoc("*:c>")]]constant-iterator = [[redoc("[=seebelow]")]]; // [=expos]
  template<[[redoc("`:c>")]]input_iterator I>
    using const_iterator = [[redoc("[=seebelow]")]];                                               // [=freestanding]
  template<[[redoc("`:c>")]]semiregular S>
    using const_sentinel = [[redoc("[=seebelow]")]];                                               // [=freestanding]

  // [:en] [#const.iterators.iterator], class template [`basic_const_iterator] \
  [:zh_CN] [#const.iterators.iterator]，类模板 [`basic_const_iterator]
  template<[[redoc("`:c>")]]input_iterator I>
    class basic_const_iterator;                                                     // [=freestanding]

  template<class T, [[redoc("`:c>")]]common_with<T> U>
    requires [[redoc("`:c>")]]input_iterator<common_type_t<T, U>>
  struct common_type<basic_const_iterator<T>, U> {                                  // [=freestanding]
    using type = basic_const_iterator<common_type_t<T, U>>;
  };
  template<class T, [[redoc("`:c>")]]common_with<T> U>
    requires [[redoc("`:c>")]]input_iterator<common_type_t<T, U>>
  struct common_type<U, basic_const_iterator<T>> {                                  // [=freestanding]
    using type = basic_const_iterator<common_type_t<T, U>>;
  };
  template<class T, [[redoc("`:c>")]]common_with<T> U>
    requires [[redoc("`:c>")]]input_iterator<common_type_t<T, U>>
  struct common_type<basic_const_iterator<T>, basic_const_iterator<U>> {            // [=freestanding]
    using type = basic_const_iterator<common_type_t<T, U>>;
  };

  template<[[redoc("`:c>")]]input_iterator I>
    constexpr const_iterator<I> [[redoc("`:lib>")]]make_const_iterator(I it) { return it; }            // [=freestanding]

  template<class S>
    constexpr const_sentinel<S> [[redoc("`:lib>")]]make_const_sentinel(S s) { return s; }              // [=freestanding]

  // [:en] [#move.iterators], move iterators and sentinels \
  [:zh_CN] [#move.iterators]，移动迭代器和哨位
  template<class Iterator> class move_iterator;                                     // [=freestanding]

  template<class Iterator1, class Iterator2>
    constexpr bool operator==(                                                      // [=freestanding]
      const move_iterator<Iterator1>& x, const move_iterator<Iterator2>& y);
  template<class Iterator1, class Iterator2>
    constexpr bool operator<(                                                       // [=freestanding]
      const move_iterator<Iterator1>& x, const move_iterator<Iterator2>& y);
  template<class Iterator1, class Iterator2>
    constexpr bool operator>(                                                       // [=freestanding]
      const move_iterator<Iterator1>& x, const move_iterator<Iterator2>& y);
  template<class Iterator1, class Iterator2>
    constexpr bool operator<=(                                                      // [=freestanding]
      const move_iterator<Iterator1>& x, const move_iterator<Iterator2>& y);
  template<class Iterator1, class Iterator2>
    constexpr bool operator>=(                                                      // [=freestanding]
      const move_iterator<Iterator1>& x, const move_iterator<Iterator2>& y);
  template<class Iterator1, [[redoc("`:c>")]]three_way_comparable_with<Iterator1> Iterator2>
    constexpr compare_three_way_result_t<Iterator1, Iterator2>
      operator<=>(const move_iterator<Iterator1>& x,                                // [=freestanding]
                  const move_iterator<Iterator2>& y);

  template<class Iterator1, class Iterator2>
    constexpr auto operator-(                                                       // [=freestanding]
      const move_iterator<Iterator1>& x, const move_iterator<Iterator2>& y)
        -> decltype(x.base() - y.base());
  template<class Iterator>
    constexpr move_iterator<Iterator>
      operator+(iter_difference_t<Iterator> n, const move_iterator<Iterator>& x);   // [=freestanding]

  template<class Iterator>
    constexpr move_iterator<Iterator> make_move_iterator(Iterator i);               // [=freestanding]

  template<class Iterator1, class Iterator2>
    requires (![[redoc("`:c>")]]sized_sentinel_for<Iterator1, Iterator2>)
    constexpr bool [[redoc("%@lib@spec disable_sized_sentinel_for[move_iterator]")]]disable_sized_sentinel_for<move_iterator<Iterator1>,             // [=freestanding]
                                              move_iterator<Iterator2>> = true;

  template<[[redoc("`:c>")]]semiregular S> class move_sentinel;                                      // [=freestanding]

  // [:en] [#iterators.common], common iterators \
  [:zh_CN] [#iterators.common]，公共迭代器
  template<[[redoc("`:c>")]]input_or_output_iterator I, [[redoc("`:c>")]]sentinel_for<I> S>
    requires (![[redoc("`:c>")]]same_as<I, S> && [[redoc("`:c>")]]copyable<I>)
      class common_iterator;                                                        // [=freestanding]

  template<class I, class S>
    struct incrementable_traits<common_iterator<I, S>>;                             // [=freestanding]

  template<[[redoc("`:c>")]]input_iterator I, class S>
    struct iterator_traits<common_iterator<I, S>>;                                  // [=freestanding]

  // [:en] [#default.sentinel], default sentinels \
  [:zh_CN] [#default.sentinel]，默认哨位
  struct default_sentinel_t;                                                        // [=freestanding]
  inline constexpr default_sentinel_t [[redoc("`:lib>")]]default_sentinel{};                           // [=freestanding]

  // [:en] [#iterators.counted], counted iterators \
  [:zh_CN] [#iterators.counted]，计数迭代器
  template<[[redoc("`:c>")]]input_or_output_iterator I> class counted_iterator;                      // [=freestanding]

  template<[[redoc("`:c>")]]input_iterator I>
    requires [[redoc("[=seebelow]")]]
    struct iterator_traits<counted_iterator<I>>;                                    // [=freestanding]

  // [:en] [#unreachable.sentinel], unreachable sentinels \
  [:zh_CN] [#unreachable.sentinel]，不可达哨位
  struct unreachable_sentinel_t;                                                    // [=freestanding]
  inline constexpr unreachable_sentinel_t [[redoc("`:lib>")]]unreachable_sentinel{};                   // [=freestanding]

  // [:en] [#stream.iterators], stream iterators \
  [:zh_CN] [#stream.iterators]，流迭代器
  template<class T, class charT = char, class traits = char_traits<charT>,
           class Distance = ptrdiff_t>
  class istream_iterator;
  template<class T, class charT, class traits, class Distance>
    bool operator==(const istream_iterator<T,charT,traits,Distance>& x,
                    const istream_iterator<T,charT,traits,Distance>& y);

  template<class T, class charT = char, class traits = char_traits<charT>>
    class ostream_iterator;

  template<class charT, class traits = char_traits<charT>>
    class istreambuf_iterator;
  template<class charT, class traits>
    bool operator==(const istreambuf_iterator<charT,traits>& a,
                    const istreambuf_iterator<charT,traits>& b);

  template<class charT, class traits = char_traits<charT>>
    class ostreambuf_iterator;

  // [:en] [#iterator.range], range access \
  [:zh_CN] [#iterator.range]，范围访问
  template<class C> constexpr auto begin(C& c) -> decltype(c.begin());              // [=freestanding]
  template<class C> constexpr auto begin(const C& c) -> decltype(c.begin());        // [=freestanding]
  template<class C> constexpr auto end(C& c) -> decltype(c.end());                  // [=freestanding]
  template<class C> constexpr auto end(const C& c) -> decltype(c.end());            // [=freestanding]
  template<class T, size_t N> constexpr T* begin(T (&array)[N]) noexcept;           // [=freestanding]
  template<class T, size_t N> constexpr T* end(T (&array)[N]) noexcept;             // [=freestanding]
  template<class C> constexpr auto cbegin(const C& c)                               // [=freestanding]
    noexcept(noexcept(std::begin(c))) -> decltype(std::begin(c));
  template<class C> constexpr auto cend(const C& c)                                 // [=freestanding]
    noexcept(noexcept(std::end(c))) -> decltype(std::end(c));
  template<class C> constexpr auto rbegin(C& c) -> decltype(c.rbegin());            // [=freestanding]
  template<class C> constexpr auto rbegin(const C& c) -> decltype(c.rbegin());      // [=freestanding]
  template<class C> constexpr auto rend(C& c) -> decltype(c.rend());                // [=freestanding]
  template<class C> constexpr auto rend(const C& c) -> decltype(c.rend());          // [=freestanding]
  template<class T, size_t N> constexpr reverse_iterator<T*> rbegin(T (&array)[N])  // [=freestanding]
  template<class T, size_t N> constexpr reverse_iterator<T*> rend(T (&array)[N]);   // [=freestanding]
  template<class E> constexpr reverse_iterator<const E*>
    rbegin(initializer_list<E> il);                                                 // [=freestanding]
  template<class E> constexpr reverse_iterator<const E*>
    rend(initializer_list<E> il);                                                   // [=freestanding]
  template<class C> constexpr auto
    crbegin(const C& c) -> decltype(std::rbegin(c));                                // [=freestanding]
  template<class C> constexpr auto
    crend(const C& c) -> decltype(std::rend(c));                                    // [=freestanding]

  template<class C> constexpr auto
    size(const C& c) -> decltype(c.size());                                         // [=freestanding]
  template<class T, size_t N> constexpr size_t
    size(const T (&array)[N]) noexcept;                                             // [=freestanding]

  template<class C> constexpr auto
    ssize(const C& c)
      -> common_type_t<ptrdiff_t, make_signed_t<decltype(c.size())>>;               // [=freestanding]
  template<class T, ptrdiff_t N> constexpr ptrdiff_t
    ssize(const T (&array)[N]) noexcept;                                            // [=freestanding]

  template<class C> constexpr auto
    empty(const C& c) -> decltype(c.empty());                                       // [=freestanding]
  template<class T, size_t N> constexpr bool
    empty(const T (&array)[N]) noexcept;                                            // [=freestanding]
  template<class E> constexpr bool
    empty(initializer_list<E> il) noexcept;                                         // [=freestanding]

  template<class C> constexpr auto data(C& c) -> decltype(c.data());                // [=freestanding]
  template<class C> constexpr auto data(const C& c) -> decltype(c.data());          // [=freestanding]
  template<class T, size_t N> constexpr T* data(T (&array)[N]) noexcept;            // [=freestanding]
  template<class E> constexpr const E* data(initializer_list<E> il) noexcept;       // [=freestanding]
}
[codeblock:end]
