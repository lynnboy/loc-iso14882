[section#iterator.concept.writable
    [:en] Concept [`:cname indirectly_writable]
    [:zh_CN] 概念 [`:cname indirectly_writable]
]

[para]
[:en] The [`:c indirectly_writable] concept specifies the requirements for
writing a value into an iterator[=']s referenced object.
[:zh_CN] [`:c indirectly_writable] 概念为将值写入到迭代器的引用对象给出了规定。

[codeblock:synopsis]
template<class Out, class T>
  concept [[redoc("`:c@def>")]]indirectly_writable =
    requires(Out&& o, T&& t) {
      *o = std::forward<T>(t);  // [:en] not required to be equality-preserving \
                                   [:zh_CN] 不必是维持相等性的
      *std::forward<Out>(o) = std::forward<T>(t);   // [:en] not required to be equality-preserving \
                                                       [:zh_CN] 不必是维持相等性的
      const_cast<const iter_reference_t<Out>&&>(*o) =
        std::forward<T>(t);     // [:en] not required to be equality-preserving \
                                   [:zh_CN] 不必是维持相等性的
      const_cast<const iter_reference_t<Out>&&>(*std::forward<Out>(o)) =
        std::forward<T>(t);     // [:en] not required to be equality-preserving \
                                   [:zh_CN] 不必是维持相等性的
    };
[codeblock:end]

[para]
[:en] Let [`E] be an expression such that [`decltype((E))] is [`T], and let [`o]
be a dereferenceable object of type [`Out].
[:zh_CN] 令 [`E] 为使得 [`decltype((E))] 为 [`T] 的表达式，并令 [`o] 为 [`Out]
类型的可解引用对象。

[:en] [`Out] and [`T] model [`[`:c indirectly_writable]<Out, T>] only if
[:zh_CN] 仅当符合以下条件时 [`Out] 和 [`T] 构成
[`[`:c indirectly_writable]<Out, T>]：

[list]
[item]
[:en] If [`Out] and [`T] model
[`[`:c indirectly_readable]<Out> && [`c same_as]<iter_value_t<Out>, decay_t<T>>],
then [`*o] after any above assignment is equal to the value of [`E] before the
assignment.
[:zh_CN] 当 [`Out] 和 [`T] 构成
[`[`:c indirectly_readable]<Out> && [`:c same_as]<iter_value_t<Out>, decay_t<T>>]
时，经过以上任何赋值后 [`*o] 等于 [`E] 在赋值之前的值。
[list:end]

[para]
[:en] After evaluating any above assignment expression, [`o] is not required to
be dereferenceable.
[:zh_CN] 经过对以上任何赋值表达式的求值之后，[`o] 不必是可解引用的。

[para]
[:en] If [`E] is an xvalue ([#basic.lval]), the resulting state of the object it
denotes is valid but unspecified ([#lib.types.movedfrom]).
[:zh_CN] 若 [`E] 是临期值（[#basic.lval]），则它所代表的对象的结果状态是有效但
未指明的（[#lib.types.movedfrom]）。

[para]
[begin:note]
[:en] The only valid use of an [`operator*] is on the left side of the
assignment statement.
[:zh_CN] [`operator*] 的唯一有效的使用是作为赋值语句的左边。

[:en] Assignment through the same value of the indirectly writable type happens
only once.
[:zh_CN] 通过间接可写类型的相同值所进行的赋值，仅能发生一次。
[end:note]

[para]
[begin:note]
[:en] [`:c indirectly_writable] has the awkward [`const_cast] expressions to
reject iterators with prvalue non-proxy reference types that permit rvalue
assignment but do not also permit [`const] rvalue assignment.
[:zh_CN] [`:c indirectly_writable] 所带有的别扭的 [`const_cast] 表达式，用以拒绝
带有纯右值非代理引用类型的迭代器，它们允许进行右值赋值但不同时允许 [`const] 右值
的赋值。

[:en] Consequently, an iterator type [`I] that returns [`std::string] by value
does not model [`[`:c indirectly_writable]<I, std::string>].
[:zh_CN] 因此，按值返回 [`std::string] 的迭代器类型 [`I] 并不能构成
[`[`:c indirectly_writable]<I, std::string>]。
[end:note]
