[section#insert.iter.ops
    [:en] Operations
    [:zh_CN] 操作
]

[%@library insert_iterator[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
constexpr insert_iterator(Container& x, ranges::iterator_t<Container> i);
[codeblock:end]

[div:description]
[para:effects]
[:en] Initializes [`container] with [`addressof(x)] and [`iter] with [`i].
[:zh_CN] 以 [`addressof(x)] 初始化 [`container] 并以 [`i] 初始化 [`iter]。
[div:end]

[%@library operator=[!insert_iterator]]
[%@library insert_iterator[!operator=]]
[codeblock:declaration]
constexpr insert_iterator& operator=(const typename Container::value_type& value);
[codeblock:end]

[div:description]
[para:effects]
[:en] As if by:
[:zh_CN] 如同执行：

[codeblock:notation]
iter = container->insert(iter, value);
++iter;
[codeblock:end]

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@library operator=[!insert_iterator]]
[%@library insert_iterator[!operator=]]
[codeblock:declaration]
constexpr insert_iterator& operator=(typename Container::value_type&& value);
[codeblock:end]

[div:description]
[para:effects]
[:en] As if by:
[:zh_CN] 如同执行：

[codeblock:notation]
iter = container->insert(iter, std::move(value));
++iter;
[codeblock:end]

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@library operator*[!insert_iterator]]
[%@library insert_iterator[!operator*]]
[codeblock:declaration]
constexpr insert_iterator& operator*();
[codeblock:end]

[div:description]
[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@library operator++[!insert_iterator]]
[%@library insert_iterator[!operator++]]
[codeblock:declaration]
constexpr insert_iterator& operator++();
constexpr insert_iterator& operator++(int);
[codeblock:end]

[div:description]
[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]
