[section#const.iterators.iterator
    [:en] Class template [`basic_const_iterator]
    [:zh_CN] 类模板 [`basic_const_iterator]
]

[codeblock:synopsis]
namespace std {
  template<class I>
    concept [[redoc("*:c>")]]not-a-const-iterator = [[redoc("[=seebelow]")]];

  template<[[redoc("`:c>")]]input_iterator Iterator>
  class [[redoc("`:lib>")]]basic_const_iterator {
    Iterator [[redoc("*>")]]current_ = Iterator();                             // [=expos]
    using [[redoc("*>")]]reference = iter_const_reference_t<Iterator>;         // [=expos]

  public:
    using iterator_concept = [[redoc("[=seebelow]")]];
    using iterator_category = [[redoc("[=seebelow]")]];  // [:en] not always present [:zh_CN] 不总是提供
    using value_type = iter_value_t<Iterator>;
    using difference_type = iter_difference_t<Iterator>;

    basic_const_iterator() requires [[redoc("`:c>")]]default_initializable<Iterator> = default;
    constexpr basic_const_iterator(Iterator current);
    template<[[redoc("`:c>")]]convertible_to<Iterator> U>
      constexpr basic_const_iterator(basic_const_iterator<U> current);
    template<[[redoc("*:c>")]]different-from<basic_const_iterator> T>
        requires [[redoc("`:c>")]]convertible_to<T, Iterator>
      constexpr basic_const_iterator(T&& current);

    constexpr const Iterator& base() const & noexcept;
    constexpr Iterator base() &&;

    constexpr [[redoc("*>")]]reference operator*() const;
    constexpr const value_type* operator->() const
       requires is_lvalue_reference_v<iter_reference_t<Iterator>> &&
                [[redoc("`:c>")]]same_as<remove_cvref_t<iter_reference_t<Iterator>>, value_type>;

    constexpr basic_const_iterator& operator++();
    constexpr void operator++(int);
    constexpr basic_const_iterator operator++(int) requires [[redoc("`:c>")]]forward_iterator<Iterator>;

    constexpr basic_const_iterator& operator--() requires [[redoc("`:c>")]]bidirectional_iterator<Iterator>;
    constexpr basic_const_iterator operator--(int) requires [[redoc("`:c>")]]bidirectional_iterator<Iterator>;

    constexpr basic_const_iterator& operator+=(difference_type n)
      requires [[redoc("`:c>")]]random_access_iterator<Iterator>;
    constexpr basic_const_iterator& operator-=(difference_type n)
      requires [[redoc("`:c>")]]random_access_iterator<Iterator>;

    constexpr [[redoc("*>")]]reference operator[](difference_type n) const
      requires [[redoc("`:c>")]]random_access_iterator<Iterator>;

    template<[[redoc("`:c>")]]sentinel_for<Iterator> S>
      friend constexpr bool operator==(const basic_const_iterator& x, const S& s);

    friend constexpr bool operator<(const basic_const_iterator& x, const basic_const_iterator& y)
      requires [[redoc("`:c>")]]random_access_iterator<Iterator>;
    friend constexpr bool operator>(const basic_const_iterator& x, const basic_const_iterator& y)
      requires [[redoc("`:c>")]]random_access_iterator<Iterator>;
    friend constexpr bool operator<=(const basic_const_iterator& x,
                                     const basic_const_iterator& y)
      requires [[redoc("`:c>")]]random_access_iterator<Iterator>;
    friend constexpr bool operator>=(const basic_const_iterator& x,
                                     const basic_const_iterator& y)
      requires [[redoc("`:c>")]]random_access_iterator<Iterator>;
    friend constexpr auto operator<=>(const basic_const_iterator& x,
                                      const basic_const_iterator& y)
      requires [[redoc("`:c>")]]random_access_iterator<Iterator> && [[redoc("`:c>")]]three_way_comparable<Iterator>;

    template<[[redoc("*:c>")]]different-from<basic_const_iterator> I>
      friend constexpr bool operator<(const basic_const_iterator& x, const I& y)
        requires [[redoc("`:c>")]]random_access_iterator<Iterator> && [[redoc("`:c>")]]totally_ordered_with<Iterator, I>;
    template<[[redoc("*:c>")]]different-from<basic_const_iterator> I>
      friend constexpr bool operator>(const basic_const_iterator& x, const I& y)
        requires [[redoc("`:c>")]]random_access_iterator<Iterator> && [[redoc("`:c>")]]totally_ordered_with<Iterator, I>;
    template<[[redoc("*:c>")]]different-from<basic_const_iterator> I>
      friend constexpr bool operator<=(const basic_const_iterator& x, const I& y)
        requires [[redoc("`:c>")]]random_access_iterator<Iterator> && [[redoc("`:c>")]]totally_ordered_with<Iterator, I>;
    template<[[redoc("*:c>")]]different-from<basic_const_iterator> I>
      friend constexpr bool operator>=(const basic_const_iterator& x, const I& y)
        requires [[redoc("`:c>")]]random_access_iterator<Iterator> && [[redoc("`:c>")]]totally_ordered_with<Iterator, I>;
    template<[[redoc("*:c>")]]not-a-const-iterator I>
      friend constexpr bool operator<(const I& x, const basic_const_iterator& y)
        requires [[redoc("`:c>")]]random_access_iterator<Iterator> && [[redoc("`:c>")]]totally_ordered_with<Iterator, I>;
    template<[[redoc("*:c>")]]not-a-const-iterator I>
      friend constexpr bool operator>(const I& x, const basic_const_iterator& y)
        requires [[redoc("`:c>")]]random_access_iterator<Iterator> && [[redoc("`:c>")]]totally_ordered_with<Iterator, I>;
    template<[[redoc("*:c>")]]not-a-const-iterator I>
      friend constexpr bool operator<=(const I& x, const basic_const_iterator& y)
        requires [[redoc("`:c>")]]random_access_iterator<Iterator> && [[redoc("`:c>")]]totally_ordered_with<Iterator, I>;
    template<[[redoc("*:c>")]]not-a-const-iterator I>
      friend constexpr bool operator>=(const I& x, const basic_const_iterator& y)
        requires [[redoc("`:c>")]]random_access_iterator<Iterator> && [[redoc("`:c>")]]totally_ordered_with<Iterator, I>;
    template<[[redoc("*:c>")]]different-from<basic_const_iterator> I>
      friend constexpr auto operator<=>(const basic_const_iterator& x, const I& y)
        requires [[redoc("`:c>")]]random_access_iterator<Iterator> && [[redoc("`:c>")]]totally_ordered_with<Iterator, I> &&
                 [[redoc("`:c>")]]three_way_comparable_with<Iterator, I>;

    friend constexpr basic_const_iterator operator+(const basic_const_iterator& i,
                                                    difference_type n)
      requires [[redoc("`:c>")]]random_access_iterator<Iterator>;
    friend constexpr basic_const_iterator operator+(difference_type n,
                                                    const basic_const_iterator& i)
      requires [[redoc("`:c>")]]random_access_iterator<Iterator>;
    friend constexpr basic_const_iterator operator-(const basic_const_iterator& i,
                                                    difference_type n)
      requires [[redoc("`:c>")]]random_access_iterator<Iterator>;
    template<[[redoc("`:c>")]]sized_sentinel_for<Iterator> S>
      friend constexpr difference_type operator-(const basic_const_iterator& x, const S& y);
    template<[[redoc("`:c>")]]sized_sentinel_for<Iterator> S>
      requires [[redoc("*:c>")]]different-from<S, basic_const_iterator>
      friend constexpr difference_type operator-(const S& x, const basic_const_iterator& y);
  };
}
[codeblock:end]

[para]
[:en] Given some type [`I], the concept [*:c@def not-a-const-iterator] is
defined as [`false] if [`I] is a specialization of [`basic_const_iterator] and
[`true] otherwise.
[:zh_CN] 给定某个类型 [`I]，概念 [*:c@def not-a-const-iterator] 在当 [`I] 为
[`basic_const_iterator] 的特例时被定义为 [`false]，否则为 [`true]。
