[section#counted.iter.cust
    [:en] Customization
    [:zh_CN] 定制化
]

[%@library iter_move[!counted_iterator]]
[%@library counted_iterator[!iter_move]]
[codeblock:declaration]
friend constexpr iter_rvalue_reference_t<I>
  iter_move(const counted_iterator& i)
    noexcept(noexcept(ranges::iter_move(i.current)))
    requires InputIterator<I>;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to: [`return ranges::iter_move(i.current);]
[:zh_CN] 等价于：[`return ranges::iter_move(i.current);]
[exit:description]

[%@library iter_swap[!counted_iterator]]
[%@library counted_iterator[!iter_swap]]
[codeblock:declaration]
template<IndirectlySwappable<I> I2>
  friend constexpr void
    iter_swap(const counted_iterator& x, const counted_iterator<I2>& y)
      noexcept(noexcept(ranges::iter_swap(x.current, y.current)));
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to: [`ranges::iter_swap(x.current, y.current)].
[:zh_CN] 等价于：[`ranges::iter_swap(x.current, y.current)]。
[exit:description]
