[section#iterator.range
    [:en] Range access
    [:zh_CN] 范围访问
]

[para]
[:en] In addition to being available via inclusion of the [`<iterator>] header,
the function templates in [#iterator.range] are available when any of the
following headers are included: [`<array>], [`<deque>], [`<forward_list>],
[`<list>], [`<map>], [`<regex>], [`<set>], [`<string>], [`<string_view>],
[`<unordered_map>], [`<unordered_set>], and [`<vector>].
[:zh_CN] 除了通过包含 [`<iterator>] 头文件使其可用之外，[#iterator.range] 中的
函数模板在包含了下列任何头文件时也可用：[`<array>]，[`<deque>]，
[`<forward_list>]，[`<list>]，[`<map>]，[`<regex>]，[`<set>]，[`<string>]，
[`<string_view>]，[`<unordered_map>]，[`<unordered_set>]，以及 [`<vector>]。

[%@library begin(C&)]
[codeblock:declaration]
template<class C> constexpr auto begin(C& c) -> decltype(c.begin());
template<class C> constexpr auto begin(const C& c) -> decltype(c.begin());
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`c.begin()].
[:zh_CN] [`c.begin()]。
[exit:description]

[%@library end(C&)]
[codeblock:declaration]
template<class C> constexpr auto end(C& c) -> decltype(c.end());
template<class C> constexpr auto end(const C& c) -> decltype(c.end());
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`c.end()].
[:zh_CN] [`c.end()]。
[exit:description]

[%@library begin(T (&)`[N`])]
[codeblock:declaration]
template<class T, size_t N> constexpr T* begin(T (&array)[N]) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`array].
[:zh_CN] [`array]。
[exit:description]

[%@library end(T (&)`[N`])]
[codeblock:declaration]
template<class T, size_t N> constexpr T* end(T (&array)[N]) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`array + N].
[:zh_CN] [`array + N]。
[exit:description]

[%@library cbegin(const C&)]
[codeblock:declaration]
template<class C> constexpr auto cbegin(const C& c) noexcept(noexcept(std::begin(c)))
  -> decltype(std::begin(c));
[codeblock:end]
[enter:description]
[para:returns]
[:en] [`std::begin(c)].
[:zh_CN] [`std::begin(c)]。
[exit:description]

[%@library cend(const C&)]
[codeblock:declaration]
template<class C> constexpr auto cend(const C& c) noexcept(noexcept(std::end(c)))
  -> decltype(std::end(c));
[codeblock:end]
[enter:description]
[para:returns]
[:en] [`std::end(c)].
[:zh_CN] [`std::end(c)]。
[exit:description]

[%@library rbegin(C&)]
[codeblock:declaration]
template<class C> constexpr auto rbegin(C& c) -> decltype(c.rbegin());
template<class C> constexpr auto rbegin(const C& c) -> decltype(c.rbegin());
[codeblock:end]
[enter:description]
[para:returns]
[:en] [`c.rbegin()].
[:zh_CN] [`c.rbegin()]。
[exit:description]

[%@library rend(const C&)]
[codeblock:declaration]
template<class C> constexpr auto rend(C& c) -> decltype(c.rend());
template<class C> constexpr auto rend(const C& c) -> decltype(c.rend());
[codeblock:end]
[enter:description]
[para:returns]
[:en] [`c.rend()].
[:zh_CN] [`c.rend()]。
[exit:description]

[%@library rbegin(T (&array)[N'])]
[codeblock:declaration]
template<class T, size_t N> constexpr reverse_iterator<T*> rbegin(T (&array)[N]);
[codeblock:end]
[enter:description]
[para:returns]
[:en] [`reverse_iterator<T*>(array + N)].
[:zh_CN] [`reverse_iterator<T*>(array + N)]。
[exit:description]

[%@library rend(T (&array)[N'])]
[codeblock:declaration]
template<class T, size_t N> constexpr reverse_iterator<T*> rend(T (&array)[N]);
[codeblock:end]
[enter:description]
[para:returns]
[:en] [`reverse_iterator<T*>(array)].
[:zh_CN] [`reverse_iterator<T*>(array)]。
[exit:description]

[%@library rbegin(initializer_list<E>)]
[codeblock:declaration]
template<class E> constexpr reverse_iterator<const E*> rbegin(initializer_list<E> il);
[codeblock:end]
[enter:description]
[para:returns]
[:en] [`reverse_iterator<const E*>(il.end())].
[:zh_CN] [`reverse_iterator<const E*>(il.end())]。
[exit:description]

[%@library rend(initializer_list<E>)]
[codeblock:declaration]
template<class E> constexpr reverse_iterator<const E*> rend(initializer_list<E> il);
[codeblock:end]
[enter:description]
[para:returns]
[:en] [`reverse_iterator<const E*>(il.begin())].
[:zh_CN] [`reverse_iterator<const E*>(il.begin())]。
[exit:description]

[%@library crbegin(const C& c)]
[codeblock:declaration]
template<class C> constexpr auto crbegin(const C& c) -> decltype(std::rbegin(c));
[codeblock:end]
[enter:description]
[para:returns]
[:en] [`std::rbegin(c)].
[:zh_CN] [`std::rbegin(c)]。
[exit:description]

[%@library crend(const C& c)]
[codeblock:declaration]
template<class C> constexpr auto crend(const C& c) -> decltype(std::rend(c));
[codeblock:end]
[enter:description]
[para:returns]
[:en] [`std::rend(c)].
[:zh_CN] [`std::rend(c)]。
[exit:description]
