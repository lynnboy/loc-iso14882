[section#iterator.range
    [:en] Range access
    [:zh_CN] 范围访问
]

[para]
[:en] In addition to being available via inclusion of the [?libheader iterator]
header, the function templates in [#iterator.range] are available when any of
the following headers are included:
[?libheader@ref array],
[?libheader@ref deque],
[?libheader@ref#flat.map.syn flat_map],
[?libheader@ref#flat.set.syn flat_set],
[?libheader@ref#forward.list.syn forward_list],
[?libheader@ref#inplace.vector.syn inplace_vector],
[?libheader@ref list],
[?libheader@ref#associative.map.syn map],
[?libheader@ref#re.syn regex],
[?libheader@ref#associative.set.syn set],
[?libheader@ref span],
[?libheader@ref string],
[?libheader@ref#string.view.synop string_view],
[?libheader@ref#unord.map.syn unordered_map],
[?libheader@ref#unord.set.syn unordered_set], and
[?libheader@ref vector].
[:zh_CN] 除了通过包含 [?libheader iterator] 头文件使其可用之外，[#iterator.range]
中的函数模板在包含了下列任何头文件时也可用：
[?libheader@ref array]，
[?libheader@ref deque]，
[?libheader@ref#flat.map.syn flat_map]，
[?libheader@ref#flat.set.syn flat_set]，
[?libheader@ref#forward.list.syn forward_list]，
[?libheader@ref#inplace.vector.syn inplace_vector]，
[?libheader@ref list]，
[?libheader@ref#associative.map.syn map]，
[?libheader@ref#re.syn regex]，
[?libheader@ref#associative.set.syn set]，
[?libheader@ref span]，
[?libheader@ref string]，
[?libheader@ref#string.view.synop string_view]，
[?libheader@ref#unord.map.syn unordered_map]，
[?libheader@ref#unord.set.syn unordered_set]，以及
[?libheader@ref vector]。

[%@lib begin(C&)]
[codeblock:declaration]
template<class C> constexpr auto begin(C& c) -> decltype(c.begin());
template<class C> constexpr auto begin(const C& c) -> decltype(c.begin());
[codeblock:end]

[div:description]
[para:returns]
[:en] [`c.begin()].
[:zh_CN] [`c.begin()]。
[div:end]

[%@lib end(C&)]
[codeblock:declaration]
template<class C> constexpr auto end(C& c) -> decltype(c.end());
template<class C> constexpr auto end(const C& c) -> decltype(c.end());
[codeblock:end]

[div:description]
[para:returns]
[:en] [`c.end()].
[:zh_CN] [`c.end()]。
[div:end]

[%@lib begin(T (&)`[N`])]
[codeblock:declaration]
template<class T, size_t N> constexpr T* begin(T (&array)[N]) noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`array].
[:zh_CN] [`array]。
[div:end]

[%@lib end(T (&)`[N`])]
[codeblock:declaration]
template<class T, size_t N> constexpr T* end(T (&array)[N]) noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`array + N].
[:zh_CN] [`array + N]。
[div:end]

[%@lib cbegin(const C&)]
[codeblock:declaration]
template<class C> constexpr auto cbegin(const C& c) noexcept(noexcept(std::begin(c)))
  -> decltype(std::begin(c));
[codeblock:end]
[div:description]
[para:returns]
[:en] [`std::begin(c)].
[:zh_CN] [`std::begin(c)]。
[div:end]

[%@lib cend(const C&)]
[codeblock:declaration]
template<class C> constexpr auto cend(const C& c) noexcept(noexcept(std::end(c)))
  -> decltype(std::end(c));
[codeblock:end]
[div:description]
[para:returns]
[:en] [`std::end(c)].
[:zh_CN] [`std::end(c)]。
[div:end]

[%@lib rbegin(C&)]
[codeblock:declaration]
template<class C> constexpr auto rbegin(C& c) -> decltype(c.rbegin());
template<class C> constexpr auto rbegin(const C& c) -> decltype(c.rbegin());
[codeblock:end]
[div:description]
[para:returns]
[:en] [`c.rbegin()].
[:zh_CN] [`c.rbegin()]。
[div:end]

[%@lib rend(const C&)]
[codeblock:declaration]
template<class C> constexpr auto rend(C& c) -> decltype(c.rend());
template<class C> constexpr auto rend(const C& c) -> decltype(c.rend());
[codeblock:end]
[div:description]
[para:returns]
[:en] [`c.rend()].
[:zh_CN] [`c.rend()]。
[div:end]

[%@lib rbegin(T (&array)`[N`])]
[codeblock:declaration]
template<class T, size_t N> constexpr reverse_iterator<T*> rbegin(T (&array)[N]);
[codeblock:end]
[div:description]
[para:returns]
[:en] [`reverse_iterator<T*>(array + N)].
[:zh_CN] [`reverse_iterator<T*>(array + N)]。
[div:end]

[%@lib rend(T (&array)`[N`])]
[codeblock:declaration]
template<class T, size_t N> constexpr reverse_iterator<T*> rend(T (&array)[N]);
[codeblock:end]
[div:description]
[para:returns]
[:en] [`reverse_iterator<T*>(array)].
[:zh_CN] [`reverse_iterator<T*>(array)]。
[div:end]

[%@lib rbegin(initializer_list<E>)]
[codeblock:declaration]
template<class E> constexpr reverse_iterator<const E*> rbegin(initializer_list<E> il);
[codeblock:end]
[div:description]
[para:returns]
[:en] [`reverse_iterator<const E*>(il.end())].
[:zh_CN] [`reverse_iterator<const E*>(il.end())]。
[div:end]

[%@lib rend(initializer_list<E>)]
[codeblock:declaration]
template<class E> constexpr reverse_iterator<const E*> rend(initializer_list<E> il);
[codeblock:end]
[div:description]
[para:returns]
[:en] [`reverse_iterator<const E*>(il.begin())].
[:zh_CN] [`reverse_iterator<const E*>(il.begin())]。
[div:end]

[%@lib crbegin(const C& c)]
[codeblock:declaration]
template<class C> constexpr auto crbegin(const C& c) -> decltype(std::rbegin(c));
[codeblock:end]
[div:description]
[para:returns]
[:en] [`std::rbegin(c)].
[:zh_CN] [`std::rbegin(c)]。
[div:end]

[%@lib crend(const C& c)]
[codeblock:declaration]
template<class C> constexpr auto crend(const C& c) -> decltype(std::rend(c));
[codeblock:end]
[div:description]
[para:returns]
[:en] [`std::rend(c)].
[:zh_CN] [`std::rend(c)]。
[div:end]

[%@lib size(C& c)]
[codeblock:declaration]
template<class C> constexpr auto size(const C& c) -> decltype(c.size());
[codeblock:end]
[div:description]
[para:returns]
[:en] [`c.size()].
[:zh_CN] [`c.size()]。
[div:end]

[%@lib size(T (&array)`[N`])]
[codeblock:declaration]
template<class T, size_t N> constexpr size_t size(const T (&array)[N]) noexcept;
[codeblock:end]
[div:description]
[para:returns]
[:en] [`N].
[:zh_CN] [`N]。
[div:end]

[%@lib ssize(C& c)]
[codeblock:declaration]
template<class C> constexpr auto ssize(const C& c)
  -> common_type_t<ptrdiff_t, make_signed_t<decltype(c.size())>>;
[codeblock:end]
[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return static_cast<common_type_t<ptrdiff_t, make_signed_t<decltype(c.size())>>>(c.size());
[codeblock:end]
[div:end]

[%@lib ssize(T (&array)`[N`])]
[codeblock:declaration]
template<class T, ptrdiff_t N> constexpr ptrdiff_t ssize(const T (&array)[N]) noexcept;
[codeblock:end]
[div:description]
[para:returns]
[:en] [`N].
[:zh_CN] [`N]。
[div:end]

[%@lib empty(C& c)]
[codeblock:declaration]
template<class C> constexpr auto empty(const C& c) -> decltype(c.empty());
[codeblock:end]
[div:description]
[para:returns]
[:en] [`c.empty()].
[:zh_CN] [`c.empty()]。
[div:end]

[%@lib empty(T (&array)`[N`])]
[codeblock:declaration]
template<class T, size_t N> constexpr bool empty(const T (&array)[N]) noexcept;
[codeblock:end]
[div:description]
[para:returns]
[:en] [`false].
[:zh_CN] [`false]。
[div:end]

[%@lib empty(initializer_list<E>)]
[codeblock:declaration]
template<class E> constexpr bool empty(initializer_list<E> il) noexcept;
[codeblock:end]
[div:description]
[para:returns]
[:en] [`il.size() == 0].
[:zh_CN] [`il.size() == 0]。
[div:end]

[%@lib data(C& c)]
[codeblock:declaration]
template<class C> constexpr auto data(C& c) -> decltype(c.data());
template<class C> constexpr auto data(const C& c) -> decltype(c.data());
[codeblock:end]
[div:description]
[para:returns]
[:en] [`c.data()].
[:zh_CN] [`c.data()]。
[div:end]

[%@lib data(T (&array)`[N`])]
[codeblock:declaration]
template<class T, size_t N> constexpr T* data(T (&array)[N]) noexcept;
[codeblock:end]
[div:description]
[para:returns]
[:en] [`array].
[:zh_CN] [`array]。
[div:end]

[%@lib data(initializer_list<E>)]
[codeblock:declaration]
template<class E> constexpr const E* data(initializer_list<E> il) noexcept;
[codeblock:end]
[div:description]
[para:returns]
[:en] [`il.begin()].
[:zh_CN] [`il.begin()]。
[div:end]
