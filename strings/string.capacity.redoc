[section#string.capacity
    [:en] [`basic_string] capacity
    [:zh_CN] [`basic_string] 的容量
]

[%@library basic_string[!size]]
[%@library size[!basic_string]]
[codeblock:declaration]
size_type size() const noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] A count of the number of char-like objects currently in the string.
[:zh_CN] 对当前字符串中的字符式对象个数的计数。

[para:complexity]
[:en] Constant time.
[:zh_CN] 常量时间。
[exit:description]

[%@library length[!basic_string]]
[%@library basic_string[!length]]
[codeblock:declaration]
size_type length() const noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`size()].
[:zh_CN] [`size()]。
[exit:description]

[%@library basic_string[!max_size]]
[%@library max_size[!basic_string]]
[codeblock:declaration]
size_type max_size() const noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] The largest possible number of char-like objects that can be stored in a
[`basic_string].
[:zh_CN] [`basic_string] 中可以存储的字符式对象的最大可能数量。

[para:complexity]
[:en] Constant time.
[:zh_CN] 常量时间。
[exit:description]

[%@library basic_string[!resize]]
[%@library resize[!basic_string]]
[codeblock:declaration]
void resize(size_type n, charT c);
[codeblock:end]

[enter:description]
[para:throws]
[:en] [`length_error] if [`n > max_size()].
[:zh_CN] 当 [`n > max_size()] 时抛出 [`length_error]。

[para:effects]
[:en] Alters the length of the string designated by [`*this] as follows:
[:zh_CN] 以如下方式改变由 [`*this] 所代表的字符串的长度：

[list]
[item]
[:en] If [`n <= size()], the function replaces the string designated by [`*this]
with a string of length [`n] whose elements are a copy of the initial elements
of the original string designated by [`*this].
[:zh_CN] 如果 [`n <= size()]，则该函数把由 [`*this] 所代表的字符串替换为长度为
[`n] 的字符串，其元素是由 [`*this] 所代表的原字符串的开头元素的副本。

[item]
[:en] If [`n > size()], the function replaces the string designated by [`*this]
with a string of length [`n] whose first [`size()] elements are a copy of the
original string designated by [`*this], and whose remaining elements are all
initialized to [`c].
[:zh_CN] 如果 [`n > size()]，则该函数把由 [`*this] 所代表的字符串替换为长度为
[`n] 的字符串，其前 [`size()] 个元素是由 [`*this] 所代表的原字符串的副本，而剩余
元素被初始化为 [`c]。
[list:end]
[exit:description]

[%@library resize[!basic_string]]
[%@library basic_string[!resize]]
[codeblock:declaration]
void resize(size_type n);
[codeblock:end]

[enter:description]
[para:effects]
[:en] As if by [`resize(n, charT())].
[:zh_CN] 如同执行 [`resize(n, charT())]。
[exit:description]

[%@library basic_string[!capacity]]
[%@library capacity[!basic_string]]
[codeblock:declaration]
size_type capacity() const noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] The size of the allocated storage in the string.
[:zh_CN] 字符串中已分配存储的大小。
[exit:description]

[%@library basic_string[!reserve]]
[%@library reserve[!basic_string]]
[codeblock:declaration]
void reserve(size_type res_arg=0);
[codeblock:end]

[enter:description]
[para]
[:en] The member function [`reserve()] is a directive that informs a
[`basic_string] object of a planned change in size, so that it can manage the
storage allocation accordingly.
[:zh_CN] 成员函数 [`reserve()] 是用以告知 [`basic_string] 对象进行按计划的大小
调整的指令，使其能够据此管理存储分配。

[para:effects]
[:en] After [`reserve()], [`capacity()] is greater or equal to the argument of
[`reserve].
[:zh_CN] 
[`reserve()] 之后，[`capacity()] 大于或等于 [`reserve] 的实参。

[enter:note]
[:en] Calling [`reserve()] with a [`res_arg] argument less than [`capacity()]
is in effect a non-binding shrink request.
[:zh_CN] 以小于 [`capacity()] 的实参 [`res_arg] 调用 [`reserve()] 的效果是一种
不具有约束力的收缩请求。

[:en] A call with [`res_arg <= size()] is in effect a non-binding shrink-to-fit
request.
[:zh_CN] 以 [`res_arg <= size()] 进行调用的效果是一种不具有约束力的收缩至合适
大小的请求。
[exit:note]

[para:throws]
[:en] [`length_error] if [`res_arg > max_size()].[#:note#fn:$section.1]
[:zh_CN] 当 [`res_arg > max_size()] 时抛出 [`length_error]。
[#:note#fn:$section.1]

[note:foot#fn:$section.1]
[:en]
[`reserve()] uses [`allocator_traits<Allocator>::allocate()] which may throw an
appropriate exception.
[:zh_CN] 
[`reserve()] 使用 [`allocator_traits<Allocator>::allocate()]，并可能抛出适当的
异常。
[note:end]
[exit:description]

[%@library basic_string[!shrink_to_fit]]
[%@library shrink_to_fit[!basic_string]]
[codeblock:declaration]
void shrink_to_fit();
[codeblock:end]

[enter:description]
[para:effects]
[:en] [`shrink_to_fit] is a non-binding request to reduce [`capacity()] to
[`size()].
[:zh_CN] [`shrink_to_fit] 是一种不具有约束力的将 [`capacity()] 缩减至 [`size()]
的请求。

[enter:note]
[:en] The request is non-binding to allow latitude for implementation-specific
optimizations.
[:zh_CN] 该请求不具约束力，以允许进行特定于实现的优化。
[exit:note]

[:en] It does not increase [`capacity()], but may reduce [`capacity()]
by causing reallocation.
[:zh_CN] 它不会增加 [`capacity()]，但可能通过引发重新分配而减少 [`capacity()]。

[para:complexity]
[:en] Linear in the size of the sequence.
[:zh_CN] 对于序列的大小是线性的。

[para:remarks]
[:en] Reallocation invalidates all the references, pointers, and iterators
referring to the elements in the sequence as well as the past-the-end iterator.
[:zh_CN] 重新分配将使得指代该序列中的元素的引用、指针和迭代器，以及‘越过末尾’
迭代器都会失效。

[:en] If no reallocation happens, they remain valid.
[:zh_CN] 当未发生重新分配时，它们保持有效。
[exit:description]

[%@library basic_string[!clear]]
[%@library clear[!basic_string]]
[codeblock:declaration]
void clear() noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Behaves as if the function calls:
[:zh_CN] 其行为如同以下的函数调用：

[codeblock:notation]
erase(begin(), end());
[codeblock:end]
[exit:description]

[%@library basic_string[!empty]]
[%@library empty[!basic_string]]
[codeblock:declaration]
[[nodiscard]] bool empty() const noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`size() == 0].
[:zh_CN] [`size() == 0]。
[exit:description]
