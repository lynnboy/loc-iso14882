[section#string.capacity
    [:en] Capacity
    [:zh_CN] 容量
]

[%@library basic_string[!size]]
[%@library size[!basic_string]]
[%@library length[!basic_string]]
[%@library basic_string[!length]]
[codeblock:declaration]
constexpr size_type size() const noexcept;
constexpr size_type length() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] A count of the number of char-like objects currently in the string.
[:zh_CN] 对当前字符串中的字符式对象个数的计数。

[para:complexity]
[:en] Constant time.
[:zh_CN] 常量时间。
[div:end]

[%@library basic_string[!max_size]]
[%@library max_size[!basic_string]]
[codeblock:declaration]
constexpr size_type max_size() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] The largest possible number of char-like objects that can be stored in a
[`basic_string].
[:zh_CN] [`basic_string] 中可以存储的字符式对象的最大可能数量。

[para:complexity]
[:en] Constant time.
[:zh_CN] 常量时间。
[div:end]

[%@library basic_string[!resize]]
[%@library resize[!basic_string]]
[codeblock:declaration]
constexpr void resize(size_type n, charT c);
[codeblock:end]

[div:description]
[para:effects]
[:en] Alters the value of [`*this] as follows:
[:zh_CN] 以如下方式改变 [`*this] 的值：

[list]
[item]
[:en] If [`n <= size()], erases the last [`size() - n] elements.
[:zh_CN] 如果 [`n <= size()]，则擦除最后 [`size() - n] 个元素。

[item]
[:en] If [`n > size()], appends [`n - size()] copies of [`c].
[:zh_CN] 如果 [`n > size()]，则追加 [`n - size()] 个 [`c] 的副本。
[list:end]
[div:end]

[%@library resize[!basic_string]]
[%@library basic_string[!resize]]
[codeblock:declaration]
constexpr void resize(size_type n);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to [`resize(n, charT())].
[:zh_CN] 等价于 [`resize(n, charT())]。
[div:end]

[%@library basic_string[!capacity]]
[%@library capacity[!basic_string]]
[codeblock:declaration]
constexpr size_type capacity() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] The size of the allocated storage in the string.
[:zh_CN] 字符串中已分配存储的大小。

[para:complexity]
[:en] Constant time.
[:zh_CN] 常量时间。
[div:end]

[%@library basic_string[!reserve]]
[%@library reserve[!basic_string]]
[codeblock:declaration]
constexpr void reserve(size_type res_arg);
[codeblock:end]

[div:description]
[para:effects]
[:en] A directive that informs a [`basic_string] of a planned change in size,
so that the storage allocation can be managed accordingly.
[:zh_CN] 用以告知 [`basic_string] 进行按计划的大小调整的指令，使其能够据此管理
存储分配。

[:en] After [`reserve()], [`capacity()] is greater or equal to the argument of
[`reserve] if reallocation happens; and equal to the previous value of
[`capacity()] otherwise.
[:zh_CN] 
[`reserve()] 之后，如果发生了重新分配则 [`capacity()] 大于或等于 [`reserve] 的
实参；否则等于 [`capacity()] 之前的值。

[:en] Reallocation happens at this point if and only if the current capacity is
less than the argument of [`reserve()].
[:zh_CN] 当且仅当当前容量小于 [`reserve()] 的实参时发生重新分配。
[end:note]

[para:throws]
[:en] [`length_error] if [`res_arg > max_size()] or any exceptions thrown by
[`allocator_traits<Allocator>::allocate].
[:zh_CN] 当 [`res_arg > max_size()] 时抛出 [`length_error]，亦或抛出由
[`allocator_traits<Allocator>::allocate] 所抛出的任何异常。
[div:end]

[%@library basic_string[!shrink_to_fit]]
[%@library shrink_to_fit[!basic_string]]
[codeblock:declaration]
constexpr void shrink_to_fit();
[codeblock:end]

[div:description]
[para:effects]
[:en] [`shrink_to_fit] is a non-binding request to reduce [`capacity()] to
[`size()].
[:zh_CN] [`shrink_to_fit] 是一种不具有约束力的将 [`capacity()] 缩减至 [`size()]
的请求。

[begin:note]
[:en] The request is non-binding to allow latitude for implementation-specific
optimizations.
[:zh_CN] 该请求不具约束力，以允许进行实现特有的优化。
[end:note]

[:en] It does not increase [`capacity()], but may reduce [`capacity()]
by causing reallocation.
[:zh_CN] 它不会增加 [`capacity()]，但可能通过引发重新分配而减少 [`capacity()]。

[para:complexity]
[:en] If the size is not equal to the old capacity, linear in the size of the
sequence; otherwise constant.
[:zh_CN] 如果其大小不等于原容量，则对于序列的大小是线性的；否则为常量。

[para:remarks]
[:en] Reallocation invalidates all the references, pointers, and iterators
referring to the elements in the sequence, as well as the past-the-end iterator.
[:zh_CN] 重新分配将使得指代该序列中的元素的引用、指针和迭代器，以及‘越过末尾’
迭代器都会失效。

[begin:note]
[:en] If no reallocation happens, they remain valid.
[:zh_CN] 当未发生重新分配时，它们保持有效。
[end:note]
[div:end]

[%@library basic_string[!clear]]
[%@library clear[!basic_string]]
[codeblock:declaration]
constexpr void clear() noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`erase(begin(), end());]
[:zh_CN] 等价于：[`erase(begin(), end());]
[div:end]

[%@library basic_string[!empty]]
[%@library empty[!basic_string]]
[codeblock:declaration]
[[nodiscard]] constexpr bool empty() const noexcept;
[codeblock:end]

[div:description]
[para:expects]
[:en] [`pos <= size()].
[:zh_CN] [`pos <= size()]。

[para:returns]
[:en] [`size() == 0].
[:zh_CN] [`size() == 0]。
[div:end]
