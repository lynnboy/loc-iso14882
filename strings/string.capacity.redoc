[section#string.capacity
    [:en] Capacity
    [:zh_CN] 容量
]

[%@lib@member size[!basic_string]]
[%@lib@member length[!basic_string]]
[codeblock:declaration]
constexpr size_type size() const noexcept;
constexpr size_type length() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] A count of the number of char-like objects currently in the string.
[:zh_CN] 对当前字符串中的字符式对象个数的计数。

[para:complexity]
[:en] Constant time.
[:zh_CN] 常量时间。
[div:end]

[%@lib@member max_size[!basic_string]]
[codeblock:declaration]
constexpr size_type max_size() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] The largest possible number of char-like objects that can be stored in a
[`basic_string].
[:zh_CN] [`basic_string] 中可以存储的字符式对象的最大可能数量。

[para:complexity]
[:en] Constant time.
[:zh_CN] 常量时间。
[div:end]

[%@lib@member resize[!basic_string]]
[codeblock:declaration]
constexpr void resize(size_type n, charT c);
[codeblock:end]

[div:description]
[para:effects]
[:en] Alters the value of [`*this] as follows:
[:zh_CN] 以如下方式改变 [`*this] 的值：

[list]
[item]
[:en] If [`n <= size()], erases the last [`size() - n] elements.
[:zh_CN] 如果 [`n <= size()]，则擦除最后 [`size() - n] 个元素。

[item]
[:en] If [`n > size()], appends [`n - size()] copies of [`c].
[:zh_CN] 如果 [`n > size()]，则追加 [`n - size()] 个 [`c] 的副本。
[list:end]
[div:end]

[%@lib@member resize[!basic_string]]
[codeblock:declaration]
constexpr void resize(size_type n);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to [`resize(n, charT())].
[:zh_CN] 等价于 [`resize(n, charT())]。
[div:end]

[%@lib@member resize_and_overwrite[!basic_string]]
[codeblock:declaration]
template<class Operation> constexpr void resize_and_overwrite(size_type n, Operation op);
[codeblock:end]

[div:description]
[para]
[:en] Let
[:zh_CN] 令
[list]
[item]
[:en] [`o = size()] before the call to [`resize_and_overwrite].
[:zh_CN] [`o = size()] 在 [`resize_and_overwrite] 之前的值。
[item]
[:en] [`k] be [`min(o, n)].
[:zh_CN] [`k] 为 [`min(o, n)]。
[item]
[:en] [`p] be a value of type [`charT*] or [`charT* const], such that the range
[=crange(p,p + n)] is valid and [`this->compare(0, k, p, k) == 0] is [`true]
before the call.
[:zh_CN] [`p] 为一个 [`charT*] 或 [`charT* const] 类型的值，使得范围
[=crange(p,p + n)] 在调用之前有效且 [`this->compare(0, k, p, k) == 0] 为 [`true]。
[:en] The values in the range [=crange(p + k,p + n)] may be indeterminate
([#basic.indet]).
[:zh_CN] 范围 [=crange(p + k,p + n)] 中的值可以是不确定的（[#basic.indet]）。
[item]
[:en] [`m] be a value of type [`size_type] or [`const size_type] equal to [`n].
[:zh_CN] [`m] 为等于 [`n] 的 [`size_type] 或 [`const size_type] 类型的值。
[item]
[:en] [`[^OP]] be the expression [`std::move(op)(p, m)].
[:zh_CN] [`[^OP]] 为表达式 [`std::move(op)(p, m)]。
[item]
[:en] [`r] = [`[^OP]].
[:zh_CN] [`r] = [`[^OP]]。
[list:end]

[para:mandates]
[:en] [`[^OP]] has an integer-like type ([#iterator.concept.winc]).
[:zh_CN] [`[^OP]] 具有整数式类型（[#iterator.concept.winc]）.

[para:expects]
[list]
[item]
[:en] [`[^OP]] does not throw an exception or modify [`p] or [`m].
[:zh_CN] [`[^OP]] 不会抛出异常，或者修改 [`p] 或 [`m]。
[item]
[:en] [$[`r] \geq 0].
[:zh_CN] [$[`r] \geq 0]。
[item]
[:en] [$[`r] \leq [`m]].
[:zh_CN] [$[`r] \leq [`m]]。
[item]
[:en] After evaluating [`[^OP]] there are no indeterminate values in the range
[=range(p,p + r)].
[:zh_CN] 对 [`[^OP]] 求值之后，范围 [=range(p,p + r)] 中没有不确定值。
[list:end]

[para:effects]
[:en] Evaluates [`[^OP]], replaces the contents of [`*this] with [=range(p,p + r)],
and invalidates all pointers and references to the range [=crange(p,p + n)].
[:zh_CN] 求值 [`[^OP]]，将 [`*this] 的内容替换为 [=range(p,p + r)]，并使指向范围
[=crange(p,p + n)] 中的所有指针和引用失效。

[para:recommended]
[:en] Implementations should avoid unnecessary copies and allocations by,
for example, making [`p] a pointer into internal storage and by restoring
[`*(p + r)] to [`charT()] after evaluating [`[^OP]].
[:zh_CN] 各实现最好避免不必要的复制和分配，比如可以使 [`p] 为一个指向内部存储的
指针，以及在求值 [`[^OP]] 之后将 [`*(p + r)] 恢复为 [`char()]。
[list:end]

[%@lib@member capacity[!basic_string]]
[codeblock:declaration]
constexpr size_type capacity() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] The size of the allocated storage in the string.
[:zh_CN] 字符串中已分配存储的大小。

[para:complexity]
[:en] Constant time.
[:zh_CN] 常量时间。
[div:end]

[%@lib@member reserve[!basic_string]]
[codeblock:declaration]
constexpr void reserve(size_type res_arg);
[codeblock:end]

[div:description]
[para:effects]
[:en] A directive that informs a [`basic_string] of a planned change in size,
so that the storage allocation can be managed accordingly.
[:zh_CN] 用以告知 [`basic_string] 进行按计划的大小调整的指令，使其能够据此管理
存储分配。

[:en] Following a call to [`reserve], [`capacity()] is greater or equal to the
argument of [`reserve] if reallocation happens; and equal to the previous value
of [`capacity()] otherwise.
[:zh_CN] 调用 [`reserve] 之后，如果发生了重新分配则 [`capacity()] 大于或等于
[`reserve] 的实参；否则等于 [`capacity()] 之前的值。

[:en] Reallocation happens at this point if and only if the current capacity is
less than the argument of [`reserve].
[:zh_CN] 当且仅当当前容量小于 [`reserve] 的实参时发生重新分配。

[para:throws]
[:en] [`length_error] if [`res_arg > max_size()] or any exceptions thrown by
[`allocator_traits<Allocator>::allocate].
[:zh_CN] 当 [`res_arg > max_size()] 时抛出 [`length_error]，或者抛出由
[`allocator_traits<Allocator>::allocate] 所抛出的任何异常。
[div:end]

[%@lib@member shrink_to_fit[!basic_string]]
[codeblock:declaration]
constexpr void shrink_to_fit();
[codeblock:end]

[div:description]
[para:effects]
[:en] [`shrink_to_fit] is a non-binding request to reduce [`capacity()] to
[`size()].
[:zh_CN] [`shrink_to_fit] 是一种不具有约束力的将 [`capacity()] 缩减至 [`size()]
的请求。

[begin:note]
[:en] The request is non-binding to allow latitude for implementation-specific
optimizations.
[:zh_CN] 该请求不具约束力，以允许进行实现特有的优化。
[end:note]

[:en] It does not increase [`capacity()], but may reduce [`capacity()]
by causing reallocation.
[:zh_CN] 它不会增加 [`capacity()]，但可能通过引发重新分配而减少 [`capacity()]。

[para:complexity]
[:en] If the size is not equal to the old capacity, linear in the size of the
sequence; otherwise constant.
[:zh_CN] 如果其大小不等于原容量，则对于序列的大小是线性的；否则为常量。

[para:remarks]
[:en] Reallocation invalidates all the references, pointers, and iterators
referring to the elements in the sequence, as well as the past-the-end iterator.
[:zh_CN] 重新分配将使得指代该序列中的元素的引用、指针和迭代器，以及‘越过末尾’
迭代器都会失效。

[begin:note]
[:en] If no reallocation happens, they remain valid.
[:zh_CN] 当未发生重新分配时，它们保持有效。
[end:note]
[div:end]

[%@lib@member clear[!basic_string]]
[codeblock:declaration]
constexpr void clear() noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`erase(begin(), end());]
[:zh_CN] 等价于：[`erase(begin(), end());]
[div:end]

[%@lib@member empty[!basic_string]]
[codeblock:declaration]
[[nodiscard]] constexpr bool empty() const noexcept;
[codeblock:end]

[div:description]
[para:expects]
[:en] [`pos <= size()].
[:zh_CN] [`pos <= size()]。

[para:effects]
[:en] Equivalent to: [`return size() == 0;]
[:zh_CN] 等价于：[`return size() == 0;]
[div:end]
