[section#string.replace
    [`basic_string::replace]
]

[%@library basic_string[!replace]]
[%@library replace[!basic_string]]
[codeblock:declaration]
constexpr basic_string& replace(size_type pos1, size_type n1, const basic_string& str);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to: [`return replace(pos1, n1, str.data(), str.size());]
[:zh_CN] 等价于：[`return replace(pos1, n1, str.data(), str.size());]
[exit:description]

[%@library replace[!basic_string]]
[%@library basic_string[!replace]]
[codeblock:declaration]
constexpr basic_string& replace(size_type pos1, size_type n1, const basic_string& str,
                                size_type pos2, size_type n2 = npos);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock:notation]
return replace(pos1, n1, basic_string_view<charT, traits>(str).substr(pos2, n2));
[codeblock:end]
[exit:description]

[%@library replace[!basic_string]]
[%@library basic_string[!replace]]
[codeblock:declaration]
template<class T>
  constexpr basic_string& replace(size_type pos1, size_type n1, const T& t);
[codeblock:end]

[enter:description]
[para:constraints]
[list]
[item]
[:en] [`is_convertible_v<const T&, basic_string_view<charT, traits>>] is [`true]
and
[:zh_CN] [`is_convertible_v<const T&, basic_string_view<charT, traits>>] 为
[`true]，并且
[item]
[:en] [`is_convertible_v<const T&, const charT*>] is [`false].
[:zh_CN] [`is_convertible_v<const T&, const charT*>] 为 [`false]。
[list:end]

[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock:notation]
basic_string_view<charT, traits> sv = t;
return replace(pos1, n1, sv.data(), sv.size());
[codeblock:end]
[exit:description]

[%@library replace[!basic_string]]
[%@library basic_string[!replace]]
[codeblock:declaration]
template<class T>
  constexpr basic_string& replace(size_type pos1, size_type n1, const T& t,
                                  size_type pos2, size_type n2 = npos);
[codeblock:end]

[enter:description]
[para:constraints]
[list]
[item]
[:en] [`is_convertible_v<const T&, basic_string_view<charT, traits>>] is [`true]
and
[:zh_CN] [`is_convertible_v<const T&, basic_string_view<charT, traits>>] 为
[`true] 并且
[item]
[:en] [`is_convertible_v<const T&, const charT*>] is [`false].
[:zh_CN] [`is_convertible_v<const T&, const charT*>] 为 [`false]。
[list:end]

[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock:notation]
basic_string_view<charT, traits> sv = t;
return replace(pos1, n1, sv.substr(pos2, n2));
[codeblock:end]
[exit:description]

[%@library replace[!basic_string]]
[%@library basic_string[!replace]]
[codeblock:declaration]
constexpr basic_string& replace(size_type pos1, size_type n1, const charT* s, size_type n2);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [=range(s,s + n2)] is a valid range.
[:zh_CN] [=range(s,s + n2)] 为有效范围。

[para:throws]
[list]
[item]
[:en] [`out_of_range] if [`pos1 > size()],
[:zh_CN] 当 [`pos1 > size()] 时抛出 [`out_of_range]，
[item]
[:en] [`length_error] if the length of the resulting string would exceed
[`max_size()] (see below), or
[:zh_CN] 当其结果字符串的长度可能超出 [`max_size()] 时，抛出 [`length_error]
（见下文），或者
[item]
[:en] any exceptions thrown by [`allocator_traits<Allocator>::allocate].
[:zh_CN] 由 [`allocator_traits<Allocator>::allocate] 所抛出的任何异常。
[list:end]

[para:effects]
[:en] Determines the effective length [`xlen] of the string to be removed as the
smaller of [`n1] and [`size() - pos1].
[:zh_CN] 确定所要删除的字符串的有效长度 [`xlen] 为 [`n1] 和 [`size() - pos1] 中
的较小值。

[:en] If [`size() - xlen >= max_size() - n2] throws [`length_error].
[:zh_CN] 如果 [`size() - xlen >= max_size() - n2] 则抛出 [`length_error]。

[:en] Otherwise, the function replaces the characters in the range
[=range(begin() + pos1,begin() + pos1 + xlen)] with a copy of the range
[=range(s,s + n2)].
[:zh_CN] 否则，该函数将范围 [=range(begin() + pos1,begin() + pos1 + xlen)] 中的
字符替换为范围 [=range(s,s + n2)] 的一个副本。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[exit:description]

[%@library replace[!basic_string]]
[%@library basic_string[!replace]]
[codeblock:declaration]
constexpr basic_string& replace(size_type pos, size_type n, const charT* s);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to: [`return replace(pos, n, s, traits::length(s));]
[:zh_CN] 等价于：[`return replace(pos, n, s, traits::length(s));]
[exit:description]

[%@library basic_string[!replace]]
[%@library replace[!basic_string]]
[codeblock:declaration]
constexpr basic_string& replace(size_type pos1, size_type n1, size_type n2, charT c);
[codeblock:end]

[enter:description]
[para:throws]
[list]
[item]
[:en] [`out_of_range] if [`pos1 > size()],
[:zh_CN] 当 [`pos1 > size()] 时抛出 [`out_of_range]，
[item]
[:en] [`length_error] if the length of the resulting string would exceed
[`max_size()] (see below), or
[:zh_CN] 当其结果字符串的长度可能超出 [`max_size()] 时，抛出 [`length_error]
（见下文），或者
[item]
[:en] any exceptions thrown by [`allocator_traits<Allocator>::allocate].
[:zh_CN] 由 [`allocator_traits<Allocator>::allocate] 所抛出的任何异常。
[list:end]

[para:effects]
[:en] Determines the effective length [`xlen] of the string to be removed as the
smaller of [`n1] and [`size() - pos1].
[:zh_CN] 确定所要删除的字符串的有效长度 [`xlen] 为 [`n1] 和 [`size() - pos1] 中
的较小值。

[:en] If [`size() - xlen >= max_size() - n2] throws [`length_error].
[:zh_CN] 如果 [`size() - xlen >= max_size() - n2] 则抛出 [`length_error]。

[:en] Otherwise, the function replaces the characters in the range
[=range(begin() + pos1,begin() + pos1 + xlen)] with [`n2] copies of [`c].
[:zh_CN] 否则，该函数将范围 [=range(begin() + pos1,begin() + pos1 + xlen)] 中的
字符替换为 [`n2] 个 [`c] 的副本。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[exit:description]

[%@library replace[!basic_string]]
[%@library basic_string[!replace]]
[codeblock:declaration]
constexpr basic_string& replace(const_iterator i1, const_iterator i2, const basic_string& str);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to:
[`return replace(i1, i2, basic_string_view<charT, traits>(str));]
[:zh_CN] 等价于：
[`return replace(i1, i2, basic_string_view<charT, traits>(str));]
[exit:description]

[%@library replace[!basic_string]]
[%@library basic_string[!replace]]
[codeblock:declaration]
template<class T>
  constexpr basic_string& replace(const_iterator i1, const_iterator i2, const T& t);
[codeblock:end]

[enter:description]
[para:constraints]
[list]
[item]
[:en] [`is_convertible_v<const T&, basic_string_view<charT, traits>>] is [`true]
and
[:zh_CN] [`is_convertible_v<const T&, basic_string_view<charT, traits>>] 为
[`true]，并且
[item]
[:en] [`is_convertible_v<const T&, const charT*>] is [`false].
[:zh_CN] [`is_convertible_v<const T&, const charT*>] 为 [`false]。
[list:end]

[para:expects]
[:en] [=range(begin(),i1)] and [=range(i1,i2)] are valid ranges.
[:zh_CN] [=range(begin(),i1)] 和 [=range(i1,i2)] 均为有效的范围。

[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock:notation]
basic_string_view<charT, traits> sv = t;
return replace(i1 - begin(), i2 - i1, sv.data(), sv.size());
[codeblock:end]
[exit:description]

[%@library replace[!basic_string]]
[%@library basic_string[!replace]]
[codeblock:declaration]
constexpr basic_string& replace(const_iterator i1, const_iterator i2, const charT* s, size_type n);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to:
[`return replace(i1, i2, basic_string_view<charT, traits>(s, n));]
[:zh_CN] 等价于：
[`return replace(i1, i2, basic_string_view<charT, traits>(s, n));]
[exit:description]

[%@library replace[!basic_string]]
[%@library basic_string[!replace]]
[codeblock:declaration]
constexpr basic_string& replace(const_iterator i1, const_iterator i2, const charT* s);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to:
[`return replace(return replace(i1, i2, basic_string_view<charT, traits>(s));]
[:zh_CN] 等价于：
[`return replace(return replace(i1, i2, basic_string_view<charT, traits>(s));]
[exit:description]

[%@library replace[!basic_string]]
[%@library basic_string[!replace]]
[codeblock:declaration]
constexpr basic_string& replace(const_iterator i1, const_iterator i2, size_type n, charT c);
[codeblock:end]

[enter:description]
[para:expects]
[:en] [=range(begin(),i1)] and [=range(i1,i2)] are valid ranges.
[:zh_CN] [=range(begin(),i1)] 和 [=range(i1,i2)] 均为有效的范围。

[para:effects]
[:en] Equivalent to: [`return replace(i1 - begin(), i2 - i1, n, c);]
[:zh_CN] 等价于：[`return replace(i1 - begin(), i2 - i1, n, c);]
[exit:description]

[%@library replace[!basic_string]]
[%@library basic_string[!replace]]
[codeblock:declaration]
template<class InputIterator>
  constexpr basic_string& replace(const_iterator i1, const_iterator i2,
                                  InputIterator j1, InputIterator j2);
[codeblock:end]

[enter:description]
[para:constraints]
[:en] [`InputIterator] is a type that qualifies as an input iterator
([#container.requirements.general]).
[:zh_CN] [`InputIterator] 是可作为输入迭代器
（[#container.requirements.general]）的类型。

[para:effects]
[:en] Equivalent to:
[`return replace(i1, i2, basic_string(j1, j2, get_allocator()));]
[:zh_CN] 等价于：
[`return replace(i1, i2, basic_string(j1, j2, get_allocator()));]
[exit:description]

[%@library replace[!basic_string]]
[%@library basic_string[!replace]]
[codeblock:declaration]
constexpr basic_string& replace(const_iterator i1, const_iterator i2, initializer_list<charT> il);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to: [`return replace(i1, i2, il.begin(), il.size());]
[:zh_CN] 等价于：[`return replace(i1, i2, il.begin(), il.size());]
[exit:description]
