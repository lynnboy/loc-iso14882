[section#string.view.iterators
    [:en] Iterator support
    [:zh_CN] 迭代器支持
]

[%@lib@member const_iterator[!basic_string_view]]
[codeblock:declaration]
using const_iterator = [[redoc("?impdefx [:en] type of [`basic_string_view::const_iterator]"
                                        "[:zh_CN] [`basic_string_view::const_iterator] 的类型")]];
[codeblock:end]

[div:description]
[para]
[:en] A type that meets the requirements of a constant
[^:oc RandomAccessIterator] ([#random.access.iterators]), models
[`:c contiguous_iterator] ([#iterator.requirements.general]), and meets the
constexpr iterator requirements ([#iterator.requirements.general]), whose
[`value_type] is the template parameter [`charT].
[:zh_CN]
[:en] 一种满足常量 [^:oc RandomAccessIterator]（[#random.access.iterators]）的
规定，构成 [`:c contiguous_iterator]（[#iterator.requirements.general]），并满足
constexpr 迭代器的规定（[#iterator.requirements.general]）的类型，其
[`value_type] 为模板形参 [`charT]。

[para]
[:en] All requirements on container iterators ([#container.requirements]) apply
to [`basic_string_view::const_iterator] as well.
[:zh_CN] 对容器的迭代器的所有规定（[#container.requirements]）同样适用于
[`basic_string_view::const_iterator]。
[div:end]

[%@lib@member begin[!basic_string_view]]
[%@lib@member cbegin[!basic_string_view]]
[codeblock:declaration]
constexpr const_iterator begin() const noexcept;
constexpr const_iterator cbegin() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] An iterator such that
[:zh_CN] 一个迭代器，

[list]
[item]
[:en@~] if [`!empty()], [`addressof(*begin()) == data_],
[:zh_CN@~] 当 [`!empty()] 时有 [`addressof(*begin()) == data_]，
[item]
[:en@~] otherwise, an unspecified value such that [=range(begin(),end()] is a
valid range.
[:zh_CN@~] 否则，为某个使得 [=range(begin(),end()] 为有效范围的未指明的值。
[list:end]
[div:end]

[%@lib@member end[!basic_string_view]]
[%@lib@member cend[!basic_string_view]]
[codeblock:declaration]
constexpr const_iterator end() const noexcept;
constexpr const_iterator cend() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`begin() + size()].
[:zh_CN] [`begin() + size()]。
[div:end]

[%@lib@member rbegin[!basic_string_view]]
[%@lib@member crbegin[!basic_string_view]]
[codeblock:declaration]
constexpr const_reverse_iterator rbegin() const noexcept;
constexpr const_reverse_iterator crbegin() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`const_reverse_iterator(end())].
[:zh_CN] [`const_reverse_iterator(end())]。
[div:end]

[%@lib@member rend[!basic_string_view]]
[%@lib@member crend[!basic_string_view]]
[codeblock:declaration]
constexpr const_reverse_iterator rend() const noexcept;
constexpr const_reverse_iterator crend() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`const_reverse_iterator(begin())].
[:zh_CN] [`const_reverse_iterator(begin())]。
[div:end]
