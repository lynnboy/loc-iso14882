[section#string.view.iterators
    [:en] Iterator support
    [:zh_CN] 迭代器支持
]

[%@library const_iterator[!basic_string_view]]
[%@library basic_string_view[!const_iterator]]
[codeblock:declaration [!:mark ImpDef] ]
using const_iterator = [%@impldef [:en] type of [`basic_string_view::const_iterator] [:zh_CN] [`basic_string_view::const_iterator] 的类型][=ImpDef];
[codeblock:end]

[enter:description]
[para]
[:en] A type that meets the requirements of a constant random access iterator
([#random.access.iterators]) and of a contiguous iterator
([#iterator.requirements.general]) whose [`value_type] is the template parameter
[`charT].
[:zh_CN]
[:en] 一种符合对于常量随即访问迭代器（[#random.access.iterators]）和连续迭代器
（[#iterator.requirements.general]）的类型，其 [`value_type] 为模板形参 [`charT]
。

[para]
[:en] For a [`basic_string_view str], any operation that invalidates a pointer
in the range [=range(str.data(),str.data() + str.size())] invalidates pointers,
iterators, and references returned from [`str][=']s methods.
[:zh_CN] 对于一个 [`basic_string_view str]，任何能够使范围
[=range(str.data(),str.data() + str.size())] 中的指针失效的操作，都将使从 [`str]
的各方法所返回的指针、迭代器和引用失效。

[para]
[:en] All requirements on container iterators ([#container.requirements]) apply
to [`basic_string_view::const_iterator] as well.
[:zh_CN] 对容器的迭代器的所有规定（[#container.requirements]）同样适用于
[`basic_string_view::const_iterator]。
[exit:description]

[%@library begin[!basic_string_view]]
[%@library basic_string_view[!begin]]
[%@library cbegin[!basic_string_view]]
[%@library basic_string_view[!cbegin]]
[codeblock:declaration]
constexpr const_iterator begin() const noexcept;
constexpr const_iterator cbegin() const noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] An iterator such that
[:zh_CN] 一个迭代器，

[list]
[item]
[:en@~] if [`!empty()], [`&*begin() == data_],
[:zh_CN@~] 当 [`!empty()] 时有 [`&*begin() == data_]，
[item]
[:en@~] otherwise, an unspecified value such that [=range(begin(),end()] is a
valid range.
[:zh_CN@~] 否则，为某个使得 [=range(begin(),end()] 为有效范围的未指明的值。
[list:end]
[exit:description]

[%@library end[!basic_string_view]]
[%@library basic_string_view[!end]]
[%@library cend[!basic_string_view]]
[%@library basic_string_view[!cend]]
[codeblock:declaration]
constexpr const_iterator end() const noexcept;
constexpr const_iterator cend() const noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`begin() + size()].
[:zh_CN] [`begin() + size()]。
[exit:description]

[%@library rbegin[!basic_string_view]]
[%@library basic_string_view[!rbegin]]
[%@library crbegin[!basic_string_view]]
[%@library basic_string_view[!crbegin]]
[codeblock:declaration]
constexpr const_reverse_iterator rbegin() const noexcept;
constexpr const_reverse_iterator crbegin() const noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`const_reverse_iterator(end())].
[:zh_CN] [`const_reverse_iterator(end())]。
[exit:description]

[%@library rend[!basic_string_view]]
[%@library basic_string_view[!rend]]
[%@library crend[!basic_string_view]]
[%@library basic_string_view[!crend]]
[codeblock:declaration]
constexpr const_reverse_iterator rend() const noexcept;
constexpr const_reverse_iterator crend() const noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`const_reverse_iterator(begin())].
[:zh_CN] [`const_reverse_iterator(begin())]。
[exit:description]
