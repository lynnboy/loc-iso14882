[section#string.find.first.not.of
    [`basic_string::find_first_not_of]
]

[%@library basic_string[!find_first_not_of]]
[%@library find_first_not_of[!basic_string]]
[codeblock:declaration]
template<class T>
  size_type find_first_not_of(const T& t, size_type pos = 0) const;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Creates a variable, [`sv], as if by
[`basic_string_view<charT, traits> sv = t;] and then determines the lowest
position [`xpos], if possible, such that both of the following conditions hold:
[:zh_CN] 如同以 [`basic_string_view<charT, traits> sv = t;] 创建一个变量 [`sv]，
然后如果可能，就确定一个最低位置 [`xpos]，使得以下条件均可达成：

[list]
[item]
[:en] [`pos <= xpos] and [`xpos < size()];
[:zh_CN] [`pos <= xpos] 并且 [`xpos < size()]；
[item]
[%@library eq[!char_traits]]
[:en] [`traits::eq(at(xpos), sv.at(I))] for no element [`I] of the data
referenced by [`sv].
[:zh_CN] 由 [`sv] 所指代的数据中不存在元素 [`I]，使得
[`traits::eq(at(xpos+I), sv.at(I))]。
[list:end]

[para:remarks]
[:en] This function shall not participate in overload resolution unless
[`is_convertible_v<const T&, basic_string_view<charT, traits>>] is [`true] and
[`is_convertible_v<const T&, const charT*>] is [`false].
[:zh_CN] 除非 [`is_convertible_v<const T&, basic_string_view<charT, traits>>] 为
[`true]，并且 [`is_convertible_v<const T&, const charT*>] 为 [`false]，否则这个
函数不能参与重载决议。

[para:throws]
[:en] Nothing unless the initialization of [`sv] throws an exception.
[:zh_CN] 除非 [`sv] 的初始化抛出了异常，否则不抛出任何异常。

[para:returns]
[:en] [`xpos] if the function can determine such a value for [`xpos].
[:zh_CN] 如果该函数可以确定这样的 [`xpos] 值，则为 [`xpos]。

[:en] Otherwise, returns [`npos].
[:zh_CN] 否则，返回 [`npos]。
[exit:description]

[%@library find_first_not_of[!basic_string]]
[%@library basic_string[!find_first_not_of]]
[codeblock:declaration]
size_type find_first_not_of(const basic_string& str, size_type pos = 0) const noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：

[codeblock:notation]
return find_first_not_of(basic_string_view<charT, traits>(str), pos);
[codeblock:end]
[exit:description]

[%@library find_first_not_of[!basic_string]]
[%@library basic_string[!find_first_not_of]]
[codeblock:declaration]
size_type find_first_not_of(const charT* s, size_type pos, size_type n) const;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`find_first_not_of(basic_string_view<charT, traits>(s, n), pos)].
[:zh_CN] [`find_first_not_of(basic_string_view<charT, traits>(s, n), pos)]。
[exit:description]

[%@library find_first_not_of[!basic_string]]
[%@library basic_string[!find_first_not_of]]
[codeblock:declaration]
size_type find_first_not_of(const charT* s, size_type pos = 0) const;
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`s] points to an array of at least [`traits::length(s) + 1] elements of
[`charT].
[:zh_CN] [`s] 指向 [`charT] 的至少 [`traits::length(s) + 1] 个元素的数组。

[para:returns]
[:en] [`find_first_not_of(basic_string_view<charT, traits>(s), pos)].
[:zh_CN] [`find_first_not_of(basic_string_view<charT, traits>(s), pos)]。
[exit:description]

[%@library basic_string[!find_first_not_of]]
[%@library find_first_not_of[!basic_string]]
[codeblock:declaration]
size_type find_first_not_of(charT c, size_type pos = 0) const;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`find_first_not_of(basic_string(1, c), pos)].
[:zh_CN] [`find_first_not_of(basic_string(1, c), pos)]。
[exit:description]
