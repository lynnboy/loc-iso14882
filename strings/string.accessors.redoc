[section#string.accessors
    [:en] Accessors
    [:zh_CN] 访问函数
]

[%@library c_str[!basic_string]]
[%@library basic_string[!c_str]]
[%@library data[!basic_string]]
[%@library basic_string[!data]]
[codeblock:declaration]
constexpr const charT* c_str() const noexcept;
constexpr const charT* data() const noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] A pointer [`p] such that [`p + i == addressof(operator`[`](i))] for each
[`i] in [=crange(0,size())].
[:zh_CN] 指针 [`p]，使得对 [=crange(0,size())] 中的每个 [`i]，均有
[`p + i == addressof(operator`[`](i))]。

[para:complexity]
[:en] Constant time.
[:zh_CN] 常量时间。

[para:remarks]
[:en] The program shall not modify any of the values stored in the character
array; otherwise, the behavior is undefined.
[:zh_CN] 程序不能改动该字符数组中存储的任何值；否则，其行为未定义。
[exit:description]

[%@library data[!basic_string]]
[%@library basic_string[!data]]
[codeblock:declaration]
constexpr charT* data() noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] A pointer [`p] such that [`p + i == addressof(operator`[`](i))] for each
[`i] in [=crange(0,size())].
[:zh_CN] 指针 [`p]，使得对 [=crange(0,size())] 中的每个 [`i]，均有
[`p + i == addressof(operator`[`](i))]。

[para:complexity]
[:en] Constant time.
[:zh_CN] 常量时间。

[para:remarks]
[:en] The program shall not modify the value stored at [`p + size()] to any
value other than [`charT()]; otherwise, the behavior is undefined.
[:zh_CN] 程序不能将存储于 [`p + size()] 的值改为除 [`charT()] 以外的任何值；
否则，其行为未定义。
[exit:description]

[%@library operator basic_string_view[!basic_string]]
[%@library basic_string[!operator basic_string_view]]
[codeblock:declaration]
constexpr operator basic_string_view<charT, traits>() const noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to: [`return basic_string_view<charT, traits>(data(), size());]
[:zh_CN] 等价于：[`return basic_string_view<charT, traits>(data(), size());]
[exit:description]

[%@library get_allocator[!basic_string]]
[%@library basic_string[!get_allocator]]
[codeblock:declaration]
constexpr allocator_type get_allocator() const noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] A copy of the [`Allocator] object used to construct the string or, if that
allocator has been replaced, a copy of the most recent replacement.
[:zh_CN] 用于构造字符串的 [`Allocator] 对象的副本，或者若这个分配器已被替换，则
返回最近所替换的副本。
[exit:description]
