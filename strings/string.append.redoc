[section#string.append
    [`basic_string::append]
]

[%@library basic_string[!append]]
[%@library append[!basic_string]]
[codeblock:declaration]
constexpr basic_string& append(const basic_string& str);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to: [`return append(str.data(), str.size());]
[:zh_CN] 等价于：[`return append(str.data(), str.size());]
[exit:description]

[%@library append[!basic_string]]
[%@library basic_string[!append]]
[codeblock:declaration]
constexpr basic_string& append(const basic_string& str, size_type pos, size_type n = npos);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock:notation]
return append(basic_string_view<charT, traits>(str).substr(pos, n));
[codeblock:end]
[exit:description]

[%@library append[!basic_string]]
[%@library basic_string[!append]]
[codeblock:declaration]
template<class T>
  constexpr basic_string& append(const T& t);
[codeblock:end]

[enter:description]
[para:constraints]
[list]
[item]
[:en] [`is_convertible_v<const T&, basic_string_view<charT, traits>>] is [`true]
and
[:zh_CN] [`is_convertible_v<const T&, basic_string_view<charT, traits>>] 为
[`true]，并且
[item]
[:en] [`is_convertible_v<const T&, const charT*>] is [`false].
[:zh_CN] [`is_convertible_v<const T&, const charT*>] 为 [`false]。
[list:end]

[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock:notation]
basic_string_view<charT, traits> sv = t;
return append(sv.data(), sv.size());
[codeblock:end]
[exit:description]

[%@library append[!basic_string]]
[%@library basic_string[!append]]
[codeblock:declaration]
template<class T>
  constexpr basic_string& append(const T& t, size_type pos, size_type n = npos);
[codeblock:end]

[enter:description]
[para:constraints]
[list]
[item]
[:en] [`is_convertible_v<const T&, basic_string_view<charT, traits>>] is [`true]
and
[:zh_CN] [`is_convertible_v<const T&, basic_string_view<charT, traits>>] 为
[`true]，并且
[item]
[:en] [`is_convertible_v<const T&, const charT*>] is [`false].
[:zh_CN] [`is_convertible_v<const T&, const charT*>] 为 [`false]。
[list:end]

[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock:notation]
basic_string_view<charT, traits> sv = t;
return append(sv.substr(pos, n));
[codeblock:end]
[exit:description]

[%@library append[!basic_string]]
[%@library basic_string[!append]]
[codeblock:declaration]
constexpr basic_string& append(const charT* s, size_type n);
[codeblock:end]

[enter:description]
[para:expects]
[:en] [=range(s,s + n)] is a valid range.
[:zh_CN] [=range(s,s + n)] 是有效的范围。

[para:effects]
[:en] Appends a copy of the range [=range(s,s + n)] to the string.
[:zh_CN] 向字符串追加范围 [=range(s,s + n)] 的一个副本。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[exit:description]

[%@library append[!basic_string]]
[%@library basic_string[!append]]
[codeblock:declaration]
constexpr basic_string& append(const charT* s);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to: [`return append(s, traits::length(s));]
[:zh_CN] 等价于：[`return append(s, traits::length(s));]
[exit:description]

[%@library basic_string[!append]]
[%@library append[!basic_string]]
[codeblock:declaration]
constexpr basic_string& append(size_type n, charT c);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Appends [`n] copies of [`c] to the string.
[:zh_CN] 向字符串追加 [`n] 个 [`c] 的副本。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[exit:description]

[%@library append[!basic_string]]
[%@library basic_string[!append]]
[codeblock:declaration]
template<class InputIterator>
  constexpr basic_string& append(InputIterator first, InputIterator last);
[codeblock:end]

[enter:description]
[para:constraints]
[:en] [`InputIterator] is a type that qualifies as an input iterator
([#container.requirements.general]).
[:zh_CN] [`InputIterator] 是可当做输入迭代器（[#container.requirements.general]）
的类型。

[para:effects]
[:en] Equivalent to:
[`return append(basic_string(first, last, get_allocator()));]
[:zh_CN] 等价于：[`return append(basic_string(first, last, get_allocator()));]
[exit:description]

[%@library append[!basic_string]]
[%@library basic_string[!append]]
[codeblock:declaration]
constexpr basic_string& append(initializer_list<charT> il);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to: [`return append(il.begin(), il.size());]
[:zh_CN] 等价于：[`return append(il.begin(), il.size());]
[exit:description]

[%@library push_back[!basic_string]]
[%@library basic_string[!push_back]]
[codeblock:declaration]
constexpr void push_back(charT c);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to [`append(size_type{1}, c)].
[:zh_CN] 等价于 [`append(size_type{1}, c)]。
[exit:description]
