[section#string.append
    [`basic_string::append]
]

[%@library basic_string[!append]]
[%@library append[!basic_string]]
[codeblock:declaration]
basic_string& append(const basic_string& str);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Calls [`append(str.data(), str.size())].
[:zh_CN] 调用 [`append(str.data(), str.size())]。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[exit:description]

[%@library append[!basic_string]]
[%@library basic_string[!append]]
[codeblock:declaration]
basic_string& append(const basic_string& str, size_type pos, size_type n = npos);
[codeblock:end]

[enter:description]
[para:throws]
[:en] [`out_of_range] if [`pos > str.size()].
[:zh_CN] 当 [`pos > str.size()] 时抛出 [`out_of_range]。

[para:effects]
[:en] Determines the effective length [`rlen] of the string to append as the
smaller of [`n] and [`str.size() - pos] and calls
[`append(str.data() + pos, rlen)].
[:zh_CN] 确定要追加的字符串的有效长度 [`rlen] 为 [`n] 和 [`str.size() - pos] 的
较小值，然后调用 [`append(str.data() + pos, rlen)]。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[exit:description]

[%@library append[!basic_string]]
[%@library basic_string[!append]]
[codeblock:declaration]
basic_string& append(basic_string_view<charT, traits> sv);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to: [`return append(sv.data(), sv.size());]
[:zh_CN] 等价于：[`return append(sv.data(), sv.size());]
[exit:description]

[%@library append[!basic_string]]
[%@library basic_string[!append]]
[codeblock:declaration]
template<class T>
  basic_string& append(const T& t, size_type pos, size_type n = npos);
[codeblock:end]

[enter:description]
[para:throws]
[:en] [`out_of_range] if [`pos > sv.size()].
[:zh_CN] 当 [`pos > sv.size()] 时抛出 [`out_of_range]。

[para:effects]
[:en] Creates a variable, [`sv], as if by
[`basic_string_view<charT, traits> sv = t].
[:zh_CN] 如同以 [`basic_string_view<charT, traits> sv = t] 来创建一个变量 [`sv]。

[:en] Determines the effective length [`rlen] of the string to append as the
smaller of [`n] and [`sv.size() - pos] and calls
[`append(sv.data() + pos, rlen)].
[:zh_CN] 确定所要追加的字符串的有效长度 [`rlen] 为 [`n] 和 [`sv.size() - pos] 中
的较小值，然后调用 [`append(sv.data() + pos, rlen)]。

[para:remarks]
[:en] This function shall not participate in overload resolution unless
[`is_convertible_v<const T&, basic_string_view<charT, traits>>] is [`true] and
[`is_convertible_v<const T&, const charT*>] is [`false].
[:zh_CN] 除非 [`is_convertible_v<const T&, basic_string_view<charT, traits>>] 为
[`true] 并且 [`is_convertible_v<const T&, const charT*>] 为 [`false]，否则这个
函数不能参与重载决议。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[exit:description]

[%@library append[!basic_string]]
[%@library basic_string[!append]]
[codeblock:declaration]
basic_string& append(const charT* s, size_type n);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`s] points to an array of at least [`n] elements of [`charT].
[:zh_CN] [`s] 指向 [`charT] 的至少 [`n] 个元素的数组。

[para:throws]
[:en] [`length_error] if [`size() + n > max_size()].
[:zh_CN] 当 [`size() + n > max_size()] 时抛出 [`length_error]。

[para:effects]
[:en] The function replaces the string controlled by [`*this] with a string of
length [`size() + n] whose first [`size()] elements are a copy of the original
string controlled by [`*this] and whose remaining elements are a copy of the
initial [`n] elements of [`s].
[:zh_CN] 该函数将由 [`*this] 所控制的字符串替换为长度为 [`size() + n] 的字符串，
其前 [`size()] 个元素为由 [`*this] 所控制的原字符串的副本，而剩余元素是 [`s] 的
开头 [`n] 个元素。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[exit:description]

[%@library append[!basic_string]]
[%@library basic_string[!append]]
[codeblock:declaration]
basic_string& append(const charT* s);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`s] points to an array of at least [`traits::length(s) + 1] elements of
[`charT].
[:zh_CN] [`s] 指向 [`charT] 的至少 [`traits::length(s) + 1] 个元素的数组。

[para:effects]
[:en] Calls [`append(s, traits::length(s))].
[:zh_CN] 调用 [`append(s, traits::length(s))]。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[exit:description]

[%@library basic_string[!append]]
[%@library append[!basic_string]]
[codeblock:declaration]
basic_string& append(size_type n, charT c);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to [`append(basic_string(n, c))].
[:zh_CN] 等价于 [`append(basic_string(n, c))]。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[exit:description]

[%@library append[!basic_string]]
[%@library basic_string[!append]]
[codeblock:declaration]
template<class InputIterator>
  basic_string& append(InputIterator first, InputIterator last);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [=range(first,last)] is a valid range.
[:zh_CN] [=range(first,last)] 是有效的范围。

[para:effects]
[:en] Equivalent to [`append(basic_string(first, last, get_allocator()))].
[:zh_CN] 等价于 [`append(basic_string(first, last, get_allocator()))]。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[exit:description]

[%@library append[!basic_string]]
[%@library basic_string[!append]]
[codeblock:declaration]
basic_string& append(initializer_list<charT> il);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Calls [`append(il.begin(), il.size())].
[:zh_CN] 调用 [`append(il.begin(), il.size())]。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[exit:description]

[%@library push_back[!basic_string]]
[%@library basic_string[!push_back]]
[codeblock:declaration]
void push_back(charT c);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to [`append(static_cast<size_type>(1), c)].
[:zh_CN] 等价于 [`append(static_cast<size_type>(1), c)]。
[exit:description]
