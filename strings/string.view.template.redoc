[section#string.view.template
    [:en] Class template [`basic_string_view]
    [:zh_CN] 类模板 [`basic_string_view]
]

[%@library basic_string_view]
[codeblock:synopsis [!:mark ImpDef] ]
template<class charT, class traits = char_traits<charT>>
class basic_string_view {
public:
  // [:en] types
  // [|:zh_CN] 类型
  using traits_type            = traits;
  using value_type             = charT;
  using pointer                = value_type*;
  using const_pointer          = const value_type*;
  using reference              = value_type&;
  using const_reference        = const value_type&;
  using const_iterator         = [%@impldef [:en] type of [`basic_string_view::const_iterator] [:zh_CN] [`basic_string_view::const_iterator] 的类型][=ImpDef]; // [:en] see [#string.view.iterators]
                                                                                        // [|:zh_CN] 参见 [#string.view.iterators]
  using iterator               = const_iterator;[#:note#fn:$section.1]
  using const_reverse_iterator = reverse_iterator<const_iterator>;
  using reverse_iterator       = const_reverse_iterator;
  using size_type              = size_t;
  using difference_type        = ptrdiff_t;
  static constexpr size_type npos = size_type(-1);

  // [:en] [#string.view.cons], construction and assignment
  // [|:zh_CN] [#string.view.cons]，构造与赋值
  constexpr basic_string_view() noexcept;
  constexpr basic_string_view(const basic_string_view&) noexcept = default;
  constexpr basic_string_view& operator=(const basic_string_view&) noexcept = default;
  constexpr basic_string_view(const charT* str);
  constexpr basic_string_view(const charT* str, size_type len);

  // [:en] [#string.view.iterators], iterator support
  // [|:zh_CN] [#string.view.iterators]，迭代器支持
  constexpr const_iterator begin() const noexcept;
  constexpr const_iterator end() const noexcept;
  constexpr const_iterator cbegin() const noexcept;
  constexpr const_iterator cend() const noexcept;
  constexpr const_reverse_iterator rbegin() const noexcept;
  constexpr const_reverse_iterator rend() const noexcept;
  constexpr const_reverse_iterator crbegin() const noexcept;
  constexpr const_reverse_iterator crend() const noexcept;

  // [:en] [#string.view.capacity], capacity
  // [|:zh_CN] [#string.view.capacity]，容量
  constexpr size_type size() const noexcept;
  constexpr size_type length() const noexcept;
  constexpr size_type max_size() const noexcept;
  constexpr bool empty() const noexcept;

  // [:en] [#string.view.access], element access
  // [|:zh_CN] [#string.view.access]，元素访问
  constexpr const_reference operator[](size_type pos) const;
  constexpr const_reference at(size_type pos) const;
  constexpr const_reference front() const;
  constexpr const_reference back() const;
  constexpr const_pointer data() const noexcept;

  // [:en] [#string.view.modifiers], modifiers
  // [|:zh_CN] [#string.view.modifiers]，改动函数
  constexpr void remove_prefix(size_type n);
  constexpr void remove_suffix(size_type n);
  constexpr void swap(basic_string_view& s) noexcept;

  // [:en] [#string.view.ops], string operations
  // [|:zh_CN] [#string.view.ops]，字符串操作
  size_type copy(charT* s, size_type n, size_type pos = 0) const;

  constexpr basic_string_view substr(size_type pos = 0, size_type n = npos) const;
  constexpr int compare(basic_string_view s) const noexcept;
  constexpr int compare(size_type pos1, size_type n1, basic_string_view s) const;
  constexpr int compare(size_type pos1, size_type n1, basic_string_view s,
                        size_type pos2, size_type n2) const;
  constexpr int compare(const charT* s) const;
  constexpr int compare(size_type pos1, size_type n1, const charT* s) const;
  constexpr int compare(size_type pos1, size_type n1, const charT* s,
                        size_type n2) const;
  constexpr size_type find(basic_string_view s, size_type pos = 0) const noexcept;
  constexpr size_type find(charT c, size_type pos = 0) const noexcept;
  constexpr size_type find(const charT* s, size_type pos, size_type n) const;
  constexpr size_type find(const charT* s, size_type pos = 0) const;
  constexpr size_type rfind(basic_string_view s, size_type pos = npos) const noexcept;
  constexpr size_type rfind(charT c, size_type pos = npos) const noexcept;
  constexpr size_type rfind(const charT* s, size_type pos, size_type n) const;
  constexpr size_type rfind(const charT* s, size_type pos = npos) const;
  constexpr size_type find_first_of(basic_string_view s, size_type pos = 0) const noexcept;
  constexpr size_type find_first_of(charT c, size_type pos = 0) const noexcept;
  constexpr size_type find_first_of(const charT* s, size_type pos, size_type n) const;
  constexpr size_type find_first_of(const charT* s, size_type pos = 0) const;
  constexpr size_type find_last_of(basic_string_view s, size_type pos = npos) const noexcept;
  constexpr size_type find_last_of(charT c, size_type pos = npos) const noexcept;
  constexpr size_type find_last_of(const charT* s, size_type pos, size_type n) const;
  constexpr size_type find_last_of(const charT* s, size_type pos = npos) const;
  constexpr size_type find_first_not_of(basic_string_view s, size_type pos = 0) const noexcept;
  constexpr size_type find_first_not_of(charT c, size_type pos = 0) const noexcept;
  constexpr size_type find_first_not_of(const charT* s, size_type pos,
                                        size_type n) const;
  constexpr size_type find_first_not_of(const charT* s, size_type pos = 0) const;
  constexpr size_type find_last_not_of(basic_string_view s,
                                       size_type pos = npos) const noexcept;
  constexpr size_type find_last_not_of(charT c, size_type pos = npos) const noexcept;
  constexpr size_type find_last_not_of(const charT* s, size_type pos,
                                       size_type n) const;
  constexpr size_type find_last_not_of(const charT* s, size_type pos = npos) const;

private:
  const_pointer data_; // [=Expos]
  size_type size_;     // [=Expos]
};
[codeblock:end]

[note:foot#fn:$section.1]
[:en]
Because [`basic_string_view] refers to a constant sequence, [`iterator] and
[`const_iterator] are the same type.
[:zh_CN]
由于 [`basic_string_view] 指代的是常量序列，其 [`iterator] 和 [`const_iterator]
因而是相同的类型。
[note:end]

[para]
[:en]
In every specialization [`basic_string_view<charT, traits>], the type [`traits]
shall satisfy the character traits requirements ([#char.traits]), and the type
[`traits::char_type] shall name the same type as [`charT].
[:zh_CN]
在各个特例 [`basic_string_view<charT, traits>] 中，类型 [`traits] 应当符合对字符
特征的规定（[#char.traits]），并且类型 [`traits::char_type] 应当指名与 [`charT]
相同的类型。

[include string.view.cons]

[include string.view.iterators]

[include string.view.capacity]

[include string.view.access]

[include string.view.modifiers]

[include string.view.ops]

[include string.view.find]
