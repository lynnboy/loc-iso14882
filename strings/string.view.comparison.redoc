[section#string.view.comparison
    [:en] Non-member comparison functions
    [:zh_CN] 非成员比较函数
]

[para]
[:en] Let [`S] be [`basic_string_view<charT, traits>], and [`sv] be an instance
of [`S].
[:zh_CN] 令 [`S] 为 [`basic_string_view<charT, traits>]，并令 [`sv] 为 [`S] 的
实例。

[:en] Implementations shall provide sufficient additional overloads marked
[`constexpr] and [`noexcept] so that an object [`t] with an implicit conversion
to [`S] can be compared according to [#string.view.comparison.overloads].
[:zh_CN] 各实现应当提供充分的各个标有 [`constexpr] 和 [`noexcept] 的其他重载，
以使的可以被隐式转换为 [`S] 的对象 [`t]，可以根据
[#string.view.comparison.overloads] 来进行比较。

[table:listing@fill=column@shape=?x1#tab:string.view.comparison.overloads
    [:en] Additional [`basic_string_view] comparison overloads
    [:zh_CN] 其他的 [`basic_string_view] 比较函数重载

    [|@code@align=center
        [:en] Expression
        [:zh_CN] 表达式
    ]
    [|@code@align=center
        [:en] Equivalent to
        [:zh_CN] 等价于
    ]
]

[|] t == sv [|] S(t) == sv
[|] sv == t [|] sv == S(t)
[|] t != sv [|] S(t) != sv
[|] sv != t [|] sv != S(t)
[|] t < sv  [|] S(t) < sv
[|] sv < t  [|] sv < S(t)
[|] t > sv  [|] S(t) > sv
[|] sv > t  [|] sv > S(t)
[|] t <= sv [|] S(t) <= sv
[|] sv <= t [|] sv <= S(t)
[|] t >= sv [|] S(t) >= sv
[|] sv >= t [|] sv >= S(t)

[table:end]

[enter:example]
[:en] A sample conforming implementation for [`operator==] would be:
[:zh_CN] 对 [`operator==] 的一种遵从标准的实例实现可以为：

[codeblock]
template<class charT, class traits>
  constexpr bool operator==(basic_string_view<charT, traits> lhs,
                            basic_string_view<charT, traits> rhs) noexcept {
    return lhs.compare(rhs) == 0;
  }
template<class charT, class traits>
  constexpr bool operator==(basic_string_view<charT, traits> lhs,
                            type_identity_t<basic_string_view<charT, traits>> rhs) noexcept {
    return lhs.compare(rhs) == 0;
  }
template<class charT, class traits>
  constexpr bool operator==(__identity<basic_string_view<charT, traits>> lhs,
  constexpr bool operator==(type_identity_t<basic_string_view<charT, traits>> lhs,
    return lhs.compare(rhs) == 0;
  }
[codeblock:end]
[exit:example]

[%@library operator==[!basic_string_view]]
[%@library basic_string_view[!operator==]]
[codeblock:declaration]
template<class charT, class traits>
  constexpr bool operator==(basic_string_view<charT, traits> lhs,
                            basic_string_view<charT, traits> rhs) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`lhs.compare(rhs) == 0].
[:zh_CN] [`lhs.compare(rhs) == 0]。
[exit:description]

[%@library operator!=[!basic_string_view]]
[%@library basic_string_view[!operator!=]]
[codeblock:declaration]
template<class charT, class traits>
  constexpr bool operator!=(basic_string_view<charT, traits> lhs,
                            basic_string_view<charT, traits> rhs) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`lhs.compare(rhs) != 0].
[:zh_CN] [`lhs.compare(rhs) != 0]。
[exit:description]

[%@library operator<[!basic_string_view]]
[%@library basic_string_view[!operator<]]
[codeblock:declaration]
template<class charT, class traits>
  constexpr bool operator<(basic_string_view<charT, traits> lhs,
                           basic_string_view<charT, traits> rhs) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`lhs.compare(rhs) < 0].
[:zh_CN] [`lhs.compare(rhs) < 0]。
[exit:description]

[%@library operator>[!basic_string_view]]
[%@library basic_string_view[!operator>]]
[codeblock:declaration]
template<class charT, class traits>
  constexpr bool operator>(basic_string_view<charT, traits> lhs,
                           basic_string_view<charT, traits> rhs) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`lhs.compare(rhs) > 0].
[:zh_CN] [`lhs.compare(rhs) > 0]。
[exit:description]

[%@library operator<=[!basic_string_view]]
[%@library basic_string_view[!operator<=]]
[codeblock:declaration]
template<class charT, class traits>
  constexpr bool operator<=(basic_string_view<charT, traits> lhs,
                            basic_string_view<charT, traits> rhs) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`lhs.compare(rhs) <= 0].
[:zh_CN] [`lhs.compare(rhs) <= 0]。
[exit:description]

[%@library operator>=[!basic_string_view]]
[%@library basic_string_view[!operator>=]]
[codeblock:declaration]
template<class charT, class traits>
  constexpr bool operator>=(basic_string_view<charT, traits> lhs,
                            basic_string_view<charT, traits> rhs) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`lhs.compare(rhs) >= 0].
[:zh_CN] [`lhs.compare(rhs) >= 0]。
[exit:description]
