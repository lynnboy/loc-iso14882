[section#char.traits.specializations.char
    [`struct char_traits<char>]
]

[%@library char_traits]
[codeblock:synopsis]
namespace std {
  template<> struct char_traits<char> {
    using char_type  = char;
    using int_type   = int;
    using off_type   = streamoff;
    using pos_type   = streampos;
    using state_type = mbstate_t;

    static constexpr void assign(char_type& c1, const char_type& c2) noexcept;
    static constexpr bool eq(char_type c1, char_type c2) noexcept;
    static constexpr bool lt(char_type c1, char_type c2) noexcept;

    static constexpr int compare(const char_type* s1, const char_type* s2, size_t n);
    static constexpr size_t length(const char_type* s);
    static constexpr const char_type* find(const char_type* s, size_t n,
                                           const char_type& a);
    static constexpr char_type* move(char_type* s1, const char_type* s2, size_t n);
    static constexpr char_type* copy(char_type* s1, const char_type* s2, size_t n);
    static constexpr char_type* assign(char_type* s, size_t n, char_type a);

    static constexpr int_type not_eof(int_type c) noexcept;
    static constexpr char_type to_char_type(int_type c) noexcept;
    static constexpr int_type to_int_type(char_type c) noexcept;
    static constexpr bool eq_int_type(int_type c1, int_type c2) noexcept;
    static constexpr int_type eof() noexcept;
  };
}
[codeblock:end]

[para]
[:en]
The type [`mbstate_t] is defined in [`<cwchar>] and can represent any of the
conversion states that can occur in an [%@impldef supported multibyte character
encoding rules] implementation-defined set of supported multibyte character
encoding rules.
[:zh_CN]
类型 [`mbstate_t] 是在 [`<cwchar>] 中定义的，并可以表示在 [%@impldef 受支持的
多字节字符编码规则] 由实现定义的受支持的多字节字符编码规则的集合中所发生的任何
转换状态。

[para]
[:en]
The two-argument member [`assign] is defined identically to the built-in
operator [`=].
[:zh_CN]
具有两个实参的成员 [`assign] 被定义为等同于内建运算符 [`=]。

[:en]
The two-argument members [`eq] and [`lt] are defined identically to the built-in
operators [`==] and [`<] for type [`unsigned char].
[:zh_CN]
具有两个实参的成员 [`eq] 和 [`lt] 被定义为等同于 [`unsigned char] 类型的内建
运算符 [`==] 和 [`<]。

[para]
[:en]
The member [`eof()] returns [`EOF].
[:zh_CN]
成员 [`eof()] 返回 [`EOF]。
