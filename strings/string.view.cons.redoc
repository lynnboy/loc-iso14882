[section#string.view.cons
    [:en] Construction and assignment
    [:zh_CN] 构造与赋值
]

[%@lib@ctor basic_string_view]
[codeblock:declaration]
constexpr basic_string_view() noexcept;
[codeblock:end]

[div:description]
[para:ensures]
[:en] [`size_ == 0] and [`data_ == nullptr].
[:zh_CN] [`size == 0] 且 [`date_ == nullptr]。
[div:end]

[%@lib@ctor basic_string_view]
[codeblock:declaration]
constexpr basic_string_view(const charT* str);
[codeblock:end]

[div:description]
[para:expects]
[:en] [=range(str,str + traits::length(str))] is a valid range.
[:zh_CN] [=range(str,str + traits::length(str))] 是有效范围。

[para:effects]
[:en] Constructs a [`basic_string_view], initializing [`data_] with [`str] and
initializing [`size_] with [`traits::length(str)].
[:zh_CN] 构造一个 [`basic_string_view]，以 [`str] 初始化 [`data_]，并以
[`traits::length(str)] 初始化 [`size_]。

[para:complexity]
[:en] [?bigoh[`traits::length(str)]].
[:zh_CN] [?bigoh[`traits::length(str)]]。
[div:end]

[%@lib@ctor basic_string_view]
[codeblock:declaration]
constexpr basic_string_view(const charT* str, size_type len);
[codeblock:end]

[div:description]
[para:expects]
[:en] [=range(str,str + len)] is a valid range.
[:zh_CN] [=range(str,str + len)] 是有效范围。

[para:effects]
[:en] Constructs a [`basic_string_view], initializing [`data_] with [`str] and
initializing [`size_] with [`len].
[:zh_CN] 构造一个 [`basic_string_view]，以 [`str] 初始化 [`data_]，并以 [`len]
初始化 [`size_]。
[div:end]

[%@lib@ctor basic_string_view]
[codeblock:declaration]
template<class It, class End>
  constexpr basic_string_view(It begin, End end);
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en] [`It] satisfies [`:c contiguous_iterator].
[:zh_CN] [`It] 符合 [`:c contiguous_iterator]。
[item]
[:en] [`End] satisfies [`[`:c sized_sentinel_for]<It>].
[:zh_CN] [`End] 符合 [`[`:c sized_sentinel_for]<It>]。
[item]
[:en] [`is_same_v<iter_value_t<It>, charT>] is [`true].
[:zh_CN] [`is_same_v<iter_value_t<It>, charT>] 为 [`true]。
[item]
[:en] [`is_convertible_v<End, size_type>] is [`false].
[:zh_CN] [`is_convertible_v<End, size_type>] 为 [`false]。
[list:end]

[para:expects]
[list]
[item]
[:en] [=range(begin,end)] is a valid range.
[:zh_CN] [=range(begin,end)] 为有效范围。
[item]
[:en] [`It] models [`:c contiguous_iterator].
[:zh_CN] [`It] 构成 [`:c contiguous_iterator]。
[item]
[:en] [`End] models [`[`:c sized_sentinel_for]<It>].
[:zh_CN] [`End] 构成 [`[`:c sized_sentinel_for]<It>]。
[list:end]

[para:effects]
[:en] Initializes [`data_] with [`to_address(begin)] and initializes [`size_]
with [`end - begin].
[:zh_CN] 以 [`to_address(begin)] 初始化 [`data_] 并以 [`end - begin] 初始化
[`size_]。
[div:end]

[%@lib@ctor basic_string_view]
[codeblock:declaration]
template<class R>
  constexpr basic_string_view(R&& r);
[codeblock:end]

[div:description]
[para]
[:en] Let [`d] be an lvalue of type [`remove_cvref_t<R>].
[:zh_CN] 令 [`d] 为 [`remove_cvref_t<R>] 类型的左值。

[para:constraints]
[list]
[item]
[:en] [`R] models [`ranges::[`:c contiguous_iterator]] and
[`ranges::[`:c sized_range]],
[:zh_CN] [`R] 构成 [`ranges::[`:c contiguous_iterator]] 和
[`ranges::[`:c sized_range]]，
[item]
[:en] [`is_same_v<ranges::range_value_t<R>, charT>] is [`true],
[:zh_CN] [`is_same_v<ranges::range_value_t<R>, charT>] 为 [`true]，
[item]
[:en] [`is_convertible_v<R, const charT*>] is [`false],
[:zh_CN] [`is_convertible_v<R, const charT*>] 为 [`false]，
[item]
[:en] [`d.operator ::std::basic_string_view<charT, traits>()] is not a valid
expression, and
[:zh_CN] [`d.operator ::std::basic_string_view<charT, traits>()] 不是有效表达式，
并且
[item]
[:en] if the [~qualified-id] [`remove_reference_t<R>::traits_type] is valid and
denotes a type, [`is_same_v<remove_reference_t<R>::traits_type, traits>] is
[`true].
[:zh_CN] 如果[~限定标识] [`remove_reference_t<R>::traits_type] 有效并代表类型，
则 [`is_same_v<remove_reference_t<R>::traits_type, traits>] 为 [`true]。
[list:end]

[para:effects]
[:en] Initializes [`data_] with [`ranges::data(r)] and [`size_] with
[`ranges::size(r)].
[:zh_CN] 以 [`ranges::data(r)] 初始化 [`data_] 并以 [`ranges::size(r)] 初始化
[`size_]。
[div:end]
