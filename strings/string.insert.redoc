[section#string.insert
    [`basic_string::insert]
]

[%@library basic_string[!insert]]
[%@library insert[!basic_string]]
[codeblock:declaration]
constexpr basic_string& insert(size_type pos, const basic_string& str);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to: [`return insert(pos, str.data(), str.size());]
[:zh_CN] 等价于：[`return insert(pos, str.data(), str.size());]
[exit:description]

[%@library insert[!basic_string]]
[%@library basic_string[!insert]]
[codeblock:declaration]
constexpr basic_string& insert(size_type pos1, const basic_string& str,
                               size_type pos2, size_type n = npos);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock:notation]
return insert(pos1, basic_string_view<charT, traits>(str), pos2, n);
[codeblock:end]
[exit:description]

[%@library insert[!basic_string]]
[%@library basic_string[!insert]]
[codeblock:declaration]
template<class T>
  constexpr basic_string& insert(size_type pos, const T& t);
[codeblock:end]

[enter:description]
[para:constraints]
[list]
[item]
[:en] [`is_convertible_v<const T&, basic_string_view<charT, traits>>] is [`true]
and
[:zh_CN] [`is_convertible_v<const T&, basic_string_view<charT, traits>>] 为
[`true]，并且
[item]
[:en] [`is_convertible_v<const T&, const charT*>] is [`false].
[:zh_CN] [`is_convertible_v<const T&, const charT*>] 为 [`false]。
[list:end]

[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock:notation]
basic_string_view<charT, traits> sv = t;
return insert(pos, sv.data(), sv.size());
[codeblock:end]
[exit:description]

[%@library insert[!basic_string]]
[%@library basic_string[!insert]]
[codeblock:declaration]
template<class T>
  constexpr basic_string& insert(size_type pos1, const T& t,
                                 size_type pos2, size_type n = npos);
[codeblock:end]

[enter:description]
[para:constraints]
[list]
[item]
[:en] [`is_convertible_v<const T&, basic_string_view<charT, traits>>] is [`true]
and
[:zh_CN] [`is_convertible_v<const T&, basic_string_view<charT, traits>>] 为
[`true]，并且
[item]
[:en] [`is_convertible_v<const T&, const charT*>] is [`false].
[:zh_CN] [`is_convertible_v<const T&, const charT*>] 为 [`false]。
[list:end]

[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock:notation]
basic_string_view<charT, traits> sv = t;
return insert(pos1, sv.substr(pos2, n));
[codeblock:end]
[exit:description]

[%@library insert[!basic_string]]
[%@library basic_string[!insert]]
[codeblock:declaration]
constexpr basic_string& insert(size_type pos, const charT* s, size_type n);
[codeblock:end]

[enter:description]
[para:expects]
[:en] [=range(s,s + n)] is a valid range.
[:zh_CN] [=range(s,s + n)] 是有效范围。

[para:throws]
[list]
[item]
[:en] [`out_of_range] if [`pos > size()],
[:zh_CN] 当 [`pos > size()] 时抛出 [`out_of_range]，
[item]
[:en] [`length_error] if [`n > max_size() - size()], or
[:zh_CN] 当 [`n > max_size() - size()] 时抛出 [`length_error]，或者
[item]
[:en] any exceptions thrown by [`allocator_traits<Allocator>::allocate].
[:zh_CN] 由 [`allocator_traits<Allocator>::allocate] 所抛出的任何异常。
[list:end]

[para:effects]
[:en] Inserts a copy of the range [=range(s,s + n)] immediately before the
character at position [`pos] if [`pos < size()], or otherwise at the end of the
string.
[:zh_CN] 当 [`pos < size()] 时，在紧接位置 [`pos] 处的字符之前插入范围
[=range(s,s + n)] 的一个副本，否则插入到字符串的末尾。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[exit:description]

[%@library insert[!basic_string]]
[%@library basic_string[!insert]]
[codeblock:declaration]
constexpr basic_string& insert(size_type pos, const charT* s);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to: [`return insert(pos, s, traits::length(s));]
[:zh_CN] 等价于：[`return insert(pos, s, traits::length(s));]
[exit:description]

[%@library basic_string[!insert]]
[%@library insert[!basic_string]]
[codeblock:declaration]
constexpr basic_string& insert(size_type pos, size_type n, charT c);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Inserts [`n] copies of [`c] before the character at position [`pos] if
[`pos < size()], or otherwise at the end of the string.
[:zh_CN] 当 [`pos < size()] 时，在紧接位置 [`pos] 处的字符之前插入 [`n] 个 [`c]
的副本，否则插入到字符串的末尾。

[para:returns]
[:] [`*this]

[para:throws]
[list]
[item]
[:en] [`out_of_range] if [`pos > size()],
[:zh_CN] 当 [`pos > size()] 时抛出 [`out_of_range]，
[item]
[:en] [`length_error] if [`n > max_size() - size()], or
[:zh_CN] 当 [`n > max_size() - size()] 时抛出 [`length_error]，或者
[item]
[:en] any exceptions thrown by [`allocator_traits<Allocator>::allocate].
[:zh_CN] 由 [`allocator_traits<Allocator>::allocate] 所抛出的任何异常。
[list:end]
[exit:description]

[%@library insert[!basic_string]]
[%@library basic_string[!insert]]
[codeblock:declaration]
constexpr iterator insert(const_iterator p, charT c);
[codeblock:end]

[enter:description]
[para:expects]
[:en] [`p] is a valid iterator on [`*this].
[:zh_CN] [`p] 为 [`*this] 的有效迭代器。

[para:effects]
[:en] Inserts a copy of [`c] at the position [`p].
[:zh_CN] 在位置 [`p] 插入一个 [`c] 的副本。

[para:returns]
[:en] An iterator which refers to the inserted character.
[:zh_CN] 指代所插入的字符的迭代器。
[exit:description]

[%@library insert[!basic_string]]
[%@library basic_string[!insert]]
[codeblock:declaration]
constexpr iterator insert(const_iterator p, size_type n, charT c);
[codeblock:end]

[enter:description]
[para:expects]
[:en] [`p] is a valid iterator on [`*this].
[:zh_CN] [`p] 为 [`*this] 的有效迭代器。

[para:effects]
[:en] Inserts [`n] copies of [`c] at the position [`p].
[:zh_CN] 在位置 [`p] 插入 [`n] 个 [`c] 的副本。

[para:returns]
[:en] An iterator which refers to the first inserted character, or [`p] if
[`n == 0].
[:zh_CN] 指代所插入的第一个字符的迭代器，或者当 [`n == 0] 时返回 [`p]。
[exit:description]

[%@library insert[!basic_string]]
[%@library basic_string[!insert]]
[codeblock:declaration]
template<class InputIterator>
  constexpr iterator insert(const_iterator p, InputIterator first, InputIterator last);
[codeblock:end]

[enter:description]
[para:constraints]
[:en] [`InputIterator] is a type that qualifies as an input iterator
([#container.requirements.general]).
[:zh_CN] [`InputIterator] 是可作为输入迭代器
（[#container.requirements.general]）的类型。

[para:expects]
[:en] [`p] is a valid iterator on [`*this].
[:zh_CN] [`p] 为 [`*this] 的有效迭代器。

[para:effects]
[:en] Equivalent to
[`insert(p - begin(), basic_string(first, last, get_allocator()))].
[:zh_CN] 等价于
[`insert(p - begin(), basic_string(first, last, get_allocator()))]。

[para:returns]
[:en] An iterator which refers to the first inserted character, or [`p] if
[`first == last].
[:zh_CN] 指代所插入的第一个字符的迭代器，或者当 [`first == last] 时为 [`p]。
[exit:description]

[%@library insert[!basic_string]]
[%@library basic_string[!insert]]
[codeblock:declaration]
constexpr iterator insert(const_iterator p, initializer_list<charT> il);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to: [`return insert(p, il.begin(), il.end());]
[:zh_CN] 等价于：[`return insert(p, il.begin(), il.end());]
[exit:description]
