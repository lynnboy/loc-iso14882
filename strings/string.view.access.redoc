[section#string.view.access
    [:en] Element access
    [:zh_CN] 元素访问
]

[%@lib@member operator`[`][!basic_string_view]]
[codeblock:declaration]
constexpr const_reference operator[](size_type pos) const;
[codeblock:end]

[div:description]
[para:hardexpects]
[:en] [`pos < size()] is [`true].
[:zh_CN] [`pos < size()] 为 [`true]。

[begin:note]
[:en] This precondition is stronger than the one on [`basic_string::operator`[`]].
[:zh_CN] 此前条件强于 [`basic_string::operator`[`]] 的前条件。
[end:note]

[para:returns]
[:en] [`data_`[pos`]].
[:zh_CN] [`data_`[pos`]]。

[para:throws]
[:en] Nothing.
[:zh_CN] 无。
[div:end]

[%@lib@member at[!basic_string_view]]
[codeblock:declaration]
constexpr const_reference at(size_type pos) const;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`data_`[pos`]].
[:zh_CN] [`data_`[pos`]]。

[para:throws]
[:en] [`out_of_range] if [`pos >= size()].
[:zh_CN] 当 [`pos >= size()] 时抛出 [`out_of_range]。
[div:end]

[%@lib@member front[!basic_string_view]]
[codeblock:declaration]
constexpr const_reference front() const;
[codeblock:end]

[div:description]
[para:hardexpectsexpects]
[:en] [`empty()] is [`false].
[:zh_CN] [`empty()] 为 [`false]。

[para:returns]
[:en] [`data_`[0`]].
[:zh_CN] [`data_`[0`]]。

[para:throws]
[:en] Nothing.
[:zh_CN] 无。
[div:end]

[%@lib@member back[!basic_string_view]]
[codeblock:declaration]
constexpr const_reference back() const;
[codeblock:end]

[div:description]
[para:hardexpectsexpects]
[:en] [`empty()] is [`false].
[:zh_CN] [`empty()] 为 [`false]。

[para:returns]
[:en] [`data_`[size() - 1`]].
[:zh_CN] [`data_`[size() - 1`]]。

[para:throws]
[:en] Nothing.
[:zh_CN] 无。
[div:end]

[%@lib@member data[!basic_string_view]]
[codeblock:declaration]
constexpr const_pointer data() const noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`data_].
[:zh_CN] [`data_]。

[para]
[begin:note]
[:en] Unlike [`basic_string::data()] and [~string-literal]s, [`data()] can
return a pointer to a buffer that is not null-terminated.
[:zh_CN] 与 [`basic_string::data()] 和[~字符串字面量]不同，[`data()] 可以返回
一个指向并非以空终结的缓冲区的指针。

[:en] Therefore it is typically a mistake to pass [`data()] to a function that
takes just a [`const charT*] and expects a null-terminated string.
[:zh_CN] 因此，通常将 [`data()] 传递给某个仅接受一个 [`const charT*] 并期待一个
空终结字符串的函数都是错误的。
[end:note]
[div:end]
