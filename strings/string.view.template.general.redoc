[section#string.view.template.general
    [:en] General
    [:zh_CN] 概述
]

[%@lib basic_string_view]
[%@lib@member traits_type[!basic_string_view]]
[%@lib@member value_type[!basic_string_view]]
[%@lib@member pointer[!basic_string_view]]
[%@lib@member const_pointer[!basic_string_view]]
[%@lib@member reference[!basic_string_view]]
[%@lib@member const_reference[!basic_string_view]]
[%@lib@member const_iterator[!basic_string_view]]
[%@lib@member iterator[!basic_string_view]]
[%@lib@member const_reverse_iterator[!basic_string_view]]
[%@lib@member reverse_iterator[!basic_string_view]]
[%@lib@member size_type[!basic_string_view]]
[%@lib@member difference_type[!basic_string_view]]
[codeblock:synopsis]
namespace std {
  template<class charT, class traits = char_traits<charT>>
  class basic_string_view {
  public:
    // [:en] types \
    [:zh_CN] 类型
    using traits_type            = traits;
    using value_type             = charT;
    using pointer                = value_type*;
    using const_pointer          = const value_type*;
    using reference              = value_type&;
    using const_reference        = const value_type&;
    using const_iterator         = [[redoc("[?impdefx [:en] type of [`basic_string_view::const_iterator]"
                                                  "[:zh_CN] [`basic_string_view::const_iterator] 的类型]")]]; // [:en] see [#string.view.iterators] \
                                                                                                              [:zh_CN] 参见 [#string.view.iterators]
    using iterator               = const_iterator;[[redoc("[#:fn]")]]
    using const_reverse_iterator = reverse_iterator<const_iterator>;
    using reverse_iterator       = const_reverse_iterator;
    using size_type              = size_t;
    using difference_type        = ptrdiff_t;
    static constexpr size_type npos = size_type(-1);

    // [:en] [#string.view.cons], construction and assignment \
    [:zh_CN] [#string.view.cons]，构造与赋值
    constexpr basic_string_view() noexcept;
    constexpr basic_string_view(const basic_string_view&) noexcept = default;
    constexpr basic_string_view& operator=(const basic_string_view&) noexcept = default;
    constexpr basic_string_view(const charT* str);
    basic_string_view(nullptr_t) = delete;
    constexpr basic_string_view(const charT* str, size_type len);
    template<class It, class End>
      constexpr basic_string_view(It begin, End end);
    template<class R>
      constexpr basic_string_view(R&& r);

    // [:en] [#string.view.iterators], iterator support \
    [:zh_CN] [#string.view.iterators]，迭代器支持
    constexpr const_iterator begin() const noexcept;
    constexpr const_iterator end() const noexcept;
    constexpr const_iterator cbegin() const noexcept;
    constexpr const_iterator cend() const noexcept;
    constexpr const_reverse_iterator rbegin() const noexcept;
    constexpr const_reverse_iterator rend() const noexcept;
    constexpr const_reverse_iterator crbegin() const noexcept;
    constexpr const_reverse_iterator crend() const noexcept;

    // [:en] [#string.view.capacity], capacity \
    [:zh_CN] [#string.view.capacity]，容量
    constexpr size_type size() const noexcept;
    constexpr size_type length() const noexcept;
    constexpr size_type max_size() const noexcept;
    [[nodiscard]] constexpr bool empty() const noexcept;

    // [:en] [#string.view.access], element access \
    [:zh_CN] [#string.view.access]，元素访问
    constexpr const_reference operator[](size_type pos) const;
    constexpr const_reference at(size_type pos) const;
    constexpr const_reference front() const;
    constexpr const_reference back() const;
    constexpr const_pointer data() const noexcept;

    // [:en] [#string.view.modifiers], modifiers \
    [:zh_CN] [#string.view.modifiers]，改动函数
    constexpr void remove_prefix(size_type n);
    constexpr void remove_suffix(size_type n);
    constexpr void swap(basic_string_view& s) noexcept;

    // [:en] [#string.view.ops], string operations \
    [:zh_CN] [#string.view.ops]，字符串操作
    constexpr size_type copy(charT* s, size_type n, size_type pos = 0) const;

    constexpr basic_string_view substr(size_type pos = 0, size_type n = npos) const;

    constexpr int compare(basic_string_view s) const noexcept;
    constexpr int compare(size_type pos1, size_type n1, basic_string_view s) const;
    constexpr int compare(size_type pos1, size_type n1, basic_string_view s,
                          size_type pos2, size_type n2) const;
    constexpr int compare(const charT* s) const;
    constexpr int compare(size_type pos1, size_type n1, const charT* s) const;
    constexpr int compare(size_type pos1, size_type n1, const charT* s, size_type n2) const;

    constexpr bool starts_with(basic_string_view x) const noexcept;
    constexpr bool starts_with(charT x) const noexcept;
    constexpr bool starts_with(const charT* x) const;
    constexpr bool ends_with(basic_string_view x) const noexcept;
    constexpr bool ends_with(charT x) const noexcept;
    constexpr bool ends_with(const charT* x) const;

    constexpr bool contains(basic_string_view x) const noexcept;
    constexpr bool contains(charT x) const noexcept;
    constexpr bool contains(const charT* x) const;

    // [:en] [#string.view.find], searching \
    [:zh_CN] [#string.view.find]，搜索
    constexpr size_type find(basic_string_view s, size_type pos = 0) const noexcept;
    constexpr size_type find(charT c, size_type pos = 0) const noexcept;
    constexpr size_type find(const charT* s, size_type pos, size_type n) const;
    constexpr size_type find(const charT* s, size_type pos = 0) const;
    constexpr size_type rfind(basic_string_view s, size_type pos = npos) const noexcept;
    constexpr size_type rfind(charT c, size_type pos = npos) const noexcept;
    constexpr size_type rfind(const charT* s, size_type pos, size_type n) const;
    constexpr size_type rfind(const charT* s, size_type pos = npos) const;

    constexpr size_type find_first_of(basic_string_view s, size_type pos = 0) const noexcept;
    constexpr size_type find_first_of(charT c, size_type pos = 0) const noexcept;
    constexpr size_type find_first_of(const charT* s, size_type pos, size_type n) const;
    constexpr size_type find_first_of(const charT* s, size_type pos = 0) const;
    constexpr size_type find_last_of(basic_string_view s, size_type pos = npos) const noexcept;
    constexpr size_type find_last_of(charT c, size_type pos = npos) const noexcept;
    constexpr size_type find_last_of(const charT* s, size_type pos, size_type n) const;
    constexpr size_type find_last_of(const charT* s, size_type pos = npos) const;
    constexpr size_type find_first_not_of(basic_string_view s, size_type pos = 0) const noexcept;
    constexpr size_type find_first_not_of(charT c, size_type pos = 0) const noexcept;
    constexpr size_type find_first_not_of(const charT* s, size_type pos,
                                          size_type n) const;
    constexpr size_type find_first_not_of(const charT* s, size_type pos = 0) const;
    constexpr size_type find_last_not_of(basic_string_view s,
                                         size_type pos = npos) const noexcept;
    constexpr size_type find_last_not_of(charT c, size_type pos = npos) const noexcept;
    constexpr size_type find_last_not_of(const charT* s, size_type pos,
                                         size_type n) const;
    constexpr size_type find_last_not_of(const charT* s, size_type pos = npos) const;

  private:
    const_pointer data_;        // [=expos]
    size_type size_;            // [=expos]
  };

  // [:en] [#string.view.deduct], deduction guides \
  [:zh_CN] [#string.view.deduct]，推断导引
  template<class It, class End>
    basic_string_view(It, End) -> basic_string_view<iter_value_t<It>>;
  template<class R>
    basic_string_view(R&&) -> basic_string_view<ranges::range_value_t<R>>;
}
[codeblock:end]

[note:foot]
[:en]
Because [`basic_string_view] refers to a constant sequence, [`iterator] and
[`const_iterator] are the same type.
[:zh_CN]
由于 [`basic_string_view] 指代的是常量序列，其 [`iterator] 和 [`const_iterator]
因而是相同的类型。
[note:end]

[para]
[:en]
In every specialization [`basic_string_view<charT, traits>], the type [`traits]
shall meet the character traits requirements ([#char.traits]).
[:zh_CN]
在各个特例 [`basic_string_view<charT, traits>] 中，类型 [`traits] 应当符合对字符
特征的规定（[#char.traits]）。

[begin:note]
[:en] The program is ill-formed if [`traits::char_type] is not the same type as
[`charT].
[:zh_CN] 如果 [`traits::char_type] 与 [`charT] 不是相同的类型，则程序非良构。
[end:note]

[para]
[:en]
For a [`basic_string_view str], any operation that invalidates a pointer in the
range [=range(str.data(),str.data() + str.size())] invalidates pointers,
iterators, and references returned from [`str][=']s member functions.
[:zh_CN]
对于 [`basic_string_view str]，任何能够使范围
[=range(str.data(),str.data() + str.size())] 中的指针失效的操作，都会使从 [`str]
的成员函数所返回的指针、迭代器和引用失效。

[para]
[:en]
The complexity of [`basic_string_view] member functions is [?bigoh 1] unless
otherwise specified.
[:zh_CN]
除非另行说明，[`basic_string_view] 的各成员函数的复杂度均为 [?bigoh 1]。
