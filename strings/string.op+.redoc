[section#string.op+
    [`operator+]
]

[%@library basic_string[!operator+]]
[%@library operator+[!basic_string]]
[codeblock:declaration]
template<class charT, class traits, class Allocator>
  basic_string<charT, traits, Allocator>
    operator+(const basic_string<charT, traits, Allocator>& lhs,
              const basic_string<charT, traits, Allocator>& rhs);
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`basic_string<charT, traits, Allocator>(lhs).append(rhs)].
[:zh_CN] [`basic_string<charT, traits, Allocator>(lhs).append(rhs)]。
[exit:description]

[%@library basic_string[!operator+]]
[%@library operator+[!basic_string]]
[codeblock:declaration]
template<class charT, class traits, class Allocator>
  basic_string<charT, traits, Allocator>
    operator+(basic_string<charT, traits, Allocator>&& lhs,
              const basic_string<charT, traits, Allocator>& rhs);
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`std::move(lhs.append(rhs))].
[:zh_CN] [`std::move(lhs.append(rhs))]。
[exit:description]

[%@library basic_string[!operator+]]
[%@library operator+[!basic_string]]
[codeblock:declaration]
template<class charT, class traits, class Allocator>
  basic_string<charT, traits, Allocator>
    operator+(const basic_string<charT, traits, Allocator>& lhs,
              basic_string<charT, traits, Allocator>&& rhs);
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`std::move(rhs.insert(0, lhs))].
[:zh_CN] [`std::move(rhs.insert(0, lhs))]。
[exit:description]

[%@library basic_string[!operator+]]
[%@library operator+[!basic_string]]
[codeblock:declaration]
template<class charT, class traits, class Allocator>
  basic_string<charT, traits, Allocator>
    operator+(basic_string<charT, traits, Allocator>&& lhs,
              basic_string<charT, traits, Allocator>&& rhs);
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`std::move(lhs.append(rhs))].
[:zh_CN] [`std::move(lhs.append(rhs))]。

[enter:note]
[:en] Or equivalently, [`std::move(rhs.insert(0, lhs))].
[:zh_CN] 或者等价地，[`std::move(rhs.insert(0, lhs))]。
[exit:note]
[exit:description]

[%@library operator+[!basic_string]]
[%@library basic_string[!operator+]]
[codeblock:declaration]
template<class charT, class traits, class Allocator>
  basic_string<charT, traits, Allocator>
    operator+(const charT* lhs,
              const basic_string<charT, traits, Allocator>& rhs);
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`basic_string<charT, traits, Allocator>(lhs) + rhs].
[:zh_CN] [`basic_string<charT, traits, Allocator>(lhs) + rhs]。

[para:remarks]
[:en] Uses [`traits::length()].
[:zh_CN] 使用了 [`traits::length()]。
[exit:description]

[%@library operator+[!basic_string]]
[%@library basic_string[!operator+]]
[codeblock:declaration]
template<class charT, class traits, class Allocator>
  basic_string<charT, traits, Allocator>
    operator+(const charT* lhs,
              basic_string<charT, traits, Allocator>&& rhs);
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`std::move(rhs.insert(0, lhs))].
[:zh_CN] [`std::move(rhs.insert(0, lhs))]。

[para:remarks]
[:en] Uses [`traits::length()].
[:zh_CN] 使用了 [`traits::length()]。
[exit:description]

[%@library basic_string[!operator+]]
[%@library operator+[!basic_string]]
[codeblock:declaration]
template<class charT, class traits, class Allocator>
  basic_string<charT, traits, Allocator>
    operator+(charT lhs,
              const basic_string<charT, traits, Allocator>& rhs);
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`basic_string<charT, traits, Allocator>(1, lhs) + rhs].
[:zh_CN] [`basic_string<charT, traits, Allocator>(1, lhs) + rhs]。
[exit:description]

[%@library basic_string[!operator+]]
[%@library operator+[!basic_string]]
[codeblock:declaration]
template<class charT, class traits, class Allocator>
  basic_string<charT, traits, Allocator>
    operator+(charT lhs,
              basic_string<charT, traits, Allocator>&& rhs);
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`std::move(rhs.insert(0, 1, lhs))].
[:zh_CN] [`std::move(rhs.insert(0, 1, lhs))]。
[exit:description]

[%@library operator+[!basic_string]]
[%@library basic_string[!operator+]]
[codeblock:declaration]
template<class charT, class traits, class Allocator>
  basic_string<charT, traits, Allocator>
    operator+(const basic_string<charT, traits, Allocator>& lhs,
              const charT* rhs);
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`lhs + basic_string<charT, traits, Allocator>(rhs)].
[:zh_CN] [`lhs + basic_string<charT, traits, Allocator>(rhs)]。

[para:remarks]
[:en] Uses [`traits::length()].
[:zh_CN] 使用了 [`traits::length()]。
[exit:description]

[%@library operator+[!basic_string]]
[%@library basic_string[!operator+]]
[codeblock:declaration]
template<class charT, class traits, class Allocator>
  basic_string<charT, traits, Allocator>
    operator+(basic_string<charT, traits, Allocator>&& lhs,
              const charT* rhs);
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`std::move(lhs.append(rhs))].
[:zh_CN] [`std::move(lhs.append(rhs))]。

[para:remarks]
[:en] Uses [`traits::length()].
[:zh_CN] 使用了 [`traits::length()]。
[exit:description]

[%@library basic_string[!operator+]]
[%@library operator+[!basic_string]]
[codeblock:declaration]
template<class charT, class traits, class Allocator>
  basic_string<charT, traits, Allocator>
    operator+(const basic_string<charT, traits, Allocator>& lhs,
              charT rhs);
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`lhs + basic_string<charT, traits, Allocator>(1, rhs)].
[:zh_CN] [`lhs + basic_string<charT, traits, Allocator>(1, rhs)]。
[exit:description]

[%@library basic_string[!operator+]]
[%@library operator+[!basic_string]]
[codeblock:declaration]
template<class charT, class traits, class Allocator>
  basic_string<charT, traits, Allocator>
    operator+(basic_string<charT, traits, Allocator>&& lhs,
              charT rhs);
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`std::move(lhs.append(1, rhs))].
[:zh_CN] [`std::move(lhs.append(1, rhs))]。
[exit:description]
