[section#string.view.literals
    [:en] Suffix for [`basic_string_view] literals
    [:zh_CN] [`basic_string_view] 字面量的后缀
]

[%@library operator""sv[!string_view]]
[%@library string_view[!operator""sv]]
[codeblock:declaration]
constexpr string_view operator""sv(const char* str, size_t len) noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`string_view{str, len}].
[:zh_CN] [`string_view{str, len}]。
[div:end]

[%@library operator""sv[!u8string_view]]
[%@library u8string_view[!operator""sv]]
[codeblock:declaration]
constexpr u8string_view operator""sv(const char8_t* str, size_t len) noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`u8string_view{str, len}].
[:zh_CN] [`u8string_view{str, len}]。
[div:end]

[%@library operator""sv[!u16string_view]]
[%@library u16string_view[!operator""sv]]
[codeblock:declaration]
constexpr u16string_view operator""sv(const char16_t* str, size_t len) noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`u16string_view{str, len}].
[:zh_CN] [`u16string_view{str, len}]。
[div:end]

[%@library operator""sv[!u32string_view]]
[%@library u32string_view[!operator""sv]]
[codeblock:declaration]
constexpr u32string_view operator""sv(const char32_t* str, size_t len) noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`u32string_view{str, len}].
[:zh_CN] [`u32string_view{str, len}]。
[div:end]

[%@library operator""sv[!wstring_view]]
[%@library wstring_view[!operator""sv]]
[codeblock:declaration]
constexpr wstring_view operator""sv(const wchar_t* str, size_t len) noexcept;
[codeblock:end]

[div:description]
[para:returns]
[:en] [`wstring_view{str, len}].
[:zh_CN] [`wstring_view{str, len}]。
[div:end]
