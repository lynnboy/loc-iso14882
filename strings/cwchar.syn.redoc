[section#cwchar.syn
    [:en] Header [`<cwchar>] synopsis
    [:zh_CN] 头文件 [`<cwchar>] 纲要
]

[%@hdr@def cwchar]
[%@lib NULL]
[%@lib WCHAR_MAX]
[%@lib WCHAR_MIN]
[%@lib WEOF]
[%@lib btowc]
[%@lib fgetwc]
[%@lib fgetws]
[%@lib fputwc]
[%@lib fputws]
[%@lib fwide]
[%@lib fwprintf]
[%@lib fwscanf]
[%@lib getwchar]
[%@lib getwc]
[%@lib mbrlen]
[%@lib mbrtowc]
[%@lib mbsinit]
[%@lib mbsrtowcs]
[%@lib mbstate_t]
[%@lib putwchar]
[%@lib putwc]
[%@lib size_t]
[%@lib swprintf]
[%@lib swscanf]
[%@lib tm]
[%@lib ungetwc]
[%@lib vfwprintf]
[%@lib vfwscanf]
[%@lib vswprintf]
[%@lib vswscanf]
[%@lib vwprintf]
[%@lib vwscanf]
[%@lib wcrtomb]
[%@lib wcscat]
[%@lib wcschr]
[%@lib wcscmp]
[%@lib wcscoll]
[%@lib wcscpy]
[%@lib wcscspn]
[%@lib wcsftime]
[%@lib wcslen]
[%@lib wcsncat]
[%@lib wcsncmp]
[%@lib wcsncpy]
[%@lib wcspbrk]
[%@lib wcsrchr]
[%@lib wcsrtombs]
[%@lib wcsspn]
[%@lib wcsstr]
[%@lib wcstod]
[%@lib wcstof]
[%@lib wcstok]
[%@lib wcstold]
[%@lib wcstoll]
[%@lib wcstol]
[%@lib wcstoull]
[%@lib wcstoul]
[%@lib wcsxfrm]
[%@lib wctob]
[%@lib wint_t]
[%@lib wmemchr]
[%@lib wmemcmp]
[%@lib wmemcpy]
[%@lib wmemmove]
[%@lib wmemset]
[%@lib wprintf]
[%@lib wscanf]
[codeblock:synopsis]
namespace std {
  using size_t = [[redoc("[span:em [:en] see [#support.types.layout] [:zh_CN] 参见 [#support.types.layout]]")]];
  using mbstate_t = [[redoc("=seebelow")]];
  using wint_t = [[redoc("=seebelow")]];

  struct tm;

  int fwprintf(FILE* stream, const wchar_t* format, ...);
  int fwscanf(FILE* stream, const wchar_t* format, ...);
  int swprintf(wchar_t* s, size_t n, const wchar_t* format, ...);
  int swscanf(const wchar_t* s, const wchar_t* format, ...);
  int vfwprintf(FILE* stream, const wchar_t* format, va_list arg);
  int vfwscanf(FILE* stream, const wchar_t* format, va_list arg);
  int vswprintf(wchar_t* s, size_t n, const wchar_t* format, va_list arg);
  int vswscanf(const wchar_t* s, const wchar_t* format, va_list arg);
  int vwprintf(const wchar_t* format, va_list arg);
  int vwscanf(const wchar_t* format, va_list arg);
  int wprintf(const wchar_t* format, ...);
  int wscanf(const wchar_t* format, ...);
  wint_t fgetwc(FILE* stream);
  wchar_t* fgetws(wchar_t* s, int n, FILE* stream);
  wint_t fputwc(wchar_t c, FILE* stream);
  int fputws(const wchar_t* s, FILE* stream);
  int fwide(FILE* stream, int mode);
  wint_t getwc(FILE* stream);
  wint_t getwchar();
  wint_t putwc(wchar_t c, FILE* stream);
  wint_t putwchar(wchar_t c);
  wint_t ungetwc(wint_t c, FILE* stream);
  double wcstod(const wchar_t* nptr, wchar_t** endptr);
  float wcstof(const wchar_t* nptr, wchar_t** endptr);
  long double wcstold(const wchar_t* nptr, wchar_t** endptr);
  long int wcstol(const wchar_t* nptr, wchar_t** endptr, int base);
  long long int wcstoll(const wchar_t* nptr, wchar_t** endptr, int base);
  unsigned long int wcstoul(const wchar_t* nptr, wchar_t** endptr, int base);
  unsigned long long int wcstoull(const wchar_t* nptr, wchar_t** endptr, int base);
  wchar_t* wcscpy(wchar_t* s1, const wchar_t* s2);
  wchar_t* wcsncpy(wchar_t* s1, const wchar_t* s2, size_t n);
  wchar_t* wmemcpy(wchar_t* s1, const wchar_t* s2, size_t n);
  wchar_t* wmemmove(wchar_t* s1, const wchar_t* s2, size_t n);
  wchar_t* wcscat(wchar_t* s1, const wchar_t* s2);
  wchar_t* wcsncat(wchar_t* s1, const wchar_t* s2, size_t n);
  int wcscmp(const wchar_t* s1, const wchar_t* s2);
  int wcscoll(const wchar_t* s1, const wchar_t* s2);
  int wcsncmp(const wchar_t* s1, const wchar_t* s2, size_t n);
  size_t wcsxfrm(wchar_t* s1, const wchar_t* s2, size_t n);
  int wmemcmp(const wchar_t* s1, const wchar_t* s2, size_t n);
  const wchar_t* wcschr(const wchar_t* s, wchar_t c);           // [:en] see [#library.c] \
                                                                   [:zh_CN] 参见 [#library.c]
  wchar_t* wcschr(wchar_t* s, wchar_t c);                       // [:en] see [#library.c] \
                                                                   [:zh_CN] 参见 [#library.c]
  size_t wcscspn(const wchar_t* s1, const wchar_t* s2);
  const wchar_t* wcspbrk(const wchar_t* s1, const wchar_t* s2); // [:en] see [#library.c] \
                                                                   [:zh_CN] 参见 [#library.c]
  wchar_t* wcspbrk(wchar_t* s1, const wchar_t* s2);             // [:en] see [#library.c] \
                                                                   [:zh_CN] 参见 [#library.c]
  const wchar_t* wcsrchr(const wchar_t* s, wchar_t c);          // [:en] see [#library.c] \
                                                                   [:zh_CN] 参见 [#library.c]
  wchar_t* wcsrchr(wchar_t* s, wchar_t c);                      // [:en] see [#library.c] \
                                                                   [:zh_CN] 参见 [#library.c]
  size_t wcsspn(const wchar_t* s1, const wchar_t* s2);
  const wchar_t* wcsstr(const wchar_t* s1, const wchar_t* s2);  // [:en] see [#library.c] \
                                                                   [:zh_CN] 参见 [#library.c]
  wchar_t* wcsstr(wchar_t* s1, const wchar_t* s2);              // [:en] see [#library.c] \
                                                                   [:zh_CN] 参见 [#library.c]
  wchar_t* wcstok(wchar_t* s1, const wchar_t* s2, wchar_t** ptr);
  const wchar_t* wmemchr(const wchar_t* s, wchar_t c, size_t n);    // [:en] see [#library.c] \
                                                                       [:zh_CN] 参见 [#library.c]
  wchar_t* wmemchr(wchar_t* s, wchar_t c, size_t n);            // [:en] see [#library.c] \
                                                                   [:zh_CN] 参见 [#library.c]
  size_t wcslen(const wchar_t* s);
  wchar_t* wmemset(wchar_t* s, wchar_t c, size_t n);
  size_t wcsftime(wchar_t* s, size_t maxsize, const wchar_t* format, const struct tm* timeptr);
  wint_t btowc(int c);
  int wctob(wint_t c);

  // [:en] [#c.mb.wcs], multibyte / wide string and character conversion functions \
     [:zh_CN] [#c.mb.wcs]，多字节/宽字符串和字符转换函数
  int mbsinit(const mbstate_t* ps);
  size_t mbrlen(const char* s, size_t n, mbstate_t* ps);
  size_t mbrtowc(wchar_t* pwc, const char* s, size_t n, mbstate_t* ps);
  size_t wcrtomb(char* s, wchar_t wc, mbstate_t* ps);
  size_t mbsrtowcs(wchar_t* dst, const char** src, size_t len, mbstate_t* ps);
  size_t wcsrtombs(char* dst, const wchar_t** src, size_t len, mbstate_t* ps);
}

#define NULL [[redoc("[span:em [:en] see [#support.types.nullptr] [:zh_CN] 参见 [#support.types.nullptr]]")]]
#define WCHAR_MAX [[redoc("=seebelow")]]
#define WCHAR_MIN [[redoc("=seebelow")]]
#define WEOF [[redoc("=seebelow")]]
[codeblock:end]

[para]
[%@header wchar.h]
[:en] The contents and meaning of the header [?libheader cwchar] are the same as
the C standard library header [?libheader wchar.h], except that it does not
declare a type [`wchar_t].
[:zh_CN] 头文件 [?libheader cwchar] 的内容和含义和 C 标准程序库头文件
[?libheader wchar.h] 相同，但它并不声明类型 [`wchar_t]。

[para]
[begin:note]
[:en] The functions [`wcschr], [`wcspbrk], [`wcsrchr], [`wcsstr], and [`wmemchr]
have different signatures in this document, but they have the same behavior as
in the C standard library ([#library.c]).
[:zh_CN] 函数 [`wcschr]、[`wcspbrk]、[`wcsrchr]、[`wcsstr] 和 [`wmemchr] 在本
文档中具有不同的签名，但它们的行为和 C 标准程序库（[#library.c]）中的相同。
[end:note]

[para:xref@c] 7.29
