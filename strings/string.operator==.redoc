[section#string.operator==
    [`operator==]
]

[%@library basic_string[!operator==]]
[%@library operator==[!basic_string]]
[codeblock:declaration]
template<class charT, class traits, class Allocator>
  bool operator==(const basic_string<charT, traits, Allocator>& lhs,
                  const basic_string<charT, traits, Allocator>& rhs) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`lhs.compare(rhs) == 0].
[:zh_CN] [`lhs.compare(rhs) == 0]。
[exit:description]

[%@library operator==[!basic_string]]
[%@library basic_string[!operator==]]
[codeblock:declaration]
template<class charT, class traits, class Allocator>
  bool operator==(const charT* lhs,
                  const basic_string<charT, traits, Allocator>& rhs);
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`rhs == lhs].
[:zh_CN] [`rhs == lhs]。
[exit:description]

[%@library operator==[!basic_string]]
[%@library basic_string[!operator==]]
[codeblock:declaration]
template<class charT, class traits, class Allocator>
  bool operator==(const basic_string<charT, traits, Allocator>& lhs,
                  const charT* rhs);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`rhs] points to an array of at least [`traits::length(rhs) + 1] elements
of [`charT].
[:zh_CN] [`rhs] 指向 [`charT] 的至少 [`traits::length(rhs) + 1] 个元素的数组。

[para:returns]
[:en] [`lhs.compare(rhs) == 0].
[:zh_CN] [`lhs.compare(rhs) == 0]。
[exit:description]
