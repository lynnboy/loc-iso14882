[section#string.find
    [:en] Searching
    [:zh_CN] 搜索
]

[para]
[%@library find[!basic_string]]
[%@library basic_string[!find]]
[%@library rfind[!basic_string]]
[%@library basic_string[!rfind]]
[%@library find_first_of[!basic_string]]
[%@library basic_string[!find_first_of]]
[%@library find_last_of[!basic_string]]
[%@library basic_string[!find_last_of]]
[%@library find_first_not_of[!basic_string]]
[%@library basic_string[!find_first_not_of]]
[%@library find_last_not_of[!basic_string]]
[%@library basic_string[!find_last_not_of]]
[:en] Let [*F] be one of [`find], [`rfind], [`find_first_of], [`find_last_of],
[`find_first_not_of], and [`find_last_not_of].
[:zh_CN] 令 [*F] 为 [`find]，[`rfind]，[`find_first_of]，[`find_last_of]，
[`find_first_not_of]，和 [`find_last_not_of] 其中之一。

[list]
[item]
[:en] Each member function of the form
[:zh_CN] 形式为
[codeblock:notation]
constexpr size_type [*F](const basic_string& str, size_type pos) const noexcept;
[codeblock:end]
[:en@~] has effects equivalent to:
[`return [*F](basic_string_view<charT, traits>(str), pos);]
[:zh_CN@~] 的每个成员函数的效果都等价于：
[`return [*F](basic_string_view<charT, traits>(str), pos);]

[item]
[:en] Each member function of the form
[:zh_CN] 形式为
[codeblock:notation]
constexpr size_type [*F](const charT* s, size_type pos) const;
[codeblock:end]
[:en@~] has effects equivalent to:
[`return [*F](basic_string_view<charT, traits>(s), pos);]
[:zh_CN@~] 的每个成员函数的效果都等价于：
[`return [*F](basic_string_view<charT, traits>(s), pos);]

[item]
[:en] Each member function of the form
[:zh_CN] 形式为
[codeblock:notation]
constexpr size_type [*F](const charT* s, size_type pos, size_type n) const;
[codeblock:end]
[:en@~] has effects equivalent to:
[`return [*F](basic_string_view<charT, traits>(s, n), pos);]
[:zh_CN@~] 的每个成员函数的效果都等价于：
[`return [*F](basic_string_view<charT, traits>(s, n), pos);]

[item]
[:en] Each member function of the form
[:zh_CN] 形式为
[codeblock:notation]
constexpr size_type [*F](charT c, size_type pos) const noexcept;
[codeblock:end]
[:en@~] has effects equivalent to:
[:zh_CN@~] 的每个成员函数的效果都等价于：
[codeblock:notation]
return [*F](basic_string_view<charT, traits>(addressof(c), 1), pos);
[codeblock:end]
[list:end]

[%@library basic_string[!find]]
[%@library find[!basic_string]]
[%@library basic_string[!rfind]]
[%@library rfind[!basic_string]]
[%@library basic_string[!find_first_of]]
[%@library find_first_of[!basic_string]]
[%@library basic_string[!find_last_of]]
[%@library find_last_of[!basic_string]]
[%@library basic_string[!find_first_not_of]]
[%@library find_first_not_of[!basic_string]]
[%@library basic_string[!find_last_not_of]]
[%@library find_last_not_of[!basic_string]]
[codeblock:declaration]
template<class T>
  constexpr size_type find(const T& t, size_type pos = 0) const noexcept([[redoc("=seebelow")]]);
template<class T>
  constexpr size_type rfind(const T& t, size_type pos = npos) const noexcept([[redoc("=seebelow")]]);
template<class T>
  constexpr size_type find_first_of(const T& t, size_type pos = 0) const noexcept([[redoc("=seebelow")]]);
template<class T>
  constexpr size_type find_last_of(const T& t, size_type pos = npos) const noexcept([[redoc("=seebelow")]]);
template<class T>
  constexpr size_type find_first_not_of(const T& t, size_type pos = 0) const noexcept([[redoc("=seebelow")]]);
template<class T>
  constexpr size_type find_last_not_of(const T& t, size_type pos = npos) const noexcept([[redoc("=seebelow")]]);
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en] [`is_convertible_v<const T&, basic_string_view<charT, traits>>] is [`true]
and
[:zh_CN] [`is_convertible_v<const T&, basic_string_view<charT, traits>>] 为
[`true]，并且
[item]
[:en] [`is_convertible_v<const T&, const charT*>] is [`false].
[:zh_CN] [`is_convertible_v<const T&, const charT*>] 为 [`false]。
[list:end]

[para:effects]
[:en] Let [*G] be the name of the function.
[:zh_CN] 令 [*G] 为函数的名字。

[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock:notation]
basic_string_view<charT, traits> s = *this, sv = t;
return s.[*G](sv, pos);
[codeblock:end]

[para:remarks]
[:en] The expression inside [`noexcept] is equivalent to
[`is_nothrow_convertible_v<const T&, basic_string_view<charT, traits>>].
[:zh_CN] [`noexcept] 之中的表达式等价于
[`is_nothrow_convertible_v<const T&, basic_string_view<charT, traits>>]。
[div:end]
