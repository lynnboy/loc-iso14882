[section#string.op.plus
    [`operator+]
]

[%@lib@member operator+[!basic_string]]
[codeblock:declaration]
template<class charT, class traits, class Allocator>
  constexpr basic_string<charT, traits, Allocator>
    operator+(const basic_string<charT, traits, Allocator>& lhs,
              const basic_string<charT, traits, Allocator>& rhs);
template<class charT, class traits, class Allocator>
  constexpr basic_string<charT, traits, Allocator>
    operator+(const basic_string<charT, traits, Allocator>& lhs, const charT* rhs);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
basic_string<charT, traits, Allocator> r = lhs;
r.append(rhs);
return r;
[codeblock:end]
[div:end]

[%@lib@member operator+[!basic_string]]
[codeblock:declaration]
template<class charT, class traits, class Allocator>
  constexpr basic_string<charT, traits, Allocator>
    operator+(basic_string<charT, traits, Allocator>&& lhs,
              const basic_string<charT, traits, Allocator>& rhs);
template<class charT, class traits, class Allocator>
  constexpr basic_string<charT, traits, Allocator>
    operator+(basic_string<charT, traits, Allocator>&& lhs, const charT* rhs);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
lhs.append(rhs);
return std::move(lhs);
[codeblock:end]
[div:end]

[%@lib@member operator+[!basic_string]]
[codeblock:declaration]
template<class charT, class traits, class Allocator>
  constexpr basic_string<charT, traits, Allocator>
    operator+(basic_string<charT, traits, Allocator>&& lhs,
              basic_string<charT, traits, Allocator>&& rhs);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
lhs.append(rhs);
return std::move(lhs);
[codeblock:end]
[:en@~] except that both [`lhs] and [`rhs] are left in valid but unspecified
states.
[:zh_CN@~] 但 [`lhs] 和 [`rhs] 都遗留处于有效但未指明的状态。

[begin:note]
[:en] If [`lhs] and [`rhs] have equal allocators, the implementation can move
from either.
[:zh_CN] 当 [`lhs] 和 [`rhs] 的分配器相等时，实现可以对二者任何一个进行移动。
[end:note]
[div:end]

[%@lib@member operator+[!basic_string]]
[codeblock:declaration]
template<class charT, class traits, class Allocator>
  constexpr basic_string<charT, traits, Allocator>
    operator+(const basic_string<charT, traits, Allocator>& lhs,
              basic_string<charT, traits, Allocator>&& rhs);
template<class charT, class traits, class Allocator>
  constexpr basic_string<charT, traits, Allocator>
    operator+(const charT* lhs, basic_string<charT, traits, Allocator>&& rhs);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
rhs.insert(0, lhs);
return std::move(rhs);
[codeblock:end]
[div:end]

[%@lib@member operator+[!basic_string]]
[codeblock:declaration]
template<class charT, class traits, class Allocator>
  constexpr basic_string<charT, traits, Allocator>
    operator+(const charT* lhs, const basic_string<charT, traits, Allocator>& rhs);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
basic_string<charT, traits, Allocator> r = rhs;
r.insert(0, lhs);
return r;
[codeblock:end]
[div:end]

[%@lib@member operator+[!basic_string]]
[codeblock:declaration]
template<class charT, class traits, class Allocator>
  constexpr basic_string<charT, traits, Allocator>
    operator+(charT lhs, const basic_string<charT, traits, Allocator>& rhs);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
basic_string<charT, traits, Allocator> r = rhs;
r.insert(r.begin(), lhs);
return r;
[codeblock:end]
[div:end]

[%@lib@member operator+[!basic_string]]
[codeblock:declaration]
template<class charT, class traits, class Allocator>
  constexpr basic_string<charT, traits, Allocator>
    operator+(charT lhs, basic_string<charT, traits, Allocator>&& rhs);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
rhs.insert(rhs.begin(), lhs);
return std::move(rhs);
[codeblock:end]
[div:end]

[%@lib@member operator+[!basic_string]]
[codeblock:declaration]
template<class charT, class traits, class Allocator>
  constexpr basic_string<charT, traits, Allocator>
    operator+(const basic_string<charT, traits, Allocator>& lhs, charT rhs);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
basic_string<charT, traits, Allocator> r = lhs;
r.push_back(rhs);
return r;
[codeblock:end]
[div:end]

[%@lib@member operator+[!basic_string]]
[codeblock:declaration]
template<class charT, class traits, class Allocator>
  constexpr basic_string<charT, traits, Allocator>
    operator+(basic_string<charT, traits, Allocator>&& lhs, charT rhs);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
lhs.push_back(rhs);
return std::move(lhs);
[codeblock:end]
[div:end]

[%@lib@member operator+[!basic_string]]
[codeblock:declaration]
template<class charT, class traits, class Allocator>
  constexpr basic_string<charT, traits, Allocator>
    operator+(const basic_string<charT, traits, Allocator>& lhs,
              type_identity_t<basic_string_view<charT, traits>> rhs);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
basic_string<charT, traits, Allocator> r = lhs;
r.append(rhs);
return r;
[codeblock:end]
[div:end]

[%@lib@member operator+[!basic_string]]
[codeblock:declaration]
template<class charT, class traits, class Allocator>
  constexpr basic_string<charT, traits, Allocator>
    operator+(basic_string<charT, traits, Allocator>&& lhs,
              type_identity_t<basic_string_view<charT, traits>> rhs);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
lhs.append(rhs);
return std::move(lhs);
[codeblock:end]
[div:end]

[%@lib@member operator+[!basic_string]]
[codeblock:declaration]
template<class charT, class traits, class Allocator>
  constexpr basic_string<charT, traits, Allocator>
    operator+(type_identity_t<basic_string_view<charT, traits>> lhs,
              const basic_string<charT, traits, Allocator>& rhs);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
basic_string<charT, traits, Allocator> r = rhs;
r.insert(0, lhs);
return r;
[codeblock:end]
[div:end]

[%@lib@member operator+[!basic_string]]
[codeblock:declaration]
template<class charT, class traits, class Allocator>
  constexpr basic_string<charT, traits, Allocator>
    operator+(type_identity_t<basic_string_view<charT, traits>> lhs,
              basic_string<charT, traits, Allocator>&& rhs);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
rhs.insert(0, lhs);
return std::move(rhs);
[codeblock:end]
[div:end]

[para]
[begin:note]
[:en] Using a specialization of [`type_identity_t] as a parameter type ensures
that an object of type [`basic_string<charT, traits, Allocator>] can be
concatenated with an object of a type [`T] having an implicit conversion to
[`basic_string_view<charT, traits>] ([#over.match.oper]).
[:zh_CN] 根据 [#over.match.oper]，将 [`type_identity_t] 的特例用作形参类型，确保
[`basic_string<charT, traits, Allocator>] 类型的对象总可以和带有向
[`basic_string_view<charT, traits>] 的隐式转换的 [`T] 类型的对象进行连接。
[end:note]
