[section#string.assign
    [`basic_string::assign]
]

[%@library basic_string[!assign]]
[%@library assign[!basic_string]]
[codeblock:declaration]
basic_string& assign(const basic_string& str);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to: [`return *this = str;]
[:zh_CN] 等价于：[`return *this = str;]
[exit:description]

[%@library assign[!basic_string]]
[%@library basic_string[!assign]]
[codeblock:declaration]
basic_string& assign(basic_string&& str)
  noexcept(allocator_traits<Allocator>::propagate_on_container_move_assignment::value ||
           allocator_traits<Allocator>::is_always_equal::value);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to: [`return *this = std::move(str);]
[:zh_CN] 等价于：[`return *this = std::move(str);]
[exit:description]

[%@library assign[!basic_string]]
[%@library basic_string[!assign]]
[codeblock:declaration]
basic_string& assign(const basic_string& str, size_type pos, size_type n = npos);
[codeblock:end]

[enter:description]
[para:throws]
[:en] [`out_of_range] if [`pos > str.size()].
[:zh_CN] 当 [`pos > str.size()] 时抛出 [`out_of_range]。

[para:effects]
[:en] Determines the effective length [`rlen] of the string to assign as the
smaller of [`n] and [`str.size() - pos] and calls
[`assign(str.data() + pos, rlen)].
[:zh_CN] 确定用以赋值的字符串的有效长度 [`rlen] 为 [`n] 和 [`str.size() - pos]
的较小值，然后调用 [`assign(str.data() + pos, rlen)]。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[exit:description]

[%@library assign[!basic_string]]
[%@library basic_string[!assign]]
[codeblock:declaration]
basic_string& assign(basic_string_view<charT, traits> sv);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to: [`return assign(sv.data(), sv.size());]
[:zh_CN] 等价于：[`return assign(sv.data(), sv.size());]
[exit:description]

[%@library assign[!basic_string]]
[%@library basic_string[!assign]]
[codeblock:declaration]
template<class T>
  basic_string& assign(const T& t, size_type pos, size_type n = npos);
[codeblock:end]

[enter:description]
[para:throws]
[:en] [`out_of_range] if [`pos > str.size()].
[:zh_CN] 当 [`pos > str.size()] 时抛出 [`out_of_range]。

[para:effects]
[:en] Creates a variable, [`sv], as if by
[`basic_string_view<charT, traits> sv = t].
[:zh_CN] 如同以 [`basic_string_view<charT, traits> sv = t] 来创建一个变量 [`sv]。

[:en] Determines the effective length [`rlen] of the string to assign as the
smaller of [`n] and [`sv.size() - pos] and calls
[`assign(sv.data() + pos, rlen)].
[:zh_CN] 确定用以赋值的字符串的有效长度 [`rlen] 为 [`n] 和 [`sv.size() - pos]
的较小值，然后调用 [`assign(sv.data() + pos, rlen)]。

[para:remarks]
[:en] This function shall not participate in overload resolution unless
[`is_convertible_v<const T&, basic_string_view<charT, traits>>] is [`true] and
[`is_convertible_v<const T&, const charT*>] is [`false].
[:zh_CN] 除非 [`is_convertible_v<const T&, basic_string_view<charT, traits>>] 为
[`true] 并且 [`is_convertible_v<const T&, const charT*>] 为 [`false]，否则这个
函数不能参与重载决议。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[exit:description]

[%@library assign[!basic_string]]
[%@library basic_string[!assign]]
[codeblock:declaration]
basic_string& assign(const charT* s, size_type n);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`s] points to an array of at least [`n] elements of [`charT].
[:zh_CN] [`s] 指向 [`charT] 的至少 [`n] 个元素的数组。

[para:throws]
[:en] [`length_error] if [`n > max_size()].
[:zh_CN] 当 [`n > max_size()] 时抛出 [`length_error]。

[para:effects]
[:en] Replaces the string controlled by [`*this] with a string of length [`n]
whose elements are a copy of those pointed to by [`s].
[:zh_CN] 将由 [`*this] 所控制的字符串替换为长度为 [`n] 的字符串，其元素是 [`s]
所指向的元素的副本。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[exit:description]

[%@library assign[!basic_string]]
[%@library basic_string[!assign]]
[codeblock:declaration]
basic_string& assign(const charT* s);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`s] points to an array of at least [`traits::length(s) + 1] elements of
[`charT].
[:zh_CN] [`s] 指向 [`charT] 的至少 [`traits::length(s) + 1] 个元素的数组。

[para:effects]
[:en] Calls [`assign(s, traits::length(s))].
[:zh_CN] 调用 [`assign(s, traits::length(s))]。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[exit:description]

[%@library assign[!basic_string]]
[%@library basic_string[!assign]]
[codeblock:declaration]
basic_string& assign(initializer_list<charT> il);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Calls [`assign(il.begin(), il.size())].
[:zh_CN] 调用 [`assign(il.begin(), il.size())]。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[exit:description]

[%@library assign[!basic_string]]
[%@library basic_string[!assign]]
[codeblock:declaration]
basic_string& assign(size_type n, charT c);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to: [`return assign(basic_string(n, c));]
[:zh_CN] 等价于：[`return assign(basic_string(n, c));]
[exit:description]

[%@library assign[!basic_string]]
[%@library basic_string[!assign]]
[codeblock:declaration]
template<class InputIterator>
  basic_string& assign(InputIterator first, InputIterator last);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to:
[`return assign(basic_string(first, last, gat_allocator()));]
[:zh_CN] 等价于：[`return assign(basic_string(first, last, get_allocator()));]
[exit:description]
