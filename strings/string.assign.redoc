[section#string.assign
    [`basic_string::assign]
]

[%@lib@member assign[!basic_string]]
[codeblock:declaration]
constexpr basic_string& assign(const basic_string& str);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return *this = str;]
[:zh_CN] 等价于：[`return *this = str;]
[div:end]

[%@lib@member assign[!basic_string]]
[codeblock:declaration]
constexpr basic_string& assign(basic_string&& str)
  noexcept(allocator_traits<Allocator>::propagate_on_container_move_assignment::value ||
           allocator_traits<Allocator>::is_always_equal::value);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return *this = std::move(str);]
[:zh_CN] 等价于：[`return *this = std::move(str);]
[div:end]

[%@lib@member assign[!basic_string]]
[codeblock:declaration]
constexpr basic_string& assign(const basic_string& str, size_type pos, size_type n = npos);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return assign(basic_string_view<charT, traits>(str).substr(pos, n));
[codeblock:end]
[div:end]

[%@lib@member assign[!basic_string]]
[codeblock:declaration]
template<class T>
  constexpr basic_string& assign(const T& t);
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en] [`is_convertible_v<const T&, basic_string_view<charT, traits>>] is [`true]
and
[:zh_CN] [`is_convertible_v<const T&, basic_string_view<charT, traits>>] 为
[`true]，并且
[item]
[:en] [`is_convertible_v<const T&, const charT*>] is [`false].
[:zh_CN] [`is_convertible_v<const T&, const charT*>] 为 [`false]。
[list:end]

[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
basic_string_view<charT, traits> sv = t;
return assign(sv.data(), sv.size());
[codeblock:end]
[div:end]

[%@lib@member assign[!basic_string]]
[codeblock:declaration]
template<class T>
  constexpr basic_string& assign(const T& t, size_type pos, size_type n = npos);
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en] [`is_convertible_v<const T&, basic_string_view<charT, traits>>] is [`true]
and
[:zh_CN] [`is_convertible_v<const T&, basic_string_view<charT, traits>>] 为
[`true]，并且
[item]
[:en] [`is_convertible_v<const T&, const charT*>] is [`false].
[:zh_CN] [`is_convertible_v<const T&, const charT*>] 为 [`false]。
[list:end]

[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
basic_string_view<charT, traits> sv = t;
return assign(sv.substr(pos, n));
[codeblock:end]
[div:end]

[%@lib@member assign[!basic_string]]
[codeblock:declaration]
constexpr basic_string& assign(const charT* s, size_type n);
[codeblock:end]

[div:description]
[para:expects]
[:en] [=range(s,s + n)] is a valid range.
[:zh_CN] [=range(s,s + n)] 为有效范围。

[para:effects]
[:en] Replaces the string controlled by [`*this] with a copy of the range
[=range(s,s + n)].
[:zh_CN] 将由 [`*this] 所控制的字符串替换为范围 [=range(s,s + n)] 的副本。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[div:end]

[%@lib@member assign[!basic_string]]
[codeblock:declaration]
constexpr basic_string& assign(const charT* s);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return assign(s, traits::length(s));]
[:zh_CN] 等价于：[`return assign(s, traits::length(s));]
[div:end]

[%@lib@member assign[!basic_string]]
[codeblock:declaration]
constexpr basic_string& assign(initializer_list<charT> il);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return assign(il.begin(), il.size());]
[:zh_CN] 等价于：[`return assign(il.begin(), il.size());]
[div:end]

[%@lib@member assign[!basic_string]]
[codeblock:declaration]
constexpr basic_string& assign(size_type n, charT c);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
clear();
resize(n, c);
return *this;
[codeblock:end]
[div:end]

[%@lib@member assign[!basic_string]]
[codeblock:declaration]
template<class InputIterator>
  constexpr basic_string& assign(InputIterator first, InputIterator last);
[codeblock:end]

[div:description]
[para:constraints]
[:en] [`InputIterator] is a type that qualifies as an input iterator
([#container.reqmts]).
[:zh_CN] [`InputIterator] 为可被当做输入迭代器（[#container.reqmts]）的类型。

[para:effects]
[:en] Equivalent to: [`return assign(basic_string(first, last, gat_allocator()));]
[:zh_CN] 等价于：[`return assign(basic_string(first, last, get_allocator()));]
[div:end]

[%@lib@member assign_range[!basic_string]]
[codeblock:declaration]
template<[[redoc("*:c>")]]container-compatible-range<charT> R>
  constexpr basic_string& assign_range(R&& rg);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[`return assign(basic_string(from_range, std::forward<R>(rg), get_allocator()));]
[:zh_CN] 等价于：
[`return assign(basic_string(from_range, std::forward<R>(rg), get_allocator()));]
[div:end]
