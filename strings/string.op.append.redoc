[section#string.op+=
    [`basic_string::operator+=]
]

[%@lib@member operator+=[!basic_string]]
[codeblock:declaration]
constexpr basic_string& operator+=(const basic_string& str);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return append(str);]
[:zh_CN] 等价于：[`return append(str);]
[div:end]

[%@lib@member operator+=[!basic_string]]
[codeblock:declaration]
template<class T>
  constexpr basic_string& operator+=(const T& t);
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en] [`is_convertible_v<const T&, basic_string_view<charT, traits>>] is [`true]
and
[:zh_CN] [`is_convertible_v<const T&, basic_string_view<charT, traits>>] 为
[`true]，并且
[item]
[:en] [`is_convertible_v<const T&, const charT*>] is [`false].
[:zh_CN] [`is_convertible_v<const T&, const charT*>] 为 [`false]。
[list:end]

[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock:notation]
basic_string_view<charT, traits> sv = t;
return append(sv);
[codeblock:end]
[div:end]

[%@lib@member operator+=[!basic_string]]
[codeblock:declaration]
constexpr basic_string& operator+=(const charT* s);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return append(s);]
[:zh_CN] 等价于：[`return append(s);]
[div:end]

[%@lib@member operator+=[!basic_string]]
[codeblock:declaration]
constexpr basic_string& operator+=(charT c);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return append(size_type{1}, c);]
[:zh_CN] 等价于：[`return append(size_type{1}, c);]
[div:end]

[%@lib@member operator+=[!basic_string]]
[codeblock:declaration]
constexpr basic_string& operator+=(initializer_list<charT> il);
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return append(il);]
[:zh_CN] 等价于：[`return append(il);]
[div:end]
