[section#string.view.synop
    [:en] Header [`<string_view>] synopsis
    [:zh_CN] 头文件 [`<string_view>] 纲要
]

[%@hdr@def string_view]
[codeblock:synopsis]
namespace std {
  // [:en] [#string.view.template], class template [`basic_string_view] \
     [:zh_CN] [#string.view.template]，类模板 [`basic_string_view]
  template<class charT, class traits = char_traits<charT>>
  class basic_string_view;

  // [:en] [#string.view.comparison], non-member comparison functions \
     [:zh_CN] [#string.view.comparison]，非成员比较函数
  template<class charT, class traits>
    constexpr bool operator==(basic_string_view<charT, traits> x,
                              basic_string_view<charT, traits> y) noexcept;
  template<class charT, class traits>
    constexpr [[redoc("[=seebelow]")]] operator<=>(basic_string_view<charT, traits> x,
                                    basic_string_view<charT, traits> y) noexcept;

  // [:en] see [#string.view.comparison], sufficient additional overloads of comparison functions \
     [:zh_CN] 参见 [#string.view.comparison]，比较函数的其他的充足的重载

  // [:en] [#string.view.io], inserters and extractors \
     [:zh_CN] [#string.view.io]，插入符和提取符
  template<class charT, class traits>
    basic_ostream<charT, traits>&
      operator<<(basic_ostream<charT, traits>& os,
                 basic_string_view<charT, traits> str);

  // [:en] [`basic_string_view] typedef names \
     [:zh_CN] [`basic_string_view] 的 typedef 名
  using string_view    = basic_string_view<char>;
  using u8string_view  = basic_string_view<char8_t>;
  using u16string_view = basic_string_view<char16_t>;
  using u32string_view = basic_string_view<char32_t>;
  using wstring_view   = basic_string_view<wchar_t>;

  // [:en] [#string.view.hash], hash support \
     [:zh_CN] [#string.view.hash]，散列支持
  template<class T> struct hash;
  template<> struct hash<string_view>;
  template<> struct hash<u8string_view>;
  template<> struct hash<u16string_view>;
  template<> struct hash<u32string_view>;
  template<> struct hash<wstring_view>;

  inline namespace literals {
  inline namespace string_view_literals {
    // [:en] [#string.view.literals], suffix for [`basic_string_view] literals \
       [:zh_CN] [#string.view.literals]，[`basic_string_view] 字面量的后缀
    constexpr string_view    operator""sv(const char* str, size_t len) noexcept;
    constexpr u8string_view  operator""sv(const char8_t* str, size_t len) noexcept;
    constexpr u16string_view operator""sv(const char16_t* str, size_t len) noexcept;
    constexpr u32string_view operator""sv(const char32_t* str, size_t len) noexcept;
    constexpr wstring_view   operator""sv(const wchar_t* str, size_t len) noexcept;
  }
  }
}
[codeblock:end]

[para]
[:en]
The function templates defined in [#utility.swap] and [#iterator.range] are
available when [`<string_view>] is included.
[:zh_CN]
当包含了 [`<string_view>] 时，[#utility.swap] 和 [#iterator.range] 中所定义的
各个函数模板也可以使用。
