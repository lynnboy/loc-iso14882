[section#cstring.syn
    [:en] Header [`<cstring>] synopsis
    [:zh_CN] 头文件 [`<cstring>] 纲要
]

[%@lib memchr]
[%@lib memcmp]
[%@lib memcpy]
[%@lib memmove]
[%@lib memset]
[%@lib size_t]
[%@lib strcat]
[%@lib strchr]
[%@lib strcmp]
[%@lib strcoll]
[%@lib strcpy]
[%@lib strcspn]
[%@lib strerror]
[%@lib strlen]
[%@lib strncat]
[%@lib strncmp]
[%@lib strncpy]
[%@lib strpbrk]
[%@lib strrchr]
[%@lib strspn]
[%@lib strstr]
[%@lib strtok]
[%@lib strxfrm]
[codeblock:synopsis]
#define __STDC_VERSION_STRING_H__ 202311L

namespace std {
  using size_t = [[redoc("[span:em [:en] see [#support.types.layout]"
                              "[:zh_CN] 参见 [#support.types.layout]]")]];                                            // [=freestanding]

  void* memcpy(void* s1, const void* s2, size_t n);                     // [=freestanding]
  void* memccpy(void* s1, const void* s2, int c, size_t n);             // [=freestanding]
  void* memmove(void* s1, const void* s2, size_t n);                    // [=freestanding]
  char* strcpy(char* s1, const char* s2);                               // [=freestanding]
  char* strncpy(char* s1, const char* s2, size_t n);                    // [=freestanding]
  char* strdup(const char* s);
  char* strndup(const char* s, size_t size);
  char* strcat(char* s1, const char* s2);                               // [=freestanding]
  char* strncat(char* s1, const char* s2, size_t n);                    // [=freestanding]
  int memcmp(const void* s1, const void* s2, size_t n);                 // [=freestanding]
  int strcmp(const char* s1, const char* s2);                           // [=freestanding]
  int strcoll(const char* s1, const char* s2);
  int strncmp(const char* s1, const char* s2, size_t n);                // [=freestanding]
  size_t strxfrm(char* s1, const char* s2, size_t n);
  const void* memchr(const void* s, int c, size_t n);                   // [=freestanding]; [:en] see [#library.c] [:zh_CN] 参见 [#library.c]
  void* memchr(void* s, int c, size_t n);                               // [=freestanding]; [:en] see [#library.c] [:zh_CN] 参见 [#library.c]
  const char* strchr(const char* s, int c);                             // [=freestanding]; [:en] see [#library.c] [:zh_CN] 参见 [#library.c]
  char* strchr(char* s, int c);                                         // [=freestanding]; [:en] see [#library.c] [:zh_CN] 参见 [#library.c]
  size_t strcspn(const char* s1, const char* s2);                       // [=freestanding]
  const char* strpbrk(const char* s1, const char* s2);                  // [=freestanding]; [:en] see [#library.c] [:zh_CN] 参见 [#library.c]
  char* strpbrk(char* s1, const char* s2);                              // [=freestanding]; [:en] see [#library.c] [:zh_CN] 参见 [#library.c]
  const char* strrchr(const char* s, int c);                            // [=freestanding]; [:en] see [#library.c] [:zh_CN] 参见 [#library.c]
  char* strrchr(char* s, int c);                                        // [=freestanding]; [:en] see [#library.c] [:zh_CN] 参见 [#library.c]
  size_t strspn(const char* s1, const char* s2);                        // [=freestanding]
  const char* strstr(const char* s1, const char* s2);                   // [=freestanding]; [:en] see [#library.c] [:zh_CN] 参见 [#library.c]
  char* strstr(char* s1, const char* s2);                               // [=freestanding]; [:en] see [#library.c] [:zh_CN] 参见 [#library.c]
  char* strtok(char* s1, const char* s2);
  void* memset(void* s, int c, size_t n);                               // [=freestanding]
  void* memset_explicit(void* s, int c, size_t n);                      // [=freestanding]
  char* strerror(int errnum);
  size_t strlen(const char* s);                                         // [=freestanding]
}

#define NULL [[redoc("[span:em [:en] see [#support.types.nullptr]"
                          "[:zh_CN] 参见 [#support.types.nullptr]]")]]                                                // [=freestanding]
[codeblock:end]

[para]
[:en] The contents and meaning of the header [?libheader@def cstring] are the
same as the C standard library header [?libheader string.h].
[:zh_CN] 头文件 [?libheader@def cstring] 的内容和含义和 C 标准程序库头文件
[?libheader string.h] 相同。

[para]
[:en] The functions [`strerror] and [`strtok] are not required to avoid data
races ([#res.on.data.races]).
[:zh_CN] 函数 [`strerror] 和 [`strtok] 并不必须避免数据竞争（[#res.on.data.races]）。

[para]
[:en]
[%signal-safe[![`memcpy]]]
[%signal-safe[![`memmove]]]
The functions [`memcpy] and [`memmove] are signal-safe ([#support.signal]).
[:zh_CN]
[%信号安全[![`memcpy]]]
[%信号安全[![`memmove]]]
[`memcpy] 和 [`memmove] 函数是信号安全的（[#support.signal]）。

[:en]
Both functions implicitly create objects ([#intro.object]) in the destination
region of storage immediately prior to copying the sequence of characters to the
destination.
[:zh_CN]
两个函数都于紧接其将字符序列复制到目标中之前，在目标存储区域隐式创建对象
（[#intro.object]）。

[para]
[begin:note]
[:en] The functions [`strchr], [`strpbrk], [`strrchr], [`strstr], and [`memchr],
have different signatures in this document, but they have the same behavior as
in the C standard library ([#library.c]).
[:zh_CN] 函数 [`strchr]、[`strpbrk]、[`strrchr]、[`strstr] 和 [`memchr] 在本文档
中具有不同的签名，但它们的行为和 C 标准程序库（[#library.c]）中的相同。
[end:note]

[para:xref@c] 7.26
