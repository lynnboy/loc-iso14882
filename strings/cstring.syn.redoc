[section#cstring.syn
    [:en] Header [`<cstring>] synopsis
    [:zh_CN] 头文件 [`<cstring>] 纲要
]

[%[`<cstring>][@cstring]]
[%@library <cstring>[@cstring]]
[%@library memchr]
[%@library memcmp]
[%@library memcpy]
[%@library memmove]
[%@library memset]
[%@library size_t]
[%@library strcat]
[%@library strchr]
[%@library strcmp]
[%@library strcoll]
[%@library strcpy]
[%@library strcspn]
[%@library strerror]
[%@library strlen]
[%@library strncat]
[%@library strncmp]
[%@library strncpy]
[%@library strpbrk]
[%@library strrchr]
[%@library strspn]
[%@library strstr]
[%@library strtok]
[%@library strxfrm]
[codeblock:synopsis [!:note]]
namespace std {
  using size_t = [$:note [:en] see [#support.types.layout] [:zh_CN] 参见 [#support.types.layout]];

  void* memcpy(void* s1, const void* s2, size_t n);
  void* memmove(void* s1, const void* s2, size_t n);
  char* strcpy(char* s1, const char* s2);
  char* strncpy(char* s1, const char* s2, size_t n);
  char* strcat(char* s1, const char* s2);
  char* strncat(char* s1, const char* s2, size_t n);
  int memcmp(const void* s1, const void* s2, size_t n);
  int strcmp(const char* s1, const char* s2);
  int strcoll(const char* s1, const char* s2);
  int strncmp(const char* s1, const char* s2, size_t n);
  size_t strxfrm(char* s1, const char* s2, size_t n);
  const void* memchr(const void* s, int c, size_t n);  // [:en] see [#library.c]
                                                       // [|:zh_CN] 参见 [#library.c]
  void* memchr(void* s, int c, size_t n);  // [:en] see [#library.c]
                                           // [|:zh_CN] 参见 [#library.c]
  const char* strchr(const char* s, int c);  // [:en] see [#library.c]
                                             // [|:zh_CN] 参见 [#library.c]
  char* strchr(char* s, int c);  // [:en] see [#library.c]
                                 // [|:zh_CN] 参见 [#library.c]
  size_t strcspn(const char* s1, const char* s2);
  const char* strpbrk(const char* s1, const char* s2);  // [:en] see [#library.c]
                                                        // [|:zh_CN] 参见 [#library.c]
  char* strpbrk(char* s1, const char* s2);  // [:en] see [#library.c]
                                            // [|:zh_CN] 参见 [#library.c]
  const char* strrchr(const char* s, int c);  // [:en] see [#library.c]
                                              // [|:zh_CN] 参见 [#library.c]
  char* strrchr(char* s, int c);  // [:en] see [#library.c]
                                  // [|:zh_CN] 参见 [#library.c]
  size_t strspn(const char* s1, const char* s2);
  const char* strstr(const char* s1, const char* s2);  // [:en] see [#library.c]
                                                       // [|:zh_CN] 参见 [#library.c]
  char* strstr(char* s1, const char* s2);  // [:en] see [#library.c]
                                           // [|:zh_CN] 参见 [#library.c]
  char* strtok(char* s1, const char* s2);
  void* memset(void* s, int c, size_t n);
  char* strerror(int errnum);
  size_t strlen(const char* s);
}

#define NULL [$:note [:en] see [#support.types.nullptr] [:zh_CN] 参见 [#support.types.nullptr]]
[codeblock:end]

[para]
[%[`<string.h>][@string.h]][%@library <string.h>[@string.h]]
[:en] The contents and meaning of the header [`<cstring>] are the same as the C
standard library header [`<string.h>].
[:zh_CN] 头文件 [`<cstring>] 的内容和含义和 C 标准程序库头文件 [`<string.h>]
相同。

[para]
[:en] The functions [`strerror] and [`strtok] are not required to avoid data
races ([#res.on.data.races]).
[:zh_CN] 函数 [`strerror] 和 [`strtok] 并不必须避免数据竞争
（[#res.on.data.races]）。

[para]
[:en]
[%signal-safe[![`memcpy]]]
[%signal-safe[![`memmove]]]
The functions [`memcpy] and [`memmove] are signal-safe ([#support.signal]).
[:zh_CN]
[%信号安全[![`memcpy]]]
[%信号安全[![`memmove]]]
[`memcpy] 和 [`memmove] 函数是信号安全的（[#support.signal]）。

[para]
[enter:note]
[:en] The functions [`strchr], [`strpbrk], [`strrchr], [`strstr], and [`memchr],
have different signatures in this document, but they have the same behavior as
in the C standard library ([#library.c]).
[:zh_CN] 函数 [`strchr]、[`strpbrk]、[`strrchr]、[`strstr] 和 [`memchr] 在本文档
中具有不同的签名，但它们的行为和 C 标准程序库（[#library.c]）中的相同。
[exit:note]

[para:xref]
[:en] ISO C 7.24.
[:zh_CN] ISO C 7.24。
