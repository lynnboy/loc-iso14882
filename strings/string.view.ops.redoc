[section#string.view.ops
    [:en] String operations
    [:zh_CN] 字符串操作
]

[%@lib@member copy[!basic_string_view]]
[codeblock:declaration]
constexpr size_type copy(charT* s, size_type n, size_type pos = 0) const;
[codeblock:end]

[div:description]
[para]
[:en] Let [`rlen] be the smaller of [`n] and [`size() - pos].
[:zh_CN] 令 [`rlen] 为 [`n] 和 [`size() - pos] 中的较小值。

[para:expects]
[:en] [=range(s,s + rlen)] is a valid range.
[:zh_CN] [=range(s,s + rlen)] 为有效的范围。

[para:effects]
[:en] Equivalent to [`traits::copy(s, data() + pos, rlen)].
[:zh_CN] 等价于 [`traits::copy(s, data() + pos, rlen)]。

[para:returns]
[:en] [`rlen].
[:zh_CN] [`rlen]。

[para:throws]
[:en] [`out_of_range] if [`pos > size()].
[:zh_CN] 当 [`pos > size()] 时抛出 [`out_of_range]。

[para:complexity]
[:en] [?bigoh[`rlen]].
[:zh_CN] [?bigoh[`rlen]]。
[div:end]

[%@lib@member substr[!basic_string_view]]
[%@lib@member subview[!basic_string_view]]
[codeblock:declaration]
constexpr basic_string_view substr(size_type pos = 0, size_type n = npos) const;
constexpr basic_string_view subview(size_type pos = 0, size_type n = npos) const;
[codeblock:end]

[div:description]
[para]
[:en] Let [`rlen] be the smaller of [`n] and [`size() - pos].
[:zh_CN] 令 [`rlen] 为 [`n] 和 [`size() - pos] 中的较小值。

[para:effects]
[:en] Determines [`rlen], the effective length of the string to reference.
[:zh_CN] 确定 [`rlen]，即所要指代的字符串的有效长度。

[para:returns]
[:en] [`basic_string_view(data() + pos, rlen)].
[:zh_CN] [`basic_string_view(data() + pos, rlen)]。

[para:throws]
[:en] [`out_of_range] if [`pos > size()].
[:zh_CN] 当 [`pos > size()] 时抛出 [`out_of_range]。
[div:end]

[%@lib@member compare[!basic_string_view]]
[codeblock:declaration]
constexpr int compare(basic_string_view str) const noexcept;
[codeblock:end]

[div:description]
[para]
[:en] Let [`rlen] be the smaller of [`size()] and [`str.size()].
[:zh_CN] 令 [`rlen] 为 [`size()] 和 [`str.size()] 中的较小值。

[para:effects]
[:en] Determines [`rlen], the effective length of the string to compare.
[:zh_CN] 确定 [`rlen]，即所要比较的字符串的有效长度。

[:en] The function then compares the two strings by calling
[`traits::compare(data(), str.data(), rlen)].
[:zh_CN] 然后该函数通过调用 [`traits::compare(data(), str.data(), rlen)] 来比较
这两个字符串。

[para:returns]
[:en] The nonzero result if the result of the comparison is nonzero.
[:zh_CN] 若比较的结果非零则返回该非零结果。

[:en] Otherwise, returns a value as indicated in [#:tab#string.view.compare].
[:zh_CN] 否则，返回如 [#:tab#string.view.compare] 所指定的值。

[table:listing@fill=column@shape=?x1#string.view.compare
    [:en] [`compare()] results
    [:zh_CN] [`compare()] 的结果

    [|@code@align=center
        [:en] Condition
        [:zh_CN] 条件
    ]
    [|@code@align=right
        [:en] Return Value
        [:zh_CN] 返回值
    ]
]
[|] size() < str.size()     [|] < 0
[|] size() == str.size()    [|]   0
[|] size() >  str.size()    [|] > 0
[table:end]

[para:complexity]
[:en] [?bigoh[`rlen]].
[:zh_CN] [?bigoh[`rlen]]。
[div:end]

[%@lib@member compare[!basic_string_view]]
[codeblock:declaration]
constexpr int compare(size_type pos1, size_type n1, basic_string_view str) const;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return substr(pos1, n1).compare(str);]
[:zh_CN] 等价于：[`return substr(pos1, n1).compare(str);]
[div:end]

[%@lib@member compare[!basic_string_view]]
[codeblock:declaration]
constexpr int compare(size_type pos1, size_type n1, basic_string_view str,
                      size_type pos2, size_type n2) const;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return substr(pos1, n1).compare(str.substr(pos2, n2));]
[:zh_CN] 等价于：[`return substr(pos1, n1).compare(str.substr(pos2, n2));]
[div:end]

[%@lib@member compare[!basic_string_view]]
[codeblock:declaration]
constexpr int compare(const charT* s) const;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return compare(basic_string_view(s));]
[:zh_CN] 等价于：[`return compare(basic_string_view(s));]
[div:end]

[%@lib@member compare[!basic_string_view]]
[codeblock:declaration]
constexpr int compare(size_type pos1, size_type n1, const charT* s) const;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return substr(pos1, n1).compare(basic_string_view(s));]
[:zh_CN] 等价于：[`return substr(pos1, n1).compare(basic_string_view(s));]
[div:end]

[%@lib@member compare[!basic_string_view]]
[codeblock:declaration]
constexpr int compare(size_type pos1, size_type n1, const charT* s, size_type n2) const;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return substr(pos1, n1).compare(basic_string_view(s, n2));]
[:zh_CN] 等价于：[`return substr(pos1, n1).compare(basic_string_view(s, n2));]
[div:end]

[%@lib@member starts_with[!basic_string_view]]
[codeblock:declaration]
constexpr bool starts_with(basic_string_view x) const noexcept;
[codeblock:end]

[div:description]
[para]
[:en] Let [`rlen] be the smaller of [`size()] and [`x.size()].
[:zh_CN] 令 [`rlen] 为 [`size()] 和 [`x.size()] 中的较小值。

[para:effects]
[:en] Equivalent to: [`return basic_string_view(data(), rlen) == x;]
[:zh_CN] 等价于：[`return basic_string_view(data(), rlen) == x;]
[div:end]

[%@lib@member starts_with[!basic_string_view]]
[codeblock:declaration]
constexpr bool starts_with(charT x) const noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return !empty() && traits::eq(front(), x);]
[:zh_CN] 等价于：[`return !empty() && traits::eq(front(), x);]
[div:end]

[%@lib@member starts_with[!basic_string_view]]
[codeblock:declaration]
constexpr bool starts_with(const charT* x) const;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return starts_with(basic_string_view(x));]
[:zh_CN] 等价于：[`return starts_with(basic_string_view(x));]
[div:end]

[%@lib@member ends_with[!basic_string_view]]
[codeblock:declaration]
constexpr bool ends_with(basic_string_view x) const noexcept;
[codeblock:end]

[div:description]
[para]
[:en] Let [`rlen] be the smaller of [`size()] and [`x.size()].
[:zh_CN] 令 [`rlen] 为 [`size()] 和 [`x.size()] 中的较小值。

[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return basic_string_view(data() + (size() - rlen), rlen) == x;
[codeblock:end]
[div:end]

[%@lib@member ends_with[!basic_string_view]]
[codeblock:declaration]
constexpr bool ends_with(charT x) const noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return !empty() && traits::eq(back(), x);]
[:zh_CN] 等价于：[`return !empty() && traits::eq(back(), x);]
[div:end]

[%@lib@member ends_with[!basic_string_view]]
[codeblock:declaration]
constexpr bool ends_with(const charT* x) const;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return ends_with(basic_string_view(x));]
[:zh_CN] 等价于：[`return ends_with(basic_string_view(x));]
[div:end]

[%@lib@member contains[!basic_string_view]]
[codeblock:declaration]
constexpr bool contains(basic_string_view x) const noexcept;
constexpr bool contains(charT x) const noexcept;
constexpr bool contains(const charT* x) const;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return find(x) != npos;]
[:zh_CN] 等价于：[`return find(x) != npos;]
[div:end]
