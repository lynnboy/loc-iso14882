[section#string.compare
    [`basic_string::compare]
]

[%@library basic_string[!compare]]
[%@library compare[!basic_string]]
[codeblock:declaration]
int compare(basic_string_view<charT, traits> sv) const noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Determines the effective length [`rlen] of the strings to compare as the
smallest of [`size()] and [`sv.size()].
[:zh_CN] 确定所要比较的字符串的有效长度 [`rlen] 为 [`size()] 和 [`sv.size()] 中
的较小值。

[:en] The function then compares the two strings by calling
[`traits::compare(data(), sv.data(), rlen)].
[:zh_CN] 该函数随即通过调用 [`traits::compare(data(), sv.data(), rlen)] 来比较
这两个字符串。

[para:returns]
[:en] The nonzero result if the result of the comparison is nonzero.
[:zh_CN] 若比较的结果为非零值则返回非零值。

[:en] Otherwise, returns a value as indicated in Table [#tab:strings.compare].
[:zh_CN] 否则，按照表 [#tab:strings.compare] 所指定的方式返回值。

[table:listing@fill=column@shape=?x1#tab:strings.compare
    [:en] [`compare()] results
    [:zh_CN] [`compare()] 的结果

    [|@code
        [:en] Condition
        [:zh_CN] 条件
    ]
    [|@code@align=right
        [:en] Return Value
        [:zh_CN] 返回值
    ]
]

[|] size() <  sv.size() [|] < 0
[|] size() == sv.size() [|]   0
[|] size() <  sv.size() [|] > 0

[table:end]
[exit:description]

[%@library compare[!basic_string]]
[%@library basic_string[!compare]]
[codeblock:declaration]
int compare(size_type pos1, size_type n1, basic_string_view<charT, traits> sv) const;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：

[codeblock:notation]
return basic_string_view<charT, traits>(data(), size()).substr(pos1, n1).compare(sv);
[codeblock:end]
[exit:description]

[%@library compare[!basic_string]]
[%@library basic_string[!compare]]
[codeblock:declaration]
template<class T>
  int compare(size_type pos1, size_type n1, const T& t, size_type pos2, size_type n2 = npos) const;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：

[codeblock:notation]
basic_string_view<charT, traits> sv = t;
return basic_string_view<charT, traits>(
    data(), size()).substr(pos1, n1).compare(sv.substr(pos2, n2));
[codeblock:end]

[para:remarks]
[:en] This function shall not participate in overload resolution unless
[`is_convertible_v<const T&, basic_string_view<charT, traits>>] is [`true] and
[`is_convertible_v<const T&, const charT*>] is [`false].
[:zh_CN] 除非 [`is_convertible_v<const T&, basic_string_view<charT, traits>>] 为
[`true] 并且 [`is_convertible_v<const T&, const charT*>] 为 [`false]，否则这个
函数不能参与重载决议。
[exit:description]

[%@library compare[!basic_string]]
[%@library basic_string[!compare]]
[codeblock:declaration]
int compare(const basic_string& str) const noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to: [`return compare(basic_string_view<charT, traits>(str));]
[:zh_CN] 等价于：[`return compare(basic_string_view<charT, traits>(str));]
[exit:description]

[%@library compare[!basic_string]]
[%@library basic_string[!compare]]
[codeblock:declaration]
int compare(size_type pos1, size_type n1, const basic_string& str) const;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to:
[`return compare(pos1, n1, basic_string_view<charT, traits>(str));]
[:zh_CN] 等价于：
[`return compare(pos1, n1, basic_string_view<charT, traits>(str));]
[exit:description]

[%@library compare[!basic_string]]
[%@library basic_string[!compare]]
[codeblock:declaration]
int compare(size_type pos1, size_type n1, const basic_string& str,
            size_type pos2, size_type n2 = npos) const;
[codeblock:end]

[enter:description]
[:en] Equivalent to:
[:zh_CN] 等价于：

[codeblock:notation]
return compare(pos1, n1, basic_string_view<charT, traits>(str), pos2, n2);
[codeblock:end]
[exit:description]

[%@library compare[!basic_string]]
[%@library basic_string[!compare]]
[codeblock:declaration]
int compare(const charT* s) const;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`compare(basic_string(s))].
[:zh_CN] [`compare(basic_string(s))]。
[exit:description]

[%@library compare[!basic_string]]
[%@library basic_string[!compare]]
[codeblock:declaration]
int compare(size_type pos, size_type n1, const charT* s) const;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`basic_string(*this, pos, n1).compare(basic_string(s))].
[:zh_CN] [`basic_string(*this, pos, n1).compare(basic_string(s))]。
[exit:description]

[%@library compare[!basic_string]]
[%@library basic_string[!compare]]
[codeblock:declaration]
int compare(size_type pos, size_type n1, const charT* s, size_type n2) const;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`basic_string(*this, pos, n1).compare(basic_string(s, n2))].
[:zh_CN] [`basic_string(*this, pos, n1).compare(basic_string(s, n2))]。
[exit:description]
