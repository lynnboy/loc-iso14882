[section#string.compare
    [`basic_string::compare]
]

[%@lib@member compare[!basic_string]]
[codeblock:declaration]
template<class T>
  constexpr int compare(const T& t) const noexcept([[redoc("[=seebelow]")]]);
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en] [`is_convertible_v<const T&, basic_string_view<charT, traits>>] is [`true]
and
[:zh_CN] [`is_convertible_v<const T&, basic_string_view<charT, traits>>] 为
[`true]，并且
[item]
[:en] [`is_convertible_v<const T&, const charT*>] is [`false].
[:zh_CN] [`is_convertible_v<const T&, const charT*>] 为 [`false]。
[list:end]

[para:effects]
[:en] Equivalent to: [`return basic_string_view<charT, traits>(*this).compare(t);]
[:zh_CN] 等价于：[`return basic_string_view<charT, traits>(*this).compare(t);]

[para:remarks]
[:en] The expression inside [`noexcept] is equivalent to
[`is_nothrow_convertible_v<const T&, basic_string_view<charT, traits>>].
[:zh_CN] [`noexcept] 之中的表达式等价于
[`is_nothrow_convertible_v<const T&, basic_string_view<charT, traits>>]。
[div:end]

[%@lib@member compare[!basic_string]]
[codeblock:declaration]
template<class T>
  constexpr int compare(size_type pos1, size_type n1, const T& t) const;
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en] [`is_convertible_v<const T&, basic_string_view<charT, traits>>] is [`true]
and
[:zh_CN] [`is_convertible_v<const T&, basic_string_view<charT, traits>>] 为
[`true]，并且
[item]
[:en] [`is_convertible_v<const T&, const charT*>] is [`false].
[:zh_CN] [`is_convertible_v<const T&, const charT*>] 为 [`false]。
[list:end]

[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return basic_string_view<charT, traits>(*this).substr(pos1, n1).compare(t);
[codeblock:end]
[div:end]

[%@lib@member compare[!basic_string]]
[codeblock:declaration]
template<class T>
  constexpr int compare(size_type pos1, size_type n1, const T& t,
                        size_type pos2, size_type n2 = npos) const;
[codeblock:end]

[div:description]
[para:constraints]
[list]
[item]
[:en] [`is_convertible_v<const T&, basic_string_view<charT, traits>>] is [`true]
and
[:zh_CN] [`is_convertible_v<const T&, basic_string_view<charT, traits>>] 为
[`true]，并且
[item]
[:en] [`is_convertible_v<const T&, const charT*>] is [`false].
[:zh_CN] [`is_convertible_v<const T&, const charT*>] 为 [`false]。
[list:end]

[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
basic_string_view<charT, traits> s = *this, sv = t;
return s.substr(pos1, n1).compare(sv.substr(pos2, n2));
[codeblock:end]
[div:end]

[%@lib@member compare[!basic_string]]
[codeblock:declaration]
constexpr int compare(const basic_string& str) const noexcept;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return compare(basic_string_view<charT, traits>(str));]
[:zh_CN] 等价于：[`return compare(basic_string_view<charT, traits>(str));]
[div:end]

[%@lib@member compare[!basic_string]]
[codeblock:declaration]
int compare(size_type pos1, size_type n1, const basic_string& str) const;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[`return compare(pos1, n1, basic_string_view<charT, traits>(str));]
[:zh_CN] 等价于：
[`return compare(pos1, n1, basic_string_view<charT, traits>(str));]
[div:end]

[%@lib@member compare[!basic_string]]
[codeblock:declaration]
constexpr int compare(size_type pos1, size_type n1, const basic_string& str,
                      size_type pos2, size_type n2 = npos) const;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return compare(pos1, n1, basic_string_view<charT, traits>(str), pos2, n2);
[codeblock:end]
[div:end]

[%@lib@member compare[!basic_string]]
[codeblock:declaration]
constexpr int compare(const charT* s) const;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to: [`return compare(basic_string_view<charT, traits>(s));]
[:zh_CN] 等价于：[`return compare(basic_string_view<charT, traits>(s));]
[div:end]

[%@lib@member compare[!basic_string]]
[codeblock:declaration]
constexpr int compare(size_type pos, size_type n1, const charT* s) const;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[`return compare(pos, n1, basic_string_view<charT, traits>(s));]
[:zh_CN] 等价于：
[`return compare(pos, n1, basic_string_view<charT, traits>(s));]
[div:end]

[%@lib@member compare[!basic_string]]
[codeblock:declaration]
constexpr int compare(size_type pos, size_type n1, const charT* s, size_type n2) const;
[codeblock:end]

[div:description]
[para:effects]
[:en] Equivalent to:
[`return compare(pos, n1, basic_string_view<charT, traits>(s, n2));]
[:zh_CN] 等价于：
[`return compare(pos, n1, basic_string_view<charT, traits>(s, n2));]
[div:end]
