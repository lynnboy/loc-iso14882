[section#string.cmp
    [:en] Non-member comparison operator functions
    [:zh_CN] 非成员比较运算符函数
]

[codeblock:declaration]
template<class charT, class traits, class Allocator>
  constexpr bool
    operator==(const basic_string<charT, traits, Allocator>& lhs,
               const basic_string<charT, traits, Allocator>& rhs) noexcept;
template<class charT, class traits, class Allocator>
  constexpr bool operator==(const basic_string<charT, traits, Allocator>& lhs,
                            const charT* rhs);

template<class charT, class traits, class Allocator>
  constexpr [[redoc("[=seebelow]")]] operator<=>(const basic_string<charT, traits, Allocator>& lhs,
                                  const basic_string<charT, traits, Allocator>& rhs) noexcept;
template<class charT, class traits, class Allocator>
  constexpr [[redoc("[=seebelow]")]] operator<=>(const basic_string<charT, traits, Allocator>& lhs,
                                  const charT* rhs);
[codeblock:end]

[div:description]
[para:effects]
[:en] Let [`[^op]] be the operator.
[:zh_CN] 令 [`[^op]] 为运算符。

[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock]
return basic_string_view<charT, traits>(lhs) [[redoc("^>")]]op basic_string_view<charT, traits>(rhs);
[codeblock:end]
[div:end]
