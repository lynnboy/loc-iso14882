[section#string.require
    [:en] General requirements
    [:zh_CN] 一般规定
]

[para]
[:en]
If any operation would cause [`size()] to exceed [`max_size()], that operation
throws an exception object of type [`length_error].
[:zh_CN]
如果有任何操作将导致 [`size()] 超出 [`max_size()]，则该操作抛出 [`length_error]
类型的异常对象。

[para]
[:en]
If any member function or operator of [`basic_string] throws an exception, that
function or operator has no other effect on the [`basic_string] object.
[:zh_CN]
如果 [`basic_string] 的任何成员函数或运算符抛出了异常，则此函数或运算符对该
[`basic_string] 对象没有任何其他效果。

[para]
[:en]
Every object of type [`basic_string<charT, traits, Allocator>] uses an object of
type [`Allocator] to allocate and free storage for the contained [`charT]
objects as needed.
[:zh_CN]
每个 [`basic_string<charT, traits, Allocator>] 类型的对象在需要时，都利用一个
[`Allocator] 类型的对象来为其所包含的 [`charT] 对象分配和释放存储。

[:en] The [`Allocator] object used is obtained as described in [#container.reqmts].
[:zh_CN] 所使用的 [`Allocator] 对象以 [#container.reqmts] 所述的方式获得。

[:en]
In every specialization [`basic_string<charT, traits, Allocator>], the type
[`traits] shall meet the character traits requirements ([#char.traits]).
[:zh_CN]
每个特例 [`basic_string<charT, traits, Allocator>] 中的类型 [`traits] 都应当满足
字符特征的规定（[#char.traits]）。

[begin:note]
[:en] Every specialization [`basic_string<charT, traits, Allocator>] is
an allocator-aware container ([#container.alloc.reqmts]), but does not use the
allocator[=']s [`construct] and [`destroy] member functions
([#container.requirements.pre]).
[:zh_CN] 每个 [`basic_string<charT, traits, Allocator>] 特例都是分配器感知容器
（[#container.alloc.reqmts]），但并不使用分配器的 [`construct] 和 [`destroy] 等
成员函数（[#container.requirements.pre]）。

[:en] The program is ill-formed if [`Allocator::value_type] is not the same type
as [`charT].
[:zh_CN] 如果 [`Allocator::value_type] 与 [`charT] 不是同一类型，则程序非良构。
[end:note]

[begin:note]
[:en]
The program is ill-formed if [`traits::char_type] is not the same type as
[`charT].
[:zh_CN]
如果 [`traits::char_type] 与 [`charT] 不是相同的类型，则程序非良构。
[end:note]

[para]
[:en]
References, pointers, and iterators referring to the elements of a
[`basic_string] sequence may be invalidated by the following uses of that
[`basic_string] object:
[:zh_CN]
指代 [`basic_string] 序列的某个元素的引用、指针和迭代器，可能会因为这个
[`basic_string] 对象的如下用法而失效：

[list]
[item]
[:en] Passing as an argument to any standard library function taking a reference
to non-const [`basic_string] as an argument.[#:fn]
[:zh_CN] 作为实参传递给任何接受指代非 const 的 [`basic_string] 的引用的实参的
标准程序库函数[#:fn]。

[note:foot]
[:en]
For example, as an argument to non-member functions [`swap()] ([#string.special]),
[`operator>>()] ([#string.io]), and [`getline()] ([#string.io]), or as an
argument to [`basic_string::swap()].
[:zh_CN]
例如，作为实参来调用非成员函数 [`swap()]（[#string.special]），[`operator>>()]
（[#string.io]），以及 [`getline()]（[#string.io]），或者作为
[`basic_string::swap()] 的实参。
[note:end]

[item]
[:en] Calling non-const member functions, except [`operator`[`]], [`at],
[`data], [`front], [`back], [`begin], [`rbegin], [`end], and [`rend].
[:zh_CN] 调用除 [`operator`[`]]、[`at]、[`data]、[`front]、[`back]、[`begin]、
[`rbegin]、[`end] 和 [`rend] 之外的非 const 成员函数。
[list:end]
