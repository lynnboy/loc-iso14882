[section#string.cons
    [:en] Constructors and assignment operators
    [:zh_CN] 构造函数与赋值运算符
]

[%@library basic_string[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
explicit basic_string(const Allocator& a) noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Constructs an object of class [`basic_string].
[:zh_CN] 构造一个 [`basic_string] 类的对象。

[para:postconditions]
[:en] [`size()] is [`0] and [`capacity()] is an unspecified value.
[:zh_CN] [`size()] 为 [`0] 且 [`capacity()] 为某个未指明的值。
[exit:description]

[%@library basic_string[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
basic_string(const basic_string& str);
basic_string(basic_string&& str) noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Constructs an object of class [`basic_string].
[:zh_CN] 构造一个 [`basic_string] 类的对象。

[para:postconditions]
[:en] [`data()] points at the first element of an allocated copy of the array
whose first element is pointed at by the original value [`str.data()],
[`size()] is equal to the original value of [`str.size()], and [`capacity()] is
a value at least as large as [`size()].
[:zh_CN] [`data()] 指向由 [`str.data()] 的原值指向其第一个元素的数组的已分配副本
的第一个元素，[`size()] 等于 [`str.size()] 的原值，而 [`capacity()] 为至少与
[`size()] 一样大的值。

[:en] In the second form, [`str] is left in a valid state with an unspecified
value.
[:zh_CN] 第二种形式中，[`str] 被遗留处于具有未指明的值的有效状态。
[exit:description]

[%@library basic_string[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
basic_string(const basic_string& str, size_type pos,
             const Allocator& a = Allocator());
basic_string(const basic_string& str, size_type pos, size_type n,
             const Allocator& a = Allocator());
[codeblock:end]

[enter:description]
[para:throws]
[:en] [`out_of_range] if [`pos > str.size()].
[:zh_CN] 当 [`pos > str.size()] 时抛出 [`out_of_range]。

[para:effects]
[:en] Constructs an object of class [`basic_string] and determines the effective
length [`rlen] of the initial string value as [`str.size() - pos] in the first
form and as the smaller of [`str.size() - pos] and [`n] in the second form.
[:zh_CN] 构造类 [`basic_string] 的一个对象，并将其初始字符串值的长度确定为
（第一个形式）[`str.size() - pos]，或（第二个形式）[`str.size() - pos] 和 [`n]
中的较小值。

[para:postconditions]
[:en] [`data()] points at the first element of an allocated copy of [`rlen]
consecutive elements of the string controlled by [`str] beginning at position
[`pos], [`size()] is equal to [`rlen], and [`capacity()] is a value at least as
large as [`size()].
[:zh_CN] [`data()] 指向由 [`str] 控制的字符串中从位置 [`pos] 开始的 [`rlen] 个
连续元素的已分配副本的第一个元素，[`size()] 等于 [`rlen]，且 [`capacity()] 为
至少与 [`size()] 一样大的值。
[exit:description]

[%@library basic_string[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
template<class T>
  basic_string(const T& t, size_type pos, size_type n, const Allocator& a = Allocator());
[codeblock:end]

[enter:description]
[para:effects]
[:en] Creates a variable, [`sv], as if by
[`basic_string_view<charT, traits> sv = t;] and then behaves the same as:
[:zh_CN] 如同以 [`basic_string_view<charT, traits> sv = t;] 来创建一个变量 [`sv]
，然后产生如下行为：

[codeblock:notation]
basic_string(sv.substr(pos, n), a);
[codeblock:end]

[para:remarks]
[:en] This constructor shall not participate in overload resolution unless
[`is_convertible_v<const T&, basic_string_view<charT, traits>>] is [`true].
[:zh_CN] 除非 [`is_convertible_v<const T&, basic_string_view<charT, traits>>] 为
[`true]，否则这个构造函数不能参与重载决议。
[exit:description]

[%@library basic_string[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
template<class T>
  explicit basic_string(const T& t, const Allocator& a = Allocator());
[codeblock:end]

[enter:description]
[para:effects]
[:en] Creates a variable, [`sv], as if by
[`basic_string_view<charT, traits> sv = t;] and then behaves the same as
[`basic_string(sv.data(), sv.size(), a)].
[:zh_CN] 如同以 [`basic_string_view<charT, traits> sv = t;] 创建一个变量 [`sv]，
然后其行为与 [`basic_string(sv.data(), sv.size(), a)] 相同。

[para:remarks]
[:en] This constructor shall not participate in overload resolution unless
[:zh_CN] 除非符合以下条件，否则这个构造函数不能参与重载决议

[list]
[item]
[:en] [`is_convertible_v<const T&, basic_string_view<charT, traits>>] is [`true]
and
[:zh_CN] [`is_convertible_v<const T&, basic_string_view<charT, traits>>] 为
[`true]，并且
[item]
[:en] [`is_convertible_v<const T&, const charT*>] is [`false].
[:zh_CN] [`is_convertible_v<const T&, const charT*>] 为 [`false]。
[list:end]
[exit:description]

[%@library basic_string[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
basic_string(const charT* s, size_type n, const Allocator& a = Allocator());
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`s] points to an array of at least [`n] elements of [`charT].
[:zh_CN] [`s] 指向 [`charT] 的至少 [`n] 个元素的数组。

[para:effects]
[:en] Constructs an object of class [`basic_string] and determines its initial
string value from the array of [`charT] of length [`n] whose first element is
designated by [`s].
[:zh_CN] 构造类 [`basic_string] 的一个对象，并将其初始字符串的值确定为，由 [`s]
代表其第一个元素的 [`charT] 的长度为 [`n] 的数组。

[para:postconditions]
[:en] [`data()] points at the first element of an allocated copy of the array
whose first element is pointed at by [`s], [`size()] is equal to [`n], and
[`capacity()] is a value at least as large as [`size()].
[:zh_CN] [`data()] 指向由 [`s] 指向其第一个元素的数组的已分配副本的第一个元素，
[`size()] 等于 [`n]，且 [`capacity()] 为至少与 [`size()] 一样大的值。

[para:remarks]
[:en] Shall not participate in overload resolution if [`Allocator] is a type
that does not qualify as an allocator ([#container.requirements.general]).
[:zh_CN] 当 [`Allocator] 不能被当做分配器（[#container.requirements.general]）的
类型时，不能参与重载决议。

[enter:note]
[:en] This affects class template argument deduction.
[:zh_CN] 这会影响类模板实参推断。
[exit:note]
[exit:description]

[%@library basic_string[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
basic_string(const charT* s, const Allocator& a = Allocator());
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`s] points to an array of at least [`traits::length(s) + 1] elements of
[`charT].
[:zh_CN] [`s] 指向 [`charT] 的至少 [`traits::length(s) + 1] 个元素的数组。

[para:effects]
[:en] Constructs an object of class [`basic_string] and determines its initial
string value from the array of [`charT] of length [`traits::length(s)] whose
first element is designated by [`s].
[:zh_CN] 构造类 [`basic_string] 的一个对象，并将其初始字符串的值确定为，由 [`s]
代表其第一个元素的 [`charT] 的长度为 [`traits::length(s)] 的数组。

[para:postconditions]
[:en] [`data()] points at the first element of an allocated copy of the array
whose first element is pointed at by [`s], [`size()] is equal to
[`traits::length(s)], and [`capacity()] is a value at least as large as
[`size()].
[:zh_CN] [`data()] 指向由 [`s] 指向其第一个元素的数组的已分配副本的第一个元素，
[`size()] 等于 [`traits::length(s)]，且 [`capacity()] 为至少与 [`size()] 一样大
的值。

[para:remarks]
[:en] Shall not participate in overload resolution if [`Allocator] is a type
that does not qualify as an allocator ([#container.requirements.general]).
[:zh_CN] 当 [`Allocator] 不能被当做分配器（[#container.requirements.general]）的
类型时，不能参与重载决议。

[enter:note]
[:en] This affects class template argument deduction.
[:zh_CN] 这会影响类模板实参推断。
[exit:note]
[exit:description]

[%@library basic_string[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
basic_string(size_type n, charT c, const Allocator& a = Allocator());
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`n < npos].
[:zh_CN] [`n < npos]。

[para:effects]
[:en] Constructs an object of class [`basic_string] and determines its initial
string value by repeating the char-like object [`c] for all [`n] elements.
[:zh_CN] 构造类 [`basic_string] 的一个对象，并将其初始字符串的值确定为，通过重复
字符式对象 [`c] 作为其所有 [`n] 个元素。

[para:postconditions]
[:en] [`data()] points at the first element of an allocated array of [`n]
elements, each storing the initial value [`c], [`size()] is equal to [`n], and
[`capacity()] is a value at least as large as [`size()].
[:zh_CN] [`data()] 指向 [`n] 个元素的已分配数组的第一个元素，每个元素均存储
初始值 [`c]，[`size()] 等于 [`n]，且 [`capacity()] 为至少与 [`size()] 一样大的值
。
[exit:description]

[%@library basic_string[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
template<class InputIterator>
  basic_string(InputIterator begin, InputIterator end, const Allocator& a = Allocator());
[codeblock:end]

[enter:description]
[para:effects]
[:en] If [`InputIterator] is an integral type, equivalent to
[:zh_CN] 如果 [`InputIterator] 是整型类型，则等价于

[codeblock:notation]
basic_string(static_cast<size_type>(begin), static_cast<value_type>(end), a);
[codeblock:end]

[para]
[:en]
Otherwise constructs a string from the values in the range [[`begin], [`end]),
as indicated in the Sequence Requirements table (see [#sequence.reqmts]).
[:zh_CN]
否则根据序列的规定表格（参见 [#sequence.reqmts]）所指定的方式，从范围
[[`begin], [`end]) 中的值构造一个字符串。
[exit:description]

[%@library basic_string[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
basic_string(initializer_list<charT> il, const Allocator& a = Allocator());
[codeblock:end]

[enter:description]
[para:effects]
[:en] Same as [`basic_string(il.begin(), il.end(), a)].
[:zh_CN] 与 [`basic_string(il.begin(), il.end(), a)] 相同。
[exit:description]

[%@library basic_string[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
basic_string(const basic_string& str, const Allocator& alloc);
basic_string(basic_string&& str, const Allocator& alloc);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Constructs an object of class [`basic_string].
[:zh_CN] 构造一个 [`basic_string] 类的对象。

[:en] The stored allocator is constructed from [`alloc].
[:zh_CN] 以 [`alloc] 来构造其所存储的分配器。

[para:postconditions]
[:en] [`data()] points at the first element of an allocated copy of the array
whose first element is pointed at by the original value of [`str.data()],
[`size()] is equal to the original value of [`str.size()], [`capacity()] is a
value at least as large as [`size()], and [`get_allocator()] is equal to
[`alloc].
[:zh_CN] [`data()] 指向由 [`str.data()] 的原值指向其第一个元素的数组的已分配副本
的第一个元素，[`size()] 等于 [`str.size()] 的原值，[`capacity()] 为至少与
[`size()] 一样大的值，且 [`get_allocator()] 等于 [`alloc]。

[:en] In the second form, [`str] is left in a valid state with an unspecified
value.
[:zh_CN] 第二种形式中，[`str] 被遗留处于具有为指明的值的有效状态。

[para:throws]
[:en] The second form throws nothing if [`alloc == str.get_allocator()].
[:zh_CN] 当 [`alloc == str.get_allocator()] 时，第二种形式不抛出任何异常。
[exit:description]

[codeblock:declaration]
template<class InputIterator,
         class Allocator = allocator<typename iterator_traits<InputIterator>::value_type>>
  basic_string(InputIterator, InputIterator, Allocator = Allocator())
    -> basic_string<typename iterator_traits<InputIterator>::value_type,
                    char_traits<typename iterator_traits<InputIterator>::value_type>,
                    Allocator>;
[codeblock:end]

[enter:description]
[para:remarks]
[:en] Shall not participate in overload resolution if [`InputIterator] is a type
that does not qualify as an input iterator, or if [`Allocator] is a type that
does not qualify as an allocator ([#container.requirements.general]).
[:zh_CN] 当 [`InputIterator] 是不能作为输入迭代器的类型，或当 [`Allocator] 是
不能作为分配器的类型（[#container.requirements.general]）时，不能参与重载决议。
[exit:description]

[codeblock:declaration [!:mark SeeBelow] ]
template<class charT,
         class traits,
         class Allocator = allocator<charT>>
  explicit basic_string(basic_string_view<charT, traits>, const Allocator& = Allocator())
    -> basic_string<charT, traits, Allocator>;

template<class charT,
         class traits,
         class Allocator = allocator<charT>>
  basic_string(basic_string_view<charT, traits>,
               typename [=SeeBelow]::size_type, typename [=SeeBelow]::size_type,
               const Allocator& = Allocator())
    -> basic_string<charT, traits, Allocator>;
[codeblock:end]

[enter:description]
[para:remarks]
[:en] Shall not participate in overload resolution if [`Allocator] is a type
that does not qualify as an allocator ([#container.requirements.general]).
[:zh_CN] 当 [`Allocator] 不能被当做分配器（[#container.requirements.general]）的
类型时，不能参与重载决议。
[exit:description]

[%@library operator=[!basic_string]]
[%@library basic_string[!operator=]]
[codeblock:declaration]
basic_string& operator=(const basic_string& str);
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。

[para:postconditions]
[:en] If [`*this] and [`str] are the same object, the member has no effect.
[:zh_CN] 如果 [`*this] 和 [`str] 为同一个对象，则该成员没有效果。

[:en] Otherwise, [`data()] points at the first element of an allocated copy of
the array whose first element is pointed at by [`str.data()], [`size()] is equal
to [`str.size()], and [`capacity()] is a value at least as large as [`size()].
[:zh_CN] 否则，[`data()] 指向由 [`str.data()] 指向其第一个元素的数组的已分配副本
的第一个元素，[`size()] 等于 [`str.size()]，且 [`capacity()] 为至少与 [`size()]
一样大的值。
[exit:description]

[%@library operator=[!basic_string]]
[%@library basic_string[!operator=]]
[codeblock:declaration]
basic_string& operator=(basic_string&& str)
  noexcept(allocator_traits<Allocator>::propagate_on_container_move_assignment::value ||
           allocator_traits<Allocator>::is_always_equal::value);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Move assigns as a sequence container ([#container.requirements]), except
that iterators, pointers and references may be invalidated.
[:zh_CN] 同序列容器（[#container.requirements]）一样进行移动赋值，但其迭代器、
指针和引用可能会失效。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[exit:description]

[%@library operator=[!basic_string]]
[%@library basic_string[!operator=]]
[codeblock:declaration]
template<class T>
  basic_string& operator=(const T& t);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于

[codeblock:notation]
{
  basic_string_view<charT, traits> sv = t;
  return assign(sv);
}
[codeblock:end]

[para:remarks]
[:en] This function shall not participate in overload resolution unless
[:zh_CN] 除非符合以下条件，否则这个函数不能参与重载决议

[list]
[item]
[:en] [`is_convertible_v<const T&, basic_string_view<charT, traits>>] is [`true]
and
[:zh_CN] [`is_convertible_v<const T&, basic_string_view<charT, traits>>] 为
[`true]，并且
[item]
[:en] [`is_convertible_v<const T&, const charT*>] is [`false].
[:zh_CN] [`is_convertible_v<const T&, const charT*>] 为 [`false]。
[list:end]
[exit:description]

[%@library operator=[!basic_string]]
[%@library basic_string[!operator=]]
[codeblock:declaration]
basic_string& operator=(const charT* s);
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`*this = basic_string(s)].
[:zh_CN] [`*this = basic_string(s)]。

[para:remarks]
[%@library length[!char_traits]]
[:en] Uses [`traits::length()].
[:zh_CN] 使用了 [`traits::length()]。
[exit:description]

[%@library operator=[!basic_string]]
[%@library basic_string[!operator=]]
[codeblock:declaration]
basic_string& operator=(charT c);
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`*this = basic_string(1, c)].
[:zh_CN] [`*this = basic_string(1, c)]。
[exit:description]

[%@library operator=[!basic_string]]
[%@library basic_string[!operator=]]
[codeblock:declaration]
basic_string& operator=(initializer_list<charT> il);
[codeblock:end]

[enter:description]
[para:effects]
[:en] As if by: [`*this = basic_string(il);]
[:zh_CN] 如同执行：[`*this = basic_string(il);]

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[exit:description]
