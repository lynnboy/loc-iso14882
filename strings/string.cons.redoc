[section#string.cons
    [:en] Constructors and assignment operators
    [:zh_CN] 构造函数与赋值运算符
]

[%@library basic_string[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
explicit basic_string(const Allocator& a) noexcept;
[codeblock:end]

[enter:description]
[para:ensures]
[:en] [`size()] is equal to [`0].
[:zh_CN] [`size()] 等于 [`0]。
[exit:description]

[%@library basic_string[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
basic_string(const basic_string& str);
basic_string(basic_string&& str) noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Constructs an object whose value is that of [`str] prior to this call.
[:zh_CN] 构造一个对象，其值为本次调用之前 [`str] 的值。

[para:remarks]
[:en] In the second form, [`str] is left in a valid but unspecified state.
[:zh_CN] 第二种形式中，[`str] 被遗留处于有效但未指明的状态。
[exit:description]

[%@library basic_string[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
basic_string(const basic_string& str, size_type pos,
             const Allocator& a = Allocator());
basic_string(const basic_string& str, size_type pos, size_type n,
             const Allocator& a = Allocator());
[codeblock:end]

[enter:description]
[para:effects]
[:en] Let [`n] be [`npos] for the first overload.
[:zh_CN] 令 [`n] 对于第一个重载为 [`npos]。

[:en] Equivalent to:
[:zh_CN] 等价于：

[codeblock:notation]
basic_string(basic_string_view<charT, traits>(str).substr(pos, n), a)
[codeblock:end]
[exit:description]

[%@library basic_string[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
template<class T>
  basic_string(const T& t, size_type pos, size_type n, const Allocator& a = Allocator());
[codeblock:end]

[enter:description]
[para:constraints]
[:en] [`is_convertible_v<const T&, basic_string_view<charT, traits>>] is [`true].
[:zh_CN] [`is_convertible_v<const T&, basic_string_view<charT, traits>>] 为
[`true]。

[para:effects]
[:en] Creates a variable, [`sv], as if by
[`basic_string_view<charT, traits> sv = t;] and then behaves the same as:
[:zh_CN] 如同以 [`basic_string_view<charT, traits> sv = t;] 来创建一个变量 [`sv]
，然后产生如下行为：

[codeblock:notation]
basic_string(sv.substr(pos, n), a);
[codeblock:end]
[exit:description]

[%@library basic_string[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
template<class T>
  explicit basic_string(const T& t, const Allocator& a = Allocator());
[codeblock:end]

[enter:description]
[para:constraints]
[list]
[item]
[:en] [`is_convertible_v<const T&, basic_string_view<charT, traits>>] is [`true]
and
[:zh_CN] [`is_convertible_v<const T&, basic_string_view<charT, traits>>] 为
[`true]，并且
[item]
[:en] [`is_convertible_v<const T&, const charT*>] is [`false].
[:zh_CN] [`is_convertible_v<const T&, const charT*>] 为 [`false]。
[list:end]

[para:effects]
[:en] Creates a variable, [`sv], as if by
[`basic_string_view<charT, traits> sv = t;] and then behaves the same as
[`basic_string(sv.data(), sv.size(), a)].
[:zh_CN] 如同以 [`basic_string_view<charT, traits> sv = t;] 创建一个变量 [`sv]，
然后其行为与 [`basic_string(sv.data(), sv.size(), a)] 相同。
[exit:description]

[%@library basic_string[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
basic_string(const charT* s, size_type n, const Allocator& a = Allocator());
[codeblock:end]

[enter:description]
[para:expects]
[:en] [=range(s,s + n)] is a valid range.
[:zh_CN] [=range(s,s + n)] 为有效范围。

[para:effects]
[:en] Constructs an object whose initial value is the range [=range(s,s + n)].
[:zh_CN] 构造一个对象，其初始值为范围 [=range(s,s + n)]。

[para:ensures]
[:en] [`size()] is equal to [`n], and [`traits::compare(data(), s, n)] is equal
to [`0].
[:zh_CN] [`size()] 等于 [`n]，且 [`traits::compare(data(), s, n)] 等于 [`0]。
[exit:description]

[%@library basic_string[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
basic_string(const charT* s, const Allocator& a = Allocator());
[codeblock:end]

[enter:description]
[para:constraints]
[:en] [`Allocator] is a type that qualifies as an allocator
([#container.requirements.general]).
[:zh_CN] [`Allocator] 是可被当做分配器（[#container.requirements.general]）的
类型。

[enter:note]
[:en] This affects class template argument deduction.
[:zh_CN] 这会影响类模板实参推断。
[exit:note]

[para:effects]
[:en] Equivalent to: [`basic_string(s, traits::length(s), a)].
[:zh_CN] 等价于：[`basic_string(s, traits::length(s), a)]。
[exit:description]

[%@library basic_string[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
basic_string(size_type n, charT c, const Allocator& a = Allocator());
[codeblock:end]

[enter:description]
[para:constraints]
[:en] [`Allocator] is a type that qualifies as an allocator
([#container.requirements.general]).
[:zh_CN] [`Allocator] 是可被当做分配器（[#container.requirements.general]）的
类型。

[enter:note]
[:en] This affects class template argument deduction.
[:zh_CN] 这会影响类模板实参推断。
[exit:note]

[para:effects]
[:en] Constructs an object whose value consists of [`n] copies of [`c].
[:zh_CN] 构造一个对象，其值由 [`n] 个 [`c] 的副本所构成。
[exit:description]

[%@library basic_string[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
template<class InputIterator>
  basic_string(InputIterator begin, InputIterator end, const Allocator& a = Allocator());
[codeblock:end]

[enter:description]
[para:constraints]
[:en] [`InputIterator] is a type that qualifies as an input iterator
([#container.requirements.general]).
[:zh_CN] [`InputIterator] 是可以被当做输入迭代器
（[#container.requirements.general]）的类型。

[para:effects]
[:en] Constructs a string from the values in the range [=range(begin,end)], as
indicated in [#:tab container.seq.req].
[:zh_CN] 从范围 [=range(begin,end)] 中的值构造一个字符串，如
[#:tab container.seq.req] 所述。
[exit:description]

[%@library basic_string[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
basic_string(initializer_list<charT> il, const Allocator& a = Allocator());
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to [`basic_string(il.begin(), il.end(), a)].
[:zh_CN] 等价于 [`basic_string(il.begin(), il.end(), a)]。
[exit:description]

[%@library basic_string[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
basic_string(const basic_string& str, const Allocator& alloc);
basic_string(basic_string&& str, const Allocator& alloc);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Constructs an object whose value is that of [`str] prior to this call.
[:zh_CN] 构造一个对象，其值为本次调用之前 [`str] 的值。

[:en] The stored allocator is constructed from [`alloc].
[:zh_CN] 以 [`alloc] 来构造其所存储的分配器。

[:en] In the second form, [`str] is left in a valid but unspecified state.
[:zh_CN] 第二种形式中，[`str] 被遗留处于有效但未指明的状态。

[para:throws]
[:en] The second form throws nothing if [`alloc == str.get_allocator()].
[:zh_CN] 当 [`alloc == str.get_allocator()] 时，第二种形式不抛出任何异常。
[exit:description]

[codeblock:declaration]
template<class InputIterator,
         class Allocator = allocator<typename iterator_traits<InputIterator>::value_type>>
  basic_string(InputIterator, InputIterator, Allocator = Allocator())
    -> basic_string<typename iterator_traits<InputIterator>::value_type,
                    char_traits<typename iterator_traits<InputIterator>::value_type>,
                    Allocator>;
[codeblock:end]

[enter:description]
[para:constraints]
[:en] [`InputIterator] is a type that qualifies as an input iterator, and
[`Allocator] is a type that qualifies as an allocator
([#container.requirements.general]).
[:zh_CN] [`InputIterator] 是可被当做输入迭代器的类型，且 [`Allocator] 是可被当做
分配器（[#container.requirements.general]）的类型。
[exit:description]

[codeblock:declaration [!:mark SeeBelow] ]
template<class charT,
         class traits,
         class Allocator = allocator<charT>>
  explicit basic_string(basic_string_view<charT, traits>, const Allocator& = Allocator())
    -> basic_string<charT, traits, Allocator>;

template<class charT,
         class traits,
         class Allocator = allocator<charT>>
  basic_string(basic_string_view<charT, traits>,
               typename [=SeeBelow]::size_type, typename [=SeeBelow]::size_type,
               const Allocator& = Allocator())
    -> basic_string<charT, traits, Allocator>;
[codeblock:end]

[enter:description]
[para:constraints]
[:en] [`Allocator] is a type that qualifies as an allocator
([#container.requirements.general]).
[:zh_CN] [`Allocator] 是可被当做分配器（[#container.requirements.general]）的
类型。
[exit:description]

[%@library operator=[!basic_string]]
[%@library basic_string[!operator=]]
[codeblock:declaration]
basic_string& operator=(const basic_string& str);
[codeblock:end]

[enter:description]
[para:effects]
[:en] If [`*this] and [`str] are the same object, has no effect.
[:zh_CN] 如果 [`*this] 和 [`str] 为同一个对象，则没有效果。

[:en] Otherwise, replace the value of [`*this] with a copy of [`str].
[:zh_CN] 否则，将 [`*this] 的值替换为 [`str] 的副本。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[exit:description]

[%@library operator=[!basic_string]]
[%@library basic_string[!operator=]]
[codeblock:declaration]
basic_string& operator=(basic_string&& str)
  noexcept(allocator_traits<Allocator>::propagate_on_container_move_assignment::value ||
           allocator_traits<Allocator>::is_always_equal::value);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Move assigns as a sequence container ([#container.requirements]), except
that iterators, pointers and references may be invalidated.
[:zh_CN] 同序列容器（[#container.requirements]）一样进行移动赋值，但其迭代器、
指针和引用可能会失效。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[exit:description]

[%@library operator=[!basic_string]]
[%@library basic_string[!operator=]]
[codeblock:declaration]
template<class T>
  basic_string& operator=(const T& t);
[codeblock:end]

[enter:description]
[para:constraints]
[list]
[item]
[:en] [`is_convertible_v<const T&, basic_string_view<charT, traits>>] is [`true]
and
[:zh_CN] [`is_convertible_v<const T&, basic_string_view<charT, traits>>] 为
[`true]，并且
[item]
[:en] [`is_convertible_v<const T&, const charT*>] is [`false].
[:zh_CN] [`is_convertible_v<const T&, const charT*>] 为 [`false]。
[list:end]

[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于
[codeblock:notation]
basic_string_view<charT, traits> sv = t;
return assign(sv);
[codeblock:end]
[exit:description]

[%@library operator=[!basic_string]]
[%@library basic_string[!operator=]]
[codeblock:declaration]
basic_string& operator=(const charT* s);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to: [`return *this = basic_string_view<charT, traits>(s);]
[:zh_CN] 等价于：[`return *this = basic_string_view<charT, traits>(s);]
[exit:description]

[%@library operator=[!basic_string]]
[%@library basic_string[!operator=]]
[codeblock:declaration]
basic_string& operator=(charT c);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock:notation]
return *this = basic_string_view<charT, traits>(addressof(c), 1);
[codeblock:end]
[exit:description]

[%@library operator=[!basic_string]]
[%@library basic_string[!operator=]]
[codeblock:declaration]
basic_string& operator=(initializer_list<charT> il);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to:
[:zh_CN] 等价于：
[codeblock:notation]
return *this = basic_string_view<charT, traits>(il.begin(), il.size());
[codeblock:end]
[exit:description]
