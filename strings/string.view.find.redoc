[section#string.view.find
    [:en] Searching
    [:zh_CN] 搜索
]

[para]
[:en] This section specifies the [`basic_string_view] member functions named
[`find], [`rfind], [`find_first_of], [`find_last_of], [`find_first_not_of], and
[`find_last_not_of].
[:zh_CN] 本小节描述 [`basic_string_view] 的名为 [`find]，[`rfind]，
[`find_first_of]，[`find_last_of]，[`find_first_not_of]，以及
[`find_last_not_of] 的各成员函数。

[para]
[:en] Member functions in this section have complexity
[$[=O]([`size() * str.size()])] at worst, although implementations are
encouraged to do better.
[:zh_CN] 本小节中的各成员函数的最差复杂度为
[$[=O]([`size() * str.size()])]，但鼓励实现做得更好。

[para]
[:en] Each member function of the form
[:zh_CN] 形式为

[codeblock:notation [!:var return-type F]]
constexpr [*return-type] [*F](const charT* s, size_type pos);
[codeblock:end]

[:en@~] is equivalent to [`return [*F](basic_string_view(s), pos);]
[:zh_CN@~] 的成员函数等价于 [`return [*F](basic_string_view(s), pos);]

[para]
[:en] Each member function of the form
[:zh_CN] 形式为

[codeblock:notation [!:var return-type F]]
constexpr [*return-type] [*F](const charT* s, size_type pos, size_type n);
[codeblock:end]

[:en@~] is equivalent to [`return [*F](basic_string_view(s, n), pos);]
[:zh_CN@~] 的成员函数等价于 [`return [*F](basic_string_view(s, n), pos);]

[para]
[:en] Each member function of the form
[:zh_CN] 形式为

[codeblock:notation [!:var return-type F]]
constexpr [*return-type] [*F](charT c, size_type pos);
[codeblock:end]

[:en@~] is equivalent to [`return [*F](basic_string_view(&c, 1), pos);]
[:zh_CN@~] 的成员函数等价于 [`return [*F](basic_string_view(&c, 1), pos);]

[%@library find[!basic_string_view]]
[%@library basic_string_view[!find]]
[codeblock:notation]
constexpr size_type find(basic_string_view str, size_type pos = 0) const noexcept;
[codeblock:end]

[enter:description]
[para]
[:en] Let [`xpos] be the lowest position, if possible, such that the following
conditions hold:
[:zh_CN] 令 [`xpos] 为（当可能时）使得以下各条件得以满足的最低位置：

[list]
[item]
[:] [`pos <= xpos]
[item]
[:] [`xpos + str.size() <= size()]
[item]
[:en] [`traits::eq(at(xpos + I), str.at(I))] for all elements [`I] of the string
referenced by [`str].
[:zh_CN] 对由 [`str] 所指代的字符串中的所有元素 [`I] 均有
[`traits::eq(at(xpos + I), str.at(I))]。
[list:end]

[para:effects]
[:en] Determines [`xpos].
[:zh_CN] 确定 [`xpos]。

[para:returns]
[:en] [`xpos] if the function can determine such a value for [`xpos].
[:zh_CN] 如果此函数可以为 [`xpos] 这样的值，则为 [`xpos]。

[:en] Otherwise, returns [`npos].
[:zh_CN] 否则，返回 [`npos]。
[exit:description]

[%@library rfind[!basic_string_view]]
[%@library basic_string_view[!rfind]]
[codeblock:notation]
constexpr size_type rfind(basic_string_view str, size_type pos = npos) const noexcept;
[codeblock:end]

[enter:description]
[para]
[:en] Let [`xpos] be the highest position, if possible, such that the following
conditions hold:
[:zh_CN] 令 [`xpos] 为（当可能时）使得以下各条件得以满足的最高位置：

[list]
[item]
[:] [`xpos <= pos]
[item]
[:] [`xpos + str.size() <= size()]
[item]
[:en] [`traits::eq(at(xpos + I), str.at(I))] for all elements [`I] of the string
referenced by [`str].
[:zh_CN] 对由 [`str] 所指代的字符串中的所有元素 [`I] 均有
[`traits::eq(at(xpos + I), str.at(I))]。
[list:end]

[para:effects]
[:en] Determines [`xpos].
[:zh_CN] 确定 [`xpos]。

[para:returns]
[:en] [`xpos] if the function can determine such a value for [`xpos].
[:zh_CN] 如果此函数可以为 [`xpos] 这样的值，则为 [`xpos]。

[:en] Otherwise, returns [`npos].
[:zh_CN] 否则，返回 [`npos]。
[exit:description]

[%@library find_first_of[!basic_string_view]]
[%@library basic_string_view[!find_first_of]]
[codeblock:notation]
constexpr size_type find_first_of(basic_string_view str, size_type pos = 0) const noexcept;
[codeblock:end]

[enter:description]
[para]
[:en] Let [`xpos] be the lowest position, if possible, such that the following
conditions hold:
[:zh_CN] 令 [`xpos] 为（当可能时）使得以下各条件得以满足的最低位置：

[list]
[item]
[:] [`pos <= xpos]
[item]
[:] [`xpos < size()]
[item]
[:en] [`traits::eq(at(xpos), str.at(I))] for some element [`I] of the string
referenced by [`str].
[:zh_CN] 由 [`str] 所指代的字符串中存在某个元素 [`I] 使得
[`traits::eq(at(xpos), str.at(I))]。
[list:end]

[para:effects]
[:en] Determines [`xpos].
[:zh_CN] 确定 [`xpos]。

[para:returns]
[:en] [`xpos] if the function can determine such a value for [`xpos].
[:zh_CN] 如果此函数可以为 [`xpos] 这样的值，则为 [`xpos]。

[:en] Otherwise, returns [`npos].
[:zh_CN] 否则，返回 [`npos]。
[exit:description]

[%@library find_last_of[!basic_string_view]]
[%@library basic_string_view[!find_last_of]]
[codeblock:notation]
constexpr size_type find_last_of(basic_string_view str, size_type pos = npos) const noexcept;
[codeblock:end]

[enter:description]
[para]
[:en] Let [`xpos] be the highest position, if possible, such that the following
conditions hold:
[:zh_CN] 令 [`xpos] 为（当可能时）使得以下各条件得以满足的最高位置：

[list]
[item]
[:] [`xpos <= pos]
[item]
[:] [`xpos < size()]
[item]
[:en] [`traits::eq(at(xpos), str.at(I))] for some element [`I] of the string
referenced by [`str].
[:zh_CN] 由 [`str] 所指代的字符串中存在某个元素 [`I] 使得
[`traits::eq(at(xpos), str.at(I))]。
[list:end]

[para:effects]
[:en] Determines [`xpos].
[:zh_CN] 确定 [`xpos]。

[para:returns]
[:en] [`xpos] if the function can determine such a value for [`xpos].
[:zh_CN] 如果此函数可以为 [`xpos] 这样的值，则为 [`xpos]。

[:en] Otherwise, returns [`npos].
[:zh_CN] 否则，返回 [`npos]。
[exit:description]

[%@library find_first_not_of[!basic_string_view]]
[%@library basic_string_view[!find_first_not_of]]
[codeblock:notation]
constexpr size_type find_first_not_of(basic_string_view str, size_type pos = 0) const noexcept;
[codeblock:end]

[enter:description]
[para]
[:en] Let [`xpos] be the lowest position, if possible, such that the following
conditions hold:
[:zh_CN] 令 [`xpos] 为（当可能时）使得以下各条件得以满足的最低位置：

[list]
[item]
[:] [`pos <= xpos]
[item]
[:] [`xpos < size()]
[item]
[:en] [`traits::eq(at(xpos), str.at(I))] for no element [`I] of the string
referenced by [`str].
[:zh_CN] 由 [`str] 所指代的字符串中不存在元素 [`I] 使得
[`traits::eq(at(xpos), str.at(I))]。
[list:end]

[para:effects]
[:en] Determines [`xpos].
[:zh_CN] 确定 [`xpos]。

[para:returns]
[:en] [`xpos] if the function can determine such a value for [`xpos].
[:zh_CN] 如果此函数可以为 [`xpos] 这样的值，则为 [`xpos]。

[:en] Otherwise, returns [`npos].
[:zh_CN] 否则，返回 [`npos]。
[exit:description]

[%@library find_last_not_of[!basic_string_view]]
[%@library basic_string_view[!find_last_not_of]]
[codeblock:notation]
constexpr size_type find_last_not_of(basic_string_view str, size_type pos = npos) const noexcept;
[codeblock:end]

[enter:description]
[para]
[:en] Let [`xpos] be the highest position, if possible, such that the following
conditions hold:
[:zh_CN] 令 [`xpos] 为（当可能时）使得以下各条件得以满足的最高位置：

[list]
[item]
[:] [`xpos <= pos]
[item]
[:] [`xpos < size()]
[item]
[:en] [`traits::eq(at(xpos), str.at(I))] for no element [`I] of the string
referenced by [`str].
[:zh_CN] 由 [`str] 所指代的字符串中不存在元素 [`I] 使得
[`traits::eq(at(xpos), str.at(I))]。
[list:end]

[para:effects]
[:en] Determines [`xpos].
[:zh_CN] 确定 [`xpos]。

[para:returns]
[:en] [`xpos] if the function can determine such a value for [`xpos].
[:zh_CN] 如果此函数可以为 [`xpos] 这样的值，则为 [`xpos]。

[:en] Otherwise, returns [`npos].
[:zh_CN] 否则，返回 [`npos]。
[exit:description]
