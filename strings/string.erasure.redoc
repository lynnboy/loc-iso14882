[section#string.erasure
    [:en] Erasure
    [:zh_CN] 擦除
]

[%@library erase[!basic_string]]
[codeblock:declaration]
template<class charT, class traits, class Allocator, class U>
  void erase(basic_string<charT, traits, Allocator>& c, const U& value);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to: [`c.erase(remove(c.begin(), c.end(), value), c.end());]
[:zh_CN] 等价于：[`c.erase(remove(c.begin(), c.end(), value), c.end());]
[exit:description]

[%@library erase_if[!basic_string]]
[codeblock:declaration]
template<class charT, class traits, class Allocator, class Predicate>
  void erase_if(basic_string<charT, traits, Allocator>& c, Predicate pred);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to: [`c.erase(remove_if(c.begin(), c.end(), pred), c.end());]
[:zh_CN] 等价于：[`c.erase(remove_if(c.begin(), c.end(), pred), c.end());]
[exit:description]
